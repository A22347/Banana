
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 25 bf 00 00       	call   c000bf45 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 e9 01 00       	call   c001ea08 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 f5 01 c0       	mov    ebx,0xc001f592
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c f5 01 c0    	cmp    ebx,0xc001f59c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec 31 02 c0       	mov    eax,0xc00231ec
c0000049:	3d ec 31 02 c0       	cmp    eax,0xc00231ec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec 31 02 c0       	push   0xc00231ec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec 31 02 c0       	mov    eax,0xc00231ec
c0000075:	2d ec 31 02 c0       	sub    eax,0xc00231ec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec 31 02 c0       	push   0xc00231ec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 8c 33 02 c0 00 	cmp    BYTE PTR ds:0xc002338c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 f5 01 c0       	mov    ebx,0xc001f5a4
c00000bb:	81 eb a0 f5 01 c0    	sub    ebx,0xc001f5a0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 f5 01 c0       	mov    esi,0xc001f5a0
c00000ca:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 90 33 02 c0       	mov    ds:0xc0023390,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec 31 02 c0       	push   0xc00231ec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 8c 33 02 c0 01 	mov    BYTE PTR ds:0xc002338c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 94 33 02 c0       	push   0xc0023394
c000012c:	68 ec 31 02 c0       	push   0xc00231ec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 a9 eb 00 00       	call   c000ee08 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 bb 75 01 00       	call   c0017824 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 a7 79 01 00       	call   c0017c37 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 4d 81 01 00       	call   c00183e6 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 7c 75 01 00       	call   c0017824 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 d0 37 02 c0 	lgdtd  ds:0xc00237d0
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 d5 0c 01 c0       	mov    ecx,0xc0010cd5
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 d5 0c 01 c0       	mov    ecx,0xc0010cd5
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ac 33 02 c0    	mov    ebx,DWORD PTR ds:0xc00233ac
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 ac 33 02 c0       	mov    ds:0xc00233ac,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ac 33 02 c0    	mov    DWORD PTR ds:0xc00233ac,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	83 ec 08             	sub    esp,0x8
c00006ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006af:	e8 4d ad 00 00       	call   c000b401 <debug_strcpy>
c00006b4:	31 d2                	xor    edx,edx
c00006b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00006ba:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00006bd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00006c0:	84 c0                	test   al,al
c00006c2:	74 06                	je     c00006ca <strcpy+0x23>
c00006c4:	88 04 13             	mov    BYTE PTR [ebx+edx*1],al
c00006c7:	42                   	inc    edx
c00006c8:	eb ec                	jmp    c00006b6 <strcpy+0xf>
c00006ca:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006cd:	89 d8                	mov    eax,ebx
c00006cf:	83 c4 08             	add    esp,0x8
c00006d2:	5b                   	pop    ebx
c00006d3:	c3                   	ret    

c00006d4 <strncpy>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006e2:	89 c3                	mov    ebx,eax
c00006e4:	85 c9                	test   ecx,ecx
c00006e6:	74 1a                	je     c0000702 <strncpy+0x2e>
c00006e8:	46                   	inc    esi
c00006e9:	43                   	inc    ebx
c00006ea:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006ed:	49                   	dec    ecx
c00006ee:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006f1:	84 d2                	test   dl,dl
c00006f3:	75 ef                	jne    c00006e4 <strncpy+0x10>
c00006f5:	31 d2                	xor    edx,edx
c00006f7:	39 d1                	cmp    ecx,edx
c00006f9:	74 07                	je     c0000702 <strncpy+0x2e>
c00006fb:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006ff:	42                   	inc    edx
c0000700:	eb f5                	jmp    c00006f7 <strncpy+0x23>
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	c3                   	ret    

c0000705 <strcmp>:
c0000705:	31 c9                	xor    ecx,ecx
c0000707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000070b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000070f:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000713:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c0000717:	38 d0                	cmp    al,dl
c0000719:	75 08                	jne    c0000723 <strcmp+0x1e>
c000071b:	41                   	inc    ecx
c000071c:	84 c0                	test   al,al
c000071e:	75 e7                	jne    c0000707 <strcmp+0x2>
c0000720:	31 c0                	xor    eax,eax
c0000722:	c3                   	ret    
c0000723:	29 d0                	sub    eax,edx
c0000725:	c3                   	ret    

c0000726 <strchr>:
c0000726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000072a:	8a 10                	mov    dl,BYTE PTR [eax]
c000072c:	84 d2                	test   dl,dl
c000072e:	74 09                	je     c0000739 <strchr+0x13>
c0000730:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000734:	74 05                	je     c000073b <strchr+0x15>
c0000736:	40                   	inc    eax
c0000737:	eb f1                	jmp    c000072a <strchr+0x4>
c0000739:	31 c0                	xor    eax,eax
c000073b:	c3                   	ret    

c000073c <strncmp>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000074a:	01 d6                	add    esi,edx
c000074c:	39 f2                	cmp    edx,esi
c000074e:	74 12                	je     c0000762 <strncmp+0x26>
c0000750:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000753:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000756:	38 c8                	cmp    al,cl
c0000758:	75 0c                	jne    c0000766 <strncmp+0x2a>
c000075a:	42                   	inc    edx
c000075b:	84 c0                	test   al,al
c000075d:	74 03                	je     c0000762 <strncmp+0x26>
c000075f:	43                   	inc    ebx
c0000760:	eb ea                	jmp    c000074c <strncmp+0x10>
c0000762:	31 c0                	xor    eax,eax
c0000764:	eb 02                	jmp    c0000768 <strncmp+0x2c>
c0000766:	29 c8                	sub    eax,ecx
c0000768:	5b                   	pop    ebx
c0000769:	5e                   	pop    esi
c000076a:	c3                   	ret    

c000076b <strcat>:
c000076b:	53                   	push   ebx
c000076c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000770:	89 c1                	mov    ecx,eax
c0000772:	8d 51 01             	lea    edx,[ecx+0x1]
c0000775:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000779:	74 04                	je     c000077f <strcat+0x14>
c000077b:	89 d1                	mov    ecx,edx
c000077d:	eb f3                	jmp    c0000772 <strcat+0x7>
c000077f:	31 d2                	xor    edx,edx
c0000781:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000785:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000788:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000078b:	42                   	inc    edx
c000078c:	84 db                	test   bl,bl
c000078e:	75 f1                	jne    c0000781 <strcat+0x16>
c0000790:	5b                   	pop    ebx
c0000791:	c3                   	ret    

c0000792 <strncat>:
c0000792:	56                   	push   esi
c0000793:	53                   	push   ebx
c0000794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000798:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000079c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007a0:	89 c2                	mov    edx,eax
c00007a2:	85 db                	test   ebx,ebx
c00007a4:	74 23                	je     c00007c9 <strncat+0x37>
c00007a6:	8d 72 01             	lea    esi,[edx+0x1]
c00007a9:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007ad:	74 04                	je     c00007b3 <strncat+0x21>
c00007af:	89 f2                	mov    edx,esi
c00007b1:	eb f3                	jmp    c00007a6 <strncat+0x14>
c00007b3:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007b6:	41                   	inc    ecx
c00007b7:	42                   	inc    edx
c00007b8:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007bb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007be:	84 db                	test   bl,bl
c00007c0:	74 07                	je     c00007c9 <strncat+0x37>
c00007c2:	39 f1                	cmp    ecx,esi
c00007c4:	75 f0                	jne    c00007b6 <strncat+0x24>
c00007c6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007c9:	5b                   	pop    ebx
c00007ca:	5e                   	pop    esi
c00007cb:	c3                   	ret    

c00007cc <strstr>:
c00007cc:	57                   	push   edi
c00007cd:	56                   	push   esi
c00007ce:	53                   	push   ebx
c00007cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007d7:	57                   	push   edi
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	59                   	pop    ecx
c00007de:	89 c6                	mov    esi,eax
c00007e0:	85 c0                	test   eax,eax
c00007e2:	74 1f                	je     c0000803 <strstr+0x37>
c00007e4:	53                   	push   ebx
c00007e5:	e8 3b fe ff ff       	call   c0000625 <strlen>
c00007ea:	5a                   	pop    edx
c00007eb:	39 f0                	cmp    eax,esi
c00007ed:	72 12                	jb     c0000801 <strstr+0x35>
c00007ef:	56                   	push   esi
c00007f0:	57                   	push   edi
c00007f1:	53                   	push   ebx
c00007f2:	e8 78 fd ff ff       	call   c000056f <memcmp>
c00007f7:	83 c4 0c             	add    esp,0xc
c00007fa:	85 c0                	test   eax,eax
c00007fc:	74 05                	je     c0000803 <strstr+0x37>
c00007fe:	43                   	inc    ebx
c00007ff:	eb e3                	jmp    c00007e4 <strstr+0x18>
c0000801:	31 db                	xor    ebx,ebx
c0000803:	89 d8                	mov    eax,ebx
c0000805:	5b                   	pop    ebx
c0000806:	5e                   	pop    esi
c0000807:	5f                   	pop    edi
c0000808:	c3                   	ret    

c0000809 <toupper>:
c0000809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000080d:	0f b6 d0             	movzx  edx,al
c0000810:	f6 82 c0 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0a40],0x2
c0000817:	74 03                	je     c000081c <toupper+0x13>
c0000819:	83 e8 20             	sub    eax,0x20
c000081c:	c3                   	ret    

c000081d <tolower>:
c000081d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000821:	0f b6 d0             	movzx  edx,al
c0000824:	f6 82 c0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a40],0x1
c000082b:	74 03                	je     c0000830 <tolower+0x13>
c000082d:	83 c0 20             	add    eax,0x20
c0000830:	c3                   	ret    

c0000831 <simple_strtoul>:
c0000831:	55                   	push   ebp
c0000832:	57                   	push   edi
c0000833:	56                   	push   esi
c0000834:	53                   	push   ebx
c0000835:	83 ec 08             	sub    esp,0x8
c0000838:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000083c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000840:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000843:	f6 82 c0 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0a40],0x8
c000084a:	74 03                	je     c000084f <simple_strtoul+0x1e>
c000084c:	41                   	inc    ecx
c000084d:	eb f1                	jmp    c0000840 <simple_strtoul+0xf>
c000084f:	80 fa 09             	cmp    dl,0x9
c0000852:	74 f8                	je     c000084c <simple_strtoul+0x1b>
c0000854:	80 fa 2d             	cmp    dl,0x2d
c0000857:	75 0b                	jne    c0000864 <simple_strtoul+0x33>
c0000859:	41                   	inc    ecx
c000085a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000862:	eb 0e                	jmp    c0000872 <simple_strtoul+0x41>
c0000864:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000086c:	80 fa 2b             	cmp    dl,0x2b
c000086f:	75 01                	jne    c0000872 <simple_strtoul+0x41>
c0000871:	41                   	inc    ecx
c0000872:	85 f6                	test   esi,esi
c0000874:	75 22                	jne    c0000898 <simple_strtoul+0x67>
c0000876:	be 0a 00 00 00       	mov    esi,0xa
c000087b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000087e:	75 5a                	jne    c00008da <simple_strtoul+0xa9>
c0000880:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000884:	50                   	push   eax
c0000885:	e8 93 ff ff ff       	call   c000081d <tolower>
c000088a:	5a                   	pop    edx
c000088b:	83 f8 78             	cmp    eax,0x78
c000088e:	74 03                	je     c0000893 <simple_strtoul+0x62>
c0000890:	41                   	inc    ecx
c0000891:	eb 16                	jmp    c00008a9 <simple_strtoul+0x78>
c0000893:	83 c1 02             	add    ecx,0x2
c0000896:	eb 22                	jmp    c00008ba <simple_strtoul+0x89>
c0000898:	8d 46 fe             	lea    eax,[esi-0x2]
c000089b:	83 f8 22             	cmp    eax,0x22
c000089e:	0f 87 b7 00 00 00    	ja     c000095b <simple_strtoul+0x12a>
c00008a4:	83 fe 08             	cmp    esi,0x8
c00008a7:	75 0c                	jne    c00008b5 <simple_strtoul+0x84>
c00008a9:	be 08 00 00 00       	mov    esi,0x8
c00008ae:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b1:	75 27                	jne    c00008da <simple_strtoul+0xa9>
c00008b3:	eb 1f                	jmp    c00008d4 <simple_strtoul+0xa3>
c00008b5:	83 fe 10             	cmp    esi,0x10
c00008b8:	75 20                	jne    c00008da <simple_strtoul+0xa9>
c00008ba:	be 10 00 00 00       	mov    esi,0x10
c00008bf:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008c2:	75 16                	jne    c00008da <simple_strtoul+0xa9>
c00008c4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008c8:	50                   	push   eax
c00008c9:	e8 4f ff ff ff       	call   c000081d <tolower>
c00008ce:	5d                   	pop    ebp
c00008cf:	83 f8 78             	cmp    eax,0x78
c00008d2:	74 03                	je     c00008d7 <simple_strtoul+0xa6>
c00008d4:	41                   	inc    ecx
c00008d5:	eb 03                	jmp    c00008da <simple_strtoul+0xa9>
c00008d7:	83 c1 02             	add    ecx,0x2
c00008da:	31 ed                	xor    ebp,ebp
c00008dc:	31 db                	xor    ebx,ebx
c00008de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008e5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008e7:	84 d2                	test   dl,dl
c00008e9:	74 27                	je     c0000912 <simple_strtoul+0xe1>
c00008eb:	0f b6 fa             	movzx  edi,dl
c00008ee:	f6 87 c0 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0a40],0x4
c00008f5:	74 05                	je     c00008fc <simple_strtoul+0xcb>
c00008f7:	83 ef 30             	sub    edi,0x30
c00008fa:	eb 22                	jmp    c000091e <simple_strtoul+0xed>
c00008fc:	0f be d2             	movsx  edx,dl
c00008ff:	52                   	push   edx
c0000900:	e8 04 ff ff ff       	call   c0000809 <toupper>
c0000905:	5f                   	pop    edi
c0000906:	0f b6 d0             	movzx  edx,al
c0000909:	f6 82 c0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a40],0x1
c0000910:	75 09                	jne    c000091b <simple_strtoul+0xea>
c0000912:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000917:	75 2d                	jne    c0000946 <simple_strtoul+0x115>
c0000919:	eb 57                	jmp    c0000972 <simple_strtoul+0x141>
c000091b:	8d 78 c9             	lea    edi,[eax-0x37]
c000091e:	39 f7                	cmp    edi,esi
c0000920:	73 f0                	jae    c0000912 <simple_strtoul+0xe1>
c0000922:	31 d2                	xor    edx,edx
c0000924:	89 f8                	mov    eax,edi
c0000926:	f7 d0                	not    eax
c0000928:	f7 f6                	div    esi
c000092a:	39 d8                	cmp    eax,ebx
c000092c:	72 0e                	jb     c000093c <simple_strtoul+0x10b>
c000092e:	0f af de             	imul   ebx,esi
c0000931:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000938:	01 fb                	add    ebx,edi
c000093a:	eb 07                	jmp    c0000943 <simple_strtoul+0x112>
c000093c:	bd 01 00 00 00       	mov    ebp,0x1
c0000941:	31 db                	xor    ebx,ebx
c0000943:	41                   	inc    ecx
c0000944:	eb 9f                	jmp    c00008e5 <simple_strtoul+0xb4>
c0000946:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000949:	09 d8                	or     eax,ebx
c000094b:	75 1f                	jne    c000096c <simple_strtoul+0x13b>
c000094d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000951:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000955:	31 db                	xor    ebx,ebx
c0000957:	89 38                	mov    DWORD PTR [eax],edi
c0000959:	eb 17                	jmp    c0000972 <simple_strtoul+0x141>
c000095b:	31 db                	xor    ebx,ebx
c000095d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000962:	74 14                	je     c0000978 <simple_strtoul+0x147>
c0000964:	31 ed                	xor    ebp,ebp
c0000966:	85 c9                	test   ecx,ecx
c0000968:	75 e3                	jne    c000094d <simple_strtoul+0x11c>
c000096a:	31 db                	xor    ebx,ebx
c000096c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000970:	89 08                	mov    DWORD PTR [eax],ecx
c0000972:	4d                   	dec    ebp
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x147>
c0000975:	83 cb ff             	or     ebx,0xffffffff
c0000978:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000097d:	75 02                	jne    c0000981 <simple_strtoul+0x150>
c000097f:	f7 db                	neg    ebx
c0000981:	83 c4 08             	add    esp,0x8
c0000984:	89 d8                	mov    eax,ebx
c0000986:	5b                   	pop    ebx
c0000987:	5e                   	pop    esi
c0000988:	5f                   	pop    edi
c0000989:	5d                   	pop    ebp
c000098a:	c3                   	ret    

c000098b <largebin_index>:
c000098b:	89 c2                	mov    edx,eax
c000098d:	c1 ea 08             	shr    edx,0x8
c0000990:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000996:	77 10                	ja     c00009a8 <largebin_index+0x1d>
c0000998:	0f bd d2             	bsr    edx,edx
c000099b:	8d 4a 06             	lea    ecx,[edx+0x6]
c000099e:	d3 e8                	shr    eax,cl
c00009a0:	83 e0 03             	and    eax,0x3
c00009a3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c00009a7:	c3                   	ret    
c00009a8:	b8 5f 00 00 00       	mov    eax,0x5f
c00009ad:	c3                   	ret    

c00009ae <malloc_init_state>:
c00009ae:	53                   	push   ebx
c00009af:	8d 50 34             	lea    edx,[eax+0x34]
c00009b2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009b8:	89 d1                	mov    ecx,edx
c00009ba:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009bd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009c0:	83 c2 08             	add    edx,0x8
c00009c3:	39 da                	cmp    edx,ebx
c00009c5:	75 f3                	jne    c00009ba <malloc_init_state+0xc>
c00009c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00009c9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009d3:	83 e2 03             	and    edx,0x3
c00009d6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009e0:	83 ca 48             	or     edx,0x48
c00009e3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009ed:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009f7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009fe:	89 10                	mov    DWORD PTR [eax],edx
c0000a00:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a03:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a0d:	5b                   	pop    ebx
c0000a0e:	c3                   	ret    

c0000a0f <malloc_consolidate>:
c0000a0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a11:	85 d2                	test   edx,edx
c0000a13:	0f 84 d8 00 00 00    	je     c0000af1 <malloc_consolidate+0xe2>
c0000a19:	55                   	push   ebp
c0000a1a:	83 e2 fd             	and    edx,0xfffffffd
c0000a1d:	57                   	push   edi
c0000a1e:	89 c5                	mov    ebp,eax
c0000a20:	56                   	push   esi
c0000a21:	8d 78 34             	lea    edi,[eax+0x34]
c0000a24:	53                   	push   ebx
c0000a25:	83 ec 10             	sub    esp,0x10
c0000a28:	89 10                	mov    DWORD PTR [eax],edx
c0000a2a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a2e:	c1 ea 03             	shr    edx,0x3
c0000a31:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a35:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a39:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a3c:	85 d2                	test   edx,edx
c0000a3e:	0f 84 98 00 00 00    	je     c0000adc <malloc_consolidate+0xcd>
c0000a44:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a4b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a4e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a55:	89 f9                	mov    ecx,edi
c0000a57:	83 e1 fe             	and    ecx,0xfffffffe
c0000a5a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a5d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a60:	83 e3 fc             	and    ebx,0xfffffffc
c0000a63:	83 e7 01             	and    edi,0x1
c0000a66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a69:	75 14                	jne    c0000a7f <malloc_consolidate+0x70>
c0000a6b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a6d:	29 fa                	sub    edx,edi
c0000a6f:	01 f9                	add    ecx,edi
c0000a71:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a74:	89 fb                	mov    ebx,edi
c0000a76:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a79:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a7c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a7f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a82:	74 40                	je     c0000ac4 <malloc_consolidate+0xb5>
c0000a84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a87:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a8a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a8e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a91:	83 e7 01             	and    edi,0x1
c0000a94:	75 0e                	jne    c0000aa4 <malloc_consolidate+0x95>
c0000a96:	01 d9                	add    ecx,ebx
c0000a98:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a9b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a9e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000aa1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000aa4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000aa7:	89 ce                	mov    esi,ecx
c0000aa9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aac:	83 ce 01             	or     esi,0x1
c0000aaf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ab2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ab5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ab8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000abc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000abf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ac2:	eb 0c                	jmp    c0000ad0 <malloc_consolidate+0xc1>
c0000ac4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ac7:	83 c9 01             	or     ecx,0x1
c0000aca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000acd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ad0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ad4:	85 d2                	test   edx,edx
c0000ad6:	0f 85 6f ff ff ff    	jne    c0000a4b <malloc_consolidate+0x3c>
c0000adc:	83 c5 04             	add    ebp,0x4
c0000adf:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ae3:	0f 85 50 ff ff ff    	jne    c0000a39 <malloc_consolidate+0x2a>
c0000ae9:	83 c4 10             	add    esp,0x10
c0000aec:	5b                   	pop    ebx
c0000aed:	5e                   	pop    esi
c0000aee:	5f                   	pop    edi
c0000aef:	5d                   	pop    ebp
c0000af0:	c3                   	ret    
c0000af1:	e9 b8 fe ff ff       	jmp    c00009ae <malloc_init_state>

c0000af6 <dlfree>:
c0000af6:	57                   	push   edi
c0000af7:	56                   	push   esi
c0000af8:	53                   	push   ebx
c0000af9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000afd:	85 db                	test   ebx,ebx
c0000aff:	0f 84 e2 00 00 00    	je     c0000be7 <dlfree+0xf1>
c0000b05:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b08:	8b 0d c0 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233c0
c0000b0e:	89 f0                	mov    eax,esi
c0000b10:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b13:	83 e0 fc             	and    eax,0xfffffffc
c0000b16:	39 c1                	cmp    ecx,eax
c0000b18:	72 24                	jb     c0000b3e <dlfree+0x48>
c0000b1a:	83 c9 03             	or     ecx,0x3
c0000b1d:	c1 e8 03             	shr    eax,0x3
c0000b20:	89 0d c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,ecx
c0000b26:	83 e8 02             	sub    eax,0x2
c0000b29:	8b 0c 85 c4 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcc3c]
c0000b30:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b32:	89 14 85 c4 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc3c],edx
c0000b39:	e9 a9 00 00 00       	jmp    c0000be7 <dlfree+0xf1>
c0000b3e:	83 e6 02             	and    esi,0x2
c0000b41:	0f 85 a0 00 00 00    	jne    c0000be7 <dlfree+0xf1>
c0000b47:	83 c9 01             	or     ecx,0x1
c0000b4a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b4d:	89 0d c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,ecx
c0000b53:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b56:	83 e1 fc             	and    ecx,0xfffffffc
c0000b59:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b5d:	75 13                	jne    c0000b72 <dlfree+0x7c>
c0000b5f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b62:	29 da                	sub    edx,ebx
c0000b64:	01 d8                	add    eax,ebx
c0000b66:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b69:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b6c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b6f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b72:	39 35 ec 33 02 c0    	cmp    DWORD PTR ds:0xc00233ec,esi
c0000b78:	74 40                	je     c0000bba <dlfree+0xc4>
c0000b7a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b7e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b81:	80 e3 01             	and    bl,0x1
c0000b84:	75 0e                	jne    c0000b94 <dlfree+0x9e>
c0000b86:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b89:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b8c:	01 c8                	add    eax,ecx
c0000b8e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b91:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b94:	8b 0d fc 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233fc
c0000b9a:	c7 42 0c f4 33 02 c0 	mov    DWORD PTR [edx+0xc],0xc00233f4
c0000ba1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ba4:	89 15 fc 33 02 c0    	mov    DWORD PTR ds:0xc00233fc,edx
c0000baa:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000bad:	89 c1                	mov    ecx,eax
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bb8:	eb 10                	jmp    c0000bca <dlfree+0xd4>
c0000bba:	01 c8                	add    eax,ecx
c0000bbc:	89 c1                	mov    ecx,eax
c0000bbe:	83 c9 01             	or     ecx,0x1
c0000bc1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bc4:	89 15 ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,edx
c0000bca:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bcf:	76 16                	jbe    c0000be7 <dlfree+0xf1>
c0000bd1:	f6 05 c0 33 02 c0 02 	test   BYTE PTR ds:0xc00233c0,0x2
c0000bd8:	74 0d                	je     c0000be7 <dlfree+0xf1>
c0000bda:	5b                   	pop    ebx
c0000bdb:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c0000be0:	5e                   	pop    esi
c0000be1:	5f                   	pop    edi
c0000be2:	e9 28 fe ff ff       	jmp    c0000a0f <malloc_consolidate>
c0000be7:	5b                   	pop    ebx
c0000be8:	5e                   	pop    esi
c0000be9:	5f                   	pop    edi
c0000bea:	c3                   	ret    

c0000beb <sYSMALLOc>:
c0000beb:	55                   	push   ebp
c0000bec:	57                   	push   edi
c0000bed:	56                   	push   esi
c0000bee:	53                   	push   ebx
c0000bef:	89 d3                	mov    ebx,edx
c0000bf1:	83 ec 2c             	sub    esp,0x2c
c0000bf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bf8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bfe:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c01:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c08:	74 1f                	je     c0000c29 <sYSMALLOc+0x3e>
c0000c0a:	89 d8                	mov    eax,ebx
c0000c0c:	e8 fe fd ff ff       	call   c0000a0f <malloc_consolidate>
c0000c11:	83 ec 0c             	sub    esp,0xc
c0000c14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c18:	83 e8 07             	sub    eax,0x7
c0000c1b:	50                   	push   eax
c0000c1c:	e8 30 02 00 00       	call   c0000e51 <dlmalloc>
c0000c21:	83 c4 10             	add    esp,0x10
c0000c24:	e9 20 02 00 00       	jmp    c0000e49 <sYSMALLOc+0x25e>
c0000c29:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c2c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c32:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c35:	83 e0 fc             	and    eax,0xfffffffc
c0000c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c40:	83 c0 10             	add    eax,0x10
c0000c43:	01 c1                	add    ecx,eax
c0000c45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c49:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c50:	74 04                	je     c0000c56 <sYSMALLOc+0x6b>
c0000c52:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c56:	f7 da                	neg    edx
c0000c58:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c60:	21 d1                	and    ecx,edx
c0000c62:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c66:	7f 07                	jg     c0000c6f <sYSMALLOc+0x84>
c0000c68:	31 c0                	xor    eax,eax
c0000c6a:	e9 da 01 00 00       	jmp    c0000e49 <sYSMALLOc+0x25e>
c0000c6f:	83 ec 0c             	sub    esp,0xc
c0000c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c76:	e8 28 ae 00 00       	call   c000baa3 <sbrk>
c0000c7b:	83 c4 10             	add    esp,0x10
c0000c7e:	89 c6                	mov    esi,eax
c0000c80:	83 f8 ff             	cmp    eax,0xffffffff
c0000c83:	74 e3                	je     c0000c68 <sYSMALLOc+0x7d>
c0000c85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c89:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c8d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c90:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c96:	39 f1                	cmp    ecx,esi
c0000c98:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c9e:	75 13                	jne    c0000cb3 <sYSMALLOc+0xc8>
c0000ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ca4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ca8:	83 c8 01             	or     eax,0x1
c0000cab:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000cae:	e9 3e 01 00 00       	jmp    c0000df1 <sYSMALLOc+0x206>
c0000cb3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cb9:	88 d0                	mov    al,dl
c0000cbb:	83 e0 01             	and    eax,0x1
c0000cbe:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cc3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cc7:	0f 95 c0             	setne  al
c0000cca:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cce:	39 f1                	cmp    ecx,esi
c0000cd0:	76 12                	jbe    c0000ce4 <sYSMALLOc+0xf9>
c0000cd2:	84 c0                	test   al,al
c0000cd4:	74 0e                	je     c0000ce4 <sYSMALLOc+0xf9>
c0000cd6:	83 e2 fe             	and    edx,0xfffffffe
c0000cd9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cdf:	e9 83 00 00 00       	jmp    c0000d67 <sYSMALLOc+0x17c>
c0000ce4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ce9:	74 7c                	je     c0000d67 <sYSMALLOc+0x17c>
c0000ceb:	84 c0                	test   al,al
c0000ced:	74 0c                	je     c0000cfb <sYSMALLOc+0x110>
c0000cef:	89 f0                	mov    eax,esi
c0000cf1:	29 c8                	sub    eax,ecx
c0000cf3:	01 e8                	add    eax,ebp
c0000cf5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cfb:	89 f2                	mov    edx,esi
c0000cfd:	83 e2 07             	and    edx,0x7
c0000d00:	74 0c                	je     c0000d0e <sYSMALLOc+0x123>
c0000d02:	b8 08 00 00 00       	mov    eax,0x8
c0000d07:	29 d0                	sub    eax,edx
c0000d09:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d0c:	eb 04                	jmp    c0000d12 <sYSMALLOc+0x127>
c0000d0e:	89 f5                	mov    ebp,esi
c0000d10:	31 c0                	xor    eax,eax
c0000d12:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d1e:	01 c1                	add    ecx,eax
c0000d20:	83 ec 0c             	sub    esp,0xc
c0000d23:	01 f1                	add    ecx,esi
c0000d25:	01 ca                	add    edx,ecx
c0000d27:	29 c8                	sub    eax,ecx
c0000d29:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d2d:	01 c2                	add    edx,eax
c0000d2f:	52                   	push   edx
c0000d30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d34:	e8 6a ad 00 00       	call   c000baa3 <sbrk>
c0000d39:	83 c4 10             	add    esp,0x10
c0000d3c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d43:	75 0f                	jne    c0000d54 <sYSMALLOc+0x169>
c0000d45:	83 ec 0c             	sub    esp,0xc
c0000d48:	6a 00                	push   0x0
c0000d4a:	e8 54 ad 00 00       	call   c000baa3 <sbrk>
c0000d4f:	83 c4 10             	add    esp,0x10
c0000d52:	eb 30                	jmp    c0000d84 <sYSMALLOc+0x199>
c0000d54:	39 c6                	cmp    esi,eax
c0000d56:	76 33                	jbe    c0000d8b <sYSMALLOc+0x1a0>
c0000d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d5c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d63:	01 f0                	add    eax,esi
c0000d65:	eb 1d                	jmp    c0000d84 <sYSMALLOc+0x199>
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	89 f5                	mov    ebp,esi
c0000d6c:	6a 00                	push   0x0
c0000d6e:	e8 30 ad 00 00       	call   c000baa3 <sbrk>
c0000d73:	89 c2                	mov    edx,eax
c0000d75:	29 f2                	sub    edx,esi
c0000d77:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d7b:	83 c4 10             	add    esp,0x10
c0000d7e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d84:	31 d2                	xor    edx,edx
c0000d86:	83 f8 ff             	cmp    eax,0xffffffff
c0000d89:	74 66                	je     c0000df1 <sYSMALLOc+0x206>
c0000d8b:	29 e8                	sub    eax,ebp
c0000d8d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d90:	01 d0                	add    eax,edx
c0000d92:	83 c8 01             	or     eax,0x1
c0000d95:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d98:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d9e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000da3:	74 4c                	je     c0000df1 <sYSMALLOc+0x206>
c0000da5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000da9:	83 e8 0c             	sub    eax,0xc
c0000dac:	83 e0 f8             	and    eax,0xfffffff8
c0000daf:	89 c2                	mov    edx,eax
c0000db1:	83 ca 01             	or     edx,0x1
c0000db4:	83 f8 0f             	cmp    eax,0xf
c0000db7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dba:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000dc2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dca:	76 25                	jbe    c0000df1 <sYSMALLOc+0x206>
c0000dcc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dd2:	83 ec 0c             	sub    esp,0xc
c0000dd5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ddf:	83 c7 08             	add    edi,0x8
c0000de2:	57                   	push   edi
c0000de3:	e8 0e fd ff ff       	call   c0000af6 <dlfree>
c0000de8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000dee:	83 c4 10             	add    esp,0x10
c0000df1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000df7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000dfd:	73 06                	jae    c0000e05 <sYSMALLOc+0x21a>
c0000dff:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e05:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e0b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e11:	73 06                	jae    c0000e19 <sYSMALLOc+0x22e>
c0000e13:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e1c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e1f:	83 e2 fc             	and    edx,0xfffffffc
c0000e22:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e26:	0f 82 3c fe ff ff    	jb     c0000c68 <sYSMALLOc+0x7d>
c0000e2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e30:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e33:	29 fa                	sub    edx,edi
c0000e35:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e38:	83 ca 01             	or     edx,0x1
c0000e3b:	89 fb                	mov    ebx,edi
c0000e3d:	83 c0 08             	add    eax,0x8
c0000e40:	83 cb 01             	or     ebx,0x1
c0000e43:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e49:	83 c4 2c             	add    esp,0x2c
c0000e4c:	5b                   	pop    ebx
c0000e4d:	5e                   	pop    esi
c0000e4e:	5f                   	pop    edi
c0000e4f:	5d                   	pop    ebp
c0000e50:	c3                   	ret    

c0000e51 <dlmalloc>:
c0000e51:	55                   	push   ebp
c0000e52:	57                   	push   edi
c0000e53:	56                   	push   esi
c0000e54:	53                   	push   ebx
c0000e55:	83 ec 1c             	sub    esp,0x1c
c0000e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e5c:	83 f8 df             	cmp    eax,0xffffffdf
c0000e5f:	0f 87 70 03 00 00    	ja     c00011d5 <dlmalloc+0x384>
c0000e65:	83 c0 0b             	add    eax,0xb
c0000e68:	be 10 00 00 00       	mov    esi,0x10
c0000e6d:	83 f8 0f             	cmp    eax,0xf
c0000e70:	76 05                	jbe    c0000e77 <dlmalloc+0x26>
c0000e72:	83 e0 f8             	and    eax,0xfffffff8
c0000e75:	89 c6                	mov    esi,eax
c0000e77:	8b 3d c0 33 02 c0    	mov    edi,DWORD PTR ds:0xc00233c0
c0000e7d:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e83:	75 17                	jne    c0000e9c <dlmalloc+0x4b>
c0000e85:	85 ff                	test   edi,edi
c0000e87:	0f 85 05 03 00 00    	jne    c0001192 <dlmalloc+0x341>
c0000e8d:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c0000e92:	e8 78 fb ff ff       	call   c0000a0f <malloc_consolidate>
c0000e97:	e9 f6 02 00 00       	jmp    c0001192 <dlmalloc+0x341>
c0000e9c:	39 f7                	cmp    edi,esi
c0000e9e:	72 1f                	jb     c0000ebf <dlmalloc+0x6e>
c0000ea0:	89 f2                	mov    edx,esi
c0000ea2:	c1 ea 03             	shr    edx,0x3
c0000ea5:	83 ea 02             	sub    edx,0x2
c0000ea8:	8b 04 95 c4 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcc3c]
c0000eaf:	85 c0                	test   eax,eax
c0000eb1:	74 0c                	je     c0000ebf <dlmalloc+0x6e>
c0000eb3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eb6:	89 0c 95 c4 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcc3c],ecx
c0000ebd:	eb 30                	jmp    c0000eef <dlmalloc+0x9e>
c0000ebf:	89 f0                	mov    eax,esi
c0000ec1:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ec7:	77 2e                	ja     c0000ef7 <dlmalloc+0xa6>
c0000ec9:	c1 e8 03             	shr    eax,0x3
c0000ecc:	8d 14 c5 f4 33 02 c0 	lea    edx,[eax*8-0x3ffdcc0c]
c0000ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ed7:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000eda:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000edd:	39 c3                	cmp    ebx,eax
c0000edf:	74 2e                	je     c0000f0f <dlmalloc+0xbe>
c0000ee1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ee4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000ee9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000eec:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000eef:	83 c0 08             	add    eax,0x8
c0000ef2:	e9 e0 02 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0000ef7:	e8 8f fa ff ff       	call   c000098b <largebin_index>
c0000efc:	83 e7 02             	and    edi,0x2
c0000eff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f03:	74 0a                	je     c0000f0f <dlmalloc+0xbe>
c0000f05:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c0000f0a:	e8 00 fb ff ff       	call   c0000a0f <malloc_consolidate>
c0000f0f:	8d 46 10             	lea    eax,[esi+0x10]
c0000f12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f16:	8b 1d 00 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023400
c0000f1c:	81 fb f4 33 02 c0    	cmp    ebx,0xc00233f4
c0000f22:	0f 84 13 01 00 00    	je     c000103b <dlmalloc+0x1ea>
c0000f28:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f2e:	83 e7 fc             	and    edi,0xfffffffc
c0000f31:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f37:	77 4c                	ja     c0000f85 <dlmalloc+0x134>
c0000f39:	3d f4 33 02 c0       	cmp    eax,0xc00233f4
c0000f3e:	75 45                	jne    c0000f85 <dlmalloc+0x134>
c0000f40:	39 1d f0 33 02 c0    	cmp    DWORD PTR ds:0xc00233f0,ebx
c0000f46:	75 3d                	jne    c0000f85 <dlmalloc+0x134>
c0000f48:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f4c:	73 37                	jae    c0000f85 <dlmalloc+0x134>
c0000f4e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f51:	89 fa                	mov    edx,edi
c0000f53:	a3 fc 33 02 c0       	mov    ds:0xc00233fc,eax
c0000f58:	a3 00 34 02 c0       	mov    ds:0xc0023400,eax
c0000f5d:	a3 f0 33 02 c0       	mov    ds:0xc00233f0,eax
c0000f62:	29 f2                	sub    edx,esi
c0000f64:	c7 40 08 f4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233f4
c0000f6b:	c7 40 0c f4 33 02 c0 	mov    DWORD PTR [eax+0xc],0xc00233f4
c0000f72:	83 ce 01             	or     esi,0x1
c0000f75:	89 d1                	mov    ecx,edx
c0000f77:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f7a:	83 c9 01             	or     ecx,0x1
c0000f7d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f80:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f83:	eb 15                	jmp    c0000f9a <dlmalloc+0x149>
c0000f85:	a3 00 34 02 c0       	mov    ds:0xc0023400,eax
c0000f8a:	39 fe                	cmp    esi,edi
c0000f8c:	c7 40 08 f4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233f4
c0000f93:	75 0d                	jne    c0000fa2 <dlmalloc+0x151>
c0000f95:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f9a:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f9d:	e9 35 02 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0000fa2:	89 f8                	mov    eax,edi
c0000fa4:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000faa:	77 19                	ja     c0000fc5 <dlmalloc+0x174>
c0000fac:	c1 e8 03             	shr    eax,0x3
c0000faf:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fb2:	83 c2 0d             	add    edx,0xd
c0000fb5:	8d 2c 95 b8 33 02 c0 	lea    ebp,[edx*4-0x3ffdcc48]
c0000fbc:	8b 14 95 c0 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc40]
c0000fc3:	eb 46                	jmp    c000100b <dlmalloc+0x1ba>
c0000fc5:	e8 c1 f9 ff ff       	call   c000098b <largebin_index>
c0000fca:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fcd:	83 c2 0d             	add    edx,0xd
c0000fd0:	8d 0c 95 c0 33 02 c0 	lea    ecx,[edx*4-0x3ffdcc40]
c0000fd7:	8b 14 95 c0 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc40]
c0000fde:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fe1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fe5:	89 d5                	mov    ebp,edx
c0000fe7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000feb:	74 1e                	je     c000100b <dlmalloc+0x1ba>
c0000fed:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000ff0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000ff3:	77 12                	ja     c0001007 <dlmalloc+0x1b6>
c0000ff5:	83 cf 01             	or     edi,0x1
c0000ff8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ffb:	76 05                	jbe    c0001002 <dlmalloc+0x1b1>
c0000ffd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001000:	eb f6                	jmp    c0000ff8 <dlmalloc+0x1a7>
c0001002:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001005:	eb 04                	jmp    c000100b <dlmalloc+0x1ba>
c0001007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000100b:	89 c7                	mov    edi,eax
c000100d:	88 c1                	mov    cl,al
c000100f:	c1 ff 05             	sar    edi,0x5
c0001012:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001016:	bf 01 00 00 00       	mov    edi,0x1
c000101b:	d3 e7                	shl    edi,cl
c000101d:	89 f8                	mov    eax,edi
c000101f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001023:	09 04 bd f4 36 02 c0 	or     DWORD PTR [edi*4-0x3ffdc90c],eax
c000102a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000102d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001030:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001033:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001036:	e9 db fe ff ff       	jmp    c0000f16 <dlmalloc+0xc5>
c000103b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001041:	76 78                	jbe    c00010bb <dlmalloc+0x26a>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	8d 04 c5 f4 33 02 c0 	lea    eax,[eax*8-0x3ffdcc0c]
c000104e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001051:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001054:	39 ca                	cmp    edx,ecx
c0001056:	74 63                	je     c00010bb <dlmalloc+0x26a>
c0001058:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000105b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000105e:	83 e3 fc             	and    ebx,0xfffffffc
c0001061:	39 de                	cmp    esi,ebx
c0001063:	77 52                	ja     c00010b7 <dlmalloc+0x266>
c0001065:	89 df                	mov    edi,ebx
c0001067:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000106a:	29 f7                	sub    edi,esi
c000106c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000106f:	01 d3                	add    ebx,edx
c0001071:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001074:	83 ff 0f             	cmp    edi,0xf
c0001077:	8d 42 08             	lea    eax,[edx+0x8]
c000107a:	77 09                	ja     c0001085 <dlmalloc+0x234>
c000107c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001080:	e9 52 01 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0001085:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001088:	83 ce 01             	or     esi,0x1
c000108b:	89 0d fc 33 02 c0    	mov    DWORD PTR ds:0xc00233fc,ecx
c0001091:	89 0d 00 34 02 c0    	mov    DWORD PTR ds:0xc0023400,ecx
c0001097:	c7 41 08 f4 33 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00233f4
c000109e:	c7 41 0c f4 33 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00233f4
c00010a5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00010a8:	89 fa                	mov    edx,edi
c00010aa:	83 ca 01             	or     edx,0x1
c00010ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010b0:	89 3b                	mov    DWORD PTR [ebx],edi
c00010b2:	e9 20 01 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c00010b7:	89 c2                	mov    edx,eax
c00010b9:	eb 99                	jmp    c0001054 <dlmalloc+0x203>
c00010bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010bf:	b8 01 00 00 00       	mov    eax,0x1
c00010c4:	41                   	inc    ecx
c00010c5:	89 cb                	mov    ebx,ecx
c00010c7:	8d 14 cd ec 33 02 c0 	lea    edx,[ecx*8-0x3ffdcc14]
c00010ce:	c1 eb 05             	shr    ebx,0x5
c00010d1:	d3 e0                	shl    eax,cl
c00010d3:	8b 3c 9d f4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc90c]
c00010da:	39 f8                	cmp    eax,edi
c00010dc:	77 04                	ja     c00010e2 <dlmalloc+0x291>
c00010de:	85 c0                	test   eax,eax
c00010e0:	75 26                	jne    c0001108 <dlmalloc+0x2b7>
c00010e2:	43                   	inc    ebx
c00010e3:	83 fb 02             	cmp    ebx,0x2
c00010e6:	0f 87 a6 00 00 00    	ja     c0001192 <dlmalloc+0x341>
c00010ec:	8b 3c 9d f4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc90c]
c00010f3:	85 ff                	test   edi,edi
c00010f5:	74 eb                	je     c00010e2 <dlmalloc+0x291>
c00010f7:	89 d8                	mov    eax,ebx
c00010f9:	c1 e0 06             	shl    eax,0x6
c00010fc:	8d 14 85 ec 33 02 c0 	lea    edx,[eax*4-0x3ffdcc14]
c0001103:	b8 01 00 00 00       	mov    eax,0x1
c0001108:	85 f8                	test   eax,edi
c000110a:	75 07                	jne    c0001113 <dlmalloc+0x2c2>
c000110c:	83 c2 08             	add    edx,0x8
c000110f:	01 c0                	add    eax,eax
c0001111:	eb f5                	jmp    c0001108 <dlmalloc+0x2b7>
c0001113:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001116:	39 ca                	cmp    edx,ecx
c0001118:	75 14                	jne    c000112e <dlmalloc+0x2dd>
c000111a:	89 c1                	mov    ecx,eax
c000111c:	83 c2 08             	add    edx,0x8
c000111f:	f7 d1                	not    ecx
c0001121:	01 c0                	add    eax,eax
c0001123:	21 cf                	and    edi,ecx
c0001125:	89 3c 9d f4 36 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc90c],edi
c000112c:	eb ac                	jmp    c00010da <dlmalloc+0x289>
c000112e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001131:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001134:	83 e0 fc             	and    eax,0xfffffffc
c0001137:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000113a:	89 c3                	mov    ebx,eax
c000113c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000113f:	29 f3                	sub    ebx,esi
c0001141:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001144:	83 fb 0f             	cmp    ebx,0xf
c0001147:	8d 41 08             	lea    eax,[ecx+0x8]
c000114a:	77 09                	ja     c0001155 <dlmalloc+0x304>
c000114c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001150:	e9 82 00 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0001155:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001158:	81 fe ff 00 00 00    	cmp    esi,0xff
c000115e:	89 3d fc 33 02 c0    	mov    DWORD PTR ds:0xc00233fc,edi
c0001164:	89 3d 00 34 02 c0    	mov    DWORD PTR ds:0xc0023400,edi
c000116a:	c7 47 08 f4 33 02 c0 	mov    DWORD PTR [edi+0x8],0xc00233f4
c0001171:	c7 47 0c f4 33 02 c0 	mov    DWORD PTR [edi+0xc],0xc00233f4
c0001178:	77 06                	ja     c0001180 <dlmalloc+0x32f>
c000117a:	89 3d f0 33 02 c0    	mov    DWORD PTR ds:0xc00233f0,edi
c0001180:	83 ce 01             	or     esi,0x1
c0001183:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001186:	89 d9                	mov    ecx,ebx
c0001188:	83 c9 01             	or     ecx,0x1
c000118b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000118e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001190:	eb 45                	jmp    c00011d7 <dlmalloc+0x386>
c0001192:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0001197:	8d 4e 10             	lea    ecx,[esi+0x10]
c000119a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000119d:	83 e2 fc             	and    edx,0xfffffffc
c00011a0:	39 d1                	cmp    ecx,edx
c00011a2:	77 1e                	ja     c00011c2 <dlmalloc+0x371>
c00011a4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00011a7:	89 f3                	mov    ebx,esi
c00011a9:	89 0d ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,ecx
c00011af:	83 cb 01             	or     ebx,0x1
c00011b2:	29 f2                	sub    edx,esi
c00011b4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011b7:	83 ca 01             	or     edx,0x1
c00011ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011bd:	e9 2d fd ff ff       	jmp    c0000eef <dlmalloc+0x9e>
c00011c2:	83 c4 1c             	add    esp,0x1c
c00011c5:	89 f0                	mov    eax,esi
c00011c7:	5b                   	pop    ebx
c00011c8:	ba c0 33 02 c0       	mov    edx,0xc00233c0
c00011cd:	5e                   	pop    esi
c00011ce:	5f                   	pop    edi
c00011cf:	5d                   	pop    ebp
c00011d0:	e9 16 fa ff ff       	jmp    c0000beb <sYSMALLOc>
c00011d5:	31 c0                	xor    eax,eax
c00011d7:	83 c4 1c             	add    esp,0x1c
c00011da:	5b                   	pop    ebx
c00011db:	5e                   	pop    esi
c00011dc:	5f                   	pop    edi
c00011dd:	5d                   	pop    ebp
c00011de:	c3                   	ret    

c00011df <iALLOc>:
c00011df:	55                   	push   ebp
c00011e0:	89 c5                	mov    ebp,eax
c00011e2:	57                   	push   edi
c00011e3:	56                   	push   esi
c00011e4:	53                   	push   ebx
c00011e5:	83 ec 2c             	sub    esp,0x2c
c00011e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f4:	83 3d c0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233c0,0x0
c00011fb:	75 12                	jne    c000120f <iALLOc+0x30>
c00011fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001201:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c0001206:	e8 04 f8 ff ff       	call   c0000a0f <malloc_consolidate>
c000120b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000120f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001214:	74 12                	je     c0001228 <iALLOc+0x49>
c0001216:	85 ed                	test   ebp,ebp
c0001218:	0f 84 64 01 00 00    	je     c0001382 <iALLOc+0x1a3>
c000121e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001226:	eb 33                	jmp    c000125b <iALLOc+0x7c>
c0001228:	85 ed                	test   ebp,ebp
c000122a:	75 14                	jne    c0001240 <iALLOc+0x61>
c000122c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001234:	83 c4 2c             	add    esp,0x2c
c0001237:	5b                   	pop    ebx
c0001238:	5e                   	pop    esi
c0001239:	5f                   	pop    edi
c000123a:	5d                   	pop    ebp
c000123b:	e9 11 fc ff ff       	jmp    c0000e51 <dlmalloc>
c0001240:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001247:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000124f:	83 f8 0f             	cmp    eax,0xf
c0001252:	76 07                	jbe    c000125b <iALLOc+0x7c>
c0001254:	83 e0 f8             	and    eax,0xfffffff8
c0001257:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000125b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001260:	75 09                	jne    c000126b <iALLOc+0x8c>
c0001262:	89 d0                	mov    eax,edx
c0001264:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001267:	31 f6                	xor    esi,esi
c0001269:	eb 3b                	jmp    c00012a6 <iALLOc+0xc7>
c000126b:	8b 02                	mov    eax,DWORD PTR [edx]
c000126d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001275:	83 c0 0b             	add    eax,0xb
c0001278:	83 f8 0f             	cmp    eax,0xf
c000127b:	76 07                	jbe    c0001284 <iALLOc+0xa5>
c000127d:	83 e0 f8             	and    eax,0xfffffff8
c0001280:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001284:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001288:	0f af f5             	imul   esi,ebp
c000128b:	eb 25                	jmp    c00012b2 <iALLOc+0xd3>
c000128d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000128f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001292:	bb 10 00 00 00       	mov    ebx,0x10
c0001297:	83 f9 0f             	cmp    ecx,0xf
c000129a:	76 05                	jbe    c00012a1 <iALLOc+0xc2>
c000129c:	83 e1 f8             	and    ecx,0xfffffff8
c000129f:	89 cb                	mov    ebx,ecx
c00012a1:	01 de                	add    esi,ebx
c00012a3:	83 c0 04             	add    eax,0x4
c00012a6:	39 c7                	cmp    edi,eax
c00012a8:	75 e3                	jne    c000128d <iALLOc+0xae>
c00012aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012b6:	8b 1d 14 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023714
c00012bc:	83 ec 0c             	sub    esp,0xc
c00012bf:	c7 05 14 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023714,0x0
c00012c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012cd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012d1:	50                   	push   eax
c00012d2:	e8 7a fb ff ff       	call   c0000e51 <dlmalloc>
c00012d7:	83 c4 10             	add    esp,0x10
c00012da:	89 1d 14 37 02 c0    	mov    DWORD PTR ds:0xc0023714,ebx
c00012e0:	85 c0                	test   eax,eax
c00012e2:	0f 84 92 00 00 00    	je     c000137a <iALLOc+0x19b>
c00012e8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012eb:	8d 78 f8             	lea    edi,[eax-0x8]
c00012ee:	83 e3 fc             	and    ebx,0xfffffffc
c00012f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012f5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012fa:	74 1e                	je     c000131a <iALLOc+0x13b>
c00012fc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001300:	89 d9                	mov    ecx,ebx
c0001302:	52                   	push   edx
c0001303:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001307:	83 e9 04             	sub    ecx,0x4
c000130a:	51                   	push   ecx
c000130b:	6a 00                	push   0x0
c000130d:	50                   	push   eax
c000130e:	e8 f5 f2 ff ff       	call   c0000608 <memset>
c0001313:	83 c4 10             	add    esp,0x10
c0001316:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000131a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000131f:	75 14                	jne    c0001335 <iALLOc+0x156>
c0001321:	8d 04 37             	lea    eax,[edi+esi*1]
c0001324:	29 f3                	sub    ebx,esi
c0001326:	8d 48 08             	lea    ecx,[eax+0x8]
c0001329:	83 cb 01             	or     ebx,0x1
c000132c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001330:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001333:	89 f3                	mov    ebx,esi
c0001335:	31 c0                	xor    eax,eax
c0001337:	4d                   	dec    ebp
c0001338:	8d 4f 08             	lea    ecx,[edi+0x8]
c000133b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000133f:	39 c5                	cmp    ebp,eax
c0001341:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001344:	74 2c                	je     c0001372 <iALLOc+0x193>
c0001346:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000134a:	85 c9                	test   ecx,ecx
c000134c:	75 15                	jne    c0001363 <iALLOc+0x184>
c000134e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001351:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001354:	b9 10 00 00 00       	mov    ecx,0x10
c0001359:	83 fe 0f             	cmp    esi,0xf
c000135c:	76 05                	jbe    c0001363 <iALLOc+0x184>
c000135e:	83 e6 f8             	and    esi,0xfffffff8
c0001361:	89 f1                	mov    ecx,esi
c0001363:	89 ce                	mov    esi,ecx
c0001365:	29 cb                	sub    ebx,ecx
c0001367:	83 ce 01             	or     esi,0x1
c000136a:	40                   	inc    eax
c000136b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000136e:	01 cf                	add    edi,ecx
c0001370:	eb c6                	jmp    c0001338 <iALLOc+0x159>
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001378:	eb 08                	jmp    c0001382 <iALLOc+0x1a3>
c000137a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001386:	83 c4 2c             	add    esp,0x2c
c0001389:	5b                   	pop    ebx
c000138a:	5e                   	pop    esi
c000138b:	5f                   	pop    edi
c000138c:	5d                   	pop    ebp
c000138d:	c3                   	ret    

c000138e <dlrealloc>:
c000138e:	55                   	push   ebp
c000138f:	57                   	push   edi
c0001390:	56                   	push   esi
c0001391:	53                   	push   ebx
c0001392:	83 ec 1c             	sub    esp,0x1c
c0001395:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000139d:	85 db                	test   ebx,ebx
c000139f:	75 10                	jne    c00013b1 <dlrealloc+0x23>
c00013a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00013a5:	83 c4 1c             	add    esp,0x1c
c00013a8:	5b                   	pop    ebx
c00013a9:	5e                   	pop    esi
c00013aa:	5f                   	pop    edi
c00013ab:	5d                   	pop    ebp
c00013ac:	e9 a0 fa ff ff       	jmp    c0000e51 <dlmalloc>
c00013b1:	83 f8 df             	cmp    eax,0xffffffdf
c00013b4:	76 07                	jbe    c00013bd <dlrealloc+0x2f>
c00013b6:	31 db                	xor    ebx,ebx
c00013b8:	e9 7c 01 00 00       	jmp    c0001539 <dlrealloc+0x1ab>
c00013bd:	83 c0 0b             	add    eax,0xb
c00013c0:	bf 10 00 00 00       	mov    edi,0x10
c00013c5:	83 f8 0f             	cmp    eax,0xf
c00013c8:	76 05                	jbe    c00013cf <dlrealloc+0x41>
c00013ca:	83 e0 f8             	and    eax,0xfffffff8
c00013cd:	89 c7                	mov    edi,eax
c00013cf:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013d2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013d5:	89 c6                	mov    esi,eax
c00013d7:	83 e6 fc             	and    esi,0xfffffffc
c00013da:	a8 02                	test   al,0x2
c00013dc:	75 d8                	jne    c00013b6 <dlrealloc+0x28>
c00013de:	39 f7                	cmp    edi,esi
c00013e0:	0f 86 15 01 00 00    	jbe    c00014fb <dlrealloc+0x16d>
c00013e6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013ea:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013ed:	39 15 ec 33 02 c0    	cmp    DWORD PTR ds:0xc00233ec,edx
c00013f3:	75 33                	jne    c0001428 <dlrealloc+0x9a>
c00013f5:	83 e1 fc             	and    ecx,0xfffffffc
c00013f8:	01 f1                	add    ecx,esi
c00013fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013fe:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001401:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001405:	77 49                	ja     c0001450 <dlrealloc+0xc2>
c0001407:	01 fd                	add    ebp,edi
c0001409:	83 e0 01             	and    eax,0x1
c000140c:	09 f8                	or     eax,edi
c000140e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001411:	89 2d ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,ebp
c0001417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000141b:	29 f8                	sub    eax,edi
c000141d:	83 c8 01             	or     eax,0x1
c0001420:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001423:	e9 11 01 00 00       	jmp    c0001539 <dlrealloc+0x1ab>
c0001428:	89 c8                	mov    eax,ecx
c000142a:	83 e0 fe             	and    eax,0xfffffffe
c000142d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001432:	75 1c                	jne    c0001450 <dlrealloc+0xc2>
c0001434:	83 e1 fc             	and    ecx,0xfffffffc
c0001437:	01 f1                	add    ecx,esi
c0001439:	39 cf                	cmp    edi,ecx
c000143b:	77 13                	ja     c0001450 <dlrealloc+0xc2>
c000143d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001440:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001443:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001446:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001449:	89 ce                	mov    esi,ecx
c000144b:	e9 ab 00 00 00       	jmp    c00014fb <dlrealloc+0x16d>
c0001450:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001454:	8d 47 f9             	lea    eax,[edi-0x7]
c0001457:	83 ec 0c             	sub    esp,0xc
c000145a:	50                   	push   eax
c000145b:	e8 f1 f9 ff ff       	call   c0000e51 <dlmalloc>
c0001460:	83 c4 10             	add    esp,0x10
c0001463:	89 c1                	mov    ecx,eax
c0001465:	85 c0                	test   eax,eax
c0001467:	0f 84 49 ff ff ff    	je     c00013b6 <dlrealloc+0x28>
c000146d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001470:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001474:	39 c2                	cmp    edx,eax
c0001476:	75 0a                	jne    c0001482 <dlrealloc+0xf4>
c0001478:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000147b:	83 e0 fc             	and    eax,0xfffffffc
c000147e:	01 c6                	add    esi,eax
c0001480:	eb 79                	jmp    c00014fb <dlrealloc+0x16d>
c0001482:	83 ee 04             	sub    esi,0x4
c0001485:	83 fe 27             	cmp    esi,0x27
c0001488:	76 16                	jbe    c00014a0 <dlrealloc+0x112>
c000148a:	50                   	push   eax
c000148b:	56                   	push   esi
c000148c:	53                   	push   ebx
c000148d:	51                   	push   ecx
c000148e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001492:	e8 3b f1 ff ff       	call   c00005d2 <memcpy>
c0001497:	83 c4 10             	add    esp,0x10
c000149a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000149e:	eb 43                	jmp    c00014e3 <dlrealloc+0x155>
c00014a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00014a2:	83 fe 13             	cmp    esi,0x13
c00014a5:	89 01                	mov    DWORD PTR [ecx],eax
c00014a7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00014aa:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014b0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014b3:	76 2e                	jbe    c00014e3 <dlrealloc+0x155>
c00014b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014b8:	83 fe 1b             	cmp    esi,0x1b
c00014bb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014c1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014c4:	76 1d                	jbe    c00014e3 <dlrealloc+0x155>
c00014c6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014c9:	83 fe 23             	cmp    esi,0x23
c00014cc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014d2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014d5:	76 0c                	jbe    c00014e3 <dlrealloc+0x155>
c00014d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014da:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014e0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014e7:	83 ec 0c             	sub    esp,0xc
c00014ea:	53                   	push   ebx
c00014eb:	e8 06 f6 ff ff       	call   c0000af6 <dlfree>
c00014f0:	83 c4 10             	add    esp,0x10
c00014f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014f7:	89 cb                	mov    ebx,ecx
c00014f9:	eb 3e                	jmp    c0001539 <dlrealloc+0x1ab>
c00014fb:	89 f2                	mov    edx,esi
c00014fd:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001500:	29 fa                	sub    edx,edi
c0001502:	83 e1 01             	and    ecx,0x1
c0001505:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001509:	83 fa 0f             	cmp    edx,0xf
c000150c:	77 0b                	ja     c0001519 <dlrealloc+0x18b>
c000150e:	09 ce                	or     esi,ecx
c0001510:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001513:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001517:	eb 20                	jmp    c0001539 <dlrealloc+0x1ab>
c0001519:	01 fd                	add    ebp,edi
c000151b:	83 ec 0c             	sub    esp,0xc
c000151e:	09 cf                	or     edi,ecx
c0001520:	83 ca 01             	or     edx,0x1
c0001523:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001526:	83 c5 08             	add    ebp,0x8
c0001529:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000152c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001530:	55                   	push   ebp
c0001531:	e8 c0 f5 ff ff       	call   c0000af6 <dlfree>
c0001536:	83 c4 10             	add    esp,0x10
c0001539:	83 c4 1c             	add    esp,0x1c
c000153c:	89 d8                	mov    eax,ebx
c000153e:	5b                   	pop    ebx
c000153f:	5e                   	pop    esi
c0001540:	5f                   	pop    edi
c0001541:	5d                   	pop    ebp
c0001542:	c3                   	ret    

c0001543 <dlmemalign>:
c0001543:	55                   	push   ebp
c0001544:	57                   	push   edi
c0001545:	56                   	push   esi
c0001546:	53                   	push   ebx
c0001547:	83 ec 0c             	sub    esp,0xc
c000154a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000154e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001552:	83 fa 08             	cmp    edx,0x8
c0001555:	77 10                	ja     c0001567 <dlmemalign+0x24>
c0001557:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000155b:	83 c4 0c             	add    esp,0xc
c000155e:	5b                   	pop    ebx
c000155f:	5e                   	pop    esi
c0001560:	5f                   	pop    edi
c0001561:	5d                   	pop    ebp
c0001562:	e9 ea f8 ff ff       	jmp    c0000e51 <dlmalloc>
c0001567:	bf 10 00 00 00       	mov    edi,0x10
c000156c:	83 fa 0f             	cmp    edx,0xf
c000156f:	76 13                	jbe    c0001584 <dlmemalign+0x41>
c0001571:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001574:	85 d1                	test   ecx,edx
c0001576:	75 04                	jne    c000157c <dlmemalign+0x39>
c0001578:	89 d7                	mov    edi,edx
c000157a:	eb 08                	jmp    c0001584 <dlmemalign+0x41>
c000157c:	39 d7                	cmp    edi,edx
c000157e:	73 04                	jae    c0001584 <dlmemalign+0x41>
c0001580:	01 ff                	add    edi,edi
c0001582:	eb f8                	jmp    c000157c <dlmemalign+0x39>
c0001584:	83 f8 df             	cmp    eax,0xffffffdf
c0001587:	76 07                	jbe    c0001590 <dlmemalign+0x4d>
c0001589:	31 c0                	xor    eax,eax
c000158b:	e9 ce 00 00 00       	jmp    c000165e <dlmemalign+0x11b>
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	bd 10 00 00 00       	mov    ebp,0x10
c0001598:	83 f8 0f             	cmp    eax,0xf
c000159b:	76 05                	jbe    c00015a2 <dlmemalign+0x5f>
c000159d:	83 e0 f8             	and    eax,0xfffffff8
c00015a0:	89 c5                	mov    ebp,eax
c00015a2:	83 ec 0c             	sub    esp,0xc
c00015a5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00015a9:	50                   	push   eax
c00015aa:	e8 a2 f8 ff ff       	call   c0000e51 <dlmalloc>
c00015af:	83 c4 10             	add    esp,0x10
c00015b2:	89 c1                	mov    ecx,eax
c00015b4:	85 c0                	test   eax,eax
c00015b6:	74 d1                	je     c0001589 <dlmemalign+0x46>
c00015b8:	31 d2                	xor    edx,edx
c00015ba:	8d 70 f8             	lea    esi,[eax-0x8]
c00015bd:	f7 f7                	div    edi
c00015bf:	85 d2                	test   edx,edx
c00015c1:	74 62                	je     c0001625 <dlmemalign+0xe2>
c00015c3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015c7:	89 f8                	mov    eax,edi
c00015c9:	f7 d8                	neg    eax
c00015cb:	21 c3                	and    ebx,eax
c00015cd:	83 eb 08             	sub    ebx,0x8
c00015d0:	89 d8                	mov    eax,ebx
c00015d2:	29 f0                	sub    eax,esi
c00015d4:	83 f8 0f             	cmp    eax,0xf
c00015d7:	77 02                	ja     c00015db <dlmemalign+0x98>
c00015d9:	01 fb                	add    ebx,edi
c00015db:	89 d8                	mov    eax,ebx
c00015dd:	29 f0                	sub    eax,esi
c00015df:	89 c6                	mov    esi,eax
c00015e1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015e4:	89 c2                	mov    edx,eax
c00015e6:	83 e2 fc             	and    edx,0xfffffffc
c00015e9:	29 f2                	sub    edx,esi
c00015eb:	a8 02                	test   al,0x2
c00015ed:	74 10                	je     c00015ff <dlmemalign+0xbc>
c00015ef:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015f2:	83 ca 02             	or     edx,0x2
c00015f5:	8d 43 08             	lea    eax,[ebx+0x8]
c00015f8:	89 33                	mov    DWORD PTR [ebx],esi
c00015fa:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015fd:	eb 5f                	jmp    c000165e <dlmemalign+0x11b>
c00015ff:	83 ec 0c             	sub    esp,0xc
c0001602:	89 d0                	mov    eax,edx
c0001604:	83 c8 01             	or     eax,0x1
c0001607:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000160a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000160f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001612:	83 e0 01             	and    eax,0x1
c0001615:	09 f0                	or     eax,esi
c0001617:	89 de                	mov    esi,ebx
c0001619:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000161c:	51                   	push   ecx
c000161d:	e8 d4 f4 ff ff       	call   c0000af6 <dlfree>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001628:	a8 02                	test   al,0x2
c000162a:	75 2f                	jne    c000165b <dlmemalign+0x118>
c000162c:	83 e0 fc             	and    eax,0xfffffffc
c000162f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001632:	39 c2                	cmp    edx,eax
c0001634:	73 25                	jae    c000165b <dlmemalign+0x118>
c0001636:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001639:	83 ec 0c             	sub    esp,0xc
c000163c:	29 e8                	sub    eax,ebp
c000163e:	83 c2 08             	add    edx,0x8
c0001641:	83 c8 01             	or     eax,0x1
c0001644:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001647:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000164a:	83 e0 01             	and    eax,0x1
c000164d:	09 c5                	or     ebp,eax
c000164f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001652:	52                   	push   edx
c0001653:	e8 9e f4 ff ff       	call   c0000af6 <dlfree>
c0001658:	83 c4 10             	add    esp,0x10
c000165b:	8d 46 08             	lea    eax,[esi+0x8]
c000165e:	83 c4 0c             	add    esp,0xc
c0001661:	5b                   	pop    ebx
c0001662:	5e                   	pop    esi
c0001663:	5f                   	pop    edi
c0001664:	5d                   	pop    ebp
c0001665:	c3                   	ret    

c0001666 <dlcalloc>:
c0001666:	53                   	push   ebx
c0001667:	83 ec 14             	sub    esp,0x14
c000166a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000166e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001673:	50                   	push   eax
c0001674:	e8 d8 f7 ff ff       	call   c0000e51 <dlmalloc>
c0001679:	83 c4 10             	add    esp,0x10
c000167c:	89 c3                	mov    ebx,eax
c000167e:	85 c0                	test   eax,eax
c0001680:	74 77                	je     c00016f9 <dlcalloc+0x93>
c0001682:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001685:	89 d0                	mov    eax,edx
c0001687:	83 e0 fc             	and    eax,0xfffffffc
c000168a:	80 e2 02             	and    dl,0x2
c000168d:	75 5a                	jne    c00016e9 <dlcalloc+0x83>
c000168f:	83 e8 04             	sub    eax,0x4
c0001692:	83 f8 27             	cmp    eax,0x27
c0001695:	76 03                	jbe    c000169a <dlcalloc+0x34>
c0001697:	51                   	push   ecx
c0001698:	eb 53                	jmp    c00016ed <dlcalloc+0x87>
c000169a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00016a0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00016a7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016ae:	83 f8 13             	cmp    eax,0x13
c00016b1:	76 46                	jbe    c00016f9 <dlcalloc+0x93>
c00016b3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016c1:	83 f8 1b             	cmp    eax,0x1b
c00016c4:	76 33                	jbe    c00016f9 <dlcalloc+0x93>
c00016c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016cd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016d4:	83 f8 23             	cmp    eax,0x23
c00016d7:	76 20                	jbe    c00016f9 <dlcalloc+0x93>
c00016d9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016e0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016e7:	eb 10                	jmp    c00016f9 <dlcalloc+0x93>
c00016e9:	83 e8 08             	sub    eax,0x8
c00016ec:	52                   	push   edx
c00016ed:	50                   	push   eax
c00016ee:	6a 00                	push   0x0
c00016f0:	53                   	push   ebx
c00016f1:	e8 12 ef ff ff       	call   c0000608 <memset>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	89 d8                	mov    eax,ebx
c00016fb:	83 c4 08             	add    esp,0x8
c00016fe:	5b                   	pop    ebx
c00016ff:	c3                   	ret    

c0001700 <dlcfree>:
c0001700:	e9 f1 f3 ff ff       	jmp    c0000af6 <dlfree>

c0001705 <dlindependent_calloc>:
c0001705:	83 ec 28             	sub    esp,0x28
c0001708:	b9 03 00 00 00       	mov    ecx,0x3
c000170d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001711:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001715:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001719:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000171d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001721:	e8 b9 fa ff ff       	call   c00011df <iALLOc>
c0001726:	83 c4 2c             	add    esp,0x2c
c0001729:	c3                   	ret    

c000172a <dlindependent_comalloc>:
c000172a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001732:	31 c9                	xor    ecx,ecx
c0001734:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000173c:	e9 9e fa ff ff       	jmp    c00011df <iALLOc>

c0001741 <dlvalloc>:
c0001741:	83 ec 0c             	sub    esp,0xc
c0001744:	83 3d c0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233c0,0x0
c000174b:	75 0a                	jne    c0001757 <dlvalloc+0x16>
c000174d:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c0001752:	e8 b8 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c0001757:	50                   	push   eax
c0001758:	50                   	push   eax
c0001759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000175d:	ff 35 1c 37 02 c0    	push   DWORD PTR ds:0xc002371c
c0001763:	e8 db fd ff ff       	call   c0001543 <dlmemalign>
c0001768:	83 c4 1c             	add    esp,0x1c
c000176b:	c3                   	ret    

c000176c <dlpvalloc>:
c000176c:	83 ec 0c             	sub    esp,0xc
c000176f:	83 3d c0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233c0,0x0
c0001776:	75 0a                	jne    c0001782 <dlpvalloc+0x16>
c0001778:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c000177d:	e8 8d f2 ff ff       	call   c0000a0f <malloc_consolidate>
c0001782:	a1 1c 37 02 c0       	mov    eax,ds:0xc002371c
c0001787:	89 c1                	mov    ecx,eax
c0001789:	52                   	push   edx
c000178a:	f7 d9                	neg    ecx
c000178c:	52                   	push   edx
c000178d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001791:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001795:	21 ca                	and    edx,ecx
c0001797:	52                   	push   edx
c0001798:	50                   	push   eax
c0001799:	e8 a5 fd ff ff       	call   c0001543 <dlmemalign>
c000179e:	83 c4 1c             	add    esp,0x1c
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_trim>:
c00017a2:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c00017a7:	e8 63 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c00017ac:	31 c0                	xor    eax,eax
c00017ae:	c3                   	ret    

c00017af <dlmalloc_usable_size>:
c00017af:	53                   	push   ebx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017b6:	85 c9                	test   ecx,ecx
c00017b8:	74 24                	je     c00017de <dlmalloc_usable_size+0x2f>
c00017ba:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017bd:	f6 c2 02             	test   dl,0x2
c00017c0:	74 08                	je     c00017ca <dlmalloc_usable_size+0x1b>
c00017c2:	83 e2 fc             	and    edx,0xfffffffc
c00017c5:	8d 42 f8             	lea    eax,[edx-0x8]
c00017c8:	eb 14                	jmp    c00017de <dlmalloc_usable_size+0x2f>
c00017ca:	89 d3                	mov    ebx,edx
c00017cc:	31 c0                	xor    eax,eax
c00017ce:	83 e3 fe             	and    ebx,0xfffffffe
c00017d1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017d6:	74 06                	je     c00017de <dlmalloc_usable_size+0x2f>
c00017d8:	83 e2 fc             	and    edx,0xfffffffc
c00017db:	8d 42 fc             	lea    eax,[edx-0x4]
c00017de:	5b                   	pop    ebx
c00017df:	c3                   	ret    

c00017e0 <dlmallinfo>:
c00017e0:	55                   	push   ebp
c00017e1:	57                   	push   edi
c00017e2:	56                   	push   esi
c00017e3:	53                   	push   ebx
c00017e4:	83 ec 08             	sub    esp,0x8
c00017e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017eb:	83 3d ec 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233ec,0x0
c00017f2:	75 0a                	jne    c00017fe <dlmallinfo+0x1e>
c00017f4:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c00017f9:	e8 11 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c00017fe:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0001803:	31 ed                	xor    ebp,ebp
c0001805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001808:	31 c9                	xor    ecx,ecx
c000180a:	83 e0 fc             	and    eax,0xfffffffc
c000180d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001811:	31 c0                	xor    eax,eax
c0001813:	8b 14 85 c4 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc3c]
c000181a:	85 d2                	test   edx,edx
c000181c:	74 0e                	je     c000182c <dlmallinfo+0x4c>
c000181e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001821:	45                   	inc    ebp
c0001822:	83 e6 fc             	and    esi,0xfffffffc
c0001825:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001828:	01 f1                	add    ecx,esi
c000182a:	eb ee                	jmp    c000181a <dlmallinfo+0x3a>
c000182c:	40                   	inc    eax
c000182d:	83 f8 0a             	cmp    eax,0xa
c0001830:	75 e1                	jne    c0001813 <dlmallinfo+0x33>
c0001832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001836:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000183d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001840:	b8 f4 33 02 c0       	mov    eax,0xc00233f4
c0001845:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001848:	39 f0                	cmp    eax,esi
c000184a:	74 10                	je     c000185c <dlmallinfo+0x7c>
c000184c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000184f:	ff 04 24             	inc    DWORD PTR [esp]
c0001852:	83 e7 fc             	and    edi,0xfffffffc
c0001855:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001858:	01 fa                	add    edx,edi
c000185a:	eb ec                	jmp    c0001848 <dlmallinfo+0x68>
c000185c:	83 c0 08             	add    eax,0x8
c000185f:	3d ec 36 02 c0       	cmp    eax,0xc00236ec
c0001864:	75 df                	jne    c0001845 <dlmallinfo+0x65>
c0001866:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001869:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000186c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000186f:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0001874:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001877:	89 03                	mov    DWORD PTR [ebx],eax
c0001879:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000187c:	8b 35 10 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023710
c0001882:	29 d0                	sub    eax,edx
c0001884:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001887:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000188a:	8b 35 24 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023724
c0001890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001894:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001897:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000189a:	8b 35 34 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023734
c00018a0:	89 d8                	mov    eax,ebx
c00018a2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00018a5:	83 c4 08             	add    esp,0x8
c00018a8:	5b                   	pop    ebx
c00018a9:	5e                   	pop    esi
c00018aa:	5f                   	pop    edi
c00018ab:	5d                   	pop    ebp
c00018ac:	c2 04 00             	ret    0x4

c00018af <dlmalloc_stats>:
c00018af:	83 ec 30             	sub    esp,0x30
c00018b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018b6:	50                   	push   eax
c00018b7:	e8 24 ff ff ff       	call   c00017e0 <dlmallinfo>
c00018bc:	83 c4 30             	add    esp,0x30
c00018bf:	c3                   	ret    

c00018c0 <dlmallopt>:
c00018c0:	56                   	push   esi
c00018c1:	b8 c0 33 02 c0       	mov    eax,0xc00233c0
c00018c6:	53                   	push   ebx
c00018c7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018cf:	e8 3b f1 ff ff       	call   c0000a0f <malloc_consolidate>
c00018d4:	8d 46 04             	lea    eax,[esi+0x4]
c00018d7:	83 f8 05             	cmp    eax,0x5
c00018da:	77 67                	ja     c0001943 <dlmallopt+0x83>
c00018dc:	ff 24 85 c4 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe093c]
c00018e3:	83 fb 50             	cmp    ebx,0x50
c00018e6:	77 5b                	ja     c0001943 <dlmallopt+0x83>
c00018e8:	ba 08 00 00 00       	mov    edx,0x8
c00018ed:	85 db                	test   ebx,ebx
c00018ef:	74 12                	je     c0001903 <dlmallopt+0x43>
c00018f1:	83 c3 0b             	add    ebx,0xb
c00018f4:	ba 10 00 00 00       	mov    edx,0x10
c00018f9:	83 fb 0f             	cmp    ebx,0xf
c00018fc:	76 05                	jbe    c0001903 <dlmallopt+0x43>
c00018fe:	89 da                	mov    edx,ebx
c0001900:	83 e2 f8             	and    edx,0xfffffff8
c0001903:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c0001908:	83 e0 03             	and    eax,0x3
c000190b:	09 d0                	or     eax,edx
c000190d:	a3 c0 33 02 c0       	mov    ds:0xc00233c0,eax
c0001912:	eb 31                	jmp    c0001945 <dlmallopt+0x85>
c0001914:	89 1d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ebx
c000191a:	eb 06                	jmp    c0001922 <dlmallopt+0x62>
c000191c:	89 1d 08 37 02 c0    	mov    DWORD PTR ds:0xc0023708,ebx
c0001922:	be 01 00 00 00       	mov    esi,0x1
c0001927:	eb 1c                	jmp    c0001945 <dlmallopt+0x85>
c0001929:	89 1d 0c 37 02 c0    	mov    DWORD PTR ds:0xc002370c,ebx
c000192f:	eb f1                	jmp    c0001922 <dlmallopt+0x62>
c0001931:	31 f6                	xor    esi,esi
c0001933:	85 db                	test   ebx,ebx
c0001935:	75 0e                	jne    c0001945 <dlmallopt+0x85>
c0001937:	c7 05 14 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023714,0x0
c0001941:	eb df                	jmp    c0001922 <dlmallopt+0x62>
c0001943:	31 f6                	xor    esi,esi
c0001945:	89 f0                	mov    eax,esi
c0001947:	5b                   	pop    ebx
c0001948:	5e                   	pop    esi
c0001949:	c3                   	ret    

c000194a <disk_status>:
c000194a:	31 c0                	xor    eax,eax
c000194c:	c3                   	ret    

c000194d <disk_initialize>:
c000194d:	31 c0                	xor    eax,eax
c000194f:	c3                   	ret    

c0001950 <disk_read>:
c0001950:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001955:	0f b6 04 85 e0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb320]
c000195d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001961:	e9 ee 81 01 00       	jmp    c0019b54 <fatWrapperReadDisk>

c0001966 <disk_write>:
c0001966:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196b:	0f b6 04 85 e0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb320]
c0001973:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001977:	e9 1f 82 01 00       	jmp    c0019b9b <fatWrapperWriteDisk>

c000197c <disk_ioctl>:
c000197c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001985:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000198a:	0f b6 04 85 e0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb320]
c0001992:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001996:	e9 47 82 01 00       	jmp    c0019be2 <fatWrapperIoctl>

c000199b <ld_word>:
c000199b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000199f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019a2:	c1 e2 08             	shl    edx,0x8
c00019a5:	09 d0                	or     eax,edx
c00019a7:	c3                   	ret    

c00019a8 <ld_dword>:
c00019a8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00019ac:	89 d1                	mov    ecx,edx
c00019ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019b2:	c1 e1 08             	shl    ecx,0x8
c00019b5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019b8:	09 ca                	or     edx,ecx
c00019ba:	c1 e2 08             	shl    edx,0x8
c00019bd:	09 d0                	or     eax,edx
c00019bf:	c3                   	ret    

c00019c0 <ld_qword>:
c00019c0:	57                   	push   edi
c00019c1:	56                   	push   esi
c00019c2:	53                   	push   ebx
c00019c3:	31 db                	xor    ebx,ebx
c00019c5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019c8:	89 df                	mov    edi,ebx
c00019ca:	89 ce                	mov    esi,ecx
c00019cc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019d0:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d4:	c1 e6 08             	shl    esi,0x8
c00019d7:	09 f2                	or     edx,esi
c00019d9:	89 d6                	mov    esi,edx
c00019db:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019df:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e3:	c1 e6 08             	shl    esi,0x8
c00019e6:	09 f2                	or     edx,esi
c00019e8:	89 d6                	mov    esi,edx
c00019ea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019ee:	0f a4 f7 08          	shld   edi,esi,0x8
c00019f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019f5:	c1 e6 08             	shl    esi,0x8
c00019f8:	89 fb                	mov    ebx,edi
c00019fa:	09 f2                	or     edx,esi
c00019fc:	89 d1                	mov    ecx,edx
c00019fe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a02:	c1 e1 08             	shl    ecx,0x8
c0001a05:	89 da                	mov    edx,ebx
c0001a07:	09 c8                	or     eax,ecx
c0001a09:	5b                   	pop    ebx
c0001a0a:	5e                   	pop    esi
c0001a0b:	5f                   	pop    edi
c0001a0c:	c3                   	ret    

c0001a0d <st_word>:
c0001a0d:	66 89 10             	mov    WORD PTR [eax],dx
c0001a10:	c3                   	ret    

c0001a11 <st_dword>:
c0001a11:	89 10                	mov    DWORD PTR [eax],edx
c0001a13:	c3                   	ret    

c0001a14 <st_qword>:
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a19:	c3                   	ret    

c0001a1a <mem_cpy>:
c0001a1a:	85 c9                	test   ecx,ecx
c0001a1c:	74 10                	je     c0001a2e <mem_cpy+0x14>
c0001a1e:	57                   	push   edi
c0001a1f:	01 c1                	add    ecx,eax
c0001a21:	56                   	push   esi
c0001a22:	89 c7                	mov    edi,eax
c0001a24:	89 d6                	mov    esi,edx
c0001a26:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a27:	39 f9                	cmp    ecx,edi
c0001a29:	75 fb                	jne    c0001a26 <mem_cpy+0xc>
c0001a2b:	5e                   	pop    esi
c0001a2c:	5f                   	pop    edi
c0001a2d:	c3                   	ret    
c0001a2e:	c3                   	ret    

c0001a2f <mem_set>:
c0001a2f:	01 c1                	add    ecx,eax
c0001a31:	40                   	inc    eax
c0001a32:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a35:	39 c8                	cmp    eax,ecx
c0001a37:	75 f8                	jne    c0001a31 <mem_set+0x2>
c0001a39:	c3                   	ret    

c0001a3a <mem_cmp>:
c0001a3a:	57                   	push   edi
c0001a3b:	56                   	push   esi
c0001a3c:	89 c6                	mov    esi,eax
c0001a3e:	53                   	push   ebx
c0001a3f:	46                   	inc    esi
c0001a40:	42                   	inc    edx
c0001a41:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a45:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a49:	29 fb                	sub    ebx,edi
c0001a4b:	89 cf                	mov    edi,ecx
c0001a4d:	29 f7                	sub    edi,esi
c0001a4f:	01 c7                	add    edi,eax
c0001a51:	74 04                	je     c0001a57 <mem_cmp+0x1d>
c0001a53:	85 db                	test   ebx,ebx
c0001a55:	74 e8                	je     c0001a3f <mem_cmp+0x5>
c0001a57:	89 d8                	mov    eax,ebx
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	c3                   	ret    

c0001a5d <chk_chr>:
c0001a5d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a60:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a63:	74 07                	je     c0001a6c <chk_chr+0xf>
c0001a65:	39 d1                	cmp    ecx,edx
c0001a67:	74 03                	je     c0001a6c <chk_chr+0xf>
c0001a69:	40                   	inc    eax
c0001a6a:	eb f1                	jmp    c0001a5d <chk_chr>
c0001a6c:	89 c8                	mov    eax,ecx
c0001a6e:	c3                   	ret    

c0001a6f <dbc_1st>:
c0001a6f:	31 c0                	xor    eax,eax
c0001a71:	c3                   	ret    

c0001a72 <dbc_2nd>:
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <tchar2uni>:
c0001a75:	57                   	push   edi
c0001a76:	89 c7                	mov    edi,eax
c0001a78:	56                   	push   esi
c0001a79:	53                   	push   ebx
c0001a7a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a7c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a7e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a81:	84 c9                	test   cl,cl
c0001a83:	78 0a                	js     c0001a8f <tchar2uni+0x1a>
c0001a85:	0f b6 d1             	movzx  edx,cl
c0001a88:	89 f3                	mov    ebx,esi
c0001a8a:	e9 9f 00 00 00       	jmp    c0001b2e <tchar2uni+0xb9>
c0001a8f:	88 ca                	mov    dl,cl
c0001a91:	83 e2 e0             	and    edx,0xffffffe0
c0001a94:	80 fa c0             	cmp    dl,0xc0
c0001a97:	75 0c                	jne    c0001aa5 <tchar2uni+0x30>
c0001a99:	89 ca                	mov    edx,ecx
c0001a9b:	b9 01 00 00 00       	mov    ecx,0x1
c0001aa0:	83 e2 1f             	and    edx,0x1f
c0001aa3:	eb 2e                	jmp    c0001ad3 <tchar2uni+0x5e>
c0001aa5:	88 ca                	mov    dl,cl
c0001aa7:	83 e2 f0             	and    edx,0xfffffff0
c0001aaa:	80 fa e0             	cmp    dl,0xe0
c0001aad:	75 0c                	jne    c0001abb <tchar2uni+0x46>
c0001aaf:	89 ca                	mov    edx,ecx
c0001ab1:	b9 02 00 00 00       	mov    ecx,0x2
c0001ab6:	83 e2 0f             	and    edx,0xf
c0001ab9:	eb 18                	jmp    c0001ad3 <tchar2uni+0x5e>
c0001abb:	88 ca                	mov    dl,cl
c0001abd:	83 e2 f8             	and    edx,0xfffffff8
c0001ac0:	88 d0                	mov    al,dl
c0001ac2:	83 ca ff             	or     edx,0xffffffff
c0001ac5:	3c f0                	cmp    al,0xf0
c0001ac7:	75 6c                	jne    c0001b35 <tchar2uni+0xc0>
c0001ac9:	89 ca                	mov    edx,ecx
c0001acb:	b9 03 00 00 00       	mov    ecx,0x3
c0001ad0:	83 e2 07             	and    edx,0x7
c0001ad3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ad7:	46                   	inc    esi
c0001ad8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001adb:	88 c8                	mov    al,cl
c0001add:	83 e0 c0             	and    eax,0xffffffc0
c0001ae0:	3c 80                	cmp    al,0x80
c0001ae2:	75 4e                	jne    c0001b32 <tchar2uni+0xbd>
c0001ae4:	c1 e2 06             	shl    edx,0x6
c0001ae7:	83 e1 3f             	and    ecx,0x3f
c0001aea:	09 ca                	or     edx,ecx
c0001aec:	39 de                	cmp    esi,ebx
c0001aee:	75 e7                	jne    c0001ad7 <tchar2uni+0x62>
c0001af0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001af3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001af9:	77 37                	ja     c0001b32 <tchar2uni+0xbd>
c0001afb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b01:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b07:	76 29                	jbe    c0001b32 <tchar2uni+0xbd>
c0001b09:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b0f:	76 1d                	jbe    c0001b2e <tchar2uni+0xb9>
c0001b11:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b17:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b1d:	c1 e1 06             	shl    ecx,0x6
c0001b20:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b26:	09 ca                	or     edx,ecx
c0001b28:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b2e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b30:	eb 03                	jmp    c0001b35 <tchar2uni+0xc0>
c0001b32:	83 ca ff             	or     edx,0xffffffff
c0001b35:	5b                   	pop    ebx
c0001b36:	89 d0                	mov    eax,edx
c0001b38:	5e                   	pop    esi
c0001b39:	5f                   	pop    edi
c0001b3a:	c3                   	ret    

c0001b3b <put_utf>:
c0001b3b:	53                   	push   ebx
c0001b3c:	83 f8 7f             	cmp    eax,0x7f
c0001b3f:	89 c3                	mov    ebx,eax
c0001b41:	b0 00                	mov    al,0x0
c0001b43:	77 11                	ja     c0001b56 <put_utf+0x1b>
c0001b45:	85 c9                	test   ecx,ecx
c0001b47:	0f 84 e5 00 00 00    	je     c0001c32 <put_utf+0xf7>
c0001b4d:	88 1a                	mov    BYTE PTR [edx],bl
c0001b4f:	b0 01                	mov    al,0x1
c0001b51:	e9 dc 00 00 00       	jmp    c0001c32 <put_utf+0xf7>
c0001b56:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b5c:	77 23                	ja     c0001b81 <put_utf+0x46>
c0001b5e:	83 f9 01             	cmp    ecx,0x1
c0001b61:	0f 86 cb 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001b67:	89 d8                	mov    eax,ebx
c0001b69:	83 e3 3f             	and    ebx,0x3f
c0001b6c:	c1 e8 06             	shr    eax,0x6
c0001b6f:	83 cb 80             	or     ebx,0xffffff80
c0001b72:	83 c8 c0             	or     eax,0xffffffc0
c0001b75:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b78:	88 02                	mov    BYTE PTR [edx],al
c0001b7a:	b0 02                	mov    al,0x2
c0001b7c:	e9 b1 00 00 00       	jmp    c0001c32 <put_utf+0xf7>
c0001b81:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b87:	77 40                	ja     c0001bc9 <put_utf+0x8e>
c0001b89:	83 f9 02             	cmp    ecx,0x2
c0001b8c:	0f 86 a0 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001b92:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b98:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b9e:	0f 86 8e 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001ba4:	89 d8                	mov    eax,ebx
c0001ba6:	c1 e8 0c             	shr    eax,0xc
c0001ba9:	83 c8 e0             	or     eax,0xffffffe0
c0001bac:	88 02                	mov    BYTE PTR [edx],al
c0001bae:	89 d8                	mov    eax,ebx
c0001bb0:	83 e3 3f             	and    ebx,0x3f
c0001bb3:	c1 e8 06             	shr    eax,0x6
c0001bb6:	83 cb 80             	or     ebx,0xffffff80
c0001bb9:	83 e0 3f             	and    eax,0x3f
c0001bbc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bbf:	83 c8 80             	or     eax,0xffffff80
c0001bc2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bc5:	b0 03                	mov    al,0x3
c0001bc7:	eb 69                	jmp    c0001c32 <put_utf+0xf7>
c0001bc9:	83 f9 03             	cmp    ecx,0x3
c0001bcc:	76 64                	jbe    c0001c32 <put_utf+0xf7>
c0001bce:	89 d9                	mov    ecx,ebx
c0001bd0:	0f b7 c3             	movzx  eax,bx
c0001bd3:	66 31 c9             	xor    cx,cx
c0001bd6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bdc:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001be2:	c1 e9 06             	shr    ecx,0x6
c0001be5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001beb:	77 43                	ja     c0001c30 <put_utf+0xf5>
c0001bed:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bf3:	77 3b                	ja     c0001c30 <put_utf+0xf5>
c0001bf5:	09 cb                	or     ebx,ecx
c0001bf7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bfd:	89 d8                	mov    eax,ebx
c0001bff:	c1 e8 12             	shr    eax,0x12
c0001c02:	83 c8 f0             	or     eax,0xfffffff0
c0001c05:	88 02                	mov    BYTE PTR [edx],al
c0001c07:	89 d8                	mov    eax,ebx
c0001c09:	c1 e8 0c             	shr    eax,0xc
c0001c0c:	83 e0 3f             	and    eax,0x3f
c0001c0f:	83 c8 80             	or     eax,0xffffff80
c0001c12:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c15:	89 d8                	mov    eax,ebx
c0001c17:	83 e3 3f             	and    ebx,0x3f
c0001c1a:	c1 e8 06             	shr    eax,0x6
c0001c1d:	83 cb 80             	or     ebx,0xffffff80
c0001c20:	83 e0 3f             	and    eax,0x3f
c0001c23:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c26:	83 c8 80             	or     eax,0xffffff80
c0001c29:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c2c:	b0 04                	mov    al,0x4
c0001c2e:	eb 02                	jmp    c0001c32 <put_utf+0xf7>
c0001c30:	31 c0                	xor    eax,eax
c0001c32:	5b                   	pop    ebx
c0001c33:	c3                   	ret    

c0001c34 <clst2sect>:
c0001c34:	89 c1                	mov    ecx,eax
c0001c36:	83 ea 02             	sub    edx,0x2
c0001c39:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c3c:	83 e8 02             	sub    eax,0x2
c0001c3f:	39 d0                	cmp    eax,edx
c0001c41:	76 0d                	jbe    c0001c50 <clst2sect+0x1c>
c0001c43:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c47:	f7 e2                	mul    edx
c0001c49:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c4c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c4f:	c3                   	ret    
c0001c50:	31 c0                	xor    eax,eax
c0001c52:	31 d2                	xor    edx,edx
c0001c54:	c3                   	ret    

c0001c55 <clmt_clust>:
c0001c55:	57                   	push   edi
c0001c56:	89 cf                	mov    edi,ecx
c0001c58:	56                   	push   esi
c0001c59:	89 d6                	mov    esi,edx
c0001c5b:	53                   	push   ebx
c0001c5c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c60:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c63:	89 f2                	mov    edx,esi
c0001c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c67:	c1 ef 09             	shr    edi,0x9
c0001c6a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c6e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c71:	89 f9                	mov    ecx,edi
c0001c73:	31 ff                	xor    edi,edi
c0001c75:	57                   	push   edi
c0001c76:	56                   	push   esi
c0001c77:	51                   	push   ecx
c0001c78:	52                   	push   edx
c0001c79:	e8 2e cb 01 00       	call   c001e7ac <__udivdi3>
c0001c7e:	83 c4 10             	add    esp,0x10
c0001c81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c83:	85 d2                	test   edx,edx
c0001c85:	74 10                	je     c0001c97 <clmt_clust+0x42>
c0001c87:	39 d0                	cmp    eax,edx
c0001c89:	72 07                	jb     c0001c92 <clmt_clust+0x3d>
c0001c8b:	29 d0                	sub    eax,edx
c0001c8d:	83 c3 08             	add    ebx,0x8
c0001c90:	eb ef                	jmp    c0001c81 <clmt_clust+0x2c>
c0001c92:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c95:	89 c2                	mov    edx,eax
c0001c97:	5b                   	pop    ebx
c0001c98:	89 d0                	mov    eax,edx
c0001c9a:	5e                   	pop    esi
c0001c9b:	5f                   	pop    edi
c0001c9c:	c3                   	ret    

c0001c9d <pick_lfn>:
c0001c9d:	55                   	push   ebp
c0001c9e:	57                   	push   edi
c0001c9f:	56                   	push   esi
c0001ca0:	89 d6                	mov    esi,edx
c0001ca2:	53                   	push   ebx
c0001ca3:	89 c3                	mov    ebx,eax
c0001ca5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ca8:	e8 ee fc ff ff       	call   c000199b <ld_word>
c0001cad:	66 85 c0             	test   ax,ax
c0001cb0:	74 04                	je     c0001cb6 <pick_lfn+0x19>
c0001cb2:	31 c0                	xor    eax,eax
c0001cb4:	eb 5c                	jmp    c0001d12 <pick_lfn+0x75>
c0001cb6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cb9:	bd 01 00 00 00       	mov    ebp,0x1
c0001cbe:	83 e1 bf             	and    ecx,0xffffffbf
c0001cc1:	31 ff                	xor    edi,edi
c0001cc3:	49                   	dec    ecx
c0001cc4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cc7:	0f b6 87 e0 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0820]
c0001cce:	01 f0                	add    eax,esi
c0001cd0:	e8 c6 fc ff ff       	call   c000199b <ld_word>
c0001cd5:	66 85 ed             	test   bp,bp
c0001cd8:	74 11                	je     c0001ceb <pick_lfn+0x4e>
c0001cda:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce0:	77 d0                	ja     c0001cb2 <pick_lfn+0x15>
c0001ce2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ce6:	89 c5                	mov    ebp,eax
c0001ce8:	41                   	inc    ecx
c0001ce9:	eb 04                	jmp    c0001cef <pick_lfn+0x52>
c0001ceb:	66 40                	inc    ax
c0001ced:	75 c3                	jne    c0001cb2 <pick_lfn+0x15>
c0001cef:	47                   	inc    edi
c0001cf0:	83 ff 0d             	cmp    edi,0xd
c0001cf3:	75 d2                	jne    c0001cc7 <pick_lfn+0x2a>
c0001cf5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cf8:	74 13                	je     c0001d0d <pick_lfn+0x70>
c0001cfa:	66 85 ed             	test   bp,bp
c0001cfd:	74 0e                	je     c0001d0d <pick_lfn+0x70>
c0001cff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d05:	77 ab                	ja     c0001cb2 <pick_lfn+0x15>
c0001d07:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d0d:	b8 01 00 00 00       	mov    eax,0x1
c0001d12:	5b                   	pop    ebx
c0001d13:	5e                   	pop    esi
c0001d14:	5f                   	pop    edi
c0001d15:	5d                   	pop    ebp
c0001d16:	c3                   	ret    

c0001d17 <put_lfn>:
c0001d17:	55                   	push   ebp
c0001d18:	31 ed                	xor    ebp,ebp
c0001d1a:	57                   	push   edi
c0001d1b:	89 d7                	mov    edi,edx
c0001d1d:	56                   	push   esi
c0001d1e:	31 f6                	xor    esi,esi
c0001d20:	53                   	push   ebx
c0001d21:	83 ec 08             	sub    esp,0x8
c0001d24:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d27:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d2f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d35:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d38:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d3b:	31 d2                	xor    edx,edx
c0001d3d:	e8 cb fc ff ff       	call   c0001a0d <st_word>
c0001d42:	0f b6 d9             	movzx  ebx,cl
c0001d45:	4b                   	dec    ebx
c0001d46:	6b db 0d             	imul   ebx,ebx,0xd
c0001d49:	66 83 fe ff          	cmp    si,0xffff
c0001d4d:	74 08                	je     c0001d57 <put_lfn+0x40>
c0001d4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d52:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d56:	43                   	inc    ebx
c0001d57:	0f b6 85 e0 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0820]
c0001d5e:	0f b7 d6             	movzx  edx,si
c0001d61:	01 f8                	add    eax,edi
c0001d63:	e8 a5 fc ff ff       	call   c0001a0d <st_word>
c0001d68:	66 85 f6             	test   si,si
c0001d6b:	75 03                	jne    c0001d70 <put_lfn+0x59>
c0001d6d:	83 ce ff             	or     esi,0xffffffff
c0001d70:	45                   	inc    ebp
c0001d71:	83 fd 0d             	cmp    ebp,0xd
c0001d74:	75 d3                	jne    c0001d49 <put_lfn+0x32>
c0001d76:	66 46                	inc    si
c0001d78:	74 0a                	je     c0001d84 <put_lfn+0x6d>
c0001d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d7d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d82:	75 09                	jne    c0001d8d <put_lfn+0x76>
c0001d84:	88 c8                	mov    al,cl
c0001d86:	83 c8 40             	or     eax,0x40
c0001d89:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d8d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d91:	88 07                	mov    BYTE PTR [edi],al
c0001d93:	83 c4 08             	add    esp,0x8
c0001d96:	5b                   	pop    ebx
c0001d97:	5e                   	pop    esi
c0001d98:	5f                   	pop    edi
c0001d99:	5d                   	pop    ebp
c0001d9a:	c3                   	ret    

c0001d9b <gen_numname>:
c0001d9b:	57                   	push   edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	56                   	push   esi
c0001d9f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001da4:	53                   	push   ebx
c0001da5:	89 c6                	mov    esi,eax
c0001da7:	83 ec 10             	sub    esp,0x10
c0001daa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001dae:	e8 67 fc ff ff       	call   c0001a1a <mem_cpy>
c0001db3:	83 fb 05             	cmp    ebx,0x5
c0001db6:	76 2d                	jbe    c0001de5 <gen_numname+0x4a>
c0001db8:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dbb:	66 85 c0             	test   ax,ax
c0001dbe:	74 25                	je     c0001de5 <gen_numname+0x4a>
c0001dc0:	83 c7 02             	add    edi,0x2
c0001dc3:	ba 10 00 00 00       	mov    edx,0x10
c0001dc8:	01 db                	add    ebx,ebx
c0001dca:	89 c1                	mov    ecx,eax
c0001dcc:	66 d1 e8             	shr    ax,1
c0001dcf:	83 e1 01             	and    ecx,0x1
c0001dd2:	01 cb                	add    ebx,ecx
c0001dd4:	0f ba e3 10          	bt     ebx,0x10
c0001dd8:	73 06                	jae    c0001de0 <gen_numname+0x45>
c0001dda:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001de0:	4a                   	dec    edx
c0001de1:	75 e5                	jne    c0001dc8 <gen_numname+0x2d>
c0001de3:	eb d3                	jmp    c0001db8 <gen_numname+0x1d>
c0001de5:	b8 07 00 00 00       	mov    eax,0x7
c0001dea:	88 d9                	mov    cl,bl
c0001dec:	83 e1 0f             	and    ecx,0xf
c0001def:	8d 51 30             	lea    edx,[ecx+0x30]
c0001df2:	80 fa 39             	cmp    dl,0x39
c0001df5:	76 03                	jbe    c0001dfa <gen_numname+0x5f>
c0001df7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dfa:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001dfd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e01:	89 da                	mov    edx,ebx
c0001e03:	c1 ea 04             	shr    edx,0x4
c0001e06:	83 fb 0f             	cmp    ebx,0xf
c0001e09:	76 06                	jbe    c0001e11 <gen_numname+0x76>
c0001e0b:	89 c8                	mov    eax,ecx
c0001e0d:	89 d3                	mov    ebx,edx
c0001e0f:	eb d9                	jmp    c0001dea <gen_numname+0x4f>
c0001e11:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e16:	31 d2                	xor    edx,edx
c0001e18:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e1e:	39 ca                	cmp    edx,ecx
c0001e20:	73 18                	jae    c0001e3a <gen_numname+0x9f>
c0001e22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e25:	3c 20                	cmp    al,0x20
c0001e27:	74 11                	je     c0001e3a <gen_numname+0x9f>
c0001e29:	e8 41 fc ff ff       	call   c0001a6f <dbc_1st>
c0001e2e:	85 c0                	test   eax,eax
c0001e30:	74 05                	je     c0001e37 <gen_numname+0x9c>
c0001e32:	39 d3                	cmp    ebx,edx
c0001e34:	74 04                	je     c0001e3a <gen_numname+0x9f>
c0001e36:	42                   	inc    edx
c0001e37:	42                   	inc    edx
c0001e38:	eb e1                	jmp    c0001e1b <gen_numname+0x80>
c0001e3a:	b0 20                	mov    al,0x20
c0001e3c:	83 f9 07             	cmp    ecx,0x7
c0001e3f:	77 05                	ja     c0001e46 <gen_numname+0xab>
c0001e41:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e45:	41                   	inc    ecx
c0001e46:	42                   	inc    edx
c0001e47:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e4b:	83 fa 07             	cmp    edx,0x7
c0001e4e:	76 ea                	jbe    c0001e3a <gen_numname+0x9f>
c0001e50:	83 c4 10             	add    esp,0x10
c0001e53:	5b                   	pop    ebx
c0001e54:	5e                   	pop    esi
c0001e55:	5f                   	pop    edi
c0001e56:	c3                   	ret    

c0001e57 <sum_sfn>:
c0001e57:	31 c9                	xor    ecx,ecx
c0001e59:	31 d2                	xor    edx,edx
c0001e5b:	d0 ca                	ror    dl,1
c0001e5d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e60:	41                   	inc    ecx
c0001e61:	83 f9 0b             	cmp    ecx,0xb
c0001e64:	75 f5                	jne    c0001e5b <sum_sfn+0x4>
c0001e66:	88 d0                	mov    al,dl
c0001e68:	c3                   	ret    

c0001e69 <xdir_sum>:
c0001e69:	56                   	push   esi
c0001e6a:	31 c9                	xor    ecx,ecx
c0001e6c:	53                   	push   ebx
c0001e6d:	31 d2                	xor    edx,edx
c0001e6f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e73:	43                   	inc    ebx
c0001e74:	c1 e3 05             	shl    ebx,0x5
c0001e77:	83 fa 02             	cmp    edx,0x2
c0001e7a:	74 0b                	je     c0001e87 <xdir_sum+0x1e>
c0001e7c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e80:	66 d1 c9             	ror    cx,1
c0001e83:	01 f1                	add    ecx,esi
c0001e85:	eb 05                	jmp    c0001e8c <xdir_sum+0x23>
c0001e87:	ba 03 00 00 00       	mov    edx,0x3
c0001e8c:	42                   	inc    edx
c0001e8d:	39 d3                	cmp    ebx,edx
c0001e8f:	77 e6                	ja     c0001e77 <xdir_sum+0xe>
c0001e91:	89 c8                	mov    eax,ecx
c0001e93:	5b                   	pop    ebx
c0001e94:	5e                   	pop    esi
c0001e95:	c3                   	ret    

c0001e96 <xsum32>:
c0001e96:	d1 ca                	ror    edx,1
c0001e98:	0f b6 c0             	movzx  eax,al
c0001e9b:	01 d0                	add    eax,edx
c0001e9d:	c3                   	ret    

c0001e9e <get_xfileinfo>:
c0001e9e:	55                   	push   ebp
c0001e9f:	31 c9                	xor    ecx,ecx
c0001ea1:	57                   	push   edi
c0001ea2:	bd 40 00 00 00       	mov    ebp,0x40
c0001ea7:	56                   	push   esi
c0001ea8:	31 ff                	xor    edi,edi
c0001eaa:	53                   	push   ebx
c0001eab:	89 c6                	mov    esi,eax
c0001ead:	83 ec 0c             	sub    esp,0xc
c0001eb0:	89 d3                	mov    ebx,edx
c0001eb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eb9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ebd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ec0:	76 6d                	jbe    c0001f2f <get_xfileinfo+0x91>
c0001ec2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ec8:	76 0b                	jbe    c0001ed5 <get_xfileinfo+0x37>
c0001eca:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ece:	bf 01 00 00 00       	mov    edi,0x1
c0001ed3:	eb 63                	jmp    c0001f38 <get_xfileinfo+0x9a>
c0001ed5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001edb:	75 03                	jne    c0001ee0 <get_xfileinfo+0x42>
c0001edd:	83 c5 02             	add    ebp,0x2
c0001ee0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ee3:	83 c5 02             	add    ebp,0x2
c0001ee6:	e8 b0 fa ff ff       	call   c000199b <ld_word>
c0001eeb:	ff 04 24             	inc    DWORD PTR [esp]
c0001eee:	66 85 c9             	test   cx,cx
c0001ef1:	75 0d                	jne    c0001f00 <get_xfileinfo+0x62>
c0001ef3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001ef9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001efe:	76 2b                	jbe    c0001f2b <get_xfileinfo+0x8d>
c0001f00:	c1 e1 10             	shl    ecx,0x10
c0001f03:	ba ff 00 00 00       	mov    edx,0xff
c0001f08:	0f b7 c0             	movzx  eax,ax
c0001f0b:	29 fa                	sub    edx,edi
c0001f0d:	09 c8                	or     eax,ecx
c0001f0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f13:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f1b:	e8 1b fc ff ff       	call   c0001b3b <put_utf>
c0001f20:	84 c0                	test   al,al
c0001f22:	74 a6                	je     c0001eca <get_xfileinfo+0x2c>
c0001f24:	0f b6 c0             	movzx  eax,al
c0001f27:	01 c7                	add    edi,eax
c0001f29:	31 c0                	xor    eax,eax
c0001f2b:	89 c1                	mov    ecx,eax
c0001f2d:	eb 8a                	jmp    c0001eb9 <get_xfileinfo+0x1b>
c0001f2f:	85 ff                	test   edi,edi
c0001f31:	74 97                	je     c0001eca <get_xfileinfo+0x2c>
c0001f33:	66 85 c9             	test   cx,cx
c0001f36:	75 92                	jne    c0001eca <get_xfileinfo+0x2c>
c0001f38:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f3d:	31 c0                	xor    eax,eax
c0001f3f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f43:	31 d2                	xor    edx,edx
c0001f45:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f48:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f4b:	80 e1 10             	and    cl,0x10
c0001f4e:	75 08                	jne    c0001f58 <get_xfileinfo+0xba>
c0001f50:	8d 46 38             	lea    eax,[esi+0x38]
c0001f53:	e8 68 fa ff ff       	call   c00019c0 <ld_qword>
c0001f58:	89 03                	mov    DWORD PTR [ebx],eax
c0001f5a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f5d:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f60:	e8 36 fa ff ff       	call   c000199b <ld_word>
c0001f65:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f69:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f6c:	e8 2a fa ff ff       	call   c000199b <ld_word>
c0001f71:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f75:	83 c4 0c             	add    esp,0xc
c0001f78:	5b                   	pop    ebx
c0001f79:	5e                   	pop    esi
c0001f7a:	5f                   	pop    edi
c0001f7b:	5d                   	pop    ebp
c0001f7c:	c3                   	ret    

c0001f7d <get_ldnumber>:
c0001f7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7f:	85 d2                	test   edx,edx
c0001f81:	74 14                	je     c0001f97 <get_ldnumber+0x1a>
c0001f83:	56                   	push   esi
c0001f84:	53                   	push   ebx
c0001f85:	89 d3                	mov    ebx,edx
c0001f87:	43                   	inc    ebx
c0001f88:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f8b:	80 f9 1f             	cmp    cl,0x1f
c0001f8e:	76 0d                	jbe    c0001f9d <get_ldnumber+0x20>
c0001f90:	80 f9 3a             	cmp    cl,0x3a
c0001f93:	75 f2                	jne    c0001f87 <get_ldnumber+0xa>
c0001f95:	eb 0a                	jmp    c0001fa1 <get_ldnumber+0x24>
c0001f97:	83 c9 ff             	or     ecx,0xffffffff
c0001f9a:	89 c8                	mov    eax,ecx
c0001f9c:	c3                   	ret    
c0001f9d:	31 c9                	xor    ecx,ecx
c0001f9f:	eb 24                	jmp    c0001fc5 <get_ldnumber+0x48>
c0001fa1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa4:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa7:	80 f9 09             	cmp    cl,0x9
c0001faa:	77 16                	ja     c0001fc2 <get_ldnumber+0x45>
c0001fac:	83 c2 02             	add    edx,0x2
c0001faf:	83 c9 ff             	or     ecx,0xffffffff
c0001fb2:	39 d3                	cmp    ebx,edx
c0001fb4:	75 0f                	jne    c0001fc5 <get_ldnumber+0x48>
c0001fb6:	89 f2                	mov    edx,esi
c0001fb8:	89 18                	mov    DWORD PTR [eax],ebx
c0001fba:	0f be ca             	movsx  ecx,dl
c0001fbd:	83 e9 30             	sub    ecx,0x30
c0001fc0:	eb 03                	jmp    c0001fc5 <get_ldnumber+0x48>
c0001fc2:	83 c9 ff             	or     ecx,0xffffffff
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	5b                   	pop    ebx
c0001fc8:	5e                   	pop    esi
c0001fc9:	c3                   	ret    

c0001fca <crc32>:
c0001fca:	56                   	push   esi
c0001fcb:	89 d6                	mov    esi,edx
c0001fcd:	53                   	push   ebx
c0001fce:	b2 01                	mov    dl,0x1
c0001fd0:	bb 08 00 00 00       	mov    ebx,0x8
c0001fd5:	89 f1                	mov    ecx,esi
c0001fd7:	84 d1                	test   cl,dl
c0001fd9:	0f 95 c1             	setne  cl
c0001fdc:	0f b6 c9             	movzx  ecx,cl
c0001fdf:	31 c1                	xor    ecx,eax
c0001fe1:	89 c8                	mov    eax,ecx
c0001fe3:	d1 e8                	shr    eax,1
c0001fe5:	80 e1 01             	and    cl,0x1
c0001fe8:	74 05                	je     c0001fef <crc32+0x25>
c0001fea:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fef:	d1 e2                	shl    edx,1
c0001ff1:	4b                   	dec    ebx
c0001ff2:	75 e1                	jne    c0001fd5 <crc32+0xb>
c0001ff4:	5b                   	pop    ebx
c0001ff5:	5e                   	pop    esi
c0001ff6:	c3                   	ret    

c0001ff7 <test_gpt_header>:
c0001ff7:	55                   	push   ebp
c0001ff8:	b9 10 00 00 00       	mov    ecx,0x10
c0001ffd:	57                   	push   edi
c0001ffe:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0002003:	56                   	push   esi
c0002004:	31 ff                	xor    edi,edi
c0002006:	53                   	push   ebx
c0002007:	89 c3                	mov    ebx,eax
c0002009:	e8 2c fa ff ff       	call   c0001a3a <mem_cmp>
c000200e:	85 c0                	test   eax,eax
c0002010:	75 55                	jne    c0002067 <test_gpt_header+0x70>
c0002012:	89 c7                	mov    edi,eax
c0002014:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002019:	83 ce ff             	or     esi,0xffffffff
c000201c:	31 d2                	xor    edx,edx
c000201e:	83 fd 03             	cmp    ebp,0x3
c0002021:	76 05                	jbe    c0002028 <test_gpt_header+0x31>
c0002023:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002028:	89 f0                	mov    eax,esi
c000202a:	45                   	inc    ebp
c000202b:	e8 9a ff ff ff       	call   c0001fca <crc32>
c0002030:	83 fd 4c             	cmp    ebp,0x4c
c0002033:	89 c6                	mov    esi,eax
c0002035:	75 e5                	jne    c000201c <test_gpt_header+0x25>
c0002037:	8d 43 10             	lea    eax,[ebx+0x10]
c000203a:	f7 d6                	not    esi
c000203c:	e8 67 f9 ff ff       	call   c00019a8 <ld_dword>
c0002041:	39 c6                	cmp    esi,eax
c0002043:	75 22                	jne    c0002067 <test_gpt_header+0x70>
c0002045:	8d 43 54             	lea    eax,[ebx+0x54]
c0002048:	e8 5b f9 ff ff       	call   c00019a8 <ld_dword>
c000204d:	83 c0 80             	add    eax,0xffffff80
c0002050:	75 15                	jne    c0002067 <test_gpt_header+0x70>
c0002052:	8d 43 50             	lea    eax,[ebx+0x50]
c0002055:	e8 4e f9 ff ff       	call   c00019a8 <ld_dword>
c000205a:	3d 80 00 00 00       	cmp    eax,0x80
c000205f:	0f 96 c0             	setbe  al
c0002062:	0f b6 c0             	movzx  eax,al
c0002065:	89 c7                	mov    edi,eax
c0002067:	5b                   	pop    ebx
c0002068:	89 f8                	mov    eax,edi
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	5d                   	pop    ebp
c000206d:	c3                   	ret    

c000206e <make_rand>:
c000206e:	56                   	push   esi
c000206f:	85 c0                	test   eax,eax
c0002071:	53                   	push   ebx
c0002072:	75 05                	jne    c0002079 <make_rand+0xb>
c0002074:	b8 01 00 00 00       	mov    eax,0x1
c0002079:	01 d1                	add    ecx,edx
c000207b:	bb 08 00 00 00       	mov    ebx,0x8
c0002080:	89 c6                	mov    esi,eax
c0002082:	d1 e8                	shr    eax,1
c0002084:	83 e6 01             	and    esi,0x1
c0002087:	85 f6                	test   esi,esi
c0002089:	74 05                	je     c0002090 <make_rand+0x22>
c000208b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002090:	4b                   	dec    ebx
c0002091:	75 ed                	jne    c0002080 <make_rand+0x12>
c0002093:	42                   	inc    edx
c0002094:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002097:	39 ca                	cmp    edx,ecx
c0002099:	75 e0                	jne    c000207b <make_rand+0xd>
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	c3                   	ret    

c000209e <validate>:
c000209e:	56                   	push   esi
c000209f:	53                   	push   ebx
c00020a0:	89 d6                	mov    esi,edx
c00020a2:	51                   	push   ecx
c00020a3:	85 c0                	test   eax,eax
c00020a5:	75 09                	jne    c00020b0 <validate+0x12>
c00020a7:	b8 09 00 00 00       	mov    eax,0x9
c00020ac:	31 c9                	xor    ecx,ecx
c00020ae:	eb 2f                	jmp    c00020df <validate+0x41>
c00020b0:	89 c3                	mov    ebx,eax
c00020b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00020b4:	85 c0                	test   eax,eax
c00020b6:	74 ef                	je     c00020a7 <validate+0x9>
c00020b8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020bb:	74 ea                	je     c00020a7 <validate+0x9>
c00020bd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020c1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020c5:	75 e0                	jne    c00020a7 <validate+0x9>
c00020c7:	83 ec 0c             	sub    esp,0xc
c00020ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ce:	50                   	push   eax
c00020cf:	e8 76 f8 ff ff       	call   c000194a <disk_status>
c00020d4:	83 c4 10             	add    esp,0x10
c00020d7:	a8 01                	test   al,0x1
c00020d9:	75 cc                	jne    c00020a7 <validate+0x9>
c00020db:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020dd:	31 c0                	xor    eax,eax
c00020df:	89 0e                	mov    DWORD PTR [esi],ecx
c00020e1:	5a                   	pop    edx
c00020e2:	5b                   	pop    ebx
c00020e3:	5e                   	pop    esi
c00020e4:	c3                   	ret    

c00020e5 <sync_window>:
c00020e5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020e9:	0f 84 85 00 00 00    	je     c0002174 <sync_window+0x8f>
c00020ef:	55                   	push   ebp
c00020f0:	8d 68 54             	lea    ebp,[eax+0x54]
c00020f3:	57                   	push   edi
c00020f4:	56                   	push   esi
c00020f5:	53                   	push   ebx
c00020f6:	89 c3                	mov    ebx,eax
c00020f8:	83 ec 28             	sub    esp,0x28
c00020fb:	6a 01                	push   0x1
c00020fd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002100:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002103:	55                   	push   ebp
c0002104:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002108:	50                   	push   eax
c0002109:	e8 58 f8 ff ff       	call   c0001966 <disk_write>
c000210e:	83 c4 20             	add    esp,0x20
c0002111:	ba 01 00 00 00       	mov    edx,0x1
c0002116:	85 c0                	test   eax,eax
c0002118:	75 50                	jne    c000216a <sync_window+0x85>
c000211a:	31 ff                	xor    edi,edi
c000211c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000211f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002123:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002127:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000212a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000212d:	89 c6                	mov    esi,eax
c000212f:	89 d7                	mov    edi,edx
c0002131:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002134:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002138:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000213b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000213f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002143:	73 23                	jae    c0002168 <sync_window+0x83>
c0002145:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002149:	75 1d                	jne    c0002168 <sync_window+0x83>
c000214b:	83 ec 0c             	sub    esp,0xc
c000214e:	6a 01                	push   0x1
c0002150:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002154:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002158:	52                   	push   edx
c0002159:	50                   	push   eax
c000215a:	55                   	push   ebp
c000215b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000215f:	50                   	push   eax
c0002160:	e8 01 f8 ff ff       	call   c0001966 <disk_write>
c0002165:	83 c4 20             	add    esp,0x20
c0002168:	31 d2                	xor    edx,edx
c000216a:	83 c4 1c             	add    esp,0x1c
c000216d:	89 d0                	mov    eax,edx
c000216f:	5b                   	pop    ebx
c0002170:	5e                   	pop    esi
c0002171:	5f                   	pop    edi
c0002172:	5d                   	pop    ebp
c0002173:	c3                   	ret    
c0002174:	31 d2                	xor    edx,edx
c0002176:	89 d0                	mov    eax,edx
c0002178:	c3                   	ret    

c0002179 <move_window>:
c0002179:	56                   	push   esi
c000217a:	53                   	push   ebx
c000217b:	89 c3                	mov    ebx,eax
c000217d:	83 ec 14             	sub    esp,0x14
c0002180:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002183:	75 07                	jne    c000218c <move_window+0x13>
c0002185:	31 f6                	xor    esi,esi
c0002187:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000218a:	74 59                	je     c00021e5 <move_window+0x6c>
c000218c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002190:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002194:	89 d8                	mov    eax,ebx
c0002196:	e8 4a ff ff ff       	call   c00020e5 <sync_window>
c000219b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000219f:	89 c6                	mov    esi,eax
c00021a1:	85 c0                	test   eax,eax
c00021a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021a7:	75 3c                	jne    c00021e5 <move_window+0x6c>
c00021a9:	83 ec 0c             	sub    esp,0xc
c00021ac:	8d 43 54             	lea    eax,[ebx+0x54]
c00021af:	6a 01                	push   0x1
c00021b1:	51                   	push   ecx
c00021b2:	52                   	push   edx
c00021b3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021b7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021bb:	50                   	push   eax
c00021bc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c0:	50                   	push   eax
c00021c1:	e8 8a f7 ff ff       	call   c0001950 <disk_read>
c00021c6:	83 c4 20             	add    esp,0x20
c00021c9:	85 c0                	test   eax,eax
c00021cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021d3:	74 0a                	je     c00021df <move_window+0x66>
c00021d5:	83 ca ff             	or     edx,0xffffffff
c00021d8:	be 01 00 00 00       	mov    esi,0x1
c00021dd:	89 d1                	mov    ecx,edx
c00021df:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021e2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021e5:	89 f0                	mov    eax,esi
c00021e7:	83 c4 14             	add    esp,0x14
c00021ea:	5b                   	pop    ebx
c00021eb:	5e                   	pop    esi
c00021ec:	c3                   	ret    

c00021ed <check_fs>:
c00021ed:	53                   	push   ebx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	83 ec 08             	sub    esp,0x8
c00021f3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021f7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021fe:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002205:	e8 6f ff ff ff       	call   c0002179 <move_window>
c000220a:	ba 04 00 00 00       	mov    edx,0x4
c000220f:	85 c0                	test   eax,eax
c0002211:	0f 85 89 00 00 00    	jne    c00022a0 <check_fs+0xb3>
c0002217:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000221d:	e8 79 f7 ff ff       	call   c000199b <ld_word>
c0002222:	ba 03 00 00 00       	mov    edx,0x3
c0002227:	66 3d 55 aa          	cmp    ax,0xaa55
c000222b:	75 73                	jne    c00022a0 <check_fs+0xb3>
c000222d:	ba 00 f8 01 c0       	mov    edx,0xc001f800
c0002232:	8d 43 54             	lea    eax,[ebx+0x54]
c0002235:	b9 0b 00 00 00       	mov    ecx,0xb
c000223a:	e8 fb f7 ff ff       	call   c0001a3a <mem_cmp>
c000223f:	ba 01 00 00 00       	mov    edx,0x1
c0002244:	85 c0                	test   eax,eax
c0002246:	74 58                	je     c00022a0 <check_fs+0xb3>
c0002248:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000224b:	8d 50 18             	lea    edx,[eax+0x18]
c000224e:	80 fa 01             	cmp    dl,0x1
c0002251:	76 09                	jbe    c000225c <check_fs+0x6f>
c0002253:	ba 02 00 00 00       	mov    edx,0x2
c0002258:	3c eb                	cmp    al,0xeb
c000225a:	75 44                	jne    c00022a0 <check_fs+0xb3>
c000225c:	ba d8 22 02 c0       	mov    edx,0xc00222d8
c0002261:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002267:	b9 03 00 00 00       	mov    ecx,0x3
c000226c:	e8 c9 f7 ff ff       	call   c0001a3a <mem_cmp>
c0002271:	31 d2                	xor    edx,edx
c0002273:	85 c0                	test   eax,eax
c0002275:	74 29                	je     c00022a0 <check_fs+0xb3>
c0002277:	ba 0c f8 01 c0       	mov    edx,0xc001f80c
c000227c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002282:	b9 05 00 00 00       	mov    ecx,0x5
c0002287:	e8 ae f7 ff ff       	call   c0001a3a <mem_cmp>
c000228c:	31 d2                	xor    edx,edx
c000228e:	85 c0                	test   eax,eax
c0002290:	74 0e                	je     c00022a0 <check_fs+0xb3>
c0002292:	31 d2                	xor    edx,edx
c0002294:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000229b:	0f 95 c2             	setne  dl
c000229e:	01 d2                	add    edx,edx
c00022a0:	89 d0                	mov    eax,edx
c00022a2:	83 c4 08             	add    esp,0x8
c00022a5:	5b                   	pop    ebx
c00022a6:	c3                   	ret    

c00022a7 <find_volume>:
c00022a7:	55                   	push   ebp
c00022a8:	31 c9                	xor    ecx,ecx
c00022aa:	57                   	push   edi
c00022ab:	56                   	push   esi
c00022ac:	89 d6                	mov    esi,edx
c00022ae:	53                   	push   ebx
c00022af:	31 d2                	xor    edx,edx
c00022b1:	83 ec 3c             	sub    esp,0x3c
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	e8 32 ff ff ff       	call   c00021ed <check_fs>
c00022bb:	83 f8 02             	cmp    eax,0x2
c00022be:	74 0e                	je     c00022ce <find_volume+0x27>
c00022c0:	0f 87 5d 01 00 00    	ja     c0002423 <find_volume+0x17c>
c00022c6:	85 f6                	test   esi,esi
c00022c8:	0f 84 55 01 00 00    	je     c0002423 <find_volume+0x17c>
c00022ce:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022d5:	0f 85 dd 00 00 00    	jne    c00023b8 <find_volume+0x111>
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	ba 01 00 00 00       	mov    edx,0x1
c00022e2:	89 d8                	mov    eax,ebx
c00022e4:	e8 90 fe ff ff       	call   c0002179 <move_window>
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 0a                	je     c00022f7 <find_volume+0x50>
c00022ed:	b8 04 00 00 00       	mov    eax,0x4
c00022f2:	e9 2c 01 00 00       	jmp    c0002423 <find_volume+0x17c>
c00022f7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022fa:	89 e8                	mov    eax,ebp
c00022fc:	e8 f6 fc ff ff       	call   c0001ff7 <test_gpt_header>
c0002301:	85 c0                	test   eax,eax
c0002303:	75 0a                	jne    c000230f <find_volume+0x68>
c0002305:	b8 03 00 00 00       	mov    eax,0x3
c000230a:	e9 14 01 00 00       	jmp    c0002423 <find_volume+0x17c>
c000230f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002315:	e8 8e f6 ff ff       	call   c00019a8 <ld_dword>
c000231a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000231e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002324:	e8 97 f6 ff ff       	call   c00019c0 <ld_qword>
c0002329:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002335:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002339:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002341:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002345:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002349:	74 ba                	je     c0002305 <find_volume+0x5e>
c000234b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000234f:	31 c9                	xor    ecx,ecx
c0002351:	c1 e7 07             	shl    edi,0x7
c0002354:	89 d8                	mov    eax,ebx
c0002356:	89 fa                	mov    edx,edi
c0002358:	c1 ea 09             	shr    edx,0x9
c000235b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000235f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002363:	e8 11 fe ff ff       	call   c0002179 <move_window>
c0002368:	85 c0                	test   eax,eax
c000236a:	75 81                	jne    c00022ed <find_volume+0x46>
c000236c:	81 e7 80 01 00 00    	and    edi,0x180
c0002372:	b9 10 00 00 00       	mov    ecx,0x10
c0002377:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000237b:	ba f0 f7 01 c0       	mov    edx,0xc001f7f0
c0002380:	e8 b5 f6 ff ff       	call   c0001a3a <mem_cmp>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 29                	jne    c00023b2 <find_volume+0x10b>
c0002389:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000238d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002391:	e8 2a f6 ff ff       	call   c00019c0 <ld_qword>
c0002396:	89 d1                	mov    ecx,edx
c0002398:	89 c2                	mov    edx,eax
c000239a:	89 d8                	mov    eax,ebx
c000239c:	e8 4c fe ff ff       	call   c00021ed <check_fs>
c00023a1:	85 f6                	test   esi,esi
c00023a3:	75 07                	jne    c00023ac <find_volume+0x105>
c00023a5:	83 f8 01             	cmp    eax,0x1
c00023a8:	77 08                	ja     c00023b2 <find_volume+0x10b>
c00023aa:	eb 77                	jmp    c0002423 <find_volume+0x17c>
c00023ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023b0:	74 71                	je     c0002423 <find_volume+0x17c>
c00023b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023b6:	eb 89                	jmp    c0002341 <find_volume+0x9a>
c00023b8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023bc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023c2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023cc:	89 cd                	mov    ebp,ecx
c00023ce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023d2:	89 f8                	mov    eax,edi
c00023d4:	83 c7 10             	add    edi,0x10
c00023d7:	e8 cc f5 ff ff       	call   c00019a8 <ld_dword>
c00023dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023e0:	89 01                	mov    DWORD PTR [ecx],eax
c00023e2:	83 c1 04             	add    ecx,0x4
c00023e5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023e9:	75 e3                	jne    c00023ce <find_volume+0x127>
c00023eb:	31 ff                	xor    edi,edi
c00023ed:	85 f6                	test   esi,esi
c00023ef:	74 03                	je     c00023f4 <find_volume+0x14d>
c00023f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00023f4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023f8:	85 d2                	test   edx,edx
c00023fa:	74 14                	je     c0002410 <find_volume+0x169>
c00023fc:	31 c9                	xor    ecx,ecx
c00023fe:	89 d8                	mov    eax,ebx
c0002400:	e8 e8 fd ff ff       	call   c00021ed <check_fs>
c0002405:	83 f8 01             	cmp    eax,0x1
c0002408:	76 19                	jbe    c0002423 <find_volume+0x17c>
c000240a:	85 f6                	test   esi,esi
c000240c:	74 0f                	je     c000241d <find_volume+0x176>
c000240e:	eb 13                	jmp    c0002423 <find_volume+0x17c>
c0002410:	85 f6                	test   esi,esi
c0002412:	0f 85 ed fe ff ff    	jne    c0002305 <find_volume+0x5e>
c0002418:	b8 03 00 00 00       	mov    eax,0x3
c000241d:	47                   	inc    edi
c000241e:	83 ff 03             	cmp    edi,0x3
c0002421:	76 d1                	jbe    c00023f4 <find_volume+0x14d>
c0002423:	83 c4 3c             	add    esp,0x3c
c0002426:	5b                   	pop    ebx
c0002427:	5e                   	pop    esi
c0002428:	5f                   	pop    edi
c0002429:	5d                   	pop    ebp
c000242a:	c3                   	ret    

c000242b <mount_volume>:
c000242b:	55                   	push   ebp
c000242c:	57                   	push   edi
c000242d:	89 cf                	mov    edi,ecx
c000242f:	56                   	push   esi
c0002430:	53                   	push   ebx
c0002431:	bb 0b 00 00 00       	mov    ebx,0xb
c0002436:	83 ec 3c             	sub    esp,0x3c
c0002439:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000243f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002443:	e8 35 fb ff ff       	call   c0001f7d <get_ldnumber>
c0002448:	85 c0                	test   eax,eax
c000244a:	0f 88 3a 05 00 00    	js     c000298a <mount_volume+0x55f>
c0002450:	8b 2c 85 60 37 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc8a0]
c0002457:	89 c6                	mov    esi,eax
c0002459:	bb 0c 00 00 00       	mov    ebx,0xc
c000245e:	85 ed                	test   ebp,ebp
c0002460:	0f 84 24 05 00 00    	je     c000298a <mount_volume+0x55f>
c0002466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246a:	83 e7 fe             	and    edi,0xfffffffe
c000246d:	89 2a                	mov    DWORD PTR [edx],ebp
c000246f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002473:	74 32                	je     c00024a7 <mount_volume+0x7c>
c0002475:	83 ec 0c             	sub    esp,0xc
c0002478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000247c:	50                   	push   eax
c000247d:	e8 c8 f4 ff ff       	call   c000194a <disk_status>
c0002482:	83 c4 10             	add    esp,0x10
c0002485:	a8 01                	test   al,0x1
c0002487:	75 1e                	jne    c00024a7 <mount_volume+0x7c>
c0002489:	31 db                	xor    ebx,ebx
c000248b:	89 f9                	mov    ecx,edi
c000248d:	84 c9                	test   cl,cl
c000248f:	0f 84 f5 04 00 00    	je     c000298a <mount_volume+0x55f>
c0002495:	a8 04                	test   al,0x4
c0002497:	0f 84 ed 04 00 00    	je     c000298a <mount_volume+0x55f>
c000249d:	bb 0a 00 00 00       	mov    ebx,0xa
c00024a2:	e9 e3 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024a7:	83 ec 0c             	sub    esp,0xc
c00024aa:	89 f0                	mov    eax,esi
c00024ac:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024b0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024b3:	0f b6 f0             	movzx  esi,al
c00024b6:	bb 03 00 00 00       	mov    ebx,0x3
c00024bb:	56                   	push   esi
c00024bc:	e8 8c f4 ff ff       	call   c000194d <disk_initialize>
c00024c1:	83 c4 10             	add    esp,0x10
c00024c4:	a8 01                	test   al,0x1
c00024c6:	0f 85 be 04 00 00    	jne    c000298a <mount_volume+0x55f>
c00024cc:	89 f9                	mov    ecx,edi
c00024ce:	84 c9                	test   cl,cl
c00024d0:	74 04                	je     c00024d6 <mount_volume+0xab>
c00024d2:	a8 04                	test   al,0x4
c00024d4:	75 c7                	jne    c000249d <mount_volume+0x72>
c00024d6:	31 d2                	xor    edx,edx
c00024d8:	89 e8                	mov    eax,ebp
c00024da:	e8 c8 fd ff ff       	call   c00022a7 <find_volume>
c00024df:	83 f8 04             	cmp    eax,0x4
c00024e2:	75 0a                	jne    c00024ee <mount_volume+0xc3>
c00024e4:	bb 01 00 00 00       	mov    ebx,0x1
c00024e9:	e9 9c 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024ee:	83 f8 01             	cmp    eax,0x1
c00024f1:	76 0a                	jbe    c00024fd <mount_volume+0xd2>
c00024f3:	bb 0d 00 00 00       	mov    ebx,0xd
c00024f8:	e9 8d 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024fd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002500:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000250b:	75 17                	jne    c0002524 <mount_volume+0xf9>
c000250d:	b8 0b 00 00 00       	mov    eax,0xb
c0002512:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002517:	75 da                	jne    c00024f3 <mount_volume+0xc8>
c0002519:	40                   	inc    eax
c000251a:	83 f8 40             	cmp    eax,0x40
c000251d:	75 f3                	jne    c0002512 <mount_volume+0xe7>
c000251f:	e9 5a 02 00 00       	jmp    c000277e <mount_volume+0x353>
c0002524:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002527:	e8 6f f4 ff ff       	call   c000199b <ld_word>
c000252c:	66 3d 00 02          	cmp    ax,0x200
c0002530:	75 c1                	jne    c00024f3 <mount_volume+0xc8>
c0002532:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002535:	e8 61 f4 ff ff       	call   c000199b <ld_word>
c000253a:	0f b7 c0             	movzx  eax,ax
c000253d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002541:	85 c0                	test   eax,eax
c0002543:	75 0c                	jne    c0002551 <mount_volume+0x126>
c0002545:	8d 45 78             	lea    eax,[ebp+0x78]
c0002548:	e8 5b f4 ff ff       	call   c00019a8 <ld_dword>
c000254d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002555:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002558:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000255b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000255f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002562:	48                   	dec    eax
c0002563:	3c 01                	cmp    al,0x1
c0002565:	77 8c                	ja     c00024f3 <mount_volume+0xc8>
c0002567:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000256b:	89 c3                	mov    ebx,eax
c000256d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002571:	66 85 c0             	test   ax,ax
c0002574:	0f 84 79 ff ff ff    	je     c00024f3 <mount_volume+0xc8>
c000257a:	8d 40 ff             	lea    eax,[eax-0x1]
c000257d:	85 d8                	test   eax,ebx
c000257f:	0f 85 6e ff ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002585:	8d 45 65             	lea    eax,[ebp+0x65]
c0002588:	e8 0e f4 ff ff       	call   c000199b <ld_word>
c000258d:	89 c7                	mov    edi,eax
c000258f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002593:	a8 0f                	test   al,0xf
c0002595:	0f 85 58 ff ff ff    	jne    c00024f3 <mount_volume+0xc8>
c000259b:	8d 45 67             	lea    eax,[ebp+0x67]
c000259e:	e8 f8 f3 ff ff       	call   c000199b <ld_word>
c00025a3:	0f b7 f0             	movzx  esi,ax
c00025a6:	85 f6                	test   esi,esi
c00025a8:	75 0a                	jne    c00025b4 <mount_volume+0x189>
c00025aa:	8d 45 74             	lea    eax,[ebp+0x74]
c00025ad:	e8 f6 f3 ff ff       	call   c00019a8 <ld_dword>
c00025b2:	89 c6                	mov    esi,eax
c00025b4:	8d 45 62             	lea    eax,[ebp+0x62]
c00025b7:	e8 df f3 ff ff       	call   c000199b <ld_word>
c00025bc:	66 85 c0             	test   ax,ax
c00025bf:	0f 84 2e ff ff ff    	je     c00024f3 <mount_volume+0xc8>
c00025c5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ca:	0f b7 c8             	movzx  ecx,ax
c00025cd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025d6:	89 fa                	mov    edx,edi
c00025d8:	66 c1 ea 04          	shr    dx,0x4
c00025dc:	0f b7 d2             	movzx  edx,dx
c00025df:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025e3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ea:	39 c6                	cmp    esi,eax
c00025ec:	0f 82 01 ff ff ff    	jb     c00024f3 <mount_volume+0xc8>
c00025f2:	29 c6                	sub    esi,eax
c00025f4:	31 d2                	xor    edx,edx
c00025f6:	89 f0                	mov    eax,esi
c00025f8:	f7 f3                	div    ebx
c00025fa:	39 de                	cmp    esi,ebx
c00025fc:	0f 82 f1 fe ff ff    	jb     c00024f3 <mount_volume+0xc8>
c0002602:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002607:	0f 87 e6 fe ff ff    	ja     c00024f3 <mount_volume+0xc8>
c000260d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002612:	0f 86 63 03 00 00    	jbe    c000297b <mount_volume+0x550>
c0002618:	bb 03 00 00 00       	mov    ebx,0x3
c000261d:	8d 70 02             	lea    esi,[eax+0x2]
c0002620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002628:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000262b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000262e:	31 d2                	xor    edx,edx
c0002630:	89 c8                	mov    eax,ecx
c0002632:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002645:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002648:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000264b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000264f:	31 d2                	xor    edx,edx
c0002651:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002655:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002659:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000265c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000265f:	83 fb 03             	cmp    ebx,0x3
c0002662:	75 2b                	jne    c000268f <mount_volume+0x264>
c0002664:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002667:	e8 2f f3 ff ff       	call   c000199b <ld_word>
c000266c:	66 09 c7             	or     di,ax
c000266f:	0f 85 7e fe ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002675:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000267b:	c1 e6 02             	shl    esi,0x2
c000267e:	e8 25 f3 ff ff       	call   c00019a8 <ld_dword>
c0002683:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	eb 30                	jmp    c00026bf <mount_volume+0x294>
c000268f:	66 85 ff             	test   di,di
c0002692:	0f 84 5b fe ff ff    	je     c00024f3 <mount_volume+0xc8>
c0002698:	31 d2                	xor    edx,edx
c000269a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000269e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00026a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00026a6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026a9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00026ac:	83 fb 02             	cmp    ebx,0x2
c00026af:	75 04                	jne    c00026b5 <mount_volume+0x28a>
c00026b1:	01 f6                	add    esi,esi
c00026b3:	eb 0a                	jmp    c00026bf <mount_volume+0x294>
c00026b5:	8d 04 76             	lea    eax,[esi+esi*2]
c00026b8:	83 e6 01             	and    esi,0x1
c00026bb:	d1 e8                	shr    eax,1
c00026bd:	01 c6                	add    esi,eax
c00026bf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026c5:	c1 ee 09             	shr    esi,0x9
c00026c8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026cc:	0f 87 21 fe ff ff    	ja     c00024f3 <mount_volume+0xc8>
c00026d2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026d9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026e0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026e4:	83 fb 03             	cmp    ebx,0x3
c00026e7:	75 7a                	jne    c0002763 <mount_volume+0x338>
c00026e9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026ef:	e8 a7 f2 ff ff       	call   c000199b <ld_word>
c00026f4:	66 48                	dec    ax
c00026f6:	75 6b                	jne    c0002763 <mount_volume+0x338>
c00026f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	83 c2 01             	add    edx,0x1
c0002703:	89 e8                	mov    eax,ebp
c0002705:	83 d1 00             	adc    ecx,0x0
c0002708:	e8 6c fa ff ff       	call   c0002179 <move_window>
c000270d:	85 c0                	test   eax,eax
c000270f:	75 52                	jne    c0002763 <mount_volume+0x338>
c0002711:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002715:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000271b:	e8 7b f2 ff ff       	call   c000199b <ld_word>
c0002720:	66 3d 55 aa          	cmp    ax,0xaa55
c0002724:	75 3d                	jne    c0002763 <mount_volume+0x338>
c0002726:	8d 45 54             	lea    eax,[ebp+0x54]
c0002729:	e8 7a f2 ff ff       	call   c00019a8 <ld_dword>
c000272e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002733:	75 2e                	jne    c0002763 <mount_volume+0x338>
c0002735:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000273b:	e8 68 f2 ff ff       	call   c00019a8 <ld_dword>
c0002740:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002745:	75 1c                	jne    c0002763 <mount_volume+0x338>
c0002747:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000274d:	e8 56 f2 ff ff       	call   c00019a8 <ld_dword>
c0002752:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002755:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000275b:	e8 48 f2 ff ff       	call   c00019a8 <ld_dword>
c0002760:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002763:	66 a1 40 37 02 c0    	mov    ax,ds:0xc0023740
c0002769:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000276c:	40                   	inc    eax
c000276d:	31 db                	xor    ebx,ebx
c000276f:	66 a3 40 37 02 c0    	mov    ds:0xc0023740,ax
c0002775:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002779:	e9 0c 02 00 00       	jmp    c000298a <mount_volume+0x55f>
c000277e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002784:	e8 12 f2 ff ff       	call   c000199b <ld_word>
c0002789:	66 3d 00 01          	cmp    ax,0x100
c000278d:	0f 85 60 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002793:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000279a:	0f 85 53 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c00027a0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c00027a6:	e8 15 f2 ff ff       	call   c00019c0 <ld_qword>
c00027ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027b3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027b9:	e8 ea f1 ff ff       	call   c00019a8 <ld_dword>
c00027be:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027c1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ca:	fe c8                	dec    al
c00027cc:	0f 85 21 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c00027d2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027d9:	bb 01 00 00 00       	mov    ebx,0x1
c00027de:	d3 e3                	shl    ebx,cl
c00027e0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027e4:	66 85 db             	test   bx,bx
c00027e7:	0f 84 06 fd ff ff    	je     c00024f3 <mount_volume+0xc8>
c00027ed:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027f3:	e8 b0 f1 ff ff       	call   c00019a8 <ld_dword>
c00027f8:	89 c6                	mov    esi,eax
c00027fa:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027ff:	0f 87 ee fc ff ff    	ja     c00024f3 <mount_volume+0xc8>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	8d 40 02             	lea    eax,[eax+0x2]
c000280c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000280f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002816:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002819:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c000281f:	e8 84 f1 ff ff       	call   c00019a8 <ld_dword>
c0002824:	31 d2                	xor    edx,edx
c0002826:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000282a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000282e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002832:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002836:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002839:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000283c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002842:	e8 61 f1 ff ff       	call   c00019a8 <ld_dword>
c0002847:	31 d2                	xor    edx,edx
c0002849:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000284d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002851:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002855:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002858:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000285b:	0f b7 c3             	movzx  eax,bx
c000285e:	31 d2                	xor    edx,edx
c0002860:	0f af f0             	imul   esi,eax
c0002863:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002867:	89 f0                	mov    eax,esi
c0002869:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000286d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002871:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002875:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002879:	39 c1                	cmp    ecx,eax
c000287b:	89 df                	mov    edi,ebx
c000287d:	19 d7                	sbb    edi,edx
c000287f:	0f 82 6e fc ff ff    	jb     c00024f3 <mount_volume+0xc8>
c0002885:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000288b:	31 db                	xor    ebx,ebx
c000288d:	e8 16 f1 ff ff       	call   c00019a8 <ld_dword>
c0002892:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002899:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000289c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00028a4:	85 db                	test   ebx,ebx
c00028a6:	75 39                	jne    c00028e1 <mount_volume+0x4b6>
c00028a8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028ac:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028b0:	0f 86 3d fc ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c00028b6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028b9:	31 ff                	xor    edi,edi
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	e8 72 f3 ff ff       	call   c0001c34 <clst2sect>
c00028c2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028c6:	01 c6                	add    esi,eax
c00028c8:	89 e8                	mov    eax,ebp
c00028ca:	11 d7                	adc    edi,edx
c00028cc:	89 f2                	mov    edx,esi
c00028ce:	89 f9                	mov    ecx,edi
c00028d0:	e8 a4 f8 ff ff       	call   c0002179 <move_window>
c00028d5:	85 c0                	test   eax,eax
c00028d7:	0f 85 07 fc ff ff    	jne    c00024e4 <mount_volume+0xb9>
c00028dd:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028e1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028e6:	74 0b                	je     c00028f3 <mount_volume+0x4c8>
c00028e8:	83 c3 20             	add    ebx,0x20
c00028eb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028f1:	eb b1                	jmp    c00028a4 <mount_volume+0x479>
c00028f3:	8d 75 54             	lea    esi,[ebp+0x54]
c00028f6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028fa:	e8 a9 f0 ff ff       	call   c00019a8 <ld_dword>
c00028ff:	89 c3                	mov    ebx,eax
c0002901:	83 f8 01             	cmp    eax,0x1
c0002904:	0f 86 e9 fb ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c000290a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000290d:	0f 86 e0 fb ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c0002913:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002916:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000291a:	0f af c2             	imul   eax,edx
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002922:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002925:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002928:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000292b:	31 c9                	xor    ecx,ecx
c000292d:	89 da                	mov    edx,ebx
c000292f:	89 e8                	mov    eax,ebp
c0002931:	c1 ea 07             	shr    edx,0x7
c0002934:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002937:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000293a:	e8 3a f8 ff ff       	call   c0002179 <move_window>
c000293f:	85 c0                	test   eax,eax
c0002941:	0f 85 9d fb ff ff    	jne    c00024e4 <mount_volume+0xb9>
c0002947:	89 d8                	mov    eax,ebx
c0002949:	83 e0 7f             	and    eax,0x7f
c000294c:	8d 04 86             	lea    eax,[esi+eax*4]
c000294f:	e8 54 f0 ff ff       	call   c00019a8 <ld_dword>
c0002954:	83 f8 ff             	cmp    eax,0xffffffff
c0002957:	74 0a                	je     c0002963 <mount_volume+0x538>
c0002959:	43                   	inc    ebx
c000295a:	39 d8                	cmp    eax,ebx
c000295c:	74 cd                	je     c000292b <mount_volume+0x500>
c000295e:	e9 90 fb ff ff       	jmp    c00024f3 <mount_volume+0xc8>
c0002963:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000296a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002971:	bb 04 00 00 00       	mov    ebx,0x4
c0002976:	e9 e8 fd ff ff       	jmp    c0002763 <mount_volume+0x338>
c000297b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002980:	19 db                	sbb    ebx,ebx
c0002982:	83 c3 02             	add    ebx,0x2
c0002985:	e9 93 fc ff ff       	jmp    c000261d <mount_volume+0x1f2>
c000298a:	83 c4 3c             	add    esp,0x3c
c000298d:	89 d8                	mov    eax,ebx
c000298f:	5b                   	pop    ebx
c0002990:	5e                   	pop    esi
c0002991:	5f                   	pop    edi
c0002992:	5d                   	pop    ebp
c0002993:	c3                   	ret    

c0002994 <find_bitmap>:
c0002994:	55                   	push   ebp
c0002995:	57                   	push   edi
c0002996:	89 c7                	mov    edi,eax
c0002998:	56                   	push   esi
c0002999:	8d 72 fe             	lea    esi,[edx-0x2]
c000299c:	53                   	push   ebx
c000299d:	83 ec 1c             	sub    esp,0x1c
c00029a0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00029a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029a7:	83 e8 02             	sub    eax,0x2
c00029aa:	39 f0                	cmp    eax,esi
c00029ac:	77 02                	ja     c00029b0 <find_bitmap+0x1c>
c00029ae:	31 f6                	xor    esi,esi
c00029b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029b4:	89 f3                	mov    ebx,esi
c00029b6:	31 ed                	xor    ebp,ebp
c00029b8:	31 c9                	xor    ecx,ecx
c00029ba:	89 da                	mov    edx,ebx
c00029bc:	89 f8                	mov    eax,edi
c00029be:	c1 ea 0c             	shr    edx,0xc
c00029c1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029c4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029c7:	e8 ad f7 ff ff       	call   c0002179 <move_window>
c00029cc:	85 c0                	test   eax,eax
c00029ce:	75 68                	jne    c0002a38 <find_bitmap+0xa4>
c00029d0:	89 da                	mov    edx,ebx
c00029d2:	89 d9                	mov    ecx,ebx
c00029d4:	c1 ea 03             	shr    edx,0x3
c00029d7:	83 e1 07             	and    ecx,0x7
c00029da:	b8 01 00 00 00       	mov    eax,0x1
c00029df:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029e5:	d3 e0                	shl    eax,cl
c00029e7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ea:	83 e9 02             	sub    ecx,0x2
c00029ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029f1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029f5:	43                   	inc    ebx
c00029f6:	21 c1                	and    ecx,eax
c00029f8:	d1 e0                	shl    eax,1
c00029fa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029fe:	77 09                	ja     c0002a09 <find_bitmap+0x75>
c0002a00:	31 db                	xor    ebx,ebx
c0002a02:	ba 00 02 00 00       	mov    edx,0x200
c0002a07:	31 c0                	xor    eax,eax
c0002a09:	84 c9                	test   cl,cl
c0002a0b:	75 10                	jne    c0002a1d <find_bitmap+0x89>
c0002a0d:	45                   	inc    ebp
c0002a0e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a12:	75 0f                	jne    c0002a23 <find_bitmap+0x8f>
c0002a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a18:	83 c0 02             	add    eax,0x2
c0002a1b:	eb 22                	jmp    c0002a3f <find_bitmap+0xab>
c0002a1d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a21:	31 ed                	xor    ebp,ebp
c0002a23:	39 de                	cmp    esi,ebx
c0002a25:	74 16                	je     c0002a3d <find_bitmap+0xa9>
c0002a27:	84 c0                	test   al,al
c0002a29:	75 c6                	jne    c00029f1 <find_bitmap+0x5d>
c0002a2b:	42                   	inc    edx
c0002a2c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a32:	77 84                	ja     c00029b8 <find_bitmap+0x24>
c0002a34:	b0 01                	mov    al,0x1
c0002a36:	eb b9                	jmp    c00029f1 <find_bitmap+0x5d>
c0002a38:	83 c8 ff             	or     eax,0xffffffff
c0002a3b:	eb 02                	jmp    c0002a3f <find_bitmap+0xab>
c0002a3d:	31 c0                	xor    eax,eax
c0002a3f:	83 c4 1c             	add    esp,0x1c
c0002a42:	5b                   	pop    ebx
c0002a43:	5e                   	pop    esi
c0002a44:	5f                   	pop    edi
c0002a45:	5d                   	pop    ebp
c0002a46:	c3                   	ret    

c0002a47 <change_bitmap>:
c0002a47:	55                   	push   ebp
c0002a48:	89 cd                	mov    ebp,ecx
c0002a4a:	57                   	push   edi
c0002a4b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a4e:	56                   	push   esi
c0002a4f:	89 c7                	mov    edi,eax
c0002a51:	53                   	push   ebx
c0002a52:	89 c8                	mov    eax,ecx
c0002a54:	83 ec 1c             	sub    esp,0x1c
c0002a57:	31 d2                	xor    edx,edx
c0002a59:	89 ce                	mov    esi,ecx
c0002a5b:	c1 e8 0c             	shr    eax,0xc
c0002a5e:	bb 01 00 00 00       	mov    ebx,0x1
c0002a63:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a66:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a69:	c1 ee 03             	shr    esi,0x3
c0002a6c:	83 e1 07             	and    ecx,0x7
c0002a6f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a75:	d3 e3                	shl    ebx,cl
c0002a77:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a7b:	89 c1                	mov    ecx,eax
c0002a7d:	89 d3                	mov    ebx,edx
c0002a7f:	83 c1 01             	add    ecx,0x1
c0002a82:	83 d3 00             	adc    ebx,0x0
c0002a85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a8d:	89 d1                	mov    ecx,edx
c0002a8f:	89 c2                	mov    edx,eax
c0002a91:	89 f8                	mov    eax,edi
c0002a93:	e8 e1 f6 ff ff       	call   c0002179 <move_window>
c0002a98:	89 c1                	mov    ecx,eax
c0002a9a:	85 c0                	test   eax,eax
c0002a9c:	75 48                	jne    c0002ae6 <change_bitmap+0x9f>
c0002a9e:	31 d2                	xor    edx,edx
c0002aa0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002aa4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002aa8:	0f 95 c2             	setne  dl
c0002aab:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aaf:	74 3c                	je     c0002aed <change_bitmap+0xa6>
c0002ab1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002ab5:	4d                   	dec    ebp
c0002ab6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aba:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002abe:	74 32                	je     c0002af2 <change_bitmap+0xab>
c0002ac0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ac4:	75 d8                	jne    c0002a9e <change_bitmap+0x57>
c0002ac6:	8d 46 01             	lea    eax,[esi+0x1]
c0002ac9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ace:	89 c3                	mov    ebx,eax
c0002ad0:	31 f6                	xor    esi,esi
c0002ad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ada:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ae0:	74 99                	je     c0002a7b <change_bitmap+0x34>
c0002ae2:	89 de                	mov    esi,ebx
c0002ae4:	eb b8                	jmp    c0002a9e <change_bitmap+0x57>
c0002ae6:	b9 01 00 00 00       	mov    ecx,0x1
c0002aeb:	eb 05                	jmp    c0002af2 <change_bitmap+0xab>
c0002aed:	b9 02 00 00 00       	mov    ecx,0x2
c0002af2:	83 c4 1c             	add    esp,0x1c
c0002af5:	89 c8                	mov    eax,ecx
c0002af7:	5b                   	pop    ebx
c0002af8:	5e                   	pop    esi
c0002af9:	5f                   	pop    edi
c0002afa:	5d                   	pop    ebp
c0002afb:	c3                   	ret    

c0002afc <put_fat>:
c0002afc:	83 fa 01             	cmp    edx,0x1
c0002aff:	0f 86 7b 01 00 00    	jbe    c0002c80 <put_fat+0x184>
c0002b05:	55                   	push   ebp
c0002b06:	57                   	push   edi
c0002b07:	89 cf                	mov    edi,ecx
c0002b09:	56                   	push   esi
c0002b0a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b0f:	53                   	push   ebx
c0002b10:	89 c6                	mov    esi,eax
c0002b12:	83 ec 1c             	sub    esp,0x1c
c0002b15:	89 d3                	mov    ebx,edx
c0002b17:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b1a:	0f 86 68 01 00 00    	jbe    c0002c88 <put_fat+0x18c>
c0002b20:	8a 00                	mov    al,BYTE PTR [eax]
c0002b22:	3c 02                	cmp    al,0x2
c0002b24:	0f 84 c7 00 00 00    	je     c0002bf1 <put_fat+0xf5>
c0002b2a:	77 09                	ja     c0002b35 <put_fat+0x39>
c0002b2c:	fe c8                	dec    al
c0002b2e:	74 17                	je     c0002b47 <put_fat+0x4b>
c0002b30:	e9 53 01 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002b35:	b9 02 00 00 00       	mov    ecx,0x2
c0002b3a:	3c 04                	cmp    al,0x4
c0002b3c:	0f 86 e1 00 00 00    	jbe    c0002c23 <put_fat+0x127>
c0002b42:	e9 41 01 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002b47:	89 d5                	mov    ebp,edx
c0002b49:	31 c9                	xor    ecx,ecx
c0002b4b:	d1 ed                	shr    ebp,1
c0002b4d:	89 f0                	mov    eax,esi
c0002b4f:	01 d5                	add    ebp,edx
c0002b51:	89 ea                	mov    edx,ebp
c0002b53:	c1 ea 09             	shr    edx,0x9
c0002b56:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b59:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b5c:	e8 18 f6 ff ff       	call   c0002179 <move_window>
c0002b61:	89 c1                	mov    ecx,eax
c0002b63:	85 c0                	test   eax,eax
c0002b65:	0f 85 1d 01 00 00    	jne    c0002c88 <put_fat+0x18c>
c0002b6b:	8d 46 54             	lea    eax,[esi+0x54]
c0002b6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b72:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b7f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b83:	89 f8                	mov    eax,edi
c0002b85:	83 e3 01             	and    ebx,0x1
c0002b88:	74 0d                	je     c0002b97 <put_fat+0x9b>
c0002b8a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b8d:	89 fa                	mov    edx,edi
c0002b8f:	83 e0 0f             	and    eax,0xf
c0002b92:	c1 e2 04             	shl    edx,0x4
c0002b95:	09 d0                	or     eax,edx
c0002b97:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b9e:	31 c9                	xor    ecx,ecx
c0002ba0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ba4:	c1 ea 09             	shr    edx,0x9
c0002ba7:	89 f0                	mov    eax,esi
c0002ba9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bac:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002baf:	e8 c5 f5 ff ff       	call   c0002179 <move_window>
c0002bb4:	89 c1                	mov    ecx,eax
c0002bb6:	85 c0                	test   eax,eax
c0002bb8:	0f 85 ca 00 00 00    	jne    c0002c88 <put_fat+0x18c>
c0002bbe:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bc2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bc8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bcc:	85 db                	test   ebx,ebx
c0002bce:	74 07                	je     c0002bd7 <put_fat+0xdb>
c0002bd0:	c1 ef 04             	shr    edi,0x4
c0002bd3:	89 fa                	mov    edx,edi
c0002bd5:	eb 0e                	jmp    c0002be5 <put_fat+0xe9>
c0002bd7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bda:	c1 ef 08             	shr    edi,0x8
c0002bdd:	83 e2 f0             	and    edx,0xfffffff0
c0002be0:	83 e7 0f             	and    edi,0xf
c0002be3:	09 fa                	or     edx,edi
c0002be5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002be8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bec:	e9 97 00 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	c1 ea 08             	shr    edx,0x8
c0002bf6:	89 f0                	mov    eax,esi
c0002bf8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bfe:	e8 76 f5 ff ff       	call   c0002179 <move_window>
c0002c03:	89 c1                	mov    ecx,eax
c0002c05:	85 c0                	test   eax,eax
c0002c07:	75 7f                	jne    c0002c88 <put_fat+0x18c>
c0002c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0d:	01 db                	add    ebx,ebx
c0002c0f:	0f b7 d7             	movzx  edx,di
c0002c12:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c18:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c1c:	e8 ec ed ff ff       	call   c0001a0d <st_word>
c0002c21:	eb 53                	jmp    c0002c76 <put_fat+0x17a>
c0002c23:	31 c9                	xor    ecx,ecx
c0002c25:	c1 ea 07             	shr    edx,0x7
c0002c28:	89 f0                	mov    eax,esi
c0002c2a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c2d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c30:	e8 44 f5 ff ff       	call   c0002179 <move_window>
c0002c35:	89 c1                	mov    ecx,eax
c0002c37:	85 c0                	test   eax,eax
c0002c39:	75 4d                	jne    c0002c88 <put_fat+0x18c>
c0002c3b:	c1 e3 02             	shl    ebx,0x2
c0002c3e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c44:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c47:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c4b:	74 1c                	je     c0002c69 <put_fat+0x16d>
c0002c4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c51:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	e8 4a ed ff ff       	call   c00019a8 <ld_dword>
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c67:	09 c7                	or     edi,eax
c0002c69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c6d:	89 fa                	mov    edx,edi
c0002c6f:	89 d8                	mov    eax,ebx
c0002c71:	e8 9b ed ff ff       	call   c0001a11 <st_dword>
c0002c76:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c7e:	eb 08                	jmp    c0002c88 <put_fat+0x18c>
c0002c80:	b9 02 00 00 00       	mov    ecx,0x2
c0002c85:	89 c8                	mov    eax,ecx
c0002c87:	c3                   	ret    
c0002c88:	83 c4 1c             	add    esp,0x1c
c0002c8b:	89 c8                	mov    eax,ecx
c0002c8d:	5b                   	pop    ebx
c0002c8e:	5e                   	pop    esi
c0002c8f:	5f                   	pop    edi
c0002c90:	5d                   	pop    ebp
c0002c91:	c3                   	ret    

c0002c92 <fill_last_frag>:
c0002c92:	57                   	push   edi
c0002c93:	89 cf                	mov    edi,ecx
c0002c95:	56                   	push   esi
c0002c96:	89 d6                	mov    esi,edx
c0002c98:	53                   	push   ebx
c0002c99:	89 c3                	mov    ebx,eax
c0002c9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	74 21                	je     c0002cc3 <fill_last_frag+0x31>
c0002ca2:	89 f9                	mov    ecx,edi
c0002ca4:	83 f8 01             	cmp    eax,0x1
c0002ca7:	76 05                	jbe    c0002cae <fill_last_frag+0x1c>
c0002ca9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002cac:	29 c1                	sub    ecx,eax
c0002cae:	8d 56 01             	lea    edx,[esi+0x1]
c0002cb1:	29 c2                	sub    edx,eax
c0002cb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cb5:	e8 42 fe ff ff       	call   c0002afc <put_fat>
c0002cba:	85 c0                	test   eax,eax
c0002cbc:	75 05                	jne    c0002cc3 <fill_last_frag+0x31>
c0002cbe:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cc1:	eb d8                	jmp    c0002c9b <fill_last_frag+0x9>
c0002cc3:	5b                   	pop    ebx
c0002cc4:	5e                   	pop    esi
c0002cc5:	5f                   	pop    edi
c0002cc6:	c3                   	ret    

c0002cc7 <fill_first_frag>:
c0002cc7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002ccb:	75 2d                	jne    c0002cfa <fill_first_frag+0x33>
c0002ccd:	57                   	push   edi
c0002cce:	56                   	push   esi
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c3                	mov    ebx,eax
c0002cd2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cd5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cd8:	01 d7                	add    edi,edx
c0002cda:	39 fa                	cmp    edx,edi
c0002cdc:	74 14                	je     c0002cf2 <fill_first_frag+0x2b>
c0002cde:	8d 72 01             	lea    esi,[edx+0x1]
c0002ce1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ce3:	89 f1                	mov    ecx,esi
c0002ce5:	e8 12 fe ff ff       	call   c0002afc <put_fat>
c0002cea:	89 f2                	mov    edx,esi
c0002cec:	85 c0                	test   eax,eax
c0002cee:	74 ea                	je     c0002cda <fill_first_frag+0x13>
c0002cf0:	eb 0b                	jmp    c0002cfd <fill_first_frag+0x36>
c0002cf2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	eb 03                	jmp    c0002cfd <fill_first_frag+0x36>
c0002cfa:	31 c0                	xor    eax,eax
c0002cfc:	c3                   	ret    
c0002cfd:	5b                   	pop    ebx
c0002cfe:	5e                   	pop    esi
c0002cff:	5f                   	pop    edi
c0002d00:	c3                   	ret    

c0002d01 <get_fat>:
c0002d01:	83 fa 01             	cmp    edx,0x1
c0002d04:	0f 86 db 01 00 00    	jbe    c0002ee5 <get_fat+0x1e4>
c0002d0a:	55                   	push   ebp
c0002d0b:	b9 01 00 00 00       	mov    ecx,0x1
c0002d10:	57                   	push   edi
c0002d11:	56                   	push   esi
c0002d12:	53                   	push   ebx
c0002d13:	83 ec 1c             	sub    esp,0x1c
c0002d16:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d18:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d1b:	0f 86 cc 01 00 00    	jbe    c0002eed <get_fat+0x1ec>
c0002d21:	89 c3                	mov    ebx,eax
c0002d23:	89 d6                	mov    esi,edx
c0002d25:	8a 07                	mov    al,BYTE PTR [edi]
c0002d27:	3c 02                	cmp    al,0x2
c0002d29:	0f 84 99 00 00 00    	je     c0002dc8 <get_fat+0xc7>
c0002d2f:	77 09                	ja     c0002d3a <get_fat+0x39>
c0002d31:	fe c8                	dec    al
c0002d33:	74 1a                	je     c0002d4f <get_fat+0x4e>
c0002d35:	e9 b3 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d3a:	3c 03                	cmp    al,0x3
c0002d3c:	0f 84 b5 00 00 00    	je     c0002df7 <get_fat+0xf6>
c0002d42:	3c 04                	cmp    al,0x4
c0002d44:	0f 84 e3 00 00 00    	je     c0002e2d <get_fat+0x12c>
c0002d4a:	e9 9e 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d4f:	89 d3                	mov    ebx,edx
c0002d51:	31 c9                	xor    ecx,ecx
c0002d53:	d1 eb                	shr    ebx,1
c0002d55:	89 f8                	mov    eax,edi
c0002d57:	01 d3                	add    ebx,edx
c0002d59:	89 da                	mov    edx,ebx
c0002d5b:	c1 ea 09             	shr    edx,0x9
c0002d5e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d61:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d64:	e8 10 f4 ff ff       	call   c0002179 <move_window>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	74 08                	je     c0002d75 <get_fat+0x74>
c0002d6d:	83 c9 ff             	or     ecx,0xffffffff
c0002d70:	e9 78 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d75:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d78:	31 c9                	xor    ecx,ecx
c0002d7a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d80:	89 ea                	mov    edx,ebp
c0002d82:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d86:	c1 ea 09             	shr    edx,0x9
c0002d89:	89 f8                	mov    eax,edi
c0002d8b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d8e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d91:	e8 e3 f3 ff ff       	call   c0002179 <move_window>
c0002d96:	85 c0                	test   eax,eax
c0002d98:	75 d3                	jne    c0002d6d <get_fat+0x6c>
c0002d9a:	0f b6 c3             	movzx  eax,bl
c0002d9d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002da3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002da8:	c1 e3 08             	shl    ebx,0x8
c0002dab:	09 c3                	or     ebx,eax
c0002dad:	89 d9                	mov    ecx,ebx
c0002daf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002db5:	83 e6 01             	and    esi,0x1
c0002db8:	0f 84 2f 01 00 00    	je     c0002eed <get_fat+0x1ec>
c0002dbe:	89 d9                	mov    ecx,ebx
c0002dc0:	c1 e9 04             	shr    ecx,0x4
c0002dc3:	e9 25 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002dc8:	31 c9                	xor    ecx,ecx
c0002dca:	c1 ea 08             	shr    edx,0x8
c0002dcd:	89 f8                	mov    eax,edi
c0002dcf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dd5:	e8 9f f3 ff ff       	call   c0002179 <move_window>
c0002dda:	85 c0                	test   eax,eax
c0002ddc:	75 8f                	jne    c0002d6d <get_fat+0x6c>
c0002dde:	01 f6                	add    esi,esi
c0002de0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002de6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dea:	e8 ac eb ff ff       	call   c000199b <ld_word>
c0002def:	0f b7 c8             	movzx  ecx,ax
c0002df2:	e9 f6 00 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002df7:	31 c9                	xor    ecx,ecx
c0002df9:	c1 ea 07             	shr    edx,0x7
c0002dfc:	89 f8                	mov    eax,edi
c0002dfe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e01:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e04:	e8 70 f3 ff ff       	call   c0002179 <move_window>
c0002e09:	85 c0                	test   eax,eax
c0002e0b:	0f 85 5c ff ff ff    	jne    c0002d6d <get_fat+0x6c>
c0002e11:	c1 e6 02             	shl    esi,0x2
c0002e14:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e1a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e1e:	e8 85 eb ff ff       	call   c00019a8 <ld_dword>
c0002e23:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e28:	e9 b4 00 00 00       	jmp    c0002ee1 <get_fat+0x1e0>
c0002e2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e33:	89 d1                	mov    ecx,edx
c0002e35:	09 c1                	or     ecx,eax
c0002e37:	74 06                	je     c0002e3f <get_fat+0x13e>
c0002e39:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e3d:	75 0f                	jne    c0002e4e <get_fat+0x14d>
c0002e3f:	b9 01 00 00 00       	mov    ecx,0x1
c0002e44:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e48:	0f 85 9f 00 00 00    	jne    c0002eed <get_fat+0x1ec>
c0002e4e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e52:	89 f5                	mov    ebp,esi
c0002e54:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e59:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e5c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e5f:	80 f9 02             	cmp    cl,0x2
c0002e62:	75 35                	jne    c0002e99 <get_fat+0x198>
c0002e64:	83 c0 ff             	add    eax,0xffffffff
c0002e67:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e6c:	83 d2 ff             	adc    edx,0xffffffff
c0002e6f:	31 db                	xor    ebx,ebx
c0002e71:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e75:	53                   	push   ebx
c0002e76:	c1 ea 09             	shr    edx,0x9
c0002e79:	51                   	push   ecx
c0002e7a:	52                   	push   edx
c0002e7b:	50                   	push   eax
c0002e7c:	e8 2b b9 01 00       	call   c001e7ac <__udivdi3>
c0002e81:	83 c4 10             	add    esp,0x10
c0002e84:	b9 01 00 00 00       	mov    ecx,0x1
c0002e89:	39 c5                	cmp    ebp,eax
c0002e8b:	77 60                	ja     c0002eed <get_fat+0x1ec>
c0002e8d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e92:	74 59                	je     c0002eed <get_fat+0x1ec>
c0002e94:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e97:	eb 54                	jmp    c0002eed <get_fat+0x1ec>
c0002e99:	80 f9 03             	cmp    cl,0x3
c0002e9c:	75 05                	jne    c0002ea3 <get_fat+0x1a2>
c0002e9e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002ea1:	77 f1                	ja     c0002e94 <get_fat+0x193>
c0002ea3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002ea8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002eac:	75 3f                	jne    c0002eed <get_fat+0x1ec>
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	89 f2                	mov    edx,esi
c0002eb2:	89 f8                	mov    eax,edi
c0002eb4:	c1 ea 07             	shr    edx,0x7
c0002eb7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eba:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ebd:	e8 b7 f2 ff ff       	call   c0002179 <move_window>
c0002ec2:	85 c0                	test   eax,eax
c0002ec4:	0f 85 a3 fe ff ff    	jne    c0002d6d <get_fat+0x6c>
c0002eca:	c1 e6 02             	shl    esi,0x2
c0002ecd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed7:	e8 cc ea ff ff       	call   c00019a8 <ld_dword>
c0002edc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ee1:	89 c1                	mov    ecx,eax
c0002ee3:	eb 08                	jmp    c0002eed <get_fat+0x1ec>
c0002ee5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eea:	89 c8                	mov    eax,ecx
c0002eec:	c3                   	ret    
c0002eed:	83 c4 1c             	add    esp,0x1c
c0002ef0:	89 c8                	mov    eax,ecx
c0002ef2:	5b                   	pop    ebx
c0002ef3:	5e                   	pop    esi
c0002ef4:	5f                   	pop    edi
c0002ef5:	5d                   	pop    ebp
c0002ef6:	c3                   	ret    

c0002ef7 <dir_sdi>:
c0002ef7:	55                   	push   ebp
c0002ef8:	57                   	push   edi
c0002ef9:	56                   	push   esi
c0002efa:	53                   	push   ebx
c0002efb:	89 c3                	mov    ebx,eax
c0002efd:	83 ec 1c             	sub    esp,0x1c
c0002f00:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f02:	31 c0                	xor    eax,eax
c0002f04:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f07:	0f 94 c0             	sete   al
c0002f0a:	48                   	dec    eax
c0002f0b:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f10:	05 00 00 00 10       	add    eax,0x10000000
c0002f15:	39 d0                	cmp    eax,edx
c0002f17:	77 0a                	ja     c0002f23 <dir_sdi+0x2c>
c0002f19:	b8 02 00 00 00       	mov    eax,0x2
c0002f1e:	e9 c4 00 00 00       	jmp    c0002fe7 <dir_sdi+0xf0>
c0002f23:	89 d6                	mov    esi,edx
c0002f25:	f6 c2 1f             	test   dl,0x1f
c0002f28:	75 ef                	jne    c0002f19 <dir_sdi+0x22>
c0002f2a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f2d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f30:	85 c9                	test   ecx,ecx
c0002f32:	75 2d                	jne    c0002f61 <dir_sdi+0x6a>
c0002f34:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f37:	77 1b                	ja     c0002f54 <dir_sdi+0x5d>
c0002f39:	89 f2                	mov    edx,esi
c0002f3b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f3f:	c1 ea 05             	shr    edx,0x5
c0002f42:	39 c2                	cmp    edx,eax
c0002f44:	73 d3                	jae    c0002f19 <dir_sdi+0x22>
c0002f46:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f49:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f4f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f52:	eb 4b                	jmp    c0002f9f <dir_sdi+0xa8>
c0002f54:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f57:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f5b:	85 c0                	test   eax,eax
c0002f5d:	74 da                	je     c0002f39 <dir_sdi+0x42>
c0002f5f:	89 c1                	mov    ecx,eax
c0002f61:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f65:	c1 e5 09             	shl    ebp,0x9
c0002f68:	89 ca                	mov    edx,ecx
c0002f6a:	39 ee                	cmp    esi,ebp
c0002f6c:	72 1c                	jb     c0002f8a <dir_sdi+0x93>
c0002f6e:	89 d8                	mov    eax,ebx
c0002f70:	e8 8c fd ff ff       	call   c0002d01 <get_fat>
c0002f75:	89 c1                	mov    ecx,eax
c0002f77:	83 f8 ff             	cmp    eax,0xffffffff
c0002f7a:	74 66                	je     c0002fe2 <dir_sdi+0xeb>
c0002f7c:	83 f8 01             	cmp    eax,0x1
c0002f7f:	76 98                	jbe    c0002f19 <dir_sdi+0x22>
c0002f81:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f84:	76 93                	jbe    c0002f19 <dir_sdi+0x22>
c0002f86:	29 ee                	sub    esi,ebp
c0002f88:	eb de                	jmp    c0002f68 <dir_sdi+0x71>
c0002f8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f8e:	89 f8                	mov    eax,edi
c0002f90:	e8 9f ec ff ff       	call   c0001c34 <clst2sect>
c0002f95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f99:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f9c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f9f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002fa2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002fa5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002fa8:	89 d1                	mov    ecx,edx
c0002faa:	09 c1                	or     ecx,eax
c0002fac:	0f 84 67 ff ff ff    	je     c0002f19 <dir_sdi+0x22>
c0002fb2:	89 f1                	mov    ecx,esi
c0002fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fbc:	c1 e9 09             	shr    ecx,0x9
c0002fbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fc3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fc7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fcb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fce:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fd4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fd7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fdb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fde:	31 c0                	xor    eax,eax
c0002fe0:	eb 05                	jmp    c0002fe7 <dir_sdi+0xf0>
c0002fe2:	b8 01 00 00 00       	mov    eax,0x1
c0002fe7:	83 c4 1c             	add    esp,0x1c
c0002fea:	5b                   	pop    ebx
c0002feb:	5e                   	pop    esi
c0002fec:	5f                   	pop    edi
c0002fed:	5d                   	pop    ebp
c0002fee:	c3                   	ret    

c0002fef <create_chain>:
c0002fef:	55                   	push   ebp
c0002ff0:	89 c5                	mov    ebp,eax
c0002ff2:	57                   	push   edi
c0002ff3:	56                   	push   esi
c0002ff4:	53                   	push   ebx
c0002ff5:	83 ec 1c             	sub    esp,0x1c
c0002ff8:	85 d2                	test   edx,edx
c0002ffa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ffe:	8b 30                	mov    esi,DWORD PTR [eax]
c0003000:	75 0e                	jne    c0003010 <create_chain+0x21>
c0003002:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003005:	85 ff                	test   edi,edi
c0003007:	74 39                	je     c0003042 <create_chain+0x53>
c0003009:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000300c:	77 39                	ja     c0003047 <create_chain+0x58>
c000300e:	eb 32                	jmp    c0003042 <create_chain+0x53>
c0003010:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003014:	e8 e8 fc ff ff       	call   c0002d01 <get_fat>
c0003019:	89 c3                	mov    ebx,eax
c000301b:	83 f8 01             	cmp    eax,0x1
c000301e:	77 0a                	ja     c000302a <create_chain+0x3b>
c0003020:	bb 01 00 00 00       	mov    ebx,0x1
c0003025:	e9 ba 01 00 00       	jmp    c00031e4 <create_chain+0x1f5>
c000302a:	83 f8 ff             	cmp    eax,0xffffffff
c000302d:	0f 84 62 01 00 00    	je     c0003195 <create_chain+0x1a6>
c0003033:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003036:	0f 87 a8 01 00 00    	ja     c00031e4 <create_chain+0x1f5>
c000303c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003040:	eb 05                	jmp    c0003047 <create_chain+0x58>
c0003042:	bf 01 00 00 00       	mov    edi,0x1
c0003047:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000304b:	75 07                	jne    c0003054 <create_chain+0x65>
c000304d:	31 db                	xor    ebx,ebx
c000304f:	e9 90 01 00 00       	jmp    c00031e4 <create_chain+0x1f5>
c0003054:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003057:	75 74                	jne    c00030cd <create_chain+0xde>
c0003059:	b9 01 00 00 00       	mov    ecx,0x1
c000305e:	89 fa                	mov    edx,edi
c0003060:	89 f0                	mov    eax,esi
c0003062:	e8 2d f9 ff ff       	call   c0002994 <find_bitmap>
c0003067:	89 c3                	mov    ebx,eax
c0003069:	8d 40 ff             	lea    eax,[eax-0x1]
c000306c:	83 f8 fd             	cmp    eax,0xfffffffd
c000306f:	0f 87 6f 01 00 00    	ja     c00031e4 <create_chain+0x1f5>
c0003075:	83 ec 0c             	sub    esp,0xc
c0003078:	b9 01 00 00 00       	mov    ecx,0x1
c000307d:	6a 01                	push   0x1
c000307f:	89 da                	mov    edx,ebx
c0003081:	89 f0                	mov    eax,esi
c0003083:	e8 bf f9 ff ff       	call   c0002a47 <change_bitmap>
c0003088:	83 c4 10             	add    esp,0x10
c000308b:	83 f8 02             	cmp    eax,0x2
c000308e:	74 90                	je     c0003020 <create_chain+0x31>
c0003090:	83 f8 01             	cmp    eax,0x1
c0003093:	0f 84 fc 00 00 00    	je     c0003195 <create_chain+0x1a6>
c0003099:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000309e:	75 09                	jne    c00030a9 <create_chain+0xba>
c00030a0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00030a4:	e9 0c 01 00 00       	jmp    c00031b5 <create_chain+0x1c6>
c00030a9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030ad:	0f 85 e7 00 00 00    	jne    c000319a <create_chain+0x1ab>
c00030b3:	8d 57 01             	lea    edx,[edi+0x1]
c00030b6:	39 da                	cmp    edx,ebx
c00030b8:	0f 84 f7 00 00 00    	je     c00031b5 <create_chain+0x1c6>
c00030be:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030c1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030c5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030c8:	e9 cd 00 00 00       	jmp    c000319a <create_chain+0x1ab>
c00030cd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030d1:	75 41                	jne    c0003114 <create_chain+0x125>
c00030d3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030d6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030d9:	77 05                	ja     c00030e0 <create_chain+0xf1>
c00030db:	bb 02 00 00 00       	mov    ebx,0x2
c00030e0:	89 da                	mov    edx,ebx
c00030e2:	89 e8                	mov    eax,ebp
c00030e4:	e8 18 fc ff ff       	call   c0002d01 <get_fat>
c00030e9:	83 f8 01             	cmp    eax,0x1
c00030ec:	0f 84 2e ff ff ff    	je     c0003020 <create_chain+0x31>
c00030f2:	83 f8 ff             	cmp    eax,0xffffffff
c00030f5:	0f 84 9a 00 00 00    	je     c0003195 <create_chain+0x1a6>
c00030fb:	85 c0                	test   eax,eax
c00030fd:	74 11                	je     c0003110 <create_chain+0x121>
c00030ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003102:	83 f8 01             	cmp    eax,0x1
c0003105:	76 0d                	jbe    c0003114 <create_chain+0x125>
c0003107:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000310a:	76 08                	jbe    c0003114 <create_chain+0x125>
c000310c:	89 c7                	mov    edi,eax
c000310e:	eb 04                	jmp    c0003114 <create_chain+0x125>
c0003110:	85 db                	test   ebx,ebx
c0003112:	75 38                	jne    c000314c <create_chain+0x15d>
c0003114:	89 fb                	mov    ebx,edi
c0003116:	43                   	inc    ebx
c0003117:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000311a:	77 0e                	ja     c000312a <create_chain+0x13b>
c000311c:	83 ff 01             	cmp    edi,0x1
c000311f:	0f 86 28 ff ff ff    	jbe    c000304d <create_chain+0x5e>
c0003125:	bb 02 00 00 00       	mov    ebx,0x2
c000312a:	89 da                	mov    edx,ebx
c000312c:	89 e8                	mov    eax,ebp
c000312e:	e8 ce fb ff ff       	call   c0002d01 <get_fat>
c0003133:	85 c0                	test   eax,eax
c0003135:	74 15                	je     c000314c <create_chain+0x15d>
c0003137:	83 f8 01             	cmp    eax,0x1
c000313a:	0f 84 e0 fe ff ff    	je     c0003020 <create_chain+0x31>
c0003140:	40                   	inc    eax
c0003141:	74 52                	je     c0003195 <create_chain+0x1a6>
c0003143:	39 fb                	cmp    ebx,edi
c0003145:	75 cf                	jne    c0003116 <create_chain+0x127>
c0003147:	e9 01 ff ff ff       	jmp    c000304d <create_chain+0x5e>
c000314c:	83 c9 ff             	or     ecx,0xffffffff
c000314f:	89 da                	mov    edx,ebx
c0003151:	89 f0                	mov    eax,esi
c0003153:	e8 a4 f9 ff ff       	call   c0002afc <put_fat>
c0003158:	85 c0                	test   eax,eax
c000315a:	75 32                	jne    c000318e <create_chain+0x19f>
c000315c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003161:	74 11                	je     c0003174 <create_chain+0x185>
c0003163:	89 d9                	mov    ecx,ebx
c0003165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003169:	89 f0                	mov    eax,esi
c000316b:	e8 8c f9 ff ff       	call   c0002afc <put_fat>
c0003170:	85 c0                	test   eax,eax
c0003172:	75 1a                	jne    c000318e <create_chain+0x19f>
c0003174:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003177:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000317a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000317d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003180:	39 d0                	cmp    eax,edx
c0003182:	77 04                	ja     c0003188 <create_chain+0x199>
c0003184:	48                   	dec    eax
c0003185:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003188:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000318c:	eb 56                	jmp    c00031e4 <create_chain+0x1f5>
c000318e:	48                   	dec    eax
c000318f:	0f 85 8b fe ff ff    	jne    c0003020 <create_chain+0x31>
c0003195:	83 cb ff             	or     ebx,0xffffffff
c0003198:	eb 4a                	jmp    c00031e4 <create_chain+0x1f5>
c000319a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000319e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00031a1:	41                   	inc    ecx
c00031a2:	39 d9                	cmp    ecx,ebx
c00031a4:	75 19                	jne    c00031bf <create_chain+0x1d0>
c00031a6:	b9 02 00 00 00       	mov    ecx,0x2
c00031ab:	85 d2                	test   edx,edx
c00031ad:	74 03                	je     c00031b2 <create_chain+0x1c3>
c00031af:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031b2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031b5:	85 c0                	test   eax,eax
c00031b7:	0f 85 63 fe ff ff    	jne    c0003020 <create_chain+0x31>
c00031bd:	eb b5                	jmp    c0003174 <create_chain+0x185>
c00031bf:	85 d2                	test   edx,edx
c00031c1:	75 07                	jne    c00031ca <create_chain+0x1db>
c00031c3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d0:	89 e8                	mov    eax,ebp
c00031d2:	e8 bb fa ff ff       	call   c0002c92 <fill_last_frag>
c00031d7:	85 c0                	test   eax,eax
c00031d9:	75 b3                	jne    c000318e <create_chain+0x19f>
c00031db:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031e2:	eb 90                	jmp    c0003174 <create_chain+0x185>
c00031e4:	83 c4 1c             	add    esp,0x1c
c00031e7:	89 d8                	mov    eax,ebx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	5f                   	pop    edi
c00031ec:	5d                   	pop    ebp
c00031ed:	c3                   	ret    

c00031ee <remove_chain>:
c00031ee:	55                   	push   ebp
c00031ef:	57                   	push   edi
c00031f0:	56                   	push   esi
c00031f1:	53                   	push   ebx
c00031f2:	83 ec 1c             	sub    esp,0x1c
c00031f5:	83 fa 01             	cmp    edx,0x1
c00031f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031fe:	77 0a                	ja     c000320a <remove_chain+0x1c>
c0003200:	b8 02 00 00 00       	mov    eax,0x2
c0003205:	e9 24 01 00 00       	jmp    c000332e <remove_chain+0x140>
c000320a:	89 d6                	mov    esi,edx
c000320c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000320f:	76 ef                	jbe    c0003200 <remove_chain+0x12>
c0003211:	89 c7                	mov    edi,eax
c0003213:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003218:	75 06                	jne    c0003220 <remove_chain+0x32>
c000321a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000321e:	eb 54                	jmp    c0003274 <remove_chain+0x86>
c0003220:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003223:	75 06                	jne    c000322b <remove_chain+0x3d>
c0003225:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003229:	74 ef                	je     c000321a <remove_chain+0x2c>
c000322b:	83 c9 ff             	or     ecx,0xffffffff
c000322e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003232:	89 d8                	mov    eax,ebx
c0003234:	e8 c3 f8 ff ff       	call   c0002afc <put_fat>
c0003239:	85 c0                	test   eax,eax
c000323b:	74 dd                	je     c000321a <remove_chain+0x2c>
c000323d:	e9 ec 00 00 00       	jmp    c000332e <remove_chain+0x140>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	74 b9                	je     c0003200 <remove_chain+0x12>
c0003247:	83 f8 ff             	cmp    eax,0xffffffff
c000324a:	74 6d                	je     c00032b9 <remove_chain+0xcb>
c000324c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000324f:	75 6f                	jne    c00032c0 <remove_chain+0xd2>
c0003251:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003254:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003257:	8d 51 fe             	lea    edx,[ecx-0x2]
c000325a:	39 d0                	cmp    eax,edx
c000325c:	73 08                	jae    c0003266 <remove_chain+0x78>
c000325e:	40                   	inc    eax
c000325f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003263:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003266:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003269:	39 e9                	cmp    ecx,ebp
c000326b:	75 64                	jne    c00032d1 <remove_chain+0xe3>
c000326d:	89 ee                	mov    esi,ebp
c000326f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003272:	76 0f                	jbe    c0003283 <remove_chain+0x95>
c0003274:	89 f2                	mov    edx,esi
c0003276:	89 f8                	mov    eax,edi
c0003278:	e8 84 fa ff ff       	call   c0002d01 <get_fat>
c000327d:	89 c5                	mov    ebp,eax
c000327f:	85 c0                	test   eax,eax
c0003281:	75 bf                	jne    c0003242 <remove_chain+0x54>
c0003283:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003286:	0f 85 a0 00 00 00    	jne    c000332c <remove_chain+0x13e>
c000328c:	eb 6c                	jmp    c00032fa <remove_chain+0x10c>
c000328e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003291:	84 c0                	test   al,al
c0003293:	75 7d                	jne    c0003312 <remove_chain+0x124>
c0003295:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003298:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000329c:	0f 84 86 00 00 00    	je     c0003328 <remove_chain+0x13a>
c00032a2:	89 da                	mov    edx,ebx
c00032a4:	89 f8                	mov    eax,edi
c00032a6:	e8 56 fa ff ff       	call   c0002d01 <get_fat>
c00032ab:	83 f8 01             	cmp    eax,0x1
c00032ae:	0f 86 4c ff ff ff    	jbe    c0003200 <remove_chain+0x12>
c00032b4:	83 f8 ff             	cmp    eax,0xffffffff
c00032b7:	75 4e                	jne    c0003307 <remove_chain+0x119>
c00032b9:	b8 01 00 00 00       	mov    eax,0x1
c00032be:	eb 6e                	jmp    c000332e <remove_chain+0x140>
c00032c0:	31 c9                	xor    ecx,ecx
c00032c2:	89 f2                	mov    edx,esi
c00032c4:	89 d8                	mov    eax,ebx
c00032c6:	e8 31 f8 ff ff       	call   c0002afc <put_fat>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 82                	je     c0003251 <remove_chain+0x63>
c00032cf:	eb 5d                	jmp    c000332e <remove_chain+0x140>
c00032d1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d4:	75 1b                	jne    c00032f1 <remove_chain+0x103>
c00032d6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032da:	89 d8                	mov    eax,ebx
c00032dc:	83 ec 0c             	sub    esp,0xc
c00032df:	6a 00                	push   0x0
c00032e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032e5:	e8 5d f7 ff ff       	call   c0002a47 <change_bitmap>
c00032ea:	83 c4 10             	add    esp,0x10
c00032ed:	85 c0                	test   eax,eax
c00032ef:	75 3d                	jne    c000332e <remove_chain+0x140>
c00032f1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032f5:	e9 73 ff ff ff       	jmp    c000326d <remove_chain+0x7f>
c00032fa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ff:	75 8d                	jne    c000328e <remove_chain+0xa0>
c0003301:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003305:	eb 25                	jmp    c000332c <remove_chain+0x13e>
c0003307:	8d 53 01             	lea    edx,[ebx+0x1]
c000330a:	89 c3                	mov    ebx,eax
c000330c:	39 c2                	cmp    edx,eax
c000330e:	74 88                	je     c0003298 <remove_chain+0xaa>
c0003310:	eb 1a                	jmp    c000332c <remove_chain+0x13e>
c0003312:	3c 03                	cmp    al,0x3
c0003314:	75 16                	jne    c000332c <remove_chain+0x13e>
c0003316:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003319:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000331d:	77 0d                	ja     c000332c <remove_chain+0x13e>
c000331f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003322:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003326:	72 04                	jb     c000332c <remove_chain+0x13e>
c0003328:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000332c:	31 c0                	xor    eax,eax
c000332e:	83 c4 1c             	add    esp,0x1c
c0003331:	5b                   	pop    ebx
c0003332:	5e                   	pop    esi
c0003333:	5f                   	pop    edi
c0003334:	5d                   	pop    ebp
c0003335:	c3                   	ret    

c0003336 <dir_clear>:
c0003336:	55                   	push   ebp
c0003337:	57                   	push   edi
c0003338:	56                   	push   esi
c0003339:	89 c6                	mov    esi,eax
c000333b:	53                   	push   ebx
c000333c:	83 ec 1c             	sub    esp,0x1c
c000333f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003343:	e8 9d ed ff ff       	call   c00020e5 <sync_window>
c0003348:	85 c0                	test   eax,eax
c000334a:	0f 85 de 00 00 00    	jne    c000342e <dir_clear+0xf8>
c0003350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003354:	89 f0                	mov    eax,esi
c0003356:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003359:	e8 d6 e8 ff ff       	call   c0001c34 <clst2sect>
c000335e:	b9 00 02 00 00       	mov    ecx,0x200
c0003363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003367:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000336b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000336e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003371:	89 e8                	mov    eax,ebp
c0003373:	31 d2                	xor    edx,edx
c0003375:	e8 b5 e6 ff ff       	call   c0001a2f <mem_set>
c000337a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000337e:	c1 e3 09             	shl    ebx,0x9
c0003381:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003387:	76 1f                	jbe    c00033a8 <dir_clear+0x72>
c0003389:	bb 00 80 00 00       	mov    ebx,0x8000
c000338e:	eb 18                	jmp    c00033a8 <dir_clear+0x72>
c0003390:	83 ec 0c             	sub    esp,0xc
c0003393:	53                   	push   ebx
c0003394:	e8 35 4e 00 00       	call   c00081ce <ff_memalloc>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	89 c7                	mov    edi,eax
c000339e:	85 c0                	test   eax,eax
c00033a0:	0f 85 8f 00 00 00    	jne    c0003435 <dir_clear+0xff>
c00033a6:	d1 eb                	shr    ebx,1
c00033a8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033ae:	77 e0                	ja     c0003390 <dir_clear+0x5a>
c00033b0:	31 db                	xor    ebx,ebx
c00033b2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033b6:	39 d8                	cmp    eax,ebx
c00033b8:	76 66                	jbe    c0003420 <dir_clear+0xea>
c00033ba:	83 ec 0c             	sub    esp,0xc
c00033bd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033c1:	6a 01                	push   0x1
c00033c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033cb:	55                   	push   ebp
c00033cc:	50                   	push   eax
c00033cd:	e8 94 e5 ff ff       	call   c0001966 <disk_write>
c00033d2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033d7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033dc:	83 c4 20             	add    esp,0x20
c00033df:	85 c0                	test   eax,eax
c00033e1:	75 3d                	jne    c0003420 <dir_clear+0xea>
c00033e3:	43                   	inc    ebx
c00033e4:	eb cc                	jmp    c00033b2 <dir_clear+0x7c>
c00033e6:	83 ec 0c             	sub    esp,0xc
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	55                   	push   ebp
c00033ec:	89 d8                	mov    eax,ebx
c00033ee:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033f2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033f6:	52                   	push   edx
c00033f7:	50                   	push   eax
c00033f8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033fc:	57                   	push   edi
c00033fd:	50                   	push   eax
c00033fe:	e8 63 e5 ff ff       	call   c0001966 <disk_write>
c0003403:	83 c4 20             	add    esp,0x20
c0003406:	85 c0                	test   eax,eax
c0003408:	75 0a                	jne    c0003414 <dir_clear+0xde>
c000340a:	01 eb                	add    ebx,ebp
c000340c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003410:	39 d8                	cmp    eax,ebx
c0003412:	77 d2                	ja     c00033e6 <dir_clear+0xb0>
c0003414:	83 ec 0c             	sub    esp,0xc
c0003417:	57                   	push   edi
c0003418:	e8 c7 4d 00 00       	call   c00081e4 <ff_memfree>
c000341d:	83 c4 10             	add    esp,0x10
c0003420:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003424:	39 d8                	cmp    eax,ebx
c0003426:	0f 95 c0             	setne  al
c0003429:	0f b6 c0             	movzx  eax,al
c000342c:	eb 19                	jmp    c0003447 <dir_clear+0x111>
c000342e:	b8 01 00 00 00       	mov    eax,0x1
c0003433:	eb 12                	jmp    c0003447 <dir_clear+0x111>
c0003435:	89 d9                	mov    ecx,ebx
c0003437:	31 d2                	xor    edx,edx
c0003439:	c1 eb 09             	shr    ebx,0x9
c000343c:	e8 ee e5 ff ff       	call   c0001a2f <mem_set>
c0003441:	89 dd                	mov    ebp,ebx
c0003443:	31 db                	xor    ebx,ebx
c0003445:	eb c5                	jmp    c000340c <dir_clear+0xd6>
c0003447:	83 c4 1c             	add    esp,0x1c
c000344a:	5b                   	pop    ebx
c000344b:	5e                   	pop    esi
c000344c:	5f                   	pop    edi
c000344d:	5d                   	pop    ebp
c000344e:	c3                   	ret    

c000344f <dir_next>:
c000344f:	55                   	push   ebp
c0003450:	57                   	push   edi
c0003451:	56                   	push   esi
c0003452:	53                   	push   ebx
c0003453:	89 c3                	mov    ebx,eax
c0003455:	83 ec 1c             	sub    esp,0x1c
c0003458:	8b 28                	mov    ebp,DWORD PTR [eax]
c000345a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000345e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003461:	8d 78 20             	lea    edi,[eax+0x20]
c0003464:	31 c0                	xor    eax,eax
c0003466:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000346a:	0f 94 c0             	sete   al
c000346d:	48                   	dec    eax
c000346e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003473:	05 00 00 00 10       	add    eax,0x10000000
c0003478:	39 f8                	cmp    eax,edi
c000347a:	77 0e                	ja     c000348a <dir_next+0x3b>
c000347c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003483:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000348a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000348d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003490:	b8 04 00 00 00       	mov    eax,0x4
c0003495:	89 ce                	mov    esi,ecx
c0003497:	09 d6                	or     esi,edx
c0003499:	0f 84 da 00 00 00    	je     c0003579 <dir_next+0x12a>
c000349f:	89 f8                	mov    eax,edi
c00034a1:	25 ff 01 00 00       	and    eax,0x1ff
c00034a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034aa:	0f 85 b9 00 00 00    	jne    c0003569 <dir_next+0x11a>
c00034b0:	83 c2 01             	add    edx,0x1
c00034b3:	83 d1 00             	adc    ecx,0x0
c00034b6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034b9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034bf:	85 d2                	test   edx,edx
c00034c1:	75 29                	jne    c00034ec <dir_next+0x9d>
c00034c3:	89 fa                	mov    edx,edi
c00034c5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034c9:	c1 ea 05             	shr    edx,0x5
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	0f 82 95 00 00 00    	jb     c0003569 <dir_next+0x11a>
c00034d4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034db:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034e2:	b8 04 00 00 00       	mov    eax,0x4
c00034e7:	e9 8d 00 00 00       	jmp    c0003579 <dir_next+0x12a>
c00034ec:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034f0:	89 f9                	mov    ecx,edi
c00034f2:	48                   	dec    eax
c00034f3:	c1 e9 09             	shr    ecx,0x9
c00034f6:	85 c8                	test   eax,ecx
c00034f8:	75 6f                	jne    c0003569 <dir_next+0x11a>
c00034fa:	89 d8                	mov    eax,ebx
c00034fc:	e8 00 f8 ff ff       	call   c0002d01 <get_fat>
c0003501:	89 c6                	mov    esi,eax
c0003503:	83 f8 01             	cmp    eax,0x1
c0003506:	77 07                	ja     c000350f <dir_next+0xc0>
c0003508:	b8 02 00 00 00       	mov    eax,0x2
c000350d:	eb 6a                	jmp    c0003579 <dir_next+0x12a>
c000350f:	83 f8 ff             	cmp    eax,0xffffffff
c0003512:	75 07                	jne    c000351b <dir_next+0xcc>
c0003514:	b8 01 00 00 00       	mov    eax,0x1
c0003519:	eb 5e                	jmp    c0003579 <dir_next+0x12a>
c000351b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000351e:	77 37                	ja     c0003557 <dir_next+0x108>
c0003520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003525:	74 ad                	je     c00034d4 <dir_next+0x85>
c0003527:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000352a:	89 d8                	mov    eax,ebx
c000352c:	e8 be fa ff ff       	call   c0002fef <create_chain>
c0003531:	89 c6                	mov    esi,eax
c0003533:	b8 07 00 00 00       	mov    eax,0x7
c0003538:	85 f6                	test   esi,esi
c000353a:	74 3d                	je     c0003579 <dir_next+0x12a>
c000353c:	83 fe 01             	cmp    esi,0x1
c000353f:	74 c7                	je     c0003508 <dir_next+0xb9>
c0003541:	83 fe ff             	cmp    esi,0xffffffff
c0003544:	74 ce                	je     c0003514 <dir_next+0xc5>
c0003546:	89 f2                	mov    edx,esi
c0003548:	89 e8                	mov    eax,ebp
c000354a:	e8 e7 fd ff ff       	call   c0003336 <dir_clear>
c000354f:	85 c0                	test   eax,eax
c0003551:	75 c1                	jne    c0003514 <dir_next+0xc5>
c0003553:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003557:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000355a:	89 f2                	mov    edx,esi
c000355c:	89 e8                	mov    eax,ebp
c000355e:	e8 d1 e6 ff ff       	call   c0001c34 <clst2sect>
c0003563:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003566:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000356d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003570:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003574:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003577:	31 c0                	xor    eax,eax
c0003579:	83 c4 1c             	add    esp,0x1c
c000357c:	5b                   	pop    ebx
c000357d:	5e                   	pop    esi
c000357e:	5f                   	pop    edi
c000357f:	5d                   	pop    ebp
c0003580:	c3                   	ret    

c0003581 <load_xdir>:
c0003581:	55                   	push   ebp
c0003582:	57                   	push   edi
c0003583:	56                   	push   esi
c0003584:	89 c6                	mov    esi,eax
c0003586:	53                   	push   ebx
c0003587:	83 ec 1c             	sub    esp,0x1c
c000358a:	8b 00                	mov    eax,DWORD PTR [eax]
c000358c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000358f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003592:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003595:	e8 df eb ff ff       	call   c0002179 <move_window>
c000359a:	89 c3                	mov    ebx,eax
c000359c:	85 c0                	test   eax,eax
c000359e:	0f 85 0c 01 00 00    	jne    c00036b0 <load_xdir+0x12f>
c00035a4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035a7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00035aa:	0f 85 fb 00 00 00    	jne    c00036ab <load_xdir+0x12a>
c00035b0:	89 f8                	mov    eax,edi
c00035b2:	b9 20 00 00 00       	mov    ecx,0x20
c00035b7:	e8 5e e4 ff ff       	call   c0001a1a <mem_cpy>
c00035bc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035c0:	40                   	inc    eax
c00035c1:	c1 e0 05             	shl    eax,0x5
c00035c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035c8:	83 e8 60             	sub    eax,0x60
c00035cb:	3d 00 02 00 00       	cmp    eax,0x200
c00035d0:	0f 87 d5 00 00 00    	ja     c00036ab <load_xdir+0x12a>
c00035d6:	31 d2                	xor    edx,edx
c00035d8:	89 f0                	mov    eax,esi
c00035da:	e8 70 fe ff ff       	call   c000344f <dir_next>
c00035df:	89 c3                	mov    ebx,eax
c00035e1:	83 f8 04             	cmp    eax,0x4
c00035e4:	0f 84 c1 00 00 00    	je     c00036ab <load_xdir+0x12a>
c00035ea:	85 c0                	test   eax,eax
c00035ec:	0f 85 be 00 00 00    	jne    c00036b0 <load_xdir+0x12f>
c00035f2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00035fa:	e8 7a eb ff ff       	call   c0002179 <move_window>
c00035ff:	89 c3                	mov    ebx,eax
c0003601:	85 c0                	test   eax,eax
c0003603:	0f 85 a7 00 00 00    	jne    c00036b0 <load_xdir+0x12f>
c0003609:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000360f:	0f 85 96 00 00 00    	jne    c00036ab <load_xdir+0x12a>
c0003615:	8d 47 20             	lea    eax,[edi+0x20]
c0003618:	b9 20 00 00 00       	mov    ecx,0x20
c000361d:	e8 f8 e3 ff ff       	call   c0001a1a <mem_cpy>
c0003622:	31 d2                	xor    edx,edx
c0003624:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003628:	b9 0f 00 00 00       	mov    ecx,0xf
c000362d:	83 c0 2c             	add    eax,0x2c
c0003630:	f7 f1                	div    ecx
c0003632:	c1 e0 05             	shl    eax,0x5
c0003635:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003639:	77 70                	ja     c00036ab <load_xdir+0x12a>
c000363b:	bd 40 00 00 00       	mov    ebp,0x40
c0003640:	31 d2                	xor    edx,edx
c0003642:	89 f0                	mov    eax,esi
c0003644:	e8 06 fe ff ff       	call   c000344f <dir_next>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	83 f8 04             	cmp    eax,0x4
c000364e:	74 5b                	je     c00036ab <load_xdir+0x12a>
c0003650:	85 c0                	test   eax,eax
c0003652:	75 5c                	jne    c00036b0 <load_xdir+0x12f>
c0003654:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003657:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000365a:	8b 06                	mov    eax,DWORD PTR [esi]
c000365c:	e8 18 eb ff ff       	call   c0002179 <move_window>
c0003661:	89 c3                	mov    ebx,eax
c0003663:	85 c0                	test   eax,eax
c0003665:	75 49                	jne    c00036b0 <load_xdir+0x12f>
c0003667:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000366a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000366d:	75 3c                	jne    c00036ab <load_xdir+0x12a>
c000366f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003675:	77 0d                	ja     c0003684 <load_xdir+0x103>
c0003677:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000367a:	b9 20 00 00 00       	mov    ecx,0x20
c000367f:	e8 96 e3 ff ff       	call   c0001a1a <mem_cpy>
c0003684:	83 c5 20             	add    ebp,0x20
c0003687:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000368b:	77 b3                	ja     c0003640 <load_xdir+0xbf>
c000368d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003693:	77 1b                	ja     c00036b0 <load_xdir+0x12f>
c0003695:	89 f8                	mov    eax,edi
c0003697:	e8 cd e7 ff ff       	call   c0001e69 <xdir_sum>
c000369c:	89 c1                	mov    ecx,eax
c000369e:	8d 47 02             	lea    eax,[edi+0x2]
c00036a1:	e8 f5 e2 ff ff       	call   c000199b <ld_word>
c00036a6:	66 39 c1             	cmp    cx,ax
c00036a9:	74 05                	je     c00036b0 <load_xdir+0x12f>
c00036ab:	bb 02 00 00 00       	mov    ebx,0x2
c00036b0:	83 c4 1c             	add    esp,0x1c
c00036b3:	89 d8                	mov    eax,ebx
c00036b5:	5b                   	pop    ebx
c00036b6:	5e                   	pop    esi
c00036b7:	5f                   	pop    edi
c00036b8:	5d                   	pop    ebp
c00036b9:	c3                   	ret    

c00036ba <load_obj_xdir>:
c00036ba:	53                   	push   ebx
c00036bb:	89 c3                	mov    ebx,eax
c00036bd:	83 ec 08             	sub    esp,0x8
c00036c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00036c2:	89 03                	mov    DWORD PTR [ebx],eax
c00036c4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ca:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036cd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036d0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036d3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036da:	30 c0                	xor    al,al
c00036dc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036e3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036e6:	89 d8                	mov    eax,ebx
c00036e8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036eb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036ee:	e8 04 f8 ff ff       	call   c0002ef7 <dir_sdi>
c00036f3:	85 c0                	test   eax,eax
c00036f5:	75 0b                	jne    c0003702 <load_obj_xdir+0x48>
c00036f7:	89 d8                	mov    eax,ebx
c00036f9:	83 c4 08             	add    esp,0x8
c00036fc:	5b                   	pop    ebx
c00036fd:	e9 7f fe ff ff       	jmp    c0003581 <load_xdir>
c0003702:	83 c4 08             	add    esp,0x8
c0003705:	5b                   	pop    ebx
c0003706:	c3                   	ret    

c0003707 <dir_read>:
c0003707:	55                   	push   ebp
c0003708:	bd 04 00 00 00       	mov    ebp,0x4
c000370d:	57                   	push   edi
c000370e:	56                   	push   esi
c000370f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003714:	53                   	push   ebx
c0003715:	89 c3                	mov    ebx,eax
c0003717:	83 ec 1c             	sub    esp,0x1c
c000371a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000371e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003720:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003725:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003728:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000372b:	89 c8                	mov    eax,ecx
c000372d:	09 d0                	or     eax,edx
c000372f:	0f 84 25 01 00 00    	je     c000385a <dir_read+0x153>
c0003735:	89 f8                	mov    eax,edi
c0003737:	e8 3d ea ff ff       	call   c0002179 <move_window>
c000373c:	89 c5                	mov    ebp,eax
c000373e:	85 c0                	test   eax,eax
c0003740:	0f 85 23 01 00 00    	jne    c0003869 <dir_read+0x162>
c0003746:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003749:	8a 0a                	mov    cl,BYTE PTR [edx]
c000374b:	84 c9                	test   cl,cl
c000374d:	0f 84 11 01 00 00    	je     c0003864 <dir_read+0x15d>
c0003753:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003756:	75 48                	jne    c00037a0 <dir_read+0x99>
c0003758:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000375d:	74 10                	je     c000376f <dir_read+0x68>
c000375f:	80 f9 83             	cmp    cl,0x83
c0003762:	0f 85 dd 00 00 00    	jne    c0003845 <dir_read+0x13e>
c0003768:	31 ed                	xor    ebp,ebp
c000376a:	e9 08 01 00 00       	jmp    c0003877 <dir_read+0x170>
c000376f:	80 f9 85             	cmp    cl,0x85
c0003772:	0f 85 cd 00 00 00    	jne    c0003845 <dir_read+0x13e>
c0003778:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000377b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000377e:	89 d8                	mov    eax,ebx
c0003780:	e8 fc fd ff ff       	call   c0003581 <load_xdir>
c0003785:	89 c5                	mov    ebp,eax
c0003787:	85 c0                	test   eax,eax
c0003789:	0f 85 da 00 00 00    	jne    c0003869 <dir_read+0x162>
c000378f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003792:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003795:	83 e0 3f             	and    eax,0x3f
c0003798:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000379b:	e9 d7 00 00 00       	jmp    c0003877 <dir_read+0x170>
c00037a0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00037a3:	83 e0 3f             	and    eax,0x3f
c00037a6:	80 f9 2e             	cmp    cl,0x2e
c00037a9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037ad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037b0:	0f 84 8a 00 00 00    	je     c0003840 <dir_read+0x139>
c00037b6:	80 f9 e5             	cmp    cl,0xe5
c00037b9:	0f 84 81 00 00 00    	je     c0003840 <dir_read+0x139>
c00037bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037c3:	83 e0 1f             	and    eax,0x1f
c00037c6:	83 f8 08             	cmp    eax,0x8
c00037c9:	0f 94 c0             	sete   al
c00037cc:	0f b6 c0             	movzx  eax,al
c00037cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037d3:	75 6b                	jne    c0003840 <dir_read+0x139>
c00037d5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037da:	75 44                	jne    c0003820 <dir_read+0x119>
c00037dc:	f6 c1 40             	test   cl,0x40
c00037df:	74 12                	je     c00037f3 <dir_read+0xec>
c00037e1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e4:	83 e1 bf             	and    ecx,0xffffffbf
c00037e7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037ee:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f1:	eb 06                	jmp    c00037f9 <dir_read+0xf2>
c00037f3:	89 f0                	mov    eax,esi
c00037f5:	38 c8                	cmp    al,cl
c00037f7:	75 47                	jne    c0003840 <dir_read+0x139>
c00037f9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037fd:	be ff ff ff ff       	mov    esi,0xffffffff
c0003802:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003805:	75 3e                	jne    c0003845 <dir_read+0x13e>
c0003807:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000380b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000380e:	e8 8a e4 ff ff       	call   c0001c9d <pick_lfn>
c0003813:	85 c0                	test   eax,eax
c0003815:	74 2e                	je     c0003845 <dir_read+0x13e>
c0003817:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000381b:	8d 71 ff             	lea    esi,[ecx-0x1]
c000381e:	eb 25                	jmp    c0003845 <dir_read+0x13e>
c0003820:	89 f0                	mov    eax,esi
c0003822:	84 c0                	test   al,al
c0003824:	75 11                	jne    c0003837 <dir_read+0x130>
c0003826:	89 d0                	mov    eax,edx
c0003828:	e8 2a e6 ff ff       	call   c0001e57 <sum_sfn>
c000382d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003831:	0f 84 31 ff ff ff    	je     c0003768 <dir_read+0x61>
c0003837:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000383e:	eb 37                	jmp    c0003877 <dir_read+0x170>
c0003840:	be ff ff ff ff       	mov    esi,0xffffffff
c0003845:	31 d2                	xor    edx,edx
c0003847:	89 d8                	mov    eax,ebx
c0003849:	e8 01 fc ff ff       	call   c000344f <dir_next>
c000384e:	89 c5                	mov    ebp,eax
c0003850:	85 c0                	test   eax,eax
c0003852:	0f 84 cd fe ff ff    	je     c0003725 <dir_read+0x1e>
c0003858:	eb 0f                	jmp    c0003869 <dir_read+0x162>
c000385a:	85 ed                	test   ebp,ebp
c000385c:	0f 84 06 ff ff ff    	je     c0003768 <dir_read+0x61>
c0003862:	eb 05                	jmp    c0003869 <dir_read+0x162>
c0003864:	bd 04 00 00 00       	mov    ebp,0x4
c0003869:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003870:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003877:	83 c4 1c             	add    esp,0x1c
c000387a:	89 e8                	mov    eax,ebp
c000387c:	5b                   	pop    ebx
c000387d:	5e                   	pop    esi
c000387e:	5f                   	pop    edi
c000387f:	5d                   	pop    ebp
c0003880:	c3                   	ret    

c0003881 <dir_alloc>:
c0003881:	55                   	push   ebp
c0003882:	89 d5                	mov    ebp,edx
c0003884:	57                   	push   edi
c0003885:	31 d2                	xor    edx,edx
c0003887:	56                   	push   esi
c0003888:	53                   	push   ebx
c0003889:	89 c3                	mov    ebx,eax
c000388b:	83 ec 0c             	sub    esp,0xc
c000388e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003890:	e8 62 f6 ff ff       	call   c0002ef7 <dir_sdi>
c0003895:	85 c0                	test   eax,eax
c0003897:	75 4e                	jne    c00038e7 <dir_alloc+0x66>
c0003899:	31 f6                	xor    esi,esi
c000389b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000389e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 d1 e8 ff ff       	call   c0002179 <move_window>
c00038a8:	85 c0                	test   eax,eax
c00038aa:	75 3b                	jne    c00038e7 <dir_alloc+0x66>
c00038ac:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038af:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038b2:	8a 12                	mov    dl,BYTE PTR [edx]
c00038b4:	75 07                	jne    c00038bd <dir_alloc+0x3c>
c00038b6:	f7 d2                	not    edx
c00038b8:	c0 ea 07             	shr    dl,0x7
c00038bb:	eb 0d                	jmp    c00038ca <dir_alloc+0x49>
c00038bd:	84 d2                	test   dl,dl
c00038bf:	0f 94 c1             	sete   cl
c00038c2:	80 fa e5             	cmp    dl,0xe5
c00038c5:	0f 94 c2             	sete   dl
c00038c8:	09 ca                	or     edx,ecx
c00038ca:	84 d2                	test   dl,dl
c00038cc:	74 07                	je     c00038d5 <dir_alloc+0x54>
c00038ce:	46                   	inc    esi
c00038cf:	39 ee                	cmp    esi,ebp
c00038d1:	75 04                	jne    c00038d7 <dir_alloc+0x56>
c00038d3:	eb 1c                	jmp    c00038f1 <dir_alloc+0x70>
c00038d5:	31 f6                	xor    esi,esi
c00038d7:	ba 01 00 00 00       	mov    edx,0x1
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 6c fb ff ff       	call   c000344f <dir_next>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	74 b4                	je     c000389b <dir_alloc+0x1a>
c00038e7:	83 f8 04             	cmp    eax,0x4
c00038ea:	75 05                	jne    c00038f1 <dir_alloc+0x70>
c00038ec:	b8 07 00 00 00       	mov    eax,0x7
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <store_xdir>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	89 c7                	mov    edi,eax
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	83 ec 0c             	sub    esp,0xc
c0003902:	8b 00                	mov    eax,DWORD PTR [eax]
c0003904:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003907:	89 e8                	mov    eax,ebp
c0003909:	e8 5b e5 ff ff       	call   c0001e69 <xdir_sum>
c000390e:	0f b7 d0             	movzx  edx,ax
c0003911:	8d 45 02             	lea    eax,[ebp+0x2]
c0003914:	e8 f4 e0 ff ff       	call   c0001a0d <st_word>
c0003919:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c000391d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003920:	89 f8                	mov    eax,edi
c0003922:	e8 d0 f5 ff ff       	call   c0002ef7 <dir_sdi>
c0003927:	89 c6                	mov    esi,eax
c0003929:	85 f6                	test   esi,esi
c000392b:	75 3d                	jne    c000396a <store_xdir+0x71>
c000392d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003930:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	e8 3f e8 ff ff       	call   c0002179 <move_window>
c000393a:	89 c6                	mov    esi,eax
c000393c:	85 c0                	test   eax,eax
c000393e:	75 2a                	jne    c000396a <store_xdir+0x71>
c0003940:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003943:	b9 20 00 00 00       	mov    ecx,0x20
c0003948:	89 ea                	mov    edx,ebp
c000394a:	e8 cb e0 ff ff       	call   c0001a1a <mem_cpy>
c000394f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003951:	85 db                	test   ebx,ebx
c0003953:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003957:	74 11                	je     c000396a <store_xdir+0x71>
c0003959:	31 d2                	xor    edx,edx
c000395b:	89 f8                	mov    eax,edi
c000395d:	83 c5 20             	add    ebp,0x20
c0003960:	e8 ea fa ff ff       	call   c000344f <dir_next>
c0003965:	4b                   	dec    ebx
c0003966:	89 c6                	mov    esi,eax
c0003968:	eb bf                	jmp    c0003929 <store_xdir+0x30>
c000396a:	89 f0                	mov    eax,esi
c000396c:	83 fe 02             	cmp    esi,0x2
c000396f:	76 05                	jbe    c0003976 <store_xdir+0x7d>
c0003971:	b8 02 00 00 00       	mov    eax,0x2
c0003976:	83 c4 0c             	add    esp,0xc
c0003979:	5b                   	pop    ebx
c000397a:	5e                   	pop    esi
c000397b:	5f                   	pop    edi
c000397c:	5d                   	pop    ebp
c000397d:	c3                   	ret    

c000397e <dir_remove>:
c000397e:	57                   	push   edi
c000397f:	56                   	push   esi
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003986:	8b 30                	mov    esi,DWORD PTR [eax]
c0003988:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000398b:	83 fa ff             	cmp    edx,0xffffffff
c000398e:	74 09                	je     c0003999 <dir_remove+0x1b>
c0003990:	e8 62 f5 ff ff       	call   c0002ef7 <dir_sdi>
c0003995:	85 c0                	test   eax,eax
c0003997:	75 41                	jne    c00039da <dir_remove+0x5c>
c0003999:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000399c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000399f:	89 f0                	mov    eax,esi
c00039a1:	e8 d3 e7 ff ff       	call   c0002179 <move_window>
c00039a6:	85 c0                	test   eax,eax
c00039a8:	75 26                	jne    c00039d0 <dir_remove+0x52>
c00039aa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039ad:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039b0:	75 05                	jne    c00039b7 <dir_remove+0x39>
c00039b2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039b5:	eb 03                	jmp    c00039ba <dir_remove+0x3c>
c00039b7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039be:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039c1:	73 17                	jae    c00039da <dir_remove+0x5c>
c00039c3:	31 d2                	xor    edx,edx
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 83 fa ff ff       	call   c000344f <dir_next>
c00039cc:	85 c0                	test   eax,eax
c00039ce:	74 c9                	je     c0003999 <dir_remove+0x1b>
c00039d0:	83 f8 04             	cmp    eax,0x4
c00039d3:	75 05                	jne    c00039da <dir_remove+0x5c>
c00039d5:	b8 02 00 00 00       	mov    eax,0x2
c00039da:	5b                   	pop    ebx
c00039db:	5e                   	pop    esi
c00039dc:	5f                   	pop    edi
c00039dd:	c3                   	ret    

c00039de <create_name>:
c00039de:	55                   	push   ebp
c00039df:	89 d5                	mov    ebp,edx
c00039e1:	57                   	push   edi
c00039e2:	89 c7                	mov    edi,eax
c00039e4:	56                   	push   esi
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	53                   	push   ebx
c00039e8:	83 ec 3c             	sub    esp,0x3c
c00039eb:	8b 02                	mov    eax,DWORD PTR [edx]
c00039ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039f1:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039fa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039fe:	e8 72 e0 ff ff       	call   c0001a75 <tchar2uni>
c0003a03:	89 c3                	mov    ebx,eax
c0003a05:	83 f8 ff             	cmp    eax,0xffffffff
c0003a08:	75 0a                	jne    c0003a14 <create_name+0x36>
c0003a0a:	b8 06 00 00 00       	mov    eax,0x6
c0003a0f:	e9 9e 02 00 00       	jmp    c0003cb2 <create_name+0x2d4>
c0003a14:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a19:	76 0c                	jbe    c0003a27 <create_name+0x49>
c0003a1b:	c1 e8 10             	shr    eax,0x10
c0003a1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a22:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a26:	46                   	inc    esi
c0003a27:	66 83 fb 1f          	cmp    bx,0x1f
c0003a2b:	76 4f                	jbe    c0003a7c <create_name+0x9e>
c0003a2d:	66 83 fb 5c          	cmp    bx,0x5c
c0003a31:	74 35                	je     c0003a68 <create_name+0x8a>
c0003a33:	66 83 fb 2f          	cmp    bx,0x2f
c0003a37:	74 2f                	je     c0003a68 <create_name+0x8a>
c0003a39:	66 83 fb 7f          	cmp    bx,0x7f
c0003a3d:	77 11                	ja     c0003a50 <create_name+0x72>
c0003a3f:	0f b7 d3             	movzx  edx,bx
c0003a42:	b8 12 f8 01 c0       	mov    eax,0xc001f812
c0003a47:	e8 11 e0 ff ff       	call   c0001a5d <chk_chr>
c0003a4c:	85 c0                	test   eax,eax
c0003a4e:	75 ba                	jne    c0003a0a <create_name+0x2c>
c0003a50:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a56:	77 b2                	ja     c0003a0a <create_name+0x2c>
c0003a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a5c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a60:	46                   	inc    esi
c0003a61:	eb 97                	jmp    c00039fa <create_name+0x1c>
c0003a63:	40                   	inc    eax
c0003a64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a6c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a6e:	80 fa 2f             	cmp    dl,0x2f
c0003a71:	74 f0                	je     c0003a63 <create_name+0x85>
c0003a73:	80 fa 5c             	cmp    dl,0x5c
c0003a76:	74 eb                	je     c0003a63 <create_name+0x85>
c0003a78:	31 db                	xor    ebx,ebx
c0003a7a:	eb 02                	jmp    c0003a7e <create_name+0xa0>
c0003a7c:	b3 04                	mov    bl,0x4
c0003a7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a82:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a85:	85 f6                	test   esi,esi
c0003a87:	74 18                	je     c0003aa1 <create_name+0xc3>
c0003a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a8d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a92:	66 83 f8 20          	cmp    ax,0x20
c0003a96:	74 06                	je     c0003a9e <create_name+0xc0>
c0003a98:	66 83 f8 2e          	cmp    ax,0x2e
c0003a9c:	75 03                	jne    c0003aa1 <create_name+0xc3>
c0003a9e:	4e                   	dec    esi
c0003a9f:	eb e4                	jmp    c0003a85 <create_name+0xa7>
c0003aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aa5:	31 ed                	xor    ebp,ebp
c0003aa7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aad:	85 f6                	test   esi,esi
c0003aaf:	0f 84 55 ff ff ff    	je     c0003a0a <create_name+0x2c>
c0003ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ab9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003abc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ac0:	66 83 f8 20          	cmp    ax,0x20
c0003ac4:	75 04                	jne    c0003aca <create_name+0xec>
c0003ac6:	89 d5                	mov    ebp,edx
c0003ac8:	eb eb                	jmp    c0003ab5 <create_name+0xd7>
c0003aca:	85 ed                	test   ebp,ebp
c0003acc:	75 06                	jne    c0003ad4 <create_name+0xf6>
c0003ace:	66 83 f8 2e          	cmp    ax,0x2e
c0003ad2:	75 08                	jne    c0003adc <create_name+0xfe>
c0003ad4:	83 cb 03             	or     ebx,0x3
c0003ad7:	eb 03                	jmp    c0003adc <create_name+0xfe>
c0003ad9:	4e                   	dec    esi
c0003ada:	74 0c                	je     c0003ae8 <create_name+0x10a>
c0003adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ae0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ae6:	75 f1                	jne    c0003ad9 <create_name+0xfb>
c0003ae8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003aed:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003af0:	ba 20 00 00 00       	mov    edx,0x20
c0003af5:	e8 35 df ff ff       	call   c0001a2f <mem_set>
c0003afa:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b02:	31 c9                	xor    ecx,ecx
c0003b04:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b09:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b14:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b18:	66 85 ed             	test   bp,bp
c0003b1b:	0f 84 30 01 00 00    	je     c0003c51 <create_name+0x273>
c0003b21:	66 83 fd 20          	cmp    bp,0x20
c0003b25:	74 10                	je     c0003b37 <create_name+0x159>
c0003b27:	66 83 fd 2e          	cmp    bp,0x2e
c0003b2b:	75 13                	jne    c0003b40 <create_name+0x162>
c0003b2d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b31:	0f 84 6b 01 00 00    	je     c0003ca2 <create_name+0x2c4>
c0003b37:	83 cb 03             	or     ebx,0x3
c0003b3a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b3e:	eb c9                	jmp    c0003b09 <create_name+0x12b>
c0003b40:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b44:	73 0b                	jae    c0003b51 <create_name+0x173>
c0003b46:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b4a:	75 47                	jne    c0003b93 <create_name+0x1b5>
c0003b4c:	e9 51 01 00 00       	jmp    c0003ca2 <create_name+0x2c4>
c0003b51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b56:	75 10                	jne    c0003b68 <create_name+0x18a>
c0003b58:	83 cb 03             	or     ebx,0x3
c0003b5b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b63:	e9 e9 00 00 00       	jmp    c0003c51 <create_name+0x273>
c0003b68:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b6c:	74 0d                	je     c0003b7b <create_name+0x19d>
c0003b6e:	83 cb 03             	or     ebx,0x3
c0003b71:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b75:	0f 87 d6 00 00 00    	ja     c0003c51 <create_name+0x273>
c0003b7b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b80:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b84:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b8c:	b9 08 00 00 00       	mov    ecx,0x8
c0003b91:	eb a7                	jmp    c0003b3a <create_name+0x15c>
c0003b93:	66 83 fd 7f          	cmp    bp,0x7f
c0003b97:	76 68                	jbe    c0003c01 <create_name+0x223>
c0003b99:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b9d:	88 da                	mov    dl,bl
c0003b9f:	83 ca 02             	or     edx,0x2
c0003ba2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003ba6:	50                   	push   eax
c0003ba7:	50                   	push   eax
c0003ba8:	68 b5 01 00 00       	push   0x1b5
c0003bad:	55                   	push   ebp
c0003bae:	e8 48 46 00 00       	call   c00081fb <ff_uni2oem>
c0003bb3:	83 c4 10             	add    esp,0x10
c0003bb6:	89 c5                	mov    ebp,eax
c0003bb8:	a8 80                	test   al,0x80
c0003bba:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bc2:	74 0c                	je     c0003bd0 <create_name+0x1f2>
c0003bc4:	83 e5 7f             	and    ebp,0x7f
c0003bc7:	0f b6 ad 60 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe08a0]
c0003bce:	eb 2a                	jmp    c0003bfa <create_name+0x21c>
c0003bd0:	66 3d ff 00          	cmp    ax,0xff
c0003bd4:	76 24                	jbe    c0003bfa <create_name+0x21c>
c0003bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bda:	48                   	dec    eax
c0003bdb:	39 c8                	cmp    eax,ecx
c0003bdd:	77 0c                	ja     c0003beb <create_name+0x20d>
c0003bdf:	83 cb 03             	or     ebx,0x3
c0003be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003be6:	e9 4f ff ff ff       	jmp    c0003b3a <create_name+0x15c>
c0003beb:	89 e8                	mov    eax,ebp
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 c1 e8 08          	shr    ax,0x8
c0003bf3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bf7:	41                   	inc    ecx
c0003bf8:	eb 4b                	jmp    c0003c45 <create_name+0x267>
c0003bfa:	88 d3                	mov    bl,dl
c0003bfc:	66 85 ed             	test   bp,bp
c0003bff:	74 19                	je     c0003c1a <create_name+0x23c>
c0003c01:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c05:	0f b7 d5             	movzx  edx,bp
c0003c08:	b8 1b f8 01 c0       	mov    eax,0xc001f81b
c0003c0d:	e8 4b de ff ff       	call   c0001a5d <chk_chr>
c0003c12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c16:	85 c0                	test   eax,eax
c0003c18:	74 0a                	je     c0003c24 <create_name+0x246>
c0003c1a:	83 cb 03             	or     ebx,0x3
c0003c1d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c22:	eb 21                	jmp    c0003c45 <create_name+0x267>
c0003c24:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c27:	66 83 f8 19          	cmp    ax,0x19
c0003c2b:	77 07                	ja     c0003c34 <create_name+0x256>
c0003c2d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c32:	eb 11                	jmp    c0003c45 <create_name+0x267>
c0003c34:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c37:	66 83 f8 19          	cmp    ax,0x19
c0003c3b:	77 08                	ja     c0003c45 <create_name+0x267>
c0003c3d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c42:	83 ed 20             	sub    ebp,0x20
c0003c45:	89 e8                	mov    eax,ebp
c0003c47:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c4b:	41                   	inc    ecx
c0003c4c:	e9 e9 fe ff ff       	jmp    c0003b3a <create_name+0x15c>
c0003c51:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c55:	75 04                	jne    c0003c5b <create_name+0x27d>
c0003c57:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c5b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c60:	75 05                	jne    c0003c67 <create_name+0x289>
c0003c62:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c6b:	83 e0 0c             	and    eax,0xc
c0003c6e:	3c 0c                	cmp    al,0xc
c0003c70:	74 0b                	je     c0003c7d <create_name+0x29f>
c0003c72:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c76:	83 e0 03             	and    eax,0x3
c0003c79:	3c 03                	cmp    al,0x3
c0003c7b:	75 05                	jne    c0003c82 <create_name+0x2a4>
c0003c7d:	83 cb 02             	or     ebx,0x2
c0003c80:	eb 19                	jmp    c0003c9b <create_name+0x2bd>
c0003c82:	f6 c3 02             	test   bl,0x2
c0003c85:	75 14                	jne    c0003c9b <create_name+0x2bd>
c0003c87:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c8c:	74 03                	je     c0003c91 <create_name+0x2b3>
c0003c8e:	83 cb 10             	or     ebx,0x10
c0003c91:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c96:	74 03                	je     c0003c9b <create_name+0x2bd>
c0003c98:	83 cb 08             	or     ebx,0x8
c0003c9b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c9e:	31 c0                	xor    eax,eax
c0003ca0:	eb 10                	jmp    c0003cb2 <create_name+0x2d4>
c0003ca2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003ca7:	0f 85 ce fe ff ff    	jne    c0003b7b <create_name+0x19d>
c0003cad:	e9 a6 fe ff ff       	jmp    c0003b58 <create_name+0x17a>
c0003cb2:	83 c4 3c             	add    esp,0x3c
c0003cb5:	5b                   	pop    ebx
c0003cb6:	5e                   	pop    esi
c0003cb7:	5f                   	pop    edi
c0003cb8:	5d                   	pop    ebp
c0003cb9:	c3                   	ret    

c0003cba <xname_sum>:
c0003cba:	56                   	push   esi
c0003cbb:	53                   	push   ebx
c0003cbc:	89 c6                	mov    esi,eax
c0003cbe:	51                   	push   ecx
c0003cbf:	31 db                	xor    ebx,ebx
c0003cc1:	83 c6 02             	add    esi,0x2
c0003cc4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cc8:	66 85 c0             	test   ax,ax
c0003ccb:	74 1f                	je     c0003cec <xname_sum+0x32>
c0003ccd:	83 ec 0c             	sub    esp,0xc
c0003cd0:	66 d1 cb             	ror    bx,1
c0003cd3:	50                   	push   eax
c0003cd4:	e8 1e 46 00 00       	call   c00082f7 <ff_wtoupper>
c0003cd9:	83 c4 10             	add    esp,0x10
c0003cdc:	0f b6 d0             	movzx  edx,al
c0003cdf:	66 c1 e8 08          	shr    ax,0x8
c0003ce3:	01 d3                	add    ebx,edx
c0003ce5:	66 d1 cb             	ror    bx,1
c0003ce8:	01 c3                	add    ebx,eax
c0003cea:	eb d5                	jmp    c0003cc1 <xname_sum+0x7>
c0003cec:	89 d8                	mov    eax,ebx
c0003cee:	5a                   	pop    edx
c0003cef:	5b                   	pop    ebx
c0003cf0:	5e                   	pop    esi
c0003cf1:	c3                   	ret    

c0003cf2 <create_xdir>:
c0003cf2:	55                   	push   ebp
c0003cf3:	b9 40 00 00 00       	mov    ecx,0x40
c0003cf8:	57                   	push   edi
c0003cf9:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfe:	56                   	push   esi
c0003cff:	31 ff                	xor    edi,edi
c0003d01:	53                   	push   ebx
c0003d02:	be 40 00 00 00       	mov    esi,0x40
c0003d07:	89 c3                	mov    ebx,eax
c0003d09:	83 ec 1c             	sub    esp,0x1c
c0003d0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d10:	31 d2                	xor    edx,edx
c0003d12:	e8 18 dd ff ff       	call   c0001a2f <mem_set>
c0003d17:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d1a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d1e:	31 c9                	xor    ecx,ecx
c0003d20:	8d 46 01             	lea    eax,[esi+0x1]
c0003d23:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d27:	83 c6 02             	add    esi,0x2
c0003d2a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d2e:	66 85 ed             	test   bp,bp
c0003d31:	74 12                	je     c0003d45 <create_xdir+0x53>
c0003d33:	0f b6 c1             	movzx  eax,cl
c0003d36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d3a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d3e:	66 83 fd 01          	cmp    bp,0x1
c0003d42:	80 d9 ff             	sbb    cl,0xff
c0003d45:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d48:	0f b7 d5             	movzx  edx,bp
c0003d4b:	83 c6 02             	add    esi,0x2
c0003d4e:	e8 ba dc ff ff       	call   c0001a0d <st_word>
c0003d53:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d59:	75 d3                	jne    c0003d2e <create_xdir+0x3c>
c0003d5b:	8d 47 01             	lea    eax,[edi+0x1]
c0003d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d66:	0f b6 c1             	movzx  eax,cl
c0003d69:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d6e:	74 07                	je     c0003d77 <create_xdir+0x85>
c0003d70:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d75:	eb a9                	jmp    c0003d20 <create_xdir+0x2e>
c0003d77:	8d 47 02             	lea    eax,[edi+0x2]
c0003d7a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d7d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d80:	89 d0                	mov    eax,edx
c0003d82:	e8 33 ff ff ff       	call   c0003cba <xname_sum>
c0003d87:	83 c4 1c             	add    esp,0x1c
c0003d8a:	0f b7 d0             	movzx  edx,ax
c0003d8d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d90:	5b                   	pop    ebx
c0003d91:	5e                   	pop    esi
c0003d92:	5f                   	pop    edi
c0003d93:	5d                   	pop    ebp
c0003d94:	e9 74 dc ff ff       	jmp    c0001a0d <st_word>

c0003d99 <cmp_lfn>:
c0003d99:	55                   	push   ebp
c0003d9a:	57                   	push   edi
c0003d9b:	89 d7                	mov    edi,edx
c0003d9d:	56                   	push   esi
c0003d9e:	53                   	push   ebx
c0003d9f:	83 ec 1c             	sub    esp,0x1c
c0003da2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003da9:	e8 ed db ff ff       	call   c000199b <ld_word>
c0003dae:	66 85 c0             	test   ax,ax
c0003db1:	74 07                	je     c0003dba <cmp_lfn+0x21>
c0003db3:	31 c0                	xor    eax,eax
c0003db5:	e9 9a 00 00 00       	jmp    c0003e54 <cmp_lfn+0xbb>
c0003dba:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003dbc:	bd 01 00 00 00       	mov    ebp,0x1
c0003dc1:	83 e3 3f             	and    ebx,0x3f
c0003dc4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dcc:	4b                   	dec    ebx
c0003dcd:	6b db 0d             	imul   ebx,ebx,0xd
c0003dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd4:	0f b6 80 e0 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0820]
c0003ddb:	01 f8                	add    eax,edi
c0003ddd:	e8 b9 db ff ff       	call   c000199b <ld_word>
c0003de2:	66 85 ed             	test   bp,bp
c0003de5:	89 c6                	mov    esi,eax
c0003de7:	74 3c                	je     c0003e25 <cmp_lfn+0x8c>
c0003de9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003def:	77 c2                	ja     c0003db3 <cmp_lfn+0x1a>
c0003df1:	83 ec 0c             	sub    esp,0xc
c0003df4:	0f b7 c0             	movzx  eax,ax
c0003df7:	50                   	push   eax
c0003df8:	e8 fa 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003dfd:	89 c5                	mov    ebp,eax
c0003dff:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e0a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e11:	e8 e1 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003e16:	83 c4 10             	add    esp,0x10
c0003e19:	39 c5                	cmp    ebp,eax
c0003e1b:	75 96                	jne    c0003db3 <cmp_lfn+0x1a>
c0003e1d:	89 f5                	mov    ebp,esi
c0003e1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e23:	eb 04                	jmp    c0003e29 <cmp_lfn+0x90>
c0003e25:	66 46                	inc    si
c0003e27:	75 8a                	jne    c0003db3 <cmp_lfn+0x1a>
c0003e29:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e2d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e32:	75 9c                	jne    c0003dd0 <cmp_lfn+0x37>
c0003e34:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e37:	74 16                	je     c0003e4f <cmp_lfn+0xb6>
c0003e39:	66 85 ed             	test   bp,bp
c0003e3c:	74 11                	je     c0003e4f <cmp_lfn+0xb6>
c0003e3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e42:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e47:	0f 94 c0             	sete   al
c0003e4a:	0f b6 c0             	movzx  eax,al
c0003e4d:	eb 05                	jmp    c0003e54 <cmp_lfn+0xbb>
c0003e4f:	b8 01 00 00 00       	mov    eax,0x1
c0003e54:	83 c4 1c             	add    esp,0x1c
c0003e57:	5b                   	pop    ebx
c0003e58:	5e                   	pop    esi
c0003e59:	5f                   	pop    edi
c0003e5a:	5d                   	pop    ebp
c0003e5b:	c3                   	ret    

c0003e5c <dir_find>:
c0003e5c:	55                   	push   ebp
c0003e5d:	31 d2                	xor    edx,edx
c0003e5f:	57                   	push   edi
c0003e60:	56                   	push   esi
c0003e61:	53                   	push   ebx
c0003e62:	89 c3                	mov    ebx,eax
c0003e64:	83 ec 1c             	sub    esp,0x1c
c0003e67:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e69:	e8 89 f0 ff ff       	call   c0002ef7 <dir_sdi>
c0003e6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e71:	85 c0                	test   eax,eax
c0003e73:	0f 85 9e 01 00 00    	jne    c0004017 <dir_find+0x1bb>
c0003e79:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e7c:	0f 85 8d 00 00 00    	jne    c0003f0f <dir_find+0xb3>
c0003e82:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e85:	e8 30 fe ff ff       	call   c0003cba <xname_sum>
c0003e8a:	89 c7                	mov    edi,eax
c0003e8c:	31 d2                	xor    edx,edx
c0003e8e:	89 d8                	mov    eax,ebx
c0003e90:	e8 72 f8 ff ff       	call   c0003707 <dir_read>
c0003e95:	85 c0                	test   eax,eax
c0003e97:	0f 85 5e 01 00 00    	jne    c0003ffb <dir_find+0x19f>
c0003e9d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003ea0:	8d 41 24             	lea    eax,[ecx+0x24]
c0003ea3:	e8 f3 da ff ff       	call   c000199b <ld_word>
c0003ea8:	66 39 f8             	cmp    ax,di
c0003eab:	75 df                	jne    c0003e8c <dir_find+0x30>
c0003ead:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003eb0:	31 ed                	xor    ebp,ebp
c0003eb2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003eb6:	ba 40 00 00 00       	mov    edx,0x40
c0003ebb:	89 e9                	mov    ecx,ebp
c0003ebd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ec1:	0f 84 42 01 00 00    	je     c0004009 <dir_find+0x1ad>
c0003ec7:	f6 c2 1f             	test   dl,0x1f
c0003eca:	75 03                	jne    c0003ecf <dir_find+0x73>
c0003ecc:	83 c2 02             	add    edx,0x2
c0003ecf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ed3:	89 d0                	mov    eax,edx
c0003ed5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ed8:	e8 be da ff ff       	call   c000199b <ld_word>
c0003edd:	83 ec 0c             	sub    esp,0xc
c0003ee0:	0f b7 c0             	movzx  eax,ax
c0003ee3:	50                   	push   eax
c0003ee4:	e8 0e 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003ee9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003eed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ef0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef7:	e8 fb 43 00 00       	call   c00082f7 <ff_wtoupper>
c0003efc:	83 c4 10             	add    esp,0x10
c0003eff:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f03:	75 87                	jne    c0003e8c <dir_find+0x30>
c0003f05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f09:	45                   	inc    ebp
c0003f0a:	83 c2 02             	add    edx,0x2
c0003f0d:	eb ac                	jmp    c0003ebb <dir_find+0x5f>
c0003f0f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f16:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f1b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f20:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f23:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f26:	89 f0                	mov    eax,esi
c0003f28:	e8 4c e2 ff ff       	call   c0002179 <move_window>
c0003f2d:	85 c0                	test   eax,eax
c0003f2f:	0f 85 c6 00 00 00    	jne    c0003ffb <dir_find+0x19f>
c0003f35:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f38:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f3b:	84 c9                	test   cl,cl
c0003f3d:	0f 84 bd 00 00 00    	je     c0004000 <dir_find+0x1a4>
c0003f43:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f46:	88 d0                	mov    al,dl
c0003f48:	83 e0 3f             	and    eax,0x3f
c0003f4b:	80 f9 e5             	cmp    cl,0xe5
c0003f4e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f51:	0f 84 87 00 00 00    	je     c0003fde <dir_find+0x182>
c0003f57:	80 e2 08             	and    dl,0x8
c0003f5a:	74 06                	je     c0003f62 <dir_find+0x106>
c0003f5c:	3c 0f                	cmp    al,0xf
c0003f5e:	75 7e                	jne    c0003fde <dir_find+0x182>
c0003f60:	eb 04                	jmp    c0003f66 <dir_find+0x10a>
c0003f62:	3c 0f                	cmp    al,0xf
c0003f64:	75 4c                	jne    c0003fb2 <dir_find+0x156>
c0003f66:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f6a:	75 7e                	jne    c0003fea <dir_find+0x18e>
c0003f6c:	f6 c1 40             	test   cl,0x40
c0003f6f:	74 12                	je     c0003f83 <dir_find+0x127>
c0003f71:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f74:	83 e1 bf             	and    ecx,0xffffffbf
c0003f77:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f7b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f7e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f81:	eb 06                	jmp    c0003f89 <dir_find+0x12d>
c0003f83:	89 f8                	mov    eax,edi
c0003f85:	38 c8                	cmp    al,cl
c0003f87:	75 5c                	jne    c0003fe5 <dir_find+0x189>
c0003f89:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f8d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f92:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f95:	75 53                	jne    c0003fea <dir_find+0x18e>
c0003f97:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f9b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	e8 f4 fd ff ff       	call   c0003d99 <cmp_lfn>
c0003fa5:	85 c0                	test   eax,eax
c0003fa7:	74 41                	je     c0003fea <dir_find+0x18e>
c0003fa9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fad:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fb0:	eb 38                	jmp    c0003fea <dir_find+0x18e>
c0003fb2:	89 f8                	mov    eax,edi
c0003fb4:	84 c0                	test   al,al
c0003fb6:	75 0d                	jne    c0003fc5 <dir_find+0x169>
c0003fb8:	89 e8                	mov    eax,ebp
c0003fba:	e8 98 de ff ff       	call   c0001e57 <sum_sfn>
c0003fbf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fc3:	74 52                	je     c0004017 <dir_find+0x1bb>
c0003fc5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fc9:	75 13                	jne    c0003fde <dir_find+0x182>
c0003fcb:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fce:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fd3:	89 e8                	mov    eax,ebp
c0003fd5:	e8 60 da ff ff       	call   c0001a3a <mem_cmp>
c0003fda:	85 c0                	test   eax,eax
c0003fdc:	74 39                	je     c0004017 <dir_find+0x1bb>
c0003fde:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fe5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fea:	31 d2                	xor    edx,edx
c0003fec:	89 d8                	mov    eax,ebx
c0003fee:	e8 5c f4 ff ff       	call   c000344f <dir_next>
c0003ff3:	85 c0                	test   eax,eax
c0003ff5:	0f 84 25 ff ff ff    	je     c0003f20 <dir_find+0xc4>
c0003ffb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ffe:	eb 17                	jmp    c0004017 <dir_find+0x1bb>
c0004000:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004007:	eb 0e                	jmp    c0004017 <dir_find+0x1bb>
c0004009:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000400c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004011:	0f 85 75 fe ff ff    	jne    c0003e8c <dir_find+0x30>
c0004017:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000401a:	83 c4 1c             	add    esp,0x1c
c000401d:	5b                   	pop    ebx
c000401e:	5e                   	pop    esi
c000401f:	5f                   	pop    edi
c0004020:	5d                   	pop    ebp
c0004021:	c3                   	ret    

c0004022 <dir_register>:
c0004022:	55                   	push   ebp
c0004023:	57                   	push   edi
c0004024:	56                   	push   esi
c0004025:	be 06 00 00 00       	mov    esi,0x6
c000402a:	53                   	push   ebx
c000402b:	83 ec 6c             	sub    esp,0x6c
c000402e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004032:	0f 85 62 02 00 00    	jne    c000429a <dir_register+0x278>
c0004038:	8b 28                	mov    ebp,DWORD PTR [eax]
c000403a:	31 ff                	xor    edi,edi
c000403c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000403f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004044:	74 03                	je     c0004049 <dir_register+0x27>
c0004046:	47                   	inc    edi
c0004047:	eb f6                	jmp    c000403f <dir_register+0x1d>
c0004049:	89 c3                	mov    ebx,eax
c000404b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000404f:	0f 85 e1 00 00 00    	jne    c0004136 <dir_register+0x114>
c0004055:	83 c7 0e             	add    edi,0xe
c0004058:	b9 0f 00 00 00       	mov    ecx,0xf
c000405d:	89 f8                	mov    eax,edi
c000405f:	31 d2                	xor    edx,edx
c0004061:	f7 f1                	div    ecx
c0004063:	8d 50 02             	lea    edx,[eax+0x2]
c0004066:	89 c7                	mov    edi,eax
c0004068:	89 d8                	mov    eax,ebx
c000406a:	e8 12 f8 ff ff       	call   c0003881 <dir_alloc>
c000406f:	89 c6                	mov    esi,eax
c0004071:	85 c0                	test   eax,eax
c0004073:	0f 85 21 02 00 00    	jne    c000429a <dir_register+0x278>
c0004079:	81 c7 01 00 00 08    	add    edi,0x8000001
c000407f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004082:	c1 e7 05             	shl    edi,0x5
c0004085:	29 f8                	sub    eax,edi
c0004087:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000408a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000408d:	a8 04                	test   al,0x4
c000408f:	0f 84 91 00 00 00    	je     c0004126 <dir_register+0x104>
c0004095:	83 e0 fb             	and    eax,0xfffffffb
c0004098:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 25 ec ff ff       	call   c0002cc7 <fill_first_frag>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 85 ee 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040aa:	83 c9 ff             	or     ecx,0xffffffff
c00040ad:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040b0:	89 d8                	mov    eax,ebx
c00040b2:	e8 db eb ff ff       	call   c0002c92 <fill_last_frag>
c00040b7:	85 c0                	test   eax,eax
c00040b9:	0f 85 d9 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040c3:	74 61                	je     c0004126 <dir_register+0x104>
c00040c5:	89 da                	mov    edx,ebx
c00040c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040cb:	e8 ea f5 ff ff       	call   c00036ba <load_obj_xdir>
c00040d0:	85 c0                	test   eax,eax
c00040d2:	0f 85 c0 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040d8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040dc:	31 c9                	xor    ecx,ecx
c00040de:	c1 e2 09             	shl    edx,0x9
c00040e1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040e4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040e7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ea:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040f0:	83 c0 38             	add    eax,0x38
c00040f3:	e8 1c d9 ff ff       	call   c0001a14 <st_qword>
c00040f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040fe:	83 c0 28             	add    eax,0x28
c0004101:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004104:	e8 0b d9 ff ff       	call   c0001a14 <st_qword>
c0004109:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000410c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000410f:	83 c8 01             	or     eax,0x1
c0004112:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004115:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004119:	e8 db f7 ff ff       	call   c00038f9 <store_xdir>
c000411e:	85 c0                	test   eax,eax
c0004120:	0f 85 72 01 00 00    	jne    c0004298 <dir_register+0x276>
c0004126:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004129:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000412c:	e8 c1 fb ff ff       	call   c0003cf2 <create_xdir>
c0004131:	e9 64 01 00 00       	jmp    c000429a <dir_register+0x278>
c0004136:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004139:	b9 0c 00 00 00       	mov    ecx,0xc
c000413e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004142:	89 c2                	mov    edx,eax
c0004144:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004148:	e8 cd d8 ff ff       	call   c0001a1a <mem_cpy>
c000414d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004152:	74 58                	je     c00041ac <dir_register+0x18a>
c0004154:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004158:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004160:	83 ec 0c             	sub    esp,0xc
c0004163:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000416a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000416e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004172:	e8 24 dc ff ff       	call   c0001d9b <gen_numname>
c0004177:	89 d8                	mov    eax,ebx
c0004179:	e8 de fc ff ff       	call   c0003e5c <dir_find>
c000417e:	83 c4 10             	add    esp,0x10
c0004181:	89 c6                	mov    esi,eax
c0004183:	85 c0                	test   eax,eax
c0004185:	75 15                	jne    c000419c <dir_register+0x17a>
c0004187:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000418b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004190:	75 ce                	jne    c0004160 <dir_register+0x13e>
c0004192:	be 07 00 00 00       	mov    esi,0x7
c0004197:	e9 fe 00 00 00       	jmp    c000429a <dir_register+0x278>
c000419c:	83 f8 04             	cmp    eax,0x4
c000419f:	0f 85 f5 00 00 00    	jne    c000429a <dir_register+0x278>
c00041a5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00041a9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00041ac:	b9 01 00 00 00       	mov    ecx,0x1
c00041b1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041b6:	74 0f                	je     c00041c7 <dir_register+0x1a5>
c00041b8:	b9 0d 00 00 00       	mov    ecx,0xd
c00041bd:	8d 47 0c             	lea    eax,[edi+0xc]
c00041c0:	31 d2                	xor    edx,edx
c00041c2:	f7 f1                	div    ecx
c00041c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00041c7:	89 ca                	mov    edx,ecx
c00041c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cd:	89 d8                	mov    eax,ebx
c00041cf:	e8 ad f6 ff ff       	call   c0003881 <dir_alloc>
c00041d4:	89 c6                	mov    esi,eax
c00041d6:	85 c0                	test   eax,eax
c00041d8:	0f 85 bc 00 00 00    	jne    c000429a <dir_register+0x278>
c00041de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041e2:	49                   	dec    ecx
c00041e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041e7:	74 6a                	je     c0004253 <dir_register+0x231>
c00041e9:	89 c8                	mov    eax,ecx
c00041eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041ee:	c1 e0 05             	shl    eax,0x5
c00041f1:	29 c2                	sub    edx,eax
c00041f3:	89 d8                	mov    eax,ebx
c00041f5:	e8 fd ec ff ff       	call   c0002ef7 <dir_sdi>
c00041fa:	89 c6                	mov    esi,eax
c00041fc:	85 c0                	test   eax,eax
c00041fe:	0f 85 96 00 00 00    	jne    c000429a <dir_register+0x278>
c0004204:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004208:	e8 4a dc ff ff       	call   c0001e57 <sum_sfn>
c000420d:	0f b6 f8             	movzx  edi,al
c0004210:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004213:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004216:	89 e8                	mov    eax,ebp
c0004218:	e8 5c df ff ff       	call   c0002179 <move_window>
c000421d:	89 c6                	mov    esi,eax
c000421f:	85 c0                	test   eax,eax
c0004221:	75 77                	jne    c000429a <dir_register+0x278>
c0004223:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004228:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000422b:	83 ec 0c             	sub    esp,0xc
c000422e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004231:	57                   	push   edi
c0004232:	e8 e0 da ff ff       	call   c0001d17 <put_lfn>
c0004237:	31 d2                	xor    edx,edx
c0004239:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000423d:	89 d8                	mov    eax,ebx
c000423f:	e8 0b f2 ff ff       	call   c000344f <dir_next>
c0004244:	83 c4 10             	add    esp,0x10
c0004247:	89 c6                	mov    esi,eax
c0004249:	85 c0                	test   eax,eax
c000424b:	75 4d                	jne    c000429a <dir_register+0x278>
c000424d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004251:	75 bd                	jne    c0004210 <dir_register+0x1ee>
c0004253:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004256:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004259:	89 e8                	mov    eax,ebp
c000425b:	e8 19 df ff ff       	call   c0002179 <move_window>
c0004260:	89 c6                	mov    esi,eax
c0004262:	85 c0                	test   eax,eax
c0004264:	75 34                	jne    c000429a <dir_register+0x278>
c0004266:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004269:	b9 20 00 00 00       	mov    ecx,0x20
c000426e:	31 d2                	xor    edx,edx
c0004270:	e8 ba d7 ff ff       	call   c0001a2f <mem_set>
c0004275:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000427c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004281:	e8 94 d7 ff ff       	call   c0001a1a <mem_cpy>
c0004286:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004289:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000428c:	83 e0 18             	and    eax,0x18
c000428f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004292:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004296:	eb 02                	jmp    c000429a <dir_register+0x278>
c0004298:	89 c6                	mov    esi,eax
c000429a:	83 c4 6c             	add    esp,0x6c
c000429d:	89 f0                	mov    eax,esi
c000429f:	5b                   	pop    ebx
c00042a0:	5e                   	pop    esi
c00042a1:	5f                   	pop    edi
c00042a2:	5d                   	pop    ebp
c00042a3:	c3                   	ret    

c00042a4 <sync_fs>:
c00042a4:	56                   	push   esi
c00042a5:	53                   	push   ebx
c00042a6:	53                   	push   ebx
c00042a7:	89 c3                	mov    ebx,eax
c00042a9:	e8 37 de ff ff       	call   c00020e5 <sync_window>
c00042ae:	85 c0                	test   eax,eax
c00042b0:	0f 85 b1 00 00 00    	jne    c0004367 <sync_fs+0xc3>
c00042b6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042b9:	0f 85 8e 00 00 00    	jne    c000434d <sync_fs+0xa9>
c00042bf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042c3:	0f 85 84 00 00 00    	jne    c000434d <sync_fs+0xa9>
c00042c9:	b9 00 02 00 00       	mov    ecx,0x200
c00042ce:	8d 73 54             	lea    esi,[ebx+0x54]
c00042d1:	31 d2                	xor    edx,edx
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 55 d7 ff ff       	call   c0001a2f <mem_set>
c00042da:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042e5:	e8 23 d7 ff ff       	call   c0001a0d <st_word>
c00042ea:	ba 52 52 61 41       	mov    edx,0x41615252
c00042ef:	89 f0                	mov    eax,esi
c00042f1:	e8 1b d7 ff ff       	call   c0001a11 <st_dword>
c00042f6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042fc:	ba 72 72 41 61       	mov    edx,0x61417272
c0004301:	e8 0b d7 ff ff       	call   c0001a11 <st_dword>
c0004306:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004309:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000430f:	e8 fd d6 ff ff       	call   c0001a11 <st_dword>
c0004314:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004317:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000431d:	e8 ef d6 ff ff       	call   c0001a11 <st_dword>
c0004322:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004325:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004328:	83 c0 01             	add    eax,0x1
c000432b:	83 d2 00             	adc    edx,0x0
c000432e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004331:	83 ec 0c             	sub    esp,0xc
c0004334:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004337:	6a 01                	push   0x1
c0004339:	52                   	push   edx
c000433a:	50                   	push   eax
c000433b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000433f:	56                   	push   esi
c0004340:	50                   	push   eax
c0004341:	e8 20 d6 ff ff       	call   c0001966 <disk_write>
c0004346:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000434a:	83 c4 20             	add    esp,0x20
c000434d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004351:	51                   	push   ecx
c0004352:	6a 00                	push   0x0
c0004354:	6a 00                	push   0x0
c0004356:	50                   	push   eax
c0004357:	e8 20 d6 ff ff       	call   c000197c <disk_ioctl>
c000435c:	83 c4 10             	add    esp,0x10
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 95 c0             	setne  al
c0004364:	0f b6 c0             	movzx  eax,al
c0004367:	5a                   	pop    edx
c0004368:	5b                   	pop    ebx
c0004369:	5e                   	pop    esi
c000436a:	c3                   	ret    

c000436b <create_partition>:
c000436b:	55                   	push   ebp
c000436c:	0f b6 c0             	movzx  eax,al
c000436f:	57                   	push   edi
c0004370:	56                   	push   esi
c0004371:	53                   	push   ebx
c0004372:	83 ec 60             	sub    esp,0x60
c0004375:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004379:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000437d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004381:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004385:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004389:	50                   	push   eax
c000438a:	6a 01                	push   0x1
c000438c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004390:	e8 e7 d5 ff ff       	call   c000197c <disk_ioctl>
c0004395:	83 c4 10             	add    esp,0x10
c0004398:	85 c0                	test   eax,eax
c000439a:	74 0a                	je     c00043a6 <create_partition+0x3b>
c000439c:	b8 01 00 00 00       	mov    eax,0x1
c00043a1:	e9 67 05 00 00       	jmp    c000490d <create_partition+0x5a2>
c00043a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00043aa:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043bb:	0f 86 ed 03 00 00    	jbe    c00047ae <create_partition+0x443>
c00043c1:	83 c0 df             	add    eax,0xffffffdf
c00043c4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043cc:	83 d2 ff             	adc    edx,0xffffffff
c00043cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043df:	83 c0 bd             	add    eax,0xffffffbd
c00043e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043e9:	83 d2 ff             	adc    edx,0xffffffff
c00043ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043fc:	be 22 00 00 00       	mov    esi,0x22
c0004401:	31 ff                	xor    edi,edi
c0004403:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000440b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004413:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000441b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000441f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004425:	75 0e                	jne    c0004435 <create_partition+0xca>
c0004427:	b9 00 02 00 00       	mov    ecx,0x200
c000442c:	31 d2                	xor    edx,edx
c000442e:	89 d8                	mov    eax,ebx
c0004430:	e8 fa d5 ff ff       	call   c0001a2f <mem_set>
c0004435:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004439:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000443d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004441:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004444:	0f 84 23 01 00 00    	je     c000456d <create_partition+0x202>
c000444a:	89 f0                	mov    eax,esi
c000444c:	89 fa                	mov    edx,edi
c000444e:	05 ff 07 00 00       	add    eax,0x7ff
c0004453:	83 d2 00             	adc    edx,0x0
c0004456:	89 c1                	mov    ecx,eax
c0004458:	89 d7                	mov    edi,edx
c000445a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004460:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004464:	89 ce                	mov    esi,ecx
c0004466:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000446a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000446e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004472:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004475:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004479:	89 04 24             	mov    DWORD PTR [esp],eax
c000447c:	b8 64 00 00 00       	mov    eax,0x64
c0004481:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004484:	b8 00 00 00 00       	mov    eax,0x0
c0004489:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000448d:	72 41                	jb     c00044d0 <create_partition+0x165>
c000448f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004497:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000449b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00044a0:	01 c1                	add    ecx,eax
c00044a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00044a6:	f7 24 24             	mul    DWORD PTR [esp]
c00044a9:	6a 00                	push   0x0
c00044ab:	01 ca                	add    edx,ecx
c00044ad:	6a 64                	push   0x64
c00044af:	52                   	push   edx
c00044b0:	50                   	push   eax
c00044b1:	e8 f6 a2 01 00       	call   c001e7ac <__udivdi3>
c00044b6:	83 c4 10             	add    esp,0x10
c00044b9:	05 ff 07 00 00       	add    eax,0x7ff
c00044be:	83 d2 00             	adc    edx,0x0
c00044c1:	89 c1                	mov    ecx,eax
c00044c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044c7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044cd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044d7:	01 f0                	add    eax,esi
c00044d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044dd:	11 fa                	adc    edx,edi
c00044df:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044e3:	19 d1                	sbb    ecx,edx
c00044e5:	73 2e                	jae    c0004515 <create_partition+0x1aa>
c00044e7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044eb:	89 f8                	mov    eax,edi
c00044ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044f4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044f8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004500:	73 6b                	jae    c000456d <create_partition+0x202>
c0004502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000450a:	29 f0                	sub    eax,esi
c000450c:	19 fa                	sbb    edx,edi
c000450e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004511:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004515:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004519:	0b 04 24             	or     eax,DWORD PTR [esp]
c000451c:	74 4f                	je     c000456d <create_partition+0x202>
c000451e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004521:	b9 10 00 00 00       	mov    ecx,0x10
c0004526:	ba f0 f7 01 c0       	mov    edx,0xc001f7f0
c000452b:	e8 ea d4 ff ff       	call   c0001a1a <mem_cpy>
c0004530:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004534:	b9 10 00 00 00       	mov    ecx,0x10
c0004539:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000453d:	e8 2c db ff ff       	call   c000206e <make_rand>
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000454a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000454e:	e8 c1 d4 ff ff       	call   c0001a14 <st_qword>
c0004553:	03 34 24             	add    esi,DWORD PTR [esp]
c0004556:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000455a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000455e:	89 f2                	mov    edx,esi
c0004560:	89 f9                	mov    ecx,edi
c0004562:	83 c2 ff             	add    edx,0xffffffff
c0004565:	83 d1 ff             	adc    ecx,0xffffffff
c0004568:	e8 a7 d4 ff ff       	call   c0001a14 <st_qword>
c000456d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004571:	83 e8 80             	sub    eax,0xffffff80
c0004574:	89 c5                	mov    ebp,eax
c0004576:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000457a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004580:	75 6b                	jne    c00045ed <create_partition+0x282>
c0004582:	45                   	inc    ebp
c0004583:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004587:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000458c:	e8 39 da ff ff       	call   c0001fca <crc32>
c0004591:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004597:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000459b:	75 e5                	jne    c0004582 <create_partition+0x217>
c000459d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045a1:	31 d2                	xor    edx,edx
c00045a3:	83 ec 0c             	sub    esp,0xc
c00045a6:	c1 ed 09             	shr    ebp,0x9
c00045a9:	6a 01                	push   0x1
c00045ab:	8d 45 02             	lea    eax,[ebp+0x2]
c00045ae:	52                   	push   edx
c00045af:	50                   	push   eax
c00045b0:	53                   	push   ebx
c00045b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045b5:	e8 ac d3 ff ff       	call   c0001966 <disk_write>
c00045ba:	83 c4 20             	add    esp,0x20
c00045bd:	85 c0                	test   eax,eax
c00045bf:	0f 85 d7 fd ff ff    	jne    c000439c <create_partition+0x31>
c00045c5:	83 ec 0c             	sub    esp,0xc
c00045c8:	31 d2                	xor    edx,edx
c00045ca:	6a 01                	push   0x1
c00045cc:	89 e8                	mov    eax,ebp
c00045ce:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045d2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045d6:	52                   	push   edx
c00045d7:	50                   	push   eax
c00045d8:	53                   	push   ebx
c00045d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045dd:	e8 84 d3 ff ff       	call   c0001966 <disk_write>
c00045e2:	83 c4 20             	add    esp,0x20
c00045e5:	85 c0                	test   eax,eax
c00045e7:	0f 85 af fd ff ff    	jne    c000439c <create_partition+0x31>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045f5:	3d 00 40 00 00       	cmp    eax,0x4000
c00045fa:	74 0d                	je     c0004609 <create_partition+0x29e>
c00045fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004600:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004604:	e9 12 fe ff ff       	jmp    c000441b <create_partition+0xb0>
c0004609:	31 d2                	xor    edx,edx
c000460b:	b9 00 02 00 00       	mov    ecx,0x200
c0004610:	89 d8                	mov    eax,ebx
c0004612:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004615:	e8 15 d4 ff ff       	call   c0001a2f <mem_set>
c000461a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000461d:	b9 10 00 00 00       	mov    ecx,0x10
c0004622:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0004627:	89 d8                	mov    eax,ebx
c0004629:	e8 ec d3 ff ff       	call   c0001a1a <mem_cpy>
c000462e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004632:	8d 43 58             	lea    eax,[ebx+0x58]
c0004635:	f7 d2                	not    edx
c0004637:	e8 d5 d3 ff ff       	call   c0001a11 <st_dword>
c000463c:	8d 43 18             	lea    eax,[ebx+0x18]
c000463f:	31 c9                	xor    ecx,ecx
c0004641:	89 04 24             	mov    DWORD PTR [esp],eax
c0004644:	ba 01 00 00 00       	mov    edx,0x1
c0004649:	e8 c6 d3 ff ff       	call   c0001a14 <st_qword>
c000464e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004652:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004656:	83 c2 ff             	add    edx,0xffffffff
c0004659:	89 e8                	mov    eax,ebp
c000465b:	83 d1 ff             	adc    ecx,0xffffffff
c000465e:	e8 b1 d3 ff ff       	call   c0001a14 <st_qword>
c0004663:	31 c9                	xor    ecx,ecx
c0004665:	8d 43 28             	lea    eax,[ebx+0x28]
c0004668:	ba 22 00 00 00       	mov    edx,0x22
c000466d:	e8 a2 d3 ff ff       	call   c0001a14 <st_qword>
c0004672:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004676:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000467a:	83 c2 de             	add    edx,0xffffffde
c000467d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004680:	83 d1 ff             	adc    ecx,0xffffffff
c0004683:	31 f6                	xor    esi,esi
c0004685:	e8 8a d3 ff ff       	call   c0001a14 <st_qword>
c000468a:	8d 43 54             	lea    eax,[ebx+0x54]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 7a d3 ff ff       	call   c0001a11 <st_dword>
c0004697:	8d 43 50             	lea    eax,[ebx+0x50]
c000469a:	ba 80 00 00 00       	mov    edx,0x80
c000469f:	e8 6d d3 ff ff       	call   c0001a11 <st_dword>
c00046a4:	ba 02 00 00 00       	mov    edx,0x2
c00046a9:	89 f8                	mov    eax,edi
c00046ab:	e8 61 d3 ff ff       	call   c0001a11 <st_dword>
c00046b0:	8d 53 38             	lea    edx,[ebx+0x38]
c00046b3:	b9 10 00 00 00       	mov    ecx,0x10
c00046b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046bc:	e8 ad d9 ff ff       	call   c000206e <make_rand>
c00046c1:	83 c8 ff             	or     eax,0xffffffff
c00046c4:	46                   	inc    esi
c00046c5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ca:	e8 fb d8 ff ff       	call   c0001fca <crc32>
c00046cf:	83 fe 5c             	cmp    esi,0x5c
c00046d2:	75 f0                	jne    c00046c4 <create_partition+0x359>
c00046d4:	f7 d0                	not    eax
c00046d6:	8d 73 10             	lea    esi,[ebx+0x10]
c00046d9:	89 c2                	mov    edx,eax
c00046db:	89 f0                	mov    eax,esi
c00046dd:	e8 2f d3 ff ff       	call   c0001a11 <st_dword>
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	6a 01                	push   0x1
c00046e7:	6a 00                	push   0x0
c00046e9:	6a 01                	push   0x1
c00046eb:	53                   	push   ebx
c00046ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046f0:	e8 71 d2 ff ff       	call   c0001966 <disk_write>
c00046f5:	83 c4 20             	add    esp,0x20
c00046f8:	85 c0                	test   eax,eax
c00046fa:	0f 85 9c fc ff ff    	jne    c000439c <create_partition+0x31>
c0004700:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004704:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004708:	83 c2 ff             	add    edx,0xffffffff
c000470b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000470e:	83 d1 ff             	adc    ecx,0xffffffff
c0004711:	e8 fe d2 ff ff       	call   c0001a14 <st_qword>
c0004716:	ba 01 00 00 00       	mov    edx,0x1
c000471b:	31 c9                	xor    ecx,ecx
c000471d:	89 e8                	mov    eax,ebp
c000471f:	e8 f0 d2 ff ff       	call   c0001a14 <st_qword>
c0004724:	89 f8                	mov    eax,edi
c0004726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000472a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000472e:	31 ff                	xor    edi,edi
c0004730:	e8 df d2 ff ff       	call   c0001a14 <st_qword>
c0004735:	89 f0                	mov    eax,esi
c0004737:	31 d2                	xor    edx,edx
c0004739:	e8 d3 d2 ff ff       	call   c0001a11 <st_dword>
c000473e:	83 c8 ff             	or     eax,0xffffffff
c0004741:	47                   	inc    edi
c0004742:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004747:	e8 7e d8 ff ff       	call   c0001fca <crc32>
c000474c:	83 ff 5c             	cmp    edi,0x5c
c000474f:	75 f0                	jne    c0004741 <create_partition+0x3d6>
c0004751:	f7 d0                	not    eax
c0004753:	89 c2                	mov    edx,eax
c0004755:	89 f0                	mov    eax,esi
c0004757:	e8 b5 d2 ff ff       	call   c0001a11 <st_dword>
c000475c:	83 ec 0c             	sub    esp,0xc
c000475f:	6a 01                	push   0x1
c0004761:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004765:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004769:	83 c0 ff             	add    eax,0xffffffff
c000476c:	83 d2 ff             	adc    edx,0xffffffff
c000476f:	52                   	push   edx
c0004770:	50                   	push   eax
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 eb d1 ff ff       	call   c0001966 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 16 fc ff ff    	jne    c000439c <create_partition+0x31>
c0004786:	31 d2                	xor    edx,edx
c0004788:	89 d8                	mov    eax,ebx
c000478a:	b9 00 02 00 00       	mov    ecx,0x200
c000478f:	e8 9b d2 ff ff       	call   c0001a2f <mem_set>
c0004794:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000479a:	b9 10 00 00 00       	mov    ecx,0x10
c000479f:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c00047a4:	e8 71 d2 ff ff       	call   c0001a1a <mem_cpy>
c00047a9:	e9 21 01 00 00       	jmp    c00048cf <create_partition+0x564>
c00047ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047b2:	b9 05 00 00 00       	mov    ecx,0x5
c00047b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ba:	bf 08 00 00 00       	mov    edi,0x8
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	0f b6 f0             	movzx  esi,al
c00047c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c9:	f7 f6                	div    esi
c00047cb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047d0:	76 0a                	jbe    c00047dc <create_partition+0x471>
c00047d2:	d1 e7                	shl    edi,1
c00047d4:	49                   	dec    ecx
c00047d5:	75 e8                	jne    c00047bf <create_partition+0x454>
c00047d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047dc:	b9 00 02 00 00       	mov    ecx,0x200
c00047e1:	31 d2                	xor    edx,edx
c00047e3:	89 d8                	mov    eax,ebx
c00047e5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047eb:	e8 3f d2 ff ff       	call   c0001a2f <mem_set>
c00047f0:	b9 64 00 00 00       	mov    ecx,0x64
c00047f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047f8:	31 d2                	xor    edx,edx
c00047fa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004802:	f7 f1                	div    ecx
c0004804:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004809:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000480d:	89 f8                	mov    eax,edi
c000480f:	0f b6 c0             	movzx  eax,al
c0004812:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004816:	e9 80 00 00 00       	jmp    c000489b <create_partition+0x530>
c000481b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000481e:	29 cf                	sub    edi,ecx
c0004820:	89 ca                	mov    edx,ecx
c0004822:	89 f0                	mov    eax,esi
c0004824:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004829:	e8 e3 d1 ff ff       	call   c0001a11 <st_dword>
c000482e:	8d 46 04             	lea    eax,[esi+0x4]
c0004831:	89 fa                	mov    edx,edi
c0004833:	83 c6 10             	add    esi,0x10
c0004836:	e8 d6 d1 ff ff       	call   c0001a11 <st_dword>
c000483b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000483f:	31 d2                	xor    edx,edx
c0004841:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004844:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004848:	89 c8                	mov    eax,ecx
c000484a:	01 f9                	add    ecx,edi
c000484c:	f7 f5                	div    ebp
c000484e:	89 d5                	mov    ebp,edx
c0004850:	31 d2                	xor    edx,edx
c0004852:	45                   	inc    ebp
c0004853:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004857:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000485a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000485d:	89 c2                	mov    edx,eax
c000485f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004862:	c1 ea 02             	shr    edx,0x2
c0004865:	83 e2 c0             	and    edx,0xffffffc0
c0004868:	09 ea                	or     edx,ebp
c000486a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000486f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004872:	31 d2                	xor    edx,edx
c0004874:	f7 f5                	div    ebp
c0004876:	89 d7                	mov    edi,edx
c0004878:	31 d2                	xor    edx,edx
c000487a:	47                   	inc    edi
c000487b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000487f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004882:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004885:	89 c5                	mov    ebp,eax
c0004887:	c1 ed 02             	shr    ebp,0x2
c000488a:	83 e5 c0             	and    ebp,0xffffffc0
c000488d:	09 ef                	or     edi,ebp
c000488f:	89 fa                	mov    edx,edi
c0004891:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004894:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004899:	74 34                	je     c00048cf <create_partition+0x564>
c000489b:	85 c9                	test   ecx,ecx
c000489d:	74 30                	je     c00048cf <create_partition+0x564>
c000489f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00048a2:	76 2b                	jbe    c00048cf <create_partition+0x564>
c00048a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00048ac:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048af:	83 ff 64             	cmp    edi,0x64
c00048b2:	76 4b                	jbe    c00048ff <create_partition+0x594>
c00048b4:	89 f8                	mov    eax,edi
c00048b6:	01 c8                	add    eax,ecx
c00048b8:	0f 82 5d ff ff ff    	jb     c000481b <create_partition+0x4b0>
c00048be:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048c1:	0f 87 54 ff ff ff    	ja     c000481b <create_partition+0x4b0>
c00048c7:	85 ff                	test   edi,edi
c00048c9:	0f 85 51 ff ff ff    	jne    c0004820 <create_partition+0x4b5>
c00048cf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048d5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048da:	e8 2e d1 ff ff       	call   c0001a0d <st_word>
c00048df:	83 ec 0c             	sub    esp,0xc
c00048e2:	6a 01                	push   0x1
c00048e4:	6a 00                	push   0x0
c00048e6:	6a 00                	push   0x0
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 74 d0 ff ff       	call   c0001966 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 95 c0             	setne  al
c00048fa:	0f b6 c0             	movzx  eax,al
c00048fd:	eb 0e                	jmp    c000490d <create_partition+0x5a2>
c00048ff:	74 07                	je     c0004908 <create_partition+0x59d>
c0004901:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004906:	eb ac                	jmp    c00048b4 <create_partition+0x549>
c0004908:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000490b:	eb a7                	jmp    c00048b4 <create_partition+0x549>
c000490d:	83 c4 5c             	add    esp,0x5c
c0004910:	5b                   	pop    ebx
c0004911:	5e                   	pop    esi
c0004912:	5f                   	pop    edi
c0004913:	5d                   	pop    ebp
c0004914:	c3                   	ret    

c0004915 <get_fileinfo>:
c0004915:	55                   	push   ebp
c0004916:	57                   	push   edi
c0004917:	56                   	push   esi
c0004918:	53                   	push   ebx
c0004919:	83 ec 1c             	sub    esp,0x1c
c000491c:	8b 30                	mov    esi,DWORD PTR [eax]
c000491e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004922:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004926:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004929:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000492c:	0f 84 dc 01 00 00    	je     c0004b0e <get_fileinfo+0x1f9>
c0004932:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004935:	75 0f                	jne    c0004946 <get_fileinfo+0x31>
c0004937:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000493a:	83 c4 1c             	add    esp,0x1c
c000493d:	5b                   	pop    ebx
c000493e:	5e                   	pop    esi
c000493f:	5f                   	pop    edi
c0004940:	5d                   	pop    ebp
c0004941:	e9 58 d5 ff ff       	jmp    c0001e9e <get_xfileinfo>
c0004946:	89 d3                	mov    ebx,edx
c0004948:	89 c6                	mov    esi,eax
c000494a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c000494e:	74 6a                	je     c00049ba <get_fileinfo+0xa5>
c0004950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004958:	31 ed                	xor    ebp,ebp
c000495a:	31 ff                	xor    edi,edi
c000495c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004960:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004964:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004967:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000496b:	66 85 d2             	test   dx,dx
c000496e:	74 3e                	je     c00049ae <get_fileinfo+0x99>
c0004970:	66 85 ed             	test   bp,bp
c0004973:	75 0c                	jne    c0004981 <get_fileinfo+0x6c>
c0004975:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000497b:	66 3d ff 07          	cmp    ax,0x7ff
c000497f:	76 22                	jbe    c00049a3 <get_fileinfo+0x8e>
c0004981:	b9 ff 00 00 00       	mov    ecx,0xff
c0004986:	89 e8                	mov    eax,ebp
c0004988:	29 f9                	sub    ecx,edi
c000498a:	c1 e0 10             	shl    eax,0x10
c000498d:	09 d0                	or     eax,edx
c000498f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004993:	e8 a3 d1 ff ff       	call   c0001b3b <put_utf>
c0004998:	84 c0                	test   al,al
c000499a:	74 10                	je     c00049ac <get_fileinfo+0x97>
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	31 d2                	xor    edx,edx
c00049a1:	01 c7                	add    edi,eax
c00049a3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c00049a8:	89 d5                	mov    ebp,edx
c00049aa:	eb b0                	jmp    c000495c <get_fileinfo+0x47>
c00049ac:	31 ff                	xor    edi,edi
c00049ae:	66 85 ed             	test   bp,bp
c00049b1:	74 02                	je     c00049b5 <get_fileinfo+0xa0>
c00049b3:	31 ff                	xor    edi,edi
c00049b5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	31 c9                	xor    ecx,ecx
c00049be:	83 f9 0a             	cmp    ecx,0xa
c00049c1:	0f 87 ad 00 00 00    	ja     c0004a74 <get_fileinfo+0x15f>
c00049c7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ca:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049cd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049d1:	66 83 fa 20          	cmp    dx,0x20
c00049d5:	0f 84 92 00 00 00    	je     c0004a6d <get_fileinfo+0x158>
c00049db:	66 83 fa 05          	cmp    dx,0x5
c00049df:	75 05                	jne    c00049e6 <get_fileinfo+0xd1>
c00049e1:	ba e5 00 00 00       	mov    edx,0xe5
c00049e6:	83 ff 0b             	cmp    edi,0xb
c00049e9:	77 0b                	ja     c00049f6 <get_fileinfo+0xe1>
c00049eb:	83 fd 09             	cmp    ebp,0x9
c00049ee:	75 06                	jne    c00049f6 <get_fileinfo+0xe1>
c00049f0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049f5:	47                   	inc    edi
c00049f6:	0f b7 c2             	movzx  eax,dx
c00049f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049fd:	e8 6d d0 ff ff       	call   c0001a6f <dbc_1st>
c0004a02:	85 c0                	test   eax,eax
c0004a04:	74 2f                	je     c0004a35 <get_fileinfo+0x120>
c0004a06:	83 fd 08             	cmp    ebp,0x8
c0004a09:	74 2a                	je     c0004a35 <get_fileinfo+0x120>
c0004a0b:	83 fd 0b             	cmp    ebp,0xb
c0004a0e:	74 25                	je     c0004a35 <get_fileinfo+0x120>
c0004a10:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a13:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a17:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a1b:	e8 52 d0 ff ff       	call   c0001a72 <dbc_2nd>
c0004a20:	85 c0                	test   eax,eax
c0004a22:	74 11                	je     c0004a35 <get_fileinfo+0x120>
c0004a24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a2d:	c1 e2 08             	shl    edx,0x8
c0004a30:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a33:	09 c2                	or     edx,eax
c0004a35:	0f b7 d2             	movzx  edx,dx
c0004a38:	50                   	push   eax
c0004a39:	50                   	push   eax
c0004a3a:	68 b5 01 00 00       	push   0x1b5
c0004a3f:	52                   	push   edx
c0004a40:	e8 46 38 00 00       	call   c000828b <ff_oem2uni>
c0004a45:	83 c4 10             	add    esp,0x10
c0004a48:	66 85 c0             	test   ax,ax
c0004a4b:	75 04                	jne    c0004a51 <get_fileinfo+0x13c>
c0004a4d:	31 ff                	xor    edi,edi
c0004a4f:	eb 23                	jmp    c0004a74 <get_fileinfo+0x15f>
c0004a51:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a56:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a5a:	29 f9                	sub    ecx,edi
c0004a5c:	0f b7 c0             	movzx  eax,ax
c0004a5f:	e8 d7 d0 ff ff       	call   c0001b3b <put_utf>
c0004a64:	84 c0                	test   al,al
c0004a66:	74 e5                	je     c0004a4d <get_fileinfo+0x138>
c0004a68:	0f b6 c0             	movzx  eax,al
c0004a6b:	01 c7                	add    edi,eax
c0004a6d:	89 e9                	mov    ecx,ebp
c0004a6f:	e9 4a ff ff ff       	jmp    c00049be <get_fileinfo+0xa9>
c0004a74:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a79:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a7d:	75 54                	jne    c0004ad3 <get_fileinfo+0x1be>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	75 0b                	jne    c0004a8e <get_fileinfo+0x179>
c0004a83:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a87:	ba 01 00 00 00       	mov    edx,0x1
c0004a8c:	eb 33                	jmp    c0004ac1 <get_fileinfo+0x1ac>
c0004a8e:	b1 08                	mov    cl,0x8
c0004a90:	31 d2                	xor    edx,edx
c0004a92:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a98:	84 c0                	test   al,al
c0004a9a:	74 25                	je     c0004ac1 <get_fileinfo+0x1ac>
c0004a9c:	66 83 f8 2e          	cmp    ax,0x2e
c0004aa0:	74 16                	je     c0004ab8 <get_fileinfo+0x1a3>
c0004aa2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004aa5:	66 83 ff 19          	cmp    di,0x19
c0004aa9:	77 0f                	ja     c0004aba <get_fileinfo+0x1a5>
c0004aab:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aae:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004ab1:	74 07                	je     c0004aba <get_fileinfo+0x1a5>
c0004ab3:	83 c0 20             	add    eax,0x20
c0004ab6:	eb 02                	jmp    c0004aba <get_fileinfo+0x1a5>
c0004ab8:	b1 10                	mov    cl,0x10
c0004aba:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004abe:	42                   	inc    edx
c0004abf:	eb d1                	jmp    c0004a92 <get_fileinfo+0x17d>
c0004ac1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004acd:	75 04                	jne    c0004ad3 <get_fileinfo+0x1be>
c0004acf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ad3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ad9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004adc:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004adf:	83 c0 1c             	add    eax,0x1c
c0004ae2:	e8 c1 ce ff ff       	call   c00019a8 <ld_dword>
c0004ae7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004aee:	89 03                	mov    DWORD PTR [ebx],eax
c0004af0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af3:	83 c0 16             	add    eax,0x16
c0004af6:	e8 a0 ce ff ff       	call   c000199b <ld_word>
c0004afb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004aff:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b02:	83 c0 18             	add    eax,0x18
c0004b05:	e8 91 ce ff ff       	call   c000199b <ld_word>
c0004b0a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b0e:	83 c4 1c             	add    esp,0x1c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <ld_clust.isra.0>:
c0004b16:	56                   	push   esi
c0004b17:	89 c6                	mov    esi,eax
c0004b19:	53                   	push   ebx
c0004b1a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b1d:	89 d3                	mov    ebx,edx
c0004b1f:	e8 77 ce ff ff       	call   c000199b <ld_word>
c0004b24:	0f b7 c8             	movzx  ecx,ax
c0004b27:	89 f0                	mov    eax,esi
c0004b29:	3c 03                	cmp    al,0x3
c0004b2b:	75 0d                	jne    c0004b3a <ld_clust.isra.0+0x24>
c0004b2d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b30:	e8 66 ce ff ff       	call   c000199b <ld_word>
c0004b35:	c1 e0 10             	shl    eax,0x10
c0004b38:	09 c1                	or     ecx,eax
c0004b3a:	89 c8                	mov    eax,ecx
c0004b3c:	5b                   	pop    ebx
c0004b3d:	5e                   	pop    esi
c0004b3e:	c3                   	ret    

c0004b3f <st_clust.isra.1>:
c0004b3f:	56                   	push   esi
c0004b40:	89 c6                	mov    esi,eax
c0004b42:	53                   	push   ebx
c0004b43:	89 d3                	mov    ebx,edx
c0004b45:	0f b7 d1             	movzx  edx,cx
c0004b48:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b4b:	e8 bd ce ff ff       	call   c0001a0d <st_word>
c0004b50:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b53:	75 0f                	jne    c0004b64 <st_clust.isra.1+0x25>
c0004b55:	c1 e9 10             	shr    ecx,0x10
c0004b58:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b5b:	89 ca                	mov    edx,ecx
c0004b5d:	5b                   	pop    ebx
c0004b5e:	5e                   	pop    esi
c0004b5f:	e9 a9 ce ff ff       	jmp    c0001a0d <st_word>
c0004b64:	5b                   	pop    ebx
c0004b65:	5e                   	pop    esi
c0004b66:	c3                   	ret    

c0004b67 <init_alloc_info.isra.2>:
c0004b67:	56                   	push   esi
c0004b68:	53                   	push   ebx
c0004b69:	89 c6                	mov    esi,eax
c0004b6b:	89 d3                	mov    ebx,edx
c0004b6d:	51                   	push   ecx
c0004b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b70:	83 c0 34             	add    eax,0x34
c0004b73:	e8 30 ce ff ff       	call   c00019a8 <ld_dword>
c0004b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b7d:	83 c0 38             	add    eax,0x38
c0004b80:	e8 3b ce ff ff       	call   c00019c0 <ld_qword>
c0004b85:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b88:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b8d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b90:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b97:	83 e0 02             	and    eax,0x2
c0004b9a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b9d:	5b                   	pop    ebx
c0004b9e:	5b                   	pop    ebx
c0004b9f:	5e                   	pop    esi
c0004ba0:	c3                   	ret    

c0004ba1 <follow_path>:
c0004ba1:	56                   	push   esi
c0004ba2:	53                   	push   ebx
c0004ba3:	89 c3                	mov    ebx,eax
c0004ba5:	83 ec 14             	sub    esp,0x14
c0004ba8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bac:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bb2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004bb4:	80 fa 5c             	cmp    dl,0x5c
c0004bb7:	75 07                	jne    c0004bc0 <follow_path+0x1f>
c0004bb9:	40                   	inc    eax
c0004bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbe:	eb ee                	jmp    c0004bae <follow_path+0xd>
c0004bc0:	80 fa 2f             	cmp    dl,0x2f
c0004bc3:	74 f4                	je     c0004bb9 <follow_path+0x18>
c0004bc5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bcc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bd3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bd6:	77 52                	ja     c0004c2a <follow_path+0x89>
c0004bd8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bdc:	31 d2                	xor    edx,edx
c0004bde:	89 d8                	mov    eax,ebx
c0004be0:	e8 12 e3 ff ff       	call   c0002ef7 <dir_sdi>
c0004be5:	eb 7c                	jmp    c0004c63 <follow_path+0xc2>
c0004be7:	89 d8                	mov    eax,ebx
c0004be9:	e8 6e f2 ff ff       	call   c0003e5c <dir_find>
c0004bee:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bf1:	85 c0                	test   eax,eax
c0004bf3:	75 46                	jne    c0004c3b <follow_path+0x9a>
c0004bf5:	80 e2 04             	and    dl,0x4
c0004bf8:	75 69                	jne    c0004c63 <follow_path+0xc2>
c0004bfa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bfe:	74 5e                	je     c0004c5e <follow_path+0xbd>
c0004c00:	8a 06                	mov    al,BYTE PTR [esi]
c0004c02:	3c 04                	cmp    al,0x4
c0004c04:	75 41                	jne    c0004c47 <follow_path+0xa6>
c0004c06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c09:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c0d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c13:	30 c0                	xor    al,al
c0004c15:	09 d0                	or     eax,edx
c0004c17:	89 da                	mov    edx,ebx
c0004c19:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c1c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c22:	8d 46 10             	lea    eax,[esi+0x10]
c0004c25:	e8 3d ff ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004c2a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c2e:	89 d8                	mov    eax,ebx
c0004c30:	e8 a9 ed ff ff       	call   c00039de <create_name>
c0004c35:	85 c0                	test   eax,eax
c0004c37:	74 ae                	je     c0004be7 <follow_path+0x46>
c0004c39:	eb 28                	jmp    c0004c63 <follow_path+0xc2>
c0004c3b:	83 f8 04             	cmp    eax,0x4
c0004c3e:	75 23                	jne    c0004c63 <follow_path+0xc2>
c0004c40:	80 e2 04             	and    dl,0x4
c0004c43:	74 19                	je     c0004c5e <follow_path+0xbd>
c0004c45:	eb 1c                	jmp    c0004c63 <follow_path+0xc2>
c0004c47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c4a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c50:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c54:	e8 bd fe ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004c59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c5c:	eb cc                	jmp    c0004c2a <follow_path+0x89>
c0004c5e:	b8 05 00 00 00       	mov    eax,0x5
c0004c63:	83 c4 14             	add    esp,0x14
c0004c66:	5b                   	pop    ebx
c0004c67:	5e                   	pop    esi
c0004c68:	c3                   	ret    

c0004c69 <f_mount>:
c0004c69:	53                   	push   ebx
c0004c6a:	83 ec 18             	sub    esp,0x18
c0004c6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c7d:	e8 fb d2 ff ff       	call   c0001f7d <get_ldnumber>
c0004c82:	89 c2                	mov    edx,eax
c0004c84:	b8 0b 00 00 00       	mov    eax,0xb
c0004c89:	85 d2                	test   edx,edx
c0004c8b:	78 39                	js     c0004cc6 <f_mount+0x5d>
c0004c8d:	8b 04 95 60 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c0004c94:	85 c0                	test   eax,eax
c0004c96:	74 03                	je     c0004c9b <f_mount+0x32>
c0004c98:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9f:	85 c0                	test   eax,eax
c0004ca1:	74 03                	je     c0004ca6 <f_mount+0x3d>
c0004ca3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004caa:	89 04 95 60 37 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc8a0],eax
c0004cb1:	31 c0                	xor    eax,eax
c0004cb3:	84 db                	test   bl,bl
c0004cb5:	74 0f                	je     c0004cc6 <f_mount+0x5d>
c0004cb7:	31 c9                	xor    ecx,ecx
c0004cb9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cbd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cc1:	e8 65 d7 ff ff       	call   c000242b <mount_volume>
c0004cc6:	83 c4 18             	add    esp,0x18
c0004cc9:	5b                   	pop    ebx
c0004cca:	c3                   	ret    

c0004ccb <f_open>:
c0004ccb:	55                   	push   ebp
c0004ccc:	bd 09 00 00 00       	mov    ebp,0x9
c0004cd1:	57                   	push   edi
c0004cd2:	56                   	push   esi
c0004cd3:	53                   	push   ebx
c0004cd4:	83 ec 7c             	sub    esp,0x7c
c0004cd7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cde:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ce5:	85 db                	test   ebx,ebx
c0004ce7:	0f 84 10 04 00 00    	je     c00050fd <f_open+0x432>
c0004ced:	89 fe                	mov    esi,edi
c0004cef:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cf3:	83 e6 3f             	and    esi,0x3f
c0004cf6:	89 f0                	mov    eax,esi
c0004cf8:	0f b6 c8             	movzx  ecx,al
c0004cfb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d02:	e8 24 d7 ff ff       	call   c000242b <mount_volume>
c0004d07:	89 c5                	mov    ebp,eax
c0004d09:	85 c0                	test   eax,eax
c0004d0b:	0f 85 e6 03 00 00    	jne    c00050f7 <f_open+0x42c>
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	bd 11 00 00 00       	mov    ebp,0x11
c0004d1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d1e:	83 ec 0c             	sub    esp,0xc
c0004d21:	68 60 04 00 00       	push   0x460
c0004d26:	e8 a3 34 00 00       	call   c00081ce <ff_memalloc>
c0004d2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d2f:	83 c4 10             	add    esp,0x10
c0004d32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d37:	0f 84 c0 03 00 00    	je     c00050fd <f_open+0x432>
c0004d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d45:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d4b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d4e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d51:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d5c:	e8 40 fe ff ff       	call   c0004ba1 <follow_path>
c0004d61:	89 c5                	mov    ebp,eax
c0004d63:	85 c0                	test   eax,eax
c0004d65:	75 0c                	jne    c0004d73 <f_open+0xa8>
c0004d67:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d6c:	79 05                	jns    c0004d73 <f_open+0xa8>
c0004d6e:	bd 06 00 00 00       	mov    ebp,0x6
c0004d73:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d79:	0f 84 84 01 00 00    	je     c0004f03 <f_open+0x238>
c0004d7f:	85 ed                	test   ebp,ebp
c0004d81:	74 20                	je     c0004da3 <f_open+0xd8>
c0004d83:	83 fd 04             	cmp    ebp,0x4
c0004d86:	0f 85 58 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004d8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d90:	83 ce 08             	or     esi,0x8
c0004d93:	e8 8a f2 ff ff       	call   c0004022 <dir_register>
c0004d98:	89 c5                	mov    ebp,eax
c0004d9a:	85 c0                	test   eax,eax
c0004d9c:	74 2f                	je     c0004dcd <f_open+0x102>
c0004d9e:	e9 41 03 00 00       	jmp    c00050e4 <f_open+0x419>
c0004da3:	bd 07 00 00 00       	mov    ebp,0x7
c0004da8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004dad:	0f 85 31 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004db3:	bd 08 00 00 00       	mov    ebp,0x8
c0004db8:	f7 c7 04 00 00 00    	test   edi,0x4
c0004dbe:	0f 85 20 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004dc4:	83 e7 08             	and    edi,0x8
c0004dc7:	0f 84 65 01 00 00    	je     c0004f32 <f_open+0x267>
c0004dcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dd1:	8a 02                	mov    al,BYTE PTR [edx]
c0004dd3:	3c 04                	cmp    al,0x4
c0004dd5:	0f 85 97 00 00 00    	jne    c0004e72 <f_open+0x1a7>
c0004ddb:	8d 42 10             	lea    eax,[edx+0x10]
c0004dde:	89 13                	mov    DWORD PTR [ebx],edx
c0004de0:	89 da                	mov    edx,ebx
c0004de2:	e8 80 fd ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004de7:	31 d2                	xor    edx,edx
c0004de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ded:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004df2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004df5:	83 c0 02             	add    eax,0x2
c0004df8:	e8 32 cc ff ff       	call   c0001a2f <mem_set>
c0004dfd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e02:	31 d2                	xor    edx,edx
c0004e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0b:	83 c0 26             	add    eax,0x26
c0004e0e:	e8 1c cc ff ff       	call   c0001a2f <mem_set>
c0004e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e17:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e1a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e1e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e26:	83 c0 08             	add    eax,0x8
c0004e29:	e8 e3 cb ff ff       	call   c0001a11 <st_dword>
c0004e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e32:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e35:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3d:	e8 b7 ea ff ff       	call   c00038f9 <store_xdir>
c0004e42:	89 c5                	mov    ebp,eax
c0004e44:	85 c0                	test   eax,eax
c0004e46:	0f 85 98 02 00 00    	jne    c00050e4 <f_open+0x419>
c0004e4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e4f:	85 d2                	test   edx,edx
c0004e51:	0f 84 db 00 00 00    	je     c0004f32 <f_open+0x267>
c0004e57:	31 c9                	xor    ecx,ecx
c0004e59:	89 d8                	mov    eax,ebx
c0004e5b:	e8 8e e3 ff ff       	call   c00031ee <remove_chain>
c0004e60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e64:	89 c5                	mov    ebp,eax
c0004e66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e69:	48                   	dec    eax
c0004e6a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e6d:	e9 b8 00 00 00       	jmp    c0004f2a <f_open+0x25f>
c0004e72:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e76:	89 ea                	mov    edx,ebp
c0004e78:	e8 99 fc ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004e7d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e82:	89 c7                	mov    edi,eax
c0004e84:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e87:	e8 85 cb ff ff       	call   c0001a11 <st_dword>
c0004e8c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e90:	31 c9                	xor    ecx,ecx
c0004e92:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e9e:	e8 9c fc ff ff       	call   c0004b3f <st_clust.isra.1>
c0004ea3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ea7:	31 d2                	xor    edx,edx
c0004ea9:	83 c0 1c             	add    eax,0x1c
c0004eac:	e8 60 cb ff ff       	call   c0001a11 <st_dword>
c0004eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb5:	85 ff                	test   edi,edi
c0004eb7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ebb:	74 75                	je     c0004f32 <f_open+0x267>
c0004ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec1:	31 c9                	xor    ecx,ecx
c0004ec3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004ec6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ec9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ecd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ed1:	89 fa                	mov    edx,edi
c0004ed3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed7:	e8 12 e3 ff ff       	call   c00031ee <remove_chain>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	85 c0                	test   eax,eax
c0004ee0:	0f 85 fe 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004ee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004eea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef2:	4f                   	dec    edi
c0004ef3:	e8 81 d2 ff ff       	call   c0002179 <move_window>
c0004ef8:	89 c5                	mov    ebp,eax
c0004efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004efe:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f01:	eb 27                	jmp    c0004f2a <f_open+0x25f>
c0004f03:	85 ed                	test   ebp,ebp
c0004f05:	0f 85 d9 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f0b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f0f:	bd 04 00 00 00       	mov    ebp,0x4
c0004f14:	a8 10                	test   al,0x10
c0004f16:	0f 85 c8 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f1c:	83 e7 02             	and    edi,0x2
c0004f1f:	74 11                	je     c0004f32 <f_open+0x267>
c0004f21:	bd 07 00 00 00       	mov    ebp,0x7
c0004f26:	a8 01                	test   al,0x1
c0004f28:	eb 02                	jmp    c0004f2c <f_open+0x261>
c0004f2a:	85 ed                	test   ebp,ebp
c0004f2c:	0f 85 b2 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f32:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f38:	74 03                	je     c0004f3d <f_open+0x272>
c0004f3a:	83 ce 40             	or     esi,0x40
c0004f3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f41:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f44:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f47:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f4a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f4d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f51:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f54:	8a 02                	mov    al,BYTE PTR [edx]
c0004f56:	3c 04                	cmp    al,0x4
c0004f58:	75 2a                	jne    c0004f84 <f_open+0x2b9>
c0004f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f5e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f63:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f6a:	30 c0                	xor    al,al
c0004f6c:	09 c8                	or     eax,ecx
c0004f6e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f75:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f78:	8d 42 10             	lea    eax,[edx+0x10]
c0004f7b:	89 da                	mov    edx,ebx
c0004f7d:	e8 e5 fb ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004f82:	eb 1c                	jmp    c0004fa0 <f_open+0x2d5>
c0004f84:	89 fa                	mov    edx,edi
c0004f86:	e8 8b fb ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004f8b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f8e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f91:	e8 12 ca ff ff       	call   c00019a8 <ld_dword>
c0004f96:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f9d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004fab:	89 03                	mov    DWORD PTR [ebx],eax
c0004fad:	31 d2                	xor    edx,edx
c0004faf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fb3:	b9 00 02 00 00       	mov    ecx,0x200
c0004fb8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fbc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fc0:	89 f0                	mov    eax,esi
c0004fc2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fc9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fcc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fd3:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fd6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fdd:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fe8:	e8 42 ca ff ff       	call   c0001a2f <mem_set>
c0004fed:	83 e6 20             	and    esi,0x20
c0004ff0:	75 07                	jne    c0004ff9 <f_open+0x32e>
c0004ff2:	31 ed                	xor    ebp,ebp
c0004ff4:	e9 eb 00 00 00       	jmp    c00050e4 <f_open+0x419>
c0004ff9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ffc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000500b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000500f:	74 e1                	je     c0004ff2 <f_open+0x327>
c0005011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005019:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000501c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000501f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005023:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005026:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000502a:	31 ff                	xor    edi,edi
c000502c:	c1 e5 09             	shl    ebp,0x9
c000502f:	89 ee                	mov    esi,ebp
c0005031:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005035:	89 f8                	mov    eax,edi
c0005037:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000503b:	73 22                	jae    c000505f <f_open+0x394>
c000503d:	89 d8                	mov    eax,ebx
c000503f:	e8 bd dc ff ff       	call   c0002d01 <get_fat>
c0005044:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005048:	89 c2                	mov    edx,eax
c000504a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000504e:	83 f8 01             	cmp    eax,0x1
c0005051:	76 10                	jbe    c0005063 <f_open+0x398>
c0005053:	83 f8 ff             	cmp    eax,0xffffffff
c0005056:	75 d9                	jne    c0005031 <f_open+0x366>
c0005058:	bd 01 00 00 00       	mov    ebp,0x1
c000505d:	eb 09                	jmp    c0005068 <f_open+0x39d>
c000505f:	31 ed                	xor    ebp,ebp
c0005061:	eb 05                	jmp    c0005068 <f_open+0x39d>
c0005063:	bd 02 00 00 00       	mov    ebp,0x2
c0005068:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000506b:	85 ed                	test   ebp,ebp
c000506d:	75 75                	jne    c00050e4 <f_open+0x419>
c000506f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005073:	25 ff 01 00 00       	and    eax,0x1ff
c0005078:	0f 84 74 ff ff ff    	je     c0004ff2 <f_open+0x327>
c000507e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005082:	bd 02 00 00 00       	mov    ebp,0x2
c0005087:	89 c8                	mov    eax,ecx
c0005089:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000508d:	e8 a2 cb ff ff       	call   c0001c34 <clst2sect>
c0005092:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005096:	89 d7                	mov    edi,edx
c0005098:	09 c7                	or     edi,eax
c000509a:	74 48                	je     c00050e4 <f_open+0x419>
c000509c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00050a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00050a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00050ac:	0f ac fe 09          	shrd   esi,edi,0x9
c00050b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050b8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050bb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050bf:	83 ec 0c             	sub    esp,0xc
c00050c2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050c5:	6a 01                	push   0x1
c00050c7:	52                   	push   edx
c00050c8:	50                   	push   eax
c00050c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050d1:	50                   	push   eax
c00050d2:	e8 79 c8 ff ff       	call   c0001950 <disk_read>
c00050d7:	83 c4 20             	add    esp,0x20
c00050da:	85 c0                	test   eax,eax
c00050dc:	0f 95 c0             	setne  al
c00050df:	0f b6 c0             	movzx  eax,al
c00050e2:	89 c5                	mov    ebp,eax
c00050e4:	83 ec 0c             	sub    esp,0xc
c00050e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050eb:	e8 f4 30 00 00       	call   c00081e4 <ff_memfree>
c00050f0:	83 c4 10             	add    esp,0x10
c00050f3:	85 ed                	test   ebp,ebp
c00050f5:	74 06                	je     c00050fd <f_open+0x432>
c00050f7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050fd:	83 c4 7c             	add    esp,0x7c
c0005100:	89 e8                	mov    eax,ebp
c0005102:	5b                   	pop    ebx
c0005103:	5e                   	pop    esi
c0005104:	5f                   	pop    edi
c0005105:	5d                   	pop    ebp
c0005106:	c3                   	ret    

c0005107 <f_read>:
c0005107:	55                   	push   ebp
c0005108:	57                   	push   edi
c0005109:	56                   	push   esi
c000510a:	53                   	push   ebx
c000510b:	83 ec 2c             	sub    esp,0x2c
c000510e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005112:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005116:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000511c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005120:	89 d8                	mov    eax,ebx
c0005122:	e8 77 cf ff ff       	call   c000209e <validate>
c0005127:	89 c5                	mov    ebp,eax
c0005129:	85 c0                	test   eax,eax
c000512b:	0f 85 4c 02 00 00    	jne    c000537d <f_read+0x276>
c0005131:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005135:	85 ed                	test   ebp,ebp
c0005137:	0f 85 40 02 00 00    	jne    c000537d <f_read+0x276>
c000513d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005141:	0f 84 31 02 00 00    	je     c0005378 <f_read+0x271>
c0005147:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000514a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000514d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005150:	bf 00 00 00 00       	mov    edi,0x0
c0005155:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005158:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000515c:	89 d1                	mov    ecx,edx
c000515e:	19 f9                	sbb    ecx,edi
c0005160:	0f 83 cf 00 00 00    	jae    c0005235 <f_read+0x12e>
c0005166:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000516a:	e9 c6 00 00 00       	jmp    c0005235 <f_read+0x12e>
c000516f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005172:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005175:	89 d0                	mov    eax,edx
c0005177:	25 ff 01 00 00       	and    eax,0x1ff
c000517c:	0f 85 c9 01 00 00    	jne    c000534b <f_read+0x244>
c0005182:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005186:	89 d6                	mov    esi,edx
c0005188:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000518c:	89 cf                	mov    edi,ecx
c000518e:	48                   	dec    eax
c000518f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005193:	21 f0                	and    eax,esi
c0005195:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005199:	0f 84 a6 00 00 00    	je     c0005245 <f_read+0x13e>
c000519f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00051a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00051a6:	89 c8                	mov    eax,ecx
c00051a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00051ab:	e8 84 ca ff ff       	call   c0001c34 <clst2sect>
c00051b0:	89 d7                	mov    edi,edx
c00051b2:	09 c7                	or     edi,eax
c00051b4:	0f 84 b4 00 00 00    	je     c000526e <f_read+0x167>
c00051ba:	31 ff                	xor    edi,edi
c00051bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051c0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051c3:	01 c6                	add    esi,eax
c00051c5:	11 d7                	adc    edi,edx
c00051c7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051cf:	0f 86 fd 00 00 00    	jbe    c00052d2 <f_read+0x1cb>
c00051d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051dd:	c1 e8 09             	shr    eax,0x9
c00051e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051e7:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ea:	39 c2                	cmp    edx,eax
c00051ec:	76 07                	jbe    c00051f5 <f_read+0xee>
c00051ee:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00051f5:	83 ec 0c             	sub    esp,0xc
c00051f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051fc:	57                   	push   edi
c00051fd:	56                   	push   esi
c00051fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005202:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005206:	50                   	push   eax
c0005207:	e8 44 c7 ff ff       	call   c0001950 <disk_read>
c000520c:	83 c4 20             	add    esp,0x20
c000520f:	85 c0                	test   eax,eax
c0005211:	75 6e                	jne    c0005281 <f_read+0x17a>
c0005213:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005217:	78 7e                	js     c0005297 <f_read+0x190>
c0005219:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000521c:	c1 e6 09             	shl    esi,0x9
c000521f:	31 ff                	xor    edi,edi
c0005221:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005225:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005229:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000522d:	01 30                	add    DWORD PTR [eax],esi
c000522f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005232:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005235:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000523a:	0f 85 2f ff ff ff    	jne    c000516f <f_read+0x68>
c0005240:	e9 38 01 00 00       	jmp    c000537d <f_read+0x276>
c0005245:	89 c8                	mov    eax,ecx
c0005247:	09 d0                	or     eax,edx
c0005249:	75 05                	jne    c0005250 <f_read+0x149>
c000524b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000524e:	eb 19                	jmp    c0005269 <f_read+0x162>
c0005250:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005254:	74 09                	je     c000525f <f_read+0x158>
c0005256:	89 d8                	mov    eax,ebx
c0005258:	e8 f8 c9 ff ff       	call   c0001c55 <clmt_clust>
c000525d:	eb 0a                	jmp    c0005269 <f_read+0x162>
c000525f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005262:	89 d8                	mov    eax,ebx
c0005264:	e8 98 da ff ff       	call   c0002d01 <get_fat>
c0005269:	83 f8 01             	cmp    eax,0x1
c000526c:	77 0e                	ja     c000527c <f_read+0x175>
c000526e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005272:	bd 02 00 00 00       	mov    ebp,0x2
c0005277:	e9 01 01 00 00       	jmp    c000537d <f_read+0x276>
c000527c:	83 f8 ff             	cmp    eax,0xffffffff
c000527f:	75 0e                	jne    c000528f <f_read+0x188>
c0005281:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005285:	bd 01 00 00 00       	mov    ebp,0x1
c000528a:	e9 ee 00 00 00       	jmp    c000537d <f_read+0x276>
c000528f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005292:	e9 08 ff ff ff       	jmp    c000519f <f_read+0x98>
c0005297:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000529a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000529d:	29 f0                	sub    eax,esi
c000529f:	19 fa                	sbb    edx,edi
c00052a1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00052a4:	89 d7                	mov    edi,edx
c00052a6:	ba 00 00 00 00       	mov    edx,0x0
c00052ab:	89 f9                	mov    ecx,edi
c00052ad:	19 d1                	sbb    ecx,edx
c00052af:	0f 83 64 ff ff ff    	jae    c0005219 <f_read+0x112>
c00052b5:	89 c7                	mov    edi,eax
c00052b7:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ba:	c1 e7 09             	shl    edi,0x9
c00052bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052c1:	b9 00 02 00 00       	mov    ecx,0x200
c00052c6:	01 f8                	add    eax,edi
c00052c8:	e8 4d c7 ff ff       	call   c0001a1a <mem_cpy>
c00052cd:	e9 47 ff ff ff       	jmp    c0005219 <f_read+0x112>
c00052d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052d5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00052db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052df:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052e3:	75 05                	jne    c00052ea <f_read+0x1e3>
c00052e5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052e8:	74 5b                	je     c0005345 <f_read+0x23e>
c00052ea:	8d 43 50             	lea    eax,[ebx+0x50]
c00052ed:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052f5:	79 2a                	jns    c0005321 <f_read+0x21a>
c00052f7:	83 ec 0c             	sub    esp,0xc
c00052fa:	6a 01                	push   0x1
c00052fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005308:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000530c:	50                   	push   eax
c000530d:	e8 54 c6 ff ff       	call   c0001966 <disk_write>
c0005312:	83 c4 20             	add    esp,0x20
c0005315:	85 c0                	test   eax,eax
c0005317:	0f 85 64 ff ff ff    	jne    c0005281 <f_read+0x17a>
c000531d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005321:	83 ec 0c             	sub    esp,0xc
c0005324:	6a 01                	push   0x1
c0005326:	57                   	push   edi
c0005327:	56                   	push   esi
c0005328:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000532c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005330:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005334:	50                   	push   eax
c0005335:	e8 16 c6 ff ff       	call   c0001950 <disk_read>
c000533a:	83 c4 20             	add    esp,0x20
c000533d:	85 c0                	test   eax,eax
c000533f:	0f 85 3c ff ff ff    	jne    c0005281 <f_read+0x17a>
c0005345:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005348:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000534b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000534e:	ba 00 02 00 00       	mov    edx,0x200
c0005353:	25 ff 01 00 00       	and    eax,0x1ff
c0005358:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000535c:	29 c2                	sub    edx,eax
c000535e:	39 d6                	cmp    esi,edx
c0005360:	76 02                	jbe    c0005364 <f_read+0x25d>
c0005362:	89 d6                	mov    esi,edx
c0005364:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005368:	89 f1                	mov    ecx,esi
c000536a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000536e:	e8 a7 c6 ff ff       	call   c0001a1a <mem_cpy>
c0005373:	e9 a7 fe ff ff       	jmp    c000521f <f_read+0x118>
c0005378:	bd 07 00 00 00       	mov    ebp,0x7
c000537d:	83 c4 2c             	add    esp,0x2c
c0005380:	89 e8                	mov    eax,ebp
c0005382:	5b                   	pop    ebx
c0005383:	5e                   	pop    esi
c0005384:	5f                   	pop    edi
c0005385:	5d                   	pop    ebp
c0005386:	c3                   	ret    

c0005387 <f_write>:
c0005387:	55                   	push   ebp
c0005388:	57                   	push   edi
c0005389:	56                   	push   esi
c000538a:	53                   	push   ebx
c000538b:	83 ec 2c             	sub    esp,0x2c
c000538e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005392:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000539c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053a0:	89 d8                	mov    eax,ebx
c00053a2:	e8 f7 cc ff ff       	call   c000209e <validate>
c00053a7:	89 c5                	mov    ebp,eax
c00053a9:	85 c0                	test   eax,eax
c00053ab:	0f 85 86 02 00 00    	jne    c0005637 <f_write+0x2b0>
c00053b1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053b5:	85 ed                	test   ebp,ebp
c00053b7:	0f 85 7a 02 00 00    	jne    c0005637 <f_write+0x2b0>
c00053bd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053c1:	0f 84 6b 02 00 00    	je     c0005632 <f_write+0x2ab>
c00053c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053ce:	0f 84 43 01 00 00    	je     c0005517 <f_write+0x190>
c00053d4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053d7:	89 c1                	mov    ecx,eax
c00053d9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053dd:	0f 83 34 01 00 00    	jae    c0005517 <f_write+0x190>
c00053e3:	f7 d0                	not    eax
c00053e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053e9:	e9 29 01 00 00       	jmp    c0005517 <f_write+0x190>
c00053ee:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053f1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053f4:	89 d0                	mov    eax,edx
c00053f6:	25 ff 01 00 00       	and    eax,0x1ff
c00053fb:	0f 85 00 02 00 00    	jne    c0005601 <f_write+0x27a>
c0005401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005405:	89 d6                	mov    esi,edx
c0005407:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000540b:	89 cf                	mov    edi,ecx
c000540d:	48                   	dec    eax
c000540e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005412:	21 f0                	and    eax,esi
c0005414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005418:	0f 84 06 01 00 00    	je     c0005524 <f_write+0x19d>
c000541e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005422:	0f 88 6e 01 00 00    	js     c0005596 <f_write+0x20f>
c0005428:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000542f:	89 c8                	mov    eax,ecx
c0005431:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005435:	e8 fa c7 ff ff       	call   c0001c34 <clst2sect>
c000543a:	89 d1                	mov    ecx,edx
c000543c:	09 c1                	or     ecx,eax
c000543e:	0f 84 1c 01 00 00    	je     c0005560 <f_write+0x1d9>
c0005444:	31 ff                	xor    edi,edi
c0005446:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000544e:	01 c6                	add    esi,eax
c0005450:	11 d7                	adc    edi,edx
c0005452:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545a:	0f 86 63 01 00 00    	jbe    c00055c3 <f_write+0x23c>
c0005460:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005468:	c1 e8 09             	shr    eax,0x9
c000546b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005477:	39 c2                	cmp    edx,eax
c0005479:	76 08                	jbe    c0005483 <f_write+0xfc>
c000547b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000548a:	57                   	push   edi
c000548b:	56                   	push   esi
c000548c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005490:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005494:	50                   	push   eax
c0005495:	e8 cc c4 ff ff       	call   c0001966 <disk_write>
c000549a:	83 c4 20             	add    esp,0x20
c000549d:	85 c0                	test   eax,eax
c000549f:	0f 85 ce 00 00 00    	jne    c0005573 <f_write+0x1ec>
c00054a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054ab:	29 f0                	sub    eax,esi
c00054ad:	19 fa                	sbb    edx,edi
c00054af:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054b3:	89 d7                	mov    edi,edx
c00054b5:	ba 00 00 00 00       	mov    edx,0x0
c00054ba:	89 f9                	mov    ecx,edi
c00054bc:	19 d1                	sbb    ecx,edx
c00054be:	73 1c                	jae    c00054dc <f_write+0x155>
c00054c0:	89 c7                	mov    edi,eax
c00054c2:	b9 00 02 00 00       	mov    ecx,0x200
c00054c7:	c1 e7 09             	shl    edi,0x9
c00054ca:	8d 43 50             	lea    eax,[ebx+0x50]
c00054cd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054d1:	89 fa                	mov    edx,edi
c00054d3:	e8 42 c5 ff ff       	call   c0001a1a <mem_cpy>
c00054d8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054dc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054e0:	c1 e6 09             	shl    esi,0x9
c00054e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054e7:	31 ff                	xor    edi,edi
c00054e9:	01 30                	add    DWORD PTR [eax],esi
c00054eb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054f6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054fc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054ff:	89 c1                	mov    ecx,eax
c0005501:	39 f2                	cmp    edx,esi
c0005503:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005506:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005509:	19 f9                	sbb    ecx,edi
c000550b:	73 04                	jae    c0005511 <f_write+0x18a>
c000550d:	89 f2                	mov    edx,esi
c000550f:	89 f8                	mov    eax,edi
c0005511:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005514:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005517:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000551c:	0f 85 cc fe ff ff    	jne    c00053ee <f_write+0x67>
c0005522:	eb 2e                	jmp    c0005552 <f_write+0x1cb>
c0005524:	89 c8                	mov    eax,ecx
c0005526:	09 d0                	or     eax,edx
c0005528:	75 0b                	jne    c0005535 <f_write+0x1ae>
c000552a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000552d:	31 d2                	xor    edx,edx
c000552f:	85 c0                	test   eax,eax
c0005531:	75 28                	jne    c000555b <f_write+0x1d4>
c0005533:	eb 12                	jmp    c0005547 <f_write+0x1c0>
c0005535:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005539:	74 09                	je     c0005544 <f_write+0x1bd>
c000553b:	89 d8                	mov    eax,ebx
c000553d:	e8 13 c7 ff ff       	call   c0001c55 <clmt_clust>
c0005542:	eb 0a                	jmp    c000554e <f_write+0x1c7>
c0005544:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005547:	89 d8                	mov    eax,ebx
c0005549:	e8 a1 da ff ff       	call   c0002fef <create_chain>
c000554e:	85 c0                	test   eax,eax
c0005550:	75 09                	jne    c000555b <f_write+0x1d4>
c0005552:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005556:	e9 dc 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c000555b:	83 f8 01             	cmp    eax,0x1
c000555e:	75 0e                	jne    c000556e <f_write+0x1e7>
c0005560:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005564:	bd 02 00 00 00       	mov    ebp,0x2
c0005569:	e9 c9 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c000556e:	83 f8 ff             	cmp    eax,0xffffffff
c0005571:	75 0e                	jne    c0005581 <f_write+0x1fa>
c0005573:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005577:	bd 01 00 00 00       	mov    ebp,0x1
c000557c:	e9 b6 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c0005581:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005584:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005588:	0f 85 90 fe ff ff    	jne    c000541e <f_write+0x97>
c000558e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005591:	e9 88 fe ff ff       	jmp    c000541e <f_write+0x97>
c0005596:	83 ec 0c             	sub    esp,0xc
c0005599:	8d 43 50             	lea    eax,[ebx+0x50]
c000559c:	6a 01                	push   0x1
c000559e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00055a1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00055a4:	50                   	push   eax
c00055a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055ad:	50                   	push   eax
c00055ae:	e8 b3 c3 ff ff       	call   c0001966 <disk_write>
c00055b3:	83 c4 20             	add    esp,0x20
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 b9                	jne    c0005573 <f_write+0x1ec>
c00055ba:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055be:	e9 65 fe ff ff       	jmp    c0005428 <f_write+0xa1>
c00055c3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055c6:	75 05                	jne    c00055cd <f_write+0x246>
c00055c8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055cb:	74 2e                	je     c00055fb <f_write+0x274>
c00055cd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055d3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055d6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055d9:	73 20                	jae    c00055fb <f_write+0x274>
c00055db:	83 ec 0c             	sub    esp,0xc
c00055de:	8d 43 50             	lea    eax,[ebx+0x50]
c00055e1:	6a 01                	push   0x1
c00055e3:	57                   	push   edi
c00055e4:	56                   	push   esi
c00055e5:	50                   	push   eax
c00055e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ea:	50                   	push   eax
c00055eb:	e8 60 c3 ff ff       	call   c0001950 <disk_read>
c00055f0:	83 c4 20             	add    esp,0x20
c00055f3:	85 c0                	test   eax,eax
c00055f5:	0f 85 78 ff ff ff    	jne    c0005573 <f_write+0x1ec>
c00055fb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055fe:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005601:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005604:	ba 00 02 00 00       	mov    edx,0x200
c0005609:	25 ff 01 00 00       	and    eax,0x1ff
c000560e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005612:	29 c2                	sub    edx,eax
c0005614:	39 d6                	cmp    esi,edx
c0005616:	76 02                	jbe    c000561a <f_write+0x293>
c0005618:	89 d6                	mov    esi,edx
c000561a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000561e:	89 f1                	mov    ecx,esi
c0005620:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005624:	e8 f1 c3 ff ff       	call   c0001a1a <mem_cpy>
c0005629:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000562d:	e9 b1 fe ff ff       	jmp    c00054e3 <f_write+0x15c>
c0005632:	bd 07 00 00 00       	mov    ebp,0x7
c0005637:	83 c4 2c             	add    esp,0x2c
c000563a:	89 e8                	mov    eax,ebp
c000563c:	5b                   	pop    ebx
c000563d:	5e                   	pop    esi
c000563e:	5f                   	pop    edi
c000563f:	5d                   	pop    ebp
c0005640:	c3                   	ret    

c0005641 <f_sync>:
c0005641:	56                   	push   esi
c0005642:	53                   	push   ebx
c0005643:	83 ec 64             	sub    esp,0x64
c0005646:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000564a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000564e:	89 d8                	mov    eax,ebx
c0005650:	e8 49 ca ff ff       	call   c000209e <validate>
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ba 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c000565d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005660:	f6 c2 40             	test   dl,0x40
c0005663:	0f 84 ae 01 00 00    	je     c0005817 <f_sync+0x1d6>
c0005669:	84 d2                	test   dl,dl
c000566b:	79 33                	jns    c00056a0 <f_sync+0x5f>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005678:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000567b:	50                   	push   eax
c000567c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005680:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005684:	50                   	push   eax
c0005685:	e8 dc c2 ff ff       	call   c0001966 <disk_write>
c000568a:	83 c4 20             	add    esp,0x20
c000568d:	89 c2                	mov    edx,eax
c000568f:	b8 01 00 00 00       	mov    eax,0x1
c0005694:	85 d2                	test   edx,edx
c0005696:	0f 85 7b 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c000569c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056a7:	0f 85 11 01 00 00    	jne    c00057be <f_sync+0x17d>
c00056ad:	89 d8                	mov    eax,ebx
c00056af:	e8 13 d6 ff ff       	call   c0002cc7 <fill_first_frag>
c00056b4:	85 c0                	test   eax,eax
c00056b6:	0f 85 5b 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c00056bc:	83 c9 ff             	or     ecx,0xffffffff
c00056bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056c2:	89 d8                	mov    eax,ebx
c00056c4:	e8 c9 d5 ff ff       	call   c0002c92 <fill_last_frag>
c00056c9:	85 c0                	test   eax,eax
c00056cb:	0f 85 46 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c00056d1:	83 ec 0c             	sub    esp,0xc
c00056d4:	68 60 04 00 00       	push   0x460
c00056d9:	e8 f0 2a 00 00       	call   c00081ce <ff_memalloc>
c00056de:	83 c4 10             	add    esp,0x10
c00056e1:	89 c6                	mov    esi,eax
c00056e3:	b8 11 00 00 00       	mov    eax,0x11
c00056e8:	85 f6                	test   esi,esi
c00056ea:	0f 84 27 01 00 00    	je     c0005817 <f_sync+0x1d6>
c00056f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056f4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056fa:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056fd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005700:	89 da                	mov    edx,ebx
c0005702:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005706:	e8 af df ff ff       	call   c00036ba <load_obj_xdir>
c000570b:	85 c0                	test   eax,eax
c000570d:	0f 85 95 00 00 00    	jne    c00057a8 <f_sync+0x167>
c0005713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000571a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c000571e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005721:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005724:	83 ca 01             	or     edx,0x1
c0005727:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000572a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000572d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005730:	83 c0 34             	add    eax,0x34
c0005733:	e8 d9 c2 ff ff       	call   c0001a11 <st_dword>
c0005738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000573c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005742:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005745:	83 c0 38             	add    eax,0x38
c0005748:	e8 c7 c2 ff ff       	call   c0001a14 <st_qword>
c000574d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005757:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000575a:	83 c0 28             	add    eax,0x28
c000575d:	e8 b2 c2 ff ff       	call   c0001a14 <st_qword>
c0005762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005766:	ba 00 00 21 50       	mov    edx,0x50210000
c000576b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576e:	83 c0 0c             	add    eax,0xc
c0005771:	e8 9b c2 ff ff       	call   c0001a11 <st_dword>
c0005776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000577d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005781:	31 d2                	xor    edx,edx
c0005783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005786:	83 c0 10             	add    eax,0x10
c0005789:	e8 83 c2 ff ff       	call   c0001a11 <st_dword>
c000578e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005792:	e8 62 e1 ff ff       	call   c00038f9 <store_xdir>
c0005797:	85 c0                	test   eax,eax
c0005799:	75 0d                	jne    c00057a8 <f_sync+0x167>
c000579b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000579f:	e8 00 eb ff ff       	call   c00042a4 <sync_fs>
c00057a4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057ac:	83 ec 0c             	sub    esp,0xc
c00057af:	56                   	push   esi
c00057b0:	e8 2f 2a 00 00       	call   c00081e4 <ff_memfree>
c00057b5:	83 c4 10             	add    esp,0x10
c00057b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057bc:	eb 59                	jmp    c0005817 <f_sync+0x1d6>
c00057be:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057c1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057c4:	e8 b0 c9 ff ff       	call   c0002179 <move_window>
c00057c9:	85 c0                	test   eax,eax
c00057cb:	75 4a                	jne    c0005817 <f_sync+0x1d6>
c00057cd:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057d0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057d4:	89 f2                	mov    edx,esi
c00057d6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057db:	e8 5f f3 ff ff       	call   c0004b3f <st_clust.isra.1>
c00057e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057e6:	e8 26 c2 ff ff       	call   c0001a11 <st_dword>
c00057eb:	8d 46 16             	lea    eax,[esi+0x16]
c00057ee:	ba 00 00 21 50       	mov    edx,0x50210000
c00057f3:	e8 19 c2 ff ff       	call   c0001a11 <st_dword>
c00057f8:	8d 46 12             	lea    eax,[esi+0x12]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	e8 0b c2 ff ff       	call   c0001a0d <st_word>
c0005802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005806:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000580a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580e:	e8 91 ea ff ff       	call   c00042a4 <sync_fs>
c0005813:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005817:	83 c4 64             	add    esp,0x64
c000581a:	5b                   	pop    ebx
c000581b:	5e                   	pop    esi
c000581c:	c3                   	ret    

c000581d <f_close>:
c000581d:	53                   	push   ebx
c000581e:	83 ec 24             	sub    esp,0x24
c0005821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005825:	53                   	push   ebx
c0005826:	e8 16 fe ff ff       	call   c0005641 <f_sync>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	85 c0                	test   eax,eax
c0005830:	75 15                	jne    c0005847 <f_close+0x2a>
c0005832:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005836:	89 d8                	mov    eax,ebx
c0005838:	e8 61 c8 ff ff       	call   c000209e <validate>
c000583d:	85 c0                	test   eax,eax
c000583f:	75 06                	jne    c0005847 <f_close+0x2a>
c0005841:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005847:	83 c4 18             	add    esp,0x18
c000584a:	5b                   	pop    ebx
c000584b:	c3                   	ret    

c000584c <f_lseek>:
c000584c:	55                   	push   ebp
c000584d:	57                   	push   edi
c000584e:	56                   	push   esi
c000584f:	53                   	push   ebx
c0005850:	83 ec 3c             	sub    esp,0x3c
c0005853:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005857:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000585b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000585f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005862:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005866:	89 d8                	mov    eax,ebx
c0005868:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000586c:	e8 2d c8 ff ff       	call   c000209e <validate>
c0005871:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005875:	85 c0                	test   eax,eax
c0005877:	0f 85 7a 04 00 00    	jne    c0005cf7 <f_lseek+0x4ab>
c000587d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005881:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005885:	85 c0                	test   eax,eax
c0005887:	0f 85 6a 04 00 00    	jne    c0005cf7 <f_lseek+0x4ab>
c000588d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005891:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005894:	74 0c                	je     c00058a2 <f_lseek+0x56>
c0005896:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005899:	85 c0                	test   eax,eax
c000589b:	75 1f                	jne    c00058bc <f_lseek+0x70>
c000589d:	e9 b5 01 00 00       	jmp    c0005a57 <f_lseek+0x20b>
c00058a2:	83 c9 ff             	or     ecx,0xffffffff
c00058a5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00058a8:	89 d8                	mov    eax,ebx
c00058aa:	e8 e3 d3 ff ff       	call   c0002c92 <fill_last_frag>
c00058af:	85 c0                	test   eax,eax
c00058b1:	74 e3                	je     c0005896 <f_lseek+0x4a>
c00058b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058b7:	e9 3b 04 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c00058bc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058c1:	0f 85 ac 00 00 00    	jne    c0005973 <f_lseek+0x127>
c00058c7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058cb:	0f 85 a2 00 00 00    	jne    c0005973 <f_lseek+0x127>
c00058d1:	8d 78 04             	lea    edi,[eax+0x4]
c00058d4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00058d9:	be 02 00 00 00       	mov    esi,0x2
c00058de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058e2:	85 ed                	test   ebp,ebp
c00058e4:	74 73                	je     c0005959 <f_lseek+0x10d>
c00058e6:	89 e9                	mov    ecx,ebp
c00058e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058ef:	ff 04 24             	inc    DWORD PTR [esp]
c00058f2:	89 ca                	mov    edx,ecx
c00058f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	e8 02 d4 ff ff       	call   c0002d01 <get_fat>
c00058ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005903:	83 f8 01             	cmp    eax,0x1
c0005906:	77 11                	ja     c0005919 <f_lseek+0xcd>
c0005908:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000590c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005914:	e9 de 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c0005919:	83 f8 ff             	cmp    eax,0xffffffff
c000591c:	75 11                	jne    c000592f <f_lseek+0xe3>
c000591e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005922:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000592a:	e9 c8 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c000592f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005932:	89 c1                	mov    ecx,eax
c0005934:	39 c2                	cmp    edx,eax
c0005936:	74 b7                	je     c00058ef <f_lseek+0xa3>
c0005938:	83 c6 02             	add    esi,0x2
c000593b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000593f:	72 0b                	jb     c000594c <f_lseek+0x100>
c0005941:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005944:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005947:	89 0f                	mov    DWORD PTR [edi],ecx
c0005949:	83 c7 08             	add    edi,0x8
c000594c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005950:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005953:	76 04                	jbe    c0005959 <f_lseek+0x10d>
c0005955:	89 c5                	mov    ebp,eax
c0005957:	eb 8d                	jmp    c00058e6 <f_lseek+0x9a>
c0005959:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000595c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005960:	89 30                	mov    DWORD PTR [eax],esi
c0005962:	0f 87 87 03 00 00    	ja     c0005cef <f_lseek+0x4a3>
c0005968:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000596e:	e9 84 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c0005973:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005976:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000597d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005985:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000598c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005990:	73 0f                	jae    c00059a1 <f_lseek+0x155>
c0005992:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005999:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000599d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00059a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00059ac:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059b7:	0f 84 3a 03 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c00059bd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059c5:	83 c6 ff             	add    esi,0xffffffff
c00059c8:	89 d8                	mov    eax,ebx
c00059ca:	83 d7 ff             	adc    edi,0xffffffff
c00059cd:	89 f2                	mov    edx,esi
c00059cf:	89 f9                	mov    ecx,edi
c00059d1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00059d8:	e8 78 c2 ff ff       	call   c0001c55 <clmt_clust>
c00059dd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059e1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059e4:	89 c2                	mov    edx,eax
c00059e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ea:	89 c8                	mov    eax,ecx
c00059ec:	e8 43 c2 ff ff       	call   c0001c34 <clst2sect>
c00059f1:	89 d7                	mov    edi,edx
c00059f3:	09 c7                	or     edi,eax
c00059f5:	0f 84 0d ff ff ff    	je     c0005908 <f_lseek+0xbc>
c00059fb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059ff:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a05:	0f 84 ec 02 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c0005a0b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a16:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a1a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a1e:	4d                   	dec    ebp
c0005a1f:	31 ff                	xor    edi,edi
c0005a21:	21 ee                	and    esi,ebp
c0005a23:	01 c6                	add    esi,eax
c0005a25:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a28:	11 d7                	adc    edi,edx
c0005a2a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a2d:	39 fa                	cmp    edx,edi
c0005a2f:	75 08                	jne    c0005a39 <f_lseek+0x1ed>
c0005a31:	39 f0                	cmp    eax,esi
c0005a33:	0f 84 be 02 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c0005a39:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a3c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a40:	0f 89 80 02 00 00    	jns    c0005cc6 <f_lseek+0x47a>
c0005a46:	83 ec 0c             	sub    esp,0xc
c0005a49:	6a 01                	push   0x1
c0005a4b:	52                   	push   edx
c0005a4c:	50                   	push   eax
c0005a4d:	55                   	push   ebp
c0005a4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a52:	e9 5a 02 00 00       	jmp    c0005cb1 <f_lseek+0x465>
c0005a57:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a5b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a5e:	74 16                	je     c0005a76 <f_lseek+0x22a>
c0005a60:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a65:	76 0f                	jbe    c0005a76 <f_lseek+0x22a>
c0005a67:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a6e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a79:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a7c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a7f:	89 c7                	mov    edi,eax
c0005a81:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a85:	73 0d                	jae    c0005a94 <f_lseek+0x248>
c0005a87:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a8b:	75 07                	jne    c0005a94 <f_lseek+0x248>
c0005a8d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a94:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a97:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a9a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a9e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005aa5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005aac:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aaf:	75 09                	jne    c0005aba <f_lseek+0x26e>
c0005ab1:	31 f6                	xor    esi,esi
c0005ab3:	31 ff                	xor    edi,edi
c0005ab5:	e9 af 01 00 00       	jmp    c0005c69 <f_lseek+0x41d>
c0005aba:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005abe:	89 d7                	mov    edi,edx
c0005ac0:	c1 e1 09             	shl    ecx,0x9
c0005ac3:	09 c7                	or     edi,eax
c0005ac5:	89 cd                	mov    ebp,ecx
c0005ac7:	74 6d                	je     c0005b36 <f_lseek+0x2ea>
c0005ac9:	83 c0 ff             	add    eax,0xffffffff
c0005acc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ad0:	83 d2 ff             	adc    edx,0xffffffff
c0005ad3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ada:	83 c0 ff             	add    eax,0xffffffff
c0005add:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ae1:	83 d2 ff             	adc    edx,0xffffffff
c0005ae4:	31 ff                	xor    edi,edi
c0005ae6:	57                   	push   edi
c0005ae7:	51                   	push   ecx
c0005ae8:	52                   	push   edx
c0005ae9:	50                   	push   eax
c0005aea:	e8 bd 8c 01 00       	call   c001e7ac <__udivdi3>
c0005aef:	83 c4 10             	add    esp,0x10
c0005af2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005af6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005afa:	57                   	push   edi
c0005afb:	55                   	push   ebp
c0005afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b04:	e8 a3 8c 01 00       	call   c001e7ac <__udivdi3>
c0005b09:	83 c4 10             	add    esp,0x10
c0005b0c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b14:	19 d1                	sbb    ecx,edx
c0005b16:	72 1e                	jb     c0005b36 <f_lseek+0x2ea>
c0005b18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b1c:	89 e9                	mov    ecx,ebp
c0005b1e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b21:	f7 d9                	neg    ecx
c0005b23:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b26:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b2a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b2d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b30:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b34:	eb 28                	jmp    c0005b5e <f_lseek+0x312>
c0005b36:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b39:	85 c0                	test   eax,eax
c0005b3b:	75 1e                	jne    c0005b5b <f_lseek+0x30f>
c0005b3d:	31 d2                	xor    edx,edx
c0005b3f:	89 d8                	mov    eax,ebx
c0005b41:	e8 a9 d4 ff ff       	call   c0002fef <create_chain>
c0005b46:	83 f8 01             	cmp    eax,0x1
c0005b49:	0f 84 b9 fd ff ff    	je     c0005908 <f_lseek+0xbc>
c0005b4f:	83 f8 ff             	cmp    eax,0xffffffff
c0005b52:	0f 84 c6 fd ff ff    	je     c000591e <f_lseek+0xd2>
c0005b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b5b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b5e:	85 c0                	test   eax,eax
c0005b60:	0f 84 4b ff ff ff    	je     c0005ab1 <f_lseek+0x265>
c0005b66:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b6a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b72:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b75:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b79:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b7c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b7f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b83:	0f 83 9d 00 00 00    	jae    c0005c26 <f_lseek+0x3da>
c0005b89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b91:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b94:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b98:	01 f2                	add    edx,esi
c0005b9a:	11 f9                	adc    ecx,edi
c0005b9c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ba0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005ba4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005ba7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005baa:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005bad:	f6 c1 02             	test   cl,0x2
c0005bb0:	74 35                	je     c0005be7 <f_lseek+0x39b>
c0005bb2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005bb6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bb9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005bbc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bc0:	73 16                	jae    c0005bd8 <f_lseek+0x38c>
c0005bc2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bc6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bca:	88 ca                	mov    dl,cl
c0005bcc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bcf:	83 ca 40             	or     edx,0x40
c0005bd2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bd5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bd8:	89 c2                	mov    edx,eax
c0005bda:	89 d8                	mov    eax,ebx
c0005bdc:	e8 0e d4 ff ff       	call   c0002fef <create_chain>
c0005be1:	85 c0                	test   eax,eax
c0005be3:	75 0b                	jne    c0005bf0 <f_lseek+0x3a4>
c0005be5:	eb 30                	jmp    c0005c17 <f_lseek+0x3cb>
c0005be7:	89 c2                	mov    edx,eax
c0005be9:	89 d8                	mov    eax,ebx
c0005beb:	e8 11 d1 ff ff       	call   c0002d01 <get_fat>
c0005bf0:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf3:	0f 84 25 fd ff ff    	je     c000591e <f_lseek+0xd2>
c0005bf9:	83 f8 01             	cmp    eax,0x1
c0005bfc:	0f 86 06 fd ff ff    	jbe    c0005908 <f_lseek+0xbc>
c0005c02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c06:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c09:	0f 86 f9 fc ff ff    	jbe    c0005908 <f_lseek+0xbc>
c0005c0f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c12:	e9 5b ff ff ff       	jmp    c0005b72 <f_lseek+0x326>
c0005c17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c26:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c29:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c2d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c30:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c33:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c36:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c3c:	0f 84 6f fe ff ff    	je     c0005ab1 <f_lseek+0x265>
c0005c42:	89 c2                	mov    edx,eax
c0005c44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c48:	e8 e7 bf ff ff       	call   c0001c34 <clst2sect>
c0005c4d:	89 d7                	mov    edi,edx
c0005c4f:	09 c7                	or     edi,eax
c0005c51:	0f 84 b1 fc ff ff    	je     c0005908 <f_lseek+0xbc>
c0005c57:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c5e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c62:	c1 ef 09             	shr    edi,0x9
c0005c65:	01 c6                	add    esi,eax
c0005c67:	11 d7                	adc    edi,edx
c0005c69:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c6c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c72:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c75:	19 d1                	sbb    ecx,edx
c0005c77:	73 0a                	jae    c0005c83 <f_lseek+0x437>
c0005c79:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c7c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c7f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c83:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c88:	74 6d                	je     c0005cf7 <f_lseek+0x4ab>
c0005c8a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c90:	39 fa                	cmp    edx,edi
c0005c92:	75 04                	jne    c0005c98 <f_lseek+0x44c>
c0005c94:	39 f0                	cmp    eax,esi
c0005c96:	74 5f                	je     c0005cf7 <f_lseek+0x4ab>
c0005c98:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c9b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c9f:	79 25                	jns    c0005cc6 <f_lseek+0x47a>
c0005ca1:	83 ec 0c             	sub    esp,0xc
c0005ca4:	6a 01                	push   0x1
c0005ca6:	52                   	push   edx
c0005ca7:	50                   	push   eax
c0005ca8:	55                   	push   ebp
c0005ca9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cad:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cb1:	50                   	push   eax
c0005cb2:	e8 af bc ff ff       	call   c0001966 <disk_write>
c0005cb7:	83 c4 20             	add    esp,0x20
c0005cba:	85 c0                	test   eax,eax
c0005cbc:	0f 85 5c fc ff ff    	jne    c000591e <f_lseek+0xd2>
c0005cc2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cc6:	83 ec 0c             	sub    esp,0xc
c0005cc9:	6a 01                	push   0x1
c0005ccb:	57                   	push   edi
c0005ccc:	56                   	push   esi
c0005ccd:	55                   	push   ebp
c0005cce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cd2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cd6:	50                   	push   eax
c0005cd7:	e8 74 bc ff ff       	call   c0001950 <disk_read>
c0005cdc:	83 c4 20             	add    esp,0x20
c0005cdf:	85 c0                	test   eax,eax
c0005ce1:	0f 85 37 fc ff ff    	jne    c000591e <f_lseek+0xd2>
c0005ce7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cea:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ced:	eb 08                	jmp    c0005cf7 <f_lseek+0x4ab>
c0005cef:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cfb:	83 c4 3c             	add    esp,0x3c
c0005cfe:	5b                   	pop    ebx
c0005cff:	5e                   	pop    esi
c0005d00:	5f                   	pop    edi
c0005d01:	5d                   	pop    ebp
c0005d02:	c3                   	ret    

c0005d03 <f_opendir>:
c0005d03:	56                   	push   esi
c0005d04:	b8 09 00 00 00       	mov    eax,0x9
c0005d09:	53                   	push   ebx
c0005d0a:	83 ec 24             	sub    esp,0x24
c0005d0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d11:	85 db                	test   ebx,ebx
c0005d13:	0f 84 e6 00 00 00    	je     c0005dff <f_opendir+0xfc>
c0005d19:	31 c9                	xor    ecx,ecx
c0005d1b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d1f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d23:	e8 03 c7 ff ff       	call   c000242b <mount_volume>
c0005d28:	85 c0                	test   eax,eax
c0005d2a:	0f 85 c9 00 00 00    	jne    c0005df9 <f_opendir+0xf6>
c0005d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d34:	83 ec 0c             	sub    esp,0xc
c0005d37:	89 03                	mov    DWORD PTR [ebx],eax
c0005d39:	68 60 04 00 00       	push   0x460
c0005d3e:	e8 8b 24 00 00       	call   c00081ce <ff_memalloc>
c0005d43:	83 c4 10             	add    esp,0x10
c0005d46:	89 c6                	mov    esi,eax
c0005d48:	b8 11 00 00 00       	mov    eax,0x11
c0005d4d:	85 f6                	test   esi,esi
c0005d4f:	0f 84 aa 00 00 00    	je     c0005dff <f_opendir+0xfc>
c0005d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d59:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d5f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d62:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d69:	89 d8                	mov    eax,ebx
c0005d6b:	e8 31 ee ff ff       	call   c0004ba1 <follow_path>
c0005d70:	85 c0                	test   eax,eax
c0005d72:	75 61                	jne    c0005dd5 <f_opendir+0xd2>
c0005d74:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d78:	78 46                	js     c0005dc0 <f_opendir+0xbd>
c0005d7a:	b8 05 00 00 00       	mov    eax,0x5
c0005d7f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d83:	74 50                	je     c0005dd5 <f_opendir+0xd2>
c0005d85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d89:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d8b:	3c 04                	cmp    al,0x4
c0005d8d:	75 26                	jne    c0005db5 <f_opendir+0xb2>
c0005d8f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d92:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d95:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d98:	30 d2                	xor    dl,dl
c0005d9a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d9e:	09 c2                	or     edx,eax
c0005da0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005da3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005da6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005da9:	89 da                	mov    edx,ebx
c0005dab:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dae:	e8 b4 ed ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0005db3:	eb 0b                	jmp    c0005dc0 <f_opendir+0xbd>
c0005db5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005db8:	e8 59 ed ff ff       	call   c0004b16 <ld_clust.isra.0>
c0005dbd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc4:	31 d2                	xor    edx,edx
c0005dc6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dca:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dce:	89 d8                	mov    eax,ebx
c0005dd0:	e8 22 d1 ff ff       	call   c0002ef7 <dir_sdi>
c0005dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd9:	83 ec 0c             	sub    esp,0xc
c0005ddc:	56                   	push   esi
c0005ddd:	e8 02 24 00 00       	call   c00081e4 <ff_memfree>
c0005de2:	83 c4 10             	add    esp,0x10
c0005de5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005de9:	83 f8 04             	cmp    eax,0x4
c0005dec:	74 06                	je     c0005df4 <f_opendir+0xf1>
c0005dee:	85 c0                	test   eax,eax
c0005df0:	74 0d                	je     c0005dff <f_opendir+0xfc>
c0005df2:	eb 05                	jmp    c0005df9 <f_opendir+0xf6>
c0005df4:	b8 05 00 00 00       	mov    eax,0x5
c0005df9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005dff:	83 c4 24             	add    esp,0x24
c0005e02:	5b                   	pop    ebx
c0005e03:	5e                   	pop    esi
c0005e04:	c3                   	ret    

c0005e05 <f_closedir>:
c0005e05:	53                   	push   ebx
c0005e06:	83 ec 18             	sub    esp,0x18
c0005e09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e0d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e11:	89 d8                	mov    eax,ebx
c0005e13:	e8 86 c2 ff ff       	call   c000209e <validate>
c0005e18:	85 c0                	test   eax,eax
c0005e1a:	75 06                	jne    c0005e22 <f_closedir+0x1d>
c0005e1c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e22:	83 c4 18             	add    esp,0x18
c0005e25:	5b                   	pop    ebx
c0005e26:	c3                   	ret    

c0005e27 <f_readdir>:
c0005e27:	57                   	push   edi
c0005e28:	56                   	push   esi
c0005e29:	53                   	push   ebx
c0005e2a:	83 ec 20             	sub    esp,0x20
c0005e2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e35:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e39:	89 d8                	mov    eax,ebx
c0005e3b:	e8 5e c2 ff ff       	call   c000209e <validate>
c0005e40:	85 c0                	test   eax,eax
c0005e42:	75 77                	jne    c0005ebb <f_readdir+0x94>
c0005e44:	85 ff                	test   edi,edi
c0005e46:	75 0b                	jne    c0005e53 <f_readdir+0x2c>
c0005e48:	31 d2                	xor    edx,edx
c0005e4a:	89 d8                	mov    eax,ebx
c0005e4c:	e8 a6 d0 ff ff       	call   c0002ef7 <dir_sdi>
c0005e51:	eb 68                	jmp    c0005ebb <f_readdir+0x94>
c0005e53:	83 ec 0c             	sub    esp,0xc
c0005e56:	68 60 04 00 00       	push   0x460
c0005e5b:	e8 6e 23 00 00       	call   c00081ce <ff_memalloc>
c0005e60:	83 c4 10             	add    esp,0x10
c0005e63:	89 c6                	mov    esi,eax
c0005e65:	b8 11 00 00 00       	mov    eax,0x11
c0005e6a:	85 f6                	test   esi,esi
c0005e6c:	74 4d                	je     c0005ebb <f_readdir+0x94>
c0005e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e72:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e78:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e7b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e7e:	31 d2                	xor    edx,edx
c0005e80:	89 d8                	mov    eax,ebx
c0005e82:	e8 80 d8 ff ff       	call   c0003707 <dir_read>
c0005e87:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e8c:	75 19                	jne    c0005ea7 <f_readdir+0x80>
c0005e8e:	89 fa                	mov    edx,edi
c0005e90:	89 d8                	mov    eax,ebx
c0005e92:	e8 7e ea ff ff       	call   c0004915 <get_fileinfo>
c0005e97:	31 d2                	xor    edx,edx
c0005e99:	89 d8                	mov    eax,ebx
c0005e9b:	e8 af d5 ff ff       	call   c000344f <dir_next>
c0005ea0:	83 f8 04             	cmp    eax,0x4
c0005ea3:	75 02                	jne    c0005ea7 <f_readdir+0x80>
c0005ea5:	31 c0                	xor    eax,eax
c0005ea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eab:	83 ec 0c             	sub    esp,0xc
c0005eae:	56                   	push   esi
c0005eaf:	e8 30 23 00 00       	call   c00081e4 <ff_memfree>
c0005eb4:	83 c4 10             	add    esp,0x10
c0005eb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ebb:	83 c4 20             	add    esp,0x20
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	c3                   	ret    

c0005ec2 <f_stat>:
c0005ec2:	57                   	push   edi
c0005ec3:	31 c9                	xor    ecx,ecx
c0005ec5:	56                   	push   esi
c0005ec6:	53                   	push   ebx
c0005ec7:	83 ec 50             	sub    esp,0x50
c0005eca:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ece:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ed2:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ed6:	e8 50 c5 ff ff       	call   c000242b <mount_volume>
c0005edb:	89 c3                	mov    ebx,eax
c0005edd:	85 c0                	test   eax,eax
c0005edf:	75 67                	jne    c0005f48 <f_stat+0x86>
c0005ee1:	83 ec 0c             	sub    esp,0xc
c0005ee4:	bb 11 00 00 00       	mov    ebx,0x11
c0005ee9:	68 60 04 00 00       	push   0x460
c0005eee:	e8 db 22 00 00       	call   c00081ce <ff_memalloc>
c0005ef3:	83 c4 10             	add    esp,0x10
c0005ef6:	89 c6                	mov    esi,eax
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	74 4c                	je     c0005f48 <f_stat+0x86>
c0005efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f06:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f09:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f0c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 88 ec ff ff       	call   c0004ba1 <follow_path>
c0005f19:	89 c3                	mov    ebx,eax
c0005f1b:	85 c0                	test   eax,eax
c0005f1d:	75 1d                	jne    c0005f3c <f_stat+0x7a>
c0005f1f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f24:	78 11                	js     c0005f37 <f_stat+0x75>
c0005f26:	85 ff                	test   edi,edi
c0005f28:	74 12                	je     c0005f3c <f_stat+0x7a>
c0005f2a:	89 fa                	mov    edx,edi
c0005f2c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f30:	e8 e0 e9 ff ff       	call   c0004915 <get_fileinfo>
c0005f35:	eb 05                	jmp    c0005f3c <f_stat+0x7a>
c0005f37:	bb 06 00 00 00       	mov    ebx,0x6
c0005f3c:	83 ec 0c             	sub    esp,0xc
c0005f3f:	56                   	push   esi
c0005f40:	e8 9f 22 00 00       	call   c00081e4 <ff_memfree>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	83 c4 50             	add    esp,0x50
c0005f4b:	89 d8                	mov    eax,ebx
c0005f4d:	5b                   	pop    ebx
c0005f4e:	5e                   	pop    esi
c0005f4f:	5f                   	pop    edi
c0005f50:	c3                   	ret    

c0005f51 <f_getfree>:
c0005f51:	55                   	push   ebp
c0005f52:	31 c9                	xor    ecx,ecx
c0005f54:	57                   	push   edi
c0005f55:	56                   	push   esi
c0005f56:	53                   	push   ebx
c0005f57:	83 ec 5c             	sub    esp,0x5c
c0005f5a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f62:	e8 c4 c4 ff ff       	call   c000242b <mount_volume>
c0005f67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 9d 01 00 00    	jne    c0006110 <f_getfree+0x1bf>
c0005f73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f7b:	89 02                	mov    DWORD PTR [edx],eax
c0005f7d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f83:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f86:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f8a:	39 f2                	cmp    edx,esi
c0005f8c:	77 0b                	ja     c0005f99 <f_getfree+0x48>
c0005f8e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f92:	89 10                	mov    DWORD PTR [eax],edx
c0005f94:	e9 77 01 00 00       	jmp    c0006110 <f_getfree+0x1bf>
c0005f99:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f9b:	80 fa 01             	cmp    dl,0x1
c0005f9e:	75 3a                	jne    c0005fda <f_getfree+0x89>
c0005fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fa4:	be 02 00 00 00       	mov    esi,0x2
c0005fa9:	31 db                	xor    ebx,ebx
c0005fab:	89 f2                	mov    edx,esi
c0005fad:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fb1:	e8 4b cd ff ff       	call   c0002d01 <get_fat>
c0005fb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005fb9:	0f 84 28 01 00 00    	je     c00060e7 <f_getfree+0x196>
c0005fbf:	83 f8 01             	cmp    eax,0x1
c0005fc2:	0f 84 29 01 00 00    	je     c00060f1 <f_getfree+0x1a0>
c0005fc8:	83 d3 00             	adc    ebx,0x0
c0005fcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fcf:	46                   	inc    esi
c0005fd0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fd3:	77 d6                	ja     c0005fab <f_getfree+0x5a>
c0005fd5:	e9 25 01 00 00       	jmp    c00060ff <f_getfree+0x1ae>
c0005fda:	80 fa 04             	cmp    dl,0x4
c0005fdd:	0f 85 88 00 00 00    	jne    c000606b <f_getfree+0x11a>
c0005fe3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fe6:	31 ed                	xor    ebp,ebp
c0005fe8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005feb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ff3:	31 db                	xor    ebx,ebx
c0005ff5:	85 ed                	test   ebp,ebp
c0005ff7:	75 3f                	jne    c0006038 <f_getfree+0xe7>
c0005ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006001:	83 c0 01             	add    eax,0x1
c0006004:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006008:	83 d2 00             	adc    edx,0x0
c000600b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000600f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006017:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000601b:	e8 59 c1 ff ff       	call   c0002179 <move_window>
c0006020:	85 c0                	test   eax,eax
c0006022:	0f 85 d3 00 00 00    	jne    c00060fb <f_getfree+0x1aa>
c0006028:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000602c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006034:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000603c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000603f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006043:	89 cf                	mov    edi,ecx
c0006045:	85 f6                	test   esi,esi
c0006047:	74 12                	je     c000605b <f_getfree+0x10a>
c0006049:	88 c1                	mov    cl,al
c000604b:	83 e1 01             	and    ecx,0x1
c000604e:	80 f9 01             	cmp    cl,0x1
c0006051:	83 d3 00             	adc    ebx,0x0
c0006054:	d0 e8                	shr    al,1
c0006056:	4e                   	dec    esi
c0006057:	39 fe                	cmp    esi,edi
c0006059:	75 ea                	jne    c0006045 <f_getfree+0xf4>
c000605b:	45                   	inc    ebp
c000605c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006062:	85 f6                	test   esi,esi
c0006064:	75 8f                	jne    c0005ff5 <f_getfree+0xa4>
c0006066:	e9 94 00 00 00       	jmp    c00060ff <f_getfree+0x1ae>
c000606b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000606e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006071:	31 f6                	xor    esi,esi
c0006073:	31 db                	xor    ebx,ebx
c0006075:	85 f6                	test   esi,esi
c0006077:	75 1b                	jne    c0006094 <f_getfree+0x143>
c0006079:	89 d7                	mov    edi,edx
c000607b:	89 cd                	mov    ebp,ecx
c000607d:	83 c7 01             	add    edi,0x1
c0006080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006084:	83 d5 00             	adc    ebp,0x0
c0006087:	e8 ed c0 ff ff       	call   c0002179 <move_window>
c000608c:	85 c0                	test   eax,eax
c000608e:	75 6b                	jne    c00060fb <f_getfree+0x1aa>
c0006090:	89 fa                	mov    edx,edi
c0006092:	89 e9                	mov    ecx,ebp
c0006094:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006098:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000609c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00060a0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00060a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060a7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060ab:	75 11                	jne    c00060be <f_getfree+0x16d>
c00060ad:	e8 e9 b8 ff ff       	call   c000199b <ld_word>
c00060b2:	66 83 f8 01          	cmp    ax,0x1
c00060b6:	83 d3 00             	adc    ebx,0x0
c00060b9:	83 c6 02             	add    esi,0x2
c00060bc:	eb 13                	jmp    c00060d1 <f_getfree+0x180>
c00060be:	e8 e5 b8 ff ff       	call   c00019a8 <ld_dword>
c00060c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060c8:	83 f8 01             	cmp    eax,0x1
c00060cb:	83 d3 00             	adc    ebx,0x0
c00060ce:	83 c6 04             	add    esi,0x4
c00060d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060df:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060e3:	75 90                	jne    c0006075 <f_getfree+0x124>
c00060e5:	eb 18                	jmp    c00060ff <f_getfree+0x1ae>
c00060e7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060ef:	eb 0e                	jmp    c00060ff <f_getfree+0x1ae>
c00060f1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060f9:	eb 04                	jmp    c00060ff <f_getfree+0x1ae>
c00060fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060ff:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006103:	89 18                	mov    DWORD PTR [eax],ebx
c0006105:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006109:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000610c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006114:	83 c4 5c             	add    esp,0x5c
c0006117:	5b                   	pop    ebx
c0006118:	5e                   	pop    esi
c0006119:	5f                   	pop    edi
c000611a:	5d                   	pop    ebp
c000611b:	c3                   	ret    

c000611c <f_truncate>:
c000611c:	56                   	push   esi
c000611d:	53                   	push   ebx
c000611e:	83 ec 14             	sub    esp,0x14
c0006121:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006125:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006129:	89 d8                	mov    eax,ebx
c000612b:	e8 6e bf ff ff       	call   c000209e <validate>
c0006130:	89 c6                	mov    esi,eax
c0006132:	85 c0                	test   eax,eax
c0006134:	0f 85 d2 00 00 00    	jne    c000620c <f_truncate+0xf0>
c000613a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000613e:	85 f6                	test   esi,esi
c0006140:	0f 85 c6 00 00 00    	jne    c000620c <f_truncate+0xf0>
c0006146:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000614a:	0f 84 b7 00 00 00    	je     c0006207 <f_truncate+0xeb>
c0006150:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006153:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006156:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006159:	89 d1                	mov    ecx,edx
c000615b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000615e:	0f 83 a8 00 00 00    	jae    c000620c <f_truncate+0xf0>
c0006164:	09 c2                	or     edx,eax
c0006166:	75 15                	jne    c000617d <f_truncate+0x61>
c0006168:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	89 d8                	mov    eax,ebx
c000616f:	e8 7a d0 ff ff       	call   c00031ee <remove_chain>
c0006174:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000617b:	eb 35                	jmp    c00061b2 <f_truncate+0x96>
c000617d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006180:	89 d8                	mov    eax,ebx
c0006182:	e8 7a cb ff ff       	call   c0002d01 <get_fat>
c0006187:	89 c2                	mov    edx,eax
c0006189:	b8 01 00 00 00       	mov    eax,0x1
c000618e:	83 fa ff             	cmp    edx,0xffffffff
c0006191:	74 1f                	je     c00061b2 <f_truncate+0x96>
c0006193:	b8 02 00 00 00       	mov    eax,0x2
c0006198:	83 fa 01             	cmp    edx,0x1
c000619b:	74 15                	je     c00061b2 <f_truncate+0x96>
c000619d:	31 c0                	xor    eax,eax
c000619f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061a3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00061a6:	76 0a                	jbe    c00061b2 <f_truncate+0x96>
c00061a8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00061ab:	89 d8                	mov    eax,ebx
c00061ad:	e8 3c d0 ff ff       	call   c00031ee <remove_chain>
c00061b2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061b5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061bb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061be:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061c1:	83 ca 40             	or     edx,0x40
c00061c4:	85 c0                	test   eax,eax
c00061c6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061c9:	75 35                	jne    c0006200 <f_truncate+0xe4>
c00061cb:	84 d2                	test   dl,dl
c00061cd:	79 3d                	jns    c000620c <f_truncate+0xf0>
c00061cf:	83 ec 0c             	sub    esp,0xc
c00061d2:	8d 43 50             	lea    eax,[ebx+0x50]
c00061d5:	6a 01                	push   0x1
c00061d7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061dd:	50                   	push   eax
c00061de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061e6:	50                   	push   eax
c00061e7:	e8 7a b7 ff ff       	call   c0001966 <disk_write>
c00061ec:	83 c4 20             	add    esp,0x20
c00061ef:	85 c0                	test   eax,eax
c00061f1:	75 08                	jne    c00061fb <f_truncate+0xdf>
c00061f3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061f7:	31 f6                	xor    esi,esi
c00061f9:	eb 11                	jmp    c000620c <f_truncate+0xf0>
c00061fb:	b8 01 00 00 00       	mov    eax,0x1
c0006200:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006203:	89 c6                	mov    esi,eax
c0006205:	eb 05                	jmp    c000620c <f_truncate+0xf0>
c0006207:	be 07 00 00 00       	mov    esi,0x7
c000620c:	89 f0                	mov    eax,esi
c000620e:	83 c4 14             	add    esp,0x14
c0006211:	5b                   	pop    ebx
c0006212:	5e                   	pop    esi
c0006213:	c3                   	ret    

c0006214 <f_unlink>:
c0006214:	56                   	push   esi
c0006215:	b9 02 00 00 00       	mov    ecx,0x2
c000621a:	53                   	push   ebx
c000621b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006221:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006225:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000622c:	e8 fa c1 ff ff       	call   c000242b <mount_volume>
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 55 01 00 00    	jne    c000638e <f_unlink+0x17a>
c0006239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000623d:	83 ec 0c             	sub    esp,0xc
c0006240:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006244:	68 60 04 00 00       	push   0x460
c0006249:	e8 80 1f 00 00       	call   c00081ce <ff_memalloc>
c000624e:	83 c4 10             	add    esp,0x10
c0006251:	89 c3                	mov    ebx,eax
c0006253:	b8 11 00 00 00       	mov    eax,0x11
c0006258:	85 db                	test   ebx,ebx
c000625a:	0f 84 2e 01 00 00    	je     c000638e <f_unlink+0x17a>
c0006260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006264:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000626a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000626d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006270:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006277:	8d 44 24 48          	lea    eax,[esp+0x48]
c000627b:	e8 21 e9 ff ff       	call   c0004ba1 <follow_path>
c0006280:	85 c0                	test   eax,eax
c0006282:	0f 85 f2 00 00 00    	jne    c000637a <f_unlink+0x166>
c0006288:	b8 06 00 00 00       	mov    eax,0x6
c000628d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006295:	0f 88 df 00 00 00    	js     c000637a <f_unlink+0x166>
c000629b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062a0:	74 0a                	je     c00062ac <f_unlink+0x98>
c00062a2:	b8 07 00 00 00       	mov    eax,0x7
c00062a7:	e9 ce 00 00 00       	jmp    c000637a <f_unlink+0x166>
c00062ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062b0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062b4:	8a 02                	mov    al,BYTE PTR [edx]
c00062b6:	3c 04                	cmp    al,0x4
c00062b8:	75 12                	jne    c00062cc <f_unlink+0xb8>
c00062ba:	8d 42 10             	lea    eax,[edx+0x10]
c00062bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062c1:	e8 a1 e8 ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c00062c6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ca:	eb 0e                	jmp    c00062da <f_unlink+0xc6>
c00062cc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062d3:	e8 3e e8 ff ff       	call   c0004b16 <ld_clust.isra.0>
c00062d8:	89 c6                	mov    esi,eax
c00062da:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062df:	75 12                	jne    c00062f3 <f_unlink+0xdf>
c00062e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e5:	e8 94 d6 ff ff       	call   c000397e <dir_remove>
c00062ea:	85 c0                	test   eax,eax
c00062ec:	74 6c                	je     c000635a <f_unlink+0x146>
c00062ee:	e9 87 00 00 00       	jmp    c000637a <f_unlink+0x166>
c00062f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062f7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062fe:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006305:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006308:	75 21                	jne    c000632b <f_unlink+0x117>
c000630a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000630e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006312:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006319:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006320:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006324:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000632b:	31 d2                	xor    edx,edx
c000632d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006334:	e8 be cb ff ff       	call   c0002ef7 <dir_sdi>
c0006339:	85 c0                	test   eax,eax
c000633b:	75 3d                	jne    c000637a <f_unlink+0x166>
c000633d:	31 d2                	xor    edx,edx
c000633f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006346:	e8 bc d3 ff ff       	call   c0003707 <dir_read>
c000634b:	85 c0                	test   eax,eax
c000634d:	0f 84 4f ff ff ff    	je     c00062a2 <f_unlink+0x8e>
c0006353:	83 f8 04             	cmp    eax,0x4
c0006356:	75 22                	jne    c000637a <f_unlink+0x166>
c0006358:	eb 87                	jmp    c00062e1 <f_unlink+0xcd>
c000635a:	85 f6                	test   esi,esi
c000635c:	75 0b                	jne    c0006369 <f_unlink+0x155>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	e8 3d df ff ff       	call   c00042a4 <sync_fs>
c0006367:	eb 11                	jmp    c000637a <f_unlink+0x166>
c0006369:	31 c9                	xor    ecx,ecx
c000636b:	89 f2                	mov    edx,esi
c000636d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006371:	e8 78 ce ff ff       	call   c00031ee <remove_chain>
c0006376:	85 c0                	test   eax,eax
c0006378:	74 e4                	je     c000635e <f_unlink+0x14a>
c000637a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000637e:	83 ec 0c             	sub    esp,0xc
c0006381:	53                   	push   ebx
c0006382:	e8 5d 1e 00 00       	call   c00081e4 <ff_memfree>
c0006387:	83 c4 10             	add    esp,0x10
c000638a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000638e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006394:	5b                   	pop    ebx
c0006395:	5e                   	pop    esi
c0006396:	c3                   	ret    

c0006397 <f_mkdir>:
c0006397:	57                   	push   edi
c0006398:	b9 02 00 00 00       	mov    ecx,0x2
c000639d:	56                   	push   esi
c000639e:	53                   	push   ebx
c000639f:	83 c4 80             	add    esp,0xffffff80
c00063a2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00063a6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063ad:	e8 79 c0 ff ff       	call   c000242b <mount_volume>
c00063b2:	89 c3                	mov    ebx,eax
c00063b4:	85 c0                	test   eax,eax
c00063b6:	0f 85 fe 01 00 00    	jne    c00065ba <f_mkdir+0x223>
c00063bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063c0:	bb 11 00 00 00       	mov    ebx,0x11
c00063c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063c9:	83 ec 0c             	sub    esp,0xc
c00063cc:	68 60 04 00 00       	push   0x460
c00063d1:	e8 f8 1d 00 00       	call   c00081ce <ff_memalloc>
c00063d6:	83 c4 10             	add    esp,0x10
c00063d9:	89 c7                	mov    edi,eax
c00063db:	85 c0                	test   eax,eax
c00063dd:	0f 84 d7 01 00 00    	je     c00065ba <f_mkdir+0x223>
c00063e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063e7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063f3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063fe:	e8 9e e7 ff ff       	call   c0004ba1 <follow_path>
c0006403:	89 c3                	mov    ebx,eax
c0006405:	85 c0                	test   eax,eax
c0006407:	74 3e                	je     c0006447 <f_mkdir+0xb0>
c0006409:	83 f8 04             	cmp    eax,0x4
c000640c:	75 3e                	jne    c000644c <f_mkdir+0xb5>
c000640e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006412:	31 d2                	xor    edx,edx
c0006414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006418:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000641c:	e8 ce cb ff ff       	call   c0002fef <create_chain>
c0006421:	89 c6                	mov    esi,eax
c0006423:	85 c0                	test   eax,eax
c0006425:	74 0c                	je     c0006433 <f_mkdir+0x9c>
c0006427:	bb 02 00 00 00       	mov    ebx,0x2
c000642c:	83 f8 01             	cmp    eax,0x1
c000642f:	74 07                	je     c0006438 <f_mkdir+0xa1>
c0006431:	eb 2a                	jmp    c000645d <f_mkdir+0xc6>
c0006433:	bb 07 00 00 00       	mov    ebx,0x7
c0006438:	31 c9                	xor    ecx,ecx
c000643a:	89 f2                	mov    edx,esi
c000643c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006440:	e8 a9 cd ff ff       	call   c00031ee <remove_chain>
c0006445:	eb 05                	jmp    c000644c <f_mkdir+0xb5>
c0006447:	bb 08 00 00 00       	mov    ebx,0x8
c000644c:	83 ec 0c             	sub    esp,0xc
c000644f:	57                   	push   edi
c0006450:	e8 8f 1d 00 00       	call   c00081e4 <ff_memfree>
c0006455:	83 c4 10             	add    esp,0x10
c0006458:	e9 5d 01 00 00       	jmp    c00065ba <f_mkdir+0x223>
c000645d:	bb 01 00 00 00       	mov    ebx,0x1
c0006462:	83 f8 ff             	cmp    eax,0xffffffff
c0006465:	74 d1                	je     c0006438 <f_mkdir+0xa1>
c0006467:	89 f2                	mov    edx,esi
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	e8 c4 ce ff ff       	call   c0003336 <dir_clear>
c0006472:	89 c3                	mov    ebx,eax
c0006474:	85 c0                	test   eax,eax
c0006476:	75 c0                	jne    c0006438 <f_mkdir+0xa1>
c0006478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000647f:	74 69                	je     c00064ea <f_mkdir+0x153>
c0006481:	b9 0b 00 00 00       	mov    ecx,0xb
c0006486:	83 c0 54             	add    eax,0x54
c0006489:	ba 20 00 00 00       	mov    edx,0x20
c000648e:	e8 9c b5 ff ff       	call   c0001a2f <mem_set>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	ba 00 00 21 50       	mov    edx,0x50210000
c000649c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00064a0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00064a4:	83 c0 6a             	add    eax,0x6a
c00064a7:	e8 65 b5 ff ff       	call   c0001a11 <st_dword>
c00064ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b0:	89 f1                	mov    ecx,esi
c00064b2:	8d 50 54             	lea    edx,[eax+0x54]
c00064b5:	e8 85 e6 ff ff       	call   c0004b3f <st_clust.isra.1>
c00064ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064be:	b9 20 00 00 00       	mov    ecx,0x20
c00064c3:	8d 50 54             	lea    edx,[eax+0x54]
c00064c6:	83 c0 74             	add    eax,0x74
c00064c9:	e8 4c b5 ff ff       	call   c0001a1a <mem_cpy>
c00064ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064d6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064da:	8d 50 74             	lea    edx,[eax+0x74]
c00064dd:	e8 5d e6 ff ff       	call   c0004b3f <st_clust.isra.1>
c00064e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ea:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ee:	e8 2f db ff ff       	call   c0004022 <dir_register>
c00064f3:	89 c3                	mov    ebx,eax
c00064f5:	85 c0                	test   eax,eax
c00064f7:	0f 85 3b ff ff ff    	jne    c0006438 <f_mkdir+0xa1>
c00064fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006501:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006504:	75 74                	jne    c000657a <f_mkdir+0x1e3>
c0006506:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006509:	ba 00 00 21 50       	mov    edx,0x50210000
c000650e:	83 c0 0c             	add    eax,0xc
c0006511:	e8 fb b4 ff ff       	call   c0001a11 <st_dword>
c0006516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651a:	89 f2                	mov    edx,esi
c000651c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000651f:	83 c0 34             	add    eax,0x34
c0006522:	e8 ea b4 ff ff       	call   c0001a11 <st_dword>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000652f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006532:	c1 e2 09             	shl    edx,0x9
c0006535:	83 c0 38             	add    eax,0x38
c0006538:	e8 d4 b4 ff ff       	call   c0001a11 <st_dword>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006545:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006548:	c1 e2 09             	shl    edx,0x9
c000654b:	83 c0 28             	add    eax,0x28
c000654e:	e8 be b4 ff ff       	call   c0001a11 <st_dword>
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000655a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000655e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006561:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006565:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006569:	e8 8b d3 ff ff       	call   c00038f9 <store_xdir>
c000656e:	89 c3                	mov    ebx,eax
c0006570:	85 c0                	test   eax,eax
c0006572:	0f 85 d4 fe ff ff    	jne    c000644c <f_mkdir+0xb5>
c0006578:	eb 30                	jmp    c00065aa <f_mkdir+0x213>
c000657a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000657e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006583:	83 c0 16             	add    eax,0x16
c0006586:	e8 86 b4 ff ff       	call   c0001a11 <st_dword>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	89 f1                	mov    ecx,esi
c0006591:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006595:	e8 a5 e5 ff ff       	call   c0004b3f <st_clust.isra.1>
c000659a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000659e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ae:	e8 f1 dc ff ff       	call   c00042a4 <sync_fs>
c00065b3:	89 c3                	mov    ebx,eax
c00065b5:	e9 92 fe ff ff       	jmp    c000644c <f_mkdir+0xb5>
c00065ba:	83 ec 80             	sub    esp,0xffffff80
c00065bd:	89 d8                	mov    eax,ebx
c00065bf:	5b                   	pop    ebx
c00065c0:	5e                   	pop    esi
c00065c1:	5f                   	pop    edi
c00065c2:	c3                   	ret    

c00065c3 <f_rename>:
c00065c3:	55                   	push   ebp
c00065c4:	57                   	push   edi
c00065c5:	56                   	push   esi
c00065c6:	53                   	push   ebx
c00065c7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065d4:	e8 a4 b9 ff ff       	call   c0001f7d <get_ldnumber>
c00065d9:	b9 02 00 00 00       	mov    ecx,0x2
c00065de:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065e2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065e9:	e8 3d be ff ff       	call   c000242b <mount_volume>
c00065ee:	85 c0                	test   eax,eax
c00065f0:	0f 85 b5 02 00 00    	jne    c00068ab <f_rename+0x2e8>
c00065f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065fa:	83 ec 0c             	sub    esp,0xc
c00065fd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006601:	68 60 04 00 00       	push   0x460
c0006606:	e8 c3 1b 00 00       	call   c00081ce <ff_memalloc>
c000660b:	83 c4 10             	add    esp,0x10
c000660e:	89 c3                	mov    ebx,eax
c0006610:	b8 11 00 00 00       	mov    eax,0x11
c0006615:	85 db                	test   ebx,ebx
c0006617:	0f 84 8e 02 00 00    	je     c00068ab <f_rename+0x2e8>
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006627:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000662a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000662d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006634:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006638:	e8 64 e5 ff ff       	call   c0004ba1 <follow_path>
c000663d:	85 c0                	test   eax,eax
c000663f:	0f 85 52 02 00 00    	jne    c0006897 <f_rename+0x2d4>
c0006645:	b8 06 00 00 00       	mov    eax,0x6
c000664a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006652:	0f 85 3f 02 00 00    	jne    c0006897 <f_rename+0x2d4>
c0006658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000665f:	0f 85 05 01 00 00    	jne    c000676a <f_rename+0x1a7>
c0006665:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006668:	b9 40 00 00 00       	mov    ecx,0x40
c000666d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006671:	e8 a4 b3 ff ff       	call   c0001a1a <mem_cpy>
c0006676:	b9 4c 00 00 00       	mov    ecx,0x4c
c000667b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000667f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006686:	e8 8f b3 ff ff       	call   c0001a1a <mem_cpy>
c000668b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006692:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006699:	e8 03 e5 ff ff       	call   c0004ba1 <follow_path>
c000669e:	85 c0                	test   eax,eax
c00066a0:	75 29                	jne    c00066cb <f_rename+0x108>
c00066a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00066a6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066ad:	74 0a                	je     c00066b9 <f_rename+0xf6>
c00066af:	b8 08 00 00 00       	mov    eax,0x8
c00066b4:	e9 de 01 00 00       	jmp    c0006897 <f_rename+0x2d4>
c00066b9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066c0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066c7:	75 e6                	jne    c00066af <f_rename+0xec>
c00066c9:	eb 09                	jmp    c00066d4 <f_rename+0x111>
c00066cb:	83 f8 04             	cmp    eax,0x4
c00066ce:	0f 85 c3 01 00 00    	jne    c0006897 <f_rename+0x2d4>
c00066d4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066db:	e8 42 d9 ff ff       	call   c0004022 <dir_register>
c00066e0:	85 c0                	test   eax,eax
c00066e2:	0f 85 af 01 00 00    	jne    c0006897 <f_rename+0x2d4>
c00066e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ec:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066ef:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066f2:	89 c5                	mov    ebp,eax
c00066f4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066fb:	8d 46 24             	lea    eax,[esi+0x24]
c00066fe:	e8 98 b2 ff ff       	call   c000199b <ld_word>
c0006703:	b9 40 00 00 00       	mov    ecx,0x40
c0006708:	89 c7                	mov    edi,eax
c000670a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000670e:	89 f0                	mov    eax,esi
c0006710:	e8 05 b3 ff ff       	call   c0001a1a <mem_cpy>
c0006715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006719:	89 e9                	mov    ecx,ebp
c000671b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000671e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006721:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006729:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000672f:	0f b7 d7             	movzx  edx,di
c0006732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006735:	83 c0 24             	add    eax,0x24
c0006738:	e8 d0 b2 ff ff       	call   c0001a0d <st_word>
c000673d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006741:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006744:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006747:	a8 10                	test   al,0x10
c0006749:	75 06                	jne    c0006751 <f_rename+0x18e>
c000674b:	83 c8 20             	or     eax,0x20
c000674e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006751:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006758:	e8 9c d1 ff ff       	call   c00038f9 <store_xdir>
c000675d:	85 c0                	test   eax,eax
c000675f:	0f 84 1c 01 00 00    	je     c0006881 <f_rename+0x2be>
c0006765:	e9 2d 01 00 00       	jmp    c0006897 <f_rename+0x2d4>
c000676a:	b9 20 00 00 00       	mov    ecx,0x20
c000676f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006776:	8d 44 24 18          	lea    eax,[esp+0x18]
c000677a:	e8 9b b2 ff ff       	call   c0001a1a <mem_cpy>
c000677f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006784:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006788:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678f:	e8 86 b2 ff ff       	call   c0001a1a <mem_cpy>
c0006794:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000679b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067a2:	e8 fa e3 ff ff       	call   c0004ba1 <follow_path>
c00067a7:	85 c0                	test   eax,eax
c00067a9:	75 27                	jne    c00067d2 <f_rename+0x20f>
c00067ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067af:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067b6:	0f 85 f3 fe ff ff    	jne    c00066af <f_rename+0xec>
c00067bc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067c3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ca:	0f 85 df fe ff ff    	jne    c00066af <f_rename+0xec>
c00067d0:	eb 09                	jmp    c00067db <f_rename+0x218>
c00067d2:	83 f8 04             	cmp    eax,0x4
c00067d5:	0f 85 bc 00 00 00    	jne    c0006897 <f_rename+0x2d4>
c00067db:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067e2:	e8 3b d8 ff ff       	call   c0004022 <dir_register>
c00067e7:	85 c0                	test   eax,eax
c00067e9:	0f 85 a8 00 00 00    	jne    c0006897 <f_rename+0x2d4>
c00067ef:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067f6:	b9 13 00 00 00       	mov    ecx,0x13
c00067fb:	8d 46 0d             	lea    eax,[esi+0xd]
c00067fe:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006802:	e8 13 b2 ff ff       	call   c0001a1a <mem_cpy>
c0006807:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000680b:	a8 10                	test   al,0x10
c000680d:	75 03                	jne    c0006812 <f_rename+0x24f>
c000680f:	83 c8 20             	or     eax,0x20
c0006812:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006819:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000681d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006821:	74 5e                	je     c0006881 <f_rename+0x2be>
c0006823:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000682a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c000682e:	74 51                	je     c0006881 <f_rename+0x2be>
c0006830:	89 f2                	mov    edx,esi
c0006832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006836:	8a 07                	mov    al,BYTE PTR [edi]
c0006838:	e8 d9 e2 ff ff       	call   c0004b16 <ld_clust.isra.0>
c000683d:	89 c2                	mov    edx,eax
c000683f:	89 f8                	mov    eax,edi
c0006841:	e8 ee b3 ff ff       	call   c0001c34 <clst2sect>
c0006846:	89 c6                	mov    esi,eax
c0006848:	89 d1                	mov    ecx,edx
c000684a:	b8 02 00 00 00       	mov    eax,0x2
c000684f:	09 f2                	or     edx,esi
c0006851:	74 44                	je     c0006897 <f_rename+0x2d4>
c0006853:	89 f2                	mov    edx,esi
c0006855:	89 f8                	mov    eax,edi
c0006857:	e8 1d b9 ff ff       	call   c0002179 <move_window>
c000685c:	85 c0                	test   eax,eax
c000685e:	75 37                	jne    c0006897 <f_rename+0x2d4>
c0006860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006864:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006868:	75 17                	jne    c0006881 <f_rename+0x2be>
c000686a:	8d 50 74             	lea    edx,[eax+0x74]
c000686d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006874:	e8 c6 e2 ff ff       	call   c0004b3f <st_clust.isra.1>
c0006879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006881:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006885:	e8 f4 d0 ff ff       	call   c000397e <dir_remove>
c000688a:	85 c0                	test   eax,eax
c000688c:	75 09                	jne    c0006897 <f_rename+0x2d4>
c000688e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006892:	e8 0d da ff ff       	call   c00042a4 <sync_fs>
c0006897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000689b:	83 ec 0c             	sub    esp,0xc
c000689e:	53                   	push   ebx
c000689f:	e8 40 19 00 00       	call   c00081e4 <ff_memfree>
c00068a4:	83 c4 10             	add    esp,0x10
c00068a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00068ab:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068b1:	5b                   	pop    ebx
c00068b2:	5e                   	pop    esi
c00068b3:	5f                   	pop    edi
c00068b4:	5d                   	pop    ebp
c00068b5:	c3                   	ret    

c00068b6 <f_chmod>:
c00068b6:	57                   	push   edi
c00068b7:	b9 02 00 00 00       	mov    ecx,0x2
c00068bc:	56                   	push   esi
c00068bd:	53                   	push   ebx
c00068be:	83 ec 60             	sub    esp,0x60
c00068c1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068c5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068c9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068cd:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068d1:	e8 55 bb ff ff       	call   c000242b <mount_volume>
c00068d6:	85 c0                	test   eax,eax
c00068d8:	0f 85 af 00 00 00    	jne    c000698d <f_chmod+0xd7>
c00068de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068e2:	83 ec 0c             	sub    esp,0xc
c00068e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068e9:	68 60 04 00 00       	push   0x460
c00068ee:	e8 db 18 00 00       	call   c00081ce <ff_memalloc>
c00068f3:	83 c4 10             	add    esp,0x10
c00068f6:	89 c6                	mov    esi,eax
c00068f8:	b8 11 00 00 00       	mov    eax,0x11
c00068fd:	85 f6                	test   esi,esi
c00068ff:	0f 84 88 00 00 00    	je     c000698d <f_chmod+0xd7>
c0006905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006909:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000690f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006912:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006915:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006919:	8d 44 24 14          	lea    eax,[esp+0x14]
c000691d:	e8 7f e2 ff ff       	call   c0004ba1 <follow_path>
c0006922:	85 c0                	test   eax,eax
c0006924:	75 53                	jne    c0006979 <f_chmod+0xc3>
c0006926:	b8 06 00 00 00       	mov    eax,0x6
c000692b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006930:	75 47                	jne    c0006979 <f_chmod+0xc3>
c0006932:	89 f9                	mov    ecx,edi
c0006934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006938:	83 e1 27             	and    ecx,0x27
c000693b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000693e:	75 1d                	jne    c000695d <f_chmod+0xa7>
c0006940:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006943:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006946:	21 cb                	and    ebx,ecx
c0006948:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000694b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c000694e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006952:	e8 a2 cf ff ff       	call   c00038f9 <store_xdir>
c0006957:	85 c0                	test   eax,eax
c0006959:	75 1e                	jne    c0006979 <f_chmod+0xc3>
c000695b:	eb 13                	jmp    c0006970 <f_chmod+0xba>
c000695d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006961:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006964:	21 cb                	and    ebx,ecx
c0006966:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006969:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000696c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006974:	e8 2b d9 ff ff       	call   c00042a4 <sync_fs>
c0006979:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000697d:	83 ec 0c             	sub    esp,0xc
c0006980:	56                   	push   esi
c0006981:	e8 5e 18 00 00       	call   c00081e4 <ff_memfree>
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000698d:	83 c4 60             	add    esp,0x60
c0006990:	5b                   	pop    ebx
c0006991:	5e                   	pop    esi
c0006992:	5f                   	pop    edi
c0006993:	c3                   	ret    

c0006994 <f_utime>:
c0006994:	56                   	push   esi
c0006995:	b9 02 00 00 00       	mov    ecx,0x2
c000699a:	53                   	push   ebx
c000699b:	83 ec 64             	sub    esp,0x64
c000699e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00069a2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069a6:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069aa:	e8 7c ba ff ff       	call   c000242b <mount_volume>
c00069af:	85 c0                	test   eax,eax
c00069b1:	0f 85 b5 00 00 00    	jne    c0006a6c <f_utime+0xd8>
c00069b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069bb:	83 ec 0c             	sub    esp,0xc
c00069be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069c2:	68 60 04 00 00       	push   0x460
c00069c7:	e8 02 18 00 00       	call   c00081ce <ff_memalloc>
c00069cc:	83 c4 10             	add    esp,0x10
c00069cf:	89 c3                	mov    ebx,eax
c00069d1:	b8 11 00 00 00       	mov    eax,0x11
c00069d6:	85 db                	test   ebx,ebx
c00069d8:	0f 84 8e 00 00 00    	je     c0006a6c <f_utime+0xd8>
c00069de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069e8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069eb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ee:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f6:	e8 a6 e1 ff ff       	call   c0004ba1 <follow_path>
c00069fb:	85 c0                	test   eax,eax
c00069fd:	75 59                	jne    c0006a58 <f_utime+0xc4>
c00069ff:	b8 06 00 00 00       	mov    eax,0x6
c0006a04:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a09:	75 4d                	jne    c0006a58 <f_utime+0xc4>
c0006a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a0f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a13:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a17:	c1 e2 10             	shl    edx,0x10
c0006a1a:	09 ca                	or     edx,ecx
c0006a1c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a1f:	75 1a                	jne    c0006a3b <f_utime+0xa7>
c0006a21:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a24:	83 c0 0c             	add    eax,0xc
c0006a27:	e8 e5 af ff ff       	call   c0001a11 <st_dword>
c0006a2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a30:	e8 c4 ce ff ff       	call   c00038f9 <store_xdir>
c0006a35:	85 c0                	test   eax,eax
c0006a37:	75 1f                	jne    c0006a58 <f_utime+0xc4>
c0006a39:	eb 14                	jmp    c0006a4f <f_utime+0xbb>
c0006a3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a3f:	83 c0 16             	add    eax,0x16
c0006a42:	e8 ca af ff ff       	call   c0001a11 <st_dword>
c0006a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a53:	e8 4c d8 ff ff       	call   c00042a4 <sync_fs>
c0006a58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5c:	83 ec 0c             	sub    esp,0xc
c0006a5f:	53                   	push   ebx
c0006a60:	e8 7f 17 00 00       	call   c00081e4 <ff_memfree>
c0006a65:	83 c4 10             	add    esp,0x10
c0006a68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6c:	83 c4 64             	add    esp,0x64
c0006a6f:	5b                   	pop    ebx
c0006a70:	5e                   	pop    esi
c0006a71:	c3                   	ret    

c0006a72 <f_getlabel>:
c0006a72:	55                   	push   ebp
c0006a73:	31 c9                	xor    ecx,ecx
c0006a75:	57                   	push   edi
c0006a76:	56                   	push   esi
c0006a77:	53                   	push   ebx
c0006a78:	83 ec 6c             	sub    esp,0x6c
c0006a7b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a7f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a86:	e8 a0 b9 ff ff       	call   c000242b <mount_volume>
c0006a8b:	89 c6                	mov    esi,eax
c0006a8d:	85 c0                	test   eax,eax
c0006a8f:	0f 85 c1 01 00 00    	jne    c0006c56 <f_getlabel+0x1e4>
c0006a95:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a9d:	0f 84 5f 01 00 00    	je     c0006c02 <f_getlabel+0x190>
c0006aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa7:	31 d2                	xor    edx,edx
c0006aa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006ab5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab9:	e8 39 c4 ff ff       	call   c0002ef7 <dir_sdi>
c0006abe:	85 c0                	test   eax,eax
c0006ac0:	0f 85 2d 01 00 00    	jne    c0006bf3 <f_getlabel+0x181>
c0006ac6:	ba 01 00 00 00       	mov    edx,0x1
c0006acb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006acf:	e8 33 cc ff ff       	call   c0003707 <dir_read>
c0006ad4:	85 c0                	test   eax,eax
c0006ad6:	0f 85 17 01 00 00    	jne    c0006bf3 <f_getlabel+0x181>
c0006adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ae3:	74 09                	je     c0006aee <f_getlabel+0x7c>
c0006ae5:	31 db                	xor    ebx,ebx
c0006ae7:	31 c9                	xor    ecx,ecx
c0006ae9:	e9 c8 00 00 00       	jmp    c0006bb6 <f_getlabel+0x144>
c0006aee:	31 ed                	xor    ebp,ebp
c0006af0:	31 db                	xor    ebx,ebx
c0006af2:	31 ff                	xor    edi,edi
c0006af4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006af8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006afc:	39 fa                	cmp    edx,edi
c0006afe:	76 4b                	jbe    c0006b4b <f_getlabel+0xd9>
c0006b00:	47                   	inc    edi
c0006b01:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b04:	01 d0                	add    eax,edx
c0006b06:	e8 90 ae ff ff       	call   c000199b <ld_word>
c0006b0b:	66 85 ed             	test   bp,bp
c0006b0e:	75 0d                	jne    c0006b1d <f_getlabel+0xab>
c0006b10:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b16:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b1b:	76 28                	jbe    c0006b45 <f_getlabel+0xd3>
c0006b1d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b24:	89 e9                	mov    ecx,ebp
c0006b26:	01 da                	add    edx,ebx
c0006b28:	c1 e1 10             	shl    ecx,0x10
c0006b2b:	0f b7 c0             	movzx  eax,ax
c0006b2e:	09 c8                	or     eax,ecx
c0006b30:	b9 04 00 00 00       	mov    ecx,0x4
c0006b35:	e8 01 b0 ff ff       	call   c0001b3b <put_utf>
c0006b3a:	84 c0                	test   al,al
c0006b3c:	74 0b                	je     c0006b49 <f_getlabel+0xd7>
c0006b3e:	0f b6 c0             	movzx  eax,al
c0006b41:	01 c3                	add    ebx,eax
c0006b43:	31 c0                	xor    eax,eax
c0006b45:	89 c5                	mov    ebp,eax
c0006b47:	eb ab                	jmp    c0006af4 <f_getlabel+0x82>
c0006b49:	31 db                	xor    ebx,ebx
c0006b4b:	66 85 ed             	test   bp,bp
c0006b4e:	74 02                	je     c0006b52 <f_getlabel+0xe0>
c0006b50:	31 db                	xor    ebx,ebx
c0006b52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b59:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b5d:	e9 a0 00 00 00       	jmp    c0006c02 <f_getlabel+0x190>
c0006b62:	83 ff 0b             	cmp    edi,0xb
c0006b65:	74 11                	je     c0006b78 <f_getlabel+0x106>
c0006b67:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b70:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b73:	c1 e0 08             	shl    eax,0x8
c0006b76:	09 c2                	or     edx,eax
c0006b78:	0f b7 d2             	movzx  edx,dx
c0006b7b:	50                   	push   eax
c0006b7c:	50                   	push   eax
c0006b7d:	68 b5 01 00 00       	push   0x1b5
c0006b82:	52                   	push   edx
c0006b83:	e8 03 17 00 00       	call   c000828b <ff_oem2uni>
c0006b88:	83 c4 10             	add    esp,0x10
c0006b8b:	66 85 c0             	test   ax,ax
c0006b8e:	74 46                	je     c0006bd6 <f_getlabel+0x164>
c0006b90:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b97:	0f b7 c0             	movzx  eax,ax
c0006b9a:	01 da                	add    edx,ebx
c0006b9c:	b9 04 00 00 00       	mov    ecx,0x4
c0006ba1:	e8 95 af ff ff       	call   c0001b3b <put_utf>
c0006ba6:	84 c0                	test   al,al
c0006ba8:	74 2c                	je     c0006bd6 <f_getlabel+0x164>
c0006baa:	0f b6 c0             	movzx  eax,al
c0006bad:	01 c3                	add    ebx,eax
c0006baf:	83 ff 0b             	cmp    edi,0xb
c0006bb2:	74 24                	je     c0006bd8 <f_getlabel+0x166>
c0006bb4:	89 f9                	mov    ecx,edi
c0006bb6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bba:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bbd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bc2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bcb:	e8 9f ae ff ff       	call   c0001a6f <dbc_1st>
c0006bd0:	85 c0                	test   eax,eax
c0006bd2:	74 a4                	je     c0006b78 <f_getlabel+0x106>
c0006bd4:	eb 8c                	jmp    c0006b62 <f_getlabel+0xf0>
c0006bd6:	31 db                	xor    ebx,ebx
c0006bd8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bdf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006be2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006be9:	74 17                	je     c0006c02 <f_getlabel+0x190>
c0006beb:	4b                   	dec    ebx
c0006bec:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bef:	74 ee                	je     c0006bdf <f_getlabel+0x16d>
c0006bf1:	eb 0f                	jmp    c0006c02 <f_getlabel+0x190>
c0006bf3:	83 f8 04             	cmp    eax,0x4
c0006bf6:	75 5c                	jne    c0006c54 <f_getlabel+0x1e2>
c0006bf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c02:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c0a:	74 4a                	je     c0006c56 <f_getlabel+0x1e4>
c0006c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c10:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c13:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c16:	e8 5e b5 ff ff       	call   c0002179 <move_window>
c0006c1b:	89 c6                	mov    esi,eax
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 35                	jne    c0006c56 <f_getlabel+0x1e4>
c0006c21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c25:	b8 43 00 00 00       	mov    eax,0x43
c0006c2a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c2c:	80 f9 03             	cmp    cl,0x3
c0006c2f:	74 0f                	je     c0006c40 <f_getlabel+0x1ce>
c0006c31:	31 c0                	xor    eax,eax
c0006c33:	80 f9 04             	cmp    cl,0x4
c0006c36:	0f 94 c0             	sete   al
c0006c39:	48                   	dec    eax
c0006c3a:	83 e0 c3             	and    eax,0xffffffc3
c0006c3d:	83 c0 64             	add    eax,0x64
c0006c40:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c44:	e8 5f ad ff ff       	call   c00019a8 <ld_dword>
c0006c49:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c50:	89 07                	mov    DWORD PTR [edi],eax
c0006c52:	eb 02                	jmp    c0006c56 <f_getlabel+0x1e4>
c0006c54:	89 c6                	mov    esi,eax
c0006c56:	83 c4 6c             	add    esp,0x6c
c0006c59:	89 f0                	mov    eax,esi
c0006c5b:	5b                   	pop    ebx
c0006c5c:	5e                   	pop    esi
c0006c5d:	5f                   	pop    edi
c0006c5e:	5d                   	pop    ebp
c0006c5f:	c3                   	ret    

c0006c60 <f_setlabel>:
c0006c60:	56                   	push   esi
c0006c61:	b9 02 00 00 00       	mov    ecx,0x2
c0006c66:	53                   	push   ebx
c0006c67:	83 ec 74             	sub    esp,0x74
c0006c6a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c6e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c75:	e8 b1 b7 ff ff       	call   c000242b <mount_volume>
c0006c7a:	89 c6                	mov    esi,eax
c0006c7c:	85 c0                	test   eax,eax
c0006c7e:	0f 85 41 02 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c8b:	0f 85 8e 00 00 00    	jne    c0006d1f <f_setlabel+0xbf>
c0006c91:	b9 16 00 00 00       	mov    ecx,0x16
c0006c96:	31 d2                	xor    edx,edx
c0006c98:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c9c:	31 db                	xor    ebx,ebx
c0006c9e:	e8 8c ad ff ff       	call   c0001a2f <mem_set>
c0006ca3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006caa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006cad:	0f 86 0a 01 00 00    	jbe    c0006dbd <f_setlabel+0x15d>
c0006cb3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cba:	e8 b6 ad ff ff       	call   c0001a75 <tchar2uni>
c0006cbf:	89 c6                	mov    esi,eax
c0006cc1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cc6:	76 2a                	jbe    c0006cf2 <f_setlabel+0x92>
c0006cc8:	83 f8 ff             	cmp    eax,0xffffffff
c0006ccb:	74 05                	je     c0006cd2 <f_setlabel+0x72>
c0006ccd:	83 fb 09             	cmp    ebx,0x9
c0006cd0:	76 0a                	jbe    c0006cdc <f_setlabel+0x7c>
c0006cd2:	be 06 00 00 00       	mov    esi,0x6
c0006cd7:	e9 e9 01 00 00       	jmp    c0006ec5 <f_setlabel+0x265>
c0006cdc:	89 c2                	mov    edx,eax
c0006cde:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ce2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ce5:	c1 ea 10             	shr    edx,0x10
c0006ce8:	01 c8                	add    eax,ecx
c0006cea:	43                   	inc    ebx
c0006ceb:	e8 1d ad ff ff       	call   c0001a0d <st_word>
c0006cf0:	eb 04                	jmp    c0006cf6 <f_setlabel+0x96>
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	74 dc                	je     c0006cd2 <f_setlabel+0x72>
c0006cf6:	89 f2                	mov    edx,esi
c0006cf8:	b8 37 f7 01 c0       	mov    eax,0xc001f737
c0006cfd:	e8 5b ad ff ff       	call   c0001a5d <chk_chr>
c0006d02:	85 c0                	test   eax,eax
c0006d04:	75 cc                	jne    c0006cd2 <f_setlabel+0x72>
c0006d06:	83 fb 0a             	cmp    ebx,0xa
c0006d09:	77 c7                	ja     c0006cd2 <f_setlabel+0x72>
c0006d0b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d0e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d12:	0f b7 d6             	movzx  edx,si
c0006d15:	01 c8                	add    eax,ecx
c0006d17:	43                   	inc    ebx
c0006d18:	e8 f0 ac ff ff       	call   c0001a0d <st_word>
c0006d1d:	eb 84                	jmp    c0006ca3 <f_setlabel+0x43>
c0006d1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d24:	ba 20 00 00 00       	mov    edx,0x20
c0006d29:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d2d:	31 db                	xor    ebx,ebx
c0006d2f:	e8 fb ac ff ff       	call   c0001a2f <mem_set>
c0006d34:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d3e:	76 60                	jbe    c0006da0 <f_setlabel+0x140>
c0006d40:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d47:	e8 29 ad ff ff       	call   c0001a75 <tchar2uni>
c0006d4c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d51:	0f 87 7b ff ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006d57:	83 ec 0c             	sub    esp,0xc
c0006d5a:	50                   	push   eax
c0006d5b:	e8 97 15 00 00       	call   c00082f7 <ff_wtoupper>
c0006d60:	5a                   	pop    edx
c0006d61:	59                   	pop    ecx
c0006d62:	68 b5 01 00 00       	push   0x1b5
c0006d67:	50                   	push   eax
c0006d68:	e8 8e 14 00 00       	call   c00081fb <ff_uni2oem>
c0006d6d:	83 c4 10             	add    esp,0x10
c0006d70:	89 c6                	mov    esi,eax
c0006d72:	66 85 c0             	test   ax,ax
c0006d75:	0f 84 57 ff ff ff    	je     c0006cd2 <f_setlabel+0x72>
c0006d7b:	0f b7 d0             	movzx  edx,ax
c0006d7e:	b8 30 f7 01 c0       	mov    eax,0xc001f730
c0006d83:	e8 d5 ac ff ff       	call   c0001a5d <chk_chr>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	0f 85 42 ff ff ff    	jne    c0006cd2 <f_setlabel+0x72>
c0006d90:	66 81 fe ff 00       	cmp    si,0xff
c0006d95:	0f 87 14 01 00 00    	ja     c0006eaf <f_setlabel+0x24f>
c0006d9b:	e9 fa 00 00 00       	jmp    c0006e9a <f_setlabel+0x23a>
c0006da0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006da5:	0f 84 27 ff ff ff    	je     c0006cd2 <f_setlabel+0x72>
c0006dab:	85 db                	test   ebx,ebx
c0006dad:	74 0e                	je     c0006dbd <f_setlabel+0x15d>
c0006daf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006db2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006db7:	75 04                	jne    c0006dbd <f_setlabel+0x15d>
c0006db9:	89 c3                	mov    ebx,eax
c0006dbb:	eb ee                	jmp    c0006dab <f_setlabel+0x14b>
c0006dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006dc1:	31 d2                	xor    edx,edx
c0006dc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dc7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dd3:	e8 1f c1 ff ff       	call   c0002ef7 <dir_sdi>
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	85 c0                	test   eax,eax
c0006ddc:	0f 85 e3 00 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006de2:	ba 01 00 00 00       	mov    edx,0x1
c0006de7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006deb:	e8 17 c9 ff ff       	call   c0003707 <dir_read>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	75 21                	jne    c0006e15 <f_setlabel+0x1b5>
c0006df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006df8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006dfc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006dff:	74 5d                	je     c0006e5e <f_setlabel+0x1fe>
c0006e01:	85 db                	test   ebx,ebx
c0006e03:	74 0b                	je     c0006e10 <f_setlabel+0x1b0>
c0006e05:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e0a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e0e:	eb 70                	jmp    c0006e80 <f_setlabel+0x220>
c0006e10:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e13:	eb 70                	jmp    c0006e85 <f_setlabel+0x225>
c0006e15:	83 f8 04             	cmp    eax,0x4
c0006e18:	75 7c                	jne    c0006e96 <f_setlabel+0x236>
c0006e1a:	85 db                	test   ebx,ebx
c0006e1c:	0f 84 a3 00 00 00    	je     c0006ec5 <f_setlabel+0x265>
c0006e22:	ba 01 00 00 00       	mov    edx,0x1
c0006e27:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2b:	e8 51 ca ff ff       	call   c0003881 <dir_alloc>
c0006e30:	89 c6                	mov    esi,eax
c0006e32:	85 c0                	test   eax,eax
c0006e34:	0f 85 8b 00 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006e3a:	31 d2                	xor    edx,edx
c0006e3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e40:	b9 20 00 00 00       	mov    ecx,0x20
c0006e45:	e8 e5 ab ff ff       	call   c0001a2f <mem_set>
c0006e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e55:	75 18                	jne    c0006e6f <f_setlabel+0x20f>
c0006e57:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e5a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e6a:	83 c0 02             	add    eax,0x2
c0006e6d:	eb 9b                	jmp    c0006e0a <f_setlabel+0x1aa>
c0006e6f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e73:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e78:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e80:	e8 95 ab ff ff       	call   c0001a1a <mem_cpy>
c0006e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e89:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e91:	e8 0e d4 ff ff       	call   c00042a4 <sync_fs>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	eb 2b                	jmp    c0006ec5 <f_setlabel+0x265>
c0006e9a:	83 fb 0a             	cmp    ebx,0xa
c0006e9d:	0f 87 2f fe ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006ea3:	89 f0                	mov    eax,esi
c0006ea5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea9:	43                   	inc    ebx
c0006eaa:	e9 85 fe ff ff       	jmp    c0006d34 <f_setlabel+0xd4>
c0006eaf:	83 fb 09             	cmp    ebx,0x9
c0006eb2:	0f 87 1a fe ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	66 c1 e8 08          	shr    ax,0x8
c0006ebe:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ec2:	43                   	inc    ebx
c0006ec3:	eb de                	jmp    c0006ea3 <f_setlabel+0x243>
c0006ec5:	89 f0                	mov    eax,esi
c0006ec7:	83 c4 74             	add    esp,0x74
c0006eca:	5b                   	pop    ebx
c0006ecb:	5e                   	pop    esi
c0006ecc:	c3                   	ret    

c0006ecd <f_forward>:
c0006ecd:	55                   	push   ebp
c0006ece:	57                   	push   edi
c0006ecf:	56                   	push   esi
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 2c             	sub    esp,0x2c
c0006ed4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ed8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006edc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ee2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ee6:	89 d8                	mov    eax,ebx
c0006ee8:	e8 b1 b1 ff ff       	call   c000209e <validate>
c0006eed:	89 c5                	mov    ebp,eax
c0006eef:	85 c0                	test   eax,eax
c0006ef1:	0f 85 aa 01 00 00    	jne    c00070a1 <f_forward+0x1d4>
c0006ef7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006efb:	85 ed                	test   ebp,ebp
c0006efd:	0f 85 9e 01 00 00    	jne    c00070a1 <f_forward+0x1d4>
c0006f03:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f07:	0f 84 8f 01 00 00    	je     c000709c <f_forward+0x1cf>
c0006f0d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f10:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f13:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f16:	bf 00 00 00 00       	mov    edi,0x0
c0006f1b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f1e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f22:	89 d1                	mov    ecx,edx
c0006f24:	19 f9                	sbb    ecx,edi
c0006f26:	0f 83 cf 00 00 00    	jae    c0006ffb <f_forward+0x12e>
c0006f2c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f30:	e9 c6 00 00 00       	jmp    c0006ffb <f_forward+0x12e>
c0006f35:	50                   	push   eax
c0006f36:	50                   	push   eax
c0006f37:	6a 00                	push   0x0
c0006f39:	6a 00                	push   0x0
c0006f3b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f3f:	83 c4 10             	add    esp,0x10
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 84 57 01 00 00    	je     c00070a1 <f_forward+0x1d4>
c0006f4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f54:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f58:	89 d7                	mov    edi,edx
c0006f5a:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f5d:	89 c6                	mov    esi,eax
c0006f5f:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f63:	21 ce                	and    esi,ecx
c0006f65:	89 c1                	mov    ecx,eax
c0006f67:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f6d:	0f 84 98 00 00 00    	je     c000700b <f_forward+0x13e>
c0006f73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f77:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f7a:	89 c8                	mov    eax,ecx
c0006f7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f80:	e8 af ac ff ff       	call   c0001c34 <clst2sect>
c0006f85:	89 d7                	mov    edi,edx
c0006f87:	09 c7                	or     edi,eax
c0006f89:	0f 84 9e 00 00 00    	je     c000702d <f_forward+0x160>
c0006f8f:	31 ff                	xor    edi,edi
c0006f91:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f94:	01 c6                	add    esi,eax
c0006f96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f9a:	11 d7                	adc    edi,edx
c0006f9c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f9f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fa6:	39 fa                	cmp    edx,edi
c0006fa8:	0f 85 a2 00 00 00    	jne    c0007050 <f_forward+0x183>
c0006fae:	39 f0                	cmp    eax,esi
c0006fb0:	0f 85 9a 00 00 00    	jne    c0007050 <f_forward+0x183>
c0006fb6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb9:	ba 00 02 00 00       	mov    edx,0x200
c0006fbe:	25 ff 01 00 00       	and    eax,0x1ff
c0006fc3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fc7:	29 c2                	sub    edx,eax
c0006fc9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fcc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fcf:	39 d1                	cmp    ecx,edx
c0006fd1:	76 02                	jbe    c0006fd5 <f_forward+0x108>
c0006fd3:	89 d1                	mov    ecx,edx
c0006fd5:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fd8:	52                   	push   edx
c0006fd9:	01 c6                	add    esi,eax
c0006fdb:	52                   	push   edx
c0006fdc:	51                   	push   ecx
c0006fdd:	56                   	push   esi
c0006fde:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe2:	83 c4 10             	add    esp,0x10
c0006fe5:	85 c0                	test   eax,eax
c0006fe7:	74 44                	je     c000702d <f_forward+0x160>
c0006fe9:	31 ff                	xor    edi,edi
c0006feb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fee:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006ff1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006ff5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006ff9:	01 07                	add    DWORD PTR [edi],eax
c0006ffb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007000:	0f 85 2f ff ff ff    	jne    c0006f35 <f_forward+0x68>
c0007006:	e9 96 00 00 00       	jmp    c00070a1 <f_forward+0x1d4>
c000700b:	85 f6                	test   esi,esi
c000700d:	0f 85 60 ff ff ff    	jne    c0006f73 <f_forward+0xa6>
c0007013:	89 d7                	mov    edi,edx
c0007015:	09 c7                	or     edi,eax
c0007017:	75 05                	jne    c000701e <f_forward+0x151>
c0007019:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000701c:	eb 0a                	jmp    c0007028 <f_forward+0x15b>
c000701e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007021:	89 d8                	mov    eax,ebx
c0007023:	e8 d9 bc ff ff       	call   c0002d01 <get_fat>
c0007028:	83 f8 01             	cmp    eax,0x1
c000702b:	77 0b                	ja     c0007038 <f_forward+0x16b>
c000702d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007031:	bd 02 00 00 00       	mov    ebp,0x2
c0007036:	eb 69                	jmp    c00070a1 <f_forward+0x1d4>
c0007038:	83 f8 ff             	cmp    eax,0xffffffff
c000703b:	75 0b                	jne    c0007048 <f_forward+0x17b>
c000703d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007041:	bd 01 00 00 00       	mov    ebp,0x1
c0007046:	eb 59                	jmp    c00070a1 <f_forward+0x1d4>
c0007048:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000704b:	e9 23 ff ff ff       	jmp    c0006f73 <f_forward+0xa6>
c0007050:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007054:	79 20                	jns    c0007076 <f_forward+0x1a9>
c0007056:	83 ec 0c             	sub    esp,0xc
c0007059:	6a 01                	push   0x1
c000705b:	52                   	push   edx
c000705c:	50                   	push   eax
c000705d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007061:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007065:	50                   	push   eax
c0007066:	e8 fb a8 ff ff       	call   c0001966 <disk_write>
c000706b:	83 c4 20             	add    esp,0x20
c000706e:	85 c0                	test   eax,eax
c0007070:	75 cb                	jne    c000703d <f_forward+0x170>
c0007072:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007076:	83 ec 0c             	sub    esp,0xc
c0007079:	6a 01                	push   0x1
c000707b:	57                   	push   edi
c000707c:	56                   	push   esi
c000707d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007081:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007085:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007089:	50                   	push   eax
c000708a:	e8 c1 a8 ff ff       	call   c0001950 <disk_read>
c000708f:	83 c4 20             	add    esp,0x20
c0007092:	85 c0                	test   eax,eax
c0007094:	0f 84 1c ff ff ff    	je     c0006fb6 <f_forward+0xe9>
c000709a:	eb a1                	jmp    c000703d <f_forward+0x170>
c000709c:	bd 07 00 00 00       	mov    ebp,0x7
c00070a1:	83 c4 2c             	add    esp,0x2c
c00070a4:	89 e8                	mov    eax,ebp
c00070a6:	5b                   	pop    ebx
c00070a7:	5e                   	pop    esi
c00070a8:	5f                   	pop    edi
c00070a9:	5d                   	pop    ebp
c00070aa:	c3                   	ret    

c00070ab <f_mkfs>:
c00070ab:	55                   	push   ebp
c00070ac:	57                   	push   edi
c00070ad:	56                   	push   esi
c00070ae:	53                   	push   ebx
c00070af:	bb 0b 00 00 00       	mov    ebx,0xb
c00070b4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ba:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070c1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070c8:	e8 b0 ae ff ff       	call   c0001f7d <get_ldnumber>
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 88 ec 10 00 00    	js     c00081c1 <f_mkfs+0x1116>
c00070d5:	8b 14 85 60 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8a0]
c00070dc:	85 d2                	test   edx,edx
c00070de:	74 03                	je     c00070e3 <f_mkfs+0x38>
c00070e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070e3:	85 f6                	test   esi,esi
c00070e5:	75 05                	jne    c00070ec <f_mkfs+0x41>
c00070e7:	be 20 f7 01 c0       	mov    esi,0xc001f720
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	0f b6 c0             	movzx  eax,al
c00070f2:	bb 03 00 00 00       	mov    ebx,0x3
c00070f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070ff:	e8 49 a8 ff ff       	call   c000194d <disk_initialize>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	a8 01                	test   al,0x1
c0007109:	0f 85 b2 10 00 00    	jne    c00081c1 <f_mkfs+0x1116>
c000710f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007114:	a8 04                	test   al,0x4
c0007116:	0f 85 a5 10 00 00    	jne    c00081c1 <f_mkfs+0x1116>
c000711c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000711f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007123:	85 c0                	test   eax,eax
c0007125:	75 20                	jne    c0007147 <f_mkfs+0x9c>
c0007127:	51                   	push   ecx
c0007128:	8d 44 24 78          	lea    eax,[esp+0x78]
c000712c:	50                   	push   eax
c000712d:	6a 03                	push   0x3
c000712f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007133:	e8 44 a8 ff ff       	call   c000197c <disk_ioctl>
c0007138:	83 c4 10             	add    esp,0x10
c000713b:	85 c0                	test   eax,eax
c000713d:	74 08                	je     c0007147 <f_mkfs+0x9c>
c000713f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007147:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000714b:	8d 42 ff             	lea    eax,[edx-0x1]
c000714e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007153:	77 04                	ja     c0007159 <f_mkfs+0xae>
c0007155:	85 c2                	test   edx,eax
c0007157:	74 08                	je     c0007161 <f_mkfs+0xb6>
c0007159:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007161:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007164:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007168:	48                   	dec    eax
c0007169:	3c 01                	cmp    al,0x1
c000716b:	76 05                	jbe    c0007172 <f_mkfs+0xc7>
c000716d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007172:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007179:	48                   	dec    eax
c000717a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000717f:	77 07                	ja     c0007188 <f_mkfs+0xdd>
c0007181:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007186:	74 08                	je     c0007190 <f_mkfs+0xe5>
c0007188:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007190:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007193:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007199:	77 07                	ja     c00071a2 <f_mkfs+0xf7>
c000719b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000719e:	85 d8                	test   eax,ebx
c00071a0:	74 02                	je     c00071a4 <f_mkfs+0xf9>
c00071a2:	31 db                	xor    ebx,ebx
c00071a4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071af:	77 0a                	ja     c00071bb <f_mkfs+0x110>
c00071b1:	bb 11 00 00 00       	mov    ebx,0x11
c00071b6:	e9 06 10 00 00       	jmp    c00081c1 <f_mkfs+0x1116>
c00071bb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071c2:	8b 36                	mov    esi,DWORD PTR [esi]
c00071c4:	85 ed                	test   ebp,ebp
c00071c6:	75 1e                	jne    c00071e6 <f_mkfs+0x13b>
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071d2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071d7:	50                   	push   eax
c00071d8:	e8 f1 0f 00 00       	call   c00081ce <ff_memalloc>
c00071dd:	83 c4 10             	add    esp,0x10
c00071e0:	89 c5                	mov    ebp,eax
c00071e2:	85 c0                	test   eax,eax
c00071e4:	74 cb                	je     c00071b1 <f_mkfs+0x106>
c00071e6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071ee:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071f6:	52                   	push   edx
c00071f7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071fb:	50                   	push   eax
c00071fc:	6a 01                	push   0x1
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	e8 75 a7 ff ff       	call   c000197c <disk_ioctl>
c0007207:	83 c4 10             	add    esp,0x10
c000720a:	85 c0                	test   eax,eax
c000720c:	0f 85 4a 0f 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007212:	89 f1                	mov    ecx,esi
c0007214:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000721c:	83 e1 0f             	and    ecx,0xf
c000721f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007227:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000722b:	83 e6 08             	and    esi,0x8
c000722e:	75 56                	jne    c0007286 <f_mkfs+0x1db>
c0007230:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007234:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007238:	83 ff 00             	cmp    edi,0x0
c000723b:	76 20                	jbe    c000725d <f_mkfs+0x1b2>
c000723d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007242:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000724a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007250:	83 d7 ff             	adc    edi,0xffffffff
c0007253:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007257:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000725b:	eb 21                	jmp    c000727e <f_mkfs+0x1d3>
c000725d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007262:	39 f2                	cmp    edx,esi
c0007264:	19 f8                	sbb    eax,edi
c0007266:	73 1e                	jae    c0007286 <f_mkfs+0x1db>
c0007268:	83 c6 c1             	add    esi,0xffffffc1
c000726b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007273:	83 d7 ff             	adc    edi,0xffffffff
c0007276:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000727a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000727e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007286:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000728a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000728e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007291:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007295:	31 c0                	xor    eax,eax
c0007297:	ba 7f 00 00 00       	mov    edx,0x7f
c000729c:	89 c7                	mov    edi,eax
c000729e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072a1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00072a5:	0f 83 c5 0a 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c00072ab:	89 df                	mov    edi,ebx
c00072ad:	c1 ef 09             	shr    edi,0x9
c00072b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072b4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072bb:	c1 ef 09             	shr    edi,0x9
c00072be:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072c3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072c7:	74 29                	je     c00072f2 <f_mkfs+0x247>
c00072c9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072cf:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072d4:	0f 97 c2             	seta   dl
c00072d7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072da:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072de:	0f 92 c0             	setb   al
c00072e1:	08 c2                	or     dl,al
c00072e3:	75 5b                	jne    c0007340 <f_mkfs+0x295>
c00072e5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072e9:	83 e0 07             	and    eax,0x7
c00072ec:	3c 04                	cmp    al,0x4
c00072ee:	74 50                	je     c0007340 <f_mkfs+0x295>
c00072f0:	eb 1b                	jmp    c000730d <f_mkfs+0x262>
c00072f2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072f7:	0f 87 73 0a 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c00072fd:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007303:	76 08                	jbe    c000730d <f_mkfs+0x262>
c0007305:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000730d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007311:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007315:	83 e0 01             	and    eax,0x1
c0007318:	80 e1 02             	and    cl,0x2
c000731b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000731f:	74 0d                	je     c000732e <f_mkfs+0x283>
c0007321:	84 c0                	test   al,al
c0007323:	0f 84 53 09 00 00    	je     c0007c7c <f_mkfs+0xbd1>
c0007329:	e9 12 08 00 00       	jmp    c0007b40 <f_mkfs+0xa95>
c000732e:	bb 13 00 00 00       	mov    ebx,0x13
c0007333:	84 c0                	test   al,al
c0007335:	0f 85 05 08 00 00    	jne    c0007b40 <f_mkfs+0xa95>
c000733b:	e9 39 0e 00 00       	jmp    c0008179 <f_mkfs+0x10ce>
c0007340:	31 c0                	xor    eax,eax
c0007342:	ba ff 0f 00 00       	mov    edx,0xfff
c0007347:	89 c7                	mov    edi,eax
c0007349:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000734c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007350:	0f 83 1a 0a 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c0007356:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000735c:	77 39                	ja     c0007397 <f_mkfs+0x2ec>
c000735e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007363:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000736b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000736e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007372:	73 08                	jae    c000737c <f_mkfs+0x2d1>
c0007374:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000737c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007381:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007384:	b8 00 00 00 00       	mov    eax,0x0
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	73 08                	jae    c0007397 <f_mkfs+0x2ec>
c000738f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000739b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000739f:	83 c0 20             	add    eax,0x20
c00073a2:	83 d2 00             	adc    edx,0x0
c00073a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073a9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073b1:	31 d2                	xor    edx,edx
c00073b3:	31 ff                	xor    edi,edi
c00073b5:	52                   	push   edx
c00073b6:	89 fb                	mov    ebx,edi
c00073b8:	50                   	push   eax
c00073b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073c1:	e8 e6 73 01 00       	call   c001e7ac <__udivdi3>
c00073c6:	83 c4 10             	add    esp,0x10
c00073c9:	c1 e0 02             	shl    eax,0x2
c00073cc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073d0:	05 07 02 00 00       	add    eax,0x207
c00073d5:	89 f1                	mov    ecx,esi
c00073d7:	c1 e8 09             	shr    eax,0x9
c00073da:	83 c1 ff             	add    ecx,0xffffffff
c00073dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073e1:	83 d3 ff             	adc    ebx,0xffffffff
c00073e4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073e8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073ec:	31 d2                	xor    edx,edx
c00073ee:	01 c8                	add    eax,ecx
c00073f0:	11 da                	adc    edx,ebx
c00073f2:	89 c1                	mov    ecx,eax
c00073f4:	f7 de                	neg    esi
c00073f6:	89 d0                	mov    eax,edx
c00073f8:	83 d7 00             	adc    edi,0x0
c00073fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073ff:	f7 df                	neg    edi
c0007401:	21 f1                	and    ecx,esi
c0007403:	21 f8                	and    eax,edi
c0007405:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000740d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007411:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007415:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007419:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000741c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007420:	0f ac d0 01          	shrd   eax,edx,0x1
c0007424:	89 df                	mov    edi,ebx
c0007426:	d1 ea                	shr    edx,1
c0007428:	39 c1                	cmp    ecx,eax
c000742a:	19 d7                	sbb    edi,edx
c000742c:	0f 83 3e 09 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c0007432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007436:	31 d2                	xor    edx,edx
c0007438:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000743c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007440:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007444:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007447:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000744b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000744f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007453:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007457:	83 f8 0f             	cmp    eax,0xf
c000745a:	0f 86 10 09 00 00    	jbe    c0007d70 <f_mkfs+0xcc5>
c0007460:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007468:	0f 87 02 09 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c000746e:	31 d2                	xor    edx,edx
c0007470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007474:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000747c:	83 c0 07             	add    eax,0x7
c000747f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007487:	c1 e8 03             	shr    eax,0x3
c000748a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007491:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007499:	c1 e0 09             	shl    eax,0x9
c000749c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00074a0:	48                   	dec    eax
c00074a1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00074a5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00074a9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074b1:	31 d2                	xor    edx,edx
c00074b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074b7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074c2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074c7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074cb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074cf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074d3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074d7:	31 ff                	xor    edi,edi
c00074d9:	31 f6                	xor    esi,esi
c00074db:	31 db                	xor    ebx,ebx
c00074dd:	85 ff                	test   edi,edi
c00074df:	74 05                	je     c00074e6 <f_mkfs+0x43b>
c00074e1:	4f                   	dec    edi
c00074e2:	74 44                	je     c0007528 <f_mkfs+0x47d>
c00074e4:	eb 4f                	jmp    c0007535 <f_mkfs+0x48a>
c00074e6:	83 ec 0c             	sub    esp,0xc
c00074e9:	0f b7 c3             	movzx  eax,bx
c00074ec:	50                   	push   eax
c00074ed:	e8 05 0e 00 00       	call   c00082f7 <ff_wtoupper>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	89 c1                	mov    ecx,eax
c00074f7:	8d 53 01             	lea    edx,[ebx+0x1]
c00074fa:	66 39 c3             	cmp    bx,ax
c00074fd:	75 3e                	jne    c000753d <f_mkfs+0x492>
c00074ff:	be 01 00 00 00       	mov    esi,0x1
c0007504:	89 df                	mov    edi,ebx
c0007506:	66 01 f7             	add    di,si
c0007509:	75 07                	jne    c0007512 <f_mkfs+0x467>
c000750b:	83 fe 7f             	cmp    esi,0x7f
c000750e:	77 31                	ja     c0007541 <f_mkfs+0x496>
c0007510:	eb 16                	jmp    c0007528 <f_mkfs+0x47d>
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	0f b7 ff             	movzx  edi,di
c0007518:	57                   	push   edi
c0007519:	e8 d9 0d 00 00       	call   c00082f7 <ff_wtoupper>
c000751e:	83 c4 10             	add    esp,0x10
c0007521:	39 c7                	cmp    edi,eax
c0007523:	75 e6                	jne    c000750b <f_mkfs+0x460>
c0007525:	46                   	inc    esi
c0007526:	eb dc                	jmp    c0007504 <f_mkfs+0x459>
c0007528:	31 c0                	xor    eax,eax
c000752a:	89 d9                	mov    ecx,ebx
c000752c:	4e                   	dec    esi
c000752d:	0f 95 c0             	setne  al
c0007530:	43                   	inc    ebx
c0007531:	89 c7                	mov    edi,eax
c0007533:	eb 14                	jmp    c0007549 <f_mkfs+0x49e>
c0007535:	89 f1                	mov    ecx,esi
c0007537:	01 f3                	add    ebx,esi
c0007539:	31 ff                	xor    edi,edi
c000753b:	eb 0c                	jmp    c0007549 <f_mkfs+0x49e>
c000753d:	89 d3                	mov    ebx,edx
c000753f:	eb 08                	jmp    c0007549 <f_mkfs+0x49e>
c0007541:	bf 02 00 00 00       	mov    edi,0x2
c0007546:	83 c9 ff             	or     ecx,0xffffffff
c0007549:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000754d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007550:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007554:	0f b6 c1             	movzx  eax,cl
c0007557:	e8 3a a9 ff ff       	call   c0001e96 <xsum32>
c000755c:	66 c1 e9 08          	shr    cx,0x8
c0007560:	89 c2                	mov    edx,eax
c0007562:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007565:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007569:	0f b7 c1             	movzx  eax,cx
c000756c:	e8 25 a9 ff ff       	call   c0001e96 <xsum32>
c0007571:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000757a:	66 85 db             	test   bx,bx
c000757d:	74 1f                	je     c000759e <f_mkfs+0x4f3>
c000757f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007582:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007589:	83 c0 02             	add    eax,0x2
c000758c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007592:	39 c2                	cmp    edx,eax
c0007594:	74 08                	je     c000759e <f_mkfs+0x4f3>
c0007596:	89 04 24             	mov    DWORD PTR [esp],eax
c0007599:	e9 3f ff ff ff       	jmp    c00074dd <f_mkfs+0x432>
c000759e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a1:	83 ec 0c             	sub    esp,0xc
c00075a4:	05 01 02 00 00       	add    eax,0x201
c00075a9:	c1 e8 09             	shr    eax,0x9
c00075ac:	50                   	push   eax
c00075ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075b9:	55                   	push   ebp
c00075ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075be:	e8 a3 a3 ff ff       	call   c0001966 <disk_write>
c00075c3:	83 c4 20             	add    esp,0x20
c00075c6:	85 c0                	test   eax,eax
c00075c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075cb:	0f 85 8b 0b 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00075d1:	89 d0                	mov    eax,edx
c00075d3:	31 d2                	xor    edx,edx
c00075d5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075d9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075dd:	66 85 db             	test   bx,bx
c00075e0:	74 04                	je     c00075e6 <f_mkfs+0x53b>
c00075e2:	31 c0                	xor    eax,eax
c00075e4:	eb b0                	jmp    c0007596 <f_mkfs+0x4eb>
c00075e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075ea:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075ee:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075f2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075f8:	31 d2                	xor    edx,edx
c00075fa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007605:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007609:	c1 eb 09             	shr    ebx,0x9
c000760c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007613:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007617:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000761b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000761f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007623:	8d 70 01             	lea    esi,[eax+0x1]
c0007626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000762a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000762e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007635:	31 d2                	xor    edx,edx
c0007637:	25 00 fe ff ff       	and    eax,0xfffffe00
c000763c:	89 04 24             	mov    DWORD PTR [esp],eax
c000763f:	89 c1                	mov    ecx,eax
c0007641:	89 e8                	mov    eax,ebp
c0007643:	e8 e7 a3 ff ff       	call   c0001a2f <mem_set>
c0007648:	31 c0                	xor    eax,eax
c000764a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000764d:	76 10                	jbe    c000765f <f_mkfs+0x5b4>
c000764f:	83 fe 07             	cmp    esi,0x7
c0007652:	76 0b                	jbe    c000765f <f_mkfs+0x5b4>
c0007654:	40                   	inc    eax
c0007655:	83 ee 08             	sub    esi,0x8
c0007658:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000765d:	eb eb                	jmp    c000764a <f_mkfs+0x59f>
c000765f:	b2 01                	mov    dl,0x1
c0007661:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007665:	85 f6                	test   esi,esi
c0007667:	74 0c                	je     c0007675 <f_mkfs+0x5ca>
c0007669:	39 04 24             	cmp    DWORD PTR [esp],eax
c000766c:	76 07                	jbe    c0007675 <f_mkfs+0x5ca>
c000766e:	08 11                	or     BYTE PTR [ecx],dl
c0007670:	4e                   	dec    esi
c0007671:	d1 e2                	shl    edx,1
c0007673:	eb f0                	jmp    c0007665 <f_mkfs+0x5ba>
c0007675:	89 df                	mov    edi,ebx
c0007677:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000767b:	76 04                	jbe    c0007681 <f_mkfs+0x5d6>
c000767d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007681:	83 ec 0c             	sub    esp,0xc
c0007684:	57                   	push   edi
c0007685:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000768d:	55                   	push   ebp
c000768e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007692:	e8 cf a2 ff ff       	call   c0001966 <disk_write>
c0007697:	83 c4 20             	add    esp,0x20
c000769a:	85 c0                	test   eax,eax
c000769c:	0f 85 ba 0a 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00076a2:	31 d2                	xor    edx,edx
c00076a4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00076a8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00076ac:	29 fb                	sub    ebx,edi
c00076ae:	0f 85 7a ff ff ff    	jne    c000762e <f_mkfs+0x583>
c00076b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076c0:	31 f6                	xor    esi,esi
c00076c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076c6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076c9:	31 d2                	xor    edx,edx
c00076cb:	89 e8                	mov    eax,ebp
c00076cd:	e8 5d a3 ff ff       	call   c0001a2f <mem_set>
c00076d2:	31 c9                	xor    ecx,ecx
c00076d4:	85 db                	test   ebx,ebx
c00076d6:	75 40                	jne    c0007718 <f_mkfs+0x66d>
c00076d8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076dd:	89 e8                	mov    eax,ebp
c00076df:	bb 02 00 00 00       	mov    ebx,0x2
c00076e4:	e8 28 a3 ff ff       	call   c0001a11 <st_dword>
c00076e9:	8d 45 04             	lea    eax,[ebp+0x4]
c00076ec:	83 ca ff             	or     edx,0xffffffff
c00076ef:	e8 1d a3 ff ff       	call   c0001a11 <st_dword>
c00076f4:	b9 08 00 00 00       	mov    ecx,0x8
c00076f9:	eb 1d                	jmp    c0007718 <f_mkfs+0x66d>
c00076fb:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076fe:	76 3b                	jbe    c000773b <f_mkfs+0x690>
c0007700:	43                   	inc    ebx
c0007701:	83 fe 01             	cmp    esi,0x1
c0007704:	89 da                	mov    edx,ebx
c0007706:	77 03                	ja     c000770b <f_mkfs+0x660>
c0007708:	83 ca ff             	or     edx,0xffffffff
c000770b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000770f:	4e                   	dec    esi
c0007710:	e8 fc a2 ff ff       	call   c0001a11 <st_dword>
c0007715:	83 c1 04             	add    ecx,0x4
c0007718:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000771c:	85 f6                	test   esi,esi
c000771e:	75 db                	jne    c00076fb <f_mkfs+0x650>
c0007720:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007725:	77 14                	ja     c000773b <f_mkfs+0x690>
c0007727:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000772b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007732:	85 f6                	test   esi,esi
c0007734:	74 05                	je     c000773b <f_mkfs+0x690>
c0007736:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007739:	77 dd                	ja     c0007718 <f_mkfs+0x66d>
c000773b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000773f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007743:	39 cf                	cmp    edi,ecx
c0007745:	76 02                	jbe    c0007749 <f_mkfs+0x69e>
c0007747:	89 cf                	mov    edi,ecx
c0007749:	83 ec 0c             	sub    esp,0xc
c000774c:	57                   	push   edi
c000774d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007751:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007755:	55                   	push   ebp
c0007756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000775a:	e8 07 a2 ff ff       	call   c0001966 <disk_write>
c000775f:	83 c4 20             	add    esp,0x20
c0007762:	85 c0                	test   eax,eax
c0007764:	0f 85 f2 09 00 00    	jne    c000815c <f_mkfs+0x10b1>
c000776a:	31 d2                	xor    edx,edx
c000776c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007770:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007774:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007778:	0f 85 48 ff ff ff    	jne    c00076c6 <f_mkfs+0x61b>
c000777e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007781:	31 d2                	xor    edx,edx
c0007783:	89 e8                	mov    eax,ebp
c0007785:	31 ff                	xor    edi,edi
c0007787:	e8 a3 a2 ff ff       	call   c0001a2f <mem_set>
c000778c:	8d 45 34             	lea    eax,[ebp+0x34]
c000778f:	ba 02 00 00 00       	mov    edx,0x2
c0007794:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007798:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000779c:	e8 70 a2 ff ff       	call   c0001a11 <st_dword>
c00077a1:	8d 45 38             	lea    eax,[ebp+0x38]
c00077a4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00077a8:	e8 64 a2 ff ff       	call   c0001a11 <st_dword>
c00077ad:	8d 45 44             	lea    eax,[ebp+0x44]
c00077b0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077b4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077b8:	e8 54 a2 ff ff       	call   c0001a11 <st_dword>
c00077bd:	8d 45 54             	lea    eax,[ebp+0x54]
c00077c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077c8:	83 c2 02             	add    edx,0x2
c00077cb:	e8 41 a2 ff ff       	call   c0001a11 <st_dword>
c00077d0:	8d 45 58             	lea    eax,[ebp+0x58]
c00077d3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077d7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077db:	e8 31 a2 ff ff       	call   c0001a11 <st_dword>
c00077e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077e9:	89 c6                	mov    esi,eax
c00077eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077ef:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00077f6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077fa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007801:	39 cb                	cmp    ebx,ecx
c0007803:	76 02                	jbe    c0007807 <f_mkfs+0x75c>
c0007805:	89 cb                	mov    ebx,ecx
c0007807:	83 ec 0c             	sub    esp,0xc
c000780a:	53                   	push   ebx
c000780b:	57                   	push   edi
c000780c:	56                   	push   esi
c000780d:	55                   	push   ebp
c000780e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007812:	e8 4f a1 ff ff       	call   c0001966 <disk_write>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	85 c0                	test   eax,eax
c000781c:	0f 85 3a 09 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007822:	31 d2                	xor    edx,edx
c0007824:	b9 00 02 00 00       	mov    ecx,0x200
c0007829:	89 e8                	mov    eax,ebp
c000782b:	e8 ff a1 ff ff       	call   c0001a2f <mem_set>
c0007830:	31 d2                	xor    edx,edx
c0007832:	01 de                	add    esi,ebx
c0007834:	11 d7                	adc    edi,edx
c0007836:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007839:	75 bf                	jne    c00077fa <f_mkfs+0x74f>
c000783b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000783f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007843:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000784b:	b9 00 02 00 00       	mov    ecx,0x200
c0007850:	31 d2                	xor    edx,edx
c0007852:	89 e8                	mov    eax,ebp
c0007854:	e8 d6 a1 ff ff       	call   c0001a2f <mem_set>
c0007859:	b9 0b 00 00 00       	mov    ecx,0xb
c000785e:	ba 00 f8 01 c0       	mov    edx,0xc001f800
c0007863:	89 e8                	mov    eax,ebp
c0007865:	e8 b0 a1 ff ff       	call   c0001a1a <mem_cpy>
c000786a:	8d 45 40             	lea    eax,[ebp+0x40]
c000786d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007871:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007875:	e8 9a a1 ff ff       	call   c0001a14 <st_qword>
c000787a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000787e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007881:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007885:	e8 8a a1 ff ff       	call   c0001a14 <st_qword>
c000788a:	8d 45 50             	lea    eax,[ebp+0x50]
c000788d:	ba 20 00 00 00       	mov    edx,0x20
c0007892:	e8 7a a1 ff ff       	call   c0001a11 <st_dword>
c0007897:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000789b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000789f:	e8 6d a1 ff ff       	call   c0001a11 <st_dword>
c00078a4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00078a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00078ac:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078b0:	e8 5c a1 ff ff       	call   c0001a11 <st_dword>
c00078b5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078bc:	e8 50 a1 ff ff       	call   c0001a11 <st_dword>
c00078c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078c5:	8d 50 02             	lea    edx,[eax+0x2]
c00078c8:	8d 45 60             	lea    eax,[ebp+0x60]
c00078cb:	e8 41 a1 ff ff       	call   c0001a11 <st_dword>
c00078d0:	8d 45 64             	lea    eax,[ebp+0x64]
c00078d3:	ba 00 00 21 50       	mov    edx,0x50210000
c00078d8:	e8 34 a1 ff ff       	call   c0001a11 <st_dword>
c00078dd:	8d 45 68             	lea    eax,[ebp+0x68]
c00078e0:	ba 00 01 00 00       	mov    edx,0x100
c00078e5:	e8 23 a1 ff ff       	call   c0001a0d <st_word>
c00078ea:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078ee:	b8 0a 00 00 00       	mov    eax,0xa
c00078f3:	48                   	dec    eax
c00078f4:	74 05                	je     c00078fb <f_mkfs+0x850>
c00078f6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078f9:	eb f8                	jmp    c00078f3 <f_mkfs+0x848>
c00078fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ff:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007903:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007907:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c000790b:	74 05                	je     c0007912 <f_mkfs+0x867>
c000790d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007910:	eb f5                	jmp    c0007907 <f_mkfs+0x85c>
c0007912:	8d 45 78             	lea    eax,[ebp+0x78]
c0007915:	ba eb fe 00 00       	mov    edx,0xfeeb
c000791a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007920:	31 db                	xor    ebx,ebx
c0007922:	e8 e6 a0 ff ff       	call   c0001a0d <st_word>
c0007927:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000792d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007932:	89 04 24             	mov    DWORD PTR [esp],eax
c0007935:	e8 d3 a0 ff ff       	call   c0001a0d <st_word>
c000793a:	31 c9                	xor    ecx,ecx
c000793c:	8d 41 96             	lea    eax,[ecx-0x6a]
c000793f:	83 f8 01             	cmp    eax,0x1
c0007942:	76 13                	jbe    c0007957 <f_mkfs+0x8ac>
c0007944:	83 f9 70             	cmp    ecx,0x70
c0007947:	74 0e                	je     c0007957 <f_mkfs+0x8ac>
c0007949:	89 da                	mov    edx,ebx
c000794b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007950:	e8 41 a5 ff ff       	call   c0001e96 <xsum32>
c0007955:	89 c3                	mov    ebx,eax
c0007957:	41                   	inc    ecx
c0007958:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000795e:	75 dc                	jne    c000793c <f_mkfs+0x891>
c0007960:	89 f0                	mov    eax,esi
c0007962:	89 fa                	mov    edx,edi
c0007964:	83 c0 01             	add    eax,0x1
c0007967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000796b:	83 d2 00             	adc    edx,0x0
c000796e:	83 ec 0c             	sub    esp,0xc
c0007971:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007975:	6a 01                	push   0x1
c0007977:	57                   	push   edi
c0007978:	56                   	push   esi
c0007979:	55                   	push   ebp
c000797a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000797e:	e8 e3 9f ff ff       	call   c0001966 <disk_write>
c0007983:	83 c4 20             	add    esp,0x20
c0007986:	85 c0                	test   eax,eax
c0007988:	0f 85 ce 07 00 00    	jne    c000815c <f_mkfs+0x10b1>
c000798e:	31 d2                	xor    edx,edx
c0007990:	b9 00 02 00 00       	mov    ecx,0x200
c0007995:	89 e8                	mov    eax,ebp
c0007997:	e8 93 a0 ff ff       	call   c0001a2f <mem_set>
c000799c:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a4:	e8 64 a0 ff ff       	call   c0001a0d <st_word>
c00079a9:	89 f0                	mov    eax,esi
c00079ab:	89 fa                	mov    edx,edi
c00079ad:	83 c0 09             	add    eax,0x9
c00079b0:	83 d2 00             	adc    edx,0x0
c00079b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00079b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ba:	31 c9                	xor    ecx,ecx
c00079bc:	41                   	inc    ecx
c00079bd:	89 da                	mov    edx,ebx
c00079bf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079c4:	e8 cd a4 ff ff       	call   c0001e96 <xsum32>
c00079c9:	89 c3                	mov    ebx,eax
c00079cb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d1:	75 e9                	jne    c00079bc <f_mkfs+0x911>
c00079d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079db:	83 c0 01             	add    eax,0x1
c00079de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079e2:	83 d2 00             	adc    edx,0x0
c00079e5:	83 ec 0c             	sub    esp,0xc
c00079e8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079ec:	6a 01                	push   0x1
c00079ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079f6:	55                   	push   ebp
c00079f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079fb:	e8 66 9f ff ff       	call   c0001966 <disk_write>
c0007a00:	83 c4 20             	add    esp,0x20
c0007a03:	85 c0                	test   eax,eax
c0007a05:	0f 85 51 07 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a0f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a13:	75 09                	jne    c0007a1e <f_mkfs+0x973>
c0007a15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a18:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a1c:	74 12                	je     c0007a30 <f_mkfs+0x985>
c0007a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a2e:	eb 8a                	jmp    c00079ba <f_mkfs+0x90f>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	b9 00 02 00 00       	mov    ecx,0x200
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 f1 9f ff ff       	call   c0001a2f <mem_set>
c0007a3e:	83 c6 0b             	add    esi,0xb
c0007a41:	83 d7 00             	adc    edi,0x0
c0007a44:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a48:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a4c:	31 c9                	xor    ecx,ecx
c0007a4e:	41                   	inc    ecx
c0007a4f:	89 da                	mov    edx,ebx
c0007a51:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a56:	e8 3b a4 ff ff       	call   c0001e96 <xsum32>
c0007a5b:	89 c3                	mov    ebx,eax
c0007a5d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a63:	75 e9                	jne    c0007a4e <f_mkfs+0x9a3>
c0007a65:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a6c:	83 c6 01             	add    esi,0x1
c0007a6f:	83 d7 00             	adc    edi,0x0
c0007a72:	83 ec 0c             	sub    esp,0xc
c0007a75:	6a 01                	push   0x1
c0007a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a7f:	55                   	push   ebp
c0007a80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a84:	e8 dd 9e ff ff       	call   c0001966 <disk_write>
c0007a89:	83 c4 20             	add    esp,0x20
c0007a8c:	85 c0                	test   eax,eax
c0007a8e:	0f 85 c8 06 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007a94:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a98:	75 06                	jne    c0007aa0 <f_mkfs+0x9f5>
c0007a9a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a9e:	74 09                	je     c0007aa9 <f_mkfs+0x9fe>
c0007aa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007aa3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007aa7:	eb a3                	jmp    c0007a4c <f_mkfs+0x9a1>
c0007aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aad:	89 da                	mov    edx,ebx
c0007aaf:	01 e8                	add    eax,ebp
c0007ab1:	e8 5b 9f ff ff       	call   c0001a11 <st_dword>
c0007ab6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007abb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ac3:	75 e4                	jne    c0007aa9 <f_mkfs+0x9fe>
c0007ac5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007acc:	83 c6 02             	add    esi,0x2
c0007acf:	83 d7 00             	adc    edi,0x0
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	6a 01                	push   0x1
c0007ad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007adb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007adf:	55                   	push   ebp
c0007ae0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae4:	e8 7d 9e ff ff       	call   c0001966 <disk_write>
c0007ae9:	83 c4 20             	add    esp,0x20
c0007aec:	85 c0                	test   eax,eax
c0007aee:	0f 85 68 06 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007af4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007af9:	74 0d                	je     c0007b08 <f_mkfs+0xa5d>
c0007afb:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b03:	e9 43 fd ff ff       	jmp    c000784b <f_mkfs+0x7a0>
c0007b08:	b1 07                	mov    cl,0x7
c0007b0a:	e9 e3 05 00 00       	jmp    c00080f2 <f_mkfs+0x1047>
c0007b0f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b14:	0f 85 4f 02 00 00    	jne    c0007d69 <f_mkfs+0xcbe>
c0007b1a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b1f:	0f 86 22 02 00 00    	jbe    c0007d47 <f_mkfs+0xc9c>
c0007b25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b2a:	0f 85 81 06 00 00    	jne    c00081b1 <f_mkfs+0x1106>
c0007b30:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b37:	83 f8 40             	cmp    eax,0x40
c0007b3a:	0f 87 51 06 00 00    	ja     c0008191 <f_mkfs+0x10e6>
c0007b40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b44:	85 ff                	test   edi,edi
c0007b46:	75 1c                	jne    c0007b64 <f_mkfs+0xab9>
c0007b48:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b4b:	ba 00 f7 01 c0       	mov    edx,0xc001f700
c0007b50:	c1 e9 0c             	shr    ecx,0xc
c0007b53:	bf 01 00 00 00       	mov    edi,0x1
c0007b58:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b5b:	66 85 c0             	test   ax,ax
c0007b5e:	0f 85 95 01 00 00    	jne    c0007cf9 <f_mkfs+0xc4e>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b69:	f7 f7                	div    edi
c0007b6b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b70:	0f 86 95 01 00 00    	jbe    c0007d0b <f_mkfs+0xc60>
c0007b76:	83 c0 02             	add    eax,0x2
c0007b79:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b7e:	01 c0                	add    eax,eax
c0007b80:	05 ff 01 00 00       	add    eax,0x1ff
c0007b85:	be 01 00 00 00       	mov    esi,0x1
c0007b8a:	c1 e8 09             	shr    eax,0x9
c0007b8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b95:	c1 e0 05             	shl    eax,0x5
c0007b98:	c1 e8 09             	shr    eax,0x9
c0007b9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b9f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007ba4:	31 d2                	xor    edx,edx
c0007ba6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007baa:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007bae:	89 f0                	mov    eax,esi
c0007bb0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007bb4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007bbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bc4:	31 d2                	xor    edx,edx
c0007bc6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bcb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bcf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bd3:	31 db                	xor    ebx,ebx
c0007bd5:	01 c8                	add    eax,ecx
c0007bd7:	11 da                	adc    edx,ebx
c0007bd9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bdd:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007be1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007be5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007be9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007bed:	f7 da                	neg    edx
c0007bef:	21 d1                	and    ecx,edx
c0007bf1:	29 d9                	sub    ecx,ebx
c0007bf3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007bf8:	0f 85 20 01 00 00    	jne    c0007d1e <f_mkfs+0xc73>
c0007bfe:	31 db                	xor    ebx,ebx
c0007c00:	01 ce                	add    esi,ecx
c0007c02:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c06:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c0a:	31 d2                	xor    edx,edx
c0007c0c:	89 f8                	mov    eax,edi
c0007c0e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c12:	c1 e0 04             	shl    eax,0x4
c0007c15:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c19:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c1d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c21:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c25:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c28:	19 d3                	sbb    ebx,edx
c0007c2a:	0f 82 40 01 00 00    	jb     c0007d70 <f_mkfs+0xcc5>
c0007c30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c37:	89 c8                	mov    eax,ecx
c0007c39:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c3e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c42:	29 f0                	sub    eax,esi
c0007c44:	29 d0                	sub    eax,edx
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	f7 f7                	div    edi
c0007c4a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c4f:	89 c3                	mov    ebx,eax
c0007c51:	0f 85 b8 fe ff ff    	jne    c0007b0f <f_mkfs+0xa64>
c0007c57:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c5c:	0f 87 1d 01 00 00    	ja     c0007d7f <f_mkfs+0xcd4>
c0007c62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c67:	0f 85 03 01 00 00    	jne    c0007d70 <f_mkfs+0xcc5>
c0007c6d:	83 ff 01             	cmp    edi,0x1
c0007c70:	0f 86 fa 00 00 00    	jbe    c0007d70 <f_mkfs+0xcc5>
c0007c76:	d1 ef                	shr    edi,1
c0007c78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c80:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c83:	85 db                	test   ebx,ebx
c0007c85:	75 2d                	jne    c0007cb4 <f_mkfs+0xc09>
c0007c87:	89 cb                	mov    ebx,ecx
c0007c89:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c0007c8e:	c1 eb 11             	shr    ebx,0x11
c0007c91:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c99:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c9c:	66 85 c0             	test   ax,ax
c0007c9f:	74 11                	je     c0007cb2 <f_mkfs+0xc07>
c0007ca1:	83 c2 02             	add    edx,0x2
c0007ca4:	39 d8                	cmp    eax,ebx
c0007ca6:	77 0a                	ja     c0007cb2 <f_mkfs+0xc07>
c0007ca8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007cac:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007cb0:	eb e7                	jmp    c0007c99 <f_mkfs+0xbee>
c0007cb2:	31 db                	xor    ebx,ebx
c0007cb4:	31 d2                	xor    edx,edx
c0007cb6:	89 c8                	mov    eax,ecx
c0007cb8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007cbc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cc3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cc8:	c1 ea 09             	shr    edx,0x9
c0007ccb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cd0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cd4:	0f 87 96 00 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c0007cda:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cde:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ce6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cea:	be 20 00 00 00       	mov    esi,0x20
c0007cef:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007cf4:	e9 a6 fe ff ff       	jmp    c0007b9f <f_mkfs+0xaf4>
c0007cf9:	83 c2 02             	add    edx,0x2
c0007cfc:	39 c8                	cmp    eax,ecx
c0007cfe:	0f 87 60 fe ff ff    	ja     c0007b64 <f_mkfs+0xab9>
c0007d04:	01 ff                	add    edi,edi
c0007d06:	e9 4d fe ff ff       	jmp    c0007b58 <f_mkfs+0xaad>
c0007d0b:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d0e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d13:	40                   	inc    eax
c0007d14:	d1 e8                	shr    eax,1
c0007d16:	83 c0 03             	add    eax,0x3
c0007d19:	e9 62 fe ff ff       	jmp    c0007b80 <f_mkfs+0xad5>
c0007d1e:	31 d2                	xor    edx,edx
c0007d20:	89 c8                	mov    eax,ecx
c0007d22:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d26:	85 d2                	test   edx,edx
c0007d28:	74 0c                	je     c0007d36 <f_mkfs+0xc8b>
c0007d2a:	49                   	dec    ecx
c0007d2b:	46                   	inc    esi
c0007d2c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d31:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d36:	89 c8                	mov    eax,ecx
c0007d38:	31 d2                	xor    edx,edx
c0007d3a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d3e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d42:	e9 c3 fe ff ff       	jmp    c0007c0a <f_mkfs+0xb5f>
c0007d47:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d4c:	77 31                	ja     c0007d7f <f_mkfs+0xcd4>
c0007d4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d53:	75 1b                	jne    c0007d70 <f_mkfs+0xcc5>
c0007d55:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d5c:	3d 80 00 00 00       	cmp    eax,0x80
c0007d61:	0f 86 d9 fd ff ff    	jbe    c0007b40 <f_mkfs+0xa95>
c0007d67:	eb 07                	jmp    c0007d70 <f_mkfs+0xcc5>
c0007d69:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d6e:	76 0a                	jbe    c0007d7a <f_mkfs+0xccf>
c0007d70:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d75:	e9 ff 03 00 00       	jmp    c0008179 <f_mkfs+0x10ce>
c0007d7a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7f:	31 d2                	xor    edx,edx
c0007d81:	b9 00 02 00 00       	mov    ecx,0x200
c0007d86:	89 e8                	mov    eax,ebp
c0007d88:	e8 a2 9c ff ff       	call   c0001a2f <mem_set>
c0007d8d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d92:	ba 22 f8 01 c0       	mov    edx,0xc001f822
c0007d97:	89 e8                	mov    eax,ebp
c0007d99:	e8 7c 9c ff ff       	call   c0001a1a <mem_cpy>
c0007d9e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007da1:	ba 00 02 00 00       	mov    edx,0x200
c0007da6:	e8 62 9c ff ff       	call   c0001a0d <st_word>
c0007dab:	89 f8                	mov    eax,edi
c0007dad:	0f b7 d6             	movzx  edx,si
c0007db0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007db3:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007db6:	e8 52 9c ff ff       	call   c0001a0d <st_word>
c0007dbb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007dbf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007dc4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dc7:	75 08                	jne    c0007dd1 <f_mkfs+0xd26>
c0007dc9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dd1:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dd8:	e8 30 9c ff ff       	call   c0001a0d <st_word>
c0007ddd:	b8 ff ff 00 00       	mov    eax,0xffff
c0007de2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007de6:	39 d0                	cmp    eax,edx
c0007de8:	b8 00 00 00 00       	mov    eax,0x0
c0007ded:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007df1:	72 0a                	jb     c0007dfd <f_mkfs+0xd52>
c0007df3:	8d 45 13             	lea    eax,[ebp+0x13]
c0007df6:	e8 12 9c ff ff       	call   c0001a0d <st_word>
c0007dfb:	eb 08                	jmp    c0007e05 <f_mkfs+0xd5a>
c0007dfd:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e00:	e8 0c 9c ff ff       	call   c0001a11 <st_dword>
c0007e05:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e08:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e0d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e11:	e8 f7 9b ff ff       	call   c0001a0d <st_word>
c0007e16:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e19:	ba ff 00 00 00       	mov    edx,0xff
c0007e1e:	e8 ea 9b ff ff       	call   c0001a0d <st_word>
c0007e23:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e2a:	e8 e2 9b ff ff       	call   c0001a11 <st_dword>
c0007e2f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e34:	75 57                	jne    c0007e8d <f_mkfs+0xde2>
c0007e36:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e39:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e3e:	e8 ce 9b ff ff       	call   c0001a11 <st_dword>
c0007e43:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e46:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e4a:	e8 c2 9b ff ff       	call   c0001a11 <st_dword>
c0007e4f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e52:	ba 02 00 00 00       	mov    edx,0x2
c0007e57:	e8 b5 9b ff ff       	call   c0001a11 <st_dword>
c0007e5c:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e5f:	ba 01 00 00 00       	mov    edx,0x1
c0007e64:	e8 a4 9b ff ff       	call   c0001a0d <st_word>
c0007e69:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e6c:	ba 06 00 00 00       	mov    edx,0x6
c0007e71:	e8 97 9b ff ff       	call   c0001a0d <st_word>
c0007e76:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e7a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e7e:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e81:	b9 13 00 00 00       	mov    ecx,0x13
c0007e86:	ba 2e f8 01 c0       	mov    edx,0xc001f82e
c0007e8b:	eb 2f                	jmp    c0007ebc <f_mkfs+0xe11>
c0007e8d:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e90:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e95:	e8 77 9b ff ff       	call   c0001a11 <st_dword>
c0007e9a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e9f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007ea2:	e8 66 9b ff ff       	call   c0001a0d <st_word>
c0007ea7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007eab:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007eaf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007eb2:	b9 13 00 00 00       	mov    ecx,0x13
c0007eb7:	ba 42 f8 01 c0       	mov    edx,0xc001f842
c0007ebc:	e8 59 9b ff ff       	call   c0001a1a <mem_cpy>
c0007ec1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007ec7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ecc:	89 f0                	mov    eax,esi
c0007ece:	e8 3a 9b ff ff       	call   c0001a0d <st_word>
c0007ed3:	83 ec 0c             	sub    esp,0xc
c0007ed6:	6a 01                	push   0x1
c0007ed8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007edc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ee0:	55                   	push   ebp
c0007ee1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ee5:	e8 7c 9a ff ff       	call   c0001966 <disk_write>
c0007eea:	83 c4 20             	add    esp,0x20
c0007eed:	85 c0                	test   eax,eax
c0007eef:	0f 85 67 02 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007ef5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007efa:	0f 85 b7 00 00 00    	jne    c0007fb7 <f_mkfs+0xf0c>
c0007f00:	83 ec 0c             	sub    esp,0xc
c0007f03:	6a 01                	push   0x1
c0007f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f0d:	83 c0 06             	add    eax,0x6
c0007f10:	83 d2 00             	adc    edx,0x0
c0007f13:	52                   	push   edx
c0007f14:	50                   	push   eax
c0007f15:	55                   	push   ebp
c0007f16:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f1a:	e8 47 9a ff ff       	call   c0001966 <disk_write>
c0007f1f:	83 c4 20             	add    esp,0x20
c0007f22:	b9 00 02 00 00       	mov    ecx,0x200
c0007f27:	31 d2                	xor    edx,edx
c0007f29:	89 e8                	mov    eax,ebp
c0007f2b:	e8 ff 9a ff ff       	call   c0001a2f <mem_set>
c0007f30:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f35:	89 e8                	mov    eax,ebp
c0007f37:	e8 d5 9a ff ff       	call   c0001a11 <st_dword>
c0007f3c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f42:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f47:	e8 c5 9a ff ff       	call   c0001a11 <st_dword>
c0007f4c:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f4f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f55:	e8 b7 9a ff ff       	call   c0001a11 <st_dword>
c0007f5a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f60:	ba 02 00 00 00       	mov    edx,0x2
c0007f65:	e8 a7 9a ff ff       	call   c0001a11 <st_dword>
c0007f6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f6f:	89 f0                	mov    eax,esi
c0007f71:	e8 97 9a ff ff       	call   c0001a0d <st_word>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 07             	add    eax,0x7
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 d1 99 ff ff       	call   c0001966 <disk_write>
c0007f95:	83 c4 14             	add    esp,0x14
c0007f98:	6a 01                	push   0x1
c0007f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fa2:	83 c0 01             	add    eax,0x1
c0007fa5:	83 d2 00             	adc    edx,0x0
c0007fa8:	52                   	push   edx
c0007fa9:	50                   	push   eax
c0007faa:	55                   	push   ebp
c0007fab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007faf:	e8 b2 99 ff ff       	call   c0001966 <disk_write>
c0007fb4:	83 c4 20             	add    esp,0x20
c0007fb7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fbe:	31 d2                	xor    edx,edx
c0007fc0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fc6:	31 db                	xor    ebx,ebx
c0007fc8:	89 e8                	mov    eax,ebp
c0007fca:	e8 60 9a ff ff       	call   c0001a2f <mem_set>
c0007fcf:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fdb:	0f 94 c3             	sete   bl
c0007fde:	4b                   	dec    ebx
c0007fdf:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fe5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007feb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ff0:	75 21                	jne    c0008013 <f_mkfs+0xf68>
c0007ff2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ff7:	89 e8                	mov    eax,ebp
c0007ff9:	e8 13 9a ff ff       	call   c0001a11 <st_dword>
c0007ffe:	8d 45 04             	lea    eax,[ebp+0x4]
c0008001:	83 ca ff             	or     edx,0xffffffff
c0008004:	e8 08 9a ff ff       	call   c0001a11 <st_dword>
c0008009:	8d 45 08             	lea    eax,[ebp+0x8]
c000800c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008011:	eb 04                	jmp    c0008017 <f_mkfs+0xf6c>
c0008013:	89 da                	mov    edx,ebx
c0008015:	89 e8                	mov    eax,ebp
c0008017:	e8 f5 99 ff ff       	call   c0001a11 <st_dword>
c000801c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008024:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008028:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000802c:	39 ce                	cmp    esi,ecx
c000802e:	76 02                	jbe    c0008032 <f_mkfs+0xf87>
c0008030:	89 ce                	mov    esi,ecx
c0008032:	83 ec 0c             	sub    esp,0xc
c0008035:	56                   	push   esi
c0008036:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000803a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000803e:	55                   	push   ebp
c000803f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008043:	e8 1e 99 ff ff       	call   c0001966 <disk_write>
c0008048:	83 c4 20             	add    esp,0x20
c000804b:	85 c0                	test   eax,eax
c000804d:	0f 85 09 01 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0008053:	31 d2                	xor    edx,edx
c0008055:	b9 00 02 00 00       	mov    ecx,0x200
c000805a:	89 e8                	mov    eax,ebp
c000805c:	e8 ce 99 ff ff       	call   c0001a2f <mem_set>
c0008061:	31 d2                	xor    edx,edx
c0008063:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008067:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000806b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000806f:	75 b3                	jne    c0008024 <f_mkfs+0xf79>
c0008071:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008074:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000807b:	40                   	inc    eax
c000807c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008080:	0f 87 65 ff ff ff    	ja     c0007feb <f_mkfs+0xf40>
c0008086:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808b:	74 04                	je     c0008091 <f_mkfs+0xfe6>
c000808d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008091:	89 fb                	mov    ebx,edi
c0008093:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008097:	76 04                	jbe    c000809d <f_mkfs+0xff2>
c0008099:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000809d:	83 ec 0c             	sub    esp,0xc
c00080a0:	53                   	push   ebx
c00080a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a9:	55                   	push   ebp
c00080aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ae:	e8 b3 98 ff ff       	call   c0001966 <disk_write>
c00080b3:	83 c4 20             	add    esp,0x20
c00080b6:	85 c0                	test   eax,eax
c00080b8:	0f 85 9e 00 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 df                	sub    edi,ebx
c00080ca:	75 c5                	jne    c0008091 <f_mkfs+0xfe6>
c00080cc:	b1 0c                	mov    cl,0xc
c00080ce:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d3:	74 1d                	je     c00080f2 <f_mkfs+0x1047>
c00080d5:	b8 ff ff 00 00       	mov    eax,0xffff
c00080da:	b1 06                	mov    cl,0x6
c00080dc:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080e0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080e4:	72 0c                	jb     c00080f2 <f_mkfs+0x1047>
c00080e6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080eb:	0f 94 c1             	sete   cl
c00080ee:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080f2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080f7:	75 4c                	jne    c0008145 <f_mkfs+0x109a>
c00080f9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080fd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008101:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008108:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000810f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000811a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008125:	0f b6 c9             	movzx  ecx,cl
c0008128:	83 ec 0c             	sub    esp,0xc
c000812b:	55                   	push   ebp
c000812c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008137:	e8 2f c2 ff ff       	call   c000436b <create_partition>
c000813c:	83 c4 10             	add    esp,0x10
c000813f:	89 c3                	mov    ebx,eax
c0008141:	85 c0                	test   eax,eax
c0008143:	75 34                	jne    c0008179 <f_mkfs+0x10ce>
c0008145:	31 db                	xor    ebx,ebx
c0008147:	50                   	push   eax
c0008148:	6a 00                	push   0x0
c000814a:	6a 00                	push   0x0
c000814c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008150:	e8 27 98 ff ff       	call   c000197c <disk_ioctl>
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	85 c0                	test   eax,eax
c000815a:	74 1d                	je     c0008179 <f_mkfs+0x10ce>
c000815c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008164:	75 0c                	jne    c0008172 <f_mkfs+0x10c7>
c0008166:	83 ec 0c             	sub    esp,0xc
c0008169:	55                   	push   ebp
c000816a:	e8 75 00 00 00       	call   c00081e4 <ff_memfree>
c000816f:	83 c4 10             	add    esp,0x10
c0008172:	bb 01 00 00 00       	mov    ebx,0x1
c0008177:	eb 48                	jmp    c00081c1 <f_mkfs+0x1116>
c0008179:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008181:	75 3e                	jne    c00081c1 <f_mkfs+0x1116>
c0008183:	83 ec 0c             	sub    esp,0xc
c0008186:	55                   	push   ebp
c0008187:	e8 58 00 00 00       	call   c00081e4 <ff_memfree>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	eb 30                	jmp    c00081c1 <f_mkfs+0x1116>
c0008191:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008196:	0f 85 eb fa ff ff    	jne    c0007c87 <f_mkfs+0xbdc>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00081a6:	0f 86 b8 f9 ff ff    	jbe    c0007b64 <f_mkfs+0xab9>
c00081ac:	e9 bf fb ff ff       	jmp    c0007d70 <f_mkfs+0xcc5>
c00081b1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081b6:	0f 85 c0 fa ff ff    	jne    c0007c7c <f_mkfs+0xbd1>
c00081bc:	e9 af fb ff ff       	jmp    c0007d70 <f_mkfs+0xcc5>
c00081c1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081c7:	89 d8                	mov    eax,ebx
c00081c9:	5b                   	pop    ebx
c00081ca:	5e                   	pop    esi
c00081cb:	5f                   	pop    edi
c00081cc:	5d                   	pop    ebp
c00081cd:	c3                   	ret    

c00081ce <ff_memalloc>:
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	83 ec 0c             	sub    esp,0xc
c00081d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081d8:	e8 79 3a 00 00       	call   c000bc56 <malloc>
c00081dd:	83 c4 10             	add    esp,0x10
c00081e0:	83 c4 0c             	add    esp,0xc
c00081e3:	c3                   	ret    

c00081e4 <ff_memfree>:
c00081e4:	83 ec 0c             	sub    esp,0xc
c00081e7:	83 ec 0c             	sub    esp,0xc
c00081ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081ee:	e8 73 3a 00 00       	call   c000bc66 <free>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	90                   	nop
c00081f7:	83 c4 0c             	add    esp,0xc
c00081fa:	c3                   	ret    

c00081fb <ff_uni2oem>:
c00081fb:	83 ec 14             	sub    esp,0x14
c00081fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008202:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008206:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000820d:	c7 44 24 0c 60 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb60
c0008215:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000821a:	77 0b                	ja     c0008227 <ff_uni2oem+0x2c>
c000821c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008220:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008225:	eb 5b                	jmp    c0008282 <ff_uni2oem+0x87>
c0008227:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000822f:	77 51                	ja     c0008282 <ff_uni2oem+0x87>
c0008231:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008237:	75 49                	jne    c0008282 <ff_uni2oem+0x87>
c0008239:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008240:	eb 0b                	jmp    c000824d <ff_uni2oem+0x52>
c0008242:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008247:	40                   	inc    eax
c0008248:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000824d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008253:	77 1b                	ja     c0008270 <ff_uni2oem+0x75>
c0008255:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000825a:	01 c0                	add    eax,eax
c000825c:	89 c2                	mov    edx,eax
c000825e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008262:	01 d0                	add    eax,edx
c0008264:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008267:	0f b7 c0             	movzx  eax,ax
c000826a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000826e:	75 d2                	jne    c0008242 <ff_uni2oem+0x47>
c0008270:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008275:	83 e8 80             	sub    eax,0xffffff80
c0008278:	25 ff 00 00 00       	and    eax,0xff
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008287:	83 c4 14             	add    esp,0x14
c000828a:	c3                   	ret    

c000828b <ff_oem2uni>:
c000828b:	83 ec 18             	sub    esp,0x18
c000828e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008296:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000829b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000829f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00082a6:	c7 44 24 10 60 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb60
c00082ae:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082b4:	77 0b                	ja     c00082c1 <ff_oem2uni+0x36>
c00082b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082bf:	eb 2d                	jmp    c00082ee <ff_oem2uni+0x63>
c00082c1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082c7:	75 25                	jne    c00082ee <ff_oem2uni+0x63>
c00082c9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082d0:	77 1c                	ja     c00082ee <ff_oem2uni+0x63>
c00082d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082d7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082dc:	01 c0                	add    eax,eax
c00082de:	89 c2                	mov    edx,eax
c00082e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082e4:	01 d0                	add    eax,edx
c00082e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082e9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082ee:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082f3:	83 c4 18             	add    esp,0x18
c00082f6:	c3                   	ret    

c00082f7 <ff_wtoupper>:
c00082f7:	83 ec 10             	sub    esp,0x10
c00082fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008302:	0f 87 3e 01 00 00    	ja     c0008446 <ff_wtoupper+0x14f>
c0008308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000830c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008311:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008318:	77 07                	ja     c0008321 <ff_wtoupper+0x2a>
c000831a:	b8 60 f9 01 c0       	mov    eax,0xc001f960
c000831f:	eb 05                	jmp    c0008326 <ff_wtoupper+0x2f>
c0008321:	b8 a0 f8 01 c0       	mov    eax,0xc001f8a0
c0008326:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000832a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000832e:	8d 50 02             	lea    edx,[eax+0x2]
c0008331:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008335:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008338:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000833d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008343:	0f 84 f4 00 00 00    	je     c000843d <ff_wtoupper+0x146>
c0008349:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000834e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008353:	0f 82 e4 00 00 00    	jb     c000843d <ff_wtoupper+0x146>
c0008359:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835d:	8d 50 02             	lea    edx,[eax+0x2]
c0008360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008364:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008367:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000836c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008371:	66 c1 e8 08          	shr    ax,0x8
c0008375:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000837a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008381:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008386:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000838b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008390:	01 ca                	add    edx,ecx
c0008392:	39 d0                	cmp    eax,edx
c0008394:	0f 8d 86 00 00 00    	jge    c0008420 <ff_wtoupper+0x129>
c000839a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000839f:	83 f8 08             	cmp    eax,0x8
c00083a2:	0f 87 94 00 00 00    	ja     c000843c <ff_wtoupper+0x145>
c00083a8:	8b 04 85 60 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07a0]
c00083af:	ff e0                	jmp    eax
c00083b1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083b6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083bb:	29 c2                	sub    edx,eax
c00083bd:	89 d0                	mov    eax,edx
c00083bf:	01 c0                	add    eax,eax
c00083c1:	89 c2                	mov    edx,eax
c00083c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c7:	01 d0                	add    eax,edx
c00083c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083d1:	eb 4b                	jmp    c000841e <ff_wtoupper+0x127>
c00083d3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083d8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083dc:	83 e0 01             	and    eax,0x1
c00083df:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083e4:	eb 38                	jmp    c000841e <ff_wtoupper+0x127>
c00083e6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083ec:	eb 30                	jmp    c000841e <ff_wtoupper+0x127>
c00083ee:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083f4:	eb 28                	jmp    c000841e <ff_wtoupper+0x127>
c00083f6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083fc:	eb 20                	jmp    c000841e <ff_wtoupper+0x127>
c00083fe:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008404:	eb 18                	jmp    c000841e <ff_wtoupper+0x127>
c0008406:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000840c:	eb 10                	jmp    c000841e <ff_wtoupper+0x127>
c000840e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008414:	eb 08                	jmp    c000841e <ff_wtoupper+0x127>
c0008416:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000841d:	90                   	nop
c000841e:	eb 1c                	jmp    c000843c <ff_wtoupper+0x145>
c0008420:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008426:	0f 85 fe fe ff ff    	jne    c000832a <ff_wtoupper+0x33>
c000842c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008431:	01 c0                	add    eax,eax
c0008433:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008437:	e9 ee fe ff ff       	jmp    c000832a <ff_wtoupper+0x33>
c000843c:	90                   	nop
c000843d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008442:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008446:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	c3                   	ret    

c000844e <is_bad_src_ratio>:
c000844e:	83 ec 0c             	sub    esp,0xc
c0008451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008455:	89 04 24             	mov    DWORD PTR [esp],eax
c0008458:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008460:	dd 04 24             	fld    QWORD PTR [esp]
c0008463:	dd 05 20 01 02 c0    	fld    QWORD PTR ds:0xc0020120
c0008469:	de d9                	fcompp 
c000846b:	df e0                	fnstsw ax
c000846d:	f6 c4 45             	test   ah,0x45
c0008470:	74 10                	je     c0008482 <is_bad_src_ratio+0x34>
c0008472:	dd 04 24             	fld    QWORD PTR [esp]
c0008475:	dc 1d 28 01 02 c0    	fcomp  QWORD PTR ds:0xc0020128
c000847b:	df e0                	fnstsw ax
c000847d:	f6 c4 45             	test   ah,0x45
c0008480:	75 07                	jne    c0008489 <is_bad_src_ratio+0x3b>
c0008482:	b8 01 00 00 00       	mov    eax,0x1
c0008487:	eb 05                	jmp    c000848e <is_bad_src_ratio+0x40>
c0008489:	b8 00 00 00 00       	mov    eax,0x0
c000848e:	83 c4 0c             	add    esp,0xc
c0008491:	c3                   	ret    

c0008492 <psrc_set_converter>:
c0008492:	56                   	push   esi
c0008493:	89 d6                	mov    esi,edx
c0008495:	53                   	push   ebx
c0008496:	89 c3                	mov    ebx,eax
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	52                   	push   edx
c000849c:	50                   	push   eax
c000849d:	e8 33 24 00 00       	call   c000a8d5 <sinc_set_converter>
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	85 c0                	test   eax,eax
c00084a7:	74 25                	je     c00084ce <psrc_set_converter+0x3c>
c00084a9:	50                   	push   eax
c00084aa:	50                   	push   eax
c00084ab:	56                   	push   esi
c00084ac:	53                   	push   ebx
c00084ad:	e8 32 28 00 00       	call   c000ace4 <zoh_set_converter>
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	85 c0                	test   eax,eax
c00084b7:	74 15                	je     c00084ce <psrc_set_converter+0x3c>
c00084b9:	51                   	push   ecx
c00084ba:	51                   	push   ecx
c00084bb:	56                   	push   esi
c00084bc:	53                   	push   ebx
c00084bd:	e8 10 0a 00 00       	call   c0008ed2 <linear_set_converter>
c00084c2:	83 c4 10             	add    esp,0x10
c00084c5:	ba 0a 00 00 00       	mov    edx,0xa
c00084ca:	85 c0                	test   eax,eax
c00084cc:	75 02                	jne    c00084d0 <psrc_set_converter+0x3e>
c00084ce:	31 d2                	xor    edx,edx
c00084d0:	89 d0                	mov    eax,edx
c00084d2:	5a                   	pop    edx
c00084d3:	5b                   	pop    ebx
c00084d4:	5e                   	pop    esi
c00084d5:	c3                   	ret    

c00084d6 <src_delete>:
c00084d6:	53                   	push   ebx
c00084d7:	83 ec 08             	sub    esp,0x8
c00084da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084de:	85 db                	test   ebx,ebx
c00084e0:	74 29                	je     c000850b <src_delete+0x35>
c00084e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084e5:	85 c0                	test   eax,eax
c00084e7:	74 0c                	je     c00084f5 <src_delete+0x1f>
c00084e9:	83 ec 0c             	sub    esp,0xc
c00084ec:	50                   	push   eax
c00084ed:	e8 74 37 00 00       	call   c000bc66 <free>
c00084f2:	83 c4 10             	add    esp,0x10
c00084f5:	50                   	push   eax
c00084f6:	6a 3c                	push   0x3c
c00084f8:	6a 00                	push   0x0
c00084fa:	53                   	push   ebx
c00084fb:	e8 08 81 ff ff       	call   c0000608 <memset>
c0008500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008503:	e8 5e 37 00 00       	call   c000bc66 <free>
c0008508:	83 c4 10             	add    esp,0x10
c000850b:	31 c0                	xor    eax,eax
c000850d:	83 c4 08             	add    esp,0x8
c0008510:	5b                   	pop    ebx
c0008511:	c3                   	ret    

c0008512 <src_process>:
c0008512:	56                   	push   esi
c0008513:	53                   	push   ebx
c0008514:	53                   	push   ebx
c0008515:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008519:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000851d:	85 f6                	test   esi,esi
c000851f:	0f 84 e2 00 00 00    	je     c0008607 <src_process+0xf5>
c0008525:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008529:	0f 84 df 00 00 00    	je     c000860e <src_process+0xfc>
c000852f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008533:	0f 84 d5 00 00 00    	je     c000860e <src_process+0xfc>
c0008539:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008540:	0f 85 cf 00 00 00    	jne    c0008615 <src_process+0x103>
c0008546:	85 db                	test   ebx,ebx
c0008548:	0f 84 ce 00 00 00    	je     c000861c <src_process+0x10a>
c000854e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008551:	0f 84 cc 00 00 00    	je     c0008623 <src_process+0x111>
c0008557:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000855b:	0f 84 c2 00 00 00    	je     c0008623 <src_process+0x111>
c0008561:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008564:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008567:	e8 e2 fe ff ff       	call   c000844e <is_bad_src_ratio>
c000856c:	5a                   	pop    edx
c000856d:	85 c0                	test   eax,eax
c000856f:	59                   	pop    ecx
c0008570:	0f 85 b4 00 00 00    	jne    c000862a <src_process+0x118>
c0008576:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x71>
c000857c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008583:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008587:	79 07                	jns    c0008590 <src_process+0x7e>
c0008589:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008590:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008592:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008595:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008598:	39 ca                	cmp    edx,ecx
c000859a:	73 0b                	jae    c00085a7 <src_process+0x95>
c000859c:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00085a0:	8d 04 82             	lea    eax,[edx+eax*4]
c00085a3:	39 c1                	cmp    ecx,eax
c00085a5:	eb 09                	jmp    c00085b0 <src_process+0x9e>
c00085a7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00085ab:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085ae:	39 c2                	cmp    edx,eax
c00085b0:	72 7f                	jb     c0008631 <src_process+0x11f>
c00085b2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085c0:	d9 05 40 01 02 c0    	fld    DWORD PTR ds:0xc0020140
c00085c6:	dc 1e                	fcomp  QWORD PTR [esi]
c00085c8:	df e0                	fnstsw ax
c00085ca:	9e                   	sahf   
c00085cb:	76 05                	jbe    c00085d2 <src_process+0xc0>
c00085cd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085d0:	dd 1e                	fstp   QWORD PTR [esi]
c00085d2:	83 ec 10             	sub    esp,0x10
c00085d5:	dd 06                	fld    QWORD PTR [esi]
c00085d7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085da:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085dd:	e8 ee 63 01 00       	call   c001e9d0 <fabs>
c00085e2:	83 c4 10             	add    esp,0x10
c00085e5:	dd 05 30 01 02 c0    	fld    QWORD PTR ds:0xc0020130
c00085eb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085ef:	de d9                	fcompp 
c00085f1:	df e0                	fnstsw ax
c00085f3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085f7:	9e                   	sahf   
c00085f8:	76 05                	jbe    c00085ff <src_process+0xed>
c00085fa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085fd:	eb 03                	jmp    c0008602 <src_process+0xf0>
c00085ff:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008602:	59                   	pop    ecx
c0008603:	5b                   	pop    ebx
c0008604:	5e                   	pop    esi
c0008605:	ff e0                	jmp    eax
c0008607:	b8 02 00 00 00       	mov    eax,0x2
c000860c:	eb 28                	jmp    c0008636 <src_process+0x124>
c000860e:	b8 07 00 00 00       	mov    eax,0x7
c0008613:	eb 21                	jmp    c0008636 <src_process+0x124>
c0008615:	b8 12 00 00 00       	mov    eax,0x12
c000861a:	eb 1a                	jmp    c0008636 <src_process+0x124>
c000861c:	b8 03 00 00 00       	mov    eax,0x3
c0008621:	eb 13                	jmp    c0008636 <src_process+0x124>
c0008623:	b8 04 00 00 00       	mov    eax,0x4
c0008628:	eb 0c                	jmp    c0008636 <src_process+0x124>
c000862a:	b8 06 00 00 00       	mov    eax,0x6
c000862f:	eb 05                	jmp    c0008636 <src_process+0x124>
c0008631:	b8 10 00 00 00       	mov    eax,0x10
c0008636:	5a                   	pop    edx
c0008637:	5b                   	pop    ebx
c0008638:	5e                   	pop    esi
c0008639:	c3                   	ret    

c000863a <src_callback_read>:
c000863a:	55                   	push   ebp
c000863b:	57                   	push   edi
c000863c:	56                   	push   esi
c000863d:	53                   	push   ebx
c000863e:	83 ec 4c             	sub    esp,0x4c
c0008641:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008645:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008649:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000864d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008651:	85 ff                	test   edi,edi
c0008653:	0f 8e 36 01 00 00    	jle    c000878f <src_callback_read+0x155>
c0008659:	85 db                	test   ebx,ebx
c000865b:	0f 84 2e 01 00 00    	je     c000878f <src_callback_read+0x155>
c0008661:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008668:	74 0c                	je     c0008676 <src_callback_read+0x3c>
c000866a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008671:	e9 19 01 00 00       	jmp    c000878f <src_callback_read+0x155>
c0008676:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000867a:	75 0c                	jne    c0008688 <src_callback_read+0x4e>
c000867c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008683:	e9 07 01 00 00       	jmp    c000878f <src_callback_read+0x155>
c0008688:	51                   	push   ecx
c0008689:	6a 24                	push   0x24
c000868b:	6a 00                	push   0x0
c000868d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008691:	50                   	push   eax
c0008692:	e8 71 7f ff ff       	call   c0000608 <memset>
c0008697:	5e                   	pop    esi
c0008698:	5d                   	pop    ebp
c0008699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	e8 a8 fd ff ff       	call   c000844e <is_bad_src_ratio>
c00086a6:	83 c4 10             	add    esp,0x10
c00086a9:	85 c0                	test   eax,eax
c00086ab:	74 0c                	je     c00086b9 <src_callback_read+0x7f>
c00086ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086b4:	e9 d6 00 00 00       	jmp    c000878f <src_callback_read+0x155>
c00086b9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086bd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086c5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086c9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086cc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086d4:	31 f6                	xor    esi,esi
c00086d6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086dd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086e2:	75 30                	jne    c0008714 <src_callback_read+0xda>
c00086e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086ec:	52                   	push   edx
c00086ed:	52                   	push   edx
c00086ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086f2:	50                   	push   eax
c00086f3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086f6:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 08                	jne    c0008714 <src_callback_read+0xda>
c000870c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008714:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000871b:	50                   	push   eax
c000871c:	50                   	push   eax
c000871d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008721:	50                   	push   eax
c0008722:	53                   	push   ebx
c0008723:	e8 ea fd ff ff       	call   c0008512 <src_process>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008732:	85 c0                	test   eax,eax
c0008734:	75 42                	jne    c0008778 <src_callback_read+0x13e>
c0008736:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000873a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000873d:	89 e9                	mov    ecx,ebp
c000873f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008743:	0f af ca             	imul   ecx,edx
c0008746:	c1 e1 02             	shl    ecx,0x2
c0008749:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c000874d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008751:	0f af d1             	imul   edx,ecx
c0008754:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008758:	c1 e2 02             	shl    edx,0x2
c000875b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c000875f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008762:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008767:	75 04                	jne    c000876d <src_callback_read+0x133>
c0008769:	85 c9                	test   ecx,ecx
c000876b:	74 0b                	je     c0008778 <src_callback_read+0x13e>
c000876d:	39 d7                	cmp    edi,edx
c000876f:	7e 09                	jle    c000877a <src_callback_read+0x140>
c0008771:	89 d6                	mov    esi,edx
c0008773:	e9 65 ff ff ff       	jmp    c00086dd <src_callback_read+0xa3>
c0008778:	89 f2                	mov    edx,esi
c000877a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000877e:	85 c0                	test   eax,eax
c0008780:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008783:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000878a:	74 05                	je     c0008791 <src_callback_read+0x157>
c000878c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000878f:	31 d2                	xor    edx,edx
c0008791:	83 c4 4c             	add    esp,0x4c
c0008794:	89 d0                	mov    eax,edx
c0008796:	5b                   	pop    ebx
c0008797:	5e                   	pop    esi
c0008798:	5f                   	pop    edi
c0008799:	5d                   	pop    ebp
c000879a:	c3                   	ret    

c000879b <src_set_ratio>:
c000879b:	53                   	push   ebx
c000879c:	b8 02 00 00 00       	mov    eax,0x2
c00087a1:	83 ec 08             	sub    esp,0x8
c00087a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087a8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 33                	je     c00087e3 <src_set_ratio+0x48>
c00087b0:	b8 07 00 00 00       	mov    eax,0x7
c00087b5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087b9:	74 2c                	je     c00087e7 <src_set_ratio+0x4c>
c00087bb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087bf:	74 2a                	je     c00087eb <src_set_ratio+0x50>
c00087c1:	50                   	push   eax
c00087c2:	50                   	push   eax
c00087c3:	dd 14 24             	fst    QWORD PTR [esp]
c00087c6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087ca:	e8 7f fc ff ff       	call   c000844e <is_bad_src_ratio>
c00087cf:	5a                   	pop    edx
c00087d0:	85 c0                	test   eax,eax
c00087d2:	59                   	pop    ecx
c00087d3:	75 07                	jne    c00087dc <src_set_ratio+0x41>
c00087d5:	dd 04 24             	fld    QWORD PTR [esp]
c00087d8:	dd 1b                	fstp   QWORD PTR [ebx]
c00087da:	eb 11                	jmp    c00087ed <src_set_ratio+0x52>
c00087dc:	b8 06 00 00 00       	mov    eax,0x6
c00087e1:	eb 0a                	jmp    c00087ed <src_set_ratio+0x52>
c00087e3:	dd d8                	fstp   st(0)
c00087e5:	eb 06                	jmp    c00087ed <src_set_ratio+0x52>
c00087e7:	dd d8                	fstp   st(0)
c00087e9:	eb 02                	jmp    c00087ed <src_set_ratio+0x52>
c00087eb:	dd d8                	fstp   st(0)
c00087ed:	83 c4 08             	add    esp,0x8
c00087f0:	5b                   	pop    ebx
c00087f1:	c3                   	ret    

c00087f2 <src_get_channels>:
c00087f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087f6:	b8 02 00 00 00       	mov    eax,0x2
c00087fb:	85 d2                	test   edx,edx
c00087fd:	74 14                	je     c0008813 <src_get_channels+0x21>
c00087ff:	b8 07 00 00 00       	mov    eax,0x7
c0008804:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008808:	74 09                	je     c0008813 <src_get_channels+0x21>
c000880a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000880e:	74 03                	je     c0008813 <src_get_channels+0x21>
c0008810:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008813:	c3                   	ret    

c0008814 <src_reset>:
c0008814:	53                   	push   ebx
c0008815:	b8 02 00 00 00       	mov    eax,0x2
c000881a:	83 ec 08             	sub    esp,0x8
c000881d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008821:	85 db                	test   ebx,ebx
c0008823:	74 2e                	je     c0008853 <src_reset+0x3f>
c0008825:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008828:	85 c0                	test   eax,eax
c000882a:	74 09                	je     c0008835 <src_reset+0x21>
c000882c:	83 ec 0c             	sub    esp,0xc
c000882f:	53                   	push   ebx
c0008830:	ff d0                	call   eax
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	d9 ee                	fldz   
c0008837:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000883e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008841:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008848:	dd 1b                	fstp   QWORD PTR [ebx]
c000884a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008851:	31 c0                	xor    eax,eax
c0008853:	83 c4 08             	add    esp,0x8
c0008856:	5b                   	pop    ebx
c0008857:	c3                   	ret    

c0008858 <src_new>:
c0008858:	57                   	push   edi
c0008859:	56                   	push   esi
c000885a:	53                   	push   ebx
c000885b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000885f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008863:	85 f6                	test   esi,esi
c0008865:	74 73                	je     c00088da <src_new+0x82>
c0008867:	85 ff                	test   edi,edi
c0008869:	7f 08                	jg     c0008873 <src_new+0x1b>
c000886b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008871:	eb 1e                	jmp    c0008891 <src_new+0x39>
c0008873:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008879:	50                   	push   eax
c000887a:	50                   	push   eax
c000887b:	6a 3c                	push   0x3c
c000887d:	6a 01                	push   0x1
c000887f:	e8 02 34 00 00       	call   c000bc86 <calloc>
c0008884:	83 c4 10             	add    esp,0x10
c0008887:	89 c3                	mov    ebx,eax
c0008889:	85 c0                	test   eax,eax
c000888b:	75 10                	jne    c000889d <src_new+0x45>
c000888d:	85 f6                	test   esi,esi
c000888f:	75 04                	jne    c0008895 <src_new+0x3d>
c0008891:	31 db                	xor    ebx,ebx
c0008893:	eb 4b                	jmp    c00088e0 <src_new+0x88>
c0008895:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000889b:	eb 43                	jmp    c00088e0 <src_new+0x88>
c000889d:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00088a0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00088a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088ab:	e8 e2 fb ff ff       	call   c0008492 <psrc_set_converter>
c00088b0:	85 c0                	test   eax,eax
c00088b2:	74 18                	je     c00088cc <src_new+0x74>
c00088b4:	85 f6                	test   esi,esi
c00088b6:	74 06                	je     c00088be <src_new+0x66>
c00088b8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088be:	83 ec 0c             	sub    esp,0xc
c00088c1:	53                   	push   ebx
c00088c2:	31 db                	xor    ebx,ebx
c00088c4:	e8 9d 33 00 00       	call   c000bc66 <free>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 3f ff ff ff       	call   c0008814 <src_reset>
c00088d5:	83 c4 10             	add    esp,0x10
c00088d8:	eb 06                	jmp    c00088e0 <src_new+0x88>
c00088da:	85 ff                	test   edi,edi
c00088dc:	7f 9b                	jg     c0008879 <src_new+0x21>
c00088de:	eb b1                	jmp    c0008891 <src_new+0x39>
c00088e0:	89 d8                	mov    eax,ebx
c00088e2:	5b                   	pop    ebx
c00088e3:	5e                   	pop    esi
c00088e4:	5f                   	pop    edi
c00088e5:	c3                   	ret    

c00088e6 <src_callback_new>:
c00088e6:	56                   	push   esi
c00088e7:	53                   	push   ebx
c00088e8:	53                   	push   ebx
c00088e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088f1:	85 f6                	test   esi,esi
c00088f3:	75 0e                	jne    c0008903 <src_callback_new+0x1d>
c00088f5:	31 db                	xor    ebx,ebx
c00088f7:	85 c0                	test   eax,eax
c00088f9:	74 47                	je     c0008942 <src_callback_new+0x5c>
c00088fb:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008901:	eb 3f                	jmp    c0008942 <src_callback_new+0x5c>
c0008903:	85 c0                	test   eax,eax
c0008905:	74 06                	je     c000890d <src_callback_new+0x27>
c0008907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000890d:	51                   	push   ecx
c000890e:	50                   	push   eax
c000890f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008913:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008917:	e8 3c ff ff ff       	call   c0008858 <src_new>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	89 c3                	mov    ebx,eax
c0008921:	85 c0                	test   eax,eax
c0008923:	74 1d                	je     c0008942 <src_callback_new+0x5c>
c0008925:	83 ec 0c             	sub    esp,0xc
c0008928:	50                   	push   eax
c0008929:	e8 e6 fe ff ff       	call   c0008814 <src_reset>
c000892e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008932:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008939:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000893c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	89 d8                	mov    eax,ebx
c0008944:	5a                   	pop    edx
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	c3                   	ret    

c0008948 <src_get_name>:
c0008948:	53                   	push   ebx
c0008949:	83 ec 14             	sub    esp,0x14
c000894c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008950:	53                   	push   ebx
c0008951:	e8 59 1f 00 00       	call   c000a8af <sinc_get_name>
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	85 c0                	test   eax,eax
c000895b:	75 1d                	jne    c000897a <src_get_name+0x32>
c000895d:	83 ec 0c             	sub    esp,0xc
c0008960:	53                   	push   ebx
c0008961:	e8 60 23 00 00       	call   c000acc6 <zoh_get_name>
c0008966:	83 c4 10             	add    esp,0x10
c0008969:	85 c0                	test   eax,eax
c000896b:	75 0d                	jne    c000897a <src_get_name+0x32>
c000896d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008971:	83 c4 08             	add    esp,0x8
c0008974:	5b                   	pop    ebx
c0008975:	e9 3a 05 00 00       	jmp    c0008eb4 <linear_get_name>
c000897a:	83 c4 08             	add    esp,0x8
c000897d:	5b                   	pop    ebx
c000897e:	c3                   	ret    

c000897f <src_get_description>:
c000897f:	53                   	push   ebx
c0008980:	83 ec 14             	sub    esp,0x14
c0008983:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008987:	53                   	push   ebx
c0008988:	e8 35 1f 00 00       	call   c000a8c2 <sinc_get_description>
c000898d:	83 c4 10             	add    esp,0x10
c0008990:	85 c0                	test   eax,eax
c0008992:	75 1d                	jne    c00089b1 <src_get_description+0x32>
c0008994:	83 ec 0c             	sub    esp,0xc
c0008997:	53                   	push   ebx
c0008998:	e8 38 23 00 00       	call   c000acd5 <zoh_get_description>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	75 0d                	jne    c00089b1 <src_get_description+0x32>
c00089a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089a8:	83 c4 08             	add    esp,0x8
c00089ab:	5b                   	pop    ebx
c00089ac:	e9 12 05 00 00       	jmp    c0008ec3 <linear_get_description>
c00089b1:	83 c4 08             	add    esp,0x8
c00089b4:	5b                   	pop    ebx
c00089b5:	c3                   	ret    

c00089b6 <src_get_version>:
c00089b6:	b8 60 fc 01 c0       	mov    eax,0xc001fc60
c00089bb:	c3                   	ret    

c00089bc <src_is_valid_ratio>:
c00089bc:	50                   	push   eax
c00089bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089c5:	e8 84 fa ff ff       	call   c000844e <is_bad_src_ratio>
c00089ca:	85 c0                	test   eax,eax
c00089cc:	0f 94 c0             	sete   al
c00089cf:	83 c4 0c             	add    esp,0xc
c00089d2:	0f b6 c0             	movzx  eax,al
c00089d5:	c3                   	ret    

c00089d6 <src_error>:
c00089d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089da:	31 c0                	xor    eax,eax
c00089dc:	85 d2                	test   edx,edx
c00089de:	74 03                	je     c00089e3 <src_error+0xd>
c00089e0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089e3:	c3                   	ret    

c00089e4 <src_strerror>:
c00089e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089e8:	31 c0                	xor    eax,eax
c00089ea:	83 fa 17             	cmp    edx,0x17
c00089ed:	77 07                	ja     c00089f6 <src_strerror+0x12>
c00089ef:	8b 04 95 c0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff40]
c00089f6:	c3                   	ret    

c00089f7 <src_simple>:
c00089f7:	56                   	push   esi
c00089f8:	53                   	push   ebx
c00089f9:	83 ec 18             	sub    esp,0x18
c00089fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a04:	50                   	push   eax
c0008a05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a0d:	e8 46 fe ff ff       	call   c0008858 <src_new>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	85 c0                	test   eax,eax
c0008a17:	75 06                	jne    c0008a1f <src_simple+0x28>
c0008a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a1d:	eb 25                	jmp    c0008a44 <src_simple+0x4d>
c0008a1f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a26:	89 c3                	mov    ebx,eax
c0008a28:	50                   	push   eax
c0008a29:	50                   	push   eax
c0008a2a:	56                   	push   esi
c0008a2b:	53                   	push   ebx
c0008a2c:	e8 e1 fa ff ff       	call   c0008512 <src_process>
c0008a31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a38:	e8 99 fa ff ff       	call   c00084d6 <src_delete>
c0008a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	83 c4 14             	add    esp,0x14
c0008a47:	5b                   	pop    ebx
c0008a48:	5e                   	pop    esi
c0008a49:	c3                   	ret    

c0008a4a <src_short_to_float_array>:
c0008a4a:	83 ec 0c             	sub    esp,0xc
c0008a4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a51:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a59:	85 c0                	test   eax,eax
c0008a5b:	74 0f                	je     c0008a6c <src_short_to_float_array+0x22>
c0008a5d:	48                   	dec    eax
c0008a5e:	d9 05 44 01 02 c0    	fld    DWORD PTR ds:0xc0020144
c0008a64:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a67:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a6a:	eb ed                	jmp    c0008a59 <src_short_to_float_array+0xf>
c0008a6c:	83 c4 0c             	add    esp,0xc
c0008a6f:	c3                   	ret    

c0008a70 <src_float_to_short_array>:
c0008a70:	56                   	push   esi
c0008a71:	53                   	push   ebx
c0008a72:	52                   	push   edx
c0008a73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a7b:	85 db                	test   ebx,ebx
c0008a7d:	74 51                	je     c0008ad0 <src_float_to_short_array+0x60>
c0008a7f:	4b                   	dec    ebx
c0008a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a84:	d9 05 48 01 02 c0    	fld    DWORD PTR ds:0xc0020148
c0008a8a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a8d:	dc 15 38 01 02 c0    	fcom   QWORD PTR ds:0xc0020138
c0008a93:	df e0                	fnstsw ax
c0008a95:	9e                   	sahf   
c0008a96:	72 0a                	jb     c0008aa2 <src_float_to_short_array+0x32>
c0008a98:	dd d8                	fstp   st(0)
c0008a9a:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008aa0:	eb d9                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008aa2:	d9 05 4c 01 02 c0    	fld    DWORD PTR ds:0xc002014c
c0008aa8:	d8 d9                	fcomp  st(1)
c0008aaa:	df e0                	fnstsw ax
c0008aac:	9e                   	sahf   
c0008aad:	72 0a                	jb     c0008ab9 <src_float_to_short_array+0x49>
c0008aaf:	dd d8                	fstp   st(0)
c0008ab1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ab7:	eb c2                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008ab9:	83 ec 10             	sub    esp,0x10
c0008abc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008abf:	e8 2c 5f 01 00       	call   c001e9f0 <lrint>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	c1 f8 10             	sar    eax,0x10
c0008aca:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ace:	eb ab                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008ad0:	58                   	pop    eax
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_int_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_int_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c0008aee:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_int_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_int_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 4f                	je     c0008b58 <src_float_to_int_array+0x5e>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 48 01 02 c0    	fld    DWORD PTR ds:0xc0020148
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 38 01 02 c0    	fcom   QWORD PTR ds:0xc0020138
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0b                	jb     c0008b2d <src_float_to_int_array+0x33>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b2b:	eb d8                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b2d:	d9 05 4c 01 02 c0    	fld    DWORD PTR ds:0xc002014c
c0008b33:	d8 d9                	fcomp  st(1)
c0008b35:	df e0                	fnstsw ax
c0008b37:	9e                   	sahf   
c0008b38:	72 0b                	jb     c0008b45 <src_float_to_int_array+0x4b>
c0008b3a:	dd d8                	fstp   st(0)
c0008b3c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b43:	eb c0                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b45:	83 ec 10             	sub    esp,0x10
c0008b48:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b4b:	e8 a0 5e 01 00       	call   c001e9f0 <lrint>
c0008b50:	83 c4 10             	add    esp,0x10
c0008b53:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b56:	eb ad                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b58:	58                   	pop    eax
c0008b59:	5b                   	pop    ebx
c0008b5a:	5e                   	pop    esi
c0008b5b:	c3                   	ret    

c0008b5c <is_bad_src_ratio>:
c0008b5c:	83 ec 0c             	sub    esp,0xc
c0008b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b6e:	dd 04 24             	fld    QWORD PTR [esp]
c0008b71:	dd 05 20 01 02 c0    	fld    QWORD PTR ds:0xc0020120
c0008b77:	de d9                	fcompp 
c0008b79:	df e0                	fnstsw ax
c0008b7b:	f6 c4 45             	test   ah,0x45
c0008b7e:	74 10                	je     c0008b90 <is_bad_src_ratio+0x34>
c0008b80:	dd 04 24             	fld    QWORD PTR [esp]
c0008b83:	dc 1d 28 01 02 c0    	fcomp  QWORD PTR ds:0xc0020128
c0008b89:	df e0                	fnstsw ax
c0008b8b:	f6 c4 45             	test   ah,0x45
c0008b8e:	75 07                	jne    c0008b97 <is_bad_src_ratio+0x3b>
c0008b90:	b8 01 00 00 00       	mov    eax,0x1
c0008b95:	eb 05                	jmp    c0008b9c <is_bad_src_ratio+0x40>
c0008b97:	b8 00 00 00 00       	mov    eax,0x0
c0008b9c:	83 c4 0c             	add    esp,0xc
c0008b9f:	c3                   	ret    

c0008ba0 <fmod_one>:
c0008ba0:	83 ec 2c             	sub    esp,0x2c
c0008ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008baf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bb3:	83 ec 08             	sub    esp,0x8
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbe:	e8 2d 5e 01 00       	call   c001e9f0 <lrint>
c0008bc3:	83 c4 10             	add    esp,0x10
c0008bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bca:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bce:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bd2:	de e1                	fsubrp st(1),st
c0008bd4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bd8:	d9 ee                	fldz   
c0008bda:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bde:	df e0                	fnstsw ax
c0008be0:	f6 c4 45             	test   ah,0x45
c0008be3:	75 0a                	jne    c0008bef <fmod_one+0x4f>
c0008be5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be9:	d9 e8                	fld1   
c0008beb:	de c1                	faddp  st(1),st
c0008bed:	eb 04                	jmp    c0008bf3 <fmod_one+0x53>
c0008bef:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bf3:	83 c4 2c             	add    esp,0x2c
c0008bf6:	c3                   	ret    

c0008bf7 <linear_vari_process>:
c0008bf7:	55                   	push   ebp
c0008bf8:	57                   	push   edi
c0008bf9:	56                   	push   esi
c0008bfa:	53                   	push   ebx
c0008bfb:	83 ec 2c             	sub    esp,0x2c
c0008bfe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c02:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c06:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c0e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c12:	0f 8e 5e 02 00 00    	jle    c0008e76 <linear_vari_process+0x27f>
c0008c18:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c1b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c23:	85 db                	test   ebx,ebx
c0008c25:	0f 84 4b 02 00 00    	je     c0008e76 <linear_vari_process+0x27f>
c0008c2b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c2e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c32:	74 19                	je     c0008c4d <linear_vari_process+0x56>
c0008c34:	31 d2                	xor    edx,edx
c0008c36:	39 c2                	cmp    edx,eax
c0008c38:	7d 0c                	jge    c0008c46 <linear_vari_process+0x4f>
c0008c3a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c3c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c3f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c43:	42                   	inc    edx
c0008c44:	eb f0                	jmp    c0008c36 <linear_vari_process+0x3f>
c0008c46:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c50:	0f af d0             	imul   edx,eax
c0008c53:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c56:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c5a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c61:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c64:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c6b:	dd 07                	fld    QWORD PTR [edi]
c0008c6d:	dd 14 24             	fst    QWORD PTR [esp]
c0008c70:	50                   	push   eax
c0008c71:	50                   	push   eax
c0008c72:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c75:	e8 e2 fe ff ff       	call   c0008b5c <is_bad_src_ratio>
c0008c7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c7e:	5a                   	pop    edx
c0008c7f:	59                   	pop    ecx
c0008c80:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c85:	0f 85 e3 01 00 00    	jne    c0008e6e <linear_vari_process+0x277>
c0008c8b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c8e:	d9 e8                	fld1   
c0008c90:	d8 d1                	fcom   st(1)
c0008c92:	df e0                	fnstsw ax
c0008c94:	9e                   	sahf   
c0008c95:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c99:	0f 86 99 00 00 00    	jbe    c0008d38 <linear_vari_process+0x141>
c0008c9f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008ca2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008ca5:	0f 8d 8d 00 00 00    	jge    c0008d38 <linear_vari_process+0x141>
c0008cab:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008caf:	d8 c1                	fadd   st,st(1)
c0008cb1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008cb4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008cb7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cba:	df e0                	fnstsw ax
c0008cbc:	9e                   	sahf   
c0008cbd:	73 79                	jae    c0008d38 <linear_vari_process+0x141>
c0008cbf:	85 d2                	test   edx,edx
c0008cc1:	7e 38                	jle    c0008cfb <linear_vari_process+0x104>
c0008cc3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cc7:	83 ec 10             	sub    esp,0x10
c0008cca:	dd 07                	fld    QWORD PTR [edi]
c0008ccc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008ccf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cd2:	e8 f9 5c 01 00       	call   c001e9d0 <fabs>
c0008cd7:	83 c4 10             	add    esp,0x10
c0008cda:	dc 1d 98 01 02 c0    	fcomp  QWORD PTR ds:0xc0020198
c0008ce0:	df e0                	fnstsw ax
c0008ce2:	9e                   	sahf   
c0008ce3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ce7:	76 12                	jbe    c0008cfb <linear_vari_process+0x104>
c0008ce9:	dd 07                	fld    QWORD PTR [edi]
c0008ceb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008cee:	d8 e1                	fsub   st,st(1)
c0008cf0:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008cf3:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008cf6:	de c1                	faddp  st(1),st
c0008cf8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cfb:	31 c0                	xor    eax,eax
c0008cfd:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d00:	7e 1f                	jle    c0008d21 <linear_vari_process+0x12a>
c0008d02:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d06:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d08:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d0b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d0f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d12:	d8 e1                	fsub   st,st(1)
c0008d14:	40                   	inc    eax
c0008d15:	d8 ca                	fmul   st,st(2)
c0008d17:	de c1                	faddp  st(1),st
c0008d19:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d1c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d1f:	eb dc                	jmp    c0008cfd <linear_vari_process+0x106>
c0008d21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d25:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d28:	de c1                	faddp  st(1),st
c0008d2a:	e9 5f ff ff ff       	jmp    c0008c8e <linear_vari_process+0x97>
c0008d2f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d33:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d36:	de c1                	faddp  st(1),st
c0008d38:	83 ec 10             	sub    esp,0x10
c0008d3b:	dd 14 24             	fst    QWORD PTR [esp]
c0008d3e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d42:	e8 59 fe ff ff       	call   c0008ba0 <fmod_one>
c0008d47:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d4a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d4e:	d8 e1                	fsub   st,st(1)
c0008d50:	d9 c9                	fxch   st(1)
c0008d52:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d59:	e8 92 5c 01 00       	call   c001e9f0 <lrint>
c0008d5e:	83 c4 10             	add    esp,0x10
c0008d61:	0f af e8             	imul   ebp,eax
c0008d64:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d68:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d6b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d6e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d74:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d77:	0f 8d 97 00 00 00    	jge    c0008e14 <linear_vari_process+0x21d>
c0008d7d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d81:	d9 c0                	fld    st(0)
c0008d83:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d86:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d8a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d8e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d92:	de d9                	fcompp 
c0008d94:	df e0                	fnstsw ax
c0008d96:	9e                   	sahf   
c0008d97:	76 7b                	jbe    c0008e14 <linear_vari_process+0x21d>
c0008d99:	85 ed                	test   ebp,ebp
c0008d9b:	7e 38                	jle    c0008dd5 <linear_vari_process+0x1de>
c0008d9d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008da1:	83 ec 10             	sub    esp,0x10
c0008da4:	dd 07                	fld    QWORD PTR [edi]
c0008da6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008da9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dac:	e8 1f 5c 01 00       	call   c001e9d0 <fabs>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	dc 1d 98 01 02 c0    	fcomp  QWORD PTR ds:0xc0020198
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008dc1:	76 12                	jbe    c0008dd5 <linear_vari_process+0x1de>
c0008dc3:	dd 07                	fld    QWORD PTR [edi]
c0008dc5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dc8:	d8 e1                	fsub   st,st(1)
c0008dca:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dcd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dd0:	de c1                	faddp  st(1),st
c0008dd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dd5:	31 c0                	xor    eax,eax
c0008dd7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dda:	39 c2                	cmp    edx,eax
c0008ddc:	0f 8e 4d ff ff ff    	jle    c0008d2f <linear_vari_process+0x138>
c0008de2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008de4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008de7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008deb:	89 e9                	mov    ecx,ebp
c0008ded:	01 c5                	add    ebp,eax
c0008def:	29 d1                	sub    ecx,edx
c0008df1:	89 ca                	mov    edx,ecx
c0008df3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008df7:	01 c2                	add    edx,eax
c0008df9:	40                   	inc    eax
c0008dfa:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008dfd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e00:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e06:	d8 e1                	fsub   st,st(1)
c0008e08:	d8 ca                	fmul   st,st(2)
c0008e0a:	de c1                	faddp  st(1),st
c0008e0c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e12:	eb c3                	jmp    c0008dd7 <linear_vari_process+0x1e0>
c0008e14:	39 d1                	cmp    ecx,edx
c0008e16:	7d 13                	jge    c0008e2b <linear_vari_process+0x234>
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e1d:	29 c8                	sub    eax,ecx
c0008e1f:	99                   	cdq    
c0008e20:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e27:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e2b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e31:	85 c0                	test   eax,eax
c0008e33:	7f 1b                	jg     c0008e50 <linear_vari_process+0x259>
c0008e35:	dd 04 24             	fld    QWORD PTR [esp]
c0008e38:	dd 1f                	fstp   QWORD PTR [edi]
c0008e3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e3d:	99                   	cdq    
c0008e3e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e41:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e44:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e47:	99                   	cdq    
c0008e48:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e4b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e4e:	eb 26                	jmp    c0008e76 <linear_vari_process+0x27f>
c0008e50:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e53:	31 d2                	xor    edx,edx
c0008e55:	29 c8                	sub    eax,ecx
c0008e57:	c1 e0 02             	shl    eax,0x2
c0008e5a:	39 d1                	cmp    ecx,edx
c0008e5c:	7e d7                	jle    c0008e35 <linear_vari_process+0x23e>
c0008e5e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e60:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e64:	83 c0 04             	add    eax,0x4
c0008e67:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e6b:	42                   	inc    edx
c0008e6c:	eb ec                	jmp    c0008e5a <linear_vari_process+0x263>
c0008e6e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e7a:	83 c4 2c             	add    esp,0x2c
c0008e7d:	5b                   	pop    ebx
c0008e7e:	5e                   	pop    esi
c0008e7f:	5f                   	pop    edi
c0008e80:	5d                   	pop    ebp
c0008e81:	c3                   	ret    

c0008e82 <linear_reset>:
c0008e82:	83 ec 0c             	sub    esp,0xc
c0008e85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e8c:	85 c0                	test   eax,eax
c0008e8e:	74 20                	je     c0008eb0 <linear_reset+0x2e>
c0008e90:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e93:	83 c0 1c             	add    eax,0x1c
c0008e96:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e99:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008ea0:	c1 e2 02             	shl    edx,0x2
c0008ea3:	51                   	push   ecx
c0008ea4:	52                   	push   edx
c0008ea5:	6a 00                	push   0x0
c0008ea7:	50                   	push   eax
c0008ea8:	e8 5b 77 ff ff       	call   c0000608 <memset>
c0008ead:	83 c4 10             	add    esp,0x10
c0008eb0:	83 c4 0c             	add    esp,0xc
c0008eb3:	c3                   	ret    

c0008eb4 <linear_get_name>:
c0008eb4:	31 c0                	xor    eax,eax
c0008eb6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebb:	75 05                	jne    c0008ec2 <linear_get_name+0xe>
c0008ebd:	b8 54 01 02 c0       	mov    eax,0xc0020154
c0008ec2:	c3                   	ret    

c0008ec3 <linear_get_description>:
c0008ec3:	31 c0                	xor    eax,eax
c0008ec5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eca:	75 05                	jne    c0008ed1 <linear_get_description+0xe>
c0008ecc:	b8 68 01 02 c0       	mov    eax,0xc0020168
c0008ed1:	c3                   	ret    

c0008ed2 <linear_set_converter>:
c0008ed2:	53                   	push   ebx
c0008ed3:	b8 0a 00 00 00       	mov    eax,0xa
c0008ed8:	83 ec 08             	sub    esp,0x8
c0008edb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008edf:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ee4:	75 6e                	jne    c0008f54 <linear_set_converter+0x82>
c0008ee6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008ee9:	85 c0                	test   eax,eax
c0008eeb:	74 13                	je     c0008f00 <linear_set_converter+0x2e>
c0008eed:	83 ec 0c             	sub    esp,0xc
c0008ef0:	50                   	push   eax
c0008ef1:	e8 70 2d 00 00       	call   c000bc66 <free>
c0008ef6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008efd:	83 c4 10             	add    esp,0x10
c0008f00:	50                   	push   eax
c0008f01:	50                   	push   eax
c0008f02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f05:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f0c:	50                   	push   eax
c0008f0d:	6a 01                	push   0x1
c0008f0f:	e8 72 2d 00 00       	call   c000bc86 <calloc>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 c2                	mov    edx,eax
c0008f19:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f1c:	85 d2                	test   edx,edx
c0008f1e:	b8 01 00 00 00       	mov    eax,0x1
c0008f23:	74 2f                	je     c0008f54 <linear_set_converter+0x82>
c0008f25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f28:	83 ec 0c             	sub    esp,0xc
c0008f2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f2e:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f34:	c7 43 24 f7 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bf7
c0008f3b:	c7 43 20 f7 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bf7
c0008f42:	c7 43 28 82 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e82
c0008f49:	53                   	push   ebx
c0008f4a:	e8 33 ff ff ff       	call   c0008e82 <linear_reset>
c0008f4f:	83 c4 10             	add    esp,0x10
c0008f52:	31 c0                	xor    eax,eax
c0008f54:	83 c4 08             	add    esp,0x8
c0008f57:	5b                   	pop    ebx
c0008f58:	c3                   	ret    

c0008f59 <is_bad_src_ratio>:
c0008f59:	83 ec 0c             	sub    esp,0xc
c0008f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f60:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f6b:	dd 04 24             	fld    QWORD PTR [esp]
c0008f6e:	dd 05 20 01 02 c0    	fld    QWORD PTR ds:0xc0020120
c0008f74:	de d9                	fcompp 
c0008f76:	df e0                	fnstsw ax
c0008f78:	f6 c4 45             	test   ah,0x45
c0008f7b:	74 10                	je     c0008f8d <is_bad_src_ratio+0x34>
c0008f7d:	dd 04 24             	fld    QWORD PTR [esp]
c0008f80:	dc 1d 28 01 02 c0    	fcomp  QWORD PTR ds:0xc0020128
c0008f86:	df e0                	fnstsw ax
c0008f88:	f6 c4 45             	test   ah,0x45
c0008f8b:	75 07                	jne    c0008f94 <is_bad_src_ratio+0x3b>
c0008f8d:	b8 01 00 00 00       	mov    eax,0x1
c0008f92:	eb 05                	jmp    c0008f99 <is_bad_src_ratio+0x40>
c0008f94:	b8 00 00 00 00       	mov    eax,0x0
c0008f99:	83 c4 0c             	add    esp,0xc
c0008f9c:	c3                   	ret    

c0008f9d <int_to_fp>:
c0008f9d:	c1 e0 0c             	shl    eax,0xc
c0008fa0:	c3                   	ret    

c0008fa1 <fp_to_int>:
c0008fa1:	c1 f8 0c             	sar    eax,0xc
c0008fa4:	c3                   	ret    

c0008fa5 <fp_fraction_part>:
c0008fa5:	25 ff 0f 00 00       	and    eax,0xfff
c0008faa:	c3                   	ret    

c0008fab <fp_to_double>:
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	e8 f2 ff ff ff       	call   c0008fa5 <fp_fraction_part>
c0008fb3:	d9 05 28 03 02 c0    	fld    DWORD PTR ds:0xc0020328
c0008fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fbd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fc1:	83 c4 0c             	add    esp,0xc
c0008fc4:	c3                   	ret    

c0008fc5 <calc_output_single>:
c0008fc5:	55                   	push   ebp
c0008fc6:	57                   	push   edi
c0008fc7:	89 c7                	mov    edi,eax
c0008fc9:	56                   	push   esi
c0008fca:	53                   	push   ebx
c0008fcb:	89 d3                	mov    ebx,edx
c0008fcd:	83 ec 24             	sub    esp,0x24
c0008fd0:	89 de                	mov    esi,ebx
c0008fd2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fd5:	e8 c3 ff ff ff       	call   c0008f9d <int_to_fp>
c0008fda:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fe1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fe8:	29 c8                	sub    eax,ecx
c0008fea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ff2:	99                   	cdq    
c0008ff3:	f7 fb                	idiv   ebx
c0008ff5:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008ff8:	0f af f0             	imul   esi,eax
c0008ffb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008fff:	01 ce                	add    esi,ecx
c0009001:	29 c2                	sub    edx,eax
c0009003:	8d 14 97             	lea    edx,[edi+edx*4]
c0009006:	89 f0                	mov    eax,esi
c0009008:	e8 9e ff ff ff       	call   c0008fab <fp_to_double>
c000900d:	89 f0                	mov    eax,esi
c000900f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009013:	e8 89 ff ff ff       	call   c0008fa1 <fp_to_int>
c0009018:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901c:	83 c2 04             	add    edx,0x4
c000901f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009023:	d8 e1                	fsub   st,st(1)
c0009025:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009029:	de c9                	fmulp  st(1),st
c000902b:	de c1                	faddp  st(1),st
c000902d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009033:	29 de                	sub    esi,ebx
c0009035:	dc 04 24             	fadd   QWORD PTR [esp]
c0009038:	dd 1c 24             	fstp   QWORD PTR [esp]
c000903b:	79 c9                	jns    c0009006 <calc_output_single+0x41>
c000903d:	89 d8                	mov    eax,ebx
c000903f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009043:	29 c8                	sub    eax,ecx
c0009045:	d9 ee                	fldz   
c0009047:	89 c1                	mov    ecx,eax
c0009049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000904d:	29 c8                	sub    eax,ecx
c000904f:	99                   	cdq    
c0009050:	f7 fb                	idiv   ebx
c0009052:	89 da                	mov    edx,ebx
c0009054:	0f af d0             	imul   edx,eax
c0009057:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000905b:	01 d1                	add    ecx,edx
c000905d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009060:	89 c8                	mov    eax,ecx
c0009062:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009066:	e8 40 ff ff ff       	call   c0008fab <fp_to_double>
c000906b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000906f:	89 c8                	mov    eax,ecx
c0009071:	e8 2b ff ff ff       	call   c0008fa1 <fp_to_int>
c0009076:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000907a:	29 d9                	sub    ecx,ebx
c000907c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009080:	83 ea 04             	sub    edx,0x4
c0009083:	d8 e1                	fsub   st,st(1)
c0009085:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009089:	de c9                	fmulp  st(1),st
c000908b:	de c1                	faddp  st(1),st
c000908d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009093:	85 c9                	test   ecx,ecx
c0009095:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009099:	de c1                	faddp  st(1),st
c000909b:	7f c3                	jg     c0009060 <calc_output_single+0x9b>
c000909d:	dd 04 24             	fld    QWORD PTR [esp]
c00090a0:	83 c4 24             	add    esp,0x24
c00090a3:	de c1                	faddp  st(1),st
c00090a5:	5b                   	pop    ebx
c00090a6:	5e                   	pop    esi
c00090a7:	5f                   	pop    edi
c00090a8:	5d                   	pop    ebp
c00090a9:	c3                   	ret    

c00090aa <calc_output_stereo>:
c00090aa:	55                   	push   ebp
c00090ab:	57                   	push   edi
c00090ac:	89 c7                	mov    edi,eax
c00090ae:	56                   	push   esi
c00090af:	53                   	push   ebx
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	83 ec 44             	sub    esp,0x44
c00090b5:	89 de                	mov    esi,ebx
c00090b7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090bb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090be:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090c2:	e8 d6 fe ff ff       	call   c0008f9d <int_to_fp>
c00090c7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090ce:	d9 ee                	fldz   
c00090d0:	29 c8                	sub    eax,ecx
c00090d2:	dd 14 24             	fst    QWORD PTR [esp]
c00090d5:	99                   	cdq    
c00090d6:	f7 fb                	idiv   ebx
c00090d8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090db:	0f af f0             	imul   esi,eax
c00090de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090e2:	01 ce                	add    esi,ecx
c00090e4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090e7:	0f af c2             	imul   eax,edx
c00090ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090f2:	29 c2                	sub    edx,eax
c00090f4:	8d 14 97             	lea    edx,[edi+edx*4]
c00090f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090fb:	89 f0                	mov    eax,esi
c00090fd:	e8 a9 fe ff ff       	call   c0008fab <fp_to_double>
c0009102:	89 f0                	mov    eax,esi
c0009104:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009108:	e8 94 fe ff ff       	call   c0008fa1 <fp_to_int>
c000910d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009111:	83 c2 08             	add    edx,0x8
c0009114:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009118:	d8 e1                	fsub   st,st(1)
c000911a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000911e:	de c9                	fmulp  st(1),st
c0009120:	de c1                	faddp  st(1),st
c0009122:	d9 c0                	fld    st(0)
c0009124:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000912a:	dc 04 24             	fadd   QWORD PTR [esp]
c000912d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009130:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009136:	29 de                	sub    esi,ebx
c0009138:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000913c:	de c1                	faddp  st(1),st
c000913e:	79 b7                	jns    c00090f7 <calc_output_stereo+0x4d>
c0009140:	89 d8                	mov    eax,ebx
c0009142:	d9 ee                	fldz   
c0009144:	d9 ee                	fldz   
c0009146:	29 c8                	sub    eax,ecx
c0009148:	89 c1                	mov    ecx,eax
c000914a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000914e:	29 c8                	sub    eax,ecx
c0009150:	99                   	cdq    
c0009151:	f7 fb                	idiv   ebx
c0009153:	89 da                	mov    edx,ebx
c0009155:	0f af d0             	imul   edx,eax
c0009158:	40                   	inc    eax
c0009159:	01 d1                	add    ecx,edx
c000915b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009160:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009164:	8d 14 87             	lea    edx,[edi+eax*4]
c0009167:	eb 04                	jmp    c000916d <calc_output_stereo+0xc3>
c0009169:	d9 ca                	fxch   st(2)
c000916b:	d9 c9                	fxch   st(1)
c000916d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009171:	d9 c9                	fxch   st(1)
c0009173:	89 c8                	mov    eax,ecx
c0009175:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009179:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000917d:	e8 29 fe ff ff       	call   c0008fab <fp_to_double>
c0009182:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009186:	89 c8                	mov    eax,ecx
c0009188:	e8 14 fe ff ff       	call   c0008fa1 <fp_to_int>
c000918d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009191:	29 d9                	sub    ecx,ebx
c0009193:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009197:	83 ea 08             	sub    edx,0x8
c000919a:	d8 e1                	fsub   st,st(1)
c000919c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00091a0:	de c9                	fmulp  st(1),st
c00091a2:	de c1                	faddp  st(1),st
c00091a4:	d9 c0                	fld    st(0)
c00091a6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00091ac:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091b0:	de c1                	faddp  st(1),st
c00091b2:	d9 c9                	fxch   st(1)
c00091b4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ba:	85 c9                	test   ecx,ecx
c00091bc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091c0:	de c1                	faddp  st(1),st
c00091c2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091c6:	7f a1                	jg     c0009169 <calc_output_stereo+0xbf>
c00091c8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091cc:	dd 04 24             	fld    QWORD PTR [esp]
c00091cf:	de c3                	faddp  st(3),st
c00091d1:	d9 ca                	fxch   st(2)
c00091d3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d7:	d9 18                	fstp   DWORD PTR [eax]
c00091d9:	de c1                	faddp  st(1),st
c00091db:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091df:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091e2:	83 c4 44             	add    esp,0x44
c00091e5:	5b                   	pop    ebx
c00091e6:	5e                   	pop    esi
c00091e7:	5f                   	pop    edi
c00091e8:	5d                   	pop    ebp
c00091e9:	c3                   	ret    

c00091ea <calc_output_quad>:
c00091ea:	55                   	push   ebp
c00091eb:	57                   	push   edi
c00091ec:	56                   	push   esi
c00091ed:	89 c6                	mov    esi,eax
c00091ef:	53                   	push   ebx
c00091f0:	89 d3                	mov    ebx,edx
c00091f2:	83 ec 5c             	sub    esp,0x5c
c00091f5:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091f9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091ff:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009203:	e8 95 fd ff ff       	call   c0008f9d <int_to_fp>
c0009208:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000920b:	d9 ee                	fldz   
c000920d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009211:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009215:	29 c8                	sub    eax,ecx
c0009217:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000921b:	99                   	cdq    
c000921c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009220:	f7 fb                	idiv   ebx
c0009222:	89 da                	mov    edx,ebx
c0009224:	0f af d0             	imul   edx,eax
c0009227:	01 ca                	add    edx,ecx
c0009229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000922d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009230:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009234:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009237:	0f af c2             	imul   eax,edx
c000923a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000923e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009242:	29 c2                	sub    edx,eax
c0009244:	8d 14 96             	lea    edx,[esi+edx*4]
c0009247:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000924b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924f:	e8 57 fd ff ff       	call   c0008fab <fp_to_double>
c0009254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009258:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000925c:	e8 40 fd ff ff       	call   c0008fa1 <fp_to_int>
c0009261:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009265:	83 c2 10             	add    edx,0x10
c0009268:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000926c:	d8 e1                	fsub   st,st(1)
c000926e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009272:	de c9                	fmulp  st(1),st
c0009274:	de c1                	faddp  st(1),st
c0009276:	d9 c0                	fld    st(0)
c0009278:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000927e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009282:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009286:	d9 c0                	fld    st(0)
c0009288:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000928e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009292:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009296:	d9 c0                	fld    st(0)
c0009298:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000929e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00092a2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00092a6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00092ac:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092b4:	de c1                	faddp  st(1),st
c00092b6:	79 8f                	jns    c0009247 <calc_output_quad+0x5d>
c00092b8:	89 d8                	mov    eax,ebx
c00092ba:	d9 ee                	fldz   
c00092bc:	29 c8                	sub    eax,ecx
c00092be:	d9 ee                	fldz   
c00092c0:	89 c1                	mov    ecx,eax
c00092c2:	d9 ee                	fldz   
c00092c4:	d9 ee                	fldz   
c00092c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092ca:	29 c8                	sub    eax,ecx
c00092cc:	99                   	cdq    
c00092cd:	f7 fb                	idiv   ebx
c00092cf:	89 da                	mov    edx,ebx
c00092d1:	0f af d0             	imul   edx,eax
c00092d4:	40                   	inc    eax
c00092d5:	01 d1                	add    ecx,edx
c00092d7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092dc:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092e0:	8d 14 86             	lea    edx,[esi+eax*4]
c00092e3:	eb 0a                	jmp    c00092ef <calc_output_quad+0x105>
c00092e5:	d9 cc                	fxch   st(4)
c00092e7:	d9 ca                	fxch   st(2)
c00092e9:	d9 c9                	fxch   st(1)
c00092eb:	d9 cb                	fxch   st(3)
c00092ed:	d9 c9                	fxch   st(1)
c00092ef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092f3:	d9 c9                	fxch   st(1)
c00092f5:	89 c8                	mov    eax,ecx
c00092f7:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092fb:	d9 c9                	fxch   st(1)
c00092fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009301:	d9 c9                	fxch   st(1)
c0009303:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009307:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000930b:	e8 9b fc ff ff       	call   c0008fab <fp_to_double>
c0009310:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009314:	89 c8                	mov    eax,ecx
c0009316:	e8 86 fc ff ff       	call   c0008fa1 <fp_to_int>
c000931b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000931f:	29 d9                	sub    ecx,ebx
c0009321:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009325:	83 ea 10             	sub    edx,0x10
c0009328:	d8 e1                	fsub   st,st(1)
c000932a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000932e:	de c9                	fmulp  st(1),st
c0009330:	de c1                	faddp  st(1),st
c0009332:	d9 c0                	fld    st(0)
c0009334:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000933a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000933e:	de c1                	faddp  st(1),st
c0009340:	d9 c1                	fld    st(1)
c0009342:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009348:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000934c:	de c1                	faddp  st(1),st
c000934e:	d9 c2                	fld    st(2)
c0009350:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009356:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000935a:	de c1                	faddp  st(1),st
c000935c:	d9 cb                	fxch   st(3)
c000935e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009364:	85 c9                	test   ecx,ecx
c0009366:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000936a:	de c1                	faddp  st(1),st
c000936c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009370:	0f 8f 6f ff ff ff    	jg     c00092e5 <calc_output_quad+0xfb>
c0009376:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000937a:	de c4                	faddp  st(4),st
c000937c:	d9 cb                	fxch   st(3)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 1f                	fstp   DWORD PTR [edi]
c0009383:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009387:	de c2                	faddp  st(2),st
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009391:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009395:	de c3                	faddp  st(3),st
c0009397:	d9 ca                	fxch   st(2)
c0009399:	dc 0c 24             	fmul   QWORD PTR [esp]
c000939c:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000939f:	de c1                	faddp  st(1),st
c00093a1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00093a4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00093a7:	83 c4 5c             	add    esp,0x5c
c00093aa:	5b                   	pop    ebx
c00093ab:	5e                   	pop    esi
c00093ac:	5f                   	pop    edi
c00093ad:	5d                   	pop    ebp
c00093ae:	c3                   	ret    

c00093af <calc_output_hex>:
c00093af:	55                   	push   ebp
c00093b0:	57                   	push   edi
c00093b1:	89 c7                	mov    edi,eax
c00093b3:	56                   	push   esi
c00093b4:	53                   	push   ebx
c00093b5:	89 d3                	mov    ebx,edx
c00093b7:	83 ec 7c             	sub    esp,0x7c
c00093ba:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093c1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093c7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093ce:	e8 ca fb ff ff       	call   c0008f9d <int_to_fp>
c00093d3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093d6:	d9 ee                	fldz   
c00093d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093dc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093e6:	99                   	cdq    
c00093e7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093eb:	f7 fb                	idiv   ebx
c00093ed:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093f1:	89 da                	mov    edx,ebx
c00093f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093f7:	0f af d0             	imul   edx,eax
c00093fa:	01 ca                	add    edx,ecx
c00093fc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009400:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009403:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009407:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000940a:	0f af c2             	imul   eax,edx
c000940d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009411:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009415:	29 c2                	sub    edx,eax
c0009417:	8d 14 97             	lea    edx,[edi+edx*4]
c000941a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000941e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009422:	e8 84 fb ff ff       	call   c0008fab <fp_to_double>
c0009427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000942b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000942f:	e8 6d fb ff ff       	call   c0008fa1 <fp_to_int>
c0009434:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009438:	83 c2 18             	add    edx,0x18
c000943b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000943f:	d8 e1                	fsub   st,st(1)
c0009441:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009445:	de c9                	fmulp  st(1),st
c0009447:	de c1                	faddp  st(1),st
c0009449:	d9 c0                	fld    st(0)
c000944b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009451:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009455:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009459:	d9 c0                	fld    st(0)
c000945b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009461:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009465:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009469:	d9 c0                	fld    st(0)
c000946b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009471:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009475:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009479:	d9 c0                	fld    st(0)
c000947b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009481:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	d9 c0                	fld    st(0)
c000948b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009491:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009495:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009499:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000949f:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00094a3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094a7:	de c1                	faddp  st(1),st
c00094a9:	0f 89 6b ff ff ff    	jns    c000941a <calc_output_hex+0x6b>
c00094af:	d9 ee                	fldz   
c00094b1:	d9 ee                	fldz   
c00094b3:	89 d8                	mov    eax,ebx
c00094b5:	29 c8                	sub    eax,ecx
c00094b7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094bb:	89 c1                	mov    ecx,eax
c00094bd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094c1:	29 c8                	sub    eax,ecx
c00094c3:	99                   	cdq    
c00094c4:	f7 fb                	idiv   ebx
c00094c6:	89 da                	mov    edx,ebx
c00094c8:	0f af d0             	imul   edx,eax
c00094cb:	40                   	inc    eax
c00094cc:	01 d1                	add    ecx,edx
c00094ce:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094d3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094d7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094db:	8d 14 87             	lea    edx,[edi+eax*4]
c00094de:	d9 ee                	fldz   
c00094e0:	d9 ee                	fldz   
c00094e2:	d9 ca                	fxch   st(2)
c00094e4:	eb 08                	jmp    c00094ee <calc_output_hex+0x13f>
c00094e6:	d9 cc                	fxch   st(4)
c00094e8:	d9 cb                	fxch   st(3)
c00094ea:	d9 ca                	fxch   st(2)
c00094ec:	d9 c9                	fxch   st(1)
c00094ee:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094f2:	89 c8                	mov    eax,ecx
c00094f4:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094f8:	d9 ca                	fxch   st(2)
c00094fa:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094fe:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009502:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009506:	e8 a0 fa ff ff       	call   c0008fab <fp_to_double>
c000950b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000950f:	89 c8                	mov    eax,ecx
c0009511:	e8 8b fa ff ff       	call   c0008fa1 <fp_to_int>
c0009516:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000951a:	29 d9                	sub    ecx,ebx
c000951c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009520:	83 ea 18             	sub    edx,0x18
c0009523:	d8 e1                	fsub   st,st(1)
c0009525:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009529:	de c9                	fmulp  st(1),st
c000952b:	de c1                	faddp  st(1),st
c000952d:	d9 c0                	fld    st(0)
c000952f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009535:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009539:	de c1                	faddp  st(1),st
c000953b:	d9 c1                	fld    st(1)
c000953d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009543:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009547:	de c1                	faddp  st(1),st
c0009549:	d9 c2                	fld    st(2)
c000954b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009551:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009555:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009559:	d9 c2                	fld    st(2)
c000955b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009561:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009565:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009569:	d9 c2                	fld    st(2)
c000956b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009571:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009575:	de c1                	faddp  st(1),st
c0009577:	d9 cb                	fxch   st(3)
c0009579:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000957f:	85 c9                	test   ecx,ecx
c0009581:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009585:	de c1                	faddp  st(1),st
c0009587:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000958b:	0f 8f 55 ff ff ff    	jg     c00094e6 <calc_output_hex+0x137>
c0009591:	d9 cb                	fxch   st(3)
c0009593:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009597:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959a:	d9 1e                	fstp   DWORD PTR [esi]
c000959c:	d9 c9                	fxch   st(1)
c000959e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00095a2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00095a8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00095ac:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095b6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ba:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095be:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095c4:	d9 ca                	fxch   st(2)
c00095c6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095ca:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095cd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095d0:	de c1                	faddp  st(1),st
c00095d2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095d5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095d8:	83 c4 7c             	add    esp,0x7c
c00095db:	5b                   	pop    ebx
c00095dc:	5e                   	pop    esi
c00095dd:	5f                   	pop    edi
c00095de:	5d                   	pop    ebp
c00095df:	c3                   	ret    

c00095e0 <sinc_reset>:
c00095e0:	56                   	push   esi
c00095e1:	53                   	push   ebx
c00095e2:	51                   	push   ecx
c00095e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095e7:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095ea:	85 db                	test   ebx,ebx
c00095ec:	74 51                	je     c000963f <sinc_reset+0x5f>
c00095ee:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095f5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095fc:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009603:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009609:	d9 ee                	fldz   
c000960b:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c000960e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009611:	52                   	push   edx
c0009612:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009615:	c1 e0 02             	shl    eax,0x2
c0009618:	50                   	push   eax
c0009619:	6a 00                	push   0x0
c000961b:	56                   	push   esi
c000961c:	e8 e7 6f ff ff       	call   c0000608 <memset>
c0009621:	83 c4 0c             	add    esp,0xc
c0009624:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009627:	c1 e0 02             	shl    eax,0x2
c000962a:	50                   	push   eax
c000962b:	68 aa 00 00 00       	push   0xaa
c0009630:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009633:	8d 04 86             	lea    eax,[esi+eax*4]
c0009636:	50                   	push   eax
c0009637:	e8 cc 6f ff ff       	call   c0000608 <memset>
c000963c:	83 c4 10             	add    esp,0x10
c000963f:	58                   	pop    eax
c0009640:	5b                   	pop    ebx
c0009641:	5e                   	pop    esi
c0009642:	c3                   	ret    

c0009643 <calc_output_multi>:
c0009643:	55                   	push   ebp
c0009644:	57                   	push   edi
c0009645:	8d 78 44             	lea    edi,[eax+0x44]
c0009648:	56                   	push   esi
c0009649:	89 c6                	mov    esi,eax
c000964b:	53                   	push   ebx
c000964c:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009652:	83 ec 4c             	sub    esp,0x4c
c0009655:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009659:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000965d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009661:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009665:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000966d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009670:	e8 28 f9 ff ff       	call   c0008f9d <int_to_fp>
c0009675:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009678:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000967c:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009680:	99                   	cdq    
c0009681:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009685:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009689:	0f af d0             	imul   edx,eax
c000968c:	0f af c3             	imul   eax,ebx
c000968f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009693:	29 c5                	sub    ebp,eax
c0009695:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009699:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000969d:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c00096a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096a8:	52                   	push   edx
c00096a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096ad:	6a 00                	push   0x0
c00096af:	57                   	push   edi
c00096b0:	e8 53 6f ff ff       	call   c0000608 <memset>
c00096b5:	83 c4 10             	add    esp,0x10
c00096b8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096bc:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c4:	e8 e2 f8 ff ff       	call   c0008fab <fp_to_double>
c00096c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096cd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096d1:	e8 cb f8 ff ff       	call   c0008fa1 <fp_to_int>
c00096d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096d9:	89 d9                	mov    ecx,ebx
c00096db:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096de:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096e2:	d8 e1                	fsub   st,st(1)
c00096e4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096e8:	de c9                	fmulp  st(1),st
c00096ea:	de c1                	faddp  st(1),st
c00096ec:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096f0:	89 c8                	mov    eax,ecx
c00096f2:	bd 08 00 00 00       	mov    ebp,0x8
c00096f7:	99                   	cdq    
c00096f8:	f7 fd                	idiv   ebp
c00096fa:	4a                   	dec    edx
c00096fb:	83 fa 06             	cmp    edx,0x6
c00096fe:	77 07                	ja     c0009707 <calc_output_multi+0xc4>
c0009700:	ff 24 95 a0 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe60]
c0009707:	49                   	dec    ecx
c0009708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000970c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000970f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009716:	d9 c1                	fld    st(1)
c0009718:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000971c:	dc 00                	fadd   QWORD PTR [eax]
c000971e:	dd 18                	fstp   QWORD PTR [eax]
c0009720:	49                   	dec    ecx
c0009721:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009725:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009728:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000972f:	d9 c1                	fld    st(1)
c0009731:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009735:	dc 00                	fadd   QWORD PTR [eax]
c0009737:	dd 18                	fstp   QWORD PTR [eax]
c0009739:	49                   	dec    ecx
c000973a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000973e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009741:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009748:	d9 c1                	fld    st(1)
c000974a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000974e:	dc 00                	fadd   QWORD PTR [eax]
c0009750:	dd 18                	fstp   QWORD PTR [eax]
c0009752:	49                   	dec    ecx
c0009753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009757:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000975a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009761:	d9 c1                	fld    st(1)
c0009763:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009767:	dc 00                	fadd   QWORD PTR [eax]
c0009769:	dd 18                	fstp   QWORD PTR [eax]
c000976b:	49                   	dec    ecx
c000976c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009770:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009773:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000977a:	d9 c1                	fld    st(1)
c000977c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009780:	dc 00                	fadd   QWORD PTR [eax]
c0009782:	dd 18                	fstp   QWORD PTR [eax]
c0009784:	49                   	dec    ecx
c0009785:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009789:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000978c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009793:	d9 c1                	fld    st(1)
c0009795:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009799:	dc 00                	fadd   QWORD PTR [eax]
c000979b:	dd 18                	fstp   QWORD PTR [eax]
c000979d:	49                   	dec    ecx
c000979e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097a2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ac:	d9 c1                	fld    st(1)
c00097ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b2:	dc 00                	fadd   QWORD PTR [eax]
c00097b4:	dd 18                	fstp   QWORD PTR [eax]
c00097b6:	49                   	dec    ecx
c00097b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097bb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097be:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097c5:	d9 c1                	fld    st(1)
c00097c7:	85 c9                	test   ecx,ecx
c00097c9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097cd:	dc 00                	fadd   QWORD PTR [eax]
c00097cf:	dd 18                	fstp   QWORD PTR [eax]
c00097d1:	0f 8f 19 ff ff ff    	jg     c00096f0 <calc_output_multi+0xad>
c00097d7:	dd d9                	fstp   st(1)
c00097d9:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097e1:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097e5:	0f 89 d1 fe ff ff    	jns    c00096bc <calc_output_multi+0x79>
c00097eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097ef:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097f3:	89 d1                	mov    ecx,edx
c00097f5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097f9:	29 c8                	sub    eax,ecx
c00097fb:	99                   	cdq    
c00097fc:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009800:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009804:	0f af d0             	imul   edx,eax
c0009807:	40                   	inc    eax
c0009808:	01 d1                	add    ecx,edx
c000980a:	0f af c3             	imul   eax,ebx
c000980d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009811:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009818:	50                   	push   eax
c0009819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000981d:	6a 00                	push   0x0
c000981f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009823:	e8 e0 6d ff ff       	call   c0000608 <memset>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000982f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009837:	e8 6f f7 ff ff       	call   c0008fab <fp_to_double>
c000983c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009840:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009844:	e8 58 f7 ff ff       	call   c0008fa1 <fp_to_int>
c0009849:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000984c:	89 d9                	mov    ecx,ebx
c000984e:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009851:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009855:	d8 e1                	fsub   st,st(1)
c0009857:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000985b:	de c9                	fmulp  st(1),st
c000985d:	de c1                	faddp  st(1),st
c000985f:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009863:	89 c8                	mov    eax,ecx
c0009865:	bd 08 00 00 00       	mov    ebp,0x8
c000986a:	99                   	cdq    
c000986b:	f7 fd                	idiv   ebp
c000986d:	4a                   	dec    edx
c000986e:	83 fa 06             	cmp    edx,0x6
c0009871:	77 07                	ja     c000987a <calc_output_multi+0x237>
c0009873:	ff 24 95 bc 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe44]
c000987a:	49                   	dec    ecx
c000987b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009883:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009886:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000988d:	d9 c1                	fld    st(1)
c000988f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009893:	dc 00                	fadd   QWORD PTR [eax]
c0009895:	dd 18                	fstp   QWORD PTR [eax]
c0009897:	49                   	dec    ecx
c0009898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000989c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098a0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098a3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098aa:	d9 c1                	fld    st(1)
c00098ac:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098b0:	dc 00                	fadd   QWORD PTR [eax]
c00098b2:	dd 18                	fstp   QWORD PTR [eax]
c00098b4:	49                   	dec    ecx
c00098b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098bd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c7:	d9 c1                	fld    st(1)
c00098c9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098cd:	dc 00                	fadd   QWORD PTR [eax]
c00098cf:	dd 18                	fstp   QWORD PTR [eax]
c00098d1:	49                   	dec    ecx
c00098d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098da:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098e4:	d9 c1                	fld    st(1)
c00098e6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098ea:	dc 00                	fadd   QWORD PTR [eax]
c00098ec:	dd 18                	fstp   QWORD PTR [eax]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098f7:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098fa:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009901:	d9 c1                	fld    st(1)
c0009903:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009910:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009914:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009917:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991e:	d9 c1                	fld    st(1)
c0009920:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009931:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009934:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000993b:	d9 c1                	fld    st(1)
c000993d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000994a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009951:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009958:	d9 c1                	fld    st(1)
c000995a:	85 c9                	test   ecx,ecx
c000995c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009960:	dc 00                	fadd   QWORD PTR [eax]
c0009962:	dd 18                	fstp   QWORD PTR [eax]
c0009964:	0f 8f f9 fe ff ff    	jg     c0009863 <calc_output_multi+0x220>
c000996a:	dd d9                	fstp   st(1)
c000996c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009970:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009974:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009978:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000997d:	0f 8f ac fe ff ff    	jg     c000982f <calc_output_multi+0x1ec>
c0009983:	b9 08 00 00 00       	mov    ecx,0x8
c0009988:	89 d8                	mov    eax,ebx
c000998a:	99                   	cdq    
c000998b:	f7 f9                	idiv   ecx
c000998d:	4a                   	dec    edx
c000998e:	83 fa 06             	cmp    edx,0x6
c0009991:	77 07                	ja     c000999a <calc_output_multi+0x357>
c0009993:	ff 24 95 d8 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe28]
c000999a:	4b                   	dec    ebx
c000999b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000999f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099a5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099a9:	d8 c9                	fmul   st,st(1)
c00099ab:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ae:	4b                   	dec    ebx
c00099af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b3:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099b6:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099bd:	d8 c9                	fmul   st,st(1)
c00099bf:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c2:	4b                   	dec    ebx
c00099c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099c7:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099ca:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099cd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d1:	d8 c9                	fmul   st,st(1)
c00099d3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099d6:	4b                   	dec    ebx
c00099d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099db:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099de:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099e5:	d8 c9                	fmul   st,st(1)
c00099e7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ea:	4b                   	dec    ebx
c00099eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ef:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099f9:	d8 c9                	fmul   st,st(1)
c00099fb:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099fe:	4b                   	dec    ebx
c00099ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a03:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a06:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a09:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a0d:	d8 c9                	fmul   st,st(1)
c0009a0f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a12:	4b                   	dec    ebx
c0009a13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a17:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a1a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a1d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a21:	d8 c9                	fmul   st,st(1)
c0009a23:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a26:	4b                   	dec    ebx
c0009a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a2b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2e:	85 db                	test   ebx,ebx
c0009a30:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a33:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a37:	d8 c9                	fmul   st,st(1)
c0009a39:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3c:	0f 8f 46 ff ff ff    	jg     c0009988 <calc_output_multi+0x345>
c0009a42:	dd d8                	fstp   st(0)
c0009a44:	83 c4 4c             	add    esp,0x4c
c0009a47:	5b                   	pop    ebx
c0009a48:	5e                   	pop    esi
c0009a49:	5f                   	pop    edi
c0009a4a:	5d                   	pop    ebp
c0009a4b:	c3                   	ret    

c0009a4c <double_to_fp>:
c0009a4c:	d9 05 2c 03 02 c0    	fld    DWORD PTR ds:0xc002032c
c0009a52:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a56:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a5a:	e9 91 4f 01 00       	jmp    c001e9f0 <lrint>

c0009a5f <fmod_one>:
c0009a5f:	83 ec 2c             	sub    esp,0x2c
c0009a62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a72:	83 ec 08             	sub    esp,0x8
c0009a75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7d:	e8 6e 4f 01 00       	call   c001e9f0 <lrint>
c0009a82:	83 c4 10             	add    esp,0x10
c0009a85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a89:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a8d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a91:	de e1                	fsubrp st(1),st
c0009a93:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a97:	d9 ee                	fldz   
c0009a99:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a9d:	df e0                	fnstsw ax
c0009a9f:	f6 c4 45             	test   ah,0x45
c0009aa2:	75 0a                	jne    c0009aae <fmod_one+0x4f>
c0009aa4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa8:	d9 e8                	fld1   
c0009aaa:	de c1                	faddp  st(1),st
c0009aac:	eb 04                	jmp    c0009ab2 <fmod_one+0x53>
c0009aae:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009ab2:	83 c4 2c             	add    esp,0x2c
c0009ab5:	c3                   	ret    

c0009ab6 <prepare_data>:
c0009ab6:	55                   	push   ebp
c0009ab7:	57                   	push   edi
c0009ab8:	56                   	push   esi
c0009ab9:	53                   	push   ebx
c0009aba:	83 ec 1c             	sub    esp,0x1c
c0009abd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ac1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ac5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009ac9:	0f 89 57 01 00 00    	jns    c0009c26 <prepare_data+0x170>
c0009acf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ad2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ad5:	85 d2                	test   edx,edx
c0009ad7:	75 0d                	jne    c0009ae6 <prepare_data+0x30>
c0009ad9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009adc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009adf:	29 d0                	sub    eax,edx
c0009ae1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ae4:	eb 44                	jmp    c0009b2a <prepare_data+0x74>
c0009ae6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ae9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009aec:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009aef:	39 c1                	cmp    ecx,eax
c0009af1:	7d 04                	jge    c0009af7 <prepare_data+0x41>
c0009af3:	29 d0                	sub    eax,edx
c0009af5:	eb 2d                	jmp    c0009b24 <prepare_data+0x6e>
c0009af7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009afd:	29 d7                	sub    edi,edx
c0009aff:	01 f7                	add    edi,esi
c0009b01:	51                   	push   ecx
c0009b02:	29 f2                	sub    edx,esi
c0009b04:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b0b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b0e:	51                   	push   ecx
c0009b0f:	52                   	push   edx
c0009b10:	50                   	push   eax
c0009b11:	e8 84 6a ff ff       	call   c000059a <memmove>
c0009b16:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b19:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b1c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b1f:	29 f0                	sub    eax,esi
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	29 f0                	sub    eax,esi
c0009b26:	79 02                	jns    c0009b2a <prepare_data+0x74>
c0009b28:	31 c0                	xor    eax,eax
c0009b2a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b2d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b30:	29 ef                	sub    edi,ebp
c0009b32:	39 c7                	cmp    edi,eax
c0009b34:	7e 02                	jle    c0009b38 <prepare_data+0x82>
c0009b36:	89 c7                	mov    edi,eax
c0009b38:	89 f8                	mov    eax,edi
c0009b3a:	99                   	cdq    
c0009b3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b3e:	b8 15 00 00 00       	mov    eax,0x15
c0009b43:	29 d7                	sub    edi,edx
c0009b45:	0f 88 dd 00 00 00    	js     c0009c28 <prepare_data+0x172>
c0009b4b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b4e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b51:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b54:	0f 8f ce 00 00 00    	jg     c0009c28 <prepare_data+0x172>
c0009b5a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b60:	50                   	push   eax
c0009b61:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b68:	50                   	push   eax
c0009b69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b6f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b72:	50                   	push   eax
c0009b73:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b7a:	50                   	push   eax
c0009b7b:	e8 52 6a ff ff       	call   c00005d2 <memcpy>
c0009b80:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b83:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b86:	01 fd                	add    ebp,edi
c0009b88:	01 f9                	add    ecx,edi
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b90:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b93:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b9a:	0f 85 86 00 00 00    	jne    c0009c26 <prepare_data+0x170>
c0009ba0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009ba3:	89 e8                	mov    eax,ebp
c0009ba5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009ba8:	29 c8                	sub    eax,ecx
c0009baa:	39 f8                	cmp    eax,edi
c0009bac:	7d 78                	jge    c0009c26 <prepare_data+0x170>
c0009bae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009bb2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009bb6:	74 6e                	je     c0009c26 <prepare_data+0x170>
c0009bb8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bbb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bbf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bc2:	29 ef                	sub    edi,ebp
c0009bc4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bc8:	7c 29                	jl     c0009bf3 <prepare_data+0x13d>
c0009bca:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bcd:	29 f1                	sub    ecx,esi
c0009bcf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bd6:	55                   	push   ebp
c0009bd7:	50                   	push   eax
c0009bd8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bdb:	50                   	push   eax
c0009bdc:	52                   	push   edx
c0009bdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009be1:	e8 b4 69 ff ff       	call   c000059a <memmove>
c0009be6:	83 c4 10             	add    esp,0x10
c0009be9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bec:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009bf6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bf9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bfc:	83 c6 05             	add    esi,0x5
c0009bff:	78 07                	js     c0009c08 <prepare_data+0x152>
c0009c01:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c04:	39 cf                	cmp    edi,ecx
c0009c06:	7e 04                	jle    c0009c0c <prepare_data+0x156>
c0009c08:	89 ce                	mov    esi,ecx
c0009c0a:	29 c6                	sub    esi,eax
c0009c0c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c0f:	51                   	push   ecx
c0009c10:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c17:	51                   	push   ecx
c0009c18:	6a 00                	push   0x0
c0009c1a:	50                   	push   eax
c0009c1b:	e8 e8 69 ff ff       	call   c0000608 <memset>
c0009c20:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	83 c4 1c             	add    esp,0x1c
c0009c2b:	5b                   	pop    ebx
c0009c2c:	5e                   	pop    esi
c0009c2d:	5f                   	pop    edi
c0009c2e:	5d                   	pop    ebp
c0009c2f:	c3                   	ret    

c0009c30 <sinc_multichan_vari_process>:
c0009c30:	55                   	push   ebp
c0009c31:	b8 05 00 00 00       	mov    eax,0x5
c0009c36:	57                   	push   edi
c0009c37:	56                   	push   esi
c0009c38:	53                   	push   ebx
c0009c39:	83 ec 3c             	sub    esp,0x3c
c0009c3c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c40:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c44:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c47:	85 db                	test   ebx,ebx
c0009c49:	0f 84 5d 02 00 00    	je     c0009eac <sinc_multichan_vari_process+0x27c>
c0009c4f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c55:	0f af d0             	imul   edx,eax
c0009c58:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c5b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c5f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c69:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c70:	dd 06                	fld    QWORD PTR [esi]
c0009c72:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c76:	55                   	push   ebp
c0009c77:	55                   	push   ebp
c0009c78:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c7b:	e8 d9 f2 ff ff       	call   c0008f59 <is_bad_src_ratio>
c0009c80:	89 c2                	mov    edx,eax
c0009c82:	58                   	pop    eax
c0009c83:	85 d2                	test   edx,edx
c0009c85:	59                   	pop    ecx
c0009c86:	b8 16 00 00 00       	mov    eax,0x16
c0009c8b:	0f 85 1b 02 00 00    	jne    c0009eac <sinc_multichan_vari_process+0x27c>
c0009c91:	d9 05 30 03 02 c0    	fld    DWORD PTR ds:0xc0020330
c0009c97:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c9a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c9d:	dd 06                	fld    QWORD PTR [esi]
c0009c9f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ca2:	d8 d1                	fcom   st(1)
c0009ca4:	df e0                	fnstsw ax
c0009ca6:	9e                   	sahf   
c0009ca7:	76 0f                	jbe    c0009cb8 <sinc_multichan_vari_process+0x88>
c0009ca9:	dd d8                	fstp   st(0)
c0009cab:	d9 e8                	fld1   
c0009cad:	d8 d9                	fcomp  st(1)
c0009caf:	df e0                	fnstsw ax
c0009cb1:	9e                   	sahf   
c0009cb2:	77 0f                	ja     c0009cc3 <sinc_multichan_vari_process+0x93>
c0009cb4:	dd d8                	fstp   st(0)
c0009cb6:	eb 11                	jmp    c0009cc9 <sinc_multichan_vari_process+0x99>
c0009cb8:	dd d9                	fstp   st(1)
c0009cba:	d9 e8                	fld1   
c0009cbc:	d8 d9                	fcomp  st(1)
c0009cbe:	df e0                	fnstsw ax
c0009cc0:	9e                   	sahf   
c0009cc1:	76 04                	jbe    c0009cc7 <sinc_multichan_vari_process+0x97>
c0009cc3:	de f9                	fdivp  st(1),st
c0009cc5:	eb 02                	jmp    c0009cc9 <sinc_multichan_vari_process+0x99>
c0009cc7:	dd d8                	fstp   st(0)
c0009cc9:	83 ec 10             	sub    esp,0x10
c0009ccc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ccf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cd2:	e8 19 4d 01 00       	call   c001e9f0 <lrint>
c0009cd7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009cda:	40                   	inc    eax
c0009cdb:	dd 14 24             	fst    QWORD PTR [esp]
c0009cde:	0f af c5             	imul   eax,ebp
c0009ce1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ce5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ce9:	e8 71 fd ff ff       	call   c0009a5f <fmod_one>
c0009cee:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009cf1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009cf5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cf8:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d00:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d04:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d07:	e8 e4 4c 01 00       	call   c001e9f0 <lrint>
c0009d0c:	0f af e8             	imul   ebp,eax
c0009d0f:	d9 e8                	fld1   
c0009d11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d15:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d19:	01 e8                	add    eax,ebp
c0009d1b:	dc 05 98 01 02 c0    	fadd   QWORD PTR ds:0xc0020198
c0009d21:	99                   	cdq    
c0009d22:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d26:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d29:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d2c:	83 c4 10             	add    esp,0x10
c0009d2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d35:	7d 4b                	jge    c0009d82 <sinc_multichan_vari_process+0x152>
c0009d37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d3d:	01 c8                	add    eax,ecx
c0009d3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d42:	99                   	cdq    
c0009d43:	f7 f9                	idiv   ecx
c0009d45:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d49:	7d 09                	jge    c0009d54 <sinc_multichan_vari_process+0x124>
c0009d4b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d4e:	85 c0                	test   eax,eax
c0009d50:	79 57                	jns    c0009da9 <sinc_multichan_vari_process+0x179>
c0009d52:	eb 70                	jmp    c0009dc4 <sinc_multichan_vari_process+0x194>
c0009d54:	51                   	push   ecx
c0009d55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d59:	57                   	push   edi
c0009d5a:	53                   	push   ebx
c0009d5b:	e8 56 fd ff ff       	call   c0009ab6 <prepare_data>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d66:	85 c0                	test   eax,eax
c0009d68:	0f 85 3e 01 00 00    	jne    c0009eac <sinc_multichan_vari_process+0x27c>
c0009d6e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d74:	01 c8                	add    eax,ecx
c0009d76:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d79:	99                   	cdq    
c0009d7a:	f7 f9                	idiv   ecx
c0009d7c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d80:	7c c9                	jl     c0009d4b <sinc_multichan_vari_process+0x11b>
c0009d82:	dd 04 24             	fld    QWORD PTR [esp]
c0009d85:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d88:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d8c:	dd 1e                	fstp   QWORD PTR [esi]
c0009d8e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d91:	99                   	cdq    
c0009d92:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d95:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d9b:	99                   	cdq    
c0009d9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d9f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009da2:	31 c0                	xor    eax,eax
c0009da4:	e9 03 01 00 00       	jmp    c0009eac <sinc_multichan_vari_process+0x27c>
c0009da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dad:	dd 04 24             	fld    QWORD PTR [esp]
c0009db0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009db3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009db7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dbb:	d9 c9                	fxch   st(1)
c0009dbd:	de d9                	fcompp 
c0009dbf:	df e0                	fnstsw ax
c0009dc1:	9e                   	sahf   
c0009dc2:	73 be                	jae    c0009d82 <sinc_multichan_vari_process+0x152>
c0009dc4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dc8:	7e 31                	jle    c0009dfb <sinc_multichan_vari_process+0x1cb>
c0009dca:	83 ec 10             	sub    esp,0x10
c0009dcd:	dd 06                	fld    QWORD PTR [esi]
c0009dcf:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dd5:	e8 f6 4b 01 00       	call   c001e9d0 <fabs>
c0009dda:	83 c4 10             	add    esp,0x10
c0009ddd:	dc 1d 20 03 02 c0    	fcomp  QWORD PTR ds:0xc0020320
c0009de3:	df e0                	fnstsw ax
c0009de5:	9e                   	sahf   
c0009de6:	76 13                	jbe    c0009dfb <sinc_multichan_vari_process+0x1cb>
c0009de8:	dd 06                	fld    QWORD PTR [esi]
c0009dea:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ded:	d8 e1                	fsub   st,st(1)
c0009def:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009df2:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009df5:	de c1                	faddp  st(1),st
c0009df7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dfb:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009dfe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e02:	d9 e8                	fld1   
c0009e04:	d8 d9                	fcomp  st(1)
c0009e06:	df e0                	fnstsw ax
c0009e08:	9e                   	sahf   
c0009e09:	77 04                	ja     c0009e0f <sinc_multichan_vari_process+0x1df>
c0009e0b:	dd d8                	fstp   st(0)
c0009e0d:	d9 e8                	fld1   
c0009e0f:	de c9                	fmulp  st(1),st
c0009e11:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e15:	50                   	push   eax
c0009e16:	50                   	push   eax
c0009e17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e1f:	e8 28 fc ff ff       	call   c0009a4c <double_to_fp>
c0009e24:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e28:	89 c5                	mov    ebp,eax
c0009e2a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e2e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e31:	e8 16 fc ff ff       	call   c0009a4c <double_to_fp>
c0009e36:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e39:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e3c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e3f:	89 c1                	mov    ecx,eax
c0009e41:	52                   	push   edx
c0009e42:	89 d8                	mov    eax,ebx
c0009e44:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e48:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e4b:	52                   	push   edx
c0009e4c:	52                   	push   edx
c0009e4d:	89 ea                	mov    edx,ebp
c0009e4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e55:	e8 e9 f7 ff ff       	call   c0009643 <calc_output_multi>
c0009e5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e5d:	d9 e8                	fld1   
c0009e5f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e62:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e66:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	dd 14 24             	fst    QWORD PTR [esp]
c0009e70:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e74:	e8 e6 fb ff ff       	call   c0009a5f <fmod_one>
c0009e79:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e7c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e80:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e83:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e8b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e92:	e8 59 4b 01 00       	call   c001e9f0 <lrint>
c0009e97:	0f af e8             	imul   ebp,eax
c0009e9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e9e:	01 e8                	add    eax,ebp
c0009ea0:	99                   	cdq    
c0009ea1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009ea4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009ea7:	e9 80 fe ff ff       	jmp    c0009d2c <sinc_multichan_vari_process+0xfc>
c0009eac:	83 c4 3c             	add    esp,0x3c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    

c0009eb4 <sinc_hex_vari_process>:
c0009eb4:	55                   	push   ebp
c0009eb5:	b8 05 00 00 00       	mov    eax,0x5
c0009eba:	57                   	push   edi
c0009ebb:	56                   	push   esi
c0009ebc:	53                   	push   ebx
c0009ebd:	83 ec 3c             	sub    esp,0x3c
c0009ec0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ec4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ec8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ecb:	85 db                	test   ebx,ebx
c0009ecd:	0f 84 58 02 00 00    	je     c000a12b <sinc_hex_vari_process+0x277>
c0009ed3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ed6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ed9:	0f af d0             	imul   edx,eax
c0009edc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009edf:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ee3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009eea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009eed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ef4:	dd 06                	fld    QWORD PTR [esi]
c0009ef6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009efa:	55                   	push   ebp
c0009efb:	55                   	push   ebp
c0009efc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eff:	e8 55 f0 ff ff       	call   c0008f59 <is_bad_src_ratio>
c0009f04:	89 c2                	mov    edx,eax
c0009f06:	58                   	pop    eax
c0009f07:	85 d2                	test   edx,edx
c0009f09:	59                   	pop    ecx
c0009f0a:	b8 16 00 00 00       	mov    eax,0x16
c0009f0f:	0f 85 16 02 00 00    	jne    c000a12b <sinc_hex_vari_process+0x277>
c0009f15:	d9 05 30 03 02 c0    	fld    DWORD PTR ds:0xc0020330
c0009f1b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f1e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f21:	dd 06                	fld    QWORD PTR [esi]
c0009f23:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f26:	d8 d1                	fcom   st(1)
c0009f28:	df e0                	fnstsw ax
c0009f2a:	9e                   	sahf   
c0009f2b:	76 0f                	jbe    c0009f3c <sinc_hex_vari_process+0x88>
c0009f2d:	dd d8                	fstp   st(0)
c0009f2f:	d9 e8                	fld1   
c0009f31:	d8 d9                	fcomp  st(1)
c0009f33:	df e0                	fnstsw ax
c0009f35:	9e                   	sahf   
c0009f36:	77 0f                	ja     c0009f47 <sinc_hex_vari_process+0x93>
c0009f38:	dd d8                	fstp   st(0)
c0009f3a:	eb 11                	jmp    c0009f4d <sinc_hex_vari_process+0x99>
c0009f3c:	dd d9                	fstp   st(1)
c0009f3e:	d9 e8                	fld1   
c0009f40:	d8 d9                	fcomp  st(1)
c0009f42:	df e0                	fnstsw ax
c0009f44:	9e                   	sahf   
c0009f45:	76 04                	jbe    c0009f4b <sinc_hex_vari_process+0x97>
c0009f47:	de f9                	fdivp  st(1),st
c0009f49:	eb 02                	jmp    c0009f4d <sinc_hex_vari_process+0x99>
c0009f4b:	dd d8                	fstp   st(0)
c0009f4d:	83 ec 10             	sub    esp,0x10
c0009f50:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f53:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f56:	e8 95 4a 01 00       	call   c001e9f0 <lrint>
c0009f5b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f5e:	40                   	inc    eax
c0009f5f:	dd 14 24             	fst    QWORD PTR [esp]
c0009f62:	0f af c5             	imul   eax,ebp
c0009f65:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f6d:	e8 ed fa ff ff       	call   c0009a5f <fmod_one>
c0009f72:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f75:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f7c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f84:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 60 4a 01 00       	call   c001e9f0 <lrint>
c0009f90:	0f af e8             	imul   ebp,eax
c0009f93:	d9 e8                	fld1   
c0009f95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f99:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f9d:	01 e8                	add    eax,ebp
c0009f9f:	dc 05 98 01 02 c0    	fadd   QWORD PTR ds:0xc0020198
c0009fa5:	99                   	cdq    
c0009fa6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009faa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fb6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fb9:	7d 4b                	jge    c000a006 <sinc_hex_vari_process+0x152>
c0009fbb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fbe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fc1:	01 c8                	add    eax,ecx
c0009fc3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fc6:	99                   	cdq    
c0009fc7:	f7 f9                	idiv   ecx
c0009fc9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fcd:	7d 09                	jge    c0009fd8 <sinc_hex_vari_process+0x124>
c0009fcf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fd2:	85 c0                	test   eax,eax
c0009fd4:	79 57                	jns    c000a02d <sinc_hex_vari_process+0x179>
c0009fd6:	eb 70                	jmp    c000a048 <sinc_hex_vari_process+0x194>
c0009fd8:	51                   	push   ecx
c0009fd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fdd:	57                   	push   edi
c0009fde:	53                   	push   ebx
c0009fdf:	e8 d2 fa ff ff       	call   c0009ab6 <prepare_data>
c0009fe4:	83 c4 10             	add    esp,0x10
c0009fe7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fea:	85 c0                	test   eax,eax
c0009fec:	0f 85 39 01 00 00    	jne    c000a12b <sinc_hex_vari_process+0x277>
c0009ff2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009ff5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009ff8:	01 c8                	add    eax,ecx
c0009ffa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ffd:	99                   	cdq    
c0009ffe:	f7 f9                	idiv   ecx
c000a000:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a004:	7c c9                	jl     c0009fcf <sinc_hex_vari_process+0x11b>
c000a006:	dd 04 24             	fld    QWORD PTR [esp]
c000a009:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a00c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a010:	dd 1e                	fstp   QWORD PTR [esi]
c000a012:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a015:	99                   	cdq    
c000a016:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a019:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a01c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a01f:	99                   	cdq    
c000a020:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a023:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a026:	31 c0                	xor    eax,eax
c000a028:	e9 fe 00 00 00       	jmp    c000a12b <sinc_hex_vari_process+0x277>
c000a02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a031:	dd 04 24             	fld    QWORD PTR [esp]
c000a034:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a037:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a03b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a03f:	d9 c9                	fxch   st(1)
c000a041:	de d9                	fcompp 
c000a043:	df e0                	fnstsw ax
c000a045:	9e                   	sahf   
c000a046:	73 be                	jae    c000a006 <sinc_hex_vari_process+0x152>
c000a048:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a04c:	7e 31                	jle    c000a07f <sinc_hex_vari_process+0x1cb>
c000a04e:	83 ec 10             	sub    esp,0x10
c000a051:	dd 06                	fld    QWORD PTR [esi]
c000a053:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a056:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a059:	e8 72 49 01 00       	call   c001e9d0 <fabs>
c000a05e:	83 c4 10             	add    esp,0x10
c000a061:	dc 1d 20 03 02 c0    	fcomp  QWORD PTR ds:0xc0020320
c000a067:	df e0                	fnstsw ax
c000a069:	9e                   	sahf   
c000a06a:	76 13                	jbe    c000a07f <sinc_hex_vari_process+0x1cb>
c000a06c:	dd 06                	fld    QWORD PTR [esi]
c000a06e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a071:	d8 e1                	fsub   st,st(1)
c000a073:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a076:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a079:	de c1                	faddp  st(1),st
c000a07b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a07f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a082:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a086:	d9 e8                	fld1   
c000a088:	d8 d9                	fcomp  st(1)
c000a08a:	df e0                	fnstsw ax
c000a08c:	9e                   	sahf   
c000a08d:	77 04                	ja     c000a093 <sinc_hex_vari_process+0x1df>
c000a08f:	dd d8                	fstp   st(0)
c000a091:	d9 e8                	fld1   
c000a093:	de c9                	fmulp  st(1),st
c000a095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a099:	50                   	push   eax
c000a09a:	50                   	push   eax
c000a09b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a09f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0a3:	e8 a4 f9 ff ff       	call   c0009a4c <double_to_fp>
c000a0a8:	89 c5                	mov    ebp,eax
c000a0aa:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0ae:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0b5:	e8 92 f9 ff ff       	call   c0009a4c <double_to_fp>
c000a0ba:	83 c4 0c             	add    esp,0xc
c000a0bd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0c0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0c3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0c6:	89 c1                	mov    ecx,eax
c000a0c8:	52                   	push   edx
c000a0c9:	89 d8                	mov    eax,ebx
c000a0cb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0cf:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0d2:	52                   	push   edx
c000a0d3:	52                   	push   edx
c000a0d4:	89 ea                	mov    edx,ebp
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 d1 f2 ff ff       	call   c00093af <calc_output_hex>
c000a0de:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0e2:	d9 e8                	fld1   
c000a0e4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0e8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a0ef:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0f3:	e8 67 f9 ff ff       	call   c0009a5f <fmod_one>
c000a0f8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0fb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0ff:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a102:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a10a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a10e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a111:	e8 da 48 01 00       	call   c001e9f0 <lrint>
c000a116:	0f af e8             	imul   ebp,eax
c000a119:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a11d:	01 e8                	add    eax,ebp
c000a11f:	99                   	cdq    
c000a120:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a123:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a126:	e9 85 fe ff ff       	jmp    c0009fb0 <sinc_hex_vari_process+0xfc>
c000a12b:	83 c4 3c             	add    esp,0x3c
c000a12e:	5b                   	pop    ebx
c000a12f:	5e                   	pop    esi
c000a130:	5f                   	pop    edi
c000a131:	5d                   	pop    ebp
c000a132:	c3                   	ret    

c000a133 <sinc_quad_vari_process>:
c000a133:	55                   	push   ebp
c000a134:	b8 05 00 00 00       	mov    eax,0x5
c000a139:	57                   	push   edi
c000a13a:	56                   	push   esi
c000a13b:	53                   	push   ebx
c000a13c:	83 ec 3c             	sub    esp,0x3c
c000a13f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a143:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a147:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a14a:	85 db                	test   ebx,ebx
c000a14c:	0f 84 58 02 00 00    	je     c000a3aa <sinc_quad_vari_process+0x277>
c000a152:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a155:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a158:	0f af d0             	imul   edx,eax
c000a15b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a15e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a169:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a16c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a173:	dd 06                	fld    QWORD PTR [esi]
c000a175:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a179:	55                   	push   ebp
c000a17a:	55                   	push   ebp
c000a17b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a17e:	e8 d6 ed ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a183:	89 c2                	mov    edx,eax
c000a185:	58                   	pop    eax
c000a186:	85 d2                	test   edx,edx
c000a188:	59                   	pop    ecx
c000a189:	b8 16 00 00 00       	mov    eax,0x16
c000a18e:	0f 85 16 02 00 00    	jne    c000a3aa <sinc_quad_vari_process+0x277>
c000a194:	d9 05 30 03 02 c0    	fld    DWORD PTR ds:0xc0020330
c000a19a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a19d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a1a0:	dd 06                	fld    QWORD PTR [esi]
c000a1a2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a1a5:	d8 d1                	fcom   st(1)
c000a1a7:	df e0                	fnstsw ax
c000a1a9:	9e                   	sahf   
c000a1aa:	76 0f                	jbe    c000a1bb <sinc_quad_vari_process+0x88>
c000a1ac:	dd d8                	fstp   st(0)
c000a1ae:	d9 e8                	fld1   
c000a1b0:	d8 d9                	fcomp  st(1)
c000a1b2:	df e0                	fnstsw ax
c000a1b4:	9e                   	sahf   
c000a1b5:	77 0f                	ja     c000a1c6 <sinc_quad_vari_process+0x93>
c000a1b7:	dd d8                	fstp   st(0)
c000a1b9:	eb 11                	jmp    c000a1cc <sinc_quad_vari_process+0x99>
c000a1bb:	dd d9                	fstp   st(1)
c000a1bd:	d9 e8                	fld1   
c000a1bf:	d8 d9                	fcomp  st(1)
c000a1c1:	df e0                	fnstsw ax
c000a1c3:	9e                   	sahf   
c000a1c4:	76 04                	jbe    c000a1ca <sinc_quad_vari_process+0x97>
c000a1c6:	de f9                	fdivp  st(1),st
c000a1c8:	eb 02                	jmp    c000a1cc <sinc_quad_vari_process+0x99>
c000a1ca:	dd d8                	fstp   st(0)
c000a1cc:	83 ec 10             	sub    esp,0x10
c000a1cf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1d5:	e8 16 48 01 00       	call   c001e9f0 <lrint>
c000a1da:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1dd:	40                   	inc    eax
c000a1de:	dd 14 24             	fst    QWORD PTR [esp]
c000a1e1:	0f af c5             	imul   eax,ebp
c000a1e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1ec:	e8 6e f8 ff ff       	call   c0009a5f <fmod_one>
c000a1f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1f4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1f8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1fb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a203:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a207:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20a:	e8 e1 47 01 00       	call   c001e9f0 <lrint>
c000a20f:	0f af e8             	imul   ebp,eax
c000a212:	d9 e8                	fld1   
c000a214:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a218:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a21c:	01 e8                	add    eax,ebp
c000a21e:	dc 05 98 01 02 c0    	fadd   QWORD PTR ds:0xc0020198
c000a224:	99                   	cdq    
c000a225:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a229:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a22c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a235:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a238:	7d 4b                	jge    c000a285 <sinc_quad_vari_process+0x152>
c000a23a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a23d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a240:	01 c8                	add    eax,ecx
c000a242:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a245:	99                   	cdq    
c000a246:	f7 f9                	idiv   ecx
c000a248:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a24c:	7d 09                	jge    c000a257 <sinc_quad_vari_process+0x124>
c000a24e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a251:	85 c0                	test   eax,eax
c000a253:	79 57                	jns    c000a2ac <sinc_quad_vari_process+0x179>
c000a255:	eb 70                	jmp    c000a2c7 <sinc_quad_vari_process+0x194>
c000a257:	51                   	push   ecx
c000a258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a25c:	57                   	push   edi
c000a25d:	53                   	push   ebx
c000a25e:	e8 53 f8 ff ff       	call   c0009ab6 <prepare_data>
c000a263:	83 c4 10             	add    esp,0x10
c000a266:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a269:	85 c0                	test   eax,eax
c000a26b:	0f 85 39 01 00 00    	jne    c000a3aa <sinc_quad_vari_process+0x277>
c000a271:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a274:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a277:	01 c8                	add    eax,ecx
c000a279:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a27c:	99                   	cdq    
c000a27d:	f7 f9                	idiv   ecx
c000a27f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a283:	7c c9                	jl     c000a24e <sinc_quad_vari_process+0x11b>
c000a285:	dd 04 24             	fld    QWORD PTR [esp]
c000a288:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a28b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a28f:	dd 1e                	fstp   QWORD PTR [esi]
c000a291:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a294:	99                   	cdq    
c000a295:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a298:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a29b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a29e:	99                   	cdq    
c000a29f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a2a2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	e9 fe 00 00 00       	jmp    c000a3aa <sinc_quad_vari_process+0x277>
c000a2ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2b0:	dd 04 24             	fld    QWORD PTR [esp]
c000a2b3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2b6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ba:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2be:	d9 c9                	fxch   st(1)
c000a2c0:	de d9                	fcompp 
c000a2c2:	df e0                	fnstsw ax
c000a2c4:	9e                   	sahf   
c000a2c5:	73 be                	jae    c000a285 <sinc_quad_vari_process+0x152>
c000a2c7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2cb:	7e 31                	jle    c000a2fe <sinc_quad_vari_process+0x1cb>
c000a2cd:	83 ec 10             	sub    esp,0x10
c000a2d0:	dd 06                	fld    QWORD PTR [esi]
c000a2d2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2d8:	e8 f3 46 01 00       	call   c001e9d0 <fabs>
c000a2dd:	83 c4 10             	add    esp,0x10
c000a2e0:	dc 1d 20 03 02 c0    	fcomp  QWORD PTR ds:0xc0020320
c000a2e6:	df e0                	fnstsw ax
c000a2e8:	9e                   	sahf   
c000a2e9:	76 13                	jbe    c000a2fe <sinc_quad_vari_process+0x1cb>
c000a2eb:	dd 06                	fld    QWORD PTR [esi]
c000a2ed:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2f0:	d8 e1                	fsub   st,st(1)
c000a2f2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2f5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2f8:	de c1                	faddp  st(1),st
c000a2fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2fe:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a301:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a305:	d9 e8                	fld1   
c000a307:	d8 d9                	fcomp  st(1)
c000a309:	df e0                	fnstsw ax
c000a30b:	9e                   	sahf   
c000a30c:	77 04                	ja     c000a312 <sinc_quad_vari_process+0x1df>
c000a30e:	dd d8                	fstp   st(0)
c000a310:	d9 e8                	fld1   
c000a312:	de c9                	fmulp  st(1),st
c000a314:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a318:	50                   	push   eax
c000a319:	50                   	push   eax
c000a31a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a31e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a322:	e8 25 f7 ff ff       	call   c0009a4c <double_to_fp>
c000a327:	89 c5                	mov    ebp,eax
c000a329:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a32d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a331:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a334:	e8 13 f7 ff ff       	call   c0009a4c <double_to_fp>
c000a339:	83 c4 0c             	add    esp,0xc
c000a33c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a33f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a342:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a345:	89 c1                	mov    ecx,eax
c000a347:	52                   	push   edx
c000a348:	89 d8                	mov    eax,ebx
c000a34a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a34e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a351:	52                   	push   edx
c000a352:	52                   	push   edx
c000a353:	89 ea                	mov    edx,ebp
c000a355:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a358:	e8 8d ee ff ff       	call   c00091ea <calc_output_quad>
c000a35d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a361:	d9 e8                	fld1   
c000a363:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a367:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a36b:	dd 14 24             	fst    QWORD PTR [esp]
c000a36e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a372:	e8 e8 f6 ff ff       	call   c0009a5f <fmod_one>
c000a377:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a37a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a37e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a381:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a389:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a38d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a390:	e8 5b 46 01 00       	call   c001e9f0 <lrint>
c000a395:	0f af e8             	imul   ebp,eax
c000a398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a39c:	01 e8                	add    eax,ebp
c000a39e:	99                   	cdq    
c000a39f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a3a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a3a5:	e9 85 fe ff ff       	jmp    c000a22f <sinc_quad_vari_process+0xfc>
c000a3aa:	83 c4 3c             	add    esp,0x3c
c000a3ad:	5b                   	pop    ebx
c000a3ae:	5e                   	pop    esi
c000a3af:	5f                   	pop    edi
c000a3b0:	5d                   	pop    ebp
c000a3b1:	c3                   	ret    

c000a3b2 <sinc_stereo_vari_process>:
c000a3b2:	55                   	push   ebp
c000a3b3:	b8 05 00 00 00       	mov    eax,0x5
c000a3b8:	57                   	push   edi
c000a3b9:	56                   	push   esi
c000a3ba:	53                   	push   ebx
c000a3bb:	83 ec 3c             	sub    esp,0x3c
c000a3be:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3c2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3c6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 84 58 02 00 00    	je     c000a629 <sinc_stereo_vari_process+0x277>
c000a3d1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3d7:	0f af d0             	imul   edx,eax
c000a3da:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3dd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3e1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3f2:	dd 06                	fld    QWORD PTR [esi]
c000a3f4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3f8:	55                   	push   ebp
c000a3f9:	55                   	push   ebp
c000a3fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3fd:	e8 57 eb ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a402:	89 c2                	mov    edx,eax
c000a404:	58                   	pop    eax
c000a405:	85 d2                	test   edx,edx
c000a407:	59                   	pop    ecx
c000a408:	b8 16 00 00 00       	mov    eax,0x16
c000a40d:	0f 85 16 02 00 00    	jne    c000a629 <sinc_stereo_vari_process+0x277>
c000a413:	d9 05 30 03 02 c0    	fld    DWORD PTR ds:0xc0020330
c000a419:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a41c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a41f:	dd 06                	fld    QWORD PTR [esi]
c000a421:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a424:	d8 d1                	fcom   st(1)
c000a426:	df e0                	fnstsw ax
c000a428:	9e                   	sahf   
c000a429:	76 0f                	jbe    c000a43a <sinc_stereo_vari_process+0x88>
c000a42b:	dd d8                	fstp   st(0)
c000a42d:	d9 e8                	fld1   
c000a42f:	d8 d9                	fcomp  st(1)
c000a431:	df e0                	fnstsw ax
c000a433:	9e                   	sahf   
c000a434:	77 0f                	ja     c000a445 <sinc_stereo_vari_process+0x93>
c000a436:	dd d8                	fstp   st(0)
c000a438:	eb 11                	jmp    c000a44b <sinc_stereo_vari_process+0x99>
c000a43a:	dd d9                	fstp   st(1)
c000a43c:	d9 e8                	fld1   
c000a43e:	d8 d9                	fcomp  st(1)
c000a440:	df e0                	fnstsw ax
c000a442:	9e                   	sahf   
c000a443:	76 04                	jbe    c000a449 <sinc_stereo_vari_process+0x97>
c000a445:	de f9                	fdivp  st(1),st
c000a447:	eb 02                	jmp    c000a44b <sinc_stereo_vari_process+0x99>
c000a449:	dd d8                	fstp   st(0)
c000a44b:	83 ec 10             	sub    esp,0x10
c000a44e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a451:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a454:	e8 97 45 01 00       	call   c001e9f0 <lrint>
c000a459:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a45c:	40                   	inc    eax
c000a45d:	dd 14 24             	fst    QWORD PTR [esp]
c000a460:	0f af c5             	imul   eax,ebp
c000a463:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a467:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a46b:	e8 ef f5 ff ff       	call   c0009a5f <fmod_one>
c000a470:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a473:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a477:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a47a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a47e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a482:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a486:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a489:	e8 62 45 01 00       	call   c001e9f0 <lrint>
c000a48e:	0f af e8             	imul   ebp,eax
c000a491:	d9 e8                	fld1   
c000a493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a497:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a49b:	01 e8                	add    eax,ebp
c000a49d:	dc 05 98 01 02 c0    	fadd   QWORD PTR ds:0xc0020198
c000a4a3:	99                   	cdq    
c000a4a4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4a8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a4ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4ae:	83 c4 10             	add    esp,0x10
c000a4b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4b4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4b7:	7d 4b                	jge    c000a504 <sinc_stereo_vari_process+0x152>
c000a4b9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4bf:	01 c8                	add    eax,ecx
c000a4c1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4c4:	99                   	cdq    
c000a4c5:	f7 f9                	idiv   ecx
c000a4c7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4cb:	7d 09                	jge    c000a4d6 <sinc_stereo_vari_process+0x124>
c000a4cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4d0:	85 c0                	test   eax,eax
c000a4d2:	79 57                	jns    c000a52b <sinc_stereo_vari_process+0x179>
c000a4d4:	eb 70                	jmp    c000a546 <sinc_stereo_vari_process+0x194>
c000a4d6:	51                   	push   ecx
c000a4d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4db:	57                   	push   edi
c000a4dc:	53                   	push   ebx
c000a4dd:	e8 d4 f5 ff ff       	call   c0009ab6 <prepare_data>
c000a4e2:	83 c4 10             	add    esp,0x10
c000a4e5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4e8:	85 c0                	test   eax,eax
c000a4ea:	0f 85 39 01 00 00    	jne    c000a629 <sinc_stereo_vari_process+0x277>
c000a4f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4f6:	01 c8                	add    eax,ecx
c000a4f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4fb:	99                   	cdq    
c000a4fc:	f7 f9                	idiv   ecx
c000a4fe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a502:	7c c9                	jl     c000a4cd <sinc_stereo_vari_process+0x11b>
c000a504:	dd 04 24             	fld    QWORD PTR [esp]
c000a507:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a50a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a50e:	dd 1e                	fstp   QWORD PTR [esi]
c000a510:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a513:	99                   	cdq    
c000a514:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a517:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a51a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a51d:	99                   	cdq    
c000a51e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a521:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a524:	31 c0                	xor    eax,eax
c000a526:	e9 fe 00 00 00       	jmp    c000a629 <sinc_stereo_vari_process+0x277>
c000a52b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a52f:	dd 04 24             	fld    QWORD PTR [esp]
c000a532:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a535:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a539:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a53d:	d9 c9                	fxch   st(1)
c000a53f:	de d9                	fcompp 
c000a541:	df e0                	fnstsw ax
c000a543:	9e                   	sahf   
c000a544:	73 be                	jae    c000a504 <sinc_stereo_vari_process+0x152>
c000a546:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a54a:	7e 31                	jle    c000a57d <sinc_stereo_vari_process+0x1cb>
c000a54c:	83 ec 10             	sub    esp,0x10
c000a54f:	dd 06                	fld    QWORD PTR [esi]
c000a551:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a554:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a557:	e8 74 44 01 00       	call   c001e9d0 <fabs>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	dc 1d 20 03 02 c0    	fcomp  QWORD PTR ds:0xc0020320
c000a565:	df e0                	fnstsw ax
c000a567:	9e                   	sahf   
c000a568:	76 13                	jbe    c000a57d <sinc_stereo_vari_process+0x1cb>
c000a56a:	dd 06                	fld    QWORD PTR [esi]
c000a56c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a56f:	d8 e1                	fsub   st,st(1)
c000a571:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a574:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a577:	de c1                	faddp  st(1),st
c000a579:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a57d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a580:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a584:	d9 e8                	fld1   
c000a586:	d8 d9                	fcomp  st(1)
c000a588:	df e0                	fnstsw ax
c000a58a:	9e                   	sahf   
c000a58b:	77 04                	ja     c000a591 <sinc_stereo_vari_process+0x1df>
c000a58d:	dd d8                	fstp   st(0)
c000a58f:	d9 e8                	fld1   
c000a591:	de c9                	fmulp  st(1),st
c000a593:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a597:	50                   	push   eax
c000a598:	50                   	push   eax
c000a599:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a59d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a5a1:	e8 a6 f4 ff ff       	call   c0009a4c <double_to_fp>
c000a5a6:	89 c5                	mov    ebp,eax
c000a5a8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a5ac:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5b0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5b3:	e8 94 f4 ff ff       	call   c0009a4c <double_to_fp>
c000a5b8:	83 c4 0c             	add    esp,0xc
c000a5bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5be:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5c1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5c4:	89 c1                	mov    ecx,eax
c000a5c6:	52                   	push   edx
c000a5c7:	89 d8                	mov    eax,ebx
c000a5c9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5cd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5d0:	52                   	push   edx
c000a5d1:	52                   	push   edx
c000a5d2:	89 ea                	mov    edx,ebp
c000a5d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d7:	e8 ce ea ff ff       	call   c00090aa <calc_output_stereo>
c000a5dc:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5e0:	d9 e8                	fld1   
c000a5e2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5e6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5ea:	dd 14 24             	fst    QWORD PTR [esp]
c000a5ed:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5f1:	e8 69 f4 ff ff       	call   c0009a5f <fmod_one>
c000a5f6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5f9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5fd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a600:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a604:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a608:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a60c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a60f:	e8 dc 43 01 00       	call   c001e9f0 <lrint>
c000a614:	0f af e8             	imul   ebp,eax
c000a617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a61b:	01 e8                	add    eax,ebp
c000a61d:	99                   	cdq    
c000a61e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a621:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a624:	e9 85 fe ff ff       	jmp    c000a4ae <sinc_stereo_vari_process+0xfc>
c000a629:	83 c4 3c             	add    esp,0x3c
c000a62c:	5b                   	pop    ebx
c000a62d:	5e                   	pop    esi
c000a62e:	5f                   	pop    edi
c000a62f:	5d                   	pop    ebp
c000a630:	c3                   	ret    

c000a631 <sinc_mono_vari_process>:
c000a631:	55                   	push   ebp
c000a632:	b8 05 00 00 00       	mov    eax,0x5
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	53                   	push   ebx
c000a63a:	83 ec 3c             	sub    esp,0x3c
c000a63d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a641:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a645:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a648:	85 db                	test   ebx,ebx
c000a64a:	0f 84 57 02 00 00    	je     c000a8a7 <sinc_mono_vari_process+0x276>
c000a650:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a653:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a656:	0f af d0             	imul   edx,eax
c000a659:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a65c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a660:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a667:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a66a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a671:	dd 06                	fld    QWORD PTR [esi]
c000a673:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a677:	51                   	push   ecx
c000a678:	51                   	push   ecx
c000a679:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a67c:	e8 d8 e8 ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a681:	5d                   	pop    ebp
c000a682:	89 c2                	mov    edx,eax
c000a684:	58                   	pop    eax
c000a685:	85 d2                	test   edx,edx
c000a687:	b8 16 00 00 00       	mov    eax,0x16
c000a68c:	0f 85 15 02 00 00    	jne    c000a8a7 <sinc_mono_vari_process+0x276>
c000a692:	d9 05 30 03 02 c0    	fld    DWORD PTR ds:0xc0020330
c000a698:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a69b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a69e:	dd 06                	fld    QWORD PTR [esi]
c000a6a0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a6a3:	d8 d1                	fcom   st(1)
c000a6a5:	df e0                	fnstsw ax
c000a6a7:	9e                   	sahf   
c000a6a8:	76 0f                	jbe    c000a6b9 <sinc_mono_vari_process+0x88>
c000a6aa:	dd d8                	fstp   st(0)
c000a6ac:	d9 e8                	fld1   
c000a6ae:	d8 d9                	fcomp  st(1)
c000a6b0:	df e0                	fnstsw ax
c000a6b2:	9e                   	sahf   
c000a6b3:	77 0f                	ja     c000a6c4 <sinc_mono_vari_process+0x93>
c000a6b5:	dd d8                	fstp   st(0)
c000a6b7:	eb 11                	jmp    c000a6ca <sinc_mono_vari_process+0x99>
c000a6b9:	dd d9                	fstp   st(1)
c000a6bb:	d9 e8                	fld1   
c000a6bd:	d8 d9                	fcomp  st(1)
c000a6bf:	df e0                	fnstsw ax
c000a6c1:	9e                   	sahf   
c000a6c2:	76 04                	jbe    c000a6c8 <sinc_mono_vari_process+0x97>
c000a6c4:	de f9                	fdivp  st(1),st
c000a6c6:	eb 02                	jmp    c000a6ca <sinc_mono_vari_process+0x99>
c000a6c8:	dd d8                	fstp   st(0)
c000a6ca:	83 ec 10             	sub    esp,0x10
c000a6cd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6d3:	e8 18 43 01 00       	call   c001e9f0 <lrint>
c000a6d8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6db:	40                   	inc    eax
c000a6dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a6df:	0f af e8             	imul   ebp,eax
c000a6e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6e6:	e8 74 f3 ff ff       	call   c0009a5f <fmod_one>
c000a6eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a701:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a705:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a708:	e8 e3 42 01 00       	call   c001e9f0 <lrint>
c000a70d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a712:	d9 e8                	fld1   
c000a714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a718:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a71c:	99                   	cdq    
c000a71d:	dc 05 98 01 02 c0    	fadd   QWORD PTR ds:0xc0020198
c000a723:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a726:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a72a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a733:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a736:	7d 44                	jge    c000a77c <sinc_mono_vari_process+0x14b>
c000a738:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a73b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a73e:	01 c8                	add    eax,ecx
c000a740:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a743:	99                   	cdq    
c000a744:	f7 f9                	idiv   ecx
c000a746:	39 d5                	cmp    ebp,edx
c000a748:	7d 09                	jge    c000a753 <sinc_mono_vari_process+0x122>
c000a74a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a74d:	85 c0                	test   eax,eax
c000a74f:	79 52                	jns    c000a7a3 <sinc_mono_vari_process+0x172>
c000a751:	eb 6b                	jmp    c000a7be <sinc_mono_vari_process+0x18d>
c000a753:	52                   	push   edx
c000a754:	55                   	push   ebp
c000a755:	57                   	push   edi
c000a756:	53                   	push   ebx
c000a757:	e8 5a f3 ff ff       	call   c0009ab6 <prepare_data>
c000a75c:	83 c4 10             	add    esp,0x10
c000a75f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a762:	85 c0                	test   eax,eax
c000a764:	0f 85 3d 01 00 00    	jne    c000a8a7 <sinc_mono_vari_process+0x276>
c000a76a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a76d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a770:	01 c8                	add    eax,ecx
c000a772:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a775:	99                   	cdq    
c000a776:	f7 f9                	idiv   ecx
c000a778:	39 d5                	cmp    ebp,edx
c000a77a:	7c ce                	jl     c000a74a <sinc_mono_vari_process+0x119>
c000a77c:	dd 04 24             	fld    QWORD PTR [esp]
c000a77f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a782:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a786:	dd 1e                	fstp   QWORD PTR [esi]
c000a788:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a78b:	99                   	cdq    
c000a78c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a792:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a795:	99                   	cdq    
c000a796:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a799:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a79c:	31 c0                	xor    eax,eax
c000a79e:	e9 04 01 00 00       	jmp    c000a8a7 <sinc_mono_vari_process+0x276>
c000a7a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a7aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7ad:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7b1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7b5:	d9 c9                	fxch   st(1)
c000a7b7:	de d9                	fcompp 
c000a7b9:	df e0                	fnstsw ax
c000a7bb:	9e                   	sahf   
c000a7bc:	77 be                	ja     c000a77c <sinc_mono_vari_process+0x14b>
c000a7be:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7c2:	7e 31                	jle    c000a7f5 <sinc_mono_vari_process+0x1c4>
c000a7c4:	83 ec 10             	sub    esp,0x10
c000a7c7:	dd 06                	fld    QWORD PTR [esi]
c000a7c9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7cf:	e8 fc 41 01 00       	call   c001e9d0 <fabs>
c000a7d4:	83 c4 10             	add    esp,0x10
c000a7d7:	dc 1d 20 03 02 c0    	fcomp  QWORD PTR ds:0xc0020320
c000a7dd:	df e0                	fnstsw ax
c000a7df:	9e                   	sahf   
c000a7e0:	76 13                	jbe    c000a7f5 <sinc_mono_vari_process+0x1c4>
c000a7e2:	dd 06                	fld    QWORD PTR [esi]
c000a7e4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7e7:	d8 e1                	fsub   st,st(1)
c000a7e9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7ec:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7ef:	de c1                	faddp  st(1),st
c000a7f1:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7f5:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7f8:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7fc:	d9 e8                	fld1   
c000a7fe:	d8 d9                	fcomp  st(1)
c000a800:	df e0                	fnstsw ax
c000a802:	9e                   	sahf   
c000a803:	77 04                	ja     c000a809 <sinc_mono_vari_process+0x1d8>
c000a805:	dd d8                	fstp   st(0)
c000a807:	d9 e8                	fld1   
c000a809:	de c9                	fmulp  st(1),st
c000a80b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a80f:	50                   	push   eax
c000a810:	50                   	push   eax
c000a811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a819:	e8 2e f2 ff ff       	call   c0009a4c <double_to_fp>
c000a81e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a822:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a826:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a82a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a82d:	e8 1a f2 ff ff       	call   c0009a4c <double_to_fp>
c000a832:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a836:	89 c1                	mov    ecx,eax
c000a838:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a83c:	89 d8                	mov    eax,ebx
c000a83e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a841:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a845:	e8 7b e7 ff ff       	call   c0008fc5 <calc_output_single>
c000a84a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a84d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a850:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a854:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a857:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a85a:	d9 e8                	fld1   
c000a85c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a860:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a864:	dd 14 24             	fst    QWORD PTR [esp]
c000a867:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a86b:	e8 ef f1 ff ff       	call   c0009a5f <fmod_one>
c000a870:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a873:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a877:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a87b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a87f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a882:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a886:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a88a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a88d:	e8 5e 41 01 00       	call   c001e9f0 <lrint>
c000a892:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a897:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a89b:	99                   	cdq    
c000a89c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a89f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a8a2:	e9 86 fe ff ff       	jmp    c000a72d <sinc_mono_vari_process+0xfc>
c000a8a7:	83 c4 3c             	add    esp,0x3c
c000a8aa:	5b                   	pop    ebx
c000a8ab:	5e                   	pop    esi
c000a8ac:	5f                   	pop    edi
c000a8ad:	5d                   	pop    ebp
c000a8ae:	c3                   	ret    

c000a8af <sinc_get_name>:
c000a8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b3:	31 c0                	xor    eax,eax
c000a8b5:	83 fa 02             	cmp    edx,0x2
c000a8b8:	77 07                	ja     c000a8c1 <sinc_get_name+0x12>
c000a8ba:	8b 04 95 00 02 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe00]
c000a8c1:	c3                   	ret    

c000a8c2 <sinc_get_description>:
c000a8c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8c6:	31 c0                	xor    eax,eax
c000a8c8:	83 fa 02             	cmp    edx,0x2
c000a8cb:	77 07                	ja     c000a8d4 <sinc_get_description+0x12>
c000a8cd:	8b 04 95 f4 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe0c]
c000a8d4:	c3                   	ret    

c000a8d5 <sinc_set_converter>:
c000a8d5:	53                   	push   ebx
c000a8d6:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8dc:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8e3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8e6:	85 c0                	test   eax,eax
c000a8e8:	74 13                	je     c000a8fd <sinc_set_converter+0x28>
c000a8ea:	83 ec 0c             	sub    esp,0xc
c000a8ed:	50                   	push   eax
c000a8ee:	e8 73 13 00 00       	call   c000bc66 <free>
c000a8f3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8fa:	83 c4 10             	add    esp,0x10
c000a8fd:	50                   	push   eax
c000a8fe:	68 44 08 00 00       	push   0x844
c000a903:	6a 00                	push   0x0
c000a905:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a909:	50                   	push   eax
c000a90a:	e8 f9 5c ff ff       	call   c0000608 <memset>
c000a90f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a912:	83 c4 10             	add    esp,0x10
c000a915:	b8 0b 00 00 00       	mov    eax,0xb
c000a91a:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a920:	7f 6e                	jg     c000a990 <sinc_set_converter+0xbb>
c000a922:	83 fa 01             	cmp    edx,0x1
c000a925:	75 10                	jne    c000a937 <sinc_set_converter+0x62>
c000a927:	c7 43 24 31 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a631
c000a92e:	c7 43 20 31 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a631
c000a935:	eb 4d                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a937:	83 fa 02             	cmp    edx,0x2
c000a93a:	75 10                	jne    c000a94c <sinc_set_converter+0x77>
c000a93c:	c7 43 24 b2 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3b2
c000a943:	c7 43 20 b2 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3b2
c000a94a:	eb 38                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a94c:	83 fa 04             	cmp    edx,0x4
c000a94f:	75 10                	jne    c000a961 <sinc_set_converter+0x8c>
c000a951:	c7 43 24 33 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a133
c000a958:	c7 43 20 33 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a133
c000a95f:	eb 23                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a961:	83 fa 06             	cmp    edx,0x6
c000a964:	75 10                	jne    c000a976 <sinc_set_converter+0xa1>
c000a966:	c7 43 24 b4 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009eb4
c000a96d:	c7 43 20 b4 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009eb4
c000a974:	eb 0e                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a976:	c7 43 24 30 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c30
c000a97d:	c7 43 20 30 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c30
c000a984:	c7 43 28 e0 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095e0
c000a98b:	b8 0a 00 00 00       	mov    eax,0xa
c000a990:	81 c4 58 08 00 00    	add    esp,0x858
c000a996:	5b                   	pop    ebx
c000a997:	c3                   	ret    

c000a998 <is_bad_src_ratio>:
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a99f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9aa:	dd 04 24             	fld    QWORD PTR [esp]
c000a9ad:	dd 05 20 01 02 c0    	fld    QWORD PTR ds:0xc0020120
c000a9b3:	de d9                	fcompp 
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	f6 c4 45             	test   ah,0x45
c000a9ba:	74 10                	je     c000a9cc <is_bad_src_ratio+0x34>
c000a9bc:	dd 04 24             	fld    QWORD PTR [esp]
c000a9bf:	dc 1d 28 01 02 c0    	fcomp  QWORD PTR ds:0xc0020128
c000a9c5:	df e0                	fnstsw ax
c000a9c7:	f6 c4 45             	test   ah,0x45
c000a9ca:	75 07                	jne    c000a9d3 <is_bad_src_ratio+0x3b>
c000a9cc:	b8 01 00 00 00       	mov    eax,0x1
c000a9d1:	eb 05                	jmp    c000a9d8 <is_bad_src_ratio+0x40>
c000a9d3:	b8 00 00 00 00       	mov    eax,0x0
c000a9d8:	83 c4 0c             	add    esp,0xc
c000a9db:	c3                   	ret    

c000a9dc <fmod_one>:
c000a9dc:	83 ec 2c             	sub    esp,0x2c
c000a9df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9ef:	83 ec 08             	sub    esp,0x8
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	e8 f1 3f 01 00       	call   c001e9f0 <lrint>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa06:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa0e:	de e1                	fsubrp st(1),st
c000aa10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa14:	d9 ee                	fldz   
c000aa16:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa1a:	df e0                	fnstsw ax
c000aa1c:	f6 c4 45             	test   ah,0x45
c000aa1f:	75 0a                	jne    c000aa2b <fmod_one+0x4f>
c000aa21:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa25:	d9 e8                	fld1   
c000aa27:	de c1                	faddp  st(1),st
c000aa29:	eb 04                	jmp    c000aa2f <fmod_one+0x53>
c000aa2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa2f:	83 c4 2c             	add    esp,0x2c
c000aa32:	c3                   	ret    

c000aa33 <zoh_vari_process>:
c000aa33:	55                   	push   ebp
c000aa34:	57                   	push   edi
c000aa35:	56                   	push   esi
c000aa36:	53                   	push   ebx
c000aa37:	83 ec 2c             	sub    esp,0x2c
c000aa3a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa3e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa4a:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa4e:	0f 8e 34 02 00 00    	jle    c000ac88 <zoh_vari_process+0x255>
c000aa54:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa57:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa5f:	85 db                	test   ebx,ebx
c000aa61:	0f 84 21 02 00 00    	je     c000ac88 <zoh_vari_process+0x255>
c000aa67:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa6a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa6e:	74 19                	je     c000aa89 <zoh_vari_process+0x56>
c000aa70:	31 d2                	xor    edx,edx
c000aa72:	39 c2                	cmp    edx,eax
c000aa74:	7d 0c                	jge    c000aa82 <zoh_vari_process+0x4f>
c000aa76:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa78:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa7b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa7f:	42                   	inc    edx
c000aa80:	eb f0                	jmp    c000aa72 <zoh_vari_process+0x3f>
c000aa82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa89:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa8c:	0f af d0             	imul   edx,eax
c000aa8f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa92:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa96:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aaa0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aaa7:	dd 07                	fld    QWORD PTR [edi]
c000aaa9:	dd 14 24             	fst    QWORD PTR [esp]
c000aaac:	50                   	push   eax
c000aaad:	50                   	push   eax
c000aaae:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aab1:	e8 e2 fe ff ff       	call   c000a998 <is_bad_src_ratio>
c000aab6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaba:	5a                   	pop    edx
c000aabb:	59                   	pop    ecx
c000aabc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aac1:	0f 85 b9 01 00 00    	jne    c000ac80 <zoh_vari_process+0x24d>
c000aac7:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aaca:	d9 e8                	fld1   
c000aacc:	d8 d1                	fcom   st(1)
c000aace:	df e0                	fnstsw ax
c000aad0:	9e                   	sahf   
c000aad1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aad5:	0f 86 85 00 00 00    	jbe    c000ab60 <zoh_vari_process+0x12d>
c000aadb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aade:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aae1:	7d 7d                	jge    c000ab60 <zoh_vari_process+0x12d>
c000aae3:	d9 c0                	fld    st(0)
c000aae5:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aae8:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aaeb:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aaee:	df e0                	fnstsw ax
c000aaf0:	9e                   	sahf   
c000aaf1:	73 6d                	jae    c000ab60 <zoh_vari_process+0x12d>
c000aaf3:	85 d2                	test   edx,edx
c000aaf5:	7e 38                	jle    c000ab2f <zoh_vari_process+0xfc>
c000aaf7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aafb:	83 ec 10             	sub    esp,0x10
c000aafe:	dd 07                	fld    QWORD PTR [edi]
c000ab00:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab03:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab06:	e8 c5 3e 01 00       	call   c001e9d0 <fabs>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	dc 1d 98 01 02 c0    	fcomp  QWORD PTR ds:0xc0020198
c000ab14:	df e0                	fnstsw ax
c000ab16:	9e                   	sahf   
c000ab17:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab1b:	76 12                	jbe    c000ab2f <zoh_vari_process+0xfc>
c000ab1d:	dd 07                	fld    QWORD PTR [edi]
c000ab1f:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab22:	d8 e1                	fsub   st,st(1)
c000ab24:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab27:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab2a:	de c1                	faddp  st(1),st
c000ab2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab2f:	31 c0                	xor    eax,eax
c000ab31:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab34:	7e 13                	jle    c000ab49 <zoh_vari_process+0x116>
c000ab36:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab3a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab3d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab40:	40                   	inc    eax
c000ab41:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab44:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab47:	eb e8                	jmp    c000ab31 <zoh_vari_process+0xfe>
c000ab49:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4d:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab50:	de c1                	faddp  st(1),st
c000ab52:	e9 73 ff ff ff       	jmp    c000aaca <zoh_vari_process+0x97>
c000ab57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab5b:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab5e:	de c1                	faddp  st(1),st
c000ab60:	83 ec 10             	sub    esp,0x10
c000ab63:	dd 14 24             	fst    QWORD PTR [esp]
c000ab66:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab6a:	e8 6d fe ff ff       	call   c000a9dc <fmod_one>
c000ab6f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab72:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab76:	d8 e1                	fsub   st,st(1)
c000ab78:	d9 c9                	fxch   st(1)
c000ab7a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab81:	e8 6a 3e 01 00       	call   c001e9f0 <lrint>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	0f af e8             	imul   ebp,eax
c000ab8c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab8f:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab92:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab96:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab99:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab9c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab9f:	0f 8d 82 00 00 00    	jge    c000ac27 <zoh_vari_process+0x1f4>
c000aba5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000aba9:	d9 c0                	fld    st(0)
c000abab:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000abae:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000abb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000abb6:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abba:	de d9                	fcompp 
c000abbc:	df e0                	fnstsw ax
c000abbe:	9e                   	sahf   
c000abbf:	72 66                	jb     c000ac27 <zoh_vari_process+0x1f4>
c000abc1:	85 d2                	test   edx,edx
c000abc3:	7e 38                	jle    c000abfd <zoh_vari_process+0x1ca>
c000abc5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abc9:	83 ec 10             	sub    esp,0x10
c000abcc:	dd 07                	fld    QWORD PTR [edi]
c000abce:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abd1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abd4:	e8 f7 3d 01 00       	call   c001e9d0 <fabs>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	dc 1d 98 01 02 c0    	fcomp  QWORD PTR ds:0xc0020198
c000abe2:	df e0                	fnstsw ax
c000abe4:	9e                   	sahf   
c000abe5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abe9:	76 12                	jbe    c000abfd <zoh_vari_process+0x1ca>
c000abeb:	dd 07                	fld    QWORD PTR [edi]
c000abed:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abf0:	d8 e1                	fsub   st,st(1)
c000abf2:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abf5:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abf8:	de c1                	faddp  st(1),st
c000abfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abfd:	31 d2                	xor    edx,edx
c000abff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac02:	39 d0                	cmp    eax,edx
c000ac04:	0f 8e 4d ff ff ff    	jle    c000ab57 <zoh_vari_process+0x124>
c000ac0a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac0d:	29 c1                	sub    ecx,eax
c000ac0f:	89 c8                	mov    eax,ecx
c000ac11:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac13:	01 d0                	add    eax,edx
c000ac15:	42                   	inc    edx
c000ac16:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac19:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac1c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac1f:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac22:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac25:	eb d8                	jmp    c000abff <zoh_vari_process+0x1cc>
c000ac27:	39 e9                	cmp    ecx,ebp
c000ac29:	7d 13                	jge    c000ac3e <zoh_vari_process+0x20b>
c000ac2b:	89 e8                	mov    eax,ebp
c000ac2d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac30:	29 c8                	sub    eax,ecx
c000ac32:	99                   	cdq    
c000ac33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3a:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac3e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac44:	85 c0                	test   eax,eax
c000ac46:	7f 1b                	jg     c000ac63 <zoh_vari_process+0x230>
c000ac48:	dd 04 24             	fld    QWORD PTR [esp]
c000ac4b:	dd 1f                	fstp   QWORD PTR [edi]
c000ac4d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac50:	99                   	cdq    
c000ac51:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac54:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac5a:	99                   	cdq    
c000ac5b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac5e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac61:	eb 25                	jmp    c000ac88 <zoh_vari_process+0x255>
c000ac63:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac66:	31 d2                	xor    edx,edx
c000ac68:	29 e8                	sub    eax,ebp
c000ac6a:	c1 e0 02             	shl    eax,0x2
c000ac6d:	39 d5                	cmp    ebp,edx
c000ac6f:	7e d7                	jle    c000ac48 <zoh_vari_process+0x215>
c000ac71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac73:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac76:	83 c0 04             	add    eax,0x4
c000ac79:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac7d:	42                   	inc    edx
c000ac7e:	eb ed                	jmp    c000ac6d <zoh_vari_process+0x23a>
c000ac80:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac8c:	83 c4 2c             	add    esp,0x2c
c000ac8f:	5b                   	pop    ebx
c000ac90:	5e                   	pop    esi
c000ac91:	5f                   	pop    edi
c000ac92:	5d                   	pop    ebp
c000ac93:	c3                   	ret    

c000ac94 <zoh_reset>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac9b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac9e:	85 c0                	test   eax,eax
c000aca0:	74 20                	je     c000acc2 <zoh_reset+0x2e>
c000aca2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000aca5:	83 c0 1c             	add    eax,0x1c
c000aca8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000acab:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000acb2:	c1 e2 02             	shl    edx,0x2
c000acb5:	51                   	push   ecx
c000acb6:	52                   	push   edx
c000acb7:	6a 00                	push   0x0
c000acb9:	50                   	push   eax
c000acba:	e8 49 59 ff ff       	call   c0000608 <memset>
c000acbf:	83 c4 10             	add    esp,0x10
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	c3                   	ret    

c000acc6 <zoh_get_name>:
c000acc6:	31 c0                	xor    eax,eax
c000acc8:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accd:	75 05                	jne    c000acd4 <zoh_get_name+0xe>
c000accf:	b8 34 03 02 c0       	mov    eax,0xc0020334
c000acd4:	c3                   	ret    

c000acd5 <zoh_get_description>:
c000acd5:	31 c0                	xor    eax,eax
c000acd7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acdc:	75 05                	jne    c000ace3 <zoh_get_description+0xe>
c000acde:	b8 45 03 02 c0       	mov    eax,0xc0020345
c000ace3:	c3                   	ret    

c000ace4 <zoh_set_converter>:
c000ace4:	53                   	push   ebx
c000ace5:	b8 0a 00 00 00       	mov    eax,0xa
c000acea:	83 ec 08             	sub    esp,0x8
c000aced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acf1:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000acf6:	75 6e                	jne    c000ad66 <zoh_set_converter+0x82>
c000acf8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acfb:	85 c0                	test   eax,eax
c000acfd:	74 13                	je     c000ad12 <zoh_set_converter+0x2e>
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	50                   	push   eax
c000ad03:	e8 5e 0f 00 00       	call   c000bc66 <free>
c000ad08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad0f:	83 c4 10             	add    esp,0x10
c000ad12:	50                   	push   eax
c000ad13:	50                   	push   eax
c000ad14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad17:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad1e:	50                   	push   eax
c000ad1f:	6a 01                	push   0x1
c000ad21:	e8 60 0f 00 00       	call   c000bc86 <calloc>
c000ad26:	83 c4 10             	add    esp,0x10
c000ad29:	89 c2                	mov    edx,eax
c000ad2b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad2e:	85 d2                	test   edx,edx
c000ad30:	b8 01 00 00 00       	mov    eax,0x1
c000ad35:	74 2f                	je     c000ad66 <zoh_set_converter+0x82>
c000ad37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad3a:	83 ec 0c             	sub    esp,0xc
c000ad3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad40:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad46:	c7 43 24 33 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa33
c000ad4d:	c7 43 20 33 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa33
c000ad54:	c7 43 28 94 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac94
c000ad5b:	53                   	push   ebx
c000ad5c:	e8 33 ff ff ff       	call   c000ac94 <zoh_reset>
c000ad61:	83 c4 10             	add    esp,0x10
c000ad64:	31 c0                	xor    eax,eax
c000ad66:	83 c4 08             	add    esp,0x8
c000ad69:	5b                   	pop    ebx
c000ad6a:	c3                   	ret    
c000ad6b:	90                   	nop

c000ad6c <Computer::close(int, int, void*)>:
c000ad6c:	57                   	push   edi
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad7b:	83 ec 0c             	sub    esp,0xc
c000ad7e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad84:	e8 2b 58 00 00       	call   c00105b4 <Device::closeAll()>
c000ad89:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad94:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad98:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ada0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ada4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ada8:	5b                   	pop    ebx
c000ada9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000adac:	5e                   	pop    esi
c000adad:	5f                   	pop    edi
c000adae:	ff e0                	jmp    eax

c000adb0 <Computer::Computer()>:
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb7:	83 ec 08             	sub    esp,0x8
c000adba:	68 7c 03 02 c0       	push   0xc002037c
c000adbf:	50                   	push   eax
c000adc0:	e8 69 58 00 00       	call   c001062e <Device::Device(char const*)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	ba 0c 04 02 c0       	mov    edx,0xc002040c
c000adcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add1:	89 10                	mov    DWORD PTR [eax],edx
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000adef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adf9:	83 ca 04             	or     edx,0x4
c000adfc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae0c:	0f b6 d0             	movzx  edx,al
c000ae0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae13:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae24:	0f b6 d0             	movzx  edx,al
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae3a:	8d 50 01             	lea    edx,[eax+0x1]
c000ae3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae47:	0f b6 d0             	movzx  edx,al
c000ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae52:	83 e1 3f             	and    ecx,0x3f
c000ae55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae63:	0f b6 d0             	movzx  edx,al
c000ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae7b:	0f b6 d0             	movzx  edx,al
c000ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae82:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae91:	8d 50 01             	lea    edx,[eax+0x1]
c000ae94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae9e:	0f b6 d0             	movzx  edx,al
c000aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aea9:	83 e1 3f             	and    ecx,0x3f
c000aeac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeba:	0f b6 d0             	movzx  edx,al
c000aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed2:	0f b6 d0             	movzx  edx,al
c000aed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee8:	8d 50 01             	lea    edx,[eax+0x1]
c000aeeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aef5:	0f b6 d0             	movzx  edx,al
c000aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af00:	83 e1 3f             	and    ecx,0x3f
c000af03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af07:	90                   	nop
c000af08:	83 c4 0c             	add    esp,0xc
c000af0b:	c3                   	ret    

c000af0c <Computer::setBootMessage(char const*)>:
c000af0c:	c3                   	ret    
c000af0d:	90                   	nop

c000af0e <Computer::start()>:
c000af0e:	56                   	push   esi
c000af0f:	53                   	push   ebx
c000af10:	50                   	push   eax
c000af11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af15:	e8 ea cc 00 00       	call   c0017c04 <lockScheduler()>
c000af1a:	e8 19 d0 00 00       	call   c0017f38 <schedule()>
c000af1f:	e8 e2 cc 00 00       	call   c0017c06 <unlockScheduler()>
c000af24:	fb                   	sti    
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	68 3b 07 00 00       	push   0x73b
c000af2d:	e8 12 40 00 00       	call   c000ef44 <operator new(unsigned long)>
c000af32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af39:	89 c6                	mov    esi,eax
c000af3b:	ff 35 14 4c 02 c0    	push   DWORD PTR ds:0xc0024c14
c000af41:	68 85 03 02 c0       	push   0xc0020385
c000af46:	6a 01                	push   0x1
c000af48:	50                   	push   eax
c000af49:	e8 16 cb 00 00       	call   c0017a64 <Process::Process(bool, char const*, Process*, char**)>
c000af4e:	83 c4 20             	add    esp,0x20
c000af51:	68 ff 00 00 00       	push   0xff
c000af56:	6a 00                	push   0x0
c000af58:	68 e3 b5 00 c0       	push   0xc000b5e3
c000af5d:	56                   	push   esi
c000af5e:	e8 cb cd 00 00       	call   c0017d2e <Process::createThread(void (*)(void*), void*, int)>
c000af63:	6a 7a                	push   0x7a
c000af65:	6a 00                	push   0x0
c000af67:	68 67 87 01 c0       	push   0xc0018767
c000af6c:	ff 35 14 4c 02 c0    	push   DWORD PTR ds:0xc0024c14
c000af72:	e8 b7 cd 00 00       	call   c0017d2e <Process::createThread(void (*)(void*), void*, int)>
c000af77:	83 c4 20             	add    esp,0x20
c000af7a:	a3 c8 4b 02 c0       	mov    ds:0xc0024bc8,eax
c000af7f:	c6 05 cd 37 02 c0 01 	mov    BYTE PTR ds:0xc00237cd,0x1
c000af86:	e8 03 44 00 00       	call   c000f38e <initVFS()>
c000af8b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af91:	8b 10                	mov    edx,DWORD PTR [eax]
c000af93:	6a 00                	push   0x0
c000af95:	6a 00                	push   0x0
c000af97:	6a 00                	push   0x0
c000af99:	50                   	push   eax
c000af9a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af9d:	e8 50 b5 00 00       	call   c00164f2 <setupSystemCalls()>
c000afa2:	e8 e5 4e 00 00       	call   c000fe8c <loadClockSettings()>
c000afa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000afaa:	e8 d9 55 00 00       	call   c0010588 <Device::loadDriversForAll()>
c000afaf:	5a                   	pop    edx
c000afb0:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c000afb6:	59                   	pop    ecx
c000afb7:	6a 01                	push   0x1
c000afb9:	68 92 03 02 c0       	push   0xc0020392
c000afbe:	e8 e4 c6 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c000afc3:	5e                   	pop    esi
c000afc4:	5a                   	pop    edx
c000afc5:	53                   	push   ebx
c000afc6:	50                   	push   eax
c000afc7:	e8 2e c8 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c000afcc:	c7 04 24 7c 14 02 c0 	mov    DWORD PTR [esp],0xc002147c
c000afd3:	e8 5b 40 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000afd8:	83 c4 10             	add    esp,0x10
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	6a 02                	push   0x2
c000afe0:	e8 1e d2 00 00       	call   c0018203 <blockTask(TaskState)>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	eb f1                	jmp    c000afdb <Computer::start()+0xcd>

c000afea <firstTask()>:
c000afea:	83 ec 18             	sub    esp,0x18
c000afed:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c000aff3:	e8 16 ff ff ff       	call   c000af0e <Computer::start()>

c000aff8 <Computer::detectFeatures()>:
c000aff8:	55                   	push   ebp
c000aff9:	57                   	push   edi
c000affa:	56                   	push   esi
c000affb:	53                   	push   ebx
c000affc:	83 ec 1c             	sub    esp,0x1c
c000afff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b003:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b00d:	e8 ad 52 ff ff       	call   c00002bf <detectCPUID>
c000b012:	85 c0                	test   eax,eax
c000b014:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b01a:	0f 95 c2             	setne  dl
c000b01d:	83 e0 fd             	and    eax,0xfffffffd
c000b020:	d1 e2                	shl    edx,1
c000b022:	09 d0                	or     eax,edx
c000b024:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b02a:	a8 02                	test   al,0x2
c000b02c:	75 46                	jne    c000b074 <Computer::detectFeatures()+0x7c>
c000b02e:	f6 05 e1 37 02 c0 04 	test   BYTE PTR ds:0xc00237e1,0x4
c000b035:	74 07                	je     c000b03e <Computer::detectFeatures()+0x46>
c000b037:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b03e:	e8 33 34 01 00       	call   c001e476 <x87Detect>
c000b043:	83 e0 01             	and    eax,0x1
c000b046:	c1 e0 04             	shl    eax,0x4
c000b049:	88 c2                	mov    dl,al
c000b04b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b051:	83 e0 ef             	and    eax,0xffffffef
c000b054:	09 d0                	or     eax,edx
c000b056:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b05c:	a8 10                	test   al,0x10
c000b05e:	0f 85 10 01 00 00    	jne    c000b174 <Computer::detectFeatures()+0x17c>
c000b064:	84 c0                	test   al,al
c000b066:	0f 88 2b 01 00 00    	js     c000b197 <Computer::detectFeatures()+0x19f>
c000b06c:	83 c4 1c             	add    esp,0x1c
c000b06f:	5b                   	pop    ebx
c000b070:	5e                   	pop    esi
c000b071:	5f                   	pop    edi
c000b072:	5d                   	pop    ebp
c000b073:	c3                   	ret    
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	6a 20                	push   0x20
c000b079:	e8 8d 8e 00 00       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c000b07e:	83 e0 01             	and    eax,0x1
c000b081:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b088:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b08e:	83 e0 f7             	and    eax,0xfffffff7
c000b091:	09 d0                	or     eax,edx
c000b093:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b099:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b0a0:	e8 66 8e 00 00       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c000b0a5:	83 e0 01             	and    eax,0x1
c000b0a8:	88 c2                	mov    dl,al
c000b0aa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0b0:	83 e0 fe             	and    eax,0xfffffffe
c000b0b3:	09 d0                	or     eax,edx
c000b0b5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0bb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0c2:	e8 44 8e 00 00       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c000b0c7:	c1 e0 07             	shl    eax,0x7
c000b0ca:	88 c2                	mov    dl,al
c000b0cc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0d2:	83 e0 7f             	and    eax,0x7f
c000b0d5:	09 d0                	or     eax,edx
c000b0d7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0dd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0e4:	e8 22 8e 00 00       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c000b0e9:	83 c4 10             	add    esp,0x10
c000b0ec:	83 e0 01             	and    eax,0x1
c000b0ef:	c1 e0 05             	shl    eax,0x5
c000b0f2:	88 c2                	mov    dl,al
c000b0f4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0fa:	83 e0 df             	and    eax,0xffffffdf
c000b0fd:	09 d0                	or     eax,edx
c000b0ff:	f7 05 e0 37 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00237e0,0x401
c000b109:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10f:	0f 84 a8 00 00 00    	je     c000b1bd <Computer::detectFeatures()+0x1c5>
c000b115:	83 ec 0c             	sub    esp,0xc
c000b118:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b11f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b123:	50                   	push   eax
c000b124:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b128:	55                   	push   ebp
c000b129:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b12d:	57                   	push   edi
c000b12e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b132:	56                   	push   esi
c000b133:	68 00 00 00 80       	push   0x80000000
c000b138:	e8 4b 8d 00 00       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b13d:	83 c4 20             	add    esp,0x20
c000b140:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b147:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b14b:	0f 86 dd fe ff ff    	jbe    c000b02e <Computer::detectFeatures()+0x36>
c000b151:	83 ec 0c             	sub    esp,0xc
c000b154:	50                   	push   eax
c000b155:	55                   	push   ebp
c000b156:	57                   	push   edi
c000b157:	56                   	push   esi
c000b158:	68 01 00 00 80       	push   0x80000001
c000b15d:	e8 26 8d 00 00       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b162:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b16c:	83 c4 20             	add    esp,0x20
c000b16f:	e9 ba fe ff ff       	jmp    c000b02e <Computer::detectFeatures()+0x36>
c000b174:	e8 b7 32 01 00       	call   c001e430 <sseDetect>
c000b179:	88 c2                	mov    dl,al
c000b17b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b181:	c1 e2 07             	shl    edx,0x7
c000b184:	83 e0 7f             	and    eax,0x7f
c000b187:	09 d0                	or     eax,edx
c000b189:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b18f:	84 c0                	test   al,al
c000b191:	0f 89 d5 fe ff ff    	jns    c000b06c <Computer::detectFeatures()+0x74>
c000b197:	e8 84 32 01 00       	call   c001e420 <avxDetect>
c000b19c:	83 e0 01             	and    eax,0x1
c000b19f:	c1 e0 05             	shl    eax,0x5
c000b1a2:	88 c2                	mov    dl,al
c000b1a4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1aa:	83 e0 df             	and    eax,0xffffffdf
c000b1ad:	09 d0                	or     eax,edx
c000b1af:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1b5:	83 c4 1c             	add    esp,0x1c
c000b1b8:	5b                   	pop    ebx
c000b1b9:	5e                   	pop    esi
c000b1ba:	5f                   	pop    edi
c000b1bb:	5d                   	pop    ebp
c000b1bc:	c3                   	ret    
c000b1bd:	83 ec 0c             	sub    esp,0xc
c000b1c0:	68 00 02 00 00       	push   0x200
c000b1c5:	e8 41 8d 00 00       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c000b1ca:	83 c4 10             	add    esp,0x10
c000b1cd:	e9 43 ff ff ff       	jmp    c000b115 <Computer::detectFeatures()+0x11d>

c000b1d2 <Computer::displayFeatures()>:
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <Computer::rdmsr(unsigned int)>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1e2:	74 0a                	je     c000b1ee <Computer::rdmsr(unsigned int)+0x1a>
c000b1e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1e8:	0f 32                	rdmsr  
c000b1ea:	83 c4 0c             	add    esp,0xc
c000b1ed:	c3                   	ret    
c000b1ee:	83 ec 0c             	sub    esp,0xc
c000b1f1:	68 ae 03 02 c0       	push   0xc00203ae
c000b1f6:	e8 cd 9a 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	eb e4                	jmp    c000b1e4 <Computer::rdmsr(unsigned int)+0x10>

c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b200:	57                   	push   edi
c000b201:	56                   	push   esi
c000b202:	52                   	push   edx
c000b203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b207:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b20b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b20f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b216:	74 0e                	je     c000b226 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b218:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b21c:	89 f0                	mov    eax,esi
c000b21e:	89 fa                	mov    edx,edi
c000b220:	0f 30                	wrmsr  
c000b222:	58                   	pop    eax
c000b223:	5e                   	pop    esi
c000b224:	5f                   	pop    edi
c000b225:	c3                   	ret    
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	68 b4 03 02 c0       	push   0xc00203b4
c000b22e:	e8 95 9a 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000b233:	83 c4 10             	add    esp,0x10
c000b236:	eb e0                	jmp    c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b238 <Computer::nmiEnabled()>:
c000b238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <Computer::readCMOS(unsigned char)>:
c000b244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b248:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b24f:	19 c0                	sbb    eax,eax
c000b251:	83 e0 80             	and    eax,0xffffff80
c000b254:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b258:	e6 70                	out    0x70,al
c000b25a:	e4 71                	in     al,0x71
c000b25c:	c3                   	ret    
c000b25d:	90                   	nop

c000b25e <Computer::enableNMI(bool)>:
c000b25e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b266:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b26c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b274:	eb ce                	jmp    c000b244 <Computer::readCMOS(unsigned char)>

c000b276 <Computer::open(int, int, void*)>:
c000b276:	56                   	push   esi
c000b277:	53                   	push   ebx
c000b278:	83 ec 10             	sub    esp,0x10
c000b27b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b27f:	f6 05 e0 37 02 c0 04 	test   BYTE PTR ds:0xc00237e0,0x4
c000b286:	68 68 22 00 00       	push   0x2268
c000b28b:	0f 94 05 00 2c 02 c0 	sete   BYTE PTR ds:0xc0022c00
c000b292:	e8 ad 3c 00 00       	call   c000ef44 <operator new(unsigned long)>
c000b297:	89 04 24             	mov    DWORD PTR [esp],eax
c000b29a:	89 c6                	mov    esi,eax
c000b29c:	e8 87 82 00 00       	call   c0013528 <ACPI::ACPI()>
c000b2a1:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b2a7:	58                   	pop    eax
c000b2a8:	5a                   	pop    edx
c000b2a9:	56                   	push   esi
c000b2aa:	53                   	push   ebx
c000b2ab:	e8 8e 51 00 00       	call   c001043e <Device::addChild(Device*)>
c000b2b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b3:	e8 40 fd ff ff       	call   c000aff8 <Computer::detectFeatures()>
c000b2b8:	59                   	pop    ecx
c000b2b9:	5e                   	pop    esi
c000b2ba:	6a 01                	push   0x1
c000b2bc:	53                   	push   ebx
c000b2bd:	e8 9c ff ff ff       	call   c000b25e <Computer::enableNMI(bool)>
c000b2c2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2c9:	e8 76 3c 00 00       	call   c000ef44 <operator new(unsigned long)>
c000b2ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2d1:	89 c6                	mov    esi,eax
c000b2d3:	e8 fe 8c 00 00       	call   c0013fd6 <CPU::CPU()>
c000b2d8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2de:	58                   	pop    eax
c000b2df:	5a                   	pop    edx
c000b2e0:	56                   	push   esi
c000b2e1:	53                   	push   ebx
c000b2e2:	e8 57 51 00 00       	call   c001043e <Device::addChild(Device*)>
c000b2e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2f3:	6a 00                	push   0x0
c000b2f5:	6a 00                	push   0x0
c000b2f7:	50                   	push   eax
c000b2f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2fb:	83 c4 20             	add    esp,0x20
c000b2fe:	e8 a3 56 00 00       	call   c00109a6 <setupFPU()>
c000b303:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b309:	85 c0                	test   eax,eax
c000b30b:	74 1f                	je     c000b32c <Computer::open(int, int, void*)+0xb6>
c000b30d:	83 ec 08             	sub    esp,0x8
c000b310:	50                   	push   eax
c000b311:	53                   	push   ebx
c000b312:	e8 27 51 00 00       	call   c001043e <Device::addChild(Device*)>
c000b317:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b31d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b31f:	6a 00                	push   0x0
c000b321:	6a 00                	push   0x0
c000b323:	6a 00                	push   0x0
c000b325:	50                   	push   eax
c000b326:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b329:	83 c4 20             	add    esp,0x20
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	68 ea af 00 c0       	push   0xc000afea
c000b334:	e8 f5 ca 00 00       	call   c0017e2e <setupMultitasking(void (*)())>
c000b339:	83 c4 14             	add    esp,0x14
c000b33c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b341:	5b                   	pop    ebx
c000b342:	5e                   	pop    esi
c000b343:	c3                   	ret    

c000b344 <Computer::disableNMI()>:
c000b344:	6a 00                	push   0x0
c000b346:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b34a:	e8 0f ff ff ff       	call   c000b25e <Computer::enableNMI(bool)>
c000b34f:	58                   	pop    eax
c000b350:	5a                   	pop    edx
c000b351:	c3                   	ret    

c000b352 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b356:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b35d:	19 c0                	sbb    eax,eax
c000b35f:	83 e0 80             	and    eax,0xffffff80
c000b362:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b366:	e6 70                	out    0x70,al
c000b368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b36c:	e6 71                	out    0x71,al
c000b36e:	c3                   	ret    
c000b36f:	90                   	nop

c000b370 <Computer::handleNMI()>:
c000b370:	56                   	push   esi
c000b371:	53                   	push   ebx
c000b372:	83 ec 10             	sub    esp,0x10
c000b375:	e4 92                	in     al,0x92
c000b377:	89 c6                	mov    esi,eax
c000b379:	e4 61                	in     al,0x61
c000b37b:	68 ba 03 02 c0       	push   0xc00203ba
c000b380:	88 c3                	mov    bl,al
c000b382:	e8 ac 3c 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	83 e6 10             	and    esi,0x10
c000b38d:	75 0d                	jne    c000b39c <Computer::handleNMI()+0x2c>
c000b38f:	f6 c3 40             	test   bl,0x40
c000b392:	75 1d                	jne    c000b3b1 <Computer::handleNMI()+0x41>
c000b394:	84 db                	test   bl,bl
c000b396:	78 2d                	js     c000b3c5 <Computer::handleNMI()+0x55>
c000b398:	58                   	pop    eax
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	68 cb 03 02 c0       	push   0xc00203cb
c000b3a4:	e8 1f 99 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	f6 c3 40             	test   bl,0x40
c000b3af:	74 e3                	je     c000b394 <Computer::handleNMI()+0x24>
c000b3b1:	83 ec 0c             	sub    esp,0xc
c000b3b4:	68 d8 03 02 c0       	push   0xc00203d8
c000b3b9:	e8 0a 99 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	84 db                	test   bl,bl
c000b3c3:	79 d3                	jns    c000b398 <Computer::handleNMI()+0x28>
c000b3c5:	c7 44 24 10 e2 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203e2
c000b3cd:	5a                   	pop    edx
c000b3ce:	5b                   	pop    ebx
c000b3cf:	5e                   	pop    esi
c000b3d0:	e9 f3 98 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c000b3d5:	90                   	nop

c000b3d6 <Computer::setDiskActivityLight(int, bool)>:
c000b3d6:	56                   	push   esi
c000b3d7:	53                   	push   ebx
c000b3d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3dc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3e1:	77 1b                	ja     c000b3fe <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3e3:	e4 92                	in     al,0x92
c000b3e5:	bb 40 00 00 00       	mov    ebx,0x40
c000b3ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3ee:	89 da                	mov    edx,ebx
c000b3f0:	d3 e2                	shl    edx,cl
c000b3f2:	89 f1                	mov    ecx,esi
c000b3f4:	f7 d2                	not    edx
c000b3f6:	d3 e3                	shl    ebx,cl
c000b3f8:	21 d0                	and    eax,edx
c000b3fa:	09 d8                	or     eax,ebx
c000b3fc:	e6 92                	out    0x92,al
c000b3fe:	5b                   	pop    ebx
c000b3ff:	5e                   	pop    esi
c000b400:	c3                   	ret    

c000b401 <debug_strcpy>:
c000b401:	80 3d cd 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237cd,0x0
c000b408:	75 01                	jne    c000b40b <debug_strcpy+0xa>
c000b40a:	c3                   	ret    
c000b40b:	55                   	push   ebp
c000b40c:	89 e5                	mov    ebp,esp
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b414:	8b 10                	mov    edx,DWORD PTR [eax]
c000b416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b419:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000b41c:	50                   	push   eax
c000b41d:	68 ef 03 02 c0       	push   0xc00203ef
c000b422:	e8 0c 3c 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	c9                   	leave  
c000b42b:	c3                   	ret    

c000b42c <GDTEntry::setBase(unsigned int)>:
c000b42c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b430:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b434:	89 c1                	mov    ecx,eax
c000b436:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b43a:	c1 e9 10             	shr    ecx,0x10
c000b43d:	c1 e8 18             	shr    eax,0x18
c000b440:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b443:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b446:	c3                   	ret    
c000b447:	90                   	nop

c000b448 <GDTEntry::setLimit(unsigned int)>:
c000b448:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b450:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b453:	66 89 01             	mov    WORD PTR [ecx],ax
c000b456:	83 e2 f0             	and    edx,0xfffffff0
c000b459:	c1 e8 10             	shr    eax,0x10
c000b45c:	83 e0 0f             	and    eax,0xf
c000b45f:	09 d0                	or     eax,edx
c000b461:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <GDT::GDT()>:
c000b466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b474:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b47a:	90                   	nop
c000b47b:	c3                   	ret    

c000b47c <GDT::addEntry(GDTEntry)>:
c000b47c:	53                   	push   ebx
c000b47d:	83 ec 0c             	sub    esp,0xc
c000b480:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b484:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b486:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b48d:	52                   	push   edx
c000b48e:	50                   	push   eax
c000b48f:	68 30 04 02 c0       	push   0xc0020430
c000b494:	e8 9a 3b 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000b499:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b49b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b49f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b4a3:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b4a7:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b4ab:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ae:	c1 e0 03             	shl    eax,0x3
c000b4b1:	89 13                	mov    DWORD PTR [ebx],edx
c000b4b3:	83 c4 18             	add    esp,0x18
c000b4b6:	5b                   	pop    ebx
c000b4b7:	c3                   	ret    

c000b4b8 <GDT::getNumberOfEntries()>:
c000b4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4be:	c3                   	ret    
c000b4bf:	90                   	nop

c000b4c0 <GDT::flush()>:
c000b4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4c6:	83 c0 04             	add    eax,0x4
c000b4c9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b4d0:	a3 d2 37 02 c0       	mov    ds:0xc00237d2,eax
c000b4d5:	66 89 15 d0 37 02 c0 	mov    WORD PTR ds:0xc00237d0,dx
c000b4dc:	e9 52 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4e1:	90                   	nop

c000b4e2 <GDT::setup()>:
c000b4e2:	55                   	push   ebp
c000b4e3:	57                   	push   edi
c000b4e4:	56                   	push   esi
c000b4e5:	53                   	push   ebx
c000b4e6:	83 ec 3c             	sub    esp,0x3c
c000b4e9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4ed:	6a 00                	push   0x0
c000b4ef:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4f3:	53                   	push   ebx
c000b4f4:	e8 33 ff ff ff       	call   c000b42c <GDTEntry::setBase(unsigned int)>
c000b4f9:	6a 00                	push   0x0
c000b4fb:	53                   	push   ebx
c000b4fc:	e8 47 ff ff ff       	call   c000b448 <GDTEntry::setLimit(unsigned int)>
c000b501:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b509:	6a 00                	push   0x0
c000b50b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b50f:	53                   	push   ebx
c000b510:	e8 17 ff ff ff       	call   c000b42c <GDTEntry::setBase(unsigned int)>
c000b515:	68 ff ff ff 00       	push   0xffffff
c000b51a:	53                   	push   ebx
c000b51b:	e8 28 ff ff ff       	call   c000b448 <GDTEntry::setLimit(unsigned int)>
c000b520:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b524:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b529:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b52e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b532:	83 c4 20             	add    esp,0x20
c000b535:	6a 00                	push   0x0
c000b537:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b53b:	53                   	push   ebx
c000b53c:	e8 eb fe ff ff       	call   c000b42c <GDTEntry::setBase(unsigned int)>
c000b541:	68 ff ff ff 00       	push   0xffffff
c000b546:	53                   	push   ebx
c000b547:	e8 fc fe ff ff       	call   c000b448 <GDTEntry::setLimit(unsigned int)>
c000b54c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b550:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b554:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b558:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b55c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b560:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b565:	0d 00 92 c0 00       	or     eax,0xc09200
c000b56a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b56e:	89 d8                	mov    eax,ebx
c000b570:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b574:	80 cc 60             	or     ah,0x60
c000b577:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b57b:	83 c4 0c             	add    esp,0xc
c000b57e:	89 f8                	mov    eax,edi
c000b580:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b584:	80 cc 60             	or     ah,0x60
c000b587:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b58b:	89 c7                	mov    edi,eax
c000b58d:	55                   	push   ebp
c000b58e:	e8 e9 fe ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000b593:	83 c4 0c             	add    esp,0xc
c000b596:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b59a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b59e:	55                   	push   ebp
c000b59f:	e8 d8 fe ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000b5a4:	83 c4 0c             	add    esp,0xc
c000b5a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5af:	55                   	push   ebp
c000b5b0:	e8 c7 fe ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000b5b5:	83 c4 0c             	add    esp,0xc
c000b5b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b5bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5c0:	53                   	push   ebx
c000b5c1:	51                   	push   ecx
c000b5c2:	55                   	push   ebp
c000b5c3:	e8 b4 fe ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000b5c8:	83 c4 0c             	add    esp,0xc
c000b5cb:	57                   	push   edi
c000b5cc:	56                   	push   esi
c000b5cd:	55                   	push   ebp
c000b5ce:	e8 a9 fe ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000b5d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b5d6:	e8 e5 fe ff ff       	call   c000b4c0 <GDT::flush()>
c000b5db:	83 c4 4c             	add    esp,0x4c
c000b5de:	5b                   	pop    ebx
c000b5df:	5e                   	pop    esi
c000b5e0:	5f                   	pop    edi
c000b5e1:	5d                   	pop    ebp
c000b5e2:	c3                   	ret    

c000b5e3 <idleFunction(void*)>:
c000b5e3:	53                   	push   ebx
c000b5e4:	83 ec 08             	sub    esp,0x8
c000b5e7:	e8 1a c6 00 00       	call   c0017c06 <unlockScheduler()>
c000b5ec:	e8 d1 89 00 00       	call   c0013fc2 <thisCPU()>
c000b5f1:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5f8:	74 41                	je     c000b63b <idleFunction(void*)+0x58>
c000b5fa:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c000b5ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b606:	74 33                	je     c000b63b <idleFunction(void*)+0x58>
c000b608:	31 db                	xor    ebx,ebx
c000b60a:	52                   	push   edx
c000b60b:	52                   	push   edx
c000b60c:	68 e1 00 00 00       	push   0xe1
c000b611:	50                   	push   eax
c000b612:	e8 bd fb ff ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c000b617:	53                   	push   ebx
c000b618:	83 e0 02             	and    eax,0x2
c000b61b:	50                   	push   eax
c000b61c:	68 e1 00 00 00       	push   0xe1
c000b621:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c000b627:	e8 d4 fb ff ff       	call   c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b62c:	83 c4 20             	add    esp,0x20
c000b62f:	e8 1c 4b ff ff       	call   c0000150 <doTPAUSE>
c000b634:	e8 37 34 01 00       	call   c001ea70 <idleCommon()>
c000b639:	eb f4                	jmp    c000b62f <idleFunction(void*)+0x4c>
c000b63b:	fb                   	sti    
c000b63c:	f4                   	hlt    
c000b63d:	e8 2e 34 01 00       	call   c001ea70 <idleCommon()>
c000b642:	eb f7                	jmp    c000b63b <idleFunction(void*)+0x58>

c000b644 <IDTEntry::IDTEntry(bool)>:
c000b644:	83 ec 04             	sub    esp,0x4
c000b647:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b64b:	88 04 24             	mov    BYTE PTR [esp],al
c000b64e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b652:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b658:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b664:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b667:	83 e2 f0             	and    edx,0xfffffff0
c000b66a:	83 ca 0e             	or     edx,0xe
c000b66d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b674:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b677:	83 e2 ef             	and    edx,0xffffffef
c000b67a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b67d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b681:	74 04                	je     c000b687 <IDTEntry::IDTEntry(bool)+0x43>
c000b683:	b2 03                	mov    dl,0x3
c000b685:	eb 02                	jmp    c000b689 <IDTEntry::IDTEntry(bool)+0x45>
c000b687:	b2 00                	mov    dl,0x0
c000b689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68d:	83 e2 03             	and    edx,0x3
c000b690:	88 d1                	mov    cl,dl
c000b692:	c1 e1 05             	shl    ecx,0x5
c000b695:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b698:	83 e2 9f             	and    edx,0xffffff9f
c000b69b:	09 ca                	or     edx,ecx
c000b69d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b6a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b6a7:	83 ca 80             	or     edx,0xffffff80
c000b6aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b6ad:	90                   	nop
c000b6ae:	83 c4 04             	add    esp,0x4
c000b6b1:	c3                   	ret    

c000b6b2 <IDTEntry::setOffset(unsigned int)>:
c000b6b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ba:	66 89 02             	mov    WORD PTR [edx],ax
c000b6bd:	c1 e8 10             	shr    eax,0x10
c000b6c0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b6c4:	c3                   	ret    
c000b6c5:	90                   	nop

c000b6c6 <IDT::IDT()>:
c000b6c6:	90                   	nop
c000b6c7:	c3                   	ret    

c000b6c8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6cc:	83 c0 30             	add    eax,0x30
c000b6cf:	c3                   	ret    

c000b6d0 <IDT::addEntry(IDTEntry, int)>:
c000b6d0:	53                   	push   ebx
c000b6d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6e1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6e4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::addEntry(int, void (*)(), bool)>:
c000b6ea:	53                   	push   ebx
c000b6eb:	83 ec 10             	sub    esp,0x10
c000b6ee:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6f3:	50                   	push   eax
c000b6f4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6f8:	53                   	push   ebx
c000b6f9:	e8 46 ff ff ff       	call   c000b644 <IDTEntry::IDTEntry(bool)>
c000b6fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b702:	53                   	push   ebx
c000b703:	e8 aa ff ff ff       	call   c000b6b2 <IDTEntry::setOffset(unsigned int)>
c000b708:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b70c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b710:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b714:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b718:	e8 b3 ff ff ff       	call   c000b6d0 <IDT::addEntry(IDTEntry, int)>
c000b71d:	83 c4 30             	add    esp,0x30
c000b720:	5b                   	pop    ebx
c000b721:	c3                   	ret    

c000b722 <IDT::flush()>:
c000b722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b726:	66 c7 05 d8 37 02 c0 ff 07 	mov    WORD PTR ds:0xc00237d8,0x7ff
c000b72f:	a3 da 37 02 c0       	mov    ds:0xc00237da,eax
c000b734:	0f 01 1d d8 37 02 c0 	lidtd  ds:0xc00237d8
c000b73b:	c3                   	ret    

c000b73c <IDT::setup()>:
c000b73c:	57                   	push   edi
c000b73d:	56                   	push   esi
c000b73e:	53                   	push   ebx
c000b73f:	83 ec 10             	sub    esp,0x10
c000b742:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b746:	6a 00                	push   0x0
c000b748:	68 53 03 00 c0       	push   0xc0000353
c000b74d:	6a 00                	push   0x0
c000b74f:	53                   	push   ebx
c000b750:	e8 95 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b755:	6a 00                	push   0x0
c000b757:	68 63 03 00 c0       	push   0xc0000363
c000b75c:	6a 01                	push   0x1
c000b75e:	53                   	push   ebx
c000b75f:	e8 86 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b764:	83 c4 20             	add    esp,0x20
c000b767:	6a 00                	push   0x0
c000b769:	68 6d 03 00 c0       	push   0xc000036d
c000b76e:	6a 02                	push   0x2
c000b770:	53                   	push   ebx
c000b771:	e8 74 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b776:	6a 00                	push   0x0
c000b778:	68 77 03 00 c0       	push   0xc0000377
c000b77d:	6a 03                	push   0x3
c000b77f:	53                   	push   ebx
c000b780:	e8 65 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b785:	83 c4 20             	add    esp,0x20
c000b788:	6a 00                	push   0x0
c000b78a:	68 81 03 00 c0       	push   0xc0000381
c000b78f:	6a 04                	push   0x4
c000b791:	53                   	push   ebx
c000b792:	e8 53 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b797:	6a 00                	push   0x0
c000b799:	68 8b 03 00 c0       	push   0xc000038b
c000b79e:	6a 05                	push   0x5
c000b7a0:	53                   	push   ebx
c000b7a1:	e8 44 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7a6:	83 c4 20             	add    esp,0x20
c000b7a9:	6a 00                	push   0x0
c000b7ab:	68 95 03 00 c0       	push   0xc0000395
c000b7b0:	6a 06                	push   0x6
c000b7b2:	53                   	push   ebx
c000b7b3:	e8 32 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7b8:	6a 00                	push   0x0
c000b7ba:	68 9f 03 00 c0       	push   0xc000039f
c000b7bf:	6a 07                	push   0x7
c000b7c1:	53                   	push   ebx
c000b7c2:	e8 23 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7c7:	83 c4 20             	add    esp,0x20
c000b7ca:	6a 00                	push   0x0
c000b7cc:	68 a9 03 00 c0       	push   0xc00003a9
c000b7d1:	6a 08                	push   0x8
c000b7d3:	53                   	push   ebx
c000b7d4:	e8 11 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7d9:	6a 00                	push   0x0
c000b7db:	68 b1 03 00 c0       	push   0xc00003b1
c000b7e0:	6a 09                	push   0x9
c000b7e2:	53                   	push   ebx
c000b7e3:	e8 02 ff ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7e8:	83 c4 20             	add    esp,0x20
c000b7eb:	6a 00                	push   0x0
c000b7ed:	68 bb 03 00 c0       	push   0xc00003bb
c000b7f2:	6a 0a                	push   0xa
c000b7f4:	53                   	push   ebx
c000b7f5:	e8 f0 fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b7fa:	6a 00                	push   0x0
c000b7fc:	68 c3 03 00 c0       	push   0xc00003c3
c000b801:	6a 0b                	push   0xb
c000b803:	53                   	push   ebx
c000b804:	e8 e1 fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b809:	83 c4 20             	add    esp,0x20
c000b80c:	6a 00                	push   0x0
c000b80e:	68 cb 03 00 c0       	push   0xc00003cb
c000b813:	6a 0c                	push   0xc
c000b815:	53                   	push   ebx
c000b816:	e8 cf fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b81b:	6a 00                	push   0x0
c000b81d:	68 d3 03 00 c0       	push   0xc00003d3
c000b822:	6a 0d                	push   0xd
c000b824:	53                   	push   ebx
c000b825:	e8 c0 fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b82a:	83 c4 20             	add    esp,0x20
c000b82d:	6a 00                	push   0x0
c000b82f:	68 db 03 00 c0       	push   0xc00003db
c000b834:	6a 0e                	push   0xe
c000b836:	53                   	push   ebx
c000b837:	e8 ae fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b83c:	6a 00                	push   0x0
c000b83e:	68 e3 03 00 c0       	push   0xc00003e3
c000b843:	6a 0f                	push   0xf
c000b845:	53                   	push   ebx
c000b846:	e8 9f fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b84b:	83 c4 20             	add    esp,0x20
c000b84e:	6a 00                	push   0x0
c000b850:	68 ed 03 00 c0       	push   0xc00003ed
c000b855:	6a 10                	push   0x10
c000b857:	53                   	push   ebx
c000b858:	e8 8d fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b85d:	6a 00                	push   0x0
c000b85f:	68 f7 03 00 c0       	push   0xc00003f7
c000b864:	6a 11                	push   0x11
c000b866:	53                   	push   ebx
c000b867:	e8 7e fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b86c:	83 c4 20             	add    esp,0x20
c000b86f:	6a 00                	push   0x0
c000b871:	68 01 04 00 c0       	push   0xc0000401
c000b876:	6a 12                	push   0x12
c000b878:	53                   	push   ebx
c000b879:	e8 6c fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b87e:	6a 01                	push   0x1
c000b880:	68 0b 04 00 c0       	push   0xc000040b
c000b885:	6a 60                	push   0x60
c000b887:	53                   	push   ebx
c000b888:	e8 5d fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b88d:	83 c4 20             	add    esp,0x20
c000b890:	6a 00                	push   0x0
c000b892:	68 15 04 00 c0       	push   0xc0000415
c000b897:	6a 20                	push   0x20
c000b899:	53                   	push   ebx
c000b89a:	e8 4b fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b89f:	6a 00                	push   0x0
c000b8a1:	68 1f 04 00 c0       	push   0xc000041f
c000b8a6:	6a 21                	push   0x21
c000b8a8:	53                   	push   ebx
c000b8a9:	e8 3c fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b8ae:	83 c4 20             	add    esp,0x20
c000b8b1:	6a 00                	push   0x0
c000b8b3:	68 29 04 00 c0       	push   0xc0000429
c000b8b8:	6a 22                	push   0x22
c000b8ba:	53                   	push   ebx
c000b8bb:	e8 2a fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b8c0:	6a 00                	push   0x0
c000b8c2:	68 33 04 00 c0       	push   0xc0000433
c000b8c7:	6a 23                	push   0x23
c000b8c9:	53                   	push   ebx
c000b8ca:	e8 1b fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b8cf:	83 c4 20             	add    esp,0x20
c000b8d2:	6a 00                	push   0x0
c000b8d4:	68 3d 04 00 c0       	push   0xc000043d
c000b8d9:	6a 24                	push   0x24
c000b8db:	53                   	push   ebx
c000b8dc:	e8 09 fe ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b8e1:	6a 00                	push   0x0
c000b8e3:	68 47 04 00 c0       	push   0xc0000447
c000b8e8:	6a 25                	push   0x25
c000b8ea:	53                   	push   ebx
c000b8eb:	e8 fa fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b8f0:	83 c4 20             	add    esp,0x20
c000b8f3:	6a 00                	push   0x0
c000b8f5:	68 51 04 00 c0       	push   0xc0000451
c000b8fa:	6a 26                	push   0x26
c000b8fc:	53                   	push   ebx
c000b8fd:	e8 e8 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b902:	6a 00                	push   0x0
c000b904:	68 5b 04 00 c0       	push   0xc000045b
c000b909:	6a 27                	push   0x27
c000b90b:	53                   	push   ebx
c000b90c:	e8 d9 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b911:	83 c4 20             	add    esp,0x20
c000b914:	6a 00                	push   0x0
c000b916:	68 65 04 00 c0       	push   0xc0000465
c000b91b:	6a 28                	push   0x28
c000b91d:	53                   	push   ebx
c000b91e:	e8 c7 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b923:	6a 00                	push   0x0
c000b925:	68 6f 04 00 c0       	push   0xc000046f
c000b92a:	6a 29                	push   0x29
c000b92c:	53                   	push   ebx
c000b92d:	e8 b8 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b932:	83 c4 20             	add    esp,0x20
c000b935:	6a 00                	push   0x0
c000b937:	68 79 04 00 c0       	push   0xc0000479
c000b93c:	6a 2a                	push   0x2a
c000b93e:	53                   	push   ebx
c000b93f:	e8 a6 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b944:	6a 00                	push   0x0
c000b946:	68 83 04 00 c0       	push   0xc0000483
c000b94b:	6a 2b                	push   0x2b
c000b94d:	53                   	push   ebx
c000b94e:	e8 97 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b953:	83 c4 20             	add    esp,0x20
c000b956:	6a 00                	push   0x0
c000b958:	68 8d 04 00 c0       	push   0xc000048d
c000b95d:	6a 2c                	push   0x2c
c000b95f:	53                   	push   ebx
c000b960:	e8 85 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b965:	6a 00                	push   0x0
c000b967:	68 97 04 00 c0       	push   0xc0000497
c000b96c:	6a 2d                	push   0x2d
c000b96e:	53                   	push   ebx
c000b96f:	e8 76 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b974:	83 c4 20             	add    esp,0x20
c000b977:	6a 00                	push   0x0
c000b979:	68 a1 04 00 c0       	push   0xc00004a1
c000b97e:	6a 2e                	push   0x2e
c000b980:	53                   	push   ebx
c000b981:	e8 64 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b986:	6a 00                	push   0x0
c000b988:	68 ab 04 00 c0       	push   0xc00004ab
c000b98d:	6a 2f                	push   0x2f
c000b98f:	53                   	push   ebx
c000b990:	e8 55 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b995:	83 c4 20             	add    esp,0x20
c000b998:	6a 00                	push   0x0
c000b99a:	68 b5 04 00 c0       	push   0xc00004b5
c000b99f:	6a 30                	push   0x30
c000b9a1:	53                   	push   ebx
c000b9a2:	e8 43 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9a7:	6a 00                	push   0x0
c000b9a9:	68 bf 04 00 c0       	push   0xc00004bf
c000b9ae:	6a 31                	push   0x31
c000b9b0:	53                   	push   ebx
c000b9b1:	e8 34 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9b6:	83 c4 20             	add    esp,0x20
c000b9b9:	6a 00                	push   0x0
c000b9bb:	68 c9 04 00 c0       	push   0xc00004c9
c000b9c0:	6a 32                	push   0x32
c000b9c2:	53                   	push   ebx
c000b9c3:	e8 22 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9c8:	6a 00                	push   0x0
c000b9ca:	68 d3 04 00 c0       	push   0xc00004d3
c000b9cf:	6a 33                	push   0x33
c000b9d1:	53                   	push   ebx
c000b9d2:	e8 13 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9d7:	83 c4 20             	add    esp,0x20
c000b9da:	6a 00                	push   0x0
c000b9dc:	68 dd 04 00 c0       	push   0xc00004dd
c000b9e1:	6a 34                	push   0x34
c000b9e3:	53                   	push   ebx
c000b9e4:	e8 01 fd ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9e9:	6a 00                	push   0x0
c000b9eb:	68 e7 04 00 c0       	push   0xc00004e7
c000b9f0:	6a 35                	push   0x35
c000b9f2:	53                   	push   ebx
c000b9f3:	e8 f2 fc ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000b9f8:	83 c4 20             	add    esp,0x20
c000b9fb:	6a 00                	push   0x0
c000b9fd:	68 f1 04 00 c0       	push   0xc00004f1
c000ba02:	6a 36                	push   0x36
c000ba04:	53                   	push   ebx
c000ba05:	e8 e0 fc ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000ba0a:	6a 00                	push   0x0
c000ba0c:	68 fb 04 00 c0       	push   0xc00004fb
c000ba11:	6a 37                	push   0x37
c000ba13:	53                   	push   ebx
c000ba14:	e8 d1 fc ff ff       	call   c000b6ea <IDT::addEntry(int, void (*)(), bool)>
c000ba19:	83 c4 20             	add    esp,0x20
c000ba1c:	e8 22 25 00 00       	call   c000df43 <Virt::getAKernelVAS()>
c000ba21:	52                   	push   edx
c000ba22:	6a 03                	push   0x3
c000ba24:	6a 02                	push   0x2
c000ba26:	50                   	push   eax
c000ba27:	e8 be 2a 00 00       	call   c000e4ea <VAS::allocatePages(int, int)>
c000ba2c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ba33:	89 c6                	mov    esi,eax
c000ba35:	e8 0a 35 00 00       	call   c000ef44 <operator new(unsigned long)>
c000ba3a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba40:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba43:	89 c7                	mov    edi,eax
c000ba45:	e8 3a 1c 00 00       	call   c000d684 <TSS::TSS()>
c000ba4a:	83 c4 0c             	add    esp,0xc
c000ba4d:	68 a9 03 00 c0       	push   0xc00003a9
c000ba52:	56                   	push   esi
c000ba53:	57                   	push   edi
c000ba54:	e8 6b 1c 00 00       	call   c000d6c4 <TSS::setup(unsigned long, unsigned long)>
c000ba59:	59                   	pop    ecx
c000ba5a:	89 c6                	mov    esi,eax
c000ba5c:	5f                   	pop    edi
c000ba5d:	6a 00                	push   0x0
c000ba5f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba63:	50                   	push   eax
c000ba64:	e8 db fb ff ff       	call   c000b644 <IDTEntry::IDTEntry(bool)>
c000ba69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba6d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba72:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba79:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba83:	80 ce 05             	or     dh,0x5
c000ba86:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba91:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba97:	e8 86 fc ff ff       	call   c000b722 <IDT::flush()>
c000ba9c:	83 c4 20             	add    esp,0x20
c000ba9f:	5b                   	pop    ebx
c000baa0:	5e                   	pop    esi
c000baa1:	5f                   	pop    edi
c000baa2:	c3                   	ret    

c000baa3 <sbrk>:
c000baa3:	55                   	push   ebp
c000baa4:	57                   	push   edi
c000baa5:	56                   	push   esi
c000baa6:	53                   	push   ebx
c000baa7:	83 ec 1c             	sub    esp,0x1c
c000baaa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000baae:	85 db                	test   ebx,ebx
c000bab0:	74 37                	je     c000bae9 <sbrk+0x46>
c000bab2:	78 3f                	js     c000baf3 <sbrk+0x50>
c000bab4:	e8 09 85 00 00       	call   c0013fc2 <thisCPU()>
c000bab9:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000babf:	83 e0 01             	and    eax,0x1
c000bac2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bac6:	a1 ec 2b 02 c0       	mov    eax,ds:0xc0022bec
c000bacb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bacf:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bad5:	89 d8                	mov    eax,ebx
c000bad7:	78 35                	js     c000bb0e <sbrk+0x6b>
c000bad9:	c1 f8 0c             	sar    eax,0xc
c000badc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bae0:	89 c7                	mov    edi,eax
c000bae2:	be 00 00 00 00       	mov    esi,0x0
c000bae7:	eb 3c                	jmp    c000bb25 <sbrk+0x82>
c000bae9:	a1 ec 2b 02 c0       	mov    eax,ds:0xc0022bec
c000baee:	e9 ad 00 00 00       	jmp    c000bba0 <sbrk+0xfd>
c000baf3:	83 ec 08             	sub    esp,0x8
c000baf6:	53                   	push   ebx
c000baf7:	68 4c 04 02 c0       	push   0xc002044c
c000bafc:	e8 32 35 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bb09:	e9 92 00 00 00       	jmp    c000bba0 <sbrk+0xfd>
c000bb0e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bb14:	eb c3                	jmp    c000bad9 <sbrk+0x36>
c000bb16:	81 05 ec 2b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022bec,0x1000
c000bb20:	46                   	inc    esi
c000bb21:	39 f7                	cmp    edi,esi
c000bb23:	74 34                	je     c000bb59 <sbrk+0xb6>
c000bb25:	e8 19 24 00 00       	call   c000df43 <Virt::getAKernelVAS()>
c000bb2a:	89 c3                	mov    ebx,eax
c000bb2c:	8b 2d ec 2b 02 c0    	mov    ebp,DWORD PTR ds:0xc0022bec
c000bb32:	e8 c9 06 00 00       	call   c000c200 <Phys::allocatePage()>
c000bb37:	68 01 04 00 00       	push   0x401
c000bb3c:	55                   	push   ebp
c000bb3d:	50                   	push   eax
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 a6 28 00 00       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb4c:	74 c8                	je     c000bb16 <sbrk+0x73>
c000bb4e:	8b 1d ec 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022bec
c000bb54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb57:	eb bd                	jmp    c000bb16 <sbrk+0x73>
c000bb59:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb5e:	74 48                	je     c000bba8 <sbrk+0x105>
c000bb60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb64:	89 d3                	mov    ebx,edx
c000bb66:	c1 eb 0a             	shr    ebx,0xa
c000bb69:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb6f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb79:	c1 e0 0c             	shl    eax,0xc
c000bb7c:	01 d0                	add    eax,edx
c000bb7e:	c1 e8 0a             	shr    eax,0xa
c000bb81:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb86:	2d 00 00 40 00       	sub    eax,0x400000
c000bb8b:	39 c3                	cmp    ebx,eax
c000bb8d:	77 0d                	ja     c000bb9c <sbrk+0xf9>
c000bb8f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb92:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb98:	39 d8                	cmp    eax,ebx
c000bb9a:	73 f3                	jae    c000bb8f <sbrk+0xec>
c000bb9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bba0:	83 c4 1c             	add    esp,0x1c
c000bba3:	5b                   	pop    ebx
c000bba4:	5e                   	pop    esi
c000bba5:	5f                   	pop    edi
c000bba6:	5d                   	pop    ebp
c000bba7:	c3                   	ret    
c000bba8:	e8 d8 2e 01 00       	call   c001ea85 <CPU::readCR3()>
c000bbad:	83 ec 0c             	sub    esp,0xc
c000bbb0:	50                   	push   eax
c000bbb1:	e8 e1 2e 01 00       	call   c001ea97 <CPU::writeCR3(unsigned long)>
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	eb e1                	jmp    c000bb9c <sbrk+0xf9>

c000bbbb <mmap>:
c000bbbb:	83 ec 18             	sub    esp,0x18
c000bbbe:	68 7c 04 02 c0       	push   0xc002047c
c000bbc3:	e8 00 91 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 1c             	add    esp,0x1c
c000bbd0:	c3                   	ret    

c000bbd1 <munmap>:
c000bbd1:	83 ec 18             	sub    esp,0x18
c000bbd4:	68 81 04 02 c0       	push   0xc0020481
c000bbd9:	e8 ea 90 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000bbde:	b8 00 00 00 00       	mov    eax,0x0
c000bbe3:	83 c4 1c             	add    esp,0x1c
c000bbe6:	c3                   	ret    

c000bbe7 <liballoc_lock()>:
c000bbe7:	83 ec 0c             	sub    esp,0xc
c000bbea:	e8 15 c0 00 00       	call   c0017c04 <lockScheduler()>
c000bbef:	b8 00 00 00 00       	mov    eax,0x0
c000bbf4:	83 c4 0c             	add    esp,0xc
c000bbf7:	c3                   	ret    

c000bbf8 <liballoc_unlock()>:
c000bbf8:	83 ec 0c             	sub    esp,0xc
c000bbfb:	e8 06 c0 00 00       	call   c0017c06 <unlockScheduler()>
c000bc00:	b8 00 00 00 00       	mov    eax,0x0
c000bc05:	83 c4 0c             	add    esp,0xc
c000bc08:	c3                   	ret    

c000bc09 <liballoc_alloc(int)>:
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	e8 32 23 00 00       	call   c000df43 <Virt::getAKernelVAS()>
c000bc11:	83 ec 04             	sub    esp,0x4
c000bc14:	6a 01                	push   0x1
c000bc16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc1a:	50                   	push   eax
c000bc1b:	e8 ca 28 00 00       	call   c000e4ea <VAS::allocatePages(int, int)>
c000bc20:	83 c4 1c             	add    esp,0x1c
c000bc23:	c3                   	ret    

c000bc24 <liballoc_free(void*, int)>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	e8 17 23 00 00       	call   c000df43 <Virt::getAKernelVAS()>
c000bc2c:	83 ec 08             	sub    esp,0x8
c000bc2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc33:	50                   	push   eax
c000bc34:	e8 d3 25 00 00       	call   c000e20c <VAS::freeAllocatedPages(unsigned long)>
c000bc39:	b8 00 00 00 00       	mov    eax,0x0
c000bc3e:	83 c4 1c             	add    esp,0x1c
c000bc41:	c3                   	ret    

c000bc42 <realloc>:
c000bc42:	83 ec 14             	sub    esp,0x14
c000bc45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4d:	e8 3c 57 ff ff       	call   c000138e <dlrealloc>
c000bc52:	83 c4 1c             	add    esp,0x1c
c000bc55:	c3                   	ret    

c000bc56 <malloc>:
c000bc56:	83 ec 18             	sub    esp,0x18
c000bc59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc5d:	e8 ef 51 ff ff       	call   c0000e51 <dlmalloc>
c000bc62:	83 c4 1c             	add    esp,0x1c
c000bc65:	c3                   	ret    

c000bc66 <free>:
c000bc66:	83 ec 18             	sub    esp,0x18
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	e8 84 4e ff ff       	call   c0000af6 <dlfree>
c000bc72:	83 c4 1c             	add    esp,0x1c
c000bc75:	c3                   	ret    

c000bc76 <rfree>:
c000bc76:	83 ec 18             	sub    esp,0x18
c000bc79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc7d:	e8 e4 ff ff ff       	call   c000bc66 <free>
c000bc82:	83 c4 1c             	add    esp,0x1c
c000bc85:	c3                   	ret    

c000bc86 <calloc>:
c000bc86:	56                   	push   esi
c000bc87:	53                   	push   ebx
c000bc88:	83 ec 10             	sub    esp,0x10
c000bc8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc8f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc94:	53                   	push   ebx
c000bc95:	e8 bc ff ff ff       	call   c000bc56 <malloc>
c000bc9a:	89 c6                	mov    esi,eax
c000bc9c:	83 c4 0c             	add    esp,0xc
c000bc9f:	53                   	push   ebx
c000bca0:	6a 00                	push   0x0
c000bca2:	50                   	push   eax
c000bca3:	e8 60 49 ff ff       	call   c0000608 <memset>
c000bca8:	89 f0                	mov    eax,esi
c000bcaa:	83 c4 14             	add    esp,0x14
c000bcad:	5b                   	pop    ebx
c000bcae:	5e                   	pop    esi
c000bcaf:	c3                   	ret    

c000bcb0 <hwTextMode_loadInData(VgaText*)>:
c000bcb0:	57                   	push   edi
c000bcb1:	56                   	push   esi
c000bcb2:	53                   	push   ebx
c000bcb3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcb7:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bcbd:	85 c0                	test   eax,eax
c000bcbf:	7e 30                	jle    c000bcf1 <hwTextMode_loadInData(VgaText*)+0x41>
c000bcc1:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bcc4:	31 f6                	xor    esi,esi
c000bcc6:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bcc9:	31 c0                	xor    eax,eax
c000bccb:	c1 e1 05             	shl    ecx,0x5
c000bcce:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bcd4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bcd8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bcdc:	40                   	inc    eax
c000bcdd:	83 f8 50             	cmp    eax,0x50
c000bce0:	75 f2                	jne    c000bcd4 <hwTextMode_loadInData(VgaText*)+0x24>
c000bce2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bce8:	46                   	inc    esi
c000bce9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcef:	7f d5                	jg     c000bcc6 <hwTextMode_loadInData(VgaText*)+0x16>
c000bcf1:	5b                   	pop    ebx
c000bcf2:	5e                   	pop    esi
c000bcf3:	5f                   	pop    edi
c000bcf4:	c3                   	ret    

c000bcf5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcf5:	56                   	push   esi
c000bcf6:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcfb:	53                   	push   ebx
c000bcfc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd04:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bd0a:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bd10:	c1 e0 04             	shl    eax,0x4
c000bd13:	83 e6 0f             	and    esi,0xf
c000bd16:	0f b6 c0             	movzx  eax,al
c000bd19:	41                   	inc    ecx
c000bd1a:	09 f0                	or     eax,esi
c000bd1c:	83 c2 02             	add    edx,0x2
c000bd1f:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bd23:	c1 e0 08             	shl    eax,0x8
c000bd26:	09 f0                	or     eax,esi
c000bd28:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bd2c:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bd32:	75 d0                	jne    c000bd04 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bd34:	5b                   	pop    ebx
c000bd35:	5e                   	pop    esi
c000bd36:	c3                   	ret    

c000bd37 <hwTextMode_showCursor(VgaText*, bool)>:
c000bd37:	56                   	push   esi
c000bd38:	53                   	push   ebx
c000bd39:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd3e:	74 38                	je     c000bd78 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd40:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd45:	b0 0a                	mov    al,0xa
c000bd47:	89 da                	mov    edx,ebx
c000bd49:	ee                   	out    dx,al
c000bd4a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd4f:	89 ca                	mov    edx,ecx
c000bd51:	ec                   	in     al,dx
c000bd52:	b2 0f                	mov    dl,0xf
c000bd54:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd58:	83 e0 c0             	and    eax,0xffffffc0
c000bd5b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd61:	09 d0                	or     eax,edx
c000bd63:	89 ca                	mov    edx,ecx
c000bd65:	ee                   	out    dx,al
c000bd66:	b0 0b                	mov    al,0xb
c000bd68:	89 da                	mov    edx,ebx
c000bd6a:	ee                   	out    dx,al
c000bd6b:	89 ca                	mov    edx,ecx
c000bd6d:	ec                   	in     al,dx
c000bd6e:	83 e0 e0             	and    eax,0xffffffe0
c000bd71:	83 c8 0f             	or     eax,0xf
c000bd74:	ee                   	out    dx,al
c000bd75:	5b                   	pop    ebx
c000bd76:	5e                   	pop    esi
c000bd77:	c3                   	ret    
c000bd78:	b0 0a                	mov    al,0xa
c000bd7a:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd7f:	ee                   	out    dx,al
c000bd80:	b0 20                	mov    al,0x20
c000bd82:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd87:	ee                   	out    dx,al
c000bd88:	5b                   	pop    ebx
c000bd89:	5e                   	pop    esi
c000bd8a:	c3                   	ret    

c000bd8b <hwTextMode_update(VgaText*)>:
c000bd8b:	c3                   	ret    

c000bd8c <hwTextMode_updateCursor(VgaText*)>:
c000bd8c:	56                   	push   esi
c000bd8d:	b9 19 00 00 00       	mov    ecx,0x19
c000bd92:	53                   	push   ebx
c000bd93:	be d4 03 00 00       	mov    esi,0x3d4
c000bd98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd9c:	89 f2                	mov    edx,esi
c000bd9e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bda4:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bdaa:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bdad:	c1 e1 04             	shl    ecx,0x4
c000bdb0:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bdb6:	b0 0f                	mov    al,0xf
c000bdb8:	ee                   	out    dx,al
c000bdb9:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bdbe:	88 c8                	mov    al,cl
c000bdc0:	89 da                	mov    edx,ebx
c000bdc2:	ee                   	out    dx,al
c000bdc3:	b0 0e                	mov    al,0xe
c000bdc5:	89 f2                	mov    edx,esi
c000bdc7:	ee                   	out    dx,al
c000bdc8:	89 c8                	mov    eax,ecx
c000bdca:	89 da                	mov    edx,ebx
c000bdcc:	66 c1 e8 08          	shr    ax,0x8
c000bdd0:	ee                   	out    dx,al
c000bdd1:	5b                   	pop    ebx
c000bdd2:	5e                   	pop    esi
c000bdd3:	c3                   	ret    

c000bdd4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000bdd4:	ba da 03 00 00       	mov    edx,0x3da
c000bdd9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bdde:	75 18                	jne    c000bdf8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bde0:	ec                   	in     al,dx
c000bde1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bde6:	b0 30                	mov    al,0x30
c000bde8:	89 ca                	mov    edx,ecx
c000bdea:	ee                   	out    dx,al
c000bdeb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdf0:	ec                   	in     al,dx
c000bdf1:	83 c8 08             	or     eax,0x8
c000bdf4:	89 ca                	mov    edx,ecx
c000bdf6:	ee                   	out    dx,al
c000bdf7:	c3                   	ret    
c000bdf8:	ec                   	in     al,dx
c000bdf9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdfe:	b0 30                	mov    al,0x30
c000be00:	89 ca                	mov    edx,ecx
c000be02:	ee                   	out    dx,al
c000be03:	ba c1 03 00 00       	mov    edx,0x3c1
c000be08:	ec                   	in     al,dx
c000be09:	83 e0 f7             	and    eax,0xfffffff7
c000be0c:	89 ca                	mov    edx,ecx
c000be0e:	ee                   	out    dx,al
c000be0f:	c3                   	ret    

c000be10 <hwTextMode_scrollScreen(VgaText*)>:
c000be10:	55                   	push   ebp
c000be11:	bd 02 00 00 00       	mov    ebp,0x2
c000be16:	57                   	push   edi
c000be17:	56                   	push   esi
c000be18:	53                   	push   ebx
c000be19:	83 ec 1c             	sub    esp,0x1c
c000be1c:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000be24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be28:	31 c0                	xor    eax,eax
c000be2a:	eb 0b                	jmp    c000be37 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000be2c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be32:	74 57                	je     c000be8b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000be34:	43                   	inc    ebx
c000be35:	89 f0                	mov    eax,esi
c000be37:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be3d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be43:	88 13                	mov    BYTE PTR [ebx],dl
c000be45:	8d 70 01             	lea    esi,[eax+0x1]
c000be48:	83 fd 18             	cmp    ebp,0x18
c000be4b:	75 df                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be4d:	a8 01                	test   al,0x1
c000be4f:	75 13                	jne    c000be64 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be51:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be54:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be5a:	75 d8                	jne    c000be34 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be5c:	83 c4 1c             	add    esp,0x1c
c000be5f:	5b                   	pop    ebx
c000be60:	5e                   	pop    esi
c000be61:	5f                   	pop    edi
c000be62:	5d                   	pop    ebp
c000be63:	c3                   	ret    
c000be64:	83 ec 08             	sub    esp,0x8
c000be67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be6b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be72:	50                   	push   eax
c000be73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be77:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be7e:	50                   	push   eax
c000be7f:	e8 e0 0a 00 00       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	88 07                	mov    BYTE PTR [edi],al
c000be89:	eb c9                	jmp    c000be54 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be8b:	45                   	inc    ebp
c000be8c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be94:	eb 8e                	jmp    c000be24 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be96 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be96:	56                   	push   esi
c000be97:	53                   	push   ebx
c000be98:	83 ec 0c             	sub    esp,0xc
c000be9b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000bea3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000bea8:	50                   	push   eax
c000bea9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000beae:	50                   	push   eax
c000beaf:	e8 b0 0a 00 00       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000beb4:	5a                   	pop    edx
c000beb5:	0f b6 c0             	movzx  eax,al
c000beb8:	59                   	pop    ecx
c000beb9:	50                   	push   eax
c000beba:	89 f0                	mov    eax,esi
c000bebc:	0f be f0             	movsx  esi,al
c000bebf:	56                   	push   esi
c000bec0:	e8 45 0b 00 00       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000bec5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bec9:	ba 19 00 00 00       	mov    edx,0x19
c000bece:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000bed4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bed7:	8d 14 92             	lea    edx,[edx+edx*4]
c000beda:	c1 e1 04             	shl    ecx,0x4
c000bedd:	c1 e2 04             	shl    edx,0x4
c000bee0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000bee4:	01 ca                	add    edx,ecx
c000bee6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beee:	83 c4 14             	add    esp,0x14
c000bef1:	5b                   	pop    ebx
c000bef2:	5e                   	pop    esi
c000bef3:	c3                   	ret    

c000bef4 <setupTextMode()>:
c000bef4:	c7 05 78 38 02 c0 d4 bd 00 c0 	mov    DWORD PTR ds:0xc0023878,0xc000bdd4
c000befe:	c7 05 64 38 02 c0 b0 bc 00 c0 	mov    DWORD PTR ds:0xc0023864,0xc000bcb0
c000bf08:	c7 05 60 38 02 c0 f5 bc 00 c0 	mov    DWORD PTR ds:0xc0023860,0xc000bcf5
c000bf12:	c7 05 6c 38 02 c0 10 be 00 c0 	mov    DWORD PTR ds:0xc002386c,0xc000be10
c000bf1c:	c7 05 74 38 02 c0 37 bd 00 c0 	mov    DWORD PTR ds:0xc0023874,0xc000bd37
c000bf26:	c7 05 68 38 02 c0 8b bd 00 c0 	mov    DWORD PTR ds:0xc0023868,0xc000bd8b
c000bf30:	c7 05 70 38 02 c0 8c bd 00 c0 	mov    DWORD PTR ds:0xc0023870,0xc000bd8c
c000bf3a:	c7 05 7c 38 02 c0 96 be 00 c0 	mov    DWORD PTR ds:0xc002387c,0xc000be96
c000bf44:	c3                   	ret    

c000bf45 <kernel_main>:
c000bf45:	57                   	push   edi
c000bf46:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf4b:	56                   	push   esi
c000bf4c:	31 f6                	xor    esi,esi
c000bf4e:	53                   	push   ebx
c000bf4f:	83 ec 10             	sub    esp,0x10
c000bf52:	e8 67 08 00 00       	call   c000c7be <installVgaTextImplementation()>
c000bf57:	e8 98 ff ff ff       	call   c000bef4 <setupTextMode()>
c000bf5c:	89 f0                	mov    eax,esi
c000bf5e:	89 fa                	mov    edx,edi
c000bf60:	ee                   	out    dx,al
c000bf61:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf66:	b0 80                	mov    al,0x80
c000bf68:	89 da                	mov    edx,ebx
c000bf6a:	ee                   	out    dx,al
c000bf6b:	b1 03                	mov    cl,0x3
c000bf6d:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf72:	88 c8                	mov    al,cl
c000bf74:	ee                   	out    dx,al
c000bf75:	89 f0                	mov    eax,esi
c000bf77:	89 fa                	mov    edx,edi
c000bf79:	ee                   	out    dx,al
c000bf7a:	88 c8                	mov    al,cl
c000bf7c:	89 da                	mov    edx,ebx
c000bf7e:	ee                   	out    dx,al
c000bf7f:	b0 c7                	mov    al,0xc7
c000bf81:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf86:	ee                   	out    dx,al
c000bf87:	b0 0b                	mov    al,0xb
c000bf89:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf8e:	ee                   	out    dx,al
c000bf8f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf94:	83 ec 0c             	sub    esp,0xc
c000bf97:	05 ff 0f 00 00       	add    eax,0xfff
c000bf9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfa1:	50                   	push   eax
c000bfa2:	e8 4d 03 00 00       	call   c000c2f4 <Phys::physicalMemorySetup(unsigned int)>
c000bfa7:	e8 18 1f 00 00       	call   c000dec4 <Virt::virtualMemorySetup()>
c000bfac:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bfbb:	75 0e                	jne    c000bfcb <kernel_main+0x86>
c000bfbd:	89 d8                	mov    eax,ebx
c000bfbf:	25 48 03 00 00       	and    eax,0x348
c000bfc4:	3d 00 03 00 00       	cmp    eax,0x300
c000bfc9:	74 10                	je     c000bfdb <kernel_main+0x96>
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	68 bb 18 02 c0       	push   0xc00218bb
c000bfd3:	e8 f0 8c 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000bfd8:	83 c4 10             	add    esp,0x10
c000bfdb:	83 ec 0c             	sub    esp,0xc
c000bfde:	89 1d e0 37 02 c0    	mov    DWORD PTR ds:0xc00237e0,ebx
c000bfe4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfe8:	53                   	push   ebx
c000bfe9:	e8 80 20 00 00       	call   c000e06e <VAS::VAS()>
c000bfee:	89 1d 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,ebx
c000bff4:	e8 27 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bff9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c000:	e8 3f 2f 00 00       	call   c000ef44 <operator new(unsigned long)>
c000c005:	89 04 24             	mov    DWORD PTR [esp],eax
c000c008:	89 c6                	mov    esi,eax
c000c00a:	e8 a1 ed ff ff       	call   c000adb0 <Computer::Computer()>
c000c00f:	6a 00                	push   0x0
c000c011:	89 35 c8 37 02 c0    	mov    DWORD PTR ds:0xc00237c8,esi
c000c017:	6a 00                	push   0x0
c000c019:	6a 00                	push   0x0
c000c01b:	56                   	push   esi
c000c01c:	e8 55 f2 ff ff       	call   c000b276 <Computer::open(int, int, void*)>
c000c021:	83 c4 14             	add    esp,0x14
c000c024:	53                   	push   ebx
c000c025:	e8 54 22 00 00       	call   c000e27e <VAS::~VAS()>
c000c02a:	c7 04 24 88 04 02 c0 	mov    DWORD PTR [esp],0xc0020488
c000c031:	e8 92 8c 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000c036:	83 c4 20             	add    esp,0x20
c000c039:	5b                   	pop    ebx
c000c03a:	5e                   	pop    esi
c000c03b:	5f                   	pop    edi
c000c03c:	c3                   	ret    

c000c03d <Phys::allocateDMA(unsigned long)>:
c000c03d:	55                   	push   ebp
c000c03e:	31 d2                	xor    edx,edx
c000c040:	57                   	push   edi
c000c041:	31 ed                	xor    ebp,ebp
c000c043:	56                   	push   esi
c000c044:	31 c9                	xor    ecx,ecx
c000c046:	53                   	push   ebx
c000c047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c04b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c051:	31 c0                	xor    eax,eax
c000c053:	c1 ee 0c             	shr    esi,0xc
c000c056:	eb 17                	jmp    c000c06f <Phys::allocateDMA(unsigned long)+0x32>
c000c058:	85 c9                	test   ecx,ecx
c000c05a:	75 04                	jne    c000c060 <Phys::allocateDMA(unsigned long)+0x23>
c000c05c:	89 d5                	mov    ebp,edx
c000c05e:	89 d0                	mov    eax,edx
c000c060:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c063:	39 de                	cmp    esi,ebx
c000c065:	74 20                	je     c000c087 <Phys::allocateDMA(unsigned long)+0x4a>
c000c067:	42                   	inc    edx
c000c068:	89 d9                	mov    ecx,ebx
c000c06a:	83 fa 2f             	cmp    edx,0x2f
c000c06d:	7f 11                	jg     c000c080 <Phys::allocateDMA(unsigned long)+0x43>
c000c06f:	80 ba 20 38 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc7e0],0x0
c000c076:	74 e0                	je     c000c058 <Phys::allocateDMA(unsigned long)+0x1b>
c000c078:	31 c9                	xor    ecx,ecx
c000c07a:	42                   	inc    edx
c000c07b:	83 fa 2f             	cmp    edx,0x2f
c000c07e:	7e ef                	jle    c000c06f <Phys::allocateDMA(unsigned long)+0x32>
c000c080:	5b                   	pop    ebx
c000c081:	31 c0                	xor    eax,eax
c000c083:	5e                   	pop    esi
c000c084:	5f                   	pop    edi
c000c085:	5d                   	pop    ebp
c000c086:	c3                   	ret    
c000c087:	8d 14 30             	lea    edx,[eax+esi*1]
c000c08a:	89 d7                	mov    edi,edx
c000c08c:	4f                   	dec    edi
c000c08d:	79 03                	jns    c000c092 <Phys::allocateDMA(unsigned long)+0x55>
c000c08f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c092:	c1 ff 04             	sar    edi,0x4
c000c095:	89 c2                	mov    edx,eax
c000c097:	c1 fa 04             	sar    edx,0x4
c000c09a:	39 fa                	cmp    edx,edi
c000c09c:	75 2f                	jne    c000c0cd <Phys::allocateDMA(unsigned long)+0x90>
c000c09e:	85 db                	test   ebx,ebx
c000c0a0:	74 1a                	je     c000c0bc <Phys::allocateDMA(unsigned long)+0x7f>
c000c0a2:	be 20 38 02 c0       	mov    esi,0xc0023820
c000c0a7:	8d 90 20 38 02 c0    	lea    edx,[eax-0x3ffdc7e0]
c000c0ad:	f7 d6                	not    esi
c000c0af:	29 c6                	sub    esi,eax
c000c0b1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c0b4:	42                   	inc    edx
c000c0b5:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c0b8:	39 d9                	cmp    ecx,ebx
c000c0ba:	7f f5                	jg     c000c0b1 <Phys::allocateDMA(unsigned long)+0x74>
c000c0bc:	85 ff                	test   edi,edi
c000c0be:	74 13                	je     c000c0d3 <Phys::allocateDMA(unsigned long)+0x96>
c000c0c0:	5b                   	pop    ebx
c000c0c1:	05 50 20 0c 00       	add    eax,0xc2050
c000c0c6:	5e                   	pop    esi
c000c0c7:	c1 e0 0c             	shl    eax,0xc
c000c0ca:	5f                   	pop    edi
c000c0cb:	5d                   	pop    ebp
c000c0cc:	c3                   	ret    
c000c0cd:	89 ea                	mov    edx,ebp
c000c0cf:	31 c9                	xor    ecx,ecx
c000c0d1:	eb a7                	jmp    c000c07a <Phys::allocateDMA(unsigned long)+0x3d>
c000c0d3:	5b                   	pop    ebx
c000c0d4:	c1 e0 0c             	shl    eax,0xc
c000c0d7:	5e                   	pop    esi
c000c0d8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0dd:	5f                   	pop    edi
c000c0de:	5d                   	pop    ebp
c000c0df:	c3                   	ret    

c000c0e0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0e8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0ee:	c1 e9 0c             	shr    ecx,0xc
c000c0f1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0f6:	76 25                	jbe    c000c11d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0f8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0fd:	c1 e8 0c             	shr    eax,0xc
c000c100:	8d 50 10             	lea    edx,[eax+0x10]
c000c103:	85 c9                	test   ecx,ecx
c000c105:	74 15                	je     c000c11c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c107:	8d 82 20 38 02 c0    	lea    eax,[edx-0x3ffdc7e0]
c000c10d:	8d 94 11 20 38 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc7e0]
c000c114:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c117:	40                   	inc    eax
c000c118:	39 d0                	cmp    eax,edx
c000c11a:	75 f8                	jne    c000c114 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c11c:	c3                   	ret    
c000c11d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c123:	c1 ea 0c             	shr    edx,0xc
c000c126:	eb db                	jmp    c000c103 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c128 <Phys::setPageState(unsigned long, bool)>:
c000c128:	56                   	push   esi
c000c129:	ba 01 00 00 00       	mov    edx,0x1
c000c12e:	53                   	push   ebx
c000c12f:	8b 35 f0 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022bf0
c000c135:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c139:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c13d:	89 c8                	mov    eax,ecx
c000c13f:	83 e1 07             	and    ecx,0x7
c000c142:	c1 e8 03             	shr    eax,0x3
c000c145:	d3 e3                	shl    ebx,cl
c000c147:	01 c6                	add    esi,eax
c000c149:	d3 e2                	shl    edx,cl
c000c14b:	f7 d2                	not    edx
c000c14d:	20 16                	and    BYTE PTR [esi],dl
c000c14f:	03 05 f0 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022bf0
c000c155:	08 18                	or     BYTE PTR [eax],bl
c000c157:	5b                   	pop    ebx
c000c158:	5e                   	pop    esi
c000c159:	c3                   	ret    

c000c15a <Phys::getPageState(unsigned long)>:
c000c15a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c15e:	8b 15 f0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022bf0
c000c164:	89 c8                	mov    eax,ecx
c000c166:	83 e1 07             	and    ecx,0x7
c000c169:	c1 e8 03             	shr    eax,0x3
c000c16c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c170:	d3 f8                	sar    eax,cl
c000c172:	83 e0 01             	and    eax,0x1
c000c175:	c3                   	ret    

c000c176 <Phys::freePage(unsigned long)>:
c000c176:	53                   	push   ebx
c000c177:	83 ec 08             	sub    esp,0x8
c000c17a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c17e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c184:	76 57                	jbe    c000c1dd <Phys::freePage(unsigned long)+0x67>
c000c186:	c1 eb 0c             	shr    ebx,0xc
c000c189:	53                   	push   ebx
c000c18a:	e8 cb ff ff ff       	call   c000c15a <Phys::getPageState(unsigned long)>
c000c18f:	5a                   	pop    edx
c000c190:	84 c0                	test   al,al
c000c192:	74 5b                	je     c000c1ef <Phys::freePage(unsigned long)+0x79>
c000c194:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c000c199:	48                   	dec    eax
c000c19a:	a3 0c 38 02 c0       	mov    ds:0xc002380c,eax
c000c19f:	8d 04 80             	lea    eax,[eax+eax*4]
c000c1a2:	8d 04 80             	lea    eax,[eax+eax*4]
c000c1a5:	c1 e0 02             	shl    eax,0x2
c000c1a8:	99                   	cdq    
c000c1a9:	f7 3d 10 38 02 c0    	idiv   DWORD PTR ds:0xc0023810
c000c1af:	39 05 08 38 02 c0    	cmp    DWORD PTR ds:0xc0023808,eax
c000c1b5:	75 13                	jne    c000c1ca <Phys::freePage(unsigned long)+0x54>
c000c1b7:	83 ec 08             	sub    esp,0x8
c000c1ba:	6a 00                	push   0x0
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 66 ff ff ff       	call   c000c128 <Phys::setPageState(unsigned long, bool)>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	83 c4 08             	add    esp,0x8
c000c1c8:	5b                   	pop    ebx
c000c1c9:	c3                   	ret    
c000c1ca:	83 ec 0c             	sub    esp,0xc
c000c1cd:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c1d2:	50                   	push   eax
c000c1d3:	e8 7a 09 00 00       	call   c000cb52 <VgaText::updateRAMUsageDisplay(int)>
c000c1d8:	83 c4 10             	add    esp,0x10
c000c1db:	eb da                	jmp    c000c1b7 <Phys::freePage(unsigned long)+0x41>
c000c1dd:	68 00 10 00 00       	push   0x1000
c000c1e2:	53                   	push   ebx
c000c1e3:	e8 f8 fe ff ff       	call   c000c0e0 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1e8:	59                   	pop    ecx
c000c1e9:	5b                   	pop    ebx
c000c1ea:	83 c4 08             	add    esp,0x8
c000c1ed:	5b                   	pop    ebx
c000c1ee:	c3                   	ret    
c000c1ef:	c7 44 24 10 a3 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc00204a3
c000c1f7:	83 c4 08             	add    esp,0x8
c000c1fa:	5b                   	pop    ebx
c000c1fb:	e9 c8 8a 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>

c000c200 <Phys::allocatePage()>:
c000c200:	56                   	push   esi
c000c201:	53                   	push   ebx
c000c202:	51                   	push   ecx
c000c203:	8b 35 00 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023800
c000c209:	89 f3                	mov    ebx,esi
c000c20b:	eb 0a                	jmp    c000c217 <Phys::allocatePage()+0x17>
c000c20d:	89 1d 00 38 02 c0    	mov    DWORD PTR ds:0xc0023800,ebx
c000c213:	39 de                	cmp    esi,ebx
c000c215:	74 24                	je     c000c23b <Phys::allocatePage()+0x3b>
c000c217:	53                   	push   ebx
c000c218:	e8 3d ff ff ff       	call   c000c15a <Phys::getPageState(unsigned long)>
c000c21d:	5a                   	pop    edx
c000c21e:	84 c0                	test   al,al
c000c220:	74 4e                	je     c000c270 <Phys::allocatePage()+0x70>
c000c222:	43                   	inc    ebx
c000c223:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c229:	75 e2                	jne    c000c20d <Phys::allocatePage()+0xd>
c000c22b:	31 db                	xor    ebx,ebx
c000c22d:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c000c237:	39 de                	cmp    esi,ebx
c000c239:	75 dc                	jne    c000c217 <Phys::allocatePage()+0x17>
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	68 00 10 00 00       	push   0x1000
c000c243:	e8 f5 fd ff ff       	call   c000c03d <Phys::allocateDMA(unsigned long)>
c000c248:	83 c4 10             	add    esp,0x10
c000c24b:	85 c0                	test   eax,eax
c000c24d:	75 56                	jne    c000c2a5 <Phys::allocatePage()+0xa5>
c000c24f:	83 ec 0c             	sub    esp,0xc
c000c252:	68 b9 04 02 c0       	push   0xc00204b9
c000c257:	e8 6c 8a 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000c25c:	83 c4 10             	add    esp,0x10
c000c25f:	8b 1d 00 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023800
c000c265:	53                   	push   ebx
c000c266:	e8 ef fe ff ff       	call   c000c15a <Phys::getPageState(unsigned long)>
c000c26b:	5a                   	pop    edx
c000c26c:	84 c0                	test   al,al
c000c26e:	75 b2                	jne    c000c222 <Phys::allocatePage()+0x22>
c000c270:	6a 01                	push   0x1
c000c272:	53                   	push   ebx
c000c273:	e8 b0 fe ff ff       	call   c000c128 <Phys::setPageState(unsigned long, bool)>
c000c278:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c000c27d:	59                   	pop    ecx
c000c27e:	40                   	inc    eax
c000c27f:	5b                   	pop    ebx
c000c280:	a3 0c 38 02 c0       	mov    ds:0xc002380c,eax
c000c285:	8d 04 80             	lea    eax,[eax+eax*4]
c000c288:	8d 04 80             	lea    eax,[eax+eax*4]
c000c28b:	c1 e0 02             	shl    eax,0x2
c000c28e:	99                   	cdq    
c000c28f:	f7 3d 10 38 02 c0    	idiv   DWORD PTR ds:0xc0023810
c000c295:	39 05 08 38 02 c0    	cmp    DWORD PTR ds:0xc0023808,eax
c000c29b:	75 0c                	jne    c000c2a9 <Phys::allocatePage()+0xa9>
c000c29d:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c000c2a2:	c1 e0 0c             	shl    eax,0xc
c000c2a5:	5a                   	pop    edx
c000c2a6:	5b                   	pop    ebx
c000c2a7:	5e                   	pop    esi
c000c2a8:	c3                   	ret    
c000c2a9:	83 ec 0c             	sub    esp,0xc
c000c2ac:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c2b1:	50                   	push   eax
c000c2b2:	e8 9b 08 00 00       	call   c000cb52 <VgaText::updateRAMUsageDisplay(int)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	eb e1                	jmp    c000c29d <Phys::allocatePage()+0x9d>

c000c2bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c2bc:	56                   	push   esi
c000c2bd:	53                   	push   ebx
c000c2be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2c2:	39 1d 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,ebx
c000c2c8:	73 06                	jae    c000c2d0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c2ca:	89 1d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ebx
c000c2d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2d4:	c1 eb 0c             	shr    ebx,0xc
c000c2d7:	c1 e8 0c             	shr    eax,0xc
c000c2da:	39 d8                	cmp    eax,ebx
c000c2dc:	73 13                	jae    c000c2f1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2de:	6a 00                	push   0x0
c000c2e0:	8d 70 01             	lea    esi,[eax+0x1]
c000c2e3:	50                   	push   eax
c000c2e4:	e8 3f fe ff ff       	call   c000c128 <Phys::setPageState(unsigned long, bool)>
c000c2e9:	5a                   	pop    edx
c000c2ea:	89 f0                	mov    eax,esi
c000c2ec:	59                   	pop    ecx
c000c2ed:	39 f3                	cmp    ebx,esi
c000c2ef:	75 ed                	jne    c000c2de <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2f1:	5b                   	pop    ebx
c000c2f2:	5e                   	pop    esi
c000c2f3:	c3                   	ret    

c000c2f4 <Phys::physicalMemorySetup(unsigned int)>:
c000c2f4:	55                   	push   ebp
c000c2f5:	57                   	push   edi
c000c2f6:	56                   	push   esi
c000c2f7:	53                   	push   ebx
c000c2f8:	31 db                	xor    ebx,ebx
c000c2fa:	83 ec 30             	sub    esp,0x30
c000c2fd:	6a 30                	push   0x30
c000c2ff:	6a 00                	push   0x0
c000c301:	68 20 38 02 c0       	push   0xc0023820
c000c306:	e8 fd 42 ff ff       	call   c0000608 <memset>
c000c30b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c30f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c314:	05 00 10 00 00       	add    eax,0x1000
c000c319:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c31d:	83 c4 10             	add    esp,0x10
c000c320:	83 ec 08             	sub    esp,0x8
c000c323:	6a 01                	push   0x1
c000c325:	53                   	push   ebx
c000c326:	43                   	inc    ebx
c000c327:	e8 fc fd ff ff       	call   c000c128 <Phys::setPageState(unsigned long, bool)>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c335:	75 e9                	jne    c000c320 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c337:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c33e:	66 85 c0             	test   ax,ax
c000c341:	0f 84 28 01 00 00    	je     c000c46f <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c351:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c356:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c35c:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c362:	89 f1                	mov    ecx,esi
c000c364:	89 fb                	mov    ebx,edi
c000c366:	01 c1                	add    ecx,eax
c000c368:	89 d5                	mov    ebp,edx
c000c36a:	11 d3                	adc    ebx,edx
c000c36c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c36f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c373:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c377:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c37d:	09 dd                	or     ebp,ebx
c000c37f:	0f 85 fa 00 00 00    	jne    c000c47f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c385:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c389:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c391:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c399:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c39d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c3a5:	eb 45                	jmp    c000c3ec <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c3a7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c3ab:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c3b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c3b4:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c3b8:	0f 84 c1 00 00 00    	je     c000c47f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3be:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3c2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c3c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c3c8:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c3cb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c3ce:	89 c1                	mov    ecx,eax
c000c3d0:	89 d3                	mov    ebx,edx
c000c3d2:	01 f1                	add    ecx,esi
c000c3d4:	11 fb                	adc    ebx,edi
c000c3d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3d9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3dd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3e0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3e4:	09 d3                	or     ebx,edx
c000c3e6:	0f 85 93 00 00 00    	jne    c000c47f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3ec:	49                   	dec    ecx
c000c3ed:	75 b8                	jne    c000c3a7 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3ef:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3f2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3f6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3fa:	39 e9                	cmp    ecx,ebp
c000c3fc:	89 d9                	mov    ecx,ebx
c000c3fe:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c402:	72 a3                	jb     c000c3a7 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c404:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c409:	39 f1                	cmp    ecx,esi
c000c40b:	b9 00 00 00 00       	mov    ecx,0x0
c000c410:	19 f9                	sbb    ecx,edi
c000c412:	73 93                	jae    c000c3a7 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c414:	39 e8                	cmp    eax,ebp
c000c416:	89 d1                	mov    ecx,edx
c000c418:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c41c:	73 13                	jae    c000c431 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c41e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c421:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c425:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c42d:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c431:	83 ec 08             	sub    esp,0x8
c000c434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c438:	50                   	push   eax
c000c439:	e8 7e fe ff ff       	call   c000c2bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c43e:	83 c4 0c             	add    esp,0xc
c000c441:	89 fa                	mov    edx,edi
c000c443:	89 f0                	mov    eax,esi
c000c445:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c449:	03 05 10 38 02 c0    	add    eax,DWORD PTR ds:0xc0023810
c000c44f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c456:	a3 10 38 02 c0       	mov    ds:0xc0023810,eax
c000c45b:	52                   	push   edx
c000c45c:	50                   	push   eax
c000c45d:	68 d5 04 02 c0       	push   0xc00204d5
c000c462:	e8 cc 2b 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000c467:	83 c4 10             	add    esp,0x10
c000c46a:	e9 38 ff ff ff       	jmp    c000c3a7 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c46f:	83 ec 0c             	sub    esp,0xc
c000c472:	68 c7 04 02 c0       	push   0xc00204c7
c000c477:	e8 4c 88 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000c47c:	83 c4 10             	add    esp,0x10
c000c47f:	bb 40 01 00 00       	mov    ebx,0x140
c000c484:	83 ec 08             	sub    esp,0x8
c000c487:	6a 00                	push   0x0
c000c489:	53                   	push   ebx
c000c48a:	43                   	inc    ebx
c000c48b:	e8 98 fc ff ff       	call   c000c128 <Phys::setPageState(unsigned long, bool)>
c000c490:	ff 05 10 38 02 c0    	inc    DWORD PTR ds:0xc0023810
c000c496:	83 c4 10             	add    esp,0x10
c000c499:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c49f:	75 e3                	jne    c000c484 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c4a1:	83 c4 2c             	add    esp,0x2c
c000c4a4:	5b                   	pop    ebx
c000c4a5:	5e                   	pop    esi
c000c4a6:	5f                   	pop    edi
c000c4a7:	5d                   	pop    ebp
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <Pipe::isAtty()>:
c000c4aa:	31 c0                	xor    eax,eax
c000c4ac:	c3                   	ret    
c000c4ad:	90                   	nop

c000c4ae <Pipe::~Pipe()>:
c000c4ae:	83 ec 0c             	sub    esp,0xc
c000c4b1:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	89 10                	mov    DWORD PTR [eax],edx
c000c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c0:	83 ec 0c             	sub    esp,0xc
c000c4c3:	50                   	push   eax
c000c4c4:	e8 5b 16 00 00       	call   c000db24 <UnixFile::~UnixFile()>
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	90                   	nop
c000c4cd:	83 c4 0c             	add    esp,0xc
c000c4d0:	c3                   	ret    
c000c4d1:	90                   	nop

c000c4d2 <Pipe::~Pipe()>:
c000c4d2:	83 ec 0c             	sub    esp,0xc
c000c4d5:	83 ec 0c             	sub    esp,0xc
c000c4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4dc:	e8 cd ff ff ff       	call   c000c4ae <Pipe::~Pipe()>
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	83 ec 08             	sub    esp,0x8
c000c4e7:	6a 20                	push   0x20
c000c4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ed:	e8 61 2a 00 00       	call   c000ef53 <operator delete(void*, unsigned long)>
c000c4f2:	83 c4 10             	add    esp,0x10
c000c4f5:	83 c4 0c             	add    esp,0xc
c000c4f8:	c3                   	ret    
c000c4f9:	90                   	nop

c000c4fa <Pipe::read(unsigned long long, void*, int*)>:
c000c4fa:	55                   	push   ebp
c000c4fb:	57                   	push   edi
c000c4fc:	56                   	push   esi
c000c4fd:	53                   	push   ebx
c000c4fe:	83 ec 1c             	sub    esp,0x1c
c000c501:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c505:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c509:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c50d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c510:	89 c8                	mov    eax,ecx
c000c512:	99                   	cdq    
c000c513:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c517:	74 19                	je     c000c532 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c519:	39 f9                	cmp    ecx,edi
c000c51b:	89 d1                	mov    ecx,edx
c000c51d:	19 f1                	sbb    ecx,esi
c000c51f:	73 11                	jae    c000c532 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c521:	e8 de b6 00 00       	call   c0017c04 <lockScheduler()>
c000c526:	e8 0d ba 00 00       	call   c0017f38 <schedule()>
c000c52b:	e8 d6 b6 00 00       	call   c0017c06 <unlockScheduler()>
c000c530:	eb db                	jmp    c000c50d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c532:	39 f8                	cmp    eax,edi
c000c534:	89 d1                	mov    ecx,edx
c000c536:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c53a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c53e:	19 f1                	sbb    ecx,esi
c000c540:	73 08                	jae    c000c54a <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c546:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c54a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c54d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c550:	29 c6                	sub    esi,eax
c000c552:	89 f1                	mov    ecx,esi
c000c554:	c1 f9 1f             	sar    ecx,0x1f
c000c557:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c55b:	89 ca                	mov    edx,ecx
c000c55d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c561:	19 d1                	sbb    ecx,edx
c000c563:	73 04                	jae    c000c569 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c565:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c569:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c56d:	89 fd                	mov    ebp,edi
c000c56f:	29 f5                	sub    ebp,esi
c000c571:	85 f6                	test   esi,esi
c000c573:	74 12                	je     c000c587 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c575:	52                   	push   edx
c000c576:	56                   	push   esi
c000c577:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c57a:	50                   	push   eax
c000c57b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c57f:	e8 4e 40 ff ff       	call   c00005d2 <memcpy>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	85 ed                	test   ebp,ebp
c000c589:	74 12                	je     c000c59d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c58b:	50                   	push   eax
c000c58c:	55                   	push   ebp
c000c58d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c590:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c594:	56                   	push   esi
c000c595:	e8 38 40 ff ff       	call   c00005d2 <memcpy>
c000c59a:	83 c4 10             	add    esp,0x10
c000c59d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c5a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5a3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c5a6:	99                   	cdq    
c000c5a7:	89 f7                	mov    edi,esi
c000c5a9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c5ad:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c5b1:	c1 ff 1f             	sar    edi,0x1f
c000c5b4:	57                   	push   edi
c000c5b5:	56                   	push   esi
c000c5b6:	52                   	push   edx
c000c5b7:	50                   	push   eax
c000c5b8:	e8 ef 22 01 00       	call   c001e8ac <__umoddi3>
c000c5bd:	83 c4 10             	add    esp,0x10
c000c5c0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5c3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c5c8:	75 10                	jne    c000c5da <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c5ca:	83 ec 0c             	sub    esp,0xc
c000c5cd:	68 f1 04 02 c0       	push   0xc00204f1
c000c5d2:	e8 f1 86 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5e2:	89 10                	mov    DWORD PTR [eax],edx
c000c5e4:	83 c4 1c             	add    esp,0x1c
c000c5e7:	31 c0                	xor    eax,eax
c000c5e9:	5b                   	pop    ebx
c000c5ea:	5e                   	pop    esi
c000c5eb:	5f                   	pop    edi
c000c5ec:	5d                   	pop    ebp
c000c5ed:	c3                   	ret    

c000c5ee <Pipe::write(unsigned long long, void*, int*)>:
c000c5ee:	55                   	push   ebp
c000c5ef:	57                   	push   edi
c000c5f0:	56                   	push   esi
c000c5f1:	53                   	push   ebx
c000c5f2:	83 ec 1c             	sub    esp,0x1c
c000c5f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c601:	89 04 24             	mov    DWORD PTR [esp],eax
c000c604:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c607:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c60a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c60e:	89 de                	mov    esi,ebx
c000c610:	89 df                	mov    edi,ebx
c000c612:	c1 ff 1f             	sar    edi,0x1f
c000c615:	01 c6                	add    esi,eax
c000c617:	89 c8                	mov    eax,ecx
c000c619:	11 d7                	adc    edi,edx
c000c61b:	99                   	cdq    
c000c61c:	39 f1                	cmp    ecx,esi
c000c61e:	89 d0                	mov    eax,edx
c000c620:	19 f8                	sbb    eax,edi
c000c622:	b8 01 00 00 00       	mov    eax,0x1
c000c627:	0f 82 80 00 00 00    	jb     c000c6ad <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c62d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c630:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c633:	01 d8                	add    eax,ebx
c000c635:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c639:	99                   	cdq    
c000c63a:	f7 f9                	idiv   ecx
c000c63c:	29 d1                	sub    ecx,edx
c000c63e:	89 d7                	mov    edi,edx
c000c640:	89 c8                	mov    eax,ecx
c000c642:	99                   	cdq    
c000c643:	39 ce                	cmp    esi,ecx
c000c645:	19 d3                	sbb    ebx,edx
c000c647:	bb 00 00 00 00       	mov    ebx,0x0
c000c64c:	72 04                	jb     c000c652 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c64e:	89 f3                	mov    ebx,esi
c000c650:	29 cb                	sub    ebx,ecx
c000c652:	89 f1                	mov    ecx,esi
c000c654:	29 d9                	sub    ecx,ebx
c000c656:	74 1a                	je     c000c672 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c658:	52                   	push   edx
c000c659:	51                   	push   ecx
c000c65a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c65e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c662:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c665:	57                   	push   edi
c000c666:	e8 67 3f ff ff       	call   c00005d2 <memcpy>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c672:	85 db                	test   ebx,ebx
c000c674:	74 12                	je     c000c688 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c676:	50                   	push   eax
c000c677:	53                   	push   ebx
c000c678:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c67c:	51                   	push   ecx
c000c67d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c680:	e8 4d 3f ff ff       	call   c00005d2 <memcpy>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c68b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c690:	75 10                	jne    c000c6a2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c692:	83 ec 0c             	sub    esp,0xc
c000c695:	68 0d 05 02 c0       	push   0xc002050d
c000c69a:	e8 29 86 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000c69f:	83 c4 10             	add    esp,0x10
c000c6a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6a6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c6a9:	89 38                	mov    DWORD PTR [eax],edi
c000c6ab:	31 c0                	xor    eax,eax
c000c6ad:	83 c4 1c             	add    esp,0x1c
c000c6b0:	5b                   	pop    ebx
c000c6b1:	5e                   	pop    esi
c000c6b2:	5f                   	pop    edi
c000c6b3:	5d                   	pop    ebp
c000c6b4:	c3                   	ret    
c000c6b5:	90                   	nop

c000c6b6 <Pipe::Pipe(int)>:
c000c6b6:	83 ec 0c             	sub    esp,0xc
c000c6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6bd:	83 ec 08             	sub    esp,0x8
c000c6c0:	6a 00                	push   0x0
c000c6c2:	50                   	push   eax
c000c6c3:	e8 ba 12 00 00       	call   c000d982 <UnixFile::UnixFile(int)>
c000c6c8:	83 c4 10             	add    esp,0x10
c000c6cb:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d4:	89 10                	mov    DWORD PTR [eax],edx
c000c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6e5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6fb:	83 ec 0c             	sub    esp,0xc
c000c6fe:	50                   	push   eax
c000c6ff:	e8 52 f5 ff ff       	call   c000bc56 <malloc>
c000c704:	83 c4 10             	add    esp,0x10
c000c707:	89 c2                	mov    edx,eax
c000c709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c70d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c714:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c718:	90                   	nop
c000c719:	83 c4 0c             	add    esp,0xc
c000c71c:	c3                   	ret    
c000c71d:	90                   	nop

c000c71e <VgaText::isAtty()>:
c000c71e:	b0 01                	mov    al,0x1
c000c720:	c3                   	ret    
c000c721:	90                   	nop

c000c722 <VgaText::~VgaText()>:
c000c722:	83 ec 0c             	sub    esp,0xc
c000c725:	ba f0 05 02 c0       	mov    edx,0xc00205f0
c000c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c72e:	89 10                	mov    DWORD PTR [eax],edx
c000c730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c734:	83 ec 0c             	sub    esp,0xc
c000c737:	50                   	push   eax
c000c738:	e8 e7 13 00 00       	call   c000db24 <UnixFile::~UnixFile()>
c000c73d:	83 c4 10             	add    esp,0x10
c000c740:	90                   	nop
c000c741:	83 c4 0c             	add    esp,0xc
c000c744:	c3                   	ret    
c000c745:	90                   	nop

c000c746 <VgaText::~VgaText()>:
c000c746:	83 ec 0c             	sub    esp,0xc
c000c749:	83 ec 0c             	sub    esp,0xc
c000c74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c750:	e8 cd ff ff ff       	call   c000c722 <VgaText::~VgaText()>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	83 ec 08             	sub    esp,0x8
c000c75b:	68 60 12 00 00       	push   0x1260
c000c760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c764:	e8 ea 27 00 00       	call   c000ef53 <operator delete(void*, unsigned long)>
c000c769:	83 c4 10             	add    esp,0x10
c000c76c:	83 c4 0c             	add    esp,0xc
c000c76f:	c3                   	ret    

c000c770 <VgaText::read(unsigned long long, void*, int*)>:
c000c770:	83 ec 10             	sub    esp,0x10
c000c773:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c777:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77f:	e8 f0 53 00 00       	call   c0011b74 <readKeyboard(VgaText*, char*, unsigned long)>
c000c784:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c788:	89 02                	mov    DWORD PTR [edx],eax
c000c78a:	31 c0                	xor    eax,eax
c000c78c:	83 c4 1c             	add    esp,0x1c
c000c78f:	c3                   	ret    

c000c790 <setTerminalScrollLock(bool)>:
c000c790:	c3                   	ret    

c000c791 <addToTerminalCycle(VgaText*)>:
c000c791:	8b 15 80 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023880
c000c797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c79b:	85 d2                	test   edx,edx
c000c79d:	75 0c                	jne    c000c7ab <addToTerminalCycle(VgaText*)+0x1a>
c000c79f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c7a5:	a3 80 38 02 c0       	mov    ds:0xc0023880,eax
c000c7aa:	c3                   	ret    
c000c7ab:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c7b1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c7b7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c7bd:	c3                   	ret    

c000c7be <installVgaTextImplementation()>:
c000c7be:	83 ec 10             	sub    esp,0x10
c000c7c1:	6a 20                	push   0x20
c000c7c3:	6a 00                	push   0x0
c000c7c5:	68 60 38 02 c0       	push   0xc0023860
c000c7ca:	e8 39 3e ff ff       	call   c0000608 <memset>
c000c7cf:	83 c4 1c             	add    esp,0x1c
c000c7d2:	c3                   	ret    

c000c7d3 <scrollTerminalScrollLock(int)>:
c000c7d3:	c3                   	ret    

c000c7d4 <VgaText::load()>:
c000c7d4:	53                   	push   ebx
c000c7d5:	31 c0                	xor    eax,eax
c000c7d7:	83 ec 58             	sub    esp,0x58
c000c7da:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7de:	89 e2                	mov    edx,esp
c000c7e0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7e4:	40                   	inc    eax
c000c7e5:	83 f8 50             	cmp    eax,0x50
c000c7e8:	75 f6                	jne    c000c7e0 <VgaText::load()+0xc>
c000c7ea:	31 c0                	xor    eax,eax
c000c7ec:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7f3:	84 c9                	test   cl,cl
c000c7f5:	74 06                	je     c000c7fd <VgaText::load()+0x29>
c000c7f7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7fa:	40                   	inc    eax
c000c7fb:	eb ef                	jmp    c000c7ec <VgaText::load()+0x18>
c000c7fd:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c803:	85 c0                	test   eax,eax
c000c805:	74 09                	je     c000c810 <VgaText::load()+0x3c>
c000c807:	51                   	push   ecx
c000c808:	51                   	push   ecx
c000c809:	52                   	push   edx
c000c80a:	53                   	push   ebx
c000c80b:	ff d0                	call   eax
c000c80d:	83 c4 10             	add    esp,0x10
c000c810:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c816:	85 c0                	test   eax,eax
c000c818:	74 09                	je     c000c823 <VgaText::load()+0x4f>
c000c81a:	83 ec 0c             	sub    esp,0xc
c000c81d:	53                   	push   ebx
c000c81e:	ff d0                	call   eax
c000c820:	83 c4 10             	add    esp,0x10
c000c823:	83 c4 58             	add    esp,0x58
c000c826:	5b                   	pop    ebx
c000c827:	c3                   	ret    

c000c828 <VgaText::updateCursor()>:
c000c828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c82c:	39 05 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,eax
c000c832:	75 0c                	jne    c000c840 <VgaText::updateCursor()+0x18>
c000c834:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c83a:	85 c0                	test   eax,eax
c000c83c:	74 02                	je     c000c840 <VgaText::updateCursor()+0x18>
c000c83e:	ff e0                	jmp    eax
c000c840:	c3                   	ret    
c000c841:	90                   	nop

c000c842 <VgaText::showCursor(bool)>:
c000c842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c84a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c850:	c3                   	ret    
c000c851:	90                   	nop

c000c852 <VgaText::disableBlink(bool)>:
c000c852:	56                   	push   esi
c000c853:	53                   	push   ebx
c000c854:	51                   	push   ecx
c000c855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c859:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c85d:	39 1d 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,ebx
c000c863:	75 18                	jne    c000c87d <VgaText::disableBlink(bool)+0x2b>
c000c865:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c86b:	85 c0                	test   eax,eax
c000c86d:	74 0e                	je     c000c87d <VgaText::disableBlink(bool)+0x2b>
c000c86f:	89 f1                	mov    ecx,esi
c000c871:	52                   	push   edx
c000c872:	52                   	push   edx
c000c873:	0f b6 d1             	movzx  edx,cl
c000c876:	52                   	push   edx
c000c877:	53                   	push   ebx
c000c878:	ff d0                	call   eax
c000c87a:	83 c4 10             	add    esp,0x10
c000c87d:	89 f0                	mov    eax,esi
c000c87f:	83 f0 01             	xor    eax,0x1
c000c882:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c888:	58                   	pop    eax
c000c889:	5b                   	pop    ebx
c000c88a:	5e                   	pop    esi
c000c88b:	c3                   	ret    

c000c88c <VgaText::doANSI_SGR(int)>:
c000c88c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c894:	85 d2                	test   edx,edx
c000c896:	75 14                	jne    c000c8ac <VgaText::doANSI_SGR(int)+0x20>
c000c898:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c89e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8a4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c8aa:	eb 65                	jmp    c000c911 <VgaText::doANSI_SGR(int)+0x85>
c000c8ac:	83 fa 07             	cmp    edx,0x7
c000c8af:	75 14                	jne    c000c8c5 <VgaText::doANSI_SGR(int)+0x39>
c000c8b1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c8b7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c8bd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c8c3:	eb 4c                	jmp    c000c911 <VgaText::doANSI_SGR(int)+0x85>
c000c8c5:	83 fa 1b             	cmp    edx,0x1b
c000c8c8:	74 ce                	je     c000c898 <VgaText::doANSI_SGR(int)+0xc>
c000c8ca:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 09                	ja     c000c8db <VgaText::doANSI_SGR(int)+0x4f>
c000c8d2:	8b 14 8d 20 2c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd3e0]
c000c8d9:	eb 20                	jmp    c000c8fb <VgaText::doANSI_SGR(int)+0x6f>
c000c8db:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8de:	83 f9 07             	cmp    ecx,0x7
c000c8e1:	77 09                	ja     c000c8ec <VgaText::doANSI_SGR(int)+0x60>
c000c8e3:	8b 14 8d 20 2c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd3e0]
c000c8ea:	eb 25                	jmp    c000c911 <VgaText::doANSI_SGR(int)+0x85>
c000c8ec:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8ef:	83 f9 07             	cmp    ecx,0x7
c000c8f2:	77 0e                	ja     c000c902 <VgaText::doANSI_SGR(int)+0x76>
c000c8f4:	8b 14 95 d8 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd528]
c000c8fb:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c901:	c3                   	ret    
c000c902:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c905:	83 f9 07             	cmp    ecx,0x7
c000c908:	77 0d                	ja     c000c917 <VgaText::doANSI_SGR(int)+0x8b>
c000c90a:	8b 14 95 b0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd550]
c000c911:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c917:	c3                   	ret    

c000c918 <VgaText::setDefaultBgColour(VgaColour)>:
c000c918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c91c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c920:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c926:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <VgaText::setDefaultFgColour(VgaColour)>:
c000c92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c936:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c93c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c944:	53                   	push   ebx
c000c945:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c949:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c94d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c951:	51                   	push   ecx
c000c952:	e8 c1 ff ff ff       	call   c000c918 <VgaText::setDefaultBgColour(VgaColour)>
c000c957:	58                   	pop    eax
c000c958:	5a                   	pop    edx
c000c959:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c95d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c961:	5b                   	pop    ebx
c000c962:	eb ca                	jmp    c000c92e <VgaText::setDefaultFgColour(VgaColour)>

c000c964 <VgaText::combineColours(unsigned char, unsigned char)>:
c000c964:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c968:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c96d:	83 e0 0f             	and    eax,0xf
c000c970:	c1 e2 04             	shl    edx,0x4
c000c973:	09 d0                	or     eax,edx
c000c975:	c3                   	ret    

c000c976 <VgaText::scrollScreen()>:
c000c976:	57                   	push   edi
c000c977:	56                   	push   esi
c000c978:	be 01 00 00 00       	mov    esi,0x1
c000c97d:	53                   	push   ebx
c000c97e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c982:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c988:	31 ff                	xor    edi,edi
c000c98a:	01 d9                	add    ecx,ebx
c000c98c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c98f:	83 fe 17             	cmp    esi,0x17
c000c992:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c998:	75 28                	jne    c000c9c2 <VgaText::scrollScreen()+0x4c>
c000c99a:	f7 c7 01 00 00 00    	test   edi,0x1
c000c9a0:	74 1c                	je     c000c9be <VgaText::scrollScreen()+0x48>
c000c9a2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c9a9:	50                   	push   eax
c000c9aa:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c9b1:	50                   	push   eax
c000c9b2:	e8 ad ff ff ff       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000c9b7:	5a                   	pop    edx
c000c9b8:	5a                   	pop    edx
c000c9b9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c9bc:	eb 04                	jmp    c000c9c2 <VgaText::scrollScreen()+0x4c>
c000c9be:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c9c2:	47                   	inc    edi
c000c9c3:	41                   	inc    ecx
c000c9c4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c9ca:	75 c0                	jne    c000c98c <VgaText::scrollScreen()+0x16>
c000c9cc:	46                   	inc    esi
c000c9cd:	83 fe 18             	cmp    esi,0x18
c000c9d0:	75 b0                	jne    c000c982 <VgaText::scrollScreen()+0xc>
c000c9d2:	39 1d 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,ebx
c000c9d8:	75 24                	jne    c000c9fe <VgaText::scrollScreen()+0x88>
c000c9da:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9e1:	74 08                	je     c000c9eb <VgaText::scrollScreen()+0x75>
c000c9e3:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9e9:	eb 13                	jmp    c000c9fe <VgaText::scrollScreen()+0x88>
c000c9eb:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 09                	je     c000c9fe <VgaText::scrollScreen()+0x88>
c000c9f5:	83 ec 0c             	sub    esp,0xc
c000c9f8:	53                   	push   ebx
c000c9f9:	ff d0                	call   eax
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ca02:	5b                   	pop    ebx
c000ca03:	5e                   	pop    esi
c000ca04:	5f                   	pop    edi
c000ca05:	e9 1e fe ff ff       	jmp    c000c828 <VgaText::updateCursor()>

c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ca0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ca0f:	c1 e0 08             	shl    eax,0x8
c000ca12:	89 c2                	mov    edx,eax
c000ca14:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ca19:	09 d0                	or     eax,edx
c000ca1b:	c3                   	ret    

c000ca1c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ca1c:	53                   	push   ebx
c000ca1d:	83 ec 08             	sub    esp,0x8
c000ca20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca24:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca29:	50                   	push   eax
c000ca2a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca2f:	50                   	push   eax
c000ca30:	e8 2f ff ff ff       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000ca35:	5a                   	pop    edx
c000ca36:	0f b6 c0             	movzx  eax,al
c000ca39:	5b                   	pop    ebx
c000ca3a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca3f:	50                   	push   eax
c000ca40:	53                   	push   ebx
c000ca41:	e8 c4 ff ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000ca46:	5a                   	pop    edx
c000ca47:	5a                   	pop    edx
c000ca48:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca4e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca52:	0f b7 d2             	movzx  edx,dx
c000ca55:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca5a:	39 0d 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,ecx
c000ca60:	75 14                	jne    c000ca76 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca62:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca68:	85 c0                	test   eax,eax
c000ca6a:	74 0a                	je     c000ca76 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca6c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca70:	83 c4 08             	add    esp,0x8
c000ca73:	5b                   	pop    ebx
c000ca74:	ff e0                	jmp    eax
c000ca76:	83 c4 08             	add    esp,0x8
c000ca79:	5b                   	pop    ebx
c000ca7a:	c3                   	ret    
c000ca7b:	90                   	nop

c000ca7c <VgaText::getCursorX()>:
c000ca7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca80:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca86:	c3                   	ret    
c000ca87:	90                   	nop

c000ca88 <VgaText::getCursorY()>:
c000ca88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca8c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca92:	c3                   	ret    
c000ca93:	90                   	nop

c000ca94 <VgaText::setCursor(int, int)>:
c000ca94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca9c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000caa2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caa6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000caac:	e9 77 fd ff ff       	jmp    c000c828 <VgaText::updateCursor()>
c000cab1:	90                   	nop

c000cab2 <VgaText::setCursorX(int)>:
c000cab2:	83 ec 10             	sub    esp,0x10
c000cab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cabf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac3:	50                   	push   eax
c000cac4:	e8 cb ff ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000cac9:	83 c4 1c             	add    esp,0x1c
c000cacc:	c3                   	ret    
c000cacd:	90                   	nop

c000cace <VgaText::setCursorY(int)>:
c000cace:	83 ec 10             	sub    esp,0x10
c000cad1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cad9:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cadf:	50                   	push   eax
c000cae0:	e8 af ff ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000cae5:	83 c4 1c             	add    esp,0x1c
c000cae8:	c3                   	ret    
c000cae9:	90                   	nop

c000caea <VgaText::incrementCursor(bool)>:
c000caea:	56                   	push   esi
c000caeb:	53                   	push   ebx
c000caec:	51                   	push   ecx
c000caed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000caf5:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cafb:	40                   	inc    eax
c000cafc:	83 f8 50             	cmp    eax,0x50
c000caff:	74 08                	je     c000cb09 <VgaText::incrementCursor(bool)+0x1f>
c000cb01:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cb07:	eb 33                	jmp    c000cb3c <VgaText::incrementCursor(bool)+0x52>
c000cb09:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cb0f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cb19:	8d 50 01             	lea    edx,[eax+0x1]
c000cb1c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cb22:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cb28:	75 12                	jne    c000cb3c <VgaText::incrementCursor(bool)+0x52>
c000cb2a:	83 ec 0c             	sub    esp,0xc
c000cb2d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cb33:	53                   	push   ebx
c000cb34:	e8 3d fe ff ff       	call   c000c976 <VgaText::scrollScreen()>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	89 f0                	mov    eax,esi
c000cb3e:	84 c0                	test   al,al
c000cb40:	74 0c                	je     c000cb4e <VgaText::incrementCursor(bool)+0x64>
c000cb42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb46:	5a                   	pop    edx
c000cb47:	5b                   	pop    ebx
c000cb48:	5e                   	pop    esi
c000cb49:	e9 da fc ff ff       	jmp    c000c828 <VgaText::updateCursor()>
c000cb4e:	58                   	pop    eax
c000cb4f:	5b                   	pop    ebx
c000cb50:	5e                   	pop    esi
c000cb51:	c3                   	ret    

c000cb52 <VgaText::updateRAMUsageDisplay(int)>:
c000cb52:	53                   	push   ebx
c000cb53:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb58:	6a 0f                	push   0xf
c000cb5a:	6a 00                	push   0x0
c000cb5c:	e8 03 fe ff ff       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000cb61:	5a                   	pop    edx
c000cb62:	59                   	pop    ecx
c000cb63:	0f b6 c8             	movzx  ecx,al
c000cb66:	51                   	push   ecx
c000cb67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb6b:	99                   	cdq    
c000cb6c:	f7 fb                	idiv   ebx
c000cb6e:	89 d3                	mov    ebx,edx
c000cb70:	83 c0 30             	add    eax,0x30
c000cb73:	83 c3 30             	add    ebx,0x30
c000cb76:	0f be c0             	movsx  eax,al
c000cb79:	0f b6 db             	movzx  ebx,bl
c000cb7c:	50                   	push   eax
c000cb7d:	e8 88 fe ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cb82:	5a                   	pop    edx
c000cb83:	5a                   	pop    edx
c000cb84:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb8a:	51                   	push   ecx
c000cb8b:	53                   	push   ebx
c000cb8c:	e8 79 fe ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cb91:	5b                   	pop    ebx
c000cb92:	5a                   	pop    edx
c000cb93:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb99:	51                   	push   ecx
c000cb9a:	6a 25                	push   0x25
c000cb9c:	e8 69 fe ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cba1:	59                   	pop    ecx
c000cba2:	5b                   	pop    ebx
c000cba3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cba9:	5b                   	pop    ebx
c000cbaa:	c3                   	ret    
c000cbab:	90                   	nop

c000cbac <VgaText::updateDiskUsage()>:
c000cbac:	55                   	push   ebp
c000cbad:	bd 10 27 00 00       	mov    ebp,0x2710
c000cbb2:	57                   	push   edi
c000cbb3:	56                   	push   esi
c000cbb4:	53                   	push   ebx
c000cbb5:	6a 0f                	push   0xf
c000cbb7:	6a 00                	push   0x0
c000cbb9:	e8 a6 fd ff ff       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000cbbe:	5a                   	pop    edx
c000cbbf:	0f b6 d8             	movzx  ebx,al
c000cbc2:	59                   	pop    ecx
c000cbc3:	a1 64 55 02 c0       	mov    eax,ds:0xc0025564
c000cbc8:	53                   	push   ebx
c000cbc9:	b9 0a 00 00 00       	mov    ecx,0xa
c000cbce:	99                   	cdq    
c000cbcf:	f7 fd                	idiv   ebp
c000cbd1:	99                   	cdq    
c000cbd2:	f7 f9                	idiv   ecx
c000cbd4:	8d 42 30             	lea    eax,[edx+0x30]
c000cbd7:	0f b6 c0             	movzx  eax,al
c000cbda:	50                   	push   eax
c000cbdb:	e8 2a fe ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cbe0:	5e                   	pop    esi
c000cbe1:	5f                   	pop    edi
c000cbe2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbe8:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbed:	53                   	push   ebx
c000cbee:	a1 64 55 02 c0       	mov    eax,ds:0xc0025564
c000cbf3:	99                   	cdq    
c000cbf4:	f7 ff                	idiv   edi
c000cbf6:	99                   	cdq    
c000cbf7:	f7 f9                	idiv   ecx
c000cbf9:	8d 42 30             	lea    eax,[edx+0x30]
c000cbfc:	0f b6 c0             	movzx  eax,al
c000cbff:	50                   	push   eax
c000cc00:	e8 05 fe ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cc05:	5a                   	pop    edx
c000cc06:	5e                   	pop    esi
c000cc07:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cc0d:	be 64 00 00 00       	mov    esi,0x64
c000cc12:	53                   	push   ebx
c000cc13:	a1 64 55 02 c0       	mov    eax,ds:0xc0025564
c000cc18:	99                   	cdq    
c000cc19:	f7 fe                	idiv   esi
c000cc1b:	99                   	cdq    
c000cc1c:	f7 f9                	idiv   ecx
c000cc1e:	8d 42 30             	lea    eax,[edx+0x30]
c000cc21:	0f b6 c0             	movzx  eax,al
c000cc24:	50                   	push   eax
c000cc25:	e8 e0 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2a:	5a                   	pop    edx
c000cc2b:	5a                   	pop    edx
c000cc2c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cc32:	53                   	push   ebx
c000cc33:	a1 64 55 02 c0       	mov    eax,ds:0xc0025564
c000cc38:	99                   	cdq    
c000cc39:	f7 f9                	idiv   ecx
c000cc3b:	99                   	cdq    
c000cc3c:	f7 f9                	idiv   ecx
c000cc3e:	8d 42 30             	lea    eax,[edx+0x30]
c000cc41:	0f b6 c0             	movzx  eax,al
c000cc44:	50                   	push   eax
c000cc45:	e8 c0 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4a:	5a                   	pop    edx
c000cc4b:	5a                   	pop    edx
c000cc4c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc52:	53                   	push   ebx
c000cc53:	a1 64 55 02 c0       	mov    eax,ds:0xc0025564
c000cc58:	99                   	cdq    
c000cc59:	f7 f9                	idiv   ecx
c000cc5b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc5e:	0f b6 c0             	movzx  eax,al
c000cc61:	50                   	push   eax
c000cc62:	e8 a3 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cc67:	5a                   	pop    edx
c000cc68:	5a                   	pop    edx
c000cc69:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc6f:	53                   	push   ebx
c000cc70:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c000cc75:	99                   	cdq    
c000cc76:	f7 fd                	idiv   ebp
c000cc78:	99                   	cdq    
c000cc79:	f7 f9                	idiv   ecx
c000cc7b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc7e:	0f b6 c0             	movzx  eax,al
c000cc81:	50                   	push   eax
c000cc82:	e8 83 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cc87:	5d                   	pop    ebp
c000cc88:	5a                   	pop    edx
c000cc89:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc8f:	53                   	push   ebx
c000cc90:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c000cc95:	99                   	cdq    
c000cc96:	f7 ff                	idiv   edi
c000cc98:	99                   	cdq    
c000cc99:	f7 f9                	idiv   ecx
c000cc9b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc9e:	0f b6 c0             	movzx  eax,al
c000cca1:	50                   	push   eax
c000cca2:	e8 63 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cca7:	5f                   	pop    edi
c000cca8:	5d                   	pop    ebp
c000cca9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000ccaf:	53                   	push   ebx
c000ccb0:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c000ccb5:	99                   	cdq    
c000ccb6:	f7 fe                	idiv   esi
c000ccb8:	99                   	cdq    
c000ccb9:	f7 f9                	idiv   ecx
c000ccbb:	8d 42 30             	lea    eax,[edx+0x30]
c000ccbe:	0f b6 c0             	movzx  eax,al
c000ccc1:	50                   	push   eax
c000ccc2:	e8 43 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000ccc7:	5a                   	pop    edx
c000ccc8:	5e                   	pop    esi
c000ccc9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cccf:	53                   	push   ebx
c000ccd0:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c000ccd5:	99                   	cdq    
c000ccd6:	f7 f9                	idiv   ecx
c000ccd8:	99                   	cdq    
c000ccd9:	f7 f9                	idiv   ecx
c000ccdb:	8d 42 30             	lea    eax,[edx+0x30]
c000ccde:	0f b6 c0             	movzx  eax,al
c000cce1:	50                   	push   eax
c000cce2:	e8 23 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cce7:	5f                   	pop    edi
c000cce8:	5d                   	pop    ebp
c000cce9:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccef:	53                   	push   ebx
c000ccf0:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c000ccf5:	99                   	cdq    
c000ccf6:	f7 f9                	idiv   ecx
c000ccf8:	83 c2 30             	add    edx,0x30
c000ccfb:	0f b6 d2             	movzx  edx,dl
c000ccfe:	52                   	push   edx
c000ccff:	e8 06 fd ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000cd04:	5a                   	pop    edx
c000cd05:	59                   	pop    ecx
c000cd06:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000cd0c:	5b                   	pop    ebx
c000cd0d:	5e                   	pop    esi
c000cd0e:	5f                   	pop    edi
c000cd0f:	5d                   	pop    ebp
c000cd10:	c3                   	ret    
c000cd11:	90                   	nop

c000cd12 <VgaText::updateTitle()>:
c000cd12:	53                   	push   ebx
c000cd13:	31 c0                	xor    eax,eax
c000cd15:	83 ec 58             	sub    esp,0x58
c000cd18:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cd1c:	89 e1                	mov    ecx,esp
c000cd1e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000cd22:	40                   	inc    eax
c000cd23:	83 f8 50             	cmp    eax,0x50
c000cd26:	75 f6                	jne    c000cd1e <VgaText::updateTitle()+0xc>
c000cd28:	31 c0                	xor    eax,eax
c000cd2a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cd31:	84 db                	test   bl,bl
c000cd33:	74 06                	je     c000cd3b <VgaText::updateTitle()+0x29>
c000cd35:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd38:	40                   	inc    eax
c000cd39:	eb ef                	jmp    c000cd2a <VgaText::updateTitle()+0x18>
c000cd3b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd41:	85 c0                	test   eax,eax
c000cd43:	74 09                	je     c000cd4e <VgaText::updateTitle()+0x3c>
c000cd45:	53                   	push   ebx
c000cd46:	53                   	push   ebx
c000cd47:	51                   	push   ecx
c000cd48:	52                   	push   edx
c000cd49:	ff d0                	call   eax
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	e8 59 fe ff ff       	call   c000cbac <VgaText::updateDiskUsage()>
c000cd53:	83 c4 58             	add    esp,0x58
c000cd56:	5b                   	pop    ebx
c000cd57:	c3                   	ret    

c000cd58 <VgaText::setTitleTextColour(VgaColour)>:
c000cd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd60:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd66:	eb aa                	jmp    c000cd12 <VgaText::updateTitle()>

c000cd68 <VgaText::setTitleColour(VgaColour)>:
c000cd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd70:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd76:	eb 9a                	jmp    c000cd12 <VgaText::updateTitle()>

c000cd78 <VgaText::setTitle(char*)>:
c000cd78:	53                   	push   ebx
c000cd79:	83 ec 10             	sub    esp,0x10
c000cd7c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd84:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd8a:	50                   	push   eax
c000cd8b:	e8 17 39 ff ff       	call   c00006a7 <strcpy>
c000cd90:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd94:	83 c4 18             	add    esp,0x18
c000cd97:	5b                   	pop    ebx
c000cd98:	e9 75 ff ff ff       	jmp    c000cd12 <VgaText::updateTitle()>
c000cd9d:	90                   	nop

c000cd9e <VgaText::decrementCursor(bool)>:
c000cd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cda6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cdac:	85 c0                	test   eax,eax
c000cdae:	74 07                	je     c000cdb7 <VgaText::decrementCursor(bool)+0x19>
c000cdb0:	48                   	dec    eax
c000cdb1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cdb7:	84 c9                	test   cl,cl
c000cdb9:	74 09                	je     c000cdc4 <VgaText::decrementCursor(bool)+0x26>
c000cdbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdbf:	e9 64 fa ff ff       	jmp    c000c828 <VgaText::updateCursor()>
c000cdc4:	c3                   	ret    
c000cdc5:	90                   	nop

c000cdc6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cdc6:	53                   	push   ebx
c000cdc7:	83 ec 08             	sub    esp,0x8
c000cdca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cdce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cdda:	3c 07                	cmp    al,0x7
c000cddc:	75 2a                	jne    c000ce08 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cdde:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c000cde3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdeb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdf3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdff:	83 c4 08             	add    esp,0x8
c000ce02:	5b                   	pop    ebx
c000ce03:	e9 16 30 00 00       	jmp    c000fe1e <Buzzer::beep(int, int, bool)>
c000ce08:	3c 0d                	cmp    al,0xd
c000ce0a:	75 0c                	jne    c000ce18 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000ce0c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce16:	eb 3b                	jmp    c000ce53 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000ce18:	3c 0a                	cmp    al,0xa
c000ce1a:	75 40                	jne    c000ce5c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000ce1c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce22:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ce2f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ce35:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce3b:	75 12                	jne    c000ce4f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce3d:	83 ec 0c             	sub    esp,0xc
c000ce40:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce46:	53                   	push   ebx
c000ce47:	e8 2a fb ff ff       	call   c000c976 <VgaText::scrollScreen()>
c000ce4c:	83 c4 10             	add    esp,0x10
c000ce4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce53:	83 c4 08             	add    esp,0x8
c000ce56:	5b                   	pop    ebx
c000ce57:	e9 cc f9 ff ff       	jmp    c000c828 <VgaText::updateCursor()>
c000ce5c:	3c 08                	cmp    al,0x8
c000ce5e:	75 31                	jne    c000ce91 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce60:	50                   	push   eax
c000ce61:	50                   	push   eax
c000ce62:	6a 01                	push   0x1
c000ce64:	53                   	push   ebx
c000ce65:	e8 34 ff ff ff       	call   c000cd9e <VgaText::decrementCursor(bool)>
c000ce6a:	5a                   	pop    edx
c000ce6b:	59                   	pop    ecx
c000ce6c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce72:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce78:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce7e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce84:	6a 20                	push   0x20
c000ce86:	53                   	push   ebx
c000ce87:	e8 90 fb ff ff       	call   c000ca1c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce8c:	83 c4 28             	add    esp,0x28
c000ce8f:	5b                   	pop    ebx
c000ce90:	c3                   	ret    
c000ce91:	83 ec 08             	sub    esp,0x8
c000ce94:	0f be c0             	movsx  eax,al
c000ce97:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce9d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cea3:	51                   	push   ecx
c000cea4:	52                   	push   edx
c000cea5:	50                   	push   eax
c000cea6:	53                   	push   ebx
c000cea7:	e8 70 fb ff ff       	call   c000ca1c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ceac:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ceb0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ceb8:	83 c4 28             	add    esp,0x28
c000cebb:	5b                   	pop    ebx
c000cebc:	e9 29 fc ff ff       	jmp    c000caea <VgaText::incrementCursor(bool)>
c000cec1:	90                   	nop

c000cec2 <VgaText::isShowingCursor()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000cecc:	c3                   	ret    
c000cecd:	90                   	nop

c000cece <VgaText::isBlinkDisabled()>:
c000cece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000ced8:	83 f0 01             	xor    eax,0x1
c000cedb:	c3                   	ret    

c000cedc <VgaText::setCursorHeight(int)>:
c000cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cee4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceea:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cef5:	e9 48 f9 ff ff       	jmp    c000c842 <VgaText::showCursor(bool)>

c000cefa <VgaText::getCursorHeight()>:
c000cefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cefe:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cf04:	c3                   	ret    

c000cf05 <setActiveTerminal(VgaText*)>:
c000cf05:	53                   	push   ebx
c000cf06:	83 ec 08             	sub    esp,0x8
c000cf09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf0d:	85 db                	test   ebx,ebx
c000cf0f:	75 11                	jne    c000cf22 <setActiveTerminal(VgaText*)+0x1d>
c000cf11:	c7 44 24 10 48 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020548
c000cf19:	83 c4 08             	add    esp,0x8
c000cf1c:	5b                   	pop    ebx
c000cf1d:	e9 a6 7d 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c000cf22:	50                   	push   eax
c000cf23:	50                   	push   eax
c000cf24:	53                   	push   ebx
c000cf25:	68 56 05 02 c0       	push   0xc0020556
c000cf2a:	e8 04 21 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000cf2f:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c000cf34:	83 c4 10             	add    esp,0x10
c000cf37:	85 c0                	test   eax,eax
c000cf39:	74 0c                	je     c000cf47 <setActiveTerminal(VgaText*)+0x42>
c000cf3b:	83 ec 0c             	sub    esp,0xc
c000cf3e:	50                   	push   eax
c000cf3f:	e8 e4 f8 ff ff       	call   c000c828 <VgaText::updateCursor()>
c000cf44:	83 c4 10             	add    esp,0x10
c000cf47:	89 1d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,ebx
c000cf4d:	51                   	push   ecx
c000cf4e:	51                   	push   ecx
c000cf4f:	53                   	push   ebx
c000cf50:	68 6e 05 02 c0       	push   0xc002056e
c000cf55:	e8 d9 20 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000cf5a:	83 c4 0c             	add    esp,0xc
c000cf5d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf63:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf69:	53                   	push   ebx
c000cf6a:	e8 25 fb ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000cf6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf72:	e8 57 ff ff ff       	call   c000cece <VgaText::isBlinkDisabled()>
c000cf77:	5a                   	pop    edx
c000cf78:	0f b6 c0             	movzx  eax,al
c000cf7b:	59                   	pop    ecx
c000cf7c:	50                   	push   eax
c000cf7d:	53                   	push   ebx
c000cf7e:	e8 cf f8 ff ff       	call   c000c852 <VgaText::disableBlink(bool)>
c000cf83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf86:	e8 6f ff ff ff       	call   c000cefa <VgaText::getCursorHeight()>
c000cf8b:	5a                   	pop    edx
c000cf8c:	59                   	pop    ecx
c000cf8d:	50                   	push   eax
c000cf8e:	53                   	push   ebx
c000cf8f:	e8 48 ff ff ff       	call   c000cedc <VgaText::setCursorHeight(int)>
c000cf94:	83 c4 10             	add    esp,0x10
c000cf97:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf9e:	75 0a                	jne    c000cfaa <setActiveTerminal(VgaText*)+0xa5>
c000cfa0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cfaa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cfae:	83 c4 08             	add    esp,0x8
c000cfb1:	5b                   	pop    ebx
c000cfb2:	e9 1d f8 ff ff       	jmp    c000c7d4 <VgaText::load()>

c000cfb7 <doTerminalCycle()>:
c000cfb7:	83 ec 18             	sub    esp,0x18
c000cfba:	a1 80 38 02 c0       	mov    eax,ds:0xc0023880
c000cfbf:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cfc5:	50                   	push   eax
c000cfc6:	a3 80 38 02 c0       	mov    ds:0xc0023880,eax
c000cfcb:	e8 35 ff ff ff       	call   c000cf05 <setActiveTerminal(VgaText*)>
c000cfd0:	83 c4 1c             	add    esp,0x1c
c000cfd3:	c3                   	ret    

c000cfd4 <VgaText::doUpdate()>:
c000cfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfd8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfde:	85 c0                	test   eax,eax
c000cfe0:	74 02                	je     c000cfe4 <VgaText::doUpdate()+0x10>
c000cfe2:	ff e0                	jmp    eax
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfe6:	55                   	push   ebp
c000cfe7:	57                   	push   edi
c000cfe8:	56                   	push   esi
c000cfe9:	53                   	push   ebx
c000cfea:	83 ec 1c             	sub    esp,0x1c
c000cfed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cff1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cff6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cffd:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d000:	50                   	push   eax
c000d001:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d006:	50                   	push   eax
c000d007:	e8 58 f9 ff ff       	call   c000c964 <VgaText::combineColours(unsigned char, unsigned char)>
c000d00c:	59                   	pop    ecx
c000d00d:	0f b6 c0             	movzx  eax,al
c000d010:	5b                   	pop    ebx
c000d011:	31 c9                	xor    ecx,ecx
c000d013:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d01b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d01f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d025:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d029:	0f b7 db             	movzx  ebx,bx
c000d02c:	01 db                	add    ebx,ebx
c000d02e:	01 fb                	add    ebx,edi
c000d030:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d033:	84 c0                	test   al,al
c000d035:	0f 84 38 01 00 00    	je     c000d173 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d03b:	3c 0d                	cmp    al,0xd
c000d03d:	75 0f                	jne    c000d04e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d03f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d049:	e9 1f 01 00 00       	jmp    c000d16d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d04e:	3c 0a                	cmp    al,0xa
c000d050:	75 5b                	jne    c000d0ad <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d052:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d058:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d062:	8d 48 01             	lea    ecx,[eax+0x1]
c000d065:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d06b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d071:	75 12                	jne    c000d085 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d073:	83 ec 0c             	sub    esp,0xc
c000d076:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d07c:	55                   	push   ebp
c000d07d:	e8 f4 f8 ff ff       	call   c000c976 <VgaText::scrollScreen()>
c000d082:	83 c4 10             	add    esp,0x10
c000d085:	83 ec 0c             	sub    esp,0xc
c000d088:	55                   	push   ebp
c000d089:	e8 9a f7 ff ff       	call   c000c828 <VgaText::updateCursor()>
c000d08e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d096:	83 c4 10             	add    esp,0x10
c000d099:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d09f:	31 c9                	xor    ecx,ecx
c000d0a1:	0f b7 db             	movzx  ebx,bx
c000d0a4:	01 db                	add    ebx,ebx
c000d0a6:	01 fb                	add    ebx,edi
c000d0a8:	e9 c0 00 00 00       	jmp    c000d16d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0ad:	3c 08                	cmp    al,0x8
c000d0af:	75 4e                	jne    c000d0ff <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d0b1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d0b5:	53                   	push   ebx
c000d0b6:	53                   	push   ebx
c000d0b7:	6a 01                	push   0x1
c000d0b9:	55                   	push   ebp
c000d0ba:	e8 df fc ff ff       	call   c000cd9e <VgaText::decrementCursor(bool)>
c000d0bf:	58                   	pop    eax
c000d0c0:	5a                   	pop    edx
c000d0c1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0c7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0cd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d0d3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0d9:	6a 20                	push   0x20
c000d0db:	55                   	push   ebp
c000d0dc:	e8 3b f9 ff ff       	call   c000ca1c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0e1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0e9:	83 c4 20             	add    esp,0x20
c000d0ec:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0f2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0f6:	0f b7 db             	movzx  ebx,bx
c000d0f9:	01 db                	add    ebx,ebx
c000d0fb:	01 fb                	add    ebx,edi
c000d0fd:	eb 6e                	jmp    c000d16d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0ff:	51                   	push   ecx
c000d100:	51                   	push   ecx
c000d101:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d105:	50                   	push   eax
c000d106:	e8 ff f8 ff ff       	call   c000ca0a <VgaText::combineCharAndColour(char, unsigned char)>
c000d10b:	83 c4 10             	add    esp,0x10
c000d10e:	66 89 03             	mov    WORD PTR [ebx],ax
c000d111:	39 2d 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,ebp
c000d117:	75 2a                	jne    c000d143 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d119:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d11f:	85 c0                	test   eax,eax
c000d121:	74 20                	je     c000d143 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d123:	52                   	push   edx
c000d124:	52                   	push   edx
c000d125:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d12b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d131:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d135:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d139:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d13c:	51                   	push   ecx
c000d13d:	55                   	push   ebp
c000d13e:	ff d0                	call   eax
c000d140:	83 c4 20             	add    esp,0x20
c000d143:	83 c3 02             	add    ebx,0x2
c000d146:	50                   	push   eax
c000d147:	50                   	push   eax
c000d148:	6a 00                	push   0x0
c000d14a:	55                   	push   ebp
c000d14b:	e8 9a f9 ff ff       	call   c000caea <VgaText::incrementCursor(bool)>
c000d150:	83 c4 10             	add    esp,0x10
c000d153:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d15a:	75 0f                	jne    c000d16b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d15c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d164:	0f b7 db             	movzx  ebx,bx
c000d167:	01 db                	add    ebx,ebx
c000d169:	01 fb                	add    ebx,edi
c000d16b:	b1 01                	mov    cl,0x1
c000d16d:	46                   	inc    esi
c000d16e:	e9 bd fe ff ff       	jmp    c000d030 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d173:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d177:	83 ec 0c             	sub    esp,0xc
c000d17a:	55                   	push   ebp
c000d17b:	e8 a8 f6 ff ff       	call   c000c828 <VgaText::updateCursor()>
c000d180:	83 c4 10             	add    esp,0x10
c000d183:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d187:	84 c9                	test   cl,cl
c000d189:	74 0c                	je     c000d197 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	55                   	push   ebp
c000d18f:	e8 40 fe ff ff       	call   c000cfd4 <VgaText::doUpdate()>
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d19e:	83 c4 1c             	add    esp,0x1c
c000d1a1:	5b                   	pop    ebx
c000d1a2:	5e                   	pop    esi
c000d1a3:	5f                   	pop    edi
c000d1a4:	5d                   	pop    ebp
c000d1a5:	c3                   	ret    

c000d1a6 <VgaText::clearScreen()>:
c000d1a6:	57                   	push   edi
c000d1a7:	56                   	push   esi
c000d1a8:	31 f6                	xor    esi,esi
c000d1aa:	53                   	push   ebx
c000d1ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d1af:	52                   	push   edx
c000d1b0:	6a 00                	push   0x0
c000d1b2:	6a 00                	push   0x0
c000d1b4:	53                   	push   ebx
c000d1b5:	e8 da f8 ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000d1ba:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d1c1:	83 c4 10             	add    esp,0x10
c000d1c4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d1ca:	7e 26                	jle    c000d1f2 <VgaText::clearScreen()+0x4c>
c000d1cc:	31 ff                	xor    edi,edi
c000d1ce:	50                   	push   eax
c000d1cf:	50                   	push   eax
c000d1d0:	56                   	push   esi
c000d1d1:	57                   	push   edi
c000d1d2:	47                   	inc    edi
c000d1d3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1d9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1df:	6a 20                	push   0x20
c000d1e1:	53                   	push   ebx
c000d1e2:	e8 35 f8 ff ff       	call   c000ca1c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1e7:	83 c4 20             	add    esp,0x20
c000d1ea:	83 ff 50             	cmp    edi,0x50
c000d1ed:	75 df                	jne    c000d1ce <VgaText::clearScreen()+0x28>
c000d1ef:	46                   	inc    esi
c000d1f0:	eb d2                	jmp    c000d1c4 <VgaText::clearScreen()+0x1e>
c000d1f2:	83 ec 0c             	sub    esp,0xc
c000d1f5:	53                   	push   ebx
c000d1f6:	e8 d9 fd ff ff       	call   c000cfd4 <VgaText::doUpdate()>
c000d1fb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d202:	83 c4 10             	add    esp,0x10
c000d205:	5b                   	pop    ebx
c000d206:	5e                   	pop    esi
c000d207:	5f                   	pop    edi
c000d208:	c3                   	ret    
c000d209:	90                   	nop

c000d20a <VgaText::putchar(char)>:
c000d20a:	56                   	push   esi
c000d20b:	53                   	push   ebx
c000d20c:	83 ec 14             	sub    esp,0x14
c000d20f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d213:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d217:	3c 5b                	cmp    al,0x5b
c000d219:	75 21                	jne    c000d23c <VgaText::putchar(char)+0x32>
c000d21b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d222:	74 28                	je     c000d24c <VgaText::putchar(char)+0x42>
c000d224:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d22d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d237:	e9 e2 00 00 00       	jmp    c000d31e <VgaText::putchar(char)+0x114>
c000d23c:	3c 1b                	cmp    al,0x1b
c000d23e:	75 0c                	jne    c000d24c <VgaText::putchar(char)+0x42>
c000d240:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d247:	e9 d2 00 00 00       	jmp    c000d31e <VgaText::putchar(char)+0x114>
c000d24c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d252:	84 c9                	test   cl,cl
c000d254:	0f 84 ab 00 00 00    	je     c000d305 <VgaText::putchar(char)+0xfb>
c000d25a:	8d 50 c0             	lea    edx,[eax-0x40]
c000d25d:	80 fa 3e             	cmp    dl,0x3e
c000d260:	0f 87 82 00 00 00    	ja     c000d2e8 <VgaText::putchar(char)+0xde>
c000d266:	3c 6d                	cmp    al,0x6d
c000d268:	75 4d                	jne    c000d2b7 <VgaText::putchar(char)+0xad>
c000d26a:	31 f6                	xor    esi,esi
c000d26c:	31 d2                	xor    edx,edx
c000d26e:	31 c0                	xor    eax,eax
c000d270:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d276:	7e 30                	jle    c000d2a8 <VgaText::putchar(char)+0x9e>
c000d278:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d280:	80 fa 3b             	cmp    dl,0x3b
c000d283:	75 17                	jne    c000d29c <VgaText::putchar(char)+0x92>
c000d285:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d289:	50                   	push   eax
c000d28a:	53                   	push   ebx
c000d28b:	e8 fc f5 ff ff       	call   c000c88c <VgaText::doANSI_SGR(int)>
c000d290:	59                   	pop    ecx
c000d291:	31 d2                	xor    edx,edx
c000d293:	58                   	pop    eax
c000d294:	31 c0                	xor    eax,eax
c000d296:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d29a:	eb 09                	jmp    c000d2a5 <VgaText::putchar(char)+0x9b>
c000d29c:	6b c0 0a             	imul   eax,eax,0xa
c000d29f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d2a3:	88 ca                	mov    dl,cl
c000d2a5:	46                   	inc    esi
c000d2a6:	eb c8                	jmp    c000d270 <VgaText::putchar(char)+0x66>
c000d2a8:	84 d2                	test   dl,dl
c000d2aa:	74 31                	je     c000d2dd <VgaText::putchar(char)+0xd3>
c000d2ac:	50                   	push   eax
c000d2ad:	53                   	push   ebx
c000d2ae:	e8 d9 f5 ff ff       	call   c000c88c <VgaText::doANSI_SGR(int)>
c000d2b3:	58                   	pop    eax
c000d2b4:	5a                   	pop    edx
c000d2b5:	eb 26                	jmp    c000d2dd <VgaText::putchar(char)+0xd3>
c000d2b7:	3c 4a                	cmp    al,0x4a
c000d2b9:	75 22                	jne    c000d2dd <VgaText::putchar(char)+0xd3>
c000d2bb:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d2c2:	75 19                	jne    c000d2dd <VgaText::putchar(char)+0xd3>
c000d2c4:	83 ec 0c             	sub    esp,0xc
c000d2c7:	53                   	push   ebx
c000d2c8:	e8 d9 fe ff ff       	call   c000d1a6 <VgaText::clearScreen()>
c000d2cd:	83 c4 0c             	add    esp,0xc
c000d2d0:	6a 00                	push   0x0
c000d2d2:	6a 00                	push   0x0
c000d2d4:	53                   	push   ebx
c000d2d5:	e8 ba f7 ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2e6:	eb 36                	jmp    c000d31e <VgaText::putchar(char)+0x114>
c000d2e8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2ee:	83 fa 0e             	cmp    edx,0xe
c000d2f1:	7f 2b                	jg     c000d31e <VgaText::putchar(char)+0x114>
c000d2f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2f6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2fc:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d303:	eb 19                	jmp    c000d31e <VgaText::putchar(char)+0x114>
c000d305:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d30b:	0f be c0             	movsx  eax,al
c000d30e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d314:	50                   	push   eax
c000d315:	53                   	push   ebx
c000d316:	e8 ab fa ff ff       	call   c000cdc6 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	83 c4 14             	add    esp,0x14
c000d321:	5b                   	pop    ebx
c000d322:	5e                   	pop    esi
c000d323:	c3                   	ret    

c000d324 <VgaText::puts(char const*)>:
c000d324:	53                   	push   ebx
c000d325:	83 ec 08             	sub    esp,0x8
c000d328:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d32c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d32f:	84 c0                	test   al,al
c000d331:	74 12                	je     c000d345 <VgaText::puts(char const*)+0x21>
c000d333:	43                   	inc    ebx
c000d334:	51                   	push   ecx
c000d335:	51                   	push   ecx
c000d336:	50                   	push   eax
c000d337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33b:	e8 ca fe ff ff       	call   c000d20a <VgaText::putchar(char)>
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	eb e7                	jmp    c000d32c <VgaText::puts(char const*)+0x8>
c000d345:	83 c4 08             	add    esp,0x8
c000d348:	5b                   	pop    ebx
c000d349:	c3                   	ret    

c000d34a <VgaText::putx(unsigned int)>:
c000d34a:	57                   	push   edi
c000d34b:	b9 11 00 00 00       	mov    ecx,0x11
c000d350:	56                   	push   esi
c000d351:	be 8a 05 02 c0       	mov    esi,0xc002058a
c000d356:	53                   	push   ebx
c000d357:	83 ec 20             	sub    esp,0x20
c000d35a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d35e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d362:	fc                   	cld    
c000d363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d365:	be 08 00 00 00       	mov    esi,0x8
c000d36a:	50                   	push   eax
c000d36b:	50                   	push   eax
c000d36c:	89 d8                	mov    eax,ebx
c000d36e:	c1 e3 04             	shl    ebx,0x4
c000d371:	c1 e8 1c             	shr    eax,0x1c
c000d374:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d379:	50                   	push   eax
c000d37a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d37e:	e8 87 fe ff ff       	call   c000d20a <VgaText::putchar(char)>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	4e                   	dec    esi
c000d387:	75 e1                	jne    c000d36a <VgaText::putx(unsigned int)+0x20>
c000d389:	83 c4 20             	add    esp,0x20
c000d38c:	5b                   	pop    ebx
c000d38d:	5e                   	pop    esi
c000d38e:	5f                   	pop    edi
c000d38f:	c3                   	ret    

c000d390 <VgaText::VgaText(char const*)>:
c000d390:	57                   	push   edi
c000d391:	56                   	push   esi
c000d392:	53                   	push   ebx
c000d393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d397:	83 ec 08             	sub    esp,0x8
c000d39a:	6a 00                	push   0x0
c000d39c:	50                   	push   eax
c000d39d:	e8 e0 05 00 00       	call   c000d982 <UnixFile::UnixFile(int)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	ba f0 05 02 c0       	mov    edx,0xc00205f0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	89 10                	mov    DWORD PTR [eax],edx
c000d3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3db:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d402:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d418:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d41e:	bb 60 38 02 c0       	mov    ebx,0xc0023860
c000d423:	b8 08 00 00 00       	mov    eax,0x8
c000d428:	fc                   	cld    
c000d429:	89 d7                	mov    edi,edx
c000d42b:	89 de                	mov    esi,ebx
c000d42d:	89 c1                	mov    ecx,eax
c000d42f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d435:	05 1e 10 00 00       	add    eax,0x101e
c000d43a:	83 ec 08             	sub    esp,0x8
c000d43d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d441:	50                   	push   eax
c000d442:	e8 60 32 ff ff       	call   c00006a7 <strcpy>
c000d447:	83 c4 10             	add    esp,0x10
c000d44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d44e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d45c:	83 c0 0c             	add    eax,0xc
c000d45f:	83 ec 04             	sub    esp,0x4
c000d462:	68 00 0f 00 00       	push   0xf00
c000d467:	6a 00                	push   0x0
c000d469:	50                   	push   eax
c000d46a:	e8 99 31 ff ff       	call   c0000608 <memset>
c000d46f:	83 c4 10             	add    esp,0x10
c000d472:	83 ec 04             	sub    esp,0x4
c000d475:	6a 00                	push   0x0
c000d477:	6a 07                	push   0x7
c000d479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47d:	e8 c2 f4 ff ff       	call   c000c944 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	83 ec 08             	sub    esp,0x8
c000d488:	6a 02                	push   0x2
c000d48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48e:	e8 49 fa ff ff       	call   c000cedc <VgaText::setCursorHeight(int)>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	83 ec 04             	sub    esp,0x4
c000d499:	6a 00                	push   0x0
c000d49b:	6a 00                	push   0x0
c000d49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a1:	e8 ee f5 ff ff       	call   c000ca94 <VgaText::setCursor(int, int)>
c000d4a6:	83 c4 10             	add    esp,0x10
c000d4a9:	83 ec 08             	sub    esp,0x8
c000d4ac:	6a 01                	push   0x1
c000d4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b2:	e8 8b f3 ff ff       	call   c000c842 <VgaText::showCursor(bool)>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	83 ec 08             	sub    esp,0x8
c000d4bd:	6a 01                	push   0x1
c000d4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c3:	e8 8a f3 ff ff       	call   c000c852 <VgaText::disableBlink(bool)>
c000d4c8:	83 c4 10             	add    esp,0x10
c000d4cb:	83 ec 0c             	sub    esp,0xc
c000d4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d2:	e8 cf fc ff ff       	call   c000d1a6 <VgaText::clearScreen()>
c000d4d7:	83 c4 10             	add    esp,0x10
c000d4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4de:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e9:	05 9e 10 00 00       	add    eax,0x109e
c000d4ee:	83 ec 04             	sub    esp,0x4
c000d4f1:	68 96 00 00 00       	push   0x96
c000d4f6:	6a 00                	push   0x0
c000d4f8:	50                   	push   eax
c000d4f9:	e8 0a 31 ff ff       	call   c0000608 <memset>
c000d4fe:	83 c4 10             	add    esp,0x10
c000d501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d505:	05 34 11 00 00       	add    eax,0x1134
c000d50a:	83 ec 04             	sub    esp,0x4
c000d50d:	68 2c 01 00 00       	push   0x12c
c000d512:	6a 00                	push   0x0
c000d514:	50                   	push   eax
c000d515:	e8 ee 30 ff ff       	call   c0000608 <memset>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	90                   	nop
c000d51e:	5b                   	pop    ebx
c000d51f:	5e                   	pop    esi
c000d520:	5f                   	pop    edi
c000d521:	c3                   	ret    

c000d522 <VgaText::receiveKey(unsigned char)>:
c000d522:	55                   	push   ebp
c000d523:	57                   	push   edi
c000d524:	56                   	push   esi
c000d525:	53                   	push   ebx
c000d526:	83 ec 1c             	sub    esp,0x1c
c000d529:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d52d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d531:	84 db                	test   bl,bl
c000d533:	0f 84 c9 00 00 00    	je     c000d602 <VgaText::receiveKey(unsigned char)+0xe0>
c000d539:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d53f:	80 fb 08             	cmp    bl,0x8
c000d542:	75 2c                	jne    c000d570 <VgaText::receiveKey(unsigned char)+0x4e>
c000d544:	83 ec 0c             	sub    esp,0xc
c000d547:	57                   	push   edi
c000d548:	e8 d8 30 ff ff       	call   c0000625 <strlen>
c000d54d:	83 c4 10             	add    esp,0x10
c000d550:	85 c0                	test   eax,eax
c000d552:	74 41                	je     c000d595 <VgaText::receiveKey(unsigned char)+0x73>
c000d554:	50                   	push   eax
c000d555:	50                   	push   eax
c000d556:	6a 08                	push   0x8
c000d558:	56                   	push   esi
c000d559:	e8 ac fc ff ff       	call   c000d20a <VgaText::putchar(char)>
c000d55e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d561:	e8 bf 30 ff ff       	call   c0000625 <strlen>
c000d566:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d56e:	eb 22                	jmp    c000d592 <VgaText::receiveKey(unsigned char)+0x70>
c000d570:	0f be c3             	movsx  eax,bl
c000d573:	52                   	push   edx
c000d574:	52                   	push   edx
c000d575:	50                   	push   eax
c000d576:	56                   	push   esi
c000d577:	e8 8e fc ff ff       	call   c000d20a <VgaText::putchar(char)>
c000d57c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d580:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d585:	59                   	pop    ecx
c000d586:	5d                   	pop    ebp
c000d587:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d58b:	50                   	push   eax
c000d58c:	57                   	push   edi
c000d58d:	e8 d9 31 ff ff       	call   c000076b <strcat>
c000d592:	83 c4 10             	add    esp,0x10
c000d595:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d59c:	75 05                	jne    c000d5a3 <VgaText::receiveKey(unsigned char)+0x81>
c000d59e:	80 fb 0a             	cmp    bl,0xa
c000d5a1:	75 53                	jne    c000d5f6 <VgaText::receiveKey(unsigned char)+0xd4>
c000d5a3:	83 ec 0c             	sub    esp,0xc
c000d5a6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d5ac:	53                   	push   ebx
c000d5ad:	e8 73 30 ff ff       	call   c0000625 <strlen>
c000d5b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d5b5:	89 c5                	mov    ebp,eax
c000d5b7:	e8 69 30 ff ff       	call   c0000625 <strlen>
c000d5bc:	83 c4 10             	add    esp,0x10
c000d5bf:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d5c3:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d5c8:	76 10                	jbe    c000d5da <VgaText::receiveKey(unsigned char)+0xb8>
c000d5ca:	83 ec 0c             	sub    esp,0xc
c000d5cd:	68 9b 05 02 c0       	push   0xc002059b
c000d5d2:	e8 f1 76 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000d5d7:	83 c4 10             	add    esp,0x10
c000d5da:	50                   	push   eax
c000d5db:	50                   	push   eax
c000d5dc:	57                   	push   edi
c000d5dd:	53                   	push   ebx
c000d5de:	e8 88 31 ff ff       	call   c000076b <strcat>
c000d5e3:	83 c4 0c             	add    esp,0xc
c000d5e6:	68 96 00 00 00       	push   0x96
c000d5eb:	6a 00                	push   0x0
c000d5ed:	57                   	push   edi
c000d5ee:	e8 15 30 ff ff       	call   c0000608 <memset>
c000d5f3:	83 c4 10             	add    esp,0x10
c000d5f6:	83 ec 0c             	sub    esp,0xc
c000d5f9:	56                   	push   esi
c000d5fa:	e8 d5 f9 ff ff       	call   c000cfd4 <VgaText::doUpdate()>
c000d5ff:	83 c4 10             	add    esp,0x10
c000d602:	83 c4 1c             	add    esp,0x1c
c000d605:	5b                   	pop    ebx
c000d606:	5e                   	pop    esi
c000d607:	5f                   	pop    edi
c000d608:	5d                   	pop    ebp
c000d609:	c3                   	ret    

c000d60a <VgaText::write(unsigned long long, void*, int*)>:
c000d60a:	55                   	push   ebp
c000d60b:	57                   	push   edi
c000d60c:	56                   	push   esi
c000d60d:	53                   	push   ebx
c000d60e:	83 ec 0c             	sub    esp,0xc
c000d611:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d615:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d619:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d61d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d624:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d627:	39 eb                	cmp    ebx,ebp
c000d629:	74 13                	je     c000d63e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d62b:	43                   	inc    ebx
c000d62c:	50                   	push   eax
c000d62d:	50                   	push   eax
c000d62e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d632:	50                   	push   eax
c000d633:	56                   	push   esi
c000d634:	e8 d1 fb ff ff       	call   c000d20a <VgaText::putchar(char)>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	eb e9                	jmp    c000d627 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d648:	56                   	push   esi
c000d649:	e8 86 f9 ff ff       	call   c000cfd4 <VgaText::doUpdate()>
c000d64e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d652:	89 38                	mov    DWORD PTR [eax],edi
c000d654:	83 c4 1c             	add    esp,0x1c
c000d657:	31 c0                	xor    eax,eax
c000d659:	5b                   	pop    ebx
c000d65a:	5e                   	pop    esi
c000d65b:	5f                   	pop    edi
c000d65c:	5d                   	pop    ebp
c000d65d:	c3                   	ret    

c000d65e <newTerminal(char*)>:
c000d65e:	83 ec 28             	sub    esp,0x28
c000d661:	68 60 12 00 00       	push   0x1260
c000d666:	e8 d9 18 00 00       	call   c000ef44 <operator new(unsigned long)>
c000d66b:	5a                   	pop    edx
c000d66c:	59                   	pop    ecx
c000d66d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d671:	50                   	push   eax
c000d672:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d676:	e8 15 fd ff ff       	call   c000d390 <VgaText::VgaText(char const*)>
c000d67b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d67f:	83 c4 2c             	add    esp,0x2c
c000d682:	c3                   	ret    
c000d683:	90                   	nop

c000d684 <TSS::TSS()>:
c000d684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d688:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d68f:	90                   	nop
c000d690:	c3                   	ret    
c000d691:	90                   	nop

c000d692 <TSS::setESP(unsigned long)>:
c000d692:	55                   	push   ebp
c000d693:	89 e5                	mov    ebp,esp
c000d695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d69b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d69e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a1:	90                   	nop
c000d6a2:	5d                   	pop    ebp
c000d6a3:	c3                   	ret    

c000d6a4 <TSS::flush()>:
c000d6a4:	55                   	push   ebp
c000d6a5:	89 e5                	mov    ebp,esp
c000d6a7:	83 ec 10             	sub    esp,0x10
c000d6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6af:	83 c8 03             	or     eax,0x3
c000d6b2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d6b6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d6ba:	66 89 d0             	mov    ax,dx
c000d6bd:	0f 00 d8             	ltr    ax
c000d6c0:	90                   	nop
c000d6c1:	c9                   	leave  
c000d6c2:	c3                   	ret    
c000d6c3:	90                   	nop

c000d6c4 <TSS::setup(unsigned long, unsigned long)>:
c000d6c4:	55                   	push   ebp
c000d6c5:	89 e5                	mov    ebp,esp
c000d6c7:	53                   	push   ebx
c000d6c8:	83 ec 14             	sub    esp,0x14
c000d6cb:	83 ec 0c             	sub    esp,0xc
c000d6ce:	6a 68                	push   0x68
c000d6d0:	e8 81 e5 ff ff       	call   c000bc56 <malloc>
c000d6d5:	83 c4 10             	add    esp,0x10
c000d6d8:	89 c2                	mov    edx,eax
c000d6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e6:	83 ec 04             	sub    esp,0x4
c000d6e9:	6a 68                	push   0x68
c000d6eb:	6a 00                	push   0x0
c000d6ed:	50                   	push   eax
c000d6ee:	e8 15 2f ff ff       	call   c0000608 <memset>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6fc:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d708:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d714:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d717:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d720:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d729:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d72c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d735:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d738:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d73e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d744:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d74a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d74d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d750:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d753:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d759:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d75c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d75f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d768:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d76f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d772:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d775:	e8 0b 13 01 00       	call   c001ea85 <CPU::readCR3()>
c000d77a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d783:	83 ec 08             	sub    esp,0x8
c000d786:	50                   	push   eax
c000d787:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d78a:	50                   	push   eax
c000d78b:	e8 9c dc ff ff       	call   c000b42c <GDTEntry::setBase(unsigned int)>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	83 ec 08             	sub    esp,0x8
c000d796:	6a 68                	push   0x68
c000d798:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d79b:	50                   	push   eax
c000d79c:	e8 a7 dc ff ff       	call   c000b448 <GDTEntry::setLimit(unsigned int)>
c000d7a1:	83 c4 10             	add    esp,0x10
c000d7a4:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d7a8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ab:	83 e0 0f             	and    eax,0xf
c000d7ae:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7b1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7b4:	83 c8 40             	or     eax,0x40
c000d7b7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7ba:	e8 03 68 00 00       	call   c0013fc2 <thisCPU()>
c000d7bf:	05 78 01 00 00       	add    eax,0x178
c000d7c4:	83 ec 04             	sub    esp,0x4
c000d7c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d7ca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d7cd:	50                   	push   eax
c000d7ce:	e8 a9 dc ff ff       	call   c000b47c <GDT::addEntry(GDTEntry)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	89 c2                	mov    edx,eax
c000d7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7db:	89 10                	mov    DWORD PTR [eax],edx
c000d7dd:	e8 e0 67 00 00       	call   c0013fc2 <thisCPU()>
c000d7e2:	05 78 01 00 00       	add    eax,0x178
c000d7e7:	83 ec 0c             	sub    esp,0xc
c000d7ea:	50                   	push   eax
c000d7eb:	e8 d0 dc ff ff       	call   c000b4c0 <GDT::flush()>
c000d7f0:	83 c4 10             	add    esp,0x10
c000d7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7f8:	83 ec 08             	sub    esp,0x8
c000d7fb:	50                   	push   eax
c000d7fc:	68 04 06 02 c0       	push   0xc0020604
c000d801:	e8 2d 18 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d80e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d811:	c9                   	leave  
c000d812:	c3                   	ret    
c000d813:	90                   	nop

c000d814 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d814:	55                   	push   ebp
c000d815:	57                   	push   edi
c000d816:	56                   	push   esi
c000d817:	53                   	push   ebx
c000d818:	83 ec 0c             	sub    esp,0xc
c000d81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d823:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d826:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d82a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d82e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d832:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d837:	75 08                	jne    c000d841 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d839:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d83f:	eb 5e                	jmp    c000d89f <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d841:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d846:	75 3d                	jne    c000d885 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d848:	83 ec 0c             	sub    esp,0xc
c000d84b:	68 22 06 02 c0       	push   0xc0020622
c000d850:	e8 de 17 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000d855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d85a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d85d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d863:	8b 10                	mov    edx,DWORD PTR [eax]
c000d865:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d869:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d86d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d871:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d879:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d87c:	83 c4 1c             	add    esp,0x1c
c000d87f:	5b                   	pop    ebx
c000d880:	5e                   	pop    esi
c000d881:	5f                   	pop    edi
c000d882:	5d                   	pop    ebp
c000d883:	ff e0                	jmp    eax
c000d885:	89 c2                	mov    edx,eax
c000d887:	83 e2 fd             	and    edx,0xfffffffd
c000d88a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d890:	74 a7                	je     c000d839 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d892:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d897:	83 e0 ef             	and    eax,0xffffffef
c000d89a:	83 f8 08             	cmp    eax,0x8
c000d89d:	76 9a                	jbe    c000d839 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d89f:	83 c4 0c             	add    esp,0xc
c000d8a2:	31 c0                	xor    eax,eax
c000d8a4:	5b                   	pop    ebx
c000d8a5:	5e                   	pop    esi
c000d8a6:	5f                   	pop    edi
c000d8a7:	5d                   	pop    ebp
c000d8a8:	c3                   	ret    
c000d8a9:	90                   	nop

c000d8aa <ReservedFilename::isAtty()>:
c000d8aa:	83 ec 18             	sub    esp,0x18
c000d8ad:	68 2f 06 02 c0       	push   0xc002062f
c000d8b2:	e8 7c 17 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000d8b7:	83 c4 10             	add    esp,0x10
c000d8ba:	31 c0                	xor    eax,eax
c000d8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c0:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d8c7:	75 12                	jne    c000d8db <ReservedFilename::isAtty()+0x31>
c000d8c9:	83 ec 0c             	sub    esp,0xc
c000d8cc:	68 45 06 02 c0       	push   0xc0020645
c000d8d1:	e8 5d 17 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	b0 01                	mov    al,0x1
c000d8db:	83 c4 0c             	add    esp,0xc
c000d8de:	c3                   	ret    
c000d8df:	90                   	nop

c000d8e0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d8e0:	55                   	push   ebp
c000d8e1:	57                   	push   edi
c000d8e2:	56                   	push   esi
c000d8e3:	53                   	push   ebx
c000d8e4:	83 ec 0c             	sub    esp,0xc
c000d8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8eb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d8ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8f2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8f6:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8fa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8fe:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d903:	75 08                	jne    c000d90d <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d905:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d90b:	eb 63                	jmp    c000d970 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d90d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d912:	75 3d                	jne    c000d951 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	68 58 06 02 c0       	push   0xc0020658
c000d91c:	e8 12 17 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000d921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d926:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d929:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d92f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d931:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d935:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d939:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d93d:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d941:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d945:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d948:	83 c4 1c             	add    esp,0x1c
c000d94b:	5b                   	pop    ebx
c000d94c:	5e                   	pop    esi
c000d94d:	5f                   	pop    edi
c000d94e:	5d                   	pop    ebp
c000d94f:	ff e0                	jmp    eax
c000d951:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d956:	75 04                	jne    c000d95c <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d958:	89 33                	mov    DWORD PTR [ebx],esi
c000d95a:	eb 14                	jmp    c000d970 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d95c:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d961:	74 a2                	je     c000d905 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d963:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d968:	83 e0 ef             	and    eax,0xffffffef
c000d96b:	83 f8 08             	cmp    eax,0x8
c000d96e:	76 95                	jbe    c000d905 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d970:	83 c4 0c             	add    esp,0xc
c000d973:	31 c0                	xor    eax,eax
c000d975:	5b                   	pop    ebx
c000d976:	5e                   	pop    esi
c000d977:	5f                   	pop    edi
c000d978:	5d                   	pop    ebp
c000d979:	c3                   	ret    

c000d97a <UnixFile::getFileDescriptor()>:
c000d97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d97e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d981:	c3                   	ret    

c000d982 <UnixFile::UnixFile(int)>:
c000d982:	53                   	push   ebx
c000d983:	83 ec 18             	sub    esp,0x18
c000d986:	ba 74 07 02 c0       	mov    edx,0xc0020774
c000d98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98f:	89 10                	mov    DWORD PTR [eax],edx
c000d991:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d999:	0f 8f 4d 01 00 00    	jg     c000daec <UnixFile::UnixFile(int)+0x16a>
c000d99f:	a1 60 2c 02 c0       	mov    eax,ds:0xc0022c60
c000d9a4:	8d 50 01             	lea    edx,[eax+0x1]
c000d9a7:	89 15 60 2c 02 c0    	mov    DWORD PTR ds:0xc0022c60,edx
c000d9ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d9b4:	83 ec 08             	sub    esp,0x8
c000d9b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9bb:	68 18 39 02 c0       	push   0xc0023918
c000d9c0:	e8 35 11 01 00       	call   c001eafa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	a0 14 39 02 c0       	mov    al,ds:0xc0023914
c000d9cd:	83 f0 01             	xor    eax,0x1
c000d9d0:	84 c0                	test   al,al
c000d9d2:	0f 84 15 01 00 00    	je     c000daed <UnixFile::UnixFile(int)+0x16b>
c000d9d8:	c6 05 14 39 02 c0 01 	mov    BYTE PTR ds:0xc0023914,0x1
c000d9df:	83 ec 0c             	sub    esp,0xc
c000d9e2:	6a 0c                	push   0xc
c000d9e4:	e8 5b 15 00 00       	call   c000ef44 <operator new(unsigned long)>
c000d9e9:	83 c4 10             	add    esp,0x10
c000d9ec:	89 c3                	mov    ebx,eax
c000d9ee:	83 ec 08             	sub    esp,0x8
c000d9f1:	68 03 ff ff 0f       	push   0xfffff03
c000d9f6:	53                   	push   ebx
c000d9f7:	e8 f6 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 1d 0c 39 02 c0    	mov    DWORD PTR ds:0xc002390c,ebx
c000da05:	83 ec 0c             	sub    esp,0xc
c000da08:	6a 0c                	push   0xc
c000da0a:	e8 35 15 00 00       	call   c000ef44 <operator new(unsigned long)>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	89 c3                	mov    ebx,eax
c000da14:	83 ec 08             	sub    esp,0x8
c000da17:	68 01 ff ff 0f       	push   0xfffff01
c000da1c:	53                   	push   ebx
c000da1d:	e8 d0 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	89 1d 10 39 02 c0    	mov    DWORD PTR ds:0xc0023910,ebx
c000da2b:	83 ec 0c             	sub    esp,0xc
c000da2e:	6a 0c                	push   0xc
c000da30:	e8 0f 15 00 00       	call   c000ef44 <operator new(unsigned long)>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	89 c3                	mov    ebx,eax
c000da3a:	83 ec 08             	sub    esp,0x8
c000da3d:	68 00 ff ff 0f       	push   0xfffff00
c000da42:	53                   	push   ebx
c000da43:	e8 aa 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000da48:	83 c4 10             	add    esp,0x10
c000da4b:	89 1d 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,ebx
c000da51:	83 ec 0c             	sub    esp,0xc
c000da54:	6a 0c                	push   0xc
c000da56:	e8 e9 14 00 00       	call   c000ef44 <operator new(unsigned long)>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	89 c3                	mov    ebx,eax
c000da60:	83 ec 08             	sub    esp,0x8
c000da63:	68 02 ff ff 0f       	push   0xfffff02
c000da68:	53                   	push   ebx
c000da69:	e8 84 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000da6e:	83 c4 10             	add    esp,0x10
c000da71:	89 1d 08 39 02 c0    	mov    DWORD PTR ds:0xc0023908,ebx
c000da77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da7f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da84:	7f 67                	jg     c000daed <UnixFile::UnixFile(int)+0x16b>
c000da86:	83 ec 0c             	sub    esp,0xc
c000da89:	6a 0c                	push   0xc
c000da8b:	e8 b4 14 00 00       	call   c000ef44 <operator new(unsigned long)>
c000da90:	83 c4 10             	add    esp,0x10
c000da93:	89 c3                	mov    ebx,eax
c000da95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da99:	05 10 ff ff 0f       	add    eax,0xfffff10
c000da9e:	83 ec 08             	sub    esp,0x8
c000daa1:	50                   	push   eax
c000daa2:	53                   	push   ebx
c000daa3:	e8 4a 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000daa8:	83 c4 10             	add    esp,0x10
c000daab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daaf:	89 1c 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],ebx
c000dab6:	83 ec 0c             	sub    esp,0xc
c000dab9:	6a 0c                	push   0xc
c000dabb:	e8 84 14 00 00       	call   c000ef44 <operator new(unsigned long)>
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	89 c3                	mov    ebx,eax
c000dac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dac9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000dace:	83 ec 08             	sub    esp,0x8
c000dad1:	50                   	push   eax
c000dad2:	53                   	push   ebx
c000dad3:	e8 1a 00 00 00       	call   c000daf2 <ReservedFilename::ReservedFilename(int)>
c000dad8:	83 c4 10             	add    esp,0x10
c000dadb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dadf:	89 1c 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],ebx
c000dae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000daea:	eb 93                	jmp    c000da7f <UnixFile::UnixFile(int)+0xfd>
c000daec:	90                   	nop
c000daed:	83 c4 18             	add    esp,0x18
c000daf0:	5b                   	pop    ebx
c000daf1:	c3                   	ret    

c000daf2 <ReservedFilename::ReservedFilename(int)>:
c000daf2:	83 ec 0c             	sub    esp,0xc
c000daf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf9:	83 ec 08             	sub    esp,0x8
c000dafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db00:	50                   	push   eax
c000db01:	e8 7c fe ff ff       	call   c000d982 <UnixFile::UnixFile(int)>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	ba 90 07 02 c0       	mov    edx,0xc0020790
c000db0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db12:	89 10                	mov    DWORD PTR [eax],edx
c000db14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000db1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db1f:	90                   	nop
c000db20:	83 c4 0c             	add    esp,0xc
c000db23:	c3                   	ret    

c000db24 <UnixFile::~UnixFile()>:
c000db24:	83 ec 1c             	sub    esp,0x1c
c000db27:	ba 74 07 02 c0       	mov    edx,0xc0020774
c000db2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db30:	89 10                	mov    DWORD PTR [eax],edx
c000db32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db39:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000db3e:	7f 73                	jg     c000dbb3 <UnixFile::~UnixFile()+0x8f>
c000db40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	68 18 39 02 c0       	push   0xc0023918
c000db50:	e8 79 10 01 00       	call   c001ebce <LinkedList<UnixFile>::getFirstElement()>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	68 18 39 02 c0       	push   0xc0023918
c000db64:	e8 6d 10 01 00       	call   c001ebd6 <LinkedList<UnixFile>::removeFirst()>
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db70:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db74:	74 40                	je     c000dbb6 <UnixFile::~UnixFile()+0x92>
c000db76:	83 ec 08             	sub    esp,0x8
c000db79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db7d:	68 18 39 02 c0       	push   0xc0023918
c000db82:	e8 73 0f 01 00       	call   c001eafa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db8e:	8d 50 01             	lea    edx,[eax+0x1]
c000db91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db95:	3d 88 13 00 00       	cmp    eax,0x1388
c000db9a:	0f 94 c0             	sete   al
c000db9d:	84 c0                	test   al,al
c000db9f:	74 a7                	je     c000db48 <UnixFile::~UnixFile()+0x24>
c000dba1:	83 ec 0c             	sub    esp,0xc
c000dba4:	68 4c 07 02 c0       	push   0xc002074c
c000dba9:	e8 1a 71 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000dbae:	83 c4 10             	add    esp,0x10
c000dbb1:	eb 95                	jmp    c000db48 <UnixFile::~UnixFile()+0x24>
c000dbb3:	90                   	nop
c000dbb4:	eb 01                	jmp    c000dbb7 <UnixFile::~UnixFile()+0x93>
c000dbb6:	90                   	nop
c000dbb7:	90                   	nop
c000dbb8:	83 c4 1c             	add    esp,0x1c
c000dbbb:	c3                   	ret    

c000dbbc <UnixFile::~UnixFile()>:
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	83 ec 0c             	sub    esp,0xc
c000dbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc6:	e8 59 ff ff ff       	call   c000db24 <UnixFile::~UnixFile()>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 ec 08             	sub    esp,0x8
c000dbd1:	6a 0c                	push   0xc
c000dbd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd7:	e8 77 13 00 00       	call   c000ef53 <operator delete(void*, unsigned long)>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	83 c4 0c             	add    esp,0xc
c000dbe2:	c3                   	ret    
c000dbe3:	90                   	nop

c000dbe4 <ReservedFilename::~ReservedFilename()>:
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ba 90 07 02 c0       	mov    edx,0xc0020790
c000dbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf0:	89 10                	mov    DWORD PTR [eax],edx
c000dbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf6:	83 ec 0c             	sub    esp,0xc
c000dbf9:	50                   	push   eax
c000dbfa:	e8 25 ff ff ff       	call   c000db24 <UnixFile::~UnixFile()>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	90                   	nop
c000dc03:	83 c4 0c             	add    esp,0xc
c000dc06:	c3                   	ret    
c000dc07:	90                   	nop

c000dc08 <ReservedFilename::~ReservedFilename()>:
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	83 ec 0c             	sub    esp,0xc
c000dc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc12:	e8 cd ff ff ff       	call   c000dbe4 <ReservedFilename::~ReservedFilename()>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	83 ec 08             	sub    esp,0x8
c000dc1d:	6a 0c                	push   0xc
c000dc1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc23:	e8 2b 13 00 00       	call   c000ef53 <operator delete(void*, unsigned long)>
c000dc28:	83 c4 10             	add    esp,0x10
c000dc2b:	83 c4 0c             	add    esp,0xc
c000dc2e:	c3                   	ret    

c000dc2f <getFromFileDescriptor(int)>:
c000dc2f:	53                   	push   ebx
c000dc30:	83 ec 08             	sub    esp,0x8
c000dc33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc37:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dc3d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dc43:	7f 33                	jg     c000dc78 <getFromFileDescriptor(int)+0x49>
c000dc45:	83 ec 0c             	sub    esp,0xc
c000dc48:	68 18 39 02 c0       	push   0xc0023918
c000dc4d:	e8 7c 0f 01 00       	call   c001ebce <LinkedList<UnixFile>::getFirstElement()>
c000dc52:	83 c4 10             	add    esp,0x10
c000dc55:	85 c0                	test   eax,eax
c000dc57:	75 07                	jne    c000dc60 <getFromFileDescriptor(int)+0x31>
c000dc59:	31 c0                	xor    eax,eax
c000dc5b:	e9 98 00 00 00       	jmp    c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dc60:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc63:	0f 84 8f 00 00 00    	je     c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dc69:	52                   	push   edx
c000dc6a:	52                   	push   edx
c000dc6b:	50                   	push   eax
c000dc6c:	68 18 39 02 c0       	push   0xc0023918
c000dc71:	e8 02 10 01 00       	call   c001ec78 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc76:	eb da                	jmp    c000dc52 <getFromFileDescriptor(int)+0x23>
c000dc78:	83 ec 0c             	sub    esp,0xc
c000dc7b:	68 65 06 02 c0       	push   0xc0020665
c000dc80:	e8 ae 13 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000dc85:	83 c4 10             	add    esp,0x10
c000dc88:	a1 0c 39 02 c0       	mov    eax,ds:0xc002390c
c000dc8d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dc93:	74 63                	je     c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dc95:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dc9b:	75 17                	jne    c000dcb4 <getFromFileDescriptor(int)+0x85>
c000dc9d:	83 ec 0c             	sub    esp,0xc
c000dca0:	68 8c 06 02 c0       	push   0xc002068c
c000dca5:	e8 89 13 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000dcaa:	a1 10 39 02 c0       	mov    eax,ds:0xc0023910
c000dcaf:	83 c4 10             	add    esp,0x10
c000dcb2:	eb 44                	jmp    c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dcb4:	a1 08 39 02 c0       	mov    eax,ds:0xc0023908
c000dcb9:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dcbf:	74 37                	je     c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dcc1:	a1 04 39 02 c0       	mov    eax,ds:0xc0023904
c000dcc6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dccc:	74 2a                	je     c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dcce:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dcd4:	83 f8 08             	cmp    eax,0x8
c000dcd7:	77 09                	ja     c000dce2 <getFromFileDescriptor(int)+0xb3>
c000dcd9:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c000dce0:	eb 16                	jmp    c000dcf8 <getFromFileDescriptor(int)+0xc9>
c000dce2:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dce8:	83 fb 08             	cmp    ebx,0x8
c000dceb:	0f 87 68 ff ff ff    	ja     c000dc59 <getFromFileDescriptor(int)+0x2a>
c000dcf1:	8b 04 9d a0 38 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc760]
c000dcf8:	83 c4 08             	add    esp,0x8
c000dcfb:	5b                   	pop    ebx
c000dcfc:	c3                   	ret    

c000dcfd <__static_initialization_and_destruction_0(int, int)>:
c000dcfd:	83 ec 0c             	sub    esp,0xc
c000dd00:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd05:	75 34                	jne    c000dd3b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd07:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dd0f:	75 2a                	jne    c000dd3b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd11:	83 ec 0c             	sub    esp,0xc
c000dd14:	68 18 39 02 c0       	push   0xc0023918
c000dd19:	e8 84 0d 01 00       	call   c001eaa2 <LinkedList<UnixFile>::LinkedList()>
c000dd1e:	83 c4 10             	add    esp,0x10
c000dd21:	83 ec 04             	sub    esp,0x4
c000dd24:	68 e8 2b 02 c0       	push   0xc0022be8
c000dd29:	68 18 39 02 c0       	push   0xc0023918
c000dd2e:	68 a0 ea 01 c0       	push   0xc001eaa0
c000dd33:	e8 97 11 00 00       	call   c000eecf <__cxa_atexit>
c000dd38:	83 c4 10             	add    esp,0x10
c000dd3b:	90                   	nop
c000dd3c:	83 c4 0c             	add    esp,0xc
c000dd3f:	c3                   	ret    

c000dd40 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dd40:	83 ec 0c             	sub    esp,0xc
c000dd43:	83 ec 08             	sub    esp,0x8
c000dd46:	68 ff ff 00 00       	push   0xffff
c000dd4b:	6a 01                	push   0x1
c000dd4d:	e8 ab ff ff ff       	call   c000dcfd <__static_initialization_and_destruction_0(int, int)>
c000dd52:	83 c4 10             	add    esp,0x10
c000dd55:	83 c4 0c             	add    esp,0xc
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd5a:	53                   	push   ebx
c000dd5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd5f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd63:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd69:	89 c8                	mov    eax,ecx
c000dd6b:	d1 e8                	shr    eax,1
c000dd6d:	03 05 68 2c 02 c0    	add    eax,DWORD PTR ds:0xc0022c68
c000dd73:	83 e1 01             	and    ecx,0x1
c000dd76:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd78:	75 09                	jne    c000dd83 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd7a:	83 e2 f0             	and    edx,0xfffffff0
c000dd7d:	09 da                	or     edx,ebx
c000dd7f:	88 10                	mov    BYTE PTR [eax],dl
c000dd81:	5b                   	pop    ebx
c000dd82:	c3                   	ret    
c000dd83:	c1 e3 04             	shl    ebx,0x4
c000dd86:	83 e2 0f             	and    edx,0xf
c000dd89:	09 da                	or     edx,ebx
c000dd8b:	88 10                	mov    BYTE PTR [eax],dl
c000dd8d:	5b                   	pop    ebx
c000dd8e:	c3                   	ret    

c000dd8f <Virt::getPageState(unsigned long)>:
c000dd8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd93:	8b 0d 68 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c68
c000dd99:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd9f:	89 d0                	mov    eax,edx
c000dda1:	d1 e8                	shr    eax,1
c000dda3:	83 e2 01             	and    edx,0x1
c000dda6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dda9:	75 04                	jne    c000ddaf <Virt::getPageState(unsigned long)+0x20>
c000ddab:	83 e0 0f             	and    eax,0xf
c000ddae:	c3                   	ret    
c000ddaf:	c0 e8 04             	shr    al,0x4
c000ddb2:	c3                   	ret    

c000ddb3 <Virt::allocateKernelVirtualPages(int)>:
c000ddb3:	55                   	push   ebp
c000ddb4:	31 ed                	xor    ebp,ebp
c000ddb6:	57                   	push   edi
c000ddb7:	56                   	push   esi
c000ddb8:	53                   	push   ebx
c000ddb9:	31 db                	xor    ebx,ebx
c000ddbb:	83 ec 1c             	sub    esp,0x1c
c000ddbe:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddc2:	8b 3d 64 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c64
c000ddc8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ddcd:	57                   	push   edi
c000ddce:	e8 bc ff ff ff       	call   c000dd8f <Virt::getPageState(unsigned long)>
c000ddd3:	5a                   	pop    edx
c000ddd4:	84 c0                	test   al,al
c000ddd6:	75 3a                	jne    c000de12 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000ddd8:	85 db                	test   ebx,ebx
c000ddda:	75 02                	jne    c000ddde <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dddc:	89 fd                	mov    ebp,edi
c000ddde:	43                   	inc    ebx
c000dddf:	39 f3                	cmp    ebx,esi
c000dde1:	74 5a                	je     c000de3d <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dde3:	47                   	inc    edi
c000dde4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ddea:	76 31                	jbe    c000de1d <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ddec:	c7 05 64 2c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022c64,0xc8000
c000ddf6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddfb:	75 28                	jne    c000de25 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddfd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000de02:	bf 00 80 0c 00       	mov    edi,0xc8000
c000de07:	57                   	push   edi
c000de08:	e8 82 ff ff ff       	call   c000dd8f <Virt::getPageState(unsigned long)>
c000de0d:	5a                   	pop    edx
c000de0e:	84 c0                	test   al,al
c000de10:	74 c6                	je     c000ddd8 <Virt::allocateKernelVirtualPages(int)+0x25>
c000de12:	31 db                	xor    ebx,ebx
c000de14:	47                   	inc    edi
c000de15:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de1b:	77 cf                	ja     c000ddec <Virt::allocateKernelVirtualPages(int)+0x39>
c000de1d:	89 3d 64 2c 02 c0    	mov    DWORD PTR ds:0xc0022c64,edi
c000de23:	eb a8                	jmp    c000ddcd <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de25:	83 ec 0c             	sub    esp,0xc
c000de28:	68 a4 07 02 c0       	push   0xc00207a4
c000de2d:	e8 96 6e 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000de32:	8b 3d 64 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c64
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	eb 90                	jmp    c000ddcd <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de3d:	89 2d 64 2c 02 c0    	mov    DWORD PTR ds:0xc0022c64,ebp
c000de43:	4b                   	dec    ebx
c000de44:	74 5f                	je     c000dea5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000de46:	85 f6                	test   esi,esi
c000de48:	74 3d                	je     c000de87 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de4a:	89 e8                	mov    eax,ebp
c000de4c:	31 db                	xor    ebx,ebx
c000de4e:	8d 7e ff             	lea    edi,[esi-0x1]
c000de51:	eb 14                	jmp    c000de67 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de53:	6a 01                	push   0x1
c000de55:	43                   	inc    ebx
c000de56:	50                   	push   eax
c000de57:	e8 fe fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de5c:	58                   	pop    eax
c000de5d:	39 f3                	cmp    ebx,esi
c000de5f:	5a                   	pop    edx
c000de60:	74 25                	je     c000de87 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de62:	a1 64 2c 02 c0       	mov    eax,ds:0xc0022c64
c000de67:	8d 50 01             	lea    edx,[eax+0x1]
c000de6a:	85 db                	test   ebx,ebx
c000de6c:	89 15 64 2c 02 c0    	mov    DWORD PTR ds:0xc0022c64,edx
c000de72:	74 20                	je     c000de94 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de74:	39 df                	cmp    edi,ebx
c000de76:	75 db                	jne    c000de53 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de78:	6a 03                	push   0x3
c000de7a:	43                   	inc    ebx
c000de7b:	50                   	push   eax
c000de7c:	e8 d9 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de81:	59                   	pop    ecx
c000de82:	39 f3                	cmp    ebx,esi
c000de84:	58                   	pop    eax
c000de85:	75 db                	jne    c000de62 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de87:	83 c4 1c             	add    esp,0x1c
c000de8a:	89 e8                	mov    eax,ebp
c000de8c:	5b                   	pop    ebx
c000de8d:	c1 e0 0c             	shl    eax,0xc
c000de90:	5e                   	pop    esi
c000de91:	5f                   	pop    edi
c000de92:	5d                   	pop    ebp
c000de93:	c3                   	ret    
c000de94:	6a 02                	push   0x2
c000de96:	bb 01 00 00 00       	mov    ebx,0x1
c000de9b:	50                   	push   eax
c000de9c:	e8 b9 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dea1:	58                   	pop    eax
c000dea2:	5a                   	pop    edx
c000dea3:	eb bd                	jmp    c000de62 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dea5:	6a 04                	push   0x4
c000dea7:	8d 45 01             	lea    eax,[ebp+0x1]
c000deaa:	55                   	push   ebp
c000deab:	a3 64 2c 02 c0       	mov    ds:0xc0022c64,eax
c000deb0:	e8 a5 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deb5:	59                   	pop    ecx
c000deb6:	89 e8                	mov    eax,ebp
c000deb8:	5b                   	pop    ebx
c000deb9:	c1 e0 0c             	shl    eax,0xc
c000debc:	83 c4 1c             	add    esp,0x1c
c000debf:	5b                   	pop    ebx
c000dec0:	5e                   	pop    esi
c000dec1:	5f                   	pop    edi
c000dec2:	5d                   	pop    ebp
c000dec3:	c3                   	ret    

c000dec4 <Virt::virtualMemorySetup()>:
c000dec4:	53                   	push   ebx
c000dec5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000deca:	83 ec 08             	sub    esp,0x8
c000decd:	6a 0f                	push   0xf
c000decf:	53                   	push   ebx
c000ded0:	43                   	inc    ebx
c000ded1:	e8 84 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ded6:	59                   	pop    ecx
c000ded7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dedd:	58                   	pop    eax
c000dede:	75 ed                	jne    c000decd <Virt::virtualMemorySetup()+0x9>
c000dee0:	83 ec 08             	sub    esp,0x8
c000dee3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dee8:	68 00 00 00 c8       	push   0xc8000000
c000deed:	68 4f 09 02 c0       	push   0xc002094f
c000def2:	e8 3c 11 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000def7:	58                   	pop    eax
c000def8:	5a                   	pop    edx
c000def9:	68 00 f0 ff ef       	push   0xeffff000
c000defe:	68 63 09 02 c0       	push   0xc0020963
c000df03:	e8 2b 11 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000df08:	83 c4 10             	add    esp,0x10
c000df0b:	83 ec 08             	sub    esp,0x8
c000df0e:	6a 00                	push   0x0
c000df10:	53                   	push   ebx
c000df11:	43                   	inc    ebx
c000df12:	e8 43 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df20:	75 e9                	jne    c000df0b <Virt::virtualMemorySetup()+0x47>
c000df22:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000df27:	83 ec 08             	sub    esp,0x8
c000df2a:	6a 0f                	push   0xf
c000df2c:	53                   	push   ebx
c000df2d:	43                   	inc    ebx
c000df2e:	e8 27 fe ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000df3c:	75 e9                	jne    c000df27 <Virt::virtualMemorySetup()+0x63>
c000df3e:	83 c4 08             	add    esp,0x8
c000df41:	5b                   	pop    ebx
c000df42:	c3                   	ret    

c000df43 <Virt::getAKernelVAS()>:
c000df43:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c000df48:	c3                   	ret    

c000df49 <Virt::setupPageSwapping(int)>:
c000df49:	57                   	push   edi
c000df4a:	56                   	push   esi
c000df4b:	53                   	push   ebx
c000df4c:	83 ec 1c             	sub    esp,0x1c
c000df4f:	68 14 01 00 00       	push   0x114
c000df54:	e8 eb 0f 00 00       	call   c000ef44 <operator new(unsigned long)>
c000df59:	83 c4 0c             	add    esp,0xc
c000df5c:	89 c6                	mov    esi,eax
c000df5e:	ff 35 14 4c 02 c0    	push   DWORD PTR ds:0xc0024c14
c000df64:	68 77 09 02 c0       	push   0xc0020977
c000df69:	50                   	push   eax
c000df6a:	e8 f3 15 00 00       	call   c000f562 <File::File(char const*, Process*)>
c000df6f:	89 34 24             	mov    DWORD PTR [esp],esi
c000df72:	e8 c7 17 00 00       	call   c000f73e <File::unlink()>
c000df77:	58                   	pop    eax
c000df78:	5a                   	pop    edx
c000df79:	6a 12                	push   0x12
c000df7b:	56                   	push   esi
c000df7c:	e8 45 16 00 00       	call   c000f5c6 <File::open(FileOpenMode)>
c000df81:	83 c4 10             	add    esp,0x10
c000df84:	85 c0                	test   eax,eax
c000df86:	0f 85 bf 00 00 00    	jne    c000e04b <Virt::setupPageSwapping(int)+0x102>
c000df8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df98:	c1 e3 08             	shl    ebx,0x8
c000df9b:	83 ec 0c             	sub    esp,0xc
c000df9e:	68 00 00 01 00       	push   0x10000
c000dfa3:	e8 ae dc ff ff       	call   c000bc56 <malloc>
c000dfa8:	83 c4 0c             	add    esp,0xc
c000dfab:	89 c7                	mov    edi,eax
c000dfad:	68 00 00 01 00       	push   0x10000
c000dfb2:	6a 00                	push   0x0
c000dfb4:	50                   	push   eax
c000dfb5:	e8 4e 26 ff ff       	call   c0000608 <memset>
c000dfba:	83 c4 10             	add    esp,0x10
c000dfbd:	85 db                	test   ebx,ebx
c000dfbf:	79 03                	jns    c000dfc4 <Virt::setupPageSwapping(int)+0x7b>
c000dfc1:	83 c3 0f             	add    ebx,0xf
c000dfc4:	c1 fb 04             	sar    ebx,0x4
c000dfc7:	4b                   	dec    ebx
c000dfc8:	83 fb ff             	cmp    ebx,0xffffffff
c000dfcb:	74 4b                	je     c000e018 <Virt::setupPageSwapping(int)+0xcf>
c000dfcd:	83 ec 0c             	sub    esp,0xc
c000dfd0:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfd2:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dfd6:	52                   	push   edx
c000dfd7:	57                   	push   edi
c000dfd8:	6a 00                	push   0x0
c000dfda:	68 00 00 01 00       	push   0x10000
c000dfdf:	56                   	push   esi
c000dfe0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfe3:	83 c4 20             	add    esp,0x20
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	75 4e                	jne    c000e038 <Virt::setupPageSwapping(int)+0xef>
c000dfea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfee:	3d 00 00 01 00       	cmp    eax,0x10000
c000dff3:	74 d2                	je     c000dfc7 <Virt::setupPageSwapping(int)+0x7e>
c000dff5:	83 ec 08             	sub    esp,0x8
c000dff8:	4b                   	dec    ebx
c000dff9:	50                   	push   eax
c000dffa:	68 ca 09 02 c0       	push   0xc00209ca
c000dfff:	e8 2f 10 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e004:	c7 04 24 d3 09 02 c0 	mov    DWORD PTR [esp],0xc00209d3
c000e00b:	e8 b8 6c 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	83 fb ff             	cmp    ebx,0xffffffff
c000e016:	75 b5                	jne    c000dfcd <Virt::setupPageSwapping(int)+0x84>
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	56                   	push   esi
c000e01c:	e8 03 16 00 00       	call   c000f624 <File::close()>
c000e021:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e024:	e8 4d dc ff ff       	call   c000bc76 <rfree>
c000e029:	89 34 24             	mov    DWORD PTR [esp],esi
c000e02c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e02e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e031:	83 c4 20             	add    esp,0x20
c000e034:	5b                   	pop    ebx
c000e035:	5e                   	pop    esi
c000e036:	5f                   	pop    edi
c000e037:	c3                   	ret    
c000e038:	83 ec 08             	sub    esp,0x8
c000e03b:	50                   	push   eax
c000e03c:	68 b2 09 02 c0       	push   0xc00209b2
c000e041:	e8 ed 0f 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e046:	83 c4 10             	add    esp,0x10
c000e049:	eb 9f                	jmp    c000dfea <Virt::setupPageSwapping(int)+0xa1>
c000e04b:	83 ec 08             	sub    esp,0x8
c000e04e:	50                   	push   eax
c000e04f:	68 8e 09 02 c0       	push   0xc002098e
c000e054:	e8 da 0f 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e059:	c7 04 24 97 09 02 c0 	mov    DWORD PTR [esp],0xc0020997
c000e060:	e8 63 6c 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e065:	83 c4 10             	add    esp,0x10
c000e068:	e9 1f ff ff ff       	jmp    c000df8c <Virt::setupPageSwapping(int)+0x43>
c000e06d:	90                   	nop

c000e06e <VAS::VAS()>:
c000e06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e07d:	a3 24 39 02 c0       	mov    ds:0xc0023924,eax
c000e082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e086:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e08e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e095:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e09c:	90                   	nop
c000e09d:	c3                   	ret    

c000e09e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0a2:	89 c2                	mov    edx,eax
c000e0a4:	c1 e8 0a             	shr    eax,0xa
c000e0a7:	c1 ea 16             	shr    edx,0x16
c000e0aa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e0af:	19 c9                	sbb    ecx,ecx
c000e0b1:	c1 e2 0c             	shl    edx,0xc
c000e0b4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e0ba:	25 fc 0f 00 00       	and    eax,0xffc
c000e0bf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e0c6:	01 d0                	add    eax,edx
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop

c000e0ca <VAS::getPageTableEntry(unsigned long)>:
c000e0ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e0ce:	89 ca                	mov    edx,ecx
c000e0d0:	c1 e9 0a             	shr    ecx,0xa
c000e0d3:	c1 ea 16             	shr    edx,0x16
c000e0d6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e0dc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e0e2:	c1 e0 0c             	shl    eax,0xc
c000e0e5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e0e8:	c3                   	ret    

c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e0e9:	57                   	push   edi
c000e0ea:	56                   	push   esi
c000e0eb:	be 01 00 00 00       	mov    esi,0x1
c000e0f0:	53                   	push   ebx
c000e0f1:	83 ec 10             	sub    esp,0x10
c000e0f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0f8:	c1 eb 0c             	shr    ebx,0xc
c000e0fb:	eb 3f                	jmp    c000e13c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0fd:	e8 41 fe ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e102:	83 ec 08             	sub    esp,0x8
c000e105:	57                   	push   edi
c000e106:	50                   	push   eax
c000e107:	e8 be ff ff ff       	call   c000e0ca <VAS::getPageTableEntry(unsigned long)>
c000e10c:	83 c4 10             	add    esp,0x10
c000e10f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e111:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e115:	f6 c4 04             	test   ah,0x4
c000e118:	75 5f                	jne    c000e179 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e11a:	80 fa 04             	cmp    dl,0x4
c000e11d:	74 78                	je     c000e197 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e11f:	80 fa 02             	cmp    dl,0x2
c000e122:	0f 84 88 00 00 00    	je     c000e1b0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e128:	80 fa 03             	cmp    dl,0x3
c000e12b:	0f 84 ad 00 00 00    	je     c000e1de <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e131:	fe ca                	dec    dl
c000e133:	0f 84 92 00 00 00    	je     c000e1cb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e139:	43                   	inc    ebx
c000e13a:	31 f6                	xor    esi,esi
c000e13c:	53                   	push   ebx
c000e13d:	e8 4d fc ff ff       	call   c000dd8f <Virt::getPageState(unsigned long)>
c000e142:	5f                   	pop    edi
c000e143:	89 df                	mov    edi,ebx
c000e145:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e149:	c1 e7 0c             	shl    edi,0xc
c000e14c:	84 c0                	test   al,al
c000e14e:	75 ad                	jne    c000e0fd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e150:	83 ec 0c             	sub    esp,0xc
c000e153:	68 d9 09 02 c0       	push   0xc00209d9
c000e158:	e8 6b 6b 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e15d:	e8 e1 fd ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e162:	5a                   	pop    edx
c000e163:	59                   	pop    ecx
c000e164:	57                   	push   edi
c000e165:	50                   	push   eax
c000e166:	e8 5f ff ff ff       	call   c000e0ca <VAS::getPageTableEntry(unsigned long)>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e170:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e174:	f6 c4 04             	test   ah,0x4
c000e177:	74 c0                	je     c000e139 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e179:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e17d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e182:	83 ec 0c             	sub    esp,0xc
c000e185:	50                   	push   eax
c000e186:	e8 eb df ff ff       	call   c000c176 <Phys::freePage(unsigned long)>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e192:	80 fa 04             	cmp    dl,0x4
c000e195:	75 88                	jne    c000e11f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e197:	89 f0                	mov    eax,esi
c000e199:	84 c0                	test   al,al
c000e19b:	75 47                	jne    c000e1e4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e19d:	c7 44 24 20 c4 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc00207c4
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	5b                   	pop    ebx
c000e1a9:	5e                   	pop    esi
c000e1aa:	5f                   	pop    edi
c000e1ab:	e9 18 6b 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c000e1b0:	89 f0                	mov    eax,esi
c000e1b2:	84 c0                	test   al,al
c000e1b4:	75 15                	jne    c000e1cb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e1b6:	83 ec 0c             	sub    esp,0xc
c000e1b9:	68 f5 09 02 c0       	push   0xc00209f5
c000e1be:	e8 05 6b 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	e9 6e ff ff ff       	jmp    c000e139 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1cb:	83 ec 08             	sub    esp,0x8
c000e1ce:	6a 00                	push   0x0
c000e1d0:	53                   	push   ebx
c000e1d1:	e8 84 fb ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	e9 5b ff ff ff       	jmp    c000e139 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1de:	89 f0                	mov    eax,esi
c000e1e0:	84 c0                	test   al,al
c000e1e2:	75 15                	jne    c000e1f9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e1e4:	83 ec 08             	sub    esp,0x8
c000e1e7:	6a 00                	push   0x0
c000e1e9:	53                   	push   ebx
c000e1ea:	e8 6b fb ff ff       	call   c000dd5a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1ef:	83 c4 10             	add    esp,0x10
c000e1f2:	83 c4 10             	add    esp,0x10
c000e1f5:	5b                   	pop    ebx
c000e1f6:	5e                   	pop    esi
c000e1f7:	5f                   	pop    edi
c000e1f8:	c3                   	ret    
c000e1f9:	c7 44 24 20 11 0a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020a11
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	5b                   	pop    ebx
c000e205:	5e                   	pop    esi
c000e206:	5f                   	pop    edi
c000e207:	e9 bc 6a 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>

c000e20c <VAS::freeAllocatedPages(unsigned long)>:
c000e20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e214:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e218:	74 09                	je     c000e223 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e21a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e21e:	e9 c6 fe ff ff       	jmp    c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e223:	c7 44 24 04 e8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207e8
c000e22b:	e9 03 0e 00 00       	jmp    c000f033 <Dbg::kprintf(char const*, ...)>

c000e230 <VAS::virtualToPhysical(unsigned long)>:
c000e230:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e234:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e238:	e8 8d fe ff ff       	call   c000e0ca <VAS::getPageTableEntry(unsigned long)>
c000e23d:	5a                   	pop    edx
c000e23e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e240:	59                   	pop    ecx
c000e241:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e246:	c3                   	ret    
c000e247:	90                   	nop

c000e248 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e254:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e25e:	19 c0                	sbb    eax,eax
c000e260:	83 ca 03             	or     edx,0x3
c000e263:	83 e0 fc             	and    eax,0xfffffffc
c000e266:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e26d:	e8 13 08 01 00       	call   c001ea85 <CPU::readCR3()>
c000e272:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e276:	83 c4 0c             	add    esp,0xc
c000e279:	e9 19 08 01 00       	jmp    c001ea97 <CPU::writeCR3(unsigned long)>

c000e27e <VAS::~VAS()>:
c000e27e:	83 ec 2c             	sub    esp,0x2c
c000e281:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e289:	e8 76 99 00 00       	call   c0017c04 <lockScheduler()>
c000e28e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e293:	8b 00                	mov    eax,DWORD PTR [eax]
c000e295:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e298:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e29e:	83 ec 04             	sub    esp,0x4
c000e2a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e2a5:	6a 01                	push   0x1
c000e2a7:	50                   	push   eax
c000e2a8:	e8 9b ff ff ff       	call   c000e248 <VAS::mapOtherVASIn(bool, VAS*)>
c000e2ad:	83 c4 10             	add    esp,0x10
c000e2b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e2b8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e2c0:	0f 8f d7 00 00 00    	jg     c000e39d <VAS::~VAS()+0x11f>
c000e2c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e2cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2d1:	c1 e2 02             	shl    edx,0x2
c000e2d4:	01 d0                	add    eax,edx
c000e2d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e0:	83 e0 01             	and    eax,0x1
c000e2e3:	0f 84 ab 00 00 00    	je     c000e394 <VAS::~VAS()+0x116>
c000e2e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2f1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2f9:	7f 75                	jg     c000e370 <VAS::~VAS()+0xf2>
c000e2fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2ff:	c1 e0 0a             	shl    eax,0xa
c000e302:	89 c2                	mov    edx,eax
c000e304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e308:	01 d0                	add    eax,edx
c000e30a:	c1 e0 0c             	shl    eax,0xc
c000e30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e311:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e316:	8b 00                	mov    eax,DWORD PTR [eax]
c000e318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e31b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e321:	83 ec 04             	sub    esp,0x4
c000e324:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e328:	6a 01                	push   0x1
c000e32a:	50                   	push   eax
c000e32b:	e8 6e fd ff ff       	call   c000e09e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e33b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e33d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e345:	25 01 04 00 00       	and    eax,0x401
c000e34a:	3d 01 04 00 00       	cmp    eax,0x401
c000e34f:	75 19                	jne    c000e36a <VAS::~VAS()+0xec>
c000e351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e355:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 13 de ff ff       	call   c000c176 <Phys::freePage(unsigned long)>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e36a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e36e:	eb 81                	jmp    c000e2f1 <VAS::~VAS()+0x73>
c000e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e374:	25 00 04 00 00       	and    eax,0x400
c000e379:	74 19                	je     c000e394 <VAS::~VAS()+0x116>
c000e37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e384:	83 ec 0c             	sub    esp,0xc
c000e387:	50                   	push   eax
c000e388:	e8 e9 dd ff ff       	call   c000c176 <Phys::freePage(unsigned long)>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e394:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e398:	e9 1b ff ff ff       	jmp    c000e2b8 <VAS::~VAS()+0x3a>
c000e39d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e3a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	50                   	push   eax
c000e3a8:	e8 3c fd ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e3b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3b7:	83 ec 0c             	sub    esp,0xc
c000e3ba:	50                   	push   eax
c000e3bb:	e8 b6 dd ff ff       	call   c000c176 <Phys::freePage(unsigned long)>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3cb:	c1 e0 02             	shl    eax,0x2
c000e3ce:	83 ec 08             	sub    esp,0x8
c000e3d1:	50                   	push   eax
c000e3d2:	68 0c 08 02 c0       	push   0xc002080c
c000e3d7:	e8 57 0c 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e3dc:	83 c4 10             	add    esp,0x10
c000e3df:	e8 22 98 00 00       	call   c0017c06 <unlockScheduler()>
c000e3e4:	90                   	nop
c000e3e5:	83 c4 2c             	add    esp,0x2c
c000e3e8:	c3                   	ret    
c000e3e9:	90                   	nop

c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e3ea:	55                   	push   ebp
c000e3eb:	57                   	push   edi
c000e3ec:	56                   	push   esi
c000e3ed:	53                   	push   ebx
c000e3ee:	83 ec 1c             	sub    esp,0x1c
c000e3f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3f9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3ff:	77 08                	ja     c000e409 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e401:	0f 20 d8             	mov    eax,cr3
c000e404:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e407:	75 47                	jne    c000e450 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e409:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e40d:	09 d8                	or     eax,ebx
c000e40f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e414:	75 57                	jne    c000e46d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e416:	89 de                	mov    esi,ebx
c000e418:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e41b:	c1 ee 16             	shr    esi,0x16
c000e41e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e425:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e429:	74 54                	je     c000e47f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e42b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e42f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e435:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e439:	c1 e6 0c             	shl    esi,0xc
c000e43c:	c1 eb 0a             	shr    ebx,0xa
c000e43f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e445:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e448:	83 c4 1c             	add    esp,0x1c
c000e44b:	5b                   	pop    ebx
c000e44c:	5e                   	pop    esi
c000e44d:	5f                   	pop    edi
c000e44e:	5d                   	pop    ebp
c000e44f:	c3                   	ret    
c000e450:	83 ec 0c             	sub    esp,0xc
c000e453:	68 2c 08 02 c0       	push   0xc002082c
c000e458:	e8 d6 0b 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e45d:	83 c4 10             	add    esp,0x10
c000e460:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e464:	09 d8                	or     eax,ebx
c000e466:	a9 ff 0f 00 00       	test   eax,0xfff
c000e46b:	74 a9                	je     c000e416 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e46d:	83 ec 0c             	sub    esp,0xc
c000e470:	68 94 08 02 c0       	push   0xc0020894
c000e475:	e8 4e 68 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e47a:	83 c4 10             	add    esp,0x10
c000e47d:	eb 97                	jmp    c000e416 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e483:	e8 78 dd ff ff       	call   c000c200 <Phys::allocatePage()>
c000e488:	89 c5                	mov    ebp,eax
c000e48a:	e8 b4 fa ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e48f:	83 ec 0c             	sub    esp,0xc
c000e492:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e496:	6a 01                	push   0x1
c000e498:	e8 16 f9 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000e49d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e4a4:	6a 01                	push   0x1
c000e4a6:	50                   	push   eax
c000e4a7:	55                   	push   ebp
c000e4a8:	81 cd 07 04 00 00    	or     ebp,0x407
c000e4ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e4b2:	51                   	push   ecx
c000e4b3:	e8 1e 02 00 00       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4b8:	83 c4 1c             	add    esp,0x1c
c000e4bb:	68 00 10 00 00       	push   0x1000
c000e4c0:	6a 00                	push   0x0
c000e4c2:	50                   	push   eax
c000e4c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c7:	e8 3c 21 ff ff       	call   c0000608 <memset>
c000e4cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e4d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e4d3:	e8 11 fc ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e4d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e4e5:	e9 41 ff ff ff       	jmp    c000e42b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e4ea <VAS::allocatePages(int, int)>:
c000e4ea:	55                   	push   ebp
c000e4eb:	57                   	push   edi
c000e4ec:	56                   	push   esi
c000e4ed:	53                   	push   ebx
c000e4ee:	83 ec 1c             	sub    esp,0x1c
c000e4f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4f5:	e8 c8 5a 00 00       	call   c0013fc2 <thisCPU()>
c000e4fa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e500:	83 e0 01             	and    eax,0x1
c000e503:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e507:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e50b:	0f 85 d7 00 00 00    	jne    c000e5e8 <VAS::allocatePages(int, int)+0xfe>
c000e511:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e518:	85 c0                	test   eax,eax
c000e51a:	0f 84 ac 00 00 00    	je     c000e5cc <VAS::allocatePages(int, int)+0xe2>
c000e520:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e524:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e528:	c1 e6 0c             	shl    esi,0xc
c000e52b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e52f:	85 c0                	test   eax,eax
c000e531:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e534:	7e 33                	jle    c000e569 <VAS::allocatePages(int, int)+0x7f>
c000e536:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e53a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e53e:	81 cd 00 04 00 00    	or     ebp,0x400
c000e544:	e8 b7 dc ff ff       	call   c000c200 <Phys::allocatePage()>
c000e549:	55                   	push   ebp
c000e54a:	53                   	push   ebx
c000e54b:	50                   	push   eax
c000e54c:	57                   	push   edi
c000e54d:	e8 98 fe ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000e552:	83 c4 10             	add    esp,0x10
c000e555:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e55a:	74 03                	je     c000e55f <VAS::allocatePages(int, int)+0x75>
c000e55c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e55f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e565:	39 de                	cmp    esi,ebx
c000e567:	75 db                	jne    c000e544 <VAS::allocatePages(int, int)+0x5a>
c000e569:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e56e:	74 3f                	je     c000e5af <VAS::allocatePages(int, int)+0xc5>
c000e570:	c1 ee 0a             	shr    esi,0xa
c000e573:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e577:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e57d:	c1 eb 0a             	shr    ebx,0xa
c000e580:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e586:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e58c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e592:	39 f3                	cmp    ebx,esi
c000e594:	77 0d                	ja     c000e5a3 <VAS::allocatePages(int, int)+0xb9>
c000e596:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e599:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e59f:	39 de                	cmp    esi,ebx
c000e5a1:	73 f3                	jae    c000e596 <VAS::allocatePages(int, int)+0xac>
c000e5a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a7:	83 c4 1c             	add    esp,0x1c
c000e5aa:	5b                   	pop    ebx
c000e5ab:	5e                   	pop    esi
c000e5ac:	5f                   	pop    edi
c000e5ad:	5d                   	pop    ebp
c000e5ae:	c3                   	ret    
c000e5af:	e8 d1 04 01 00       	call   c001ea85 <CPU::readCR3()>
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	50                   	push   eax
c000e5b8:	e8 da 04 01 00       	call   c001ea97 <CPU::writeCR3(unsigned long)>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c4:	83 c4 1c             	add    esp,0x1c
c000e5c7:	5b                   	pop    ebx
c000e5c8:	5e                   	pop    esi
c000e5c9:	5f                   	pop    edi
c000e5ca:	5d                   	pop    ebp
c000e5cb:	c3                   	ret    
c000e5cc:	83 ec 0c             	sub    esp,0xc
c000e5cf:	68 b8 08 02 c0       	push   0xc00208b8
c000e5d4:	e8 ef 66 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000e5d9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5e0:	83 c4 10             	add    esp,0x10
c000e5e3:	e9 38 ff ff ff       	jmp    c000e520 <VAS::allocatePages(int, int)+0x36>
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e5ef:	e8 bf f7 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000e5f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e600:	0f 87 94 00 00 00    	ja     c000e69a <VAS::allocatePages(int, int)+0x1b0>
c000e606:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e60a:	85 d2                	test   edx,edx
c000e60c:	7e 3c                	jle    c000e64a <VAS::allocatePages(int, int)+0x160>
c000e60e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e612:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e616:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e61a:	c1 e5 0c             	shl    ebp,0xc
c000e61d:	81 ce 00 04 00 00    	or     esi,0x400
c000e623:	01 dd                	add    ebp,ebx
c000e625:	e8 d6 db ff ff       	call   c000c200 <Phys::allocatePage()>
c000e62a:	56                   	push   esi
c000e62b:	53                   	push   ebx
c000e62c:	50                   	push   eax
c000e62d:	57                   	push   edi
c000e62e:	e8 b7 fd ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e63b:	74 03                	je     c000e640 <VAS::allocatePages(int, int)+0x156>
c000e63d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e640:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e646:	39 dd                	cmp    ebp,ebx
c000e648:	75 db                	jne    c000e625 <VAS::allocatePages(int, int)+0x13b>
c000e64a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e64f:	0f 84 5a ff ff ff    	je     c000e5af <VAS::allocatePages(int, int)+0xc5>
c000e655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e659:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e65d:	89 d3                	mov    ebx,edx
c000e65f:	c1 e0 0c             	shl    eax,0xc
c000e662:	c1 eb 0a             	shr    ebx,0xa
c000e665:	01 d0                	add    eax,edx
c000e667:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e66d:	c1 e8 0a             	shr    eax,0xa
c000e670:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e676:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e67b:	2d 00 00 40 00       	sub    eax,0x400000
c000e680:	39 c3                	cmp    ebx,eax
c000e682:	0f 87 1b ff ff ff    	ja     c000e5a3 <VAS::allocatePages(int, int)+0xb9>
c000e688:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e68b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e691:	39 d8                	cmp    eax,ebx
c000e693:	73 f3                	jae    c000e688 <VAS::allocatePages(int, int)+0x19e>
c000e695:	e9 09 ff ff ff       	jmp    c000e5a3 <VAS::allocatePages(int, int)+0xb9>
c000e69a:	e8 23 59 00 00       	call   c0013fc2 <thisCPU()>
c000e69f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e6a6:	0f 84 5a ff ff ff    	je     c000e606 <VAS::allocatePages(int, int)+0x11c>
c000e6ac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e6b4:	e9 4d ff ff ff       	jmp    c000e606 <VAS::allocatePages(int, int)+0x11c>
c000e6b9:	90                   	nop

c000e6ba <VAS::setCPUSpecific(unsigned long)>:
c000e6ba:	83 ec 0c             	sub    esp,0xc
c000e6bd:	6a 05                	push   0x5
c000e6bf:	68 00 00 40 c2       	push   0xc2400000
c000e6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6cc:	e8 19 fd ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6d1:	83 c4 1c             	add    esp,0x1c
c000e6d4:	c3                   	ret    
c000e6d5:	90                   	nop

c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e6d6:	55                   	push   ebp
c000e6d7:	57                   	push   edi
c000e6d8:	56                   	push   esi
c000e6d9:	53                   	push   ebx
c000e6da:	83 ec 1c             	sub    esp,0x1c
c000e6dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e6e5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e6e9:	e8 d4 58 00 00       	call   c0013fc2 <thisCPU()>
c000e6ee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6f4:	83 e0 01             	and    eax,0x1
c000e6f7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ff:	85 c0                	test   eax,eax
c000e701:	7e 39                	jle    c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e703:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e707:	89 f3                	mov    ebx,esi
c000e709:	c1 e0 0c             	shl    eax,0xc
c000e70c:	01 f0                	add    eax,esi
c000e70e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e712:	55                   	push   ebp
c000e713:	53                   	push   ebx
c000e714:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e718:	29 f0                	sub    eax,esi
c000e71a:	01 d8                	add    eax,ebx
c000e71c:	50                   	push   eax
c000e71d:	57                   	push   edi
c000e71e:	e8 c7 fc ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000e723:	83 c4 10             	add    esp,0x10
c000e726:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e72b:	74 03                	je     c000e730 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e72d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e730:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e736:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e73a:	75 d6                	jne    c000e712 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e73c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e741:	74 42                	je     c000e785 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e743:	89 f3                	mov    ebx,esi
c000e745:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e749:	c1 eb 0a             	shr    ebx,0xa
c000e74c:	c1 e0 0c             	shl    eax,0xc
c000e74f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e755:	01 f0                	add    eax,esi
c000e757:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e75d:	c1 e8 0a             	shr    eax,0xa
c000e760:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e765:	2d 00 00 40 00       	sub    eax,0x400000
c000e76a:	39 c3                	cmp    ebx,eax
c000e76c:	77 0d                	ja     c000e77b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e76e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e771:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e777:	39 d8                	cmp    eax,ebx
c000e779:	73 f3                	jae    c000e76e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e77b:	83 c4 1c             	add    esp,0x1c
c000e77e:	89 f0                	mov    eax,esi
c000e780:	5b                   	pop    ebx
c000e781:	5e                   	pop    esi
c000e782:	5f                   	pop    edi
c000e783:	5d                   	pop    ebp
c000e784:	c3                   	ret    
c000e785:	e8 fb 02 01 00       	call   c001ea85 <CPU::readCR3()>
c000e78a:	83 ec 0c             	sub    esp,0xc
c000e78d:	50                   	push   eax
c000e78e:	e8 04 03 01 00       	call   c001ea97 <CPU::writeCR3(unsigned long)>
c000e793:	89 f0                	mov    eax,esi
c000e795:	83 c4 10             	add    esp,0x10
c000e798:	83 c4 1c             	add    esp,0x1c
c000e79b:	5b                   	pop    ebx
c000e79c:	5e                   	pop    esi
c000e79d:	5f                   	pop    edi
c000e79e:	5d                   	pop    ebp
c000e79f:	c3                   	ret    

c000e7a0 <VAS::VAS(VAS*)>:
c000e7a0:	53                   	push   ebx
c000e7a1:	83 ec 38             	sub    esp,0x38
c000e7a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e7af:	e8 77 94 00 00       	call   c0017c2b <lockStuff()>
c000e7b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e7bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e7c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7c6:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e7c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7cd:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e7d0:	e8 2b da ff ff       	call   c000c200 <Phys::allocatePage()>
c000e7d5:	89 c2                	mov    edx,eax
c000e7d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e7de:	e8 60 f7 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e7e3:	89 c3                	mov    ebx,eax
c000e7e5:	83 ec 0c             	sub    esp,0xc
c000e7e8:	6a 01                	push   0x1
c000e7ea:	e8 c4 f5 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	89 c2                	mov    edx,eax
c000e7f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7fb:	83 ec 0c             	sub    esp,0xc
c000e7fe:	6a 03                	push   0x3
c000e800:	6a 01                	push   0x1
c000e802:	52                   	push   edx
c000e803:	50                   	push   eax
c000e804:	53                   	push   ebx
c000e805:	e8 cc fe ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	89 c2                	mov    edx,eax
c000e80f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e813:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e816:	83 ec 04             	sub    esp,0x4
c000e819:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e81d:	6a 01                	push   0x1
c000e81f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e823:	e8 20 fa ff ff       	call   c000e248 <VAS::mapOtherVASIn(bool, VAS*)>
c000e828:	83 c4 10             	add    esp,0x10
c000e82b:	83 ec 0c             	sub    esp,0xc
c000e82e:	6a 01                	push   0x1
c000e830:	e8 7e f5 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e83c:	83 ec 0c             	sub    esp,0xc
c000e83f:	6a 01                	push   0x1
c000e841:	e8 6d f5 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e84d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e855:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e85d:	0f 8f 5e 02 00 00    	jg     c000eac1 <VAS::VAS(VAS*)+0x321>
c000e863:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e868:	8b 00                	mov    eax,DWORD PTR [eax]
c000e86a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e86d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e873:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e876:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e87a:	c1 e2 02             	shl    edx,0x2
c000e87d:	01 d0                	add    eax,edx
c000e87f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e881:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e885:	83 ec 08             	sub    esp,0x8
c000e888:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e88c:	68 2b 0a 02 c0       	push   0xc0020a2b
c000e891:	e8 9d 07 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e89d:	25 01 04 00 00       	and    eax,0x401
c000e8a2:	3d 01 04 00 00       	cmp    eax,0x401
c000e8a7:	0f 85 e5 01 00 00    	jne    c000ea92 <VAS::VAS(VAS*)+0x2f2>
c000e8ad:	83 ec 0c             	sub    esp,0xc
c000e8b0:	68 3c 0a 02 c0       	push   0xc0020a3c
c000e8b5:	e8 79 07 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	e8 3e d9 ff ff       	call   c000c200 <Phys::allocatePage()>
c000e8c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8c6:	83 ec 08             	sub    esp,0x8
c000e8c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e8cd:	68 52 0a 02 c0       	push   0xc0020a52
c000e8d2:	e8 5c 07 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e8d7:	83 c4 10             	add    esp,0x10
c000e8da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8de:	25 ff 0f 00 00       	and    eax,0xfff
c000e8e3:	89 c1                	mov    ecx,eax
c000e8e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e8ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8f0:	c1 e2 02             	shl    edx,0x2
c000e8f3:	01 c2                	add    edx,eax
c000e8f5:	89 c8                	mov    eax,ecx
c000e8f7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e8fb:	89 02                	mov    DWORD PTR [edx],eax
c000e8fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e905:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e90d:	0f 8f a5 01 00 00    	jg     c000eab8 <VAS::VAS(VAS*)+0x318>
c000e913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e917:	c1 e0 0a             	shl    eax,0xa
c000e91a:	89 c2                	mov    edx,eax
c000e91c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e920:	01 d0                	add    eax,edx
c000e922:	c1 e0 0c             	shl    eax,0xc
c000e925:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e929:	83 ec 08             	sub    esp,0x8
c000e92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e930:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e934:	e8 91 f7 ff ff       	call   c000e0ca <VAS::getPageTableEntry(unsigned long)>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e93e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e942:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e947:	8b 00                	mov    eax,DWORD PTR [eax]
c000e949:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e94c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e952:	83 ec 04             	sub    esp,0x4
c000e955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e959:	6a 01                	push   0x1
c000e95b:	50                   	push   eax
c000e95c:	e8 3d f7 ff ff       	call   c000e09e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e968:	83 ec 04             	sub    esp,0x4
c000e96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e973:	68 e4 08 02 c0       	push   0xc00208e4
c000e978:	e8 b6 06 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e97d:	83 c4 10             	add    esp,0x10
c000e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e984:	25 01 04 00 00       	and    eax,0x401
c000e989:	3d 01 04 00 00       	cmp    eax,0x401
c000e98e:	0f 85 db 00 00 00    	jne    c000ea6f <VAS::VAS(VAS*)+0x2cf>
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	68 61 0a 02 c0       	push   0xc0020a61
c000e99c:	e8 92 06 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e9a1:	83 c4 10             	add    esp,0x10
c000e9a4:	e8 57 d8 ff ff       	call   c000c200 <Phys::allocatePage()>
c000e9a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9ad:	83 ec 08             	sub    esp,0x8
c000e9b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9b4:	68 70 0a 02 c0       	push   0xc0020a70
c000e9b9:	e8 75 06 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e9be:	83 c4 10             	add    esp,0x10
c000e9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e9ca:	83 ec 08             	sub    esp,0x8
c000e9cd:	50                   	push   eax
c000e9ce:	68 84 0a 02 c0       	push   0xc0020a84
c000e9d3:	e8 5b 06 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000e9d8:	83 c4 10             	add    esp,0x10
c000e9db:	e8 63 f5 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e9e0:	83 ec 0c             	sub    esp,0xc
c000e9e3:	6a 03                	push   0x3
c000e9e5:	6a 01                	push   0x1
c000e9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e9eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e9ef:	50                   	push   eax
c000e9f0:	e8 e1 fc ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9f5:	83 c4 20             	add    esp,0x20
c000e9f8:	e8 46 f5 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000e9fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea01:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ea07:	83 ec 0c             	sub    esp,0xc
c000ea0a:	6a 03                	push   0x3
c000ea0c:	6a 01                	push   0x1
c000ea0e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ea12:	52                   	push   edx
c000ea13:	50                   	push   eax
c000ea14:	e8 bd fc ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea19:	83 c4 20             	add    esp,0x20
c000ea1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea24:	83 ec 04             	sub    esp,0x4
c000ea27:	68 00 10 00 00       	push   0x1000
c000ea2c:	52                   	push   edx
c000ea2d:	50                   	push   eax
c000ea2e:	e8 9f 1b ff ff       	call   c00005d2 <memcpy>
c000ea33:	83 c4 10             	add    esp,0x10
c000ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3a:	25 ff 0f 00 00       	and    eax,0xfff
c000ea3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea43:	89 c2                	mov    edx,eax
c000ea45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea49:	89 10                	mov    DWORD PTR [eax],edx
c000ea4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4f:	25 ff 0f 00 00       	and    eax,0xfff
c000ea54:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea58:	83 ec 04             	sub    esp,0x4
c000ea5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea5f:	50                   	push   eax
c000ea60:	68 08 09 02 c0       	push   0xc0020908
c000ea65:	e8 c9 05 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	eb 1a                	jmp    c000ea89 <VAS::VAS(VAS*)+0x2e9>
c000ea6f:	83 ec 0c             	sub    esp,0xc
c000ea72:	68 98 0a 02 c0       	push   0xc0020a98
c000ea77:	e8 b7 05 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000ea7c:	83 c4 10             	add    esp,0x10
c000ea7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea87:	89 10                	mov    DWORD PTR [eax],edx
c000ea89:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ea8d:	e9 73 fe ff ff       	jmp    c000e905 <VAS::VAS(VAS*)+0x165>
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	68 9c 0a 02 c0       	push   0xc0020a9c
c000ea9a:	e8 94 05 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eaa9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eaad:	c1 e2 02             	shl    edx,0x2
c000eab0:	01 c2                	add    edx,eax
c000eab2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab6:	89 02                	mov    DWORD PTR [edx],eax
c000eab8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000eabc:	e9 94 fd ff ff       	jmp    c000e855 <VAS::VAS(VAS*)+0xb5>
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eac8:	e8 1c f6 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000eacd:	83 c4 10             	add    esp,0x10
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ead7:	e8 0d f6 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	e8 d9 94 00 00       	call   c0017fbd <unlockStuff()>
c000eae4:	90                   	nop
c000eae5:	83 c4 38             	add    esp,0x38
c000eae8:	5b                   	pop    ebx
c000eae9:	c3                   	ret    

c000eaea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000eaea:	55                   	push   ebp
c000eaeb:	57                   	push   edi
c000eaec:	56                   	push   esi
c000eaed:	53                   	push   ebx
c000eaee:	83 ec 1c             	sub    esp,0x1c
c000eaf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaf9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000eafd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb01:	a9 ff 0f 00 00       	test   eax,0xfff
c000eb06:	75 4a                	jne    c000eb52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000eb08:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eb0c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb0f:	c1 eb 16             	shr    ebx,0x16
c000eb12:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eb19:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eb1d:	74 4d                	je     c000eb6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000eb1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb23:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000eb27:	c1 e8 0a             	shr    eax,0xa
c000eb2a:	80 fa 01             	cmp    dl,0x1
c000eb2d:	19 d2                	sbb    edx,edx
c000eb2f:	c1 e3 0c             	shl    ebx,0xc
c000eb32:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eb36:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eb3c:	25 fc 0f 00 00       	and    eax,0xffc
c000eb41:	01 d8                	add    eax,ebx
c000eb43:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eb4a:	83 c4 1c             	add    esp,0x1c
c000eb4d:	5b                   	pop    ebx
c000eb4e:	5e                   	pop    esi
c000eb4f:	5f                   	pop    edi
c000eb50:	5d                   	pop    ebp
c000eb51:	c3                   	ret    
c000eb52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eb56:	83 ec 0c             	sub    esp,0xc
c000eb59:	68 2c 09 02 c0       	push   0xc002092c
c000eb5e:	e8 65 61 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb6a:	eb 9c                	jmp    c000eb08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eb6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb70:	e8 8b d6 ff ff       	call   c000c200 <Phys::allocatePage()>
c000eb75:	89 c5                	mov    ebp,eax
c000eb77:	e8 c7 f3 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000eb7c:	83 ec 0c             	sub    esp,0xc
c000eb7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb83:	6a 01                	push   0x1
c000eb85:	e8 29 f2 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000eb8a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb91:	6a 01                	push   0x1
c000eb93:	50                   	push   eax
c000eb94:	55                   	push   ebp
c000eb95:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb9b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb9f:	51                   	push   ecx
c000eba0:	e8 31 fb ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eba5:	83 c4 1c             	add    esp,0x1c
c000eba8:	68 00 10 00 00       	push   0x1000
c000ebad:	6a 00                	push   0x0
c000ebaf:	50                   	push   eax
c000ebb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebb4:	e8 4f 1a ff ff       	call   c0000608 <memset>
c000ebb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ebbd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ebc0:	e8 24 f5 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000ebc5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ebce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ebd2:	e9 48 ff ff ff       	jmp    c000eb1f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ebd7:	90                   	nop

c000ebd8 <VAS::VAS(bool)>:
c000ebd8:	53                   	push   ebx
c000ebd9:	83 ec 28             	sub    esp,0x28
c000ebdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebe0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ebe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebe8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ebef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ebf7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ebfa:	e8 01 d6 ff ff       	call   c000c200 <Phys::allocatePage()>
c000ebff:	89 c2                	mov    edx,eax
c000ec01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec08:	e8 36 f3 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c000ec0d:	89 c3                	mov    ebx,eax
c000ec0f:	83 ec 0c             	sub    esp,0xc
c000ec12:	6a 01                	push   0x1
c000ec14:	e8 9a f1 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	89 c2                	mov    edx,eax
c000ec1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec25:	83 ec 0c             	sub    esp,0xc
c000ec28:	6a 03                	push   0x3
c000ec2a:	6a 01                	push   0x1
c000ec2c:	52                   	push   edx
c000ec2d:	50                   	push   eax
c000ec2e:	53                   	push   ebx
c000ec2f:	e8 a2 fa ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec34:	83 c4 20             	add    esp,0x20
c000ec37:	89 c2                	mov    edx,eax
c000ec39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec40:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ec48:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ec50:	7f 1c                	jg     c000ec6e <VAS::VAS(bool)+0x96>
c000ec52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec5d:	c1 e2 02             	shl    edx,0x2
c000ec60:	01 d0                	add    eax,edx
c000ec62:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec68:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ec6c:	eb da                	jmp    c000ec48 <VAS::VAS(bool)+0x70>
c000ec6e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ec76:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ec7e:	7f 71                	jg     c000ecf1 <VAS::VAS(bool)+0x119>
c000ec80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec84:	2d 00 02 00 00       	sub    eax,0x200
c000ec89:	c1 e0 0c             	shl    eax,0xc
c000ec8c:	83 c8 03             	or     eax,0x3
c000ec8f:	89 c3                	mov    ebx,eax
c000ec91:	e8 2c 53 00 00       	call   c0013fc2 <thisCPU()>
c000ec96:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec9c:	83 e0 10             	and    eax,0x10
c000ec9f:	84 c0                	test   al,al
c000eca1:	74 07                	je     c000ecaa <VAS::VAS(bool)+0xd2>
c000eca3:	b8 00 01 00 00       	mov    eax,0x100
c000eca8:	eb 05                	jmp    c000ecaf <VAS::VAS(bool)+0xd7>
c000ecaa:	b8 00 00 00 00       	mov    eax,0x0
c000ecaf:	09 d8                	or     eax,ebx
c000ecb1:	89 c1                	mov    ecx,eax
c000ecb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecbe:	c1 e2 02             	shl    edx,0x2
c000ecc1:	01 d0                	add    eax,edx
c000ecc3:	89 ca                	mov    edx,ecx
c000ecc5:	89 10                	mov    DWORD PTR [eax],edx
c000ecc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eccb:	2d 40 03 00 00       	sub    eax,0x340
c000ecd0:	83 f8 7f             	cmp    eax,0x7f
c000ecd3:	77 16                	ja     c000eceb <VAS::VAS(bool)+0x113>
c000ecd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ece0:	c1 e2 02             	shl    edx,0x2
c000ece3:	01 d0                	add    eax,edx
c000ece5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eceb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ecef:	eb 85                	jmp    c000ec76 <VAS::VAS(bool)+0x9e>
c000ecf1:	e8 cc 52 00 00       	call   c0013fc2 <thisCPU()>
c000ecf6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecfc:	83 e0 10             	and    eax,0x10
c000ecff:	84 c0                	test   al,al
c000ed01:	74 07                	je     c000ed0a <VAS::VAS(bool)+0x132>
c000ed03:	b8 03 41 00 00       	mov    eax,0x4103
c000ed08:	eb 05                	jmp    c000ed0f <VAS::VAS(bool)+0x137>
c000ed0a:	b8 03 40 00 00       	mov    eax,0x4003
c000ed0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ed13:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ed16:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ed1c:	89 02                	mov    DWORD PTR [edx],eax
c000ed1e:	e8 9f 52 00 00       	call   c0013fc2 <thisCPU()>
c000ed23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ed29:	83 ec 08             	sub    esp,0x8
c000ed2c:	50                   	push   eax
c000ed2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed31:	e8 84 f9 ff ff       	call   c000e6ba <VAS::setCPUSpecific(unsigned long)>
c000ed36:	83 c4 10             	add    esp,0x10
c000ed39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed3d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ed40:	e8 7d 52 00 00       	call   c0013fc2 <thisCPU()>
c000ed45:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed4b:	83 e0 10             	and    eax,0x10
c000ed4e:	84 c0                	test   al,al
c000ed50:	74 07                	je     c000ed59 <VAS::VAS(bool)+0x181>
c000ed52:	b8 00 01 00 00       	mov    eax,0x100
c000ed57:	eb 05                	jmp    c000ed5e <VAS::VAS(bool)+0x186>
c000ed59:	b8 00 00 00 00       	mov    eax,0x0
c000ed5e:	09 d8                	or     eax,ebx
c000ed60:	89 c2                	mov    edx,eax
c000ed62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed66:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed69:	05 fc 0f 00 00       	add    eax,0xffc
c000ed6e:	83 ca 03             	or     edx,0x3
c000ed71:	89 10                	mov    DWORD PTR [eax],edx
c000ed73:	e8 4a 52 00 00       	call   c0013fc2 <thisCPU()>
c000ed78:	83 ec 0c             	sub    esp,0xc
c000ed7b:	50                   	push   eax
c000ed7c:	e8 9f 19 00 00       	call   c0010720 <Device::getName()>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	83 ec 08             	sub    esp,0x8
c000ed87:	68 ac 0a 02 c0       	push   0xc0020aac
c000ed8c:	50                   	push   eax
c000ed8d:	e8 73 19 ff ff       	call   c0000705 <strcmp>
c000ed92:	83 c4 10             	add    esp,0x10
c000ed95:	85 c0                	test   eax,eax
c000ed97:	0f 94 c0             	sete   al
c000ed9a:	84 c0                	test   al,al
c000ed9c:	74 64                	je     c000ee02 <VAS::VAS(bool)+0x22a>
c000ed9e:	e8 44 8e 00 00       	call   c0017be7 <disableIRQs()>
c000eda3:	e8 1a 52 00 00       	call   c0013fc2 <thisCPU()>
c000eda8:	05 7c 09 00 00       	add    eax,0x97c
c000edad:	83 ec 0c             	sub    esp,0xc
c000edb0:	50                   	push   eax
c000edb1:	e8 12 c9 ff ff       	call   c000b6c8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000edb6:	83 c4 10             	add    esp,0x10
c000edb9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000edbe:	89 c3                	mov    ebx,eax
c000edc0:	e8 fd 51 00 00       	call   c0013fc2 <thisCPU()>
c000edc5:	05 7c 09 00 00       	add    eax,0x97c
c000edca:	83 ec 0c             	sub    esp,0xc
c000edcd:	50                   	push   eax
c000edce:	e8 f5 c8 ff ff       	call   c000b6c8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000edd3:	83 c4 10             	add    esp,0x10
c000edd6:	83 ec 08             	sub    esp,0x8
c000edd9:	50                   	push   eax
c000edda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edde:	e8 e7 f2 ff ff       	call   c000e0ca <VAS::getPageTableEntry(unsigned long)>
c000ede3:	83 c4 10             	add    esp,0x10
c000ede6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ede8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eded:	6a 11                	push   0x11
c000edef:	53                   	push   ebx
c000edf0:	50                   	push   eax
c000edf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edf5:	e8 f0 f5 ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000edfa:	83 c4 10             	add    esp,0x10
c000edfd:	e8 f3 8d 00 00       	call   c0017bf5 <enableIRQs()>
c000ee02:	90                   	nop
c000ee03:	83 c4 28             	add    esp,0x28
c000ee06:	5b                   	pop    ebx
c000ee07:	c3                   	ret    

c000ee08 <mapVASFirstTime>:
c000ee08:	55                   	push   ebp
c000ee09:	57                   	push   edi
c000ee0a:	56                   	push   esi
c000ee0b:	53                   	push   ebx
c000ee0c:	83 ec 0c             	sub    esp,0xc
c000ee0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee14:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ee17:	4a                   	dec    edx
c000ee18:	0f 84 99 00 00 00    	je     c000eeb7 <mapVASFirstTime+0xaf>
c000ee1e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ee21:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ee24:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ee29:	c1 e5 15             	shl    ebp,0x15
c000ee2c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ee31:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ee37:	29 eb                	sub    ebx,ebp
c000ee39:	29 ee                	sub    esi,ebp
c000ee3b:	e8 c0 d3 ff ff       	call   c000c200 <Phys::allocatePage()>
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 03 04 00 00       	push   0x403
c000ee48:	6a 01                	push   0x1
c000ee4a:	53                   	push   ebx
c000ee4b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ee51:	50                   	push   eax
c000ee52:	57                   	push   edi
c000ee53:	e8 7e f8 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee58:	83 c4 20             	add    esp,0x20
c000ee5b:	39 f3                	cmp    ebx,esi
c000ee5d:	75 dc                	jne    c000ee3b <mapVASFirstTime+0x33>
c000ee5f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ee64:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ee69:	29 ee                	sub    esi,ebp
c000ee6b:	29 e8                	sub    eax,ebp
c000ee6d:	89 c5                	mov    ebp,eax
c000ee6f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ee73:	19 db                	sbb    ebx,ebx
c000ee75:	e8 86 d3 ff ff       	call   c000c200 <Phys::allocatePage()>
c000ee7a:	83 e3 04             	and    ebx,0x4
c000ee7d:	83 ec 0c             	sub    esp,0xc
c000ee80:	81 c3 03 04 00 00    	add    ebx,0x403
c000ee86:	53                   	push   ebx
c000ee87:	6a 01                	push   0x1
c000ee89:	56                   	push   esi
c000ee8a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee90:	50                   	push   eax
c000ee91:	57                   	push   edi
c000ee92:	e8 3f f8 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee97:	83 c4 20             	add    esp,0x20
c000ee9a:	39 f5                	cmp    ebp,esi
c000ee9c:	75 d1                	jne    c000ee6f <mapVASFirstTime+0x67>
c000ee9e:	e8 e2 fb 00 00       	call   c001ea85 <CPU::readCR3()>
c000eea3:	83 ec 0c             	sub    esp,0xc
c000eea6:	50                   	push   eax
c000eea7:	e8 eb fb 00 00       	call   c001ea97 <CPU::writeCR3(unsigned long)>
c000eeac:	83 c4 10             	add    esp,0x10
c000eeaf:	83 c4 0c             	add    esp,0xc
c000eeb2:	5b                   	pop    ebx
c000eeb3:	5e                   	pop    esi
c000eeb4:	5f                   	pop    edi
c000eeb5:	5d                   	pop    ebp
c000eeb6:	c3                   	ret    
c000eeb7:	83 ec 0c             	sub    esp,0xc
c000eeba:	68 ba 0a 02 c0       	push   0xc0020aba
c000eebf:	e8 6f 01 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000eec4:	83 c4 10             	add    esp,0x10
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	5b                   	pop    ebx
c000eecb:	5e                   	pop    esi
c000eecc:	5f                   	pop    edi
c000eecd:	5d                   	pop    ebp
c000eece:	c3                   	ret    

c000eecf <__cxa_atexit>:
c000eecf:	31 c0                	xor    eax,eax
c000eed1:	c3                   	ret    

c000eed2 <__cxa_finalize>:
c000eed2:	c3                   	ret    

c000eed3 <__stack_chk_fail>:
c000eed3:	55                   	push   ebp
c000eed4:	89 e5                	mov    ebp,esp
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000eedc:	68 d3 0a 02 c0       	push   0xc0020ad3
c000eee1:	e8 4d 01 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000eee6:	58                   	pop    eax
c000eee7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eeea:	5a                   	pop    edx
c000eeeb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eeee:	68 d3 0a 02 c0       	push   0xc0020ad3
c000eef3:	e8 3b 01 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000eef8:	59                   	pop    ecx
c000eef9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eefc:	5a                   	pop    edx
c000eefd:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ef02:	68 d3 0a 02 c0       	push   0xc0020ad3
c000ef07:	e8 27 01 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000ef0c:	59                   	pop    ecx
c000ef0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef10:	5a                   	pop    edx
c000ef11:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef13:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef15:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ef18:	68 d3 0a 02 c0       	push   0xc0020ad3
c000ef1d:	e8 11 01 00 00       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c000ef22:	c7 04 24 db 0a 02 c0 	mov    DWORD PTR [esp],0xc0020adb
c000ef29:	e8 9a 5d 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000ef2e:	83 c4 10             	add    esp,0x10
c000ef31:	c9                   	leave  
c000ef32:	c3                   	ret    

c000ef33 <__cxa_pure_virtual>:
c000ef33:	83 ec 18             	sub    esp,0x18
c000ef36:	68 f3 0a 02 c0       	push   0xc0020af3
c000ef3b:	e8 88 5d 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c000ef40:	83 c4 1c             	add    esp,0x1c
c000ef43:	c3                   	ret    

c000ef44 <operator new(unsigned long)>:
c000ef44:	e9 0d cd ff ff       	jmp    c000bc56 <malloc>

c000ef49 <operator new[](unsigned long)>:
c000ef49:	e9 08 cd ff ff       	jmp    c000bc56 <malloc>

c000ef4e <operator delete(void*)>:
c000ef4e:	e9 23 cd ff ff       	jmp    c000bc76 <rfree>

c000ef53 <operator delete(void*, unsigned long)>:
c000ef53:	e9 1e cd ff ff       	jmp    c000bc76 <rfree>

c000ef58 <operator delete[](void*)>:
c000ef58:	e9 19 cd ff ff       	jmp    c000bc76 <rfree>

c000ef5d <operator delete[](void*, unsigned long)>:
c000ef5d:	e9 14 cd ff ff       	jmp    c000bc76 <rfree>

c000ef62 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ef62:	57                   	push   edi
c000ef63:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ef68:	56                   	push   esi
c000ef69:	be 08 0b 02 c0       	mov    esi,0xc0020b08
c000ef6e:	53                   	push   ebx
c000ef6f:	83 ec 40             	sub    esp,0x40
c000ef72:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ef76:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ef7a:	fc                   	cld    
c000ef7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef7d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ef81:	83 f9 3e             	cmp    ecx,0x3e
c000ef84:	7e 05                	jle    c000ef8b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ef86:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ef8b:	89 df                	mov    edi,ebx
c000ef8d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef91:	eb 02                	jmp    c000ef95 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef93:	89 c7                	mov    edi,eax
c000ef95:	31 d2                	xor    edx,edx
c000ef97:	46                   	inc    esi
c000ef98:	89 f8                	mov    eax,edi
c000ef9a:	f7 f1                	div    ecx
c000ef9c:	39 cf                	cmp    edi,ecx
c000ef9e:	73 f3                	jae    c000ef93 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000efa0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000efa3:	eb 02                	jmp    c000efa7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000efa5:	89 c3                	mov    ebx,eax
c000efa7:	31 d2                	xor    edx,edx
c000efa9:	4e                   	dec    esi
c000efaa:	89 d8                	mov    eax,ebx
c000efac:	f7 f1                	div    ecx
c000efae:	39 cb                	cmp    ebx,ecx
c000efb0:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000efb4:	88 16                	mov    BYTE PTR [esi],dl
c000efb6:	73 ed                	jae    c000efa5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000efb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efbc:	83 c4 40             	add    esp,0x40
c000efbf:	5b                   	pop    ebx
c000efc0:	5e                   	pop    esi
c000efc1:	5f                   	pop    edi
c000efc2:	c3                   	ret    

c000efc3 <Dbg::logc(char)>:
c000efc3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efc7:	ba fd 03 00 00       	mov    edx,0x3fd
c000efcc:	ec                   	in     al,dx
c000efcd:	a8 20                	test   al,0x20
c000efcf:	74 fb                	je     c000efcc <Dbg::logc(char)+0x9>
c000efd1:	ba f8 03 00 00       	mov    edx,0x3f8
c000efd6:	88 c8                	mov    al,cl
c000efd8:	ee                   	out    dx,al
c000efd9:	c3                   	ret    

c000efda <Dbg::logs(char*)>:
c000efda:	53                   	push   ebx
c000efdb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000efdf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efe2:	84 c0                	test   al,al
c000efe4:	74 0f                	je     c000eff5 <Dbg::logs(char*)+0x1b>
c000efe6:	50                   	push   eax
c000efe7:	43                   	inc    ebx
c000efe8:	e8 d6 ff ff ff       	call   c000efc3 <Dbg::logc(char)>
c000efed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000eff0:	5a                   	pop    edx
c000eff1:	84 c0                	test   al,al
c000eff3:	75 f1                	jne    c000efe6 <Dbg::logs(char*)+0xc>
c000eff5:	5b                   	pop    ebx
c000eff6:	c3                   	ret    

c000eff7 <Dbg::logWriteInt(unsigned int)>:
c000eff7:	83 ec 10             	sub    esp,0x10
c000effa:	6a 0a                	push   0xa
c000effc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f000:	50                   	push   eax
c000f001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f005:	e8 58 ff ff ff       	call   c000ef62 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f00a:	50                   	push   eax
c000f00b:	e8 ca ff ff ff       	call   c000efda <Dbg::logs(char*)>
c000f010:	83 c4 20             	add    esp,0x20
c000f013:	c3                   	ret    

c000f014 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f014:	83 ec 10             	sub    esp,0x10
c000f017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f01b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f01f:	50                   	push   eax
c000f020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f024:	e8 39 ff ff ff       	call   c000ef62 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f029:	50                   	push   eax
c000f02a:	e8 ab ff ff ff       	call   c000efda <Dbg::logs(char*)>
c000f02f:	83 c4 20             	add    esp,0x20
c000f032:	c3                   	ret    

c000f033 <Dbg::kprintf(char const*, ...)>:
c000f033:	55                   	push   ebp
c000f034:	57                   	push   edi
c000f035:	56                   	push   esi
c000f036:	53                   	push   ebx
c000f037:	83 ec 0c             	sub    esp,0xc
c000f03a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f03e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f046:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f049:	84 c0                	test   al,al
c000f04b:	74 4a                	je     c000f097 <Dbg::kprintf(char const*, ...)+0x64>
c000f04d:	31 db                	xor    ebx,ebx
c000f04f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f052:	3c 25                	cmp    al,0x25
c000f054:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f057:	0f 85 e4 00 00 00    	jne    c000f141 <Dbg::kprintf(char const*, ...)+0x10e>
c000f05d:	83 c3 02             	add    ebx,0x2
c000f060:	8a 07                	mov    al,BYTE PTR [edi]
c000f062:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f065:	83 e8 25             	sub    eax,0x25
c000f068:	3c 53                	cmp    al,0x53
c000f06a:	0f 87 ba 00 00 00    	ja     c000f12a <Dbg::kprintf(char const*, ...)+0xf7>
c000f070:	0f b6 c0             	movzx  eax,al
c000f073:	ff 24 85 48 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf4b8]
c000f07a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07e:	89 c8                	mov    eax,ecx
c000f080:	83 c1 04             	add    ecx,0x4
c000f083:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f087:	ff 30                	push   DWORD PTR [eax]
c000f089:	e8 4c ff ff ff       	call   c000efda <Dbg::logs(char*)>
c000f08e:	58                   	pop    eax
c000f08f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f093:	84 c0                	test   al,al
c000f095:	75 b8                	jne    c000f04f <Dbg::kprintf(char const*, ...)+0x1c>
c000f097:	83 c4 0c             	add    esp,0xc
c000f09a:	5b                   	pop    ebx
c000f09b:	5e                   	pop    esi
c000f09c:	5f                   	pop    edi
c000f09d:	5d                   	pop    ebp
c000f09e:	c3                   	ret    
c000f09f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0a3:	89 d0                	mov    eax,edx
c000f0a5:	83 c2 04             	add    edx,0x4
c000f0a8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0ac:	ff 30                	push   DWORD PTR [eax]
c000f0ae:	e8 44 ff ff ff       	call   c000eff7 <Dbg::logWriteInt(unsigned int)>
c000f0b3:	58                   	pop    eax
c000f0b4:	eb d9                	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0ba:	89 d0                	mov    eax,edx
c000f0bc:	83 c2 04             	add    edx,0x4
c000f0bf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f0c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0c6:	50                   	push   eax
c000f0c7:	e8 f7 fe ff ff       	call   c000efc3 <Dbg::logc(char)>
c000f0cc:	58                   	pop    eax
c000f0cd:	eb c0                	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0d3:	89 c8                	mov    eax,ecx
c000f0d5:	83 c1 04             	add    ecx,0x4
c000f0d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0dc:	ff 30                	push   DWORD PTR [eax]
c000f0de:	e8 14 ff ff ff       	call   c000eff7 <Dbg::logWriteInt(unsigned int)>
c000f0e3:	5f                   	pop    edi
c000f0e4:	eb a9                	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ea:	89 c8                	mov    eax,ecx
c000f0ec:	83 c1 04             	add    ecx,0x4
c000f0ef:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0f3:	6a 10                	push   0x10
c000f0f5:	ff 30                	push   DWORD PTR [eax]
c000f0f7:	e8 18 ff ff ff       	call   c000f014 <Dbg::logWriteIntBase(unsigned int, int)>
c000f0fc:	59                   	pop    ecx
c000f0fd:	5f                   	pop    edi
c000f0fe:	eb 8f                	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f100:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f104:	89 d0                	mov    eax,edx
c000f106:	83 c2 08             	add    edx,0x8
c000f109:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f10d:	6a 10                	push   0x10
c000f10f:	ff 30                	push   DWORD PTR [eax]
c000f111:	e8 fe fe ff ff       	call   c000f014 <Dbg::logWriteIntBase(unsigned int, int)>
c000f116:	58                   	pop    eax
c000f117:	5a                   	pop    edx
c000f118:	e9 72 ff ff ff       	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f11d:	6a 25                	push   0x25
c000f11f:	e8 9f fe ff ff       	call   c000efc3 <Dbg::logc(char)>
c000f124:	58                   	pop    eax
c000f125:	e9 65 ff ff ff       	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f12a:	6a 25                	push   0x25
c000f12c:	e8 92 fe ff ff       	call   c000efc3 <Dbg::logc(char)>
c000f131:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f134:	50                   	push   eax
c000f135:	e8 89 fe ff ff       	call   c000efc3 <Dbg::logc(char)>
c000f13a:	5a                   	pop    edx
c000f13b:	59                   	pop    ecx
c000f13c:	e9 4e ff ff ff       	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f141:	50                   	push   eax
c000f142:	89 eb                	mov    ebx,ebp
c000f144:	e8 7a fe ff ff       	call   c000efc3 <Dbg::logc(char)>
c000f149:	89 fd                	mov    ebp,edi
c000f14b:	58                   	pop    eax
c000f14c:	e9 3e ff ff ff       	jmp    c000f08f <Dbg::kprintf(char const*, ...)+0x5c>
c000f151:	90                   	nop

c000f152 <File::read(unsigned long long, void*, int*)>:
c000f152:	53                   	push   ebx
c000f153:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f157:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f15b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f162:	3c 19                	cmp    al,0x19
c000f164:	77 35                	ja     c000f19b <File::read(unsigned long long, void*, int*)+0x49>
c000f166:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c000f16d:	85 c0                	test   eax,eax
c000f16f:	74 2a                	je     c000f19b <File::read(unsigned long long, void*, int*)+0x49>
c000f171:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f177:	85 c0                	test   eax,eax
c000f179:	74 20                	je     c000f19b <File::read(unsigned long long, void*, int*)+0x49>
c000f17b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f17f:	74 21                	je     c000f1a2 <File::read(unsigned long long, void*, int*)+0x50>
c000f181:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f183:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f187:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f18d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f191:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f195:	5b                   	pop    ebx
c000f196:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f199:	ff e0                	jmp    eax
c000f19b:	b8 0b 00 00 00       	mov    eax,0xb
c000f1a0:	eb 05                	jmp    c000f1a7 <File::read(unsigned long long, void*, int*)+0x55>
c000f1a2:	b8 05 00 00 00       	mov    eax,0x5
c000f1a7:	5b                   	pop    ebx
c000f1a8:	c3                   	ret    
c000f1a9:	90                   	nop

c000f1aa <File::write(unsigned long long, void*, int*)>:
c000f1aa:	53                   	push   ebx
c000f1ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1b3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f1ba:	3c 19                	cmp    al,0x19
c000f1bc:	77 35                	ja     c000f1f3 <File::write(unsigned long long, void*, int*)+0x49>
c000f1be:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c000f1c5:	85 c0                	test   eax,eax
c000f1c7:	74 2a                	je     c000f1f3 <File::write(unsigned long long, void*, int*)+0x49>
c000f1c9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f1cf:	85 c0                	test   eax,eax
c000f1d1:	74 20                	je     c000f1f3 <File::write(unsigned long long, void*, int*)+0x49>
c000f1d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f1d7:	74 21                	je     c000f1fa <File::write(unsigned long long, void*, int*)+0x50>
c000f1d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1df:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1ed:	5b                   	pop    ebx
c000f1ee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f1f1:	ff e0                	jmp    eax
c000f1f3:	b8 0b 00 00 00       	mov    eax,0xb
c000f1f8:	eb 05                	jmp    c000f1ff <File::write(unsigned long long, void*, int*)+0x55>
c000f1fa:	b8 05 00 00 00       	mov    eax,0x5
c000f1ff:	5b                   	pop    ebx
c000f200:	c3                   	ret    
c000f201:	90                   	nop

c000f202 <Directory::read(unsigned long long, void*, int*)>:
c000f202:	53                   	push   ebx
c000f203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f207:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f20b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f212:	3c 19                	cmp    al,0x19
c000f214:	77 35                	ja     c000f24b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f216:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c000f21d:	85 c0                	test   eax,eax
c000f21f:	74 2a                	je     c000f24b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f221:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f227:	85 c0                	test   eax,eax
c000f229:	74 20                	je     c000f24b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f22b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f22f:	74 21                	je     c000f252 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f231:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f233:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f237:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f23d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f241:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f245:	5b                   	pop    ebx
c000f246:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f249:	ff e0                	jmp    eax
c000f24b:	b8 0b 00 00 00       	mov    eax,0xb
c000f250:	eb 05                	jmp    c000f257 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f252:	b8 05 00 00 00       	mov    eax,0x5
c000f257:	5b                   	pop    ebx
c000f258:	c3                   	ret    
c000f259:	90                   	nop

c000f25a <Directory::write(unsigned long long, void*, int*)>:
c000f25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f25e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f265:	b8 0b 00 00 00       	mov    eax,0xb
c000f26a:	80 fa 19             	cmp    dl,0x19
c000f26d:	77 18                	ja     c000f287 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f26f:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000f276:	85 d2                	test   edx,edx
c000f278:	74 0d                	je     c000f287 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f27a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f281:	19 c0                	sbb    eax,eax
c000f283:	83 e0 0a             	and    eax,0xa
c000f286:	40                   	inc    eax
c000f287:	c3                   	ret    

c000f288 <File::isAtty()>:
c000f288:	31 c0                	xor    eax,eax
c000f28a:	c3                   	ret    
c000f28b:	90                   	nop

c000f28c <Directory::isAtty()>:
c000f28c:	31 c0                	xor    eax,eax
c000f28e:	c3                   	ret    
c000f28f:	90                   	nop

c000f290 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f290:	b8 0a 00 00 00       	mov    eax,0xa
c000f295:	c3                   	ret    

c000f296 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f296:	b8 0a 00 00 00       	mov    eax,0xa
c000f29b:	c3                   	ret    

c000f29c <File::~File()>:
c000f29c:	83 ec 0c             	sub    esp,0xc
c000f29f:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c000f2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a8:	89 10                	mov    DWORD PTR [eax],edx
c000f2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ae:	83 ec 0c             	sub    esp,0xc
c000f2b1:	50                   	push   eax
c000f2b2:	e8 6d e8 ff ff       	call   c000db24 <UnixFile::~UnixFile()>
c000f2b7:	83 c4 10             	add    esp,0x10
c000f2ba:	90                   	nop
c000f2bb:	83 c4 0c             	add    esp,0xc
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <File::~File()>:
c000f2c0:	83 ec 0c             	sub    esp,0xc
c000f2c3:	83 ec 0c             	sub    esp,0xc
c000f2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ca:	e8 cd ff ff ff       	call   c000f29c <File::~File()>
c000f2cf:	83 c4 10             	add    esp,0x10
c000f2d2:	83 ec 08             	sub    esp,0x8
c000f2d5:	68 14 01 00 00       	push   0x114
c000f2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2de:	e8 70 fc ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000f2e3:	83 c4 10             	add    esp,0x10
c000f2e6:	83 c4 0c             	add    esp,0xc
c000f2e9:	c3                   	ret    

c000f2ea <Directory::~Directory()>:
c000f2ea:	83 ec 0c             	sub    esp,0xc
c000f2ed:	ba 20 0d 02 c0       	mov    edx,0xc0020d20
c000f2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f6:	89 10                	mov    DWORD PTR [eax],edx
c000f2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2fc:	83 ec 0c             	sub    esp,0xc
c000f2ff:	50                   	push   eax
c000f300:	e8 1f e8 ff ff       	call   c000db24 <UnixFile::~UnixFile()>
c000f305:	83 c4 10             	add    esp,0x10
c000f308:	90                   	nop
c000f309:	83 c4 0c             	add    esp,0xc
c000f30c:	c3                   	ret    
c000f30d:	90                   	nop

c000f30e <Directory::~Directory()>:
c000f30e:	83 ec 0c             	sub    esp,0xc
c000f311:	83 ec 0c             	sub    esp,0xc
c000f314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f318:	e8 cd ff ff ff       	call   c000f2ea <Directory::~Directory()>
c000f31d:	83 c4 10             	add    esp,0x10
c000f320:	83 ec 08             	sub    esp,0x8
c000f323:	68 14 01 00 00       	push   0x114
c000f328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f32c:	e8 22 fc ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	83 c4 0c             	add    esp,0xc
c000f337:	c3                   	ret    

c000f338 <Filesystem::Filesystem()>:
c000f338:	ba a0 0c 02 c0       	mov    edx,0xc0020ca0
c000f33d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f341:	89 10                	mov    DWORD PTR [eax],edx
c000f343:	8b 15 28 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023928
c000f349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f34d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f354:	a3 28 39 02 c0       	mov    ds:0xc0023928,eax
c000f359:	90                   	nop
c000f35a:	c3                   	ret    
c000f35b:	90                   	nop

c000f35c <Filesystem::~Filesystem()>:
c000f35c:	ba a0 0c 02 c0       	mov    edx,0xc0020ca0
c000f361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f365:	89 10                	mov    DWORD PTR [eax],edx
c000f367:	90                   	nop
c000f368:	c3                   	ret    
c000f369:	90                   	nop

c000f36a <Filesystem::~Filesystem()>:
c000f36a:	83 ec 0c             	sub    esp,0xc
c000f36d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f371:	e8 e6 ff ff ff       	call   c000f35c <Filesystem::~Filesystem()>
c000f376:	83 c4 04             	add    esp,0x4
c000f379:	83 ec 08             	sub    esp,0x8
c000f37c:	6a 08                	push   0x8
c000f37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f382:	e8 cc fb ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000f387:	83 c4 10             	add    esp,0x10
c000f38a:	83 c4 0c             	add    esp,0xc
c000f38d:	c3                   	ret    

c000f38e <initVFS()>:
c000f38e:	83 ec 18             	sub    esp,0x18
c000f391:	6a 08                	push   0x8
c000f393:	e8 ac fb ff ff       	call   c000ef44 <operator new(unsigned long)>
c000f398:	89 04 24             	mov    DWORD PTR [esp],eax
c000f39b:	e8 46 a9 00 00       	call   c0019ce6 <FAT::FAT()>
c000f3a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3a7:	e8 98 fb ff ff       	call   c000ef44 <operator new(unsigned long)>
c000f3ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3af:	e8 a8 bb 00 00       	call   c001af5c <ISO9660::ISO9660()>
c000f3b4:	83 c4 1c             	add    esp,0x1c
c000f3b7:	c3                   	ret    

c000f3b8 <standardiseFiles(char*, char const*, char const*)>:
c000f3b8:	55                   	push   ebp
c000f3b9:	57                   	push   edi
c000f3ba:	56                   	push   esi
c000f3bb:	53                   	push   ebx
c000f3bc:	81 ec 10 04 00 00    	sub    esp,0x410
c000f3c2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f3c9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f3d0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f3d7:	68 00 04 00 00       	push   0x400
c000f3dc:	6a 00                	push   0x0
c000f3de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f3e2:	56                   	push   esi
c000f3e3:	e8 20 12 ff ff       	call   c0000608 <memset>
c000f3e8:	83 c4 10             	add    esp,0x10
c000f3eb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f3ef:	75 0b                	jne    c000f3fc <standardiseFiles(char*, char const*, char const*)+0x44>
c000f3f1:	50                   	push   eax
c000f3f2:	50                   	push   eax
c000f3f3:	57                   	push   edi
c000f3f4:	56                   	push   esi
c000f3f5:	e8 ad 12 ff ff       	call   c00006a7 <strcpy>
c000f3fa:	eb 41                	jmp    c000f43d <standardiseFiles(char*, char const*, char const*)+0x85>
c000f3fc:	8a 07                	mov    al,BYTE PTR [edi]
c000f3fe:	3c 5c                	cmp    al,0x5c
c000f400:	74 04                	je     c000f406 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f402:	3c 2f                	cmp    al,0x2f
c000f404:	75 18                	jne    c000f41e <standardiseFiles(char*, char const*, char const*)+0x66>
c000f406:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f409:	3c 60                	cmp    al,0x60
c000f40b:	7e 03                	jle    c000f410 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f40d:	83 e8 20             	sub    eax,0x20
c000f410:	88 04 24             	mov    BYTE PTR [esp],al
c000f413:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f41a:	50                   	push   eax
c000f41b:	50                   	push   eax
c000f41c:	eb 18                	jmp    c000f436 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f41e:	50                   	push   eax
c000f41f:	50                   	push   eax
c000f420:	55                   	push   ebp
c000f421:	56                   	push   esi
c000f422:	e8 80 12 ff ff       	call   c00006a7 <strcpy>
c000f427:	5a                   	pop    edx
c000f428:	59                   	pop    ecx
c000f429:	68 54 1e 02 c0       	push   0xc0021e54
c000f42e:	56                   	push   esi
c000f42f:	e8 37 13 ff ff       	call   c000076b <strcat>
c000f434:	5d                   	pop    ebp
c000f435:	58                   	pop    eax
c000f436:	57                   	push   edi
c000f437:	56                   	push   esi
c000f438:	e8 2e 13 ff ff       	call   c000076b <strcat>
c000f43d:	83 c4 10             	add    esp,0x10
c000f440:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f443:	3c 60                	cmp    al,0x60
c000f445:	7e 03                	jle    c000f44a <standardiseFiles(char*, char const*, char const*)+0x92>
c000f447:	83 e8 20             	sub    eax,0x20
c000f44a:	88 04 24             	mov    BYTE PTR [esp],al
c000f44d:	88 03                	mov    BYTE PTR [ebx],al
c000f44f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f456:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f45c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f460:	bf 03 00 00 00       	mov    edi,0x3
c000f465:	b8 03 00 00 00       	mov    eax,0x3
c000f46a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f46d:	84 d2                	test   dl,dl
c000f46f:	0f 84 91 00 00 00    	je     c000f506 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f475:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f478:	80 fa 5c             	cmp    dl,0x5c
c000f47b:	74 05                	je     c000f482 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f47d:	80 fa 2f             	cmp    dl,0x2f
c000f480:	75 12                	jne    c000f494 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f482:	89 c5                	mov    ebp,eax
c000f484:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f489:	74 09                	je     c000f494 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f48b:	40                   	inc    eax
c000f48c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f490:	89 cf                	mov    edi,ecx
c000f492:	eb d6                	jmp    c000f46a <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f494:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f499:	75 5b                	jne    c000f4f6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f49b:	80 fa 2e             	cmp    dl,0x2e
c000f49e:	75 56                	jne    c000f4f6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f4a0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f4a4:	74 19                	je     c000f4bf <standardiseFiles(char*, char const*, char const*)+0x107>
c000f4a6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f4ab:	74 53                	je     c000f500 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f4ad:	89 f9                	mov    ecx,edi
c000f4af:	41                   	inc    ecx
c000f4b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f4b3:	80 fa 2f             	cmp    dl,0x2f
c000f4b6:	74 f7                	je     c000f4af <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f4b8:	80 fa 5c             	cmp    dl,0x5c
c000f4bb:	74 f2                	je     c000f4af <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f4bd:	eb d1                	jmp    c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4bf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f4c4:	74 3a                	je     c000f500 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f4c6:	83 f8 03             	cmp    eax,0x3
c000f4c9:	74 c5                	je     c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4cb:	41                   	inc    ecx
c000f4cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f4cf:	80 fa 2f             	cmp    dl,0x2f
c000f4d2:	74 f7                	je     c000f4cb <standardiseFiles(char*, char const*, char const*)+0x113>
c000f4d4:	80 fa 5c             	cmp    dl,0x5c
c000f4d7:	74 f2                	je     c000f4cb <standardiseFiles(char*, char const*, char const*)+0x113>
c000f4d9:	48                   	dec    eax
c000f4da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4de:	75 06                	jne    c000f4e6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4e4:	eb f3                	jmp    c000f4d9 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f4e6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4ea:	74 07                	je     c000f4f3 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f4ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4f0:	48                   	dec    eax
c000f4f1:	eb f3                	jmp    c000f4e6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4f3:	40                   	inc    eax
c000f4f4:	eb 9a                	jmp    c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4f6:	80 fa 2f             	cmp    dl,0x2f
c000f4f9:	74 95                	je     c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4fb:	80 fa 5c             	cmp    dl,0x5c
c000f4fe:	74 90                	je     c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f500:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f503:	40                   	inc    eax
c000f504:	eb 8a                	jmp    c000f490 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f506:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f50a:	83 ec 0c             	sub    esp,0xc
c000f50d:	53                   	push   ebx
c000f50e:	e8 12 11 ff ff       	call   c0000625 <strlen>
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f51b:	75 26                	jne    c000f543 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f51d:	83 ec 0c             	sub    esp,0xc
c000f520:	53                   	push   ebx
c000f521:	e8 ff 10 ff ff       	call   c0000625 <strlen>
c000f526:	83 c4 10             	add    esp,0x10
c000f529:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f52e:	74 26                	je     c000f556 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f530:	83 ec 0c             	sub    esp,0xc
c000f533:	53                   	push   ebx
c000f534:	e8 ec 10 ff ff       	call   c0000625 <strlen>
c000f539:	83 c4 10             	add    esp,0x10
c000f53c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f541:	eb c7                	jmp    c000f50a <standardiseFiles(char*, char const*, char const*)+0x152>
c000f543:	83 ec 0c             	sub    esp,0xc
c000f546:	53                   	push   ebx
c000f547:	e8 d9 10 ff ff       	call   c0000625 <strlen>
c000f54c:	83 c4 10             	add    esp,0x10
c000f54f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f554:	74 c7                	je     c000f51d <standardiseFiles(char*, char const*, char const*)+0x165>
c000f556:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f55c:	5b                   	pop    ebx
c000f55d:	5e                   	pop    esi
c000f55e:	5f                   	pop    edi
c000f55f:	5d                   	pop    ebp
c000f560:	c3                   	ret    
c000f561:	90                   	nop

c000f562 <File::File(char const*, Process*)>:
c000f562:	83 ec 0c             	sub    esp,0xc
c000f565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f569:	83 ec 08             	sub    esp,0x8
c000f56c:	6a 00                	push   0x0
c000f56e:	50                   	push   eax
c000f56f:	e8 0e e4 ff ff       	call   c000d982 <UnixFile::UnixFile(int)>
c000f574:	83 c4 10             	add    esp,0x10
c000f577:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c000f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f580:	89 10                	mov    DWORD PTR [eax],edx
c000f582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f586:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f590:	83 c0 0d             	add    eax,0xd
c000f593:	83 ec 04             	sub    esp,0x4
c000f596:	52                   	push   edx
c000f597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f59b:	50                   	push   eax
c000f59c:	e8 17 fe ff ff       	call   c000f3b8 <standardiseFiles(char*, char const*, char const*)>
c000f5a1:	83 c4 10             	add    esp,0x10
c000f5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f5ab:	8d 50 bf             	lea    edx,[eax-0x41]
c000f5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f5c0:	90                   	nop
c000f5c1:	83 c4 0c             	add    esp,0xc
c000f5c4:	c3                   	ret    
c000f5c5:	90                   	nop

c000f5c6 <File::open(FileOpenMode)>:
c000f5c6:	53                   	push   ebx
c000f5c7:	b8 0b 00 00 00       	mov    eax,0xb
c000f5cc:	83 ec 08             	sub    esp,0x8
c000f5cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f5d3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f5da:	80 fa 19             	cmp    dl,0x19
c000f5dd:	77 40                	ja     c000f61f <File::open(FileOpenMode)+0x59>
c000f5df:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000f5e6:	85 d2                	test   edx,edx
c000f5e8:	74 35                	je     c000f61f <File::open(FileOpenMode)+0x59>
c000f5ea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5f0:	85 d2                	test   edx,edx
c000f5f2:	74 2b                	je     c000f61f <File::open(FileOpenMode)+0x59>
c000f5f4:	b8 06 00 00 00       	mov    eax,0x6
c000f5f9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f5fd:	75 20                	jne    c000f61f <File::open(FileOpenMode)+0x59>
c000f5ff:	8b 02                	mov    eax,DWORD PTR [edx]
c000f601:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f60b:	51                   	push   ecx
c000f60c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f60f:	51                   	push   ecx
c000f610:	52                   	push   edx
c000f611:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f614:	83 c4 10             	add    esp,0x10
c000f617:	85 c0                	test   eax,eax
c000f619:	75 04                	jne    c000f61f <File::open(FileOpenMode)+0x59>
c000f61b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f61f:	83 c4 08             	add    esp,0x8
c000f622:	5b                   	pop    ebx
c000f623:	c3                   	ret    

c000f624 <File::close()>:
c000f624:	53                   	push   ebx
c000f625:	b8 0b 00 00 00       	mov    eax,0xb
c000f62a:	83 ec 08             	sub    esp,0x8
c000f62d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f631:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f638:	80 fa 19             	cmp    dl,0x19
c000f63b:	77 41                	ja     c000f67e <File::close()+0x5a>
c000f63d:	8b 1c 95 c0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc240]
c000f644:	85 db                	test   ebx,ebx
c000f646:	74 36                	je     c000f67e <File::close()+0x5a>
c000f648:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f64f:	74 2d                	je     c000f67e <File::close()+0x5a>
c000f651:	b8 05 00 00 00       	mov    eax,0x5
c000f656:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f65a:	74 22                	je     c000f67e <File::close()+0x5a>
c000f65c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f660:	8b 04 95 c0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc240]
c000f667:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f66d:	53                   	push   ebx
c000f66e:	53                   	push   ebx
c000f66f:	8b 10                	mov    edx,DWORD PTR [eax]
c000f671:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f677:	50                   	push   eax
c000f678:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f67b:	83 c4 10             	add    esp,0x10
c000f67e:	83 c4 08             	add    esp,0x8
c000f681:	5b                   	pop    ebx
c000f682:	c3                   	ret    
c000f683:	90                   	nop

c000f684 <File::seek(unsigned long long)>:
c000f684:	56                   	push   esi
c000f685:	53                   	push   ebx
c000f686:	b8 0b 00 00 00       	mov    eax,0xb
c000f68b:	51                   	push   ecx
c000f68c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f690:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f694:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f69b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f69f:	80 fa 19             	cmp    dl,0x19
c000f6a2:	77 31                	ja     c000f6d5 <File::seek(unsigned long long)+0x51>
c000f6a4:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000f6ab:	85 d2                	test   edx,edx
c000f6ad:	74 26                	je     c000f6d5 <File::seek(unsigned long long)+0x51>
c000f6af:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6b5:	85 d2                	test   edx,edx
c000f6b7:	74 1c                	je     c000f6d5 <File::seek(unsigned long long)+0x51>
c000f6b9:	b8 05 00 00 00       	mov    eax,0x5
c000f6be:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f6c2:	74 11                	je     c000f6d5 <File::seek(unsigned long long)+0x51>
c000f6c4:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6c6:	53                   	push   ebx
c000f6c7:	51                   	push   ecx
c000f6c8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f6ce:	52                   	push   edx
c000f6cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	5a                   	pop    edx
c000f6d6:	5b                   	pop    ebx
c000f6d7:	5e                   	pop    esi
c000f6d8:	c3                   	ret    
c000f6d9:	90                   	nop

c000f6da <File::tell(unsigned long long*)>:
c000f6da:	83 ec 0c             	sub    esp,0xc
c000f6dd:	b8 0b 00 00 00       	mov    eax,0xb
c000f6e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f6e6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f6ed:	80 fa 19             	cmp    dl,0x19
c000f6f0:	77 34                	ja     c000f726 <File::tell(unsigned long long*)+0x4c>
c000f6f2:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000f6f9:	85 d2                	test   edx,edx
c000f6fb:	74 29                	je     c000f726 <File::tell(unsigned long long*)+0x4c>
c000f6fd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f703:	85 d2                	test   edx,edx
c000f705:	74 1f                	je     c000f726 <File::tell(unsigned long long*)+0x4c>
c000f707:	b8 05 00 00 00       	mov    eax,0x5
c000f70c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f710:	74 14                	je     c000f726 <File::tell(unsigned long long*)+0x4c>
c000f712:	50                   	push   eax
c000f713:	8b 02                	mov    eax,DWORD PTR [edx]
c000f715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f719:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f71f:	52                   	push   edx
c000f720:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f723:	83 c4 10             	add    esp,0x10
c000f726:	83 c4 0c             	add    esp,0xc
c000f729:	c3                   	ret    

c000f72a <File::rewind()>:
c000f72a:	83 ec 10             	sub    esp,0x10
c000f72d:	6a 00                	push   0x0
c000f72f:	6a 00                	push   0x0
c000f731:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f735:	e8 4a ff ff ff       	call   c000f684 <File::seek(unsigned long long)>
c000f73a:	83 c4 1c             	add    esp,0x1c
c000f73d:	c3                   	ret    

c000f73e <File::unlink()>:
c000f73e:	83 ec 0c             	sub    esp,0xc
c000f741:	b8 0b 00 00 00       	mov    eax,0xb
c000f746:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f74a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f751:	80 f9 19             	cmp    cl,0x19
c000f754:	77 2f                	ja     c000f785 <File::unlink()+0x47>
c000f756:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000f75d:	85 c9                	test   ecx,ecx
c000f75f:	74 24                	je     c000f785 <File::unlink()+0x47>
c000f761:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f767:	85 c9                	test   ecx,ecx
c000f769:	74 1a                	je     c000f785 <File::unlink()+0x47>
c000f76b:	b8 06 00 00 00       	mov    eax,0x6
c000f770:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f774:	75 0f                	jne    c000f785 <File::unlink()+0x47>
c000f776:	83 c2 0d             	add    edx,0xd
c000f779:	50                   	push   eax
c000f77a:	50                   	push   eax
c000f77b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f77d:	52                   	push   edx
c000f77e:	51                   	push   ecx
c000f77f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f782:	83 c4 10             	add    esp,0x10
c000f785:	83 c4 0c             	add    esp,0xc
c000f788:	c3                   	ret    
c000f789:	90                   	nop

c000f78a <File::rename(char const*)>:
c000f78a:	83 ec 0c             	sub    esp,0xc
c000f78d:	b8 0b 00 00 00       	mov    eax,0xb
c000f792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f796:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f79d:	80 f9 19             	cmp    cl,0x19
c000f7a0:	77 32                	ja     c000f7d4 <File::rename(char const*)+0x4a>
c000f7a2:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000f7a9:	85 c9                	test   ecx,ecx
c000f7ab:	74 27                	je     c000f7d4 <File::rename(char const*)+0x4a>
c000f7ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7b3:	85 c9                	test   ecx,ecx
c000f7b5:	74 1d                	je     c000f7d4 <File::rename(char const*)+0x4a>
c000f7b7:	b8 06 00 00 00       	mov    eax,0x6
c000f7bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f7c0:	75 12                	jne    c000f7d4 <File::rename(char const*)+0x4a>
c000f7c2:	83 c2 0d             	add    edx,0xd
c000f7c5:	50                   	push   eax
c000f7c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f7c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7cc:	52                   	push   edx
c000f7cd:	51                   	push   ecx
c000f7ce:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	83 c4 0c             	add    esp,0xc
c000f7d7:	c3                   	ret    

c000f7d8 <File::chfatattr(unsigned char, unsigned char)>:
c000f7d8:	57                   	push   edi
c000f7d9:	b8 0b 00 00 00       	mov    eax,0xb
c000f7de:	56                   	push   esi
c000f7df:	53                   	push   ebx
c000f7e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f7f3:	80 f9 19             	cmp    cl,0x19
c000f7f6:	77 37                	ja     c000f82f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7f8:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000f7ff:	85 c9                	test   ecx,ecx
c000f801:	74 2c                	je     c000f82f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f803:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f809:	85 c9                	test   ecx,ecx
c000f80b:	74 22                	je     c000f82f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f80d:	b8 06 00 00 00       	mov    eax,0x6
c000f812:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f816:	75 17                	jne    c000f82f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f818:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f81a:	89 f0                	mov    eax,esi
c000f81c:	83 c2 0d             	add    edx,0xd
c000f81f:	0f b6 f0             	movzx  esi,al
c000f822:	0f b6 db             	movzx  ebx,bl
c000f825:	56                   	push   esi
c000f826:	53                   	push   ebx
c000f827:	52                   	push   edx
c000f828:	51                   	push   ecx
c000f829:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f82c:	83 c4 10             	add    esp,0x10
c000f82f:	5b                   	pop    ebx
c000f830:	5e                   	pop    esi
c000f831:	5f                   	pop    edi
c000f832:	c3                   	ret    
c000f833:	90                   	nop

c000f834 <File::exists()>:
c000f834:	83 ec 0c             	sub    esp,0xc
c000f837:	31 c0                	xor    eax,eax
c000f839:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f83d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f844:	80 f9 19             	cmp    cl,0x19
c000f847:	77 24                	ja     c000f86d <File::exists()+0x39>
c000f849:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000f850:	85 c9                	test   ecx,ecx
c000f852:	74 19                	je     c000f86d <File::exists()+0x39>
c000f854:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f85a:	85 c9                	test   ecx,ecx
c000f85c:	74 0f                	je     c000f86d <File::exists()+0x39>
c000f85e:	83 c2 0d             	add    edx,0xd
c000f861:	50                   	push   eax
c000f862:	50                   	push   eax
c000f863:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f865:	52                   	push   edx
c000f866:	51                   	push   ecx
c000f867:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f86a:	83 c4 10             	add    esp,0x10
c000f86d:	83 c4 0c             	add    esp,0xc
c000f870:	c3                   	ret    
c000f871:	90                   	nop

c000f872 <File::stat(unsigned long long*, bool*)>:
c000f872:	56                   	push   esi
c000f873:	53                   	push   ebx
c000f874:	50                   	push   eax
c000f875:	b8 0b 00 00 00       	mov    eax,0xb
c000f87a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f87e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f882:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f889:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f88d:	80 f9 19             	cmp    cl,0x19
c000f890:	77 3d                	ja     c000f8cf <File::stat(unsigned long long*, bool*)+0x5d>
c000f892:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000f899:	85 c9                	test   ecx,ecx
c000f89b:	74 32                	je     c000f8cf <File::stat(unsigned long long*, bool*)+0x5d>
c000f89d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8a3:	85 c9                	test   ecx,ecx
c000f8a5:	74 28                	je     c000f8cf <File::stat(unsigned long long*, bool*)+0x5d>
c000f8a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ad:	74 13                	je     c000f8c2 <File::stat(unsigned long long*, bool*)+0x50>
c000f8af:	83 ec 04             	sub    esp,0x4
c000f8b2:	56                   	push   esi
c000f8b3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f8b9:	51                   	push   ecx
c000f8ba:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f8bd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f8c0:	eb 0a                	jmp    c000f8cc <File::stat(unsigned long long*, bool*)+0x5a>
c000f8c2:	53                   	push   ebx
c000f8c3:	83 c2 0d             	add    edx,0xd
c000f8c6:	56                   	push   esi
c000f8c7:	52                   	push   edx
c000f8c8:	51                   	push   ecx
c000f8c9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f8cc:	83 c4 10             	add    esp,0x10
c000f8cf:	5a                   	pop    edx
c000f8d0:	5b                   	pop    ebx
c000f8d1:	5e                   	pop    esi
c000f8d2:	c3                   	ret    

c000f8d3 <getcwd(Process*, char*, int)>:
c000f8d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8d7:	31 c0                	xor    eax,eax
c000f8d9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f8dc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f8e0:	7d 15                	jge    c000f8f7 <getcwd(Process*, char*, int)+0x24>
c000f8e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e6:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f8ed:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f8f0:	84 c9                	test   cl,cl
c000f8f2:	74 06                	je     c000f8fa <getcwd(Process*, char*, int)+0x27>
c000f8f4:	40                   	inc    eax
c000f8f5:	eb e2                	jmp    c000f8d9 <getcwd(Process*, char*, int)+0x6>
c000f8f7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f8fa:	31 c0                	xor    eax,eax
c000f8fc:	c3                   	ret    

c000f8fd <setcwd(Process*, char*)>:
c000f8fd:	55                   	push   ebp
c000f8fe:	57                   	push   edi
c000f8ff:	56                   	push   esi
c000f900:	53                   	push   ebx
c000f901:	81 ec 20 02 00 00    	sub    esp,0x220
c000f907:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f90e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f914:	57                   	push   edi
c000f915:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f91c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f920:	56                   	push   esi
c000f921:	e8 92 fa ff ff       	call   c000f3b8 <standardiseFiles(char*, char const*, char const*)>
c000f926:	89 34 24             	mov    DWORD PTR [esp],esi
c000f929:	e8 f7 0c ff ff       	call   c0000625 <strlen>
c000f92e:	83 c4 10             	add    esp,0x10
c000f931:	83 f8 02             	cmp    eax,0x2
c000f934:	77 17                	ja     c000f94d <setcwd(Process*, char*)+0x50>
c000f936:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f93b:	83 e8 41             	sub    eax,0x41
c000f93e:	83 f8 19             	cmp    eax,0x19
c000f941:	76 24                	jbe    c000f967 <setcwd(Process*, char*)+0x6a>
c000f943:	b8 03 00 00 00       	mov    eax,0x3
c000f948:	e9 cb 00 00 00       	jmp    c000fa18 <setcwd(Process*, char*)+0x11b>
c000f94d:	83 ec 0c             	sub    esp,0xc
c000f950:	56                   	push   esi
c000f951:	e8 cf 0c ff ff       	call   c0000625 <strlen>
c000f956:	83 c4 10             	add    esp,0x10
c000f959:	83 f8 03             	cmp    eax,0x3
c000f95c:	75 33                	jne    c000f991 <setcwd(Process*, char*)+0x94>
c000f95e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f963:	75 2c                	jne    c000f991 <setcwd(Process*, char*)+0x94>
c000f965:	eb cf                	jmp    c000f936 <setcwd(Process*, char*)+0x39>
c000f967:	8b 14 85 c0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc240]
c000f96e:	b8 05 00 00 00       	mov    eax,0x5
c000f973:	85 d2                	test   edx,edx
c000f975:	0f 84 9d 00 00 00    	je     c000fa18 <setcwd(Process*, char*)+0x11b>
c000f97b:	b8 06 00 00 00       	mov    eax,0x6
c000f980:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f987:	0f 84 8b 00 00 00    	je     c000fa18 <setcwd(Process*, char*)+0x11b>
c000f98d:	51                   	push   ecx
c000f98e:	51                   	push   ecx
c000f98f:	eb 7b                	jmp    c000fa0c <setcwd(Process*, char*)+0x10f>
c000f991:	83 ec 0c             	sub    esp,0xc
c000f994:	68 14 01 00 00       	push   0x114
c000f999:	e8 a6 f5 ff ff       	call   c000ef44 <operator new(unsigned long)>
c000f99e:	83 c4 0c             	add    esp,0xc
c000f9a1:	89 c3                	mov    ebx,eax
c000f9a3:	55                   	push   ebp
c000f9a4:	56                   	push   esi
c000f9a5:	50                   	push   eax
c000f9a6:	e8 b7 fb ff ff       	call   c000f562 <File::File(char const*, Process*)>
c000f9ab:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f9b0:	83 c4 0c             	add    esp,0xc
c000f9b3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f9b7:	50                   	push   eax
c000f9b8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f9bc:	50                   	push   eax
c000f9bd:	53                   	push   ebx
c000f9be:	e8 af fe ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f9c8:	83 f8 02             	cmp    eax,0x2
c000f9cb:	75 09                	jne    c000f9d6 <setcwd(Process*, char*)+0xd9>
c000f9cd:	83 ec 0c             	sub    esp,0xc
c000f9d0:	53                   	push   ebx
c000f9d1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f9d4:	eb 0d                	jmp    c000f9e3 <setcwd(Process*, char*)+0xe6>
c000f9d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f9d9:	85 c0                	test   eax,eax
c000f9db:	74 10                	je     c000f9ed <setcwd(Process*, char*)+0xf0>
c000f9dd:	83 ec 0c             	sub    esp,0xc
c000f9e0:	53                   	push   ebx
c000f9e1:	ff d2                	call   edx
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	b8 01 00 00 00       	mov    eax,0x1
c000f9eb:	eb 2b                	jmp    c000fa18 <setcwd(Process*, char*)+0x11b>
c000f9ed:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f9f2:	75 10                	jne    c000fa04 <setcwd(Process*, char*)+0x107>
c000f9f4:	83 ec 0c             	sub    esp,0xc
c000f9f7:	53                   	push   ebx
c000f9f8:	ff d2                	call   edx
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	b8 02 00 00 00       	mov    eax,0x2
c000fa02:	eb 14                	jmp    c000fa18 <setcwd(Process*, char*)+0x11b>
c000fa04:	83 ec 0c             	sub    esp,0xc
c000fa07:	53                   	push   ebx
c000fa08:	ff d2                	call   edx
c000fa0a:	58                   	pop    eax
c000fa0b:	5a                   	pop    edx
c000fa0c:	56                   	push   esi
c000fa0d:	57                   	push   edi
c000fa0e:	e8 94 0c ff ff       	call   c00006a7 <strcpy>
c000fa13:	83 c4 10             	add    esp,0x10
c000fa16:	31 c0                	xor    eax,eax
c000fa18:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fa1e:	5b                   	pop    ebx
c000fa1f:	5e                   	pop    esi
c000fa20:	5f                   	pop    edi
c000fa21:	5d                   	pop    ebp
c000fa22:	c3                   	ret    
c000fa23:	90                   	nop

c000fa24 <Directory::Directory(char const*, Process*)>:
c000fa24:	83 ec 0c             	sub    esp,0xc
c000fa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2b:	83 ec 08             	sub    esp,0x8
c000fa2e:	6a 00                	push   0x0
c000fa30:	50                   	push   eax
c000fa31:	e8 4c df ff ff       	call   c000d982 <UnixFile::UnixFile(int)>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	ba 20 0d 02 c0       	mov    edx,0xc0020d20
c000fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa42:	89 10                	mov    DWORD PTR [eax],edx
c000fa44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa48:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa52:	83 c0 0d             	add    eax,0xd
c000fa55:	83 ec 04             	sub    esp,0x4
c000fa58:	52                   	push   edx
c000fa59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa5d:	50                   	push   eax
c000fa5e:	e8 55 f9 ff ff       	call   c000f3b8 <standardiseFiles(char*, char const*, char const*)>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fa6d:	8d 50 bf             	lea    edx,[eax-0x41]
c000fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa74:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa7e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fa82:	90                   	nop
c000fa83:	83 c4 0c             	add    esp,0xc
c000fa86:	c3                   	ret    
c000fa87:	90                   	nop

c000fa88 <Directory::open()>:
c000fa88:	53                   	push   ebx
c000fa89:	b8 0b 00 00 00       	mov    eax,0xb
c000fa8e:	83 ec 08             	sub    esp,0x8
c000fa91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa9c:	80 fa 19             	cmp    dl,0x19
c000fa9f:	77 3d                	ja     c000fade <Directory::open()+0x56>
c000faa1:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000faa8:	85 d2                	test   edx,edx
c000faaa:	74 32                	je     c000fade <Directory::open()+0x56>
c000faac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fab2:	85 d2                	test   edx,edx
c000fab4:	74 28                	je     c000fade <Directory::open()+0x56>
c000fab6:	b8 06 00 00 00       	mov    eax,0x6
c000fabb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fabf:	75 1d                	jne    c000fade <Directory::open()+0x56>
c000fac1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fac7:	50                   	push   eax
c000fac8:	8b 02                	mov    eax,DWORD PTR [edx]
c000faca:	51                   	push   ecx
c000facb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000face:	51                   	push   ecx
c000facf:	52                   	push   edx
c000fad0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fad3:	83 c4 10             	add    esp,0x10
c000fad6:	85 c0                	test   eax,eax
c000fad8:	75 04                	jne    c000fade <Directory::open()+0x56>
c000fada:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fade:	83 c4 08             	add    esp,0x8
c000fae1:	5b                   	pop    ebx
c000fae2:	c3                   	ret    
c000fae3:	90                   	nop

c000fae4 <Directory::close()>:
c000fae4:	53                   	push   ebx
c000fae5:	b8 0b 00 00 00       	mov    eax,0xb
c000faea:	83 ec 08             	sub    esp,0x8
c000faed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000faf1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000faf8:	80 fa 19             	cmp    dl,0x19
c000fafb:	77 41                	ja     c000fb3e <Directory::close()+0x5a>
c000fafd:	8b 1c 95 c0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc240]
c000fb04:	85 db                	test   ebx,ebx
c000fb06:	74 36                	je     c000fb3e <Directory::close()+0x5a>
c000fb08:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fb0f:	74 2d                	je     c000fb3e <Directory::close()+0x5a>
c000fb11:	b8 05 00 00 00       	mov    eax,0x5
c000fb16:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fb1a:	74 22                	je     c000fb3e <Directory::close()+0x5a>
c000fb1c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fb20:	8b 04 95 c0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc240]
c000fb27:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fb2d:	53                   	push   ebx
c000fb2e:	53                   	push   ebx
c000fb2f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb31:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fb37:	50                   	push   eax
c000fb38:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fb3b:	83 c4 10             	add    esp,0x10
c000fb3e:	83 c4 08             	add    esp,0x8
c000fb41:	5b                   	pop    ebx
c000fb42:	c3                   	ret    
c000fb43:	90                   	nop

c000fb44 <Directory::unlink()>:
c000fb44:	83 ec 0c             	sub    esp,0xc
c000fb47:	b8 0b 00 00 00       	mov    eax,0xb
c000fb4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb57:	80 f9 19             	cmp    cl,0x19
c000fb5a:	77 2f                	ja     c000fb8b <Directory::unlink()+0x47>
c000fb5c:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000fb63:	85 c9                	test   ecx,ecx
c000fb65:	74 24                	je     c000fb8b <Directory::unlink()+0x47>
c000fb67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb6d:	85 c9                	test   ecx,ecx
c000fb6f:	74 1a                	je     c000fb8b <Directory::unlink()+0x47>
c000fb71:	b8 06 00 00 00       	mov    eax,0x6
c000fb76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb7a:	75 0f                	jne    c000fb8b <Directory::unlink()+0x47>
c000fb7c:	83 c2 0d             	add    edx,0xd
c000fb7f:	50                   	push   eax
c000fb80:	50                   	push   eax
c000fb81:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb83:	52                   	push   edx
c000fb84:	51                   	push   ecx
c000fb85:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	83 c4 0c             	add    esp,0xc
c000fb8e:	c3                   	ret    
c000fb8f:	90                   	nop

c000fb90 <Directory::rename(char const*)>:
c000fb90:	83 ec 0c             	sub    esp,0xc
c000fb93:	b8 0b 00 00 00       	mov    eax,0xb
c000fb98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fba3:	80 f9 19             	cmp    cl,0x19
c000fba6:	77 32                	ja     c000fbda <Directory::rename(char const*)+0x4a>
c000fba8:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000fbaf:	85 c9                	test   ecx,ecx
c000fbb1:	74 27                	je     c000fbda <Directory::rename(char const*)+0x4a>
c000fbb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbb9:	85 c9                	test   ecx,ecx
c000fbbb:	74 1d                	je     c000fbda <Directory::rename(char const*)+0x4a>
c000fbbd:	b8 06 00 00 00       	mov    eax,0x6
c000fbc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fbc6:	75 12                	jne    c000fbda <Directory::rename(char const*)+0x4a>
c000fbc8:	83 c2 0d             	add    edx,0xd
c000fbcb:	50                   	push   eax
c000fbcc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbd2:	52                   	push   edx
c000fbd3:	51                   	push   ecx
c000fbd4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fbd7:	83 c4 10             	add    esp,0x10
c000fbda:	83 c4 0c             	add    esp,0xc
c000fbdd:	c3                   	ret    

c000fbde <Directory::exists()>:
c000fbde:	83 ec 0c             	sub    esp,0xc
c000fbe1:	31 c0                	xor    eax,eax
c000fbe3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fbe7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fbee:	80 f9 19             	cmp    cl,0x19
c000fbf1:	77 24                	ja     c000fc17 <Directory::exists()+0x39>
c000fbf3:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000fbfa:	85 c9                	test   ecx,ecx
c000fbfc:	74 19                	je     c000fc17 <Directory::exists()+0x39>
c000fbfe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc04:	85 c9                	test   ecx,ecx
c000fc06:	74 0f                	je     c000fc17 <Directory::exists()+0x39>
c000fc08:	83 c2 0d             	add    edx,0xd
c000fc0b:	50                   	push   eax
c000fc0c:	50                   	push   eax
c000fc0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc0f:	52                   	push   edx
c000fc10:	51                   	push   ecx
c000fc11:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	83 c4 0c             	add    esp,0xc
c000fc1a:	c3                   	ret    
c000fc1b:	90                   	nop

c000fc1c <Directory::read(dirent*)>:
c000fc1c:	83 ec 1c             	sub    esp,0x1c
c000fc1f:	b8 0b 00 00 00       	mov    eax,0xb
c000fc24:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fc28:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc2f:	80 fa 19             	cmp    dl,0x19
c000fc32:	77 30                	ja     c000fc64 <Directory::read(dirent*)+0x48>
c000fc34:	8b 14 95 c0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc240]
c000fc3b:	85 d2                	test   edx,edx
c000fc3d:	74 25                	je     c000fc64 <Directory::read(dirent*)+0x48>
c000fc3f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fc46:	74 1c                	je     c000fc64 <Directory::read(dirent*)+0x48>
c000fc48:	83 ec 0c             	sub    esp,0xc
c000fc4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc4d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fc51:	52                   	push   edx
c000fc52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fc56:	6a 00                	push   0x0
c000fc58:	68 10 01 00 00       	push   0x110
c000fc5d:	51                   	push   ecx
c000fc5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc61:	83 c4 20             	add    esp,0x20
c000fc64:	83 c4 1c             	add    esp,0x1c
c000fc67:	c3                   	ret    

c000fc68 <Directory::create()>:
c000fc68:	83 ec 0c             	sub    esp,0xc
c000fc6b:	b8 0b 00 00 00       	mov    eax,0xb
c000fc70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc7b:	80 f9 19             	cmp    cl,0x19
c000fc7e:	77 2f                	ja     c000fcaf <Directory::create()+0x47>
c000fc80:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c000fc87:	85 c9                	test   ecx,ecx
c000fc89:	74 24                	je     c000fcaf <Directory::create()+0x47>
c000fc8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc91:	85 c9                	test   ecx,ecx
c000fc93:	74 1a                	je     c000fcaf <Directory::create()+0x47>
c000fc95:	b8 06 00 00 00       	mov    eax,0x6
c000fc9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc9e:	75 0f                	jne    c000fcaf <Directory::create()+0x47>
c000fca0:	83 c2 0d             	add    edx,0xd
c000fca3:	50                   	push   eax
c000fca4:	50                   	push   eax
c000fca5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fca7:	52                   	push   edx
c000fca8:	51                   	push   ecx
c000fca9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fcac:	83 c4 10             	add    esp,0x10
c000fcaf:	83 c4 0c             	add    esp,0xc
c000fcb2:	c3                   	ret    
c000fcb3:	90                   	nop

c000fcb4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fcb4:	b8 0a 00 00 00       	mov    eax,0xa
c000fcb9:	c3                   	ret    

c000fcba <Bus::Bus(char const*)>:
c000fcba:	83 ec 0c             	sub    esp,0xc
c000fcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc1:	83 ec 08             	sub    esp,0x8
c000fcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc8:	50                   	push   eax
c000fcc9:	e8 60 09 00 00       	call   c001062e <Device::Device(char const*)>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c000fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcda:	89 10                	mov    DWORD PTR [eax],edx
c000fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fce0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fcea:	90                   	nop
c000fceb:	83 c4 0c             	add    esp,0xc
c000fcee:	c3                   	ret    
c000fcef:	90                   	nop

c000fcf0 <Bus::~Bus()>:
c000fcf0:	83 ec 0c             	sub    esp,0xc
c000fcf3:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c000fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcfc:	89 10                	mov    DWORD PTR [eax],edx
c000fcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd02:	83 ec 0c             	sub    esp,0xc
c000fd05:	50                   	push   eax
c000fd06:	e8 d5 05 00 00       	call   c00102e0 <Device::~Device()>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	90                   	nop
c000fd0f:	83 c4 0c             	add    esp,0xc
c000fd12:	c3                   	ret    
c000fd13:	90                   	nop

c000fd14 <Bus::~Bus()>:
c000fd14:	83 ec 0c             	sub    esp,0xc
c000fd17:	83 ec 0c             	sub    esp,0xc
c000fd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd1e:	e8 cd ff ff ff       	call   c000fcf0 <Bus::~Bus()>
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	83 ec 08             	sub    esp,0x8
c000fd29:	68 58 01 00 00       	push   0x158
c000fd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd32:	e8 1c f2 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000fd37:	83 c4 10             	add    esp,0x10
c000fd3a:	83 c4 0c             	add    esp,0xc
c000fd3d:	c3                   	ret    

c000fd3e <Buzzer::Buzzer(char const*)>:
c000fd3e:	83 ec 0c             	sub    esp,0xc
c000fd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd45:	83 ec 08             	sub    esp,0x8
c000fd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd4c:	50                   	push   eax
c000fd4d:	e8 dc 08 00 00       	call   c001062e <Device::Device(char const*)>
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c000fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd5e:	89 10                	mov    DWORD PTR [eax],edx
c000fd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd64:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd72:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fd7c:	90                   	nop
c000fd7d:	83 c4 0c             	add    esp,0xc
c000fd80:	c3                   	ret    
c000fd81:	90                   	nop

c000fd82 <Buzzer::~Buzzer()>:
c000fd82:	83 ec 0c             	sub    esp,0xc
c000fd85:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c000fd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd8e:	89 10                	mov    DWORD PTR [eax],edx
c000fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	50                   	push   eax
c000fd98:	e8 43 05 00 00       	call   c00102e0 <Device::~Device()>
c000fd9d:	83 c4 10             	add    esp,0x10
c000fda0:	90                   	nop
c000fda1:	83 c4 0c             	add    esp,0xc
c000fda4:	c3                   	ret    
c000fda5:	90                   	nop

c000fda6 <Buzzer::~Buzzer()>:
c000fda6:	83 ec 0c             	sub    esp,0xc
c000fda9:	83 ec 0c             	sub    esp,0xc
c000fdac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb0:	e8 cd ff ff ff       	call   c000fd82 <Buzzer::~Buzzer()>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	83 ec 08             	sub    esp,0x8
c000fdbb:	68 5c 01 00 00       	push   0x15c
c000fdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdc4:	e8 8a f1 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000fdc9:	83 c4 10             	add    esp,0x10
c000fdcc:	83 c4 0c             	add    esp,0xc
c000fdcf:	c3                   	ret    

c000fdd0 <Buzzer::stop()>:
c000fdd0:	83 ec 14             	sub    esp,0x14
c000fdd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdd7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdd9:	6a 00                	push   0x0
c000fddb:	50                   	push   eax
c000fddc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fddf:	83 c4 1c             	add    esp,0x1c
c000fde2:	c3                   	ret    

c000fde3 <beepThread(void*)>:
c000fde3:	53                   	push   ebx
c000fde4:	83 ec 08             	sub    esp,0x8
c000fde7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdeb:	e8 16 7e 00 00       	call   c0017c06 <unlockScheduler()>
c000fdf0:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fdf5:	52                   	push   edx
c000fdf6:	52                   	push   edx
c000fdf7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fdfd:	52                   	push   edx
c000fdfe:	50                   	push   eax
c000fdff:	e8 b9 84 00 00       	call   c00182bd <nanoSleep(unsigned long long)>
c000fe04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe07:	e8 c4 ff ff ff       	call   c000fdd0 <Buzzer::stop()>
c000fe0c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fe14:	83 c4 18             	add    esp,0x18
c000fe17:	5b                   	pop    ebx
c000fe18:	e9 e6 83 00 00       	jmp    c0018203 <blockTask(TaskState)>
c000fe1d:	90                   	nop

c000fe1e <Buzzer::beep(int, int, bool)>:
c000fe1e:	57                   	push   edi
c000fe1f:	56                   	push   esi
c000fe20:	53                   	push   ebx
c000fe21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe25:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe2d:	52                   	push   edx
c000fe2e:	52                   	push   edx
c000fe2f:	8b 06                	mov    eax,DWORD PTR [esi]
c000fe31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe35:	56                   	push   esi
c000fe36:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	89 f8                	mov    eax,edi
c000fe3e:	84 c0                	test   al,al
c000fe40:	74 1f                	je     c000fe61 <Buzzer::beep(int, int, bool)+0x43>
c000fe42:	50                   	push   eax
c000fe43:	50                   	push   eax
c000fe44:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fe4a:	99                   	cdq    
c000fe4b:	52                   	push   edx
c000fe4c:	50                   	push   eax
c000fe4d:	e8 6b 84 00 00       	call   c00182bd <nanoSleep(unsigned long long)>
c000fe52:	83 c4 10             	add    esp,0x10
c000fe55:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe59:	5b                   	pop    ebx
c000fe5a:	5e                   	pop    esi
c000fe5b:	5f                   	pop    edi
c000fe5c:	e9 6f ff ff ff       	jmp    c000fdd0 <Buzzer::stop()>
c000fe61:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fe67:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c000fe6c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fe74:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fe78:	c7 44 24 14 e3 fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fde3
c000fe80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe84:	5b                   	pop    ebx
c000fe85:	5e                   	pop    esi
c000fe86:	5f                   	pop    edi
c000fe87:	e9 a2 7e 00 00       	jmp    c0017d2e <Process::createThread(void (*)(void*), void*, int)>

c000fe8c <loadClockSettings()>:
c000fe8c:	c7 05 34 39 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023934,0xa
c000fe96:	c6 05 31 39 02 c0 00 	mov    BYTE PTR ds:0xc0023931,0x0
c000fe9d:	c6 05 30 39 02 c0 01 	mov    BYTE PTR ds:0xc0023930,0x1
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <Clock::Clock(char const*)>:
c000fea6:	83 ec 0c             	sub    esp,0xc
c000fea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fead:	83 ec 08             	sub    esp,0x8
c000feb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb4:	50                   	push   eax
c000feb5:	e8 74 07 00 00       	call   c001062e <Device::Device(char const*)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c000fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec6:	89 10                	mov    DWORD PTR [eax],edx
c000fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fecc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fed6:	90                   	nop
c000fed7:	83 c4 0c             	add    esp,0xc
c000feda:	c3                   	ret    
c000fedb:	90                   	nop

c000fedc <Clock::~Clock()>:
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c000fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee8:	89 10                	mov    DWORD PTR [eax],edx
c000feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	50                   	push   eax
c000fef2:	e8 e9 03 00 00       	call   c00102e0 <Device::~Device()>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	90                   	nop
c000fefb:	83 c4 0c             	add    esp,0xc
c000fefe:	c3                   	ret    
c000feff:	90                   	nop

c000ff00 <Clock::~Clock()>:
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	83 ec 0c             	sub    esp,0xc
c000ff06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0a:	e8 cd ff ff ff       	call   c000fedc <Clock::~Clock()>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	68 58 01 00 00       	push   0x158
c000ff1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1e:	e8 30 f0 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c000ff23:	83 c4 10             	add    esp,0x10
c000ff26:	83 c4 0c             	add    esp,0xc
c000ff29:	c3                   	ret    

c000ff2a <Clock::timeInSecondsLocal()>:
c000ff2a:	53                   	push   ebx
c000ff2b:	83 ec 14             	sub    esp,0x14
c000ff2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff32:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff34:	50                   	push   eax
c000ff35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff38:	0f b6 0d 30 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023930
c000ff3f:	03 0d 34 39 02 c0    	add    ecx,DWORD PTR ds:0xc0023934
c000ff45:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ff4b:	89 cb                	mov    ebx,ecx
c000ff4d:	c1 fb 1f             	sar    ebx,0x1f
c000ff50:	01 c8                	add    eax,ecx
c000ff52:	11 da                	adc    edx,ebx
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	31 c9                	xor    ecx,ecx
c000ff59:	80 3d 31 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023931,0x0
c000ff60:	74 05                	je     c000ff67 <Clock::timeInSecondsLocal()+0x3d>
c000ff62:	b9 08 07 00 00       	mov    ecx,0x708
c000ff67:	31 db                	xor    ebx,ebx
c000ff69:	01 c8                	add    eax,ecx
c000ff6b:	11 da                	adc    edx,ebx
c000ff6d:	83 c4 08             	add    esp,0x8
c000ff70:	5b                   	pop    ebx
c000ff71:	c3                   	ret    

c000ff72 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ff72:	57                   	push   edi
c000ff73:	56                   	push   esi
c000ff74:	53                   	push   ebx
c000ff75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff7f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff83:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ff86:	0f b6 05 30 39 02 c0 	movzx  eax,BYTE PTR ds:0xc0023930
c000ff8d:	03 05 34 39 02 c0    	add    eax,DWORD PTR ds:0xc0023934
c000ff93:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff99:	99                   	cdq    
c000ff9a:	29 c6                	sub    esi,eax
c000ff9c:	19 d7                	sbb    edi,edx
c000ff9e:	89 f0                	mov    eax,esi
c000ffa0:	89 fa                	mov    edx,edi
c000ffa2:	31 f6                	xor    esi,esi
c000ffa4:	80 3d 31 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023931,0x0
c000ffab:	74 05                	je     c000ffb2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ffad:	be 08 07 00 00       	mov    esi,0x708
c000ffb2:	31 ff                	xor    edi,edi
c000ffb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ffb8:	29 f0                	sub    eax,esi
c000ffba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ffbe:	19 fa                	sbb    edx,edi
c000ffc0:	89 d8                	mov    eax,ebx
c000ffc2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	5f                   	pop    edi
c000ffc9:	ff e0                	jmp    eax

c000ffcb <datetimeToSeconds(datetime_t)>:
c000ffcb:	55                   	push   ebp
c000ffcc:	57                   	push   edi
c000ffcd:	56                   	push   esi
c000ffce:	53                   	push   ebx
c000ffcf:	83 ec 14             	sub    esp,0x14
c000ffd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffd6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffda:	89 d3                	mov    ebx,edx
c000ffdc:	0f b6 c6             	movzx  eax,dh
c000ffdf:	c1 eb 10             	shr    ebx,0x10
c000ffe2:	48                   	dec    eax
c000ffe3:	66 81 eb 6c 07       	sub    bx,0x76c
c000ffe8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ffec:	0f b6 f5             	movzx  esi,ch
c000ffef:	89 cf                	mov    edi,ecx
c000fff1:	6b f6 3c             	imul   esi,esi,0x3c
c000fff4:	c1 ef 10             	shr    edi,0x10
c000fff7:	0f b6 c9             	movzx  ecx,cl
c000fffa:	89 f8                	mov    eax,edi
c000fffc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010002:	0f b6 f8             	movzx  edi,al
c0010005:	0f b6 d2             	movzx  edx,dl
c0010008:	01 fe                	add    esi,edi
c001000a:	01 f1                	add    ecx,esi
c001000c:	0f b7 f3             	movzx  esi,bx
c001000f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010013:	c1 f9 1f             	sar    ecx,0x1f
c0010016:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001001b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001001f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010024:	8b 0c 8d e0 0d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf220]
c001002b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001002f:	76 29                	jbe    c001005a <datetimeToSeconds(datetime_t)+0x8f>
c0010031:	f6 c3 03             	test   bl,0x3
c0010034:	75 24                	jne    c001005a <datetimeToSeconds(datetime_t)+0x8f>
c0010036:	31 d2                	xor    edx,edx
c0010038:	bf 64 00 00 00       	mov    edi,0x64
c001003d:	89 d8                	mov    eax,ebx
c001003f:	66 f7 f7             	div    di
c0010042:	66 85 d2             	test   dx,dx
c0010045:	75 12                	jne    c0010059 <datetimeToSeconds(datetime_t)+0x8e>
c0010047:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001004d:	bf 90 01 00 00       	mov    edi,0x190
c0010052:	99                   	cdq    
c0010053:	f7 ff                	idiv   edi
c0010055:	85 d2                	test   edx,edx
c0010057:	75 01                	jne    c001005a <datetimeToSeconds(datetime_t)+0x8f>
c0010059:	41                   	inc    ecx
c001005a:	66 83 fb 46          	cmp    bx,0x46
c001005e:	76 45                	jbe    c00100a5 <datetimeToSeconds(datetime_t)+0xda>
c0010060:	bb 46 00 00 00       	mov    ebx,0x46
c0010065:	bf 64 00 00 00       	mov    edi,0x64
c001006a:	bd 90 01 00 00       	mov    ebp,0x190
c001006f:	b8 6d 01 00 00       	mov    eax,0x16d
c0010074:	f6 c3 03             	test   bl,0x3
c0010077:	75 23                	jne    c001009c <datetimeToSeconds(datetime_t)+0xd1>
c0010079:	89 d8                	mov    eax,ebx
c001007b:	99                   	cdq    
c001007c:	f7 ff                	idiv   edi
c001007e:	b8 6e 01 00 00       	mov    eax,0x16e
c0010083:	85 d2                	test   edx,edx
c0010085:	75 15                	jne    c001009c <datetimeToSeconds(datetime_t)+0xd1>
c0010087:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001008d:	99                   	cdq    
c001008e:	f7 fd                	idiv   ebp
c0010090:	83 fa 01             	cmp    edx,0x1
c0010093:	19 c0                	sbb    eax,eax
c0010095:	f7 d0                	not    eax
c0010097:	05 6e 01 00 00       	add    eax,0x16e
c001009c:	01 c1                	add    ecx,eax
c001009e:	43                   	inc    ebx
c001009f:	39 f3                	cmp    ebx,esi
c00100a1:	7c cc                	jl     c001006f <datetimeToSeconds(datetime_t)+0xa4>
c00100a3:	eb 35                	jmp    c00100da <datetimeToSeconds(datetime_t)+0x10f>
c00100a5:	74 33                	je     c00100da <datetimeToSeconds(datetime_t)+0x10f>
c00100a7:	b8 45 00 00 00       	mov    eax,0x45
c00100ac:	89 c2                	mov    edx,eax
c00100ae:	83 e2 03             	and    edx,0x3
c00100b1:	39 f0                	cmp    eax,esi
c00100b3:	7e 0f                	jle    c00100c4 <datetimeToSeconds(datetime_t)+0xf9>
c00100b5:	83 fa 01             	cmp    edx,0x1
c00100b8:	19 d2                	sbb    edx,edx
c00100ba:	48                   	dec    eax
c00100bb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00100c2:	eb e8                	jmp    c00100ac <datetimeToSeconds(datetime_t)+0xe1>
c00100c4:	b8 6d 01 00 00       	mov    eax,0x16d
c00100c9:	85 d2                	test   edx,edx
c00100cb:	75 0b                	jne    c00100d8 <datetimeToSeconds(datetime_t)+0x10d>
c00100cd:	66 83 fb 01          	cmp    bx,0x1
c00100d1:	19 c0                	sbb    eax,eax
c00100d3:	05 6e 01 00 00       	add    eax,0x16e
c00100d8:	29 c1                	sub    ecx,eax
c00100da:	b8 80 51 01 00       	mov    eax,0x15180
c00100df:	f7 e9                	imul   ecx
c00100e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00100e5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00100e9:	83 c4 14             	add    esp,0x14
c00100ec:	5b                   	pop    ebx
c00100ed:	5e                   	pop    esi
c00100ee:	5f                   	pop    edi
c00100ef:	5d                   	pop    ebp
c00100f0:	c3                   	ret    
c00100f1:	90                   	nop

c00100f2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00100f2:	57                   	push   edi
c00100f3:	56                   	push   esi
c00100f4:	53                   	push   ebx
c00100f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00100fb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00100fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010102:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010106:	e8 c0 fe ff ff       	call   c000ffcb <datetimeToSeconds(datetime_t)>
c001010b:	59                   	pop    ecx
c001010c:	0f b6 0d 30 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023930
c0010113:	5b                   	pop    ebx
c0010114:	03 0d 34 39 02 c0    	add    ecx,DWORD PTR ds:0xc0023934
c001011a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010120:	89 cb                	mov    ebx,ecx
c0010122:	c1 fb 1f             	sar    ebx,0x1f
c0010125:	29 c8                	sub    eax,ecx
c0010127:	19 da                	sbb    edx,ebx
c0010129:	31 c9                	xor    ecx,ecx
c001012b:	80 3d 31 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023931,0x0
c0010132:	74 05                	je     c0010139 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010134:	b9 08 07 00 00       	mov    ecx,0x708
c0010139:	31 db                	xor    ebx,ebx
c001013b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001013f:	29 c8                	sub    eax,ecx
c0010141:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010145:	19 da                	sbb    edx,ebx
c0010147:	89 f8                	mov    eax,edi
c0010149:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001014d:	5b                   	pop    ebx
c001014e:	5e                   	pop    esi
c001014f:	5f                   	pop    edi
c0010150:	ff e0                	jmp    eax

c0010152 <secondsToDatetime(unsigned long long)>:
c0010152:	55                   	push   ebp
c0010153:	57                   	push   edi
c0010154:	56                   	push   esi
c0010155:	53                   	push   ebx
c0010156:	83 ec 1c             	sub    esp,0x1c
c0010159:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001015d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010161:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010165:	6a 00                	push   0x0
c0010167:	68 80 51 01 00       	push   0x15180
c001016c:	55                   	push   ebp
c001016d:	57                   	push   edi
c001016e:	e8 39 e6 00 00       	call   c001e7ac <__udivdi3>
c0010173:	83 c4 10             	add    esp,0x10
c0010176:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001017c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010180:	6a 00                	push   0x0
c0010182:	68 80 51 01 00       	push   0x15180
c0010187:	55                   	push   ebp
c0010188:	57                   	push   edi
c0010189:	bf 10 0e 00 00       	mov    edi,0xe10
c001018e:	e8 19 e7 00 00       	call   c001e8ac <__umoddi3>
c0010193:	83 c4 10             	add    esp,0x10
c0010196:	99                   	cdq    
c0010197:	f7 ff                	idiv   edi
c0010199:	bf 3c 00 00 00       	mov    edi,0x3c
c001019e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00101a1:	89 d0                	mov    eax,edx
c00101a3:	99                   	cdq    
c00101a4:	f7 ff                	idiv   edi
c00101a6:	85 db                	test   ebx,ebx
c00101a8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00101ab:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00101ae:	79 11                	jns    c00101c1 <secondsToDatetime(unsigned long long)+0x6f>
c00101b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00101ba:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00101bf:	eb 07                	jmp    c00101c8 <secondsToDatetime(unsigned long long)+0x76>
c00101c1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00101c6:	89 d8                	mov    eax,ebx
c00101c8:	bf b4 05 00 00       	mov    edi,0x5b4
c00101cd:	99                   	cdq    
c00101ce:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00101d3:	f7 f9                	idiv   ecx
c00101d5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00101da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101de:	31 d2                	xor    edx,edx
c00101e0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00101e8:	01 c3                	add    ebx,eax
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	f7 f1                	div    ecx
c00101ee:	31 d2                	xor    edx,edx
c00101f0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00101f3:	89 d8                	mov    eax,ebx
c00101f5:	f7 f7                	div    edi
c00101f7:	31 d2                	xor    edx,edx
c00101f9:	29 c1                	sub    ecx,eax
c00101fb:	89 d8                	mov    eax,ebx
c00101fd:	f7 f5                	div    ebp
c00101ff:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010204:	29 c1                	sub    ecx,eax
c0010206:	31 d2                	xor    edx,edx
c0010208:	89 c8                	mov    eax,ecx
c001020a:	f7 f5                	div    ebp
c001020c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010211:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010215:	31 d2                	xor    edx,edx
c0010217:	89 c8                	mov    eax,ecx
c0010219:	f7 f5                	div    ebp
c001021b:	31 d2                	xor    edx,edx
c001021d:	01 c3                	add    ebx,eax
c001021f:	89 c8                	mov    eax,ecx
c0010221:	f7 f7                	div    edi
c0010223:	bf 99 00 00 00       	mov    edi,0x99
c0010228:	29 c3                	sub    ebx,eax
c001022a:	31 d2                	xor    edx,edx
c001022c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010234:	29 c3                	sub    ebx,eax
c0010236:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010239:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001023c:	bb 05 00 00 00       	mov    ebx,0x5
c0010241:	83 c1 02             	add    ecx,0x2
c0010244:	89 c8                	mov    eax,ecx
c0010246:	f7 f7                	div    edi
c0010248:	31 d2                	xor    edx,edx
c001024a:	89 c7                	mov    edi,eax
c001024c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010252:	83 c0 02             	add    eax,0x2
c0010255:	f7 f3                	div    ebx
c0010257:	89 eb                	mov    ebx,ebp
c0010259:	29 c3                	sub    ebx,eax
c001025b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010261:	88 1e                	mov    BYTE PTR [esi],bl
c0010263:	19 c0                	sbb    eax,eax
c0010265:	31 d2                	xor    edx,edx
c0010267:	83 e0 0c             	and    eax,0xc
c001026a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001026e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010276:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001027a:	83 f9 01             	cmp    ecx,0x1
c001027d:	0f 96 c2             	setbe  dl
c0010280:	41                   	inc    ecx
c0010281:	01 d0                	add    eax,edx
c0010283:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010286:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001028a:	83 c4 1c             	add    esp,0x1c
c001028d:	89 f0                	mov    eax,esi
c001028f:	5b                   	pop    ebx
c0010290:	5e                   	pop    esi
c0010291:	5f                   	pop    edi
c0010292:	5d                   	pop    ebp
c0010293:	c2 04 00             	ret    0x4

c0010296 <Clock::timeInDatetimeLocal()>:
c0010296:	53                   	push   ebx
c0010297:	83 ec 14             	sub    esp,0x14
c001029a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001029e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00102a2:	e8 83 fc ff ff       	call   c000ff2a <Clock::timeInSecondsLocal()>
c00102a7:	83 c4 0c             	add    esp,0xc
c00102aa:	52                   	push   edx
c00102ab:	50                   	push   eax
c00102ac:	53                   	push   ebx
c00102ad:	e8 a0 fe ff ff       	call   c0010152 <secondsToDatetime(unsigned long long)>
c00102b2:	89 d8                	mov    eax,ebx
c00102b4:	83 c4 14             	add    esp,0x14
c00102b7:	5b                   	pop    ebx
c00102b8:	c2 04 00             	ret    0x4
c00102bb:	90                   	nop

c00102bc <Device::hibernate()>:
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <Device::wake()>:
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <Device::detect()>:
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <Device::disableLegacy()>:
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Device::powerSaving(PowerSavingLevel)>:
c00102c4:	c3                   	ret    
c00102c5:	90                   	nop

c00102c6 <DriverlessDevice::close(int, int, void*)>:
c00102c6:	31 c0                	xor    eax,eax
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <DriverlessDevice::detect()>:
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <DriverlessDevice::open(int, int, void*)>:
c00102cc:	83 ec 18             	sub    esp,0x18
c00102cf:	68 10 0e 02 c0       	push   0xc0020e10
c00102d4:	e8 ef 49 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c00102d9:	83 c8 ff             	or     eax,0xffffffff
c00102dc:	83 c4 1c             	add    esp,0x1c
c00102df:	c3                   	ret    

c00102e0 <Device::~Device()>:
c00102e0:	ba 38 0e 02 c0       	mov    edx,0xc0020e38
c00102e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e9:	89 10                	mov    DWORD PTR [eax],edx
c00102eb:	90                   	nop
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop

c00102ee <Device::~Device()>:
c00102ee:	83 ec 0c             	sub    esp,0xc
c00102f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102f5:	e8 e6 ff ff ff       	call   c00102e0 <Device::~Device()>
c00102fa:	83 c4 04             	add    esp,0x4
c00102fd:	83 ec 08             	sub    esp,0x8
c0010300:	68 58 01 00 00       	push   0x158
c0010305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010309:	e8 45 ec ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001030e:	83 c4 10             	add    esp,0x10
c0010311:	83 c4 0c             	add    esp,0xc
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <Device::findAndLoadDriver()>:
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010318:	57                   	push   edi
c0010319:	b9 09 00 00 00       	mov    ecx,0x9
c001031e:	56                   	push   esi
c001031f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010323:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010327:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010331:	81 c7 18 01 00 00    	add    edi,0x118
c0010337:	fc                   	cld    
c0010338:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001033a:	5e                   	pop    esi
c001033b:	5f                   	pop    edi
c001033c:	c3                   	ret    
c001033d:	90                   	nop

c001033e <Device::preOpenACPI(void*, char*, char*)>:
c001033e:	56                   	push   esi
c001033f:	53                   	push   ebx
c0010340:	83 ec 08             	sub    esp,0x8
c0010343:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010347:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001034b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010359:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001035f:	6a 1e                	push   0x1e
c0010361:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001036b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010371:	50                   	push   eax
c0010372:	e8 5b 02 ff ff       	call   c00005d2 <memcpy>
c0010377:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001037b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001037f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010387:	83 c4 14             	add    esp,0x14
c001038a:	5b                   	pop    ebx
c001038b:	5e                   	pop    esi
c001038c:	e9 41 02 ff ff       	jmp    c00005d2 <memcpy>
c0010391:	90                   	nop

c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010392:	55                   	push   ebp
c0010393:	57                   	push   edi
c0010394:	56                   	push   esi
c0010395:	53                   	push   ebx
c0010396:	83 ec 0c             	sub    esp,0xc
c0010399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001039d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00103a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103a9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00103ae:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00103b5:	75 0b                	jne    c00103c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00103b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00103b9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00103bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00103c0:	eb 24                	jmp    c00103e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00103c2:	e8 fb 3b 00 00       	call   c0013fc2 <thisCPU()>
c00103c7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00103cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00103cf:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00103d3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00103d7:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00103db:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00103df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00103e3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00103e6:	83 c4 0c             	add    esp,0xc
c00103e9:	5b                   	pop    ebx
c00103ea:	5e                   	pop    esi
c00103eb:	5f                   	pop    edi
c00103ec:	5d                   	pop    ebp
c00103ed:	ff e0                	jmp    eax
c00103ef:	90                   	nop

c00103f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00103f0:	57                   	push   edi
c00103f1:	56                   	push   esi
c00103f2:	53                   	push   ebx
c00103f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103ff:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010404:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001040b:	75 0b                	jne    c0010418 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001040d:	8b 00                	mov    eax,DWORD PTR [eax]
c001040f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010413:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010416:	eb 20                	jmp    c0010438 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010418:	e8 a5 3b 00 00       	call   c0013fc2 <thisCPU()>
c001041d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010423:	8b 10                	mov    edx,DWORD PTR [eax]
c0010425:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010429:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001042d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010431:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010435:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010438:	5b                   	pop    ebx
c0010439:	5e                   	pop    esi
c001043a:	5f                   	pop    edi
c001043b:	ff e0                	jmp    eax
c001043d:	90                   	nop

c001043e <Device::addChild(Device*)>:
c001043e:	53                   	push   ebx
c001043f:	83 ec 08             	sub    esp,0x8
c0010442:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010446:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001044a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010450:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010456:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010458:	85 d2                	test   edx,edx
c001045a:	74 04                	je     c0010460 <Device::addChild(Device*)+0x22>
c001045c:	89 d3                	mov    ebx,edx
c001045e:	eb f6                	jmp    c0010456 <Device::addChild(Device*)+0x18>
c0010460:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	6a 08                	push   0x8
c0010468:	e8 d7 ea ff ff       	call   c000ef44 <operator new(unsigned long)>
c001046d:	89 03                	mov    DWORD PTR [ebx],eax
c001046f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010475:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001047c:	83 c4 18             	add    esp,0x18
c001047f:	5b                   	pop    ebx
c0010480:	c3                   	ret    
c0010481:	90                   	nop

c0010482 <Device::removeAllChildren()>:
c0010482:	56                   	push   esi
c0010483:	53                   	push   ebx
c0010484:	52                   	push   edx
c0010485:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010489:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001048f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010492:	74 17                	je     c00104ab <Device::removeAllChildren()+0x29>
c0010494:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010497:	85 c0                	test   eax,eax
c0010499:	74 0c                	je     c00104a7 <Device::removeAllChildren()+0x25>
c001049b:	83 ec 0c             	sub    esp,0xc
c001049e:	8b 10                	mov    edx,DWORD PTR [eax]
c00104a0:	50                   	push   eax
c00104a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00104a4:	83 c4 10             	add    esp,0x10
c00104a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104a9:	eb e4                	jmp    c001048f <Device::removeAllChildren()+0xd>
c00104ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00104b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00104bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104c4:	58                   	pop    eax
c00104c5:	5b                   	pop    ebx
c00104c6:	5e                   	pop    esi
c00104c7:	c3                   	ret    

c00104c8 <Device::hibernateAll()>:
c00104c8:	53                   	push   ebx
c00104c9:	83 ec 14             	sub    esp,0x14
c00104cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104d2:	53                   	push   ebx
c00104d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00104d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104e2:	74 0f                	je     c00104f3 <Device::hibernateAll()+0x2b>
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104ea:	e8 d9 ff ff ff       	call   c00104c8 <Device::hibernateAll()>
c00104ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104f1:	eb e9                	jmp    c00104dc <Device::hibernateAll()+0x14>
c00104f3:	83 c4 08             	add    esp,0x8
c00104f6:	5b                   	pop    ebx
c00104f7:	c3                   	ret    

c00104f8 <Device::wakeAll()>:
c00104f8:	53                   	push   ebx
c00104f9:	83 ec 14             	sub    esp,0x14
c00104fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010502:	53                   	push   ebx
c0010503:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010506:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010512:	74 0f                	je     c0010523 <Device::wakeAll()+0x2b>
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001051a:	e8 d9 ff ff ff       	call   c00104f8 <Device::wakeAll()>
c001051f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010521:	eb e9                	jmp    c001050c <Device::wakeAll()+0x14>
c0010523:	83 c4 08             	add    esp,0x8
c0010526:	5b                   	pop    ebx
c0010527:	c3                   	ret    

c0010528 <Device::detectAll()>:
c0010528:	53                   	push   ebx
c0010529:	83 ec 14             	sub    esp,0x14
c001052c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010530:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010532:	53                   	push   ebx
c0010533:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010536:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001053c:	83 c4 10             	add    esp,0x10
c001053f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010542:	74 0f                	je     c0010553 <Device::detectAll()+0x2b>
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001054a:	e8 d9 ff ff ff       	call   c0010528 <Device::detectAll()>
c001054f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010551:	eb e9                	jmp    c001053c <Device::detectAll()+0x14>
c0010553:	83 c4 08             	add    esp,0x8
c0010556:	5b                   	pop    ebx
c0010557:	c3                   	ret    

c0010558 <Device::disableLegacyAll()>:
c0010558:	53                   	push   ebx
c0010559:	83 ec 14             	sub    esp,0x14
c001055c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010560:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010562:	53                   	push   ebx
c0010563:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010566:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010572:	74 0f                	je     c0010583 <Device::disableLegacyAll()+0x2b>
c0010574:	83 ec 0c             	sub    esp,0xc
c0010577:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001057a:	e8 d9 ff ff ff       	call   c0010558 <Device::disableLegacyAll()>
c001057f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010581:	eb e9                	jmp    c001056c <Device::disableLegacyAll()+0x14>
c0010583:	83 c4 08             	add    esp,0x8
c0010586:	5b                   	pop    ebx
c0010587:	c3                   	ret    

c0010588 <Device::loadDriversForAll()>:
c0010588:	53                   	push   ebx
c0010589:	83 ec 08             	sub    esp,0x8
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010596:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010598:	85 db                	test   ebx,ebx
c001059a:	74 12                	je     c00105ae <Device::loadDriversForAll()+0x26>
c001059c:	83 ec 0c             	sub    esp,0xc
c001059f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00105a2:	e8 e1 ff ff ff       	call   c0010588 <Device::loadDriversForAll()>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	89 d8                	mov    eax,ebx
c00105ac:	eb e8                	jmp    c0010596 <Device::loadDriversForAll()+0xe>
c00105ae:	83 c4 08             	add    esp,0x8
c00105b1:	5b                   	pop    ebx
c00105b2:	c3                   	ret    
c00105b3:	90                   	nop

c00105b4 <Device::closeAll()>:
c00105b4:	53                   	push   ebx
c00105b5:	83 ec 08             	sub    esp,0x8
c00105b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105be:	6a 00                	push   0x0
c00105c0:	6a 00                	push   0x0
c00105c2:	6a 00                	push   0x0
c00105c4:	53                   	push   ebx
c00105c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00105c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105d4:	74 0f                	je     c00105e5 <Device::closeAll()+0x31>
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105dc:	e8 d3 ff ff ff       	call   c00105b4 <Device::closeAll()>
c00105e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105e3:	eb e9                	jmp    c00105ce <Device::closeAll()+0x1a>
c00105e5:	83 c4 08             	add    esp,0x8
c00105e8:	5b                   	pop    ebx
c00105e9:	c3                   	ret    

c00105ea <Device::powerSavingAll(PowerSavingLevel)>:
c00105ea:	56                   	push   esi
c00105eb:	53                   	push   ebx
c00105ec:	83 ec 0c             	sub    esp,0xc
c00105ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00105f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105f9:	56                   	push   esi
c00105fa:	53                   	push   ebx
c00105fb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00105fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001060a:	74 0f                	je     c001061b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001060c:	52                   	push   edx
c001060d:	52                   	push   edx
c001060e:	56                   	push   esi
c001060f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010612:	e8 d3 ff ff ff       	call   c00105ea <Device::powerSavingAll(PowerSavingLevel)>
c0010617:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010619:	eb e9                	jmp    c0010604 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001061b:	58                   	pop    eax
c001061c:	5b                   	pop    ebx
c001061d:	5e                   	pop    esi
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <Device::setName(char const*)>:
c0010620:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010628:	e9 7a 00 ff ff       	jmp    c00006a7 <strcpy>
c001062d:	90                   	nop

c001062e <Device::Device(char const*)>:
c001062e:	83 ec 0c             	sub    esp,0xc
c0010631:	ba 38 0e 02 c0       	mov    edx,0xc0020e38
c0010636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063a:	89 10                	mov    DWORD PTR [eax],edx
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010674:	83 ec 08             	sub    esp,0x8
c0010677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067f:	e8 9c ff ff ff       	call   c0010620 <Device::setName(char const*)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	6a 08                	push   0x8
c001068c:	e8 b3 e8 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001069a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00106ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00106d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00106e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00106fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010702:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001070c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010710:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001071a:	90                   	nop
c001071b:	83 c4 0c             	add    esp,0xc
c001071e:	c3                   	ret    
c001071f:	90                   	nop

c0010720 <Device::getName()>:
c0010720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010724:	05 d0 00 00 00       	add    eax,0xd0
c0010729:	c3                   	ret    

c001072a <DriverlessDevice::DriverlessDevice(char const*)>:
c001072a:	83 ec 0c             	sub    esp,0xc
c001072d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010731:	83 ec 08             	sub    esp,0x8
c0010734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010738:	50                   	push   eax
c0010739:	e8 f0 fe ff ff       	call   c001062e <Device::Device(char const*)>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	ba 64 0e 02 c0       	mov    edx,0xc0020e64
c0010746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001074a:	89 10                	mov    DWORD PTR [eax],edx
c001074c:	90                   	nop
c001074d:	83 c4 0c             	add    esp,0xc
c0010750:	c3                   	ret    
c0010751:	90                   	nop

c0010752 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010752:	57                   	push   edi
c0010753:	56                   	push   esi
c0010754:	53                   	push   ebx
c0010755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010759:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001075d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010761:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010767:	75 0c                	jne    c0010775 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010769:	52                   	push   edx
c001076a:	52                   	push   edx
c001076b:	53                   	push   ebx
c001076c:	56                   	push   esi
c001076d:	e8 52 e5 00 00       	call   c001ecc4 <LinkedList<Device>::addElement(Device*)>
c0010772:	83 c4 10             	add    esp,0x10
c0010775:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001077b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001077e:	74 12                	je     c0010792 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010780:	50                   	push   eax
c0010781:	57                   	push   edi
c0010782:	56                   	push   esi
c0010783:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010786:	e8 c7 ff ff ff       	call   c0010752 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001078b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	eb e9                	jmp    c001077b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010792:	5b                   	pop    ebx
c0010793:	5e                   	pop    esi
c0010794:	5f                   	pop    edi
c0010795:	c3                   	ret    

c0010796 <getDevicesOfType(DeviceType)>:
c0010796:	53                   	push   ebx
c0010797:	83 ec 14             	sub    esp,0x14
c001079a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001079e:	53                   	push   ebx
c001079f:	e8 fc e5 00 00       	call   c001eda0 <LinkedList<Device>::LinkedList()>
c00107a4:	83 c4 0c             	add    esp,0xc
c00107a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107ab:	53                   	push   ebx
c00107ac:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c00107b2:	e8 9b ff ff ff       	call   c0010752 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00107b7:	89 d8                	mov    eax,ebx
c00107b9:	83 c4 18             	add    esp,0x18
c00107bc:	5b                   	pop    ebx
c00107bd:	c2 04 00             	ret    0x4

c00107c0 <HardDiskController::HardDiskController(char const*)>:
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c7:	83 ec 08             	sub    esp,0x8
c00107ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ce:	50                   	push   eax
c00107cf:	e8 5a fe ff ff       	call   c001062e <Device::Device(char const*)>
c00107d4:	83 c4 10             	add    esp,0x10
c00107d7:	ba 90 0e 02 c0       	mov    edx,0xc0020e90
c00107dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e0:	89 10                	mov    DWORD PTR [eax],edx
c00107e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00107f0:	90                   	nop
c00107f1:	83 c4 0c             	add    esp,0xc
c00107f4:	c3                   	ret    
c00107f5:	90                   	nop

c00107f6 <HardDiskController::~HardDiskController()>:
c00107f6:	83 ec 0c             	sub    esp,0xc
c00107f9:	ba 90 0e 02 c0       	mov    edx,0xc0020e90
c00107fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010802:	89 10                	mov    DWORD PTR [eax],edx
c0010804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010808:	83 ec 0c             	sub    esp,0xc
c001080b:	50                   	push   eax
c001080c:	e8 cf fa ff ff       	call   c00102e0 <Device::~Device()>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	90                   	nop
c0010815:	83 c4 0c             	add    esp,0xc
c0010818:	c3                   	ret    
c0010819:	90                   	nop

c001081a <HardDiskController::~HardDiskController()>:
c001081a:	83 ec 0c             	sub    esp,0xc
c001081d:	83 ec 0c             	sub    esp,0xc
c0010820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010824:	e8 cd ff ff ff       	call   c00107f6 <HardDiskController::~HardDiskController()>
c0010829:	83 c4 10             	add    esp,0x10
c001082c:	83 ec 08             	sub    esp,0x8
c001082f:	68 58 01 00 00       	push   0x158
c0010834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010838:	e8 16 e7 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001083d:	83 c4 10             	add    esp,0x10
c0010840:	83 c4 0c             	add    esp,0xc
c0010843:	c3                   	ret    

c0010844 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010844:	83 ec 0c             	sub    esp,0xc
c0010847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084b:	83 ec 08             	sub    esp,0x8
c001084e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010852:	50                   	push   eax
c0010853:	e8 d6 fd ff ff       	call   c001062e <Device::Device(char const*)>
c0010858:	83 c4 10             	add    esp,0x10
c001085b:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c0010860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010864:	89 10                	mov    DWORD PTR [eax],edx
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010875:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001088a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010892:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00108a6:	90                   	nop
c00108a7:	83 c4 0c             	add    esp,0xc
c00108aa:	c3                   	ret    
c00108ab:	90                   	nop

c00108ac <PhysicalDisk::startCache()>:
c00108ac:	56                   	push   esi
c00108ad:	53                   	push   ebx
c00108ae:	83 ec 10             	sub    esp,0x10
c00108b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108b5:	6a 30                	push   0x30
c00108b7:	e8 88 e6 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00108bc:	89 c6                	mov    esi,eax
c00108be:	58                   	pop    eax
c00108bf:	5a                   	pop    edx
c00108c0:	53                   	push   ebx
c00108c1:	56                   	push   esi
c00108c2:	e8 6d 1e 00 00       	call   c0012734 <VCache::VCache(PhysicalDisk*)>
c00108c7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00108cd:	83 c4 14             	add    esp,0x14
c00108d0:	5b                   	pop    ebx
c00108d1:	5e                   	pop    esi
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <PhysicalDisk::~PhysicalDisk()>:
c00108d4:	83 ec 0c             	sub    esp,0xc
c00108d7:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	89 10                	mov    DWORD PTR [eax],edx
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	83 ec 0c             	sub    esp,0xc
c00108e9:	50                   	push   eax
c00108ea:	e8 f1 f9 ff ff       	call   c00102e0 <Device::~Device()>
c00108ef:	83 c4 10             	add    esp,0x10
c00108f2:	90                   	nop
c00108f3:	83 c4 0c             	add    esp,0xc
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <PhysicalDisk::~PhysicalDisk()>:
c00108f8:	83 ec 0c             	sub    esp,0xc
c00108fb:	83 ec 0c             	sub    esp,0xc
c00108fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010902:	e8 cd ff ff ff       	call   c00108d4 <PhysicalDisk::~PhysicalDisk()>
c0010907:	83 c4 10             	add    esp,0x10
c001090a:	83 ec 08             	sub    esp,0x8
c001090d:	68 6c 01 00 00       	push   0x16c
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	e8 38 e6 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	83 c4 0c             	add    esp,0xc
c0010921:	c3                   	ret    

c0010922 <FPU::FPU(char const*)>:
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010929:	83 ec 08             	sub    esp,0x8
c001092c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010930:	50                   	push   eax
c0010931:	e8 f8 fc ff ff       	call   c001062e <Device::Device(char const*)>
c0010936:	83 c4 10             	add    esp,0x10
c0010939:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c001093e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010942:	89 10                	mov    DWORD PTR [eax],edx
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010952:	90                   	nop
c0010953:	83 c4 0c             	add    esp,0xc
c0010956:	c3                   	ret    
c0010957:	90                   	nop

c0010958 <FPU::~FPU()>:
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	89 10                	mov    DWORD PTR [eax],edx
c0010966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	50                   	push   eax
c001096e:	e8 6d f9 ff ff       	call   c00102e0 <Device::~Device()>
c0010973:	83 c4 10             	add    esp,0x10
c0010976:	90                   	nop
c0010977:	83 c4 0c             	add    esp,0xc
c001097a:	c3                   	ret    
c001097b:	90                   	nop

c001097c <FPU::~FPU()>:
c001097c:	83 ec 0c             	sub    esp,0xc
c001097f:	83 ec 0c             	sub    esp,0xc
c0010982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010986:	e8 cd ff ff ff       	call   c0010958 <FPU::~FPU()>
c001098b:	83 c4 10             	add    esp,0x10
c001098e:	83 ec 08             	sub    esp,0x8
c0010991:	68 58 01 00 00       	push   0x158
c0010996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001099a:	e8 b4 e5 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001099f:	83 c4 10             	add    esp,0x10
c00109a2:	83 c4 0c             	add    esp,0xc
c00109a5:	c3                   	ret    

c00109a6 <setupFPU()>:
c00109a6:	53                   	push   ebx
c00109a7:	83 ec 08             	sub    esp,0x8
c00109aa:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c00109af:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00109b6:	74 19                	je     c00109d1 <setupFPU()+0x2b>
c00109b8:	83 ec 0c             	sub    esp,0xc
c00109bb:	68 58 01 00 00       	push   0x158
c00109c0:	e8 7f e5 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00109c5:	89 c3                	mov    ebx,eax
c00109c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ca:	e8 a9 ca 00 00       	call   c001d478 <AVX::AVX()>
c00109cf:	eb 5b                	jmp    c0010a2c <setupFPU()+0x86>
c00109d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00109d7:	84 c0                	test   al,al
c00109d9:	79 19                	jns    c00109f4 <setupFPU()+0x4e>
c00109db:	83 ec 0c             	sub    esp,0xc
c00109de:	68 58 01 00 00       	push   0x158
c00109e3:	e8 5c e5 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00109e8:	89 c3                	mov    ebx,eax
c00109ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ed:	e8 ac cb 00 00       	call   c001d59e <SSE::SSE()>
c00109f2:	eb 38                	jmp    c0010a2c <setupFPU()+0x86>
c00109f4:	a8 20                	test   al,0x20
c00109f6:	74 19                	je     c0010a11 <setupFPU()+0x6b>
c00109f8:	83 ec 0c             	sub    esp,0xc
c00109fb:	68 58 01 00 00       	push   0x158
c0010a00:	e8 3f e5 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0010a05:	89 c3                	mov    ebx,eax
c0010a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a0a:	e8 f9 ca 00 00       	call   c001d508 <MMX::MMX()>
c0010a0f:	eb 1b                	jmp    c0010a2c <setupFPU()+0x86>
c0010a11:	a8 10                	test   al,0x10
c0010a13:	74 1c                	je     c0010a31 <setupFPU()+0x8b>
c0010a15:	83 ec 0c             	sub    esp,0xc
c0010a18:	68 58 01 00 00       	push   0x158
c0010a1d:	e8 22 e5 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0010a22:	89 c3                	mov    ebx,eax
c0010a24:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a27:	e8 00 cc 00 00       	call   c001d62c <x87::x87()>
c0010a2c:	83 c4 10             	add    esp,0x10
c0010a2f:	eb 2c                	jmp    c0010a5d <setupFPU()+0xb7>
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	31 db                	xor    ebx,ebx
c0010a36:	68 e8 0e 02 c0       	push   0xc0020ee8
c0010a3b:	e8 f3 e5 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010a40:	e8 7d 35 00 00       	call   c0013fc2 <thisCPU()>
c0010a45:	e8 78 35 00 00       	call   c0013fc2 <thisCPU()>
c0010a4a:	e8 a9 e3 00 00       	call   c001edf8 <CPU::readCR0()>
c0010a4f:	83 c8 04             	or     eax,0x4
c0010a52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a55:	e8 b0 e3 00 00       	call   c001ee0a <CPU::writeCR0(unsigned long)>
c0010a5a:	83 c4 10             	add    esp,0x10
c0010a5d:	89 d8                	mov    eax,ebx
c0010a5f:	83 c4 08             	add    esp,0x8
c0010a62:	5b                   	pop    ebx
c0010a63:	c3                   	ret    

c0010a64 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010a64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a6c:	c1 e0 04             	shl    eax,0x4
c0010a6f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010a73:	8d 50 10             	lea    edx,[eax+0x10]
c0010a76:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010a7c:	74 08                	je     c0010a86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010a7e:	83 c0 04             	add    eax,0x4
c0010a81:	39 d0                	cmp    eax,edx
c0010a83:	75 f1                	jne    c0010a76 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010a85:	c3                   	ret    
c0010a86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a90:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a9a:	eb e2                	jmp    c0010a7e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a9c:	57                   	push   edi
c0010a9d:	31 c0                	xor    eax,eax
c0010a9f:	56                   	push   esi
c0010aa0:	53                   	push   ebx
c0010aa1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010aa5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010aa9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010aad:	89 da                	mov    edx,ebx
c0010aaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010ab3:	c1 e2 04             	shl    edx,0x4
c0010ab6:	01 ca                	add    edx,ecx
c0010ab8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010ac0:	74 16                	je     c0010ad8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010ac2:	40                   	inc    eax
c0010ac3:	83 f8 04             	cmp    eax,0x4
c0010ac6:	75 f0                	jne    c0010ab8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010ac8:	c7 44 24 10 2c 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f2c
c0010ad0:	5b                   	pop    ebx
c0010ad1:	5e                   	pop    esi
c0010ad2:	5f                   	pop    edi
c0010ad3:	e9 f0 41 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c0010ad8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010adb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010ade:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010ae4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010aea:	5b                   	pop    ebx
c0010aeb:	5e                   	pop    esi
c0010aec:	5f                   	pop    edi
c0010aed:	c3                   	ret    

c0010aee <doubleFault(regs*, void*)>:
c0010aee:	c7 44 24 04 5c 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002105c
c0010af6:	e9 cd 41 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c0010afb:	90                   	nop

c0010afc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010afc:	56                   	push   esi
c0010afd:	53                   	push   ebx
c0010afe:	50                   	push   eax
c0010aff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b07:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010b0c:	75 35                	jne    c0010b43 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010b0e:	8d 43 20             	lea    eax,[ebx+0x20]
c0010b11:	31 d2                	xor    edx,edx
c0010b13:	89 c1                	mov    ecx,eax
c0010b15:	c1 e1 04             	shl    ecx,0x4
c0010b18:	01 f1                	add    ecx,esi
c0010b1a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010b22:	74 3e                	je     c0010b62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010b24:	42                   	inc    edx
c0010b25:	83 fa 04             	cmp    edx,0x4
c0010b28:	75 f0                	jne    c0010b1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010b2a:	83 ec 0c             	sub    esp,0xc
c0010b2d:	68 a0 0f 02 c0       	push   0xc0020fa0
c0010b32:	e8 91 41 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b3f:	5a                   	pop    edx
c0010b40:	5b                   	pop    ebx
c0010b41:	5e                   	pop    esi
c0010b42:	c3                   	ret    
c0010b43:	83 ec 0c             	sub    esp,0xc
c0010b46:	56                   	push   esi
c0010b47:	e8 d4 fb ff ff       	call   c0010720 <Device::getName()>
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b52:	75 ba                	jne    c0010b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b54:	83 fb 0f             	cmp    ebx,0xf
c0010b57:	7f 29                	jg     c0010b82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010b59:	0f b6 9b 20 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd0e0]
c0010b60:	eb ac                	jmp    c0010b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b62:	8d 04 82             	lea    eax,[edx+eax*4]
c0010b65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b69:	8d 04 86             	lea    eax,[esi+eax*4]
c0010b6c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010b72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b76:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010b7c:	89 d8                	mov    eax,ebx
c0010b7e:	5a                   	pop    edx
c0010b7f:	5b                   	pop    ebx
c0010b80:	5e                   	pop    esi
c0010b81:	c3                   	ret    
c0010b82:	83 ec 0c             	sub    esp,0xc
c0010b85:	68 68 0f 02 c0       	push   0xc0020f68
c0010b8a:	e8 39 41 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	e9 77 ff ff ff       	jmp    c0010b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b97:	90                   	nop

c0010b98 <InterruptController::clearAllHandlers(int, bool)>:
c0010b98:	56                   	push   esi
c0010b99:	53                   	push   ebx
c0010b9a:	52                   	push   edx
c0010b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010ba3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010ba8:	75 61                	jne    c0010c0b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010baa:	8d 46 20             	lea    eax,[esi+0x20]
c0010bad:	c1 e6 04             	shl    esi,0x4
c0010bb0:	c1 e0 04             	shl    eax,0x4
c0010bb3:	01 de                	add    esi,ebx
c0010bb5:	01 d8                	add    eax,ebx
c0010bb7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010bc1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010bcb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010bd5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010bdf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010be9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010bf3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010bfd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010c07:	58                   	pop    eax
c0010c08:	5b                   	pop    ebx
c0010c09:	5e                   	pop    esi
c0010c0a:	c3                   	ret    
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	53                   	push   ebx
c0010c0f:	e8 0c fb ff ff       	call   c0010720 <Device::getName()>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c1a:	75 8e                	jne    c0010baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c1c:	83 fe 0f             	cmp    esi,0xf
c0010c1f:	7f 09                	jg     c0010c2a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010c21:	0f b6 b6 20 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd0e0]
c0010c28:	eb 80                	jmp    c0010baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	68 dc 0f 02 c0       	push   0xc0020fdc
c0010c32:	e8 91 40 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	e9 6b ff ff ff       	jmp    c0010baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c3f:	90                   	nop

c0010c40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010c40:	56                   	push   esi
c0010c41:	53                   	push   ebx
c0010c42:	52                   	push   edx
c0010c43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c50:	75 3a                	jne    c0010c8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010c52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c56:	8d 50 20             	lea    edx,[eax+0x20]
c0010c59:	c1 e2 04             	shl    edx,0x4
c0010c5c:	8d 04 16             	lea    eax,[esi+edx*1]
c0010c5f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010c63:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010c69:	74 0b                	je     c0010c76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010c6b:	83 c0 04             	add    eax,0x4
c0010c6e:	39 d0                	cmp    eax,edx
c0010c70:	75 f1                	jne    c0010c63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010c72:	58                   	pop    eax
c0010c73:	5b                   	pop    ebx
c0010c74:	5e                   	pop    esi
c0010c75:	c3                   	ret    
c0010c76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c8a:	eb df                	jmp    c0010c6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	56                   	push   esi
c0010c90:	e8 8b fa ff ff       	call   c0010720 <Device::getName()>
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c9b:	75 b5                	jne    c0010c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c9d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010ca2:	7f 11                	jg     c0010cb5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010ca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ca8:	0f b6 80 20 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd0e0]
c0010caf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010cb3:	eb 9d                	jmp    c0010c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010cb5:	83 ec 0c             	sub    esp,0xc
c0010cb8:	68 dc 0f 02 c0       	push   0xc0020fdc
c0010cbd:	e8 06 40 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	eb 8b                	jmp    c0010c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010cc7 <nmiHandler(regs*, void*)>:
c0010cc7:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0010ccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cd0:	e9 9b a6 ff ff       	jmp    c000b370 <Computer::handleNMI()>

c0010cd5 <int_handler>:
c0010cd5:	55                   	push   ebp
c0010cd6:	57                   	push   edi
c0010cd7:	56                   	push   esi
c0010cd8:	53                   	push   ebx
c0010cd9:	83 ec 0c             	sub    esp,0xc
c0010cdc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ce0:	80 3d 10 42 02 c0 00 	cmp    BYTE PTR ds:0xc0024210,0x0
c0010ce7:	74 0b                	je     c0010cf4 <int_handler+0x1f>
c0010ce9:	fa                   	cli    
c0010cea:	f4                   	hlt    
c0010ceb:	80 3d 10 42 02 c0 00 	cmp    BYTE PTR ds:0xc0024210,0x0
c0010cf2:	75 f5                	jne    c0010ce9 <int_handler+0x14>
c0010cf4:	e8 c9 32 00 00       	call   c0013fc2 <thisCPU()>
c0010cf9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010cfc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010d02:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010d05:	83 f8 17             	cmp    eax,0x17
c0010d08:	77 13                	ja     c0010d1d <int_handler+0x48>
c0010d0a:	83 ec 08             	sub    esp,0x8
c0010d0d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010d0f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010d12:	0f b6 c0             	movzx  eax,al
c0010d15:	50                   	push   eax
c0010d16:	57                   	push   edi
c0010d17:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010d1a:	83 c4 10             	add    esp,0x10
c0010d1d:	83 c3 15             	add    ebx,0x15
c0010d20:	c1 e3 04             	shl    ebx,0x4
c0010d23:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010d27:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010d2e:	31 db                	xor    ebx,ebx
c0010d30:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010d34:	85 c0                	test   eax,eax
c0010d36:	74 13                	je     c0010d4b <int_handler+0x76>
c0010d38:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010d3b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010d3f:	74 1c                	je     c0010d5d <int_handler+0x88>
c0010d41:	83 ec 08             	sub    esp,0x8
c0010d44:	52                   	push   edx
c0010d45:	56                   	push   esi
c0010d46:	ff d0                	call   eax
c0010d48:	83 c4 10             	add    esp,0x10
c0010d4b:	43                   	inc    ebx
c0010d4c:	83 fb 04             	cmp    ebx,0x4
c0010d4f:	75 df                	jne    c0010d30 <int_handler+0x5b>
c0010d51:	83 c4 0c             	add    esp,0xc
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	5b                   	pop    ebx
c0010d57:	31 d2                	xor    edx,edx
c0010d59:	5e                   	pop    esi
c0010d5a:	5f                   	pop    edi
c0010d5b:	5d                   	pop    ebp
c0010d5c:	c3                   	ret    
c0010d5d:	83 ec 08             	sub    esp,0x8
c0010d60:	52                   	push   edx
c0010d61:	56                   	push   esi
c0010d62:	ff d0                	call   eax
c0010d64:	83 c4 10             	add    esp,0x10
c0010d67:	83 c4 0c             	add    esp,0xc
c0010d6a:	5b                   	pop    ebx
c0010d6b:	5e                   	pop    esi
c0010d6c:	5f                   	pop    edi
c0010d6d:	5d                   	pop    ebp
c0010d6e:	c3                   	ret    
c0010d6f:	90                   	nop

c0010d70 <InterruptController::InterruptController(char const*)>:
c0010d70:	83 ec 1c             	sub    esp,0x1c
c0010d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d77:	83 ec 08             	sub    esp,0x8
c0010d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d7e:	50                   	push   eax
c0010d7f:	e8 aa f8 ff ff       	call   c001062e <Device::Device(char const*)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	ba f8 11 02 c0       	mov    edx,0xc00211f8
c0010d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d90:	89 10                	mov    DWORD PTR [eax],edx
c0010d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d96:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010da0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010db0:	7f 5e                	jg     c0010e10 <InterruptController::InterruptController(char const*)+0xa0>
c0010db2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010dba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010dbf:	7f 49                	jg     c0010e0a <InterruptController::InterruptController(char const*)+0x9a>
c0010dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010dc9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010dd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dd4:	01 ca                	add    edx,ecx
c0010dd6:	83 c2 54             	add    edx,0x54
c0010dd9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010de9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010df0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010df4:	01 ca                	add    edx,ecx
c0010df6:	81 c2 54 04 00 00    	add    edx,0x454
c0010dfc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010e04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010e08:	eb b0                	jmp    c0010dba <InterruptController::InterruptController(char const*)+0x4a>
c0010e0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010e0e:	eb 98                	jmp    c0010da8 <InterruptController::InterruptController(char const*)+0x38>
c0010e10:	90                   	nop
c0010e11:	83 c4 1c             	add    esp,0x1c
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <InterruptController::~InterruptController()>:
c0010e16:	83 ec 0c             	sub    esp,0xc
c0010e19:	ba f8 11 02 c0       	mov    edx,0xc00211f8
c0010e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e22:	89 10                	mov    DWORD PTR [eax],edx
c0010e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	50                   	push   eax
c0010e2c:	e8 af f4 ff ff       	call   c00102e0 <Device::~Device()>
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	90                   	nop
c0010e35:	83 c4 0c             	add    esp,0xc
c0010e38:	c3                   	ret    
c0010e39:	90                   	nop

c0010e3a <InterruptController::~InterruptController()>:
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	83 ec 0c             	sub    esp,0xc
c0010e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e44:	e8 cd ff ff ff       	call   c0010e16 <InterruptController::~InterruptController()>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	83 ec 08             	sub    esp,0x8
c0010e4f:	68 58 21 00 00       	push   0x2158
c0010e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e58:	e8 f6 e0 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	83 c4 0c             	add    esp,0xc
c0010e63:	c3                   	ret    

c0010e64 <displayDebugInfo(regs*)>:
c0010e64:	55                   	push   ebp
c0010e65:	57                   	push   edi
c0010e66:	56                   	push   esi
c0010e67:	53                   	push   ebx
c0010e68:	83 ec 24             	sub    esp,0x24
c0010e6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e6f:	0f 20 c2             	mov    edx,cr0
c0010e72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e76:	0f 20 d7             	mov    edi,cr2
c0010e79:	0f 20 de             	mov    esi,cr3
c0010e7c:	0f 20 e5             	mov    ebp,cr4
c0010e7f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010e82:	68 69 10 02 c0       	push   0xc0021069
c0010e87:	e8 a7 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010e8c:	58                   	pop    eax
c0010e8d:	5a                   	pop    edx
c0010e8e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e91:	68 74 10 02 c0       	push   0xc0021074
c0010e96:	e8 98 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010e9b:	59                   	pop    ecx
c0010e9c:	58                   	pop    eax
c0010e9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ea0:	68 7f 10 02 c0       	push   0xc002107f
c0010ea5:	e8 89 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010eaa:	58                   	pop    eax
c0010eab:	5a                   	pop    edx
c0010eac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010eaf:	68 8a 10 02 c0       	push   0xc002108a
c0010eb4:	e8 7a e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010eb9:	59                   	pop    ecx
c0010eba:	58                   	pop    eax
c0010ebb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ebe:	68 95 10 02 c0       	push   0xc0021095
c0010ec3:	e8 6b e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010ec8:	58                   	pop    eax
c0010ec9:	5a                   	pop    edx
c0010eca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010ecd:	68 a0 10 02 c0       	push   0xc00210a0
c0010ed2:	e8 5c e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010ed7:	59                   	pop    ecx
c0010ed8:	58                   	pop    eax
c0010ed9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010edc:	68 ba 10 02 c0       	push   0xc00210ba
c0010ee1:	e8 4d e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010ee6:	58                   	pop    eax
c0010ee7:	5a                   	pop    edx
c0010ee8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010eeb:	68 ab 10 02 c0       	push   0xc00210ab
c0010ef0:	e8 3e e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010ef5:	59                   	pop    ecx
c0010ef6:	58                   	pop    eax
c0010ef7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010efa:	68 b6 10 02 c0       	push   0xc00210b6
c0010eff:	e8 2f e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010f04:	58                   	pop    eax
c0010f05:	5a                   	pop    edx
c0010f06:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f09:	68 c5 10 02 c0       	push   0xc00210c5
c0010f0e:	e8 20 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010f13:	59                   	pop    ecx
c0010f14:	58                   	pop    eax
c0010f15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f18:	68 d0 10 02 c0       	push   0xc00210d0
c0010f1d:	e8 11 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010f22:	58                   	pop    eax
c0010f23:	5a                   	pop    edx
c0010f24:	57                   	push   edi
c0010f25:	68 db 10 02 c0       	push   0xc00210db
c0010f2a:	e8 04 e1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010f2f:	59                   	pop    ecx
c0010f30:	58                   	pop    eax
c0010f31:	56                   	push   esi
c0010f32:	68 e6 10 02 c0       	push   0xc00210e6
c0010f37:	e8 f7 e0 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0010f3c:	58                   	pop    eax
c0010f3d:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f48:	e8 b8 bf ff ff       	call   c000cf05 <setActiveTerminal(VgaText*)>
c0010f4d:	58                   	pop    eax
c0010f4e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010f51:	5a                   	pop    edx
c0010f52:	c1 e0 05             	shl    eax,0x5
c0010f55:	05 80 2c 02 c0       	add    eax,0xc0022c80
c0010f5a:	50                   	push   eax
c0010f5b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f66:	e8 b9 c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0010f6b:	59                   	pop    ecx
c0010f6c:	58                   	pop    eax
c0010f6d:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010f72:	68 f1 10 02 c0       	push   0xc00210f1
c0010f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7d:	e8 a2 c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0010f82:	58                   	pop    eax
c0010f83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f88:	5a                   	pop    edx
c0010f89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f8c:	83 c0 0c             	add    eax,0xc
c0010f8f:	50                   	push   eax
c0010f90:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010f95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f9b:	e8 84 c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0010fa0:	59                   	pop    ecx
c0010fa1:	58                   	pop    eax
c0010fa2:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010fa7:	68 fa 10 02 c0       	push   0xc00210fa
c0010fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fb2:	e8 6d c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0010fb7:	58                   	pop    eax
c0010fb8:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010fbd:	5a                   	pop    edx
c0010fbe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fc7:	e8 7e c3 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0010fcc:	59                   	pop    ecx
c0010fcd:	58                   	pop    eax
c0010fce:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010fd3:	68 02 11 02 c0       	push   0xc0021102
c0010fd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fde:	e8 41 c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0010fe3:	58                   	pop    eax
c0010fe4:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010fe9:	5a                   	pop    edx
c0010fea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ff3:	e8 52 c3 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0010ff8:	59                   	pop    ecx
c0010ff9:	58                   	pop    eax
c0010ffa:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0010fff:	68 0a 11 02 c0       	push   0xc002110a
c0011004:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001100a:	e8 15 c3 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001100f:	58                   	pop    eax
c0011010:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011015:	5a                   	pop    edx
c0011016:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001101f:	e8 26 c3 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011024:	59                   	pop    ecx
c0011025:	58                   	pop    eax
c0011026:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001102b:	68 12 11 02 c0       	push   0xc0021112
c0011030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011036:	e8 e9 c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001103b:	58                   	pop    eax
c001103c:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011041:	5a                   	pop    edx
c0011042:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001104b:	e8 fa c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011050:	59                   	pop    ecx
c0011051:	58                   	pop    eax
c0011052:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011057:	68 1a 11 02 c0       	push   0xc002111a
c001105c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011062:	e8 bd c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0011067:	58                   	pop    eax
c0011068:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001106d:	5a                   	pop    edx
c001106e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011071:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011077:	e8 ce c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c001107c:	59                   	pop    ecx
c001107d:	58                   	pop    eax
c001107e:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011083:	68 22 11 02 c0       	push   0xc0021122
c0011088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001108e:	e8 91 c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0011093:	58                   	pop    eax
c0011094:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011099:	5a                   	pop    edx
c001109a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001109d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a3:	e8 a2 c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c00110a8:	59                   	pop    ecx
c00110a9:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00110ae:	5b                   	pop    ebx
c00110af:	68 2a 11 02 c0       	push   0xc002112a
c00110b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ba:	e8 65 c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c00110bf:	58                   	pop    eax
c00110c0:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00110c5:	5a                   	pop    edx
c00110c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110ca:	52                   	push   edx
c00110cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d1:	e8 74 c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c00110d6:	59                   	pop    ecx
c00110d7:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00110dc:	5b                   	pop    ebx
c00110dd:	68 33 11 02 c0       	push   0xc0021133
c00110e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110e8:	e8 37 c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c00110ed:	58                   	pop    eax
c00110ee:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00110f3:	5a                   	pop    edx
c00110f4:	57                   	push   edi
c00110f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110fb:	e8 4a c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011100:	59                   	pop    ecx
c0011101:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011106:	5b                   	pop    ebx
c0011107:	68 3b 11 02 c0       	push   0xc002113b
c001110c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011112:	e8 0d c2 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0011117:	5f                   	pop    edi
c0011118:	58                   	pop    eax
c0011119:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001111e:	56                   	push   esi
c001111f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011125:	e8 20 c2 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c001112a:	58                   	pop    eax
c001112b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011130:	5a                   	pop    edx
c0011131:	68 43 11 02 c0       	push   0xc0021143
c0011136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001113c:	e8 e3 c1 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0011141:	59                   	pop    ecx
c0011142:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011147:	5b                   	pop    ebx
c0011148:	55                   	push   ebp
c0011149:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114f:	e8 f6 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011154:	5e                   	pop    esi
c0011155:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001115a:	5f                   	pop    edi
c001115b:	68 4b 11 02 c0       	push   0xc002114b
c0011160:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011166:	e8 b9 c1 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001116b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011170:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011176:	e8 98 dc 00 00       	call   c001ee13 <CPU::readDR0()>
c001117b:	5d                   	pop    ebp
c001117c:	5a                   	pop    edx
c001117d:	50                   	push   eax
c001117e:	53                   	push   ebx
c001117f:	e8 c6 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011184:	59                   	pop    ecx
c0011185:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001118a:	5b                   	pop    ebx
c001118b:	68 54 11 02 c0       	push   0xc0021154
c0011190:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011196:	e8 89 c1 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001119b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00111a0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111a6:	e8 7a dc 00 00       	call   c001ee25 <CPU::readDR1()>
c00111ab:	5e                   	pop    esi
c00111ac:	5f                   	pop    edi
c00111ad:	50                   	push   eax
c00111ae:	53                   	push   ebx
c00111af:	e8 96 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c00111b4:	5d                   	pop    ebp
c00111b5:	58                   	pop    eax
c00111b6:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00111bb:	68 5c 11 02 c0       	push   0xc002115c
c00111c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c6:	e8 59 c1 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c00111cb:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00111d0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111d6:	e8 5c dc 00 00       	call   c001ee37 <CPU::readDR2()>
c00111db:	5a                   	pop    edx
c00111dc:	59                   	pop    ecx
c00111dd:	50                   	push   eax
c00111de:	53                   	push   ebx
c00111df:	e8 66 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c00111e4:	5b                   	pop    ebx
c00111e5:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00111ea:	5e                   	pop    esi
c00111eb:	68 64 11 02 c0       	push   0xc0021164
c00111f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f6:	e8 29 c1 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c00111fb:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011200:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011206:	e8 3e dc 00 00       	call   c001ee49 <CPU::readDR3()>
c001120b:	5f                   	pop    edi
c001120c:	5d                   	pop    ebp
c001120d:	50                   	push   eax
c001120e:	53                   	push   ebx
c001120f:	e8 36 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011214:	58                   	pop    eax
c0011215:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001121a:	5a                   	pop    edx
c001121b:	68 6c 11 02 c0       	push   0xc002116c
c0011220:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011226:	e8 f9 c0 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001122b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011230:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011236:	e8 20 dc 00 00       	call   c001ee5b <CPU::readDR6()>
c001123b:	59                   	pop    ecx
c001123c:	5e                   	pop    esi
c001123d:	50                   	push   eax
c001123e:	53                   	push   ebx
c001123f:	e8 06 c1 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011244:	5f                   	pop    edi
c0011245:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c001124a:	5d                   	pop    ebp
c001124b:	68 74 11 02 c0       	push   0xc0021174
c0011250:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011256:	e8 c9 c0 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c001125b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011260:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011266:	e8 02 dc 00 00       	call   c001ee6d <CPU::readDR7()>
c001126b:	5a                   	pop    edx
c001126c:	59                   	pop    ecx
c001126d:	50                   	push   eax
c001126e:	53                   	push   ebx
c001126f:	e8 d6 c0 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0011274:	fa                   	cli    
c0011275:	f4                   	hlt    
c0011276:	83 c4 10             	add    esp,0x10
c0011279:	eb fe                	jmp    c0011279 <displayDebugInfo(regs*)+0x415>

c001127b <x87EmulHandler(regs*, void*)>:
c001127b:	53                   	push   ebx
c001127c:	83 ec 08             	sub    esp,0x8
c001127f:	a1 54 39 02 c0       	mov    eax,ds:0xc0023954
c0011284:	85 c0                	test   eax,eax
c0011286:	74 15                	je     c001129d <x87EmulHandler(regs*, void*)+0x22>
c0011288:	83 ec 0c             	sub    esp,0xc
c001128b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128f:	ff d0                	call   eax
c0011291:	83 c4 10             	add    esp,0x10
c0011294:	84 c0                	test   al,al
c0011296:	74 2f                	je     c00112c7 <x87EmulHandler(regs*, void*)+0x4c>
c0011298:	83 c4 08             	add    esp,0x8
c001129b:	5b                   	pop    ebx
c001129c:	c3                   	ret    
c001129d:	83 ec 08             	sub    esp,0x8
c00112a0:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c00112a6:	6a 01                	push   0x1
c00112a8:	68 7c 11 02 c0       	push   0xc002117c
c00112ad:	e8 f5 63 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c00112b2:	5a                   	pop    edx
c00112b3:	59                   	pop    ecx
c00112b4:	53                   	push   ebx
c00112b5:	50                   	push   eax
c00112b6:	e8 3f 65 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c00112bb:	a1 54 39 02 c0       	mov    eax,ds:0xc0023954
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	85 c0                	test   eax,eax
c00112c5:	75 c1                	jne    c0011288 <x87EmulHandler(regs*, void*)+0xd>
c00112c7:	83 ec 0c             	sub    esp,0xc
c00112ca:	68 99 11 02 c0       	push   0xc0021199
c00112cf:	e8 5f dd ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00112d4:	58                   	pop    eax
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 86 fb ff ff       	call   c0010e64 <displayDebugInfo(regs*)>

c00112de <gpFault(regs*, void*)>:
c00112de:	53                   	push   ebx
c00112df:	83 ec 14             	sub    esp,0x14
c00112e2:	c7 05 50 39 02 c0 77 8c 01 c0 	mov    DWORD PTR ds:0xc0023950,0xc0018c77
c00112ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00112f0:	53                   	push   ebx
c00112f1:	e8 81 79 00 00       	call   c0018c77 <Vm::faultHandler(regs*)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	84 c0                	test   al,al
c00112fb:	74 05                	je     c0011302 <gpFault(regs*, void*)+0x24>
c00112fd:	83 c4 08             	add    esp,0x8
c0011300:	5b                   	pop    ebx
c0011301:	c3                   	ret    
c0011302:	83 ec 0c             	sub    esp,0xc
c0011305:	68 99 11 02 c0       	push   0xc0021199
c001130a:	e8 24 dd ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001130f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011312:	e8 4d fb ff ff       	call   c0010e64 <displayDebugInfo(regs*)>

c0011317 <pgFault(regs*, void*)>:
c0011317:	83 ec 18             	sub    esp,0x18
c001131a:	68 b4 11 02 c0       	push   0xc00211b4
c001131f:	e8 0f dd ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011324:	58                   	pop    eax
c0011325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011329:	e8 36 fb ff ff       	call   c0010e64 <displayDebugInfo(regs*)>

c001132e <otherISRHandler(regs*, void*)>:
c001132e:	53                   	push   ebx
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011336:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011339:	50                   	push   eax
c001133a:	50                   	push   eax
c001133b:	68 c1 11 02 c0       	push   0xc00211c1
c0011340:	e8 ee dc ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011345:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011348:	e8 17 fb ff ff       	call   c0010e64 <displayDebugInfo(regs*)>

c001134d <opcodeFault(regs*, void*)>:
c001134d:	53                   	push   ebx
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011355:	e8 68 2c 00 00       	call   c0013fc2 <thisCPU()>
c001135a:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011361:	74 16                	je     c0011379 <opcodeFault(regs*, void*)+0x2c>
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	68 18 10 02 c0       	push   0xc0021018
c001136b:	e8 c3 dc ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011370:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011374:	83 c4 18             	add    esp,0x18
c0011377:	5b                   	pop    ebx
c0011378:	c3                   	ret    
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	68 de 11 02 c0       	push   0xc00211de
c0011381:	e8 ad dc ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011386:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011389:	c1 e0 04             	shl    eax,0x4
c001138c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001138f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011393:	89 14 24             	mov    DWORD PTR [esp],edx
c0011396:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001139a:	52                   	push   edx
c001139b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001139f:	52                   	push   edx
c00113a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00113a3:	50                   	push   eax
c00113a4:	68 3c 10 02 c0       	push   0xc002103c
c00113a9:	e8 85 dc ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00113ae:	83 c4 14             	add    esp,0x14
c00113b1:	53                   	push   ebx
c00113b2:	e8 ad fa ff ff       	call   c0010e64 <displayDebugInfo(regs*)>

c00113b7 <displayProgramFault(char const*)>:
c00113b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113c5:	85 c0                	test   eax,eax
c00113c7:	74 15                	je     c00113de <displayProgramFault(char const*)+0x27>
c00113c9:	83 ec 0c             	sub    esp,0xc
c00113cc:	6a 04                	push   0x4
c00113ce:	6a 0f                	push   0xf
c00113d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113d4:	50                   	push   eax
c00113d5:	e8 0c bc ff ff       	call   c000cfe6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00113da:	83 c4 1c             	add    esp,0x1c
c00113dd:	c3                   	ret    
c00113de:	c3                   	ret    
c00113df:	90                   	nop

c00113e0 <InterruptController::convertLegacyIRQNumber(int)>:
c00113e0:	53                   	push   ebx
c00113e1:	83 ec 14             	sub    esp,0x14
c00113e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ec:	e8 2f f3 ff ff       	call   c0010720 <Device::getName()>
c00113f1:	83 c4 10             	add    esp,0x10
c00113f4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00113f7:	74 07                	je     c0011400 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00113f9:	89 d8                	mov    eax,ebx
c00113fb:	83 c4 08             	add    esp,0x8
c00113fe:	5b                   	pop    ebx
c00113ff:	c3                   	ret    
c0011400:	83 fb 0f             	cmp    ebx,0xf
c0011403:	7f 0e                	jg     c0011413 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0011405:	0f b6 9b 20 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd0e0]
c001140c:	83 c4 08             	add    esp,0x8
c001140f:	89 d8                	mov    eax,ebx
c0011411:	5b                   	pop    ebx
c0011412:	c3                   	ret    
c0011413:	83 ec 0c             	sub    esp,0xc
c0011416:	68 68 0f 02 c0       	push   0xc0020f68
c001141b:	e8 a8 38 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0011420:	89 d8                	mov    eax,ebx
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	83 c4 08             	add    esp,0x8
c0011428:	5b                   	pop    ebx
c0011429:	c3                   	ret    

c001142a <setupInterruptController()>:
c001142a:	56                   	push   esi
c001142b:	53                   	push   ebx
c001142c:	51                   	push   ecx
c001142d:	e8 8d 2b 00 00       	call   c0013fbf <getCPUNumber()>
c0011432:	85 c0                	test   eax,eax
c0011434:	0f 85 10 02 00 00    	jne    c001164a <setupInterruptController()+0x220>
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0011442:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011448:	68 58 21 00 00       	push   0x2158
c001144d:	83 e0 01             	and    eax,0x1
c0011450:	89 c6                	mov    esi,eax
c0011452:	e8 ed da ff ff       	call   c000ef44 <operator new(unsigned long)>
c0011457:	89 04 24             	mov    DWORD PTR [esp],eax
c001145a:	89 c3                	mov    ebx,eax
c001145c:	e8 37 c8 00 00       	call   c001dc98 <PIC::PIC()>
c0011461:	6a 00                	push   0x0
c0011463:	6a 00                	push   0x0
c0011465:	6a 00                	push   0x0
c0011467:	53                   	push   ebx
c0011468:	e8 6f cb 00 00       	call   c001dfdc <PIC::open(int, int, void*)>
c001146d:	83 c4 20             	add    esp,0x20
c0011470:	89 f0                	mov    eax,esi
c0011472:	84 c0                	test   al,al
c0011474:	0f 85 92 01 00 00    	jne    c001160c <setupInterruptController()+0x1e2>
c001147a:	83 ec 08             	sub    esp,0x8
c001147d:	53                   	push   ebx
c001147e:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c0011484:	e8 b5 ef ff ff       	call   c001043e <Device::addChild(Device*)>
c0011489:	8b 03                	mov    eax,DWORD PTR [ebx]
c001148b:	6a 00                	push   0x0
c001148d:	68 2e 13 01 c0       	push   0xc001132e
c0011492:	6a 00                	push   0x0
c0011494:	53                   	push   ebx
c0011495:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011498:	83 c4 20             	add    esp,0x20
c001149b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001149d:	6a 00                	push   0x0
c001149f:	68 2e 13 01 c0       	push   0xc001132e
c00114a4:	6a 01                	push   0x1
c00114a6:	53                   	push   ebx
c00114a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ac:	6a 00                	push   0x0
c00114ae:	68 c7 0c 01 c0       	push   0xc0010cc7
c00114b3:	6a 02                	push   0x2
c00114b5:	53                   	push   ebx
c00114b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114b9:	83 c4 20             	add    esp,0x20
c00114bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114be:	6a 00                	push   0x0
c00114c0:	68 2e 13 01 c0       	push   0xc001132e
c00114c5:	6a 03                	push   0x3
c00114c7:	53                   	push   ebx
c00114c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114cd:	6a 00                	push   0x0
c00114cf:	68 2e 13 01 c0       	push   0xc001132e
c00114d4:	6a 04                	push   0x4
c00114d6:	53                   	push   ebx
c00114d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114da:	83 c4 20             	add    esp,0x20
c00114dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114df:	6a 00                	push   0x0
c00114e1:	68 2e 13 01 c0       	push   0xc001132e
c00114e6:	6a 05                	push   0x5
c00114e8:	53                   	push   ebx
c00114e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ee:	6a 00                	push   0x0
c00114f0:	68 4d 13 01 c0       	push   0xc001134d
c00114f5:	6a 06                	push   0x6
c00114f7:	53                   	push   ebx
c00114f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114fb:	83 c4 20             	add    esp,0x20
c00114fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011500:	6a 00                	push   0x0
c0011502:	68 7b 12 01 c0       	push   0xc001127b
c0011507:	6a 07                	push   0x7
c0011509:	53                   	push   ebx
c001150a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001150d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001150f:	6a 00                	push   0x0
c0011511:	68 ee 0a 01 c0       	push   0xc0010aee
c0011516:	6a 08                	push   0x8
c0011518:	53                   	push   ebx
c0011519:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001151c:	83 c4 20             	add    esp,0x20
c001151f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011521:	6a 00                	push   0x0
c0011523:	68 2e 13 01 c0       	push   0xc001132e
c0011528:	6a 09                	push   0x9
c001152a:	53                   	push   ebx
c001152b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001152e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011530:	6a 00                	push   0x0
c0011532:	68 2e 13 01 c0       	push   0xc001132e
c0011537:	6a 0a                	push   0xa
c0011539:	53                   	push   ebx
c001153a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001153d:	83 c4 20             	add    esp,0x20
c0011540:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011542:	6a 00                	push   0x0
c0011544:	68 2e 13 01 c0       	push   0xc001132e
c0011549:	6a 0b                	push   0xb
c001154b:	53                   	push   ebx
c001154c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011551:	6a 00                	push   0x0
c0011553:	68 2e 13 01 c0       	push   0xc001132e
c0011558:	6a 0c                	push   0xc
c001155a:	53                   	push   ebx
c001155b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001155e:	83 c4 20             	add    esp,0x20
c0011561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011563:	6a 00                	push   0x0
c0011565:	68 de 12 01 c0       	push   0xc00112de
c001156a:	6a 0d                	push   0xd
c001156c:	53                   	push   ebx
c001156d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011570:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011572:	6a 00                	push   0x0
c0011574:	68 17 13 01 c0       	push   0xc0011317
c0011579:	6a 0e                	push   0xe
c001157b:	53                   	push   ebx
c001157c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001157f:	83 c4 20             	add    esp,0x20
c0011582:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011584:	6a 00                	push   0x0
c0011586:	68 2e 13 01 c0       	push   0xc001132e
c001158b:	6a 0f                	push   0xf
c001158d:	53                   	push   ebx
c001158e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011591:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011593:	6a 00                	push   0x0
c0011595:	68 2e 13 01 c0       	push   0xc001132e
c001159a:	6a 10                	push   0x10
c001159c:	53                   	push   ebx
c001159d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115a0:	83 c4 20             	add    esp,0x20
c00115a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115a5:	6a 00                	push   0x0
c00115a7:	68 2e 13 01 c0       	push   0xc001132e
c00115ac:	6a 11                	push   0x11
c00115ae:	53                   	push   ebx
c00115af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b4:	6a 00                	push   0x0
c00115b6:	68 2e 13 01 c0       	push   0xc001132e
c00115bb:	6a 12                	push   0x12
c00115bd:	53                   	push   ebx
c00115be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115c1:	83 c4 20             	add    esp,0x20
c00115c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115c6:	6a 00                	push   0x0
c00115c8:	68 2e 13 01 c0       	push   0xc001132e
c00115cd:	6a 13                	push   0x13
c00115cf:	53                   	push   ebx
c00115d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115d5:	6a 00                	push   0x0
c00115d7:	68 2e 13 01 c0       	push   0xc001132e
c00115dc:	6a 14                	push   0x14
c00115de:	53                   	push   ebx
c00115df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115e2:	83 c4 20             	add    esp,0x20
c00115e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e7:	6a 00                	push   0x0
c00115e9:	68 2e 13 01 c0       	push   0xc001132e
c00115ee:	6a 1e                	push   0x1e
c00115f0:	53                   	push   ebx
c00115f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115f6:	6a 00                	push   0x0
c00115f8:	68 ab 66 01 c0       	push   0xc00166ab
c00115fd:	6a 60                	push   0x60
c00115ff:	53                   	push   ebx
c0011600:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011603:	83 c4 20             	add    esp,0x20
c0011606:	89 d8                	mov    eax,ebx
c0011608:	5a                   	pop    edx
c0011609:	5b                   	pop    ebx
c001160a:	5e                   	pop    esi
c001160b:	c3                   	ret    
c001160c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001160e:	6a 00                	push   0x0
c0011610:	6a 00                	push   0x0
c0011612:	6a 00                	push   0x0
c0011614:	53                   	push   ebx
c0011615:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011618:	8b 03                	mov    eax,DWORD PTR [ebx]
c001161a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001161d:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011620:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011627:	e8 18 d9 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001162c:	89 04 24             	mov    DWORD PTR [esp],eax
c001162f:	89 c3                	mov    ebx,eax
c0011631:	e8 a0 c1 00 00       	call   c001d7d6 <APIC::APIC()>
c0011636:	6a 00                	push   0x0
c0011638:	6a 00                	push   0x0
c001163a:	6a 00                	push   0x0
c001163c:	53                   	push   ebx
c001163d:	e8 b2 c0 00 00       	call   c001d6f4 <APIC::open(int, int, void*)>
c0011642:	83 c4 20             	add    esp,0x20
c0011645:	e9 30 fe ff ff       	jmp    c001147a <setupInterruptController()+0x50>
c001164a:	83 ec 0c             	sub    esp,0xc
c001164d:	68 58 21 00 00       	push   0x2158
c0011652:	e8 ed d8 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0011657:	89 04 24             	mov    DWORD PTR [esp],eax
c001165a:	89 c3                	mov    ebx,eax
c001165c:	e8 75 c1 00 00       	call   c001d7d6 <APIC::APIC()>
c0011661:	6a 00                	push   0x0
c0011663:	6a 00                	push   0x0
c0011665:	6a 00                	push   0x0
c0011667:	53                   	push   ebx
c0011668:	e8 87 c0 00 00       	call   c001d6f4 <APIC::open(int, int, void*)>
c001166d:	83 c4 18             	add    esp,0x18
c0011670:	53                   	push   ebx
c0011671:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c0011677:	e8 c2 ed ff ff       	call   c001043e <Device::addChild(Device*)>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	89 d8                	mov    eax,ebx
c0011681:	5a                   	pop    edx
c0011682:	5b                   	pop    ebx
c0011683:	5e                   	pop    esi
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <startGUI(void*)>:
c0011686:	55                   	push   ebp
c0011687:	89 e5                	mov    ebp,esp
c0011689:	53                   	push   ebx
c001168a:	83 ec 04             	sub    esp,0x4
c001168d:	e8 74 65 00 00       	call   c0017c06 <unlockScheduler()>
c0011692:	e8 58 65 00 00       	call   c0017bef <getIRQNestingLevel()>
c0011697:	83 ec 08             	sub    esp,0x8
c001169a:	50                   	push   eax
c001169b:	68 38 12 02 c0       	push   0xc0021238
c00116a0:	e8 8e d9 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00116a5:	83 c4 10             	add    esp,0x10
c00116a8:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c00116ae:	83 ec 08             	sub    esp,0x8
c00116b1:	6a 01                	push   0x1
c00116b3:	68 52 12 02 c0       	push   0xc0021252
c00116b8:	e8 ea 5f 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	83 ec 08             	sub    esp,0x8
c00116c3:	53                   	push   ebx
c00116c4:	50                   	push   eax
c00116c5:	e8 30 61 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c00116d3:	83 ec 08             	sub    esp,0x8
c00116d6:	6a 01                	push   0x1
c00116d8:	68 6c 12 02 c0       	push   0xc002126c
c00116dd:	e8 c5 5f 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	83 ec 08             	sub    esp,0x8
c00116e8:	53                   	push   ebx
c00116e9:	50                   	push   eax
c00116ea:	e8 0b 61 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	90                   	nop
c00116f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00116f6:	c9                   	leave  
c00116f7:	c3                   	ret    

c00116f8 <sendKeyToTerminal(unsigned char)>:
c00116f8:	55                   	push   ebp
c00116f9:	89 e5                	mov    ebp,esp
c00116fb:	83 ec 28             	sub    esp,0x28
c00116fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011701:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011704:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c0011709:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001170d:	83 ec 08             	sub    esp,0x8
c0011710:	52                   	push   edx
c0011711:	50                   	push   eax
c0011712:	e8 0b be ff ff       	call   c000d522 <VgaText::receiveKey(unsigned char)>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001171e:	75 41                	jne    c0011761 <sendKeyToTerminal(unsigned char)+0x69>
c0011720:	e8 06 65 00 00       	call   c0017c2b <lockStuff()>
c0011725:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c001172a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001172d:	c7 05 60 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023960,0x0
c0011737:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001173b:	74 1f                	je     c001175c <sendKeyToTerminal(unsigned char)+0x64>
c001173d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011740:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011743:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011746:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011749:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011752:	e8 bd 6c 00 00       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	eb db                	jmp    c0011737 <sendKeyToTerminal(unsigned char)+0x3f>
c001175c:	e8 5c 68 00 00       	call   c0017fbd <unlockStuff()>
c0011761:	90                   	nop
c0011762:	c9                   	leave  
c0011763:	c3                   	ret    

c0011764 <sendKeyboardToken(KeyboardToken)>:
c0011764:	55                   	push   ebp
c0011765:	89 e5                	mov    ebp,esp
c0011767:	83 ec 18             	sub    esp,0x18
c001176a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001176d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011770:	0f b7 c0             	movzx  eax,ax
c0011773:	83 f2 01             	xor    edx,0x1
c0011776:	88 90 80 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc680],dl
c001177c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177f:	66 3d 03 02          	cmp    ax,0x203
c0011783:	75 07                	jne    c001178c <sendKeyboardToken(KeyboardToken)+0x28>
c0011785:	a0 80 3a 02 c0       	mov    al,ds:0xc0023a80
c001178a:	84 c0                	test   al,al
c001178c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011790:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011793:	a0 88 3d 02 c0       	mov    al,ds:0xc0023d88
c0011798:	38 c2                	cmp    dl,al
c001179a:	74 1c                	je     c00117b8 <sendKeyboardToken(KeyboardToken)+0x54>
c001179c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001179f:	a2 88 3d 02 c0       	mov    ds:0xc0023d88,al
c00117a4:	a0 88 3d 02 c0       	mov    al,ds:0xc0023d88
c00117a9:	0f b6 c0             	movzx  eax,al
c00117ac:	83 ec 0c             	sub    esp,0xc
c00117af:	50                   	push   eax
c00117b0:	e8 db af ff ff       	call   c000c790 <setTerminalScrollLock(bool)>
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00117bb:	84 c0                	test   al,al
c00117bd:	0f 84 ae 00 00 00    	je     c0011871 <sendKeyboardToken(KeyboardToken)+0x10d>
c00117c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c6:	66 3d 10 03          	cmp    ax,0x310
c00117ca:	75 06                	jne    c00117d2 <sendKeyboardToken(KeyboardToken)+0x6e>
c00117cc:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00117d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d5:	66 3d 11 03          	cmp    ax,0x311
c00117d9:	75 06                	jne    c00117e1 <sendKeyboardToken(KeyboardToken)+0x7d>
c00117db:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00117e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e4:	66 3d 12 03          	cmp    ax,0x312
c00117e8:	75 06                	jne    c00117f0 <sendKeyboardToken(KeyboardToken)+0x8c>
c00117ea:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00117f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f3:	66 3d 13 03          	cmp    ax,0x313
c00117f7:	75 06                	jne    c00117ff <sendKeyboardToken(KeyboardToken)+0x9b>
c00117f9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00117ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011802:	66 3d 14 03          	cmp    ax,0x314
c0011806:	75 06                	jne    c001180e <sendKeyboardToken(KeyboardToken)+0xaa>
c0011808:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001180e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011811:	66 3d 15 03          	cmp    ax,0x315
c0011815:	75 06                	jne    c001181d <sendKeyboardToken(KeyboardToken)+0xb9>
c0011817:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001181d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011820:	66 3d 16 03          	cmp    ax,0x316
c0011824:	75 06                	jne    c001182c <sendKeyboardToken(KeyboardToken)+0xc8>
c0011826:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001182c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182f:	66 3d 17 03          	cmp    ax,0x317
c0011833:	75 06                	jne    c001183b <sendKeyboardToken(KeyboardToken)+0xd7>
c0011835:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001183b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001183e:	66 3d 18 03          	cmp    ax,0x318
c0011842:	75 06                	jne    c001184a <sendKeyboardToken(KeyboardToken)+0xe6>
c0011844:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001184a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184d:	66 3d 19 03          	cmp    ax,0x319
c0011851:	75 06                	jne    c0011859 <sendKeyboardToken(KeyboardToken)+0xf5>
c0011853:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185c:	66 3d 1a 03          	cmp    ax,0x31a
c0011860:	0f 85 c9 00 00 00    	jne    c001192f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011866:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001186c:	e9 be 00 00 00       	jmp    c001192f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011874:	66 3d 10 03          	cmp    ax,0x310
c0011878:	75 0a                	jne    c0011884 <sendKeyboardToken(KeyboardToken)+0x120>
c001187a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011880:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011887:	66 3d 11 03          	cmp    ax,0x311
c001188b:	75 0a                	jne    c0011897 <sendKeyboardToken(KeyboardToken)+0x133>
c001188d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011893:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189a:	66 3d 12 03          	cmp    ax,0x312
c001189e:	75 0a                	jne    c00118aa <sendKeyboardToken(KeyboardToken)+0x146>
c00118a0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00118a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ad:	66 3d 13 03          	cmp    ax,0x313
c00118b1:	75 0a                	jne    c00118bd <sendKeyboardToken(KeyboardToken)+0x159>
c00118b3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00118b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c0:	66 3d 14 03          	cmp    ax,0x314
c00118c4:	75 0a                	jne    c00118d0 <sendKeyboardToken(KeyboardToken)+0x16c>
c00118c6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00118cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d3:	66 3d 15 03          	cmp    ax,0x315
c00118d7:	75 0a                	jne    c00118e3 <sendKeyboardToken(KeyboardToken)+0x17f>
c00118d9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00118df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e6:	66 3d 16 03          	cmp    ax,0x316
c00118ea:	75 0a                	jne    c00118f6 <sendKeyboardToken(KeyboardToken)+0x192>
c00118ec:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00118f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f9:	66 3d 17 03          	cmp    ax,0x317
c00118fd:	75 0a                	jne    c0011909 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00118ff:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011905:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190c:	66 3d 18 03          	cmp    ax,0x318
c0011910:	75 0a                	jne    c001191c <sendKeyboardToken(KeyboardToken)+0x1b8>
c0011912:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011918:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001191c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191f:	66 3d 19 03          	cmp    ax,0x319
c0011923:	75 0a                	jne    c001192f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011925:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001192b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001192f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011932:	66 3d 00 02          	cmp    ax,0x200
c0011936:	75 2a                	jne    c0011962 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011938:	a0 80 3d 02 c0       	mov    al,ds:0xc0023d80
c001193d:	83 f0 01             	xor    eax,0x1
c0011940:	84 c0                	test   al,al
c0011942:	74 1e                	je     c0011962 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011944:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0011949:	6a 01                	push   0x1
c001194b:	6a 00                	push   0x0
c001194d:	68 86 16 01 c0       	push   0xc0011686
c0011952:	50                   	push   eax
c0011953:	e8 d6 63 00 00       	call   c0017d2e <Process::createThread(void (*)(void*), void*, int)>
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	c6 05 80 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d80,0x1
c0011962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011965:	66 3d 1d 03          	cmp    ax,0x31d
c0011969:	75 06                	jne    c0011971 <sendKeyboardToken(KeyboardToken)+0x20d>
c001196b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011974:	66 3d 1c 03          	cmp    ax,0x31c
c0011978:	75 06                	jne    c0011980 <sendKeyboardToken(KeyboardToken)+0x21c>
c001197a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011983:	66 3d 1b 03          	cmp    ax,0x31b
c0011987:	75 06                	jne    c001198f <sendKeyboardToken(KeyboardToken)+0x22b>
c0011989:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011992:	66 3d 1e 03          	cmp    ax,0x31e
c0011996:	75 06                	jne    c001199e <sendKeyboardToken(KeyboardToken)+0x23a>
c0011998:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001199e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a1:	66 3d 1f 03          	cmp    ax,0x31f
c00119a5:	75 06                	jne    c00119ad <sendKeyboardToken(KeyboardToken)+0x249>
c00119a7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00119ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b0:	66 3d 1a 03          	cmp    ax,0x31a
c00119b4:	75 06                	jne    c00119bc <sendKeyboardToken(KeyboardToken)+0x258>
c00119b6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00119bc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00119c0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00119c3:	83 f0 01             	xor    eax,0x1
c00119c6:	84 c0                	test   al,al
c00119c8:	74 77                	je     c0011a41 <sendKeyboardToken(KeyboardToken)+0x2dd>
c00119ca:	a0 81 3a 02 c0       	mov    al,ds:0xc0023a81
c00119cf:	84 c0                	test   al,al
c00119d1:	74 41                	je     c0011a14 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00119d3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119d7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00119db:	74 2b                	je     c0011a08 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00119dd:	8b 15 84 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d84
c00119e3:	89 d0                	mov    eax,edx
c00119e5:	c1 e0 02             	shl    eax,0x2
c00119e8:	01 d0                	add    eax,edx
c00119ea:	01 c0                	add    eax,eax
c00119ec:	a3 84 3d 02 c0       	mov    ds:0xc0023d84,eax
c00119f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f4:	0f b7 c0             	movzx  eax,ax
c00119f7:	8d 50 d0             	lea    edx,[eax-0x30]
c00119fa:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c00119ff:	01 d0                	add    eax,edx
c0011a01:	a3 84 3d 02 c0       	mov    ds:0xc0023d84,eax
c0011a06:	eb 6d                	jmp    c0011a75 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a08:	c7 05 84 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d84,0x0
c0011a12:	eb 61                	jmp    c0011a75 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a14:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c0011a19:	85 c0                	test   eax,eax
c0011a1b:	74 18                	je     c0011a35 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011a1d:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c0011a22:	0f b6 c0             	movzx  eax,al
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	50                   	push   eax
c0011a29:	e8 ca fc ff ff       	call   c00116f8 <sendKeyToTerminal(unsigned char)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a35:	c7 05 84 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d84,0x0
c0011a3f:	eb 34                	jmp    c0011a75 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a44:	66 3d 01 01          	cmp    ax,0x101
c0011a48:	75 2b                	jne    c0011a75 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a4a:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c0011a4f:	85 c0                	test   eax,eax
c0011a51:	74 18                	je     c0011a6b <sendKeyboardToken(KeyboardToken)+0x307>
c0011a53:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c0011a58:	0f b6 c0             	movzx  eax,al
c0011a5b:	83 ec 0c             	sub    esp,0xc
c0011a5e:	50                   	push   eax
c0011a5f:	e8 94 fc ff ff       	call   c00116f8 <sendKeyToTerminal(unsigned char)>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a6b:	c7 05 84 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d84,0x0
c0011a75:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a78:	83 f0 01             	xor    eax,0x1
c0011a7b:	84 c0                	test   al,al
c0011a7d:	74 4c                	je     c0011acb <sendKeyboardToken(KeyboardToken)+0x367>
c0011a7f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a82:	83 f0 01             	xor    eax,0x1
c0011a85:	84 c0                	test   al,al
c0011a87:	74 42                	je     c0011acb <sendKeyboardToken(KeyboardToken)+0x367>
c0011a89:	a0 80 3a 02 c0       	mov    al,ds:0xc0023a80
c0011a8e:	83 f0 01             	xor    eax,0x1
c0011a91:	84 c0                	test   al,al
c0011a93:	74 36                	je     c0011acb <sendKeyboardToken(KeyboardToken)+0x367>
c0011a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a98:	66 83 f8 1f          	cmp    ax,0x1f
c0011a9c:	76 09                	jbe    c0011aa7 <sendKeyboardToken(KeyboardToken)+0x343>
c0011a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa1:	66 83 f8 7e          	cmp    ax,0x7e
c0011aa5:	76 12                	jbe    c0011ab9 <sendKeyboardToken(KeyboardToken)+0x355>
c0011aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aaa:	66 83 f8 0a          	cmp    ax,0xa
c0011aae:	74 09                	je     c0011ab9 <sendKeyboardToken(KeyboardToken)+0x355>
c0011ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab3:	66 83 f8 08          	cmp    ax,0x8
c0011ab7:	75 12                	jne    c0011acb <sendKeyboardToken(KeyboardToken)+0x367>
c0011ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abc:	0f b6 c0             	movzx  eax,al
c0011abf:	83 ec 0c             	sub    esp,0xc
c0011ac2:	50                   	push   eax
c0011ac3:	e8 30 fc ff ff       	call   c00116f8 <sendKeyToTerminal(unsigned char)>
c0011ac8:	83 c4 10             	add    esp,0x10
c0011acb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011ace:	83 f0 01             	xor    eax,0x1
c0011ad1:	84 c0                	test   al,al
c0011ad3:	74 4f                	je     c0011b24 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ad5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011ad8:	83 f0 01             	xor    eax,0x1
c0011adb:	84 c0                	test   al,al
c0011add:	74 45                	je     c0011b24 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011adf:	a0 80 3a 02 c0       	mov    al,ds:0xc0023a80
c0011ae4:	84 c0                	test   al,al
c0011ae6:	74 3c                	je     c0011b24 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aeb:	66 83 f8 3f          	cmp    ax,0x3f
c0011aef:	76 33                	jbe    c0011b24 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af4:	66 83 f8 7f          	cmp    ax,0x7f
c0011af8:	77 2a                	ja     c0011b24 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011afd:	88 c2                	mov    dl,al
c0011aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b02:	66 83 f8 5f          	cmp    ax,0x5f
c0011b06:	76 04                	jbe    c0011b0c <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011b08:	b0 20                	mov    al,0x20
c0011b0a:	eb 02                	jmp    c0011b0e <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011b0c:	b0 00                	mov    al,0x0
c0011b0e:	29 c2                	sub    edx,eax
c0011b10:	88 d0                	mov    al,dl
c0011b12:	83 e8 40             	sub    eax,0x40
c0011b15:	0f b6 c0             	movzx  eax,al
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	50                   	push   eax
c0011b1c:	e8 d7 fb ff ff       	call   c00116f8 <sendKeyToTerminal(unsigned char)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b27:	66 3d 00 03          	cmp    ax,0x300
c0011b2b:	75 0f                	jne    c0011b3c <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b2d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011b30:	83 f0 01             	xor    eax,0x1
c0011b33:	84 c0                	test   al,al
c0011b35:	74 05                	je     c0011b3c <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b37:	e8 7b b4 ff ff       	call   c000cfb7 <doTerminalCycle()>
c0011b3c:	90                   	nop
c0011b3d:	c9                   	leave  
c0011b3e:	c3                   	ret    

c0011b3f <clearInternalKeybuffer(VgaText*)>:
c0011b3f:	55                   	push   ebp
c0011b40:	89 e5                	mov    ebp,esp
c0011b42:	83 ec 08             	sub    esp,0x8
c0011b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b48:	05 34 11 00 00       	add    eax,0x1134
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	50                   	push   eax
c0011b51:	e8 cf ea fe ff       	call   c0000625 <strlen>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b5c:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b62:	83 ec 04             	sub    esp,0x4
c0011b65:	50                   	push   eax
c0011b66:	6a 00                	push   0x0
c0011b68:	52                   	push   edx
c0011b69:	e8 9a ea fe ff       	call   c0000608 <memset>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	90                   	nop
c0011b72:	c9                   	leave  
c0011b73:	c3                   	ret    

c0011b74 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b74:	55                   	push   ebp
c0011b75:	89 e5                	mov    ebp,esp
c0011b77:	83 ec 18             	sub    esp,0x18
c0011b7a:	fb                   	sti    
c0011b7b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011b82:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011b86:	74 77                	je     c0011bff <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b8b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b91:	84 c0                	test   al,al
c0011b93:	75 02                	jne    c0011b97 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b95:	eb f1                	jmp    c0011b88 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b9a:	8d 50 01             	lea    edx,[eax+0x1]
c0011b9d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011ba0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011ba3:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011ba9:	88 10                	mov    BYTE PTR [eax],dl
c0011bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bae:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011bb4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bba:	05 34 11 00 00       	add    eax,0x1134
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	50                   	push   eax
c0011bc3:	e8 5d ea fe ff       	call   c0000625 <strlen>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bce:	81 c2 34 11 00 00    	add    edx,0x1134
c0011bd4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011bd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bda:	81 c2 34 11 00 00    	add    edx,0x1134
c0011be0:	83 ec 04             	sub    esp,0x4
c0011be3:	50                   	push   eax
c0011be4:	51                   	push   ecx
c0011be5:	52                   	push   edx
c0011be6:	e8 af e9 fe ff       	call   c000059a <memmove>
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011bf1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011bf4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011bf8:	75 88                	jne    c0011b82 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bfd:	eb 03                	jmp    c0011c02 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c02:	c9                   	leave  
c0011c03:	c3                   	ret    

c0011c04 <Keyboard::Keyboard(char const*)>:
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c0b:	83 ec 08             	sub    esp,0x8
c0011c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c12:	50                   	push   eax
c0011c13:	e8 16 ea ff ff       	call   c001062e <Device::Device(char const*)>
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	ba 90 12 02 c0       	mov    edx,0xc0021290
c0011c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c24:	89 10                	mov    DWORD PTR [eax],edx
c0011c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c2a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011c34:	c6 05 64 39 02 c0 01 	mov    BYTE PTR ds:0xc0023964,0x1
c0011c3b:	90                   	nop
c0011c3c:	83 c4 0c             	add    esp,0xc
c0011c3f:	c3                   	ret    

c0011c40 <Keyboard::~Keyboard()>:
c0011c40:	83 ec 0c             	sub    esp,0xc
c0011c43:	ba 90 12 02 c0       	mov    edx,0xc0021290
c0011c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4c:	89 10                	mov    DWORD PTR [eax],edx
c0011c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c52:	83 ec 0c             	sub    esp,0xc
c0011c55:	50                   	push   eax
c0011c56:	e8 85 e6 ff ff       	call   c00102e0 <Device::~Device()>
c0011c5b:	83 c4 10             	add    esp,0x10
c0011c5e:	90                   	nop
c0011c5f:	83 c4 0c             	add    esp,0xc
c0011c62:	c3                   	ret    
c0011c63:	90                   	nop

c0011c64 <Keyboard::~Keyboard()>:
c0011c64:	83 ec 0c             	sub    esp,0xc
c0011c67:	83 ec 0c             	sub    esp,0xc
c0011c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c6e:	e8 cd ff ff ff       	call   c0011c40 <Keyboard::~Keyboard()>
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	83 ec 08             	sub    esp,0x8
c0011c79:	68 5c 01 00 00       	push   0x15c
c0011c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c82:	e8 cc d2 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	83 c4 0c             	add    esp,0xc
c0011c8d:	c3                   	ret    

c0011c8e <LogicalDisk::close(int, int, void*)>:
c0011c8e:	83 c8 ff             	or     eax,0xffffffff
c0011c91:	c3                   	ret    

c0011c92 <LogicalDisk::~LogicalDisk()>:
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	ba 40 13 02 c0       	mov    edx,0xc0021340
c0011c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c9e:	89 10                	mov    DWORD PTR [eax],edx
c0011ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca4:	83 ec 0c             	sub    esp,0xc
c0011ca7:	50                   	push   eax
c0011ca8:	e8 33 e6 ff ff       	call   c00102e0 <Device::~Device()>
c0011cad:	83 c4 10             	add    esp,0x10
c0011cb0:	90                   	nop
c0011cb1:	83 c4 0c             	add    esp,0xc
c0011cb4:	c3                   	ret    
c0011cb5:	90                   	nop

c0011cb6 <LogicalDisk::~LogicalDisk()>:
c0011cb6:	83 ec 0c             	sub    esp,0xc
c0011cb9:	83 ec 0c             	sub    esp,0xc
c0011cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc0:	e8 cd ff ff ff       	call   c0011c92 <LogicalDisk::~LogicalDisk()>
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	83 ec 08             	sub    esp,0x8
c0011ccb:	68 74 01 00 00       	push   0x174
c0011cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cd4:	e8 7a d2 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	83 c4 0c             	add    esp,0xc
c0011cdf:	c3                   	ret    

c0011ce0 <LogicalDisk::open(int, int, void*)>:
c0011ce0:	83 ec 18             	sub    esp,0x18
c0011ce3:	68 bc 12 02 c0       	push   0xc00212bc
c0011ce8:	e8 db 2f 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0011ced:	83 c8 ff             	or     eax,0xffffffff
c0011cf0:	83 c4 1c             	add    esp,0x1c
c0011cf3:	c3                   	ret    

c0011cf4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011cf4:	53                   	push   ebx
c0011cf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d01:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011d07:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011d0d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011d13:	77 10                	ja     c0011d25 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011d15:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011d1b:	89 d3                	mov    ebx,edx
c0011d1d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011d23:	72 05                	jb     c0011d2a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011d25:	83 c8 ff             	or     eax,0xffffffff
c0011d28:	89 c2                	mov    edx,eax
c0011d2a:	5b                   	pop    ebx
c0011d2b:	c3                   	ret    

c0011d2c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011d2c:	56                   	push   esi
c0011d2d:	83 c8 ff             	or     eax,0xffffffff
c0011d30:	53                   	push   ebx
c0011d31:	89 c2                	mov    edx,eax
c0011d33:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011d37:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011d3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011d3f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d45:	77 27                	ja     c0011d6e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d47:	89 d8                	mov    eax,ebx
c0011d49:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011d4f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d5a:	89 c2                	mov    edx,eax
c0011d5c:	73 10                	jae    c0011d6e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d5e:	89 c8                	mov    eax,ecx
c0011d60:	89 da                	mov    edx,ebx
c0011d62:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d68:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d6e:	5b                   	pop    ebx
c0011d6f:	5e                   	pop    esi
c0011d70:	c3                   	ret    
c0011d71:	90                   	nop

c0011d72 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d72:	83 ec 1c             	sub    esp,0x1c
c0011d75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d89:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d9f:	50                   	push   eax
c0011da0:	e8 89 e8 ff ff       	call   c001062e <Device::Device(char const*)>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	ba 40 13 02 c0       	mov    edx,0xc0021340
c0011dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db1:	89 10                	mov    DWORD PTR [eax],edx
c0011db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dc2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dcd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011dd7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011de3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011de9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011def:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011df3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011df6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011dfa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011e00:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e0e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e18:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011e22:	90                   	nop
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	c3                   	ret    
c0011e27:	90                   	nop

c0011e28 <LogicalDisk::assignDriveLetter()>:
c0011e28:	55                   	push   ebp
c0011e29:	57                   	push   edi
c0011e2a:	56                   	push   esi
c0011e2b:	53                   	push   ebx
c0011e2c:	83 ec 14             	sub    esp,0x14
c0011e2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e33:	8b 3d a0 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023da0
c0011e39:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011e3f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011e43:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011e49:	8b 3d a4 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023da4
c0011e4f:	3c 01                	cmp    al,0x1
c0011e51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e55:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e59:	19 c0                	sbb    eax,eax
c0011e5b:	83 e0 02             	and    eax,0x2
c0011e5e:	83 c0 41             	add    eax,0x41
c0011e61:	0f be e8             	movsx  ebp,al
c0011e64:	3c 43                	cmp    al,0x43
c0011e66:	75 10                	jne    c0011e78 <LogicalDisk::assignDriveLetter()+0x50>
c0011e68:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e6f:	75 5d                	jne    c0011ece <LogicalDisk::assignDriveLetter()+0xa6>
c0011e71:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e76:	75 56                	jne    c0011ece <LogicalDisk::assignDriveLetter()+0xa6>
c0011e78:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e7b:	ba 01 00 00 00       	mov    edx,0x1
c0011e80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011e84:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011e88:	d3 e2                	shl    edx,cl
c0011e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e8e:	89 d7                	mov    edi,edx
c0011e90:	89 d6                	mov    esi,edx
c0011e92:	c1 ff 1f             	sar    edi,0x1f
c0011e95:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e99:	21 f9                	and    ecx,edi
c0011e9b:	09 d1                	or     ecx,edx
c0011e9d:	75 2f                	jne    c0011ece <LogicalDisk::assignDriveLetter()+0xa6>
c0011e9f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ea7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011ead:	09 f2                	or     edx,esi
c0011eaf:	89 15 a0 3d 02 c0    	mov    DWORD PTR ds:0xc0023da0,edx
c0011eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eb9:	09 fa                	or     edx,edi
c0011ebb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011ebf:	89 15 a4 3d 02 c0    	mov    DWORD PTR ds:0xc0023da4,edx
c0011ec5:	89 1c bd c0 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc240],ebx
c0011ecc:	eb 08                	jmp    c0011ed6 <LogicalDisk::assignDriveLetter()+0xae>
c0011ece:	45                   	inc    ebp
c0011ecf:	40                   	inc    eax
c0011ed0:	3c 5b                	cmp    al,0x5b
c0011ed2:	75 90                	jne    c0011e64 <LogicalDisk::assignDriveLetter()+0x3c>
c0011ed4:	31 c0                	xor    eax,eax
c0011ed6:	83 c4 14             	add    esp,0x14
c0011ed9:	5b                   	pop    ebx
c0011eda:	5e                   	pop    esi
c0011edb:	5f                   	pop    edi
c0011edc:	5d                   	pop    ebp
c0011edd:	c3                   	ret    

c0011ede <LogicalDisk::mount()>:
c0011ede:	56                   	push   esi
c0011edf:	53                   	push   ebx
c0011ee0:	51                   	push   ecx
c0011ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ee5:	8b 1d 28 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023928
c0011eeb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011ef5:	85 db                	test   ebx,ebx
c0011ef7:	74 50                	je     c0011f49 <LogicalDisk::mount()+0x6b>
c0011ef9:	e8 f1 5c 00 00       	call   c0017bef <getIRQNestingLevel()>
c0011efe:	52                   	push   edx
c0011eff:	52                   	push   edx
c0011f00:	50                   	push   eax
c0011f01:	68 e0 12 02 c0       	push   0xc00212e0
c0011f06:	e8 28 d1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011f0b:	83 c4 0c             	add    esp,0xc
c0011f0e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011f15:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f17:	83 e8 41             	sub    eax,0x41
c0011f1a:	50                   	push   eax
c0011f1b:	56                   	push   esi
c0011f1c:	53                   	push   ebx
c0011f1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	84 c0                	test   al,al
c0011f25:	74 08                	je     c0011f2f <LogicalDisk::mount()+0x51>
c0011f27:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011f2d:	eb 1c                	jmp    c0011f4b <LogicalDisk::mount()+0x6d>
c0011f2f:	e8 bb 5c 00 00       	call   c0017bef <getIRQNestingLevel()>
c0011f34:	51                   	push   ecx
c0011f35:	51                   	push   ecx
c0011f36:	50                   	push   eax
c0011f37:	68 fb 12 02 c0       	push   0xc00212fb
c0011f3c:	e8 f2 d0 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0011f41:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011f44:	83 c4 10             	add    esp,0x10
c0011f47:	eb ac                	jmp    c0011ef5 <LogicalDisk::mount()+0x17>
c0011f49:	31 c0                	xor    eax,eax
c0011f4b:	5a                   	pop    edx
c0011f4c:	5b                   	pop    ebx
c0011f4d:	5e                   	pop    esi
c0011f4e:	c3                   	ret    
c0011f4f:	90                   	nop

c0011f50 <LogicalDisk::unmount()>:
c0011f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f54:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f5e:	c3                   	ret    
c0011f5f:	90                   	nop

c0011f60 <LogicalDisk::unassignDriveLetter()>:
c0011f60:	57                   	push   edi
c0011f61:	56                   	push   esi
c0011f62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f66:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f6d:	84 c9                	test   cl,cl
c0011f6f:	75 0f                	jne    c0011f80 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f71:	c7 44 24 0c 16 13 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021316
c0011f79:	5e                   	pop    esi
c0011f7a:	5f                   	pop    edi
c0011f7b:	e9 48 2d 00 00       	jmp    c0014cc8 <Krnl::panic(char const*)>
c0011f80:	83 e9 41             	sub    ecx,0x41
c0011f83:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011f8a:	b8 01 00 00 00       	mov    eax,0x1
c0011f8f:	c7 04 8d c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc240],0x0
c0011f9a:	d3 e0                	shl    eax,cl
c0011f9c:	89 c7                	mov    edi,eax
c0011f9e:	f7 d0                	not    eax
c0011fa0:	c1 ff 1f             	sar    edi,0x1f
c0011fa3:	21 05 a0 3d 02 c0    	and    DWORD PTR ds:0xc0023da0,eax
c0011fa9:	89 fe                	mov    esi,edi
c0011fab:	f7 d6                	not    esi
c0011fad:	21 35 a4 3d 02 c0    	and    DWORD PTR ds:0xc0023da4,esi
c0011fb3:	5e                   	pop    esi
c0011fb4:	5f                   	pop    edi
c0011fb5:	c3                   	ret    

c0011fb6 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011fb6:	57                   	push   edi
c0011fb7:	56                   	push   esi
c0011fb8:	53                   	push   ebx
c0011fb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011fcf:	77 41                	ja     c0012012 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011fd1:	99                   	cdq    
c0011fd2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011fd8:	01 c8                	add    eax,ecx
c0011fda:	11 da                	adc    edx,ebx
c0011fdc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011fe2:	19 d7                	sbb    edi,edx
c0011fe4:	72 33                	jb     c0012019 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011fe6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011fec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011ff2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ff6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011ffa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012000:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001200a:	5b                   	pop    ebx
c001200b:	5e                   	pop    esi
c001200c:	5f                   	pop    edi
c001200d:	e9 9a 09 00 00       	jmp    c00129ac <VCache::read(unsigned long long, int, void*)>
c0012012:	b8 05 00 00 00       	mov    eax,0x5
c0012017:	eb 05                	jmp    c001201e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012019:	b8 07 00 00 00       	mov    eax,0x7
c001201e:	5b                   	pop    ebx
c001201f:	5e                   	pop    esi
c0012020:	5f                   	pop    edi
c0012021:	c3                   	ret    

c0012022 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012022:	57                   	push   edi
c0012023:	56                   	push   esi
c0012024:	53                   	push   ebx
c0012025:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001202d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012035:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001203b:	77 41                	ja     c001207e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001203d:	99                   	cdq    
c001203e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012044:	01 c8                	add    eax,ecx
c0012046:	11 da                	adc    edx,ebx
c0012048:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001204e:	19 d7                	sbb    edi,edx
c0012050:	72 33                	jb     c0012085 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012052:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012058:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001205e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012062:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012066:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001206c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012072:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012076:	5b                   	pop    ebx
c0012077:	5e                   	pop    esi
c0012078:	5f                   	pop    edi
c0012079:	e9 4a 08 00 00       	jmp    c00128c8 <VCache::write(unsigned long long, int, void*)>
c001207e:	b8 05 00 00 00       	mov    eax,0x5
c0012083:	eb 05                	jmp    c001208a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012085:	b8 07 00 00 00       	mov    eax,0x7
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	c3                   	ret    

c001208e <Mouse::Mouse(char const*)>:
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012095:	83 ec 08             	sub    esp,0x8
c0012098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001209c:	50                   	push   eax
c001209d:	e8 8c e5 ff ff       	call   c001062e <Device::Device(char const*)>
c00120a2:	83 c4 10             	add    esp,0x10
c00120a5:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c00120aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ae:	89 10                	mov    DWORD PTR [eax],edx
c00120b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120b4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00120be:	90                   	nop
c00120bf:	83 c4 0c             	add    esp,0xc
c00120c2:	c3                   	ret    
c00120c3:	90                   	nop

c00120c4 <Mouse::~Mouse()>:
c00120c4:	83 ec 0c             	sub    esp,0xc
c00120c7:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c00120cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d0:	89 10                	mov    DWORD PTR [eax],edx
c00120d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d6:	83 ec 0c             	sub    esp,0xc
c00120d9:	50                   	push   eax
c00120da:	e8 01 e2 ff ff       	call   c00102e0 <Device::~Device()>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	90                   	nop
c00120e3:	83 c4 0c             	add    esp,0xc
c00120e6:	c3                   	ret    
c00120e7:	90                   	nop

c00120e8 <Mouse::~Mouse()>:
c00120e8:	83 ec 0c             	sub    esp,0xc
c00120eb:	83 ec 0c             	sub    esp,0xc
c00120ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120f2:	e8 cd ff ff ff       	call   c00120c4 <Mouse::~Mouse()>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	83 ec 08             	sub    esp,0x8
c00120fd:	68 58 01 00 00       	push   0x158
c0012102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012106:	e8 48 ce ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001210b:	83 c4 10             	add    esp,0x10
c001210e:	83 c4 0c             	add    esp,0xc
c0012111:	c3                   	ret    

c0012112 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012112:	55                   	push   ebp
c0012113:	57                   	push   edi
c0012114:	56                   	push   esi
c0012115:	53                   	push   ebx
c0012116:	81 ec 28 01 00 00    	sub    esp,0x128
c001211c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012123:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001212a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012131:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012138:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001213c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012140:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012147:	e8 d4 e5 ff ff       	call   c0010720 <Device::getName()>
c001214c:	5a                   	pop    edx
c001214d:	59                   	pop    ecx
c001214e:	50                   	push   eax
c001214f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012153:	55                   	push   ebp
c0012154:	e8 4e e5 fe ff       	call   c00006a7 <strcpy>
c0012159:	5b                   	pop    ebx
c001215a:	58                   	pop    eax
c001215b:	68 90 13 02 c0       	push   0xc0021390
c0012160:	55                   	push   ebp
c0012161:	e8 05 e6 fe ff       	call   c000076b <strcat>
c0012166:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001216d:	e8 d2 cd ff ff       	call   c000ef44 <operator new(unsigned long)>
c0012172:	83 c4 0c             	add    esp,0xc
c0012175:	89 c3                	mov    ebx,eax
c0012177:	57                   	push   edi
c0012178:	56                   	push   esi
c0012179:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001217d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012181:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012188:	55                   	push   ebp
c0012189:	50                   	push   eax
c001218a:	e8 e3 fb ff ff       	call   c0011d72 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001218f:	83 c4 14             	add    esp,0x14
c0012192:	53                   	push   ebx
c0012193:	e8 90 fc ff ff       	call   c0011e28 <LogicalDisk::assignDriveLetter()>
c0012198:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001219b:	e8 3e fd ff ff       	call   c0011ede <LogicalDisk::mount()>
c00121a0:	58                   	pop    eax
c00121a1:	5a                   	pop    edx
c00121a2:	53                   	push   ebx
c00121a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00121aa:	e8 8f e2 ff ff       	call   c001043e <Device::addChild(Device*)>
c00121af:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121b5:	5b                   	pop    ebx
c00121b6:	5e                   	pop    esi
c00121b7:	5f                   	pop    edi
c00121b8:	5d                   	pop    ebp
c00121b9:	c3                   	ret    

c00121ba <createPartitionsForDisk(PhysicalDisk*)>:
c00121ba:	55                   	push   ebp
c00121bb:	57                   	push   edi
c00121bc:	56                   	push   esi
c00121bd:	53                   	push   ebx
c00121be:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121c4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00121d1:	3d 00 02 00 00       	cmp    eax,0x200
c00121d6:	74 27                	je     c00121ff <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00121d8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00121de:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00121e4:	83 ec 10             	sub    esp,0x10
c00121e7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00121eb:	99                   	cdq    
c00121ec:	c1 e6 0a             	shl    esi,0xa
c00121ef:	52                   	push   edx
c00121f0:	89 fd                	mov    ebp,edi
c00121f2:	50                   	push   eax
c00121f3:	55                   	push   ebp
c00121f4:	56                   	push   esi
c00121f5:	e8 b2 c5 00 00       	call   c001e7ac <__udivdi3>
c00121fa:	e9 b1 00 00 00       	jmp    c00122b0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012204:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012208:	56                   	push   esi
c0012209:	6a 01                	push   0x1
c001220b:	6a 00                	push   0x0
c001220d:	6a 00                	push   0x0
c001220f:	53                   	push   ebx
c0012210:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012213:	83 c4 20             	add    esp,0x20
c0012216:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001221e:	75 0a                	jne    c001222a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012220:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012228:	74 2c                	je     c0012256 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001222a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012230:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012236:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001223c:	83 ec 10             	sub    esp,0x10
c001223f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012243:	89 f7                	mov    edi,esi
c0012245:	c1 e0 0a             	shl    eax,0xa
c0012248:	c1 ff 1f             	sar    edi,0x1f
c001224b:	57                   	push   edi
c001224c:	56                   	push   esi
c001224d:	52                   	push   edx
c001224e:	50                   	push   eax
c001224f:	e8 58 c5 00 00       	call   c001e7ac <__udivdi3>
c0012254:	eb 5a                	jmp    c00122b0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012256:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001225d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012264:	83 e1 7f             	and    ecx,0x7f
c0012267:	83 e0 7f             	and    eax,0x7f
c001226a:	01 c1                	add    ecx,eax
c001226c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012273:	83 e0 7f             	and    eax,0x7f
c0012276:	01 c1                	add    ecx,eax
c0012278:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001227f:	83 e0 7f             	and    eax,0x7f
c0012282:	00 c1                	add    cl,al
c0012284:	74 41                	je     c00122c7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012286:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001228c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012292:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012298:	83 ec 10             	sub    esp,0x10
c001229b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001229f:	89 f7                	mov    edi,esi
c00122a1:	c1 e0 0a             	shl    eax,0xa
c00122a4:	c1 ff 1f             	sar    edi,0x1f
c00122a7:	57                   	push   edi
c00122a8:	56                   	push   esi
c00122a9:	52                   	push   edx
c00122aa:	50                   	push   eax
c00122ab:	e8 fc c4 00 00       	call   c001e7ac <__udivdi3>
c00122b0:	83 c4 14             	add    esp,0x14
c00122b3:	52                   	push   edx
c00122b4:	50                   	push   eax
c00122b5:	6a 00                	push   0x0
c00122b7:	6a 00                	push   0x0
c00122b9:	53                   	push   ebx
c00122ba:	e8 53 fe ff ff       	call   c0012112 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00122bf:	83 c4 20             	add    esp,0x20
c00122c2:	e9 79 01 00 00       	jmp    c0012440 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00122c7:	89 f0                	mov    eax,esi
c00122c9:	31 f6                	xor    esi,esi
c00122cb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00122d2:	75 02                	jne    c00122d6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00122d4:	89 f1                	mov    ecx,esi
c00122d6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00122dd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00122e4:	c1 e2 08             	shl    edx,0x8
c00122e7:	c1 e7 10             	shl    edi,0x10
c00122ea:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00122f2:	09 fa                	or     edx,edi
c00122f4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00122fc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012303:	83 c0 10             	add    eax,0x10
c0012306:	09 fa                	or     edx,edi
c0012308:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001230f:	c1 e7 18             	shl    edi,0x18
c0012312:	09 fa                	or     edx,edi
c0012314:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001231b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001231f:	c1 e7 10             	shl    edi,0x10
c0012322:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012329:	c1 e2 08             	shl    edx,0x8
c001232c:	09 fa                	or     edx,edi
c001232e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012335:	09 fa                	or     edx,edi
c0012337:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001233e:	c1 e7 18             	shl    edi,0x18
c0012341:	09 fa                	or     edx,edi
c0012343:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012347:	46                   	inc    esi
c0012348:	83 fe 04             	cmp    esi,0x4
c001234b:	0f 85 7a ff ff ff    	jne    c00122cb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012355:	83 f0 01             	xor    eax,0x1
c0012358:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001235c:	75 57                	jne    c00123b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001235e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012362:	83 f0 01             	xor    eax,0x1
c0012365:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012369:	75 4a                	jne    c00123b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001236b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001236f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012377:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001237f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012385:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001238b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012391:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012395:	89 f7                	mov    edi,esi
c0012397:	c1 e0 0a             	shl    eax,0xa
c001239a:	c1 ff 1f             	sar    edi,0x1f
c001239d:	57                   	push   edi
c001239e:	56                   	push   esi
c001239f:	52                   	push   edx
c00123a0:	50                   	push   eax
c00123a1:	e8 06 c4 00 00       	call   c001e7ac <__udivdi3>
c00123a6:	83 c4 10             	add    esp,0x10
c00123a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123b1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00123b5:	84 c9                	test   cl,cl
c00123b7:	74 53                	je     c001240c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00123b9:	0f b6 c9             	movzx  ecx,cl
c00123bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123c4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123c8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00123cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00123d8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00123dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00123e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123ec:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00123f0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00123f4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00123f8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00123fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012400:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012404:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012408:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001240c:	31 ed                	xor    ebp,ebp
c001240e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012412:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012416:	89 f8                	mov    eax,edi
c0012418:	09 f0                	or     eax,esi
c001241a:	74 1e                	je     c001243a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001241c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012420:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012424:	89 d1                	mov    ecx,edx
c0012426:	09 c1                	or     ecx,eax
c0012428:	74 10                	je     c001243a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001242a:	83 ec 0c             	sub    esp,0xc
c001242d:	57                   	push   edi
c001242e:	56                   	push   esi
c001242f:	52                   	push   edx
c0012430:	50                   	push   eax
c0012431:	53                   	push   ebx
c0012432:	e8 db fc ff ff       	call   c0012112 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012437:	83 c4 20             	add    esp,0x20
c001243a:	45                   	inc    ebp
c001243b:	83 fd 04             	cmp    ebp,0x4
c001243e:	75 ce                	jne    c001240e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012440:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012446:	5b                   	pop    ebx
c0012447:	5e                   	pop    esi
c0012448:	5f                   	pop    edi
c0012449:	5d                   	pop    ebp
c001244a:	c3                   	ret    
c001244b:	90                   	nop

c001244c <Timer::Timer(char const*)>:
c001244c:	83 ec 0c             	sub    esp,0xc
c001244f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012453:	83 ec 08             	sub    esp,0x8
c0012456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001245a:	50                   	push   eax
c001245b:	e8 ce e1 ff ff       	call   c001062e <Device::Device(char const*)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	ba a4 13 02 c0       	mov    edx,0xc00213a4
c0012468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246c:	89 10                	mov    DWORD PTR [eax],edx
c001246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012472:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001247c:	90                   	nop
c001247d:	83 c4 0c             	add    esp,0xc
c0012480:	c3                   	ret    
c0012481:	90                   	nop

c0012482 <Timer::~Timer()>:
c0012482:	83 ec 0c             	sub    esp,0xc
c0012485:	ba a4 13 02 c0       	mov    edx,0xc00213a4
c001248a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248e:	89 10                	mov    DWORD PTR [eax],edx
c0012490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	50                   	push   eax
c0012498:	e8 43 de ff ff       	call   c00102e0 <Device::~Device()>
c001249d:	83 c4 10             	add    esp,0x10
c00124a0:	90                   	nop
c00124a1:	83 c4 0c             	add    esp,0xc
c00124a4:	c3                   	ret    
c00124a5:	90                   	nop

c00124a6 <Timer::~Timer()>:
c00124a6:	83 ec 0c             	sub    esp,0xc
c00124a9:	83 ec 0c             	sub    esp,0xc
c00124ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124b0:	e8 cd ff ff ff       	call   c0012482 <Timer::~Timer()>
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	83 ec 08             	sub    esp,0x8
c00124bb:	68 5c 01 00 00       	push   0x15c
c00124c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c4:	e8 8a ca ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	83 c4 0c             	add    esp,0xc
c00124cf:	c3                   	ret    

c00124d0 <Timer::read()>:
c00124d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00124da:	c3                   	ret    

c00124db <timerHandler(unsigned long long)>:
c00124db:	55                   	push   ebp
c00124dc:	57                   	push   edi
c00124dd:	56                   	push   esi
c00124de:	53                   	push   ebx
c00124df:	83 ec 0c             	sub    esp,0xc
c00124e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00124e6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124ea:	01 35 30 3e 02 c0    	add    DWORD PTR ds:0xc0023e30,esi
c00124f0:	11 3d 34 3e 02 c0    	adc    DWORD PTR ds:0xc0023e34,edi
c00124f6:	80 3d cd 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237cd,0x0
c00124fd:	0f 84 07 01 00 00    	je     c001260a <timerHandler(unsigned long long)+0x12f>
c0012503:	e8 23 57 00 00       	call   c0017c2b <lockStuff()>
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	68 fc 4b 02 c0       	push   0xc0024bfc
c0012510:	e8 6b c9 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012515:	c7 04 24 fc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bfc
c001251c:	89 c3                	mov    ebx,eax
c001251e:	e8 65 c9 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	84 c0                	test   al,al
c0012528:	74 60                	je     c001258a <timerHandler(unsigned long long)+0xaf>
c001252a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012530:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012533:	85 c0                	test   eax,eax
c0012535:	0f 85 91 00 00 00    	jne    c00125cc <timerHandler(unsigned long long)+0xf1>
c001253b:	e9 be 00 00 00       	jmp    c00125fe <timerHandler(unsigned long long)+0x123>
c0012540:	83 ec 0c             	sub    esp,0xc
c0012543:	55                   	push   ebp
c0012544:	e8 cb 5e 00 00       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	39 eb                	cmp    ebx,ebp
c001254e:	75 12                	jne    c0012562 <timerHandler(unsigned long long)+0x87>
c0012550:	83 ec 0c             	sub    esp,0xc
c0012553:	68 fc 4b 02 c0       	push   0xc0024bfc
c0012558:	e8 23 c9 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001255d:	89 c3                	mov    ebx,eax
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	68 fc 4b 02 c0       	push   0xc0024bfc
c001256a:	e8 19 c9 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	84 c0                	test   al,al
c0012574:	75 b4                	jne    c001252a <timerHandler(unsigned long long)+0x4f>
c0012576:	83 ec 0c             	sub    esp,0xc
c0012579:	68 fc 4b 02 c0       	push   0xc0024bfc
c001257e:	e8 fd c8 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	39 d8                	cmp    eax,ebx
c0012588:	74 a0                	je     c001252a <timerHandler(unsigned long long)+0x4f>
c001258a:	83 ec 0c             	sub    esp,0xc
c001258d:	68 fc 4b 02 c0       	push   0xc0024bfc
c0012592:	e8 e9 c8 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012597:	c7 04 24 fc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bfc
c001259e:	89 c5                	mov    ebp,eax
c00125a0:	e8 ff c8 00 00       	call   c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00125a5:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00125ae:	39 15 30 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e30,edx
c00125b4:	a1 34 3e 02 c0       	mov    eax,ds:0xc0023e34
c00125b9:	19 c8                	sbb    eax,ecx
c00125bb:	73 83                	jae    c0012540 <timerHandler(unsigned long long)+0x65>
c00125bd:	50                   	push   eax
c00125be:	50                   	push   eax
c00125bf:	55                   	push   ebp
c00125c0:	68 fc 4b 02 c0       	push   0xc0024bfc
c00125c5:	e8 88 c9 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00125ca:	eb 93                	jmp    c001255f <timerHandler(unsigned long long)+0x84>
c00125cc:	80 3d cc 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237cc,0x0
c00125d3:	74 29                	je     c00125fe <timerHandler(unsigned long long)+0x123>
c00125d5:	39 c6                	cmp    esi,eax
c00125d7:	bb 00 00 00 00       	mov    ebx,0x0
c00125dc:	19 df                	sbb    edi,ebx
c00125de:	72 19                	jb     c00125f9 <timerHandler(unsigned long long)+0x11e>
c00125e0:	e8 1f 56 00 00       	call   c0017c04 <lockScheduler()>
c00125e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125ea:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00125ed:	e8 46 59 00 00       	call   c0017f38 <schedule()>
c00125f2:	e8 0f 56 00 00       	call   c0017c06 <unlockScheduler()>
c00125f7:	eb 05                	jmp    c00125fe <timerHandler(unsigned long long)+0x123>
c00125f9:	29 f0                	sub    eax,esi
c00125fb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00125fe:	83 c4 0c             	add    esp,0xc
c0012601:	5b                   	pop    ebx
c0012602:	5e                   	pop    esi
c0012603:	5f                   	pop    edi
c0012604:	5d                   	pop    ebp
c0012605:	e9 b3 59 00 00       	jmp    c0017fbd <unlockStuff()>
c001260a:	83 c4 0c             	add    esp,0xc
c001260d:	5b                   	pop    ebx
c001260e:	5e                   	pop    esi
c001260f:	5f                   	pop    edi
c0012610:	5d                   	pop    ebp
c0012611:	c3                   	ret    

c0012612 <setupTimer(int)>:
c0012612:	57                   	push   edi
c0012613:	56                   	push   esi
c0012614:	53                   	push   ebx
c0012615:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012619:	e8 a1 19 00 00       	call   c0013fbf <getCPUNumber()>
c001261e:	85 c0                	test   eax,eax
c0012620:	74 32                	je     c0012654 <setupTimer(int)+0x42>
c0012622:	83 ec 0c             	sub    esp,0xc
c0012625:	68 60 01 00 00       	push   0x160
c001262a:	e8 15 c9 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001262f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012632:	89 c3                	mov    ebx,eax
c0012634:	e8 0d bc 00 00       	call   c001e246 <APICTimer::APICTimer()>
c0012639:	6a 00                	push   0x0
c001263b:	6a 00                	push   0x0
c001263d:	56                   	push   esi
c001263e:	53                   	push   ebx
c001263f:	e8 0a bb 00 00       	call   c001e14e <APICTimer::open(int, int, void*)>
c0012644:	83 c4 20             	add    esp,0x20
c0012647:	e8 76 19 00 00       	call   c0013fc2 <thisCPU()>
c001264c:	56                   	push   esi
c001264d:	56                   	push   esi
c001264e:	53                   	push   ebx
c001264f:	e9 96 00 00 00       	jmp    c00126ea <setupTimer(int)+0xd8>
c0012654:	e8 69 19 00 00       	call   c0013fc2 <thisCPU()>
c0012659:	83 ec 0c             	sub    esp,0xc
c001265c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012662:	e8 b9 e0 ff ff       	call   c0010720 <Device::getName()>
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001266d:	0f 85 87 00 00 00    	jne    c00126fa <setupTimer(int)+0xe8>
c0012673:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0012678:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001267f:	74 79                	je     c00126fa <setupTimer(int)+0xe8>
c0012681:	83 ec 0c             	sub    esp,0xc
c0012684:	68 5c 01 00 00       	push   0x15c
c0012689:	e8 b6 c8 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001268e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012691:	89 c3                	mov    ebx,eax
c0012693:	e8 fe bc 00 00       	call   c001e396 <PIT::PIT()>
c0012698:	59                   	pop    ecx
c0012699:	5f                   	pop    edi
c001269a:	53                   	push   ebx
c001269b:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c00126a1:	e8 98 dd ff ff       	call   c001043e <Device::addChild(Device*)>
c00126a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126a8:	6a 00                	push   0x0
c00126aa:	6a 00                	push   0x0
c00126ac:	56                   	push   esi
c00126ad:	53                   	push   ebx
c00126ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126b1:	83 c4 14             	add    esp,0x14
c00126b4:	68 60 01 00 00       	push   0x160
c00126b9:	e8 86 c8 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00126be:	89 04 24             	mov    DWORD PTR [esp],eax
c00126c1:	89 c7                	mov    edi,eax
c00126c3:	e8 7e bb 00 00       	call   c001e246 <APICTimer::APICTimer()>
c00126c8:	6a 00                	push   0x0
c00126ca:	6a 00                	push   0x0
c00126cc:	56                   	push   esi
c00126cd:	57                   	push   edi
c00126ce:	e8 7b ba 00 00       	call   c001e14e <APICTimer::open(int, int, void*)>
c00126d3:	83 c4 20             	add    esp,0x20
c00126d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d8:	6a 00                	push   0x0
c00126da:	6a 00                	push   0x0
c00126dc:	6a 00                	push   0x0
c00126de:	53                   	push   ebx
c00126df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126e2:	e8 db 18 00 00       	call   c0013fc2 <thisCPU()>
c00126e7:	5a                   	pop    edx
c00126e8:	59                   	pop    ecx
c00126e9:	57                   	push   edi
c00126ea:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00126f0:	e8 49 dd ff ff       	call   c001043e <Device::addChild(Device*)>
c00126f5:	83 c4 10             	add    esp,0x10
c00126f8:	eb 33                	jmp    c001272d <setupTimer(int)+0x11b>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	68 5c 01 00 00       	push   0x15c
c0012702:	e8 3d c8 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0012707:	89 04 24             	mov    DWORD PTR [esp],eax
c001270a:	89 c3                	mov    ebx,eax
c001270c:	e8 85 bc 00 00       	call   c001e396 <PIT::PIT()>
c0012711:	58                   	pop    eax
c0012712:	5a                   	pop    edx
c0012713:	53                   	push   ebx
c0012714:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c001271a:	e8 1f dd ff ff       	call   c001043e <Device::addChild(Device*)>
c001271f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012721:	6a 00                	push   0x0
c0012723:	6a 00                	push   0x0
c0012725:	56                   	push   esi
c0012726:	53                   	push   ebx
c0012727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001272a:	83 c4 20             	add    esp,0x20
c001272d:	89 d8                	mov    eax,ebx
c001272f:	5b                   	pop    ebx
c0012730:	5e                   	pop    esi
c0012731:	5f                   	pop    edi
c0012732:	c3                   	ret    
c0012733:	90                   	nop

c0012734 <VCache::VCache(PhysicalDisk*)>:
c0012734:	53                   	push   ebx
c0012735:	83 ec 08             	sub    esp,0x8
c0012738:	ba d4 13 02 c0       	mov    edx,0xc00213d4
c001273d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012741:	89 10                	mov    DWORD PTR [eax],edx
c0012743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012747:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001274e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012752:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001275d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012764:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001276b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001276f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012776:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001277d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012781:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012790:	83 ec 0c             	sub    esp,0xc
c0012793:	6a 10                	push   0x10
c0012795:	e8 aa c7 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001279a:	83 c4 10             	add    esp,0x10
c001279d:	89 c3                	mov    ebx,eax
c001279f:	83 ec 0c             	sub    esp,0xc
c00127a2:	53                   	push   ebx
c00127a3:	e8 74 55 00 00       	call   c0017d1c <Mutex::Mutex()>
c00127a8:	83 c4 10             	add    esp,0x10
c00127ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00127b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00127bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c1:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00127c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127cc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00127d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127dd:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00127e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127ed:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00127f0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00127f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012805:	c1 e0 06             	shl    eax,0x6
c0012808:	83 ec 0c             	sub    esp,0xc
c001280b:	50                   	push   eax
c001280c:	e8 45 94 ff ff       	call   c000bc56 <malloc>
c0012811:	83 c4 10             	add    esp,0x10
c0012814:	89 c2                	mov    edx,eax
c0012816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001281d:	90                   	nop
c001281e:	83 c4 08             	add    esp,0x8
c0012821:	5b                   	pop    ebx
c0012822:	c3                   	ret    
c0012823:	90                   	nop

c0012824 <VCache::writeWriteBuffer()>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 14             	sub    esp,0x14
c0012828:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001282c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001282f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012831:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012834:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012837:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001283a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001283d:	50                   	push   eax
c001283e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012841:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012848:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001284f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012853:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001285a:	83 c4 28             	add    esp,0x28
c001285d:	5b                   	pop    ebx
c001285e:	c3                   	ret    
c001285f:	90                   	nop

c0012860 <VCache::~VCache()>:
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	ba d4 13 02 c0       	mov    edx,0xc00213d4
c0012868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286c:	89 10                	mov    DWORD PTR [eax],edx
c001286e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012872:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012875:	84 c0                	test   al,al
c0012877:	74 0f                	je     c0012888 <VCache::~VCache()+0x28>
c0012879:	83 ec 0c             	sub    esp,0xc
c001287c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012880:	e8 9f ff ff ff       	call   c0012824 <VCache::writeWriteBuffer()>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001288f:	83 ec 0c             	sub    esp,0xc
c0012892:	50                   	push   eax
c0012893:	e8 ce 93 ff ff       	call   c000bc66 <free>
c0012898:	83 c4 10             	add    esp,0x10
c001289b:	90                   	nop
c001289c:	83 c4 0c             	add    esp,0xc
c001289f:	c3                   	ret    

c00128a0 <VCache::~VCache()>:
c00128a0:	83 ec 0c             	sub    esp,0xc
c00128a3:	83 ec 0c             	sub    esp,0xc
c00128a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128aa:	e8 b1 ff ff ff       	call   c0012860 <VCache::~VCache()>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	83 ec 08             	sub    esp,0x8
c00128b5:	6a 30                	push   0x30
c00128b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128bb:	e8 93 c6 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	83 c4 0c             	add    esp,0xc
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <VCache::write(unsigned long long, int, void*)>:
c00128c8:	55                   	push   ebp
c00128c9:	57                   	push   edi
c00128ca:	56                   	push   esi
c00128cb:	53                   	push   ebx
c00128cc:	83 ec 28             	sub    esp,0x28
c00128cf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00128d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128db:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00128df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00128e2:	e8 09 5a 00 00       	call   c00182f0 <Semaphore::acquire()>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00128ee:	74 66                	je     c0012956 <VCache::write(unsigned long long, int, void*)+0x8e>
c00128f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128f3:	99                   	cdq    
c00128f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128f8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00128fb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00128fe:	89 c1                	mov    ecx,eax
c0012900:	89 d0                	mov    eax,edx
c0012902:	31 f1                	xor    ecx,esi
c0012904:	31 f8                	xor    eax,edi
c0012906:	89 ca                	mov    edx,ecx
c0012908:	09 c2                	or     edx,eax
c001290a:	75 3e                	jne    c001294a <VCache::write(unsigned long long, int, void*)+0x82>
c001290c:	83 fd 01             	cmp    ebp,0x1
c001290f:	75 39                	jne    c001294a <VCache::write(unsigned long long, int, void*)+0x82>
c0012911:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012914:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001291a:	51                   	push   ecx
c001291b:	50                   	push   eax
c001291c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012920:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012924:	0f af c8             	imul   ecx,eax
c0012927:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001292a:	51                   	push   ecx
c001292b:	e8 a2 dc fe ff       	call   c00005d2 <memcpy>
c0012930:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	40                   	inc    eax
c0012937:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001293a:	83 f8 40             	cmp    eax,0x40
c001293d:	75 57                	jne    c0012996 <VCache::write(unsigned long long, int, void*)+0xce>
c001293f:	83 ec 0c             	sub    esp,0xc
c0012942:	53                   	push   ebx
c0012943:	e8 dc fe ff ff       	call   c0012824 <VCache::writeWriteBuffer()>
c0012948:	eb 34                	jmp    c001297e <VCache::write(unsigned long long, int, void*)+0xb6>
c001294a:	83 ec 0c             	sub    esp,0xc
c001294d:	53                   	push   ebx
c001294e:	e8 d1 fe ff ff       	call   c0012824 <VCache::writeWriteBuffer()>
c0012953:	83 c4 10             	add    esp,0x10
c0012956:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012959:	83 fd 3f             	cmp    ebp,0x3f
c001295c:	7f 25                	jg     c0012983 <VCache::write(unsigned long long, int, void*)+0xbb>
c001295e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012961:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012964:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012967:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001296b:	52                   	push   edx
c001296c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012972:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012976:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012979:	e8 54 dc fe ff       	call   c00005d2 <memcpy>
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	eb 13                	jmp    c0012996 <VCache::write(unsigned long long, int, void*)+0xce>
c0012983:	83 ec 0c             	sub    esp,0xc
c0012986:	8b 10                	mov    edx,DWORD PTR [eax]
c0012988:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001298c:	55                   	push   ebp
c001298d:	57                   	push   edi
c001298e:	56                   	push   esi
c001298f:	50                   	push   eax
c0012990:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012993:	83 c4 20             	add    esp,0x20
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001299c:	e8 65 5f 00 00       	call   c0018906 <Semaphore::release()>
c00129a1:	83 c4 2c             	add    esp,0x2c
c00129a4:	31 c0                	xor    eax,eax
c00129a6:	5b                   	pop    ebx
c00129a7:	5e                   	pop    esi
c00129a8:	5f                   	pop    edi
c00129a9:	5d                   	pop    ebp
c00129aa:	c3                   	ret    
c00129ab:	90                   	nop

c00129ac <VCache::read(unsigned long long, int, void*)>:
c00129ac:	57                   	push   edi
c00129ad:	56                   	push   esi
c00129ae:	53                   	push   ebx
c00129af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00129b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00129bb:	83 ec 0c             	sub    esp,0xc
c00129be:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129c1:	e8 2a 59 00 00       	call   c00182f0 <Semaphore::acquire()>
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00129cd:	74 0c                	je     c00129db <VCache::read(unsigned long long, int, void*)+0x2f>
c00129cf:	83 ec 0c             	sub    esp,0xc
c00129d2:	53                   	push   ebx
c00129d3:	e8 4c fe ff ff       	call   c0012824 <VCache::writeWriteBuffer()>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00129e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129eb:	57                   	push   edi
c00129ec:	56                   	push   esi
c00129ed:	50                   	push   eax
c00129ee:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129f1:	83 c4 14             	add    esp,0x14
c00129f4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129f7:	e8 0a 5f 00 00       	call   c0018906 <Semaphore::release()>
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	31 c0                	xor    eax,eax
c0012a01:	5b                   	pop    ebx
c0012a02:	5e                   	pop    esi
c0012a03:	5f                   	pop    edi
c0012a04:	c3                   	ret    
c0012a05:	90                   	nop

c0012a06 <Video::putrect(int, int, int, int, unsigned int)>:
c0012a06:	55                   	push   ebp
c0012a07:	57                   	push   edi
c0012a08:	56                   	push   esi
c0012a09:	53                   	push   ebx
c0012a0a:	83 ec 1c             	sub    esp,0x1c
c0012a0d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012a15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a19:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012a1d:	01 e8                	add    eax,ebp
c0012a1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a27:	01 df                	add    edi,ebx
c0012a29:	39 fb                	cmp    ebx,edi
c0012a2b:	7d 1b                	jge    c0012a48 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012a2d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012a31:	7d 12                	jge    c0012a45 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012a33:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a39:	53                   	push   ebx
c0012a3a:	55                   	push   ebp
c0012a3b:	45                   	inc    ebp
c0012a3c:	56                   	push   esi
c0012a3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	eb e8                	jmp    c0012a2d <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012a45:	43                   	inc    ebx
c0012a46:	eb e1                	jmp    c0012a29 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012a48:	83 c4 1c             	add    esp,0x1c
c0012a4b:	5b                   	pop    ebx
c0012a4c:	5e                   	pop    esi
c0012a4d:	5f                   	pop    edi
c0012a4e:	5d                   	pop    ebp
c0012a4f:	c3                   	ret    

c0012a50 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a50:	55                   	push   ebp
c0012a51:	57                   	push   edi
c0012a52:	56                   	push   esi
c0012a53:	53                   	push   ebx
c0012a54:	83 ec 1c             	sub    esp,0x1c
c0012a57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a5f:	85 c0                	test   eax,eax
c0012a61:	79 02                	jns    c0012a65 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a63:	31 c0                	xor    eax,eax
c0012a65:	c1 e0 02             	shl    eax,0x2
c0012a68:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a74:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a78:	39 d8                	cmp    eax,ebx
c0012a7a:	7e 49                	jle    c0012ac5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a7c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a82:	7c 41                	jl     c0012ac5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a84:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a8c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a90:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a94:	39 f9                	cmp    ecx,edi
c0012a96:	7e 22                	jle    c0012aba <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a98:	83 c5 04             	add    ebp,0x4
c0012a9b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012aa1:	7c 14                	jl     c0012ab7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012aa3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012aa5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012aa8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012aac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012ab0:	56                   	push   esi
c0012ab1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	47                   	inc    edi
c0012ab8:	eb d2                	jmp    c0012a8c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012abe:	43                   	inc    ebx
c0012abf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012ac3:	eb ab                	jmp    c0012a70 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012ac5:	83 c4 1c             	add    esp,0x1c
c0012ac8:	5b                   	pop    ebx
c0012ac9:	5e                   	pop    esi
c0012aca:	5f                   	pop    edi
c0012acb:	5d                   	pop    ebp
c0012acc:	c3                   	ret    
c0012acd:	90                   	nop

c0012ace <Video::clearScreen(unsigned int)>:
c0012ace:	57                   	push   edi
c0012acf:	56                   	push   esi
c0012ad0:	53                   	push   ebx
c0012ad1:	31 db                	xor    ebx,ebx
c0012ad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ad7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012add:	7e 1f                	jle    c0012afe <Video::clearScreen(unsigned int)+0x30>
c0012adf:	31 ff                	xor    edi,edi
c0012ae1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012ae7:	7e 12                	jle    c0012afb <Video::clearScreen(unsigned int)+0x2d>
c0012ae9:	8b 06                	mov    eax,DWORD PTR [esi]
c0012aeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012aef:	53                   	push   ebx
c0012af0:	57                   	push   edi
c0012af1:	47                   	inc    edi
c0012af2:	56                   	push   esi
c0012af3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012af6:	83 c4 10             	add    esp,0x10
c0012af9:	eb e6                	jmp    c0012ae1 <Video::clearScreen(unsigned int)+0x13>
c0012afb:	43                   	inc    ebx
c0012afc:	eb d9                	jmp    c0012ad7 <Video::clearScreen(unsigned int)+0x9>
c0012afe:	5b                   	pop    ebx
c0012aff:	5e                   	pop    esi
c0012b00:	5f                   	pop    edi
c0012b01:	c3                   	ret    

c0012b02 <Video::putpixel(int, int, unsigned int)>:
c0012b02:	c7 44 24 04 dc 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213dc
c0012b0a:	e9 24 c5 ff ff       	jmp    c000f033 <Dbg::kprintf(char const*, ...)>
c0012b0f:	90                   	nop

c0012b10 <Video::Video(char const*)>:
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b17:	83 ec 08             	sub    esp,0x8
c0012b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b1e:	50                   	push   eax
c0012b1f:	e8 0a db ff ff       	call   c001062e <Device::Device(char const*)>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	ba f4 13 02 c0       	mov    edx,0xc00213f4
c0012b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b30:	89 10                	mov    DWORD PTR [eax],edx
c0012b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b36:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012b40:	90                   	nop
c0012b41:	83 c4 0c             	add    esp,0xc
c0012b44:	c3                   	ret    
c0012b45:	90                   	nop

c0012b46 <Video::~Video()>:
c0012b46:	83 ec 0c             	sub    esp,0xc
c0012b49:	ba f4 13 02 c0       	mov    edx,0xc00213f4
c0012b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b52:	89 10                	mov    DWORD PTR [eax],edx
c0012b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b58:	83 ec 0c             	sub    esp,0xc
c0012b5b:	50                   	push   eax
c0012b5c:	e8 7f d7 ff ff       	call   c00102e0 <Device::~Device()>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	90                   	nop
c0012b65:	83 c4 0c             	add    esp,0xc
c0012b68:	c3                   	ret    
c0012b69:	90                   	nop

c0012b6a <Video::~Video()>:
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	83 ec 0c             	sub    esp,0xc
c0012b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b74:	e8 cd ff ff ff       	call   c0012b46 <Video::~Video()>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	83 ec 08             	sub    esp,0x8
c0012b7f:	68 64 01 00 00       	push   0x164
c0012b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b88:	e8 c6 c3 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	83 c4 0c             	add    esp,0xc
c0012b93:	c3                   	ret    

c0012b94 <Video::isMonochrome()>:
c0012b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b98:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b9e:	c3                   	ret    
c0012b9f:	90                   	nop

c0012ba0 <Video::getWidth()>:
c0012ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012baa:	c3                   	ret    
c0012bab:	90                   	nop

c0012bac <Video::getHeight()>:
c0012bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012bb6:	c3                   	ret    
c0012bb7:	90                   	nop

c0012bb8 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012bb8:	55                   	push   ebp
c0012bb9:	57                   	push   edi
c0012bba:	56                   	push   esi
c0012bbb:	53                   	push   ebx
c0012bbc:	83 ec 2c             	sub    esp,0x2c
c0012bbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012bc3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012bc7:	83 f8 01             	cmp    eax,0x1
c0012bca:	19 c9                	sbb    ecx,ecx
c0012bcc:	31 db                	xor    ebx,ebx
c0012bce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012bd2:	89 cd                	mov    ebp,ecx
c0012bd4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012bdc:	f7 d5                	not    ebp
c0012bde:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012be4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012be8:	01 d8                	add    eax,ebx
c0012bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012bee:	56                   	push   esi
c0012bef:	e8 b8 ff ff ff       	call   c0012bac <Video::getHeight()>
c0012bf4:	59                   	pop    ecx
c0012bf5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bf9:	7e 70                	jle    c0012c6b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bff:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012c03:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012c06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c0e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012c15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c19:	89 f8                	mov    eax,edi
c0012c1b:	83 c0 20             	add    eax,0x20
c0012c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c22:	56                   	push   esi
c0012c23:	e8 78 ff ff ff       	call   c0012ba0 <Video::getWidth()>
c0012c28:	5a                   	pop    edx
c0012c29:	39 c7                	cmp    edi,eax
c0012c2b:	7d 34                	jge    c0012c61 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012c2d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012c32:	74 05                	je     c0012c39 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012c34:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c36:	55                   	push   ebp
c0012c37:	eb 0d                	jmp    c0012c46 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012c39:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012c3e:	74 12                	je     c0012c52 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012c40:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c4a:	57                   	push   edi
c0012c4b:	56                   	push   esi
c0012c4c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c56:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c5a:	47                   	inc    edi
c0012c5b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c5f:	75 c1                	jne    c0012c22 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c61:	43                   	inc    ebx
c0012c62:	83 fb 20             	cmp    ebx,0x20
c0012c65:	0f 85 79 ff ff ff    	jne    c0012be4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c6b:	83 c4 2c             	add    esp,0x2c
c0012c6e:	5b                   	pop    ebx
c0012c6f:	5e                   	pop    esi
c0012c70:	5f                   	pop    edi
c0012c71:	5d                   	pop    ebp
c0012c72:	c3                   	ret    
c0012c73:	90                   	nop

c0012c74 <ACPI::close(int, int, void*)>:
c0012c74:	83 ec 1c             	sub    esp,0x1c
c0012c77:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012c7f:	74 0a                	je     c0012c8b <ACPI::close(int, int, void*)+0x17>
c0012c81:	b8 00 00 00 00       	mov    eax,0x0
c0012c86:	e9 9a 00 00 00       	jmp    c0012d25 <ACPI::close(int, int, void*)+0xb1>
c0012c8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c90:	75 37                	jne    c0012cc9 <ACPI::close(int, int, void*)+0x55>
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	68 2c 14 02 c0       	push   0xc002142c
c0012c9a:	e8 94 c3 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0012ca7:	85 c0                	test   eax,eax
c0012ca9:	74 07                	je     c0012cb2 <ACPI::close(int, int, void*)+0x3e>
c0012cab:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0012cb0:	ff d0                	call   eax
c0012cb2:	83 ec 0c             	sub    esp,0xc
c0012cb5:	68 00 15 02 c0       	push   0xc0021500
c0012cba:	e8 09 20 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012cc7:	eb 5c                	jmp    c0012d25 <ACPI::close(int, int, void*)+0xb1>
c0012cc9:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012cce:	75 50                	jne    c0012d20 <ACPI::close(int, int, void*)+0xac>
c0012cd0:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0012cd5:	85 c0                	test   eax,eax
c0012cd7:	74 07                	je     c0012ce0 <ACPI::close(int, int, void*)+0x6c>
c0012cd9:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0012cde:	ff d0                	call   eax
c0012ce0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012ce5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012cea:	83 e0 02             	and    eax,0x2
c0012ced:	74 1c                	je     c0012d0b <ACPI::close(int, int, void*)+0x97>
c0012cef:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cfa:	89 c2                	mov    edx,eax
c0012cfc:	ec                   	in     al,dx
c0012cfd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012d01:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012d05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d09:	eb da                	jmp    c0012ce5 <ACPI::close(int, int, void*)+0x71>
c0012d0b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012d12:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012d17:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012d1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d1f:	ee                   	out    dx,al
c0012d20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012d25:	83 c4 1c             	add    esp,0x1c
c0012d28:	c3                   	ret    

c0012d29 <findRSDP()>:
c0012d29:	83 ec 1c             	sub    esp,0x1c
c0012d2c:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0012d31:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d37:	83 e0 04             	and    eax,0x4
c0012d3a:	84 c0                	test   al,al
c0012d3c:	75 07                	jne    c0012d45 <findRSDP()+0x1c>
c0012d3e:	b8 00 00 00 00       	mov    eax,0x0
c0012d43:	eb 6a                	jmp    c0012daf <findRSDP()+0x86>
c0012d45:	a1 10 38 02 c0       	mov    eax,ds:0xc0023810
c0012d4a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012d4f:	7f 1b                	jg     c0012d6c <findRSDP()+0x43>
c0012d51:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0012d56:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d5c:	83 e2 fb             	and    edx,0xfffffffb
c0012d5f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d65:	b8 00 00 00 00       	mov    eax,0x0
c0012d6a:	eb 43                	jmp    c0012daf <findRSDP()+0x86>
c0012d6c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d74:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d7c:	77 2c                	ja     c0012daa <findRSDP()+0x81>
c0012d7e:	83 ec 04             	sub    esp,0x4
c0012d81:	6a 08                	push   0x8
c0012d83:	68 39 14 02 c0       	push   0xc0021439
c0012d88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d8c:	e8 de d7 fe ff       	call   c000056f <memcmp>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	85 c0                	test   eax,eax
c0012d96:	0f 94 c0             	sete   al
c0012d99:	84 c0                	test   al,al
c0012d9b:	74 06                	je     c0012da3 <findRSDP()+0x7a>
c0012d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da1:	eb 0c                	jmp    c0012daf <findRSDP()+0x86>
c0012da3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012da8:	eb ca                	jmp    c0012d74 <findRSDP()+0x4b>
c0012daa:	b8 00 00 00 00       	mov    eax,0x0
c0012daf:	83 c4 1c             	add    esp,0x1c
c0012db2:	c3                   	ret    

c0012db3 <loadACPITables(unsigned char*)>:
c0012db3:	56                   	push   esi
c0012db4:	53                   	push   ebx
c0012db5:	83 ec 44             	sub    esp,0x44
c0012db8:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0012dbd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012dc3:	83 e0 04             	and    eax,0x4
c0012dc6:	84 c0                	test   al,al
c0012dc8:	0f 84 05 02 00 00    	je     c0012fd3 <loadACPITables(unsigned char*)+0x220>
c0012dce:	a0 60 40 02 c0       	mov    al,ds:0xc0024060
c0012dd3:	84 c0                	test   al,al
c0012dd5:	74 75                	je     c0012e4c <loadACPITables(unsigned char*)+0x99>
c0012dd7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ddb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012de3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012de6:	83 e8 24             	sub    eax,0x24
c0012de9:	c1 e8 03             	shr    eax,0x3
c0012dec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012df0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012df8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dfc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012e00:	0f 8d b2 00 00 00    	jge    c0012eb8 <loadACPITables(unsigned char*)+0x105>
c0012e06:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e0a:	83 c0 24             	add    eax,0x24
c0012e0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012e11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012e19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e1d:	c1 e0 03             	shl    eax,0x3
c0012e20:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012e24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e28:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e2d:	89 c1                	mov    ecx,eax
c0012e2f:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c0012e34:	8d 50 01             	lea    edx,[eax+0x1]
c0012e37:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c0012e3d:	89 ca                	mov    edx,ecx
c0012e3f:	89 14 c5 64 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc19c],edx
c0012e46:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012e4a:	eb ac                	jmp    c0012df8 <loadACPITables(unsigned char*)+0x45>
c0012e4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e5b:	83 e8 24             	sub    eax,0x24
c0012e5e:	c1 e8 02             	shr    eax,0x2
c0012e61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e65:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e71:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e75:	7d 41                	jge    c0012eb8 <loadACPITables(unsigned char*)+0x105>
c0012e77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e7b:	83 c0 24             	add    eax,0x24
c0012e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e8e:	c1 e0 02             	shl    eax,0x2
c0012e91:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e9b:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c0012ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0012ea3:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c0012ea9:	89 ca                	mov    edx,ecx
c0012eab:	89 14 c5 64 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc19c],edx
c0012eb2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012eb6:	eb b5                	jmp    c0012e6d <loadACPITables(unsigned char*)+0xba>
c0012eb8:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012ec0:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c0012ec5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012ec9:	0f 8d 05 01 00 00    	jge    c0012fd4 <loadACPITables(unsigned char*)+0x221>
c0012ecf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ed3:	8b 04 c5 64 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc19c]
c0012eda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eea:	25 ff 0f 00 00       	and    eax,0xfff
c0012eef:	89 c6                	mov    esi,eax
c0012ef1:	e8 4d b0 ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c0012ef6:	89 c3                	mov    ebx,eax
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	6a 01                	push   0x1
c0012efd:	e8 b1 ae ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f09:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f0f:	83 ec 0c             	sub    esp,0xc
c0012f12:	6a 01                	push   0x1
c0012f14:	6a 01                	push   0x1
c0012f16:	50                   	push   eax
c0012f17:	52                   	push   edx
c0012f18:	53                   	push   ebx
c0012f19:	e8 b8 b7 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f1e:	83 c4 20             	add    esp,0x20
c0012f21:	09 f0                	or     eax,esi
c0012f23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f2b:	c1 e0 03             	shl    eax,0x3
c0012f2e:	05 60 3e 02 c0       	add    eax,0xc0023e60
c0012f33:	83 ec 04             	sub    esp,0x4
c0012f36:	6a 04                	push   0x4
c0012f38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f3c:	50                   	push   eax
c0012f3d:	e8 90 d6 fe ff       	call   c00005d2 <memcpy>
c0012f42:	83 c4 10             	add    esp,0x10
c0012f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f54:	05 00 10 00 00       	add    eax,0x1000
c0012f59:	c1 e8 0c             	shr    eax,0xc
c0012f5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f64:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6b:	25 ff 0f 00 00       	and    eax,0xfff
c0012f70:	89 c6                	mov    esi,eax
c0012f72:	e8 cc af ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c0012f77:	89 c3                	mov    ebx,eax
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f80:	e8 2e ae ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c0012f85:	83 c4 10             	add    esp,0x10
c0012f88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f8c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f92:	83 ec 0c             	sub    esp,0xc
c0012f95:	6a 01                	push   0x1
c0012f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f9b:	50                   	push   eax
c0012f9c:	52                   	push   edx
c0012f9d:	53                   	push   ebx
c0012f9e:	e8 33 b7 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fa3:	83 c4 20             	add    esp,0x20
c0012fa6:	09 f0                	or     eax,esi
c0012fa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012faf:	83 ec 0c             	sub    esp,0xc
c0012fb2:	50                   	push   eax
c0012fb3:	e8 31 b1 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fc3:	89 14 c5 64 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc19c],edx
c0012fca:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012fce:	e9 ed fe ff ff       	jmp    c0012ec0 <loadACPITables(unsigned char*)+0x10d>
c0012fd3:	90                   	nop
c0012fd4:	83 c4 44             	add    esp,0x44
c0012fd7:	5b                   	pop    ebx
c0012fd8:	5e                   	pop    esi
c0012fd9:	c3                   	ret    

c0012fda <findRSDT(unsigned char*)>:
c0012fda:	56                   	push   esi
c0012fdb:	53                   	push   ebx
c0012fdc:	83 ec 44             	sub    esp,0x44
c0012fdf:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0012fe4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012fea:	83 e0 04             	and    eax,0x4
c0012fed:	84 c0                	test   al,al
c0012fef:	75 0a                	jne    c0012ffb <findRSDT(unsigned char*)+0x21>
c0012ff1:	b8 00 00 00 00       	mov    eax,0x0
c0012ff6:	e9 f7 00 00 00       	jmp    c00130f2 <findRSDT(unsigned char*)+0x118>
c0012ffb:	83 ec 04             	sub    esp,0x4
c0012ffe:	6a 24                	push   0x24
c0013000:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013004:	8d 44 24 18          	lea    eax,[esp+0x18]
c0013008:	50                   	push   eax
c0013009:	e8 c4 d5 fe ff       	call   c00005d2 <memcpy>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013015:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013019:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013029:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001302d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013031:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013035:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013039:	25 ff 0f 00 00       	and    eax,0xfff
c001303e:	89 c6                	mov    esi,eax
c0013040:	e8 fe ae ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c0013045:	89 c3                	mov    ebx,eax
c0013047:	83 ec 0c             	sub    esp,0xc
c001304a:	6a 02                	push   0x2
c001304c:	e8 62 ad ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013058:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	6a 01                	push   0x1
c0013063:	6a 02                	push   0x2
c0013065:	50                   	push   eax
c0013066:	52                   	push   edx
c0013067:	53                   	push   ebx
c0013068:	e8 69 b6 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001306d:	83 c4 20             	add    esp,0x20
c0013070:	09 f0                	or     eax,esi
c0013072:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001307a:	25 ff 0f 00 00       	and    eax,0xfff
c001307f:	89 c6                	mov    esi,eax
c0013081:	e8 bd ae ff ff       	call   c000df43 <Virt::getAKernelVAS()>
c0013086:	89 c3                	mov    ebx,eax
c0013088:	83 ec 0c             	sub    esp,0xc
c001308b:	6a 02                	push   0x2
c001308d:	e8 21 ad ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c0013092:	83 c4 10             	add    esp,0x10
c0013095:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013099:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001309f:	83 ec 0c             	sub    esp,0xc
c00130a2:	6a 01                	push   0x1
c00130a4:	6a 02                	push   0x2
c00130a6:	50                   	push   eax
c00130a7:	52                   	push   edx
c00130a8:	53                   	push   ebx
c00130a9:	e8 28 b6 ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130ae:	83 c4 20             	add    esp,0x20
c00130b1:	09 f0                	or     eax,esi
c00130b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00130b7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00130bc:	75 11                	jne    c00130cf <findRSDT(unsigned char*)+0xf5>
c00130be:	c6 05 60 40 02 c0 00 	mov    BYTE PTR ds:0xc0024060,0x0
c00130c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130cd:	eb 1f                	jmp    c00130ee <findRSDT(unsigned char*)+0x114>
c00130cf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00130d4:	75 11                	jne    c00130e7 <findRSDT(unsigned char*)+0x10d>
c00130d6:	c6 05 60 40 02 c0 01 	mov    BYTE PTR ds:0xc0024060,0x1
c00130dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00130e1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130e5:	eb 07                	jmp    c00130ee <findRSDT(unsigned char*)+0x114>
c00130e7:	b8 00 00 00 00       	mov    eax,0x0
c00130ec:	eb 04                	jmp    c00130f2 <findRSDT(unsigned char*)+0x118>
c00130ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00130f2:	83 c4 44             	add    esp,0x44
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	c3                   	ret    

c00130f8 <findDataTable(unsigned char*, char*)>:
c00130f8:	83 ec 1c             	sub    esp,0x1c
c00130fb:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0013100:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013106:	83 e0 04             	and    eax,0x4
c0013109:	84 c0                	test   al,al
c001310b:	75 07                	jne    c0013114 <findDataTable(unsigned char*, char*)+0x1c>
c001310d:	b8 00 00 00 00       	mov    eax,0x0
c0013112:	eb 7c                	jmp    c0013190 <findDataTable(unsigned char*, char*)+0x98>
c0013114:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001311c:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c0013121:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013125:	7d 3a                	jge    c0013161 <findDataTable(unsigned char*, char*)+0x69>
c0013127:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001312b:	c1 e0 03             	shl    eax,0x3
c001312e:	05 60 3e 02 c0       	add    eax,0xc0023e60
c0013133:	83 ec 04             	sub    esp,0x4
c0013136:	6a 04                	push   0x4
c0013138:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001313c:	50                   	push   eax
c001313d:	e8 2d d4 fe ff       	call   c000056f <memcmp>
c0013142:	83 c4 10             	add    esp,0x10
c0013145:	85 c0                	test   eax,eax
c0013147:	0f 94 c0             	sete   al
c001314a:	84 c0                	test   al,al
c001314c:	74 0d                	je     c001315b <findDataTable(unsigned char*, char*)+0x63>
c001314e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013152:	8b 04 c5 64 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc19c]
c0013159:	eb 35                	jmp    c0013190 <findDataTable(unsigned char*, char*)+0x98>
c001315b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001315f:	eb bb                	jmp    c001311c <findDataTable(unsigned char*, char*)+0x24>
c0013161:	a0 60 40 02 c0       	mov    al,ds:0xc0024060
c0013166:	84 c0                	test   al,al
c0013168:	74 07                	je     c0013171 <findDataTable(unsigned char*, char*)+0x79>
c001316a:	b8 58 00 00 00       	mov    eax,0x58
c001316f:	eb 05                	jmp    c0013176 <findDataTable(unsigned char*, char*)+0x7e>
c0013171:	b8 52 00 00 00       	mov    eax,0x52
c0013176:	83 ec 04             	sub    esp,0x4
c0013179:	50                   	push   eax
c001317a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001317e:	68 24 15 02 c0       	push   0xc0021524
c0013183:	e8 ab be ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	b8 00 00 00 00       	mov    eax,0x0
c0013190:	83 c4 1c             	add    esp,0x1c
c0013193:	c3                   	ret    

c0013194 <scanMADT()>:
c0013194:	83 ec 2c             	sub    esp,0x2c
c0013197:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001319c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00131a2:	83 e0 04             	and    eax,0x4
c00131a5:	84 c0                	test   al,al
c00131a7:	0f 84 73 03 00 00    	je     c0013520 <scanMADT()+0x38c>
c00131ad:	e8 77 fb ff ff       	call   c0012d29 <findRSDP()>
c00131b2:	a3 6c 40 02 c0       	mov    ds:0xc002406c,eax
c00131b7:	a1 6c 40 02 c0       	mov    eax,ds:0xc002406c
c00131bc:	85 c0                	test   eax,eax
c00131be:	75 19                	jne    c00131d9 <scanMADT()+0x45>
c00131c0:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c00131c5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131cb:	83 e2 fb             	and    edx,0xfffffffb
c00131ce:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131d4:	e9 4b 03 00 00       	jmp    c0013524 <scanMADT()+0x390>
c00131d9:	a1 6c 40 02 c0       	mov    eax,ds:0xc002406c
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	50                   	push   eax
c00131e2:	e8 f3 fd ff ff       	call   c0012fda <findRSDT(unsigned char*)>
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	a3 68 40 02 c0       	mov    ds:0xc0024068,eax
c00131ef:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c00131f4:	85 c0                	test   eax,eax
c00131f6:	75 19                	jne    c0013211 <scanMADT()+0x7d>
c00131f8:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c00131fd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013203:	83 e2 fb             	and    edx,0xfffffffb
c0013206:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001320c:	e9 13 03 00 00       	jmp    c0013524 <scanMADT()+0x390>
c0013211:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	50                   	push   eax
c001321a:	e8 94 fb ff ff       	call   c0012db3 <loadACPITables(unsigned char*)>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c0013227:	83 ec 08             	sub    esp,0x8
c001322a:	68 42 14 02 c0       	push   0xc0021442
c001322f:	50                   	push   eax
c0013230:	e8 c3 fe ff ff       	call   c00130f8 <findDataTable(unsigned char*, char*)>
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001323c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013241:	75 19                	jne    c001325c <scanMADT()+0xc8>
c0013243:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0013248:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001324e:	83 e2 fe             	and    edx,0xfffffffe
c0013251:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013257:	e9 c8 02 00 00       	jmp    c0013524 <scanMADT()+0x390>
c001325c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013264:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001326b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001326f:	0f 87 af 02 00 00    	ja     c0013524 <scanMADT()+0x390>
c0013275:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001327d:	0f 87 a1 02 00 00    	ja     c0013524 <scanMADT()+0x390>
c0013283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013287:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001328b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001328f:	8d 50 01             	lea    edx,[eax+0x1]
c0013292:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013296:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001329a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001329e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00132a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a6:	8d 50 01             	lea    edx,[eax+0x1]
c00132a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00132b5:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00132b9:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00132be:	0f 86 5f 02 00 00    	jbe    c0013523 <scanMADT()+0x38f>
c00132c4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00132c9:	75 57                	jne    c0013322 <scanMADT()+0x18e>
c00132cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132cf:	8d 50 01             	lea    edx,[eax+0x1]
c00132d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132d6:	8a 15 a0 41 02 c0    	mov    dl,BYTE PTR ds:0xc00241a0
c00132dc:	0f b6 d2             	movzx  edx,dl
c00132df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132e3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132e7:	88 82 e0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe20],al
c00132ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f1:	8d 50 01             	lea    edx,[eax+0x1]
c00132f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132f8:	8a 15 a0 41 02 c0    	mov    dl,BYTE PTR ds:0xc00241a0
c00132fe:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013301:	88 0d a0 41 02 c0    	mov    BYTE PTR ds:0xc00241a0,cl
c0013307:	0f b6 d2             	movzx  edx,dl
c001330a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001330e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013312:	88 82 c0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe40],al
c0013318:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001331d:	e9 ea 01 00 00       	jmp    c001350c <scanMADT()+0x378>
c0013322:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013327:	0f 85 14 01 00 00    	jne    c0013441 <scanMADT()+0x2ad>
c001332d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013331:	8d 50 01             	lea    edx,[eax+0x1]
c0013334:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013338:	8a 15 70 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024070
c001333e:	0f b6 d2             	movzx  edx,dl
c0013341:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013345:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013349:	88 82 80 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbf80],al
c001334f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013353:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001335b:	01 d0                	add    eax,edx
c001335d:	83 c0 2c             	add    eax,0x2c
c0013360:	8a 00                	mov    al,BYTE PTR [eax]
c0013362:	0f b6 d0             	movzx  edx,al
c0013365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013369:	8d 48 01             	lea    ecx,[eax+0x1]
c001336c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013370:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013374:	0f b6 c0             	movzx  eax,al
c0013377:	c1 e0 08             	shl    eax,0x8
c001337a:	89 d1                	mov    ecx,edx
c001337c:	09 c1                	or     ecx,eax
c001337e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013382:	8d 50 02             	lea    edx,[eax+0x2]
c0013385:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013389:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001338d:	0f b6 c0             	movzx  eax,al
c0013390:	c1 e0 10             	shl    eax,0x10
c0013393:	09 c1                	or     ecx,eax
c0013395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013399:	8d 50 03             	lea    edx,[eax+0x3]
c001339c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133a0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133a4:	0f b6 c0             	movzx  eax,al
c00133a7:	c1 e0 18             	shl    eax,0x18
c00133aa:	09 c1                	or     ecx,eax
c00133ac:	89 ca                	mov    edx,ecx
c00133ae:	a0 70 40 02 c0       	mov    al,ds:0xc0024070
c00133b3:	0f b6 c0             	movzx  eax,al
c00133b6:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c00133bd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ca:	01 d0                	add    eax,edx
c00133cc:	83 c0 2c             	add    eax,0x2c
c00133cf:	8a 00                	mov    al,BYTE PTR [eax]
c00133d1:	0f b6 d0             	movzx  edx,al
c00133d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d8:	8d 48 01             	lea    ecx,[eax+0x1]
c00133db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133df:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00133e3:	0f b6 c0             	movzx  eax,al
c00133e6:	c1 e0 08             	shl    eax,0x8
c00133e9:	89 d1                	mov    ecx,edx
c00133eb:	09 c1                	or     ecx,eax
c00133ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f1:	8d 50 02             	lea    edx,[eax+0x2]
c00133f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133f8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133fc:	0f b6 c0             	movzx  eax,al
c00133ff:	c1 e0 10             	shl    eax,0x10
c0013402:	09 c1                	or     ecx,eax
c0013404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013408:	8d 50 03             	lea    edx,[eax+0x3]
c001340b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001340f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013413:	0f b6 c0             	movzx  eax,al
c0013416:	c1 e0 18             	shl    eax,0x18
c0013419:	09 c1                	or     ecx,eax
c001341b:	89 ca                	mov    edx,ecx
c001341d:	a0 70 40 02 c0       	mov    al,ds:0xc0024070
c0013422:	0f b6 c0             	movzx  eax,al
c0013425:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c001342c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013431:	a0 70 40 02 c0       	mov    al,ds:0xc0024070
c0013436:	40                   	inc    eax
c0013437:	a2 70 40 02 c0       	mov    ds:0xc0024070,al
c001343c:	e9 cb 00 00 00       	jmp    c001350c <scanMADT()+0x378>
c0013441:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013446:	0f 85 a6 00 00 00    	jne    c00134f2 <scanMADT()+0x35e>
c001344c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013450:	8d 50 01             	lea    edx,[eax+0x1]
c0013453:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013457:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001345b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001345f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013467:	8d 50 01             	lea    edx,[eax+0x1]
c001346a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001346e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013472:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013476:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001347a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	01 d0                	add    eax,edx
c0013484:	83 c0 2c             	add    eax,0x2c
c0013487:	8a 00                	mov    al,BYTE PTR [eax]
c0013489:	0f b6 d0             	movzx  edx,al
c001348c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013490:	8d 48 01             	lea    ecx,[eax+0x1]
c0013493:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013497:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001349b:	0f b6 c0             	movzx  eax,al
c001349e:	c1 e0 08             	shl    eax,0x8
c00134a1:	89 d1                	mov    ecx,edx
c00134a3:	09 c1                	or     ecx,eax
c00134a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a9:	8d 50 02             	lea    edx,[eax+0x2]
c00134ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134b0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134b4:	0f b6 c0             	movzx  eax,al
c00134b7:	c1 e0 10             	shl    eax,0x10
c00134ba:	09 c1                	or     ecx,eax
c00134bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c0:	8d 50 03             	lea    edx,[eax+0x3]
c00134c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134cb:	0f b6 c0             	movzx  eax,al
c00134ce:	c1 e0 18             	shl    eax,0x18
c00134d1:	09 c8                	or     eax,ecx
c00134d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134d7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134dc:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00134e1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00134e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134ea:	88 90 20 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd0e0],dl
c00134f0:	eb 1a                	jmp    c001350c <scanMADT()+0x378>
c00134f2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00134f7:	75 07                	jne    c0013500 <scanMADT()+0x36c>
c00134f9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134fe:	eb 0c                	jmp    c001350c <scanMADT()+0x378>
c0013500:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013505:	75 05                	jne    c001350c <scanMADT()+0x378>
c0013507:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001350c:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013515:	01 d0                	add    eax,edx
c0013517:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001351b:	e9 44 fd ff ff       	jmp    c0013264 <scanMADT()+0xd0>
c0013520:	90                   	nop
c0013521:	eb 01                	jmp    c0013524 <scanMADT()+0x390>
c0013523:	90                   	nop
c0013524:	83 c4 2c             	add    esp,0x2c
c0013527:	c3                   	ret    

c0013528 <ACPI::ACPI()>:
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352f:	83 ec 08             	sub    esp,0x8
c0013532:	68 47 14 02 c0       	push   0xc0021447
c0013537:	50                   	push   eax
c0013538:	e8 f1 d0 ff ff       	call   c001062e <Device::Device(char const*)>
c001353d:	83 c4 10             	add    esp,0x10
c0013540:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c0013545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013549:	89 10                	mov    DWORD PTR [eax],edx
c001354b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013568:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013576:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001357d:	e8 12 fc ff ff       	call   c0013194 <scanMADT()>
c0013582:	90                   	nop
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013588:	83 ec 2c             	sub    esp,0x2c
c001358b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001358f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013593:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013597:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001359b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00135a0:	88 d0                	mov    al,dl
c00135a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00135a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00135ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00135b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135b7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00135bd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135c1:	0f 8d 97 00 00 00    	jge    c001365e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00135c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135cf:	83 c2 2a             	add    edx,0x2a
c00135d2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00135d6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00135db:	75 78                	jne    c0013655 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135e5:	83 c2 2a             	add    edx,0x2a
c00135e8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00135ec:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00135f0:	75 63                	jne    c0013655 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00135f7:	74 3a                	je     c0013633 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00135f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013601:	83 c2 2a             	add    edx,0x2a
c0013604:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001360c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001360f:	39 c2                	cmp    edx,eax
c0013611:	74 10                	je     c0013623 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013613:	83 ec 0c             	sub    esp,0xc
c0013616:	68 54 15 02 c0       	push   0xc0021554
c001361b:	e8 a8 16 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0013620:	83 c4 10             	add    esp,0x10
c0013623:	83 ec 0c             	sub    esp,0xc
c0013626:	68 4c 14 02 c0       	push   0xc002144c
c001362b:	e8 98 16 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001363b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001363f:	83 c2 2a             	add    edx,0x2a
c0013642:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013646:	8b 02                	mov    eax,DWORD PTR [edx]
c0013648:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001364b:	89 01                	mov    DWORD PTR [ecx],eax
c001364d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013650:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013655:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013659:	e9 55 ff ff ff       	jmp    c00135b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001365e:	90                   	nop
c001365f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013663:	83 c4 2c             	add    esp,0x2c
c0013666:	c2 04 00             	ret    0x4
c0013669:	90                   	nop

c001366a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	83 ec 14             	sub    esp,0x14
c001366f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013673:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013677:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001367b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013680:	88 c8                	mov    al,cl
c0013682:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013686:	88 d0                	mov    al,dl
c0013688:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001368c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013690:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001369a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00136a0:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00136a5:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00136aa:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136af:	83 ec 04             	sub    esp,0x4
c00136b2:	56                   	push   esi
c00136b3:	53                   	push   ebx
c00136b4:	51                   	push   ecx
c00136b5:	52                   	push   edx
c00136b6:	50                   	push   eax
c00136b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136bb:	68 84 15 02 c0       	push   0xc0021584
c00136c0:	e8 6e b9 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00136c5:	83 c4 20             	add    esp,0x20
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136d6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136d9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00136dd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00136e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136e5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136ef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00136f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136f6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00136fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ff:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013705:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013709:	8d 48 01             	lea    ecx,[eax+0x1]
c001370c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013710:	83 c2 2a             	add    edx,0x2a
c0013713:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001371b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013725:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013728:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001372c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013734:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001373a:	8d 50 01             	lea    edx,[eax+0x1]
c001373d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013741:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001374b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013751:	3d 00 08 00 00       	cmp    eax,0x800
c0013756:	75 10                	jne    c0013768 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	68 5b 14 02 c0       	push   0xc002145b
c0013760:	e8 63 15 00 00       	call   c0014cc8 <Krnl::panic(char const*)>
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	90                   	nop
c0013769:	83 c4 14             	add    esp,0x14
c001376c:	5b                   	pop    ebx
c001376d:	5e                   	pop    esi
c001376e:	c3                   	ret    
c001376f:	90                   	nop

c0013770 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013770:	b8 00 00 00 00       	mov    eax,0x0
c0013775:	c3                   	ret    

c0013776 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013776:	83 ec 1c             	sub    esp,0x1c
c0013779:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001377d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013780:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013784:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0013789:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001378e:	83 ec 08             	sub    esp,0x8
c0013791:	52                   	push   edx
c0013792:	50                   	push   eax
c0013793:	e8 ac 7a ff ff       	call   c000b244 <Computer::readCMOS(unsigned char)>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001379f:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c00137a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00137a9:	83 ec 04             	sub    esp,0x4
c00137ac:	6a 01                	push   0x1
c00137ae:	52                   	push   edx
c00137af:	50                   	push   eax
c00137b0:	e8 9d 7b ff ff       	call   c000b352 <Computer::writeCMOS(unsigned char, unsigned char)>
c00137b5:	83 c4 10             	add    esp,0x10
c00137b8:	90                   	nop
c00137b9:	83 c4 1c             	add    esp,0x1c
c00137bc:	c3                   	ret    
c00137bd:	90                   	nop

c00137be <ACPI::open(int, int, void*)>:
c00137be:	53                   	push   ebx
c00137bf:	83 ec 18             	sub    esp,0x18
c00137c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137c6:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00137cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137d1:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00137d7:	84 c0                	test   al,al
c00137d9:	74 60                	je     c001383b <ACPI::open(int, int, void*)+0x7d>
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	68 58 01 00 00       	push   0x158
c00137e3:	e8 5c b7 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	89 c3                	mov    ebx,eax
c00137ed:	83 ec 0c             	sub    esp,0xc
c00137f0:	53                   	push   ebx
c00137f1:	e8 fe 7c 00 00       	call   c001b4f4 <PCI::PCI()>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00137fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013801:	83 ec 08             	sub    esp,0x8
c0013804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013808:	50                   	push   eax
c0013809:	e8 30 cc ff ff       	call   c001043e <Device::addChild(Device*)>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013815:	8b 00                	mov    eax,DWORD PTR [eax]
c0013817:	83 c0 08             	add    eax,0x8
c001381a:	8b 00                	mov    eax,DWORD PTR [eax]
c001381c:	6a 00                	push   0x0
c001381e:	6a 00                	push   0x0
c0013820:	6a 00                	push   0x0
c0013822:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013826:	ff d0                	call   eax
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	68 78 14 02 c0       	push   0xc0021478
c0013833:	e8 fb b7 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0013838:	83 c4 10             	add    esp,0x10
c001383b:	83 ec 0c             	sub    esp,0xc
c001383e:	68 83 14 02 c0       	push   0xc0021483
c0013843:	e8 9a 33 00 00       	call   c0016be2 <Thr::loadKernelSymbolTable(char const*)>
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c0013851:	83 ec 08             	sub    esp,0x8
c0013854:	6a 01                	push   0x1
c0013856:	68 a1 14 02 c0       	push   0xc00214a1
c001385b:	e8 47 3e 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	83 ec 08             	sub    esp,0x8
c0013866:	53                   	push   ebx
c0013867:	50                   	push   eax
c0013868:	e8 8d 3f 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c001386d:	83 c4 10             	add    esp,0x10
c0013870:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c0013876:	83 ec 08             	sub    esp,0x8
c0013879:	6a 01                	push   0x1
c001387b:	68 be 14 02 c0       	push   0xc00214be
c0013880:	e8 22 3e 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c0013885:	83 c4 10             	add    esp,0x10
c0013888:	83 ec 08             	sub    esp,0x8
c001388b:	53                   	push   ebx
c001388c:	50                   	push   eax
c001388d:	e8 68 3f 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001389a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138a0:	83 e0 04             	and    eax,0x4
c00138a3:	84 c0                	test   al,al
c00138a5:	0f 84 cf 00 00 00    	je     c001397a <ACPI::open(int, int, void*)+0x1bc>
c00138ab:	83 ec 0c             	sub    esp,0xc
c00138ae:	68 14 01 00 00       	push   0x114
c00138b3:	e8 8c b6 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00138b8:	83 c4 10             	add    esp,0x10
c00138bb:	89 c3                	mov    ebx,eax
c00138bd:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c00138c2:	83 ec 04             	sub    esp,0x4
c00138c5:	50                   	push   eax
c00138c6:	68 db 14 02 c0       	push   0xc00214db
c00138cb:	53                   	push   ebx
c00138cc:	e8 91 bc ff ff       	call   c000f562 <File::File(char const*, Process*)>
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00138d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138dd:	74 17                	je     c00138f6 <ACPI::open(int, int, void*)+0x138>
c00138df:	83 ec 0c             	sub    esp,0xc
c00138e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138e6:	e8 49 bf ff ff       	call   c000f834 <File::exists()>
c00138eb:	83 c4 10             	add    esp,0x10
c00138ee:	84 c0                	test   al,al
c00138f0:	74 04                	je     c00138f6 <ACPI::open(int, int, void*)+0x138>
c00138f2:	b0 01                	mov    al,0x1
c00138f4:	eb 02                	jmp    c00138f8 <ACPI::open(int, int, void*)+0x13a>
c00138f6:	b0 00                	mov    al,0x0
c00138f8:	84 c0                	test   al,al
c00138fa:	74 25                	je     c0013921 <ACPI::open(int, int, void*)+0x163>
c00138fc:	8b 1d c8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c8
c0013902:	83 ec 08             	sub    esp,0x8
c0013905:	6a 01                	push   0x1
c0013907:	68 db 14 02 c0       	push   0xc00214db
c001390c:	e8 96 3d 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c0013911:	83 c4 10             	add    esp,0x10
c0013914:	83 ec 08             	sub    esp,0x8
c0013917:	53                   	push   ebx
c0013918:	50                   	push   eax
c0013919:	e8 dc 3e 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c001391e:	83 c4 10             	add    esp,0x10
c0013921:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013926:	74 1e                	je     c0013946 <ACPI::open(int, int, void*)+0x188>
c0013928:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001392d:	74 17                	je     c0013946 <ACPI::open(int, int, void*)+0x188>
c001392f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013933:	8b 00                	mov    eax,DWORD PTR [eax]
c0013935:	83 c0 08             	add    eax,0x8
c0013938:	8b 00                	mov    eax,DWORD PTR [eax]
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013941:	ff d0                	call   eax
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c001394b:	83 ec 08             	sub    esp,0x8
c001394e:	68 f8 14 02 c0       	push   0xc00214f8
c0013953:	50                   	push   eax
c0013954:	e8 9f f7 ff ff       	call   c00130f8 <findDataTable(unsigned char*, char*)>
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013960:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013965:	74 13                	je     c001397a <ACPI::open(int, int, void*)+0x1bc>
c0013967:	83 ec 08             	sub    esp,0x8
c001396a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001396e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013972:	e8 ff fd ff ff       	call   c0013776 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	b8 00 00 00 00       	mov    eax,0x0
c001397f:	83 c4 18             	add    esp,0x18
c0013982:	5b                   	pop    ebx
c0013983:	c3                   	ret    

c0013984 <ACPI::sleep()>:
c0013984:	83 ec 0c             	sub    esp,0xc
c0013987:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c001398c:	85 c0                	test   eax,eax
c001398e:	74 07                	je     c0013997 <ACPI::sleep()+0x13>
c0013990:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0013995:	ff d0                	call   eax
c0013997:	90                   	nop
c0013998:	83 c4 0c             	add    esp,0xc
c001399b:	c3                   	ret    

c001399c <CPU::close(int, int, void*)>:
c001399c:	31 c0                	xor    eax,eax
c001399e:	c3                   	ret    

c001399f <lookupAMDCPUName(unsigned char, unsigned char)>:
c001399f:	55                   	push   ebp
c00139a0:	57                   	push   edi
c00139a1:	56                   	push   esi
c00139a2:	53                   	push   ebx
c00139a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00139a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139ab:	89 ce                	mov    esi,ecx
c00139ad:	89 d5                	mov    ebp,edx
c00139af:	80 f9 04             	cmp    cl,0x4
c00139b2:	75 28                	jne    c00139dc <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00139b4:	8d 42 f9             	lea    eax,[edx-0x7]
c00139b7:	3c 03                	cmp    al,0x3
c00139b9:	0f 86 63 01 00 00    	jbe    c0013b22 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00139bf:	80 fa 03             	cmp    dl,0x3
c00139c2:	0f 84 5a 01 00 00    	je     c0013b22 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00139c8:	8d 7a f2             	lea    edi,[edx-0xe]
c00139cb:	b8 f0 30 02 c0       	mov    eax,0xc00230f0
c00139d0:	89 fb                	mov    ebx,edi
c00139d2:	80 fb 01             	cmp    bl,0x1
c00139d5:	77 4e                	ja     c0013a25 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00139d7:	e9 52 01 00 00       	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139dc:	80 f9 05             	cmp    cl,0x5
c00139df:	75 4d                	jne    c0013a2e <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00139e1:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00139e6:	80 fa 03             	cmp    dl,0x3
c00139e9:	0f 86 3f 01 00 00    	jbe    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139ef:	8d 7a fa             	lea    edi,[edx-0x6]
c00139f2:	b8 10 31 02 c0       	mov    eax,0xc0023110
c00139f7:	89 fb                	mov    ebx,edi
c00139f9:	80 fb 01             	cmp    bl,0x1
c00139fc:	0f 86 2c 01 00 00    	jbe    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a02:	b8 20 31 02 c0       	mov    eax,0xc0023120
c0013a07:	80 fa 08             	cmp    dl,0x8
c0013a0a:	0f 84 1e 01 00 00    	je     c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a10:	89 d7                	mov    edi,edx
c0013a12:	b8 30 31 02 c0       	mov    eax,0xc0023130
c0013a17:	83 e7 fb             	and    edi,0xfffffffb
c0013a1a:	89 fb                	mov    ebx,edi
c0013a1c:	80 fb 09             	cmp    bl,0x9
c0013a1f:	0f 84 09 01 00 00    	je     c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a25:	31 c0                	xor    eax,eax
c0013a27:	89 eb                	mov    ebx,ebp
c0013a29:	0f b6 fb             	movzx  edi,bl
c0013a2c:	eb 30                	jmp    c0013a5e <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0013a2e:	31 c0                	xor    eax,eax
c0013a30:	80 f9 06             	cmp    cl,0x6
c0013a33:	75 f2                	jne    c0013a27 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a35:	80 fa 0a             	cmp    dl,0xa
c0013a38:	77 ed                	ja     c0013a27 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a3a:	bf de 05 00 00       	mov    edi,0x5de
c0013a3f:	0f a3 d7             	bt     edi,edx
c0013a42:	73 e3                	jae    c0013a27 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a44:	b8 40 31 02 c0       	mov    eax,0xc0023140
c0013a49:	e9 e0 00 00 00       	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a4e:	39 c7                	cmp    edi,eax
c0013a50:	0f 84 d3 00 00 00    	je     c0013b29 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a56:	40                   	inc    eax
c0013a57:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a5c:	74 09                	je     c0013a67 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a5e:	89 f3                	mov    ebx,esi
c0013a60:	80 fb 0f             	cmp    bl,0xf
c0013a63:	75 f1                	jne    c0013a56 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a65:	eb e7                	jmp    c0013a4e <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a67:	80 f9 10             	cmp    cl,0x10
c0013a6a:	75 14                	jne    c0013a80 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a6c:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a6f:	83 e0 fb             	and    eax,0xfffffffb
c0013a72:	3c 02                	cmp    al,0x2
c0013a74:	76 34                	jbe    c0013aaa <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a76:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013a7b:	80 fa 02             	cmp    dl,0x2
c0013a7e:	eb 24                	jmp    c0013aa4 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a80:	80 f9 11             	cmp    cl,0x11
c0013a83:	75 13                	jne    c0013a98 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a85:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013a8a:	80 fa 03             	cmp    dl,0x3
c0013a8d:	0f 85 9b 00 00 00    	jne    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a93:	e9 91 00 00 00       	jmp    c0013b29 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a98:	80 f9 12             	cmp    cl,0x12
c0013a9b:	75 14                	jne    c0013ab1 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a9d:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013aa2:	fe ca                	dec    dl
c0013aa4:	0f 85 84 00 00 00    	jne    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aaa:	b8 60 31 02 c0       	mov    eax,0xc0023160
c0013aaf:	eb 7d                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab1:	80 f9 14             	cmp    cl,0x14
c0013ab4:	75 12                	jne    c0013ac8 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013ab6:	4a                   	dec    edx
c0013ab7:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013abc:	80 fa 01             	cmp    dl,0x1
c0013abf:	77 6d                	ja     c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac1:	b8 70 31 02 c0       	mov    eax,0xc0023170
c0013ac6:	eb 66                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac8:	80 f9 15             	cmp    cl,0x15
c0013acb:	75 31                	jne    c0013afe <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013acd:	b8 80 31 02 c0       	mov    eax,0xc0023180
c0013ad2:	80 fa 01             	cmp    dl,0x1
c0013ad5:	74 57                	je     c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad7:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013adc:	80 fa 13             	cmp    dl,0x13
c0013adf:	76 0c                	jbe    c0013aed <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013ae1:	80 fa 30             	cmp    dl,0x30
c0013ae4:	75 48                	jne    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ae6:	b8 a0 31 02 c0       	mov    eax,0xc00231a0
c0013aeb:	eb 41                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aed:	b9 04 00 09 00       	mov    ecx,0x90004
c0013af2:	0f a3 d1             	bt     ecx,edx
c0013af5:	73 37                	jae    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013af7:	b8 90 31 02 c0       	mov    eax,0xc0023190
c0013afc:	eb 30                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013afe:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013b03:	80 f9 16             	cmp    cl,0x16
c0013b06:	75 26                	jne    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b08:	b8 b0 31 02 c0       	mov    eax,0xc00231b0
c0013b0d:	84 d2                	test   dl,dl
c0013b0f:	74 1d                	je     c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b11:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013b16:	80 fa 30             	cmp    dl,0x30
c0013b19:	75 13                	jne    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b1b:	b8 c0 31 02 c0       	mov    eax,0xc00231c0
c0013b20:	eb 0c                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b22:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c0013b27:	eb 05                	jmp    c0013b2e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b29:	b8 50 31 02 c0       	mov    eax,0xc0023150
c0013b2e:	5b                   	pop    ebx
c0013b2f:	5e                   	pop    esi
c0013b30:	5f                   	pop    edi
c0013b31:	5d                   	pop    ebp
c0013b32:	c3                   	ret    

c0013b33 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013b33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b3b:	80 f9 04             	cmp    cl,0x4
c0013b3e:	75 6b                	jne    c0013bab <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013b40:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013b45:	80 fa 01             	cmp    dl,0x1
c0013b48:	0f 86 92 02 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b4e:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013b53:	80 fa 02             	cmp    dl,0x2
c0013b56:	0f 84 84 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b5c:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013b61:	80 fa 03             	cmp    dl,0x3
c0013b64:	0f 84 76 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b6a:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013b6f:	80 fa 04             	cmp    dl,0x4
c0013b72:	0f 84 68 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b78:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013b7d:	80 fa 05             	cmp    dl,0x5
c0013b80:	0f 84 5a 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b86:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013b8b:	80 fa 07             	cmp    dl,0x7
c0013b8e:	0f 84 4c 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b94:	83 ea 08             	sub    edx,0x8
c0013b97:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013b9c:	80 fa 01             	cmp    dl,0x1
c0013b9f:	0f 87 3b 02 00 00    	ja     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ba5:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013baa:	c3                   	ret    
c0013bab:	80 f9 05             	cmp    cl,0x5
c0013bae:	75 45                	jne    c0013bf5 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013bb0:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013bb3:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013bb8:	80 f9 02             	cmp    cl,0x2
c0013bbb:	0f 86 1f 02 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bc1:	80 fa 04             	cmp    dl,0x4
c0013bc4:	0f 84 f3 01 00 00    	je     c0013dbd <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013bca:	80 fa 07             	cmp    dl,0x7
c0013bcd:	0f 84 0d 02 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bd3:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013bd8:	80 fa 08             	cmp    dl,0x8
c0013bdb:	0f 84 ff 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be1:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013be6:	80 fa 09             	cmp    dl,0x9
c0013be9:	0f 85 f1 01 00 00    	jne    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bef:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013bf4:	c3                   	ret    
c0013bf5:	80 f9 06             	cmp    cl,0x6
c0013bf8:	0f 85 85 01 00 00    	jne    c0013d83 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013bfe:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013c03:	80 fa 01             	cmp    dl,0x1
c0013c06:	0f 84 d4 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c0c:	8d 42 fb             	lea    eax,[edx-0x5]
c0013c0f:	3c 01                	cmp    al,0x1
c0013c11:	0f 86 ac 01 00 00    	jbe    c0013dc3 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013c17:	80 fa 03             	cmp    dl,0x3
c0013c1a:	0f 84 a3 01 00 00    	je     c0013dc3 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013c20:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013c23:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013c28:	80 f9 01             	cmp    cl,0x1
c0013c2b:	0f 86 af 01 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c31:	80 fa 09             	cmp    dl,0x9
c0013c34:	0f 84 8f 01 00 00    	je     c0013dc9 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013c3a:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013c3d:	80 f9 01             	cmp    cl,0x1
c0013c40:	0f 86 9a 01 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c46:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013c4b:	80 fa 0d             	cmp    dl,0xd
c0013c4e:	0f 84 8c 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c54:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013c59:	80 fa 0e             	cmp    dl,0xe
c0013c5c:	0f 84 7e 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c62:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013c67:	80 fa 0f             	cmp    dl,0xf
c0013c6a:	0f 84 70 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c70:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013c75:	80 fa 15             	cmp    dl,0x15
c0013c78:	0f 84 62 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c7e:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c81:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013c86:	80 f9 01             	cmp    cl,0x1
c0013c89:	0f 86 51 01 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c8f:	80 fa 1a             	cmp    dl,0x1a
c0013c92:	0f 84 37 01 00 00    	je     c0013dcf <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c98:	80 fa 1c             	cmp    dl,0x1c
c0013c9b:	0f 84 34 01 00 00    	je     c0013dd5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013ca1:	80 fa 1d             	cmp    dl,0x1d
c0013ca4:	0f 84 36 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013caa:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013caf:	80 fa 25             	cmp    dl,0x25
c0013cb2:	0f 84 28 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cb8:	8d 4a da             	lea    ecx,[edx-0x26]
c0013cbb:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013cc0:	80 f9 01             	cmp    cl,0x1
c0013cc3:	0f 86 17 01 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cc9:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013cce:	80 fa 2a             	cmp    dl,0x2a
c0013cd1:	0f 84 09 01 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd7:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013cdc:	80 fa 2c             	cmp    dl,0x2c
c0013cdf:	0f 84 fb 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ce5:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013cea:	80 fa 2d             	cmp    dl,0x2d
c0013ced:	0f 84 ed 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf3:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013cf8:	80 fa 2e             	cmp    dl,0x2e
c0013cfb:	0f 84 df 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d01:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013d06:	80 fa 2f             	cmp    dl,0x2f
c0013d09:	0f 84 d1 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d0f:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013d12:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013d17:	80 f9 01             	cmp    cl,0x1
c0013d1a:	0f 86 c0 00 00 00    	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d20:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013d25:	80 fa 37             	cmp    dl,0x37
c0013d28:	0f 84 b2 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d2e:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0013d33:	80 fa 3a             	cmp    dl,0x3a
c0013d36:	0f 84 a4 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d3c:	b8 90 30 02 c0       	mov    eax,0xc0023090
c0013d41:	80 fa 3c             	cmp    dl,0x3c
c0013d44:	0f 84 96 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d4a:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c0013d4f:	80 fa 3d             	cmp    dl,0x3d
c0013d52:	0f 84 88 00 00 00    	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d58:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0013d5d:	80 fa 3e             	cmp    dl,0x3e
c0013d60:	74 7e                	je     c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d62:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d65:	3c 01                	cmp    al,0x1
c0013d67:	76 72                	jbe    c0013ddb <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d69:	80 fa 3f             	cmp    dl,0x3f
c0013d6c:	74 6d                	je     c0013ddb <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d6e:	80 fa 4a             	cmp    dl,0x4a
c0013d71:	74 0a                	je     c0013d7d <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d73:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013d78:	80 fa 4d             	cmp    dl,0x4d
c0013d7b:	75 63                	jne    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d7d:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013d82:	c3                   	ret    
c0013d83:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013d88:	80 f9 0b             	cmp    cl,0xb
c0013d8b:	75 0a                	jne    c0013d97 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d8d:	fe ca                	dec    dl
c0013d8f:	75 4f                	jne    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d91:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c0013d96:	c3                   	ret    
c0013d97:	80 f9 0f             	cmp    cl,0xf
c0013d9a:	75 44                	jne    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d9c:	b8 c0 30 02 c0       	mov    eax,0xc00230c0
c0013da1:	80 fa 02             	cmp    dl,0x2
c0013da4:	76 3a                	jbe    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013da6:	8d 42 fd             	lea    eax,[edx-0x3]
c0013da9:	3c 01                	cmp    al,0x1
c0013dab:	76 0a                	jbe    c0013db7 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013dad:	b8 69 17 02 c0       	mov    eax,0xc0021769
c0013db2:	80 fa 06             	cmp    dl,0x6
c0013db5:	75 29                	jne    c0013de0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013db7:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c0013dbc:	c3                   	ret    
c0013dbd:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013dc2:	c3                   	ret    
c0013dc3:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013dc8:	c3                   	ret    
c0013dc9:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013dce:	c3                   	ret    
c0013dcf:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013dd4:	c3                   	ret    
c0013dd5:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013dda:	c3                   	ret    
c0013ddb:	b8 90 30 02 c0       	mov    eax,0xc0023090
c0013de0:	c3                   	ret    

c0013de1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013de1:	60                   	pusha  
c0013de2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013dea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dee:	9c                   	pushf  
c0013def:	fa                   	cli    
c0013df0:	0f 09                	wbinvd 
c0013df2:	0f 30                	wrmsr  
c0013df4:	9d                   	popf   
c0013df5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013df9:	89 02                	mov    DWORD PTR [edx],eax
c0013dfb:	61                   	popa   
c0013dfc:	c3                   	ret    

c0013dfd <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013dfd:	60                   	pusha  
c0013dfe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013e02:	9c                   	pushf  
c0013e03:	fa                   	cli    
c0013e04:	0f 09                	wbinvd 
c0013e06:	31 c0                	xor    eax,eax
c0013e08:	31 d2                	xor    edx,edx
c0013e0a:	0f 32                	rdmsr  
c0013e0c:	9d                   	popf   
c0013e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e11:	89 02                	mov    DWORD PTR [edx],eax
c0013e13:	61                   	popa   
c0013e14:	c3                   	ret    

c0013e15 <AMD_K6_writeback(int, int, int)>:
c0013e15:	56                   	push   esi
c0013e16:	53                   	push   ebx
c0013e17:	83 ec 10             	sub    esp,0x10
c0013e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1e:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013e23:	75 5d                	jne    c0013e82 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e25:	83 f8 08             	cmp    eax,0x8
c0013e28:	75 09                	jne    c0013e33 <AMD_K6_writeback(int, int, int)+0x1e>
c0013e2a:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013e2f:	7e 13                	jle    c0013e44 <AMD_K6_writeback(int, int, int)+0x2f>
c0013e31:	eb 30                	jmp    c0013e63 <AMD_K6_writeback(int, int, int)+0x4e>
c0013e33:	83 f8 06             	cmp    eax,0x6
c0013e36:	7c 4a                	jl     c0013e82 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e38:	83 f8 07             	cmp    eax,0x7
c0013e3b:	7e 07                	jle    c0013e44 <AMD_K6_writeback(int, int, int)+0x2f>
c0013e3d:	83 f8 09             	cmp    eax,0x9
c0013e40:	74 21                	je     c0013e63 <AMD_K6_writeback(int, int, int)+0x4e>
c0013e42:	eb 3e                	jmp    c0013e82 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e44:	89 e6                	mov    esi,esp
c0013e46:	8b 1d 04 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023804
c0013e4c:	56                   	push   esi
c0013e4d:	c1 eb 15             	shr    ebx,0x15
c0013e50:	68 82 00 00 c0       	push   0xc0000082
c0013e55:	83 e3 7e             	and    ebx,0x7e
c0013e58:	e8 a0 ff ff ff       	call   c0013dfd <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e5d:	56                   	push   esi
c0013e5e:	6a 00                	push   0x0
c0013e60:	53                   	push   ebx
c0013e61:	eb 12                	jmp    c0013e75 <AMD_K6_writeback(int, int, int)+0x60>
c0013e63:	89 e3                	mov    ebx,esp
c0013e65:	53                   	push   ebx
c0013e66:	68 82 00 00 c0       	push   0xc0000082
c0013e6b:	e8 8d ff ff ff       	call   c0013dfd <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e70:	53                   	push   ebx
c0013e71:	6a 00                	push   0x0
c0013e73:	6a 00                	push   0x0
c0013e75:	68 82 00 00 c0       	push   0xc0000082
c0013e7a:	e8 62 ff ff ff       	call   c0013de1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e7f:	83 c4 18             	add    esp,0x18
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	5b                   	pop    ebx
c0013e86:	5e                   	pop    esi
c0013e87:	c3                   	ret    

c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e88:	55                   	push   ebp
c0013e89:	57                   	push   edi
c0013e8a:	56                   	push   esi
c0013e8b:	53                   	push   ebx
c0013e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e94:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e98:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e9c:	39 05 e0 31 02 c0    	cmp    DWORD PTR ds:0xc00231e0,eax
c0013ea2:	75 23                	jne    c0013ec7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013ea4:	a1 0c 42 02 c0       	mov    eax,ds:0xc002420c
c0013ea9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ead:	89 06                	mov    DWORD PTR [esi],eax
c0013eaf:	a1 08 42 02 c0       	mov    eax,ds:0xc0024208
c0013eb4:	89 07                	mov    DWORD PTR [edi],eax
c0013eb6:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c0013ebb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ebe:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c0013ec3:	89 02                	mov    DWORD PTR [edx],eax
c0013ec5:	eb 3f                	jmp    c0013f06 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013ec7:	31 c9                	xor    ecx,ecx
c0013ec9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ecd:	0f a2                	cpuid  
c0013ecf:	89 06                	mov    DWORD PTR [esi],eax
c0013ed1:	89 1f                	mov    DWORD PTR [edi],ebx
c0013ed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ed7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013eda:	89 10                	mov    DWORD PTR [eax],edx
c0013edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee0:	a3 e0 31 02 c0       	mov    ds:0xc00231e0,eax
c0013ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ee7:	a3 0c 42 02 c0       	mov    ds:0xc002420c,eax
c0013eec:	8b 07                	mov    eax,DWORD PTR [edi]
c0013eee:	a3 08 42 02 c0       	mov    ds:0xc0024208,eax
c0013ef3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ef6:	a3 04 42 02 c0       	mov    ds:0xc0024204,eax
c0013efb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f01:	a3 00 42 02 c0       	mov    ds:0xc0024200,eax
c0013f06:	5b                   	pop    ebx
c0013f07:	5e                   	pop    esi
c0013f08:	5f                   	pop    edi
c0013f09:	5d                   	pop    ebp
c0013f0a:	c3                   	ret    

c0013f0b <cpuidCheckEDX(unsigned int)>:
c0013f0b:	83 ec 10             	sub    esp,0x10
c0013f0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f12:	50                   	push   eax
c0013f13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f17:	50                   	push   eax
c0013f18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f1c:	50                   	push   eax
c0013f1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f21:	50                   	push   eax
c0013f22:	6a 01                	push   0x1
c0013f24:	e8 5f ff ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f2d:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013f31:	0f 95 c0             	setne  al
c0013f34:	83 c4 24             	add    esp,0x24
c0013f37:	c3                   	ret    

c0013f38 <cpuidCheckECX(unsigned int)>:
c0013f38:	83 ec 10             	sub    esp,0x10
c0013f3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f3f:	50                   	push   eax
c0013f40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f44:	50                   	push   eax
c0013f45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f49:	50                   	push   eax
c0013f4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f4e:	50                   	push   eax
c0013f4f:	6a 01                	push   0x1
c0013f51:	e8 32 ff ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f5a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f5e:	0f 95 c0             	setne  al
c0013f61:	83 c4 24             	add    esp,0x24
c0013f64:	c3                   	ret    

c0013f65 <cpuidCheckExtendedEBX(unsigned int)>:
c0013f65:	83 ec 10             	sub    esp,0x10
c0013f68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f6c:	50                   	push   eax
c0013f6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f71:	50                   	push   eax
c0013f72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f76:	50                   	push   eax
c0013f77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f7b:	50                   	push   eax
c0013f7c:	6a 07                	push   0x7
c0013f7e:	e8 05 ff ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f87:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f8b:	0f 95 c0             	setne  al
c0013f8e:	83 c4 24             	add    esp,0x24
c0013f91:	c3                   	ret    

c0013f92 <cpuidCheckExtendedECX(unsigned int)>:
c0013f92:	83 ec 10             	sub    esp,0x10
c0013f95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f99:	50                   	push   eax
c0013f9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f9e:	50                   	push   eax
c0013f9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013fa3:	50                   	push   eax
c0013fa4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013fa8:	50                   	push   eax
c0013fa9:	6a 07                	push   0x7
c0013fab:	e8 d8 fe ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013fb4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013fb8:	0f 95 c0             	setne  al
c0013fbb:	83 c4 24             	add    esp,0x24
c0013fbe:	c3                   	ret    

c0013fbf <getCPUNumber()>:
c0013fbf:	31 c0                	xor    eax,eax
c0013fc1:	c3                   	ret    

c0013fc2 <thisCPU()>:
c0013fc2:	e8 f8 ff ff ff       	call   c0013fbf <getCPUNumber()>
c0013fc7:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c0013fcd:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013fd4:	c3                   	ret    
c0013fd5:	90                   	nop

c0013fd6 <CPU::CPU()>:
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fdd:	83 ec 08             	sub    esp,0x8
c0013fe0:	68 69 17 02 c0       	push   0xc0021769
c0013fe5:	50                   	push   eax
c0013fe6:	e8 43 c6 ff ff       	call   c001062e <Device::Device(char const*)>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	ba 40 18 02 c0       	mov    edx,0xc0021840
c0013ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff7:	89 10                	mov    DWORD PTR [eax],edx
c0013ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400b:	05 78 01 00 00       	add    eax,0x178
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	50                   	push   eax
c0014014:	e8 4d 74 ff ff       	call   c000b466 <GDT::GDT()>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014020:	05 7c 09 00 00       	add    eax,0x97c
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	50                   	push   eax
c0014029:	e8 98 76 ff ff       	call   c000b6c6 <IDT::IDT()>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014035:	05 7c 11 00 00       	add    eax,0x117c
c001403a:	83 ec 0c             	sub    esp,0xc
c001403d:	50                   	push   eax
c001403e:	e8 41 96 ff ff       	call   c000d684 <TSS::TSS()>
c0014043:	83 c4 10             	add    esp,0x10
c0014046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014055:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001405f:	90                   	nop
c0014060:	83 c4 0c             	add    esp,0xc
c0014063:	c3                   	ret    

c0014064 <CPU::displayFeatures()>:
c0014064:	c3                   	ret    
c0014065:	90                   	nop

c0014066 <CPU::detectFeatures()>:
c0014066:	55                   	push   ebp
c0014067:	57                   	push   edi
c0014068:	56                   	push   esi
c0014069:	53                   	push   ebx
c001406a:	83 ec 50             	sub    esp,0x50
c001406d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014071:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001407b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014082:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014088:	6a 0d                	push   0xd
c001408a:	6a 00                	push   0x0
c001408c:	57                   	push   edi
c001408d:	e8 76 c5 fe ff       	call   c0000608 <memset>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001409a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00140a1:	0f 84 20 09 00 00    	je     c00149c7 <CPU::detectFeatures()+0x961>
c00140a7:	83 ec 0c             	sub    esp,0xc
c00140aa:	6a 10                	push   0x10
c00140ac:	e8 5a fe ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c00140b1:	83 e0 01             	and    eax,0x1
c00140b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00140b7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140bd:	83 e0 fd             	and    eax,0xfffffffd
c00140c0:	09 d0                	or     eax,edx
c00140c2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140c8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00140cf:	e8 37 fe ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c00140d4:	83 e0 01             	and    eax,0x1
c00140d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00140de:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140e4:	83 e0 fb             	and    eax,0xfffffffb
c00140e7:	09 d0                	or     eax,edx
c00140e9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140ef:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00140f6:	e8 10 fe ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c00140fb:	83 e0 01             	and    eax,0x1
c00140fe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014105:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001410b:	83 e0 f7             	and    eax,0xfffffff7
c001410e:	09 d0                	or     eax,edx
c0014110:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014116:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001411d:	e8 e9 fd ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c0014122:	83 e0 01             	and    eax,0x1
c0014125:	c1 e0 04             	shl    eax,0x4
c0014128:	88 c2                	mov    dl,al
c001412a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014130:	83 e0 ef             	and    eax,0xffffffef
c0014133:	09 d0                	or     eax,edx
c0014135:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001413b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014142:	e8 c4 fd ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c0014147:	83 e0 01             	and    eax,0x1
c001414a:	c1 e0 05             	shl    eax,0x5
c001414d:	88 c2                	mov    dl,al
c001414f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014155:	83 e0 df             	and    eax,0xffffffdf
c0014158:	09 d0                	or     eax,edx
c001415a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014160:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014167:	e8 9f fd ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c001416c:	83 e0 01             	and    eax,0x1
c001416f:	8d 14 00             	lea    edx,[eax+eax*1]
c0014172:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014178:	83 e0 fd             	and    eax,0xfffffffd
c001417b:	09 d0                	or     eax,edx
c001417d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014183:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001418a:	e8 7c fd ff ff       	call   c0013f0b <cpuidCheckEDX(unsigned int)>
c001418f:	83 e0 01             	and    eax,0x1
c0014192:	c1 e0 06             	shl    eax,0x6
c0014195:	88 c2                	mov    dl,al
c0014197:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001419d:	83 e0 bf             	and    eax,0xffffffbf
c00141a0:	09 d0                	or     eax,edx
c00141a2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00141a8:	58                   	pop    eax
c00141a9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00141ad:	56                   	push   esi
c00141ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00141b2:	55                   	push   ebp
c00141b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141b7:	50                   	push   eax
c00141b8:	8d 54 24 28          	lea    edx,[esp+0x28]
c00141bc:	52                   	push   edx
c00141bd:	6a 00                	push   0x0
c00141bf:	e8 c4 fc ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141c4:	83 c4 1c             	add    esp,0x1c
c00141c7:	6a 04                	push   0x4
c00141c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00141cd:	50                   	push   eax
c00141ce:	57                   	push   edi
c00141cf:	e8 fe c3 fe ff       	call   c00005d2 <memcpy>
c00141d4:	83 c4 0c             	add    esp,0xc
c00141d7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00141dd:	6a 04                	push   0x4
c00141df:	56                   	push   esi
c00141e0:	50                   	push   eax
c00141e1:	e8 ec c3 fe ff       	call   c00005d2 <memcpy>
c00141e6:	83 c4 0c             	add    esp,0xc
c00141e9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00141ef:	6a 04                	push   0x4
c00141f1:	55                   	push   ebp
c00141f2:	50                   	push   eax
c00141f3:	e8 da c3 fe ff       	call   c00005d2 <memcpy>
c00141f8:	58                   	pop    eax
c00141f9:	5a                   	pop    edx
c00141fa:	68 14 16 02 c0       	push   0xc0021614
c00141ff:	57                   	push   edi
c0014200:	e8 00 c5 fe ff       	call   c0000705 <strcmp>
c0014205:	83 c4 10             	add    esp,0x10
c0014208:	85 c0                	test   eax,eax
c001420a:	75 0f                	jne    c001421b <CPU::detectFeatures()+0x1b5>
c001420c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014216:	e9 22 02 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c001421b:	50                   	push   eax
c001421c:	50                   	push   eax
c001421d:	68 21 16 02 c0       	push   0xc0021621
c0014222:	57                   	push   edi
c0014223:	e8 dd c4 fe ff       	call   c0000705 <strcmp>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	85 c0                	test   eax,eax
c001422d:	74 dd                	je     c001420c <CPU::detectFeatures()+0x1a6>
c001422f:	51                   	push   ecx
c0014230:	51                   	push   ecx
c0014231:	68 2e 16 02 c0       	push   0xc002162e
c0014236:	57                   	push   edi
c0014237:	e8 c9 c4 fe ff       	call   c0000705 <strcmp>
c001423c:	83 c4 10             	add    esp,0x10
c001423f:	85 c0                	test   eax,eax
c0014241:	74 2a                	je     c001426d <CPU::detectFeatures()+0x207>
c0014243:	52                   	push   edx
c0014244:	52                   	push   edx
c0014245:	68 3b 16 02 c0       	push   0xc002163b
c001424a:	57                   	push   edi
c001424b:	e8 b5 c4 fe ff       	call   c0000705 <strcmp>
c0014250:	83 c4 10             	add    esp,0x10
c0014253:	85 c0                	test   eax,eax
c0014255:	74 16                	je     c001426d <CPU::detectFeatures()+0x207>
c0014257:	50                   	push   eax
c0014258:	50                   	push   eax
c0014259:	68 48 16 02 c0       	push   0xc0021648
c001425e:	57                   	push   edi
c001425f:	e8 a1 c4 fe ff       	call   c0000705 <strcmp>
c0014264:	83 c4 10             	add    esp,0x10
c0014267:	85 c0                	test   eax,eax
c0014269:	74 48                	je     c00142b3 <CPU::detectFeatures()+0x24d>
c001426b:	eb 0f                	jmp    c001427c <CPU::detectFeatures()+0x216>
c001426d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014277:	e9 c1 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c001427c:	50                   	push   eax
c001427d:	50                   	push   eax
c001427e:	68 55 16 02 c0       	push   0xc0021655
c0014283:	57                   	push   edi
c0014284:	e8 7c c4 fe ff       	call   c0000705 <strcmp>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	85 c0                	test   eax,eax
c001428e:	74 23                	je     c00142b3 <CPU::detectFeatures()+0x24d>
c0014290:	50                   	push   eax
c0014291:	50                   	push   eax
c0014292:	68 62 16 02 c0       	push   0xc0021662
c0014297:	57                   	push   edi
c0014298:	e8 68 c4 fe ff       	call   c0000705 <strcmp>
c001429d:	83 c4 10             	add    esp,0x10
c00142a0:	85 c0                	test   eax,eax
c00142a2:	75 1e                	jne    c00142c2 <CPU::detectFeatures()+0x25c>
c00142a4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00142ae:	e9 8a 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00142b3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00142bd:	e9 7b 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00142c2:	50                   	push   eax
c00142c3:	50                   	push   eax
c00142c4:	68 6f 16 02 c0       	push   0xc002166f
c00142c9:	57                   	push   edi
c00142ca:	e8 36 c4 fe ff       	call   c0000705 <strcmp>
c00142cf:	83 c4 10             	add    esp,0x10
c00142d2:	85 c0                	test   eax,eax
c00142d4:	75 0f                	jne    c00142e5 <CPU::detectFeatures()+0x27f>
c00142d6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00142e0:	e9 58 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00142e5:	50                   	push   eax
c00142e6:	50                   	push   eax
c00142e7:	68 2e 16 02 c0       	push   0xc002162e
c00142ec:	57                   	push   edi
c00142ed:	e8 13 c4 fe ff       	call   c0000705 <strcmp>
c00142f2:	83 c4 10             	add    esp,0x10
c00142f5:	85 c0                	test   eax,eax
c00142f7:	75 0f                	jne    c0014308 <CPU::detectFeatures()+0x2a2>
c00142f9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014303:	e9 35 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c0014308:	50                   	push   eax
c0014309:	50                   	push   eax
c001430a:	68 7c 16 02 c0       	push   0xc002167c
c001430f:	57                   	push   edi
c0014310:	e8 f0 c3 fe ff       	call   c0000705 <strcmp>
c0014315:	83 c4 10             	add    esp,0x10
c0014318:	85 c0                	test   eax,eax
c001431a:	75 0f                	jne    c001432b <CPU::detectFeatures()+0x2c5>
c001431c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014326:	e9 12 01 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c001432b:	51                   	push   ecx
c001432c:	51                   	push   ecx
c001432d:	68 89 16 02 c0       	push   0xc0021689
c0014332:	57                   	push   edi
c0014333:	e8 cd c3 fe ff       	call   c0000705 <strcmp>
c0014338:	83 c4 10             	add    esp,0x10
c001433b:	85 c0                	test   eax,eax
c001433d:	75 0f                	jne    c001434e <CPU::detectFeatures()+0x2e8>
c001433f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014349:	e9 ef 00 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c001434e:	52                   	push   edx
c001434f:	52                   	push   edx
c0014350:	68 96 16 02 c0       	push   0xc0021696
c0014355:	57                   	push   edi
c0014356:	e8 aa c3 fe ff       	call   c0000705 <strcmp>
c001435b:	83 c4 10             	add    esp,0x10
c001435e:	85 c0                	test   eax,eax
c0014360:	75 0f                	jne    c0014371 <CPU::detectFeatures()+0x30b>
c0014362:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001436c:	e9 cc 00 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c0014371:	50                   	push   eax
c0014372:	50                   	push   eax
c0014373:	68 a3 16 02 c0       	push   0xc00216a3
c0014378:	57                   	push   edi
c0014379:	e8 87 c3 fe ff       	call   c0000705 <strcmp>
c001437e:	83 c4 10             	add    esp,0x10
c0014381:	85 c0                	test   eax,eax
c0014383:	75 0f                	jne    c0014394 <CPU::detectFeatures()+0x32e>
c0014385:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001438f:	e9 a9 00 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c0014394:	50                   	push   eax
c0014395:	50                   	push   eax
c0014396:	68 b0 16 02 c0       	push   0xc00216b0
c001439b:	57                   	push   edi
c001439c:	e8 64 c3 fe ff       	call   c0000705 <strcmp>
c00143a1:	83 c4 10             	add    esp,0x10
c00143a4:	85 c0                	test   eax,eax
c00143a6:	75 0f                	jne    c00143b7 <CPU::detectFeatures()+0x351>
c00143a8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00143b2:	e9 86 00 00 00       	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00143b7:	50                   	push   eax
c00143b8:	50                   	push   eax
c00143b9:	68 bd 16 02 c0       	push   0xc00216bd
c00143be:	57                   	push   edi
c00143bf:	e8 41 c3 fe ff       	call   c0000705 <strcmp>
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	85 c0                	test   eax,eax
c00143c9:	75 0c                	jne    c00143d7 <CPU::detectFeatures()+0x371>
c00143cb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00143d5:	eb 66                	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00143d7:	50                   	push   eax
c00143d8:	50                   	push   eax
c00143d9:	68 ca 16 02 c0       	push   0xc00216ca
c00143de:	57                   	push   edi
c00143df:	e8 21 c3 fe ff       	call   c0000705 <strcmp>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	85 c0                	test   eax,eax
c00143e9:	75 0c                	jne    c00143f7 <CPU::detectFeatures()+0x391>
c00143eb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00143f5:	eb 46                	jmp    c001443d <CPU::detectFeatures()+0x3d7>
c00143f7:	50                   	push   eax
c00143f8:	50                   	push   eax
c00143f9:	68 d7 16 02 c0       	push   0xc00216d7
c00143fe:	57                   	push   edi
c00143ff:	e8 01 c3 fe ff       	call   c0000705 <strcmp>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	85 c0                	test   eax,eax
c0014409:	74 e0                	je     c00143eb <CPU::detectFeatures()+0x385>
c001440b:	50                   	push   eax
c001440c:	50                   	push   eax
c001440d:	68 e4 16 02 c0       	push   0xc00216e4
c0014412:	57                   	push   edi
c0014413:	e8 ed c2 fe ff       	call   c0000705 <strcmp>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 cc                	je     c00143eb <CPU::detectFeatures()+0x385>
c001441f:	51                   	push   ecx
c0014420:	51                   	push   ecx
c0014421:	68 f1 16 02 c0       	push   0xc00216f1
c0014426:	57                   	push   edi
c0014427:	e8 d9 c2 fe ff       	call   c0000705 <strcmp>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	85 c0                	test   eax,eax
c0014431:	74 b8                	je     c00143eb <CPU::detectFeatures()+0x385>
c0014433:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001443d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014442:	0f 86 be 00 00 00    	jbe    c0014506 <CPU::detectFeatures()+0x4a0>
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	68 80 00 00 00       	push   0x80
c0014450:	e8 10 fb ff ff       	call   c0013f65 <cpuidCheckExtendedEBX(unsigned int)>
c0014455:	83 e0 01             	and    eax,0x1
c0014458:	c1 e0 06             	shl    eax,0x6
c001445b:	88 c2                	mov    dl,al
c001445d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014463:	83 e0 bf             	and    eax,0xffffffbf
c0014466:	09 d0                	or     eax,edx
c0014468:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001446e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014475:	e8 eb fa ff ff       	call   c0013f65 <cpuidCheckExtendedEBX(unsigned int)>
c001447a:	83 e0 01             	and    eax,0x1
c001447d:	c1 e0 04             	shl    eax,0x4
c0014480:	88 c2                	mov    dl,al
c0014482:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014488:	83 e0 ef             	and    eax,0xffffffef
c001448b:	09 d0                	or     eax,edx
c001448d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014493:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001449a:	e8 c6 fa ff ff       	call   c0013f65 <cpuidCheckExtendedEBX(unsigned int)>
c001449f:	c1 e0 07             	shl    eax,0x7
c00144a2:	88 c2                	mov    dl,al
c00144a4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00144aa:	83 e0 7f             	and    eax,0x7f
c00144ad:	09 d0                	or     eax,edx
c00144af:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00144b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00144bc:	e8 d1 fa ff ff       	call   c0013f92 <cpuidCheckExtendedECX(unsigned int)>
c00144c1:	83 e0 01             	and    eax,0x1
c00144c4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00144cb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00144d1:	83 e0 f7             	and    eax,0xfffffff7
c00144d4:	09 d0                	or     eax,edx
c00144d6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00144dc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00144e3:	e8 aa fa ff ff       	call   c0013f92 <cpuidCheckExtendedECX(unsigned int)>
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	83 e0 01             	and    eax,0x1
c00144ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00144f5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144fb:	83 e0 fb             	and    eax,0xfffffffb
c00144fe:	09 d0                	or     eax,edx
c0014500:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014506:	83 ec 0c             	sub    esp,0xc
c0014509:	56                   	push   esi
c001450a:	55                   	push   ebp
c001450b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001450f:	57                   	push   edi
c0014510:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014514:	50                   	push   eax
c0014515:	6a 01                	push   0x1
c0014517:	e8 6c f9 ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001451c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014520:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014526:	88 ca                	mov    dl,cl
c0014528:	83 e0 f0             	and    eax,0xfffffff0
c001452b:	83 e2 0f             	and    edx,0xf
c001452e:	09 d0                	or     eax,edx
c0014530:	88 ca                	mov    dl,cl
c0014532:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014538:	c0 ea 04             	shr    dl,0x4
c001453b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001453f:	0f b6 c2             	movzx  eax,dl
c0014542:	83 c4 20             	add    esp,0x20
c0014545:	c1 e0 06             	shl    eax,0x6
c0014548:	89 c5                	mov    ebp,eax
c001454a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014550:	66 25 3f c0          	and    ax,0xc03f
c0014554:	09 e8                	or     eax,ebp
c0014556:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001455d:	89 c8                	mov    eax,ecx
c001455f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014565:	c1 e8 08             	shr    eax,0x8
c0014568:	83 e2 3f             	and    edx,0x3f
c001456b:	83 e0 0f             	and    eax,0xf
c001456e:	89 c5                	mov    ebp,eax
c0014570:	c1 e5 06             	shl    ebp,0x6
c0014573:	09 d5                	or     ebp,edx
c0014575:	89 ea                	mov    edx,ebp
c0014577:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001457d:	88 c2                	mov    dl,al
c001457f:	c0 ea 02             	shr    dl,0x2
c0014582:	89 d5                	mov    ebp,edx
c0014584:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001458a:	83 e2 c0             	and    edx,0xffffffc0
c001458d:	09 d5                	or     ebp,edx
c001458f:	89 ea                	mov    edx,ebp
c0014591:	89 cd                	mov    ebp,ecx
c0014593:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014599:	c1 ed 0c             	shr    ebp,0xc
c001459c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00145a2:	83 e5 03             	and    ebp,0x3
c00145a5:	83 e2 cf             	and    edx,0xffffffcf
c00145a8:	c1 e5 04             	shl    ebp,0x4
c00145ab:	09 d5                	or     ebp,edx
c00145ad:	3c 06                	cmp    al,0x6
c00145af:	89 ea                	mov    edx,ebp
c00145b1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00145b7:	74 04                	je     c00145bd <CPU::detectFeatures()+0x557>
c00145b9:	3c 0f                	cmp    al,0xf
c00145bb:	75 5c                	jne    c0014619 <CPU::detectFeatures()+0x5b3>
c00145bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00145c1:	89 cd                	mov    ebp,ecx
c00145c3:	c1 ed 10             	shr    ebp,0x10
c00145c6:	c1 e5 04             	shl    ebp,0x4
c00145c9:	09 ea                	or     edx,ebp
c00145cb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00145d1:	0f b6 d2             	movzx  edx,dl
c00145d4:	66 81 e5 3f c0       	and    bp,0xc03f
c00145d9:	c1 e2 06             	shl    edx,0x6
c00145dc:	09 ea                	or     edx,ebp
c00145de:	3c 0f                	cmp    al,0xf
c00145e0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00145e7:	75 30                	jne    c0014619 <CPU::detectFeatures()+0x5b3>
c00145e9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00145ef:	c1 e9 14             	shr    ecx,0x14
c00145f2:	83 e0 3f             	and    eax,0x3f
c00145f5:	83 c1 0f             	add    ecx,0xf
c00145f8:	88 ca                	mov    dl,cl
c00145fa:	c0 e9 02             	shr    cl,0x2
c00145fd:	c1 e2 06             	shl    edx,0x6
c0014600:	09 d0                	or     eax,edx
c0014602:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014608:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001460e:	83 e0 c0             	and    eax,0xffffffc0
c0014611:	09 c1                	or     ecx,eax
c0014613:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014619:	83 ec 0c             	sub    esp,0xc
c001461c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014623:	56                   	push   esi
c0014624:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014628:	50                   	push   eax
c0014629:	57                   	push   edi
c001462a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001462e:	55                   	push   ebp
c001462f:	68 00 00 00 80       	push   0x80000000
c0014634:	e8 4f f8 ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014639:	83 c4 20             	add    esp,0x20
c001463c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014644:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014648:	76 1e                	jbe    c0014668 <CPU::detectFeatures()+0x602>
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	56                   	push   esi
c001464e:	50                   	push   eax
c001464f:	57                   	push   edi
c0014650:	55                   	push   ebp
c0014651:	68 01 00 00 80       	push   0x80000001
c0014656:	e8 2d f8 ff ff       	call   c0013e88 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001465b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014665:	83 c4 20             	add    esp,0x20
c0014668:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001466e:	83 f8 01             	cmp    eax,0x1
c0014671:	75 6f                	jne    c00146e2 <CPU::detectFeatures()+0x67c>
c0014673:	51                   	push   ecx
c0014674:	51                   	push   ecx
c0014675:	68 fd 16 02 c0       	push   0xc00216fd
c001467a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001467e:	56                   	push   esi
c001467f:	e8 23 c0 fe ff       	call   c00006a7 <strcpy>
c0014684:	5f                   	pop    edi
c0014685:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001468b:	5d                   	pop    ebp
c001468c:	66 c1 e8 06          	shr    ax,0x6
c0014690:	0f b6 c0             	movzx  eax,al
c0014693:	50                   	push   eax
c0014694:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001469a:	c1 e8 0e             	shr    eax,0xe
c001469d:	0f b6 c0             	movzx  eax,al
c00146a0:	50                   	push   eax
c00146a1:	e8 8d f4 ff ff       	call   c0013b33 <lookupIntelCPUName(unsigned char, unsigned char)>
c00146a6:	5a                   	pop    edx
c00146a7:	59                   	pop    ecx
c00146a8:	50                   	push   eax
c00146a9:	56                   	push   esi
c00146aa:	e8 bc c0 fe ff       	call   c000076b <strcat>
c00146af:	5f                   	pop    edi
c00146b0:	5d                   	pop    ebp
c00146b1:	56                   	push   esi
c00146b2:	53                   	push   ebx
c00146b3:	e8 68 bf ff ff       	call   c0010620 <Device::setName(char const*)>
c00146b8:	58                   	pop    eax
c00146b9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146bf:	5a                   	pop    edx
c00146c0:	68 04 17 02 c0       	push   0xc0021704
c00146c5:	50                   	push   eax
c00146c6:	e8 3a c0 fe ff       	call   c0000705 <strcmp>
c00146cb:	83 c4 10             	add    esp,0x10
c00146ce:	85 c0                	test   eax,eax
c00146d0:	0f 85 73 03 00 00    	jne    c0014a49 <CPU::detectFeatures()+0x9e3>
c00146d6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00146dd:	e9 67 03 00 00       	jmp    c0014a49 <CPU::detectFeatures()+0x9e3>
c00146e2:	83 f8 02             	cmp    eax,0x2
c00146e5:	0f 85 b5 00 00 00    	jne    c00147a0 <CPU::detectFeatures()+0x73a>
c00146eb:	57                   	push   edi
c00146ec:	57                   	push   edi
c00146ed:	68 16 17 02 c0       	push   0xc0021716
c00146f2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00146f6:	56                   	push   esi
c00146f7:	e8 ab bf fe ff       	call   c00006a7 <strcpy>
c00146fc:	5d                   	pop    ebp
c00146fd:	58                   	pop    eax
c00146fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014704:	66 c1 e8 06          	shr    ax,0x6
c0014708:	0f b6 c0             	movzx  eax,al
c001470b:	50                   	push   eax
c001470c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014712:	c1 e8 0e             	shr    eax,0xe
c0014715:	0f b6 c0             	movzx  eax,al
c0014718:	50                   	push   eax
c0014719:	e8 81 f2 ff ff       	call   c001399f <lookupAMDCPUName(unsigned char, unsigned char)>
c001471e:	5a                   	pop    edx
c001471f:	59                   	pop    ecx
c0014720:	50                   	push   eax
c0014721:	56                   	push   esi
c0014722:	e8 44 c0 fe ff       	call   c000076b <strcat>
c0014727:	5f                   	pop    edi
c0014728:	5d                   	pop    ebp
c0014729:	56                   	push   esi
c001472a:	53                   	push   ebx
c001472b:	e8 f0 be ff ff       	call   c0010620 <Device::setName(char const*)>
c0014730:	58                   	pop    eax
c0014731:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014737:	5a                   	pop    edx
c0014738:	68 1b 17 02 c0       	push   0xc002171b
c001473d:	50                   	push   eax
c001473e:	e8 c2 bf fe ff       	call   c0000705 <strcmp>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	85 c0                	test   eax,eax
c0014748:	75 20                	jne    c001476a <CPU::detectFeatures()+0x704>
c001474a:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c0014750:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014756:	a8 01                	test   al,0x1
c0014758:	74 10                	je     c001476a <CPU::detectFeatures()+0x704>
c001475a:	83 e0 fe             	and    eax,0xfffffffe
c001475d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014763:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001476a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014770:	c1 e8 0e             	shr    eax,0xe
c0014773:	3c 05                	cmp    al,0x5
c0014775:	0f 85 ce 02 00 00    	jne    c0014a49 <CPU::detectFeatures()+0x9e3>
c001477b:	56                   	push   esi
c001477c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014782:	83 e0 0f             	and    eax,0xf
c0014785:	50                   	push   eax
c0014786:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001478c:	66 c1 e8 06          	shr    ax,0x6
c0014790:	0f b6 c0             	movzx  eax,al
c0014793:	50                   	push   eax
c0014794:	6a 05                	push   0x5
c0014796:	e8 7a f6 ff ff       	call   c0013e15 <AMD_K6_writeback(int, int, int)>
c001479b:	e9 1f 02 00 00       	jmp    c00149bf <CPU::detectFeatures()+0x959>
c00147a0:	8d 50 fd             	lea    edx,[eax-0x3]
c00147a3:	83 fa 01             	cmp    edx,0x1
c00147a6:	76 09                	jbe    c00147b1 <CPU::detectFeatures()+0x74b>
c00147a8:	83 f8 06             	cmp    eax,0x6
c00147ab:	0f 85 91 01 00 00    	jne    c0014942 <CPU::detectFeatures()+0x8dc>
c00147b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147b7:	c1 ea 0e             	shr    edx,0xe
c00147ba:	80 fa 05             	cmp    dl,0x5
c00147bd:	75 7b                	jne    c001483a <CPU::detectFeatures()+0x7d4>
c00147bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147c5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00147ca:	66 81 fa 00 01       	cmp    dx,0x100
c00147cf:	75 0c                	jne    c00147dd <CPU::detectFeatures()+0x777>
c00147d1:	51                   	push   ecx
c00147d2:	51                   	push   ecx
c00147d3:	68 22 17 02 c0       	push   0xc0021722
c00147d8:	e9 dc 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00147dd:	66 81 fa 00 02       	cmp    dx,0x200
c00147e2:	75 0c                	jne    c00147f0 <CPU::detectFeatures()+0x78a>
c00147e4:	52                   	push   edx
c00147e5:	52                   	push   edx
c00147e6:	68 35 17 02 c0       	push   0xc0021735
c00147eb:	e9 c9 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00147f0:	66 81 fa 40 02       	cmp    dx,0x240
c00147f5:	75 0c                	jne    c0014803 <CPU::detectFeatures()+0x79d>
c00147f7:	50                   	push   eax
c00147f8:	50                   	push   eax
c00147f9:	68 47 17 02 c0       	push   0xc0021747
c00147fe:	e9 b6 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014803:	83 f8 06             	cmp    eax,0x6
c0014806:	75 0c                	jne    c0014814 <CPU::detectFeatures()+0x7ae>
c0014808:	50                   	push   eax
c0014809:	50                   	push   eax
c001480a:	68 59 17 02 c0       	push   0xc0021759
c001480f:	e9 a5 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014814:	83 f8 04             	cmp    eax,0x4
c0014817:	75 0c                	jne    c0014825 <CPU::detectFeatures()+0x7bf>
c0014819:	50                   	push   eax
c001481a:	50                   	push   eax
c001481b:	68 65 17 02 c0       	push   0xc0021765
c0014820:	e9 94 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014825:	83 f8 03             	cmp    eax,0x3
c0014828:	0f 85 1b 02 00 00    	jne    c0014a49 <CPU::detectFeatures()+0x9e3>
c001482e:	50                   	push   eax
c001482f:	50                   	push   eax
c0014830:	68 6d 17 02 c0       	push   0xc002176d
c0014835:	e9 7f 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001483a:	80 fa 06             	cmp    dl,0x6
c001483d:	0f 85 db 00 00 00    	jne    c001491e <CPU::detectFeatures()+0x8b8>
c0014843:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014849:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001484e:	66 81 fa 80 01       	cmp    dx,0x180
c0014853:	75 0c                	jne    c0014861 <CPU::detectFeatures()+0x7fb>
c0014855:	50                   	push   eax
c0014856:	50                   	push   eax
c0014857:	68 78 17 02 c0       	push   0xc0021778
c001485c:	e9 58 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014861:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014867:	66 f7 c1 80 ff       	test   cx,0xff80
c001486c:	75 0c                	jne    c001487a <CPU::detectFeatures()+0x814>
c001486e:	50                   	push   eax
c001486f:	50                   	push   eax
c0014870:	68 88 17 02 c0       	push   0xc0021788
c0014875:	e9 3f 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001487a:	66 81 fa 40 02       	cmp    dx,0x240
c001487f:	75 0c                	jne    c001488d <CPU::detectFeatures()+0x827>
c0014881:	55                   	push   ebp
c0014882:	55                   	push   ebp
c0014883:	68 8f 17 02 c0       	push   0xc002178f
c0014888:	e9 2c 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001488d:	66 81 fa 80 02       	cmp    dx,0x280
c0014892:	75 0c                	jne    c00148a0 <CPU::detectFeatures()+0x83a>
c0014894:	57                   	push   edi
c0014895:	57                   	push   edi
c0014896:	68 98 17 02 c0       	push   0xc0021798
c001489b:	e9 19 01 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00148a0:	66 81 fa 40 03       	cmp    dx,0x340
c00148a5:	74 ed                	je     c0014894 <CPU::detectFeatures()+0x82e>
c00148a7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00148ac:	75 0c                	jne    c00148ba <CPU::detectFeatures()+0x854>
c00148ae:	56                   	push   esi
c00148af:	56                   	push   esi
c00148b0:	68 9f 17 02 c0       	push   0xc002179f
c00148b5:	e9 ff 00 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00148ba:	83 f8 06             	cmp    eax,0x6
c00148bd:	0f 84 45 ff ff ff    	je     c0014808 <CPU::detectFeatures()+0x7a2>
c00148c3:	83 f8 04             	cmp    eax,0x4
c00148c6:	0f 84 4d ff ff ff    	je     c0014819 <CPU::detectFeatures()+0x7b3>
c00148cc:	83 f8 03             	cmp    eax,0x3
c00148cf:	0f 85 74 01 00 00    	jne    c0014a49 <CPU::detectFeatures()+0x9e3>
c00148d5:	51                   	push   ecx
c00148d6:	51                   	push   ecx
c00148d7:	68 a8 17 02 c0       	push   0xc00217a8
c00148dc:	53                   	push   ebx
c00148dd:	e8 3e bd ff ff       	call   c0010620 <Device::setName(char const*)>
c00148e2:	b1 c1                	mov    cl,0xc1
c00148e4:	88 c8                	mov    al,cl
c00148e6:	e6 22                	out    0x22,al
c00148e8:	e4 23                	in     al,0x23
c00148ea:	88 c2                	mov    dl,al
c00148ec:	88 c8                	mov    al,cl
c00148ee:	e6 22                	out    0x22,al
c00148f0:	88 d0                	mov    al,dl
c00148f2:	83 c8 10             	or     eax,0x10
c00148f5:	e6 23                	out    0x23,al
c00148f7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148fe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014901:	89 d0                	mov    eax,edx
c0014903:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014909:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001490d:	40                   	inc    eax
c001490e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014914:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014919:	e9 a1 00 00 00       	jmp    c00149bf <CPU::detectFeatures()+0x959>
c001491e:	83 f8 06             	cmp    eax,0x6
c0014921:	0f 84 e1 fe ff ff    	je     c0014808 <CPU::detectFeatures()+0x7a2>
c0014927:	83 f8 04             	cmp    eax,0x4
c001492a:	0f 84 e9 fe ff ff    	je     c0014819 <CPU::detectFeatures()+0x7b3>
c0014930:	83 f8 03             	cmp    eax,0x3
c0014933:	0f 85 10 01 00 00    	jne    c0014a49 <CPU::detectFeatures()+0x9e3>
c0014939:	52                   	push   edx
c001493a:	52                   	push   edx
c001493b:	68 b3 17 02 c0       	push   0xc00217b3
c0014940:	eb 77                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014942:	83 f8 07             	cmp    eax,0x7
c0014945:	75 09                	jne    c0014950 <CPU::detectFeatures()+0x8ea>
c0014947:	50                   	push   eax
c0014948:	50                   	push   eax
c0014949:	68 bd 17 02 c0       	push   0xc00217bd
c001494e:	eb 69                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014950:	83 f8 0a             	cmp    eax,0xa
c0014953:	75 09                	jne    c001495e <CPU::detectFeatures()+0x8f8>
c0014955:	50                   	push   eax
c0014956:	50                   	push   eax
c0014957:	68 c8 17 02 c0       	push   0xc00217c8
c001495c:	eb 5b                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001495e:	83 f8 0b             	cmp    eax,0xb
c0014961:	75 09                	jne    c001496c <CPU::detectFeatures()+0x906>
c0014963:	50                   	push   eax
c0014964:	50                   	push   eax
c0014965:	68 d0 17 02 c0       	push   0xc00217d0
c001496a:	eb 4d                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001496c:	83 f8 08             	cmp    eax,0x8
c001496f:	75 09                	jne    c001497a <CPU::detectFeatures()+0x914>
c0014971:	50                   	push   eax
c0014972:	50                   	push   eax
c0014973:	68 d9 17 02 c0       	push   0xc00217d9
c0014978:	eb 3f                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c001497a:	83 f8 09             	cmp    eax,0x9
c001497d:	75 09                	jne    c0014988 <CPU::detectFeatures()+0x922>
c001497f:	50                   	push   eax
c0014980:	50                   	push   eax
c0014981:	68 e1 17 02 c0       	push   0xc00217e1
c0014986:	eb 31                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014988:	83 f8 05             	cmp    eax,0x5
c001498b:	75 09                	jne    c0014996 <CPU::detectFeatures()+0x930>
c001498d:	50                   	push   eax
c001498e:	50                   	push   eax
c001498f:	68 e9 17 02 c0       	push   0xc00217e9
c0014994:	eb 23                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c0014996:	83 f8 0c             	cmp    eax,0xc
c0014999:	75 09                	jne    c00149a4 <CPU::detectFeatures()+0x93e>
c001499b:	55                   	push   ebp
c001499c:	55                   	push   ebp
c001499d:	68 f7 17 02 c0       	push   0xc00217f7
c00149a2:	eb 15                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00149a4:	83 f8 0d             	cmp    eax,0xd
c00149a7:	75 09                	jne    c00149b2 <CPU::detectFeatures()+0x94c>
c00149a9:	57                   	push   edi
c00149aa:	57                   	push   edi
c00149ab:	68 02 18 02 c0       	push   0xc0021802
c00149b0:	eb 07                	jmp    c00149b9 <CPU::detectFeatures()+0x953>
c00149b2:	56                   	push   esi
c00149b3:	56                   	push   esi
c00149b4:	68 16 18 02 c0       	push   0xc0021816
c00149b9:	53                   	push   ebx
c00149ba:	e8 61 bc ff ff       	call   c0010620 <Device::setName(char const*)>
c00149bf:	83 c4 10             	add    esp,0x10
c00149c2:	e9 82 00 00 00       	jmp    c0014a49 <CPU::detectFeatures()+0x9e3>
c00149c7:	51                   	push   ecx
c00149c8:	51                   	push   ecx
c00149c9:	68 62 16 02 c0       	push   0xc0021662
c00149ce:	57                   	push   edi
c00149cf:	e8 d3 bc fe ff       	call   c00006a7 <strcpy>
c00149d4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00149de:	e8 9c b7 fe ff       	call   c000017f <is486>
c00149e3:	83 c4 10             	add    esp,0x10
c00149e6:	85 c0                	test   eax,eax
c00149e8:	74 2d                	je     c0014a17 <CPU::detectFeatures()+0x9b1>
c00149ea:	52                   	push   edx
c00149eb:	52                   	push   edx
c00149ec:	68 22 18 02 c0       	push   0xc0021822
c00149f1:	53                   	push   ebx
c00149f2:	e8 29 bc ff ff       	call   c0010620 <Device::setName(char const*)>
c00149f7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149fe:	e8 f5 a3 00 00       	call   c001edf8 <CPU::readCR0()>
c0014a03:	83 c4 10             	add    esp,0x10
c0014a06:	83 e0 14             	and    eax,0x14
c0014a09:	83 f8 04             	cmp    eax,0x4
c0014a0c:	75 1f                	jne    c0014a2d <CPU::detectFeatures()+0x9c7>
c0014a0e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014a15:	eb 32                	jmp    c0014a49 <CPU::detectFeatures()+0x9e3>
c0014a17:	50                   	push   eax
c0014a18:	50                   	push   eax
c0014a19:	68 2d 18 02 c0       	push   0xc002182d
c0014a1e:	53                   	push   ebx
c0014a1f:	e8 fc bb ff ff       	call   c0010620 <Device::setName(char const*)>
c0014a24:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014a2b:	eb d1                	jmp    c00149fe <CPU::detectFeatures()+0x998>
c0014a2d:	e8 28 b7 fe ff       	call   c000015a <hasLegacyFPU>
c0014a32:	83 e0 01             	and    eax,0x1
c0014a35:	8d 14 00             	lea    edx,[eax+eax*1]
c0014a38:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014a3e:	83 e0 fd             	and    eax,0xfffffffd
c0014a41:	09 d0                	or     eax,edx
c0014a43:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014a49:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014a50:	83 c4 4c             	add    esp,0x4c
c0014a53:	5b                   	pop    ebx
c0014a54:	5e                   	pop    esi
c0014a55:	5f                   	pop    edi
c0014a56:	5d                   	pop    ebp
c0014a57:	c3                   	ret    

c0014a58 <CPU::setupSMEP()>:
c0014a58:	83 ec 0c             	sub    esp,0xc
c0014a5b:	e8 62 a6 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014a60:	0d 00 00 10 00       	or     eax,0x100000
c0014a65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a69:	83 c4 0c             	add    esp,0xc
c0014a6c:	e9 6c a6 00 00       	jmp    c001f0dd <CPU::writeCR4(unsigned long)>
c0014a71:	90                   	nop

c0014a72 <CPU::setupUMIP()>:
c0014a72:	83 ec 0c             	sub    esp,0xc
c0014a75:	e8 48 a6 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014a7a:	80 cc 08             	or     ah,0x8
c0014a7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a81:	83 c4 0c             	add    esp,0xc
c0014a84:	e9 54 a6 00 00       	jmp    c001f0dd <CPU::writeCR4(unsigned long)>
c0014a89:	90                   	nop

c0014a8a <CPU::setupTSC()>:
c0014a8a:	83 ec 0c             	sub    esp,0xc
c0014a8d:	e8 30 a6 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014a92:	83 c8 04             	or     eax,0x4
c0014a95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a99:	83 c4 0c             	add    esp,0xc
c0014a9c:	e9 3c a6 00 00       	jmp    c001f0dd <CPU::writeCR4(unsigned long)>
c0014aa1:	90                   	nop

c0014aa2 <CPU::setupLargePages()>:
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	e8 18 a6 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014aaa:	83 c8 10             	or     eax,0x10
c0014aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ab1:	83 c4 0c             	add    esp,0xc
c0014ab4:	e9 24 a6 00 00       	jmp    c001f0dd <CPU::writeCR4(unsigned long)>
c0014ab9:	90                   	nop

c0014aba <CPU::setupPAT()>:
c0014aba:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0014abf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014ac6:	74 2c                	je     c0014af4 <CPU::setupPAT()+0x3a>
c0014ac8:	53                   	push   ebx
c0014ac9:	83 ec 10             	sub    esp,0x10
c0014acc:	68 77 02 00 00       	push   0x277
c0014ad1:	50                   	push   eax
c0014ad2:	e8 fd 66 ff ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c0014ad7:	83 e2 f8             	and    edx,0xfffffff8
c0014ada:	83 ca 01             	or     edx,0x1
c0014add:	52                   	push   edx
c0014ade:	50                   	push   eax
c0014adf:	68 77 02 00 00       	push   0x277
c0014ae4:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c0014aea:	e8 11 67 ff ff       	call   c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014aef:	83 c4 28             	add    esp,0x28
c0014af2:	5b                   	pop    ebx
c0014af3:	c3                   	ret    
c0014af4:	c3                   	ret    
c0014af5:	90                   	nop

c0014af6 <CPU::setupMTRR()>:
c0014af6:	c3                   	ret    
c0014af7:	90                   	nop

c0014af8 <CPU::setupGlobalPages()>:
c0014af8:	83 ec 0c             	sub    esp,0xc
c0014afb:	e8 c2 a5 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014b00:	0c 80                	or     al,0x80
c0014b02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b06:	83 c4 0c             	add    esp,0xc
c0014b09:	e9 cf a5 00 00       	jmp    c001f0dd <CPU::writeCR4(unsigned long)>

c0014b0e <CPU::allowUsermodeDataAccess()>:
c0014b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b12:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014b19:	74 03                	je     c0014b1e <CPU::allowUsermodeDataAccess()+0x10>
c0014b1b:	0f 01 cb             	stac   
c0014b1e:	c3                   	ret    
c0014b1f:	90                   	nop

c0014b20 <CPU::prohibitUsermodeDataAccess()>:
c0014b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b24:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014b2b:	74 03                	je     c0014b30 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014b2d:	0f 01 ca             	clac   
c0014b30:	c3                   	ret    
c0014b31:	90                   	nop

c0014b32 <CPU::setupSMAP()>:
c0014b32:	53                   	push   ebx
c0014b33:	83 ec 08             	sub    esp,0x8
c0014b36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b3a:	e8 83 a5 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014b3f:	83 ec 0c             	sub    esp,0xc
c0014b42:	0d 00 00 20 00       	or     eax,0x200000
c0014b47:	50                   	push   eax
c0014b48:	e8 90 a5 00 00       	call   c001f0dd <CPU::writeCR4(unsigned long)>
c0014b4d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b51:	83 c4 18             	add    esp,0x18
c0014b54:	5b                   	pop    ebx
c0014b55:	eb c9                	jmp    c0014b20 <CPU::prohibitUsermodeDataAccess()>
c0014b57:	90                   	nop

c0014b58 <CPU::setupFeatures()>:
c0014b58:	53                   	push   ebx
c0014b59:	83 ec 08             	sub    esp,0x8
c0014b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b60:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b67:	74 0c                	je     c0014b75 <CPU::setupFeatures()+0x1d>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	53                   	push   ebx
c0014b6d:	e8 e6 fe ff ff       	call   c0014a58 <CPU::setupSMEP()>
c0014b72:	83 c4 10             	add    esp,0x10
c0014b75:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b7c:	74 0c                	je     c0014b8a <CPU::setupFeatures()+0x32>
c0014b7e:	83 ec 0c             	sub    esp,0xc
c0014b81:	53                   	push   ebx
c0014b82:	e8 ab ff ff ff       	call   c0014b32 <CPU::setupSMAP()>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b91:	74 0c                	je     c0014b9f <CPU::setupFeatures()+0x47>
c0014b93:	83 ec 0c             	sub    esp,0xc
c0014b96:	53                   	push   ebx
c0014b97:	e8 d6 fe ff ff       	call   c0014a72 <CPU::setupUMIP()>
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014ba6:	74 0c                	je     c0014bb4 <CPU::setupFeatures()+0x5c>
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	53                   	push   ebx
c0014bac:	e8 d9 fe ff ff       	call   c0014a8a <CPU::setupTSC()>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014bbb:	74 0c                	je     c0014bc9 <CPU::setupFeatures()+0x71>
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	53                   	push   ebx
c0014bc1:	e8 dc fe ff ff       	call   c0014aa2 <CPU::setupLargePages()>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014bd0:	74 0c                	je     c0014bde <CPU::setupFeatures()+0x86>
c0014bd2:	83 ec 0c             	sub    esp,0xc
c0014bd5:	53                   	push   ebx
c0014bd6:	e8 1d ff ff ff       	call   c0014af8 <CPU::setupGlobalPages()>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014be5:	74 0d                	je     c0014bf4 <CPU::setupFeatures()+0x9c>
c0014be7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014beb:	83 c4 08             	add    esp,0x8
c0014bee:	5b                   	pop    ebx
c0014bef:	e9 c6 fe ff ff       	jmp    c0014aba <CPU::setupPAT()>
c0014bf4:	83 c4 08             	add    esp,0x8
c0014bf7:	5b                   	pop    ebx
c0014bf8:	c3                   	ret    
c0014bf9:	90                   	nop

c0014bfa <CPU::open(int, int, void*)>:
c0014bfa:	57                   	push   edi
c0014bfb:	56                   	push   esi
c0014bfc:	53                   	push   ebx
c0014bfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c05:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014c14:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014c1a:	50                   	push   eax
c0014c1b:	e8 c2 68 ff ff       	call   c000b4e2 <GDT::setup()>
c0014c20:	83 c4 0c             	add    esp,0xc
c0014c23:	6a 00                	push   0x0
c0014c25:	68 ef be ad de       	push   0xdeadbeef
c0014c2a:	57                   	push   edi
c0014c2b:	e8 94 8a ff ff       	call   c000d6c4 <TSS::setup(unsigned long, unsigned long)>
c0014c30:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c33:	e8 6c 8a ff ff       	call   c000d6a4 <TSS::flush()>
c0014c38:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014c3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c41:	e8 f6 6a ff ff       	call   c000b73c <IDT::setup()>
c0014c46:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014c4d:	e8 82 a4 00 00       	call   c001f0d4 <CPU::writeDR7(unsigned long)>
c0014c52:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c5c:	e8 9f 75 ff ff       	call   c000c200 <Phys::allocatePage()>
c0014c61:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c67:	89 30                	mov    DWORD PTR [eax],esi
c0014c69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c6f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c72:	58                   	pop    eax
c0014c73:	5a                   	pop    edx
c0014c74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c7e:	e8 37 9a ff ff       	call   c000e6ba <VAS::setCPUSpecific(unsigned long)>
c0014c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c86:	e8 db f3 ff ff       	call   c0014066 <CPU::detectFeatures()>
c0014c8b:	e8 9a c7 ff ff       	call   c001142a <setupInterruptController()>
c0014c90:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c96:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c0014c9b:	83 e0 10             	and    eax,0x10
c0014c9e:	83 f8 01             	cmp    eax,0x1
c0014ca1:	19 c0                	sbb    eax,eax
c0014ca3:	83 e0 46             	and    eax,0x46
c0014ca6:	83 c0 1e             	add    eax,0x1e
c0014ca9:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cac:	e8 61 d9 ff ff       	call   c0012612 <setupTimer(int)>
c0014cb1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014cb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cba:	e8 99 fe ff ff       	call   c0014b58 <CPU::setupFeatures()>
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	31 c0                	xor    eax,eax
c0014cc4:	5b                   	pop    ebx
c0014cc5:	5e                   	pop    esi
c0014cc6:	5f                   	pop    edi
c0014cc7:	c3                   	ret    

c0014cc8 <Krnl::panic(char const*)>:
c0014cc8:	55                   	push   ebp
c0014cc9:	89 e5                	mov    ebp,esp
c0014ccb:	53                   	push   ebx
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014cd2:	fa                   	cli    
c0014cd3:	c6 05 10 42 02 c0 01 	mov    BYTE PTR ds:0xc0024210,0x1
c0014cda:	53                   	push   ebx
c0014cdb:	c6 05 00 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022c00,0x0
c0014ce2:	68 64 18 02 c0       	push   0xc0021864
c0014ce7:	e8 47 a3 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0014cec:	58                   	pop    eax
c0014ced:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014cf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf8:	e8 08 82 ff ff       	call   c000cf05 <setActiveTerminal(VgaText*)>
c0014cfd:	83 c4 0c             	add    esp,0xc
c0014d00:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d05:	6a 01                	push   0x1
c0014d07:	6a 0f                	push   0xf
c0014d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0f:	e8 30 7c ff ff       	call   c000c944 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d14:	5a                   	pop    edx
c0014d15:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d20:	e8 81 84 ff ff       	call   c000d1a6 <VgaText::clearScreen()>
c0014d25:	59                   	pop    ecx
c0014d26:	58                   	pop    eax
c0014d27:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d2c:	68 7d 18 02 c0       	push   0xc002187d
c0014d31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d37:	e8 e8 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014d3c:	58                   	pop    eax
c0014d3d:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d42:	5a                   	pop    edx
c0014d43:	68 1c 19 02 c0       	push   0xc002191c
c0014d48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d4e:	e8 d1 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014d53:	59                   	pop    ecx
c0014d54:	58                   	pop    eax
c0014d55:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d5a:	68 99 18 02 c0       	push   0xc0021899
c0014d5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d65:	e8 ba 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014d6a:	58                   	pop    eax
c0014d6b:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d70:	5a                   	pop    edx
c0014d71:	53                   	push   ebx
c0014d72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d78:	e8 a7 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014d7d:	59                   	pop    ecx
c0014d7e:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d83:	5b                   	pop    ebx
c0014d84:	68 b9 18 02 c0       	push   0xc00218b9
c0014d89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8f:	e8 90 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014d94:	58                   	pop    eax
c0014d95:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014d9a:	5a                   	pop    edx
c0014d9b:	68 58 19 02 c0       	push   0xc0021958
c0014da0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da6:	e8 79 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014dab:	59                   	pop    ecx
c0014dac:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014db1:	5b                   	pop    ebx
c0014db2:	68 99 18 02 c0       	push   0xc0021899
c0014db7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbd:	e8 62 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014dc2:	58                   	pop    eax
c0014dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc8:	5a                   	pop    edx
c0014dc9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dcc:	83 c0 0c             	add    eax,0xc
c0014dcf:	50                   	push   eax
c0014dd0:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014dd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddb:	e8 44 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014de0:	59                   	pop    ecx
c0014de1:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014de6:	5b                   	pop    ebx
c0014de7:	68 b8 18 02 c0       	push   0xc00218b8
c0014dec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df2:	e8 2d 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014df7:	58                   	pop    eax
c0014df8:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014dfd:	5a                   	pop    edx
c0014dfe:	68 84 19 02 c0       	push   0xc0021984
c0014e03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e09:	e8 16 85 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014e0e:	59                   	pop    ecx
c0014e0f:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014e14:	5b                   	pop    ebx
c0014e15:	68 c4 19 02 c0       	push   0xc00219c4
c0014e1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e20:	e8 ff 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014e25:	58                   	pop    eax
c0014e26:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014e2b:	5a                   	pop    edx
c0014e2c:	68 a4 18 02 c0       	push   0xc00218a4
c0014e31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e37:	e8 e8 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014e3c:	59                   	pop    ecx
c0014e3d:	5b                   	pop    ebx
c0014e3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014e41:	68 bc 18 02 c0       	push   0xc00218bc
c0014e46:	e8 e8 a1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0014e4b:	58                   	pop    eax
c0014e4c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e4f:	5a                   	pop    edx
c0014e50:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e53:	68 c5 18 02 c0       	push   0xc00218c5
c0014e58:	e8 d6 a1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0014e5d:	59                   	pop    ecx
c0014e5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e61:	5b                   	pop    ebx
c0014e62:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e64:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e67:	68 dd 10 02 c0       	push   0xc00210dd
c0014e6c:	e8 c2 a1 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0014e71:	58                   	pop    eax
c0014e72:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014e77:	5a                   	pop    edx
c0014e78:	68 08 1a 02 c0       	push   0xc0021a08
c0014e7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e83:	e8 9c 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014e88:	59                   	pop    ecx
c0014e89:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014e8e:	5b                   	pop    ebx
c0014e8f:	68 ce 18 02 c0       	push   0xc00218ce
c0014e94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9a:	e8 85 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014e9f:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014ea4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014eaa:	e8 49 9f 00 00       	call   c001edf8 <CPU::readCR0()>
c0014eaf:	5a                   	pop    edx
c0014eb0:	59                   	pop    ecx
c0014eb1:	50                   	push   eax
c0014eb2:	53                   	push   ebx
c0014eb3:	e8 92 84 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014eb8:	5b                   	pop    ebx
c0014eb9:	58                   	pop    eax
c0014eba:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014ebf:	68 d8 18 02 c0       	push   0xc00218d8
c0014ec4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eca:	e8 55 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014ecf:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014ed4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014eda:	e8 07 a2 00 00       	call   c001f0e6 <CPU::readCR2()>
c0014edf:	5a                   	pop    edx
c0014ee0:	59                   	pop    ecx
c0014ee1:	50                   	push   eax
c0014ee2:	53                   	push   ebx
c0014ee3:	e8 62 84 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014ee8:	5b                   	pop    ebx
c0014ee9:	58                   	pop    eax
c0014eea:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014eef:	68 e2 18 02 c0       	push   0xc00218e2
c0014ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efa:	e8 25 84 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014eff:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f04:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014f0a:	e8 76 9b 00 00       	call   c001ea85 <CPU::readCR3()>
c0014f0f:	5a                   	pop    edx
c0014f10:	59                   	pop    ecx
c0014f11:	50                   	push   eax
c0014f12:	53                   	push   ebx
c0014f13:	e8 32 84 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014f18:	5b                   	pop    ebx
c0014f19:	58                   	pop    eax
c0014f1a:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f1f:	68 f5 18 02 c0       	push   0xc00218f5
c0014f24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2a:	e8 f5 83 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014f2f:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f34:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014f3a:	e8 83 a1 00 00       	call   c001f0c2 <CPU::readCR4()>
c0014f3f:	5a                   	pop    edx
c0014f40:	59                   	pop    ecx
c0014f41:	50                   	push   eax
c0014f42:	53                   	push   ebx
c0014f43:	e8 02 84 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014f48:	5b                   	pop    ebx
c0014f49:	58                   	pop    eax
c0014f4a:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f4f:	68 ff 18 02 c0       	push   0xc00218ff
c0014f54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5a:	e8 c5 83 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014f5f:	5a                   	pop    edx
c0014f60:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f65:	59                   	pop    ecx
c0014f66:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014f6f:	50                   	push   eax
c0014f70:	e8 d5 83 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014f75:	5b                   	pop    ebx
c0014f76:	58                   	pop    eax
c0014f77:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f7c:	68 16 19 02 c0       	push   0xc0021916
c0014f81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f87:	e8 98 83 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014f8c:	5a                   	pop    edx
c0014f8d:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014f92:	59                   	pop    ecx
c0014f93:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f99:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f9c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f9f:	50                   	push   eax
c0014fa0:	e8 a5 83 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014fa5:	5b                   	pop    ebx
c0014fa6:	58                   	pop    eax
c0014fa7:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014fac:	68 16 19 02 c0       	push   0xc0021916
c0014fb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb7:	e8 68 83 ff ff       	call   c000d324 <VgaText::puts(char const*)>
c0014fbc:	59                   	pop    ecx
c0014fbd:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0014fc2:	5b                   	pop    ebx
c0014fc3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014fc9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014fcc:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fce:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014fd1:	50                   	push   eax
c0014fd2:	e8 73 83 ff ff       	call   c000d34a <VgaText::putx(unsigned int)>
c0014fd7:	83 c4 10             	add    esp,0x10
c0014fda:	b2 fe                	mov    dl,0xfe
c0014fdc:	e4 60                	in     al,0x60
c0014fde:	3c 1c                	cmp    al,0x1c
c0014fe0:	74 04                	je     c0014fe6 <Krnl::panic(char const*)+0x31e>
c0014fe2:	3c 5a                	cmp    al,0x5a
c0014fe4:	75 f6                	jne    c0014fdc <Krnl::panic(char const*)+0x314>
c0014fe6:	e4 64                	in     al,0x64
c0014fe8:	a8 02                	test   al,0x2
c0014fea:	75 fa                	jne    c0014fe6 <Krnl::panic(char const*)+0x31e>
c0014fec:	88 d0                	mov    al,dl
c0014fee:	e6 64                	out    0x64,al
c0014ff0:	fa                   	cli    
c0014ff1:	f4                   	hlt    
c0014ff2:	eb e8                	jmp    c0014fdc <Krnl::panic(char const*)+0x314>

c0014ff4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014ff4:	55                   	push   ebp
c0014ff5:	57                   	push   edi
c0014ff6:	56                   	push   esi
c0014ff7:	53                   	push   ebx
c0014ff8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014ffe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015005:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015007:	8d 6e 01             	lea    ebp,[esi+0x1]
c001500a:	80 fb 40             	cmp    bl,0x40
c001500d:	75 1b                	jne    c001502a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001500f:	8a 16                	mov    dl,BYTE PTR [esi]
c0015011:	84 d2                	test   dl,dl
c0015013:	0f 84 f1 00 00 00    	je     c001510a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015019:	8d 46 01             	lea    eax,[esi+0x1]
c001501c:	80 fa 3a             	cmp    dl,0x3a
c001501f:	74 04                	je     c0015025 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015021:	89 c6                	mov    esi,eax
c0015023:	eb ea                	jmp    c001500f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015025:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015028:	89 c6                	mov    esi,eax
c001502a:	50                   	push   eax
c001502b:	6a 40                	push   0x40
c001502d:	6a 00                	push   0x0
c001502f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015033:	50                   	push   eax
c0015034:	e8 cf b5 fe ff       	call   c0000608 <memset>
c0015039:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015040:	31 c0                	xor    eax,eax
c0015042:	83 c4 10             	add    esp,0x10
c0015045:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015047:	84 c9                	test   cl,cl
c0015049:	0f 84 bb 00 00 00    	je     c001510a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001504f:	3d c7 00 00 00       	cmp    eax,0xc7
c0015054:	0f 8f b0 00 00 00    	jg     c001510a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001505a:	80 f9 0a             	cmp    cl,0xa
c001505d:	0f 85 98 00 00 00    	jne    c00150fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015063:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015068:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001506c:	a8 df                	test   al,0xdf
c001506e:	0f 94 c1             	sete   cl
c0015071:	3c 23                	cmp    al,0x23
c0015073:	0f 94 c2             	sete   dl
c0015076:	08 d1                	or     cl,dl
c0015078:	75 4a                	jne    c00150c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001507a:	8d 50 f7             	lea    edx,[eax-0x9]
c001507d:	80 fa 01             	cmp    dl,0x1
c0015080:	76 42                	jbe    c00150c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015082:	3c 5b                	cmp    al,0x5b
c0015084:	75 42                	jne    c00150c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015086:	80 fb 40             	cmp    bl,0x40
c0015089:	75 39                	jne    c00150c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001508b:	83 ec 0c             	sub    esp,0xc
c001508e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015092:	52                   	push   edx
c0015093:	e8 8d b5 fe ff       	call   c0000625 <strlen>
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	83 f8 3f             	cmp    eax,0x3f
c001509e:	77 6a                	ja     c001510a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150a0:	50                   	push   eax
c00150a1:	50                   	push   eax
c00150a2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00150a6:	52                   	push   edx
c00150a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00150ab:	52                   	push   edx
c00150ac:	e8 f6 b5 fe ff       	call   c00006a7 <strcpy>
c00150b1:	58                   	pop    eax
c00150b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00150b6:	52                   	push   edx
c00150b7:	e8 69 b5 fe ff       	call   c0000625 <strlen>
c00150bc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00150c1:	83 c4 10             	add    esp,0x10
c00150c4:	31 d2                	xor    edx,edx
c00150c6:	eb 3a                	jmp    c0015102 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00150c8:	80 fb 40             	cmp    bl,0x40
c00150cb:	74 06                	je     c00150d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00150cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00150d1:	eb 20                	jmp    c00150f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00150d3:	50                   	push   eax
c00150d4:	50                   	push   eax
c00150d5:	55                   	push   ebp
c00150d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00150da:	50                   	push   eax
c00150db:	e8 25 b6 fe ff       	call   c0000705 <strcmp>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	85 c0                	test   eax,eax
c00150e5:	75 dd                	jne    c00150c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150e7:	eb e4                	jmp    c00150cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00150e9:	8d 50 01             	lea    edx,[eax+0x1]
c00150ec:	80 f9 3d             	cmp    cl,0x3d
c00150ef:	74 1d                	je     c001510e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00150f1:	89 d0                	mov    eax,edx
c00150f3:	8a 08                	mov    cl,BYTE PTR [eax]
c00150f5:	84 c9                	test   cl,cl
c00150f7:	75 f0                	jne    c00150e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00150f9:	eb 0f                	jmp    c001510a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150fb:	8d 50 01             	lea    edx,[eax+0x1]
c00150fe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015102:	47                   	inc    edi
c0015103:	89 d0                	mov    eax,edx
c0015105:	e9 3b ff ff ff       	jmp    c0015045 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001510a:	31 c0                	xor    eax,eax
c001510c:	eb 33                	jmp    c0015141 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001510e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015112:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015115:	50                   	push   eax
c0015116:	50                   	push   eax
c0015117:	8d 44 24 60          	lea    eax,[esp+0x60]
c001511b:	50                   	push   eax
c001511c:	56                   	push   esi
c001511d:	e8 e3 b5 fe ff       	call   c0000705 <strcmp>
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	85 c0                	test   eax,eax
c0015127:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001512b:	75 97                	jne    c00150c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001512d:	51                   	push   ecx
c001512e:	51                   	push   ecx
c001512f:	52                   	push   edx
c0015130:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015137:	e8 6b b5 fe ff       	call   c00006a7 <strcpy>
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	b0 01                	mov    al,0x1
c0015141:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015147:	5b                   	pop    ebx
c0015148:	5e                   	pop    esi
c0015149:	5f                   	pop    edi
c001514a:	5d                   	pop    ebp
c001514b:	c3                   	ret    

c001514c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001514c:	57                   	push   edi
c001514d:	56                   	push   esi
c001514e:	53                   	push   ebx
c001514f:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015155:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c001515c:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015163:	53                   	push   ebx
c0015164:	e8 bc b4 fe ff       	call   c0000625 <strlen>
c0015169:	89 34 24             	mov    DWORD PTR [esp],esi
c001516c:	89 c7                	mov    edi,eax
c001516e:	e8 b2 b4 fe ff       	call   c0000625 <strlen>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001517a:	31 ff                	xor    edi,edi
c001517c:	3d ff 00 00 00       	cmp    eax,0xff
c0015181:	0f 87 18 01 00 00    	ja     c001529f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015187:	51                   	push   ecx
c0015188:	51                   	push   ecx
c0015189:	56                   	push   esi
c001518a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001518e:	56                   	push   esi
c001518f:	e8 13 b5 fe ff       	call   c00006a7 <strcpy>
c0015194:	58                   	pop    eax
c0015195:	5a                   	pop    edx
c0015196:	68 54 1e 02 c0       	push   0xc0021e54
c001519b:	56                   	push   esi
c001519c:	e8 ca b5 fe ff       	call   c000076b <strcat>
c00151a1:	59                   	pop    ecx
c00151a2:	58                   	pop    eax
c00151a3:	53                   	push   ebx
c00151a4:	56                   	push   esi
c00151a5:	e8 c1 b5 fe ff       	call   c000076b <strcat>
c00151aa:	58                   	pop    eax
c00151ab:	5a                   	pop    edx
c00151ac:	68 2e 1a 02 c0       	push   0xc0021a2e
c00151b1:	56                   	push   esi
c00151b2:	e8 b4 b5 fe ff       	call   c000076b <strcat>
c00151b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00151be:	e8 81 9d ff ff       	call   c000ef44 <operator new(unsigned long)>
c00151c3:	83 c4 0c             	add    esp,0xc
c00151c6:	89 c3                	mov    ebx,eax
c00151c8:	ff 35 14 4c 02 c0    	push   DWORD PTR ds:0xc0024c14
c00151ce:	56                   	push   esi
c00151cf:	50                   	push   eax
c00151d0:	e8 8d a3 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c00151d5:	59                   	pop    ecx
c00151d6:	5e                   	pop    esi
c00151d7:	6a 01                	push   0x1
c00151d9:	53                   	push   ebx
c00151da:	e8 e7 a3 ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	85 c0                	test   eax,eax
c00151e4:	74 08                	je     c00151ee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c00151e6:	83 ec 0c             	sub    esp,0xc
c00151e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151eb:	53                   	push   ebx
c00151ec:	eb 2e                	jmp    c001521c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00151ee:	52                   	push   edx
c00151ef:	8d 44 24 07          	lea    eax,[esp+0x7]
c00151f3:	50                   	push   eax
c00151f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151f8:	50                   	push   eax
c00151f9:	53                   	push   ebx
c00151fa:	e8 73 a6 ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c00151ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015203:	83 c4 10             	add    esp,0x10
c0015206:	89 c1                	mov    ecx,eax
c0015208:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001520c:	75 13                	jne    c0015221 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c001520e:	83 ec 0c             	sub    esp,0xc
c0015211:	53                   	push   ebx
c0015212:	e8 0d a4 ff ff       	call   c000f624 <File::close()>
c0015217:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015219:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001521c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001521f:	eb 7b                	jmp    c001529c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	50                   	push   eax
c0015225:	e8 2c 6a ff ff       	call   c000bc56 <malloc>
c001522a:	89 c6                	mov    esi,eax
c001522c:	58                   	pop    eax
c001522d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001522f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015233:	52                   	push   edx
c0015234:	56                   	push   esi
c0015235:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001523d:	53                   	push   ebx
c001523e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015241:	83 c4 20             	add    esp,0x20
c0015244:	85 c0                	test   eax,eax
c0015246:	75 0a                	jne    c0015252 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001524c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015250:	74 18                	je     c001526a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015252:	83 ec 0c             	sub    esp,0xc
c0015255:	31 ff                	xor    edi,edi
c0015257:	53                   	push   ebx
c0015258:	e8 c7 a3 ff ff       	call   c000f624 <File::close()>
c001525d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001525f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	eb 35                	jmp    c001529f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001526a:	83 ec 0c             	sub    esp,0xc
c001526d:	53                   	push   ebx
c001526e:	e8 b1 a3 ff ff       	call   c000f624 <File::close()>
c0015273:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015278:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001527b:	83 c4 0c             	add    esp,0xc
c001527e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015285:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001528c:	56                   	push   esi
c001528d:	e8 62 fd ff ff       	call   c0014ff4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015292:	89 34 24             	mov    DWORD PTR [esp],esi
c0015295:	89 c7                	mov    edi,eax
c0015297:	e8 ca 69 ff ff       	call   c000bc66 <free>
c001529c:	83 c4 10             	add    esp,0x10
c001529f:	81 c4 10 01 00 00    	add    esp,0x110
c00152a5:	89 f8                	mov    eax,edi
c00152a7:	5b                   	pop    ebx
c00152a8:	5e                   	pop    esi
c00152a9:	5f                   	pop    edi
c00152aa:	c3                   	ret    

c00152ab <Reg::getLine(char*, char*, char*)>:
c00152ab:	57                   	push   edi
c00152ac:	56                   	push   esi
c00152ad:	53                   	push   ebx
c00152ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152b6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00152ba:	57                   	push   edi
c00152bb:	56                   	push   esi
c00152bc:	53                   	push   ebx
c00152bd:	68 33 1a 02 c0       	push   0xc0021a33
c00152c2:	e8 85 fe ff ff       	call   c001514c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	84 c0                	test   al,al
c00152cc:	75 10                	jne    c00152de <Reg::getLine(char*, char*, char*)+0x33>
c00152ce:	57                   	push   edi
c00152cf:	56                   	push   esi
c00152d0:	53                   	push   ebx
c00152d1:	68 58 1a 02 c0       	push   0xc0021a58
c00152d6:	e8 71 fe ff ff       	call   c001514c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	5b                   	pop    ebx
c00152df:	5e                   	pop    esi
c00152e0:	5f                   	pop    edi
c00152e1:	c3                   	ret    

c00152e2 <Reg::readInt(char*, char*, int*)>:
c00152e2:	55                   	push   ebp
c00152e3:	57                   	push   edi
c00152e4:	56                   	push   esi
c00152e5:	53                   	push   ebx
c00152e6:	81 ec f0 00 00 00    	sub    esp,0xf0
c00152ec:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00152f0:	57                   	push   edi
c00152f1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152f8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152ff:	e8 a7 ff ff ff       	call   c00152ab <Reg::getLine(char*, char*, char*)>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	84 c0                	test   al,al
c0015309:	0f 84 b3 00 00 00    	je     c00153c2 <Reg::readInt(char*, char*, int*)+0xe0>
c001530f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015313:	80 fa 2b             	cmp    dl,0x2b
c0015316:	74 0c                	je     c0015324 <Reg::readInt(char*, char*, int*)+0x42>
c0015318:	80 fa 2d             	cmp    dl,0x2d
c001531b:	75 0e                	jne    c001532b <Reg::readInt(char*, char*, int*)+0x49>
c001531d:	ba 01 00 00 00       	mov    edx,0x1
c0015322:	eb 0b                	jmp    c001532f <Reg::readInt(char*, char*, int*)+0x4d>
c0015324:	ba 01 00 00 00       	mov    edx,0x1
c0015329:	eb 02                	jmp    c001532d <Reg::readInt(char*, char*, int*)+0x4b>
c001532b:	31 d2                	xor    edx,edx
c001532d:	31 c0                	xor    eax,eax
c001532f:	be 0a 00 00 00       	mov    esi,0xa
c0015334:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015339:	75 20                	jne    c001535b <Reg::readInt(char*, char*, int*)+0x79>
c001533b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001533f:	80 f9 78             	cmp    cl,0x78
c0015342:	75 0a                	jne    c001534e <Reg::readInt(char*, char*, int*)+0x6c>
c0015344:	83 c2 02             	add    edx,0x2
c0015347:	be 10 00 00 00       	mov    esi,0x10
c001534c:	eb 0d                	jmp    c001535b <Reg::readInt(char*, char*, int*)+0x79>
c001534e:	80 f9 62             	cmp    cl,0x62
c0015351:	75 08                	jne    c001535b <Reg::readInt(char*, char*, int*)+0x79>
c0015353:	83 c2 02             	add    edx,0x2
c0015356:	be 02 00 00 00       	mov    esi,0x2
c001535b:	01 d7                	add    edi,edx
c001535d:	31 d2                	xor    edx,edx
c001535f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015361:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015365:	80 fb 0d             	cmp    bl,0xd
c0015368:	0f 94 c3             	sete   bl
c001536b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015370:	0f 94 c1             	sete   cl
c0015373:	08 cb                	or     bl,cl
c0015375:	75 3a                	jne    c00153b1 <Reg::readInt(char*, char*, int*)+0xcf>
c0015377:	0f af d6             	imul   edx,esi
c001537a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001537f:	83 fe 10             	cmp    esi,0x10
c0015382:	75 26                	jne    c00153aa <Reg::readInt(char*, char*, int*)+0xc8>
c0015384:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015388:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001538b:	89 e9                	mov    ecx,ebp
c001538d:	80 f9 05             	cmp    cl,0x5
c0015390:	77 06                	ja     c0015398 <Reg::readInt(char*, char*, int*)+0xb6>
c0015392:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015396:	eb 16                	jmp    c00153ae <Reg::readInt(char*, char*, int*)+0xcc>
c0015398:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001539c:	83 e9 61             	sub    ecx,0x61
c001539f:	80 f9 05             	cmp    cl,0x5
c00153a2:	77 06                	ja     c00153aa <Reg::readInt(char*, char*, int*)+0xc8>
c00153a4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00153a8:	eb 04                	jmp    c00153ae <Reg::readInt(char*, char*, int*)+0xcc>
c00153aa:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00153ae:	47                   	inc    edi
c00153af:	eb ae                	jmp    c001535f <Reg::readInt(char*, char*, int*)+0x7d>
c00153b1:	84 c0                	test   al,al
c00153b3:	74 02                	je     c00153b7 <Reg::readInt(char*, char*, int*)+0xd5>
c00153b5:	f7 da                	neg    edx
c00153b7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00153be:	89 10                	mov    DWORD PTR [eax],edx
c00153c0:	88 d8                	mov    al,bl
c00153c2:	81 c4 ec 00 00 00    	add    esp,0xec
c00153c8:	5b                   	pop    ebx
c00153c9:	5e                   	pop    esi
c00153ca:	5f                   	pop    edi
c00153cb:	5d                   	pop    ebp
c00153cc:	c3                   	ret    

c00153cd <Reg::readString(char*, char*, char*, int)>:
c00153cd:	57                   	push   edi
c00153ce:	56                   	push   esi
c00153cf:	53                   	push   ebx
c00153d0:	81 ec d4 00 00 00    	sub    esp,0xd4
c00153d6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00153dd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00153e1:	57                   	push   edi
c00153e2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153e9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153f0:	e8 b6 fe ff ff       	call   c00152ab <Reg::getLine(char*, char*, char*)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	89 c6                	mov    esi,eax
c00153fa:	84 c0                	test   al,al
c00153fc:	74 44                	je     c0015442 <Reg::readString(char*, char*, char*, int)+0x75>
c00153fe:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015405:	31 c0                	xor    eax,eax
c0015407:	4a                   	dec    edx
c0015408:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001540b:	84 c9                	test   cl,cl
c001540d:	74 0f                	je     c001541e <Reg::readString(char*, char*, char*, int)+0x51>
c001540f:	39 c2                	cmp    edx,eax
c0015411:	7e 0b                	jle    c001541e <Reg::readString(char*, char*, char*, int)+0x51>
c0015413:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015416:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001541b:	40                   	inc    eax
c001541c:	eb ea                	jmp    c0015408 <Reg::readString(char*, char*, char*, int)+0x3b>
c001541e:	83 ec 0c             	sub    esp,0xc
c0015421:	53                   	push   ebx
c0015422:	e8 fe b1 fe ff       	call   c0000625 <strlen>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001542f:	75 11                	jne    c0015442 <Reg::readString(char*, char*, char*, int)+0x75>
c0015431:	83 ec 0c             	sub    esp,0xc
c0015434:	53                   	push   ebx
c0015435:	e8 eb b1 fe ff       	call   c0000625 <strlen>
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015442:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015448:	89 f0                	mov    eax,esi
c001544a:	5b                   	pop    ebx
c001544b:	5e                   	pop    esi
c001544c:	5f                   	pop    edi
c001544d:	c3                   	ret    

c001544e <Reg::readBool(char*, char*, bool*)>:
c001544e:	83 ec 20             	sub    esp,0x20
c0015451:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015455:	50                   	push   eax
c0015456:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001545a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001545e:	e8 7f fe ff ff       	call   c00152e2 <Reg::readInt(char*, char*, int*)>
c0015463:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015468:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001546c:	0f 95 02             	setne  BYTE PTR [edx]
c001546f:	83 c4 2c             	add    esp,0x2c
c0015472:	c3                   	ret    

c0015473 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015473:	53                   	push   ebx
c0015474:	83 ec 1c             	sub    esp,0x1c
c0015477:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001547b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001547f:	50                   	push   eax
c0015480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015488:	e8 c1 ff ff ff       	call   c001544e <Reg::readBool(char*, char*, bool*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	84 c0                	test   al,al
c0015492:	74 04                	je     c0015498 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015494:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015498:	88 d8                	mov    al,bl
c001549a:	83 c4 18             	add    esp,0x18
c001549d:	5b                   	pop    ebx
c001549e:	c3                   	ret    

c001549f <Reg::readIntWithDefault(char*, char*, int)>:
c001549f:	53                   	push   ebx
c00154a0:	83 ec 1c             	sub    esp,0x1c
c00154a3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00154a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00154ab:	50                   	push   eax
c00154ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154b4:	e8 29 fe ff ff       	call   c00152e2 <Reg::readInt(char*, char*, int*)>
c00154b9:	83 c4 10             	add    esp,0x10
c00154bc:	84 c0                	test   al,al
c00154be:	74 04                	je     c00154c4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00154c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00154c4:	89 d8                	mov    eax,ebx
c00154c6:	83 c4 18             	add    esp,0x18
c00154c9:	5b                   	pop    ebx
c00154ca:	c3                   	ret    

c00154cb <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00154cb:	56                   	push   esi
c00154cc:	53                   	push   ebx
c00154cd:	51                   	push   ecx
c00154ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00154d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154da:	56                   	push   esi
c00154db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154e3:	e8 e5 fe ff ff       	call   c00153cd <Reg::readString(char*, char*, char*, int)>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	84 c0                	test   al,al
c00154ed:	74 02                	je     c00154f1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00154ef:	89 f3                	mov    ebx,esi
c00154f1:	89 d8                	mov    eax,ebx
c00154f3:	5a                   	pop    edx
c00154f4:	5b                   	pop    ebx
c00154f5:	5e                   	pop    esi
c00154f6:	c3                   	ret    

c00154f7 <Sys::exit(regs*)>:
c00154f7:	83 ec 18             	sub    esp,0x18
c00154fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015501:	e8 14 33 00 00       	call   c001881a <terminateTask(int)>
c0015506:	83 c8 ff             	or     eax,0xffffffff
c0015509:	83 c4 1c             	add    esp,0x1c
c001550c:	89 c2                	mov    edx,eax
c001550e:	c3                   	ret    

c001550f <Sys::loadDLL(regs*)>:
c001550f:	56                   	push   esi
c0015510:	53                   	push   ebx
c0015511:	31 d2                	xor    edx,edx
c0015513:	51                   	push   ecx
c0015514:	b8 01 00 00 00       	mov    eax,0x1
c0015519:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001551d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015521:	74 7d                	je     c00155a0 <Sys::loadDLL(regs*)+0x91>
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	68 14 01 00 00       	push   0x114
c001552b:	e8 14 9a ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015530:	83 c4 0c             	add    esp,0xc
c0015533:	89 c3                	mov    ebx,eax
c0015535:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001553a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001553d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015540:	53                   	push   ebx
c0015541:	e8 1c a0 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0015546:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015549:	e8 e6 a2 ff ff       	call   c000f834 <File::exists()>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	84 c0                	test   al,al
c0015553:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015555:	75 11                	jne    c0015568 <Sys::loadDLL(regs*)+0x59>
c0015557:	83 ec 0c             	sub    esp,0xc
c001555a:	53                   	push   ebx
c001555b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	b8 03 00 00 00       	mov    eax,0x3
c0015566:	eb 36                	jmp    c001559e <Sys::loadDLL(regs*)+0x8f>
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	53                   	push   ebx
c001556c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001556f:	58                   	pop    eax
c0015570:	5a                   	pop    edx
c0015571:	6a 00                	push   0x0
c0015573:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015576:	e8 2c 21 00 00       	call   c00176a7 <Thr::loadDLL(char const*, bool)>
c001557b:	83 c4 10             	add    esp,0x10
c001557e:	89 c1                	mov    ecx,eax
c0015580:	31 d2                	xor    edx,edx
c0015582:	b8 04 00 00 00       	mov    eax,0x4
c0015587:	85 c9                	test   ecx,ecx
c0015589:	74 15                	je     c00155a0 <Sys::loadDLL(regs*)+0x91>
c001558b:	53                   	push   ebx
c001558c:	53                   	push   ebx
c001558d:	ff 35 c8 37 02 c0    	push   DWORD PTR ds:0xc00237c8
c0015593:	51                   	push   ecx
c0015594:	e8 61 22 00 00       	call   c00177fa <Thr::executeDLL(unsigned long, void*)>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	31 c0                	xor    eax,eax
c001559e:	31 d2                	xor    edx,edx
c00155a0:	59                   	pop    ecx
c00155a1:	5b                   	pop    ebx
c00155a2:	5e                   	pop    esi
c00155a3:	c3                   	ret    

c00155a4 <Sys::read(regs*)>:
c00155a4:	57                   	push   edi
c00155a5:	56                   	push   esi
c00155a6:	53                   	push   ebx
c00155a7:	83 ec 10             	sub    esp,0x10
c00155aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00155b1:	83 f8 02             	cmp    eax,0x2
c00155b4:	77 10                	ja     c00155c6 <Sys::read(regs*)+0x22>
c00155b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155be:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155c4:	eb 0e                	jmp    c00155d4 <Sys::read(regs*)+0x30>
c00155c6:	83 ec 0c             	sub    esp,0xc
c00155c9:	50                   	push   eax
c00155ca:	e8 60 86 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	89 c1                	mov    ecx,eax
c00155d4:	83 c8 ff             	or     eax,0xffffffff
c00155d7:	85 c9                	test   ecx,ecx
c00155d9:	89 c2                	mov    edx,eax
c00155db:	74 28                	je     c0015605 <Sys::read(regs*)+0x61>
c00155dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155e5:	31 ff                	xor    edi,edi
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155ec:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155f0:	52                   	push   edx
c00155f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155f4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155f7:	57                   	push   edi
c00155f8:	56                   	push   esi
c00155f9:	51                   	push   ecx
c00155fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015601:	83 c4 20             	add    esp,0x20
c0015604:	99                   	cdq    
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	5b                   	pop    ebx
c0015609:	5e                   	pop    esi
c001560a:	5f                   	pop    edi
c001560b:	c3                   	ret    

c001560c <Sys::sbrk(regs*)>:
c001560c:	56                   	push   esi
c001560d:	53                   	push   ebx
c001560e:	50                   	push   eax
c001560f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001561b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001561e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015624:	85 db                	test   ebx,ebx
c0015626:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015629:	74 02                	je     c001562d <Sys::sbrk(regs*)+0x21>
c001562b:	79 06                	jns    c0015633 <Sys::sbrk(regs*)+0x27>
c001562d:	89 f0                	mov    eax,esi
c001562f:	31 d2                	xor    edx,edx
c0015631:	eb 2a                	jmp    c001565d <Sys::sbrk(regs*)+0x51>
c0015633:	83 c8 ff             	or     eax,0xffffffff
c0015636:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001563c:	89 c2                	mov    edx,eax
c001563e:	77 1d                	ja     c001565d <Sys::sbrk(regs*)+0x51>
c0015640:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015646:	50                   	push   eax
c0015647:	c1 ea 0c             	shr    edx,0xc
c001564a:	68 07 04 00 00       	push   0x407
c001564f:	52                   	push   edx
c0015650:	51                   	push   ecx
c0015651:	e8 94 8e ff ff       	call   c000e4ea <VAS::allocatePages(int, int)>
c0015656:	89 f0                	mov    eax,esi
c0015658:	31 d2                	xor    edx,edx
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	59                   	pop    ecx
c001565e:	5b                   	pop    ebx
c001565f:	5e                   	pop    esi
c0015660:	c3                   	ret    

c0015661 <Sys::write(regs*)>:
c0015661:	57                   	push   edi
c0015662:	56                   	push   esi
c0015663:	53                   	push   ebx
c0015664:	83 ec 18             	sub    esp,0x18
c0015667:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001566b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001566e:	68 73 1a 02 c0       	push   0xc0021a73
c0015673:	e8 bb 99 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015678:	83 c4 10             	add    esp,0x10
c001567b:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001567f:	77 10                	ja     c0015691 <Sys::write(regs*)+0x30>
c0015681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015689:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001568f:	eb 1b                	jmp    c00156ac <Sys::write(regs*)+0x4b>
c0015691:	83 ec 0c             	sub    esp,0xc
c0015694:	68 92 1a 02 c0       	push   0xc0021a92
c0015699:	e8 95 99 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001569e:	58                   	pop    eax
c001569f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00156a2:	e8 88 85 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	89 c1                	mov    ecx,eax
c00156ac:	83 c8 ff             	or     eax,0xffffffff
c00156af:	85 c9                	test   ecx,ecx
c00156b1:	89 c2                	mov    edx,eax
c00156b3:	74 28                	je     c00156dd <Sys::write(regs*)+0x7c>
c00156b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156bd:	31 ff                	xor    edi,edi
c00156bf:	83 ec 0c             	sub    esp,0xc
c00156c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00156c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00156c8:	52                   	push   edx
c00156c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156cc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00156cf:	57                   	push   edi
c00156d0:	56                   	push   esi
c00156d1:	51                   	push   ecx
c00156d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00156d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00156d9:	83 c4 20             	add    esp,0x20
c00156dc:	99                   	cdq    
c00156dd:	83 c4 10             	add    esp,0x10
c00156e0:	5b                   	pop    ebx
c00156e1:	5e                   	pop    esi
c00156e2:	5f                   	pop    edi
c00156e3:	c3                   	ret    

c00156e4 <Sys::yield(regs*)>:
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	e8 18 25 00 00       	call   c0017c04 <lockScheduler()>
c00156ec:	e8 47 28 00 00       	call   c0017f38 <schedule()>
c00156f1:	e8 10 25 00 00       	call   c0017c06 <unlockScheduler()>
c00156f6:	31 c0                	xor    eax,eax
c00156f8:	31 d2                	xor    edx,edx
c00156fa:	83 c4 0c             	add    esp,0xc
c00156fd:	c3                   	ret    

c00156fe <sysCallGetPID(regs*)>:
c00156fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015703:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015706:	8b 00                	mov    eax,DWORD PTR [eax]
c0015708:	99                   	cdq    
c0015709:	c3                   	ret    

c001570a <sysCallSeekDir(regs*)>:
c001570a:	31 c0                	xor    eax,eax
c001570c:	31 d2                	xor    edx,edx
c001570e:	c3                   	ret    

c001570f <sysCallTellDir(regs*)>:
c001570f:	31 c0                	xor    eax,eax
c0015711:	31 d2                	xor    edx,edx
c0015713:	c3                   	ret    

c0015714 <sysCallVerify(regs*)>:
c0015714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015718:	31 d2                	xor    edx,edx
c001571a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001571d:	c3                   	ret    

c001571e <sysCallGetArgc(regs*)>:
c001571e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015723:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015726:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001572c:	99                   	cdq    
c001572d:	c3                   	ret    

c001572e <sysFormatDisk(regs*)>:
c001572e:	56                   	push   esi
c001572f:	53                   	push   ebx
c0015730:	53                   	push   ebx
c0015731:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015735:	8b 1d 28 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023928
c001573b:	eb 25                	jmp    c0015762 <sysFormatDisk(regs*)+0x34>
c001573d:	83 ec 0c             	sub    esp,0xc
c0015740:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015743:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015745:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015748:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001574b:	50                   	push   eax
c001574c:	ff 34 85 c0 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc240]
c0015753:	53                   	push   ebx
c0015754:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015757:	83 c4 20             	add    esp,0x20
c001575a:	83 f8 08             	cmp    eax,0x8
c001575d:	75 12                	jne    c0015771 <sysFormatDisk(regs*)+0x43>
c001575f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015762:	85 db                	test   ebx,ebx
c0015764:	75 d7                	jne    c001573d <sysFormatDisk(regs*)+0xf>
c0015766:	59                   	pop    ecx
c0015767:	b8 03 00 00 00       	mov    eax,0x3
c001576c:	31 d2                	xor    edx,edx
c001576e:	5b                   	pop    ebx
c001576f:	5e                   	pop    esi
c0015770:	c3                   	ret    
c0015771:	85 c0                	test   eax,eax
c0015773:	74 1b                	je     c0015790 <sysFormatDisk(regs*)+0x62>
c0015775:	83 f8 09             	cmp    eax,0x9
c0015778:	74 0b                	je     c0015785 <sysFormatDisk(regs*)+0x57>
c001577a:	59                   	pop    ecx
c001577b:	b8 02 00 00 00       	mov    eax,0x2
c0015780:	31 d2                	xor    edx,edx
c0015782:	5b                   	pop    ebx
c0015783:	5e                   	pop    esi
c0015784:	c3                   	ret    
c0015785:	59                   	pop    ecx
c0015786:	b8 01 00 00 00       	mov    eax,0x1
c001578b:	31 d2                	xor    edx,edx
c001578d:	5b                   	pop    ebx
c001578e:	5e                   	pop    esi
c001578f:	c3                   	ret    
c0015790:	59                   	pop    ecx
c0015791:	31 c0                	xor    eax,eax
c0015793:	31 d2                	xor    edx,edx
c0015795:	5b                   	pop    ebx
c0015796:	5e                   	pop    esi
c0015797:	c3                   	ret    

c0015798 <sysSetDiskVolumeLabel(regs*)>:
c0015798:	56                   	push   esi
c0015799:	53                   	push   ebx
c001579a:	53                   	push   ebx
c001579b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001579f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157a2:	83 f8 19             	cmp    eax,0x19
c00157a5:	77 29                	ja     c00157d0 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157a7:	8b 0c 85 c0 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc240]
c00157ae:	85 c9                	test   ecx,ecx
c00157b0:	74 1e                	je     c00157d0 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157b2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00157b5:	85 d2                	test   edx,edx
c00157b7:	74 17                	je     c00157d0 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157b9:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00157bf:	8b 33                	mov    esi,DWORD PTR [ebx]
c00157c1:	52                   	push   edx
c00157c2:	50                   	push   eax
c00157c3:	51                   	push   ecx
c00157c4:	53                   	push   ebx
c00157c5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	99                   	cdq    
c00157cc:	59                   	pop    ecx
c00157cd:	5b                   	pop    ebx
c00157ce:	5e                   	pop    esi
c00157cf:	c3                   	ret    
c00157d0:	59                   	pop    ecx
c00157d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157db:	5b                   	pop    ebx
c00157dc:	5e                   	pop    esi
c00157dd:	c3                   	ret    

c00157de <sysGetDiskVolumeLabel(regs*)>:
c00157de:	57                   	push   edi
c00157df:	56                   	push   esi
c00157e0:	53                   	push   ebx
c00157e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00157e8:	83 fa 19             	cmp    edx,0x19
c00157eb:	77 34                	ja     c0015821 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157ed:	8b 0c 95 c0 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc240]
c00157f4:	85 c9                	test   ecx,ecx
c00157f6:	74 29                	je     c0015821 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00157fb:	85 db                	test   ebx,ebx
c00157fd:	74 22                	je     c0015821 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157ff:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015802:	85 c0                	test   eax,eax
c0015804:	74 1b                	je     c0015821 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015806:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001580c:	83 ec 0c             	sub    esp,0xc
c001580f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015811:	50                   	push   eax
c0015812:	53                   	push   ebx
c0015813:	52                   	push   edx
c0015814:	51                   	push   ecx
c0015815:	56                   	push   esi
c0015816:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015819:	83 c4 20             	add    esp,0x20
c001581c:	99                   	cdq    
c001581d:	5b                   	pop    ebx
c001581e:	5e                   	pop    esi
c001581f:	5f                   	pop    edi
c0015820:	c3                   	ret    
c0015821:	5b                   	pop    ebx
c0015822:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001582c:	5e                   	pop    esi
c001582d:	5f                   	pop    edi
c001582e:	c3                   	ret    

c001582f <sysShutdown(regs*)>:
c001582f:	83 ec 0c             	sub    esp,0xc
c0015832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015836:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015839:	85 c0                	test   eax,eax
c001583b:	74 18                	je     c0015855 <sysShutdown(regs*)+0x26>
c001583d:	83 f8 01             	cmp    eax,0x1
c0015840:	74 38                	je     c001587a <sysShutdown(regs*)+0x4b>
c0015842:	83 f8 02             	cmp    eax,0x2
c0015845:	74 24                	je     c001586b <sysShutdown(regs*)+0x3c>
c0015847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001584c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015851:	83 c4 0c             	add    esp,0xc
c0015854:	c3                   	ret    
c0015855:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001585a:	8b 10                	mov    edx,DWORD PTR [eax]
c001585c:	6a 00                	push   0x0
c001585e:	6a 00                	push   0x0
c0015860:	6a 00                	push   0x0
c0015862:	50                   	push   eax
c0015863:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	eb dc                	jmp    c0015847 <sysShutdown(regs*)+0x18>
c001586b:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0015870:	8b 10                	mov    edx,DWORD PTR [eax]
c0015872:	6a 00                	push   0x0
c0015874:	6a 00                	push   0x0
c0015876:	6a 01                	push   0x1
c0015878:	eb e8                	jmp    c0015862 <sysShutdown(regs*)+0x33>
c001587a:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c001587f:	85 c0                	test   eax,eax
c0015881:	74 02                	je     c0015885 <sysShutdown(regs*)+0x56>
c0015883:	ff d0                	call   eax
c0015885:	31 c0                	xor    eax,eax
c0015887:	31 d2                	xor    edx,edx
c0015889:	83 c4 0c             	add    esp,0xc
c001588c:	c3                   	ret    

c001588d <sysCallGetCwd(regs*)>:
c001588d:	83 ec 10             	sub    esp,0x10
c0015890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015894:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015897:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001589a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158a2:	e8 2c a0 ff ff       	call   c000f8d3 <getcwd(Process*, char*, int)>
c00158a7:	83 c4 1c             	add    esp,0x1c
c00158aa:	99                   	cdq    
c00158ab:	c3                   	ret    

c00158ac <sysCallSetCwd(regs*)>:
c00158ac:	83 ec 14             	sub    esp,0x14
c00158af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158bb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158be:	e8 3a a0 ff ff       	call   c000f8fd <setcwd(Process*, char*)>
c00158c3:	83 c4 1c             	add    esp,0x1c
c00158c6:	99                   	cdq    
c00158c7:	c3                   	ret    

c00158c8 <sysCallRealpath(regs*)>:
c00158c8:	83 ec 0c             	sub    esp,0xc
c00158cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158cf:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00158d2:	85 d2                	test   edx,edx
c00158d4:	74 07                	je     c00158dd <sysCallRealpath(regs*)+0x15>
c00158d6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00158d9:	85 c0                	test   eax,eax
c00158db:	75 0b                	jne    c00158e8 <sysCallRealpath(regs*)+0x20>
c00158dd:	b8 01 00 00 00       	mov    eax,0x1
c00158e2:	31 d2                	xor    edx,edx
c00158e4:	83 c4 0c             	add    esp,0xc
c00158e7:	c3                   	ret    
c00158e8:	51                   	push   ecx
c00158e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158ef:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158f2:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158f8:	51                   	push   ecx
c00158f9:	52                   	push   edx
c00158fa:	50                   	push   eax
c00158fb:	e8 b8 9a ff ff       	call   c000f3b8 <standardiseFiles(char*, char const*, char const*)>
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	31 c0                	xor    eax,eax
c0015905:	31 d2                	xor    edx,edx
c0015907:	83 c4 0c             	add    esp,0xc
c001590a:	c3                   	ret    

c001590b <sysCallReadDir(regs*)>:
c001590b:	53                   	push   ebx
c001590c:	83 ec 18             	sub    esp,0x18
c001590f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015913:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015916:	83 f8 02             	cmp    eax,0x2
c0015919:	76 53                	jbe    c001596e <sysCallReadDir(regs*)+0x63>
c001591b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001591e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0015924:	77 4f                	ja     c0015975 <sysCallReadDir(regs*)+0x6a>
c0015926:	83 ec 0c             	sub    esp,0xc
c0015929:	50                   	push   eax
c001592a:	e8 00 83 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	85 c0                	test   eax,eax
c0015934:	74 50                	je     c0015986 <sysCallReadDir(regs*)+0x7b>
c0015936:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	8b 10                	mov    edx,DWORD PTR [eax]
c0015943:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015947:	51                   	push   ecx
c0015948:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001594b:	6a 00                	push   0x0
c001594d:	68 10 01 00 00       	push   0x110
c0015952:	50                   	push   eax
c0015953:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015956:	83 c4 20             	add    esp,0x20
c0015959:	85 c0                	test   eax,eax
c001595b:	74 38                	je     c0015995 <sysCallReadDir(regs*)+0x8a>
c001595d:	83 f8 07             	cmp    eax,0x7
c0015960:	74 0c                	je     c001596e <sysCallReadDir(regs*)+0x63>
c0015962:	b8 02 00 00 00       	mov    eax,0x2
c0015967:	31 d2                	xor    edx,edx
c0015969:	83 c4 18             	add    esp,0x18
c001596c:	5b                   	pop    ebx
c001596d:	c3                   	ret    
c001596e:	b8 01 00 00 00       	mov    eax,0x1
c0015973:	eb f2                	jmp    c0015967 <sysCallReadDir(regs*)+0x5c>
c0015975:	83 ec 08             	sub    esp,0x8
c0015978:	52                   	push   edx
c0015979:	68 b4 1a 02 c0       	push   0xc0021ab4
c001597e:	e8 b0 96 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015983:	83 c4 10             	add    esp,0x10
c0015986:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001598b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015990:	83 c4 18             	add    esp,0x18
c0015993:	5b                   	pop    ebx
c0015994:	c3                   	ret    
c0015995:	31 c0                	xor    eax,eax
c0015997:	eb ce                	jmp    c0015967 <sysCallReadDir(regs*)+0x5c>

c0015999 <sysCallIsATTY(regs*)>:
c0015999:	83 ec 0c             	sub    esp,0xc
c001599c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159a3:	83 f8 02             	cmp    eax,0x2
c00159a6:	76 07                	jbe    c00159af <sysCallIsATTY(regs*)+0x16>
c00159a8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00159ad:	75 26                	jne    c00159d5 <sysCallIsATTY(regs*)+0x3c>
c00159af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159b7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159bd:	85 c0                	test   eax,eax
c00159bf:	74 24                	je     c00159e5 <sysCallIsATTY(regs*)+0x4c>
c00159c1:	83 ec 0c             	sub    esp,0xc
c00159c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00159c6:	50                   	push   eax
c00159c7:	ff 12                	call   DWORD PTR [edx]
c00159c9:	31 d2                	xor    edx,edx
c00159cb:	0f b6 c0             	movzx  eax,al
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	83 c4 0c             	add    esp,0xc
c00159d4:	c3                   	ret    
c00159d5:	83 ec 0c             	sub    esp,0xc
c00159d8:	50                   	push   eax
c00159d9:	e8 51 82 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	85 c0                	test   eax,eax
c00159e3:	75 dc                	jne    c00159c1 <sysCallIsATTY(regs*)+0x28>
c00159e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159ef:	83 c4 0c             	add    esp,0xc
c00159f2:	c3                   	ret    

c00159f3 <sysCallSeek(regs*)>:
c00159f3:	53                   	push   ebx
c00159f4:	83 ec 08             	sub    esp,0x8
c00159f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159fe:	83 f8 02             	cmp    eax,0x2
c0015a01:	76 4a                	jbe    c0015a4d <sysCallSeek(regs*)+0x5a>
c0015a03:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a08:	77 32                	ja     c0015a3c <sysCallSeek(regs*)+0x49>
c0015a0a:	83 ec 0c             	sub    esp,0xc
c0015a0d:	50                   	push   eax
c0015a0e:	e8 1c 82 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015a13:	83 c4 0c             	add    esp,0xc
c0015a16:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015a19:	31 db                	xor    ebx,ebx
c0015a1b:	53                   	push   ebx
c0015a1c:	51                   	push   ecx
c0015a1d:	50                   	push   eax
c0015a1e:	e8 61 9c ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0015a23:	83 c4 10             	add    esp,0x10
c0015a26:	85 c0                	test   eax,eax
c0015a28:	0f 95 c0             	setne  al
c0015a2b:	31 d2                	xor    edx,edx
c0015a2d:	0f b6 c0             	movzx  eax,al
c0015a30:	f7 d8                	neg    eax
c0015a32:	83 d2 00             	adc    edx,0x0
c0015a35:	83 c4 08             	add    esp,0x8
c0015a38:	f7 da                	neg    edx
c0015a3a:	5b                   	pop    ebx
c0015a3b:	c3                   	ret    
c0015a3c:	83 ec 08             	sub    esp,0x8
c0015a3f:	50                   	push   eax
c0015a40:	68 70 1b 02 c0       	push   0xc0021b70
c0015a45:	e8 e9 95 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a57:	83 c4 08             	add    esp,0x8
c0015a5a:	5b                   	pop    ebx
c0015a5b:	c3                   	ret    

c0015a5c <sysCallTell(regs*)>:
c0015a5c:	53                   	push   ebx
c0015a5d:	83 ec 08             	sub    esp,0x8
c0015a60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a67:	83 f8 02             	cmp    eax,0x2
c0015a6a:	76 5e                	jbe    c0015aca <sysCallTell(regs*)+0x6e>
c0015a6c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a71:	77 2d                	ja     c0015aa0 <sysCallTell(regs*)+0x44>
c0015a73:	83 ec 0c             	sub    esp,0xc
c0015a76:	50                   	push   eax
c0015a77:	e8 b3 81 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015a7c:	5a                   	pop    edx
c0015a7d:	59                   	pop    ecx
c0015a7e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a81:	50                   	push   eax
c0015a82:	e8 53 9c ff ff       	call   c000f6da <File::tell(unsigned long long*)>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	85 c0                	test   eax,eax
c0015a8c:	0f 95 c0             	setne  al
c0015a8f:	31 d2                	xor    edx,edx
c0015a91:	0f b6 c0             	movzx  eax,al
c0015a94:	f7 d8                	neg    eax
c0015a96:	83 d2 00             	adc    edx,0x0
c0015a99:	83 c4 08             	add    esp,0x8
c0015a9c:	f7 da                	neg    edx
c0015a9e:	5b                   	pop    ebx
c0015a9f:	c3                   	ret    
c0015aa0:	83 ec 08             	sub    esp,0x8
c0015aa3:	50                   	push   eax
c0015aa4:	68 8a 1b 02 c0       	push   0xc0021b8a
c0015aa9:	e8 85 95 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015aae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ab1:	83 c4 10             	add    esp,0x10
c0015ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015aba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ac1:	31 d2                	xor    edx,edx
c0015ac3:	31 c0                	xor    eax,eax
c0015ac5:	83 c4 08             	add    esp,0x8
c0015ac8:	5b                   	pop    ebx
c0015ac9:	c3                   	ret    
c0015aca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015acf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ad4:	83 c4 08             	add    esp,0x8
c0015ad7:	5b                   	pop    ebx
c0015ad8:	c3                   	ret    

c0015ad9 <sysCallSizeFromFilename(regs*)>:
c0015ad9:	57                   	push   edi
c0015ada:	56                   	push   esi
c0015adb:	53                   	push   ebx
c0015adc:	83 ec 10             	sub    esp,0x10
c0015adf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015ae3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015ae6:	83 fb 02             	cmp    ebx,0x2
c0015ae9:	0f 86 8a 00 00 00    	jbe    c0015b79 <sysCallSizeFromFilename(regs*)+0xa0>
c0015aef:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015af5:	77 56                	ja     c0015b4d <sysCallSizeFromFilename(regs*)+0x74>
c0015af7:	83 ec 0c             	sub    esp,0xc
c0015afa:	68 14 01 00 00       	push   0x114
c0015aff:	e8 40 94 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015b04:	83 c4 0c             	add    esp,0xc
c0015b07:	89 c7                	mov    edi,eax
c0015b09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b0e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b11:	53                   	push   ebx
c0015b12:	57                   	push   edi
c0015b13:	e8 4a 9a ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0015b18:	83 c4 0c             	add    esp,0xc
c0015b1b:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015b1f:	50                   	push   eax
c0015b20:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b23:	57                   	push   edi
c0015b24:	e8 49 9d ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c0015b29:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015b2c:	89 c3                	mov    ebx,eax
c0015b2e:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	31 c0                	xor    eax,eax
c0015b38:	85 db                	test   ebx,ebx
c0015b3a:	0f 95 c0             	setne  al
c0015b3d:	31 d2                	xor    edx,edx
c0015b3f:	f7 d8                	neg    eax
c0015b41:	83 d2 00             	adc    edx,0x0
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	f7 da                	neg    edx
c0015b49:	5b                   	pop    ebx
c0015b4a:	5e                   	pop    esi
c0015b4b:	5f                   	pop    edi
c0015b4c:	c3                   	ret    
c0015b4d:	83 ec 08             	sub    esp,0x8
c0015b50:	53                   	push   ebx
c0015b51:	68 a4 1b 02 c0       	push   0xc0021ba4
c0015b56:	e8 d8 94 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015b5b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b6e:	31 d2                	xor    edx,edx
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	31 c0                	xor    eax,eax
c0015b75:	5b                   	pop    ebx
c0015b76:	5e                   	pop    esi
c0015b77:	5f                   	pop    edi
c0015b78:	c3                   	ret    
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b81:	5b                   	pop    ebx
c0015b82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b87:	5e                   	pop    esi
c0015b88:	5f                   	pop    edi
c0015b89:	c3                   	ret    

c0015b8a <sysCallSize(regs*)>:
c0015b8a:	53                   	push   ebx
c0015b8b:	83 ec 18             	sub    esp,0x18
c0015b8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b95:	83 f8 02             	cmp    eax,0x2
c0015b98:	76 64                	jbe    c0015bfe <sysCallSize(regs*)+0x74>
c0015b9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b9f:	77 33                	ja     c0015bd4 <sysCallSize(regs*)+0x4a>
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	50                   	push   eax
c0015ba5:	e8 85 80 ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015baa:	83 c4 0c             	add    esp,0xc
c0015bad:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015bb1:	52                   	push   edx
c0015bb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015bb5:	50                   	push   eax
c0015bb6:	e8 b7 9c ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	85 c0                	test   eax,eax
c0015bc0:	0f 95 c0             	setne  al
c0015bc3:	31 d2                	xor    edx,edx
c0015bc5:	0f b6 c0             	movzx  eax,al
c0015bc8:	f7 d8                	neg    eax
c0015bca:	83 d2 00             	adc    edx,0x0
c0015bcd:	83 c4 18             	add    esp,0x18
c0015bd0:	f7 da                	neg    edx
c0015bd2:	5b                   	pop    ebx
c0015bd3:	c3                   	ret    
c0015bd4:	83 ec 08             	sub    esp,0x8
c0015bd7:	50                   	push   eax
c0015bd8:	68 a4 1b 02 c0       	push   0xc0021ba4
c0015bdd:	e8 51 94 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015be2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015bf5:	31 d2                	xor    edx,edx
c0015bf7:	31 c0                	xor    eax,eax
c0015bf9:	83 c4 18             	add    esp,0x18
c0015bfc:	5b                   	pop    ebx
c0015bfd:	c3                   	ret    
c0015bfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c08:	83 c4 18             	add    esp,0x18
c0015c0b:	5b                   	pop    ebx
c0015c0c:	c3                   	ret    

c0015c0d <sysCallClose(regs*)>:
c0015c0d:	53                   	push   ebx
c0015c0e:	83 ec 08             	sub    esp,0x8
c0015c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c18:	83 f8 02             	cmp    eax,0x2
c0015c1b:	76 50                	jbe    c0015c6d <sysCallClose(regs*)+0x60>
c0015c1d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015c22:	74 58                	je     c0015c7c <sysCallClose(regs*)+0x6f>
c0015c24:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015c29:	74 60                	je     c0015c8b <sysCallClose(regs*)+0x7e>
c0015c2b:	77 2f                	ja     c0015c5c <sysCallClose(regs*)+0x4f>
c0015c2d:	83 ec 0c             	sub    esp,0xc
c0015c30:	50                   	push   eax
c0015c31:	e8 f9 7f ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015c36:	89 c3                	mov    ebx,eax
c0015c38:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c3b:	e8 e4 99 ff ff       	call   c000f624 <File::close()>
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	85 db                	test   ebx,ebx
c0015c45:	74 0c                	je     c0015c53 <sysCallClose(regs*)+0x46>
c0015c47:	83 ec 0c             	sub    esp,0xc
c0015c4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c4c:	53                   	push   ebx
c0015c4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	31 c0                	xor    eax,eax
c0015c55:	31 d2                	xor    edx,edx
c0015c57:	83 c4 08             	add    esp,0x8
c0015c5a:	5b                   	pop    ebx
c0015c5b:	c3                   	ret    
c0015c5c:	83 ec 08             	sub    esp,0x8
c0015c5f:	50                   	push   eax
c0015c60:	68 d8 1a 02 c0       	push   0xc0021ad8
c0015c65:	e8 c9 93 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c77:	83 c4 08             	add    esp,0x8
c0015c7a:	5b                   	pop    ebx
c0015c7b:	c3                   	ret    
c0015c7c:	83 ec 0c             	sub    esp,0xc
c0015c7f:	68 bf 1b 02 c0       	push   0xc0021bbf
c0015c84:	e8 aa 93 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015c89:	eb c5                	jmp    c0015c50 <sysCallClose(regs*)+0x43>
c0015c8b:	83 ec 0c             	sub    esp,0xc
c0015c8e:	68 cd 1b 02 c0       	push   0xc0021bcd
c0015c93:	eb ef                	jmp    c0015c84 <sysCallClose(regs*)+0x77>

c0015c95 <sysCallOpenDir(regs*)>:
c0015c95:	56                   	push   esi
c0015c96:	53                   	push   ebx
c0015c97:	53                   	push   ebx
c0015c98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c9c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c9f:	85 f6                	test   esi,esi
c0015ca1:	74 51                	je     c0015cf4 <sysCallOpenDir(regs*)+0x5f>
c0015ca3:	83 ec 0c             	sub    esp,0xc
c0015ca6:	68 14 01 00 00       	push   0x114
c0015cab:	e8 94 92 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015cb0:	83 c4 0c             	add    esp,0xc
c0015cb3:	89 c6                	mov    esi,eax
c0015cb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cc0:	56                   	push   esi
c0015cc1:	e8 5e 9d ff ff       	call   c000fa24 <Directory::Directory(char const*, Process*)>
c0015cc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0015cc9:	e8 ba 9d ff ff       	call   c000fa88 <Directory::open()>
c0015cce:	83 c4 10             	add    esp,0x10
c0015cd1:	85 c0                	test   eax,eax
c0015cd3:	75 1f                	jne    c0015cf4 <sysCallOpenDir(regs*)+0x5f>
c0015cd5:	83 ec 0c             	sub    esp,0xc
c0015cd8:	56                   	push   esi
c0015cd9:	e8 9c 7c ff ff       	call   c000d97a <UnixFile::getFileDescriptor()>
c0015cde:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015ce1:	83 c4 10             	add    esp,0x10
c0015ce4:	89 02                	mov    DWORD PTR [edx],eax
c0015ce6:	c1 f8 1f             	sar    eax,0x1f
c0015ce9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015cec:	31 c0                	xor    eax,eax
c0015cee:	59                   	pop    ecx
c0015cef:	31 d2                	xor    edx,edx
c0015cf1:	5b                   	pop    ebx
c0015cf2:	5e                   	pop    esi
c0015cf3:	c3                   	ret    
c0015cf4:	59                   	pop    ecx
c0015cf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cff:	5b                   	pop    ebx
c0015d00:	5e                   	pop    esi
c0015d01:	c3                   	ret    

c0015d02 <sysCallMakeDir(regs*)>:
c0015d02:	56                   	push   esi
c0015d03:	53                   	push   ebx
c0015d04:	83 ec 10             	sub    esp,0x10
c0015d07:	68 14 01 00 00       	push   0x114
c0015d0c:	e8 33 92 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015d11:	83 c4 0c             	add    esp,0xc
c0015d14:	89 c3                	mov    ebx,eax
c0015d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015d1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d22:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d25:	53                   	push   ebx
c0015d26:	e8 f9 9c ff ff       	call   c000fa24 <Directory::Directory(char const*, Process*)>
c0015d2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d2e:	e8 35 9f ff ff       	call   c000fc68 <Directory::create()>
c0015d33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d36:	89 c6                	mov    esi,eax
c0015d38:	e8 a7 9d ff ff       	call   c000fae4 <Directory::close()>
c0015d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d45:	31 c0                	xor    eax,eax
c0015d47:	85 f6                	test   esi,esi
c0015d49:	0f 95 c0             	setne  al
c0015d4c:	31 d2                	xor    edx,edx
c0015d4e:	f7 d8                	neg    eax
c0015d50:	83 d2 00             	adc    edx,0x0
c0015d53:	83 c4 14             	add    esp,0x14
c0015d56:	f7 da                	neg    edx
c0015d58:	5b                   	pop    ebx
c0015d59:	5e                   	pop    esi
c0015d5a:	c3                   	ret    

c0015d5b <sysCallCloseDir(regs*)>:
c0015d5b:	53                   	push   ebx
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d66:	83 f8 02             	cmp    eax,0x2
c0015d69:	76 47                	jbe    c0015db2 <sysCallCloseDir(regs*)+0x57>
c0015d6b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d70:	77 2f                	ja     c0015da1 <sysCallCloseDir(regs*)+0x46>
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	50                   	push   eax
c0015d76:	e8 b4 7e ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015d7b:	89 c3                	mov    ebx,eax
c0015d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d80:	e8 5f 9d ff ff       	call   c000fae4 <Directory::close()>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	85 db                	test   ebx,ebx
c0015d8a:	74 0c                	je     c0015d98 <sysCallCloseDir(regs*)+0x3d>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d91:	53                   	push   ebx
c0015d92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	31 c0                	xor    eax,eax
c0015d9a:	31 d2                	xor    edx,edx
c0015d9c:	83 c4 08             	add    esp,0x8
c0015d9f:	5b                   	pop    ebx
c0015da0:	c3                   	ret    
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	50                   	push   eax
c0015da5:	68 00 1b 02 c0       	push   0xc0021b00
c0015daa:	e8 84 92 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015db7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dbc:	83 c4 08             	add    esp,0x8
c0015dbf:	5b                   	pop    ebx
c0015dc0:	c3                   	ret    

c0015dc1 <sysCallWait(regs*)>:
c0015dc1:	83 ec 10             	sub    esp,0x10
c0015dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dc8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015dcb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015dce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015dd1:	e8 4e 24 00 00       	call   c0018224 <waitTask(int, int*, int)>
c0015dd6:	83 c4 1c             	add    esp,0x1c
c0015dd9:	99                   	cdq    
c0015dda:	c3                   	ret    

c0015ddb <sysCallFork(regs*)>:
c0015ddb:	83 ec 18             	sub    esp,0x18
c0015dde:	68 db 1b 02 c0       	push   0xc0021bdb
c0015de3:	e8 4b 92 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015de8:	58                   	pop    eax
c0015de9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ded:	e8 00 22 00 00       	call   c0017ff2 <forkProcess(regs*)>
c0015df2:	83 c4 1c             	add    esp,0x1c
c0015df5:	99                   	cdq    
c0015df6:	c3                   	ret    

c0015df7 <sysCallExecve(regs*)>:
c0015df7:	53                   	push   ebx
c0015df8:	81 ec 24 01 00 00    	sub    esp,0x124
c0015dfe:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015e05:	68 e9 1b 02 c0       	push   0xc0021be9
c0015e0a:	e8 24 92 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0015e0f:	83 c4 0c             	add    esp,0xc
c0015e12:	68 00 01 00 00       	push   0x100
c0015e17:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e1b:	50                   	push   eax
c0015e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e21:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e24:	e8 aa 9a ff ff       	call   c000f8d3 <getcwd(Process*, char*, int)>
c0015e29:	83 c4 0c             	add    esp,0xc
c0015e2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e2f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e32:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015e35:	e8 1e 25 00 00       	call   c0018358 <execveProcess(char const*, char* const*, char* const*)>
c0015e3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e44:	81 c4 28 01 00 00    	add    esp,0x128
c0015e4a:	5b                   	pop    ebx
c0015e4b:	c3                   	ret    

c0015e4c <sysCallRmdir(regs*)>:
c0015e4c:	56                   	push   esi
c0015e4d:	53                   	push   ebx
c0015e4e:	83 ec 10             	sub    esp,0x10
c0015e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e55:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e58:	68 14 01 00 00       	push   0x114
c0015e5d:	e8 e2 90 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015e62:	83 c4 0c             	add    esp,0xc
c0015e65:	89 c3                	mov    ebx,eax
c0015e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e6f:	56                   	push   esi
c0015e70:	53                   	push   ebx
c0015e71:	e8 ec 96 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0015e76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e79:	e8 c0 98 ff ff       	call   c000f73e <File::unlink()>
c0015e7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e81:	89 c6                	mov    esi,eax
c0015e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e88:	31 c0                	xor    eax,eax
c0015e8a:	85 f6                	test   esi,esi
c0015e8c:	0f 95 c0             	setne  al
c0015e8f:	31 d2                	xor    edx,edx
c0015e91:	f7 d8                	neg    eax
c0015e93:	83 d2 00             	adc    edx,0x0
c0015e96:	83 c4 14             	add    esp,0x14
c0015e99:	f7 da                	neg    edx
c0015e9b:	5b                   	pop    ebx
c0015e9c:	5e                   	pop    esi
c0015e9d:	c3                   	ret    

c0015e9e <sysCallUnlink(regs*)>:
c0015e9e:	56                   	push   esi
c0015e9f:	53                   	push   ebx
c0015ea0:	83 ec 10             	sub    esp,0x10
c0015ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ea7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015eaa:	68 14 01 00 00       	push   0x114
c0015eaf:	e8 90 90 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0015eb4:	83 c4 0c             	add    esp,0xc
c0015eb7:	89 c3                	mov    ebx,eax
c0015eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ebe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ec1:	56                   	push   esi
c0015ec2:	53                   	push   ebx
c0015ec3:	e8 9a 96 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0015ec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ecb:	e8 6e 98 ff ff       	call   c000f73e <File::unlink()>
c0015ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ed3:	89 c6                	mov    esi,eax
c0015ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015eda:	31 c0                	xor    eax,eax
c0015edc:	85 f6                	test   esi,esi
c0015ede:	0f 95 c0             	setne  al
c0015ee1:	31 d2                	xor    edx,edx
c0015ee3:	f7 d8                	neg    eax
c0015ee5:	83 d2 00             	adc    edx,0x0
c0015ee8:	83 c4 14             	add    esp,0x14
c0015eeb:	f7 da                	neg    edx
c0015eed:	5b                   	pop    ebx
c0015eee:	5e                   	pop    esi
c0015eef:	c3                   	ret    

c0015ef0 <sysCallGetArgv(regs*)>:
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ef7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015efa:	85 c0                	test   eax,eax
c0015efc:	78 2b                	js     c0015f29 <sysCallGetArgv(regs*)+0x39>
c0015efe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f04:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015f07:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015f0d:	7d 1a                	jge    c0015f29 <sysCallGetArgv(regs*)+0x39>
c0015f0f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015f16:	85 c0                	test   eax,eax
c0015f18:	74 17                	je     c0015f31 <sysCallGetArgv(regs*)+0x41>
c0015f1a:	83 ec 08             	sub    esp,0x8
c0015f1d:	50                   	push   eax
c0015f1e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015f21:	e8 81 a7 fe ff       	call   c00006a7 <strcpy>
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	31 c0                	xor    eax,eax
c0015f2b:	31 d2                	xor    edx,edx
c0015f2d:	83 c4 0c             	add    esp,0xc
c0015f30:	c3                   	ret    
c0015f31:	b8 01 00 00 00       	mov    eax,0x1
c0015f36:	31 d2                	xor    edx,edx
c0015f38:	83 c4 0c             	add    esp,0xc
c0015f3b:	c3                   	ret    

c0015f3c <sysCallTTYName(regs*)>:
c0015f3c:	56                   	push   esi
c0015f3d:	53                   	push   ebx
c0015f3e:	53                   	push   ebx
c0015f3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f43:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015f46:	85 c0                	test   eax,eax
c0015f48:	74 5f                	je     c0015fa9 <sysCallTTYName(regs*)+0x6d>
c0015f4a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015f4d:	83 f8 02             	cmp    eax,0x2
c0015f50:	77 3e                	ja     c0015f90 <sysCallTTYName(regs*)+0x54>
c0015f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f5a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015f60:	85 db                	test   ebx,ebx
c0015f62:	74 45                	je     c0015fa9 <sysCallTTYName(regs*)+0x6d>
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f69:	53                   	push   ebx
c0015f6a:	ff 10                	call   DWORD PTR [eax]
c0015f6c:	83 c4 10             	add    esp,0x10
c0015f6f:	84 c0                	test   al,al
c0015f71:	74 41                	je     c0015fb4 <sysCallTTYName(regs*)+0x78>
c0015f73:	83 ec 08             	sub    esp,0x8
c0015f76:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015f7c:	53                   	push   ebx
c0015f7d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015f80:	e8 22 a7 fe ff       	call   c00006a7 <strcpy>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	31 c0                	xor    eax,eax
c0015f8a:	59                   	pop    ecx
c0015f8b:	31 d2                	xor    edx,edx
c0015f8d:	5b                   	pop    ebx
c0015f8e:	5e                   	pop    esi
c0015f8f:	c3                   	ret    
c0015f90:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f95:	74 bb                	je     c0015f52 <sysCallTTYName(regs*)+0x16>
c0015f97:	83 ec 0c             	sub    esp,0xc
c0015f9a:	50                   	push   eax
c0015f9b:	e8 8f 7c ff ff       	call   c000dc2f <getFromFileDescriptor(int)>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	89 c3                	mov    ebx,eax
c0015fa5:	85 db                	test   ebx,ebx
c0015fa7:	75 bb                	jne    c0015f64 <sysCallTTYName(regs*)+0x28>
c0015fa9:	59                   	pop    ecx
c0015faa:	b8 01 00 00 00       	mov    eax,0x1
c0015faf:	31 d2                	xor    edx,edx
c0015fb1:	5b                   	pop    ebx
c0015fb2:	5e                   	pop    esi
c0015fb3:	c3                   	ret    
c0015fb4:	59                   	pop    ecx
c0015fb5:	b8 02 00 00 00       	mov    eax,0x2
c0015fba:	31 d2                	xor    edx,edx
c0015fbc:	5b                   	pop    ebx
c0015fbd:	5e                   	pop    esi
c0015fbe:	c3                   	ret    

c0015fbf <sysCallGetEnv(regs*)>:
c0015fbf:	83 ec 0c             	sub    esp,0xc
c0015fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015fc9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015fcc:	85 c9                	test   ecx,ecx
c0015fce:	75 0c                	jne    c0015fdc <sysCallGetEnv(regs*)+0x1d>
c0015fd0:	85 d2                	test   edx,edx
c0015fd2:	74 14                	je     c0015fe8 <sysCallGetEnv(regs*)+0x29>
c0015fd4:	31 c0                	xor    eax,eax
c0015fd6:	31 d2                	xor    edx,edx
c0015fd8:	83 c4 0c             	add    esp,0xc
c0015fdb:	c3                   	ret    
c0015fdc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015fdf:	85 d2                	test   edx,edx
c0015fe1:	74 1b                	je     c0015ffe <sysCallGetEnv(regs*)+0x3f>
c0015fe3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015fe6:	eb ec                	jmp    c0015fd4 <sysCallGetEnv(regs*)+0x15>
c0015fe8:	83 ec 0c             	sub    esp,0xc
c0015feb:	68 24 1b 02 c0       	push   0xc0021b24
c0015ff0:	e8 30 a6 fe ff       	call   c0000625 <strlen>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	31 d2                	xor    edx,edx
c0015ffa:	83 c4 0c             	add    esp,0xc
c0015ffd:	c3                   	ret    
c0015ffe:	83 ec 08             	sub    esp,0x8
c0016001:	68 24 1b 02 c0       	push   0xc0021b24
c0016006:	50                   	push   eax
c0016007:	e8 9b a6 fe ff       	call   c00006a7 <strcpy>
c001600c:	83 c4 10             	add    esp,0x10
c001600f:	eb c3                	jmp    c0015fd4 <sysCallGetEnv(regs*)+0x15>

c0016011 <sysCallUSleep(regs*)>:
c0016011:	83 ec 14             	sub    esp,0x14
c0016014:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016019:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001601d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0016024:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0016027:	01 ca                	add    edx,ecx
c0016029:	52                   	push   edx
c001602a:	50                   	push   eax
c001602b:	e8 8d 22 00 00       	call   c00182bd <nanoSleep(unsigned long long)>
c0016030:	31 c0                	xor    eax,eax
c0016032:	31 d2                	xor    edx,edx
c0016034:	83 c4 1c             	add    esp,0x1c
c0016037:	c3                   	ret    

c0016038 <sysCallSpawn(regs*)>:
c0016038:	56                   	push   esi
c0016039:	53                   	push   ebx
c001603a:	53                   	push   ebx
c001603b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001603f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016042:	85 f6                	test   esi,esi
c0016044:	75 08                	jne    c001604e <sysCallSpawn(regs*)+0x16>
c0016046:	59                   	pop    ecx
c0016047:	31 c0                	xor    eax,eax
c0016049:	31 d2                	xor    edx,edx
c001604b:	5b                   	pop    ebx
c001604c:	5e                   	pop    esi
c001604d:	c3                   	ret    
c001604e:	83 ec 0c             	sub    esp,0xc
c0016051:	68 f9 1b 02 c0       	push   0xc0021bf9
c0016056:	e8 d8 8f ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001605b:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0016062:	e8 dd 8e ff ff       	call   c000ef44 <operator new(unsigned long)>
c0016067:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001606a:	89 c6                	mov    esi,eax
c001606c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016071:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016074:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016077:	56                   	push   esi
c0016078:	e8 2f 18 00 00       	call   c00178ac <Process::Process(char const*, Process*, char**)>
c001607d:	83 c4 20             	add    esp,0x20
c0016080:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016087:	75 bd                	jne    c0016046 <sysCallSpawn(regs*)+0xe>
c0016089:	83 ec 0c             	sub    esp,0xc
c001608c:	68 04 1c 02 c0       	push   0xc0021c04
c0016091:	e8 9d 8f ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0016096:	89 34 24             	mov    DWORD PTR [esp],esi
c0016099:	e8 74 1d 00 00       	call   c0017e12 <Process::createUserThread()>
c001609e:	8b 06                	mov    eax,DWORD PTR [esi]
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	99                   	cdq    
c00160a4:	59                   	pop    ecx
c00160a5:	5b                   	pop    ebx
c00160a6:	5e                   	pop    esi
c00160a7:	c3                   	ret    

c00160a8 <sysAppSettings(regs*)>:
c00160a8:	53                   	push   ebx
c00160a9:	83 ec 08             	sub    esp,0x8
c00160ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00160b3:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c00160b9:	25 e0 1f 00 00       	and    eax,0x1fe0
c00160be:	66 3d c0 09          	cmp    ax,0x9c0
c00160c2:	75 2f                	jne    c00160f3 <sysAppSettings(regs*)+0x4b>
c00160c4:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c00160ca:	83 e0 1f             	and    eax,0x1f
c00160cd:	3c 01                	cmp    al,0x1
c00160cf:	74 2e                	je     c00160ff <sysAppSettings(regs*)+0x57>
c00160d1:	3c 07                	cmp    al,0x7
c00160d3:	0f 84 bd 00 00 00    	je     c0016196 <sysAppSettings(regs*)+0xee>
c00160d9:	84 c0                	test   al,al
c00160db:	0f 84 dc 00 00 00    	je     c00161bd <sysAppSettings(regs*)+0x115>
c00160e1:	3c 08                	cmp    al,0x8
c00160e3:	74 6d                	je     c0016152 <sysAppSettings(regs*)+0xaa>
c00160e5:	0f b6 c0             	movzx  eax,al
c00160e8:	83 c4 08             	add    esp,0x8
c00160eb:	05 e8 03 00 00       	add    eax,0x3e8
c00160f0:	5b                   	pop    ebx
c00160f1:	99                   	cdq    
c00160f2:	c3                   	ret    
c00160f3:	b8 01 00 00 00       	mov    eax,0x1
c00160f8:	31 d2                	xor    edx,edx
c00160fa:	83 c4 08             	add    esp,0x8
c00160fd:	5b                   	pop    ebx
c00160fe:	c3                   	ret    
c00160ff:	51                   	push   ecx
c0016100:	68 00 01 00 00       	push   0x100
c0016105:	6a 00                	push   0x0
c0016107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001610c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001610f:	83 c0 0c             	add    eax,0xc
c0016112:	50                   	push   eax
c0016113:	e8 f0 a4 fe ff       	call   c0000608 <memset>
c0016118:	83 c4 0c             	add    esp,0xc
c001611b:	68 ff 00 00 00       	push   0xff
c0016120:	53                   	push   ebx
c0016121:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016126:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016129:	83 c0 0c             	add    eax,0xc
c001612c:	50                   	push   eax
c001612d:	e8 a0 a4 fe ff       	call   c00005d2 <memcpy>
c0016132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016137:	5b                   	pop    ebx
c0016138:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001613b:	5a                   	pop    edx
c001613c:	8d 50 0c             	lea    edx,[eax+0xc]
c001613f:	52                   	push   edx
c0016140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016146:	e8 2d 6c ff ff       	call   c000cd78 <VgaText::setTitle(char*)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	31 c0                	xor    eax,eax
c0016150:	eb a6                	jmp    c00160f8 <sysAppSettings(regs*)+0x50>
c0016152:	83 ec 08             	sub    esp,0x8
c0016155:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001615b:	83 e0 0f             	and    eax,0xf
c001615e:	50                   	push   eax
c001615f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016164:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001616d:	e8 f6 6b ff ff       	call   c000cd68 <VgaText::setTitleColour(VgaColour)>
c0016172:	58                   	pop    eax
c0016173:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016179:	5a                   	pop    edx
c001617a:	c1 e8 04             	shr    eax,0x4
c001617d:	83 e0 0f             	and    eax,0xf
c0016180:	50                   	push   eax
c0016181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016186:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001618f:	e8 c4 6b ff ff       	call   c000cd58 <VgaText::setTitleTextColour(VgaColour)>
c0016194:	eb b5                	jmp    c001614b <sysAppSettings(regs*)+0xa3>
c0016196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001619e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00161a4:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c00161aa:	c0 e8 06             	shr    al,0x6
c00161ad:	83 e0 01             	and    eax,0x1
c00161b0:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c00161b6:	31 c0                	xor    eax,eax
c00161b8:	e9 3b ff ff ff       	jmp    c00160f8 <sysAppSettings(regs*)+0x50>
c00161bd:	b8 02 00 00 00       	mov    eax,0x2
c00161c2:	e9 31 ff ff ff       	jmp    c00160f8 <sysAppSettings(regs*)+0x50>

c00161c7 <sysSetFatAttrib(regs*)>:
c00161c7:	57                   	push   edi
c00161c8:	56                   	push   esi
c00161c9:	53                   	push   ebx
c00161ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00161d4:	68 14 01 00 00       	push   0x114
c00161d9:	e8 66 8d ff ff       	call   c000ef44 <operator new(unsigned long)>
c00161de:	83 c4 0c             	add    esp,0xc
c00161e1:	89 c3                	mov    ebx,eax
c00161e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161eb:	57                   	push   edi
c00161ec:	53                   	push   ebx
c00161ed:	e8 70 93 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c00161f2:	83 c4 0c             	add    esp,0xc
c00161f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161f8:	0f b6 d4             	movzx  edx,ah
c00161fb:	0f b6 c0             	movzx  eax,al
c00161fe:	52                   	push   edx
c00161ff:	50                   	push   eax
c0016200:	53                   	push   ebx
c0016201:	e8 d2 95 ff ff       	call   c000f7d8 <File::chfatattr(unsigned char, unsigned char)>
c0016206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016209:	89 c6                	mov    esi,eax
c001620b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001620d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016210:	83 c4 10             	add    esp,0x10
c0016213:	31 c0                	xor    eax,eax
c0016215:	5b                   	pop    ebx
c0016216:	85 f6                	test   esi,esi
c0016218:	5e                   	pop    esi
c0016219:	0f 95 c0             	setne  al
c001621c:	5f                   	pop    edi
c001621d:	31 d2                	xor    edx,edx
c001621f:	f7 d8                	neg    eax
c0016221:	83 d2 00             	adc    edx,0x0
c0016224:	f7 da                	neg    edx
c0016226:	c3                   	ret    

c0016227 <sysPanic(regs*)>:
c0016227:	83 ec 18             	sub    esp,0x18
c001622a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001622e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016231:	e8 92 ea ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0016236:	c7 04 24 11 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c11
c001623d:	e8 86 ea ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0016242:	b8 01 00 00 00       	mov    eax,0x1
c0016247:	31 d2                	xor    edx,edx
c0016249:	83 c4 1c             	add    esp,0x1c
c001624c:	c3                   	ret    

c001624d <sysPipe(regs*)>:
c001624d:	57                   	push   edi
c001624e:	56                   	push   esi
c001624f:	53                   	push   ebx
c0016250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001625a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001625d:	6a 20                	push   0x20
c001625f:	e8 e0 8c ff ff       	call   c000ef44 <operator new(unsigned long)>
c0016264:	89 c3                	mov    ebx,eax
c0016266:	58                   	pop    eax
c0016267:	5a                   	pop    edx
c0016268:	68 00 50 00 00       	push   0x5000
c001626d:	53                   	push   ebx
c001626e:	e8 43 64 ff ff       	call   c000c6b6 <Pipe::Pipe(int)>
c0016273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016276:	e8 ff 76 ff ff       	call   c000d97a <UnixFile::getFileDescriptor()>
c001627b:	89 07                	mov    DWORD PTR [edi],eax
c001627d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016280:	e8 f5 76 ff ff       	call   c000d97a <UnixFile::getFileDescriptor()>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	89 06                	mov    DWORD PTR [esi],eax
c001628a:	31 d2                	xor    edx,edx
c001628c:	5b                   	pop    ebx
c001628d:	31 c0                	xor    eax,eax
c001628f:	5e                   	pop    esi
c0016290:	5f                   	pop    edi
c0016291:	c3                   	ret    

c0016292 <sysGetUnixTime(regs*)>:
c0016292:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0016297:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001629d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162a1:	e9 84 9c ff ff       	jmp    c000ff2a <Clock::timeInSecondsLocal()>

c00162a6 <string_ends_with(char const*, char const*)>:
c00162a6:	57                   	push   edi
c00162a7:	56                   	push   esi
c00162a8:	53                   	push   ebx
c00162a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00162b1:	83 ec 0c             	sub    esp,0xc
c00162b4:	53                   	push   ebx
c00162b5:	e8 6b a3 fe ff       	call   c0000625 <strlen>
c00162ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162bd:	89 c6                	mov    esi,eax
c00162bf:	e8 61 a3 fe ff       	call   c0000625 <strlen>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	39 c6                	cmp    esi,eax
c00162c9:	7d 06                	jge    c00162d1 <string_ends_with(char const*, char const*)+0x2b>
c00162cb:	5b                   	pop    ebx
c00162cc:	31 c0                	xor    eax,eax
c00162ce:	5e                   	pop    esi
c00162cf:	5f                   	pop    edi
c00162d0:	c3                   	ret    
c00162d1:	83 ec 08             	sub    esp,0x8
c00162d4:	29 c6                	sub    esi,eax
c00162d6:	57                   	push   edi
c00162d7:	01 f3                	add    ebx,esi
c00162d9:	53                   	push   ebx
c00162da:	e8 26 a4 fe ff       	call   c0000705 <strcmp>
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	85 c0                	test   eax,eax
c00162e4:	5b                   	pop    ebx
c00162e5:	0f 94 c0             	sete   al
c00162e8:	5e                   	pop    esi
c00162e9:	0f b6 c0             	movzx  eax,al
c00162ec:	5f                   	pop    edi
c00162ed:	c3                   	ret    

c00162ee <sysCallOpen(regs*)>:
c00162ee:	56                   	push   esi
c00162ef:	53                   	push   ebx
c00162f0:	81 ec 04 01 00 00    	sub    esp,0x104
c00162f6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162fd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016300:	85 d2                	test   edx,edx
c0016302:	0f 84 c1 00 00 00    	je     c00163c9 <sysCallOpen(regs*)+0xdb>
c0016308:	50                   	push   eax
c0016309:	68 20 1c 02 c0       	push   0xc0021c20
c001630e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016311:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016315:	56                   	push   esi
c0016316:	e8 9d 90 ff ff       	call   c000f3b8 <standardiseFiles(char*, char const*, char const*)>
c001631b:	89 34 24             	mov    DWORD PTR [esp],esi
c001631e:	e8 02 a3 fe ff       	call   c0000625 <strlen>
c0016323:	83 c4 10             	add    esp,0x10
c0016326:	48                   	dec    eax
c0016327:	74 1d                	je     c0016346 <sysCallOpen(regs*)+0x58>
c0016329:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001632c:	eb 0f                	jmp    c001633d <sysCallOpen(regs*)+0x4f>
c001632e:	80 fa 3a             	cmp    dl,0x3a
c0016331:	74 0f                	je     c0016342 <sysCallOpen(regs*)+0x54>
c0016333:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016337:	48                   	dec    eax
c0016338:	74 0c                	je     c0016346 <sysCallOpen(regs*)+0x58>
c001633a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001633d:	80 fa 2e             	cmp    dl,0x2e
c0016340:	75 ec                	jne    c001632e <sysCallOpen(regs*)+0x40>
c0016342:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016346:	83 ec 08             	sub    esp,0x8
c0016349:	68 24 1c 02 c0       	push   0xc0021c24
c001634e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016351:	e8 50 ff ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c0016356:	83 c4 10             	add    esp,0x10
c0016359:	85 c0                	test   eax,eax
c001635b:	75 2e                	jne    c001638b <sysCallOpen(regs*)+0x9d>
c001635d:	83 ec 08             	sub    esp,0x8
c0016360:	68 45 1c 02 c0       	push   0xc0021c45
c0016365:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016368:	e8 39 ff ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	85 c0                	test   eax,eax
c0016372:	75 17                	jne    c001638b <sysCallOpen(regs*)+0x9d>
c0016374:	83 ec 08             	sub    esp,0x8
c0016377:	68 25 1c 02 c0       	push   0xc0021c25
c001637c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001637f:	e8 81 a3 fe ff       	call   c0000705 <strcmp>
c0016384:	83 c4 10             	add    esp,0x10
c0016387:	85 c0                	test   eax,eax
c0016389:	75 51                	jne    c00163dc <sysCallOpen(regs*)+0xee>
c001638b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001638e:	83 ec 08             	sub    esp,0x8
c0016391:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016397:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001639e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163a1:	ff 30                	push   DWORD PTR [eax]
c00163a3:	68 29 1c 02 c0       	push   0xc0021c29
c00163a8:	e8 86 8c ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00163ad:	c7 04 24 38 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c38
c00163b4:	e8 7a 8c ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	81 c4 04 01 00 00    	add    esp,0x104
c00163c2:	31 c0                	xor    eax,eax
c00163c4:	31 d2                	xor    edx,edx
c00163c6:	5b                   	pop    ebx
c00163c7:	5e                   	pop    esi
c00163c8:	c3                   	ret    
c00163c9:	81 c4 04 01 00 00    	add    esp,0x104
c00163cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163d9:	5b                   	pop    ebx
c00163da:	5e                   	pop    esi
c00163db:	c3                   	ret    
c00163dc:	83 ec 08             	sub    esp,0x8
c00163df:	68 24 1c 02 c0       	push   0xc0021c24
c00163e4:	56                   	push   esi
c00163e5:	e8 bc fe ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	85 c0                	test   eax,eax
c00163ef:	75 9a                	jne    c001638b <sysCallOpen(regs*)+0x9d>
c00163f1:	83 ec 08             	sub    esp,0x8
c00163f4:	68 4a 1c 02 c0       	push   0xc0021c4a
c00163f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163fc:	e8 a5 fe ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c0016401:	83 c4 10             	add    esp,0x10
c0016404:	85 c0                	test   eax,eax
c0016406:	0f 85 d1 00 00 00    	jne    c00164dd <sysCallOpen(regs*)+0x1ef>
c001640c:	83 ec 08             	sub    esp,0x8
c001640f:	68 4f 1c 02 c0       	push   0xc0021c4f
c0016414:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016417:	e8 8a fe ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c001641c:	83 c4 10             	add    esp,0x10
c001641f:	85 c0                	test   eax,eax
c0016421:	0f 85 b6 00 00 00    	jne    c00164dd <sysCallOpen(regs*)+0x1ef>
c0016427:	83 ec 08             	sub    esp,0x8
c001642a:	68 4b 1c 02 c0       	push   0xc0021c4b
c001642f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016432:	e8 ce a2 fe ff       	call   c0000705 <strcmp>
c0016437:	83 c4 10             	add    esp,0x10
c001643a:	85 c0                	test   eax,eax
c001643c:	0f 84 9b 00 00 00    	je     c00164dd <sysCallOpen(regs*)+0x1ef>
c0016442:	83 ec 08             	sub    esp,0x8
c0016445:	68 4a 1c 02 c0       	push   0xc0021c4a
c001644a:	56                   	push   esi
c001644b:	e8 56 fe ff ff       	call   c00162a6 <string_ends_with(char const*, char const*)>
c0016450:	83 c4 10             	add    esp,0x10
c0016453:	85 c0                	test   eax,eax
c0016455:	0f 85 82 00 00 00    	jne    c00164dd <sysCallOpen(regs*)+0x1ef>
c001645b:	83 ec 0c             	sub    esp,0xc
c001645e:	68 14 01 00 00       	push   0x114
c0016463:	e8 dc 8a ff ff       	call   c000ef44 <operator new(unsigned long)>
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	89 c6                	mov    esi,eax
c001646d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016472:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016475:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016478:	56                   	push   esi
c0016479:	e8 e4 90 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c001647e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	0f b6 c2             	movzx  eax,dl
c0016487:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001648a:	89 d0                	mov    eax,edx
c001648c:	83 e0 01             	and    eax,0x1
c001648f:	f6 c2 02             	test   dl,0x2
c0016492:	74 03                	je     c0016497 <sysCallOpen(regs*)+0x1a9>
c0016494:	83 c8 02             	or     eax,0x2
c0016497:	f6 c2 04             	test   dl,0x4
c001649a:	74 03                	je     c001649f <sysCallOpen(regs*)+0x1b1>
c001649c:	83 c8 04             	or     eax,0x4
c001649f:	f6 c2 08             	test   dl,0x8
c00164a2:	74 03                	je     c00164a7 <sysCallOpen(regs*)+0x1b9>
c00164a4:	83 c8 0a             	or     eax,0xa
c00164a7:	83 e2 10             	and    edx,0x10
c00164aa:	74 03                	je     c00164af <sysCallOpen(regs*)+0x1c1>
c00164ac:	83 c8 12             	or     eax,0x12
c00164af:	83 ec 08             	sub    esp,0x8
c00164b2:	50                   	push   eax
c00164b3:	56                   	push   esi
c00164b4:	e8 0d 91 ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	85 c0                	test   eax,eax
c00164be:	0f 85 05 ff ff ff    	jne    c00163c9 <sysCallOpen(regs*)+0xdb>
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	56                   	push   esi
c00164c8:	e8 ad 74 ff ff       	call   c000d97a <UnixFile::getFileDescriptor()>
c00164cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00164d0:	89 02                	mov    DWORD PTR [edx],eax
c00164d2:	c1 f8 1f             	sar    eax,0x1f
c00164d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164d8:	e9 dc fe ff ff       	jmp    c00163b9 <sysCallOpen(regs*)+0xcb>
c00164dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00164e0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00164e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00164ed:	e9 ca fe ff ff       	jmp    c00163bc <sysCallOpen(regs*)+0xce>

c00164f2 <setupSystemCalls()>:
c00164f2:	c7 05 20 42 02 c0 e4 56 01 c0 	mov    DWORD PTR ds:0xc0024220,0xc00156e4
c00164fc:	c7 05 24 42 02 c0 f7 54 01 c0 	mov    DWORD PTR ds:0xc0024224,0xc00154f7
c0016506:	c7 05 28 42 02 c0 0c 56 01 c0 	mov    DWORD PTR ds:0xc0024228,0xc001560c
c0016510:	c7 05 2c 42 02 c0 61 56 01 c0 	mov    DWORD PTR ds:0xc002422c,0xc0015661
c001651a:	c7 05 30 42 02 c0 a4 55 01 c0 	mov    DWORD PTR ds:0xc0024230,0xc00155a4
c0016524:	c7 05 34 42 02 c0 fe 56 01 c0 	mov    DWORD PTR ds:0xc0024234,0xc00156fe
c001652e:	c7 05 38 42 02 c0 8d 58 01 c0 	mov    DWORD PTR ds:0xc0024238,0xc001588d
c0016538:	c7 05 3c 42 02 c0 ac 58 01 c0 	mov    DWORD PTR ds:0xc002423c,0xc00158ac
c0016542:	c7 05 44 42 02 c0 0d 5c 01 c0 	mov    DWORD PTR ds:0xc0024244,0xc0015c0d
c001654c:	c7 05 40 42 02 c0 ee 62 01 c0 	mov    DWORD PTR ds:0xc0024240,0xc00162ee
c0016556:	c7 05 48 42 02 c0 95 5c 01 c0 	mov    DWORD PTR ds:0xc0024248,0xc0015c95
c0016560:	c7 05 4c 42 02 c0 0b 59 01 c0 	mov    DWORD PTR ds:0xc002424c,0xc001590b
c001656a:	c7 05 50 42 02 c0 0a 57 01 c0 	mov    DWORD PTR ds:0xc0024250,0xc001570a
c0016574:	c7 05 54 42 02 c0 0f 57 01 c0 	mov    DWORD PTR ds:0xc0024254,0xc001570f
c001657e:	c7 05 58 42 02 c0 02 5d 01 c0 	mov    DWORD PTR ds:0xc0024258,0xc0015d02
c0016588:	c7 05 5c 42 02 c0 5b 5d 01 c0 	mov    DWORD PTR ds:0xc002425c,0xc0015d5b
c0016592:	c7 05 60 42 02 c0 f3 59 01 c0 	mov    DWORD PTR ds:0xc0024260,0xc00159f3
c001659c:	c7 05 64 42 02 c0 5c 5a 01 c0 	mov    DWORD PTR ds:0xc0024264,0xc0015a5c
c00165a6:	c7 05 68 42 02 c0 8a 5b 01 c0 	mov    DWORD PTR ds:0xc0024268,0xc0015b8a
c00165b0:	c7 05 6c 42 02 c0 14 57 01 c0 	mov    DWORD PTR ds:0xc002426c,0xc0015714
c00165ba:	c7 05 70 42 02 c0 c1 5d 01 c0 	mov    DWORD PTR ds:0xc0024270,0xc0015dc1
c00165c4:	c7 05 74 42 02 c0 db 5d 01 c0 	mov    DWORD PTR ds:0xc0024274,0xc0015ddb
c00165ce:	c7 05 78 42 02 c0 f7 5d 01 c0 	mov    DWORD PTR ds:0xc0024278,0xc0015df7
c00165d8:	c7 05 7c 42 02 c0 4c 5e 01 c0 	mov    DWORD PTR ds:0xc002427c,0xc0015e4c
c00165e2:	c7 05 80 42 02 c0 9e 5e 01 c0 	mov    DWORD PTR ds:0xc0024280,0xc0015e9e
c00165ec:	c7 05 84 42 02 c0 1e 57 01 c0 	mov    DWORD PTR ds:0xc0024284,0xc001571e
c00165f6:	c7 05 88 42 02 c0 f0 5e 01 c0 	mov    DWORD PTR ds:0xc0024288,0xc0015ef0
c0016600:	c7 05 8c 42 02 c0 c8 58 01 c0 	mov    DWORD PTR ds:0xc002428c,0xc00158c8
c001660a:	c7 05 90 42 02 c0 3c 5f 01 c0 	mov    DWORD PTR ds:0xc0024290,0xc0015f3c
c0016614:	c7 05 94 42 02 c0 99 59 01 c0 	mov    DWORD PTR ds:0xc0024294,0xc0015999
c001661e:	c7 05 98 42 02 c0 11 60 01 c0 	mov    DWORD PTR ds:0xc0024298,0xc0016011
c0016628:	c7 05 9c 42 02 c0 d9 5a 01 c0 	mov    DWORD PTR ds:0xc002429c,0xc0015ad9
c0016632:	c7 05 a0 42 02 c0 38 60 01 c0 	mov    DWORD PTR ds:0xc00242a0,0xc0016038
c001663c:	c7 05 a4 42 02 c0 bf 5f 01 c0 	mov    DWORD PTR ds:0xc00242a4,0xc0015fbf
c0016646:	c7 05 a8 42 02 c0 a8 60 01 c0 	mov    DWORD PTR ds:0xc00242a8,0xc00160a8
c0016650:	c7 05 ac 42 02 c0 2e 57 01 c0 	mov    DWORD PTR ds:0xc00242ac,0xc001572e
c001665a:	c7 05 b0 42 02 c0 98 57 01 c0 	mov    DWORD PTR ds:0xc00242b0,0xc0015798
c0016664:	c7 05 b4 42 02 c0 de 57 01 c0 	mov    DWORD PTR ds:0xc00242b4,0xc00157de
c001666e:	c7 05 b8 42 02 c0 c7 61 01 c0 	mov    DWORD PTR ds:0xc00242b8,0xc00161c7
c0016678:	c7 05 bc 42 02 c0 27 62 01 c0 	mov    DWORD PTR ds:0xc00242bc,0xc0016227
c0016682:	c7 05 c0 42 02 c0 2f 58 01 c0 	mov    DWORD PTR ds:0xc00242c0,0xc001582f
c001668c:	c7 05 c4 42 02 c0 4d 62 01 c0 	mov    DWORD PTR ds:0xc00242c4,0xc001624d
c0016696:	c7 05 c8 42 02 c0 92 62 01 c0 	mov    DWORD PTR ds:0xc00242c8,0xc0016292
c00166a0:	c7 05 cc 42 02 c0 0f 55 01 c0 	mov    DWORD PTR ds:0xc00242cc,0xc001550f
c00166aa:	c3                   	ret    

c00166ab <systemCall(regs*, void*)>:
c00166ab:	53                   	push   ebx
c00166ac:	83 ec 08             	sub    esp,0x8
c00166af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166b6:	83 f8 7f             	cmp    eax,0x7f
c00166b9:	77 16                	ja     c00166d1 <systemCall(regs*, void*)+0x26>
c00166bb:	8b 14 85 20 42 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbde0]
c00166c2:	85 d2                	test   edx,edx
c00166c4:	74 0b                	je     c00166d1 <systemCall(regs*, void*)+0x26>
c00166c6:	83 ec 0c             	sub    esp,0xc
c00166c9:	53                   	push   ebx
c00166ca:	ff d2                	call   edx
c00166cc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166cf:	eb 0d                	jmp    c00166de <systemCall(regs*, void*)+0x33>
c00166d1:	52                   	push   edx
c00166d2:	52                   	push   edx
c00166d3:	50                   	push   eax
c00166d4:	68 54 1c 02 c0       	push   0xc0021c54
c00166d9:	e8 55 89 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00166e6:	31 d2                	xor    edx,edx
c00166e8:	83 c4 08             	add    esp,0x8
c00166eb:	5b                   	pop    ebx
c00166ec:	c3                   	ret    

c00166ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00166ed:	55                   	push   ebp
c00166ee:	89 e5                	mov    ebp,esp
c00166f0:	57                   	push   edi
c00166f1:	56                   	push   esi
c00166f2:	53                   	push   ebx
c00166f3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166f9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00166fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00166ff:	85 c0                	test   eax,eax
c0016701:	0f 95 c1             	setne  cl
c0016704:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016708:	0f 94 c2             	sete   dl
c001670b:	84 d1                	test   cl,dl
c001670d:	74 26                	je     c0016735 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001670f:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016716:	74 1d                	je     c0016735 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016718:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001671b:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016721:	89 d6                	mov    esi,edx
c0016723:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016729:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001672f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016732:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016735:	83 ec 0c             	sub    esp,0xc
c0016738:	05 ff 0f 00 00       	add    eax,0xfff
c001673d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016740:	6a 01                	push   0x1
c0016742:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016748:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001674e:	e8 60 76 ff ff       	call   c000ddb3 <Virt::allocateKernelVirtualPages(int)>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	89 c6                	mov    esi,eax
c0016758:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001675e:	0f 86 21 01 00 00    	jbe    c0016885 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0016764:	c1 eb 0c             	shr    ebx,0xc
c0016767:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016771:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016777:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001677a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001677d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016783:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016786:	29 d8                	sub    eax,ebx
c0016788:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001678e:	0f 83 f4 00 00 00    	jae    c0016888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001679d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00167a0:	3d 00 10 00 00       	cmp    eax,0x1000
c00167a5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00167a7:	52                   	push   edx
c00167a8:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00167ae:	52                   	push   edx
c00167af:	76 05                	jbe    c00167b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00167b1:	b8 00 10 00 00       	mov    eax,0x1000
c00167b6:	31 d2                	xor    edx,edx
c00167b8:	52                   	push   edx
c00167b9:	50                   	push   eax
c00167ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00167bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167c0:	83 c4 20             	add    esp,0x20
c00167c3:	85 c0                	test   eax,eax
c00167c5:	74 1f                	je     c00167e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00167c7:	51                   	push   ecx
c00167c8:	51                   	push   ecx
c00167c9:	50                   	push   eax
c00167ca:	68 68 1c 02 c0       	push   0xc0021c68
c00167cf:	e8 5f 88 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00167d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00167d7:	e8 0d 79 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c00167dc:	83 c4 10             	add    esp,0x10
c00167df:	31 c0                	xor    eax,eax
c00167e1:	e9 7c 01 00 00       	jmp    c0016962 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00167e6:	e8 19 14 00 00       	call   c0017c04 <lockScheduler()>
c00167eb:	e8 10 5a ff ff       	call   c000c200 <Phys::allocatePage()>
c00167f0:	6a 07                	push   0x7
c00167f2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00167f8:	56                   	push   esi
c00167f9:	50                   	push   eax
c00167fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016800:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016803:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016809:	e8 dc 7b ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001680e:	83 c4 0c             	add    esp,0xc
c0016811:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016817:	6a 00                	push   0x0
c0016819:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001681f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016822:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016828:	e8 1b 7a ff ff       	call   c000e248 <VAS::mapOtherVASIn(bool, VAS*)>
c001682d:	58                   	pop    eax
c001682e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016834:	5a                   	pop    edx
c0016835:	68 07 04 00 00       	push   0x407
c001683a:	53                   	push   ebx
c001683b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016841:	50                   	push   eax
c0016842:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016848:	6a 00                	push   0x0
c001684a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001684f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016852:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016858:	e8 8d 82 ff ff       	call   c000eaea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001685d:	83 c4 1c             	add    esp,0x1c
c0016860:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016866:	68 00 10 00 00       	push   0x1000
c001686b:	50                   	push   eax
c001686c:	56                   	push   esi
c001686d:	e8 60 9d fe ff       	call   c00005d2 <memcpy>
c0016872:	e8 8f 13 00 00       	call   c0017c06 <unlockScheduler()>
c0016877:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	e9 f5 fe ff ff       	jmp    c001677a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0016885:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016888:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016892:	0f 86 bc 00 00 00    	jbe    c0016954 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0016898:	e8 67 13 00 00       	call   c0017c04 <lockScheduler()>
c001689d:	51                   	push   ecx
c001689e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00168a4:	6a 00                	push   0x0
c00168a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168ae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168b4:	e8 8f 79 ff ff       	call   c000e248 <VAS::mapOtherVASIn(bool, VAS*)>
c00168b9:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	c1 e8 0c             	shr    eax,0xc
c00168c5:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00168cf:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00168d5:	e8 26 59 ff ff       	call   c000c200 <Phys::allocatePage()>
c00168da:	6a 07                	push   0x7
c00168dc:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00168e2:	56                   	push   esi
c00168e3:	50                   	push   eax
c00168e4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168ea:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00168ed:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00168f3:	e8 f2 7a ff ff       	call   c000e3ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00168f8:	58                   	pop    eax
c00168f9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00168ff:	5a                   	pop    edx
c0016900:	68 07 04 00 00       	push   0x407
c0016905:	53                   	push   ebx
c0016906:	81 c3 00 10 00 00    	add    ebx,0x1000
c001690c:	50                   	push   eax
c001690d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016913:	6a 00                	push   0x0
c0016915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001691a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001691d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016923:	e8 c2 81 ff ff       	call   c000eaea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016928:	83 c4 1c             	add    esp,0x1c
c001692b:	68 00 10 00 00       	push   0x1000
c0016930:	6a 00                	push   0x0
c0016932:	56                   	push   esi
c0016933:	e8 d0 9c fe ff       	call   c0000608 <memset>
c0016938:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001693e:	83 c4 10             	add    esp,0x10
c0016941:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016947:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001694d:	77 86                	ja     c00168d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001694f:	e8 b2 12 00 00       	call   c0017c06 <unlockScheduler()>
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	56                   	push   esi
c0016958:	e8 8c 77 ff ff       	call   c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)>
c001695d:	83 c4 10             	add    esp,0x10
c0016960:	b0 01                	mov    al,0x1
c0016962:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016965:	5b                   	pop    ebx
c0016966:	5e                   	pop    esi
c0016967:	5f                   	pop    edi
c0016968:	5d                   	pop    ebp
c0016969:	c3                   	ret    

c001696a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001696a:	55                   	push   ebp
c001696b:	57                   	push   edi
c001696c:	56                   	push   esi
c001696d:	53                   	push   ebx
c001696e:	83 ec 48             	sub    esp,0x48
c0016971:	68 14 01 00 00       	push   0x114
c0016976:	e8 c9 85 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001697b:	83 c4 0c             	add    esp,0xc
c001697e:	89 c6                	mov    esi,eax
c0016980:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016984:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016988:	50                   	push   eax
c0016989:	e8 d4 8b ff ff       	call   c000f562 <File::File(char const*, Process*)>
c001698e:	58                   	pop    eax
c001698f:	5a                   	pop    edx
c0016990:	6a 01                	push   0x1
c0016992:	56                   	push   esi
c0016993:	e8 2e 8c ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	85 c0                	test   eax,eax
c001699d:	0f 85 47 01 00 00    	jne    c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00169ab:	83 ec 0c             	sub    esp,0xc
c00169ae:	6a 34                	push   0x34
c00169b0:	e8 a1 52 ff ff       	call   c000bc56 <malloc>
c00169b5:	89 c3                	mov    ebx,eax
c00169b7:	58                   	pop    eax
c00169b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00169ba:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00169be:	57                   	push   edi
c00169bf:	53                   	push   ebx
c00169c0:	6a 00                	push   0x0
c00169c2:	6a 34                	push   0x34
c00169c4:	56                   	push   esi
c00169c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169c8:	83 c4 20             	add    esp,0x20
c00169cb:	85 c0                	test   eax,eax
c00169cd:	0f 85 17 01 00 00    	jne    c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169d3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00169d9:	0f 85 0b 01 00 00    	jne    c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169e2:	85 c0                	test   eax,eax
c00169e4:	0f 84 00 01 00 00    	je     c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169ea:	31 d2                	xor    edx,edx
c00169ec:	55                   	push   ebp
c00169ed:	52                   	push   edx
c00169ee:	50                   	push   eax
c00169ef:	56                   	push   esi
c00169f0:	e8 8f 8c ff ff       	call   c000f684 <File::seek(unsigned long long)>
c00169f5:	83 c4 10             	add    esp,0x10
c00169f8:	85 c0                	test   eax,eax
c00169fa:	0f 85 ea 00 00 00    	jne    c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016a06:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a0a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a0e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a12:	0f af c2             	imul   eax,edx
c0016a15:	50                   	push   eax
c0016a16:	e8 3b 52 ff ff       	call   c000bc56 <malloc>
c0016a1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016a22:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a2c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a30:	0f af c2             	imul   eax,edx
c0016a33:	99                   	cdq    
c0016a34:	52                   	push   edx
c0016a35:	50                   	push   eax
c0016a36:	56                   	push   esi
c0016a37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a3a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016a3d:	83 c4 20             	add    esp,0x20
c0016a40:	85 c0                	test   eax,eax
c0016a42:	0f 84 a2 00 00 00    	je     c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a48:	31 d2                	xor    edx,edx
c0016a4a:	51                   	push   ecx
c0016a4b:	52                   	push   edx
c0016a4c:	50                   	push   eax
c0016a4d:	56                   	push   esi
c0016a4e:	e8 31 8c ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	85 c0                	test   eax,eax
c0016a58:	0f 85 8c 00 00 00    	jne    c0016aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a5e:	83 ec 0c             	sub    esp,0xc
c0016a61:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a65:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a69:	31 ed                	xor    ebp,ebp
c0016a6b:	0f af c2             	imul   eax,edx
c0016a6e:	50                   	push   eax
c0016a6f:	e8 e2 51 ff ff       	call   c000bc56 <malloc>
c0016a74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a7b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a81:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a85:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a89:	0f af c2             	imul   eax,edx
c0016a8c:	99                   	cdq    
c0016a8d:	52                   	push   edx
c0016a8e:	50                   	push   eax
c0016a8f:	56                   	push   esi
c0016a90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a93:	83 c4 20             	add    esp,0x20
c0016a96:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a9e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016aa2:	0f 86 80 00 00 00    	jbe    c0016b28 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016aa8:	0f b7 fd             	movzx  edi,bp
c0016aab:	c1 e7 05             	shl    edi,0x5
c0016aae:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016ab2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016ab5:	75 6b                	jne    c0016b22 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ab7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016aba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016abe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016ac1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ac5:	52                   	push   edx
c0016ac6:	31 d2                	xor    edx,edx
c0016ac8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016acb:	52                   	push   edx
c0016acc:	50                   	push   eax
c0016acd:	56                   	push   esi
c0016ace:	e8 b1 8b ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	85 c0                	test   eax,eax
c0016ad8:	74 17                	je     c0016af1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	68 93 1c 02 c0       	push   0xc0021c93
c0016ae2:	e8 4c 85 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	31 c0                	xor    eax,eax
c0016aec:	e9 87 00 00 00       	jmp    c0016b78 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016af1:	83 ec 0c             	sub    esp,0xc
c0016af4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016af7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016afa:	50                   	push   eax
c0016afb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016aff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b03:	56                   	push   esi
c0016b04:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016b08:	e8 e0 fb ff ff       	call   c00166ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016b0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b11:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016b15:	83 c4 20             	add    esp,0x20
c0016b18:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016b1c:	73 04                	jae    c0016b22 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016b1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b22:	45                   	inc    ebp
c0016b23:	e9 76 ff ff ff       	jmp    c0016a9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016b28:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016b2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b34:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016b43:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b48:	05 00 10 00 00       	add    eax,0x1000
c0016b4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b54:	e8 0d 51 ff ff       	call   c000bc66 <free>
c0016b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b5c:	e8 05 51 ff ff       	call   c000bc66 <free>
c0016b61:	58                   	pop    eax
c0016b62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b66:	e8 fb 50 ff ff       	call   c000bc66 <free>
c0016b6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b6e:	e8 b1 8a ff ff       	call   c000f624 <File::close()>
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	b0 01                	mov    al,0x1
c0016b78:	83 c4 3c             	add    esp,0x3c
c0016b7b:	5b                   	pop    ebx
c0016b7c:	5e                   	pop    esi
c0016b7d:	5f                   	pop    edi
c0016b7e:	5d                   	pop    ebp
c0016b7f:	c3                   	ret    

c0016b80 <Thr::runtimeReferenceHelper()>:
c0016b80:	83 ec 18             	sub    esp,0x18
c0016b83:	68 9b 1c 02 c0       	push   0xc0021c9b
c0016b88:	e8 a6 84 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0016b8d:	fa                   	cli    
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	eb fe                	jmp    c0016b91 <Thr::runtimeReferenceHelper()+0x11>

c0016b93 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b93:	57                   	push   edi
c0016b94:	56                   	push   esi
c0016b95:	53                   	push   ebx
c0016b96:	31 db                	xor    ebx,ebx
c0016b98:	39 1d c0 4b 02 c0    	cmp    DWORD PTR ds:0xc0024bc0,ebx
c0016b9e:	7e 3c                	jle    c0016bdc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016ba0:	8b 34 9d 40 4b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb4c0]
c0016ba7:	31 ff                	xor    edi,edi
c0016ba9:	39 3c 9d 40 4a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb5c0],edi
c0016bb0:	7e 27                	jle    c0016bd9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016bb2:	50                   	push   eax
c0016bb3:	50                   	push   eax
c0016bb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bb8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bba:	03 04 9d c0 4a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb540]
c0016bc1:	50                   	push   eax
c0016bc2:	e8 3e 9b fe ff       	call   c0000705 <strcmp>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	85 c0                	test   eax,eax
c0016bcc:	75 05                	jne    c0016bd3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016bce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016bd1:	eb 0b                	jmp    c0016bde <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016bd3:	83 c6 10             	add    esi,0x10
c0016bd6:	47                   	inc    edi
c0016bd7:	eb d0                	jmp    c0016ba9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016bd9:	43                   	inc    ebx
c0016bda:	eb bc                	jmp    c0016b98 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016bdc:	31 c0                	xor    eax,eax
c0016bde:	5b                   	pop    ebx
c0016bdf:	5e                   	pop    esi
c0016be0:	5f                   	pop    edi
c0016be1:	c3                   	ret    

c0016be2 <Thr::loadKernelSymbolTable(char const*)>:
c0016be2:	55                   	push   ebp
c0016be3:	57                   	push   edi
c0016be4:	56                   	push   esi
c0016be5:	53                   	push   ebx
c0016be6:	83 ec 68             	sub    esp,0x68
c0016be9:	8b 35 14 4c 02 c0    	mov    esi,DWORD PTR ds:0xc0024c14
c0016bef:	68 14 01 00 00       	push   0x114
c0016bf4:	e8 4b 83 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0016bf9:	83 c4 0c             	add    esp,0xc
c0016bfc:	89 c3                	mov    ebx,eax
c0016bfe:	56                   	push   esi
c0016bff:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016c03:	50                   	push   eax
c0016c04:	e8 59 89 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0016c09:	5e                   	pop    esi
c0016c0a:	5f                   	pop    edi
c0016c0b:	6a 01                	push   0x1
c0016c0d:	53                   	push   ebx
c0016c0e:	e8 b3 89 ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	31 d2                	xor    edx,edx
c0016c18:	85 c0                	test   eax,eax
c0016c1a:	0f 85 79 02 00 00    	jne    c0016e99 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c20:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	6a 34                	push   0x34
c0016c2d:	e8 24 50 ff ff       	call   c000bc56 <malloc>
c0016c32:	59                   	pop    ecx
c0016c33:	89 c7                	mov    edi,eax
c0016c35:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016c39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c3b:	56                   	push   esi
c0016c3c:	57                   	push   edi
c0016c3d:	6a 00                	push   0x0
c0016c3f:	6a 34                	push   0x34
c0016c41:	53                   	push   ebx
c0016c42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c45:	83 c4 20             	add    esp,0x20
c0016c48:	85 c0                	test   eax,eax
c0016c4a:	74 17                	je     c0016c63 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	68 bd 1c 02 c0       	push   0xc0021cbd
c0016c54:	e8 6f e0 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	31 d2                	xor    edx,edx
c0016c5e:	e9 36 02 00 00       	jmp    c0016e99 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c63:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c69:	75 e1                	jne    c0016c4c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c6b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c6e:	85 c0                	test   eax,eax
c0016c70:	74 da                	je     c0016c4c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c72:	52                   	push   edx
c0016c73:	31 d2                	xor    edx,edx
c0016c75:	52                   	push   edx
c0016c76:	50                   	push   eax
c0016c77:	53                   	push   ebx
c0016c78:	e8 07 8a ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	85 c0                	test   eax,eax
c0016c82:	75 c8                	jne    c0016c4c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c8f:	31 ed                	xor    ebp,ebp
c0016c91:	0f af c2             	imul   eax,edx
c0016c94:	50                   	push   eax
c0016c95:	e8 bc 4f ff ff       	call   c000bc56 <malloc>
c0016c9a:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ca1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016ca3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ca7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016cab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016caf:	0f af c2             	imul   eax,edx
c0016cb2:	99                   	cdq    
c0016cb3:	52                   	push   edx
c0016cb4:	50                   	push   eax
c0016cb5:	53                   	push   ebx
c0016cb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cb9:	83 c4 20             	add    esp,0x20
c0016cbc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016cc4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ccc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016cd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016cdc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016ce0:	0f 86 aa 00 00 00    	jbe    c0016d90 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016ce6:	0f b7 f5             	movzx  esi,bp
c0016ce9:	6b f6 28             	imul   esi,esi,0x28
c0016cec:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016cf0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cf7:	50                   	push   eax
c0016cf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016cfc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016d00:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d02:	6b c0 28             	imul   eax,eax,0x28
c0016d05:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016d09:	89 d0                	mov    eax,edx
c0016d0b:	31 d2                	xor    edx,edx
c0016d0d:	52                   	push   edx
c0016d0e:	50                   	push   eax
c0016d0f:	53                   	push   ebx
c0016d10:	e8 6f 89 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016d15:	83 c4 0c             	add    esp,0xc
c0016d18:	6a 20                	push   0x20
c0016d1a:	6a 00                	push   0x0
c0016d1c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d20:	52                   	push   edx
c0016d21:	e8 e2 98 fe ff       	call   c0000608 <memset>
c0016d26:	58                   	pop    eax
c0016d27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d29:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016d2d:	51                   	push   ecx
c0016d2e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016d32:	52                   	push   edx
c0016d33:	6a 00                	push   0x0
c0016d35:	6a 1f                	push   0x1f
c0016d37:	53                   	push   ebx
c0016d38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d3b:	83 c4 18             	add    esp,0x18
c0016d3e:	68 d4 1c 02 c0       	push   0xc0021cd4
c0016d43:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d47:	52                   	push   edx
c0016d48:	e8 b8 99 fe ff       	call   c0000705 <strcmp>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	85 c0                	test   eax,eax
c0016d52:	75 0f                	jne    c0016d63 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016d54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d63:	50                   	push   eax
c0016d64:	50                   	push   eax
c0016d65:	68 dc 1c 02 c0       	push   0xc0021cdc
c0016d6a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d6e:	50                   	push   eax
c0016d6f:	e8 91 99 fe ff       	call   c0000705 <strcmp>
c0016d74:	83 c4 10             	add    esp,0x10
c0016d77:	85 c0                	test   eax,eax
c0016d79:	75 0f                	jne    c0016d8a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016d7b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d8a:	45                   	inc    ebp
c0016d8b:	e9 4c ff ff ff       	jmp    c0016cdc <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016d90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d95:	75 10                	jne    c0016da7 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016d97:	83 ec 0c             	sub    esp,0xc
c0016d9a:	68 e4 1c 02 c0       	push   0xc0021ce4
c0016d9f:	e8 24 df ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016dac:	75 10                	jne    c0016dbe <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 e4 1c 02 c0       	push   0xc0021ce4
c0016db6:	e8 0d df ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	31 d2                	xor    edx,edx
c0016dc0:	50                   	push   eax
c0016dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dc5:	52                   	push   edx
c0016dc6:	50                   	push   eax
c0016dc7:	53                   	push   ebx
c0016dc8:	e8 b7 88 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016dcd:	5a                   	pop    edx
c0016dce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dd2:	e8 7f 4e ff ff       	call   c000bc56 <malloc>
c0016dd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016ddf:	89 c1                	mov    ecx,eax
c0016de1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016de5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016de9:	5e                   	pop    esi
c0016dea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dec:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016df0:	55                   	push   ebp
c0016df1:	51                   	push   ecx
c0016df2:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016df6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dfe:	53                   	push   ebx
c0016dff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e02:	83 c4 14             	add    esp,0x14
c0016e05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e09:	e8 48 4e ff ff       	call   c000bc56 <malloc>
c0016e0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e11:	89 c6                	mov    esi,eax
c0016e13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e15:	56                   	push   esi
c0016e16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e1e:	53                   	push   ebx
c0016e1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e26:	8b 15 c0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bc0
c0016e2c:	83 c4 1c             	add    esp,0x1c
c0016e2f:	c1 e8 04             	shr    eax,0x4
c0016e32:	89 04 95 40 4a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb5c0],eax
c0016e39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e3d:	31 d2                	xor    edx,edx
c0016e3f:	52                   	push   edx
c0016e40:	50                   	push   eax
c0016e41:	53                   	push   ebx
c0016e42:	e8 3d 88 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016e47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e4a:	31 d2                	xor    edx,edx
c0016e4c:	56                   	push   esi
c0016e4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e51:	52                   	push   edx
c0016e52:	50                   	push   eax
c0016e53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e55:	53                   	push   ebx
c0016e56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e59:	83 c4 14             	add    esp,0x14
c0016e5c:	53                   	push   ebx
c0016e5d:	e8 c2 87 ff ff       	call   c000f624 <File::close()>
c0016e62:	5d                   	pop    ebp
c0016e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e67:	e8 fa 4d ff ff       	call   c000bc66 <free>
c0016e6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e6f:	e8 f2 4d ff ff       	call   c000bc66 <free>
c0016e74:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0016e79:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016e7d:	8d 50 01             	lea    edx,[eax+0x1]
c0016e80:	89 0c 85 40 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4c0],ecx
c0016e87:	89 15 c0 4b 02 c0    	mov    DWORD PTR ds:0xc0024bc0,edx
c0016e8d:	89 34 85 c0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb540],esi
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	b2 01                	mov    dl,0x1
c0016e99:	83 c4 5c             	add    esp,0x5c
c0016e9c:	88 d0                	mov    al,dl
c0016e9e:	5b                   	pop    ebx
c0016e9f:	5e                   	pop    esi
c0016ea0:	5f                   	pop    edi
c0016ea1:	5d                   	pop    ebp
c0016ea2:	c3                   	ret    

c0016ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016ea3:	55                   	push   ebp
c0016ea4:	57                   	push   edi
c0016ea5:	56                   	push   esi
c0016ea6:	53                   	push   ebx
c0016ea7:	81 ec 68 03 00 00    	sub    esp,0x368
c0016ead:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016eb4:	8b 1d 14 4c 02 c0    	mov    ebx,DWORD PTR ds:0xc0024c14
c0016eba:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016ebe:	68 14 01 00 00       	push   0x114
c0016ec3:	e8 7c 80 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0016ec8:	83 c4 0c             	add    esp,0xc
c0016ecb:	89 c5                	mov    ebp,eax
c0016ecd:	53                   	push   ebx
c0016ece:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016ed5:	50                   	push   eax
c0016ed6:	e8 87 86 ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0016edb:	58                   	pop    eax
c0016edc:	5a                   	pop    edx
c0016edd:	6a 01                	push   0x1
c0016edf:	55                   	push   ebp
c0016ee0:	e8 e1 86 ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c0016ee5:	83 c4 10             	add    esp,0x10
c0016ee8:	85 c0                	test   eax,eax
c0016eea:	0f 85 f2 06 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ef0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	6a 34                	push   0x34
c0016efd:	e8 54 4d ff ff       	call   c000bc56 <malloc>
c0016f02:	89 c7                	mov    edi,eax
c0016f04:	58                   	pop    eax
c0016f05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f08:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016f0c:	53                   	push   ebx
c0016f0d:	57                   	push   edi
c0016f0e:	6a 00                	push   0x0
c0016f10:	6a 34                	push   0x34
c0016f12:	55                   	push   ebp
c0016f13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f16:	83 c4 20             	add    esp,0x20
c0016f19:	85 c0                	test   eax,eax
c0016f1b:	0f 85 c1 06 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f21:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016f27:	0f 85 b5 06 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f2d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016f30:	85 c0                	test   eax,eax
c0016f32:	0f 84 aa 06 00 00    	je     c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f38:	31 d2                	xor    edx,edx
c0016f3a:	56                   	push   esi
c0016f3b:	52                   	push   edx
c0016f3c:	50                   	push   eax
c0016f3d:	55                   	push   ebp
c0016f3e:	e8 41 87 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	85 c0                	test   eax,eax
c0016f48:	0f 85 94 06 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016f54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016f5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f60:	0f af c2             	imul   eax,edx
c0016f63:	50                   	push   eax
c0016f64:	e8 ed 4c ff ff       	call   c000bc56 <malloc>
c0016f69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f70:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f77:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f7f:	0f af c2             	imul   eax,edx
c0016f82:	99                   	cdq    
c0016f83:	52                   	push   edx
c0016f84:	50                   	push   eax
c0016f85:	55                   	push   ebp
c0016f86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f89:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f8c:	83 c4 20             	add    esp,0x20
c0016f8f:	85 c0                	test   eax,eax
c0016f91:	0f 84 4b 06 00 00    	je     c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f97:	31 d2                	xor    edx,edx
c0016f99:	51                   	push   ecx
c0016f9a:	52                   	push   edx
c0016f9b:	50                   	push   eax
c0016f9c:	55                   	push   ebp
c0016f9d:	e8 e2 86 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0016fa2:	83 c4 10             	add    esp,0x10
c0016fa5:	85 c0                	test   eax,eax
c0016fa7:	0f 85 35 06 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016fad:	83 ec 0c             	sub    esp,0xc
c0016fb0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fb4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fb8:	31 f6                	xor    esi,esi
c0016fba:	0f af c2             	imul   eax,edx
c0016fbd:	50                   	push   eax
c0016fbe:	e8 93 4c ff ff       	call   c000bc56 <malloc>
c0016fc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016fca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fd1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fd5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fd9:	0f af c2             	imul   eax,edx
c0016fdc:	99                   	cdq    
c0016fdd:	52                   	push   edx
c0016fde:	50                   	push   eax
c0016fdf:	55                   	push   ebp
c0016fe0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fe3:	83 c4 20             	add    esp,0x20
c0016fe6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016fea:	0f 86 8a 00 00 00    	jbe    c001707a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016ff0:	0f b7 de             	movzx  ebx,si
c0016ff3:	c1 e3 05             	shl    ebx,0x5
c0016ff6:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016ffa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016ffd:	75 75                	jne    c0017074 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016fff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017002:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017006:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001700d:	52                   	push   edx
c001700e:	31 d2                	xor    edx,edx
c0017010:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017013:	52                   	push   edx
c0017014:	50                   	push   eax
c0017015:	55                   	push   ebp
c0017016:	e8 69 86 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	85 c0                	test   eax,eax
c0017020:	0f 85 bc 05 00 00    	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0017026:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001702d:	31 d2                	xor    edx,edx
c001702f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017033:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017036:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017041:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017048:	50                   	push   eax
c0017049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001704d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017051:	52                   	push   edx
c0017052:	50                   	push   eax
c0017053:	55                   	push   ebp
c0017054:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017057:	83 c4 1c             	add    esp,0x1c
c001705a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001705d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017060:	50                   	push   eax
c0017061:	6a 00                	push   0x0
c0017063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017067:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001706b:	50                   	push   eax
c001706c:	e8 97 95 fe ff       	call   c0000608 <memset>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	46                   	inc    esi
c0017075:	e9 6c ff ff ff       	jmp    c0016fe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001707a:	31 db                	xor    ebx,ebx
c001707c:	50                   	push   eax
c001707d:	68 00 01 00 00       	push   0x100
c0017082:	6a 00                	push   0x0
c0017084:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017088:	50                   	push   eax
c0017089:	e8 7a 95 fe ff       	call   c0000608 <memset>
c001708e:	83 c4 0c             	add    esp,0xc
c0017091:	68 00 01 00 00       	push   0x100
c0017096:	6a 00                	push   0x0
c0017098:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001709f:	50                   	push   eax
c00170a0:	e8 63 95 fe ff       	call   c0000608 <memset>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00170b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00170b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170c0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00170d0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00170d4:	0f 86 30 01 00 00    	jbe    c001720a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00170da:	0f b7 f3             	movzx  esi,bx
c00170dd:	6b f6 28             	imul   esi,esi,0x28
c00170e0:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00170e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170eb:	50                   	push   eax
c00170ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170f0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00170f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00170f6:	6b d2 28             	imul   edx,edx,0x28
c00170f9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170fd:	31 d2                	xor    edx,edx
c00170ff:	52                   	push   edx
c0017100:	50                   	push   eax
c0017101:	55                   	push   ebp
c0017102:	e8 7d 85 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0017107:	83 c4 0c             	add    esp,0xc
c001710a:	6a 20                	push   0x20
c001710c:	6a 00                	push   0x0
c001710e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017115:	51                   	push   ecx
c0017116:	e8 ed 94 fe ff       	call   c0000608 <memset>
c001711b:	58                   	pop    eax
c001711c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001711f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017123:	52                   	push   edx
c0017124:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001712b:	51                   	push   ecx
c001712c:	6a 00                	push   0x0
c001712e:	6a 1f                	push   0x1f
c0017130:	55                   	push   ebp
c0017131:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017134:	83 c4 1c             	add    esp,0x1c
c0017137:	6a 09                	push   0x9
c0017139:	68 fe 1c 02 c0       	push   0xc0021cfe
c001713e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017145:	51                   	push   ecx
c0017146:	e8 24 94 fe ff       	call   c000056f <memcmp>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	85 c0                	test   eax,eax
c0017150:	75 21                	jne    c0017173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017156:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001715a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001715e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017162:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017165:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001716c:	89 c8                	mov    eax,ecx
c001716e:	40                   	inc    eax
c001716f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017173:	50                   	push   eax
c0017174:	6a 09                	push   0x9
c0017176:	68 08 1d 02 c0       	push   0xc0021d08
c001717b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017182:	50                   	push   eax
c0017183:	e8 e7 93 fe ff       	call   c000056f <memcmp>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	85 c0                	test   eax,eax
c001718d:	75 21                	jne    c00171b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001718f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017193:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017197:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001719b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001719f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171a2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00171a9:	89 c8                	mov    eax,ecx
c00171ab:	40                   	inc    eax
c00171ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171b0:	50                   	push   eax
c00171b1:	50                   	push   eax
c00171b2:	68 d4 1c 02 c0       	push   0xc0021cd4
c00171b7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171be:	50                   	push   eax
c00171bf:	e8 41 95 fe ff       	call   c0000705 <strcmp>
c00171c4:	83 c4 10             	add    esp,0x10
c00171c7:	85 c0                	test   eax,eax
c00171c9:	75 0f                	jne    c00171da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00171cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171da:	50                   	push   eax
c00171db:	50                   	push   eax
c00171dc:	68 dc 1c 02 c0       	push   0xc0021cdc
c00171e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171e8:	50                   	push   eax
c00171e9:	e8 17 95 fe ff       	call   c0000705 <strcmp>
c00171ee:	83 c4 10             	add    esp,0x10
c00171f1:	85 c0                	test   eax,eax
c00171f3:	75 0f                	jne    c0017204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00171f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017200:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017204:	43                   	inc    ebx
c0017205:	e9 c6 fe ff ff       	jmp    c00170d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001720a:	31 d2                	xor    edx,edx
c001720c:	50                   	push   eax
c001720d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017211:	52                   	push   edx
c0017212:	50                   	push   eax
c0017213:	55                   	push   ebp
c0017214:	e8 6b 84 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0017219:	5a                   	pop    edx
c001721a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001721e:	e8 33 4a ff ff       	call   c000bc56 <malloc>
c0017223:	31 d2                	xor    edx,edx
c0017225:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017229:	59                   	pop    ecx
c001722a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001722d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017231:	53                   	push   ebx
c0017232:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017236:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001723a:	52                   	push   edx
c001723b:	50                   	push   eax
c001723c:	55                   	push   ebp
c001723d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017240:	83 c4 14             	add    esp,0x14
c0017243:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017247:	e8 0a 4a ff ff       	call   c000bc56 <malloc>
c001724c:	31 d2                	xor    edx,edx
c001724e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017252:	83 c4 0c             	add    esp,0xc
c0017255:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017259:	52                   	push   edx
c001725a:	50                   	push   eax
c001725b:	55                   	push   ebp
c001725c:	e8 23 84 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c0017261:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017264:	31 d2                	xor    edx,edx
c0017266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001726a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001726d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017271:	52                   	push   edx
c0017272:	50                   	push   eax
c0017273:	55                   	push   ebp
c0017274:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017277:	83 c4 20             	add    esp,0x20
c001727a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017282:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017286:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001728a:	0f 84 56 03 00 00    	je     c00175e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0017290:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017297:	31 d2                	xor    edx,edx
c0017299:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001729d:	c1 e8 03             	shr    eax,0x3
c00172a0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172a4:	50                   	push   eax
c00172a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172a9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00172ad:	52                   	push   edx
c00172ae:	50                   	push   eax
c00172af:	55                   	push   ebp
c00172b0:	e8 cf 83 ff ff       	call   c000f684 <File::seek(unsigned long long)>
c00172b5:	58                   	pop    eax
c00172b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ba:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00172c1:	e8 90 49 ff ff       	call   c000bc56 <malloc>
c00172c6:	31 d2                	xor    edx,edx
c00172c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172cf:	58                   	pop    eax
c00172d0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00172d4:	50                   	push   eax
c00172d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00172d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172dd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00172e4:	52                   	push   edx
c00172e5:	50                   	push   eax
c00172e6:	55                   	push   ebp
c00172e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172ea:	83 c4 20             	add    esp,0x20
c00172ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172f5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00172f9:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00172fd:	0f 8d c7 02 00 00    	jge    c00175ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c0017303:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001730b:	31 db                	xor    ebx,ebx
c001730d:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017310:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017318:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001731c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017320:	c1 e8 08             	shr    eax,0x8
c0017323:	89 c6                	mov    esi,eax
c0017325:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017329:	c1 e6 04             	shl    esi,0x4
c001732c:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017330:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017333:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017337:	85 c0                	test   eax,eax
c0017339:	0f 85 17 01 00 00    	jne    c0017456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	b3 01                	mov    bl,0x1
c0017344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017348:	03 06                	add    eax,DWORD PTR [esi]
c001734a:	50                   	push   eax
c001734b:	e8 43 f8 ff ff       	call   c0016b93 <Thr::getAddressOfKernelSymbol(char const*)>
c0017350:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017354:	83 c4 10             	add    esp,0x10
c0017357:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001735c:	0f 85 f4 00 00 00    	jne    c0017456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017362:	50                   	push   eax
c0017363:	50                   	push   eax
c0017364:	68 12 1d 02 c0       	push   0xc0021d12
c0017369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001736d:	03 06                	add    eax,DWORD PTR [esi]
c001736f:	50                   	push   eax
c0017370:	e8 90 93 fe ff       	call   c0000705 <strcmp>
c0017375:	83 c4 10             	add    esp,0x10
c0017378:	85 c0                	test   eax,eax
c001737a:	75 0a                	jne    c0017386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001737c:	b8 ac e7 01 c0       	mov    eax,0xc001e7ac
c0017381:	e9 ca 00 00 00       	jmp    c0017450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017386:	50                   	push   eax
c0017387:	50                   	push   eax
c0017388:	68 1c 1d 02 c0       	push   0xc0021d1c
c001738d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017391:	03 06                	add    eax,DWORD PTR [esi]
c0017393:	50                   	push   eax
c0017394:	e8 6c 93 fe ff       	call   c0000705 <strcmp>
c0017399:	83 c4 10             	add    esp,0x10
c001739c:	85 c0                	test   eax,eax
c001739e:	75 0a                	jne    c00173aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c00173a0:	b8 e0 e4 01 c0       	mov    eax,0xc001e4e0
c00173a5:	e9 a6 00 00 00       	jmp    c0017450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00173aa:	53                   	push   ebx
c00173ab:	53                   	push   ebx
c00173ac:	68 25 1d 02 c0       	push   0xc0021d25
c00173b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b5:	03 06                	add    eax,DWORD PTR [esi]
c00173b7:	50                   	push   eax
c00173b8:	e8 48 93 fe ff       	call   c0000705 <strcmp>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	85 c0                	test   eax,eax
c00173c2:	75 0a                	jne    c00173ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c00173c4:	b8 ac e8 01 c0       	mov    eax,0xc001e8ac
c00173c9:	e9 82 00 00 00       	jmp    c0017450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00173ce:	51                   	push   ecx
c00173cf:	51                   	push   ecx
c00173d0:	68 2f 1d 02 c0       	push   0xc0021d2f
c00173d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173d9:	03 06                	add    eax,DWORD PTR [esi]
c00173db:	50                   	push   eax
c00173dc:	e8 24 93 fe ff       	call   c0000705 <strcmp>
c00173e1:	83 c4 10             	add    esp,0x10
c00173e4:	85 c0                	test   eax,eax
c00173e6:	74 63                	je     c001744b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c00173e8:	50                   	push   eax
c00173e9:	50                   	push   eax
c00173ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173ee:	03 06                	add    eax,DWORD PTR [esi]
c00173f0:	50                   	push   eax
c00173f1:	68 38 1d 02 c0       	push   0xc0021d38
c00173f6:	e8 38 7c ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00173fb:	58                   	pop    eax
c00173fc:	5a                   	pop    edx
c00173fd:	68 52 1d 02 c0       	push   0xc0021d52
c0017402:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017409:	53                   	push   ebx
c001740a:	e8 98 92 fe ff       	call   c00006a7 <strcpy>
c001740f:	59                   	pop    ecx
c0017410:	58                   	pop    eax
c0017411:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017415:	03 06                	add    eax,DWORD PTR [esi]
c0017417:	50                   	push   eax
c0017418:	53                   	push   ebx
c0017419:	e8 4d 93 fe ff       	call   c000076b <strcat>
c001741e:	58                   	pop    eax
c001741f:	5a                   	pop    edx
c0017420:	68 e8 1d 02 c0       	push   0xc0021de8
c0017425:	53                   	push   ebx
c0017426:	e8 40 93 fe ff       	call   c000076b <strcat>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017433:	0f 84 4b 01 00 00    	je     c0017584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017439:	83 ec 0c             	sub    esp,0xc
c001743c:	53                   	push   ebx
c001743d:	e8 86 d8 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0017442:	83 c4 10             	add    esp,0x10
c0017445:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017449:	eb 0b                	jmp    c0017456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001744b:	b8 2c e6 01 c0       	mov    eax,0xc001e62c
c0017450:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017454:	b3 01                	mov    bl,0x1
c0017456:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001745b:	0f 85 80 00 00 00    	jne    c00174e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0017461:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017468:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001746c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017470:	01 ce                	add    esi,ecx
c0017472:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001747a:	8b 06                	mov    eax,DWORD PTR [esi]
c001747c:	0f 94 c2             	sete   dl
c001747f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017487:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001748c:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017490:	84 db                	test   bl,bl
c0017492:	74 31                	je     c00174c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c0017494:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017498:	01 c3                	add    ebx,eax
c001749a:	84 d2                	test   dl,dl
c001749c:	75 0a                	jne    c00174a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001749e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174a2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174a6:	76 32                	jbe    c00174da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174a8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174ad:	0f 84 d1 00 00 00    	je     c0017584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174b3:	83 ec 0c             	sub    esp,0xc
c00174b6:	68 69 1d 02 c0       	push   0xc0021d69
c00174bb:	e8 08 d8 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	eb 15                	jmp    c00174da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174c5:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00174c8:	84 d2                	test   dl,dl
c00174ca:	75 0e                	jne    c00174da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174d0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174d4:	77 04                	ja     c00174da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174d6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174da:	89 1e                	mov    DWORD PTR [esi],ebx
c00174dc:	e9 e0 00 00 00       	jmp    c00175c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174e1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00174e6:	75 6e                	jne    c0017556 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c00174e8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00174ef:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00174f3:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00174f7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00174ff:	74 17                	je     c0017518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017501:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017509:	74 0d                	je     c0017518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001750b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001750f:	83 e8 04             	sub    eax,0x4
c0017512:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017516:	76 17                	jbe    c001752f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c0017518:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001751d:	74 65                	je     c0017584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001751f:	83 ec 0c             	sub    esp,0xc
c0017522:	68 85 1d 02 c0       	push   0xc0021d85
c0017527:	e8 9c d7 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017531:	84 db                	test   bl,bl
c0017533:	74 13                	je     c0017548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0017535:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017539:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017540:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017544:	01 d0                	add    eax,edx
c0017546:	eb 06                	jmp    c001754e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017548:	89 d0                	mov    eax,edx
c001754a:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001754e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017552:	89 06                	mov    DWORD PTR [esi],eax
c0017554:	eb 6b                	jmp    c00175c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017556:	50                   	push   eax
c0017557:	50                   	push   eax
c0017558:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001755d:	50                   	push   eax
c001755e:	68 a1 1d 02 c0       	push   0xc0021da1
c0017563:	e8 cb 7a ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017570:	74 12                	je     c0017584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	68 ac 1d 02 c0       	push   0xc0021dac
c001757a:	e8 49 d7 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	eb 3d                	jmp    c00175c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	55                   	push   ebp
c0017588:	e8 97 80 ff ff       	call   c000f624 <File::close()>
c001758d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017590:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017593:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017596:	59                   	pop    ecx
c0017597:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001759b:	e8 c6 46 ff ff       	call   c000bc66 <free>
c00175a0:	5b                   	pop    ebx
c00175a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a5:	e8 bc 46 ff ff       	call   c000bc66 <free>
c00175aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175ad:	e8 b4 46 ff ff       	call   c000bc66 <free>
c00175b2:	5e                   	pop    esi
c00175b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175b7:	e8 aa 46 ff ff       	call   c000bc66 <free>
c00175bc:	83 c4 10             	add    esp,0x10
c00175bf:	eb 21                	jmp    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00175c1:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00175c5:	e9 2b fd ff ff       	jmp    c00172f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175d1:	e8 90 46 ff ff       	call   c000bc66 <free>
c00175d6:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00175da:	83 c4 10             	add    esp,0x10
c00175dd:	e9 a0 fc ff ff       	jmp    c0017282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00175e2:	31 c0                	xor    eax,eax
c00175e4:	eb 33                	jmp    c0017619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	55                   	push   ebp
c00175ea:	e8 35 80 ff ff       	call   c000f624 <File::close()>
c00175ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175f8:	58                   	pop    eax
c00175f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175fd:	e8 64 46 ff ff       	call   c000bc66 <free>
c0017602:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017605:	e8 5c 46 ff ff       	call   c000bc66 <free>
c001760a:	5a                   	pop    edx
c001760b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001760f:	e8 52 46 ff ff       	call   c000bc66 <free>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	b0 01                	mov    al,0x1
c0017619:	81 c4 5c 03 00 00    	add    esp,0x35c
c001761f:	5b                   	pop    ebx
c0017620:	5e                   	pop    esi
c0017621:	5f                   	pop    edi
c0017622:	5d                   	pop    ebp
c0017623:	c3                   	ret    

c0017624 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017624:	56                   	push   esi
c0017625:	31 d2                	xor    edx,edx
c0017627:	53                   	push   ebx
c0017628:	8b 1d 20 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024420
c001762e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017632:	39 d3                	cmp    ebx,edx
c0017634:	7e 1b                	jle    c0017651 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017636:	8b 04 95 40 46 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb9c0]
c001763d:	39 c8                	cmp    eax,ecx
c001763f:	77 0d                	ja     c001764e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017641:	8b 34 95 40 44 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbbc0]
c0017648:	01 c6                	add    esi,eax
c001764a:	39 ce                	cmp    esi,ecx
c001764c:	77 05                	ja     c0017653 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001764e:	42                   	inc    edx
c001764f:	eb e1                	jmp    c0017632 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017651:	31 c0                	xor    eax,eax
c0017653:	5b                   	pop    ebx
c0017654:	5e                   	pop    esi
c0017655:	c3                   	ret    

c0017656 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017656:	53                   	push   ebx
c0017657:	31 c0                	xor    eax,eax
c0017659:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001765d:	8b 1d 20 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024420
c0017663:	39 c3                	cmp    ebx,eax
c0017665:	7e 22                	jle    c0017689 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017667:	8b 14 85 40 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb9c0]
c001766e:	39 ca                	cmp    edx,ecx
c0017670:	77 14                	ja     c0017686 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017672:	03 14 85 40 44 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbbc0]
c0017679:	39 ca                	cmp    edx,ecx
c001767b:	76 09                	jbe    c0017686 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001767d:	8b 04 85 40 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb7c0]
c0017684:	eb 05                	jmp    c001768b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017686:	40                   	inc    eax
c0017687:	eb da                	jmp    c0017663 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017689:	31 c0                	xor    eax,eax
c001768b:	5b                   	pop    ebx
c001768c:	c3                   	ret    

c001768d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001768d:	53                   	push   ebx
c001768e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017692:	53                   	push   ebx
c0017693:	e8 8c ff ff ff       	call   c0017624 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017698:	5a                   	pop    edx
c0017699:	31 d2                	xor    edx,edx
c001769b:	85 c0                	test   eax,eax
c001769d:	74 04                	je     c00176a3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001769f:	89 da                	mov    edx,ebx
c00176a1:	29 c2                	sub    edx,eax
c00176a3:	89 d0                	mov    eax,edx
c00176a5:	5b                   	pop    ebx
c00176a6:	c3                   	ret    

c00176a7 <Thr::loadDLL(char const*, bool)>:
c00176a7:	55                   	push   ebp
c00176a8:	57                   	push   edi
c00176a9:	56                   	push   esi
c00176aa:	53                   	push   ebx
c00176ab:	81 ec 24 01 00 00    	sub    esp,0x124
c00176b1:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00176b8:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00176bf:	56                   	push   esi
c00176c0:	68 c4 1d 02 c0       	push   0xc0021dc4
c00176c5:	e8 69 79 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00176ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00176d1:	e8 6e 78 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00176d6:	83 c4 0c             	add    esp,0xc
c00176d9:	89 c3                	mov    ebx,eax
c00176db:	ff 35 14 4c 02 c0    	push   DWORD PTR ds:0xc0024c14
c00176e1:	56                   	push   esi
c00176e2:	50                   	push   eax
c00176e3:	e8 7a 7e ff ff       	call   c000f562 <File::File(char const*, Process*)>
c00176e8:	83 c4 0c             	add    esp,0xc
c00176eb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00176ef:	50                   	push   eax
c00176f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00176f4:	50                   	push   eax
c00176f5:	53                   	push   ebx
c00176f6:	e8 77 81 ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c00176fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017700:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001770b:	75 0a                	jne    c0017717 <Thr::loadDLL(char const*, bool)+0x70>
c001770d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017711:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017715:	75 3e                	jne    c0017755 <Thr::loadDLL(char const*, bool)+0xae>
c0017717:	89 f8                	mov    eax,edi
c0017719:	31 db                	xor    ebx,ebx
c001771b:	84 c0                	test   al,al
c001771d:	0f 84 ca 00 00 00    	je     c00177ed <Thr::loadDLL(char const*, bool)+0x146>
c0017723:	50                   	push   eax
c0017724:	50                   	push   eax
c0017725:	68 d5 1d 02 c0       	push   0xc0021dd5
c001772a:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001772e:	53                   	push   ebx
c001772f:	e8 73 8f fe ff       	call   c00006a7 <strcpy>
c0017734:	58                   	pop    eax
c0017735:	5a                   	pop    edx
c0017736:	56                   	push   esi
c0017737:	53                   	push   ebx
c0017738:	e8 2e 90 fe ff       	call   c000076b <strcat>
c001773d:	59                   	pop    ecx
c001773e:	5d                   	pop    ebp
c001773f:	68 e8 1d 02 c0       	push   0xc0021de8
c0017744:	53                   	push   ebx
c0017745:	e8 21 90 fe ff       	call   c000076b <strcat>
c001774a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001774d:	e8 76 d5 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	83 ec 0c             	sub    esp,0xc
c0017758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001775c:	e8 f5 44 ff ff       	call   c000bc56 <malloc>
c0017761:	89 34 24             	mov    DWORD PTR [esp],esi
c0017764:	89 c3                	mov    ebx,eax
c0017766:	e8 ba 8e fe ff       	call   c0000625 <strlen>
c001776b:	8b 2d 20 44 02 c0    	mov    ebp,DWORD PTR ds:0xc0024420
c0017771:	40                   	inc    eax
c0017772:	89 04 24             	mov    DWORD PTR [esp],eax
c0017775:	e8 dc 44 ff ff       	call   c000bc56 <malloc>
c001777a:	89 04 ad 40 48 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb7c0],eax
c0017781:	58                   	pop    eax
c0017782:	a1 20 44 02 c0       	mov    eax,ds:0xc0024420
c0017787:	5a                   	pop    edx
c0017788:	56                   	push   esi
c0017789:	ff 34 85 40 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb7c0]
c0017790:	e8 12 8f fe ff       	call   c00006a7 <strcpy>
c0017795:	a1 20 44 02 c0       	mov    eax,ds:0xc0024420
c001779a:	8d 50 01             	lea    edx,[eax+0x1]
c001779d:	89 1c 85 40 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9c0],ebx
c00177a4:	89 15 20 44 02 c0    	mov    DWORD PTR ds:0xc0024420,edx
c00177aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177ae:	59                   	pop    ecx
c00177af:	89 14 85 40 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbbc0],edx
c00177b6:	5d                   	pop    ebp
c00177b7:	53                   	push   ebx
c00177b8:	68 ea 1d 02 c0       	push   0xc0021dea
c00177bd:	e8 71 78 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00177c2:	83 c4 0c             	add    esp,0xc
c00177c5:	6a 01                	push   0x1
c00177c7:	53                   	push   ebx
c00177c8:	56                   	push   esi
c00177c9:	e8 d5 f6 ff ff       	call   c0016ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00177ce:	83 c4 10             	add    esp,0x10
c00177d1:	84 c0                	test   al,al
c00177d3:	75 18                	jne    c00177ed <Thr::loadDLL(char const*, bool)+0x146>
c00177d5:	31 db                	xor    ebx,ebx
c00177d7:	89 f8                	mov    eax,edi
c00177d9:	84 c0                	test   al,al
c00177db:	74 10                	je     c00177ed <Thr::loadDLL(char const*, bool)+0x146>
c00177dd:	83 ec 0c             	sub    esp,0xc
c00177e0:	68 09 1e 02 c0       	push   0xc0021e09
c00177e5:	e8 de d4 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00177ea:	83 c4 10             	add    esp,0x10
c00177ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177f3:	89 d8                	mov    eax,ebx
c00177f5:	5b                   	pop    ebx
c00177f6:	5e                   	pop    esi
c00177f7:	5f                   	pop    edi
c00177f8:	5d                   	pop    ebp
c00177f9:	c3                   	ret    

c00177fa <Thr::executeDLL(unsigned long, void*)>:
c00177fa:	56                   	push   esi
c00177fb:	53                   	push   ebx
c00177fc:	51                   	push   ecx
c00177fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017801:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017805:	85 db                	test   ebx,ebx
c0017807:	75 10                	jne    c0017819 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017809:	83 ec 0c             	sub    esp,0xc
c001780c:	68 28 1e 02 c0       	push   0xc0021e28
c0017811:	e8 b2 d4 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001781d:	89 d8                	mov    eax,ebx
c001781f:	5a                   	pop    edx
c0017820:	5b                   	pop    ebx
c0017821:	5e                   	pop    esi
c0017822:	ff e0                	jmp    eax

c0017824 <changeTSS>:
c0017824:	83 ec 0c             	sub    esp,0xc
c0017827:	e8 96 c7 ff ff       	call   c0013fc2 <thisCPU()>
c001782c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017832:	83 ec 08             	sub    esp,0x8
c0017835:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017838:	05 7c 11 00 00       	add    eax,0x117c
c001783d:	c1 e1 15             	shl    ecx,0x15
c0017840:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017845:	29 ca                	sub    edx,ecx
c0017847:	52                   	push   edx
c0017848:	50                   	push   eax
c0017849:	e8 44 5e ff ff       	call   c000d692 <TSS::setESP(unsigned long)>
c001784e:	83 c4 1c             	add    esp,0x1c
c0017851:	c3                   	ret    

c0017852 <Process::addArgs(char**)>:
c0017852:	57                   	push   edi
c0017853:	56                   	push   esi
c0017854:	53                   	push   ebx
c0017855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017859:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001785d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017867:	85 ff                	test   edi,edi
c0017869:	74 3d                	je     c00178a8 <Process::addArgs(char**)+0x56>
c001786b:	8b 07                	mov    eax,DWORD PTR [edi]
c001786d:	85 c0                	test   eax,eax
c001786f:	74 37                	je     c00178a8 <Process::addArgs(char**)+0x56>
c0017871:	31 db                	xor    ebx,ebx
c0017873:	83 ec 0c             	sub    esp,0xc
c0017876:	50                   	push   eax
c0017877:	e8 a9 8d fe ff       	call   c0000625 <strlen>
c001787c:	40                   	inc    eax
c001787d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017880:	e8 d1 43 ff ff       	call   c000bc56 <malloc>
c0017885:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001788c:	5a                   	pop    edx
c001788d:	59                   	pop    ecx
c001788e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017891:	43                   	inc    ebx
c0017892:	50                   	push   eax
c0017893:	e8 0f 8e fe ff       	call   c00006a7 <strcpy>
c0017898:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178a4:	85 c0                	test   eax,eax
c00178a6:	75 cb                	jne    c0017873 <Process::addArgs(char**)+0x21>
c00178a8:	5b                   	pop    ebx
c00178a9:	5e                   	pop    esi
c00178aa:	5f                   	pop    edi
c00178ab:	c3                   	ret    

c00178ac <Process::Process(char const*, Process*, char**)>:
c00178ac:	56                   	push   esi
c00178ad:	53                   	push   ebx
c00178ae:	83 ec 14             	sub    esp,0x14
c00178b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b5:	05 0c 02 00 00       	add    eax,0x20c
c00178ba:	bb 07 00 00 00       	mov    ebx,0x7
c00178bf:	89 c6                	mov    esi,eax
c00178c1:	85 db                	test   ebx,ebx
c00178c3:	78 12                	js     c00178d7 <Process::Process(char const*, Process*, char**)+0x2b>
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	56                   	push   esi
c00178c9:	e8 2c 78 00 00       	call   c001f0fa <ThreadControlBlock::ThreadControlBlock()>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	83 c6 63             	add    esi,0x63
c00178d4:	4b                   	dec    ebx
c00178d5:	eb ea                	jmp    c00178c1 <Process::Process(char const*, Process*, char**)+0x15>
c00178d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178db:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00178e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00178ef:	a1 e4 31 02 c0       	mov    eax,ds:0xc00231e4
c00178f4:	8d 50 01             	lea    edx,[eax+0x1]
c00178f7:	89 15 e4 31 02 c0    	mov    DWORD PTR ds:0xc00231e4,edx
c00178fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017901:	89 02                	mov    DWORD PTR [edx],eax
c0017903:	83 ec 0c             	sub    esp,0xc
c0017906:	6a 10                	push   0x10
c0017908:	e8 37 76 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	89 c3                	mov    ebx,eax
c0017912:	83 ec 08             	sub    esp,0x8
c0017915:	6a 00                	push   0x0
c0017917:	53                   	push   ebx
c0017918:	e8 bb 72 ff ff       	call   c000ebd8 <VAS::VAS(bool)>
c001791d:	83 c4 10             	add    esp,0x10
c0017920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017924:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001792a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017940:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017950:	85 c0                	test   eax,eax
c0017952:	74 42                	je     c0017996 <Process::Process(char const*, Process*, char**)+0xea>
c0017954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017958:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001795e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017968:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001796e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017972:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017978:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001797e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017982:	05 0c 01 00 00       	add    eax,0x10c
c0017987:	83 ec 08             	sub    esp,0x8
c001798a:	52                   	push   edx
c001798b:	50                   	push   eax
c001798c:	e8 16 8d fe ff       	call   c00006a7 <strcpy>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	eb 5c                	jmp    c00179f2 <Process::Process(char const*, Process*, char**)+0x146>
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	68 60 12 00 00       	push   0x1260
c001799e:	e8 a1 75 ff ff       	call   c000ef44 <operator new(unsigned long)>
c00179a3:	83 c4 10             	add    esp,0x10
c00179a6:	89 c3                	mov    ebx,eax
c00179a8:	83 ec 08             	sub    esp,0x8
c00179ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179af:	53                   	push   ebx
c00179b0:	e8 db 59 ff ff       	call   c000d390 <VgaText::VgaText(char const*)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00179c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	50                   	push   eax
c00179d0:	e8 bc 4d ff ff       	call   c000c791 <addToTerminalCycle(VgaText*)>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179dc:	05 0c 01 00 00       	add    eax,0x10c
c00179e1:	83 ec 08             	sub    esp,0x8
c00179e4:	68 52 1e 02 c0       	push   0xc0021e52
c00179e9:	50                   	push   eax
c00179ea:	e8 b8 8c fe ff       	call   c00006a7 <strcpy>
c00179ef:	83 c4 10             	add    esp,0x10
c00179f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f6:	83 c0 0c             	add    eax,0xc
c00179f9:	83 ec 08             	sub    esp,0x8
c00179fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a00:	50                   	push   eax
c0017a01:	e8 a1 8c fe ff       	call   c00006a7 <strcpy>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	83 ec 08             	sub    esp,0x8
c0017a0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a14:	e8 39 fe ff ff       	call   c0017852 <Process::addArgs(char**)>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	83 ec 08             	sub    esp,0x8
c0017a1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a27:	e8 3e ef ff ff       	call   c001696a <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a2c:	83 c4 10             	add    esp,0x10
c0017a2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a37:	83 f0 01             	xor    eax,0x1
c0017a3a:	88 c2                	mov    dl,al
c0017a3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a40:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017a46:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a4b:	83 ec 08             	sub    esp,0x8
c0017a4e:	50                   	push   eax
c0017a4f:	68 50 1f 02 c0       	push   0xc0021f50
c0017a54:	e8 da 75 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0017a59:	83 c4 10             	add    esp,0x10
c0017a5c:	90                   	nop
c0017a5d:	83 c4 14             	add    esp,0x14
c0017a60:	5b                   	pop    ebx
c0017a61:	5e                   	pop    esi
c0017a62:	c3                   	ret    
c0017a63:	90                   	nop

c0017a64 <Process::Process(bool, char const*, Process*, char**)>:
c0017a64:	56                   	push   esi
c0017a65:	53                   	push   ebx
c0017a66:	83 ec 14             	sub    esp,0x14
c0017a69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a6d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a75:	05 0c 02 00 00       	add    eax,0x20c
c0017a7a:	bb 07 00 00 00       	mov    ebx,0x7
c0017a7f:	89 c6                	mov    esi,eax
c0017a81:	85 db                	test   ebx,ebx
c0017a83:	78 12                	js     c0017a97 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017a85:	83 ec 0c             	sub    esp,0xc
c0017a88:	56                   	push   esi
c0017a89:	e8 6c 76 00 00       	call   c001f0fa <ThreadControlBlock::ThreadControlBlock()>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	83 c6 63             	add    esi,0x63
c0017a94:	4b                   	dec    ebx
c0017a95:	eb ea                	jmp    c0017a81 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017aaf:	a1 e4 31 02 c0       	mov    eax,ds:0xc00231e4
c0017ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab7:	89 15 e4 31 02 c0    	mov    DWORD PTR ds:0xc00231e4,edx
c0017abd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ac1:	89 02                	mov    DWORD PTR [edx],eax
c0017ac3:	83 ec 0c             	sub    esp,0xc
c0017ac6:	6a 10                	push   0x10
c0017ac8:	e8 77 74 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0017acd:	83 c4 10             	add    esp,0x10
c0017ad0:	89 c3                	mov    ebx,eax
c0017ad2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ad7:	83 ec 08             	sub    esp,0x8
c0017ada:	50                   	push   eax
c0017adb:	53                   	push   ebx
c0017adc:	e8 f7 70 ff ff       	call   c000ebd8 <VAS::VAS(bool)>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae8:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af2:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017afc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b04:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b14:	85 c0                	test   eax,eax
c0017b16:	74 42                	je     c0017b5a <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b1c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b22:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b2c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b36:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b3c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b46:	05 0c 01 00 00       	add    eax,0x10c
c0017b4b:	83 ec 08             	sub    esp,0x8
c0017b4e:	52                   	push   edx
c0017b4f:	50                   	push   eax
c0017b50:	e8 52 8b fe ff       	call   c00006a7 <strcpy>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	eb 5c                	jmp    c0017bb6 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	68 60 12 00 00       	push   0x1260
c0017b62:	e8 dd 73 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	89 c3                	mov    ebx,eax
c0017b6c:	83 ec 08             	sub    esp,0x8
c0017b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b73:	53                   	push   ebx
c0017b74:	e8 17 58 ff ff       	call   c000d390 <VgaText::VgaText(char const*)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b80:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	50                   	push   eax
c0017b94:	e8 f8 4b ff ff       	call   c000c791 <addToTerminalCycle(VgaText*)>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ba0:	05 0c 01 00 00       	add    eax,0x10c
c0017ba5:	83 ec 08             	sub    esp,0x8
c0017ba8:	68 52 1e 02 c0       	push   0xc0021e52
c0017bad:	50                   	push   eax
c0017bae:	e8 f4 8a fe ff       	call   c00006a7 <strcpy>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bba:	83 c0 0c             	add    eax,0xc
c0017bbd:	83 ec 08             	sub    esp,0x8
c0017bc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bc4:	50                   	push   eax
c0017bc5:	e8 dd 8a fe ff       	call   c00006a7 <strcpy>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	83 ec 08             	sub    esp,0x8
c0017bd0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017bd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bd8:	e8 75 fc ff ff       	call   c0017852 <Process::addArgs(char**)>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	90                   	nop
c0017be1:	83 c4 14             	add    esp,0x14
c0017be4:	5b                   	pop    ebx
c0017be5:	5e                   	pop    esi
c0017be6:	c3                   	ret    

c0017be7 <disableIRQs()>:
c0017be7:	fa                   	cli    
c0017be8:	ff 05 ec 4b 02 c0    	inc    DWORD PTR ds:0xc0024bec
c0017bee:	c3                   	ret    

c0017bef <getIRQNestingLevel()>:
c0017bef:	a1 ec 4b 02 c0       	mov    eax,ds:0xc0024bec
c0017bf4:	c3                   	ret    

c0017bf5 <enableIRQs()>:
c0017bf5:	a1 ec 4b 02 c0       	mov    eax,ds:0xc0024bec
c0017bfa:	48                   	dec    eax
c0017bfb:	a3 ec 4b 02 c0       	mov    ds:0xc0024bec,eax
c0017c00:	75 01                	jne    c0017c03 <enableIRQs()+0xe>
c0017c02:	fb                   	sti    
c0017c03:	c3                   	ret    

c0017c04 <lockScheduler()>:
c0017c04:	eb e1                	jmp    c0017be7 <disableIRQs()>

c0017c06 <unlockScheduler()>:
c0017c06:	eb ed                	jmp    c0017bf5 <enableIRQs()>

c0017c08 <userModeEntryPoint(void*)>:
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	e8 f6 ff ff ff       	call   c0017c06 <unlockScheduler()>
c0017c10:	fb                   	sti    
c0017c11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c19:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c23:	83 c4 0c             	add    esp,0xc
c0017c26:	e9 bb 85 fe ff       	jmp    c00001e6 <goToUsermode>

c0017c2b <lockStuff()>:
c0017c2b:	e8 b7 ff ff ff       	call   c0017be7 <disableIRQs()>
c0017c30:	ff 05 e8 4b 02 c0    	inc    DWORD PTR ds:0xc0024be8
c0017c36:	c3                   	ret    

c0017c37 <taskStartupFunction>:
c0017c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c3c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017c3f:	c3                   	ret    

c0017c40 <updateTimeUsed()>:
c0017c40:	57                   	push   edi
c0017c41:	56                   	push   esi
c0017c42:	53                   	push   ebx
c0017c43:	e8 7a c3 ff ff       	call   c0013fc2 <thisCPU()>
c0017c48:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017c4f:	74 49                	je     c0017c9a <updateTimeUsed()+0x5a>
c0017c51:	0f 31                	rdtsc  
c0017c53:	89 c1                	mov    ecx,eax
c0017c55:	a3 28 4c 02 c0       	mov    ds:0xc0024c28,eax
c0017c5a:	2b 0d 18 4c 02 c0    	sub    ecx,DWORD PTR ds:0xc0024c18
c0017c60:	89 d3                	mov    ebx,edx
c0017c62:	89 0d 20 4c 02 c0    	mov    DWORD PTR ds:0xc0024c20,ecx
c0017c68:	1b 1d 1c 4c 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024c1c
c0017c6e:	a3 18 4c 02 c0       	mov    ds:0xc0024c18,eax
c0017c73:	89 1d 24 4c 02 c0    	mov    DWORD PTR ds:0xc0024c24,ebx
c0017c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c7e:	89 15 2c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c2c,edx
c0017c84:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017c87:	89 15 1c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c1c,edx
c0017c8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017c90:	01 f1                	add    ecx,esi
c0017c92:	11 fb                	adc    ebx,edi
c0017c94:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017c97:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017c9a:	5b                   	pop    ebx
c0017c9b:	5e                   	pop    esi
c0017c9c:	5f                   	pop    edi
c0017c9d:	c3                   	ret    

c0017c9e <switchToThread(ThreadControlBlock*)>:
c0017c9e:	53                   	push   ebx
c0017c9f:	83 ec 08             	sub    esp,0x8
c0017ca2:	a1 e8 4b 02 c0       	mov    eax,ds:0xc0024be8
c0017ca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cab:	85 c0                	test   eax,eax
c0017cad:	75 30                	jne    c0017cdf <switchToThread(ThreadControlBlock*)+0x41>
c0017caf:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017cb2:	3c ff                	cmp    al,0xff
c0017cb4:	74 25                	je     c0017cdb <switchToThread(ThreadControlBlock*)+0x3d>
c0017cb6:	0f b6 d0             	movzx  edx,al
c0017cb9:	b8 84 03 00 00       	mov    eax,0x384
c0017cbe:	29 d0                	sub    eax,edx
c0017cc0:	c1 e0 10             	shl    eax,0x10
c0017cc3:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017cc6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017cc9:	e8 72 ff ff ff       	call   c0017c40 <updateTimeUsed()>
c0017cce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017cd2:	83 c4 08             	add    esp,0x8
c0017cd5:	5b                   	pop    ebx
c0017cd6:	e9 44 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017cdb:	31 c0                	xor    eax,eax
c0017cdd:	eb e7                	jmp    c0017cc6 <switchToThread(ThreadControlBlock*)+0x28>
c0017cdf:	c7 05 e4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024be4,0x1
c0017ce9:	83 c4 08             	add    esp,0x8
c0017cec:	5b                   	pop    ebx
c0017ced:	c3                   	ret    

c0017cee <Semaphore::Semaphore(int)>:
c0017cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cf6:	89 10                	mov    DWORD PTR [eax],edx
c0017cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d19:	90                   	nop
c0017d1a:	c3                   	ret    
c0017d1b:	90                   	nop

c0017d1c <Mutex::Mutex()>:
c0017d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d20:	6a 01                	push   0x1
c0017d22:	50                   	push   eax
c0017d23:	e8 c6 ff ff ff       	call   c0017cee <Semaphore::Semaphore(int)>
c0017d28:	83 c4 08             	add    esp,0x8
c0017d2b:	90                   	nop
c0017d2c:	c3                   	ret    
c0017d2d:	90                   	nop

c0017d2e <Process::createThread(void (*)(void*), void*, int)>:
c0017d2e:	55                   	push   ebp
c0017d2f:	31 c9                	xor    ecx,ecx
c0017d31:	57                   	push   edi
c0017d32:	56                   	push   esi
c0017d33:	53                   	push   ebx
c0017d34:	83 ec 1c             	sub    esp,0x1c
c0017d37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017d3b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017d42:	89 f2                	mov    edx,esi
c0017d44:	0f b7 c2             	movzx  eax,dx
c0017d47:	83 e2 01             	and    edx,0x1
c0017d4a:	74 14                	je     c0017d60 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017d4c:	d1 f8                	sar    eax,1
c0017d4e:	41                   	inc    ecx
c0017d4f:	89 c2                	mov    edx,eax
c0017d51:	83 f9 10             	cmp    ecx,0x10
c0017d54:	75 ee                	jne    c0017d44 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017d56:	83 c4 1c             	add    esp,0x1c
c0017d59:	31 c0                	xor    eax,eax
c0017d5b:	5b                   	pop    ebx
c0017d5c:	5e                   	pop    esi
c0017d5d:	5f                   	pop    edi
c0017d5e:	5d                   	pop    ebp
c0017d5f:	c3                   	ret    
c0017d60:	83 ec 08             	sub    esp,0x8
c0017d63:	b8 01 00 00 00       	mov    eax,0x1
c0017d68:	d3 e0                	shl    eax,cl
c0017d6a:	09 c6                	or     esi,eax
c0017d6c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d72:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d79:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017d7c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d7f:	01 ce                	add    esi,ecx
c0017d81:	89 f0                	mov    eax,esi
c0017d83:	c1 e0 05             	shl    eax,0x5
c0017d86:	01 c6                	add    esi,eax
c0017d88:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017d8b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d91:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d97:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d9b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017da1:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017da7:	89 ca                	mov    edx,ecx
c0017da9:	f7 da                	neg    edx
c0017dab:	c1 e2 15             	shl    edx,0x15
c0017dae:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017db4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017dba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017dbe:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017dc8:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017dce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017dd2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017dd8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017de2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dec:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017df3:	50                   	push   eax
c0017df4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017df8:	68 08 4c 02 c0       	push   0xc0024c08
c0017dfd:	e8 50 71 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e02:	83 c4 10             	add    esp,0x10
c0017e05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e09:	83 c4 1c             	add    esp,0x1c
c0017e0c:	5b                   	pop    ebx
c0017e0d:	5e                   	pop    esi
c0017e0e:	5f                   	pop    edi
c0017e0f:	5d                   	pop    ebp
c0017e10:	c3                   	ret    
c0017e11:	90                   	nop

c0017e12 <Process::createUserThread()>:
c0017e12:	83 ec 0c             	sub    esp,0xc
c0017e15:	68 80 00 00 00       	push   0x80
c0017e1a:	6a 00                	push   0x0
c0017e1c:	68 08 7c 01 c0       	push   0xc0017c08
c0017e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e25:	e8 04 ff ff ff       	call   c0017d2e <Process::createThread(void (*)(void*), void*, int)>
c0017e2a:	83 c4 1c             	add    esp,0x1c
c0017e2d:	c3                   	ret    

c0017e2e <setupMultitasking(void (*)())>:
c0017e2e:	56                   	push   esi
c0017e2f:	53                   	push   ebx
c0017e30:	53                   	push   ebx
c0017e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e35:	eb 10                	jmp    c0017e47 <setupMultitasking(void (*)())+0x19>
c0017e37:	83 ec 0c             	sub    esp,0xc
c0017e3a:	68 08 4c 02 c0       	push   0xc0024c08
c0017e3f:	e8 60 70 00 00       	call   c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 08 4c 02 c0       	push   0xc0024c08
c0017e4f:	e8 34 70 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	84 c0                	test   al,al
c0017e59:	74 dc                	je     c0017e37 <setupMultitasking(void (*)())+0x9>
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	68 3b 07 00 00       	push   0x73b
c0017e63:	e8 dc 70 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0017e68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e6f:	89 c3                	mov    ebx,eax
c0017e71:	6a 00                	push   0x0
c0017e73:	68 56 1e 02 c0       	push   0xc0021e56
c0017e78:	6a 01                	push   0x1
c0017e7a:	50                   	push   eax
c0017e7b:	e8 e4 fb ff ff       	call   c0017a64 <Process::Process(bool, char const*, Process*, char**)>
c0017e80:	83 c4 18             	add    esp,0x18
c0017e83:	89 1d 14 4c 02 c0    	mov    DWORD PTR ds:0xc0024c14,ebx
c0017e89:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e8f:	68 78 1f 02 c0       	push   0xc0021f78
c0017e94:	e8 9a 71 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0017e99:	58                   	pop    eax
c0017e9a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017ea0:	e8 60 50 ff ff       	call   c000cf05 <setActiveTerminal(VgaText*)>
c0017ea5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017ead:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017eb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017eb6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017ec0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ec6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017ecc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017ed6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017ee0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017eea:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ef0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017ef6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017f00:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017f06:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f10:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f16:	5a                   	pop    edx
c0017f17:	59                   	pop    ecx
c0017f18:	68 52 1e 02 c0       	push   0xc0021e52
c0017f1d:	50                   	push   eax
c0017f1e:	e8 84 87 fe ff       	call   c00006a7 <strcpy>
c0017f23:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017f2a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f2e:	83 c4 14             	add    esp,0x14
c0017f31:	5b                   	pop    ebx
c0017f32:	5e                   	pop    esi
c0017f33:	e9 d9 82 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017f38 <schedule()>:
c0017f38:	a1 e8 4b 02 c0       	mov    eax,ds:0xc0024be8
c0017f3d:	85 c0                	test   eax,eax
c0017f3f:	74 0b                	je     c0017f4c <schedule()+0x14>
c0017f41:	c7 05 e4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024be4,0x1
c0017f4b:	c3                   	ret    
c0017f4c:	53                   	push   ebx
c0017f4d:	83 ec 14             	sub    esp,0x14
c0017f50:	68 08 4c 02 c0       	push   0xc0024c08
c0017f55:	e8 2e 6f 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	84 c0                	test   al,al
c0017f5f:	75 38                	jne    c0017f99 <schedule()+0x61>
c0017f61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f69:	4a                   	dec    edx
c0017f6a:	74 32                	je     c0017f9e <schedule()+0x66>
c0017f6c:	83 ec 0c             	sub    esp,0xc
c0017f6f:	68 08 4c 02 c0       	push   0xc0024c08
c0017f74:	e8 07 6f 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f79:	c7 04 24 08 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c08
c0017f80:	89 c3                	mov    ebx,eax
c0017f82:	e8 1d 6f 00 00       	call   c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f87:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f91:	e8 08 fd ff ff       	call   c0017c9e <switchToThread(ThreadControlBlock*)>
c0017f96:	83 c4 10             	add    esp,0x10
c0017f99:	83 c4 08             	add    esp,0x8
c0017f9c:	5b                   	pop    ebx
c0017f9d:	c3                   	ret    
c0017f9e:	83 ec 08             	sub    esp,0x8
c0017fa1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017fa8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017fae:	68 08 4c 02 c0       	push   0xc0024c08
c0017fb3:	e8 9a 6f 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	eb af                	jmp    c0017f6c <schedule()+0x34>

c0017fbd <unlockStuff()>:
c0017fbd:	a1 e8 4b 02 c0       	mov    eax,ds:0xc0024be8
c0017fc2:	48                   	dec    eax
c0017fc3:	a3 e8 4b 02 c0       	mov    ds:0xc0024be8,eax
c0017fc8:	75 09                	jne    c0017fd3 <unlockStuff()+0x16>
c0017fca:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c0017fcf:	85 c0                	test   eax,eax
c0017fd1:	75 05                	jne    c0017fd8 <unlockStuff()+0x1b>
c0017fd3:	e9 1d fc ff ff       	jmp    c0017bf5 <enableIRQs()>
c0017fd8:	83 ec 0c             	sub    esp,0xc
c0017fdb:	c7 05 e4 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024be4,0x0
c0017fe5:	e8 4e ff ff ff       	call   c0017f38 <schedule()>
c0017fea:	83 c4 0c             	add    esp,0xc
c0017fed:	e9 03 fc ff ff       	jmp    c0017bf5 <enableIRQs()>

c0017ff2 <forkProcess(regs*)>:
c0017ff2:	56                   	push   esi
c0017ff3:	53                   	push   ebx
c0017ff4:	50                   	push   eax
c0017ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ffa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017ffd:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0018005:	0f 85 3e 01 00 00    	jne    c0018149 <forkProcess(regs*)+0x157>
c001800b:	e8 1b fc ff ff       	call   c0017c2b <lockStuff()>
c0018010:	83 ec 0c             	sub    esp,0xc
c0018013:	68 3b 07 00 00       	push   0x73b
c0018018:	e8 27 6f ff ff       	call   c000ef44 <operator new(unsigned long)>
c001801d:	89 c3                	mov    ebx,eax
c001801f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018024:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018027:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001802e:	50                   	push   eax
c001802f:	83 c0 0c             	add    eax,0xc
c0018032:	50                   	push   eax
c0018033:	6a 00                	push   0x0
c0018035:	53                   	push   ebx
c0018036:	e8 29 fa ff ff       	call   c0017a64 <Process::Process(bool, char const*, Process*, char**)>
c001803b:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0018041:	83 c4 20             	add    esp,0x20
c0018044:	85 f6                	test   esi,esi
c0018046:	74 16                	je     c001805e <forkProcess(regs*)+0x6c>
c0018048:	83 ec 0c             	sub    esp,0xc
c001804b:	56                   	push   esi
c001804c:	e8 2d 62 ff ff       	call   c000e27e <VAS::~VAS()>
c0018051:	59                   	pop    ecx
c0018052:	58                   	pop    eax
c0018053:	6a 10                	push   0x10
c0018055:	56                   	push   esi
c0018056:	e8 f8 6e ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001805b:	83 c4 10             	add    esp,0x10
c001805e:	83 ec 0c             	sub    esp,0xc
c0018061:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c001806a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018072:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018078:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c001807e:	6a 10                	push   0x10
c0018080:	e8 bf 6e ff ff       	call   c000ef44 <operator new(unsigned long)>
c0018085:	59                   	pop    ecx
c0018086:	89 c6                	mov    esi,eax
c0018088:	58                   	pop    eax
c0018089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001808e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018091:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0018097:	56                   	push   esi
c0018098:	e8 03 67 ff ff       	call   c000e7a0 <VAS::VAS(VAS*)>
c001809d:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c00180a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00180a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00180a8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00180ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180b6:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c00180bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00180c4:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00180ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180cf:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c00180d2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00180dc:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c00180e2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00180e8:	81 c3 0c 02 00 00    	add    ebx,0x20c
c00180ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180f3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00180f6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00180fd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0018100:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0018107:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001810e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0018115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001811d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0018120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018125:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0018128:	58                   	pop    eax
c0018129:	5a                   	pop    edx
c001812a:	53                   	push   ebx
c001812b:	68 08 4c 02 c0       	push   0xc0024c08
c0018130:	e8 1d 6e 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018135:	e8 83 fe ff ff       	call   c0017fbd <unlockStuff()>
c001813a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018145:	5a                   	pop    edx
c0018146:	5b                   	pop    ebx
c0018147:	5e                   	pop    esi
c0018148:	c3                   	ret    
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	68 ac 1f 02 c0       	push   0xc0021fac
c0018151:	e8 dd 6e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001815e:	eb e5                	jmp    c0018145 <forkProcess(regs*)+0x153>

c0018160 <Semaphore::tryAcquire()>:
c0018160:	83 ec 0c             	sub    esp,0xc
c0018163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018167:	e8 bf fa ff ff       	call   c0017c2b <lockStuff()>
c001816c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001816f:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018171:	7c 0b                	jl     c001817e <Semaphore::tryAcquire()+0x1e>
c0018173:	e8 45 fe ff ff       	call   c0017fbd <unlockStuff()>
c0018178:	31 c0                	xor    eax,eax
c001817a:	83 c4 0c             	add    esp,0xc
c001817d:	c3                   	ret    
c001817e:	42                   	inc    edx
c001817f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018182:	e8 36 fe ff ff       	call   c0017fbd <unlockStuff()>
c0018187:	b0 01                	mov    al,0x1
c0018189:	83 c4 0c             	add    esp,0xc
c001818c:	c3                   	ret    
c001818d:	90                   	nop

c001818e <Semaphore::assertLocked(char const*)>:
c001818e:	83 ec 0c             	sub    esp,0xc
c0018191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018195:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018199:	e8 8d fa ff ff       	call   c0017c2b <lockStuff()>
c001819e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00181a0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c00181a3:	7c 08                	jl     c00181ad <Semaphore::assertLocked(char const*)+0x1f>
c00181a5:	83 c4 0c             	add    esp,0xc
c00181a8:	e9 10 fe ff ff       	jmp    c0017fbd <unlockStuff()>
c00181ad:	83 ec 0c             	sub    esp,0xc
c00181b0:	52                   	push   edx
c00181b1:	e8 12 cb ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	83 c4 0c             	add    esp,0xc
c00181bc:	e9 fc fd ff ff       	jmp    c0017fbd <unlockStuff()>

c00181c1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00181c1:	83 ec 0c             	sub    esp,0xc
c00181c4:	e8 26 fa ff ff       	call   c0017bef <getIRQNestingLevel()>
c00181c9:	83 ec 08             	sub    esp,0x8
c00181cc:	50                   	push   eax
c00181cd:	68 d8 1f 02 c0       	push   0xc0021fd8
c00181d2:	e8 5c 6e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00181d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181e3:	e8 50 fd ff ff       	call   c0017f38 <schedule()>
c00181e8:	e8 19 fa ff ff       	call   c0017c06 <unlockScheduler()>
c00181ed:	e8 fd f9 ff ff       	call   c0017bef <getIRQNestingLevel()>
c00181f2:	5a                   	pop    edx
c00181f3:	59                   	pop    ecx
c00181f4:	50                   	push   eax
c00181f5:	68 0c 20 02 c0       	push   0xc002200c
c00181fa:	e8 34 6e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00181ff:	83 c4 1c             	add    esp,0x1c
c0018202:	c3                   	ret    

c0018203 <blockTask(TaskState)>:
c0018203:	83 ec 0c             	sub    esp,0xc
c0018206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001820a:	e8 f5 f9 ff ff       	call   c0017c04 <lockScheduler()>
c001820f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018214:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018217:	e8 1c fd ff ff       	call   c0017f38 <schedule()>
c001821c:	83 c4 0c             	add    esp,0xc
c001821f:	e9 e2 f9 ff ff       	jmp    c0017c06 <unlockScheduler()>

c0018224 <waitTask(int, int*, int)>:
c0018224:	83 ec 18             	sub    esp,0x18
c0018227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001822c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018230:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018233:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001823c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001823f:	6a 07                	push   0x7
c0018241:	e8 bd ff ff ff       	call   c0018203 <blockTask(TaskState)>
c0018246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018251:	85 d2                	test   edx,edx
c0018253:	74 0a                	je     c001825f <waitTask(int, int*, int)+0x3b>
c0018255:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018258:	89 02                	mov    DWORD PTR [edx],eax
c001825a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001825f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018262:	83 c4 0c             	add    esp,0xc
c0018265:	c3                   	ret    

c0018266 <nanoSleepUntil(unsigned long long)>:
c0018266:	83 ec 0c             	sub    esp,0xc
c0018269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018271:	3b 05 30 3e 02 c0    	cmp    eax,DWORD PTR ds:0xc0023e30
c0018277:	89 d1                	mov    ecx,edx
c0018279:	1b 0d 34 3e 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023e34
c001827f:	73 04                	jae    c0018285 <nanoSleepUntil(unsigned long long)+0x1f>
c0018281:	83 c4 0c             	add    esp,0xc
c0018284:	c3                   	ret    
c0018285:	e8 a1 f9 ff ff       	call   c0017c2b <lockStuff()>
c001828a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018290:	83 ec 08             	sub    esp,0x8
c0018293:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018296:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018299:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001829f:	68 fc 4b 02 c0       	push   0xc0024bfc
c00182a4:	e8 a9 6c 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182a9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00182b0:	e8 4e ff ff ff       	call   c0018203 <blockTask(TaskState)>
c00182b5:	83 c4 1c             	add    esp,0x1c
c00182b8:	e9 00 fd ff ff       	jmp    c0017fbd <unlockStuff()>

c00182bd <nanoSleep(unsigned long long)>:
c00182bd:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00182c2:	8b 15 34 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e34
c00182c8:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00182cc:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00182d0:	eb 94                	jmp    c0018266 <nanoSleepUntil(unsigned long long)>

c00182d2 <sleep(unsigned long long)>:
c00182d2:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c00182da:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c00182df:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00182e3:	01 ca                	add    edx,ecx
c00182e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00182ed:	eb ce                	jmp    c00182bd <nanoSleep(unsigned long long)>
c00182ef:	90                   	nop

c00182f0 <Semaphore::acquire()>:
c00182f0:	83 ec 0c             	sub    esp,0xc
c00182f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f7:	e8 2f f9 ff ff       	call   c0017c2b <lockStuff()>
c00182fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00182ff:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018301:	7d 0c                	jge    c001830f <Semaphore::acquire()+0x1f>
c0018303:	42                   	inc    edx
c0018304:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018307:	83 c4 0c             	add    esp,0xc
c001830a:	e9 ae fc ff ff       	jmp    c0017fbd <unlockStuff()>
c001830f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018315:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001831c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001831f:	85 d2                	test   edx,edx
c0018321:	74 2a                	je     c001834d <Semaphore::acquire()+0x5d>
c0018323:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018326:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001832c:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001832f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018335:	83 ec 0c             	sub    esp,0xc
c0018338:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001833b:	6a 05                	push   0x5
c001833d:	e8 c1 fe ff ff       	call   c0018203 <blockTask(TaskState)>
c0018342:	83 c4 10             	add    esp,0x10
c0018345:	83 c4 0c             	add    esp,0xc
c0018348:	e9 70 fc ff ff       	jmp    c0017fbd <unlockStuff()>
c001834d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018353:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018356:	eb d7                	jmp    c001832f <Semaphore::acquire()+0x3f>

c0018358 <execveProcess(char const*, char* const*, char* const*)>:
c0018358:	56                   	push   esi
c0018359:	53                   	push   ebx
c001835a:	50                   	push   eax
c001835b:	e8 cb f8 ff ff       	call   c0017c2b <lockStuff()>
c0018360:	83 ec 0c             	sub    esp,0xc
c0018363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018368:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001836b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0018371:	68 3b 07 00 00       	push   0x73b
c0018376:	e8 c9 6b ff ff       	call   c000ef44 <operator new(unsigned long)>
c001837b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001837f:	89 c3                	mov    ebx,eax
c0018381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018386:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018389:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c001838f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018393:	53                   	push   ebx
c0018394:	e8 13 f5 ff ff       	call   c00178ac <Process::Process(char const*, Process*, char**)>
c0018399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001839e:	83 c4 20             	add    esp,0x20
c00183a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183a4:	85 f6                	test   esi,esi
c00183a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a8:	89 03                	mov    DWORD PTR [ebx],eax
c00183aa:	74 06                	je     c00183b2 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c00183ac:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c00183b2:	83 ec 0c             	sub    esp,0xc
c00183b5:	53                   	push   ebx
c00183b6:	e8 57 fa ff ff       	call   c0017e12 <Process::createUserThread()>
c00183bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00183c2:	e8 3c fe ff ff       	call   c0018203 <blockTask(TaskState)>
c00183c7:	e8 f1 fb ff ff       	call   c0017fbd <unlockStuff()>
c00183cc:	e8 33 f8 ff ff       	call   c0017c04 <lockScheduler()>
c00183d1:	e8 62 fb ff ff       	call   c0017f38 <schedule()>
c00183d6:	e8 2b f8 ff ff       	call   c0017c06 <unlockScheduler()>
c00183db:	83 c4 14             	add    esp,0x14
c00183de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00183e3:	5b                   	pop    ebx
c00183e4:	5e                   	pop    esi
c00183e5:	c3                   	ret    

c00183e6 <taskReturned>:
c00183e6:	83 ec 18             	sub    esp,0x18
c00183e9:	68 40 20 02 c0       	push   0xc0022040
c00183ee:	e8 d5 c8 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	83 ec 0c             	sub    esp,0xc
c00183f9:	6a 02                	push   0x2
c00183fb:	e8 03 fe ff ff       	call   c0018203 <blockTask(TaskState)>
c0018400:	e8 ff f7 ff ff       	call   c0017c04 <lockScheduler()>
c0018405:	e8 2e fb ff ff       	call   c0017f38 <schedule()>
c001840a:	e8 f7 f7 ff ff       	call   c0017c06 <unlockScheduler()>
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	eb e2                	jmp    c00183f6 <taskReturned+0x10>

c0018414 <unblockTask(ThreadControlBlock*)>:
c0018414:	53                   	push   ebx
c0018415:	83 ec 08             	sub    esp,0x8
c0018418:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001841c:	e8 e3 f7 ff ff       	call   c0017c04 <lockScheduler()>
c0018421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018424:	85 c0                	test   eax,eax
c0018426:	74 5c                	je     c0018484 <unblockTask(ThreadControlBlock*)+0x70>
c0018428:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001842b:	48                   	dec    eax
c001842c:	74 31                	je     c001845f <unblockTask(ThreadControlBlock*)+0x4b>
c001842e:	83 ec 0c             	sub    esp,0xc
c0018431:	68 08 4c 02 c0       	push   0xc0024c08
c0018436:	e8 45 6a 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001843b:	83 c4 10             	add    esp,0x10
c001843e:	85 c0                	test   eax,eax
c0018440:	75 17                	jne    c0018459 <unblockTask(ThreadControlBlock*)+0x45>
c0018442:	eb 65                	jmp    c00184a9 <unblockTask(ThreadControlBlock*)+0x95>
c0018444:	83 ec 08             	sub    esp,0x8
c0018447:	50                   	push   eax
c0018448:	68 08 4c 02 c0       	push   0xc0024c08
c001844d:	e8 3e 6d 00 00       	call   c001f190 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	85 c0                	test   eax,eax
c0018457:	74 50                	je     c00184a9 <unblockTask(ThreadControlBlock*)+0x95>
c0018459:	39 c3                	cmp    ebx,eax
c001845b:	75 e7                	jne    c0018444 <unblockTask(ThreadControlBlock*)+0x30>
c001845d:	eb 1c                	jmp    c001847b <unblockTask(ThreadControlBlock*)+0x67>
c001845f:	83 ec 0c             	sub    esp,0xc
c0018462:	68 30 21 02 c0       	push   0xc0022130
c0018467:	e8 c7 6b ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001846c:	c7 04 24 bc 20 02 c0 	mov    DWORD PTR [esp],0xc00220bc
c0018473:	e8 bb 6b ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	83 c4 08             	add    esp,0x8
c001847e:	5b                   	pop    ebx
c001847f:	e9 82 f7 ff ff       	jmp    c0017c06 <unlockScheduler()>
c0018484:	83 ec 0c             	sub    esp,0xc
c0018487:	68 74 20 02 c0       	push   0xc0022074
c001848c:	e8 a2 6b ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018491:	c7 04 24 bc 20 02 c0 	mov    DWORD PTR [esp],0xc00220bc
c0018498:	e8 96 6b ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001849d:	83 c4 10             	add    esp,0x10
c00184a0:	83 c4 08             	add    esp,0x8
c00184a3:	5b                   	pop    ebx
c00184a4:	e9 5d f7 ff ff       	jmp    c0017c06 <unlockScheduler()>
c00184a9:	83 ec 08             	sub    esp,0x8
c00184ac:	53                   	push   ebx
c00184ad:	68 08 4c 02 c0       	push   0xc0024c08
c00184b2:	e8 9b 6a 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	83 c4 08             	add    esp,0x8
c00184bd:	5b                   	pop    ebx
c00184be:	e9 43 f7 ff ff       	jmp    c0017c06 <unlockScheduler()>

c00184c3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184c3:	55                   	push   ebp
c00184c4:	57                   	push   edi
c00184c5:	56                   	push   esi
c00184c6:	53                   	push   ebx
c00184c7:	83 ec 1c             	sub    esp,0x1c
c00184ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184ce:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184d1:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c00184d7:	85 c9                	test   ecx,ecx
c00184d9:	7e 20                	jle    c00184fb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c00184db:	31 f6                	xor    esi,esi
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c00184e7:	46                   	inc    esi
c00184e8:	e8 79 37 ff ff       	call   c000bc66 <free>
c00184ed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184f9:	7f e2                	jg     c00184dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00184fb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018505:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001850a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001850d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018510:	d3 c0                	rol    eax,cl
c0018512:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018519:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001851c:	89 f7                	mov    edi,esi
c001851e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018526:	0f 85 4f 01 00 00    	jne    c001867b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001852c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018532:	85 c0                	test   eax,eax
c0018534:	0f 84 aa 00 00 00    	je     c00185e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001853a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001853d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018541:	31 c9                	xor    ecx,ecx
c0018543:	eb 10                	jmp    c0018555 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018545:	41                   	inc    ecx
c0018546:	83 f9 10             	cmp    ecx,0x10
c0018549:	0f 84 95 00 00 00    	je     c00185e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001854f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018555:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001855c:	d3 fa                	sar    edx,cl
c001855e:	83 e2 01             	and    edx,0x1
c0018561:	74 e2                	je     c0018545 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018563:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018566:	01 ca                	add    edx,ecx
c0018568:	89 d5                	mov    ebp,edx
c001856a:	c1 e5 05             	shl    ebp,0x5
c001856d:	01 ea                	add    edx,ebp
c001856f:	01 d0                	add    eax,edx
c0018571:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018577:	83 fd 07             	cmp    ebp,0x7
c001857a:	75 c9                	jne    c0018545 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001857c:	05 40 02 00 00       	add    eax,0x240
c0018581:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018584:	83 fd ff             	cmp    ebp,0xffffffff
c0018587:	0f 8c 08 01 00 00    	jl     c0018695 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001858d:	0f 84 b9 01 00 00    	je     c001874c <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018593:	85 ed                	test   ebp,ebp
c0018595:	0f 84 a0 01 00 00    	je     c001873b <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001859b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001859d:	75 a6                	jne    c0018545 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001859f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00185a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00185a9:	01 d0                	add    eax,edx
c00185ab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185af:	83 ec 0c             	sub    esp,0xc
c00185b2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00185b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185bb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185c1:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185c8:	50                   	push   eax
c00185c9:	e8 46 fe ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185d8:	89 f7                	mov    edi,esi
c00185da:	41                   	inc    ecx
c00185db:	83 f9 10             	cmp    ecx,0x10
c00185de:	0f 85 6b ff ff ff    	jne    c001854f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00185e4:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00185ea:	85 c0                	test   eax,eax
c00185ec:	74 5d                	je     c001864b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185ee:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00185f4:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185fa:	74 4f                	je     c001864b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	68 08 4c 02 c0       	push   0xc0024c08
c0018604:	e8 77 68 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018609:	c7 04 24 08 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c08
c0018610:	89 c7                	mov    edi,eax
c0018612:	e8 71 68 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018617:	83 c4 10             	add    esp,0x10
c001861a:	84 c0                	test   al,al
c001861c:	0f 84 e4 00 00 00    	je     c0018706 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018622:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018625:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001862b:	85 d2                	test   edx,edx
c001862d:	74 0f                	je     c001863e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001862f:	83 ec 0c             	sub    esp,0xc
c0018632:	8b 02                	mov    eax,DWORD PTR [edx]
c0018634:	52                   	push   edx
c0018635:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018638:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018648:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001864b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018651:	85 db                	test   ebx,ebx
c0018653:	74 16                	je     c001866b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	53                   	push   ebx
c0018659:	e8 20 5c ff ff       	call   c000e27e <VAS::~VAS()>
c001865e:	58                   	pop    eax
c001865f:	5a                   	pop    edx
c0018660:	6a 10                	push   0x10
c0018662:	53                   	push   ebx
c0018663:	e8 eb 68 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 ec 0c             	sub    esp,0xc
c001866e:	68 5d 1e 02 c0       	push   0xc0021e5d
c0018673:	e8 bb 69 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	83 ec 08             	sub    esp,0x8
c001867e:	68 3b 07 00 00       	push   0x73b
c0018683:	68 6b 1e 02 c0       	push   0xc0021e6b
c0018688:	e8 a6 69 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001868d:	83 c4 2c             	add    esp,0x2c
c0018690:	5b                   	pop    ebx
c0018691:	5e                   	pop    esi
c0018692:	5f                   	pop    edi
c0018693:	5d                   	pop    ebp
c0018694:	c3                   	ret    
c0018695:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018699:	83 ec 0c             	sub    esp,0xc
c001869c:	68 74 21 02 c0       	push   0xc0022174
c00186a1:	e8 22 c6 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00186a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	89 f7                	mov    edi,esi
c00186ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186b2:	e9 8e fe ff ff       	jmp    c0018545 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00186b7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00186bd:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00186c3:	75 1c                	jne    c00186e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186c5:	83 ec 0c             	sub    esp,0xc
c00186c8:	68 dc 21 02 c0       	push   0xc00221dc
c00186cd:	e8 61 69 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00186d2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186d9:	e8 25 fb ff ff       	call   c0018203 <blockTask(TaskState)>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	83 ec 08             	sub    esp,0x8
c00186e4:	56                   	push   esi
c00186e5:	68 08 4c 02 c0       	push   0xc0024c08
c00186ea:	e8 63 68 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186ef:	c7 04 24 08 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c08
c00186f6:	e8 85 67 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186fb:	83 c4 10             	add    esp,0x10
c00186fe:	39 f8                	cmp    eax,edi
c0018700:	0f 84 1c ff ff ff    	je     c0018622 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018706:	83 ec 0c             	sub    esp,0xc
c0018709:	68 08 4c 02 c0       	push   0xc0024c08
c001870e:	e8 6d 67 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018713:	c7 04 24 08 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c08
c001871a:	89 c6                	mov    esi,eax
c001871c:	e8 83 67 00 00       	call   c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	39 f3                	cmp    ebx,esi
c0018726:	74 b9                	je     c00186e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018728:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001872b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001872e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018734:	75 ab                	jne    c00186e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018736:	e9 7c ff ff ff       	jmp    c00186b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001873b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001873f:	83 ec 0c             	sub    esp,0xc
c0018742:	68 a8 21 02 c0       	push   0xc00221a8
c0018747:	e9 55 ff ff ff       	jmp    c00186a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001874c:	8b 36                	mov    esi,DWORD PTR [esi]
c001874e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018752:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018755:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018758:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001875e:	01 d7                	add    edi,edx
c0018760:	89 f8                	mov    eax,edi
c0018762:	e9 44 fe ff ff       	jmp    c00185ab <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018767 <cleanerTaskFunction(void*)>:
c0018767:	53                   	push   ebx
c0018768:	83 ec 08             	sub    esp,0x8
c001876b:	e8 96 f4 ff ff       	call   c0017c06 <unlockScheduler()>
c0018770:	e8 8f f4 ff ff       	call   c0017c04 <lockScheduler()>
c0018775:	80 3d cc 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024bcc,0x0
c001877c:	0f 85 8e 00 00 00    	jne    c0018810 <cleanerTaskFunction(void*)+0xa9>
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	6a 02                	push   0x2
c0018787:	e8 35 fa ff ff       	call   c00181c1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001878c:	83 c4 10             	add    esp,0x10
c001878f:	c6 05 cc 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024bcc,0x0
c0018796:	e8 90 f4 ff ff       	call   c0017c2b <lockStuff()>
c001879b:	e8 64 f4 ff ff       	call   c0017c04 <lockScheduler()>
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	68 f0 4b 02 c0       	push   0xc0024bf0
c00187a8:	e8 db 66 00 00       	call   c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187ad:	83 c4 10             	add    esp,0x10
c00187b0:	84 c0                	test   al,al
c00187b2:	75 40                	jne    c00187f4 <cleanerTaskFunction(void*)+0x8d>
c00187b4:	83 ec 0c             	sub    esp,0xc
c00187b7:	68 f0 4b 02 c0       	push   0xc0024bf0
c00187bc:	e8 bf 66 00 00       	call   c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187c1:	c7 04 24 f0 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bf0
c00187c8:	89 c3                	mov    ebx,eax
c00187ca:	e8 d5 66 00 00       	call   c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187cf:	c7 04 24 81 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e81
c00187d6:	e8 58 68 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00187db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187de:	e8 e0 fc ff ff       	call   c00184c3 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187e3:	c7 04 24 9a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e9a
c00187ea:	e8 44 68 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	eb ac                	jmp    c00187a0 <cleanerTaskFunction(void*)+0x39>
c00187f4:	e8 0d f4 ff ff       	call   c0017c06 <unlockScheduler()>
c00187f9:	e8 bf f7 ff ff       	call   c0017fbd <unlockStuff()>
c00187fe:	e8 01 f4 ff ff       	call   c0017c04 <lockScheduler()>
c0018803:	80 3d cc 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024bcc,0x0
c001880a:	0f 84 72 ff ff ff    	je     c0018782 <cleanerTaskFunction(void*)+0x1b>
c0018810:	e8 f1 f3 ff ff       	call   c0017c06 <unlockScheduler()>
c0018815:	e9 75 ff ff ff       	jmp    c001878f <cleanerTaskFunction(void*)+0x28>

c001881a <terminateTask(int)>:
c001881a:	83 ec 14             	sub    esp,0x14
c001881d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018825:	83 c0 0c             	add    eax,0xc
c0018828:	50                   	push   eax
c0018829:	68 04 22 02 c0       	push   0xc0022204
c001882e:	e8 00 68 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018833:	e8 f3 f3 ff ff       	call   c0017c2b <lockStuff()>
c0018838:	e8 c7 f3 ff ff       	call   c0017c04 <lockScheduler()>
c001883d:	c7 04 24 ad 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ead
c0018844:	e8 ea 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018849:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001884d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018852:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001885a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001885d:	5a                   	pop    edx
c001885e:	59                   	pop    ecx
c001885f:	50                   	push   eax
c0018860:	68 f0 4b 02 c0       	push   0xc0024bf0
c0018865:	e8 e8 66 00 00       	call   c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001886a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001886f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018876:	c7 04 24 c7 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ec7
c001887d:	e8 b1 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0018882:	83 c4 10             	add    esp,0x10
c0018885:	a1 c8 4b 02 c0       	mov    eax,ds:0xc0024bc8
c001888a:	85 c0                	test   eax,eax
c001888c:	74 5a                	je     c00188e8 <terminateTask(int)+0xce>
c001888e:	83 ec 0c             	sub    esp,0xc
c0018891:	68 e1 1e 02 c0       	push   0xc0021ee1
c0018896:	e8 98 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001889b:	58                   	pop    eax
c001889c:	c6 05 cc 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024bcc,0x1
c00188a3:	ff 35 c8 4b 02 c0    	push   DWORD PTR ds:0xc0024bc8
c00188a9:	e8 66 fb ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c00188ae:	c7 04 24 fb 1e 02 c0 	mov    DWORD PTR [esp],0xc0021efb
c00188b5:	e8 79 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	e8 44 f3 ff ff       	call   c0017c06 <unlockScheduler()>
c00188c2:	e8 f6 f6 ff ff       	call   c0017fbd <unlockStuff()>
c00188c7:	83 ec 0c             	sub    esp,0xc
c00188ca:	68 33 1f 02 c0       	push   0xc0021f33
c00188cf:	e8 5f 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00188d4:	83 c4 10             	add    esp,0x10
c00188d7:	e8 28 f3 ff ff       	call   c0017c04 <lockScheduler()>
c00188dc:	e8 57 f6 ff ff       	call   c0017f38 <schedule()>
c00188e1:	e8 20 f3 ff ff       	call   c0017c06 <unlockScheduler()>
c00188e6:	eb ef                	jmp    c00188d7 <terminateTask(int)+0xbd>
c00188e8:	83 ec 0c             	sub    esp,0xc
c00188eb:	68 15 1f 02 c0       	push   0xc0021f15
c00188f0:	e8 3e 67 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c00188f5:	83 c4 10             	add    esp,0x10
c00188f8:	eb c3                	jmp    c00188bd <terminateTask(int)+0xa3>

c00188fa <Thr::terminateFromIRQ(int)>:
c00188fa:	83 ec 18             	sub    esp,0x18
c00188fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018901:	e8 14 ff ff ff       	call   c001881a <terminateTask(int)>

c0018906 <Semaphore::release()>:
c0018906:	83 ec 0c             	sub    esp,0xc
c0018909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001890d:	e8 19 f3 ff ff       	call   c0017c2b <lockStuff()>
c0018912:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018915:	85 d2                	test   edx,edx
c0018917:	74 1a                	je     c0018933 <Semaphore::release()+0x2d>
c0018919:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018922:	52                   	push   edx
c0018923:	e8 ec fa ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0018928:	83 c4 10             	add    esp,0x10
c001892b:	83 c4 0c             	add    esp,0xc
c001892e:	e9 8a f6 ff ff       	jmp    c0017fbd <unlockStuff()>
c0018933:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0018936:	83 c4 0c             	add    esp,0xc
c0018939:	e9 7f f6 ff ff       	jmp    c0017fbd <unlockStuff()>

c001893e <__static_initialization_and_destruction_0(int, int)>:
c001893e:	83 ec 0c             	sub    esp,0xc
c0018941:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018946:	0f 85 88 00 00 00    	jne    c00189d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001894c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018954:	75 7e                	jne    c00189d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018956:	83 ec 0c             	sub    esp,0xc
c0018959:	68 08 4c 02 c0       	push   0xc0024c08
c001895e:	e8 d5 67 00 00       	call   c001f138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018963:	83 c4 10             	add    esp,0x10
c0018966:	83 ec 04             	sub    esp,0x4
c0018969:	68 e8 2b 02 c0       	push   0xc0022be8
c001896e:	68 08 4c 02 c0       	push   0xc0024c08
c0018973:	68 f8 f0 01 c0       	push   0xc001f0f8
c0018978:	e8 52 65 ff ff       	call   c000eecf <__cxa_atexit>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	83 ec 0c             	sub    esp,0xc
c0018983:	68 fc 4b 02 c0       	push   0xc0024bfc
c0018988:	e8 ab 67 00 00       	call   c001f138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001898d:	83 c4 10             	add    esp,0x10
c0018990:	83 ec 04             	sub    esp,0x4
c0018993:	68 e8 2b 02 c0       	push   0xc0022be8
c0018998:	68 fc 4b 02 c0       	push   0xc0024bfc
c001899d:	68 f8 f0 01 c0       	push   0xc001f0f8
c00189a2:	e8 28 65 ff ff       	call   c000eecf <__cxa_atexit>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	83 ec 0c             	sub    esp,0xc
c00189ad:	68 f0 4b 02 c0       	push   0xc0024bf0
c00189b2:	e8 81 67 00 00       	call   c001f138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	83 ec 04             	sub    esp,0x4
c00189bd:	68 e8 2b 02 c0       	push   0xc0022be8
c00189c2:	68 f0 4b 02 c0       	push   0xc0024bf0
c00189c7:	68 f8 f0 01 c0       	push   0xc001f0f8
c00189cc:	e8 fe 64 ff ff       	call   c000eecf <__cxa_atexit>
c00189d1:	83 c4 10             	add    esp,0x10
c00189d4:	90                   	nop
c00189d5:	83 c4 0c             	add    esp,0xc
c00189d8:	c3                   	ret    

c00189d9 <_GLOBAL__sub_I_kernelProcess>:
c00189d9:	83 ec 0c             	sub    esp,0xc
c00189dc:	83 ec 08             	sub    esp,0x8
c00189df:	68 ff ff 00 00       	push   0xffff
c00189e4:	6a 01                	push   0x1
c00189e6:	e8 53 ff ff ff       	call   c001893e <__static_initialization_and_destruction_0(int, int)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	83 c4 0c             	add    esp,0xc
c00189f1:	c3                   	ret    

c00189f2 <Vm::vm8086EntryPoint(void*)>:
c00189f2:	83 ec 0c             	sub    esp,0xc
c00189f5:	e8 0c f2 ff ff       	call   c0017c06 <unlockScheduler()>
c00189fa:	fb                   	sti    
c00189fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a00:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018a04:	52                   	push   edx
c0018a05:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018a09:	52                   	push   edx
c0018a0a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018a0e:	52                   	push   edx
c0018a0f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018a13:	50                   	push   eax
c0018a14:	e8 9c 77 fe ff       	call   c00001b5 <goToVM86>
c0018a19:	83 c4 1c             	add    esp,0x1c
c0018a1c:	c3                   	ret    

c0018a1d <Vm::inbv(unsigned short)>:
c0018a1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a21:	ec                   	in     al,dx
c0018a22:	c3                   	ret    

c0018a23 <Vm::outbv(unsigned short, unsigned char)>:
c0018a23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a2b:	ee                   	out    dx,al
c0018a2c:	c3                   	ret    

c0018a2d <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a37:	c1 e0 04             	shl    eax,0x4
c0018a3a:	01 d0                	add    eax,edx
c0018a3c:	c3                   	ret    

c0018a3d <Vm::getSegment(unsigned int)>:
c0018a3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a41:	c1 e8 10             	shr    eax,0x10
c0018a44:	c3                   	ret    

c0018a45 <Vm::getOffset(unsigned int)>:
c0018a45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a49:	c3                   	ret    

c0018a4a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018a4a:	55                   	push   ebp
c0018a4b:	57                   	push   edi
c0018a4c:	56                   	push   esi
c0018a4d:	53                   	push   ebx
c0018a4e:	83 ec 2c             	sub    esp,0x2c
c0018a51:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018a55:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018a59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a5d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018a61:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a65:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018a69:	e8 96 f1 ff ff       	call   c0017c04 <lockScheduler()>
c0018a6e:	68 80 00 00 00       	push   0x80
c0018a73:	6a 00                	push   0x0
c0018a75:	68 f2 89 01 c0       	push   0xc00189f2
c0018a7a:	55                   	push   ebp
c0018a7b:	e8 ae f2 ff ff       	call   c0017d2e <Process::createThread(void (*)(void*), void*, int)>
c0018a80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a84:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018a88:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018a8c:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018a90:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018a94:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018a98:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a9f:	e8 a0 64 ff ff       	call   c000ef44 <operator new(unsigned long)>
c0018aa4:	83 c4 0c             	add    esp,0xc
c0018aa7:	89 c3                	mov    ebx,eax
c0018aa9:	55                   	push   ebp
c0018aaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018aae:	50                   	push   eax
c0018aaf:	e8 ae 6a ff ff       	call   c000f562 <File::File(char const*, Process*)>
c0018ab4:	83 c4 0c             	add    esp,0xc
c0018ab7:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018abb:	50                   	push   eax
c0018abc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018ac0:	50                   	push   eax
c0018ac1:	53                   	push   ebx
c0018ac2:	e8 ab 6d ff ff       	call   c000f872 <File::stat(unsigned long long*, bool*)>
c0018ac7:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	84 d2                	test   dl,dl
c0018ad0:	74 1c                	je     c0018aee <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018ad2:	83 ec 0c             	sub    esp,0xc
c0018ad5:	68 23 22 02 c0       	push   0xc0022223
c0018ada:	e8 e9 c1 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0018adf:	e8 22 f1 ff ff       	call   c0017c06 <unlockScheduler()>
c0018ae4:	83 c4 10             	add    esp,0x10
c0018ae7:	31 d2                	xor    edx,edx
c0018ae9:	e9 81 00 00 00       	jmp    c0018b6f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018aee:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018af2:	51                   	push   ecx
c0018af3:	51                   	push   ecx
c0018af4:	6a 01                	push   0x1
c0018af6:	53                   	push   ebx
c0018af7:	e8 ca 6a ff ff       	call   c000f5c6 <File::open(FileOpenMode)>
c0018afc:	83 c4 10             	add    esp,0x10
c0018aff:	85 c0                	test   eax,eax
c0018b01:	74 1b                	je     c0018b1e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018b03:	83 ec 0c             	sub    esp,0xc
c0018b06:	68 3c 22 02 c0       	push   0xc002223c
c0018b0b:	e8 b8 c1 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c0018b10:	e8 f1 f0 ff ff       	call   c0017c06 <unlockScheduler()>
c0018b15:	83 c4 10             	add    esp,0x10
c0018b18:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018b1c:	eb 51                	jmp    c0018b6f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018b1e:	83 ec 0c             	sub    esp,0xc
c0018b21:	0f b7 ff             	movzx  edi,di
c0018b24:	6a 07                	push   0x7
c0018b26:	0f b7 f6             	movzx  esi,si
c0018b29:	68 00 01 00 00       	push   0x100
c0018b2e:	6a 00                	push   0x0
c0018b30:	6a 00                	push   0x0
c0018b32:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018b38:	e8 99 5b ff ff       	call   c000e6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b3d:	83 c4 18             	add    esp,0x18
c0018b40:	57                   	push   edi
c0018b41:	56                   	push   esi
c0018b42:	e8 e6 fe ff ff       	call   c0018a2d <Vm::realToLinear(unsigned short, unsigned short)>
c0018b47:	5a                   	pop    edx
c0018b48:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b4a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018b4e:	51                   	push   ecx
c0018b4f:	50                   	push   eax
c0018b50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b54:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b58:	53                   	push   ebx
c0018b59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b5c:	83 c4 14             	add    esp,0x14
c0018b5f:	53                   	push   ebx
c0018b60:	e8 bf 6a ff ff       	call   c000f624 <File::close()>
c0018b65:	e8 9c f0 ff ff       	call   c0017c06 <unlockScheduler()>
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	b2 01                	mov    dl,0x1
c0018b6f:	83 c4 2c             	add    esp,0x2c
c0018b72:	88 d0                	mov    al,dl
c0018b74:	5b                   	pop    ebx
c0018b75:	5e                   	pop    esi
c0018b76:	5f                   	pop    edi
c0018b77:	5d                   	pop    ebp
c0018b78:	c3                   	ret    

c0018b79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b79:	57                   	push   edi
c0018b7a:	56                   	push   esi
c0018b7b:	53                   	push   ebx
c0018b7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b88:	83 e8 06             	sub    eax,0x6
c0018b8b:	0f b7 c0             	movzx  eax,ax
c0018b8e:	50                   	push   eax
c0018b8f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018b94:	50                   	push   eax
c0018b95:	e8 93 fe ff ff       	call   c0018a2d <Vm::realToLinear(unsigned short, unsigned short)>
c0018b9a:	5a                   	pop    edx
c0018b9b:	5e                   	pop    esi
c0018b9c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018b9f:	8d 56 fa             	lea    edx,[esi-0x6]
c0018ba2:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018ba8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018bab:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018bae:	83 c2 02             	add    edx,0x2
c0018bb1:	66 89 10             	mov    WORD PTR [eax],dx
c0018bb4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018bb7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018bbb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018bbe:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018bc2:	89 d6                	mov    esi,edx
c0018bc4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018bca:	66 81 e6 ff fd       	and    si,0xfdff
c0018bcf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018bd3:	74 07                	je     c0018bdc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018bd5:	89 d6                	mov    esi,edx
c0018bd7:	66 81 ce 00 02       	or     si,0x200
c0018bdc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018be5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018be9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018bf1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018bf4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018bfc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018bff:	5b                   	pop    ebx
c0018c00:	5e                   	pop    esi
c0018c01:	5f                   	pop    edi
c0018c02:	c3                   	ret    

c0018c03 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018c03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c08:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c0d:	c1 e0 04             	shl    eax,0x4
c0018c10:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018c13:	c3                   	ret    

c0018c14 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018c14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c1e:	c1 e0 04             	shl    eax,0x4
c0018c21:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018c25:	c3                   	ret    

c0018c26 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018c26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c30:	c1 e0 04             	shl    eax,0x4
c0018c33:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018c36:	c3                   	ret    

c0018c37 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018c37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c3c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c41:	c1 e0 04             	shl    eax,0x4
c0018c44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c48:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018c4b:	c3                   	ret    

c0018c4c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018c4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c51:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c56:	c1 e0 04             	shl    eax,0x4
c0018c59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c5d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018c61:	c3                   	ret    

c0018c62 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018c62:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c67:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c6c:	c1 e0 04             	shl    eax,0x4
c0018c6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c73:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c76:	c3                   	ret    

c0018c77 <Vm::faultHandler(regs*)>:
c0018c77:	55                   	push   ebp
c0018c78:	57                   	push   edi
c0018c79:	56                   	push   esi
c0018c7a:	53                   	push   ebx
c0018c7b:	83 ec 1c             	sub    esp,0x1c
c0018c7e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c82:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c85:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c89:	0f b7 f0             	movzx  esi,ax
c0018c8c:	52                   	push   edx
c0018c8d:	0f b7 c0             	movzx  eax,ax
c0018c90:	50                   	push   eax
c0018c91:	e8 97 fd ff ff       	call   c0018a2d <Vm::realToLinear(unsigned short, unsigned short)>
c0018c96:	5a                   	pop    edx
c0018c97:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018c9a:	59                   	pop    ecx
c0018c9b:	89 c7                	mov    edi,eax
c0018c9d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ca4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018cad:	0f b7 c5             	movzx  eax,bp
c0018cb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cb4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018cb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018cbc:	e8 6c fd ff ff       	call   c0018a2d <Vm::realToLinear(unsigned short, unsigned short)>
c0018cc1:	5a                   	pop    edx
c0018cc2:	59                   	pop    ecx
c0018cc3:	b1 06                	mov    cl,0x6
c0018cc5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018cca:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018ccf:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018cd2:	80 fa 9d             	cmp    dl,0x9d
c0018cd5:	0f 84 1d 02 00 00    	je     c0018ef8 <Vm::faultHandler(regs*)+0x281>
c0018cdb:	0f 87 8e 00 00 00    	ja     c0018d6f <Vm::faultHandler(regs*)+0xf8>
c0018ce1:	80 fa 66             	cmp    dl,0x66
c0018ce4:	0f 84 89 01 00 00    	je     c0018e73 <Vm::faultHandler(regs*)+0x1fc>
c0018cea:	77 44                	ja     c0018d30 <Vm::faultHandler(regs*)+0xb9>
c0018cec:	80 fa 36             	cmp    dl,0x36
c0018cef:	0f 84 74 01 00 00    	je     c0018e69 <Vm::faultHandler(regs*)+0x1f2>
c0018cf5:	77 1a                	ja     c0018d11 <Vm::faultHandler(regs*)+0x9a>
c0018cf7:	80 fa 26             	cmp    dl,0x26
c0018cfa:	0f 84 4b 01 00 00    	je     c0018e4b <Vm::faultHandler(regs*)+0x1d4>
c0018d00:	80 fa 2e             	cmp    dl,0x2e
c0018d03:	0f 85 4a 05 00 00    	jne    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018d09:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d0c:	31 c9                	xor    ecx,ecx
c0018d0e:	47                   	inc    edi
c0018d0f:	eb be                	jmp    c0018ccf <Vm::faultHandler(regs*)+0x58>
c0018d11:	80 fa 64             	cmp    dl,0x64
c0018d14:	0f 84 3b 01 00 00    	je     c0018e55 <Vm::faultHandler(regs*)+0x1de>
c0018d1a:	0f 87 3f 01 00 00    	ja     c0018e5f <Vm::faultHandler(regs*)+0x1e8>
c0018d20:	80 fa 3e             	cmp    dl,0x3e
c0018d23:	0f 85 2a 05 00 00    	jne    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018d29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d2c:	b1 01                	mov    cl,0x1
c0018d2e:	eb de                	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018d30:	80 fa 6d             	cmp    dl,0x6d
c0018d33:	0f 84 bf 02 00 00    	je     c0018ff8 <Vm::faultHandler(regs*)+0x381>
c0018d39:	77 17                	ja     c0018d52 <Vm::faultHandler(regs*)+0xdb>
c0018d3b:	80 fa 67             	cmp    dl,0x67
c0018d3e:	0f 84 3c 01 00 00    	je     c0018e80 <Vm::faultHandler(regs*)+0x209>
c0018d44:	80 fa 6c             	cmp    dl,0x6c
c0018d47:	0f 84 5d 02 00 00    	je     c0018faa <Vm::faultHandler(regs*)+0x333>
c0018d4d:	e9 01 05 00 00       	jmp    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018d52:	80 fa 6f             	cmp    dl,0x6f
c0018d55:	0f 84 8b 03 00 00    	je     c00190e6 <Vm::faultHandler(regs*)+0x46f>
c0018d5b:	0f 82 0f 03 00 00    	jb     c0019070 <Vm::faultHandler(regs*)+0x3f9>
c0018d61:	80 fa 9c             	cmp    dl,0x9c
c0018d64:	0f 84 23 01 00 00    	je     c0018e8d <Vm::faultHandler(regs*)+0x216>
c0018d6a:	e9 e4 04 00 00       	jmp    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018d6f:	80 fa ec             	cmp    dl,0xec
c0018d72:	0f 84 7f 04 00 00    	je     c00191f7 <Vm::faultHandler(regs*)+0x580>
c0018d78:	77 7b                	ja     c0018df5 <Vm::faultHandler(regs*)+0x17e>
c0018d7a:	80 fa e4             	cmp    dl,0xe4
c0018d7d:	0f 84 fe 03 00 00    	je     c0019181 <Vm::faultHandler(regs*)+0x50a>
c0018d83:	77 53                	ja     c0018dd8 <Vm::faultHandler(regs*)+0x161>
c0018d85:	80 fa cd             	cmp    dl,0xcd
c0018d88:	0f 84 cd 01 00 00    	je     c0018f5b <Vm::faultHandler(regs*)+0x2e4>
c0018d8e:	80 fa cf             	cmp    dl,0xcf
c0018d91:	0f 85 bc 04 00 00    	jne    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018d97:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d9a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018d9d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018da1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018da4:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018da8:	81 ca 00 02 02 00    	or     edx,0x20200
c0018dae:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018db1:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018db5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018dbb:	66 c1 e8 09          	shr    ax,0x9
c0018dbf:	83 e0 01             	and    eax,0x1
c0018dc2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018dc5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018dc8:	83 c0 06             	add    eax,0x6
c0018dcb:	25 ff ff 00 00       	and    eax,0xffff
c0018dd0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018dd3:	e9 77 04 00 00       	jmp    c001924f <Vm::faultHandler(regs*)+0x5d8>
c0018dd8:	80 fa e6             	cmp    dl,0xe6
c0018ddb:	0f 84 ea 03 00 00    	je     c00191cb <Vm::faultHandler(regs*)+0x554>
c0018de1:	0f 82 b6 03 00 00    	jb     c001919d <Vm::faultHandler(regs*)+0x526>
c0018de7:	80 fa e7             	cmp    dl,0xe7
c0018dea:	0f 84 f2 03 00 00    	je     c00191e2 <Vm::faultHandler(regs*)+0x56b>
c0018df0:	e9 5e 04 00 00       	jmp    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018df5:	80 fa ef             	cmp    dl,0xef
c0018df8:	0f 84 3c 04 00 00    	je     c001923a <Vm::faultHandler(regs*)+0x5c3>
c0018dfe:	77 28                	ja     c0018e28 <Vm::faultHandler(regs*)+0x1b1>
c0018e00:	80 fa ed             	cmp    dl,0xed
c0018e03:	0f 84 0a 04 00 00    	je     c0019213 <Vm::faultHandler(regs*)+0x59c>
c0018e09:	80 fa ee             	cmp    dl,0xee
c0018e0c:	0f 85 41 04 00 00    	jne    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018e12:	50                   	push   eax
c0018e13:	50                   	push   eax
c0018e14:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018e18:	50                   	push   eax
c0018e19:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018e1d:	50                   	push   eax
c0018e1e:	e8 00 fc ff ff       	call   c0018a23 <Vm::outbv(unsigned short, unsigned char)>
c0018e23:	e9 0a 04 00 00       	jmp    c0019232 <Vm::faultHandler(regs*)+0x5bb>
c0018e28:	80 fa fa             	cmp    dl,0xfa
c0018e2b:	0f 84 5d 01 00 00    	je     c0018f8e <Vm::faultHandler(regs*)+0x317>
c0018e31:	80 fa fb             	cmp    dl,0xfb
c0018e34:	0f 84 62 01 00 00    	je     c0018f9c <Vm::faultHandler(regs*)+0x325>
c0018e3a:	80 fa f3             	cmp    dl,0xf3
c0018e3d:	0f 85 10 04 00 00    	jne    c0019253 <Vm::faultHandler(regs*)+0x5dc>
c0018e43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e46:	e9 c3 fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e4e:	b1 02                	mov    cl,0x2
c0018e50:	e9 b9 fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e58:	b1 03                	mov    cl,0x3
c0018e5a:	e9 af fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e62:	b1 04                	mov    cl,0x4
c0018e64:	e9 a5 fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e6c:	b1 05                	mov    cl,0x5
c0018e6e:	e9 9b fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e73:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e76:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e7b:	e9 8e fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e80:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e83:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018e88:	e9 81 fe ff ff       	jmp    c0018d0e <Vm::faultHandler(regs*)+0x97>
c0018e8d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018e90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e99:	74 30                	je     c0018ecb <Vm::faultHandler(regs*)+0x254>
c0018e9b:	83 e9 04             	sub    ecx,0x4
c0018e9e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018ea4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018eaa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ead:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018eb0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018eb6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018eba:	0f 84 8c 03 00 00    	je     c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018ec0:	80 ce 02             	or     dh,0x2
c0018ec3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ec6:	e9 81 03 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018ecb:	83 e9 02             	sub    ecx,0x2
c0018ece:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ed4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ed7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018edb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ee1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018ee5:	74 05                	je     c0018eec <Vm::faultHandler(regs*)+0x275>
c0018ee7:	80 ce 02             	or     dh,0x2
c0018eea:	eb 03                	jmp    c0018eef <Vm::faultHandler(regs*)+0x278>
c0018eec:	80 e6 fd             	and    dh,0xfd
c0018eef:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ef3:	e9 54 03 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018ef8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018efd:	74 2a                	je     c0018f29 <Vm::faultHandler(regs*)+0x2b2>
c0018eff:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f01:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018f07:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f0d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f10:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f18:	c1 e8 09             	shr    eax,0x9
c0018f1b:	83 e0 01             	and    eax,0x1
c0018f1e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018f21:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f24:	83 c0 04             	add    eax,0x4
c0018f27:	eb 25                	jmp    c0018f4e <Vm::faultHandler(regs*)+0x2d7>
c0018f29:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f2c:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f32:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f35:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018f38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f3e:	66 c1 e8 09          	shr    ax,0x9
c0018f42:	83 e0 01             	and    eax,0x1
c0018f45:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018f48:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f4b:	83 c0 02             	add    eax,0x2
c0018f4e:	25 ff ff 00 00       	and    eax,0xffff
c0018f53:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f56:	e9 f1 02 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018f5b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018f5f:	3c ff                	cmp    al,0xff
c0018f61:	75 10                	jne    c0018f73 <Vm::faultHandler(regs*)+0x2fc>
c0018f63:	83 ec 0c             	sub    esp,0xc
c0018f66:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f69:	e8 8c f9 ff ff       	call   c00188fa <Thr::terminateFromIRQ(int)>
c0018f6e:	e9 c2 02 00 00       	jmp    c0019235 <Vm::faultHandler(regs*)+0x5be>
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f7e:	57                   	push   edi
c0018f7f:	50                   	push   eax
c0018f80:	53                   	push   ebx
c0018f81:	e8 f3 fb ff ff       	call   c0018b79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018f86:	83 c4 20             	add    esp,0x20
c0018f89:	e9 c1 02 00 00       	jmp    c001924f <Vm::faultHandler(regs*)+0x5d8>
c0018f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f93:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f97:	e9 b0 02 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018f9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fa1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018fa5:	e9 a2 02 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0018faa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018faf:	74 0d                	je     c0018fbe <Vm::faultHandler(regs*)+0x347>
c0018fb1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018fb8:	0f 87 e9 02 00 00    	ja     c00192a7 <Vm::faultHandler(regs*)+0x630>
c0018fbe:	83 ec 0c             	sub    esp,0xc
c0018fc1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018fc4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fc8:	50                   	push   eax
c0018fc9:	e8 4f fa ff ff       	call   c0018a1d <Vm::inbv(unsigned short)>
c0018fce:	83 c4 0c             	add    esp,0xc
c0018fd1:	0f b6 c0             	movzx  eax,al
c0018fd4:	0f b7 c9             	movzx  ecx,cx
c0018fd7:	50                   	push   eax
c0018fd8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018fdc:	50                   	push   eax
c0018fdd:	51                   	push   ecx
c0018fde:	e8 54 fc ff ff       	call   c0018c37 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018fe9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018fed:	74 03                	je     c0018ff2 <Vm::faultHandler(regs*)+0x37b>
c0018fef:	48                   	dec    eax
c0018ff0:	eb 01                	jmp    c0018ff3 <Vm::faultHandler(regs*)+0x37c>
c0018ff2:	40                   	inc    eax
c0018ff3:	0f b7 c0             	movzx  eax,ax
c0018ff6:	eb 70                	jmp    c0019068 <Vm::faultHandler(regs*)+0x3f1>
c0018ff8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018ffb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018ffe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019003:	74 0c                	je     c0019011 <Vm::faultHandler(regs*)+0x39a>
c0019005:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001900b:	0f 87 96 02 00 00    	ja     c00192a7 <Vm::faultHandler(regs*)+0x630>
c0019011:	0f b7 c9             	movzx  ecx,cx
c0019014:	0f b7 f6             	movzx  esi,si
c0019017:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001901a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001901f:	74 20                	je     c0019041 <Vm::faultHandler(regs*)+0x3ca>
c0019021:	ed                   	in     eax,dx
c0019022:	55                   	push   ebp
c0019023:	50                   	push   eax
c0019024:	51                   	push   ecx
c0019025:	56                   	push   esi
c0019026:	e8 37 fc ff ff       	call   c0018c62 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019031:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019035:	74 05                	je     c001903c <Vm::faultHandler(regs*)+0x3c5>
c0019037:	83 e8 04             	sub    eax,0x4
c001903a:	eb 27                	jmp    c0019063 <Vm::faultHandler(regs*)+0x3ec>
c001903c:	83 c0 04             	add    eax,0x4
c001903f:	eb 22                	jmp    c0019063 <Vm::faultHandler(regs*)+0x3ec>
c0019041:	66 ed                	in     ax,dx
c0019043:	0f b7 c0             	movzx  eax,ax
c0019046:	57                   	push   edi
c0019047:	50                   	push   eax
c0019048:	51                   	push   ecx
c0019049:	56                   	push   esi
c001904a:	e8 fd fb ff ff       	call   c0018c4c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019055:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019059:	74 05                	je     c0019060 <Vm::faultHandler(regs*)+0x3e9>
c001905b:	83 e8 02             	sub    eax,0x2
c001905e:	eb 03                	jmp    c0019063 <Vm::faultHandler(regs*)+0x3ec>
c0019060:	83 c0 02             	add    eax,0x2
c0019063:	25 ff ff 00 00       	and    eax,0xffff
c0019068:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001906b:	e9 dc 01 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0019070:	49                   	dec    ecx
c0019071:	80 f9 05             	cmp    cl,0x5
c0019074:	77 24                	ja     c001909a <Vm::faultHandler(regs*)+0x423>
c0019076:	0f b6 c9             	movzx  ecx,cl
c0019079:	ff 24 8d 84 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddd7c]
c0019080:	0f b7 f5             	movzx  esi,bp
c0019083:	eb 15                	jmp    c001909a <Vm::faultHandler(regs*)+0x423>
c0019085:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019089:	eb 0f                	jmp    c001909a <Vm::faultHandler(regs*)+0x423>
c001908b:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001908f:	eb 09                	jmp    c001909a <Vm::faultHandler(regs*)+0x423>
c0019091:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019095:	eb 03                	jmp    c001909a <Vm::faultHandler(regs*)+0x423>
c0019097:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001909a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001909d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00190a2:	74 0b                	je     c00190af <Vm::faultHandler(regs*)+0x438>
c00190a4:	3d ff ff 00 00       	cmp    eax,0xffff
c00190a9:	0f 87 f8 01 00 00    	ja     c00192a7 <Vm::faultHandler(regs*)+0x630>
c00190af:	0f b7 c0             	movzx  eax,ax
c00190b2:	52                   	push   edx
c00190b3:	52                   	push   edx
c00190b4:	50                   	push   eax
c00190b5:	56                   	push   esi
c00190b6:	e8 48 fb ff ff       	call   c0018c03 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00190bb:	59                   	pop    ecx
c00190bc:	0f b6 c0             	movzx  eax,al
c00190bf:	5e                   	pop    esi
c00190c0:	50                   	push   eax
c00190c1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00190c5:	50                   	push   eax
c00190c6:	e8 58 f9 ff ff       	call   c0018a23 <Vm::outbv(unsigned short, unsigned char)>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00190d1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00190d5:	74 03                	je     c00190da <Vm::faultHandler(regs*)+0x463>
c00190d7:	48                   	dec    eax
c00190d8:	eb 01                	jmp    c00190db <Vm::faultHandler(regs*)+0x464>
c00190da:	40                   	inc    eax
c00190db:	0f b7 c0             	movzx  eax,ax
c00190de:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00190e1:	e9 66 01 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c00190e6:	49                   	dec    ecx
c00190e7:	80 f9 05             	cmp    cl,0x5
c00190ea:	77 1f                	ja     c001910b <Vm::faultHandler(regs*)+0x494>
c00190ec:	0f b6 c9             	movzx  ecx,cl
c00190ef:	ff 24 8d 9c 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddd64]
c00190f6:	89 ee                	mov    esi,ebp
c00190f8:	eb 11                	jmp    c001910b <Vm::faultHandler(regs*)+0x494>
c00190fa:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00190fd:	eb 0c                	jmp    c001910b <Vm::faultHandler(regs*)+0x494>
c00190ff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019102:	eb 07                	jmp    c001910b <Vm::faultHandler(regs*)+0x494>
c0019104:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019107:	eb 02                	jmp    c001910b <Vm::faultHandler(regs*)+0x494>
c0019109:	8b 33                	mov    esi,DWORD PTR [ebx]
c001910b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001910e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019113:	74 0c                	je     c0019121 <Vm::faultHandler(regs*)+0x4aa>
c0019115:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001911b:	0f 87 86 01 00 00    	ja     c00192a7 <Vm::faultHandler(regs*)+0x630>
c0019121:	0f b7 d6             	movzx  edx,si
c0019124:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019127:	0f b7 c1             	movzx  eax,cx
c001912a:	81 e7 00 04 00 00    	and    edi,0x400
c0019130:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019133:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019138:	74 1d                	je     c0019157 <Vm::faultHandler(regs*)+0x4e0>
c001913a:	55                   	push   ebp
c001913b:	55                   	push   ebp
c001913c:	50                   	push   eax
c001913d:	52                   	push   edx
c001913e:	e8 e3 fa ff ff       	call   c0018c26 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	89 f2                	mov    edx,esi
c0019148:	ef                   	out    dx,eax
c0019149:	85 ff                	test   edi,edi
c001914b:	74 05                	je     c0019152 <Vm::faultHandler(regs*)+0x4db>
c001914d:	83 e9 04             	sub    ecx,0x4
c0019150:	eb 21                	jmp    c0019173 <Vm::faultHandler(regs*)+0x4fc>
c0019152:	83 c1 04             	add    ecx,0x4
c0019155:	eb 1c                	jmp    c0019173 <Vm::faultHandler(regs*)+0x4fc>
c0019157:	55                   	push   ebp
c0019158:	55                   	push   ebp
c0019159:	50                   	push   eax
c001915a:	52                   	push   edx
c001915b:	e8 b4 fa ff ff       	call   c0018c14 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	89 f2                	mov    edx,esi
c0019165:	66 ef                	out    dx,ax
c0019167:	85 ff                	test   edi,edi
c0019169:	74 05                	je     c0019170 <Vm::faultHandler(regs*)+0x4f9>
c001916b:	83 e9 02             	sub    ecx,0x2
c001916e:	eb 03                	jmp    c0019173 <Vm::faultHandler(regs*)+0x4fc>
c0019170:	83 c1 02             	add    ecx,0x2
c0019173:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019179:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001917c:	e9 cb 00 00 00       	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0019181:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001918f:	50                   	push   eax
c0019190:	e8 88 f8 ff ff       	call   c0018a1d <Vm::inbv(unsigned short)>
c0019195:	0f b6 c0             	movzx  eax,al
c0019198:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001919b:	eb 3f                	jmp    c00191dc <Vm::faultHandler(regs*)+0x565>
c001919d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191a2:	74 07                	je     c00191ab <Vm::faultHandler(regs*)+0x534>
c00191a4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191a8:	ed                   	in     eax,dx
c00191a9:	eb 14                	jmp    c00191bf <Vm::faultHandler(regs*)+0x548>
c00191ab:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00191ae:	66 31 c9             	xor    cx,cx
c00191b1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00191b4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191b8:	66 ed                	in     ax,dx
c00191ba:	0f b7 c0             	movzx  eax,ax
c00191bd:	09 c8                	or     eax,ecx
c00191bf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00191c2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191c6:	e9 84 00 00 00       	jmp    c001924f <Vm::faultHandler(regs*)+0x5d8>
c00191cb:	52                   	push   edx
c00191cc:	52                   	push   edx
c00191cd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00191d1:	50                   	push   eax
c00191d2:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00191d6:	50                   	push   eax
c00191d7:	e8 47 f8 ff ff       	call   c0018a23 <Vm::outbv(unsigned short, unsigned char)>
c00191dc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191e0:	eb 53                	jmp    c0019235 <Vm::faultHandler(regs*)+0x5be>
c00191e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00191e5:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191e9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191ee:	74 03                	je     c00191f3 <Vm::faultHandler(regs*)+0x57c>
c00191f0:	ef                   	out    dx,eax
c00191f1:	eb cf                	jmp    c00191c2 <Vm::faultHandler(regs*)+0x54b>
c00191f3:	66 ef                	out    dx,ax
c00191f5:	eb cb                	jmp    c00191c2 <Vm::faultHandler(regs*)+0x54b>
c00191f7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00191fe:	83 ec 0c             	sub    esp,0xc
c0019201:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019205:	50                   	push   eax
c0019206:	e8 12 f8 ff ff       	call   c0018a1d <Vm::inbv(unsigned short)>
c001920b:	0f b6 c0             	movzx  eax,al
c001920e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019211:	eb 1f                	jmp    c0019232 <Vm::faultHandler(regs*)+0x5bb>
c0019213:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019216:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001921b:	74 03                	je     c0019220 <Vm::faultHandler(regs*)+0x5a9>
c001921d:	ed                   	in     eax,dx
c001921e:	eb 0d                	jmp    c001922d <Vm::faultHandler(regs*)+0x5b6>
c0019220:	66 ed                	in     ax,dx
c0019222:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019225:	0f b7 c0             	movzx  eax,ax
c0019228:	66 31 d2             	xor    dx,dx
c001922b:	09 d0                	or     eax,edx
c001922d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019230:	eb 1a                	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c0019232:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	eb 15                	jmp    c001924f <Vm::faultHandler(regs*)+0x5d8>
c001923a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001923d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019240:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019245:	74 03                	je     c001924a <Vm::faultHandler(regs*)+0x5d3>
c0019247:	ef                   	out    dx,eax
c0019248:	eb 02                	jmp    c001924c <Vm::faultHandler(regs*)+0x5d5>
c001924a:	66 ef                	out    dx,ax
c001924c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001924f:	b0 01                	mov    al,0x1
c0019251:	eb 56                	jmp    c00192a9 <Vm::faultHandler(regs*)+0x632>
c0019253:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019257:	50                   	push   eax
c0019258:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001925c:	50                   	push   eax
c001925d:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019261:	50                   	push   eax
c0019262:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019266:	50                   	push   eax
c0019267:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001926b:	50                   	push   eax
c001926c:	52                   	push   edx
c001926d:	52                   	push   edx
c001926e:	68 55 22 02 c0       	push   0xc0022255
c0019273:	e8 bb 5d ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c0019278:	83 c4 20             	add    esp,0x20
c001927b:	83 ec 0c             	sub    esp,0xc
c001927e:	6a 60                	push   0x60
c0019280:	e8 98 f7 ff ff       	call   c0018a1d <Vm::inbv(unsigned short)>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	3c 1c                	cmp    al,0x1c
c001928a:	74 04                	je     c0019290 <Vm::faultHandler(regs*)+0x619>
c001928c:	3c 5a                	cmp    al,0x5a
c001928e:	75 eb                	jne    c001927b <Vm::faultHandler(regs*)+0x604>
c0019290:	3c 5a                	cmp    al,0x5a
c0019292:	74 04                	je     c0019298 <Vm::faultHandler(regs*)+0x621>
c0019294:	3c 1c                	cmp    al,0x1c
c0019296:	75 0f                	jne    c00192a7 <Vm::faultHandler(regs*)+0x630>
c0019298:	83 ec 0c             	sub    esp,0xc
c001929b:	6a 60                	push   0x60
c001929d:	e8 7b f7 ff ff       	call   c0018a1d <Vm::inbv(unsigned short)>
c00192a2:	83 c4 10             	add    esp,0x10
c00192a5:	eb e9                	jmp    c0019290 <Vm::faultHandler(regs*)+0x619>
c00192a7:	31 c0                	xor    eax,eax
c00192a9:	83 c4 1c             	add    esp,0x1c
c00192ac:	5b                   	pop    ebx
c00192ad:	5e                   	pop    esi
c00192ae:	5f                   	pop    edi
c00192af:	5d                   	pop    ebp
c00192b0:	c3                   	ret    
c00192b1:	90                   	nop

c00192b2 <FAT::getName()>:
c00192b2:	b8 b4 22 02 c0       	mov    eax,0xc00222b4
c00192b7:	c3                   	ret    

c00192b8 <FAT::tell(void*, unsigned long long*)>:
c00192b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192bd:	75 06                	jne    c00192c5 <FAT::tell(void*, unsigned long long*)+0xd>
c00192bf:	b8 04 00 00 00       	mov    eax,0x4
c00192c4:	c3                   	ret    
c00192c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192ca:	75 06                	jne    c00192d2 <FAT::tell(void*, unsigned long long*)+0x1a>
c00192cc:	b8 04 00 00 00       	mov    eax,0x4
c00192d1:	c3                   	ret    
c00192d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192d6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00192d9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192e0:	89 01                	mov    DWORD PTR [ecx],eax
c00192e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192e5:	b8 00 00 00 00       	mov    eax,0x0
c00192ea:	c3                   	ret    
c00192eb:	90                   	nop

c00192ec <FAT::stat(void*, unsigned long long*)>:
c00192ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192f1:	75 06                	jne    c00192f9 <FAT::stat(void*, unsigned long long*)+0xd>
c00192f3:	b8 04 00 00 00       	mov    eax,0x4
c00192f8:	c3                   	ret    
c00192f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192fe:	75 06                	jne    c0019306 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019300:	b8 04 00 00 00       	mov    eax,0x4
c0019305:	c3                   	ret    
c0019306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001930a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001930d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019310:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019314:	89 01                	mov    DWORD PTR [ecx],eax
c0019316:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019319:	b8 00 00 00 00       	mov    eax,0x0
c001931e:	c3                   	ret    
c001931f:	90                   	nop

c0019320 <FAT::~FAT()>:
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	ba 38 23 02 c0       	mov    edx,0xc0022338
c0019328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001932c:	89 10                	mov    DWORD PTR [eax],edx
c001932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019332:	83 ec 0c             	sub    esp,0xc
c0019335:	50                   	push   eax
c0019336:	e8 21 60 ff ff       	call   c000f35c <Filesystem::~Filesystem()>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	90                   	nop
c001933f:	83 c4 0c             	add    esp,0xc
c0019342:	c3                   	ret    
c0019343:	90                   	nop

c0019344 <FAT::~FAT()>:
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	83 ec 0c             	sub    esp,0xc
c001934a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001934e:	e8 cd ff ff ff       	call   c0019320 <FAT::~FAT()>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	83 ec 08             	sub    esp,0x8
c0019359:	6a 08                	push   0x8
c001935b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001935f:	e8 ef 5b ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	83 c4 0c             	add    esp,0xc
c001936a:	c3                   	ret    
c001936b:	90                   	nop

c001936c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001936c:	83 ec 1c             	sub    esp,0x1c
c001936f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019376:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001937b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001937f:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c0019386:	83 f8 ff             	cmp    eax,0xffffffff
c0019389:	75 34                	jne    c00193bf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001938b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001938f:	88 c2                	mov    dl,al
c0019391:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019396:	01 d0                	add    eax,edx
c0019398:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001939c:	8b 15 40 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c40
c00193a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193a6:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c00193ad:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00193b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00193b6:	89 14 85 e0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb320],edx
c00193bd:	eb 17                	jmp    c00193d6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00193bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00193c3:	88 c2                	mov    dl,al
c00193c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193c9:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c00193d0:	01 d0                	add    eax,edx
c00193d2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00193d6:	83 ec 04             	sub    esp,0x4
c00193d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193e1:	8d 44 24 15          	lea    eax,[esp+0x15]
c00193e5:	50                   	push   eax
c00193e6:	e8 87 d6 fe ff       	call   c0006a72 <f_getlabel>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00193f7:	75 07                	jne    c0019400 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00193f9:	b8 00 00 00 00       	mov    eax,0x0
c00193fe:	eb 05                	jmp    c0019405 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019400:	b8 01 00 00 00       	mov    eax,0x1
c0019405:	83 c4 1c             	add    esp,0x1c
c0019408:	c3                   	ret    
c0019409:	90                   	nop

c001940a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001940a:	57                   	push   edi
c001940b:	83 ec 58             	sub    esp,0x58
c001940e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019416:	8d 54 24 10          	lea    edx,[esp+0x10]
c001941a:	b9 0f 00 00 00       	mov    ecx,0xf
c001941f:	b8 00 00 00 00       	mov    eax,0x0
c0019424:	fc                   	cld    
c0019425:	89 d7                	mov    edi,edx
c0019427:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019429:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001942d:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c0019434:	83 f8 ff             	cmp    eax,0xffffffff
c0019437:	75 34                	jne    c001946d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019439:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001943d:	88 c2                	mov    dl,al
c001943f:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019444:	01 d0                	add    eax,edx
c0019446:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001944a:	8b 15 40 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c40
c0019450:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019454:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c001945b:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019460:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019464:	89 14 85 e0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb320],edx
c001946b:	eb 17                	jmp    c0019484 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001946d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019471:	88 c2                	mov    dl,al
c0019473:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019477:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c001947e:	01 d0                	add    eax,edx
c0019480:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019484:	83 ec 08             	sub    esp,0x8
c0019487:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001948b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001948f:	50                   	push   eax
c0019490:	e8 d6 72 fe ff       	call   c000076b <strcat>
c0019495:	83 c4 10             	add    esp,0x10
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001949f:	50                   	push   eax
c00194a0:	e8 bb d7 fe ff       	call   c0006c60 <f_setlabel>
c00194a5:	83 c4 10             	add    esp,0x10
c00194a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00194ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00194b1:	75 07                	jne    c00194ba <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00194b3:	b8 00 00 00 00       	mov    eax,0x0
c00194b8:	eb 05                	jmp    c00194bf <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00194ba:	b8 01 00 00 00       	mov    eax,0x1
c00194bf:	83 c4 58             	add    esp,0x58
c00194c2:	5f                   	pop    edi
c00194c3:	c3                   	ret    

c00194c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00194c4:	83 ec 2c             	sub    esp,0x2c
c00194c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00194cf:	83 ec 08             	sub    esp,0x8
c00194d2:	68 d8 22 02 c0       	push   0xc00222d8
c00194d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194db:	e8 25 72 fe ff       	call   c0000705 <strcmp>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	85 c0                	test   eax,eax
c00194e5:	0f 94 c0             	sete   al
c00194e8:	84 c0                	test   al,al
c00194ea:	74 0d                	je     c00194f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00194ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194f4:	e9 a6 00 00 00       	jmp    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194f9:	83 ec 08             	sub    esp,0x8
c00194fc:	68 ca 22 02 c0       	push   0xc00222ca
c0019501:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019505:	e8 fb 71 fe ff       	call   c0000705 <strcmp>
c001950a:	83 c4 10             	add    esp,0x10
c001950d:	85 c0                	test   eax,eax
c001950f:	0f 94 c0             	sete   al
c0019512:	84 c0                	test   al,al
c0019514:	74 0a                	je     c0019520 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019516:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001951e:	eb 7f                	jmp    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019520:	83 ec 08             	sub    esp,0x8
c0019523:	68 d0 22 02 c0       	push   0xc00222d0
c0019528:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001952c:	e8 d4 71 fe ff       	call   c0000705 <strcmp>
c0019531:	83 c4 10             	add    esp,0x10
c0019534:	85 c0                	test   eax,eax
c0019536:	0f 94 c0             	sete   al
c0019539:	84 c0                	test   al,al
c001953b:	74 0a                	je     c0019547 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001953d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019545:	eb 58                	jmp    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019547:	83 ec 08             	sub    esp,0x8
c001954a:	68 0c f8 01 c0       	push   0xc001f80c
c001954f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019553:	e8 ad 71 fe ff       	call   c0000705 <strcmp>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	85 c0                	test   eax,eax
c001955d:	0f 94 c0             	sete   al
c0019560:	84 c0                	test   al,al
c0019562:	74 0a                	je     c001956e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019564:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001956c:	eb 31                	jmp    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001956e:	83 ec 08             	sub    esp,0x8
c0019571:	68 d6 22 02 c0       	push   0xc00222d6
c0019576:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001957a:	e8 86 71 fe ff       	call   c0000705 <strcmp>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	85 c0                	test   eax,eax
c0019584:	0f 94 c0             	sete   al
c0019587:	84 c0                	test   al,al
c0019589:	74 0a                	je     c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001958b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019593:	eb 0a                	jmp    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019595:	b8 08 00 00 00       	mov    eax,0x8
c001959a:	e9 04 01 00 00       	jmp    c00196a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001959f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00195a6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00195ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195af:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c00195b6:	83 f8 ff             	cmp    eax,0xffffffff
c00195b9:	75 34                	jne    c00195ef <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00195bb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195bf:	88 c2                	mov    dl,al
c00195c1:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00195c6:	01 d0                	add    eax,edx
c00195c8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195cc:	8b 15 40 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c40
c00195d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d6:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c00195dd:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00195e2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00195e6:	89 14 85 e0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb320],edx
c00195ed:	eb 17                	jmp    c0019606 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00195ef:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195f3:	88 c2                	mov    dl,al
c00195f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195f9:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c0019600:	01 d0                	add    eax,edx
c0019602:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001960a:	88 04 24             	mov    BYTE PTR [esp],al
c001960d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019615:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001961d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019622:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001962a:	83 ec 0c             	sub    esp,0xc
c001962d:	68 00 20 00 00       	push   0x2000
c0019632:	e8 1f 26 ff ff       	call   c000bc56 <malloc>
c0019637:	83 c4 10             	add    esp,0x10
c001963a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001963e:	68 00 20 00 00       	push   0x2000
c0019643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019647:	8d 44 24 08          	lea    eax,[esp+0x8]
c001964b:	50                   	push   eax
c001964c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019650:	50                   	push   eax
c0019651:	e8 55 da fe ff       	call   c00070ab <f_mkfs>
c0019656:	83 c4 10             	add    esp,0x10
c0019659:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001965d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019662:	75 07                	jne    c001966b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019664:	b8 00 00 00 00       	mov    eax,0x0
c0019669:	eb 38                	jmp    c00196a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001966b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019670:	75 17                	jne    c0019689 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019672:	83 ec 0c             	sub    esp,0xc
c0019675:	68 08 23 02 c0       	push   0xc0022308
c001967a:	e8 b4 59 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001967f:	83 c4 10             	add    esp,0x10
c0019682:	b8 09 00 00 00       	mov    eax,0x9
c0019687:	eb 1a                	jmp    c00196a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001968d:	83 ec 08             	sub    esp,0x8
c0019690:	50                   	push   eax
c0019691:	68 dc 22 02 c0       	push   0xc00222dc
c0019696:	e8 98 59 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	b8 01 00 00 00       	mov    eax,0x1
c00196a3:	83 c4 2c             	add    esp,0x2c
c00196a6:	c3                   	ret    
c00196a7:	90                   	nop

c00196a8 <FAT::tryMount(LogicalDisk*, int)>:
c00196a8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00196ae:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00196b3:	83 f8 14             	cmp    eax,0x14
c00196b6:	75 17                	jne    c00196cf <FAT::tryMount(LogicalDisk*, int)+0x27>
c00196b8:	83 ec 0c             	sub    esp,0xc
c00196bb:	68 ee 22 02 c0       	push   0xc00222ee
c00196c0:	e8 03 b6 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c00196c5:	83 c4 10             	add    esp,0x10
c00196c8:	b0 00                	mov    al,0x0
c00196ca:	e9 d7 01 00 00       	jmp    c00198a6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196cf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00196d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196e2:	3d 00 02 00 00       	cmp    eax,0x200
c00196e7:	74 07                	je     c00196f0 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00196e9:	b0 00                	mov    al,0x0
c00196eb:	e9 b6 01 00 00       	jmp    c00198a6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196f0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00196f8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196ff:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c0019706:	83 f8 ff             	cmp    eax,0xffffffff
c0019709:	74 07                	je     c0019712 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001970b:	b0 01                	mov    al,0x1
c001970d:	e9 94 01 00 00       	jmp    c00198a6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019712:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001971c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019724:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001972b:	88 c2                	mov    dl,al
c001972d:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019732:	01 d0                	add    eax,edx
c0019734:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001973b:	8b 15 40 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c40
c0019741:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019748:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c001974f:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019754:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001975b:	89 14 85 e0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb320],edx
c0019762:	83 ec 0c             	sub    esp,0xc
c0019765:	68 54 02 00 00       	push   0x254
c001976a:	e8 e7 24 ff ff       	call   c000bc56 <malloc>
c001976f:	83 c4 10             	add    esp,0x10
c0019772:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019779:	83 ec 04             	sub    esp,0x4
c001977c:	6a 00                	push   0x0
c001977e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019785:	50                   	push   eax
c0019786:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001978d:	e8 d7 b4 fe ff       	call   c0004c69 <f_mount>
c0019792:	83 c4 10             	add    esp,0x10
c0019795:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001979c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00197a4:	74 19                	je     c00197bf <FAT::tryMount(LogicalDisk*, int)+0x117>
c00197a6:	83 ec 0c             	sub    esp,0xc
c00197a9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00197b0:	e8 c1 24 ff ff       	call   c000bc76 <rfree>
c00197b5:	83 c4 10             	add    esp,0x10
c00197b8:	b0 00                	mov    al,0x0
c00197ba:	e9 e7 00 00 00       	jmp    c00198a6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00197bf:	83 ec 04             	sub    esp,0x4
c00197c2:	68 00 01 00 00       	push   0x100
c00197c7:	6a 00                	push   0x0
c00197c9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197d0:	50                   	push   eax
c00197d1:	e8 32 6e fe ff       	call   c0000608 <memset>
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	83 ec 08             	sub    esp,0x8
c00197dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00197e3:	50                   	push   eax
c00197e4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197eb:	50                   	push   eax
c00197ec:	e8 7a 6f fe ff       	call   c000076b <strcat>
c00197f1:	83 c4 10             	add    esp,0x10
c00197f4:	83 ec 08             	sub    esp,0x8
c00197f7:	68 fc 22 02 c0       	push   0xc00222fc
c00197fc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019803:	50                   	push   eax
c0019804:	e8 62 6f fe ff       	call   c000076b <strcat>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	83 ec 04             	sub    esp,0x4
c001980f:	6a 01                	push   0x1
c0019811:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019818:	50                   	push   eax
c0019819:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001981d:	50                   	push   eax
c001981e:	e8 a8 b4 fe ff       	call   c0004ccb <f_open>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001982d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019834:	85 c0                	test   eax,eax
c0019836:	74 0a                	je     c0019842 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019838:	78 2d                	js     c0019867 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001983a:	83 e8 04             	sub    eax,0x4
c001983d:	83 f8 01             	cmp    eax,0x1
c0019840:	77 25                	ja     c0019867 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019842:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001984a:	83 ec 0c             	sub    esp,0xc
c001984d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019851:	50                   	push   eax
c0019852:	e8 c6 bf fe ff       	call   c000581d <f_close>
c0019857:	83 c4 10             	add    esp,0x10
c001985a:	90                   	nop
c001985b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019863:	74 3a                	je     c001989f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019865:	eb 2d                	jmp    c0019894 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019867:	83 ec 0c             	sub    esp,0xc
c001986a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019871:	e8 00 24 ff ff       	call   c000bc76 <rfree>
c0019876:	83 c4 10             	add    esp,0x10
c0019879:	83 ec 04             	sub    esp,0x4
c001987c:	6a 00                	push   0x0
c001987e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019885:	50                   	push   eax
c0019886:	6a 00                	push   0x0
c0019888:	e8 dc b3 fe ff       	call   c0004c69 <f_mount>
c001988d:	83 c4 10             	add    esp,0x10
c0019890:	b0 00                	mov    al,0x0
c0019892:	eb 12                	jmp    c00198a6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019894:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0019899:	40                   	inc    eax
c001989a:	a3 40 4c 02 c0       	mov    ds:0xc0024c40,eax
c001989f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00198a6:	81 c4 6c 03 00 00    	add    esp,0x36c
c00198ac:	c3                   	ret    
c00198ad:	90                   	nop

c00198ae <FAT::readDir(void*, unsigned long, void*, int*)>:
c00198ae:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00198b4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00198bc:	74 0a                	je     c00198c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00198be:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00198c6:	75 0a                	jne    c00198d2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00198c8:	b8 04 00 00 00       	mov    eax,0x4
c00198cd:	e9 db 00 00 00       	jmp    c00199ad <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00198d2:	83 ec 08             	sub    esp,0x8
c00198d5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00198dc:	50                   	push   eax
c00198dd:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00198e4:	e8 3e c5 fe ff       	call   c0005e27 <f_readdir>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00198f3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198f9:	83 ec 0c             	sub    esp,0xc
c00198fc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019903:	83 c0 1a             	add    eax,0x1a
c0019906:	50                   	push   eax
c0019907:	e8 19 6d fe ff       	call   c0000625 <strlen>
c001990c:	83 c4 10             	add    esp,0x10
c001990f:	ba 00 00 00 00       	mov    edx,0x0
c0019914:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019918:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001991c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019923:	0f b6 c0             	movzx  eax,al
c0019926:	83 e0 10             	and    eax,0x10
c0019929:	74 07                	je     c0019932 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001992b:	b8 02 00 00 00       	mov    eax,0x2
c0019930:	eb 05                	jmp    c0019937 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019932:	b8 01 00 00 00       	mov    eax,0x1
c0019937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001993b:	83 ec 08             	sub    esp,0x8
c001993e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019945:	83 c0 1a             	add    eax,0x1a
c0019948:	50                   	push   eax
c0019949:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001994d:	83 c0 10             	add    eax,0x10
c0019950:	50                   	push   eax
c0019951:	e8 51 6d fe ff       	call   c00006a7 <strcpy>
c0019956:	83 c4 10             	add    esp,0x10
c0019959:	83 ec 04             	sub    esp,0x4
c001995c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019963:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019967:	50                   	push   eax
c0019968:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001996f:	e8 5e 6c fe ff       	call   c00005d2 <memcpy>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001997e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019984:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001998b:	84 c0                	test   al,al
c001998d:	75 07                	jne    c0019996 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001998f:	b8 07 00 00 00       	mov    eax,0x7
c0019994:	eb 17                	jmp    c00199ad <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019996:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001999d:	85 c0                	test   eax,eax
c001999f:	75 07                	jne    c00199a8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00199a1:	b8 00 00 00 00       	mov    eax,0x0
c00199a6:	eb 05                	jmp    c00199ad <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00199a8:	b8 01 00 00 00       	mov    eax,0x1
c00199ad:	81 c4 3c 02 00 00    	add    esp,0x23c
c00199b3:	c3                   	ret    

c00199b4 <FAT::read(void*, unsigned long, void*, int*)>:
c00199b4:	83 ec 1c             	sub    esp,0x1c
c00199b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199bc:	74 07                	je     c00199c5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00199be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199c3:	75 07                	jne    c00199cc <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00199c5:	b8 04 00 00 00       	mov    eax,0x4
c00199ca:	eb 3d                	jmp    c0019a09 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d0:	50                   	push   eax
c00199d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199dd:	e8 25 b7 fe ff       	call   c0005107 <f_read>
c00199e2:	83 c4 10             	add    esp,0x10
c00199e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199ed:	89 c2                	mov    edx,eax
c00199ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199f3:	89 10                	mov    DWORD PTR [eax],edx
c00199f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f9:	85 c0                	test   eax,eax
c00199fb:	75 07                	jne    c0019a04 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00199fd:	b8 00 00 00 00       	mov    eax,0x0
c0019a02:	eb 05                	jmp    c0019a09 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019a04:	b8 01 00 00 00       	mov    eax,0x1
c0019a09:	83 c4 1c             	add    esp,0x1c
c0019a0c:	c3                   	ret    
c0019a0d:	90                   	nop

c0019a0e <FAT::write(void*, unsigned long, void*, int*)>:
c0019a0e:	83 ec 1c             	sub    esp,0x1c
c0019a11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a16:	74 07                	je     c0019a1f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019a18:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019a1d:	75 07                	jne    c0019a26 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019a1f:	b8 04 00 00 00       	mov    eax,0x4
c0019a24:	eb 3d                	jmp    c0019a63 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a2a:	50                   	push   eax
c0019a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a37:	e8 4b b9 fe ff       	call   c0005387 <f_write>
c0019a3c:	83 c4 10             	add    esp,0x10
c0019a3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a47:	89 c2                	mov    edx,eax
c0019a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a4d:	89 10                	mov    DWORD PTR [eax],edx
c0019a4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a53:	85 c0                	test   eax,eax
c0019a55:	75 07                	jne    c0019a5e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019a57:	b8 00 00 00 00       	mov    eax,0x0
c0019a5c:	eb 05                	jmp    c0019a63 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a5e:	b8 01 00 00 00       	mov    eax,0x1
c0019a63:	83 c4 1c             	add    esp,0x1c
c0019a66:	c3                   	ret    
c0019a67:	90                   	nop

c0019a68 <FAT::close(void*)>:
c0019a68:	83 ec 1c             	sub    esp,0x1c
c0019a6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a70:	75 07                	jne    c0019a79 <FAT::close(void*)+0x11>
c0019a72:	b8 04 00 00 00       	mov    eax,0x4
c0019a77:	eb 36                	jmp    c0019aaf <FAT::close(void*)+0x47>
c0019a79:	83 ec 0c             	sub    esp,0xc
c0019a7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a80:	e8 98 bd fe ff       	call   c000581d <f_close>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a93:	e8 ce 21 ff ff       	call   c000bc66 <free>
c0019a98:	83 c4 10             	add    esp,0x10
c0019a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9f:	85 c0                	test   eax,eax
c0019aa1:	75 07                	jne    c0019aaa <FAT::close(void*)+0x42>
c0019aa3:	b8 00 00 00 00       	mov    eax,0x0
c0019aa8:	eb 05                	jmp    c0019aaf <FAT::close(void*)+0x47>
c0019aaa:	b8 01 00 00 00       	mov    eax,0x1
c0019aaf:	83 c4 1c             	add    esp,0x1c
c0019ab2:	c3                   	ret    
c0019ab3:	90                   	nop

c0019ab4 <FAT::closeDir(void*)>:
c0019ab4:	83 ec 1c             	sub    esp,0x1c
c0019ab7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019abc:	75 07                	jne    c0019ac5 <FAT::closeDir(void*)+0x11>
c0019abe:	b8 04 00 00 00       	mov    eax,0x4
c0019ac3:	eb 36                	jmp    c0019afb <FAT::closeDir(void*)+0x47>
c0019ac5:	83 ec 0c             	sub    esp,0xc
c0019ac8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019acc:	e8 34 c3 fe ff       	call   c0005e05 <f_closedir>
c0019ad1:	83 c4 10             	add    esp,0x10
c0019ad4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ad8:	83 ec 0c             	sub    esp,0xc
c0019adb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019adf:	e8 82 21 ff ff       	call   c000bc66 <free>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aeb:	85 c0                	test   eax,eax
c0019aed:	75 07                	jne    c0019af6 <FAT::closeDir(void*)+0x42>
c0019aef:	b8 00 00 00 00       	mov    eax,0x0
c0019af4:	eb 05                	jmp    c0019afb <FAT::closeDir(void*)+0x47>
c0019af6:	b8 01 00 00 00       	mov    eax,0x1
c0019afb:	83 c4 1c             	add    esp,0x1c
c0019afe:	c3                   	ret    
c0019aff:	90                   	nop

c0019b00 <FAT::seek(void*, unsigned long long)>:
c0019b00:	83 ec 2c             	sub    esp,0x2c
c0019b03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b18:	75 07                	jne    c0019b21 <FAT::seek(void*, unsigned long long)+0x21>
c0019b1a:	b8 04 00 00 00       	mov    eax,0x4
c0019b1f:	eb 2f                	jmp    c0019b50 <FAT::seek(void*, unsigned long long)+0x50>
c0019b21:	83 ec 04             	sub    esp,0x4
c0019b24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b30:	e8 17 bd fe ff       	call   c000584c <f_lseek>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b40:	85 c0                	test   eax,eax
c0019b42:	75 07                	jne    c0019b4b <FAT::seek(void*, unsigned long long)+0x4b>
c0019b44:	b8 00 00 00 00       	mov    eax,0x0
c0019b49:	eb 05                	jmp    c0019b50 <FAT::seek(void*, unsigned long long)+0x50>
c0019b4b:	b8 01 00 00 00       	mov    eax,0x1
c0019b50:	83 c4 2c             	add    esp,0x2c
c0019b53:	c3                   	ret    

c0019b54 <fatWrapperReadDisk>:
c0019b54:	83 ec 1c             	sub    esp,0x1c
c0019b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b73:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0019b7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b7e:	83 ec 0c             	sub    esp,0xc
c0019b81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b85:	52                   	push   edx
c0019b86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b8e:	50                   	push   eax
c0019b8f:	e8 22 84 ff ff       	call   c0011fb6 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b94:	83 c4 20             	add    esp,0x20
c0019b97:	83 c4 1c             	add    esp,0x1c
c0019b9a:	c3                   	ret    

c0019b9b <fatWrapperWriteDisk>:
c0019b9b:	83 ec 1c             	sub    esp,0x1c
c0019b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ba2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ba6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019baa:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019bb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bb5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bba:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0019bc1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bc5:	83 ec 0c             	sub    esp,0xc
c0019bc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bcc:	52                   	push   edx
c0019bcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bd5:	50                   	push   eax
c0019bd6:	e8 47 84 ff ff       	call   c0012022 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bdb:	83 c4 20             	add    esp,0x20
c0019bde:	83 c4 1c             	add    esp,0x1c
c0019be1:	c3                   	ret    

c0019be2 <fatWrapperIoctl>:
c0019be2:	53                   	push   ebx
c0019be3:	83 ec 28             	sub    esp,0x28
c0019be6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019bee:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bf6:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019bfb:	75 31                	jne    c0019c2e <fatWrapperIoctl+0x4c>
c0019bfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c05:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c0a:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0019c11:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c21:	66 89 02             	mov    WORD PTR [edx],ax
c0019c24:	b8 00 00 00 00       	mov    eax,0x0
c0019c29:	e9 b2 00 00 00       	jmp    c0019ce0 <fatWrapperIoctl+0xfe>
c0019c2e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019c33:	75 6a                	jne    c0019c9f <fatWrapperIoctl+0xbd>
c0019c35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c42:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0019c49:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c4f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c55:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c5b:	89 c8                	mov    eax,ecx
c0019c5d:	89 da                	mov    edx,ebx
c0019c5f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c63:	c1 e0 0a             	shl    eax,0xa
c0019c66:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c6b:	8b 0c 8d c0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc240]
c0019c72:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c78:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c7e:	89 cb                	mov    ebx,ecx
c0019c80:	c1 fb 1f             	sar    ebx,0x1f
c0019c83:	53                   	push   ebx
c0019c84:	51                   	push   ecx
c0019c85:	52                   	push   edx
c0019c86:	50                   	push   eax
c0019c87:	e8 20 4b 00 00       	call   c001e7ac <__udivdi3>
c0019c8c:	83 c4 10             	add    esp,0x10
c0019c8f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c93:	89 01                	mov    DWORD PTR [ecx],eax
c0019c95:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c98:	b8 00 00 00 00       	mov    eax,0x0
c0019c9d:	eb 41                	jmp    c0019ce0 <fatWrapperIoctl+0xfe>
c0019c9f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019ca4:	75 07                	jne    c0019cad <fatWrapperIoctl+0xcb>
c0019ca6:	b8 00 00 00 00       	mov    eax,0x0
c0019cab:	eb 33                	jmp    c0019ce0 <fatWrapperIoctl+0xfe>
c0019cad:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019cb2:	75 19                	jne    c0019ccd <fatWrapperIoctl+0xeb>
c0019cb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cc0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019cc6:	b8 00 00 00 00       	mov    eax,0x0
c0019ccb:	eb 13                	jmp    c0019ce0 <fatWrapperIoctl+0xfe>
c0019ccd:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019cd2:	75 07                	jne    c0019cdb <fatWrapperIoctl+0xf9>
c0019cd4:	b8 00 00 00 00       	mov    eax,0x0
c0019cd9:	eb 05                	jmp    c0019ce0 <fatWrapperIoctl+0xfe>
c0019cdb:	b8 04 00 00 00       	mov    eax,0x4
c0019ce0:	83 c4 28             	add    esp,0x28
c0019ce3:	5b                   	pop    ebx
c0019ce4:	c3                   	ret    
c0019ce5:	90                   	nop

c0019ce6 <FAT::FAT()>:
c0019ce6:	83 ec 1c             	sub    esp,0x1c
c0019ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	50                   	push   eax
c0019cf1:	e8 42 56 ff ff       	call   c000f338 <Filesystem::Filesystem()>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	ba 38 23 02 c0       	mov    edx,0xc0022338
c0019cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d02:	89 10                	mov    DWORD PTR [eax],edx
c0019d04:	c7 05 40 4c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024c40,0x0
c0019d0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d16:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d1b:	7f 15                	jg     c0019d32 <FAT::FAT()+0x4c>
c0019d1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d21:	c7 04 85 60 4c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb3a0],0xffffffff
c0019d2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d30:	eb e4                	jmp    c0019d16 <FAT::FAT()+0x30>
c0019d32:	90                   	nop
c0019d33:	83 c4 1c             	add    esp,0x1c
c0019d36:	c3                   	ret    
c0019d37:	90                   	nop

c0019d38 <FAT::fixFilepath(char*)>:
c0019d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0019d3e:	3c 40                	cmp    al,0x40
c0019d40:	7e 2c                	jle    c0019d6e <FAT::fixFilepath(char*)+0x36>
c0019d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d46:	8a 00                	mov    al,BYTE PTR [eax]
c0019d48:	83 e8 41             	sub    eax,0x41
c0019d4b:	88 c2                	mov    dl,al
c0019d4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d51:	88 10                	mov    BYTE PTR [eax],dl
c0019d53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d57:	8a 00                	mov    al,BYTE PTR [eax]
c0019d59:	0f be c0             	movsx  eax,al
c0019d5c:	8b 04 85 60 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3a0]
c0019d63:	83 c0 30             	add    eax,0x30
c0019d66:	88 c2                	mov    dl,al
c0019d68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d6c:	88 10                	mov    BYTE PTR [eax],dl
c0019d6e:	90                   	nop
c0019d6f:	c3                   	ret    

c0019d70 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d7e:	74 0a                	je     c0019d8a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019d80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d88:	75 0a                	jne    c0019d94 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019d8a:	b8 04 00 00 00       	mov    eax,0x4
c0019d8f:	e9 fd 00 00 00       	jmp    c0019e91 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019d94:	83 ec 08             	sub    esp,0x8
c0019d97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019da2:	50                   	push   eax
c0019da3:	e8 ff 68 fe ff       	call   c00006a7 <strcpy>
c0019da8:	83 c4 10             	add    esp,0x10
c0019dab:	83 ec 08             	sub    esp,0x8
c0019dae:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019db2:	50                   	push   eax
c0019db3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dba:	e8 79 ff ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c0019dbf:	83 c4 10             	add    esp,0x10
c0019dc2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dd1:	83 e0 01             	and    eax,0x1
c0019dd4:	74 08                	je     c0019dde <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019dd6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019dde:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019de5:	83 e0 04             	and    eax,0x4
c0019de8:	74 10                	je     c0019dfa <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019dea:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019df2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019dfa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e01:	83 e0 02             	and    eax,0x2
c0019e04:	74 08                	je     c0019e0e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019e06:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019e0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e15:	83 e0 08             	and    eax,0x8
c0019e18:	74 08                	je     c0019e22 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019e1a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019e22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e29:	83 e0 10             	and    eax,0x10
c0019e2c:	74 08                	je     c0019e36 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019e2e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019e36:	83 ec 0c             	sub    esp,0xc
c0019e39:	68 50 02 00 00       	push   0x250
c0019e3e:	e8 13 1e ff ff       	call   c000bc56 <malloc>
c0019e43:	83 c4 10             	add    esp,0x10
c0019e46:	89 c2                	mov    edx,eax
c0019e48:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e4f:	89 10                	mov    DWORD PTR [eax],edx
c0019e51:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e59:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e62:	83 ec 04             	sub    esp,0x4
c0019e65:	52                   	push   edx
c0019e66:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e6a:	52                   	push   edx
c0019e6b:	50                   	push   eax
c0019e6c:	e8 5a ae fe ff       	call   c0004ccb <f_open>
c0019e71:	83 c4 10             	add    esp,0x10
c0019e74:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e7b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e83:	74 07                	je     c0019e8c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019e85:	b8 01 00 00 00       	mov    eax,0x1
c0019e8a:	eb 05                	jmp    c0019e91 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019e8c:	b8 00 00 00 00       	mov    eax,0x0
c0019e91:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e97:	c3                   	ret    

c0019e98 <FAT::openDir(char const*, void**)>:
c0019e98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ea6:	74 0a                	je     c0019eb2 <FAT::openDir(char const*, void**)+0x1a>
c0019ea8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019eb0:	75 07                	jne    c0019eb9 <FAT::openDir(char const*, void**)+0x21>
c0019eb2:	b8 04 00 00 00       	mov    eax,0x4
c0019eb7:	eb 7d                	jmp    c0019f36 <FAT::openDir(char const*, void**)+0x9e>
c0019eb9:	83 ec 08             	sub    esp,0x8
c0019ebc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ec3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec7:	50                   	push   eax
c0019ec8:	e8 da 67 fe ff       	call   c00006a7 <strcpy>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	83 ec 08             	sub    esp,0x8
c0019ed3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed7:	50                   	push   eax
c0019ed8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019edf:	e8 54 fe ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	83 ec 0c             	sub    esp,0xc
c0019eea:	6a 4c                	push   0x4c
c0019eec:	e8 65 1d ff ff       	call   c000bc56 <malloc>
c0019ef1:	83 c4 10             	add    esp,0x10
c0019ef4:	89 c2                	mov    edx,eax
c0019ef6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019efd:	89 10                	mov    DWORD PTR [eax],edx
c0019eff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f06:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f08:	83 ec 08             	sub    esp,0x8
c0019f0b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f0f:	52                   	push   edx
c0019f10:	50                   	push   eax
c0019f11:	e8 ed bd fe ff       	call   c0005d03 <f_opendir>
c0019f16:	83 c4 10             	add    esp,0x10
c0019f19:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f20:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f28:	74 07                	je     c0019f31 <FAT::openDir(char const*, void**)+0x99>
c0019f2a:	b8 01 00 00 00       	mov    eax,0x1
c0019f2f:	eb 05                	jmp    c0019f36 <FAT::openDir(char const*, void**)+0x9e>
c0019f31:	b8 00 00 00 00       	mov    eax,0x0
c0019f36:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f3c:	c3                   	ret    
c0019f3d:	90                   	nop

c0019f3e <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f3e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f44:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f4c:	75 0a                	jne    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019f4e:	b8 04 00 00 00       	mov    eax,0x4
c0019f53:	e9 c9 00 00 00       	jmp    c001a021 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f58:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f60:	75 0a                	jne    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019f62:	b8 04 00 00 00       	mov    eax,0x4
c0019f67:	e9 b5 00 00 00       	jmp    c001a021 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f6c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f74:	75 0a                	jne    c0019f80 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019f76:	b8 04 00 00 00       	mov    eax,0x4
c0019f7b:	e9 a1 00 00 00       	jmp    c001a021 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f80:	83 ec 08             	sub    esp,0x8
c0019f83:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f8a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f91:	50                   	push   eax
c0019f92:	e8 10 67 fe ff       	call   c00006a7 <strcpy>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	83 ec 08             	sub    esp,0x8
c0019f9d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fa4:	50                   	push   eax
c0019fa5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fac:	e8 87 fd ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	83 ec 08             	sub    esp,0x8
c0019fb7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fbb:	50                   	push   eax
c0019fbc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fc3:	50                   	push   eax
c0019fc4:	e8 f9 be fe ff       	call   c0005ec2 <f_stat>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fd3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fda:	85 c0                	test   eax,eax
c0019fdc:	74 07                	je     c0019fe5 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019fde:	83 f8 04             	cmp    eax,0x4
c0019fe1:	74 32                	je     c001a015 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019fe3:	eb 37                	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019fe5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fe9:	0f b6 c0             	movzx  eax,al
c0019fec:	83 e0 10             	and    eax,0x10
c0019fef:	0f 95 c2             	setne  dl
c0019ff2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ff9:	88 10                	mov    BYTE PTR [eax],dl
c0019ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019ffe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a002:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a009:	89 01                	mov    DWORD PTR [ecx],eax
c001a00b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a00e:	b8 00 00 00 00       	mov    eax,0x0
c001a013:	eb 0c                	jmp    c001a021 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a015:	b8 02 00 00 00       	mov    eax,0x2
c001a01a:	eb 05                	jmp    c001a021 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a01c:	b8 01 00 00 00       	mov    eax,0x1
c001a021:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a027:	c3                   	ret    

c001a028 <FAT::unlink(char const*)>:
c001a028:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a02e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a036:	75 07                	jne    c001a03f <FAT::unlink(char const*)+0x17>
c001a038:	b8 04 00 00 00       	mov    eax,0x4
c001a03d:	eb 5c                	jmp    c001a09b <FAT::unlink(char const*)+0x73>
c001a03f:	83 ec 08             	sub    esp,0x8
c001a042:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a049:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a04d:	50                   	push   eax
c001a04e:	e8 54 66 fe ff       	call   c00006a7 <strcpy>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	83 ec 08             	sub    esp,0x8
c001a059:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a05d:	50                   	push   eax
c001a05e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a065:	e8 ce fc ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a06a:	83 c4 10             	add    esp,0x10
c001a06d:	83 ec 0c             	sub    esp,0xc
c001a070:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a074:	50                   	push   eax
c001a075:	e8 9a c1 fe ff       	call   c0006214 <f_unlink>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a084:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a08b:	85 c0                	test   eax,eax
c001a08d:	75 07                	jne    c001a096 <FAT::unlink(char const*)+0x6e>
c001a08f:	b8 00 00 00 00       	mov    eax,0x0
c001a094:	eb 05                	jmp    c001a09b <FAT::unlink(char const*)+0x73>
c001a096:	b8 01 00 00 00       	mov    eax,0x1
c001a09b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0a1:	c3                   	ret    

c001a0a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0a2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0a8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a0af:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a0b6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a0ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0be:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0c6:	75 0a                	jne    c001a0d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a0c8:	b8 04 00 00 00       	mov    eax,0x4
c001a0cd:	e9 1c 01 00 00       	jmp    c001a1ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a0d2:	83 ec 08             	sub    esp,0x8
c001a0d5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0e0:	50                   	push   eax
c001a0e1:	e8 c1 65 fe ff       	call   c00006a7 <strcpy>
c001a0e6:	83 c4 10             	add    esp,0x10
c001a0e9:	83 ec 08             	sub    esp,0x8
c001a0ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0f0:	50                   	push   eax
c001a0f1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0f8:	e8 3b fc ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a108:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a110:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a115:	83 e0 01             	and    eax,0x1
c001a118:	74 08                	je     c001a122 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a11a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a122:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a127:	83 e0 02             	and    eax,0x2
c001a12a:	74 08                	je     c001a134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a12c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a139:	83 e0 04             	and    eax,0x4
c001a13c:	74 08                	je     c001a146 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a13e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a146:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a14b:	83 e0 08             	and    eax,0x8
c001a14e:	74 08                	je     c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a150:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a158:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a15d:	83 e0 01             	and    eax,0x1
c001a160:	74 08                	je     c001a16a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a162:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a16a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a16f:	83 e0 02             	and    eax,0x2
c001a172:	74 08                	je     c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a174:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a17c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a181:	83 e0 04             	and    eax,0x4
c001a184:	74 08                	je     c001a18e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a186:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a18e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a193:	83 e0 08             	and    eax,0x8
c001a196:	74 08                	je     c001a1a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a198:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a1a0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1a7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a1ae:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1b6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1be:	83 ec 04             	sub    esp,0x4
c001a1c1:	52                   	push   edx
c001a1c2:	50                   	push   eax
c001a1c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1c7:	50                   	push   eax
c001a1c8:	e8 e9 c6 fe ff       	call   c00068b6 <f_chmod>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1d7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1de:	85 c0                	test   eax,eax
c001a1e0:	75 07                	jne    c001a1e9 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a1e2:	b8 00 00 00 00       	mov    eax,0x0
c001a1e7:	eb 05                	jmp    c001a1ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a1e9:	b8 01 00 00 00       	mov    eax,0x1
c001a1ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1f4:	c3                   	ret    
c001a1f5:	90                   	nop

c001a1f6 <FAT::rename(char const*, char const*)>:
c001a1f6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1fc:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a204:	74 0a                	je     c001a210 <FAT::rename(char const*, char const*)+0x1a>
c001a206:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a20e:	75 0a                	jne    c001a21a <FAT::rename(char const*, char const*)+0x24>
c001a210:	b8 04 00 00 00       	mov    eax,0x4
c001a215:	e9 98 00 00 00       	jmp    c001a2b2 <FAT::rename(char const*, char const*)+0xbc>
c001a21a:	83 ec 08             	sub    esp,0x8
c001a21d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a224:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a22b:	50                   	push   eax
c001a22c:	e8 76 64 fe ff       	call   c00006a7 <strcpy>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	83 ec 08             	sub    esp,0x8
c001a237:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a23e:	50                   	push   eax
c001a23f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a246:	e8 ed fa ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a24b:	83 c4 10             	add    esp,0x10
c001a24e:	83 ec 08             	sub    esp,0x8
c001a251:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a258:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a25c:	50                   	push   eax
c001a25d:	e8 45 64 fe ff       	call   c00006a7 <strcpy>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	83 ec 08             	sub    esp,0x8
c001a268:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a26c:	50                   	push   eax
c001a26d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a274:	e8 bf fa ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	83 ec 08             	sub    esp,0x8
c001a27f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a283:	50                   	push   eax
c001a284:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a28b:	50                   	push   eax
c001a28c:	e8 32 c3 fe ff       	call   c00065c3 <f_rename>
c001a291:	83 c4 10             	add    esp,0x10
c001a294:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a29b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a2a2:	85 c0                	test   eax,eax
c001a2a4:	75 07                	jne    c001a2ad <FAT::rename(char const*, char const*)+0xb7>
c001a2a6:	b8 00 00 00 00       	mov    eax,0x0
c001a2ab:	eb 05                	jmp    c001a2b2 <FAT::rename(char const*, char const*)+0xbc>
c001a2ad:	b8 01 00 00 00       	mov    eax,0x1
c001a2b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2b8:	c3                   	ret    
c001a2b9:	90                   	nop

c001a2ba <FAT::mkdir(char const*)>:
c001a2ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2c8:	75 07                	jne    c001a2d1 <FAT::mkdir(char const*)+0x17>
c001a2ca:	b8 04 00 00 00       	mov    eax,0x4
c001a2cf:	eb 5c                	jmp    c001a32d <FAT::mkdir(char const*)+0x73>
c001a2d1:	83 ec 08             	sub    esp,0x8
c001a2d4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2db:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2df:	50                   	push   eax
c001a2e0:	e8 c2 63 fe ff       	call   c00006a7 <strcpy>
c001a2e5:	83 c4 10             	add    esp,0x10
c001a2e8:	83 ec 08             	sub    esp,0x8
c001a2eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2ef:	50                   	push   eax
c001a2f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2f7:	e8 3c fa ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a2fc:	83 c4 10             	add    esp,0x10
c001a2ff:	83 ec 0c             	sub    esp,0xc
c001a302:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a306:	50                   	push   eax
c001a307:	e8 8b c0 fe ff       	call   c0006397 <f_mkdir>
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a316:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a31d:	85 c0                	test   eax,eax
c001a31f:	75 07                	jne    c001a328 <FAT::mkdir(char const*)+0x6e>
c001a321:	b8 00 00 00 00       	mov    eax,0x0
c001a326:	eb 05                	jmp    c001a32d <FAT::mkdir(char const*)+0x73>
c001a328:	b8 01 00 00 00       	mov    eax,0x1
c001a32d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a333:	c3                   	ret    

c001a334 <FAT::exists(char const*)>:
c001a334:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a33a:	83 ec 08             	sub    esp,0x8
c001a33d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a344:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a348:	50                   	push   eax
c001a349:	e8 59 63 fe ff       	call   c00006a7 <strcpy>
c001a34e:	83 c4 10             	add    esp,0x10
c001a351:	83 ec 08             	sub    esp,0x8
c001a354:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a358:	50                   	push   eax
c001a359:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a360:	e8 d3 f9 ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a365:	83 c4 10             	add    esp,0x10
c001a368:	83 ec 08             	sub    esp,0x8
c001a36b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a372:	50                   	push   eax
c001a373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a377:	50                   	push   eax
c001a378:	e8 45 bb fe ff       	call   c0005ec2 <f_stat>
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a387:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a38e:	85 c0                	test   eax,eax
c001a390:	75 04                	jne    c001a396 <FAT::exists(char const*)+0x62>
c001a392:	b0 01                	mov    al,0x1
c001a394:	eb 02                	jmp    c001a398 <FAT::exists(char const*)+0x64>
c001a396:	b0 00                	mov    al,0x0
c001a398:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3a0:	b8 08 00 00 00       	mov    eax,0x8
c001a3a5:	c3                   	ret    

c001a3a6 <ISO9660::seek(void*, unsigned long long)>:
c001a3a6:	53                   	push   ebx
c001a3a7:	b8 04 00 00 00       	mov    eax,0x4
c001a3ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3b8:	85 d2                	test   edx,edx
c001a3ba:	74 17                	je     c001a3d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a3bc:	89 c8                	mov    eax,ecx
c001a3be:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a3c1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a3c4:	b8 01 00 00 00       	mov    eax,0x1
c001a3c9:	73 08                	jae    c001a3d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a3cb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a3ce:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a3d1:	31 c0                	xor    eax,eax
c001a3d3:	5b                   	pop    ebx
c001a3d4:	c3                   	ret    
c001a3d5:	90                   	nop

c001a3d6 <ISO9660::tell(void*, unsigned long long*)>:
c001a3d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3de:	85 d2                	test   edx,edx
c001a3e0:	74 12                	je     c001a3f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3e2:	85 c0                	test   eax,eax
c001a3e4:	74 0e                	je     c001a3f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a3e9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a3ec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3ef:	89 10                	mov    DWORD PTR [eax],edx
c001a3f1:	31 c0                	xor    eax,eax
c001a3f3:	c3                   	ret    
c001a3f4:	b8 04 00 00 00       	mov    eax,0x4
c001a3f9:	c3                   	ret    

c001a3fa <ISO9660::getName()>:
c001a3fa:	b8 94 23 02 c0       	mov    eax,0xc0022394
c001a3ff:	c3                   	ret    

c001a400 <ISO9660::stat(void*, unsigned long long*)>:
c001a400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a408:	85 d2                	test   edx,edx
c001a40a:	74 12                	je     c001a41e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a40c:	85 c0                	test   eax,eax
c001a40e:	74 0e                	je     c001a41e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a410:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a413:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a416:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a419:	89 10                	mov    DWORD PTR [eax],edx
c001a41b:	31 c0                	xor    eax,eax
c001a41d:	c3                   	ret    
c001a41e:	b8 04 00 00 00       	mov    eax,0x4
c001a423:	c3                   	ret    

c001a424 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a424:	b8 01 00 00 00       	mov    eax,0x1
c001a429:	c3                   	ret    

c001a42a <ISO9660::unlink(char const*)>:
c001a42a:	b8 01 00 00 00       	mov    eax,0x1
c001a42f:	c3                   	ret    

c001a430 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a430:	b8 01 00 00 00       	mov    eax,0x1
c001a435:	c3                   	ret    

c001a436 <ISO9660::rename(char const*, char const*)>:
c001a436:	b8 01 00 00 00       	mov    eax,0x1
c001a43b:	c3                   	ret    

c001a43c <ISO9660::mkdir(char const*)>:
c001a43c:	b8 01 00 00 00       	mov    eax,0x1
c001a441:	c3                   	ret    

c001a442 <ISO9660::close(void*)>:
c001a442:	83 ec 0c             	sub    esp,0xc
c001a445:	b8 04 00 00 00       	mov    eax,0x4
c001a44a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a44e:	85 d2                	test   edx,edx
c001a450:	74 0e                	je     c001a460 <ISO9660::close(void*)+0x1e>
c001a452:	83 ec 0c             	sub    esp,0xc
c001a455:	52                   	push   edx
c001a456:	e8 0b 18 ff ff       	call   c000bc66 <free>
c001a45b:	83 c4 10             	add    esp,0x10
c001a45e:	31 c0                	xor    eax,eax
c001a460:	83 c4 0c             	add    esp,0xc
c001a463:	c3                   	ret    

c001a464 <ISO9660::closeDir(void*)>:
c001a464:	83 ec 0c             	sub    esp,0xc
c001a467:	b8 04 00 00 00       	mov    eax,0x4
c001a46c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a470:	85 d2                	test   edx,edx
c001a472:	74 0e                	je     c001a482 <ISO9660::closeDir(void*)+0x1e>
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	52                   	push   edx
c001a478:	e8 e9 17 ff ff       	call   c000bc66 <free>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	31 c0                	xor    eax,eax
c001a482:	83 c4 0c             	add    esp,0xc
c001a485:	c3                   	ret    

c001a486 <ISO9660::~ISO9660()>:
c001a486:	83 ec 0c             	sub    esp,0xc
c001a489:	ba e8 23 02 c0       	mov    edx,0xc00223e8
c001a48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a492:	89 10                	mov    DWORD PTR [eax],edx
c001a494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	50                   	push   eax
c001a49c:	e8 bb 4e ff ff       	call   c000f35c <Filesystem::~Filesystem()>
c001a4a1:	83 c4 10             	add    esp,0x10
c001a4a4:	90                   	nop
c001a4a5:	83 c4 0c             	add    esp,0xc
c001a4a8:	c3                   	ret    
c001a4a9:	90                   	nop

c001a4aa <ISO9660::~ISO9660()>:
c001a4aa:	83 ec 0c             	sub    esp,0xc
c001a4ad:	83 ec 0c             	sub    esp,0xc
c001a4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4b4:	e8 cd ff ff ff       	call   c001a486 <ISO9660::~ISO9660()>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	83 ec 08             	sub    esp,0x8
c001a4bf:	6a 08                	push   0x8
c001a4c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4c5:	e8 89 4a ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001a4ca:	83 c4 10             	add    esp,0x10
c001a4cd:	83 c4 0c             	add    esp,0xc
c001a4d0:	c3                   	ret    

c001a4d1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a4d1:	55                   	push   ebp
c001a4d2:	31 c9                	xor    ecx,ecx
c001a4d4:	57                   	push   edi
c001a4d5:	56                   	push   esi
c001a4d6:	53                   	push   ebx
c001a4d7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a4db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4df:	89 eb                	mov    ebx,ebp
c001a4e1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a4e5:	39 ce                	cmp    esi,ecx
c001a4e7:	7e 17                	jle    c001a500 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a4e9:	31 d2                	xor    edx,edx
c001a4eb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a4ef:	7d 13                	jge    c001a504 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a4f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4f5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a4f8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a4fb:	75 0d                	jne    c001a50a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a4fd:	42                   	inc    edx
c001a4fe:	eb eb                	jmp    c001a4eb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a500:	31 c0                	xor    eax,eax
c001a502:	eb 0a                	jmp    c001a50e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a504:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a508:	eb 04                	jmp    c001a50e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a50a:	41                   	inc    ecx
c001a50b:	43                   	inc    ebx
c001a50c:	eb d7                	jmp    c001a4e5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a50e:	5b                   	pop    ebx
c001a50f:	5e                   	pop    esi
c001a510:	5f                   	pop    edi
c001a511:	5d                   	pop    ebp
c001a512:	c3                   	ret    

c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a513:	56                   	push   esi
c001a514:	53                   	push   ebx
c001a515:	52                   	push   edx
c001a516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a51a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a51e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a522:	39 0d 40 4d 02 c0    	cmp    DWORD PTR ds:0xc0024d40,ecx
c001a528:	75 08                	jne    c001a532 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a52a:	38 05 e8 31 02 c0    	cmp    BYTE PTR ds:0xc00231e8,al
c001a530:	74 2b                	je     c001a55d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a532:	83 ec 0c             	sub    esp,0xc
c001a535:	a2 e8 31 02 c0       	mov    ds:0xc00231e8,al
c001a53a:	68 60 4d 02 c0       	push   0xc0024d60
c001a53f:	0f be c0             	movsx  eax,al
c001a542:	6a 01                	push   0x1
c001a544:	89 0d 40 4d 02 c0    	mov    DWORD PTR ds:0xc0024d40,ecx
c001a54a:	31 db                	xor    ebx,ebx
c001a54c:	53                   	push   ebx
c001a54d:	51                   	push   ecx
c001a54e:	ff 34 85 bc 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc344]
c001a555:	e8 5c 7a ff ff       	call   c0011fb6 <LogicalDisk::read(unsigned long long, int, void*)>
c001a55a:	83 c4 20             	add    esp,0x20
c001a55d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a565:	c7 44 24 14 60 4d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024d60
c001a56d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a571:	58                   	pop    eax
c001a572:	5b                   	pop    ebx
c001a573:	5e                   	pop    esi
c001a574:	e9 59 60 fe ff       	jmp    c00005d2 <memcpy>
c001a579:	90                   	nop

c001a57a <ISO9660::tryMount(LogicalDisk*, int)>:
c001a57a:	81 ec 10 08 00 00    	sub    esp,0x810
c001a580:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a587:	83 c0 41             	add    eax,0x41
c001a58a:	0f be c0             	movsx  eax,al
c001a58d:	50                   	push   eax
c001a58e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a592:	50                   	push   eax
c001a593:	6a 10                	push   0x10
c001a595:	e8 79 ff ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	31 c0                	xor    eax,eax
c001a59f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a5a4:	75 1d                	jne    c001a5c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5a6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a5ab:	75 16                	jne    c001a5c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5ad:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a5b2:	75 0f                	jne    c001a5c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5b4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a5b9:	75 08                	jne    c001a5c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5bb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a5c0:	0f 94 c0             	sete   al
c001a5c3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a5c9:	c3                   	ret    

c001a5ca <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5ca:	55                   	push   ebp
c001a5cb:	57                   	push   edi
c001a5cc:	56                   	push   esi
c001a5cd:	53                   	push   ebx
c001a5ce:	81 ec 34 08 00 00    	sub    esp,0x834
c001a5d4:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a5db:	55                   	push   ebp
c001a5dc:	68 af 23 02 c0       	push   0xc00223af
c001a5e1:	e8 4d 4a ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a5f1:	0f 84 06 02 00 00    	je     c001a7fd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5f7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a5ff:	0f 84 f8 01 00 00    	je     c001a7fd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a605:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a60c:	b8 01 00 00 00       	mov    eax,0x1
c001a611:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a615:	0f 85 e7 01 00 00    	jne    c001a802 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a61b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a61e:	31 d2                	xor    edx,edx
c001a620:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a623:	89 e9                	mov    ecx,ebp
c001a625:	89 d3                	mov    ebx,edx
c001a627:	01 f1                	add    ecx,esi
c001a629:	11 fb                	adc    ebx,edi
c001a62b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a62f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a633:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a63a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a63d:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a640:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a644:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a648:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a64c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a650:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a654:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a658:	72 19                	jb     c001a673 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a65a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a662:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a666:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a66d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a671:	eb 13                	jmp    c001a686 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a677:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a67b:	29 f0                	sub    eax,esi
c001a67d:	19 fa                	sbb    edx,edi
c001a67f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a682:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a686:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a68d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a690:	8b 00                	mov    eax,DWORD PTR [eax]
c001a692:	53                   	push   ebx
c001a693:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a697:	c1 e0 0b             	shl    eax,0xb
c001a69a:	01 c6                	add    esi,eax
c001a69c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a6a3:	11 d7                	adc    edi,edx
c001a6a5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a6a9:	89 fa                	mov    edx,edi
c001a6ab:	50                   	push   eax
c001a6ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a6b0:	50                   	push   eax
c001a6b1:	89 f0                	mov    eax,esi
c001a6b3:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a6b7:	50                   	push   eax
c001a6b8:	e8 56 fe ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6bd:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a6c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6c8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a6cb:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a6cf:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	b8 00 08 00 00       	mov    eax,0x800
c001a6dd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a6e1:	29 d0                	sub    eax,edx
c001a6e3:	39 c1                	cmp    ecx,eax
c001a6e5:	83 db 00             	sbb    ebx,0x0
c001a6e8:	7d 19                	jge    c001a703 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a6ea:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a6ef:	75 16                	jne    c001a707 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a6f1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6fe:	e9 f6 00 00 00       	jmp    c001a7f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a703:	89 c5                	mov    ebp,eax
c001a705:	eb 03                	jmp    c001a70a <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a707:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a70a:	51                   	push   ecx
c001a70b:	55                   	push   ebp
c001a70c:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a710:	50                   	push   eax
c001a711:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a718:	e8 b5 5e fe ff       	call   c00005d2 <memcpy>
c001a71d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a721:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a725:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a72c:	01 e8                	add    eax,ebp
c001a72e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a732:	89 e8                	mov    eax,ebp
c001a734:	99                   	cdq    
c001a735:	01 ee                	add    esi,ebp
c001a737:	11 d7                	adc    edi,edx
c001a739:	29 e9                	sub    ecx,ebp
c001a73b:	19 d3                	sbb    ebx,edx
c001a73d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a741:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a74d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a750:	b8 00 00 00 00       	mov    eax,0x0
c001a755:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a759:	7d 3f                	jge    c001a79a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a75b:	52                   	push   edx
c001a75c:	89 fa                	mov    edx,edi
c001a75e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a765:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a769:	50                   	push   eax
c001a76a:	89 f0                	mov    eax,esi
c001a76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a770:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a774:	50                   	push   eax
c001a775:	e8 99 fd ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a77a:	81 c6 00 08 00 00    	add    esi,0x800
c001a780:	83 d7 00             	adc    edi,0x0
c001a783:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a78b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a793:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a798:	eb ab                	jmp    c001a745 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a7a1:	74 34                	je     c001a7d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a7a3:	89 fa                	mov    edx,edi
c001a7a5:	50                   	push   eax
c001a7a6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a7ad:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a7b1:	50                   	push   eax
c001a7b2:	89 f0                	mov    eax,esi
c001a7b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a7b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a7bc:	55                   	push   ebp
c001a7bd:	50                   	push   eax
c001a7be:	e8 50 fd ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7c3:	83 c4 0c             	add    esp,0xc
c001a7c6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a7ca:	55                   	push   ebp
c001a7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7cf:	e8 fe 5d fe ff       	call   c00005d2 <memcpy>
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a7de:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a7e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7e6:	89 38                	mov    DWORD PTR [eax],edi
c001a7e8:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a7ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7f3:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a7f6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a7f9:	31 c0                	xor    eax,eax
c001a7fb:	eb 05                	jmp    c001a802 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a7fd:	b8 04 00 00 00       	mov    eax,0x4
c001a802:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a808:	5b                   	pop    ebx
c001a809:	5e                   	pop    esi
c001a80a:	5f                   	pop    edi
c001a80b:	5d                   	pop    ebp
c001a80c:	c3                   	ret    
c001a80d:	90                   	nop

c001a80e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a80e:	55                   	push   ebp
c001a80f:	57                   	push   edi
c001a810:	56                   	push   esi
c001a811:	53                   	push   ebx
c001a812:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a818:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a81f:	85 f6                	test   esi,esi
c001a821:	0f 84 64 02 00 00    	je     c001aa8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a827:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a82f:	0f 84 56 02 00 00    	je     c001aa8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a835:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a838:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a83b:	75 0a                	jne    c001a847 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a83d:	b8 07 00 00 00       	mov    eax,0x7
c001a842:	e9 49 02 00 00       	jmp    c001aa90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a847:	50                   	push   eax
c001a848:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a84c:	50                   	push   eax
c001a84d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a854:	53                   	push   ebx
c001a855:	8b 06                	mov    eax,DWORD PTR [esi]
c001a857:	c1 e0 0b             	shl    eax,0xb
c001a85a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a85d:	c1 e8 0b             	shr    eax,0xb
c001a860:	50                   	push   eax
c001a861:	e8 ad fc ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a866:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a869:	83 c4 10             	add    esp,0x10
c001a86c:	89 c1                	mov    ecx,eax
c001a86e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a871:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a877:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a87a:	84 db                	test   bl,bl
c001a87c:	0f 85 90 00 00 00    	jne    c001a912 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a882:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a888:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a88e:	29 c7                	sub    edi,eax
c001a890:	89 fb                	mov    ebx,edi
c001a892:	c1 fb 1f             	sar    ebx,0x1f
c001a895:	01 f8                	add    eax,edi
c001a897:	11 da                	adc    edx,ebx
c001a899:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a89d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a8a1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a8a4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a8a7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a8aa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a8ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8b4:	89 d8                	mov    eax,ebx
c001a8b6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a8b9:	ba 00 00 00 00       	mov    edx,0x0
c001a8be:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a8c2:	b8 00 00 00 00       	mov    eax,0x0
c001a8c7:	73 0b                	jae    c001a8d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a8c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a8cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8d0:	29 f8                	sub    eax,edi
c001a8d2:	19 da                	sbb    edx,ebx
c001a8d4:	89 d3                	mov    ebx,edx
c001a8d6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a8d9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a8dc:	09 c3                	or     ebx,eax
c001a8de:	0f 84 59 ff ff ff    	je     c001a83d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a8e4:	55                   	push   ebp
c001a8e5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a8e9:	50                   	push   eax
c001a8ea:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a8f1:	53                   	push   ebx
c001a8f2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8f4:	c1 e0 0b             	shl    eax,0xb
c001a8f7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a8fb:	c1 e8 0b             	shr    eax,0xb
c001a8fe:	50                   	push   eax
c001a8ff:	e8 0f fc ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a904:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	25 ff 07 00 00       	and    eax,0x7ff
c001a90f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a912:	57                   	push   edi
c001a913:	6a 28                	push   0x28
c001a915:	6a 00                	push   0x0
c001a917:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a91b:	50                   	push   eax
c001a91c:	e8 e7 5c fe ff       	call   c0000608 <memset>
c001a921:	31 d2                	xor    edx,edx
c001a923:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a926:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a92c:	89 f8                	mov    eax,edi
c001a92e:	83 c0 21             	add    eax,0x21
c001a931:	83 d2 00             	adc    edx,0x0
c001a934:	89 c7                	mov    edi,eax
c001a936:	89 d5                	mov    ebp,edx
c001a938:	83 c4 10             	add    esp,0x10
c001a93b:	31 c9                	xor    ecx,ecx
c001a93d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a944:	83 f9 28             	cmp    ecx,0x28
c001a947:	88 04 24             	mov    BYTE PTR [esp],al
c001a94a:	0f 94 c2             	sete   dl
c001a94d:	88 d0                	mov    al,dl
c001a94f:	ba ff 07 00 00       	mov    edx,0x7ff
c001a954:	39 fa                	cmp    edx,edi
c001a956:	ba 00 00 00 00       	mov    edx,0x0
c001a95b:	19 ea                	sbb    edx,ebp
c001a95d:	0f 92 c2             	setb   dl
c001a960:	09 c2                	or     edx,eax
c001a962:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a966:	0f 94 c0             	sete   al
c001a969:	08 d0                	or     al,dl
c001a96b:	75 16                	jne    c001a983 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a96d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a971:	74 10                	je     c001a983 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a973:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a976:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a97a:	41                   	inc    ecx
c001a97b:	83 c7 01             	add    edi,0x1
c001a97e:	83 d5 00             	adc    ebp,0x0
c001a981:	eb ba                	jmp    c001a93d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a983:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a98a:	83 ec 0c             	sub    esp,0xc
c001a98d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a991:	57                   	push   edi
c001a992:	e8 8e 5c fe ff       	call   c0000625 <strlen>
c001a997:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a99f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9a3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a9aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a9ad:	5a                   	pop    edx
c001a9ae:	25 ff 07 00 00       	and    eax,0x7ff
c001a9b3:	01 c8                	add    eax,ecx
c001a9b5:	59                   	pop    ecx
c001a9b6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a9bc:	83 e0 02             	and    eax,0x2
c001a9bf:	3c 01                	cmp    al,0x1
c001a9c1:	19 c0                	sbb    eax,eax
c001a9c3:	83 c0 02             	add    eax,0x2
c001a9c6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9ca:	57                   	push   edi
c001a9cb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a9cf:	50                   	push   eax
c001a9d0:	e8 d2 5c fe ff       	call   c00006a7 <strcpy>
c001a9d5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	84 c0                	test   al,al
c001a9de:	75 21                	jne    c001aa01 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a9e0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a9e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9f0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9f8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a9ff:	eb 28                	jmp    c001aa29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001aa01:	fe c8                	dec    al
c001aa03:	75 24                	jne    c001aa29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001aa05:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001aa0d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aa15:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001aa1d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001aa24:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001aa29:	0f b6 fb             	movzx  edi,bl
c001aa2c:	31 db                	xor    ebx,ebx
c001aa2e:	50                   	push   eax
c001aa2f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001aa36:	8d 44 24 48          	lea    eax,[esp+0x48]
c001aa3a:	50                   	push   eax
c001aa3b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001aa42:	e8 8b 5b fe ff       	call   c00005d2 <memcpy>
c001aa47:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001aa4e:	89 f9                	mov    ecx,edi
c001aa50:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001aa56:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001aa59:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001aa5c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001aa5f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001aa62:	83 c4 10             	add    esp,0x10
c001aa65:	39 c7                	cmp    edi,eax
c001aa67:	89 df                	mov    edi,ebx
c001aa69:	19 d7                	sbb    edi,edx
c001aa6b:	72 10                	jb     c001aa7d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001aa6d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001aa74:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001aa7b:	eb 0a                	jmp    c001aa87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001aa7d:	29 c8                	sub    eax,ecx
c001aa7f:	19 da                	sbb    edx,ebx
c001aa81:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001aa84:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001aa87:	31 c0                	xor    eax,eax
c001aa89:	eb 05                	jmp    c001aa90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001aa8b:	b8 04 00 00 00       	mov    eax,0x4
c001aa90:	81 c4 5c 09 00 00    	add    esp,0x95c
c001aa96:	5b                   	pop    ebx
c001aa97:	5e                   	pop    esi
c001aa98:	5f                   	pop    edi
c001aa99:	5d                   	pop    ebp
c001aa9a:	c3                   	ret    

c001aa9b <readRoot(unsigned int*, unsigned int*, char)>:
c001aa9b:	81 ec 40 08 00 00    	sub    esp,0x840
c001aaa1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001aaa9:	50                   	push   eax
c001aaaa:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aaae:	50                   	push   eax
c001aaaf:	6a 10                	push   0x10
c001aab1:	e8 5d fa ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aab6:	83 c4 0c             	add    esp,0xc
c001aab9:	6a 22                	push   0x22
c001aabb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aac2:	50                   	push   eax
c001aac3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aac7:	50                   	push   eax
c001aac8:	e8 05 5b fe ff       	call   c00005d2 <memcpy>
c001aacd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aad4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aad8:	89 10                	mov    DWORD PTR [eax],edx
c001aada:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aae1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aae5:	89 10                	mov    DWORD PTR [eax],edx
c001aae7:	b0 01                	mov    al,0x1
c001aae9:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aaef:	c3                   	ret    

c001aaf0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aaf0:	55                   	push   ebp
c001aaf1:	57                   	push   edi
c001aaf2:	56                   	push   esi
c001aaf3:	53                   	push   ebx
c001aaf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aafa:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ab01:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ab08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab0c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ab10:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ab14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab18:	75 03                	jne    c001ab1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ab1a:	83 c3 02             	add    ebx,0x2
c001ab1d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001ab20:	75 03                	jne    c001ab25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001ab22:	43                   	inc    ebx
c001ab23:	eb f8                	jmp    c001ab1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ab25:	51                   	push   ecx
c001ab26:	68 00 01 00 00       	push   0x100
c001ab2b:	6a 00                	push   0x0
c001ab2d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab31:	50                   	push   eax
c001ab32:	e8 d1 5a fe ff       	call   c0000608 <memset>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	31 d2                	xor    edx,edx
c001ab3c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ab3f:	84 c0                	test   al,al
c001ab41:	74 21                	je     c001ab64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ab43:	3c 2f                	cmp    al,0x2f
c001ab45:	75 0b                	jne    c001ab52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ab47:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ab4b:	bd 01 00 00 00       	mov    ebp,0x1
c001ab50:	eb 14                	jmp    c001ab66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ab52:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ab55:	80 f9 19             	cmp    cl,0x19
c001ab58:	77 03                	ja     c001ab5d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ab5a:	83 e8 20             	sub    eax,0x20
c001ab5d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ab61:	42                   	inc    edx
c001ab62:	eb d8                	jmp    c001ab3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ab64:	31 ed                	xor    ebp,ebp
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ab70:	e8 e1 10 ff ff       	call   c000bc56 <malloc>
c001ab75:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab7c:	89 c6                	mov    esi,eax
c001ab7e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001ab84:	c1 ef 0b             	shr    edi,0xb
c001ab87:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ab8e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ab9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab9e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001aba5:	74 28                	je     c001abcf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001aba7:	52                   	push   edx
c001aba8:	57                   	push   edi
c001aba9:	50                   	push   eax
c001abaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abae:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abb5:	e8 59 f9 ff ff       	call   c001a513 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abbe:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001abc5:	05 00 08 00 00       	add    eax,0x800
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	eb cb                	jmp    c001ab9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001abcf:	83 ec 0c             	sub    esp,0xc
c001abd2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abd6:	57                   	push   edi
c001abd7:	e8 49 5a fe ff       	call   c0000625 <strlen>
c001abdc:	50                   	push   eax
c001abdd:	57                   	push   edi
c001abde:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001abe5:	56                   	push   esi
c001abe6:	e8 e6 f8 ff ff       	call   c001a4d1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001abeb:	83 c4 20             	add    esp,0x20
c001abee:	85 c0                	test   eax,eax
c001abf0:	75 13                	jne    c001ac05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	56                   	push   esi
c001abf6:	e8 6b 10 ff ff       	call   c000bc66 <free>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	31 c0                	xor    eax,eax
c001ac00:	e9 b3 00 00 00       	jmp    c001acb8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac05:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ac09:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ac0d:	c1 e7 08             	shl    edi,0x8
c001ac10:	c1 e2 10             	shl    edx,0x10
c001ac13:	09 d7                	or     edi,edx
c001ac15:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ac19:	09 d7                	or     edi,edx
c001ac1b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ac1f:	c1 e2 18             	shl    edx,0x18
c001ac22:	09 d7                	or     edi,edx
c001ac24:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ac28:	89 d1                	mov    ecx,edx
c001ac2a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ac2e:	c1 e1 08             	shl    ecx,0x8
c001ac31:	c1 e2 10             	shl    edx,0x10
c001ac34:	09 ca                	or     edx,ecx
c001ac36:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ac3a:	09 ca                	or     edx,ecx
c001ac3c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ac40:	c1 e1 18             	shl    ecx,0x18
c001ac43:	09 ca                	or     edx,ecx
c001ac45:	89 e9                	mov    ecx,ebp
c001ac47:	84 c9                	test   cl,cl
c001ac49:	74 3c                	je     c001ac87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001ac4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	56                   	push   esi
c001ac53:	e8 0e 10 ff ff       	call   c000bc66 <free>
c001ac58:	83 c4 0c             	add    esp,0xc
c001ac5b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac62:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac67:	50                   	push   eax
c001ac68:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac6f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac7a:	52                   	push   edx
c001ac7b:	57                   	push   edi
c001ac7c:	53                   	push   ebx
c001ac7d:	e8 6e fe ff ff       	call   c001aaf0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac82:	83 c4 20             	add    esp,0x20
c001ac85:	eb 31                	jmp    c001acb8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac87:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ac8a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ac91:	d0 e8                	shr    al,1
c001ac93:	89 3b                	mov    DWORD PTR [ebx],edi
c001ac95:	83 e0 01             	and    eax,0x1
c001ac98:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac9f:	83 ec 0c             	sub    esp,0xc
c001aca2:	89 13                	mov    DWORD PTR [ebx],edx
c001aca4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001acab:	89 03                	mov    DWORD PTR [ebx],eax
c001acad:	56                   	push   esi
c001acae:	e8 b3 0f ff ff       	call   c000bc66 <free>
c001acb3:	83 c4 10             	add    esp,0x10
c001acb6:	b0 01                	mov    al,0x1
c001acb8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001acbe:	5b                   	pop    ebx
c001acbf:	5e                   	pop    esi
c001acc0:	5f                   	pop    edi
c001acc1:	5d                   	pop    ebp
c001acc2:	c3                   	ret    

c001acc3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001acc3:	55                   	push   ebp
c001acc4:	57                   	push   edi
c001acc5:	56                   	push   esi
c001acc6:	53                   	push   ebx
c001acc7:	83 ec 20             	sub    esp,0x20
c001acca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acce:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001acd2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001acd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acde:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ace6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001aceb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001acf1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001acf7:	57                   	push   edi
c001acf8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acfc:	50                   	push   eax
c001acfd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad01:	50                   	push   eax
c001ad02:	e8 94 fd ff ff       	call   c001aa9b <readRoot(unsigned int*, unsigned int*, char)>
c001ad07:	5a                   	pop    edx
c001ad08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad0c:	e8 14 59 fe ff       	call   c0000625 <strlen>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	83 f8 03             	cmp    eax,0x3
c001ad17:	77 17                	ja     c001ad30 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ad19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad1d:	89 03                	mov    DWORD PTR [ebx],eax
c001ad1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad23:	89 06                	mov    DWORD PTR [esi],eax
c001ad25:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ad2c:	b0 01                	mov    al,0x1
c001ad2e:	eb 19                	jmp    c001ad49 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ad30:	50                   	push   eax
c001ad31:	55                   	push   ebp
c001ad32:	57                   	push   edi
c001ad33:	56                   	push   esi
c001ad34:	53                   	push   ebx
c001ad35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad41:	e8 aa fd ff ff       	call   c001aaf0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ad46:	83 c4 20             	add    esp,0x20
c001ad49:	83 c4 1c             	add    esp,0x1c
c001ad4c:	5b                   	pop    ebx
c001ad4d:	5e                   	pop    esi
c001ad4e:	5f                   	pop    edi
c001ad4f:	5d                   	pop    ebp
c001ad50:	c3                   	ret    
c001ad51:	90                   	nop

c001ad52 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ad52:	57                   	push   edi
c001ad53:	56                   	push   esi
c001ad54:	53                   	push   ebx
c001ad55:	83 ec 10             	sub    esp,0x10
c001ad58:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ad5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad60:	85 ff                	test   edi,edi
c001ad62:	74 7b                	je     c001addf <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad64:	85 f6                	test   esi,esi
c001ad66:	74 77                	je     c001addf <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	6a 1c                	push   0x1c
c001ad6d:	e8 e4 0e ff ff       	call   c000bc56 <malloc>
c001ad72:	89 07                	mov    DWORD PTR [edi],eax
c001ad74:	89 c3                	mov    ebx,eax
c001ad76:	58                   	pop    eax
c001ad77:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad7b:	50                   	push   eax
c001ad7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ad7f:	50                   	push   eax
c001ad80:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad84:	50                   	push   eax
c001ad85:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad89:	50                   	push   eax
c001ad8a:	56                   	push   esi
c001ad8b:	e8 33 ff ff ff       	call   c001acc3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad90:	83 c4 20             	add    esp,0x20
c001ad93:	84 c0                	test   al,al
c001ad95:	74 07                	je     c001ad9e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ad97:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad9c:	74 0b                	je     c001ada9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad9e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ada2:	b8 01 00 00 00       	mov    eax,0x1
c001ada7:	eb 3b                	jmp    c001ade4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ada9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001adb1:	89 03                	mov    DWORD PTR [ebx],eax
c001adb3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001adba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adbe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001adc5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001adcc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001adcf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001add6:	8a 06                	mov    al,BYTE PTR [esi]
c001add8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001addb:	31 c0                	xor    eax,eax
c001addd:	eb 05                	jmp    c001ade4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001addf:	b8 04 00 00 00       	mov    eax,0x4
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	5b                   	pop    ebx
c001ade8:	5e                   	pop    esi
c001ade9:	5f                   	pop    edi
c001adea:	c3                   	ret    
c001adeb:	90                   	nop

c001adec <ISO9660::exists(char const*)>:
c001adec:	83 ec 28             	sub    esp,0x28
c001adef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adf3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001adf7:	52                   	push   edx
c001adf8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001adfb:	52                   	push   edx
c001adfc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ae00:	52                   	push   edx
c001ae01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ae05:	52                   	push   edx
c001ae06:	50                   	push   eax
c001ae07:	e8 b7 fe ff ff       	call   c001acc3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae0c:	83 c4 3c             	add    esp,0x3c
c001ae0f:	c3                   	ret    

c001ae10 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae10:	56                   	push   esi
c001ae11:	53                   	push   ebx
c001ae12:	83 ec 14             	sub    esp,0x14
c001ae15:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae19:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ae1d:	85 db                	test   ebx,ebx
c001ae1f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ae23:	0f 94 c2             	sete   dl
c001ae26:	85 f6                	test   esi,esi
c001ae28:	0f 94 c0             	sete   al
c001ae2b:	08 c2                	or     dl,al
c001ae2d:	75 68                	jne    c001ae97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae2f:	85 c9                	test   ecx,ecx
c001ae31:	74 64                	je     c001ae97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae33:	83 ec 0c             	sub    esp,0xc
c001ae36:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae39:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae3d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae43:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae4a:	50                   	push   eax
c001ae4b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ae4e:	50                   	push   eax
c001ae4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae53:	50                   	push   eax
c001ae54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae58:	50                   	push   eax
c001ae59:	51                   	push   ecx
c001ae5a:	e8 64 fe ff ff       	call   c001acc3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae5f:	83 c4 20             	add    esp,0x20
c001ae62:	ba 01 00 00 00       	mov    edx,0x1
c001ae67:	84 c0                	test   al,al
c001ae69:	74 31                	je     c001ae9c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae6f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae76:	89 03                	mov    DWORD PTR [ebx],eax
c001ae78:	ba 00 00 00 00       	mov    edx,0x0
c001ae7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae81:	85 c0                	test   eax,eax
c001ae83:	0f 95 06             	setne  BYTE PTR [esi]
c001ae86:	74 14                	je     c001ae9c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae88:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae8e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae95:	eb 05                	jmp    c001ae9c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae97:	ba 04 00 00 00       	mov    edx,0x4
c001ae9c:	83 c4 14             	add    esp,0x14
c001ae9f:	89 d0                	mov    eax,edx
c001aea1:	5b                   	pop    ebx
c001aea2:	5e                   	pop    esi
c001aea3:	c3                   	ret    

c001aea4 <ISO9660::openDir(char const*, void**)>:
c001aea4:	57                   	push   edi
c001aea5:	56                   	push   esi
c001aea6:	53                   	push   ebx
c001aea7:	83 ec 10             	sub    esp,0x10
c001aeaa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aeae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aeb2:	85 ff                	test   edi,edi
c001aeb4:	0f 84 95 00 00 00    	je     c001af4f <ISO9660::openDir(char const*, void**)+0xab>
c001aeba:	85 f6                	test   esi,esi
c001aebc:	0f 84 8d 00 00 00    	je     c001af4f <ISO9660::openDir(char const*, void**)+0xab>
c001aec2:	83 ec 0c             	sub    esp,0xc
c001aec5:	6a 1c                	push   0x1c
c001aec7:	e8 8a 0d ff ff       	call   c000bc56 <malloc>
c001aecc:	89 07                	mov    DWORD PTR [edi],eax
c001aece:	89 c3                	mov    ebx,eax
c001aed0:	59                   	pop    ecx
c001aed1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aed5:	50                   	push   eax
c001aed6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aed9:	50                   	push   eax
c001aeda:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aede:	50                   	push   eax
c001aedf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aee3:	50                   	push   eax
c001aee4:	56                   	push   esi
c001aee5:	e8 d9 fd ff ff       	call   c001acc3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aeea:	83 c4 20             	add    esp,0x20
c001aeed:	84 c0                	test   al,al
c001aeef:	74 07                	je     c001aef8 <ISO9660::openDir(char const*, void**)+0x54>
c001aef1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aef6:	75 21                	jne    c001af19 <ISO9660::openDir(char const*, void**)+0x75>
c001aef8:	0f b6 c0             	movzx  eax,al
c001aefb:	52                   	push   edx
c001aefc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af00:	50                   	push   eax
c001af01:	68 c2 23 02 c0       	push   0xc00223c2
c001af06:	e8 28 41 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001af0b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	b8 01 00 00 00       	mov    eax,0x1
c001af17:	eb 3b                	jmp    c001af54 <ISO9660::openDir(char const*, void**)+0xb0>
c001af19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af1d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001af21:	89 03                	mov    DWORD PTR [ebx],eax
c001af23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001af2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001af35:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001af3f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001af46:	8a 06                	mov    al,BYTE PTR [esi]
c001af48:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001af4b:	31 c0                	xor    eax,eax
c001af4d:	eb 05                	jmp    c001af54 <ISO9660::openDir(char const*, void**)+0xb0>
c001af4f:	b8 04 00 00 00       	mov    eax,0x4
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	5b                   	pop    ebx
c001af58:	5e                   	pop    esi
c001af59:	5f                   	pop    edi
c001af5a:	c3                   	ret    
c001af5b:	90                   	nop

c001af5c <ISO9660::ISO9660()>:
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	50                   	push   eax
c001af67:	e8 cc 43 ff ff       	call   c000f338 <Filesystem::Filesystem()>
c001af6c:	83 c4 10             	add    esp,0x10
c001af6f:	ba e8 23 02 c0       	mov    edx,0xc00223e8
c001af74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af78:	89 10                	mov    DWORD PTR [eax],edx
c001af7a:	90                   	nop
c001af7b:	83 c4 0c             	add    esp,0xc
c001af7e:	c3                   	ret    
c001af7f:	90                   	nop

c001af80 <SoundChannel::~SoundChannel()>:
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af8a:	83 ec 0c             	sub    esp,0xc
c001af8d:	50                   	push   eax
c001af8e:	e8 d3 0c ff ff       	call   c000bc66 <free>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	90                   	nop
c001af97:	83 c4 0c             	add    esp,0xc
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop

c001af9c <SoundChannel::setSpeed(float)>:
c001af9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa0:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001afa4:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001afa7:	c3                   	ret    

c001afa8 <SoundChannel::getSpeed()>:
c001afa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afac:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001afaf:	c3                   	ret    

c001afb0 <SoundChannel::setVolume(int)>:
c001afb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afb4:	83 f8 64             	cmp    eax,0x64
c001afb7:	7e 05                	jle    c001afbe <SoundChannel::setVolume(int)+0xe>
c001afb9:	b8 64 00 00 00       	mov    eax,0x64
c001afbe:	85 c0                	test   eax,eax
c001afc0:	79 02                	jns    c001afc4 <SoundChannel::setVolume(int)+0x14>
c001afc2:	31 c0                	xor    eax,eax
c001afc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001afc8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001afcb:	c3                   	ret    

c001afcc <SoundChannel::getVolume()>:
c001afcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afd0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001afd3:	c3                   	ret    

c001afd4 <SoundChannel::pause()>:
c001afd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afd8:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001afdc:	c3                   	ret    
c001afdd:	90                   	nop

c001afde <SoundChannel::SoundChannel(int, int, int, int)>:
c001afde:	83 ec 1c             	sub    esp,0x1c
c001afe1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001afe5:	e8 ea ff ff ff       	call   c001afd4 <SoundChannel::pause()>
c001afea:	83 c4 04             	add    esp,0x4
c001afed:	6a 50                	push   0x50
c001afef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aff3:	e8 b8 ff ff ff       	call   c001afb0 <SoundChannel::setVolume(int)>
c001aff8:	83 c4 08             	add    esp,0x8
c001affb:	d9 e8                	fld1   
c001affd:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b001:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b004:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b008:	e8 8f ff ff ff       	call   c001af9c <SoundChannel::setSpeed(float)>
c001b00d:	83 c4 08             	add    esp,0x8
c001b010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b018:	89 10                	mov    DWORD PTR [eax],edx
c001b01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b022:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b029:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b02d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b030:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b035:	75 23                	jne    c001b05a <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001b037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b03b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b03d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b044:	0f af c2             	imul   eax,edx
c001b047:	85 c0                	test   eax,eax
c001b049:	79 03                	jns    c001b04e <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001b04b:	83 c0 03             	add    eax,0x3
c001b04e:	c1 f8 02             	sar    eax,0x2
c001b051:	05 a0 0f 00 00       	add    eax,0xfa0
c001b056:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b05a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b062:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b069:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b074:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b07b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b07f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b082:	c1 e0 02             	shl    eax,0x2
c001b085:	83 ec 0c             	sub    esp,0xc
c001b088:	50                   	push   eax
c001b089:	e8 c8 0b ff ff       	call   c000bc56 <malloc>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	89 c2                	mov    edx,eax
c001b093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b097:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b09a:	83 ec 04             	sub    esp,0x4
c001b09d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0a1:	50                   	push   eax
c001b0a2:	6a 01                	push   0x1
c001b0a4:	6a 04                	push   0x4
c001b0a6:	e8 ad d7 fe ff       	call   c0008858 <src_new>
c001b0ab:	83 c4 10             	add    esp,0x10
c001b0ae:	89 c2                	mov    edx,eax
c001b0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0b4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b0b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0bb:	85 c0                	test   eax,eax
c001b0bd:	74 10                	je     c001b0cf <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 44 24 02 c0       	push   0xc0022444
c001b0c7:	e8 fc 9b ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	90                   	nop
c001b0d0:	83 c4 1c             	add    esp,0x1c
c001b0d3:	c3                   	ret    

c001b0d4 <SoundChannel::play()>:
c001b0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0d8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b0dc:	c3                   	ret    
c001b0dd:	90                   	nop

c001b0de <SoundChannel::paused()>:
c001b0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0e2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b0e5:	c3                   	ret    

c001b0e6 <SoundChannel::getSampleRate()>:
c001b0e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0ec:	c3                   	ret    
c001b0ed:	90                   	nop

c001b0ee <SoundChannel::getBits()>:
c001b0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b0f5:	c3                   	ret    

c001b0f6 <SoundChannel::getBufferUsed()>:
c001b0f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0fa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b0fd:	c3                   	ret    

c001b0fe <SoundChannel::getBufferSize()>:
c001b0fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b102:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b105:	c3                   	ret    

c001b106 <SoundChannel::unbuffer(float*, int, int)>:
c001b106:	53                   	push   ebx
c001b107:	83 ec 40             	sub    esp,0x40
c001b10a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b10e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b116:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b119:	db 03                	fild   DWORD PTR [ebx]
c001b11b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b11f:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b123:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b126:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b129:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b12d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b131:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b135:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b139:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b13d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b141:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b145:	50                   	push   eax
c001b146:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b149:	e8 c4 d3 fe ff       	call   c0008512 <src_process>
c001b14e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b152:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b155:	83 c4 0c             	add    esp,0xc
c001b158:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b15b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b15e:	29 d0                	sub    eax,edx
c001b160:	c1 e0 02             	shl    eax,0x2
c001b163:	50                   	push   eax
c001b164:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b167:	50                   	push   eax
c001b168:	51                   	push   ecx
c001b169:	e8 2c 54 fe ff       	call   c000059a <memmove>
c001b16e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b172:	83 c4 48             	add    esp,0x48
c001b175:	5b                   	pop    ebx
c001b176:	c3                   	ret    
c001b177:	90                   	nop

c001b178 <SoundChannel::buffer8(unsigned char*, int)>:
c001b178:	53                   	push   ebx
c001b179:	31 c0                	xor    eax,eax
c001b17b:	83 ec 08             	sub    esp,0x8
c001b17e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b182:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b185:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b188:	74 35                	je     c001b1bf <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b18a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b18e:	7d 2f                	jge    c001b1bf <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b190:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b194:	d9 05 60 24 02 c0    	fld    DWORD PTR ds:0xc0022460
c001b19a:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b19e:	40                   	inc    eax
c001b19f:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b1a4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b1a7:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b1ab:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b1ae:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b1b1:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b1b4:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b1b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b1ba:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b1bd:	eb c9                	jmp    c001b188 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b1bf:	83 c4 08             	add    esp,0x8
c001b1c2:	5b                   	pop    ebx
c001b1c3:	c3                   	ret    

c001b1c4 <SoundDevice::SoundDevice(char const*)>:
c001b1c4:	83 ec 1c             	sub    esp,0x1c
c001b1c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1cb:	83 ec 08             	sub    esp,0x8
c001b1ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d2:	50                   	push   eax
c001b1d3:	e8 56 54 ff ff       	call   c001062e <Device::Device(char const*)>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c001b1e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1e4:	89 10                	mov    DWORD PTR [eax],edx
c001b1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ea:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b1f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1f8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b202:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b20a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b20f:	7f 19                	jg     c001b22a <SoundDevice::SoundDevice(char const*)+0x66>
c001b211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b219:	83 c2 54             	add    edx,0x54
c001b21c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b224:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b228:	eb e0                	jmp    c001b20a <SoundDevice::SoundDevice(char const*)+0x46>
c001b22a:	90                   	nop
c001b22b:	83 c4 1c             	add    esp,0x1c
c001b22e:	c3                   	ret    
c001b22f:	90                   	nop

c001b230 <SoundDevice::~SoundDevice()>:
c001b230:	53                   	push   ebx
c001b231:	83 ec 18             	sub    esp,0x18
c001b234:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c001b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b23d:	89 10                	mov    DWORD PTR [eax],edx
c001b23f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b247:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b24c:	7f 46                	jg     c001b294 <SoundDevice::~SoundDevice()+0x64>
c001b24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b256:	83 c2 54             	add    edx,0x54
c001b259:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b25d:	85 c0                	test   eax,eax
c001b25f:	74 2d                	je     c001b28e <SoundDevice::~SoundDevice()+0x5e>
c001b261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b265:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b269:	83 c2 54             	add    edx,0x54
c001b26c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b270:	85 db                	test   ebx,ebx
c001b272:	74 1a                	je     c001b28e <SoundDevice::~SoundDevice()+0x5e>
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	53                   	push   ebx
c001b278:	e8 03 fd ff ff       	call   c001af80 <SoundChannel::~SoundChannel()>
c001b27d:	83 c4 10             	add    esp,0x10
c001b280:	83 ec 08             	sub    esp,0x8
c001b283:	6a 2c                	push   0x2c
c001b285:	53                   	push   ebx
c001b286:	e8 c8 3c ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001b28b:	83 c4 10             	add    esp,0x10
c001b28e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b292:	eb b3                	jmp    c001b247 <SoundDevice::~SoundDevice()+0x17>
c001b294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	50                   	push   eax
c001b29c:	e8 3f 50 ff ff       	call   c00102e0 <Device::~Device()>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	90                   	nop
c001b2a5:	83 c4 18             	add    esp,0x18
c001b2a8:	5b                   	pop    ebx
c001b2a9:	c3                   	ret    

c001b2aa <SoundDevice::~SoundDevice()>:
c001b2aa:	83 ec 0c             	sub    esp,0xc
c001b2ad:	83 ec 0c             	sub    esp,0xc
c001b2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2b4:	e8 77 ff ff ff       	call   c001b230 <SoundDevice::~SoundDevice()>
c001b2b9:	83 c4 10             	add    esp,0x10
c001b2bc:	83 ec 08             	sub    esp,0x8
c001b2bf:	68 e4 01 00 00       	push   0x1e4
c001b2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c8:	e8 86 3c ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001b2cd:	83 c4 10             	add    esp,0x10
c001b2d0:	83 c4 0c             	add    esp,0xc
c001b2d3:	c3                   	ret    

c001b2d4 <SoundDevice::getFreeChannelNum()>:
c001b2d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2d8:	31 c0                	xor    eax,eax
c001b2da:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b2e2:	74 09                	je     c001b2ed <SoundDevice::getFreeChannelNum()+0x19>
c001b2e4:	40                   	inc    eax
c001b2e5:	83 f8 20             	cmp    eax,0x20
c001b2e8:	75 f0                	jne    c001b2da <SoundDevice::getFreeChannelNum()+0x6>
c001b2ea:	83 c8 ff             	or     eax,0xffffffff
c001b2ed:	c3                   	ret    

c001b2ee <SoundDevice::addChannel(SoundChannel*)>:
c001b2ee:	56                   	push   esi
c001b2ef:	53                   	push   ebx
c001b2f0:	51                   	push   ecx
c001b2f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2f9:	53                   	push   ebx
c001b2fa:	e8 d5 ff ff ff       	call   c001b2d4 <SoundDevice::getFreeChannelNum()>
c001b2ff:	5a                   	pop    edx
c001b300:	83 f8 ff             	cmp    eax,0xffffffff
c001b303:	74 51                	je     c001b356 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b305:	85 f6                	test   esi,esi
c001b307:	74 4d                	je     c001b356 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b309:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b310:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b317:	75 30                	jne    c001b349 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	56                   	push   esi
c001b31d:	e8 c4 fd ff ff       	call   c001b0e6 <SoundChannel::getSampleRate()>
c001b322:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b328:	89 34 24             	mov    DWORD PTR [esp],esi
c001b32b:	e8 be fd ff ff       	call   c001b0ee <SoundChannel::getBits()>
c001b330:	83 c4 0c             	add    esp,0xc
c001b333:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b339:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b33b:	50                   	push   eax
c001b33c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b342:	53                   	push   ebx
c001b343:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b34f:	b8 01 00 00 00       	mov    eax,0x1
c001b354:	eb 03                	jmp    c001b359 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b356:	83 c8 ff             	or     eax,0xffffffff
c001b359:	5a                   	pop    edx
c001b35a:	5b                   	pop    ebx
c001b35b:	5e                   	pop    esi
c001b35c:	c3                   	ret    
c001b35d:	90                   	nop

c001b35e <SoundDevice::removeChannel(int)>:
c001b35e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b366:	83 fa 1f             	cmp    edx,0x1f
c001b369:	77 23                	ja     c001b38e <SoundDevice::removeChannel(int)+0x30>
c001b36b:	8d 14 90             	lea    edx,[eax+edx*4]
c001b36e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b375:	74 17                	je     c001b38e <SoundDevice::removeChannel(int)+0x30>
c001b377:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b381:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b387:	75 05                	jne    c001b38e <SoundDevice::removeChannel(int)+0x30>
c001b389:	8b 00                	mov    eax,DWORD PTR [eax]
c001b38b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b38e:	c3                   	ret    
c001b38f:	90                   	nop

c001b390 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b390:	56                   	push   esi
c001b391:	53                   	push   ebx
c001b392:	31 db                	xor    ebx,ebx
c001b394:	83 ec 14             	sub    esp,0x14
c001b397:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b39b:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b39f:	7d 55                	jge    c001b3f6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b3a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3a5:	d9 e8                	fld1   
c001b3a7:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b3aa:	d8 0d 9c 24 02 c0    	fmul   DWORD PTR ds:0xc002249c
c001b3b0:	d8 0d a0 24 02 c0    	fmul   DWORD PTR ds:0xc00224a0
c001b3b6:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b3ba:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b3be:	d8 15 a4 24 02 c0    	fcom   DWORD PTR ds:0xc00224a4
c001b3c4:	df e0                	fnstsw ax
c001b3c6:	9e                   	sahf   
c001b3c7:	72 08                	jb     c001b3d1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b3c9:	dd d8                	fstp   st(0)
c001b3cb:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b3cf:	eb 22                	jmp    c001b3f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3d1:	d9 ee                	fldz   
c001b3d3:	d8 d9                	fcomp  st(1)
c001b3d5:	df e0                	fnstsw ax
c001b3d7:	9e                   	sahf   
c001b3d8:	72 08                	jb     c001b3e2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b3da:	dd d8                	fstp   st(0)
c001b3dc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b3e0:	eb 11                	jmp    c001b3f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3e2:	83 ec 10             	sub    esp,0x10
c001b3e5:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b3e8:	e8 0f 36 00 00       	call   c001e9fc <lrintf>
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b3f3:	43                   	inc    ebx
c001b3f4:	eb a5                	jmp    c001b39b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b3f6:	83 c4 14             	add    esp,0x14
c001b3f9:	5b                   	pop    ebx
c001b3fa:	5e                   	pop    esi
c001b3fb:	c3                   	ret    

c001b3fc <SoundDevice::getAudio(int, float*, float*)>:
c001b3fc:	55                   	push   ebp
c001b3fd:	57                   	push   edi
c001b3fe:	56                   	push   esi
c001b3ff:	53                   	push   ebx
c001b400:	31 db                	xor    ebx,ebx
c001b402:	83 ec 20             	sub    esp,0x20
c001b405:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b409:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b40d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b411:	c1 e0 02             	shl    eax,0x2
c001b414:	50                   	push   eax
c001b415:	6a 00                	push   0x0
c001b417:	55                   	push   ebp
c001b418:	e8 eb 51 fe ff       	call   c0000608 <memset>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b424:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b42b:	85 c0                	test   eax,eax
c001b42d:	0f 84 94 00 00 00    	je     c001b4c7 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b433:	83 ec 0c             	sub    esp,0xc
c001b436:	50                   	push   eax
c001b437:	e8 a2 fc ff ff       	call   c001b0de <SoundChannel::paused()>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	84 c0                	test   al,al
c001b441:	0f 85 80 00 00 00    	jne    c001b4c7 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b447:	83 ec 0c             	sub    esp,0xc
c001b44a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b451:	e8 76 fb ff ff       	call   c001afcc <SoundChannel::getVolume()>
c001b456:	83 c4 10             	add    esp,0x10
c001b459:	85 c0                	test   eax,eax
c001b45b:	74 6a                	je     c001b4c7 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b45d:	83 ec 0c             	sub    esp,0xc
c001b460:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b467:	e8 60 fb ff ff       	call   c001afcc <SoundChannel::getVolume()>
c001b46c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b470:	d9 05 a8 24 02 c0    	fld    DWORD PTR ds:0xc00224a8
c001b476:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b47a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b47e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b482:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b488:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b48c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b493:	e8 6e fc ff ff       	call   c001b106 <SoundChannel::unbuffer(float*, int, int)>
c001b498:	83 c4 20             	add    esp,0x20
c001b49b:	31 d2                	xor    edx,edx
c001b49d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b4a1:	39 c2                	cmp    edx,eax
c001b4a3:	7d 1a                	jge    c001b4bf <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b4a5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b4a9:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b4ac:	d8 c9                	fmul   st,st(1)
c001b4ae:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b4b4:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b4b8:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b4bc:	42                   	inc    edx
c001b4bd:	eb e2                	jmp    c001b4a1 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b4bf:	dd d8                	fstp   st(0)
c001b4c1:	39 c7                	cmp    edi,eax
c001b4c3:	7e 02                	jle    c001b4c7 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b4c5:	89 c7                	mov    edi,eax
c001b4c7:	43                   	inc    ebx
c001b4c8:	83 fb 20             	cmp    ebx,0x20
c001b4cb:	0f 85 53 ff ff ff    	jne    c001b424 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b4d1:	83 c4 1c             	add    esp,0x1c
c001b4d4:	89 f8                	mov    eax,edi
c001b4d6:	5b                   	pop    ebx
c001b4d7:	5e                   	pop    esi
c001b4d8:	5f                   	pop    edi
c001b4d9:	5d                   	pop    ebp
c001b4da:	c3                   	ret    
c001b4db:	90                   	nop

c001b4dc <PCI::open(int, int, void*)>:
c001b4dc:	83 ec 18             	sub    esp,0x18
c001b4df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4e3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4e5:	50                   	push   eax
c001b4e6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b4e9:	31 c0                	xor    eax,eax
c001b4eb:	83 c4 1c             	add    esp,0x1c
c001b4ee:	c3                   	ret    
c001b4ef:	90                   	nop

c001b4f0 <PCI::close(int, int, void*)>:
c001b4f0:	31 c0                	xor    eax,eax
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <PCI::PCI()>:
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4fb:	83 ec 08             	sub    esp,0x8
c001b4fe:	68 ac 24 02 c0       	push   0xc00224ac
c001b503:	50                   	push   eax
c001b504:	e8 b1 47 ff ff       	call   c000fcba <Bus::Bus(char const*)>
c001b509:	83 c4 10             	add    esp,0x10
c001b50c:	ba 58 25 02 c0       	mov    edx,0xc0022558
c001b511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b515:	89 10                	mov    DWORD PTR [eax],edx
c001b517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b521:	0f b6 d0             	movzx  edx,al
c001b524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b528:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b533:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b539:	0f b6 d0             	movzx  edx,al
c001b53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b540:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b549:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b54f:	8d 50 01             	lea    edx,[eax+0x1]
c001b552:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b556:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b55c:	0f b6 d0             	movzx  edx,al
c001b55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b563:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b567:	83 c9 c0             	or     ecx,0xffffffc0
c001b56a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b56e:	90                   	nop
c001b56f:	83 c4 0c             	add    esp,0xc
c001b572:	c3                   	ret    
c001b573:	90                   	nop

c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b574:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b578:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b57d:	89 ca                	mov    edx,ecx
c001b57f:	c1 e0 10             	shl    eax,0x10
c001b582:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b588:	09 d0                	or     eax,edx
c001b58a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b58f:	c1 e2 08             	shl    edx,0x8
c001b592:	09 d0                	or     eax,edx
c001b594:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b599:	c1 e2 0b             	shl    edx,0xb
c001b59c:	09 d0                	or     eax,edx
c001b59e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5a3:	0d 00 00 00 80       	or     eax,0x80000000
c001b5a8:	ef                   	out    dx,eax
c001b5a9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5ae:	ed                   	in     eax,dx
c001b5af:	83 e1 02             	and    ecx,0x2
c001b5b2:	0f b6 c9             	movzx  ecx,cl
c001b5b5:	c1 e1 03             	shl    ecx,0x3
c001b5b8:	d3 e8                	shr    eax,cl
c001b5ba:	c3                   	ret    
c001b5bb:	90                   	nop

c001b5bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b5bc:	6a 00                	push   0x0
c001b5be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c3:	50                   	push   eax
c001b5c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c9:	50                   	push   eax
c001b5ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5cf:	50                   	push   eax
c001b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5d4:	e8 9b ff ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d9:	83 c4 14             	add    esp,0x14
c001b5dc:	c3                   	ret    
c001b5dd:	90                   	nop

c001b5de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b5de:	6a 0e                	push   0xe
c001b5e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5e5:	50                   	push   eax
c001b5e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5eb:	50                   	push   eax
c001b5ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5f1:	50                   	push   eax
c001b5f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5f6:	e8 79 ff ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5fb:	83 c4 14             	add    esp,0x14
c001b5fe:	0f b6 c0             	movzx  eax,al
c001b601:	c3                   	ret    

c001b602 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b602:	55                   	push   ebp
c001b603:	57                   	push   edi
c001b604:	56                   	push   esi
c001b605:	53                   	push   ebx
c001b606:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b60b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b610:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b615:	6a 0a                	push   0xa
c001b617:	56                   	push   esi
c001b618:	55                   	push   ebp
c001b619:	57                   	push   edi
c001b61a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b61e:	e8 51 ff ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b623:	6a 0a                	push   0xa
c001b625:	89 c3                	mov    ebx,eax
c001b627:	56                   	push   esi
c001b628:	0f b6 db             	movzx  ebx,bl
c001b62b:	55                   	push   ebp
c001b62c:	57                   	push   edi
c001b62d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b631:	e8 3e ff ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b636:	83 c4 28             	add    esp,0x28
c001b639:	25 00 ff 00 00       	and    eax,0xff00
c001b63e:	09 d8                	or     eax,ebx
c001b640:	5b                   	pop    ebx
c001b641:	5e                   	pop    esi
c001b642:	5f                   	pop    edi
c001b643:	5d                   	pop    ebp
c001b644:	c3                   	ret    
c001b645:	90                   	nop

c001b646 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b646:	6a 08                	push   0x8
c001b648:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b64d:	50                   	push   eax
c001b64e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b653:	50                   	push   eax
c001b654:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b659:	50                   	push   eax
c001b65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b65e:	e8 11 ff ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b663:	83 c4 14             	add    esp,0x14
c001b666:	0f b6 c4             	movzx  eax,ah
c001b669:	c3                   	ret    

c001b66a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b66a:	6a 08                	push   0x8
c001b66c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b671:	50                   	push   eax
c001b672:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b677:	50                   	push   eax
c001b678:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b67d:	50                   	push   eax
c001b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b682:	e8 ed fe ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b687:	83 c4 14             	add    esp,0x14
c001b68a:	c3                   	ret    
c001b68b:	90                   	nop

c001b68c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b68c:	6a 3c                	push   0x3c
c001b68e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b693:	50                   	push   eax
c001b694:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b699:	50                   	push   eax
c001b69a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b69f:	50                   	push   eax
c001b6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b6a4:	e8 cb fe ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6a9:	83 c4 14             	add    esp,0x14
c001b6ac:	c3                   	ret    
c001b6ad:	90                   	nop

c001b6ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b6ae:	6a 18                	push   0x18
c001b6b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6b5:	50                   	push   eax
c001b6b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6bb:	50                   	push   eax
c001b6bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6c1:	50                   	push   eax
c001b6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b6c6:	e8 a9 fe ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6cb:	83 c4 14             	add    esp,0x14
c001b6ce:	0f b6 c4             	movzx  eax,ah
c001b6d1:	c3                   	ret    

c001b6d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b6d2:	55                   	push   ebp
c001b6d3:	57                   	push   edi
c001b6d4:	56                   	push   esi
c001b6d5:	53                   	push   ebx
c001b6d6:	50                   	push   eax
c001b6d7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b6db:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b6e0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6e5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b6ea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b6f1:	8d 43 12             	lea    eax,[ebx+0x12]
c001b6f4:	83 c3 10             	add    ebx,0x10
c001b6f7:	0f b6 c0             	movzx  eax,al
c001b6fa:	0f b6 db             	movzx  ebx,bl
c001b6fd:	50                   	push   eax
c001b6fe:	51                   	push   ecx
c001b6ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b703:	57                   	push   edi
c001b704:	55                   	push   ebp
c001b705:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b709:	e8 66 fe ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b70e:	53                   	push   ebx
c001b70f:	89 c6                	mov    esi,eax
c001b711:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b715:	c1 e6 10             	shl    esi,0x10
c001b718:	51                   	push   ecx
c001b719:	57                   	push   edi
c001b71a:	55                   	push   ebp
c001b71b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b71f:	e8 50 fe ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b724:	83 c4 2c             	add    esp,0x2c
c001b727:	0f b7 c0             	movzx  eax,ax
c001b72a:	5b                   	pop    ebx
c001b72b:	09 f0                	or     eax,esi
c001b72d:	5e                   	pop    esi
c001b72e:	5f                   	pop    edi
c001b72f:	5d                   	pop    ebp
c001b730:	c3                   	ret    
c001b731:	90                   	nop

c001b732 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b732:	53                   	push   ebx
c001b733:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b738:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b73d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b741:	c1 e1 10             	shl    ecx,0x10
c001b744:	25 fc 00 00 00       	and    eax,0xfc
c001b749:	09 c1                	or     ecx,eax
c001b74b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b750:	c1 e0 08             	shl    eax,0x8
c001b753:	09 c1                	or     ecx,eax
c001b755:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b75a:	c1 e0 0b             	shl    eax,0xb
c001b75d:	09 c1                	or     ecx,eax
c001b75f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b765:	89 c8                	mov    eax,ecx
c001b767:	ef                   	out    dx,eax
c001b768:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b76d:	ed                   	in     eax,dx
c001b76e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b773:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b778:	74 0a                	je     c001b784 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b77a:	0f b7 d8             	movzx  ebx,ax
c001b77d:	89 d0                	mov    eax,edx
c001b77f:	c1 e0 10             	shl    eax,0x10
c001b782:	eb 05                	jmp    c001b789 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b784:	66 31 c0             	xor    ax,ax
c001b787:	89 d3                	mov    ebx,edx
c001b789:	09 c3                	or     ebx,eax
c001b78b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b790:	89 c8                	mov    eax,ecx
c001b792:	ef                   	out    dx,eax
c001b793:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b798:	89 d8                	mov    eax,ebx
c001b79a:	ef                   	out    dx,eax
c001b79b:	5b                   	pop    ebx
c001b79c:	c3                   	ret    
c001b79d:	90                   	nop

c001b79e <PCI::checkBus(unsigned char)>:
c001b79e:	56                   	push   esi
c001b79f:	53                   	push   ebx
c001b7a0:	31 db                	xor    ebx,ebx
c001b7a2:	51                   	push   ecx
c001b7a3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b7a8:	52                   	push   edx
c001b7a9:	53                   	push   ebx
c001b7aa:	43                   	inc    ebx
c001b7ab:	56                   	push   esi
c001b7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7b0:	e8 4d 03 00 00       	call   c001bb02 <PCI::checkDevice(unsigned char, unsigned char)>
c001b7b5:	83 c4 10             	add    esp,0x10
c001b7b8:	83 fb 20             	cmp    ebx,0x20
c001b7bb:	75 eb                	jne    c001b7a8 <PCI::checkBus(unsigned char)+0xa>
c001b7bd:	58                   	pop    eax
c001b7be:	5b                   	pop    ebx
c001b7bf:	5e                   	pop    esi
c001b7c0:	c3                   	ret    
c001b7c1:	90                   	nop

c001b7c2 <PCI::foundDevice(PCIDeviceInfo)>:
c001b7c2:	55                   	push   ebp
c001b7c3:	57                   	push   edi
c001b7c4:	56                   	push   esi
c001b7c5:	53                   	push   ebx
c001b7c6:	83 ec 1c             	sub    esp,0x1c
c001b7c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7cd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b7d3:	0f 84 51 01 00 00    	je     c001b92a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b7d9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b7dd:	66 81 f9 06 04       	cmp    cx,0x406
c001b7e2:	75 2c                	jne    c001b810 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b7e4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b7e9:	50                   	push   eax
c001b7ea:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b7ef:	50                   	push   eax
c001b7f0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b7f5:	50                   	push   eax
c001b7f6:	56                   	push   esi
c001b7f7:	e8 b2 fe ff ff       	call   c001b6ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b7fc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b800:	0f b6 c0             	movzx  eax,al
c001b803:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b807:	83 c4 2c             	add    esp,0x2c
c001b80a:	5b                   	pop    ebx
c001b80b:	5e                   	pop    esi
c001b80c:	5f                   	pop    edi
c001b80d:	5d                   	pop    ebp
c001b80e:	eb 8e                	jmp    c001b79e <PCI::checkBus(unsigned char)>
c001b810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b814:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b81a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b81e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b822:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b826:	88 d3                	mov    bl,dl
c001b828:	85 c0                	test   eax,eax
c001b82a:	74 33                	je     c001b85f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b82c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b82f:	85 d2                	test   edx,edx
c001b831:	74 28                	je     c001b85b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b833:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b839:	31 ef                	xor    edi,ebp
c001b83b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b841:	75 18                	jne    c001b85b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b843:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b847:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b84d:	75 0c                	jne    c001b85b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b84f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b855:	0f 84 cf 00 00 00    	je     c001b92a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b85b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b85d:	eb c9                	jmp    c001b828 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b85f:	66 81 f9 01 06       	cmp    cx,0x601
c001b864:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b868:	75 18                	jne    c001b882 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b86a:	83 ec 0c             	sub    esp,0xc
c001b86d:	68 58 01 00 00       	push   0x158
c001b872:	e8 cd 36 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001b877:	59                   	pop    ecx
c001b878:	89 c5                	mov    ebp,eax
c001b87a:	5f                   	pop    edi
c001b87b:	68 b4 24 02 c0       	push   0xc00224b4
c001b880:	eb 7d                	jmp    c001b8ff <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b882:	66 81 f9 01 01       	cmp    cx,0x101
c001b887:	75 60                	jne    c001b8e9 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b889:	83 ec 0c             	sub    esp,0xc
c001b88c:	68 70 02 00 00       	push   0x270
c001b891:	e8 ae 36 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001b896:	89 04 24             	mov    DWORD PTR [esp],eax
c001b899:	89 c5                	mov    ebp,eax
c001b89b:	e8 26 03 00 00       	call   c001bbc6 <IDE::IDE()>
c001b8a0:	58                   	pop    eax
c001b8a1:	5a                   	pop    edx
c001b8a2:	55                   	push   ebp
c001b8a3:	56                   	push   esi
c001b8a4:	e8 95 4b ff ff       	call   c001043e <Device::addChild(Device*)>
c001b8a9:	83 ec 1c             	sub    esp,0x1c
c001b8ac:	b9 09 00 00 00       	mov    ecx,0x9
c001b8b1:	fc                   	cld    
c001b8b2:	89 e7                	mov    edi,esp
c001b8b4:	89 de                	mov    esi,ebx
c001b8b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8b8:	55                   	push   ebp
c001b8b9:	e8 5a 4a ff ff       	call   c0010318 <Device::preOpenPCI(PCIDeviceInfo)>
c001b8be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b8c1:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b8c5:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b8cd:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b8d5:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b8dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8e0:	83 c4 4c             	add    esp,0x4c
c001b8e3:	5b                   	pop    ebx
c001b8e4:	5e                   	pop    esi
c001b8e5:	5f                   	pop    edi
c001b8e6:	5d                   	pop    ebp
c001b8e7:	ff e0                	jmp    eax
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	68 58 01 00 00       	push   0x158
c001b8f1:	e8 4e 36 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001b8f6:	59                   	pop    ecx
c001b8f7:	89 c5                	mov    ebp,eax
c001b8f9:	5f                   	pop    edi
c001b8fa:	68 d3 24 02 c0       	push   0xc00224d3
c001b8ff:	55                   	push   ebp
c001b900:	e8 25 4e ff ff       	call   c001072a <DriverlessDevice::DriverlessDevice(char const*)>
c001b905:	58                   	pop    eax
c001b906:	5a                   	pop    edx
c001b907:	55                   	push   ebp
c001b908:	56                   	push   esi
c001b909:	e8 30 4b ff ff       	call   c001043e <Device::addChild(Device*)>
c001b90e:	b9 09 00 00 00       	mov    ecx,0x9
c001b913:	fc                   	cld    
c001b914:	89 df                	mov    edi,ebx
c001b916:	89 de                	mov    esi,ebx
c001b918:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b91a:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b91e:	83 c4 2c             	add    esp,0x2c
c001b921:	5b                   	pop    ebx
c001b922:	5e                   	pop    esi
c001b923:	5f                   	pop    edi
c001b924:	5d                   	pop    ebp
c001b925:	e9 ee 49 ff ff       	jmp    c0010318 <Device::preOpenPCI(PCIDeviceInfo)>
c001b92a:	83 c4 1c             	add    esp,0x1c
c001b92d:	5b                   	pop    ebx
c001b92e:	5e                   	pop    esi
c001b92f:	5f                   	pop    edi
c001b930:	5d                   	pop    ebp
c001b931:	c3                   	ret    

c001b932 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b932:	55                   	push   ebp
c001b933:	57                   	push   edi
c001b934:	56                   	push   esi
c001b935:	53                   	push   ebx
c001b936:	83 ec 5c             	sub    esp,0x5c
c001b939:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b93d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b941:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b945:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b94a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b94e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b952:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b95b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b960:	6a 0c                	push   0xc
c001b962:	55                   	push   ebp
c001b963:	53                   	push   ebx
c001b964:	57                   	push   edi
c001b965:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b96c:	e8 03 fc ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b971:	83 c4 0c             	add    esp,0xc
c001b974:	6a 00                	push   0x0
c001b976:	68 ed 24 02 c0       	push   0xc00224ed
c001b97b:	e8 b3 36 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001b980:	55                   	push   ebp
c001b981:	53                   	push   ebx
c001b982:	57                   	push   edi
c001b983:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b98a:	e8 73 fc ff ff       	call   c001b602 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b98f:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b994:	83 c4 20             	add    esp,0x20
c001b997:	55                   	push   ebp
c001b998:	53                   	push   ebx
c001b999:	57                   	push   edi
c001b99a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b99e:	e8 e9 fc ff ff       	call   c001b68c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b9a3:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b9aa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b9ae:	55                   	push   ebp
c001b9af:	53                   	push   ebx
c001b9b0:	57                   	push   edi
c001b9b1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b9b8:	e8 b7 fb ff ff       	call   c001b574 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9bd:	0f b6 c4             	movzx  eax,ah
c001b9c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b9c4:	83 c4 18             	add    esp,0x18
c001b9c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b9cb:	68 01 25 02 c0       	push   0xc0022501
c001b9d0:	e8 5e 36 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001b9d5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b9d9:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b9dd:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001b9e2:	83 c4 10             	add    esp,0x10
c001b9e5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b9eb:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b9f2:	74 6c                	je     c001ba60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9f4:	31 f6                	xor    esi,esi
c001b9f6:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c001b9fc:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001ba02:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001ba08:	7e 56                	jle    c001ba60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001ba0a:	8d 14 f2             	lea    edx,[edx+esi*8]
c001ba0d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001ba14:	39 cb                	cmp    ebx,ecx
c001ba16:	75 45                	jne    c001ba5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001ba18:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001ba1f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001ba23:	75 38                	jne    c001ba5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001ba25:	83 ec 0c             	sub    esp,0xc
c001ba28:	68 10 25 02 c0       	push   0xc0022510
c001ba2d:	e8 01 36 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001ba32:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c001ba38:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001ba3e:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001ba46:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001ba4a:	52                   	push   edx
c001ba4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba4f:	53                   	push   ebx
c001ba50:	68 35 25 02 c0       	push   0xc0022535
c001ba55:	e8 d9 35 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001ba5a:	83 c4 20             	add    esp,0x20
c001ba5d:	46                   	inc    esi
c001ba5e:	eb 96                	jmp    c001b9f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001ba60:	31 d2                	xor    edx,edx
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	55                   	push   ebp
c001ba66:	53                   	push   ebx
c001ba67:	57                   	push   edi
c001ba68:	52                   	push   edx
c001ba69:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba6d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba74:	e8 59 fc ff ff       	call   c001b6d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba79:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001ba7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba81:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ba85:	42                   	inc    edx
c001ba86:	83 c4 20             	add    esp,0x20
c001ba89:	83 fa 06             	cmp    edx,0x6
c001ba8c:	75 d4                	jne    c001ba62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001ba8e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba92:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001ba96:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ba9a:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001ba9e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001baa2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001baa6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001baab:	86 e0                	xchg   al,ah
c001baad:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001bab2:	55                   	push   ebp
c001bab3:	53                   	push   ebx
c001bab4:	57                   	push   edi
c001bab5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001bab9:	e8 88 fb ff ff       	call   c001b646 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001babe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bac2:	55                   	push   ebp
c001bac3:	53                   	push   ebx
c001bac4:	57                   	push   edi
c001bac5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bacc:	e8 eb fa ff ff       	call   c001b5bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001bad9:	b9 09 00 00 00       	mov    ecx,0x9
c001bade:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001bae2:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001bae6:	fc                   	cld    
c001bae7:	89 e7                	mov    edi,esp
c001bae9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baeb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001baf2:	e8 cb fc ff ff       	call   c001b7c2 <PCI::foundDevice(PCIDeviceInfo)>
c001baf7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bafd:	5b                   	pop    ebx
c001bafe:	5e                   	pop    esi
c001baff:	5f                   	pop    edi
c001bb00:	5d                   	pop    ebp
c001bb01:	c3                   	ret    

c001bb02 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bb02:	55                   	push   ebp
c001bb03:	57                   	push   edi
c001bb04:	56                   	push   esi
c001bb05:	53                   	push   ebx
c001bb06:	83 ec 0c             	sub    esp,0xc
c001bb09:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bb0d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bb12:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bb17:	6a 00                	push   0x0
c001bb19:	56                   	push   esi
c001bb1a:	57                   	push   edi
c001bb1b:	55                   	push   ebp
c001bb1c:	e8 9b fa ff ff       	call   c001b5bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb21:	6a 00                	push   0x0
c001bb23:	56                   	push   esi
c001bb24:	57                   	push   edi
c001bb25:	55                   	push   ebp
c001bb26:	e8 07 fe ff ff       	call   c001b932 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb2b:	83 c4 20             	add    esp,0x20
c001bb2e:	6a 00                	push   0x0
c001bb30:	56                   	push   esi
c001bb31:	57                   	push   edi
c001bb32:	55                   	push   ebp
c001bb33:	e8 a6 fa ff ff       	call   c001b5de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	84 c0                	test   al,al
c001bb3d:	79 27                	jns    c001bb66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bb3f:	bb 01 00 00 00       	mov    ebx,0x1
c001bb44:	53                   	push   ebx
c001bb45:	56                   	push   esi
c001bb46:	57                   	push   edi
c001bb47:	55                   	push   ebp
c001bb48:	e8 6f fa ff ff       	call   c001b5bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	66 40                	inc    ax
c001bb52:	74 0c                	je     c001bb60 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001bb54:	53                   	push   ebx
c001bb55:	56                   	push   esi
c001bb56:	57                   	push   edi
c001bb57:	55                   	push   ebp
c001bb58:	e8 d5 fd ff ff       	call   c001b932 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	43                   	inc    ebx
c001bb61:	83 fb 08             	cmp    ebx,0x8
c001bb64:	75 de                	jne    c001bb44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bb66:	83 c4 0c             	add    esp,0xc
c001bb69:	5b                   	pop    ebx
c001bb6a:	5e                   	pop    esi
c001bb6b:	5f                   	pop    edi
c001bb6c:	5d                   	pop    ebp
c001bb6d:	c3                   	ret    

c001bb6e <PCI::detect()>:
c001bb6e:	56                   	push   esi
c001bb6f:	53                   	push   ebx
c001bb70:	53                   	push   ebx
c001bb71:	31 db                	xor    ebx,ebx
c001bb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb77:	6a 00                	push   0x0
c001bb79:	6a 00                	push   0x0
c001bb7b:	6a 00                	push   0x0
c001bb7d:	56                   	push   esi
c001bb7e:	e8 5b fa ff ff       	call   c001b5de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	a8 80                	test   al,0x80
c001bb88:	75 21                	jne    c001bbab <PCI::detect()+0x3d>
c001bb8a:	51                   	push   ecx
c001bb8b:	51                   	push   ecx
c001bb8c:	6a 00                	push   0x0
c001bb8e:	56                   	push   esi
c001bb8f:	e8 0a fc ff ff       	call   c001b79e <PCI::checkBus(unsigned char)>
c001bb94:	83 c4 10             	add    esp,0x10
c001bb97:	eb 24                	jmp    c001bbbd <PCI::detect()+0x4f>
c001bb99:	52                   	push   edx
c001bb9a:	52                   	push   edx
c001bb9b:	53                   	push   ebx
c001bb9c:	43                   	inc    ebx
c001bb9d:	56                   	push   esi
c001bb9e:	e8 fb fb ff ff       	call   c001b79e <PCI::checkBus(unsigned char)>
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	83 fb 08             	cmp    ebx,0x8
c001bba9:	74 12                	je     c001bbbd <PCI::detect()+0x4f>
c001bbab:	53                   	push   ebx
c001bbac:	6a 00                	push   0x0
c001bbae:	6a 00                	push   0x0
c001bbb0:	56                   	push   esi
c001bbb1:	e8 06 fa ff ff       	call   c001b5bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	66 40                	inc    ax
c001bbbb:	74 dc                	je     c001bb99 <PCI::detect()+0x2b>
c001bbbd:	58                   	pop    eax
c001bbbe:	5b                   	pop    ebx
c001bbbf:	5e                   	pop    esi
c001bbc0:	c3                   	ret    
c001bbc1:	90                   	nop

c001bbc2 <IDE::close(int, int, void*)>:
c001bbc2:	83 c8 ff             	or     eax,0xffffffff
c001bbc5:	c3                   	ret    

c001bbc6 <IDE::IDE()>:
c001bbc6:	83 ec 0c             	sub    esp,0xc
c001bbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcd:	83 ec 08             	sub    esp,0x8
c001bbd0:	68 7c 25 02 c0       	push   0xc002257c
c001bbd5:	50                   	push   eax
c001bbd6:	e8 e5 4b ff ff       	call   c00107c0 <HardDiskController::HardDiskController(char const*)>
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c001bbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe7:	89 10                	mov    DWORD PTR [eax],edx
c001bbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bbf4:	90                   	nop
c001bbf5:	83 c4 0c             	add    esp,0xc
c001bbf8:	c3                   	ret    
c001bbf9:	90                   	nop

c001bbfa <IDE::prepareInterrupt(unsigned char)>:
c001bbfa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc03:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bc0b:	c3                   	ret    

c001bc0c <selectDrive(unsigned char, unsigned char)>:
c001bc0c:	c3                   	ret    
c001bc0d:	90                   	nop

c001bc0e <IDE::getBase(unsigned char)>:
c001bc0e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc17:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bc1f:	c3                   	ret    

c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bc20:	55                   	push   ebp
c001bc21:	57                   	push   edi
c001bc22:	56                   	push   esi
c001bc23:	53                   	push   ebx
c001bc24:	83 ec 1c             	sub    esp,0x1c
c001bc27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc2f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bc32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bc3a:	80 f9 03             	cmp    cl,0x3
c001bc3d:	77 51                	ja     c001bc90 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bc3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc43:	0f b6 f2             	movzx  esi,dl
c001bc46:	0f b6 db             	movzx  ebx,bl
c001bc49:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc4c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bc50:	83 ca 80             	or     edx,0xffffff80
c001bc53:	0f b6 d2             	movzx  edx,dl
c001bc56:	52                   	push   edx
c001bc57:	6a 0c                	push   0xc
c001bc59:	56                   	push   esi
c001bc5a:	57                   	push   edi
c001bc5b:	e8 c0 ff ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc60:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bc65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc69:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bc6d:	ee                   	out    dx,al
c001bc6e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc73:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc77:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc7b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc7f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc87:	83 c4 2c             	add    esp,0x2c
c001bc8a:	5b                   	pop    ebx
c001bc8b:	5e                   	pop    esi
c001bc8c:	5f                   	pop    edi
c001bc8d:	5d                   	pop    ebp
c001bc8e:	eb 90                	jmp    c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc90:	80 fb 07             	cmp    bl,0x7
c001bc93:	77 12                	ja     c001bca7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc95:	0f b6 d2             	movzx  edx,dl
c001bc98:	0f b6 db             	movzx  ebx,bl
c001bc9b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bca3:	89 da                	mov    edx,ebx
c001bca5:	eb 2f                	jmp    c001bcd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bca7:	80 fb 0d             	cmp    bl,0xd
c001bcaa:	77 13                	ja     c001bcbf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bcac:	0f b6 d2             	movzx  edx,dl
c001bcaf:	0f b6 db             	movzx  ebx,bl
c001bcb2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bcb9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bcbd:	eb 17                	jmp    c001bcd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bcbf:	80 fb 15             	cmp    bl,0x15
c001bcc2:	77 13                	ja     c001bcd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bcc4:	0f b6 d2             	movzx  edx,dl
c001bcc7:	0f b6 db             	movzx  ebx,bl
c001bcca:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bcd2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bcd6:	ee                   	out    dx,al
c001bcd7:	83 c4 1c             	add    esp,0x1c
c001bcda:	5b                   	pop    ebx
c001bcdb:	5e                   	pop    esi
c001bcdc:	5f                   	pop    edi
c001bcdd:	5d                   	pop    ebp
c001bcde:	c3                   	ret    
c001bcdf:	90                   	nop

c001bce0 <IDE::read(unsigned char, unsigned char)>:
c001bce0:	55                   	push   ebp
c001bce1:	57                   	push   edi
c001bce2:	56                   	push   esi
c001bce3:	53                   	push   ebx
c001bce4:	83 ec 1c             	sub    esp,0x1c
c001bce7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bceb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bcef:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bcf2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bcf6:	3c 03                	cmp    al,0x3
c001bcf8:	77 43                	ja     c001bd3d <IDE::read(unsigned char, unsigned char)+0x5d>
c001bcfa:	0f b6 f2             	movzx  esi,dl
c001bcfd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd00:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bd04:	83 c8 80             	or     eax,0xffffff80
c001bd07:	0f b6 c0             	movzx  eax,al
c001bd0a:	50                   	push   eax
c001bd0b:	6a 0c                	push   0xc
c001bd0d:	56                   	push   esi
c001bd0e:	57                   	push   edi
c001bd0f:	e8 0c ff ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd14:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bd19:	0f b6 c3             	movzx  eax,bl
c001bd1c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bd20:	ec                   	in     al,dx
c001bd21:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bd25:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd2a:	52                   	push   edx
c001bd2b:	6a 0c                	push   0xc
c001bd2d:	56                   	push   esi
c001bd2e:	57                   	push   edi
c001bd2f:	e8 ec fe ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd34:	83 c4 20             	add    esp,0x20
c001bd37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd3b:	eb 49                	jmp    c001bd86 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd3d:	80 fb 07             	cmp    bl,0x7
c001bd40:	77 12                	ja     c001bd54 <IDE::read(unsigned char, unsigned char)+0x74>
c001bd42:	0f b6 d2             	movzx  edx,dl
c001bd45:	0f b6 c3             	movzx  eax,bl
c001bd48:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bd50:	89 c2                	mov    edx,eax
c001bd52:	eb 31                	jmp    c001bd85 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd54:	80 fb 0d             	cmp    bl,0xd
c001bd57:	77 13                	ja     c001bd6c <IDE::read(unsigned char, unsigned char)+0x8c>
c001bd59:	0f b6 d2             	movzx  edx,dl
c001bd5c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bd63:	0f b6 d3             	movzx  edx,bl
c001bd66:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bd6a:	eb 19                	jmp    c001bd85 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd6c:	31 c0                	xor    eax,eax
c001bd6e:	80 fb 15             	cmp    bl,0x15
c001bd71:	77 13                	ja     c001bd86 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd73:	0f b6 d2             	movzx  edx,dl
c001bd76:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd7e:	0f b6 d3             	movzx  edx,bl
c001bd81:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd85:	ec                   	in     al,dx
c001bd86:	83 c4 1c             	add    esp,0x1c
c001bd89:	5b                   	pop    ebx
c001bd8a:	5e                   	pop    esi
c001bd8b:	5f                   	pop    edi
c001bd8c:	5d                   	pop    ebp
c001bd8d:	c3                   	ret    

c001bd8e <IDE::waitInterrupt(unsigned char)>:
c001bd8e:	55                   	push   ebp
c001bd8f:	57                   	push   edi
c001bd90:	56                   	push   esi
c001bd91:	53                   	push   ebx
c001bd92:	31 db                	xor    ebx,ebx
c001bd94:	83 ec 0c             	sub    esp,0xc
c001bd97:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd9b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bda0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bda8:	89 e8                	mov    eax,ebp
c001bdaa:	84 c0                	test   al,al
c001bdac:	75 34                	jne    c001bde2 <IDE::waitInterrupt(unsigned char)+0x54>
c001bdae:	52                   	push   edx
c001bdaf:	6a 0c                	push   0xc
c001bdb1:	56                   	push   esi
c001bdb2:	57                   	push   edi
c001bdb3:	e8 28 ff ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	a8 01                	test   al,0x1
c001bdbd:	75 2b                	jne    c001bdea <IDE::waitInterrupt(unsigned char)+0x5c>
c001bdbf:	f6 c3 04             	test   bl,0x4
c001bdc2:	75 16                	jne    c001bdda <IDE::waitInterrupt(unsigned char)+0x4c>
c001bdc4:	83 fb 32             	cmp    ebx,0x32
c001bdc7:	7e 11                	jle    c001bdda <IDE::waitInterrupt(unsigned char)+0x4c>
c001bdc9:	50                   	push   eax
c001bdca:	50                   	push   eax
c001bdcb:	6a 00                	push   0x0
c001bdcd:	68 80 96 98 00       	push   0x989680
c001bdd2:	e8 e6 c4 ff ff       	call   c00182bd <nanoSleep(unsigned long long)>
c001bdd7:	83 c4 10             	add    esp,0x10
c001bdda:	83 fb 3c             	cmp    ebx,0x3c
c001bddd:	74 0b                	je     c001bdea <IDE::waitInterrupt(unsigned char)+0x5c>
c001bddf:	43                   	inc    ebx
c001bde0:	eb be                	jmp    c001bda0 <IDE::waitInterrupt(unsigned char)+0x12>
c001bde2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bdea:	83 c4 0c             	add    esp,0xc
c001bded:	89 e8                	mov    eax,ebp
c001bdef:	5b                   	pop    ebx
c001bdf0:	5e                   	pop    esi
c001bdf1:	5f                   	pop    edi
c001bdf2:	5d                   	pop    ebp
c001bdf3:	c3                   	ret    

c001bdf4 <ideChannel0IRQHandler(regs*, void*)>:
c001bdf4:	83 ec 10             	sub    esp,0x10
c001bdf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdfb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001be02:	6a 07                	push   0x7
c001be04:	6a 00                	push   0x0
c001be06:	50                   	push   eax
c001be07:	e8 d4 fe ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001be0c:	83 c4 1c             	add    esp,0x1c
c001be0f:	c3                   	ret    

c001be10 <ideChannel1IRQHandler(regs*, void*)>:
c001be10:	83 ec 10             	sub    esp,0x10
c001be13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be17:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001be1e:	6a 07                	push   0x7
c001be20:	6a 01                	push   0x1
c001be22:	50                   	push   eax
c001be23:	e8 b8 fe ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001be28:	83 c4 1c             	add    esp,0x1c
c001be2b:	c3                   	ret    

c001be2c <IDE::enableIRQs(unsigned char, bool)>:
c001be2c:	57                   	push   edi
c001be2d:	56                   	push   esi
c001be2e:	be 04 00 00 00       	mov    esi,0x4
c001be33:	53                   	push   ebx
c001be34:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001be39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be3d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001be42:	0f 94 c0             	sete   al
c001be45:	d1 e0                	shl    eax,1
c001be47:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001be4e:	0f b6 c0             	movzx  eax,al
c001be51:	50                   	push   eax
c001be52:	6a 0c                	push   0xc
c001be54:	57                   	push   edi
c001be55:	53                   	push   ebx
c001be56:	e8 c5 fd ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	50                   	push   eax
c001be5f:	6a 0c                	push   0xc
c001be61:	57                   	push   edi
c001be62:	53                   	push   ebx
c001be63:	e8 78 fe ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001be68:	83 c4 10             	add    esp,0x10
c001be6b:	4e                   	dec    esi
c001be6c:	75 f0                	jne    c001be5e <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be6e:	5b                   	pop    ebx
c001be6f:	5e                   	pop    esi
c001be70:	5f                   	pop    edi
c001be71:	c3                   	ret    

c001be72 <IDE::open(int, int, void*)>:
c001be72:	55                   	push   ebp
c001be73:	57                   	push   edi
c001be74:	56                   	push   esi
c001be75:	53                   	push   ebx
c001be76:	83 ec 1c             	sub    esp,0x1c
c001be79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be7d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be86:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be8f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be96:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be9d:	0f 85 b0 02 00 00    	jne    c001c153 <IDE::open(int, int, void*)+0x2e1>
c001bea3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bea9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bead:	83 e0 7f             	and    eax,0x7f
c001beb0:	3c 05                	cmp    al,0x5
c001beb2:	74 04                	je     c001beb8 <IDE::open(int, int, void*)+0x46>
c001beb4:	3c 0f                	cmp    al,0xf
c001beb6:	75 32                	jne    c001beea <IDE::open(int, int, void*)+0x78>
c001beb8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bebe:	83 e0 fc             	and    eax,0xfffffffc
c001bec1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bec8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bece:	83 e0 fc             	and    eax,0xfffffffc
c001bed1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bed8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bede:	83 e0 fc             	and    eax,0xfffffffc
c001bee1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bee8:	eb 14                	jmp    c001befe <IDE::open(int, int, void*)+0x8c>
c001beea:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bef4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001befe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bf05:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bf0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf10:	89 c6                	mov    esi,eax
c001bf12:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf17:	c1 e6 10             	shl    esi,0x10
c001bf1a:	89 e8                	mov    eax,ebp
c001bf1c:	89 fa                	mov    edx,edi
c001bf1e:	c1 e0 0b             	shl    eax,0xb
c001bf21:	09 f0                	or     eax,esi
c001bf23:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bf2a:	c1 e6 08             	shl    esi,0x8
c001bf2d:	09 c6                	or     esi,eax
c001bf2f:	89 f0                	mov    eax,esi
c001bf31:	0d 08 00 00 80       	or     eax,0x80000008
c001bf36:	ef                   	out    dx,eax
c001bf37:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bf3c:	89 ca                	mov    edx,ecx
c001bf3e:	ed                   	in     eax,dx
c001bf3f:	c1 e8 10             	shr    eax,0x10
c001bf42:	3d ff ff 00 00       	cmp    eax,0xffff
c001bf47:	0f 84 f5 00 00 00    	je     c001c042 <IDE::open(int, int, void*)+0x1d0>
c001bf4d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bf53:	89 fa                	mov    edx,edi
c001bf55:	89 f0                	mov    eax,esi
c001bf57:	ef                   	out    dx,eax
c001bf58:	b0 fe                	mov    al,0xfe
c001bf5a:	89 ca                	mov    edx,ecx
c001bf5c:	ee                   	out    dx,al
c001bf5d:	89 f0                	mov    eax,esi
c001bf5f:	89 fa                	mov    edx,edi
c001bf61:	ef                   	out    dx,eax
c001bf62:	89 ca                	mov    edx,ecx
c001bf64:	ed                   	in     eax,dx
c001bf65:	3c fe                	cmp    al,0xfe
c001bf67:	0f 85 a9 00 00 00    	jne    c001c016 <IDE::open(int, int, void*)+0x1a4>
c001bf6d:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c001bf73:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf7a:	74 33                	je     c001bfaf <IDE::open(int, int, void*)+0x13d>
c001bf7c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf82:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf86:	40                   	inc    eax
c001bf87:	83 ec 0c             	sub    esp,0xc
c001bf8a:	0f b6 c0             	movzx  eax,al
c001bf8d:	50                   	push   eax
c001bf8e:	55                   	push   ebp
c001bf8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf93:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf99:	51                   	push   ecx
c001bf9a:	e8 e9 75 ff ff       	call   c0013588 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf9f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bfa4:	83 c4 1c             	add    esp,0x1c
c001bfa7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bfad:	eb 0a                	jmp    c001bfb9 <IDE::open(int, int, void*)+0x147>
c001bfaf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bfb9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bfc0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bfc7:	c1 e1 10             	shl    ecx,0x10
c001bfca:	c1 e0 08             	shl    eax,0x8
c001bfcd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bfd2:	09 c1                	or     ecx,eax
c001bfd4:	89 fa                	mov    edx,edi
c001bfd6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bfdd:	c1 e0 0b             	shl    eax,0xb
c001bfe0:	09 c1                	or     ecx,eax
c001bfe2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bfe8:	89 c8                	mov    eax,ecx
c001bfea:	ef                   	out    dx,eax
c001bfeb:	be fc 0c 00 00       	mov    esi,0xcfc
c001bff0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bff6:	89 f2                	mov    edx,esi
c001bff8:	ee                   	out    dx,al
c001bff9:	89 c8                	mov    eax,ecx
c001bffb:	89 fa                	mov    edx,edi
c001bffd:	ef                   	out    dx,eax
c001bffe:	89 f2                	mov    edx,esi
c001c000:	ed                   	in     eax,dx
c001c001:	0f b6 c0             	movzx  eax,al
c001c004:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c00a:	74 46                	je     c001c052 <IDE::open(int, int, void*)+0x1e0>
c001c00c:	83 ec 0c             	sub    esp,0xc
c001c00f:	68 94 25 02 c0       	push   0xc0022594
c001c014:	eb 34                	jmp    c001c04a <IDE::open(int, int, void*)+0x1d8>
c001c016:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c01f:	75 17                	jne    c001c038 <IDE::open(int, int, void*)+0x1c6>
c001c021:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c026:	74 07                	je     c001c02f <IDE::open(int, int, void*)+0x1bd>
c001c028:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c02d:	75 09                	jne    c001c038 <IDE::open(int, int, void*)+0x1c6>
c001c02f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c036:	eb 1a                	jmp    c001c052 <IDE::open(int, int, void*)+0x1e0>
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	68 9c 25 02 c0       	push   0xc002259c
c001c040:	eb 08                	jmp    c001c04a <IDE::open(int, int, void*)+0x1d8>
c001c042:	83 ec 0c             	sub    esp,0xc
c001c045:	68 cd 25 02 c0       	push   0xc00225cd
c001c04a:	e8 79 8c ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001c04f:	83 c4 10             	add    esp,0x10
c001c052:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c059:	79 1a                	jns    c001c075 <IDE::open(int, int, void*)+0x203>
c001c05b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c061:	83 e0 fc             	and    eax,0xfffffffc
c001c064:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c06b:	83 c0 08             	add    eax,0x8
c001c06e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c075:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c07b:	89 c2                	mov    edx,eax
c001c07d:	83 e2 0f             	and    edx,0xf
c001c080:	66 83 fa 08          	cmp    dx,0x8
c001c084:	75 0a                	jne    c001c090 <IDE::open(int, int, void*)+0x21e>
c001c086:	83 e8 02             	sub    eax,0x2
c001c089:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c090:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c096:	89 c2                	mov    edx,eax
c001c098:	83 e2 0f             	and    edx,0xf
c001c09b:	66 83 fa 08          	cmp    dx,0x8
c001c09f:	75 0a                	jne    c001c0ab <IDE::open(int, int, void*)+0x239>
c001c0a1:	83 e8 02             	sub    eax,0x2
c001c0a4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c0ab:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c0b2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c0b9:	89 d0                	mov    eax,edx
c001c0bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0c2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c0c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c0c9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0ce:	0f b6 c9             	movzx  ecx,cl
c001c0d1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c0d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0df:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c0e3:	8d 50 02             	lea    edx,[eax+0x2]
c001c0e6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0eb:	0f b6 d2             	movzx  edx,dl
c001c0ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c0f4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0f7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0fb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c0ff:	8d 48 03             	lea    ecx,[eax+0x3]
c001c102:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c107:	0f b6 c9             	movzx  ecx,cl
c001c10a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c110:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c113:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c117:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c11b:	8d 50 04             	lea    edx,[eax+0x4]
c001c11e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c124:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c129:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c130:	66 85 f6             	test   si,si
c001c133:	74 3e                	je     c001c173 <IDE::open(int, int, void*)+0x301>
c001c135:	0f b6 d2             	movzx  edx,dl
c001c138:	83 c0 05             	add    eax,0x5
c001c13b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c13e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c142:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c146:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c14c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c151:	eb 20                	jmp    c001c173 <IDE::open(int, int, void*)+0x301>
c001c153:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c15d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c167:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c16e:	e9 02 ff ff ff       	jmp    c001c075 <IDE::open(int, int, void*)+0x203>
c001c173:	52                   	push   edx
c001c174:	52                   	push   edx
c001c175:	6a 00                	push   0x0
c001c177:	53                   	push   ebx
c001c178:	e8 7d fa ff ff       	call   c001bbfa <IDE::prepareInterrupt(unsigned char)>
c001c17d:	59                   	pop    ecx
c001c17e:	5e                   	pop    esi
c001c17f:	6a 01                	push   0x1
c001c181:	53                   	push   ebx
c001c182:	e8 73 fa ff ff       	call   c001bbfa <IDE::prepareInterrupt(unsigned char)>
c001c187:	83 c4 0c             	add    esp,0xc
c001c18a:	6a 00                	push   0x0
c001c18c:	6a 00                	push   0x0
c001c18e:	53                   	push   ebx
c001c18f:	e8 98 fc ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001c194:	83 c4 0c             	add    esp,0xc
c001c197:	6a 00                	push   0x0
c001c199:	6a 01                	push   0x1
c001c19b:	53                   	push   ebx
c001c19c:	e8 8b fc ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c1ab:	74 40                	je     c001c1ed <IDE::open(int, int, void*)+0x37b>
c001c1ad:	83 ec 0c             	sub    esp,0xc
c001c1b0:	68 f7 25 02 c0       	push   0xc00225f7
c001c1b5:	e8 79 2e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c1ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1bd:	6a 01                	push   0x1
c001c1bf:	68 f4 bd 01 c0       	push   0xc001bdf4
c001c1c4:	6a 0e                	push   0xe
c001c1c6:	53                   	push   ebx
c001c1c7:	e8 c6 41 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1cc:	83 c4 14             	add    esp,0x14
c001c1cf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1d5:	53                   	push   ebx
c001c1d6:	6a 01                	push   0x1
c001c1d8:	68 10 be 01 c0       	push   0xc001be10
c001c1dd:	6a 0f                	push   0xf
c001c1df:	53                   	push   ebx
c001c1e0:	e8 ad 41 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1e5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c1eb:	eb 4a                	jmp    c001c237 <IDE::open(int, int, void*)+0x3c5>
c001c1ed:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c1f7:	50                   	push   eax
c001c1f8:	6a 0f                	push   0xf
c001c1fa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c200:	68 13 26 02 c0       	push   0xc0022613
c001c205:	e8 29 2e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c20a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c20d:	6a 00                	push   0x0
c001c20f:	68 f4 bd 01 c0       	push   0xc001bdf4
c001c214:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c21a:	53                   	push   ebx
c001c21b:	e8 72 41 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c220:	83 c4 14             	add    esp,0x14
c001c223:	53                   	push   ebx
c001c224:	6a 00                	push   0x0
c001c226:	68 10 be 01 c0       	push   0xc001be10
c001c22b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c231:	53                   	push   ebx
c001c232:	e8 5b 41 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c237:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c239:	83 c4 20             	add    esp,0x20
c001c23c:	83 ec 0c             	sub    esp,0xc
c001c23f:	53                   	push   ebx
c001c240:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c243:	83 c4 0c             	add    esp,0xc
c001c246:	6a 07                	push   0x7
c001c248:	6a 00                	push   0x0
c001c24a:	53                   	push   ebx
c001c24b:	e8 90 fa ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c250:	83 c4 0c             	add    esp,0xc
c001c253:	6a 07                	push   0x7
c001c255:	6a 01                	push   0x1
c001c257:	53                   	push   ebx
c001c258:	e8 83 fa ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c25d:	83 c4 0c             	add    esp,0xc
c001c260:	6a 01                	push   0x1
c001c262:	6a 00                	push   0x0
c001c264:	53                   	push   ebx
c001c265:	e8 c2 fb ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001c26a:	83 c4 0c             	add    esp,0xc
c001c26d:	6a 01                	push   0x1
c001c26f:	6a 01                	push   0x1
c001c271:	53                   	push   ebx
c001c272:	e8 b5 fb ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001c277:	83 c4 2c             	add    esp,0x2c
c001c27a:	31 c0                	xor    eax,eax
c001c27c:	5b                   	pop    ebx
c001c27d:	5e                   	pop    esi
c001c27e:	5f                   	pop    edi
c001c27f:	5d                   	pop    ebp
c001c280:	c3                   	ret    
c001c281:	90                   	nop

c001c282 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c282:	55                   	push   ebp
c001c283:	57                   	push   edi
c001c284:	56                   	push   esi
c001c285:	53                   	push   ebx
c001c286:	83 ec 1c             	sub    esp,0x1c
c001c289:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c28d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c291:	8d 50 f8             	lea    edx,[eax-0x8]
c001c294:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c298:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c29c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c2a0:	80 fa 03             	cmp    dl,0x3
c001c2a3:	77 5d                	ja     c001c302 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c2a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c2a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2ad:	0f b6 db             	movzx  ebx,bl
c001c2b0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c2b3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c2b7:	83 ca 80             	or     edx,0xffffff80
c001c2ba:	0f b6 d2             	movzx  edx,dl
c001c2bd:	52                   	push   edx
c001c2be:	6a 0c                	push   0xc
c001c2c0:	53                   	push   ebx
c001c2c1:	56                   	push   esi
c001c2c2:	e8 59 f9 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2c7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c2cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c2d4:	0f b6 c0             	movzx  eax,al
c001c2d7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c2db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c2e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c2e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c2ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c2ee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c2f6:	83 c4 2c             	add    esp,0x2c
c001c2f9:	5b                   	pop    ebx
c001c2fa:	5e                   	pop    esi
c001c2fb:	5f                   	pop    edi
c001c2fc:	5d                   	pop    ebp
c001c2fd:	e9 1e f9 ff ff       	jmp    c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c302:	3c 07                	cmp    al,0x7
c001c304:	77 10                	ja     c001c316 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c306:	0f b6 db             	movzx  ebx,bl
c001c309:	0f b6 d0             	movzx  edx,al
c001c30c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c314:	eb 2d                	jmp    c001c343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c316:	3c 0d                	cmp    al,0xd
c001c318:	77 13                	ja     c001c32d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c31a:	0f b6 db             	movzx  ebx,bl
c001c31d:	0f b6 c0             	movzx  eax,al
c001c320:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c327:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c32b:	eb 16                	jmp    c001c343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c32d:	3c 15                	cmp    al,0x15
c001c32f:	77 14                	ja     c001c345 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c331:	0f b6 db             	movzx  ebx,bl
c001c334:	0f b6 c0             	movzx  eax,al
c001c337:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c33f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c343:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c345:	83 c4 1c             	add    esp,0x1c
c001c348:	5b                   	pop    ebx
c001c349:	5e                   	pop    esi
c001c34a:	5f                   	pop    edi
c001c34b:	5d                   	pop    ebp
c001c34c:	c3                   	ret    
c001c34d:	90                   	nop

c001c34e <IDE::detect()>:
c001c34e:	55                   	push   ebp
c001c34f:	57                   	push   edi
c001c350:	56                   	push   esi
c001c351:	53                   	push   ebx
c001c352:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c358:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c35f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c366:	0f 85 be 02 00 00    	jne    c001c62a <IDE::detect()+0x2dc>
c001c36c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c373:	31 f6                	xor    esi,esi
c001c375:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c37d:	31 ed                	xor    ebp,ebp
c001c37f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c383:	c1 e0 06             	shl    eax,0x6
c001c386:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c38e:	89 e8                	mov    eax,ebp
c001c390:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c394:	c1 e0 04             	shl    eax,0x4
c001c397:	83 c8 a0             	or     eax,0xffffffa0
c001c39a:	0f b6 c0             	movzx  eax,al
c001c39d:	50                   	push   eax
c001c39e:	6a 06                	push   0x6
c001c3a0:	56                   	push   esi
c001c3a1:	53                   	push   ebx
c001c3a2:	e8 79 f8 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	6a 0c                	push   0xc
c001c3ac:	56                   	push   esi
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 2d f9 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3b3:	83 c4 0c             	add    esp,0xc
c001c3b6:	6a 0c                	push   0xc
c001c3b8:	56                   	push   esi
c001c3b9:	53                   	push   ebx
c001c3ba:	e8 21 f9 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3bf:	83 c4 0c             	add    esp,0xc
c001c3c2:	6a 0c                	push   0xc
c001c3c4:	56                   	push   esi
c001c3c5:	53                   	push   ebx
c001c3c6:	e8 15 f9 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3cb:	83 c4 0c             	add    esp,0xc
c001c3ce:	6a 0c                	push   0xc
c001c3d0:	56                   	push   esi
c001c3d1:	53                   	push   ebx
c001c3d2:	e8 09 f9 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3d7:	68 ec 00 00 00       	push   0xec
c001c3dc:	6a 07                	push   0x7
c001c3de:	56                   	push   esi
c001c3df:	53                   	push   ebx
c001c3e0:	e8 3b f8 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3e5:	83 c4 1c             	add    esp,0x1c
c001c3e8:	6a 0c                	push   0xc
c001c3ea:	56                   	push   esi
c001c3eb:	53                   	push   ebx
c001c3ec:	e8 ef f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3f1:	83 c4 0c             	add    esp,0xc
c001c3f4:	6a 0c                	push   0xc
c001c3f6:	56                   	push   esi
c001c3f7:	53                   	push   ebx
c001c3f8:	e8 e3 f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c3fd:	83 c4 0c             	add    esp,0xc
c001c400:	6a 0c                	push   0xc
c001c402:	56                   	push   esi
c001c403:	53                   	push   ebx
c001c404:	e8 d7 f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c409:	83 c4 0c             	add    esp,0xc
c001c40c:	6a 0c                	push   0xc
c001c40e:	56                   	push   esi
c001c40f:	53                   	push   ebx
c001c410:	e8 cb f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c415:	83 c4 0c             	add    esp,0xc
c001c418:	6a 0c                	push   0xc
c001c41a:	56                   	push   esi
c001c41b:	53                   	push   ebx
c001c41c:	e8 bf f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	84 c0                	test   al,al
c001c426:	0f 84 8b 01 00 00    	je     c001c5b7 <IDE::detect()+0x269>
c001c42c:	31 ff                	xor    edi,edi
c001c42e:	50                   	push   eax
c001c42f:	6a 0c                	push   0xc
c001c431:	56                   	push   esi
c001c432:	53                   	push   ebx
c001c433:	e8 a8 f8 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	a8 01                	test   al,0x1
c001c43d:	0f 85 8e 01 00 00    	jne    c001c5d1 <IDE::detect()+0x283>
c001c443:	84 c0                	test   al,al
c001c445:	78 04                	js     c001c44b <IDE::detect()+0xfd>
c001c447:	a8 08                	test   al,0x8
c001c449:	75 27                	jne    c001c472 <IDE::detect()+0x124>
c001c44b:	47                   	inc    edi
c001c44c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c452:	7e da                	jle    c001c42e <IDE::detect()+0xe0>
c001c454:	50                   	push   eax
c001c455:	50                   	push   eax
c001c456:	6a 00                	push   0x0
c001c458:	68 40 4b 4c 00       	push   0x4c4b40
c001c45d:	e8 5b be ff ff       	call   c00182bd <nanoSleep(unsigned long long)>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c46b:	75 c1                	jne    c001c42e <IDE::detect()+0xe0>
c001c46d:	e9 5f 01 00 00       	jmp    c001c5d1 <IDE::detect()+0x283>
c001c472:	31 c9                	xor    ecx,ecx
c001c474:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c478:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	68 80 00 00 00       	push   0x80
c001c484:	57                   	push   edi
c001c485:	6a 00                	push   0x0
c001c487:	56                   	push   esi
c001c488:	53                   	push   ebx
c001c489:	e8 f4 fd ff ff       	call   c001c282 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c48e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c497:	89 d1                	mov    ecx,edx
c001c499:	c1 e0 06             	shl    eax,0x6
c001c49c:	01 d8                	add    eax,ebx
c001c49e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c4a5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c4ac:	89 f2                	mov    edx,esi
c001c4ae:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c4b4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c4b8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c4be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c4c2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c4c9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c4d1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c4d8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c4e0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c4e6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c4ed:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c4f3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4f7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4fb:	83 c4 20             	add    esp,0x20
c001c4fe:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c501:	83 c0 02             	add    eax,0x2
c001c504:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c50a:	83 c7 02             	add    edi,0x2
c001c50d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c510:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c516:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c51a:	75 e2                	jne    c001c4fe <IDE::detect()+0x1b0>
c001c51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c520:	c1 e0 06             	shl    eax,0x6
c001c523:	01 d8                	add    eax,ebx
c001c525:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c52b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c532:	66 c1 ea 09          	shr    dx,0x9
c001c536:	83 e2 01             	and    edx,0x1
c001c539:	84 c9                	test   cl,cl
c001c53b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c541:	75 2f                	jne    c001c572 <IDE::detect()+0x224>
c001c543:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c549:	85 c0                	test   eax,eax
c001c54b:	74 66                	je     c001c5b3 <IDE::detect()+0x265>
c001c54d:	50                   	push   eax
c001c54e:	55                   	push   ebp
c001c54f:	56                   	push   esi
c001c550:	68 2f 26 02 c0       	push   0xc002262f
c001c555:	e8 d9 2a ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c55a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c561:	e8 de 29 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001c566:	89 c7                	mov    edi,eax
c001c568:	89 04 24             	mov    DWORD PTR [esp],eax
c001c56b:	e8 e8 02 00 00       	call   c001c858 <ATA::ATA()>
c001c570:	eb 28                	jmp    c001c59a <IDE::detect()+0x24c>
c001c572:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c578:	55                   	push   ebp
c001c579:	56                   	push   esi
c001c57a:	68 5e 26 02 c0       	push   0xc002265e
c001c57f:	e8 af 2a ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c584:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c58b:	e8 b4 29 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001c590:	89 c7                	mov    edi,eax
c001c592:	89 04 24             	mov    DWORD PTR [esp],eax
c001c595:	e8 ee 08 00 00       	call   c001ce88 <ATAPI::ATAPI()>
c001c59a:	5a                   	pop    edx
c001c59b:	59                   	pop    ecx
c001c59c:	57                   	push   edi
c001c59d:	53                   	push   ebx
c001c59e:	e8 9b 3e ff ff       	call   c001043e <Device::addChild(Device*)>
c001c5a3:	8b 07                	mov    eax,DWORD PTR [edi]
c001c5a5:	53                   	push   ebx
c001c5a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5aa:	6a 00                	push   0x0
c001c5ac:	57                   	push   edi
c001c5ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5b0:	83 c4 20             	add    esp,0x20
c001c5b3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c5b7:	4d                   	dec    ebp
c001c5b8:	74 0a                	je     c001c5c4 <IDE::detect()+0x276>
c001c5ba:	bd 01 00 00 00       	mov    ebp,0x1
c001c5bf:	e9 bb fd ff ff       	jmp    c001c37f <IDE::detect()+0x31>
c001c5c4:	4e                   	dec    esi
c001c5c5:	74 63                	je     c001c62a <IDE::detect()+0x2dc>
c001c5c7:	be 01 00 00 00       	mov    esi,0x1
c001c5cc:	e9 ac fd ff ff       	jmp    c001c37d <IDE::detect()+0x2f>
c001c5d1:	50                   	push   eax
c001c5d2:	6a 04                	push   0x4
c001c5d4:	56                   	push   esi
c001c5d5:	53                   	push   ebx
c001c5d6:	e8 05 f7 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c5db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c5df:	83 c4 0c             	add    esp,0xc
c001c5e2:	6a 05                	push   0x5
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	e8 f5 f6 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c5f2:	80 fa 14             	cmp    dl,0x14
c001c5f5:	75 04                	jne    c001c5fb <IDE::detect()+0x2ad>
c001c5f7:	3c eb                	cmp    al,0xeb
c001c5f9:	eb 07                	jmp    c001c602 <IDE::detect()+0x2b4>
c001c5fb:	3c 96                	cmp    al,0x96
c001c5fd:	75 b8                	jne    c001c5b7 <IDE::detect()+0x269>
c001c5ff:	80 fa 69             	cmp    dl,0x69
c001c602:	75 b3                	jne    c001c5b7 <IDE::detect()+0x269>
c001c604:	68 a1 00 00 00       	push   0xa1
c001c609:	6a 07                	push   0x7
c001c60b:	56                   	push   esi
c001c60c:	53                   	push   ebx
c001c60d:	e8 0e f6 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c612:	5f                   	pop    edi
c001c613:	58                   	pop    eax
c001c614:	6a 00                	push   0x0
c001c616:	68 40 42 0f 00       	push   0xf4240
c001c61b:	e8 9d bc ff ff       	call   c00182bd <nanoSleep(unsigned long long)>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	b1 01                	mov    cl,0x1
c001c625:	e9 4a fe ff ff       	jmp    c001c474 <IDE::detect()+0x126>
c001c62a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c630:	5b                   	pop    ebx
c001c631:	5e                   	pop    esi
c001c632:	5f                   	pop    edi
c001c633:	5d                   	pop    ebp
c001c634:	c3                   	ret    
c001c635:	90                   	nop

c001c636 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c636:	55                   	push   ebp
c001c637:	57                   	push   edi
c001c638:	56                   	push   esi
c001c639:	53                   	push   ebx
c001c63a:	83 ec 1c             	sub    esp,0x1c
c001c63d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c641:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c645:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c649:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c64d:	88 c3                	mov    bl,al
c001c64f:	84 c0                	test   al,al
c001c651:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c655:	0f 84 67 01 00 00    	je     c001c7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c65b:	83 ec 0c             	sub    esp,0xc
c001c65e:	68 8f 26 02 c0       	push   0xc002268f
c001c663:	e8 cb 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c668:	83 c4 10             	add    esp,0x10
c001c66b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c66f:	3c 01                	cmp    al,0x1
c001c671:	75 17                	jne    c001c68a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c673:	83 ec 0c             	sub    esp,0xc
c001c676:	b3 13                	mov    bl,0x13
c001c678:	68 9b 26 02 c0       	push   0xc002269b
c001c67d:	e8 b1 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c682:	83 c4 10             	add    esp,0x10
c001c685:	e9 25 01 00 00       	jmp    c001c7af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c68a:	3c 02                	cmp    al,0x2
c001c68c:	0f 85 ef 00 00 00    	jne    c001c781 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c692:	d1 e6                	shl    esi,1
c001c694:	09 ee                	or     esi,ebp
c001c696:	52                   	push   edx
c001c697:	89 f0                	mov    eax,esi
c001c699:	6a 01                	push   0x1
c001c69b:	0f b6 f0             	movzx  esi,al
c001c69e:	c1 e6 06             	shl    esi,0x6
c001c6a1:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c6a9:	50                   	push   eax
c001c6aa:	57                   	push   edi
c001c6ab:	e8 30 f6 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c6b0:	83 c4 10             	add    esp,0x10
c001c6b3:	89 c6                	mov    esi,eax
c001c6b5:	a8 01                	test   al,0x1
c001c6b7:	74 12                	je     c001c6cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c6b9:	83 ec 0c             	sub    esp,0xc
c001c6bc:	b3 07                	mov    bl,0x7
c001c6be:	68 b0 26 02 c0       	push   0xc00226b0
c001c6c3:	e8 6b 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c6c8:	83 c4 10             	add    esp,0x10
c001c6cb:	f7 c6 02 00 00 00    	test   esi,0x2
c001c6d1:	74 12                	je     c001c6e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c6d3:	83 ec 0c             	sub    esp,0xc
c001c6d6:	b3 03                	mov    bl,0x3
c001c6d8:	68 ce 26 02 c0       	push   0xc00226ce
c001c6dd:	e8 51 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c6e2:	83 c4 10             	add    esp,0x10
c001c6e5:	f7 c6 04 00 00 00    	test   esi,0x4
c001c6eb:	74 12                	je     c001c6ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c6ed:	83 ec 0c             	sub    esp,0xc
c001c6f0:	b3 14                	mov    bl,0x14
c001c6f2:	68 ee 26 02 c0       	push   0xc00226ee
c001c6f7:	e8 37 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c6fc:	83 c4 10             	add    esp,0x10
c001c6ff:	f7 c6 08 00 00 00    	test   esi,0x8
c001c705:	74 12                	je     c001c719 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c707:	83 ec 0c             	sub    esp,0xc
c001c70a:	b3 03                	mov    bl,0x3
c001c70c:	68 ce 26 02 c0       	push   0xc00226ce
c001c711:	e8 1d 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c716:	83 c4 10             	add    esp,0x10
c001c719:	f7 c6 10 00 00 00    	test   esi,0x10
c001c71f:	74 12                	je     c001c733 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c721:	83 ec 0c             	sub    esp,0xc
c001c724:	b3 15                	mov    bl,0x15
c001c726:	68 06 27 02 c0       	push   0xc0022706
c001c72b:	e8 03 29 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c730:	83 c4 10             	add    esp,0x10
c001c733:	f7 c6 20 00 00 00    	test   esi,0x20
c001c739:	74 12                	je     c001c74d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c73b:	83 ec 0c             	sub    esp,0xc
c001c73e:	b3 03                	mov    bl,0x3
c001c740:	68 ce 26 02 c0       	push   0xc00226ce
c001c745:	e8 e9 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	f7 c6 40 00 00 00    	test   esi,0x40
c001c753:	74 12                	je     c001c767 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c755:	83 ec 0c             	sub    esp,0xc
c001c758:	b3 16                	mov    bl,0x16
c001c75a:	68 20 27 02 c0       	push   0xc0022720
c001c75f:	e8 cf 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c764:	83 c4 10             	add    esp,0x10
c001c767:	89 f0                	mov    eax,esi
c001c769:	84 c0                	test   al,al
c001c76b:	79 42                	jns    c001c7af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c76d:	83 ec 0c             	sub    esp,0xc
c001c770:	b3 0d                	mov    bl,0xd
c001c772:	68 41 27 02 c0       	push   0xc0022741
c001c777:	e8 b7 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	eb 2e                	jmp    c001c7af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c781:	3c 03                	cmp    al,0x3
c001c783:	75 14                	jne    c001c799 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c785:	83 ec 0c             	sub    esp,0xc
c001c788:	b3 17                	mov    bl,0x17
c001c78a:	68 55 27 02 c0       	push   0xc0022755
c001c78f:	e8 9f 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c794:	83 c4 10             	add    esp,0x10
c001c797:	eb 16                	jmp    c001c7af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c799:	3c 04                	cmp    al,0x4
c001c79b:	75 12                	jne    c001c7af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c79d:	83 ec 0c             	sub    esp,0xc
c001c7a0:	b3 08                	mov    bl,0x8
c001c7a2:	68 6b 27 02 c0       	push   0xc002276b
c001c7a7:	e8 87 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	50                   	push   eax
c001c7b0:	50                   	push   eax
c001c7b1:	0f b6 c3             	movzx  eax,bl
c001c7b4:	50                   	push   eax
c001c7b5:	68 83 27 02 c0       	push   0xc0022783
c001c7ba:	e8 74 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	83 c4 1c             	add    esp,0x1c
c001c7c5:	88 d8                	mov    al,bl
c001c7c7:	5b                   	pop    ebx
c001c7c8:	5e                   	pop    esi
c001c7c9:	5f                   	pop    edi
c001c7ca:	5d                   	pop    ebp
c001c7cb:	c3                   	ret    

c001c7cc <IDE::polling(unsigned char, unsigned int)>:
c001c7cc:	57                   	push   edi
c001c7cd:	56                   	push   esi
c001c7ce:	53                   	push   ebx
c001c7cf:	bb 04 00 00 00       	mov    ebx,0x4
c001c7d4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7d8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7dd:	52                   	push   edx
c001c7de:	6a 0c                	push   0xc
c001c7e0:	56                   	push   esi
c001c7e1:	57                   	push   edi
c001c7e2:	e8 f9 f4 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	4b                   	dec    ebx
c001c7eb:	75 f0                	jne    c001c7dd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c7ed:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7f2:	50                   	push   eax
c001c7f3:	6a 0c                	push   0xc
c001c7f5:	56                   	push   esi
c001c7f6:	57                   	push   edi
c001c7f7:	e8 e4 f4 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c7fc:	83 c4 10             	add    esp,0x10
c001c7ff:	a8 01                	test   al,0x1
c001c801:	74 12                	je     c001c815 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c803:	83 ec 0c             	sub    esp,0xc
c001c806:	68 9d 27 02 c0       	push   0xc002279d
c001c80b:	e8 23 28 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001c810:	83 c4 10             	add    esp,0x10
c001c813:	eb 17                	jmp    c001c82c <IDE::polling(unsigned char, unsigned int)+0x60>
c001c815:	a8 20                	test   al,0x20
c001c817:	75 0f                	jne    c001c828 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c819:	4b                   	dec    ebx
c001c81a:	74 10                	je     c001c82c <IDE::polling(unsigned char, unsigned int)+0x60>
c001c81c:	84 c0                	test   al,al
c001c81e:	78 d2                	js     c001c7f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c820:	a8 08                	test   al,0x8
c001c822:	74 ce                	je     c001c7f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c824:	31 c0                	xor    eax,eax
c001c826:	eb 06                	jmp    c001c82e <IDE::polling(unsigned char, unsigned int)+0x62>
c001c828:	b0 01                	mov    al,0x1
c001c82a:	eb 02                	jmp    c001c82e <IDE::polling(unsigned char, unsigned int)+0x62>
c001c82c:	b0 02                	mov    al,0x2
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	5f                   	pop    edi
c001c831:	c3                   	ret    

c001c832 <ATA::close(int, int, void*)>:
c001c832:	83 ec 0c             	sub    esp,0xc
c001c835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c839:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c83f:	85 c0                	test   eax,eax
c001c841:	74 0c                	je     c001c84f <ATA::close(int, int, void*)+0x1d>
c001c843:	83 ec 0c             	sub    esp,0xc
c001c846:	8b 10                	mov    edx,DWORD PTR [eax]
c001c848:	50                   	push   eax
c001c849:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c84c:	83 c4 10             	add    esp,0x10
c001c84f:	31 c0                	xor    eax,eax
c001c851:	83 c4 0c             	add    esp,0xc
c001c854:	c3                   	ret    
c001c855:	90                   	nop

c001c856 <ATA::powerSaving(PowerSavingLevel)>:
c001c856:	c3                   	ret    
c001c857:	90                   	nop

c001c858 <ATA::ATA()>:
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85f:	83 ec 04             	sub    esp,0x4
c001c862:	68 00 02 00 00       	push   0x200
c001c867:	68 e0 27 02 c0       	push   0xc00227e0
c001c86c:	50                   	push   eax
c001c86d:	e8 d2 3f ff ff       	call   c0010844 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c001c87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87e:	89 10                	mov    DWORD PTR [eax],edx
c001c880:	90                   	nop
c001c881:	83 c4 0c             	add    esp,0xc
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <ATA::flush(bool)>:
c001c886:	53                   	push   ebx
c001c887:	83 ec 08             	sub    esp,0x8
c001c88a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c88f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c893:	19 c0                	sbb    eax,eax
c001c895:	83 e0 fd             	and    eax,0xfffffffd
c001c898:	05 ea 00 00 00       	add    eax,0xea
c001c89d:	50                   	push   eax
c001c89e:	6a 07                	push   0x7
c001c8a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a7:	50                   	push   eax
c001c8a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ae:	e8 6d f3 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b3:	83 c4 0c             	add    esp,0xc
c001c8b6:	6a 00                	push   0x0
c001c8b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8bf:	50                   	push   eax
c001c8c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8c6:	e8 01 ff ff ff       	call   c001c7cc <IDE::polling(unsigned char, unsigned int)>
c001c8cb:	83 c4 18             	add    esp,0x18
c001c8ce:	5b                   	pop    ebx
c001c8cf:	c3                   	ret    

c001c8d0 <ATA::readyForCommand()>:
c001c8d0:	56                   	push   esi
c001c8d1:	53                   	push   ebx
c001c8d2:	31 db                	xor    ebx,ebx
c001c8d4:	50                   	push   eax
c001c8d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8d9:	50                   	push   eax
c001c8da:	6a 0c                	push   0xc
c001c8dc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8e3:	50                   	push   eax
c001c8e4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8ea:	e8 f1 f3 ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	a8 88                	test   al,0x88
c001c8f4:	74 23                	je     c001c919 <ATA::readyForCommand()+0x49>
c001c8f6:	43                   	inc    ebx
c001c8f7:	83 fb 63             	cmp    ebx,0x63
c001c8fa:	7e dd                	jle    c001c8d9 <ATA::readyForCommand()+0x9>
c001c8fc:	51                   	push   ecx
c001c8fd:	51                   	push   ecx
c001c8fe:	6a 00                	push   0x0
c001c900:	68 40 42 0f 00       	push   0xf4240
c001c905:	e8 b3 b9 ff ff       	call   c00182bd <nanoSleep(unsigned long long)>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c913:	75 c4                	jne    c001c8d9 <ATA::readyForCommand()+0x9>
c001c915:	31 c0                	xor    eax,eax
c001c917:	eb 02                	jmp    c001c91b <ATA::readyForCommand()+0x4b>
c001c919:	b0 01                	mov    al,0x1
c001c91b:	5a                   	pop    edx
c001c91c:	5b                   	pop    ebx
c001c91d:	5e                   	pop    esi
c001c91e:	c3                   	ret    
c001c91f:	90                   	nop

c001c920 <ATA::access(unsigned long long, int, void*, bool)>:
c001c920:	55                   	push   ebp
c001c921:	57                   	push   edi
c001c922:	56                   	push   esi
c001c923:	53                   	push   ebx
c001c924:	83 ec 2c             	sub    esp,0x2c
c001c927:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c92b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c92f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c933:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c937:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c93b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c93f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c943:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c94d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c953:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c957:	c1 e0 06             	shl    eax,0x6
c001c95a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c962:	74 5d                	je     c001c9c1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c964:	89 fa                	mov    edx,edi
c001c966:	89 f0                	mov    eax,esi
c001c968:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c96c:	c1 ea 1c             	shr    edx,0x1c
c001c96f:	89 d1                	mov    ecx,edx
c001c971:	09 c1                	or     ecx,eax
c001c973:	74 25                	je     c001c99a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c975:	31 ed                	xor    ebp,ebp
c001c977:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c97e:	89 fa                	mov    edx,edi
c001c980:	89 f0                	mov    eax,esi
c001c982:	0f ad d0             	shrd   eax,edx,cl
c001c985:	d3 ea                	shr    edx,cl
c001c987:	f6 c1 20             	test   cl,0x20
c001c98a:	74 02                	je     c001c98e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c98c:	89 d0                	mov    eax,edx
c001c98e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c992:	45                   	inc    ebp
c001c993:	83 fd 06             	cmp    ebp,0x6
c001c996:	75 df                	jne    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c998:	eb 76                	jmp    c001ca10 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c99a:	89 f0                	mov    eax,esi
c001c99c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c9a1:	89 fa                	mov    edx,edi
c001c9a3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9aa:	0f ac d0 10          	shrd   eax,edx,0x10
c001c9ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9b3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c9b7:	c1 ee 18             	shr    esi,0x18
c001c9ba:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c9bf:	eb 56                	jmp    c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9c1:	6a 00                	push   0x0
c001c9c3:	6a 3f                	push   0x3f
c001c9c5:	57                   	push   edi
c001c9c6:	56                   	push   esi
c001c9c7:	e8 e0 1e 00 00       	call   c001e8ac <__umoddi3>
c001c9cc:	83 c4 10             	add    esp,0x10
c001c9cf:	40                   	inc    eax
c001c9d0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c9d4:	6a 00                	push   0x0
c001c9d6:	68 f0 03 00 00       	push   0x3f0
c001c9db:	57                   	push   edi
c001c9dc:	56                   	push   esi
c001c9dd:	e8 ca 1d 00 00       	call   c001e7ac <__udivdi3>
c001c9e2:	83 c4 10             	add    esp,0x10
c001c9e5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c9ea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9f1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9f6:	6a 00                	push   0x0
c001c9f8:	6a 3f                	push   0x3f
c001c9fa:	57                   	push   edi
c001c9fb:	56                   	push   esi
c001c9fc:	e8 ab 1d 00 00       	call   c001e7ac <__udivdi3>
c001ca01:	83 c4 10             	add    esp,0x10
c001ca04:	89 c6                	mov    esi,eax
c001ca06:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ca0b:	83 e6 0f             	and    esi,0xf
c001ca0e:	eb 07                	jmp    c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ca10:	31 f6                	xor    esi,esi
c001ca12:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ca17:	bf 01 00 00 00       	mov    edi,0x1
c001ca1c:	50                   	push   eax
c001ca1d:	6a 00                	push   0x0
c001ca1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca26:	50                   	push   eax
c001ca27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca2b:	e8 fc f3 ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001ca30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca33:	e8 98 fe ff ff       	call   c001c8d0 <ATA::readyForCommand()>
c001ca38:	83 c4 10             	add    esp,0x10
c001ca3b:	84 c0                	test   al,al
c001ca3d:	0f 84 50 02 00 00    	je     c001cc93 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001ca43:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca49:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca4f:	c1 e0 04             	shl    eax,0x4
c001ca52:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca59:	09 c6                	or     esi,eax
c001ca5b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ca60:	75 05                	jne    c001ca67 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca62:	83 ce a0             	or     esi,0xffffffa0
c001ca65:	eb 03                	jmp    c001ca6a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca67:	83 ce e0             	or     esi,0xffffffe0
c001ca6a:	89 f0                	mov    eax,esi
c001ca6c:	0f b6 f0             	movzx  esi,al
c001ca6f:	56                   	push   esi
c001ca70:	6a 06                	push   0x6
c001ca72:	51                   	push   ecx
c001ca73:	52                   	push   edx
c001ca74:	e8 a7 f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	6a 00                	push   0x0
c001ca7e:	6a 01                	push   0x1
c001ca80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca87:	50                   	push   eax
c001ca88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca8e:	e8 8d f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca9b:	75 6e                	jne    c001cb0b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca9d:	6a 00                	push   0x0
c001ca9f:	6a 08                	push   0x8
c001caa1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caa8:	50                   	push   eax
c001caa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caaf:	e8 6c f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cab9:	50                   	push   eax
c001caba:	6a 09                	push   0x9
c001cabc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac3:	50                   	push   eax
c001cac4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caca:	e8 51 f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cacf:	83 c4 20             	add    esp,0x20
c001cad2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cad7:	50                   	push   eax
c001cad8:	6a 0a                	push   0xa
c001cada:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae1:	50                   	push   eax
c001cae2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cae8:	e8 33 f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caed:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001caf2:	50                   	push   eax
c001caf3:	6a 0b                	push   0xb
c001caf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cafc:	50                   	push   eax
c001cafd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb03:	e8 18 f1 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb08:	83 c4 20             	add    esp,0x20
c001cb0b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cb10:	50                   	push   eax
c001cb11:	6a 02                	push   0x2
c001cb13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1a:	50                   	push   eax
c001cb1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb21:	e8 fa f0 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb26:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb2b:	50                   	push   eax
c001cb2c:	6a 03                	push   0x3
c001cb2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb35:	50                   	push   eax
c001cb36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3c:	e8 df f0 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb41:	83 c4 20             	add    esp,0x20
c001cb44:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb49:	50                   	push   eax
c001cb4a:	6a 04                	push   0x4
c001cb4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb53:	50                   	push   eax
c001cb54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb5a:	e8 c1 f0 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb64:	50                   	push   eax
c001cb65:	6a 05                	push   0x5
c001cb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb6e:	50                   	push   eax
c001cb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb75:	e8 a6 f0 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb7a:	83 c4 20             	add    esp,0x20
c001cb7d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb82:	0f 94 c0             	sete   al
c001cb85:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb8a:	74 09                	je     c001cb95 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb8c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb93:	eb 07                	jmp    c001cb9c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb95:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb9c:	0f b6 c0             	movzx  eax,al
c001cb9f:	50                   	push   eax
c001cba0:	6a 07                	push   0x7
c001cba2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cba9:	50                   	push   eax
c001cbaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbb0:	e8 6b f0 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbb5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cbb9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	85 f6                	test   esi,esi
c001cbc2:	0f 84 ac 00 00 00    	je     c001cc74 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cbc8:	50                   	push   eax
c001cbc9:	6a 01                	push   0x1
c001cbcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbd2:	50                   	push   eax
c001cbd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd9:	e8 ee fb ff ff       	call   c001c7cc <IDE::polling(unsigned char, unsigned int)>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbe7:	84 c0                	test   al,al
c001cbe9:	74 20                	je     c001cc0b <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cbeb:	0f b6 f8             	movzx  edi,al
c001cbee:	0f b6 d2             	movzx  edx,dl
c001cbf1:	57                   	push   edi
c001cbf2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cbf9:	50                   	push   eax
c001cbfa:	52                   	push   edx
c001cbfb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc01:	e8 30 fa ff ff       	call   c001c636 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc06:	e9 85 00 00 00       	jmp    c001cc90 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cc0b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cc10:	74 41                	je     c001cc53 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cc12:	31 c9                	xor    ecx,ecx
c001cc14:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cc18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cc1c:	50                   	push   eax
c001cc1d:	50                   	push   eax
c001cc1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc25:	50                   	push   eax
c001cc26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc2c:	e8 dd ef ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001cc31:	89 c2                	mov    edx,eax
c001cc33:	89 e8                	mov    eax,ebp
c001cc35:	66 ef                	out    dx,ax
c001cc37:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cc3b:	83 c4 10             	add    esp,0x10
c001cc3e:	41                   	inc    ecx
c001cc3f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cc45:	75 cd                	jne    c001cc14 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cc47:	4e                   	dec    esi
c001cc48:	81 c7 00 02 00 00    	add    edi,0x200
c001cc4e:	e9 6d ff ff ff       	jmp    c001cbc0 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cc53:	0f b6 d2             	movzx  edx,dl
c001cc56:	51                   	push   ecx
c001cc57:	51                   	push   ecx
c001cc58:	52                   	push   edx
c001cc59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc5f:	e8 aa ef ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001cc64:	b9 00 01 00 00       	mov    ecx,0x100
c001cc69:	89 c2                	mov    edx,eax
c001cc6b:	fc                   	cld    
c001cc6c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	eb d3                	jmp    c001cc47 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc74:	31 ff                	xor    edi,edi
c001cc76:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc7b:	74 16                	je     c001cc93 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc7d:	50                   	push   eax
c001cc7e:	50                   	push   eax
c001cc7f:	31 c0                	xor    eax,eax
c001cc81:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc86:	0f 94 c0             	sete   al
c001cc89:	50                   	push   eax
c001cc8a:	53                   	push   ebx
c001cc8b:	e8 f6 fb ff ff       	call   c001c886 <ATA::flush(bool)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	83 c4 2c             	add    esp,0x2c
c001cc96:	89 f8                	mov    eax,edi
c001cc98:	5b                   	pop    ebx
c001cc99:	5e                   	pop    esi
c001cc9a:	5f                   	pop    edi
c001cc9b:	5d                   	pop    ebp
c001cc9c:	c3                   	ret    
c001cc9d:	90                   	nop

c001cc9e <ATA::read(unsigned long long, int, void*)>:
c001cc9e:	57                   	push   edi
c001cc9f:	b8 04 00 00 00       	mov    eax,0x4
c001cca4:	56                   	push   esi
c001cca5:	53                   	push   ebx
c001cca6:	83 ec 10             	sub    esp,0x10
c001cca9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccb1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001ccb4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccbc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001ccc2:	77 3b                	ja     c001ccff <ATA::read(unsigned long long, int, void*)+0x61>
c001ccc4:	b8 06 00 00 00       	mov    eax,0x6
c001ccc9:	85 d2                	test   edx,edx
c001cccb:	74 32                	je     c001ccff <ATA::read(unsigned long long, int, void*)+0x61>
c001cccd:	50                   	push   eax
c001ccce:	50                   	push   eax
c001cccf:	6a 00                	push   0x0
c001ccd1:	52                   	push   edx
c001ccd2:	53                   	push   ebx
c001ccd3:	57                   	push   edi
c001ccd4:	56                   	push   esi
c001ccd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccd9:	e8 42 fc ff ff       	call   c001c920 <ATA::access(unsigned long long, int, void*, bool)>
c001ccde:	83 c4 20             	add    esp,0x20
c001cce1:	85 c0                	test   eax,eax
c001cce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cce7:	75 11                	jne    c001ccfa <ATA::read(unsigned long long, int, void*)+0x5c>
c001cce9:	01 1d 64 55 02 c0    	add    DWORD PTR ds:0xc0025564,ebx
c001ccef:	e8 b8 fe fe ff       	call   c000cbac <VgaText::updateDiskUsage()>
c001ccf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccf8:	eb 05                	jmp    c001ccff <ATA::read(unsigned long long, int, void*)+0x61>
c001ccfa:	b8 01 00 00 00       	mov    eax,0x1
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	5b                   	pop    ebx
c001cd03:	5e                   	pop    esi
c001cd04:	5f                   	pop    edi
c001cd05:	c3                   	ret    

c001cd06 <ATA::write(unsigned long long, int, void*)>:
c001cd06:	57                   	push   edi
c001cd07:	b8 04 00 00 00       	mov    eax,0x4
c001cd0c:	56                   	push   esi
c001cd0d:	53                   	push   ebx
c001cd0e:	83 ec 10             	sub    esp,0x10
c001cd11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cd19:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cd1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd24:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cd2a:	77 3b                	ja     c001cd67 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd2c:	b8 06 00 00 00       	mov    eax,0x6
c001cd31:	85 d2                	test   edx,edx
c001cd33:	74 32                	je     c001cd67 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd35:	50                   	push   eax
c001cd36:	50                   	push   eax
c001cd37:	6a 01                	push   0x1
c001cd39:	52                   	push   edx
c001cd3a:	53                   	push   ebx
c001cd3b:	57                   	push   edi
c001cd3c:	56                   	push   esi
c001cd3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd41:	e8 da fb ff ff       	call   c001c920 <ATA::access(unsigned long long, int, void*, bool)>
c001cd46:	83 c4 20             	add    esp,0x20
c001cd49:	85 c0                	test   eax,eax
c001cd4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd4f:	75 11                	jne    c001cd62 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cd51:	01 1d 60 55 02 c0    	add    DWORD PTR ds:0xc0025560,ebx
c001cd57:	e8 50 fe fe ff       	call   c000cbac <VgaText::updateDiskUsage()>
c001cd5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd60:	eb 05                	jmp    c001cd67 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd62:	b8 01 00 00 00       	mov    eax,0x1
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	5b                   	pop    ebx
c001cd6b:	5e                   	pop    esi
c001cd6c:	5f                   	pop    edi
c001cd6d:	c3                   	ret    

c001cd6e <ATA::detectCHS()>:
c001cd6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd72:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd78:	c1 e0 06             	shl    eax,0x6
c001cd7b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd81:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd8b:	c7 44 24 04 ef 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc00227ef
c001cd93:	e9 30 7f ff ff       	jmp    c0014cc8 <Krnl::panic(char const*)>

c001cd98 <ATA::open(int, int, void*)>:
c001cd98:	53                   	push   ebx
c001cd99:	83 ec 08             	sub    esp,0x8
c001cd9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cda0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cda8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cdae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cdb4:	c1 e0 06             	shl    eax,0x6
c001cdb7:	01 d0                	add    eax,edx
c001cdb9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cdc0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cdc6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cdcd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdd7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cddd:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cde4:	75 0c                	jne    c001cdf2 <ATA::open(int, int, void*)+0x5a>
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	53                   	push   ebx
c001cdea:	e8 7f ff ff ff       	call   c001cd6e <ATA::detectCHS()>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdf8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdfe:	c1 e0 06             	shl    eax,0x6
c001ce01:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ce08:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce12:	d1 e8                	shr    eax,1
c001ce14:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ce1a:	6a 04                	push   0x4
c001ce1c:	6a 0c                	push   0xc
c001ce1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce25:	50                   	push   eax
c001ce26:	52                   	push   edx
c001ce27:	e8 f4 ed ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce2c:	90                   	nop
c001ce2d:	90                   	nop
c001ce2e:	6a 00                	push   0x0
c001ce30:	6a 0c                	push   0xc
c001ce32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce39:	50                   	push   eax
c001ce3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce40:	e8 db ed ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce45:	83 c4 14             	add    esp,0x14
c001ce48:	53                   	push   ebx
c001ce49:	e8 5e 3a ff ff       	call   c00108ac <PhysicalDisk::startCache()>
c001ce4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce51:	e8 64 53 ff ff       	call   c00121ba <createPartitionsForDisk(PhysicalDisk*)>
c001ce56:	31 c0                	xor    eax,eax
c001ce58:	83 c4 18             	add    esp,0x18
c001ce5b:	5b                   	pop    ebx
c001ce5c:	c3                   	ret    
c001ce5d:	90                   	nop

c001ce5e <ATAPI::write(unsigned long long, int, void*)>:
c001ce5e:	b8 03 00 00 00       	mov    eax,0x3
c001ce63:	c3                   	ret    

c001ce64 <ATAPI::close(int, int, void*)>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce71:	85 c0                	test   eax,eax
c001ce73:	74 0c                	je     c001ce81 <ATAPI::close(int, int, void*)+0x1d>
c001ce75:	83 ec 0c             	sub    esp,0xc
c001ce78:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce7a:	50                   	push   eax
c001ce7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	31 c0                	xor    eax,eax
c001ce83:	83 c4 0c             	add    esp,0xc
c001ce86:	c3                   	ret    
c001ce87:	90                   	nop

c001ce88 <ATAPI::ATAPI()>:
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8f:	83 ec 04             	sub    esp,0x4
c001ce92:	68 00 08 00 00       	push   0x800
c001ce97:	68 38 28 02 c0       	push   0xc0022838
c001ce9c:	50                   	push   eax
c001ce9d:	e8 a2 39 ff ff       	call   c0010844 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cea2:	83 c4 10             	add    esp,0x10
c001cea5:	ba 78 28 02 c0       	mov    edx,0xc0022878
c001ceaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceae:	89 10                	mov    DWORD PTR [eax],edx
c001ceb0:	90                   	nop
c001ceb1:	83 c4 0c             	add    esp,0xc
c001ceb4:	c3                   	ret    
c001ceb5:	90                   	nop

c001ceb6 <ATAPI::readyForCommand()>:
c001ceb6:	56                   	push   esi
c001ceb7:	53                   	push   ebx
c001ceb8:	31 db                	xor    ebx,ebx
c001ceba:	50                   	push   eax
c001cebb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cebf:	50                   	push   eax
c001cec0:	6a 0c                	push   0xc
c001cec2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cec9:	50                   	push   eax
c001ceca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ced0:	e8 0b ee ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001ced5:	83 c4 10             	add    esp,0x10
c001ced8:	a8 88                	test   al,0x88
c001ceda:	74 23                	je     c001ceff <ATAPI::readyForCommand()+0x49>
c001cedc:	43                   	inc    ebx
c001cedd:	83 fb 63             	cmp    ebx,0x63
c001cee0:	7e dd                	jle    c001cebf <ATAPI::readyForCommand()+0x9>
c001cee2:	51                   	push   ecx
c001cee3:	51                   	push   ecx
c001cee4:	6a 00                	push   0x0
c001cee6:	68 40 42 0f 00       	push   0xf4240
c001ceeb:	e8 cd b3 ff ff       	call   c00182bd <nanoSleep(unsigned long long)>
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cef9:	75 c4                	jne    c001cebf <ATAPI::readyForCommand()+0x9>
c001cefb:	31 c0                	xor    eax,eax
c001cefd:	eb 02                	jmp    c001cf01 <ATAPI::readyForCommand()+0x4b>
c001ceff:	b0 01                	mov    al,0x1
c001cf01:	5a                   	pop    edx
c001cf02:	5b                   	pop    ebx
c001cf03:	5e                   	pop    esi
c001cf04:	c3                   	ret    
c001cf05:	90                   	nop

c001cf06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cf06:	55                   	push   ebp
c001cf07:	57                   	push   edi
c001cf08:	56                   	push   esi
c001cf09:	53                   	push   ebx
c001cf0a:	83 ec 20             	sub    esp,0x20
c001cf0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cf11:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf15:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cf19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cf1d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cf21:	6a 01                	push   0x1
c001cf23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf31:	e8 f6 ee ff ff       	call   c001be2c <IDE::enableIRQs(unsigned char, bool)>
c001cf36:	5e                   	pop    esi
c001cf37:	58                   	pop    eax
c001cf38:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf3f:	50                   	push   eax
c001cf40:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf46:	e8 af ec ff ff       	call   c001bbfa <IDE::prepareInterrupt(unsigned char)>
c001cf4b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf4e:	e8 63 ff ff ff       	call   c001ceb6 <ATAPI::readyForCommand()>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	84 c0                	test   al,al
c001cf58:	75 0a                	jne    c001cf64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cf5a:	bb 01 00 00 00       	mov    ebx,0x1
c001cf5f:	e9 57 02 00 00       	jmp    c001d1bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf64:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cf6a:	c1 e0 04             	shl    eax,0x4
c001cf6d:	0f b6 c0             	movzx  eax,al
c001cf70:	50                   	push   eax
c001cf71:	6a 06                	push   0x6
c001cf73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf7a:	50                   	push   eax
c001cf7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf81:	e8 9a ec ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf86:	6a 00                	push   0x0
c001cf88:	6a 01                	push   0x1
c001cf8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf91:	50                   	push   eax
c001cf92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf98:	e8 83 ec ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf9d:	83 c4 20             	add    esp,0x20
c001cfa0:	0f b6 c3             	movzx  eax,bl
c001cfa3:	0f b6 df             	movzx  ebx,bh
c001cfa6:	50                   	push   eax
c001cfa7:	6a 04                	push   0x4
c001cfa9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfb0:	50                   	push   eax
c001cfb1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfb7:	e8 64 ec ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfbc:	53                   	push   ebx
c001cfbd:	6a 05                	push   0x5
c001cfbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfc6:	50                   	push   eax
c001cfc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfcd:	e8 4e ec ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd2:	83 c4 20             	add    esp,0x20
c001cfd5:	68 a0 00 00 00       	push   0xa0
c001cfda:	6a 07                	push   0x7
c001cfdc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfe3:	50                   	push   eax
c001cfe4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfea:	e8 31 ec ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfef:	83 c4 0c             	add    esp,0xc
c001cff2:	6a 01                	push   0x1
c001cff4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cffb:	50                   	push   eax
c001cffc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d002:	e8 c5 f7 ff ff       	call   c001c7cc <IDE::polling(unsigned char, unsigned int)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d010:	84 c0                	test   al,al
c001d012:	74 23                	je     c001d037 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d014:	0f b6 d8             	movzx  ebx,al
c001d017:	0f b6 d2             	movzx  edx,dl
c001d01a:	53                   	push   ebx
c001d01b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d022:	50                   	push   eax
c001d023:	52                   	push   edx
c001d024:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d02a:	e8 07 f6 ff ff       	call   c001c636 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d02f:	83 c4 10             	add    esp,0x10
c001d032:	e9 84 01 00 00       	jmp    c001d1bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d037:	0f b6 d2             	movzx  edx,dl
c001d03a:	53                   	push   ebx
c001d03b:	53                   	push   ebx
c001d03c:	52                   	push   edx
c001d03d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d043:	e8 c6 eb ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001d048:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d04c:	b9 06 00 00 00       	mov    ecx,0x6
c001d051:	89 c2                	mov    edx,eax
c001d053:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d056:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d063:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d06a:	85 db                	test   ebx,ebx
c001d06c:	0f 84 ec 00 00 00    	je     c001d15e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d072:	51                   	push   ecx
c001d073:	51                   	push   ecx
c001d074:	52                   	push   edx
c001d075:	50                   	push   eax
c001d076:	e8 13 ed ff ff       	call   c001bd8e <IDE::waitInterrupt(unsigned char)>
c001d07b:	83 c4 10             	add    esp,0x10
c001d07e:	84 c0                	test   al,al
c001d080:	0f 84 d4 fe ff ff    	je     c001cf5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d086:	56                   	push   esi
c001d087:	56                   	push   esi
c001d088:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d08f:	50                   	push   eax
c001d090:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d096:	e8 5f eb ff ff       	call   c001bbfa <IDE::prepareInterrupt(unsigned char)>
c001d09b:	83 c4 0c             	add    esp,0xc
c001d09e:	6a 04                	push   0x4
c001d0a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a7:	50                   	push   eax
c001d0a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0ae:	e8 2d ec ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001d0b3:	83 c4 0c             	add    esp,0xc
c001d0b6:	89 c6                	mov    esi,eax
c001d0b8:	6a 05                	push   0x5
c001d0ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0c1:	50                   	push   eax
c001d0c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0c8:	e8 13 ec ff ff       	call   c001bce0 <IDE::read(unsigned char, unsigned char)>
c001d0cd:	89 f1                	mov    ecx,esi
c001d0cf:	0f b6 c0             	movzx  eax,al
c001d0d2:	0f b6 f1             	movzx  esi,cl
c001d0d5:	c1 e0 08             	shl    eax,0x8
c001d0d8:	09 c6                	or     esi,eax
c001d0da:	d1 fe                	sar    esi,1
c001d0dc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d0e0:	83 c4 10             	add    esp,0x10
c001d0e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d0e8:	74 41                	je     c001d12b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d0ea:	31 c9                	xor    ecx,ecx
c001d0ec:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0f2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0f9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d0fd:	75 0a                	jne    c001d109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d0ff:	01 c9                	add    ecx,ecx
c001d101:	01 cd                	add    ebp,ecx
c001d103:	4b                   	dec    ebx
c001d104:	e9 54 ff ff ff       	jmp    c001d05d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d109:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d10e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d112:	51                   	push   ecx
c001d113:	51                   	push   ecx
c001d114:	52                   	push   edx
c001d115:	50                   	push   eax
c001d116:	e8 f3 ea ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001d11b:	89 c2                	mov    edx,eax
c001d11d:	89 f0                	mov    eax,esi
c001d11f:	66 ef                	out    dx,ax
c001d121:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d125:	83 c4 10             	add    esp,0x10
c001d128:	41                   	inc    ecx
c001d129:	eb c1                	jmp    c001d0ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d12b:	31 f6                	xor    esi,esi
c001d12d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d133:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d13a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d13e:	75 06                	jne    c001d146 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d140:	01 f6                	add    esi,esi
c001d142:	01 f5                	add    ebp,esi
c001d144:	eb bd                	jmp    c001d103 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d146:	51                   	push   ecx
c001d147:	51                   	push   ecx
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	e8 bf ea ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001d14f:	89 c2                	mov    edx,eax
c001d151:	66 ed                	in     ax,dx
c001d153:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d158:	83 c4 10             	add    esp,0x10
c001d15b:	46                   	inc    esi
c001d15c:	eb cf                	jmp    c001d12d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d15e:	51                   	push   ecx
c001d15f:	51                   	push   ecx
c001d160:	52                   	push   edx
c001d161:	50                   	push   eax
c001d162:	e8 27 ec ff ff       	call   c001bd8e <IDE::waitInterrupt(unsigned char)>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	84 c0                	test   al,al
c001d16c:	0f 84 e8 fd ff ff    	je     c001cf5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d172:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d177:	52                   	push   edx
c001d178:	52                   	push   edx
c001d179:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d180:	50                   	push   eax
c001d181:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d187:	e8 6e ea ff ff       	call   c001bbfa <IDE::prepareInterrupt(unsigned char)>
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	50                   	push   eax
c001d190:	50                   	push   eax
c001d191:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d198:	50                   	push   eax
c001d199:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d19f:	e8 6a ea ff ff       	call   c001bc0e <IDE::getBase(unsigned char)>
c001d1a4:	8d 50 07             	lea    edx,[eax+0x7]
c001d1a7:	ec                   	in     al,dx
c001d1a8:	83 c4 10             	add    esp,0x10
c001d1ab:	a8 88                	test   al,0x88
c001d1ad:	74 0a                	je     c001d1b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d1af:	4b                   	dec    ebx
c001d1b0:	75 dd                	jne    c001d18f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d1b2:	bb 02 00 00 00       	mov    ebx,0x2
c001d1b7:	eb 02                	jmp    c001d1bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1b9:	31 db                	xor    ebx,ebx
c001d1bb:	83 c4 1c             	add    esp,0x1c
c001d1be:	89 d8                	mov    eax,ebx
c001d1c0:	5b                   	pop    ebx
c001d1c1:	5e                   	pop    esi
c001d1c2:	5f                   	pop    edi
c001d1c3:	5d                   	pop    ebp
c001d1c4:	c3                   	ret    
c001d1c5:	90                   	nop

c001d1c6 <ATAPI::diskRemoved()>:
c001d1c6:	83 ec 18             	sub    esp,0x18
c001d1c9:	68 43 28 02 c0       	push   0xc0022843
c001d1ce:	e8 60 1e ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001d1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d1de:	83 c4 1c             	add    esp,0x1c
c001d1e1:	c3                   	ret    

c001d1e2 <ATAPI::eject()>:
c001d1e2:	57                   	push   edi
c001d1e3:	b9 03 00 00 00       	mov    ecx,0x3
c001d1e8:	53                   	push   ebx
c001d1e9:	83 ec 14             	sub    esp,0x14
c001d1ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d1f4:	fc                   	cld    
c001d1f5:	31 c0                	xor    eax,eax
c001d1f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d1fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d203:	50                   	push   eax
c001d204:	50                   	push   eax
c001d205:	6a 00                	push   0x0
c001d207:	6a 00                	push   0x0
c001d209:	6a 00                	push   0x0
c001d20b:	6a 02                	push   0x2
c001d20d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d211:	50                   	push   eax
c001d212:	53                   	push   ebx
c001d213:	e8 ee fc ff ff       	call   c001cf06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d218:	83 c4 14             	add    esp,0x14
c001d21b:	53                   	push   ebx
c001d21c:	e8 a5 ff ff ff       	call   c001d1c6 <ATAPI::diskRemoved()>
c001d221:	83 c4 24             	add    esp,0x24
c001d224:	5b                   	pop    ebx
c001d225:	5f                   	pop    edi
c001d226:	c3                   	ret    
c001d227:	90                   	nop

c001d228 <ATAPI::diskInserted()>:
c001d228:	53                   	push   ebx
c001d229:	83 ec 14             	sub    esp,0x14
c001d22c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d230:	68 59 28 02 c0       	push   0xc0022859
c001d235:	e8 f9 1d ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001d23a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d241:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d244:	e8 63 36 ff ff       	call   c00108ac <PhysicalDisk::startCache()>
c001d249:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d24d:	83 c4 18             	add    esp,0x18
c001d250:	5b                   	pop    ebx
c001d251:	e9 64 4f ff ff       	jmp    c00121ba <createPartitionsForDisk(PhysicalDisk*)>

c001d256 <ATAPI::detectMedia()>:
c001d256:	56                   	push   esi
c001d257:	53                   	push   ebx
c001d258:	83 ec 28             	sub    esp,0x28
c001d25b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d25f:	6a 0c                	push   0xc
c001d261:	6a 00                	push   0x0
c001d263:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d267:	56                   	push   esi
c001d268:	e8 9b 33 fe ff       	call   c0000608 <memset>
c001d26d:	58                   	pop    eax
c001d26e:	5a                   	pop    edx
c001d26f:	6a 00                	push   0x0
c001d271:	6a 00                	push   0x0
c001d273:	6a 00                	push   0x0
c001d275:	6a 00                	push   0x0
c001d277:	56                   	push   esi
c001d278:	53                   	push   ebx
c001d279:	e8 88 fc ff ff       	call   c001cf06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d27e:	83 c4 1c             	add    esp,0x1c
c001d281:	6a 0c                	push   0xc
c001d283:	6a 00                	push   0x0
c001d285:	56                   	push   esi
c001d286:	e8 7d 33 fe ff       	call   c0000608 <memset>
c001d28b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d290:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d295:	59                   	pop    ecx
c001d296:	58                   	pop    eax
c001d297:	6a 01                	push   0x1
c001d299:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d29d:	50                   	push   eax
c001d29e:	6a 00                	push   0x0
c001d2a0:	6a 12                	push   0x12
c001d2a2:	56                   	push   esi
c001d2a3:	53                   	push   ebx
c001d2a4:	e8 5d fc ff ff       	call   c001cf06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d2a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d2ad:	83 c4 20             	add    esp,0x20
c001d2b0:	83 e0 7f             	and    eax,0x7f
c001d2b3:	3c 70                	cmp    al,0x70
c001d2b5:	74 15                	je     c001d2cc <ATAPI::detectMedia()+0x76>
c001d2b7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2be:	75 0c                	jne    c001d2cc <ATAPI::detectMedia()+0x76>
c001d2c0:	83 ec 0c             	sub    esp,0xc
c001d2c3:	53                   	push   ebx
c001d2c4:	e8 5f ff ff ff       	call   c001d228 <ATAPI::diskInserted()>
c001d2c9:	83 c4 10             	add    esp,0x10
c001d2cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d2d0:	83 e0 0f             	and    eax,0xf
c001d2d3:	3c 02                	cmp    al,0x2
c001d2d5:	75 1b                	jne    c001d2f2 <ATAPI::detectMedia()+0x9c>
c001d2d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d2dc:	75 2d                	jne    c001d30b <ATAPI::detectMedia()+0xb5>
c001d2de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2e5:	74 24                	je     c001d30b <ATAPI::detectMedia()+0xb5>
c001d2e7:	83 ec 0c             	sub    esp,0xc
c001d2ea:	53                   	push   ebx
c001d2eb:	e8 d6 fe ff ff       	call   c001d1c6 <ATAPI::diskRemoved()>
c001d2f0:	eb 16                	jmp    c001d308 <ATAPI::detectMedia()+0xb2>
c001d2f2:	84 c0                	test   al,al
c001d2f4:	75 15                	jne    c001d30b <ATAPI::detectMedia()+0xb5>
c001d2f6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2fd:	75 0c                	jne    c001d30b <ATAPI::detectMedia()+0xb5>
c001d2ff:	83 ec 0c             	sub    esp,0xc
c001d302:	53                   	push   ebx
c001d303:	e8 20 ff ff ff       	call   c001d228 <ATAPI::diskInserted()>
c001d308:	83 c4 10             	add    esp,0x10
c001d30b:	83 c4 24             	add    esp,0x24
c001d30e:	5b                   	pop    ebx
c001d30f:	5e                   	pop    esi
c001d310:	c3                   	ret    
c001d311:	90                   	nop

c001d312 <ATAPI::open(int, int, void*)>:
c001d312:	53                   	push   ebx
c001d313:	83 ec 08             	sub    esp,0x8
c001d316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d31a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d31e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d322:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d328:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d32e:	c1 e0 06             	shl    eax,0x6
c001d331:	01 d0                	add    eax,edx
c001d333:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d33a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d340:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d347:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d351:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d357:	6a 04                	push   0x4
c001d359:	6a 0c                	push   0xc
c001d35b:	51                   	push   ecx
c001d35c:	52                   	push   edx
c001d35d:	e8 be e8 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d362:	90                   	nop
c001d363:	90                   	nop
c001d364:	6a 00                	push   0x0
c001d366:	6a 0c                	push   0xc
c001d368:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d36f:	50                   	push   eax
c001d370:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d376:	e8 a5 e8 ff ff       	call   c001bc20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d37b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d382:	83 c4 14             	add    esp,0x14
c001d385:	53                   	push   ebx
c001d386:	e8 cb fe ff ff       	call   c001d256 <ATAPI::detectMedia()>
c001d38b:	31 c0                	xor    eax,eax
c001d38d:	83 c4 18             	add    esp,0x18
c001d390:	5b                   	pop    ebx
c001d391:	c3                   	ret    

c001d392 <ATAPI::read(unsigned long long, int, void*)>:
c001d392:	55                   	push   ebp
c001d393:	57                   	push   edi
c001d394:	56                   	push   esi
c001d395:	53                   	push   ebx
c001d396:	83 ec 1c             	sub    esp,0x1c
c001d399:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d39d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3a1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d3a5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d3ac:	74 41                	je     c001d3ef <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d3ae:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3b2:	b9 03 00 00 00       	mov    ecx,0x3
c001d3b7:	fc                   	cld    
c001d3b8:	31 c0                	xor    eax,eax
c001d3ba:	86 fb                	xchg   bl,bh
c001d3bc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3be:	c1 c3 10             	rol    ebx,0x10
c001d3c1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d3c6:	89 e8                	mov    eax,ebp
c001d3c8:	86 fb                	xchg   bl,bh
c001d3ca:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d3ce:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d3d2:	50                   	push   eax
c001d3d3:	50                   	push   eax
c001d3d4:	55                   	push   ebp
c001d3d5:	c1 e5 0b             	shl    ebp,0xb
c001d3d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3dc:	6a 00                	push   0x0
c001d3de:	55                   	push   ebp
c001d3df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3e3:	50                   	push   eax
c001d3e4:	56                   	push   esi
c001d3e5:	e8 1c fb ff ff       	call   c001cf06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3ea:	83 c4 20             	add    esp,0x20
c001d3ed:	eb 1a                	jmp    c001d409 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d3ef:	83 ec 0c             	sub    esp,0xc
c001d3f2:	56                   	push   esi
c001d3f3:	e8 5e fe ff ff       	call   c001d256 <ATAPI::detectMedia()>
c001d3f8:	83 c4 10             	add    esp,0x10
c001d3fb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d402:	75 aa                	jne    c001d3ae <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d404:	b8 02 00 00 00       	mov    eax,0x2
c001d409:	83 c4 1c             	add    esp,0x1c
c001d40c:	5b                   	pop    ebx
c001d40d:	5e                   	pop    esi
c001d40e:	5f                   	pop    edi
c001d40f:	5d                   	pop    ebp
c001d410:	c3                   	ret    
c001d411:	90                   	nop

c001d412 <AVX::open(int, int, void*)>:
c001d412:	83 ec 0c             	sub    esp,0xc
c001d415:	e8 0e 10 00 00       	call   c001e428 <avxInit>
c001d41a:	b8 00 00 00 00       	mov    eax,0x0
c001d41f:	83 c4 0c             	add    esp,0xc
c001d422:	c3                   	ret    
c001d423:	90                   	nop

c001d424 <AVX::close(int, int, void*)>:
c001d424:	83 ec 0c             	sub    esp,0xc
c001d427:	e8 fd 0f 00 00       	call   c001e429 <avxClose>
c001d42c:	b8 00 00 00 00       	mov    eax,0x0
c001d431:	83 c4 0c             	add    esp,0xc
c001d434:	c3                   	ret    
c001d435:	90                   	nop

c001d436 <AVX::available()>:
c001d436:	83 ec 0c             	sub    esp,0xc
c001d439:	e8 e2 0f 00 00       	call   c001e420 <avxDetect>
c001d43e:	85 c0                	test   eax,eax
c001d440:	0f 95 c0             	setne  al
c001d443:	83 c4 0c             	add    esp,0xc
c001d446:	c3                   	ret    
c001d447:	90                   	nop

c001d448 <AVX::save(void*)>:
c001d448:	83 ec 0c             	sub    esp,0xc
c001d44b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	50                   	push   eax
c001d453:	e8 ce 0f 00 00       	call   c001e426 <avxSave>
c001d458:	83 c4 10             	add    esp,0x10
c001d45b:	90                   	nop
c001d45c:	83 c4 0c             	add    esp,0xc
c001d45f:	c3                   	ret    

c001d460 <AVX::load(void*)>:
c001d460:	83 ec 0c             	sub    esp,0xc
c001d463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d467:	83 ec 0c             	sub    esp,0xc
c001d46a:	50                   	push   eax
c001d46b:	e8 b7 0f 00 00       	call   c001e427 <avxLoad>
c001d470:	83 c4 10             	add    esp,0x10
c001d473:	90                   	nop
c001d474:	83 c4 0c             	add    esp,0xc
c001d477:	c3                   	ret    

c001d478 <AVX::AVX()>:
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47f:	83 ec 08             	sub    esp,0x8
c001d482:	68 a4 28 02 c0       	push   0xc00228a4
c001d487:	50                   	push   eax
c001d488:	e8 95 34 ff ff       	call   c0010922 <FPU::FPU(char const*)>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	ba b4 28 02 c0       	mov    edx,0xc00228b4
c001d495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d499:	89 10                	mov    DWORD PTR [eax],edx
c001d49b:	90                   	nop
c001d49c:	83 c4 0c             	add    esp,0xc
c001d49f:	c3                   	ret    

c001d4a0 <MMX::available()>:
c001d4a0:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001d4a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d4ab:	83 e0 20             	and    eax,0x20
c001d4ae:	84 c0                	test   al,al
c001d4b0:	0f 95 c0             	setne  al
c001d4b3:	c3                   	ret    

c001d4b4 <MMX::open(int, int, void*)>:
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	e8 e0 0f 00 00       	call   c001e49c <x87Init>
c001d4bc:	b8 00 00 00 00       	mov    eax,0x0
c001d4c1:	83 c4 0c             	add    esp,0xc
c001d4c4:	c3                   	ret    
c001d4c5:	90                   	nop

c001d4c6 <MMX::close(int, int, void*)>:
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	e8 e8 0f 00 00       	call   c001e4b6 <x87Close>
c001d4ce:	b8 00 00 00 00       	mov    eax,0x0
c001d4d3:	83 c4 0c             	add    esp,0xc
c001d4d6:	c3                   	ret    
c001d4d7:	90                   	nop

c001d4d8 <MMX::save(void*)>:
c001d4d8:	83 ec 0c             	sub    esp,0xc
c001d4db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4df:	83 ec 0c             	sub    esp,0xc
c001d4e2:	50                   	push   eax
c001d4e3:	e8 a9 0f 00 00       	call   c001e491 <x87Save>
c001d4e8:	83 c4 10             	add    esp,0x10
c001d4eb:	90                   	nop
c001d4ec:	83 c4 0c             	add    esp,0xc
c001d4ef:	c3                   	ret    

c001d4f0 <MMX::load(void*)>:
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4f7:	83 ec 0c             	sub    esp,0xc
c001d4fa:	50                   	push   eax
c001d4fb:	e8 97 0f 00 00       	call   c001e497 <x87Load>
c001d500:	83 c4 10             	add    esp,0x10
c001d503:	90                   	nop
c001d504:	83 c4 0c             	add    esp,0xc
c001d507:	c3                   	ret    

c001d508 <MMX::MMX()>:
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50f:	83 ec 08             	sub    esp,0x8
c001d512:	68 e4 28 02 c0       	push   0xc00228e4
c001d517:	50                   	push   eax
c001d518:	e8 05 34 ff ff       	call   c0010922 <FPU::FPU(char const*)>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	ba f4 28 02 c0       	mov    edx,0xc00228f4
c001d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d529:	89 10                	mov    DWORD PTR [eax],edx
c001d52b:	90                   	nop
c001d52c:	83 c4 0c             	add    esp,0xc
c001d52f:	c3                   	ret    

c001d530 <SSE::open(int, int, void*)>:
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	e8 1f 0f 00 00       	call   c001e457 <sseInit>
c001d538:	b8 00 00 00 00       	mov    eax,0x0
c001d53d:	83 c4 0c             	add    esp,0xc
c001d540:	c3                   	ret    
c001d541:	90                   	nop

c001d542 <SSE::close(int, int, void*)>:
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	e8 1d 0f 00 00       	call   c001e467 <sseClose>
c001d54a:	b8 00 00 00 00       	mov    eax,0x0
c001d54f:	83 c4 0c             	add    esp,0xc
c001d552:	c3                   	ret    
c001d553:	90                   	nop

c001d554 <SSE::available()>:
c001d554:	83 ec 1c             	sub    esp,0x1c
c001d557:	e8 d4 0e 00 00       	call   c001e430 <sseDetect>
c001d55c:	85 c0                	test   eax,eax
c001d55e:	0f 95 c0             	setne  al
c001d561:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d565:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d569:	83 c4 1c             	add    esp,0x1c
c001d56c:	c3                   	ret    
c001d56d:	90                   	nop

c001d56e <SSE::save(void*)>:
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d575:	83 ec 0c             	sub    esp,0xc
c001d578:	50                   	push   eax
c001d579:	e8 cd 0e 00 00       	call   c001e44b <sseSave>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	90                   	nop
c001d582:	83 c4 0c             	add    esp,0xc
c001d585:	c3                   	ret    

c001d586 <SSE::load(void*)>:
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d58d:	83 ec 0c             	sub    esp,0xc
c001d590:	50                   	push   eax
c001d591:	e8 bb 0e 00 00       	call   c001e451 <sseLoad>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	90                   	nop
c001d59a:	83 c4 0c             	add    esp,0xc
c001d59d:	c3                   	ret    

c001d59e <SSE::SSE()>:
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a5:	83 ec 08             	sub    esp,0x8
c001d5a8:	68 24 29 02 c0       	push   0xc0022924
c001d5ad:	50                   	push   eax
c001d5ae:	e8 6f 33 ff ff       	call   c0010922 <FPU::FPU(char const*)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	ba 34 29 02 c0       	mov    edx,0xc0022934
c001d5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5bf:	89 10                	mov    DWORD PTR [eax],edx
c001d5c1:	90                   	nop
c001d5c2:	83 c4 0c             	add    esp,0xc
c001d5c5:	c3                   	ret    

c001d5c6 <x87::open(int, int, void*)>:
c001d5c6:	83 ec 0c             	sub    esp,0xc
c001d5c9:	e8 ce 0e 00 00       	call   c001e49c <x87Init>
c001d5ce:	b8 00 00 00 00       	mov    eax,0x0
c001d5d3:	83 c4 0c             	add    esp,0xc
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <x87::close(int, int, void*)>:
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	e8 d6 0e 00 00       	call   c001e4b6 <x87Close>
c001d5e0:	b8 00 00 00 00       	mov    eax,0x0
c001d5e5:	83 c4 0c             	add    esp,0xc
c001d5e8:	c3                   	ret    
c001d5e9:	90                   	nop

c001d5ea <x87::available()>:
c001d5ea:	83 ec 0c             	sub    esp,0xc
c001d5ed:	e8 84 0e 00 00       	call   c001e476 <x87Detect>
c001d5f2:	85 c0                	test   eax,eax
c001d5f4:	0f 95 c0             	setne  al
c001d5f7:	83 c4 0c             	add    esp,0xc
c001d5fa:	c3                   	ret    
c001d5fb:	90                   	nop

c001d5fc <x87::save(void*)>:
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d603:	83 ec 0c             	sub    esp,0xc
c001d606:	50                   	push   eax
c001d607:	e8 85 0e 00 00       	call   c001e491 <x87Save>
c001d60c:	83 c4 10             	add    esp,0x10
c001d60f:	90                   	nop
c001d610:	83 c4 0c             	add    esp,0xc
c001d613:	c3                   	ret    

c001d614 <x87::load(void*)>:
c001d614:	83 ec 0c             	sub    esp,0xc
c001d617:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d61b:	83 ec 0c             	sub    esp,0xc
c001d61e:	50                   	push   eax
c001d61f:	e8 73 0e 00 00       	call   c001e497 <x87Load>
c001d624:	83 c4 10             	add    esp,0x10
c001d627:	90                   	nop
c001d628:	83 c4 0c             	add    esp,0xc
c001d62b:	c3                   	ret    

c001d62c <x87::x87()>:
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d633:	83 ec 08             	sub    esp,0x8
c001d636:	68 64 29 02 c0       	push   0xc0022964
c001d63b:	50                   	push   eax
c001d63c:	e8 e1 32 ff ff       	call   c0010922 <FPU::FPU(char const*)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	ba 74 29 02 c0       	mov    edx,0xc0022974
c001d649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64d:	89 10                	mov    DWORD PTR [eax],edx
c001d64f:	90                   	nop
c001d650:	83 c4 0c             	add    esp,0xc
c001d653:	c3                   	ret    

c001d654 <APIC::disable()>:
c001d654:	90                   	nop
c001d655:	c3                   	ret    

c001d656 <APIC::close(int, int, void*)>:
c001d656:	55                   	push   ebp
c001d657:	89 e5                	mov    ebp,esp
c001d659:	83 ec 08             	sub    esp,0x8
c001d65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d65f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d661:	83 c0 3c             	add    eax,0x3c
c001d664:	8b 00                	mov    eax,DWORD PTR [eax]
c001d666:	83 ec 0c             	sub    esp,0xc
c001d669:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d66c:	ff d0                	call   eax
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	b8 00 00 00 00       	mov    eax,0x0
c001d676:	c9                   	leave  
c001d677:	c3                   	ret    

c001d678 <IOAPIC::close(int, int, void*)>:
c001d678:	b8 00 00 00 00       	mov    eax,0x0
c001d67d:	c3                   	ret    

c001d67e <APIC::io_wait()>:
c001d67e:	eb 00                	jmp    c001d680 <APIC::io_wait()+0x2>
c001d680:	eb 00                	jmp    c001d682 <APIC::io_wait()+0x4>
c001d682:	90                   	nop
c001d683:	c3                   	ret    

c001d684 <APIC::getBase()>:
c001d684:	55                   	push   ebp
c001d685:	89 e5                	mov    ebp,esp
c001d687:	83 ec 18             	sub    esp,0x18
c001d68a:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001d68f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d695:	83 e0 08             	and    eax,0x8
c001d698:	84 c0                	test   al,al
c001d69a:	75 07                	jne    c001d6a3 <APIC::getBase()+0x1f>
c001d69c:	b8 00 00 00 00       	mov    eax,0x0
c001d6a1:	eb 21                	jmp    c001d6c4 <APIC::getBase()+0x40>
c001d6a3:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001d6a8:	83 ec 08             	sub    esp,0x8
c001d6ab:	6a 1b                	push   0x1b
c001d6ad:	50                   	push   eax
c001d6ae:	e8 21 db fe ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d6b9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d6bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d6c4:	c9                   	leave  
c001d6c5:	c3                   	ret    

c001d6c6 <APIC::eoi(unsigned char)>:
c001d6c6:	55                   	push   ebp
c001d6c7:	89 e5                	mov    ebp,esp
c001d6c9:	83 ec 28             	sub    esp,0x28
c001d6cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6cf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d6d2:	83 ec 0c             	sub    esp,0xc
c001d6d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6d8:	e8 a7 ff ff ff       	call   c001d684 <APIC::getBase()>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	05 b0 00 00 00       	add    eax,0xb0
c001d6e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d6e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d6eb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d6f1:	90                   	nop
c001d6f2:	c9                   	leave  
c001d6f3:	c3                   	ret    

c001d6f4 <APIC::open(int, int, void*)>:
c001d6f4:	55                   	push   ebp
c001d6f5:	89 e5                	mov    ebp,esp
c001d6f7:	57                   	push   edi
c001d6f8:	56                   	push   esi
c001d6f9:	53                   	push   ebx
c001d6fa:	83 ec 1c             	sub    esp,0x1c
c001d6fd:	83 ec 0c             	sub    esp,0xc
c001d700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d703:	e8 7c ff ff ff       	call   c001d684 <APIC::getBase()>
c001d708:	83 c4 10             	add    esp,0x10
c001d70b:	05 f0 00 00 00       	add    eax,0xf0
c001d710:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d719:	e8 66 ff ff ff       	call   c001d684 <APIC::getBase()>
c001d71e:	83 c4 10             	add    esp,0x10
c001d721:	89 c2                	mov    edx,eax
c001d723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d726:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d72c:	0f b6 f8             	movzx  edi,al
c001d72f:	89 d0                	mov    eax,edx
c001d731:	ba 00 00 00 00       	mov    edx,0x0
c001d736:	89 c1                	mov    ecx,eax
c001d738:	80 e5 ff             	and    ch,0xff
c001d73b:	89 cb                	mov    ebx,ecx
c001d73d:	0f b6 f2             	movzx  esi,dl
c001d740:	89 d8                	mov    eax,ebx
c001d742:	89 f2                	mov    edx,esi
c001d744:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d747:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d74a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d74e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d752:	83 e0 00             	and    eax,0x0
c001d755:	09 d0                	or     eax,edx
c001d757:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d75b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d75e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d764:	8d 50 01             	lea    edx,[eax+0x1]
c001d767:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d76a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d770:	0f b6 d0             	movzx  edx,al
c001d773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d776:	83 c2 08             	add    edx,0x8
c001d779:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d77d:	0f b6 c9             	movzx  ecx,cl
c001d780:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d786:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d78a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d78d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d78f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d792:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d799:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d79c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d79f:	89 10                	mov    DWORD PTR [eax],edx
c001d7a1:	b8 00 00 00 00       	mov    eax,0x0
c001d7a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d7a9:	5b                   	pop    ebx
c001d7aa:	5e                   	pop    esi
c001d7ab:	5f                   	pop    edi
c001d7ac:	5d                   	pop    ebp
c001d7ad:	c3                   	ret    

c001d7ae <IOAPIC::IOAPIC()>:
c001d7ae:	83 ec 0c             	sub    esp,0xc
c001d7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b5:	83 ec 08             	sub    esp,0x8
c001d7b8:	68 a4 29 02 c0       	push   0xc00229a4
c001d7bd:	50                   	push   eax
c001d7be:	e8 6b 2e ff ff       	call   c001062e <Device::Device(char const*)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	ba cc 2a 02 c0       	mov    edx,0xc0022acc
c001d7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7cf:	89 10                	mov    DWORD PTR [eax],edx
c001d7d1:	90                   	nop
c001d7d2:	83 c4 0c             	add    esp,0xc
c001d7d5:	c3                   	ret    

c001d7d6 <APIC::APIC()>:
c001d7d6:	53                   	push   ebx
c001d7d7:	83 ec 18             	sub    esp,0x18
c001d7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7de:	83 ec 08             	sub    esp,0x8
c001d7e1:	68 ac 29 02 c0       	push   0xc00229ac
c001d7e6:	50                   	push   eax
c001d7e7:	e8 84 35 ff ff       	call   c0010d70 <InterruptController::InterruptController(char const*)>
c001d7ec:	83 c4 10             	add    esp,0x10
c001d7ef:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c001d7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f8:	89 10                	mov    DWORD PTR [eax],edx
c001d7fa:	a0 c0 55 02 c0       	mov    al,ds:0xc00255c0
c001d7ff:	83 f0 01             	xor    eax,0x1
c001d802:	84 c0                	test   al,al
c001d804:	0f 84 96 00 00 00    	je     c001d8a0 <APIC::APIC()+0xca>
c001d80a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d80f:	a0 70 40 02 c0       	mov    al,ds:0xc0024070
c001d814:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d818:	73 7f                	jae    c001d899 <APIC::APIC()+0xc3>
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	68 68 01 00 00       	push   0x168
c001d822:	e8 1d 17 ff ff       	call   c000ef44 <operator new(unsigned long)>
c001d827:	83 c4 10             	add    esp,0x10
c001d82a:	89 c3                	mov    ebx,eax
c001d82c:	83 ec 0c             	sub    esp,0xc
c001d82f:	53                   	push   ebx
c001d830:	e8 79 ff ff ff       	call   c001d7ae <IOAPIC::IOAPIC()>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d83c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d841:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d845:	89 14 85 a0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa60],edx
c001d84c:	a1 80 55 02 c0       	mov    eax,ds:0xc0025580
c001d851:	40                   	inc    eax
c001d852:	a3 80 55 02 c0       	mov    ds:0xc0025580,eax
c001d857:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c001d85c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d862:	83 ec 08             	sub    esp,0x8
c001d865:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d869:	50                   	push   eax
c001d86a:	e8 cf 2b ff ff       	call   c001043e <Device::addChild(Device*)>
c001d86f:	83 c4 10             	add    esp,0x10
c001d872:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d876:	8b 00                	mov    eax,DWORD PTR [eax]
c001d878:	83 c0 08             	add    eax,0x8
c001d87b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d87d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d882:	6a 00                	push   0x0
c001d884:	6a 00                	push   0x0
c001d886:	52                   	push   edx
c001d887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d88b:	ff d0                	call   eax
c001d88d:	83 c4 10             	add    esp,0x10
c001d890:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d894:	e9 76 ff ff ff       	jmp    c001d80f <APIC::APIC()+0x39>
c001d899:	c6 05 c0 55 02 c0 01 	mov    BYTE PTR ds:0xc00255c0,0x1
c001d8a0:	90                   	nop
c001d8a1:	83 c4 18             	add    esp,0x18
c001d8a4:	5b                   	pop    ebx
c001d8a5:	c3                   	ret    

c001d8a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d8a6:	55                   	push   ebp
c001d8a7:	89 e5                	mov    ebp,esp
c001d8a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8b2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d8b5:	72 1d                	jb     c001d8d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ba:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d8c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8c3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d8c9:	01 d0                	add    eax,edx
c001d8cb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d8ce:	73 04                	jae    c001d8d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d8d0:	b0 01                	mov    al,0x1
c001d8d2:	eb 02                	jmp    c001d8d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d8d4:	b0 00                	mov    al,0x0
c001d8d6:	5d                   	pop    ebp
c001d8d7:	c3                   	ret    

c001d8d8 <IOAPIC::read(int)>:
c001d8d8:	55                   	push   ebp
c001d8d9:	89 e5                	mov    ebp,esp
c001d8db:	83 ec 10             	sub    esp,0x10
c001d8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8ed:	0f b6 d0             	movzx  edx,al
c001d8f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8f3:	89 10                	mov    DWORD PTR [eax],edx
c001d8f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8f8:	83 c0 10             	add    eax,0x10
c001d8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8fd:	c9                   	leave  
c001d8fe:	c3                   	ret    
c001d8ff:	90                   	nop

c001d900 <IOAPIC::open(int, int, void*)>:
c001d900:	55                   	push   ebp
c001d901:	89 e5                	mov    ebp,esp
c001d903:	57                   	push   edi
c001d904:	56                   	push   esi
c001d905:	53                   	push   ebx
c001d906:	83 ec 0c             	sub    esp,0xc
c001d909:	83 ec 0c             	sub    esp,0xc
c001d90c:	68 d7 29 02 c0       	push   0xc00229d7
c001d911:	e8 1d 17 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d91f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d928:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d92e:	8b 14 85 a0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf60]
c001d935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d938:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d93e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d941:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d947:	8b 14 85 20 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbee0]
c001d94e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d951:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d95a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d963:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d969:	0f b6 f8             	movzx  edi,al
c001d96c:	89 d0                	mov    eax,edx
c001d96e:	ba 00 00 00 00       	mov    edx,0x0
c001d973:	89 c1                	mov    ecx,eax
c001d975:	80 e5 ff             	and    ch,0xff
c001d978:	89 cb                	mov    ebx,ecx
c001d97a:	0f b6 f2             	movzx  esi,dl
c001d97d:	89 d8                	mov    eax,ebx
c001d97f:	89 f2                	mov    edx,esi
c001d981:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d984:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d987:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d98b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d98f:	83 e0 00             	and    eax,0x0
c001d992:	09 d0                	or     eax,edx
c001d994:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d99b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d9a1:	8d 50 01             	lea    edx,[eax+0x1]
c001d9a4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d9a7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d9ad:	0f b6 d0             	movzx  edx,al
c001d9b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9b3:	83 c2 08             	add    edx,0x8
c001d9b6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d9ba:	0f b6 c9             	movzx  ecx,cl
c001d9bd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d9c3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d9c7:	83 ec 08             	sub    esp,0x8
c001d9ca:	6a 01                	push   0x1
c001d9cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9cf:	e8 04 ff ff ff       	call   c001d8d8 <IOAPIC::read(int)>
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	c1 f8 10             	sar    eax,0x10
c001d9da:	0f b6 c0             	movzx  eax,al
c001d9dd:	8d 50 01             	lea    edx,[eax+0x1]
c001d9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d9e9:	b8 00 00 00 00       	mov    eax,0x0
c001d9ee:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d9f1:	5b                   	pop    ebx
c001d9f2:	5e                   	pop    esi
c001d9f3:	5f                   	pop    edi
c001d9f4:	5d                   	pop    ebp
c001d9f5:	c3                   	ret    

c001d9f6 <IOAPIC::write(int, int)>:
c001d9f6:	55                   	push   ebp
c001d9f7:	89 e5                	mov    ebp,esp
c001d9f9:	83 ec 10             	sub    esp,0x10
c001d9fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da05:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da0b:	0f b6 d0             	movzx  edx,al
c001da0e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da11:	89 10                	mov    DWORD PTR [eax],edx
c001da13:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da16:	8d 50 10             	lea    edx,[eax+0x10]
c001da19:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001da1c:	89 02                	mov    DWORD PTR [edx],eax
c001da1e:	90                   	nop
c001da1f:	c9                   	leave  
c001da20:	c3                   	ret    
c001da21:	90                   	nop

c001da22 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001da22:	55                   	push   ebp
c001da23:	89 e5                	mov    ebp,esp
c001da25:	83 ec 20             	sub    esp,0x20
c001da28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da2b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001da2e:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001da31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001da34:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001da37:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da3a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001da3d:	88 d0                	mov    al,dl
c001da3f:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001da42:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da46:	83 c0 08             	add    eax,0x8
c001da49:	01 c0                	add    eax,eax
c001da4b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da4e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da52:	83 c0 08             	add    eax,0x8
c001da55:	01 c0                	add    eax,eax
c001da57:	40                   	inc    eax
c001da58:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001da5b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da5e:	50                   	push   eax
c001da5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da62:	e8 71 fe ff ff       	call   c001d8d8 <IOAPIC::read(int)>
c001da67:	83 c4 08             	add    esp,0x8
c001da6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da6d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da74:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da77:	c1 e0 18             	shl    eax,0x18
c001da7a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da7d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da80:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da83:	52                   	push   edx
c001da84:	50                   	push   eax
c001da85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da88:	e8 69 ff ff ff       	call   c001d9f6 <IOAPIC::write(int, int)>
c001da8d:	83 c4 0c             	add    esp,0xc
c001da90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da93:	50                   	push   eax
c001da94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da97:	e8 3c fe ff ff       	call   c001d8d8 <IOAPIC::read(int)>
c001da9c:	83 c4 08             	add    esp,0x8
c001da9f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001daa2:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001daa9:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001dab0:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001dab7:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001dabe:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001dac2:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001dac5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001dac8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dacb:	52                   	push   edx
c001dacc:	50                   	push   eax
c001dacd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dad0:	e8 21 ff ff ff       	call   c001d9f6 <IOAPIC::write(int, int)>
c001dad5:	83 c4 0c             	add    esp,0xc
c001dad8:	90                   	nop
c001dad9:	c9                   	leave  
c001dada:	c3                   	ret    
c001dadb:	90                   	nop

c001dadc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001dadc:	55                   	push   ebp
c001dadd:	89 e5                	mov    ebp,esp
c001dadf:	56                   	push   esi
c001dae0:	53                   	push   ebx
c001dae1:	83 ec 20             	sub    esp,0x20
c001dae4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dae7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001daea:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001daee:	74 28                	je     c001db18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001daf0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001daf4:	7f 12                	jg     c001db08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001daf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daf9:	05 20 2f 02 c0       	add    eax,0xc0022f20
c001dafe:	8a 00                	mov    al,BYTE PTR [eax]
c001db00:	0f b6 c0             	movzx  eax,al
c001db03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001db06:	eb 10                	jmp    c001db18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001db08:	83 ec 0c             	sub    esp,0xc
c001db0b:	68 e8 29 02 c0       	push   0xc00229e8
c001db10:	e8 b3 71 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001db1c:	a1 80 55 02 c0       	mov    eax,ds:0xc0025580
c001db21:	83 ec 08             	sub    esp,0x8
c001db24:	50                   	push   eax
c001db25:	68 20 2a 02 c0       	push   0xc0022a20
c001db2a:	e8 04 15 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001db39:	a1 80 55 02 c0       	mov    eax,ds:0xc0025580
c001db3e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001db41:	7d 58                	jge    c001db9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db46:	8b 04 85 a0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa60]
c001db4d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db50:	83 ec 08             	sub    esp,0x8
c001db53:	52                   	push   edx
c001db54:	50                   	push   eax
c001db55:	e8 4c fd ff ff       	call   c001d8a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001db5a:	83 c4 10             	add    esp,0x10
c001db5d:	84 c0                	test   al,al
c001db5f:	74 35                	je     c001db96 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001db61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db64:	8b 1c 85 a0 55 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdaa60]
c001db6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db6e:	83 c0 20             	add    eax,0x20
c001db71:	0f b6 f0             	movzx  esi,al
c001db74:	e8 46 64 ff ff       	call   c0013fbf <getCPUNumber()>
c001db79:	99                   	cdq    
c001db7a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db7d:	0f b6 c9             	movzx  ecx,cl
c001db80:	83 ec 0c             	sub    esp,0xc
c001db83:	56                   	push   esi
c001db84:	52                   	push   edx
c001db85:	50                   	push   eax
c001db86:	51                   	push   ecx
c001db87:	53                   	push   ebx
c001db88:	e8 95 fe ff ff       	call   c001da22 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db8d:	83 c4 20             	add    esp,0x20
c001db90:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db94:	eb 05                	jmp    c001db9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db96:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db99:	eb 9e                	jmp    c001db39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db9b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db9e:	83 f0 01             	xor    eax,0x1
c001dba1:	84 c0                	test   al,al
c001dba3:	74 10                	je     c001dbb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001dba5:	83 ec 0c             	sub    esp,0xc
c001dba8:	68 37 2a 02 c0       	push   0xc0022a37
c001dbad:	e8 16 71 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001dbb2:	83 c4 10             	add    esp,0x10
c001dbb5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001dbb9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001dbc0:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001dbc4:	7f 65                	jg     c001dc2b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001dbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbc9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbcc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbd3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbd6:	01 ca                	add    edx,ecx
c001dbd8:	83 c2 54             	add    edx,0x54
c001dbdb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001dbdf:	85 c0                	test   eax,eax
c001dbe1:	75 43                	jne    c001dc26 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001dbe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbe6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbe9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbf0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbf3:	01 ca                	add    edx,ecx
c001dbf5:	8d 4a 54             	lea    ecx,[edx+0x54]
c001dbf8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001dbfb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dc05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dc0c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc0f:	01 ca                	add    edx,ecx
c001dc11:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dc17:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dc1a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dc1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc21:	83 e8 20             	sub    eax,0x20
c001dc24:	eb 1a                	jmp    c001dc40 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dc26:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dc29:	eb 95                	jmp    c001dbc0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dc2b:	83 ec 0c             	sub    esp,0xc
c001dc2e:	68 44 2a 02 c0       	push   0xc0022a44
c001dc33:	e8 90 70 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001dc38:	83 c4 10             	add    esp,0x10
c001dc3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dc40:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dc43:	5b                   	pop    ebx
c001dc44:	5e                   	pop    esi
c001dc45:	5d                   	pop    ebp
c001dc46:	c3                   	ret    
c001dc47:	90                   	nop

c001dc48 <PIC::disable()>:
c001dc48:	55                   	push   ebp
c001dc49:	89 e5                	mov    ebp,esp
c001dc4b:	83 ec 10             	sub    esp,0x10
c001dc4e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dc54:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dc58:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc5b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dc5f:	ee                   	out    dx,al
c001dc60:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dc66:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dc6a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc6d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc71:	ee                   	out    dx,al
c001dc72:	90                   	nop
c001dc73:	c9                   	leave  
c001dc74:	c3                   	ret    
c001dc75:	90                   	nop

c001dc76 <PIC::close(int, int, void*)>:
c001dc76:	55                   	push   ebp
c001dc77:	89 e5                	mov    ebp,esp
c001dc79:	83 ec 08             	sub    esp,0x8
c001dc7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc81:	83 c0 3c             	add    eax,0x3c
c001dc84:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc86:	83 ec 0c             	sub    esp,0xc
c001dc89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc8c:	ff d0                	call   eax
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	b8 00 00 00 00       	mov    eax,0x0
c001dc96:	c9                   	leave  
c001dc97:	c3                   	ret    

c001dc98 <PIC::PIC()>:
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9f:	83 ec 08             	sub    esp,0x8
c001dca2:	68 f0 2a 02 c0       	push   0xc0022af0
c001dca7:	50                   	push   eax
c001dca8:	e8 c3 30 ff ff       	call   c0010d70 <InterruptController::InterruptController(char const*)>
c001dcad:	83 c4 10             	add    esp,0x10
c001dcb0:	ba 1c 2b 02 c0       	mov    edx,0xc0022b1c
c001dcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb9:	89 10                	mov    DWORD PTR [eax],edx
c001dcbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcc5:	0f b6 d0             	movzx  edx,al
c001dcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcdd:	0f b6 d0             	movzx  edx,al
c001dce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dced:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcf3:	8d 50 01             	lea    edx,[eax+0x1]
c001dcf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcfa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd00:	0f b6 d0             	movzx  edx,al
c001dd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd07:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd0b:	83 e1 3f             	and    ecx,0x3f
c001dd0e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd1c:	0f b6 d0             	movzx  edx,al
c001dd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd23:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd34:	0f b6 d0             	movzx  edx,al
c001dd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd4a:	8d 50 01             	lea    edx,[eax+0x1]
c001dd4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd57:	0f b6 d0             	movzx  edx,al
c001dd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd62:	83 e1 3f             	and    ecx,0x3f
c001dd65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd69:	90                   	nop
c001dd6a:	83 c4 0c             	add    esp,0xc
c001dd6d:	c3                   	ret    

c001dd6e <PIC::ioWait()>:
c001dd6e:	eb 00                	jmp    c001dd70 <PIC::ioWait()+0x2>
c001dd70:	eb 00                	jmp    c001dd72 <PIC::ioWait()+0x4>
c001dd72:	90                   	nop
c001dd73:	c3                   	ret    

c001dd74 <PIC::getIRQReg(int)>:
c001dd74:	55                   	push   ebp
c001dd75:	89 e5                	mov    ebp,esp
c001dd77:	83 ec 10             	sub    esp,0x10
c001dd7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd7d:	0f b6 c0             	movzx  eax,al
c001dd80:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd86:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd89:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd8c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd90:	ee                   	out    dx,al
c001dd91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd94:	0f b6 c0             	movzx  eax,al
c001dd97:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd9d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dda0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dda3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dda7:	ee                   	out    dx,al
c001dda8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001ddae:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001ddb2:	89 c2                	mov    edx,eax
c001ddb4:	ec                   	in     al,dx
c001ddb5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001ddb8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddbb:	0f b6 c0             	movzx  eax,al
c001ddbe:	c1 e0 08             	shl    eax,0x8
c001ddc1:	89 c1                	mov    ecx,eax
c001ddc3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001ddc9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001ddcd:	89 c2                	mov    edx,eax
c001ddcf:	ec                   	in     al,dx
c001ddd0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001ddd3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001ddd6:	0f b6 c0             	movzx  eax,al
c001ddd9:	09 c8                	or     eax,ecx
c001dddb:	c9                   	leave  
c001dddc:	c3                   	ret    
c001dddd:	90                   	nop

c001ddde <PIC::eoi(unsigned char)>:
c001ddde:	55                   	push   ebp
c001dddf:	89 e5                	mov    ebp,esp
c001dde1:	83 ec 14             	sub    esp,0x14
c001dde4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dde7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001ddea:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddee:	75 1e                	jne    c001de0e <PIC::eoi(unsigned char)+0x30>
c001ddf0:	6a 0b                	push   0xb
c001ddf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddf5:	e8 7a ff ff ff       	call   c001dd74 <PIC::getIRQReg(int)>
c001ddfa:	83 c4 08             	add    esp,0x8
c001ddfd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001de01:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001de05:	25 80 00 00 00       	and    eax,0x80
c001de0a:	85 c0                	test   eax,eax
c001de0c:	74 5f                	je     c001de6d <PIC::eoi(unsigned char)+0x8f>
c001de0e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001de12:	75 2d                	jne    c001de41 <PIC::eoi(unsigned char)+0x63>
c001de14:	6a 0b                	push   0xb
c001de16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de19:	e8 56 ff ff ff       	call   c001dd74 <PIC::getIRQReg(int)>
c001de1e:	83 c4 08             	add    esp,0x8
c001de21:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001de25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de28:	66 85 c0             	test   ax,ax
c001de2b:	78 14                	js     c001de41 <PIC::eoi(unsigned char)+0x63>
c001de2d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001de33:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001de37:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001de3a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001de3e:	ee                   	out    dx,al
c001de3f:	eb 2d                	jmp    c001de6e <PIC::eoi(unsigned char)+0x90>
c001de41:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001de45:	76 12                	jbe    c001de59 <PIC::eoi(unsigned char)+0x7b>
c001de47:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001de4d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001de51:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de54:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de58:	ee                   	out    dx,al
c001de59:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001de5f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001de63:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de66:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de6a:	ee                   	out    dx,al
c001de6b:	eb 01                	jmp    c001de6e <PIC::eoi(unsigned char)+0x90>
c001de6d:	90                   	nop
c001de6e:	c9                   	leave  
c001de6f:	c3                   	ret    

c001de70 <PIC::remap()>:
c001de70:	55                   	push   ebp
c001de71:	89 e5                	mov    ebp,esp
c001de73:	83 ec 48             	sub    esp,0x48
c001de76:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de7d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de84:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de8a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de8d:	89 c2                	mov    edx,eax
c001de8f:	ec                   	in     al,dx
c001de90:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de93:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de96:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de99:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de9f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dea2:	89 c2                	mov    edx,eax
c001dea4:	ec                   	in     al,dx
c001dea5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001dea8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001deab:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001deae:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001deb4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001deb8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001debb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001debe:	ee                   	out    dx,al
c001debf:	83 ec 0c             	sub    esp,0xc
c001dec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dec5:	e8 a4 fe ff ff       	call   c001dd6e <PIC::ioWait()>
c001deca:	83 c4 10             	add    esp,0x10
c001decd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ded3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ded7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001deda:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001dedd:	ee                   	out    dx,al
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee4:	e8 85 fe ff ff       	call   c001dd6e <PIC::ioWait()>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001deef:	0f b6 c0             	movzx  eax,al
c001def2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001def8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001defb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001defe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001df01:	ee                   	out    dx,al
c001df02:	83 ec 0c             	sub    esp,0xc
c001df05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df08:	e8 61 fe ff ff       	call   c001dd6e <PIC::ioWait()>
c001df0d:	83 c4 10             	add    esp,0x10
c001df10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df13:	0f b6 c0             	movzx  eax,al
c001df16:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001df1c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001df1f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001df22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001df25:	ee                   	out    dx,al
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df2c:	e8 3d fe ff ff       	call   c001dd6e <PIC::ioWait()>
c001df31:	83 c4 10             	add    esp,0x10
c001df34:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001df3a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001df3e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001df41:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001df44:	ee                   	out    dx,al
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df4b:	e8 1e fe ff ff       	call   c001dd6e <PIC::ioWait()>
c001df50:	83 c4 10             	add    esp,0x10
c001df53:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001df59:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001df5d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001df60:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001df63:	ee                   	out    dx,al
c001df64:	83 ec 0c             	sub    esp,0xc
c001df67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df6a:	e8 ff fd ff ff       	call   c001dd6e <PIC::ioWait()>
c001df6f:	83 c4 10             	add    esp,0x10
c001df72:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df78:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df7c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df82:	ee                   	out    dx,al
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df89:	e8 e0 fd ff ff       	call   c001dd6e <PIC::ioWait()>
c001df8e:	83 c4 10             	add    esp,0x10
c001df91:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df97:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df9b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df9e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dfa1:	ee                   	out    dx,al
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfa8:	e8 c1 fd ff ff       	call   c001dd6e <PIC::ioWait()>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dfb4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dfba:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dfbd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001dfc0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dfc3:	ee                   	out    dx,al
c001dfc4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dfc8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dfce:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dfd1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dfd4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dfd7:	ee                   	out    dx,al
c001dfd8:	90                   	nop
c001dfd9:	c9                   	leave  
c001dfda:	c3                   	ret    
c001dfdb:	90                   	nop

c001dfdc <PIC::open(int, int, void*)>:
c001dfdc:	55                   	push   ebp
c001dfdd:	89 e5                	mov    ebp,esp
c001dfdf:	83 ec 18             	sub    esp,0x18
c001dfe2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dfe8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dfec:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dfef:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dff3:	ee                   	out    dx,al
c001dff4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dffa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dffe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e001:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e005:	ee                   	out    dx,al
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e00c:	e8 5f fe ff ff       	call   c001de70 <PIC::remap()>
c001e011:	83 c4 10             	add    esp,0x10
c001e014:	b8 00 00 00 00       	mov    eax,0x0
c001e019:	c9                   	leave  
c001e01a:	c3                   	ret    
c001e01b:	90                   	nop

c001e01c <APICTimer::close(int, int, void*)>:
c001e01c:	b8 00 00 00 00       	mov    eax,0x0
c001e021:	c3                   	ret    

c001e022 <apicTimerHandler(regs*, void*)>:
c001e022:	83 ec 0c             	sub    esp,0xc
c001e025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e029:	8b 00                	mov    eax,DWORD PTR [eax]
c001e02b:	99                   	cdq    
c001e02c:	52                   	push   edx
c001e02d:	50                   	push   eax
c001e02e:	6a 00                	push   0x0
c001e030:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e035:	e8 72 07 00 00       	call   c001e7ac <__udivdi3>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	83 ec 08             	sub    esp,0x8
c001e040:	52                   	push   edx
c001e041:	50                   	push   eax
c001e042:	e8 94 44 ff ff       	call   c00124db <timerHandler(unsigned long long)>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	90                   	nop
c001e04b:	83 c4 0c             	add    esp,0xc
c001e04e:	c3                   	ret    
c001e04f:	90                   	nop

c001e050 <APICTimer::write(int)>:
c001e050:	53                   	push   ebx
c001e051:	83 ec 28             	sub    esp,0x28
c001e054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e058:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e05c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e062:	e8 5b 5f ff ff       	call   c0013fc2 <thisCPU()>
c001e067:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e06d:	83 ec 0c             	sub    esp,0xc
c001e070:	50                   	push   eax
c001e071:	e8 0e f6 ff ff       	call   c001d684 <APIC::getBase()>
c001e076:	83 c4 10             	add    esp,0x10
c001e079:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e07d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001e082:	8b 15 34 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e34
c001e088:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e08c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e090:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e094:	05 e0 03 00 00       	add    eax,0x3e0
c001e099:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e09f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0a3:	05 80 03 00 00       	add    eax,0x380
c001e0a8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e0ae:	fb                   	sti    
c001e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0b7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e0bc:	83 d2 00             	adc    edx,0x0
c001e0bf:	89 c1                	mov    ecx,eax
c001e0c1:	89 d3                	mov    ebx,edx
c001e0c3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001e0c8:	8b 15 34 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e34
c001e0ce:	39 c8                	cmp    eax,ecx
c001e0d0:	89 d0                	mov    eax,edx
c001e0d2:	19 d8                	sbb    eax,ebx
c001e0d4:	73 02                	jae    c001e0d8 <APICTimer::write(int)+0x88>
c001e0d6:	eb d7                	jmp    c001e0af <APICTimer::write(int)+0x5f>
c001e0d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0dc:	05 20 03 00 00       	add    eax,0x320
c001e0e1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e0e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0eb:	05 90 03 00 00       	add    eax,0x390
c001e0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0f2:	f7 d0                	not    eax
c001e0f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e100:	ba 00 00 00 00       	mov    edx,0x0
c001e105:	f7 f3                	div    ebx
c001e107:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e10b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e115:	0d 00 00 02 00       	or     eax,0x20000
c001e11a:	89 c2                	mov    edx,eax
c001e11c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e120:	05 20 03 00 00       	add    eax,0x320
c001e125:	89 10                	mov    DWORD PTR [eax],edx
c001e127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e12b:	05 e0 03 00 00       	add    eax,0x3e0
c001e130:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e13a:	05 80 03 00 00       	add    eax,0x380
c001e13f:	89 c2                	mov    edx,eax
c001e141:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e145:	89 02                	mov    DWORD PTR [edx],eax
c001e147:	90                   	nop
c001e148:	83 c4 28             	add    esp,0x28
c001e14b:	5b                   	pop    ebx
c001e14c:	c3                   	ret    
c001e14d:	90                   	nop

c001e14e <APICTimer::open(int, int, void*)>:
c001e14e:	57                   	push   edi
c001e14f:	56                   	push   esi
c001e150:	53                   	push   ebx
c001e151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e155:	8b 00                	mov    eax,DWORD PTR [eax]
c001e157:	83 c0 24             	add    eax,0x24
c001e15a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e15c:	83 ec 08             	sub    esp,0x8
c001e15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e167:	ff d0                	call   eax
c001e169:	83 c4 10             	add    esp,0x10
c001e16c:	e8 51 5e ff ff       	call   c0013fc2 <thisCPU()>
c001e171:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e177:	83 ec 0c             	sub    esp,0xc
c001e17a:	50                   	push   eax
c001e17b:	e8 04 f5 ff ff       	call   c001d684 <APIC::getBase()>
c001e180:	83 c4 10             	add    esp,0x10
c001e183:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e193:	0f b6 f8             	movzx  edi,al
c001e196:	89 d0                	mov    eax,edx
c001e198:	ba 00 00 00 00       	mov    edx,0x0
c001e19d:	89 c1                	mov    ecx,eax
c001e19f:	80 e5 ff             	and    ch,0xff
c001e1a2:	89 cb                	mov    ebx,ecx
c001e1a4:	0f b6 f2             	movzx  esi,dl
c001e1a7:	89 d8                	mov    eax,ebx
c001e1a9:	89 f2                	mov    edx,esi
c001e1ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1af:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e1b2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e1b6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e1ba:	83 e0 00             	and    eax,0x0
c001e1bd:	09 d0                	or     eax,edx
c001e1bf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e1cd:	8d 50 01             	lea    edx,[eax+0x1]
c001e1d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e1da:	0f b6 d0             	movzx  edx,al
c001e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e1:	83 c2 08             	add    edx,0x8
c001e1e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e1e8:	0f b6 c9             	movzx  ecx,cl
c001e1eb:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1f1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1fd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e207:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e20b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e211:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e215:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	51                   	push   ecx
c001e21f:	6a 01                	push   0x1
c001e221:	68 22 e0 01 c0       	push   0xc001e022
c001e226:	52                   	push   edx
c001e227:	50                   	push   eax
c001e228:	e8 65 21 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e22d:	83 c4 20             	add    esp,0x20
c001e230:	89 c2                	mov    edx,eax
c001e232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e236:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e23c:	b8 00 00 00 00       	mov    eax,0x0
c001e241:	5b                   	pop    ebx
c001e242:	5e                   	pop    esi
c001e243:	5f                   	pop    edi
c001e244:	c3                   	ret    
c001e245:	90                   	nop

c001e246 <APICTimer::APICTimer()>:
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24d:	83 ec 08             	sub    esp,0x8
c001e250:	68 5c 2b 02 c0       	push   0xc0022b5c
c001e255:	50                   	push   eax
c001e256:	e8 f1 41 ff ff       	call   c001244c <Timer::Timer(char const*)>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001e263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e267:	89 10                	mov    DWORD PTR [eax],edx
c001e269:	90                   	nop
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

c001e26e <PIT::write(int)>:
c001e26e:	83 ec 10             	sub    esp,0x10
c001e271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e275:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e279:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e27f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e283:	a3 c4 55 02 c0       	mov    ds:0xc00255c4,eax
c001e288:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e28d:	99                   	cdq    
c001e28e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e292:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e296:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e29d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e2a2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e2a6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e2ab:	ee                   	out    dx,al
c001e2ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2b0:	0f b6 c0             	movzx  eax,al
c001e2b3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e2ba:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e2be:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e2c2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e2c7:	ee                   	out    dx,al
c001e2c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2cc:	c1 f8 08             	sar    eax,0x8
c001e2cf:	0f b6 c0             	movzx  eax,al
c001e2d2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e2d9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2dd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2e1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e2e6:	ee                   	out    dx,al
c001e2e7:	90                   	nop
c001e2e8:	83 c4 10             	add    esp,0x10
c001e2eb:	c3                   	ret    

c001e2ec <pitHandler(regs*, void*)>:
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	a1 c4 55 02 c0       	mov    eax,ds:0xc00255c4
c001e2f4:	99                   	cdq    
c001e2f5:	52                   	push   edx
c001e2f6:	50                   	push   eax
c001e2f7:	6a 00                	push   0x0
c001e2f9:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e2fe:	e8 a9 04 00 00       	call   c001e7ac <__udivdi3>
c001e303:	83 c4 10             	add    esp,0x10
c001e306:	83 ec 08             	sub    esp,0x8
c001e309:	52                   	push   edx
c001e30a:	50                   	push   eax
c001e30b:	e8 cb 41 ff ff       	call   c00124db <timerHandler(unsigned long long)>
c001e310:	83 c4 10             	add    esp,0x10
c001e313:	90                   	nop
c001e314:	83 c4 0c             	add    esp,0xc
c001e317:	c3                   	ret    

c001e318 <PIT::open(int, int, void*)>:
c001e318:	83 ec 0c             	sub    esp,0xc
c001e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e321:	83 c0 24             	add    eax,0x24
c001e324:	8b 00                	mov    eax,DWORD PTR [eax]
c001e326:	83 ec 08             	sub    esp,0x8
c001e329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e32d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e331:	ff d0                	call   eax
c001e333:	83 c4 10             	add    esp,0x10
c001e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	6a 00                	push   0x0
c001e33f:	6a 01                	push   0x1
c001e341:	68 ec e2 01 c0       	push   0xc001e2ec
c001e346:	6a 00                	push   0x0
c001e348:	50                   	push   eax
c001e349:	e8 44 20 ff ff       	call   c0010392 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e34e:	83 c4 20             	add    esp,0x20
c001e351:	89 c2                	mov    edx,eax
c001e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e357:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e35d:	b8 00 00 00 00       	mov    eax,0x0
c001e362:	83 c4 0c             	add    esp,0xc
c001e365:	c3                   	ret    

c001e366 <PIT::close(int, int, void*)>:
c001e366:	83 ec 0c             	sub    esp,0xc
c001e369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37b:	6a 01                	push   0x1
c001e37d:	68 ec e2 01 c0       	push   0xc001e2ec
c001e382:	6a 00                	push   0x0
c001e384:	50                   	push   eax
c001e385:	e8 66 20 ff ff       	call   c00103f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e38a:	83 c4 10             	add    esp,0x10
c001e38d:	b8 00 00 00 00       	mov    eax,0x0
c001e392:	83 c4 0c             	add    esp,0xc
c001e395:	c3                   	ret    

c001e396 <PIT::PIT()>:
c001e396:	83 ec 0c             	sub    esp,0xc
c001e399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39d:	83 ec 08             	sub    esp,0x8
c001e3a0:	68 98 2b 02 c0       	push   0xc0022b98
c001e3a5:	50                   	push   eax
c001e3a6:	e8 a1 40 ff ff       	call   c001244c <Timer::Timer(char const*)>
c001e3ab:	83 c4 10             	add    esp,0x10
c001e3ae:	ba c0 2b 02 c0       	mov    edx,0xc0022bc0
c001e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b7:	89 10                	mov    DWORD PTR [eax],edx
c001e3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3c3:	0f b6 d0             	movzx  edx,al
c001e3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ca:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3db:	0f b6 d0             	movzx  edx,al
c001e3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3f1:	8d 50 01             	lea    edx,[eax+0x1]
c001e3f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e3fe:	0f b6 d0             	movzx  edx,al
c001e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e405:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e409:	83 e1 3f             	and    ecx,0x3f
c001e40c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e410:	90                   	nop
c001e411:	83 c4 0c             	add    esp,0xc
c001e414:	c3                   	ret    
c001e415:	66 90                	xchg   ax,ax
c001e417:	66 90                	xchg   ax,ax
c001e419:	66 90                	xchg   ax,ax
c001e41b:	66 90                	xchg   ax,ax
c001e41d:	66 90                	xchg   ax,ax
c001e41f:	90                   	nop

c001e420 <avxDetect>:
c001e420:	b8 00 00 00 00       	mov    eax,0x0
c001e425:	c3                   	ret    

c001e426 <avxSave>:
c001e426:	c3                   	ret    

c001e427 <avxLoad>:
c001e427:	c3                   	ret    

c001e428 <avxInit>:
c001e428:	c3                   	ret    

c001e429 <avxClose>:
c001e429:	c3                   	ret    
c001e42a:	66 90                	xchg   ax,ax
c001e42c:	66 90                	xchg   ax,ax
c001e42e:	66 90                	xchg   ax,ax

c001e430 <sseDetect>:
c001e430:	b8 01 00 00 00       	mov    eax,0x1
c001e435:	0f a2                	cpuid  
c001e437:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e43d:	74 06                	je     c001e445 <sseDetect.noSSE>
c001e43f:	b8 01 00 00 00       	mov    eax,0x1
c001e444:	c3                   	ret    

c001e445 <sseDetect.noSSE>:
c001e445:	b8 00 00 00 00       	mov    eax,0x0
c001e44a:	c3                   	ret    

c001e44b <sseSave>:
c001e44b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e450:	c3                   	ret    

c001e451 <sseLoad>:
c001e451:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e456:	c3                   	ret    

c001e457 <sseInit>:
c001e457:	e8 40 00 00 00       	call   c001e49c <x87Init>
c001e45c:	0f 20 e0             	mov    eax,cr4
c001e45f:	66 0d 00 06          	or     ax,0x600
c001e463:	0f 22 e0             	mov    cr4,eax
c001e466:	c3                   	ret    

c001e467 <sseClose>:
c001e467:	c3                   	ret    
c001e468:	66 90                	xchg   ax,ax
c001e46a:	66 90                	xchg   ax,ax
c001e46c:	66 90                	xchg   ax,ax
c001e46e:	66 90                	xchg   ax,ax

c001e470 <value_37F>:
c001e470:	7f 03                	jg     c001e475 <value_37A+0x1>

c001e472 <value_37E>:
c001e472:	7e 03                	jle    c001e477 <x87Detect+0x1>

c001e474 <value_37A>:
c001e474:	7a 03                	jp     c001e479 <x87Detect+0x3>

c001e476 <x87Detect>:
c001e476:	b8 01 00 00 00       	mov    eax,0x1
c001e47b:	0f a2                	cpuid  
c001e47d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e483:	74 06                	je     c001e48b <x87Detect.nox87>
c001e485:	b8 01 00 00 00       	mov    eax,0x1
c001e48a:	c3                   	ret    

c001e48b <x87Detect.nox87>:
c001e48b:	b8 00 00 00 00       	mov    eax,0x0
c001e490:	c3                   	ret    

c001e491 <x87Save>:
c001e491:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e496:	c3                   	ret    

c001e497 <x87Load>:
c001e497:	dd 64 24 08          	frstor [esp+0x8]
c001e49b:	c3                   	ret    

c001e49c <x87Init>:
c001e49c:	9b db e3             	finit  
c001e49f:	0f 20 c0             	mov    eax,cr0
c001e4a2:	66 25 fb ff          	and    ax,0xfffb
c001e4a6:	66 0d 22 00          	or     ax,0x22
c001e4aa:	0f 22 c0             	mov    cr0,eax
c001e4ad:	0f 06                	clts   
c001e4af:	d9 2d 74 e4 01 c0    	fldcw  WORD PTR ds:0xc001e474
c001e4b5:	c3                   	ret    

c001e4b6 <x87Close>:
c001e4b6:	c3                   	ret    
c001e4b7:	90                   	nop

c001e4b8 <__do_global_ctors_aux>:
c001e4b8:	a1 98 f5 01 c0       	mov    eax,ds:0xc001f598
c001e4bd:	83 f8 ff             	cmp    eax,0xffffffff
c001e4c0:	74 1a                	je     c001e4dc <__do_global_ctors_aux+0x24>
c001e4c2:	55                   	push   ebp
c001e4c3:	89 e5                	mov    ebp,esp
c001e4c5:	53                   	push   ebx
c001e4c6:	52                   	push   edx
c001e4c7:	bb 98 f5 01 c0       	mov    ebx,0xc001f598
c001e4cc:	ff d0                	call   eax
c001e4ce:	83 eb 04             	sub    ebx,0x4
c001e4d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e4d3:	83 f8 ff             	cmp    eax,0xffffffff
c001e4d6:	75 f4                	jne    c001e4cc <__do_global_ctors_aux+0x14>
c001e4d8:	58                   	pop    eax
c001e4d9:	5b                   	pop    ebx
c001e4da:	5d                   	pop    ebp
c001e4db:	c3                   	ret    
c001e4dc:	c3                   	ret    
c001e4dd:	66 90                	xchg   ax,ax
c001e4df:	90                   	nop

c001e4e0 <__divdi3>:
c001e4e0:	55                   	push   ebp
c001e4e1:	57                   	push   edi
c001e4e2:	56                   	push   esi
c001e4e3:	53                   	push   ebx
c001e4e4:	83 ec 1c             	sub    esp,0x1c
c001e4e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e4eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e4fe:	85 db                	test   ebx,ebx
c001e500:	0f 88 8e 00 00 00    	js     c001e594 <__divdi3+0xb4>
c001e506:	89 dd                	mov    ebp,ebx
c001e508:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e510:	89 d3                	mov    ebx,edx
c001e512:	85 d2                	test   edx,edx
c001e514:	79 0d                	jns    c001e523 <__divdi3+0x43>
c001e516:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e51a:	f7 d8                	neg    eax
c001e51c:	83 d2 00             	adc    edx,0x0
c001e51f:	f7 da                	neg    edx
c001e521:	89 d3                	mov    ebx,edx
c001e523:	89 c7                	mov    edi,eax
c001e525:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e528:	85 db                	test   ebx,ebx
c001e52a:	75 48                	jne    c001e574 <__divdi3+0x94>
c001e52c:	39 ef                	cmp    edi,ebp
c001e52e:	76 24                	jbe    c001e554 <__divdi3+0x74>
c001e530:	89 ea                	mov    edx,ebp
c001e532:	f7 f7                	div    edi
c001e534:	89 c1                	mov    ecx,eax
c001e536:	31 f6                	xor    esi,esi
c001e538:	89 c8                	mov    eax,ecx
c001e53a:	89 f2                	mov    edx,esi
c001e53c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e540:	85 c9                	test   ecx,ecx
c001e542:	74 07                	je     c001e54b <__divdi3+0x6b>
c001e544:	f7 d8                	neg    eax
c001e546:	83 d2 00             	adc    edx,0x0
c001e549:	f7 da                	neg    edx
c001e54b:	83 c4 1c             	add    esp,0x1c
c001e54e:	5b                   	pop    ebx
c001e54f:	5e                   	pop    esi
c001e550:	5f                   	pop    edi
c001e551:	5d                   	pop    ebp
c001e552:	c3                   	ret    
c001e553:	90                   	nop
c001e554:	85 ff                	test   edi,edi
c001e556:	75 0b                	jne    c001e563 <__divdi3+0x83>
c001e558:	b8 01 00 00 00       	mov    eax,0x1
c001e55d:	31 d2                	xor    edx,edx
c001e55f:	f7 f3                	div    ebx
c001e561:	89 c7                	mov    edi,eax
c001e563:	31 d2                	xor    edx,edx
c001e565:	89 e8                	mov    eax,ebp
c001e567:	f7 f7                	div    edi
c001e569:	89 c6                	mov    esi,eax
c001e56b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e56e:	f7 f7                	div    edi
c001e570:	89 c1                	mov    ecx,eax
c001e572:	eb c4                	jmp    c001e538 <__divdi3+0x58>
c001e574:	39 eb                	cmp    ebx,ebp
c001e576:	77 3c                	ja     c001e5b4 <__divdi3+0xd4>
c001e578:	0f bd f3             	bsr    esi,ebx
c001e57b:	83 f6 1f             	xor    esi,0x1f
c001e57e:	75 40                	jne    c001e5c0 <__divdi3+0xe0>
c001e580:	39 eb                	cmp    ebx,ebp
c001e582:	72 09                	jb     c001e58d <__divdi3+0xad>
c001e584:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e587:	0f 87 97 00 00 00    	ja     c001e624 <__divdi3+0x144>
c001e58d:	b9 01 00 00 00       	mov    ecx,0x1
c001e592:	eb a4                	jmp    c001e538 <__divdi3+0x58>
c001e594:	f7 d9                	neg    ecx
c001e596:	83 d3 00             	adc    ebx,0x0
c001e599:	f7 db                	neg    ebx
c001e59b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e59e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e5a2:	89 dd                	mov    ebp,ebx
c001e5a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e5ac:	e9 5f ff ff ff       	jmp    c001e510 <__divdi3+0x30>
c001e5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5b4:	31 f6                	xor    esi,esi
c001e5b6:	31 c9                	xor    ecx,ecx
c001e5b8:	e9 7b ff ff ff       	jmp    c001e538 <__divdi3+0x58>
c001e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c0:	b8 20 00 00 00       	mov    eax,0x20
c001e5c5:	29 f0                	sub    eax,esi
c001e5c7:	89 f1                	mov    ecx,esi
c001e5c9:	d3 e3                	shl    ebx,cl
c001e5cb:	89 fa                	mov    edx,edi
c001e5cd:	88 c1                	mov    cl,al
c001e5cf:	d3 ea                	shr    edx,cl
c001e5d1:	09 da                	or     edx,ebx
c001e5d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5d7:	89 f1                	mov    ecx,esi
c001e5d9:	d3 e7                	shl    edi,cl
c001e5db:	89 eb                	mov    ebx,ebp
c001e5dd:	88 c1                	mov    cl,al
c001e5df:	d3 eb                	shr    ebx,cl
c001e5e1:	89 f1                	mov    ecx,esi
c001e5e3:	d3 e5                	shl    ebp,cl
c001e5e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e5e8:	88 c1                	mov    cl,al
c001e5ea:	d3 ea                	shr    edx,cl
c001e5ec:	09 d5                	or     ebp,edx
c001e5ee:	89 e8                	mov    eax,ebp
c001e5f0:	89 da                	mov    edx,ebx
c001e5f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e5f6:	89 d3                	mov    ebx,edx
c001e5f8:	89 c5                	mov    ebp,eax
c001e5fa:	f7 e7                	mul    edi
c001e5fc:	39 d3                	cmp    ebx,edx
c001e5fe:	72 18                	jb     c001e618 <__divdi3+0x138>
c001e600:	74 0a                	je     c001e60c <__divdi3+0x12c>
c001e602:	89 e9                	mov    ecx,ebp
c001e604:	31 f6                	xor    esi,esi
c001e606:	e9 2d ff ff ff       	jmp    c001e538 <__divdi3+0x58>
c001e60b:	90                   	nop
c001e60c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e60f:	89 f1                	mov    ecx,esi
c001e611:	d3 e7                	shl    edi,cl
c001e613:	39 c7                	cmp    edi,eax
c001e615:	73 eb                	jae    c001e602 <__divdi3+0x122>
c001e617:	90                   	nop
c001e618:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e61b:	31 f6                	xor    esi,esi
c001e61d:	e9 16 ff ff ff       	jmp    c001e538 <__divdi3+0x58>
c001e622:	66 90                	xchg   ax,ax
c001e624:	31 c9                	xor    ecx,ecx
c001e626:	e9 0d ff ff ff       	jmp    c001e538 <__divdi3+0x58>
c001e62b:	90                   	nop

c001e62c <__moddi3>:
c001e62c:	55                   	push   ebp
c001e62d:	57                   	push   edi
c001e62e:	56                   	push   esi
c001e62f:	53                   	push   ebx
c001e630:	83 ec 2c             	sub    esp,0x2c
c001e633:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e637:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e63b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e63f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e643:	85 db                	test   ebx,ebx
c001e645:	0f 88 85 00 00 00    	js     c001e6d0 <__moddi3+0xa4>
c001e64b:	89 de                	mov    esi,ebx
c001e64d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e655:	89 d7                	mov    edi,edx
c001e657:	85 d2                	test   edx,edx
c001e659:	79 09                	jns    c001e664 <__moddi3+0x38>
c001e65b:	f7 d8                	neg    eax
c001e65d:	83 d2 00             	adc    edx,0x0
c001e660:	f7 da                	neg    edx
c001e662:	89 d7                	mov    edi,edx
c001e664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e668:	89 cd                	mov    ebp,ecx
c001e66a:	85 ff                	test   edi,edi
c001e66c:	75 52                	jne    c001e6c0 <__moddi3+0x94>
c001e66e:	89 c3                	mov    ebx,eax
c001e670:	39 f0                	cmp    eax,esi
c001e672:	76 24                	jbe    c001e698 <__moddi3+0x6c>
c001e674:	89 c8                	mov    eax,ecx
c001e676:	89 f2                	mov    edx,esi
c001e678:	f7 f3                	div    ebx
c001e67a:	89 d6                	mov    esi,edx
c001e67c:	89 f0                	mov    eax,esi
c001e67e:	31 d2                	xor    edx,edx
c001e680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e684:	85 c9                	test   ecx,ecx
c001e686:	74 07                	je     c001e68f <__moddi3+0x63>
c001e688:	f7 d8                	neg    eax
c001e68a:	83 d2 00             	adc    edx,0x0
c001e68d:	f7 da                	neg    edx
c001e68f:	83 c4 2c             	add    esp,0x2c
c001e692:	5b                   	pop    ebx
c001e693:	5e                   	pop    esi
c001e694:	5f                   	pop    edi
c001e695:	5d                   	pop    ebp
c001e696:	c3                   	ret    
c001e697:	90                   	nop
c001e698:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e69c:	85 db                	test   ebx,ebx
c001e69e:	75 0d                	jne    c001e6ad <__moddi3+0x81>
c001e6a0:	b8 01 00 00 00       	mov    eax,0x1
c001e6a5:	31 d2                	xor    edx,edx
c001e6a7:	f7 f7                	div    edi
c001e6a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6ad:	89 f0                	mov    eax,esi
c001e6af:	31 d2                	xor    edx,edx
c001e6b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6b5:	f7 f7                	div    edi
c001e6b7:	89 e8                	mov    eax,ebp
c001e6b9:	f7 f7                	div    edi
c001e6bb:	89 d6                	mov    esi,edx
c001e6bd:	eb bd                	jmp    c001e67c <__moddi3+0x50>
c001e6bf:	90                   	nop
c001e6c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6c4:	39 f7                	cmp    edi,esi
c001e6c6:	76 20                	jbe    c001e6e8 <__moddi3+0xbc>
c001e6c8:	89 c8                	mov    eax,ecx
c001e6ca:	89 f2                	mov    edx,esi
c001e6cc:	eb b2                	jmp    c001e680 <__moddi3+0x54>
c001e6ce:	66 90                	xchg   ax,ax
c001e6d0:	f7 d9                	neg    ecx
c001e6d2:	83 d3 00             	adc    ebx,0x0
c001e6d5:	f7 db                	neg    ebx
c001e6d7:	89 de                	mov    esi,ebx
c001e6d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e6e1:	e9 6f ff ff ff       	jmp    c001e655 <__moddi3+0x29>
c001e6e6:	66 90                	xchg   ax,ax
c001e6e8:	0f bd c7             	bsr    eax,edi
c001e6eb:	83 f0 1f             	xor    eax,0x1f
c001e6ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e6f2:	75 24                	jne    c001e718 <__moddi3+0xec>
c001e6f4:	39 f7                	cmp    edi,esi
c001e6f6:	72 06                	jb     c001e6fe <__moddi3+0xd2>
c001e6f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e6fc:	77 0c                	ja     c001e70a <__moddi3+0xde>
c001e6fe:	89 e9                	mov    ecx,ebp
c001e700:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e704:	19 fe                	sbb    esi,edi
c001e706:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e70a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e70e:	89 f2                	mov    edx,esi
c001e710:	e9 6b ff ff ff       	jmp    c001e680 <__moddi3+0x54>
c001e715:	8d 76 00             	lea    esi,[esi+0x0]
c001e718:	b8 20 00 00 00       	mov    eax,0x20
c001e71d:	89 c2                	mov    edx,eax
c001e71f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e723:	29 da                	sub    edx,ebx
c001e725:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e729:	88 d9                	mov    cl,bl
c001e72b:	d3 e7                	shl    edi,cl
c001e72d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e731:	88 d1                	mov    cl,dl
c001e733:	d3 e8                	shr    eax,cl
c001e735:	09 c7                	or     edi,eax
c001e737:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e73b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e73f:	89 d8                	mov    eax,ebx
c001e741:	88 d9                	mov    cl,bl
c001e743:	d3 e7                	shl    edi,cl
c001e745:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e749:	89 f3                	mov    ebx,esi
c001e74b:	88 d1                	mov    cl,dl
c001e74d:	d3 eb                	shr    ebx,cl
c001e74f:	89 c7                	mov    edi,eax
c001e751:	88 c1                	mov    cl,al
c001e753:	d3 e6                	shl    esi,cl
c001e755:	89 e8                	mov    eax,ebp
c001e757:	88 d1                	mov    cl,dl
c001e759:	d3 e8                	shr    eax,cl
c001e75b:	09 f0                	or     eax,esi
c001e75d:	89 f9                	mov    ecx,edi
c001e75f:	d3 e5                	shl    ebp,cl
c001e761:	89 da                	mov    edx,ebx
c001e763:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e767:	89 d3                	mov    ebx,edx
c001e769:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e76d:	89 c6                	mov    esi,eax
c001e76f:	89 d1                	mov    ecx,edx
c001e771:	39 d3                	cmp    ebx,edx
c001e773:	72 27                	jb     c001e79c <__moddi3+0x170>
c001e775:	74 21                	je     c001e798 <__moddi3+0x16c>
c001e777:	29 f5                	sub    ebp,esi
c001e779:	19 cb                	sbb    ebx,ecx
c001e77b:	89 de                	mov    esi,ebx
c001e77d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e781:	d3 e6                	shl    esi,cl
c001e783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e787:	89 f9                	mov    ecx,edi
c001e789:	d3 ed                	shr    ebp,cl
c001e78b:	09 ee                	or     esi,ebp
c001e78d:	89 f0                	mov    eax,esi
c001e78f:	d3 eb                	shr    ebx,cl
c001e791:	89 da                	mov    edx,ebx
c001e793:	e9 e8 fe ff ff       	jmp    c001e680 <__moddi3+0x54>
c001e798:	39 c5                	cmp    ebp,eax
c001e79a:	73 db                	jae    c001e777 <__moddi3+0x14b>
c001e79c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e7a4:	89 d1                	mov    ecx,edx
c001e7a6:	89 c6                	mov    esi,eax
c001e7a8:	eb cd                	jmp    c001e777 <__moddi3+0x14b>
c001e7aa:	66 90                	xchg   ax,ax

c001e7ac <__udivdi3>:
c001e7ac:	55                   	push   ebp
c001e7ad:	57                   	push   edi
c001e7ae:	56                   	push   esi
c001e7af:	53                   	push   ebx
c001e7b0:	83 ec 1c             	sub    esp,0x1c
c001e7b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e7b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e7bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e7c3:	85 d2                	test   edx,edx
c001e7c5:	75 41                	jne    c001e808 <__udivdi3+0x5c>
c001e7c7:	39 f7                	cmp    edi,esi
c001e7c9:	76 15                	jbe    c001e7e0 <__udivdi3+0x34>
c001e7cb:	89 e8                	mov    eax,ebp
c001e7cd:	89 f2                	mov    edx,esi
c001e7cf:	f7 f7                	div    edi
c001e7d1:	31 db                	xor    ebx,ebx
c001e7d3:	89 da                	mov    edx,ebx
c001e7d5:	83 c4 1c             	add    esp,0x1c
c001e7d8:	5b                   	pop    ebx
c001e7d9:	5e                   	pop    esi
c001e7da:	5f                   	pop    edi
c001e7db:	5d                   	pop    ebp
c001e7dc:	c3                   	ret    
c001e7dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7e0:	89 f9                	mov    ecx,edi
c001e7e2:	85 ff                	test   edi,edi
c001e7e4:	75 0b                	jne    c001e7f1 <__udivdi3+0x45>
c001e7e6:	b8 01 00 00 00       	mov    eax,0x1
c001e7eb:	31 d2                	xor    edx,edx
c001e7ed:	f7 f7                	div    edi
c001e7ef:	89 c1                	mov    ecx,eax
c001e7f1:	31 d2                	xor    edx,edx
c001e7f3:	89 f0                	mov    eax,esi
c001e7f5:	f7 f1                	div    ecx
c001e7f7:	89 c3                	mov    ebx,eax
c001e7f9:	89 e8                	mov    eax,ebp
c001e7fb:	f7 f1                	div    ecx
c001e7fd:	89 da                	mov    edx,ebx
c001e7ff:	83 c4 1c             	add    esp,0x1c
c001e802:	5b                   	pop    ebx
c001e803:	5e                   	pop    esi
c001e804:	5f                   	pop    edi
c001e805:	5d                   	pop    ebp
c001e806:	c3                   	ret    
c001e807:	90                   	nop
c001e808:	39 f2                	cmp    edx,esi
c001e80a:	77 1c                	ja     c001e828 <__udivdi3+0x7c>
c001e80c:	0f bd da             	bsr    ebx,edx
c001e80f:	83 f3 1f             	xor    ebx,0x1f
c001e812:	75 24                	jne    c001e838 <__udivdi3+0x8c>
c001e814:	39 f2                	cmp    edx,esi
c001e816:	72 08                	jb     c001e820 <__udivdi3+0x74>
c001e818:	39 ef                	cmp    edi,ebp
c001e81a:	0f 87 84 00 00 00    	ja     c001e8a4 <__udivdi3+0xf8>
c001e820:	b8 01 00 00 00       	mov    eax,0x1
c001e825:	eb ac                	jmp    c001e7d3 <__udivdi3+0x27>
c001e827:	90                   	nop
c001e828:	31 db                	xor    ebx,ebx
c001e82a:	31 c0                	xor    eax,eax
c001e82c:	89 da                	mov    edx,ebx
c001e82e:	83 c4 1c             	add    esp,0x1c
c001e831:	5b                   	pop    ebx
c001e832:	5e                   	pop    esi
c001e833:	5f                   	pop    edi
c001e834:	5d                   	pop    ebp
c001e835:	c3                   	ret    
c001e836:	66 90                	xchg   ax,ax
c001e838:	b8 20 00 00 00       	mov    eax,0x20
c001e83d:	29 d8                	sub    eax,ebx
c001e83f:	88 d9                	mov    cl,bl
c001e841:	d3 e2                	shl    edx,cl
c001e843:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e847:	89 fa                	mov    edx,edi
c001e849:	88 c1                	mov    cl,al
c001e84b:	d3 ea                	shr    edx,cl
c001e84d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e851:	09 d1                	or     ecx,edx
c001e853:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e857:	88 d9                	mov    cl,bl
c001e859:	d3 e7                	shl    edi,cl
c001e85b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e85f:	89 f7                	mov    edi,esi
c001e861:	88 c1                	mov    cl,al
c001e863:	d3 ef                	shr    edi,cl
c001e865:	88 d9                	mov    cl,bl
c001e867:	d3 e6                	shl    esi,cl
c001e869:	89 ea                	mov    edx,ebp
c001e86b:	88 c1                	mov    cl,al
c001e86d:	d3 ea                	shr    edx,cl
c001e86f:	09 d6                	or     esi,edx
c001e871:	89 f0                	mov    eax,esi
c001e873:	89 fa                	mov    edx,edi
c001e875:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e879:	89 d7                	mov    edi,edx
c001e87b:	89 c6                	mov    esi,eax
c001e87d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e881:	39 d7                	cmp    edi,edx
c001e883:	72 13                	jb     c001e898 <__udivdi3+0xec>
c001e885:	74 09                	je     c001e890 <__udivdi3+0xe4>
c001e887:	89 f0                	mov    eax,esi
c001e889:	31 db                	xor    ebx,ebx
c001e88b:	e9 43 ff ff ff       	jmp    c001e7d3 <__udivdi3+0x27>
c001e890:	88 d9                	mov    cl,bl
c001e892:	d3 e5                	shl    ebp,cl
c001e894:	39 c5                	cmp    ebp,eax
c001e896:	73 ef                	jae    c001e887 <__udivdi3+0xdb>
c001e898:	8d 46 ff             	lea    eax,[esi-0x1]
c001e89b:	31 db                	xor    ebx,ebx
c001e89d:	e9 31 ff ff ff       	jmp    c001e7d3 <__udivdi3+0x27>
c001e8a2:	66 90                	xchg   ax,ax
c001e8a4:	31 c0                	xor    eax,eax
c001e8a6:	e9 28 ff ff ff       	jmp    c001e7d3 <__udivdi3+0x27>
c001e8ab:	90                   	nop

c001e8ac <__umoddi3>:
c001e8ac:	55                   	push   ebp
c001e8ad:	57                   	push   edi
c001e8ae:	56                   	push   esi
c001e8af:	53                   	push   ebx
c001e8b0:	83 ec 1c             	sub    esp,0x1c
c001e8b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e8b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e8bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e8bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e8c3:	89 da                	mov    edx,ebx
c001e8c5:	85 c0                	test   eax,eax
c001e8c7:	75 37                	jne    c001e900 <__umoddi3+0x54>
c001e8c9:	39 df                	cmp    edi,ebx
c001e8cb:	76 13                	jbe    c001e8e0 <__umoddi3+0x34>
c001e8cd:	89 f0                	mov    eax,esi
c001e8cf:	f7 f7                	div    edi
c001e8d1:	89 d0                	mov    eax,edx
c001e8d3:	31 d2                	xor    edx,edx
c001e8d5:	83 c4 1c             	add    esp,0x1c
c001e8d8:	5b                   	pop    ebx
c001e8d9:	5e                   	pop    esi
c001e8da:	5f                   	pop    edi
c001e8db:	5d                   	pop    ebp
c001e8dc:	c3                   	ret    
c001e8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e8e0:	89 fd                	mov    ebp,edi
c001e8e2:	85 ff                	test   edi,edi
c001e8e4:	75 0b                	jne    c001e8f1 <__umoddi3+0x45>
c001e8e6:	b8 01 00 00 00       	mov    eax,0x1
c001e8eb:	31 d2                	xor    edx,edx
c001e8ed:	f7 f7                	div    edi
c001e8ef:	89 c5                	mov    ebp,eax
c001e8f1:	89 d8                	mov    eax,ebx
c001e8f3:	31 d2                	xor    edx,edx
c001e8f5:	f7 f5                	div    ebp
c001e8f7:	89 f0                	mov    eax,esi
c001e8f9:	f7 f5                	div    ebp
c001e8fb:	89 d0                	mov    eax,edx
c001e8fd:	eb d4                	jmp    c001e8d3 <__umoddi3+0x27>
c001e8ff:	90                   	nop
c001e900:	89 f1                	mov    ecx,esi
c001e902:	39 d8                	cmp    eax,ebx
c001e904:	76 0a                	jbe    c001e910 <__umoddi3+0x64>
c001e906:	89 f0                	mov    eax,esi
c001e908:	83 c4 1c             	add    esp,0x1c
c001e90b:	5b                   	pop    ebx
c001e90c:	5e                   	pop    esi
c001e90d:	5f                   	pop    edi
c001e90e:	5d                   	pop    ebp
c001e90f:	c3                   	ret    
c001e910:	0f bd e8             	bsr    ebp,eax
c001e913:	83 f5 1f             	xor    ebp,0x1f
c001e916:	75 1c                	jne    c001e934 <__umoddi3+0x88>
c001e918:	39 d8                	cmp    eax,ebx
c001e91a:	72 04                	jb     c001e920 <__umoddi3+0x74>
c001e91c:	39 f7                	cmp    edi,esi
c001e91e:	77 08                	ja     c001e928 <__umoddi3+0x7c>
c001e920:	89 da                	mov    edx,ebx
c001e922:	29 fe                	sub    esi,edi
c001e924:	19 c2                	sbb    edx,eax
c001e926:	89 f1                	mov    ecx,esi
c001e928:	89 c8                	mov    eax,ecx
c001e92a:	83 c4 1c             	add    esp,0x1c
c001e92d:	5b                   	pop    ebx
c001e92e:	5e                   	pop    esi
c001e92f:	5f                   	pop    edi
c001e930:	5d                   	pop    ebp
c001e931:	c3                   	ret    
c001e932:	66 90                	xchg   ax,ax
c001e934:	ba 20 00 00 00       	mov    edx,0x20
c001e939:	29 ea                	sub    edx,ebp
c001e93b:	89 e9                	mov    ecx,ebp
c001e93d:	d3 e0                	shl    eax,cl
c001e93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e943:	89 f8                	mov    eax,edi
c001e945:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e949:	88 d1                	mov    cl,dl
c001e94b:	d3 e8                	shr    eax,cl
c001e94d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e951:	09 c1                	or     ecx,eax
c001e953:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e957:	89 e9                	mov    ecx,ebp
c001e959:	d3 e7                	shl    edi,cl
c001e95b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e95f:	89 d8                	mov    eax,ebx
c001e961:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e965:	88 d1                	mov    cl,dl
c001e967:	d3 e8                	shr    eax,cl
c001e969:	89 c7                	mov    edi,eax
c001e96b:	89 e9                	mov    ecx,ebp
c001e96d:	d3 e3                	shl    ebx,cl
c001e96f:	89 f0                	mov    eax,esi
c001e971:	88 d1                	mov    cl,dl
c001e973:	d3 e8                	shr    eax,cl
c001e975:	09 d8                	or     eax,ebx
c001e977:	89 e9                	mov    ecx,ebp
c001e979:	d3 e6                	shl    esi,cl
c001e97b:	89 f3                	mov    ebx,esi
c001e97d:	89 fa                	mov    edx,edi
c001e97f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e983:	89 d1                	mov    ecx,edx
c001e985:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e989:	89 c6                	mov    esi,eax
c001e98b:	89 d7                	mov    edi,edx
c001e98d:	39 d1                	cmp    ecx,edx
c001e98f:	72 27                	jb     c001e9b8 <__umoddi3+0x10c>
c001e991:	74 21                	je     c001e9b4 <__umoddi3+0x108>
c001e993:	89 ca                	mov    edx,ecx
c001e995:	29 f3                	sub    ebx,esi
c001e997:	19 fa                	sbb    edx,edi
c001e999:	89 d0                	mov    eax,edx
c001e99b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e99f:	d3 e0                	shl    eax,cl
c001e9a1:	89 e9                	mov    ecx,ebp
c001e9a3:	d3 eb                	shr    ebx,cl
c001e9a5:	09 d8                	or     eax,ebx
c001e9a7:	d3 ea                	shr    edx,cl
c001e9a9:	83 c4 1c             	add    esp,0x1c
c001e9ac:	5b                   	pop    ebx
c001e9ad:	5e                   	pop    esi
c001e9ae:	5f                   	pop    edi
c001e9af:	5d                   	pop    ebp
c001e9b0:	c3                   	ret    
c001e9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9b4:	39 c3                	cmp    ebx,eax
c001e9b6:	73 db                	jae    c001e993 <__umoddi3+0xe7>
c001e9b8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e9bc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e9c0:	89 d7                	mov    edi,edx
c001e9c2:	89 c6                	mov    esi,eax
c001e9c4:	eb cd                	jmp    c001e993 <__umoddi3+0xe7>
c001e9c6:	66 90                	xchg   ax,ax
c001e9c8:	66 90                	xchg   ax,ax
c001e9ca:	66 90                	xchg   ax,ax
c001e9cc:	66 90                	xchg   ax,ax
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <fabs>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e9e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9e7:	dd 04 24             	fld    QWORD PTR [esp]
c001e9ea:	83 c4 0c             	add    esp,0xc
c001e9ed:	c3                   	ret    
c001e9ee:	66 90                	xchg   ax,ax

c001e9f0 <lrint>:
c001e9f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e9f4:	83 ec 04             	sub    esp,0x4
c001e9f7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9fa:	58                   	pop    eax
c001e9fb:	c3                   	ret    

c001e9fc <lrintf>:
c001e9fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001ea00:	83 ec 04             	sub    esp,0x4
c001ea03:	db 1c 24             	fistp  DWORD PTR [esp]
c001ea06:	58                   	pop    eax
c001ea07:	c3                   	ret    

Disassembly of section .init:

c001ea08 <_init>:
c001ea08:	55                   	push   ebp
c001ea09:	89 e5                	mov    ebp,esp
c001ea0b:	e8 08 17 fe ff       	call   c0000118 <frame_dummy>
c001ea10:	e8 a3 fa ff ff       	call   c001e4b8 <__do_global_ctors_aux>
c001ea15:	5d                   	pop    ebp
c001ea16:	c3                   	ret    

Disassembly of section .fini:

c001ea17 <_fini>:
c001ea17:	55                   	push   ebp
c001ea18:	89 e5                	mov    ebp,esp
c001ea1a:	e8 89 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001ea1f:	5d                   	pop    ebp
c001ea20:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ea22 <Computer::~Computer()>:
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	ba 0c 04 02 c0       	mov    edx,0xc002040c
c001ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2e:	89 10                	mov    DWORD PTR [eax],edx
c001ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	50                   	push   eax
c001ea38:	e8 a3 18 ff ff       	call   c00102e0 <Device::~Device()>
c001ea3d:	83 c4 10             	add    esp,0x10
c001ea40:	90                   	nop
c001ea41:	83 c4 0c             	add    esp,0xc
c001ea44:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ea46 <Computer::~Computer()>:
c001ea46:	83 ec 0c             	sub    esp,0xc
c001ea49:	83 ec 0c             	sub    esp,0xc
c001ea4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea50:	e8 cd ff ff ff       	call   c001ea22 <Computer::~Computer()>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	83 ec 08             	sub    esp,0x8
c001ea5b:	68 ec 01 00 00       	push   0x1ec
c001ea60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea64:	e8 ea 04 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 c4 0c             	add    esp,0xc
c001ea6f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea70 <idleCommon()>:
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	e8 8c 91 ff ff       	call   c0017c04 <lockScheduler()>
c001ea78:	e8 bb 94 ff ff       	call   c0017f38 <schedule()>
c001ea7d:	83 c4 0c             	add    esp,0xc
c001ea80:	e9 81 91 ff ff       	jmp    c0017c06 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea85 <CPU::readCR3()>:
c001ea85:	83 ec 10             	sub    esp,0x10
c001ea88:	0f 20 d8             	mov    eax,cr3
c001ea8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea97 <CPU::writeCR3(unsigned long)>:
c001ea97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9b:	0f 22 d8             	mov    cr3,eax
c001ea9e:	90                   	nop
c001ea9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001eaa0 <LinkedList<UnixFile>::~LinkedList()>:
c001eaa0:	90                   	nop
c001eaa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001eaa2 <LinkedList<UnixFile>::LinkedList()>:
c001eaa2:	83 ec 0c             	sub    esp,0xc
c001eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eae5:	83 ec 0c             	sub    esp,0xc
c001eae8:	68 a5 06 02 c0       	push   0xc00206a5
c001eaed:	e8 41 05 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001eaf2:	83 c4 10             	add    esp,0x10
c001eaf5:	90                   	nop
c001eaf6:	83 c4 0c             	add    esp,0xc
c001eaf9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001eafa <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb02:	75 10                	jne    c001eb14 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eb04:	83 ec 0c             	sub    esp,0xc
c001eb07:	68 c0 06 02 c0       	push   0xc00206c0
c001eb0c:	e8 b7 61 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001eb11:	83 c4 10             	add    esp,0x10
c001eb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb18:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1a:	85 c0                	test   eax,eax
c001eb1c:	74 34                	je     c001eb52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb25:	85 c0                	test   eax,eax
c001eb27:	74 29                	je     c001eb52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb34:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb50:	eb 65                	jmp    c001ebb7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb58:	85 c0                	test   eax,eax
c001eb5a:	75 4b                	jne    c001eba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb63:	85 c0                	test   eax,eax
c001eb65:	75 40                	jne    c001eba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb6f:	89 10                	mov    DWORD PTR [eax],edx
c001eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb83:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb91:	85 c0                	test   eax,eax
c001eb93:	74 22                	je     c001ebb7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb95:	83 ec 0c             	sub    esp,0xc
c001eb98:	68 e2 06 02 c0       	push   0xc00206e2
c001eb9d:	e8 26 61 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001eba2:	83 c4 10             	add    esp,0x10
c001eba5:	eb 10                	jmp    c001ebb7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eba7:	83 ec 0c             	sub    esp,0xc
c001ebaa:	68 ec 06 02 c0       	push   0xc00206ec
c001ebaf:	e8 14 61 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ebb4:	83 c4 10             	add    esp,0x10
c001ebb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebbe:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebc8:	90                   	nop
c001ebc9:	83 c4 0c             	add    esp,0xc
c001ebcc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ebce <LinkedList<UnixFile>::getFirstElement()>:
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ebd6 <LinkedList<UnixFile>::removeFirst()>:
c001ebd6:	83 ec 0c             	sub    esp,0xc
c001ebd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebdf:	85 c0                	test   eax,eax
c001ebe1:	75 12                	jne    c001ebf5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ebe3:	83 ec 0c             	sub    esp,0xc
c001ebe6:	68 f8 06 02 c0       	push   0xc00206f8
c001ebeb:	e8 d8 60 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ebf0:	83 c4 10             	add    esp,0x10
c001ebf3:	eb 7e                	jmp    c001ec73 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ebf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebff:	85 c0                	test   eax,eax
c001ec01:	74 10                	je     c001ec13 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	68 43 07 02 c0       	push   0xc0020743
c001ec0b:	e8 b8 60 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec1c:	85 c0                	test   eax,eax
c001ec1e:	75 33                	jne    c001ec53 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ec20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec3c:	83 f8 01             	cmp    eax,0x1
c001ec3f:	74 21                	je     c001ec62 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec41:	83 ec 0c             	sub    esp,0xc
c001ec44:	68 1c 07 02 c0       	push   0xc002071c
c001ec49:	e8 7a 60 ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	eb 0f                	jmp    c001ec62 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec59:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ec5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec60:	89 10                	mov    DWORD PTR [eax],edx
c001ec62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec66:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec69:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec73:	83 c4 0c             	add    esp,0xc
c001ec76:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ec78 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ec78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec7f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ec80 <DriverlessDevice::~DriverlessDevice()>:
c001ec80:	ba 64 0e 02 c0       	mov    edx,0xc0020e64
c001ec85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec89:	89 10                	mov    DWORD PTR [eax],edx
c001ec8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec8f:	50                   	push   eax
c001ec90:	e8 4b 16 ff ff       	call   c00102e0 <Device::~Device()>
c001ec95:	83 c4 04             	add    esp,0x4
c001ec98:	90                   	nop
c001ec99:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ec9a <DriverlessDevice::~DriverlessDevice()>:
c001ec9a:	83 ec 0c             	sub    esp,0xc
c001ec9d:	83 ec 0c             	sub    esp,0xc
c001eca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eca4:	e8 d7 ff ff ff       	call   c001ec80 <DriverlessDevice::~DriverlessDevice()>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	83 ec 08             	sub    esp,0x8
c001ecaf:	68 58 01 00 00       	push   0x158
c001ecb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecb8:	e8 96 02 ff ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001ecbd:	83 c4 10             	add    esp,0x10
c001ecc0:	83 c4 0c             	add    esp,0xc
c001ecc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ecc4 <LinkedList<Device>::addElement(Device*)>:
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eccc:	75 10                	jne    c001ecde <LinkedList<Device>::addElement(Device*)+0x1a>
c001ecce:	83 ec 0c             	sub    esp,0xc
c001ecd1:	68 c0 06 02 c0       	push   0xc00206c0
c001ecd6:	e8 ed 5f ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ece4:	85 c0                	test   eax,eax
c001ece6:	74 3a                	je     c001ed22 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecef:	85 c0                	test   eax,eax
c001ecf1:	74 2f                	je     c001ed22 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ecf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecfe:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ed04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed16:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed20:	eb 68                	jmp    c001ed8a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed26:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed28:	85 c0                	test   eax,eax
c001ed2a:	75 4e                	jne    c001ed7a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed33:	85 c0                	test   eax,eax
c001ed35:	75 43                	jne    c001ed7a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed3f:	89 10                	mov    DWORD PTR [eax],edx
c001ed41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed53:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed64:	85 c0                	test   eax,eax
c001ed66:	74 22                	je     c001ed8a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	68 e2 06 02 c0       	push   0xc00206e2
c001ed70:	e8 53 5f ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	eb 10                	jmp    c001ed8a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed7a:	83 ec 0c             	sub    esp,0xc
c001ed7d:	68 ec 06 02 c0       	push   0xc00206ec
c001ed82:	e8 41 5f ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed91:	8d 50 01             	lea    edx,[eax+0x1]
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed9b:	90                   	nop
c001ed9c:	83 c4 0c             	add    esp,0xc
c001ed9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eda0 <LinkedList<Device>::LinkedList()>:
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ede3:	83 ec 0c             	sub    esp,0xc
c001ede6:	68 a5 06 02 c0       	push   0xc00206a5
c001edeb:	e8 43 02 ff ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001edf0:	83 c4 10             	add    esp,0x10
c001edf3:	90                   	nop
c001edf4:	83 c4 0c             	add    esp,0xc
c001edf7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001edf8 <CPU::readCR0()>:
c001edf8:	83 ec 10             	sub    esp,0x10
c001edfb:	0f 20 c0             	mov    eax,cr0
c001edfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee06:	83 c4 10             	add    esp,0x10
c001ee09:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001ee0a <CPU::writeCR0(unsigned long)>:
c001ee0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0e:	0f 22 c0             	mov    cr0,eax
c001ee11:	90                   	nop
c001ee12:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ee13 <CPU::readDR0()>:
c001ee13:	83 ec 10             	sub    esp,0x10
c001ee16:	0f 21 c0             	mov    eax,db0
c001ee19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee21:	83 c4 10             	add    esp,0x10
c001ee24:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ee25 <CPU::readDR1()>:
c001ee25:	83 ec 10             	sub    esp,0x10
c001ee28:	0f 21 c8             	mov    eax,db1
c001ee2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ee37 <CPU::readDR2()>:
c001ee37:	83 ec 10             	sub    esp,0x10
c001ee3a:	0f 21 d0             	mov    eax,db2
c001ee3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee45:	83 c4 10             	add    esp,0x10
c001ee48:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ee49 <CPU::readDR3()>:
c001ee49:	83 ec 10             	sub    esp,0x10
c001ee4c:	0f 21 d8             	mov    eax,db3
c001ee4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee57:	83 c4 10             	add    esp,0x10
c001ee5a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ee5b <CPU::readDR6()>:
c001ee5b:	83 ec 10             	sub    esp,0x10
c001ee5e:	0f 21 f0             	mov    eax,db6
c001ee61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee69:	83 c4 10             	add    esp,0x10
c001ee6c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ee6d <CPU::readDR7()>:
c001ee6d:	83 ec 10             	sub    esp,0x10
c001ee70:	0f 21 f8             	mov    eax,db7
c001ee73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee7b:	83 c4 10             	add    esp,0x10
c001ee7e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ee80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ee80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee86:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ee88 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ee88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee8e:	85 c0                	test   eax,eax
c001ee90:	75 0e                	jne    c001eea0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee99:	85 c0                	test   eax,eax
c001ee9b:	75 03                	jne    c001eea0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee9d:	b0 01                	mov    al,0x1
c001ee9f:	c3                   	ret    
c001eea0:	b0 00                	mov    al,0x0
c001eea2:	90                   	nop
c001eea3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeab:	8b 00                	mov    eax,DWORD PTR [eax]
c001eead:	85 c0                	test   eax,eax
c001eeaf:	75 15                	jne    c001eec6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	68 f8 06 02 c0       	push   0xc00206f8
c001eeb9:	e8 0a 5e ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001eebe:	83 c4 10             	add    esp,0x10
c001eec1:	e9 88 00 00 00       	jmp    c001ef4e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eecd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eed0:	85 c0                	test   eax,eax
c001eed2:	0f 95 c0             	setne  al
c001eed5:	84 c0                	test   al,al
c001eed7:	74 10                	je     c001eee9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eed9:	83 ec 0c             	sub    esp,0xc
c001eedc:	68 43 07 02 c0       	push   0xc0020743
c001eee1:	e8 e2 5d ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001eee6:	83 c4 10             	add    esp,0x10
c001eee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeed:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eef2:	85 c0                	test   eax,eax
c001eef4:	0f 94 c0             	sete   al
c001eef7:	84 c0                	test   al,al
c001eef9:	74 33                	je     c001ef2e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef17:	83 f8 01             	cmp    eax,0x1
c001ef1a:	74 21                	je     c001ef3d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ef1c:	83 ec 0c             	sub    esp,0xc
c001ef1f:	68 1c 07 02 c0       	push   0xc002071c
c001ef24:	e8 9f 5d ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ef29:	83 c4 10             	add    esp,0x10
c001ef2c:	eb 0f                	jmp    c001ef3d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ef2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef32:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef34:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	89 10                	mov    DWORD PTR [eax],edx
c001ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef44:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef4e:	83 c4 0c             	add    esp,0xc
c001ef51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ef52 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ef52:	83 ec 0c             	sub    esp,0xc
c001ef55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef5a:	75 10                	jne    c001ef6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	68 c0 06 02 c0       	push   0xc00206c0
c001ef64:	e8 5f 5d ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef72:	85 c0                	test   eax,eax
c001ef74:	74 34                	je     c001efaa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef7d:	85 c0                	test   eax,eax
c001ef7f:	74 29                	je     c001efaa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef8c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ef8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efa1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001efa8:	eb 65                	jmp    c001f00f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efae:	8b 00                	mov    eax,DWORD PTR [eax]
c001efb0:	85 c0                	test   eax,eax
c001efb2:	75 4b                	jne    c001efff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efbb:	85 c0                	test   eax,eax
c001efbd:	75 40                	jne    c001efff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efc7:	89 10                	mov    DWORD PTR [eax],edx
c001efc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efd1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001efd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efdb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001efe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efe9:	85 c0                	test   eax,eax
c001efeb:	74 22                	je     c001f00f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efed:	83 ec 0c             	sub    esp,0xc
c001eff0:	68 e2 06 02 c0       	push   0xc00206e2
c001eff5:	e8 ce 5c ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001effa:	83 c4 10             	add    esp,0x10
c001effd:	eb 10                	jmp    c001f00f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efff:	83 ec 0c             	sub    esp,0xc
c001f002:	68 ec 06 02 c0       	push   0xc00206ec
c001f007:	e8 bc 5c ff ff       	call   c0014cc8 <Krnl::panic(char const*)>
c001f00c:	83 c4 10             	add    esp,0x10
c001f00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f013:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f016:	8d 50 01             	lea    edx,[eax+0x1]
c001f019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f020:	90                   	nop
c001f021:	83 c4 0c             	add    esp,0xc
c001f024:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f026 <ACPI::~ACPI()>:
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	89 10                	mov    DWORD PTR [eax],edx
c001f034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	50                   	push   eax
c001f03c:	e8 9f 12 ff ff       	call   c00102e0 <Device::~Device()>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	90                   	nop
c001f045:	83 c4 0c             	add    esp,0xc
c001f048:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f04a <ACPI::~ACPI()>:
c001f04a:	83 ec 0c             	sub    esp,0xc
c001f04d:	83 ec 0c             	sub    esp,0xc
c001f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f054:	e8 cd ff ff ff       	call   c001f026 <ACPI::~ACPI()>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	83 ec 08             	sub    esp,0x8
c001f05f:	68 68 22 00 00       	push   0x2268
c001f064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f068:	e8 e6 fe fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	83 c4 0c             	add    esp,0xc
c001f073:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f074 <CPU::~CPU()>:
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	ba 40 18 02 c0       	mov    edx,0xc0021840
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	89 10                	mov    DWORD PTR [eax],edx
c001f082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	50                   	push   eax
c001f08a:	e8 51 12 ff ff       	call   c00102e0 <Device::~Device()>
c001f08f:	83 c4 10             	add    esp,0x10
c001f092:	90                   	nop
c001f093:	83 c4 0c             	add    esp,0xc
c001f096:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f098 <CPU::~CPU()>:
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	83 ec 0c             	sub    esp,0xc
c001f09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a2:	e8 cd ff ff ff       	call   c001f074 <CPU::~CPU()>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	83 ec 08             	sub    esp,0x8
c001f0ad:	68 98 11 00 00       	push   0x1198
c001f0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b6:	e8 98 fe fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f0bb:	83 c4 10             	add    esp,0x10
c001f0be:	83 c4 0c             	add    esp,0xc
c001f0c1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f0c2 <CPU::readCR4()>:
c001f0c2:	83 ec 10             	sub    esp,0x10
c001f0c5:	0f 20 e0             	mov    eax,cr4
c001f0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0d0:	83 c4 10             	add    esp,0x10
c001f0d3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0d4 <CPU::writeDR7(unsigned long)>:
c001f0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d8:	0f 23 f8             	mov    db7,eax
c001f0db:	90                   	nop
c001f0dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0dd <CPU::writeCR4(unsigned long)>:
c001f0dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e1:	0f 22 e0             	mov    cr4,eax
c001f0e4:	90                   	nop
c001f0e5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f0e6 <CPU::readCR2()>:
c001f0e6:	83 ec 10             	sub    esp,0x10
c001f0e9:	0f 20 d0             	mov    eax,cr2
c001f0ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0f4:	83 c4 10             	add    esp,0x10
c001f0f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f0f8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f0f8:	90                   	nop
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f0fa <ThreadControlBlock::ThreadControlBlock()>:
c001f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f109:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f114:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f11b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f11f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f12a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f132:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f136:	90                   	nop
c001f137:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f149:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f169:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f174:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f17b:	83 ec 0c             	sub    esp,0xc
c001f17e:	68 a5 06 02 c0       	push   0xc00206a5
c001f183:	e8 ab fe fe ff       	call   c000f033 <Dbg::kprintf(char const*, ...)>
c001f188:	83 c4 10             	add    esp,0x10
c001f18b:	90                   	nop
c001f18c:	83 c4 0c             	add    esp,0xc
c001f18f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f190 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f194:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f197:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f198 <PCI::~PCI()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	ba 58 25 02 c0       	mov    edx,0xc0022558
c001f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	50                   	push   eax
c001f1ae:	e8 3d 0b ff ff       	call   c000fcf0 <Bus::~Bus()>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f1bc <PCI::~PCI()>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c6:	e8 cd ff ff ff       	call   c001f198 <PCI::~PCI()>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 ec 08             	sub    esp,0x8
c001f1d1:	68 58 01 00 00       	push   0x158
c001f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1da:	e8 74 fd fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f1e6 <IDE::~IDE()>:
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c001f1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f2:	89 10                	mov    DWORD PTR [eax],edx
c001f1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	50                   	push   eax
c001f1fc:	e8 f5 15 ff ff       	call   c00107f6 <HardDiskController::~HardDiskController()>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	90                   	nop
c001f205:	83 c4 0c             	add    esp,0xc
c001f208:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f20a <IDE::~IDE()>:
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	83 ec 0c             	sub    esp,0xc
c001f210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f214:	e8 cd ff ff ff       	call   c001f1e6 <IDE::~IDE()>
c001f219:	83 c4 10             	add    esp,0x10
c001f21c:	83 ec 08             	sub    esp,0x8
c001f21f:	68 70 02 00 00       	push   0x270
c001f224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f228:	e8 26 fd fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f22d:	83 c4 10             	add    esp,0x10
c001f230:	83 c4 0c             	add    esp,0xc
c001f233:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f234 <ATA::~ATA()>:
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c001f23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f240:	89 10                	mov    DWORD PTR [eax],edx
c001f242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	50                   	push   eax
c001f24a:	e8 85 16 ff ff       	call   c00108d4 <PhysicalDisk::~PhysicalDisk()>
c001f24f:	83 c4 10             	add    esp,0x10
c001f252:	90                   	nop
c001f253:	83 c4 0c             	add    esp,0xc
c001f256:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f258 <ATA::~ATA()>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	83 ec 0c             	sub    esp,0xc
c001f25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f262:	e8 cd ff ff ff       	call   c001f234 <ATA::~ATA()>
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	83 ec 08             	sub    esp,0x8
c001f26d:	68 7c 01 00 00       	push   0x17c
c001f272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f276:	e8 d8 fc fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f27b:	83 c4 10             	add    esp,0x10
c001f27e:	83 c4 0c             	add    esp,0xc
c001f281:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f282 <ATAPI::~ATAPI()>:
c001f282:	83 ec 0c             	sub    esp,0xc
c001f285:	ba 78 28 02 c0       	mov    edx,0xc0022878
c001f28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28e:	89 10                	mov    DWORD PTR [eax],edx
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	50                   	push   eax
c001f298:	e8 37 16 ff ff       	call   c00108d4 <PhysicalDisk::~PhysicalDisk()>
c001f29d:	83 c4 10             	add    esp,0x10
c001f2a0:	90                   	nop
c001f2a1:	83 c4 0c             	add    esp,0xc
c001f2a4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f2a6 <ATAPI::~ATAPI()>:
c001f2a6:	83 ec 0c             	sub    esp,0xc
c001f2a9:	83 ec 0c             	sub    esp,0xc
c001f2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b0:	e8 cd ff ff ff       	call   c001f282 <ATAPI::~ATAPI()>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	83 ec 08             	sub    esp,0x8
c001f2bb:	68 80 01 00 00       	push   0x180
c001f2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c4:	e8 8a fc fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f2c9:	83 c4 10             	add    esp,0x10
c001f2cc:	83 c4 0c             	add    esp,0xc
c001f2cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f2d0 <AVX::~AVX()>:
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	ba b4 28 02 c0       	mov    edx,0xc00228b4
c001f2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2dc:	89 10                	mov    DWORD PTR [eax],edx
c001f2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e2:	83 ec 0c             	sub    esp,0xc
c001f2e5:	50                   	push   eax
c001f2e6:	e8 6d 16 ff ff       	call   c0010958 <FPU::~FPU()>
c001f2eb:	83 c4 10             	add    esp,0x10
c001f2ee:	90                   	nop
c001f2ef:	83 c4 0c             	add    esp,0xc
c001f2f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2f4 <AVX::~AVX()>:
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	83 ec 0c             	sub    esp,0xc
c001f2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fe:	e8 cd ff ff ff       	call   c001f2d0 <AVX::~AVX()>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	83 ec 08             	sub    esp,0x8
c001f309:	68 58 01 00 00       	push   0x158
c001f30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f312:	e8 3c fc fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f317:	83 c4 10             	add    esp,0x10
c001f31a:	83 c4 0c             	add    esp,0xc
c001f31d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f31e <MMX::~MMX()>:
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	ba f4 28 02 c0       	mov    edx,0xc00228f4
c001f326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32a:	89 10                	mov    DWORD PTR [eax],edx
c001f32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f330:	83 ec 0c             	sub    esp,0xc
c001f333:	50                   	push   eax
c001f334:	e8 1f 16 ff ff       	call   c0010958 <FPU::~FPU()>
c001f339:	83 c4 10             	add    esp,0x10
c001f33c:	90                   	nop
c001f33d:	83 c4 0c             	add    esp,0xc
c001f340:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f342 <MMX::~MMX()>:
c001f342:	83 ec 0c             	sub    esp,0xc
c001f345:	83 ec 0c             	sub    esp,0xc
c001f348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f34c:	e8 cd ff ff ff       	call   c001f31e <MMX::~MMX()>
c001f351:	83 c4 10             	add    esp,0x10
c001f354:	83 ec 08             	sub    esp,0x8
c001f357:	68 58 01 00 00       	push   0x158
c001f35c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f360:	e8 ee fb fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	83 c4 0c             	add    esp,0xc
c001f36b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f36c <SSE::~SSE()>:
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	ba 34 29 02 c0       	mov    edx,0xc0022934
c001f374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f378:	89 10                	mov    DWORD PTR [eax],edx
c001f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	50                   	push   eax
c001f382:	e8 d1 15 ff ff       	call   c0010958 <FPU::~FPU()>
c001f387:	83 c4 10             	add    esp,0x10
c001f38a:	90                   	nop
c001f38b:	83 c4 0c             	add    esp,0xc
c001f38e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f390 <SSE::~SSE()>:
c001f390:	83 ec 0c             	sub    esp,0xc
c001f393:	83 ec 0c             	sub    esp,0xc
c001f396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f39a:	e8 cd ff ff ff       	call   c001f36c <SSE::~SSE()>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	83 ec 08             	sub    esp,0x8
c001f3a5:	68 58 01 00 00       	push   0x158
c001f3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ae:	e8 a0 fb fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f3b3:	83 c4 10             	add    esp,0x10
c001f3b6:	83 c4 0c             	add    esp,0xc
c001f3b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f3ba <x87::~x87()>:
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	ba 74 29 02 c0       	mov    edx,0xc0022974
c001f3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c6:	89 10                	mov    DWORD PTR [eax],edx
c001f3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	50                   	push   eax
c001f3d0:	e8 83 15 ff ff       	call   c0010958 <FPU::~FPU()>
c001f3d5:	83 c4 10             	add    esp,0x10
c001f3d8:	90                   	nop
c001f3d9:	83 c4 0c             	add    esp,0xc
c001f3dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f3de <x87::~x87()>:
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e8:	e8 cd ff ff ff       	call   c001f3ba <x87::~x87()>
c001f3ed:	83 c4 10             	add    esp,0x10
c001f3f0:	83 ec 08             	sub    esp,0x8
c001f3f3:	68 58 01 00 00       	push   0x158
c001f3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3fc:	e8 52 fb fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f401:	83 c4 10             	add    esp,0x10
c001f404:	83 c4 0c             	add    esp,0xc
c001f407:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f408 <IOAPIC::~IOAPIC()>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	ba cc 2a 02 c0       	mov    edx,0xc0022acc
c001f410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f414:	89 10                	mov    DWORD PTR [eax],edx
c001f416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f41a:	83 ec 0c             	sub    esp,0xc
c001f41d:	50                   	push   eax
c001f41e:	e8 bd 0e ff ff       	call   c00102e0 <Device::~Device()>
c001f423:	83 c4 10             	add    esp,0x10
c001f426:	90                   	nop
c001f427:	83 c4 0c             	add    esp,0xc
c001f42a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f42c <IOAPIC::~IOAPIC()>:
c001f42c:	83 ec 0c             	sub    esp,0xc
c001f42f:	83 ec 0c             	sub    esp,0xc
c001f432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f436:	e8 cd ff ff ff       	call   c001f408 <IOAPIC::~IOAPIC()>
c001f43b:	83 c4 10             	add    esp,0x10
c001f43e:	83 ec 08             	sub    esp,0x8
c001f441:	68 68 01 00 00       	push   0x168
c001f446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f44a:	e8 04 fb fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	83 c4 0c             	add    esp,0xc
c001f455:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f456 <APIC::~APIC()>:
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c001f45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f462:	89 10                	mov    DWORD PTR [eax],edx
c001f464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	50                   	push   eax
c001f46c:	e8 a5 19 ff ff       	call   c0010e16 <InterruptController::~InterruptController()>
c001f471:	83 c4 10             	add    esp,0x10
c001f474:	90                   	nop
c001f475:	83 c4 0c             	add    esp,0xc
c001f478:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f47a <APIC::~APIC()>:
c001f47a:	83 ec 0c             	sub    esp,0xc
c001f47d:	83 ec 0c             	sub    esp,0xc
c001f480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f484:	e8 cd ff ff ff       	call   c001f456 <APIC::~APIC()>
c001f489:	83 c4 10             	add    esp,0x10
c001f48c:	83 ec 08             	sub    esp,0x8
c001f48f:	68 58 21 00 00       	push   0x2158
c001f494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f498:	e8 b6 fa fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f49d:	83 c4 10             	add    esp,0x10
c001f4a0:	83 c4 0c             	add    esp,0xc
c001f4a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f4a4 <PIC::~PIC()>:
c001f4a4:	83 ec 0c             	sub    esp,0xc
c001f4a7:	ba 1c 2b 02 c0       	mov    edx,0xc0022b1c
c001f4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b0:	89 10                	mov    DWORD PTR [eax],edx
c001f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b6:	83 ec 0c             	sub    esp,0xc
c001f4b9:	50                   	push   eax
c001f4ba:	e8 57 19 ff ff       	call   c0010e16 <InterruptController::~InterruptController()>
c001f4bf:	83 c4 10             	add    esp,0x10
c001f4c2:	90                   	nop
c001f4c3:	83 c4 0c             	add    esp,0xc
c001f4c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f4c8 <PIC::~PIC()>:
c001f4c8:	83 ec 0c             	sub    esp,0xc
c001f4cb:	83 ec 0c             	sub    esp,0xc
c001f4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d2:	e8 cd ff ff ff       	call   c001f4a4 <PIC::~PIC()>
c001f4d7:	83 c4 10             	add    esp,0x10
c001f4da:	83 ec 08             	sub    esp,0x8
c001f4dd:	68 58 21 00 00       	push   0x2158
c001f4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e6:	e8 68 fa fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	83 c4 0c             	add    esp,0xc
c001f4f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4f2 <APICTimer::~APICTimer()>:
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001f4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fe:	89 10                	mov    DWORD PTR [eax],edx
c001f500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	50                   	push   eax
c001f508:	e8 75 2f ff ff       	call   c0012482 <Timer::~Timer()>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	90                   	nop
c001f511:	83 c4 0c             	add    esp,0xc
c001f514:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f516 <APICTimer::~APICTimer()>:
c001f516:	83 ec 0c             	sub    esp,0xc
c001f519:	83 ec 0c             	sub    esp,0xc
c001f51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f520:	e8 cd ff ff ff       	call   c001f4f2 <APICTimer::~APICTimer()>
c001f525:	83 c4 10             	add    esp,0x10
c001f528:	83 ec 08             	sub    esp,0x8
c001f52b:	68 60 01 00 00       	push   0x160
c001f530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f534:	e8 1a fa fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f539:	83 c4 10             	add    esp,0x10
c001f53c:	83 c4 0c             	add    esp,0xc
c001f53f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f540 <PIT::~PIT()>:
c001f540:	83 ec 0c             	sub    esp,0xc
c001f543:	ba c0 2b 02 c0       	mov    edx,0xc0022bc0
c001f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54c:	89 10                	mov    DWORD PTR [eax],edx
c001f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f552:	83 ec 0c             	sub    esp,0xc
c001f555:	50                   	push   eax
c001f556:	e8 27 2f ff ff       	call   c0012482 <Timer::~Timer()>
c001f55b:	83 c4 10             	add    esp,0x10
c001f55e:	90                   	nop
c001f55f:	83 c4 0c             	add    esp,0xc
c001f562:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f564 <PIT::~PIT()>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	83 ec 0c             	sub    esp,0xc
c001f56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f56e:	e8 cd ff ff ff       	call   c001f540 <PIT::~PIT()>
c001f573:	83 c4 10             	add    esp,0x10
c001f576:	83 ec 08             	sub    esp,0x8
c001f579:	68 5c 01 00 00       	push   0x15c
c001f57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f582:	e8 cc f9 fe ff       	call   c000ef53 <operator delete(void*, unsigned long)>
c001f587:	83 c4 10             	add    esp,0x10
c001f58a:	83 c4 0c             	add    esp,0xc
c001f58d:	c3                   	ret    
