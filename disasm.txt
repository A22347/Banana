
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 68 d7 00 00       	call   c000d788 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 e8 01 00       	call   c001e918 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f4 f4 01 c0       	mov    ebx,0xc001f4f4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc f4 01 c0    	cmp    ebx,0xc001f4fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e8 b3 03 c0       	mov    eax,0xc003b3e8
c0000049:	3d e8 b3 03 c0       	cmp    eax,0xc003b3e8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e8 b3 03 c0       	push   0xc003b3e8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e8 b3 03 c0       	mov    eax,0xc003b3e8
c0000075:	2d e8 b3 03 c0       	sub    eax,0xc003b3e8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e8 b3 03 c0       	push   0xc003b3e8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 b5 03 c0 00 	cmp    BYTE PTR ds:0xc003b588,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 f5 01 c0       	mov    ebx,0xc001f504
c00000bb:	81 eb 00 f5 01 c0    	sub    ebx,0xc001f500
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 f5 01 c0       	mov    esi,0xc001f500
c00000ca:	a1 8c b5 03 c0       	mov    eax,ds:0xc003b58c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c b5 03 c0       	mov    ds:0xc003b58c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c b5 03 c0       	mov    eax,ds:0xc003b58c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e8 b3 03 c0       	push   0xc003b3e8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 b5 03 c0 01 	mov    BYTE PTR ds:0xc003b588,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 b5 03 c0       	push   0xc003b590
c000012c:	68 e8 b3 03 c0       	push   0xc003b3e8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	90                   	nop
c00001b3:	90                   	nop
c00001b4:	90                   	nop
c00001b5:	90                   	nop
c00001b6:	90                   	nop
c00001b7:	90                   	nop
c00001b8:	90                   	nop
c00001b9:	90                   	nop
c00001ba:	90                   	nop
c00001bb:	90                   	nop
c00001bc:	90                   	nop
c00001bd:	90                   	nop
c00001be:	90                   	nop
c00001bf:	90                   	nop
c00001c0:	90                   	nop
c00001c1:	90                   	nop
c00001c2:	90                   	nop
c00001c3:	90                   	nop
c00001c4:	90                   	nop
c00001c5:	90                   	nop
c00001c6:	90                   	nop
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	31 c0                	xor    eax,eax
c00001e1:	c3                   	ret    

c00001e2 <goToVM86>:
c00001e2:	fa                   	cli    
c00001e3:	55                   	push   ebp
c00001e4:	89 e5                	mov    ebp,esp
c00001e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001f2:	25 ff ff 00 00       	and    eax,0xffff
c00001f7:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000203:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000209:	52                   	push   edx
c000020a:	51                   	push   ecx
c000020b:	68 02 02 02 00       	push   0x20202
c0000210:	53                   	push   ebx
c0000211:	50                   	push   eax
c0000212:	cf                   	iret   

c0000213 <goToUsermode>:
c0000213:	fa                   	cli    
c0000214:	55                   	push   ebp
c0000215:	89 e5                	mov    ebp,esp
c0000217:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000021a:	66 b8 23 00          	mov    ax,0x23
c000021e:	66 8e d8             	mov    ds,ax
c0000221:	66 8e c0             	mov    es,ax
c0000224:	66 8e e0             	mov    fs,ax
c0000227:	66 8e e8             	mov    gs,ax
c000022a:	89 e0                	mov    eax,esp
c000022c:	68 23 00 00 00       	push   0x23
c0000231:	50                   	push   eax
c0000232:	68 02 02 00 00       	push   0x202
c0000237:	68 1b 00 00 00       	push   0x1b
c000023c:	53                   	push   ebx
c000023d:	cf                   	iret   

c000023e <switchToThreadASMFirstTime>:
c000023e:	9c                   	pushf  
c000023f:	fa                   	cli    
c0000240:	50                   	push   eax
c0000241:	53                   	push   ebx
c0000242:	51                   	push   ecx
c0000243:	52                   	push   edx
c0000244:	56                   	push   esi
c0000245:	57                   	push   edi
c0000246:	55                   	push   ebp
c0000247:	e9 11 00 00 00       	jmp    c000025d <commonThreadSwitch>

c000024c <switchToThreadASM>:
c000024c:	9c                   	pushf  
c000024d:	50                   	push   eax
c000024e:	53                   	push   ebx
c000024f:	51                   	push   ecx
c0000250:	52                   	push   edx
c0000251:	56                   	push   esi
c0000252:	57                   	push   edi
c0000253:	55                   	push   ebp
c0000254:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000025a:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000025d <commonThreadSwitch>:
c000025d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000261:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000267:	8b 06                	mov    eax,DWORD PTR [esi]
c0000269:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000026c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000026f:	0f 20 d9             	mov    ecx,cr3
c0000272:	39 c8                	cmp    eax,ecx
c0000274:	74 03                	je     c0000279 <commonThreadSwitch.doneVAS>
c0000276:	0f 22 d8             	mov    cr3,eax

c0000279 <commonThreadSwitch.doneVAS>:
c0000279:	85 d2                	test   edx,edx
c000027b:	74 4e                	je     c00002cb <commonThreadSwitch.notFirstTime>
c000027d:	fa                   	cli    
c000027e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000281:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000286:	60                   	pusha  
c0000287:	e8 86 20 01 00       	call   c0012312 <mapVASFirstTime>
c000028c:	61                   	popa   
c000028d:	89 c4                	mov    esp,eax
c000028f:	56                   	push   esi
c0000290:	52                   	push   edx
c0000291:	e8 ca dc 00 00       	call   c000df60 <changeTSS>
c0000296:	5a                   	pop    edx
c0000297:	5e                   	pop    esi
c0000298:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000029f:	81 fa 01 00 00 00    	cmp    edx,0x1
c00002a5:	74 39                	je     c00002e0 <commonThreadSwitch.cameOffAFork>
c00002a7:	5d                   	pop    ebp
c00002a8:	5f                   	pop    edi
c00002a9:	5e                   	pop    esi
c00002aa:	59                   	pop    ecx
c00002ab:	59                   	pop    ecx
c00002ac:	5b                   	pop    ebx
c00002ad:	58                   	pop    eax
c00002ae:	81 c4 04 00 00 00    	add    esp,0x4
c00002b4:	6a 02                	push   0x2
c00002b6:	9d                   	popf   
c00002b7:	52                   	push   edx
c00002b8:	e8 b6 e0 00 00       	call   c000e373 <taskStartupFunction>
c00002bd:	5a                   	pop    edx
c00002be:	50                   	push   eax
c00002bf:	ff d2                	call   edx
c00002c1:	e8 5c e8 00 00       	call   c000eb22 <taskReturned>
c00002c6:	e9 fb ff ff ff       	jmp    c00002c6 <commonThreadSwitch.doneVAS+0x4d>

c00002cb <commonThreadSwitch.notFirstTime>:
c00002cb:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ce:	56                   	push   esi
c00002cf:	52                   	push   edx
c00002d0:	e8 8b dc 00 00       	call   c000df60 <changeTSS>
c00002d5:	5a                   	pop    edx
c00002d6:	5e                   	pop    esi
c00002d7:	5d                   	pop    ebp
c00002d8:	5f                   	pop    edi
c00002d9:	5e                   	pop    esi
c00002da:	5a                   	pop    edx
c00002db:	59                   	pop    ecx
c00002dc:	5b                   	pop    ebx
c00002dd:	58                   	pop    eax
c00002de:	9d                   	popf   
c00002df:	c3                   	ret    

c00002e0 <commonThreadSwitch.cameOffAFork>:
c00002e0:	31 c0                	xor    eax,eax
c00002e2:	31 d2                	xor    edx,edx
c00002e4:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002e7:	e9 a2 02 00 00       	jmp    c000058e <offAForkJumpThingy>

c00002ec <detectCPUID>:
c00002ec:	9c                   	pushf  
c00002ed:	9c                   	pushf  
c00002ee:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002f5:	9d                   	popf   
c00002f6:	9c                   	pushf  
c00002f7:	58                   	pop    eax
c00002f8:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002fb:	9d                   	popf   
c00002fc:	25 00 00 20 00       	and    eax,0x200000
c0000301:	c3                   	ret    

c0000302 <asmQuickAcquireLock>:
c0000302:	55                   	push   ebp
c0000303:	89 e5                	mov    ebp,esp
c0000305:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000308 <asmQuickAcquireLock.retry>:
c0000308:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030d:	72 02                	jb     c0000311 <asmQuickAcquireLock.spin_with_pause>
c000030f:	fa                   	cli    
c0000310:	c3                   	ret    

c0000311 <asmQuickAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmQuickAcquireLock.spin_with_pause>
c000031b:	e9 e8 ff ff ff       	jmp    c0000308 <asmQuickAcquireLock.retry>

c0000320 <asmQuickReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000032a:	5d                   	pop    ebp
c000032b:	c3                   	ret    

c000032c <asmAcquireLock>:
c000032c:	55                   	push   ebp
c000032d:	89 e5                	mov    ebp,esp
c000032f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000332 <asmAcquireLock.retry>:
c0000332:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000337:	72 05                	jb     c000033e <asmAcquireLock.spin_with_pause>
c0000339:	9c                   	pushf  
c000033a:	58                   	pop    eax
c000033b:	fa                   	cli    
c000033c:	5d                   	pop    ebp
c000033d:	c3                   	ret    

c000033e <asmAcquireLock.spin_with_pause>:
c000033e:	f3 90                	pause  
c0000340:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000346:	75 f6                	jne    c000033e <asmAcquireLock.spin_with_pause>
c0000348:	e9 e5 ff ff ff       	jmp    c0000332 <asmAcquireLock.retry>

c000034d <asmReleaseLock>:
c000034d:	55                   	push   ebp
c000034e:	89 e5                	mov    ebp,esp
c0000350:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000356:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000035c:	52                   	push   edx
c000035d:	9d                   	popf   
c000035e:	5d                   	pop    ebp
c000035f:	c3                   	ret    

c0000360 <loadGDT>:
c0000360:	0f 01 15 64 bb 03 c0 	lgdtd  ds:0xc003bb64
c0000367:	66 b8 10 00          	mov    ax,0x10
c000036b:	66 8e d8             	mov    ds,ax
c000036e:	66 8e c0             	mov    es,ax
c0000371:	66 8e e0             	mov    fs,ax
c0000374:	66 8e e8             	mov    gs,ax
c0000377:	66 8e d0             	mov    ss,ax
c000037a:	e9 00 00 00 00       	jmp    c000037f <flush2>

c000037f <flush2>:
c000037f:	c3                   	ret    

c0000380 <isr0>:
c0000380:	fa                   	cli    
c0000381:	68 00 00 00 00       	push   0x0
c0000386:	68 00 00 00 00       	push   0x0
c000038b:	e9 a2 01 00 00       	jmp    c0000532 <int_common_stub>

c0000390 <isr1>:
c0000390:	fa                   	cli    
c0000391:	6a 00                	push   0x0
c0000393:	6a 01                	push   0x1
c0000395:	e9 98 01 00 00       	jmp    c0000532 <int_common_stub>

c000039a <isr2>:
c000039a:	fa                   	cli    
c000039b:	6a 00                	push   0x0
c000039d:	6a 02                	push   0x2
c000039f:	e9 8e 01 00 00       	jmp    c0000532 <int_common_stub>

c00003a4 <isr3>:
c00003a4:	fa                   	cli    
c00003a5:	6a 00                	push   0x0
c00003a7:	6a 03                	push   0x3
c00003a9:	e9 84 01 00 00       	jmp    c0000532 <int_common_stub>

c00003ae <isr4>:
c00003ae:	fa                   	cli    
c00003af:	6a 00                	push   0x0
c00003b1:	6a 04                	push   0x4
c00003b3:	e9 7a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003b8 <isr5>:
c00003b8:	fa                   	cli    
c00003b9:	6a 00                	push   0x0
c00003bb:	6a 05                	push   0x5
c00003bd:	e9 70 01 00 00       	jmp    c0000532 <int_common_stub>

c00003c2 <isr6>:
c00003c2:	fa                   	cli    
c00003c3:	6a 00                	push   0x0
c00003c5:	6a 06                	push   0x6
c00003c7:	e9 66 01 00 00       	jmp    c0000532 <int_common_stub>

c00003cc <isr7>:
c00003cc:	fa                   	cli    
c00003cd:	6a 00                	push   0x0
c00003cf:	6a 07                	push   0x7
c00003d1:	e9 5c 01 00 00       	jmp    c0000532 <int_common_stub>

c00003d6 <isr8>:
c00003d6:	fa                   	cli    
c00003d7:	6a 08                	push   0x8
c00003d9:	e9 54 01 00 00       	jmp    c0000532 <int_common_stub>

c00003de <isr9>:
c00003de:	fa                   	cli    
c00003df:	6a 00                	push   0x0
c00003e1:	6a 09                	push   0x9
c00003e3:	e9 4a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003e8 <isr10>:
c00003e8:	fa                   	cli    
c00003e9:	6a 0a                	push   0xa
c00003eb:	e9 42 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f0 <isr11>:
c00003f0:	fa                   	cli    
c00003f1:	6a 0b                	push   0xb
c00003f3:	e9 3a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f8 <isr12>:
c00003f8:	fa                   	cli    
c00003f9:	6a 0c                	push   0xc
c00003fb:	e9 32 01 00 00       	jmp    c0000532 <int_common_stub>

c0000400 <isr13>:
c0000400:	fa                   	cli    
c0000401:	6a 0d                	push   0xd
c0000403:	e9 2a 01 00 00       	jmp    c0000532 <int_common_stub>

c0000408 <isr14>:
c0000408:	fa                   	cli    
c0000409:	6a 0e                	push   0xe
c000040b:	e9 22 01 00 00       	jmp    c0000532 <int_common_stub>

c0000410 <isr15>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 0f                	push   0xf
c0000415:	e9 18 01 00 00       	jmp    c0000532 <int_common_stub>

c000041a <isr16>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 10                	push   0x10
c000041f:	e9 0e 01 00 00       	jmp    c0000532 <int_common_stub>

c0000424 <isr17>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 11                	push   0x11
c0000429:	e9 04 01 00 00       	jmp    c0000532 <int_common_stub>

c000042e <isr18>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 12                	push   0x12
c0000433:	e9 fa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000438 <isr96>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 60                	push   0x60
c000043d:	e9 20 01 00 00       	jmp    c0000562 <syscall_common_stub>

c0000442 <irq0>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 20                	push   0x20
c0000447:	e9 e6 00 00 00       	jmp    c0000532 <int_common_stub>

c000044c <irq1>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 21                	push   0x21
c0000451:	e9 dc 00 00 00       	jmp    c0000532 <int_common_stub>

c0000456 <irq2>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 22                	push   0x22
c000045b:	e9 d2 00 00 00       	jmp    c0000532 <int_common_stub>

c0000460 <irq3>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 23                	push   0x23
c0000465:	e9 c8 00 00 00       	jmp    c0000532 <int_common_stub>

c000046a <irq4>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 24                	push   0x24
c000046f:	e9 be 00 00 00       	jmp    c0000532 <int_common_stub>

c0000474 <irq5>:
c0000474:	fa                   	cli    
c0000475:	6a 00                	push   0x0
c0000477:	6a 25                	push   0x25
c0000479:	e9 b4 00 00 00       	jmp    c0000532 <int_common_stub>

c000047e <irq6>:
c000047e:	fa                   	cli    
c000047f:	6a 00                	push   0x0
c0000481:	6a 26                	push   0x26
c0000483:	e9 aa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000488 <irq7>:
c0000488:	fa                   	cli    
c0000489:	6a 00                	push   0x0
c000048b:	6a 27                	push   0x27
c000048d:	e9 a0 00 00 00       	jmp    c0000532 <int_common_stub>

c0000492 <irq8>:
c0000492:	fa                   	cli    
c0000493:	6a 00                	push   0x0
c0000495:	6a 28                	push   0x28
c0000497:	e9 96 00 00 00       	jmp    c0000532 <int_common_stub>

c000049c <irq9>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 29                	push   0x29
c00004a1:	e9 8c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004a6 <irq10>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 2a                	push   0x2a
c00004ab:	e9 82 00 00 00       	jmp    c0000532 <int_common_stub>

c00004b0 <irq11>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 2b                	push   0x2b
c00004b5:	e9 78 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ba <irq12>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 2c                	push   0x2c
c00004bf:	e9 6e 00 00 00       	jmp    c0000532 <int_common_stub>

c00004c4 <irq13>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 2d                	push   0x2d
c00004c9:	e9 64 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ce <irq14>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 2e                	push   0x2e
c00004d3:	e9 5a 00 00 00       	jmp    c0000532 <int_common_stub>

c00004d8 <irq15>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 2f                	push   0x2f
c00004dd:	e9 50 00 00 00       	jmp    c0000532 <int_common_stub>

c00004e2 <irq16>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 30                	push   0x30
c00004e7:	e9 46 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ec <irq17>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 31                	push   0x31
c00004f1:	e9 3c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004f6 <irq18>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 32                	push   0x32
c00004fb:	e9 32 00 00 00       	jmp    c0000532 <int_common_stub>

c0000500 <irq19>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 33                	push   0x33
c0000505:	e9 28 00 00 00       	jmp    c0000532 <int_common_stub>

c000050a <irq20>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 34                	push   0x34
c000050f:	e9 1e 00 00 00       	jmp    c0000532 <int_common_stub>

c0000514 <irq21>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 35                	push   0x35
c0000519:	e9 14 00 00 00       	jmp    c0000532 <int_common_stub>

c000051e <irq22>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 36                	push   0x36
c0000523:	e9 0a 00 00 00       	jmp    c0000532 <int_common_stub>

c0000528 <irq23>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 37                	push   0x37
c000052d:	e9 00 00 00 00       	jmp    c0000532 <int_common_stub>

c0000532 <int_common_stub>:
c0000532:	60                   	pusha  
c0000533:	1e                   	push   ds
c0000534:	06                   	push   es
c0000535:	0f a0                	push   fs
c0000537:	0f a8                	push   gs
c0000539:	66 b8 10 00          	mov    ax,0x10
c000053d:	66 8e d8             	mov    ds,ax
c0000540:	66 8e c0             	mov    es,ax
c0000543:	66 8e e0             	mov    fs,ax
c0000546:	66 8e e8             	mov    gs,ax
c0000549:	89 e1                	mov    ecx,esp
c000054b:	51                   	push   ecx
c000054c:	b9 d5 3f 01 c0       	mov    ecx,0xc0013fd5
c0000551:	ff d1                	call   ecx
c0000553:	59                   	pop    ecx
c0000554:	0f a9                	pop    gs
c0000556:	0f a1                	pop    fs
c0000558:	07                   	pop    es
c0000559:	1f                   	pop    ds
c000055a:	61                   	popa   
c000055b:	81 c4 08 00 00 00    	add    esp,0x8
c0000561:	cf                   	iret   

c0000562 <syscall_common_stub>:
c0000562:	60                   	pusha  
c0000563:	1e                   	push   ds
c0000564:	06                   	push   es
c0000565:	0f a0                	push   fs
c0000567:	0f a8                	push   gs
c0000569:	66 b8 10 00          	mov    ax,0x10
c000056d:	66 8e d8             	mov    ds,ax
c0000570:	66 8e c0             	mov    es,ax
c0000573:	66 8e e0             	mov    fs,ax
c0000576:	66 8e e8             	mov    gs,ax
c0000579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000057f:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000582:	89 e1                	mov    ecx,esp
c0000584:	51                   	push   ecx
c0000585:	fb                   	sti    
c0000586:	b9 d5 3f 01 c0       	mov    ecx,0xc0013fd5
c000058b:	ff d1                	call   ecx
c000058d:	59                   	pop    ecx

c000058e <offAForkJumpThingy>:
c000058e:	0f a9                	pop    gs
c0000590:	0f a1                	pop    fs
c0000592:	07                   	pop    es
c0000593:	1f                   	pop    ds
c0000594:	61                   	popa   
c0000595:	81 c4 08 00 00 00    	add    esp,0x8
c000059b:	cf                   	iret   

c000059c <memcmp>:
c000059c:	55                   	push   ebp
c000059d:	89 e5                	mov    ebp,esp
c000059f:	83 ec 10             	sub    esp,0x10
c00005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005ae:	eb 06                	jmp    c00005b6 <memcmp+0x1a>
c00005b0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005b3:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00005b9:	8d 50 ff             	lea    edx,[eax-0x1]
c00005bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00005bf:	85 c0                	test   eax,eax
c00005c1:	74 0e                	je     c00005d1 <memcmp+0x35>
c00005c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005c8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005cb:	8a 00                	mov    al,BYTE PTR [eax]
c00005cd:	38 c2                	cmp    dl,al
c00005cf:	74 df                	je     c00005b0 <memcmp+0x14>
c00005d1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005d5:	74 16                	je     c00005ed <memcmp+0x51>
c00005d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005da:	8a 00                	mov    al,BYTE PTR [eax]
c00005dc:	0f b6 d0             	movzx  edx,al
c00005df:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e2:	8a 00                	mov    al,BYTE PTR [eax]
c00005e4:	0f b6 c0             	movzx  eax,al
c00005e7:	29 c2                	sub    edx,eax
c00005e9:	89 d0                	mov    eax,edx
c00005eb:	eb 05                	jmp    c00005f2 <memcmp+0x56>
c00005ed:	b8 00 00 00 00       	mov    eax,0x0
c00005f2:	c9                   	leave  
c00005f3:	c3                   	ret    

c00005f4 <memmove>:
c00005f4:	55                   	push   ebp
c00005f5:	89 e5                	mov    ebp,esp
c00005f7:	83 ec 10             	sub    esp,0x10
c00005fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000603:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000606:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000609:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c000060c:	76 1d                	jbe    c000062b <memmove+0x37>
c000060e:	eb 13                	jmp    c0000623 <memmove+0x2f>
c0000610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000613:	8a 10                	mov    dl,BYTE PTR [eax]
c0000615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000618:	88 10                	mov    BYTE PTR [eax],dl
c000061a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000061d:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000620:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000623:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000627:	75 e7                	jne    c0000610 <memmove+0x1c>
c0000629:	eb 31                	jmp    c000065c <memmove+0x68>
c000062b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000062e:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000631:	73 29                	jae    c000065c <memmove+0x68>
c0000633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000636:	48                   	dec    eax
c0000637:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000063a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000063d:	48                   	dec    eax
c000063e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000641:	eb 13                	jmp    c0000656 <memmove+0x62>
c0000643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000646:	8a 10                	mov    dl,BYTE PTR [eax]
c0000648:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000064b:	88 10                	mov    BYTE PTR [eax],dl
c000064d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000650:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000653:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000656:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000065a:	75 e7                	jne    c0000643 <memmove+0x4f>
c000065c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000065f:	c9                   	leave  
c0000660:	c3                   	ret    

c0000661 <memcpy>:
c0000661:	55                   	push   ebp
c0000662:	89 e5                	mov    ebp,esp
c0000664:	57                   	push   edi
c0000665:	56                   	push   esi
c0000666:	83 ec 20             	sub    esp,0x20
c0000669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000066c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000678:	83 e0 03             	and    eax,0x3
c000067b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000067e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000681:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000684:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0000687:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000068a:	c1 e8 02             	shr    eax,0x2
c000068d:	89 c1                	mov    ecx,eax
c000068f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000692:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000695:	89 c6                	mov    esi,eax
c0000697:	89 d7                	mov    edi,edx
c0000699:	fc                   	cld    
c000069a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00006a3:	eb 21                	jmp    c00006c6 <memcpy+0x65>
c00006a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00006a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006ab:	01 c2                	add    edx,eax
c00006ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00006b0:	01 d0                	add    eax,edx
c00006b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00006b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00006b8:	01 d1                	add    ecx,edx
c00006ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00006bd:	01 ca                	add    edx,ecx
c00006bf:	8a 00                	mov    al,BYTE PTR [eax]
c00006c1:	88 02                	mov    BYTE PTR [edx],al
c00006c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00006c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006c9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c00006cc:	72 d7                	jb     c00006a5 <memcpy+0x44>
c00006ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006d1:	83 c4 20             	add    esp,0x20
c00006d4:	5e                   	pop    esi
c00006d5:	5f                   	pop    edi
c00006d6:	5d                   	pop    ebp
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	55                   	push   ebp
c00006d9:	89 e5                	mov    ebp,esp
c00006db:	83 ec 10             	sub    esp,0x10
c00006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006e4:	eb 10                	jmp    c00006f6 <memset+0x1e>
c00006e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006e9:	88 c2                	mov    dl,al
c00006eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006ee:	88 10                	mov    BYTE PTR [eax],dl
c00006f0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006fa:	75 ea                	jne    c00006e6 <memset+0xe>
c00006fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ff:	c9                   	leave  
c0000700:	c3                   	ret    

c0000701 <strlen>:
c0000701:	55                   	push   ebp
c0000702:	89 e5                	mov    ebp,esp
c0000704:	83 ec 10             	sub    esp,0x10
c0000707:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c000070e:	eb 06                	jmp    c0000716 <strlen+0x15>
c0000710:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000713:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000719:	8a 00                	mov    al,BYTE PTR [eax]
c000071b:	84 c0                	test   al,al
c000071d:	75 f1                	jne    c0000710 <strlen+0xf>
c000071f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000722:	c9                   	leave  
c0000723:	c3                   	ret    

c0000724 <strpbrk>:
c0000724:	55                   	push   ebp
c0000725:	89 e5                	mov    ebp,esp
c0000727:	83 ec 10             	sub    esp,0x10
c000072a:	eb 2a                	jmp    c0000756 <strpbrk+0x32>
c000072c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000072f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000732:	eb 16                	jmp    c000074a <strpbrk+0x26>
c0000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000737:	8a 10                	mov    dl,BYTE PTR [eax]
c0000739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000073c:	8a 00                	mov    al,BYTE PTR [eax]
c000073e:	38 c2                	cmp    dl,al
c0000740:	75 05                	jne    c0000747 <strpbrk+0x23>
c0000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000745:	eb 1d                	jmp    c0000764 <strpbrk+0x40>
c0000747:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000074a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000074d:	8a 00                	mov    al,BYTE PTR [eax]
c000074f:	84 c0                	test   al,al
c0000751:	75 e1                	jne    c0000734 <strpbrk+0x10>
c0000753:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000759:	8a 00                	mov    al,BYTE PTR [eax]
c000075b:	84 c0                	test   al,al
c000075d:	75 cd                	jne    c000072c <strpbrk+0x8>
c000075f:	b8 00 00 00 00       	mov    eax,0x0
c0000764:	c9                   	leave  
c0000765:	c3                   	ret    

c0000766 <strtok>:
c0000766:	55                   	push   ebp
c0000767:	89 e5                	mov    ebp,esp
c0000769:	83 ec 10             	sub    esp,0x10
c000076c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000076f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000772:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000776:	75 18                	jne    c0000790 <strtok+0x2a>
c0000778:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c000077d:	85 c0                	test   eax,eax
c000077f:	75 07                	jne    c0000788 <strtok+0x22>
c0000781:	b8 00 00 00 00       	mov    eax,0x0
c0000786:	eb 6a                	jmp    c00007f2 <strtok+0x8c>
c0000788:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c000078d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000793:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000796:	e8 89 ff ff ff       	call   c0000724 <strpbrk>
c000079b:	83 c4 08             	add    esp,0x8
c000079e:	a3 a8 b5 03 c0       	mov    ds:0xc003b5a8,eax
c00007a3:	eb 1f                	jmp    c00007c4 <strtok+0x5e>
c00007a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007a8:	8d 50 01             	lea    edx,[eax+0x1]
c00007ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00007ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00007b4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00007b7:	e8 68 ff ff ff       	call   c0000724 <strpbrk>
c00007bc:	83 c4 08             	add    esp,0x8
c00007bf:	a3 a8 b5 03 c0       	mov    ds:0xc003b5a8,eax
c00007c4:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007c9:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00007cc:	74 d7                	je     c00007a5 <strtok+0x3f>
c00007ce:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 16                	je     c00007ed <strtok+0x87>
c00007d7:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007dc:	8d 50 01             	lea    edx,[eax+0x1]
c00007df:	89 15 a8 b5 03 c0    	mov    DWORD PTR ds:0xc003b5a8,edx
c00007e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007eb:	eb 05                	jmp    c00007f2 <strtok+0x8c>
c00007ed:	b8 00 00 00 00       	mov    eax,0x0
c00007f2:	c9                   	leave  
c00007f3:	c3                   	ret    

c00007f4 <strcpy>:
c00007f4:	55                   	push   ebp
c00007f5:	89 e5                	mov    ebp,esp
c00007f7:	83 ec 10             	sub    esp,0x10
c00007fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000800:	eb 10                	jmp    c0000812 <strcpy+0x1e>
c0000802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000805:	8a 10                	mov    dl,BYTE PTR [eax]
c0000807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000080a:	88 10                	mov    BYTE PTR [eax],dl
c000080c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000080f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000815:	8a 00                	mov    al,BYTE PTR [eax]
c0000817:	84 c0                	test   al,al
c0000819:	75 e7                	jne    c0000802 <strcpy+0xe>
c000081b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000081e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000824:	c9                   	leave  
c0000825:	c3                   	ret    

c0000826 <strncpy>:
c0000826:	55                   	push   ebp
c0000827:	89 e5                	mov    ebp,esp
c0000829:	83 ec 10             	sub    esp,0x10
c000082c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000082f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000838:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000083c:	74 2a                	je     c0000868 <strncpy+0x42>
c000083e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000844:	8d 42 01             	lea    eax,[edx+0x1]
c0000847:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000084a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000084d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000850:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000853:	8a 12                	mov    dl,BYTE PTR [edx]
c0000855:	88 10                	mov    BYTE PTR [eax],dl
c0000857:	8a 00                	mov    al,BYTE PTR [eax]
c0000859:	84 c0                	test   al,al
c000085b:	75 db                	jne    c0000838 <strncpy+0x12>
c000085d:	eb 09                	jmp    c0000868 <strncpy+0x42>
c000085f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000862:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000865:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000086b:	8d 50 ff             	lea    edx,[eax-0x1]
c000086e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000871:	85 c0                	test   eax,eax
c0000873:	75 ea                	jne    c000085f <strncpy+0x39>
c0000875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000878:	c9                   	leave  
c0000879:	c3                   	ret    

c000087a <strcmp>:
c000087a:	55                   	push   ebp
c000087b:	89 e5                	mov    ebp,esp
c000087d:	eb 19                	jmp    c0000898 <strcmp+0x1e>
c000087f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000882:	8d 50 01             	lea    edx,[eax+0x1]
c0000885:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c0000888:	8a 00                	mov    al,BYTE PTR [eax]
c000088a:	84 c0                	test   al,al
c000088c:	75 07                	jne    c0000895 <strcmp+0x1b>
c000088e:	b8 00 00 00 00       	mov    eax,0x0
c0000893:	eb 25                	jmp    c00008ba <strcmp+0x40>
c0000895:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000089b:	8a 10                	mov    dl,BYTE PTR [eax]
c000089d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008a0:	8a 00                	mov    al,BYTE PTR [eax]
c00008a2:	38 c2                	cmp    dl,al
c00008a4:	74 d9                	je     c000087f <strcmp+0x5>
c00008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a9:	8a 00                	mov    al,BYTE PTR [eax]
c00008ab:	0f b6 d0             	movzx  edx,al
c00008ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008b1:	8a 00                	mov    al,BYTE PTR [eax]
c00008b3:	0f b6 c0             	movzx  eax,al
c00008b6:	29 c2                	sub    edx,eax
c00008b8:	89 d0                	mov    eax,edx
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    

c00008bc <strchr>:
c00008bc:	55                   	push   ebp
c00008bd:	89 e5                	mov    ebp,esp
c00008bf:	eb 14                	jmp    c00008d5 <strchr+0x19>
c00008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c4:	8a 00                	mov    al,BYTE PTR [eax]
c00008c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00008c9:	38 d0                	cmp    al,dl
c00008cb:	75 05                	jne    c00008d2 <strchr+0x16>
c00008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d0:	eb 11                	jmp    c00008e3 <strchr+0x27>
c00008d2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d8:	8a 00                	mov    al,BYTE PTR [eax]
c00008da:	84 c0                	test   al,al
c00008dc:	75 e3                	jne    c00008c1 <strchr+0x5>
c00008de:	b8 00 00 00 00       	mov    eax,0x0
c00008e3:	5d                   	pop    ebp
c00008e4:	c3                   	ret    

c00008e5 <strncmp>:
c00008e5:	55                   	push   ebp
c00008e6:	89 e5                	mov    ebp,esp
c00008e8:	eb 19                	jmp    c0000903 <strncmp+0x1e>
c00008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ed:	8d 50 01             	lea    edx,[eax+0x1]
c00008f0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008f3:	8a 00                	mov    al,BYTE PTR [eax]
c00008f5:	84 c0                	test   al,al
c00008f7:	75 07                	jne    c0000900 <strncmp+0x1b>
c00008f9:	b8 00 00 00 00       	mov    eax,0x0
c00008fe:	eb 3f                	jmp    c000093f <strncmp+0x5a>
c0000900:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000906:	8d 50 ff             	lea    edx,[eax-0x1]
c0000909:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c000090c:	85 c0                	test   eax,eax
c000090e:	74 0e                	je     c000091e <strncmp+0x39>
c0000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000913:	8a 10                	mov    dl,BYTE PTR [eax]
c0000915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000918:	8a 00                	mov    al,BYTE PTR [eax]
c000091a:	38 c2                	cmp    dl,al
c000091c:	74 cc                	je     c00008ea <strncmp+0x5>
c000091e:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c0000922:	74 16                	je     c000093a <strncmp+0x55>
c0000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000927:	8a 00                	mov    al,BYTE PTR [eax]
c0000929:	0f b6 d0             	movzx  edx,al
c000092c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000092f:	8a 00                	mov    al,BYTE PTR [eax]
c0000931:	0f b6 c0             	movzx  eax,al
c0000934:	29 c2                	sub    edx,eax
c0000936:	89 d0                	mov    eax,edx
c0000938:	eb 05                	jmp    c000093f <strncmp+0x5a>
c000093a:	b8 00 00 00 00       	mov    eax,0x0
c000093f:	5d                   	pop    ebp
c0000940:	c3                   	ret    

c0000941 <strcat>:
c0000941:	55                   	push   ebp
c0000942:	89 e5                	mov    ebp,esp
c0000944:	83 ec 10             	sub    esp,0x10
c0000947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000094a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000094d:	90                   	nop
c000094e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000951:	8d 50 01             	lea    edx,[eax+0x1]
c0000954:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000957:	8a 00                	mov    al,BYTE PTR [eax]
c0000959:	84 c0                	test   al,al
c000095b:	75 f1                	jne    c000094e <strcat+0xd>
c000095d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000960:	90                   	nop
c0000961:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000964:	8d 42 01             	lea    eax,[edx+0x1]
c0000967:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000096a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000970:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000973:	8a 12                	mov    dl,BYTE PTR [edx]
c0000975:	88 10                	mov    BYTE PTR [eax],dl
c0000977:	8a 00                	mov    al,BYTE PTR [eax]
c0000979:	84 c0                	test   al,al
c000097b:	75 e4                	jne    c0000961 <strcat+0x20>
c000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000980:	c9                   	leave  
c0000981:	c3                   	ret    

c0000982 <strncat>:
c0000982:	55                   	push   ebp
c0000983:	89 e5                	mov    ebp,esp
c0000985:	83 ec 10             	sub    esp,0x10
c0000988:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000098c:	74 4b                	je     c00009d9 <strncat+0x57>
c000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000994:	90                   	nop
c0000995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000998:	8d 50 01             	lea    edx,[eax+0x1]
c000099b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000099e:	8a 00                	mov    al,BYTE PTR [eax]
c00009a0:	84 c0                	test   al,al
c00009a2:	75 f1                	jne    c0000995 <strncat+0x13>
c00009a4:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c00009a7:	90                   	nop
c00009a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00009ab:	8d 42 01             	lea    eax,[edx+0x1]
c00009ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00009b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00009b7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c00009ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00009bc:	88 10                	mov    BYTE PTR [eax],dl
c00009be:	8a 00                	mov    al,BYTE PTR [eax]
c00009c0:	84 c0                	test   al,al
c00009c2:	74 09                	je     c00009cd <strncat+0x4b>
c00009c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00009c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009cb:	75 db                	jne    c00009a8 <strncat+0x26>
c00009cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009d1:	75 06                	jne    c00009d9 <strncat+0x57>
c00009d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009dc:	c9                   	leave  
c00009dd:	c3                   	ret    

c00009de <strstr>:
c00009de:	55                   	push   ebp
c00009df:	89 e5                	mov    ebp,esp
c00009e1:	83 ec 10             	sub    esp,0x10
c00009e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009e7:	e8 15 fd ff ff       	call   c0000701 <strlen>
c00009ec:	83 c4 04             	add    esp,0x4
c00009ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009f6:	75 22                	jne    c0000a1a <strstr+0x3c>
c00009f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009fb:	eb 32                	jmp    c0000a2f <strstr+0x51>
c00009fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000a00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a06:	e8 91 fb ff ff       	call   c000059c <memcmp>
c0000a0b:	83 c4 0c             	add    esp,0xc
c0000a0e:	85 c0                	test   eax,eax
c0000a10:	75 05                	jne    c0000a17 <strstr+0x39>
c0000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a15:	eb 18                	jmp    c0000a2f <strstr+0x51>
c0000a17:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a1d:	e8 df fc ff ff       	call   c0000701 <strlen>
c0000a22:	83 c4 04             	add    esp,0x4
c0000a25:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c0000a28:	76 d3                	jbe    c00009fd <strstr+0x1f>
c0000a2a:	b8 00 00 00 00       	mov    eax,0x0
c0000a2f:	c9                   	leave  
c0000a30:	c3                   	ret    

c0000a31 <toupper>:
c0000a31:	55                   	push   ebp
c0000a32:	89 e5                	mov    ebp,esp
c0000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a37:	0f b6 c0             	movzx  eax,al
c0000a3a:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000a40:	0f b6 c0             	movzx  eax,al
c0000a43:	83 e0 02             	and    eax,0x2
c0000a46:	85 c0                	test   eax,eax
c0000a48:	74 08                	je     c0000a52 <toupper+0x21>
c0000a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4d:	83 e8 20             	sub    eax,0x20
c0000a50:	eb 03                	jmp    c0000a55 <toupper+0x24>
c0000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a55:	5d                   	pop    ebp
c0000a56:	c3                   	ret    

c0000a57 <tolower>:
c0000a57:	55                   	push   ebp
c0000a58:	89 e5                	mov    ebp,esp
c0000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a5d:	0f b6 c0             	movzx  eax,al
c0000a60:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000a66:	0f b6 c0             	movzx  eax,al
c0000a69:	83 e0 01             	and    eax,0x1
c0000a6c:	85 c0                	test   eax,eax
c0000a6e:	74 08                	je     c0000a78 <tolower+0x21>
c0000a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a73:	83 c0 20             	add    eax,0x20
c0000a76:	eb 03                	jmp    c0000a7b <tolower+0x24>
c0000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a7b:	5d                   	pop    ebp
c0000a7c:	c3                   	ret    

c0000a7d <simple_strtoul>:
c0000a7d:	55                   	push   ebp
c0000a7e:	89 e5                	mov    ebp,esp
c0000a80:	83 ec 28             	sub    esp,0x28
c0000a83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a8a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a91:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a9e:	eb 03                	jmp    c0000aa3 <simple_strtoul+0x26>
c0000aa0:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0000aa8:	0f b6 c0             	movzx  eax,al
c0000aab:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000ab1:	0f b6 c0             	movzx  eax,al
c0000ab4:	83 e0 08             	and    eax,0x8
c0000ab7:	85 c0                	test   eax,eax
c0000ab9:	75 e5                	jne    c0000aa0 <simple_strtoul+0x23>
c0000abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000abe:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac0:	3c 09                	cmp    al,0x9
c0000ac2:	74 dc                	je     c0000aa0 <simple_strtoul+0x23>
c0000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac9:	3c 2d                	cmp    al,0x2d
c0000acb:	75 0c                	jne    c0000ad9 <simple_strtoul+0x5c>
c0000acd:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000ad4:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ad7:	eb 1c                	jmp    c0000af5 <simple_strtoul+0x78>
c0000ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000adc:	8a 00                	mov    al,BYTE PTR [eax]
c0000ade:	3c 2b                	cmp    al,0x2b
c0000ae0:	75 0c                	jne    c0000aee <simple_strtoul+0x71>
c0000ae2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000aec:	eb 07                	jmp    c0000af5 <simple_strtoul+0x78>
c0000aee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000af5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000af9:	75 43                	jne    c0000b3e <simple_strtoul+0xc1>
c0000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000afe:	8a 00                	mov    al,BYTE PTR [eax]
c0000b00:	3c 30                	cmp    al,0x30
c0000b02:	75 31                	jne    c0000b35 <simple_strtoul+0xb8>
c0000b04:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0000b0c:	0f be c0             	movsx  eax,al
c0000b0f:	83 ec 0c             	sub    esp,0xc
c0000b12:	50                   	push   eax
c0000b13:	e8 3f ff ff ff       	call   c0000a57 <tolower>
c0000b18:	83 c4 10             	add    esp,0x10
c0000b1b:	83 f8 78             	cmp    eax,0x78
c0000b1e:	75 0c                	jne    c0000b2c <simple_strtoul+0xaf>
c0000b20:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000b27:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b2a:	eb 26                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b2c:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b33:	eb 1d                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b35:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b3c:	eb 14                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b3e:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b42:	0f 86 07 01 00 00    	jbe    c0000c4f <simple_strtoul+0x1d2>
c0000b48:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b4c:	0f 87 fd 00 00 00    	ja     c0000c4f <simple_strtoul+0x1d2>
c0000b52:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b56:	75 0c                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0000b5d:	3c 30                	cmp    al,0x30
c0000b5f:	75 03                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b61:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b64:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b68:	0f 85 d2 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b71:	8a 00                	mov    al,BYTE PTR [eax]
c0000b73:	3c 30                	cmp    al,0x30
c0000b75:	0f 85 c5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b7b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b81:	8a 00                	mov    al,BYTE PTR [eax]
c0000b83:	0f be c0             	movsx  eax,al
c0000b86:	83 ec 0c             	sub    esp,0xc
c0000b89:	50                   	push   eax
c0000b8a:	e8 c8 fe ff ff       	call   c0000a57 <tolower>
c0000b8f:	83 c4 10             	add    esp,0x10
c0000b92:	83 f8 78             	cmp    eax,0x78
c0000b95:	0f 85 a5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b9b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b9e:	e9 9d 00 00 00       	jmp    c0000c40 <simple_strtoul+0x1c3>
c0000ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba8:	0f b6 c0             	movzx  eax,al
c0000bab:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000bb1:	0f b6 c0             	movzx  eax,al
c0000bb4:	83 e0 04             	and    eax,0x4
c0000bb7:	85 c0                	test   eax,eax
c0000bb9:	74 10                	je     c0000bcb <simple_strtoul+0x14e>
c0000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0000bc0:	0f b6 c0             	movzx  eax,al
c0000bc3:	83 e8 30             	sub    eax,0x30
c0000bc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bc9:	eb 31                	jmp    c0000bfc <simple_strtoul+0x17f>
c0000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bce:	8a 00                	mov    al,BYTE PTR [eax]
c0000bd0:	0f be c0             	movsx  eax,al
c0000bd3:	83 ec 0c             	sub    esp,0xc
c0000bd6:	50                   	push   eax
c0000bd7:	e8 55 fe ff ff       	call   c0000a31 <toupper>
c0000bdc:	83 c4 10             	add    esp,0x10
c0000bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000be5:	0f b6 c0             	movzx  eax,al
c0000be8:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000bee:	0f b6 c0             	movzx  eax,al
c0000bf1:	83 e0 01             	and    eax,0x1
c0000bf4:	85 c0                	test   eax,eax
c0000bf6:	74 5a                	je     c0000c52 <simple_strtoul+0x1d5>
c0000bf8:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bff:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000c02:	73 51                	jae    c0000c55 <simple_strtoul+0x1d8>
c0000c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c07:	f7 d0                	not    eax
c0000c09:	ba 00 00 00 00       	mov    edx,0x0
c0000c0e:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000c11:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000c14:	76 10                	jbe    c0000c26 <simple_strtoul+0x1a9>
c0000c16:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000c1d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000c24:	eb 17                	jmp    c0000c3d <simple_strtoul+0x1c0>
c0000c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c29:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c33:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c36:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c3d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c43:	8a 00                	mov    al,BYTE PTR [eax]
c0000c45:	84 c0                	test   al,al
c0000c47:	0f 85 56 ff ff ff    	jne    c0000ba3 <simple_strtoul+0x126>
c0000c4d:	eb 07                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c4f:	90                   	nop
c0000c50:	eb 04                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c52:	90                   	nop
c0000c53:	eb 01                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c55:	90                   	nop
c0000c56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c5a:	74 24                	je     c0000c80 <simple_strtoul+0x203>
c0000c5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c60:	75 16                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c62:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c66:	75 10                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c68:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c6c:	74 0a                	je     c0000c78 <simple_strtoul+0x1fb>
c0000c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c74:	89 10                	mov    DWORD PTR [eax],edx
c0000c76:	eb 08                	jmp    c0000c80 <simple_strtoul+0x203>
c0000c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c7e:	89 10                	mov    DWORD PTR [eax],edx
c0000c80:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c84:	75 07                	jne    c0000c8d <simple_strtoul+0x210>
c0000c86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c8d:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c91:	75 03                	jne    c0000c96 <simple_strtoul+0x219>
c0000c93:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c99:	c9                   	leave  
c0000c9a:	c3                   	ret    

c0000c9b <largebin_index>:
c0000c9b:	89 c2                	mov    edx,eax
c0000c9d:	c1 ea 08             	shr    edx,0x8
c0000ca0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca6:	77 10                	ja     c0000cb8 <largebin_index+0x1d>
c0000ca8:	0f bd d2             	bsr    edx,edx
c0000cab:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cae:	d3 e8                	shr    eax,cl
c0000cb0:	83 e0 03             	and    eax,0x3
c0000cb3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb7:	c3                   	ret    
c0000cb8:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbd:	c3                   	ret    

c0000cbe <malloc_init_state>:
c0000cbe:	53                   	push   ebx
c0000cbf:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc8:	89 d1                	mov    ecx,edx
c0000cca:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd0:	83 c2 08             	add    edx,0x8
c0000cd3:	39 da                	cmp    edx,ebx
c0000cd5:	75 f3                	jne    c0000cca <malloc_init_state+0xc>
c0000cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce3:	83 e2 03             	and    edx,0x3
c0000ce6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf0:	83 ca 48             	or     edx,0x48
c0000cf3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfd:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d07:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0e:	89 10                	mov    DWORD PTR [eax],edx
c0000d10:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d13:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1d:	5b                   	pop    ebx
c0000d1e:	c3                   	ret    

c0000d1f <malloc_consolidate>:
c0000d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d21:	85 d2                	test   edx,edx
c0000d23:	0f 84 d8 00 00 00    	je     c0000e01 <malloc_consolidate+0xe2>
c0000d29:	55                   	push   ebp
c0000d2a:	83 e2 fd             	and    edx,0xfffffffd
c0000d2d:	57                   	push   edi
c0000d2e:	89 c5                	mov    ebp,eax
c0000d30:	56                   	push   esi
c0000d31:	8d 78 34             	lea    edi,[eax+0x34]
c0000d34:	53                   	push   ebx
c0000d35:	83 ec 10             	sub    esp,0x10
c0000d38:	89 10                	mov    DWORD PTR [eax],edx
c0000d3a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3e:	c1 ea 03             	shr    edx,0x3
c0000d41:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d49:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4c:	85 d2                	test   edx,edx
c0000d4e:	0f 84 98 00 00 00    	je     c0000dec <malloc_consolidate+0xcd>
c0000d54:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d65:	89 f9                	mov    ecx,edi
c0000d67:	83 e1 fe             	and    ecx,0xfffffffe
c0000d6a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d70:	83 e3 fc             	and    ebx,0xfffffffc
c0000d73:	83 e7 01             	and    edi,0x1
c0000d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d79:	75 14                	jne    c0000d8f <malloc_consolidate+0x70>
c0000d7b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7d:	29 fa                	sub    edx,edi
c0000d7f:	01 f9                	add    ecx,edi
c0000d81:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d84:	89 fb                	mov    ebx,edi
c0000d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d89:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d92:	74 40                	je     c0000dd4 <malloc_consolidate+0xb5>
c0000d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d97:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d9a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da1:	83 e7 01             	and    edi,0x1
c0000da4:	75 0e                	jne    c0000db4 <malloc_consolidate+0x95>
c0000da6:	01 d9                	add    ecx,ebx
c0000da8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dab:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dae:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db7:	89 ce                	mov    esi,ecx
c0000db9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbc:	83 ce 01             	or     esi,0x1
c0000dbf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dcf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd2:	eb 0c                	jmp    c0000de0 <malloc_consolidate+0xc1>
c0000dd4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd7:	83 c9 01             	or     ecx,0x1
c0000dda:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de4:	85 d2                	test   edx,edx
c0000de6:	0f 85 6f ff ff ff    	jne    c0000d5b <malloc_consolidate+0x3c>
c0000dec:	83 c5 04             	add    ebp,0x4
c0000def:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df3:	0f 85 50 ff ff ff    	jne    c0000d49 <malloc_consolidate+0x2a>
c0000df9:	83 c4 10             	add    esp,0x10
c0000dfc:	5b                   	pop    ebx
c0000dfd:	5e                   	pop    esi
c0000dfe:	5f                   	pop    edi
c0000dff:	5d                   	pop    ebp
c0000e00:	c3                   	ret    
c0000e01:	e9 b8 fe ff ff       	jmp    c0000cbe <malloc_init_state>

c0000e06 <dlfree>:
c0000e06:	57                   	push   edi
c0000e07:	56                   	push   esi
c0000e08:	53                   	push   ebx
c0000e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0d:	85 db                	test   ebx,ebx
c0000e0f:	0f 84 e2 00 00 00    	je     c0000ef7 <dlfree+0xf1>
c0000e15:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e18:	8b 0d c0 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5c0
c0000e1e:	89 f0                	mov    eax,esi
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	83 e0 fc             	and    eax,0xfffffffc
c0000e26:	39 c1                	cmp    ecx,eax
c0000e28:	72 24                	jb     c0000e4e <dlfree+0x48>
c0000e2a:	83 c9 03             	or     ecx,0x3
c0000e2d:	c1 e8 03             	shr    eax,0x3
c0000e30:	89 0d c0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5c0,ecx
c0000e36:	83 e8 02             	sub    eax,0x2
c0000e39:	8b 0c 85 c4 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4a3c]
c0000e40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e42:	89 14 85 c4 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4a3c],edx
c0000e49:	e9 a9 00 00 00       	jmp    c0000ef7 <dlfree+0xf1>
c0000e4e:	83 e6 02             	and    esi,0x2
c0000e51:	0f 85 a0 00 00 00    	jne    c0000ef7 <dlfree+0xf1>
c0000e57:	83 c9 01             	or     ecx,0x1
c0000e5a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5d:	89 0d c0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5c0,ecx
c0000e63:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e66:	83 e1 fc             	and    ecx,0xfffffffc
c0000e69:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6d:	75 13                	jne    c0000e82 <dlfree+0x7c>
c0000e6f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e72:	29 da                	sub    edx,ebx
c0000e74:	01 d8                	add    eax,ebx
c0000e76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e82:	39 35 ec b5 03 c0    	cmp    DWORD PTR ds:0xc003b5ec,esi
c0000e88:	74 40                	je     c0000eca <dlfree+0xc4>
c0000e8a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e91:	80 e3 01             	and    bl,0x1
c0000e94:	75 0e                	jne    c0000ea4 <dlfree+0x9e>
c0000e96:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e99:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9c:	01 c8                	add    eax,ecx
c0000e9e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea1:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea4:	8b 0d fc b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5fc
c0000eaa:	c7 42 0c f4 b5 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b5f4
c0000eb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb4:	89 15 fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,edx
c0000eba:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebd:	89 c1                	mov    ecx,eax
c0000ebf:	83 c9 01             	or     ecx,0x1
c0000ec2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec8:	eb 10                	jmp    c0000eda <dlfree+0xd4>
c0000eca:	01 c8                	add    eax,ecx
c0000ecc:	89 c1                	mov    ecx,eax
c0000ece:	83 c9 01             	or     ecx,0x1
c0000ed1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed4:	89 15 ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,edx
c0000eda:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000edf:	76 16                	jbe    c0000ef7 <dlfree+0xf1>
c0000ee1:	f6 05 c0 b5 03 c0 02 	test   BYTE PTR ds:0xc003b5c0,0x2
c0000ee8:	74 0d                	je     c0000ef7 <dlfree+0xf1>
c0000eea:	5b                   	pop    ebx
c0000eeb:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	e9 28 fe ff ff       	jmp    c0000d1f <malloc_consolidate>
c0000ef7:	5b                   	pop    ebx
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	c3                   	ret    

c0000efb <sYSMALLOc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	89 d3                	mov    ebx,edx
c0000f01:	83 ec 2c             	sub    esp,0x2c
c0000f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f08:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0e:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f11:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f18:	74 1f                	je     c0000f39 <sYSMALLOc+0x3e>
c0000f1a:	89 d8                	mov    eax,ebx
c0000f1c:	e8 fe fd ff ff       	call   c0000d1f <malloc_consolidate>
c0000f21:	83 ec 0c             	sub    esp,0xc
c0000f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f28:	83 e8 07             	sub    eax,0x7
c0000f2b:	50                   	push   eax
c0000f2c:	e8 30 02 00 00       	call   c0001161 <dlmalloc>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	e9 20 02 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f39:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f45:	83 e0 fc             	and    eax,0xfffffffc
c0000f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f50:	83 c0 10             	add    eax,0x10
c0000f53:	01 c1                	add    ecx,eax
c0000f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f59:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f60:	74 04                	je     c0000f66 <sYSMALLOc+0x6b>
c0000f62:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f66:	f7 da                	neg    edx
c0000f68:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f70:	21 d1                	and    ecx,edx
c0000f72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f76:	7f 07                	jg     c0000f7f <sYSMALLOc+0x84>
c0000f78:	31 c0                	xor    eax,eax
c0000f7a:	e9 da 01 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f7f:	83 ec 0c             	sub    esp,0xc
c0000f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f86:	e8 5b c3 00 00       	call   c000d2e6 <sbrk>
c0000f8b:	83 c4 10             	add    esp,0x10
c0000f8e:	89 c6                	mov    esi,eax
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	74 e3                	je     c0000f78 <sYSMALLOc+0x7d>
c0000f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f99:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f9d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fa0:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000fa6:	39 f1                	cmp    ecx,esi
c0000fa8:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000fae:	75 13                	jne    c0000fc3 <sYSMALLOc+0xc8>
c0000fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb8:	83 c8 01             	or     eax,0x1
c0000fbb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fbe:	e9 3e 01 00 00       	jmp    c0001101 <sYSMALLOc+0x206>
c0000fc3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fc9:	88 d0                	mov    al,dl
c0000fcb:	83 e0 01             	and    eax,0x1
c0000fce:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fd7:	0f 95 c0             	setne  al
c0000fda:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fde:	39 f1                	cmp    ecx,esi
c0000fe0:	76 12                	jbe    c0000ff4 <sYSMALLOc+0xf9>
c0000fe2:	84 c0                	test   al,al
c0000fe4:	74 0e                	je     c0000ff4 <sYSMALLOc+0xf9>
c0000fe6:	83 e2 fe             	and    edx,0xfffffffe
c0000fe9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fef:	e9 83 00 00 00       	jmp    c0001077 <sYSMALLOc+0x17c>
c0000ff4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ff9:	74 7c                	je     c0001077 <sYSMALLOc+0x17c>
c0000ffb:	84 c0                	test   al,al
c0000ffd:	74 0c                	je     c000100b <sYSMALLOc+0x110>
c0000fff:	89 f0                	mov    eax,esi
c0001001:	29 c8                	sub    eax,ecx
c0001003:	01 e8                	add    eax,ebp
c0001005:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000100b:	89 f2                	mov    edx,esi
c000100d:	83 e2 07             	and    edx,0x7
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0x123>
c0001012:	b8 08 00 00 00       	mov    eax,0x8
c0001017:	29 d0                	sub    eax,edx
c0001019:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000101c:	eb 04                	jmp    c0001022 <sYSMALLOc+0x127>
c000101e:	89 f5                	mov    ebp,esi
c0001020:	31 c0                	xor    eax,eax
c0001022:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000102a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102e:	01 c1                	add    ecx,eax
c0001030:	83 ec 0c             	sub    esp,0xc
c0001033:	01 f1                	add    ecx,esi
c0001035:	01 ca                	add    edx,ecx
c0001037:	29 c8                	sub    eax,ecx
c0001039:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c000103d:	01 c2                	add    edx,eax
c000103f:	52                   	push   edx
c0001040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001044:	e8 9d c2 00 00       	call   c000d2e6 <sbrk>
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001053:	75 0f                	jne    c0001064 <sYSMALLOc+0x169>
c0001055:	83 ec 0c             	sub    esp,0xc
c0001058:	6a 00                	push   0x0
c000105a:	e8 87 c2 00 00       	call   c000d2e6 <sbrk>
c000105f:	83 c4 10             	add    esp,0x10
c0001062:	eb 30                	jmp    c0001094 <sYSMALLOc+0x199>
c0001064:	39 c6                	cmp    esi,eax
c0001066:	76 33                	jbe    c000109b <sYSMALLOc+0x1a0>
c0001068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000106c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001073:	01 f0                	add    eax,esi
c0001075:	eb 1d                	jmp    c0001094 <sYSMALLOc+0x199>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	89 f5                	mov    ebp,esi
c000107c:	6a 00                	push   0x0
c000107e:	e8 63 c2 00 00       	call   c000d2e6 <sbrk>
c0001083:	89 c2                	mov    edx,eax
c0001085:	29 f2                	sub    edx,esi
c0001087:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000108b:	83 c4 10             	add    esp,0x10
c000108e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001094:	31 d2                	xor    edx,edx
c0001096:	83 f8 ff             	cmp    eax,0xffffffff
c0001099:	74 66                	je     c0001101 <sYSMALLOc+0x206>
c000109b:	29 e8                	sub    eax,ebp
c000109d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010a0:	01 d0                	add    eax,edx
c00010a2:	83 c8 01             	or     eax,0x1
c00010a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010b3:	74 4c                	je     c0001101 <sYSMALLOc+0x206>
c00010b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b9:	83 e8 0c             	sub    eax,0xc
c00010bc:	83 e0 f8             	and    eax,0xfffffff8
c00010bf:	89 c2                	mov    edx,eax
c00010c1:	83 ca 01             	or     edx,0x1
c00010c4:	83 f8 0f             	cmp    eax,0xf
c00010c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010da:	76 25                	jbe    c0001101 <sYSMALLOc+0x206>
c00010dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010e2:	83 ec 0c             	sub    esp,0xc
c00010e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ef:	83 c7 08             	add    edi,0x8
c00010f2:	57                   	push   edi
c00010f3:	e8 0e fd ff ff       	call   c0000e06 <dlfree>
c00010f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fe:	83 c4 10             	add    esp,0x10
c0001101:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001107:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000110d:	73 06                	jae    c0001115 <sYSMALLOc+0x21a>
c000110f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001115:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000111b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001121:	73 06                	jae    c0001129 <sYSMALLOc+0x22e>
c0001123:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000112c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112f:	83 e2 fc             	and    edx,0xfffffffc
c0001132:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001136:	0f 82 3c fe ff ff    	jb     c0000f78 <sYSMALLOc+0x7d>
c000113c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001140:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001143:	29 fa                	sub    edx,edi
c0001145:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001148:	83 ca 01             	or     edx,0x1
c000114b:	89 fb                	mov    ebx,edi
c000114d:	83 c0 08             	add    eax,0x8
c0001150:	83 cb 01             	or     ebx,0x1
c0001153:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001156:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001159:	83 c4 2c             	add    esp,0x2c
c000115c:	5b                   	pop    ebx
c000115d:	5e                   	pop    esi
c000115e:	5f                   	pop    edi
c000115f:	5d                   	pop    ebp
c0001160:	c3                   	ret    

c0001161 <dlmalloc>:
c0001161:	55                   	push   ebp
c0001162:	57                   	push   edi
c0001163:	56                   	push   esi
c0001164:	53                   	push   ebx
c0001165:	83 ec 1c             	sub    esp,0x1c
c0001168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000116c:	83 f8 df             	cmp    eax,0xffffffdf
c000116f:	0f 87 70 03 00 00    	ja     c00014e5 <dlmalloc+0x384>
c0001175:	83 c0 0b             	add    eax,0xb
c0001178:	be 10 00 00 00       	mov    esi,0x10
c000117d:	83 f8 0f             	cmp    eax,0xf
c0001180:	76 05                	jbe    c0001187 <dlmalloc+0x26>
c0001182:	83 e0 f8             	and    eax,0xfffffff8
c0001185:	89 c6                	mov    esi,eax
c0001187:	8b 3d c0 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b5c0
c000118d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001193:	75 17                	jne    c00011ac <dlmalloc+0x4b>
c0001195:	85 ff                	test   edi,edi
c0001197:	0f 85 05 03 00 00    	jne    c00014a2 <dlmalloc+0x341>
c000119d:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c00011a2:	e8 78 fb ff ff       	call   c0000d1f <malloc_consolidate>
c00011a7:	e9 f6 02 00 00       	jmp    c00014a2 <dlmalloc+0x341>
c00011ac:	39 f7                	cmp    edi,esi
c00011ae:	72 1f                	jb     c00011cf <dlmalloc+0x6e>
c00011b0:	89 f2                	mov    edx,esi
c00011b2:	c1 ea 03             	shr    edx,0x3
c00011b5:	83 ea 02             	sub    edx,0x2
c00011b8:	8b 04 95 c4 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4a3c]
c00011bf:	85 c0                	test   eax,eax
c00011c1:	74 0c                	je     c00011cf <dlmalloc+0x6e>
c00011c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c6:	89 0c 95 c4 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4a3c],ecx
c00011cd:	eb 30                	jmp    c00011ff <dlmalloc+0x9e>
c00011cf:	89 f0                	mov    eax,esi
c00011d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d7:	77 2e                	ja     c0001207 <dlmalloc+0xa6>
c00011d9:	c1 e8 03             	shr    eax,0x3
c00011dc:	8d 14 c5 f4 b5 03 c0 	lea    edx,[eax*8-0x3ffc4a0c]
c00011e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ed:	39 c3                	cmp    ebx,eax
c00011ef:	74 2e                	je     c000121f <dlmalloc+0xbe>
c00011f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011ff:	83 c0 08             	add    eax,0x8
c0001202:	e9 e0 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001207:	e8 8f fa ff ff       	call   c0000c9b <largebin_index>
c000120c:	83 e7 02             	and    edi,0x2
c000120f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001213:	74 0a                	je     c000121f <dlmalloc+0xbe>
c0001215:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c000121a:	e8 00 fb ff ff       	call   c0000d1f <malloc_consolidate>
c000121f:	8d 46 10             	lea    eax,[esi+0x10]
c0001222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001226:	8b 1d 00 b6 03 c0    	mov    ebx,DWORD PTR ds:0xc003b600
c000122c:	81 fb f4 b5 03 c0    	cmp    ebx,0xc003b5f4
c0001232:	0f 84 13 01 00 00    	je     c000134b <dlmalloc+0x1ea>
c0001238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000123b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123e:	83 e7 fc             	and    edi,0xfffffffc
c0001241:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001247:	77 4c                	ja     c0001295 <dlmalloc+0x134>
c0001249:	3d f4 b5 03 c0       	cmp    eax,0xc003b5f4
c000124e:	75 45                	jne    c0001295 <dlmalloc+0x134>
c0001250:	39 1d f0 b5 03 c0    	cmp    DWORD PTR ds:0xc003b5f0,ebx
c0001256:	75 3d                	jne    c0001295 <dlmalloc+0x134>
c0001258:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000125c:	73 37                	jae    c0001295 <dlmalloc+0x134>
c000125e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001261:	89 fa                	mov    edx,edi
c0001263:	a3 fc b5 03 c0       	mov    ds:0xc003b5fc,eax
c0001268:	a3 00 b6 03 c0       	mov    ds:0xc003b600,eax
c000126d:	a3 f0 b5 03 c0       	mov    ds:0xc003b5f0,eax
c0001272:	29 f2                	sub    edx,esi
c0001274:	c7 40 08 f4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5f4
c000127b:	c7 40 0c f4 b5 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b5f4
c0001282:	83 ce 01             	or     esi,0x1
c0001285:	89 d1                	mov    ecx,edx
c0001287:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000128a:	83 c9 01             	or     ecx,0x1
c000128d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001290:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001293:	eb 15                	jmp    c00012aa <dlmalloc+0x149>
c0001295:	a3 00 b6 03 c0       	mov    ds:0xc003b600,eax
c000129a:	39 fe                	cmp    esi,edi
c000129c:	c7 40 08 f4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5f4
c00012a3:	75 0d                	jne    c00012b2 <dlmalloc+0x151>
c00012a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012ad:	e9 35 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00012b2:	89 f8                	mov    eax,edi
c00012b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ba:	77 19                	ja     c00012d5 <dlmalloc+0x174>
c00012bc:	c1 e8 03             	shr    eax,0x3
c00012bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00012c2:	83 c2 0d             	add    edx,0xd
c00012c5:	8d 2c 95 b8 b5 03 c0 	lea    ebp,[edx*4-0x3ffc4a48]
c00012cc:	8b 14 95 c0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a40]
c00012d3:	eb 46                	jmp    c000131b <dlmalloc+0x1ba>
c00012d5:	e8 c1 f9 ff ff       	call   c0000c9b <largebin_index>
c00012da:	8d 14 00             	lea    edx,[eax+eax*1]
c00012dd:	83 c2 0d             	add    edx,0xd
c00012e0:	8d 0c 95 c0 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4a40]
c00012e7:	8b 14 95 c0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a40]
c00012ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f5:	89 d5                	mov    ebp,edx
c00012f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012fb:	74 1e                	je     c000131b <dlmalloc+0x1ba>
c00012fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001300:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001303:	77 12                	ja     c0001317 <dlmalloc+0x1b6>
c0001305:	83 cf 01             	or     edi,0x1
c0001308:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000130b:	76 05                	jbe    c0001312 <dlmalloc+0x1b1>
c000130d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001310:	eb f6                	jmp    c0001308 <dlmalloc+0x1a7>
c0001312:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001315:	eb 04                	jmp    c000131b <dlmalloc+0x1ba>
c0001317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000131b:	89 c7                	mov    edi,eax
c000131d:	88 c1                	mov    cl,al
c000131f:	c1 ff 05             	sar    edi,0x5
c0001322:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001326:	bf 01 00 00 00       	mov    edi,0x1
c000132b:	d3 e7                	shl    edi,cl
c000132d:	89 f8                	mov    eax,edi
c000132f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001333:	09 04 bd f4 b8 03 c0 	or     DWORD PTR [edi*4-0x3ffc470c],eax
c000133a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000133d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001340:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001343:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001346:	e9 db fe ff ff       	jmp    c0001226 <dlmalloc+0xc5>
c000134b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001351:	76 78                	jbe    c00013cb <dlmalloc+0x26a>
c0001353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001357:	8d 04 c5 f4 b5 03 c0 	lea    eax,[eax*8-0x3ffc4a0c]
c000135e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001364:	39 ca                	cmp    edx,ecx
c0001366:	74 63                	je     c00013cb <dlmalloc+0x26a>
c0001368:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000136b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136e:	83 e3 fc             	and    ebx,0xfffffffc
c0001371:	39 de                	cmp    esi,ebx
c0001373:	77 52                	ja     c00013c7 <dlmalloc+0x266>
c0001375:	89 df                	mov    edi,ebx
c0001377:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000137a:	29 f7                	sub    edi,esi
c000137c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137f:	01 d3                	add    ebx,edx
c0001381:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001384:	83 ff 0f             	cmp    edi,0xf
c0001387:	8d 42 08             	lea    eax,[edx+0x8]
c000138a:	77 09                	ja     c0001395 <dlmalloc+0x234>
c000138c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001390:	e9 52 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001395:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001398:	83 ce 01             	or     esi,0x1
c000139b:	89 0d fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,ecx
c00013a1:	89 0d 00 b6 03 c0    	mov    DWORD PTR ds:0xc003b600,ecx
c00013a7:	c7 41 08 f4 b5 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b5f4
c00013ae:	c7 41 0c f4 b5 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b5f4
c00013b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b8:	89 fa                	mov    edx,edi
c00013ba:	83 ca 01             	or     edx,0x1
c00013bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00013c2:	e9 20 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00013c7:	89 c2                	mov    edx,eax
c00013c9:	eb 99                	jmp    c0001364 <dlmalloc+0x203>
c00013cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cf:	b8 01 00 00 00       	mov    eax,0x1
c00013d4:	41                   	inc    ecx
c00013d5:	89 cb                	mov    ebx,ecx
c00013d7:	8d 14 cd ec b5 03 c0 	lea    edx,[ecx*8-0x3ffc4a14]
c00013de:	c1 eb 05             	shr    ebx,0x5
c00013e1:	d3 e0                	shl    eax,cl
c00013e3:	8b 3c 9d f4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc470c]
c00013ea:	39 f8                	cmp    eax,edi
c00013ec:	77 04                	ja     c00013f2 <dlmalloc+0x291>
c00013ee:	85 c0                	test   eax,eax
c00013f0:	75 26                	jne    c0001418 <dlmalloc+0x2b7>
c00013f2:	43                   	inc    ebx
c00013f3:	83 fb 02             	cmp    ebx,0x2
c00013f6:	0f 87 a6 00 00 00    	ja     c00014a2 <dlmalloc+0x341>
c00013fc:	8b 3c 9d f4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc470c]
c0001403:	85 ff                	test   edi,edi
c0001405:	74 eb                	je     c00013f2 <dlmalloc+0x291>
c0001407:	89 d8                	mov    eax,ebx
c0001409:	c1 e0 06             	shl    eax,0x6
c000140c:	8d 14 85 ec b5 03 c0 	lea    edx,[eax*4-0x3ffc4a14]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	85 f8                	test   eax,edi
c000141a:	75 07                	jne    c0001423 <dlmalloc+0x2c2>
c000141c:	83 c2 08             	add    edx,0x8
c000141f:	01 c0                	add    eax,eax
c0001421:	eb f5                	jmp    c0001418 <dlmalloc+0x2b7>
c0001423:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001426:	39 ca                	cmp    edx,ecx
c0001428:	75 14                	jne    c000143e <dlmalloc+0x2dd>
c000142a:	89 c1                	mov    ecx,eax
c000142c:	83 c2 08             	add    edx,0x8
c000142f:	f7 d1                	not    ecx
c0001431:	01 c0                	add    eax,eax
c0001433:	21 cf                	and    edi,ecx
c0001435:	89 3c 9d f4 b8 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc470c],edi
c000143c:	eb ac                	jmp    c00013ea <dlmalloc+0x289>
c000143e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001441:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001444:	83 e0 fc             	and    eax,0xfffffffc
c0001447:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000144a:	89 c3                	mov    ebx,eax
c000144c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144f:	29 f3                	sub    ebx,esi
c0001451:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001454:	83 fb 0f             	cmp    ebx,0xf
c0001457:	8d 41 08             	lea    eax,[ecx+0x8]
c000145a:	77 09                	ja     c0001465 <dlmalloc+0x304>
c000145c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001460:	e9 82 00 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001465:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001468:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146e:	89 3d fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,edi
c0001474:	89 3d 00 b6 03 c0    	mov    DWORD PTR ds:0xc003b600,edi
c000147a:	c7 47 08 f4 b5 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b5f4
c0001481:	c7 47 0c f4 b5 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b5f4
c0001488:	77 06                	ja     c0001490 <dlmalloc+0x32f>
c000148a:	89 3d f0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5f0,edi
c0001490:	83 ce 01             	or     esi,0x1
c0001493:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001496:	89 d9                	mov    ecx,ebx
c0001498:	83 c9 01             	or     ecx,0x1
c000149b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149e:	89 1a                	mov    DWORD PTR [edx],ebx
c00014a0:	eb 45                	jmp    c00014e7 <dlmalloc+0x386>
c00014a2:	a1 ec b5 03 c0       	mov    eax,ds:0xc003b5ec
c00014a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014ad:	83 e2 fc             	and    edx,0xfffffffc
c00014b0:	39 d1                	cmp    ecx,edx
c00014b2:	77 1e                	ja     c00014d2 <dlmalloc+0x371>
c00014b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b7:	89 f3                	mov    ebx,esi
c00014b9:	89 0d ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,ecx
c00014bf:	83 cb 01             	or     ebx,0x1
c00014c2:	29 f2                	sub    edx,esi
c00014c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c7:	83 ca 01             	or     edx,0x1
c00014ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014cd:	e9 2d fd ff ff       	jmp    c00011ff <dlmalloc+0x9e>
c00014d2:	83 c4 1c             	add    esp,0x1c
c00014d5:	89 f0                	mov    eax,esi
c00014d7:	5b                   	pop    ebx
c00014d8:	ba c0 b5 03 c0       	mov    edx,0xc003b5c0
c00014dd:	5e                   	pop    esi
c00014de:	5f                   	pop    edi
c00014df:	5d                   	pop    ebp
c00014e0:	e9 16 fa ff ff       	jmp    c0000efb <sYSMALLOc>
c00014e5:	31 c0                	xor    eax,eax
c00014e7:	83 c4 1c             	add    esp,0x1c
c00014ea:	5b                   	pop    ebx
c00014eb:	5e                   	pop    esi
c00014ec:	5f                   	pop    edi
c00014ed:	5d                   	pop    ebp
c00014ee:	c3                   	ret    

c00014ef <iALLOc>:
c00014ef:	55                   	push   ebp
c00014f0:	89 c5                	mov    ebp,eax
c00014f2:	57                   	push   edi
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	83 ec 2c             	sub    esp,0x2c
c00014f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001504:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c000150b:	75 12                	jne    c000151f <iALLOc+0x30>
c000150d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001511:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001516:	e8 04 f8 ff ff       	call   c0000d1f <malloc_consolidate>
c000151b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001524:	74 12                	je     c0001538 <iALLOc+0x49>
c0001526:	85 ed                	test   ebp,ebp
c0001528:	0f 84 64 01 00 00    	je     c0001692 <iALLOc+0x1a3>
c000152e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001536:	eb 33                	jmp    c000156b <iALLOc+0x7c>
c0001538:	85 ed                	test   ebp,ebp
c000153a:	75 14                	jne    c0001550 <iALLOc+0x61>
c000153c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001544:	83 c4 2c             	add    esp,0x2c
c0001547:	5b                   	pop    ebx
c0001548:	5e                   	pop    esi
c0001549:	5f                   	pop    edi
c000154a:	5d                   	pop    ebp
c000154b:	e9 11 fc ff ff       	jmp    c0001161 <dlmalloc>
c0001550:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001557:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155f:	83 f8 0f             	cmp    eax,0xf
c0001562:	76 07                	jbe    c000156b <iALLOc+0x7c>
c0001564:	83 e0 f8             	and    eax,0xfffffff8
c0001567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000156b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001570:	75 09                	jne    c000157b <iALLOc+0x8c>
c0001572:	89 d0                	mov    eax,edx
c0001574:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001577:	31 f6                	xor    esi,esi
c0001579:	eb 3b                	jmp    c00015b6 <iALLOc+0xc7>
c000157b:	8b 02                	mov    eax,DWORD PTR [edx]
c000157d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001585:	83 c0 0b             	add    eax,0xb
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 07                	jbe    c0001594 <iALLOc+0xa5>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001598:	0f af f5             	imul   esi,ebp
c000159b:	eb 25                	jmp    c00015c2 <iALLOc+0xd3>
c000159d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015a2:	bb 10 00 00 00       	mov    ebx,0x10
c00015a7:	83 f9 0f             	cmp    ecx,0xf
c00015aa:	76 05                	jbe    c00015b1 <iALLOc+0xc2>
c00015ac:	83 e1 f8             	and    ecx,0xfffffff8
c00015af:	89 cb                	mov    ebx,ecx
c00015b1:	01 de                	add    esi,ebx
c00015b3:	83 c0 04             	add    eax,0x4
c00015b6:	39 c7                	cmp    edi,eax
c00015b8:	75 e3                	jne    c000159d <iALLOc+0xae>
c00015ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c6:	8b 1d 14 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b914
c00015cc:	83 ec 0c             	sub    esp,0xc
c00015cf:	c7 05 14 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b914,0x0
c00015d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015e1:	50                   	push   eax
c00015e2:	e8 7a fb ff ff       	call   c0001161 <dlmalloc>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	89 1d 14 b9 03 c0    	mov    DWORD PTR ds:0xc003b914,ebx
c00015f0:	85 c0                	test   eax,eax
c00015f2:	0f 84 92 00 00 00    	je     c000168a <iALLOc+0x19b>
c00015f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001601:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001605:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000160a:	74 1e                	je     c000162a <iALLOc+0x13b>
c000160c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001610:	89 d9                	mov    ecx,ebx
c0001612:	52                   	push   edx
c0001613:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001617:	83 e9 04             	sub    ecx,0x4
c000161a:	51                   	push   ecx
c000161b:	6a 00                	push   0x0
c000161d:	50                   	push   eax
c000161e:	e8 b5 f0 ff ff       	call   c00006d8 <memset>
c0001623:	83 c4 10             	add    esp,0x10
c0001626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000162a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162f:	75 14                	jne    c0001645 <iALLOc+0x156>
c0001631:	8d 04 37             	lea    eax,[edi+esi*1]
c0001634:	29 f3                	sub    ebx,esi
c0001636:	8d 48 08             	lea    ecx,[eax+0x8]
c0001639:	83 cb 01             	or     ebx,0x1
c000163c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001640:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001643:	89 f3                	mov    ebx,esi
c0001645:	31 c0                	xor    eax,eax
c0001647:	4d                   	dec    ebp
c0001648:	8d 4f 08             	lea    ecx,[edi+0x8]
c000164b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164f:	39 c5                	cmp    ebp,eax
c0001651:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001654:	74 2c                	je     c0001682 <iALLOc+0x193>
c0001656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000165a:	85 c9                	test   ecx,ecx
c000165c:	75 15                	jne    c0001673 <iALLOc+0x184>
c000165e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001661:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001664:	b9 10 00 00 00       	mov    ecx,0x10
c0001669:	83 fe 0f             	cmp    esi,0xf
c000166c:	76 05                	jbe    c0001673 <iALLOc+0x184>
c000166e:	83 e6 f8             	and    esi,0xfffffff8
c0001671:	89 f1                	mov    ecx,esi
c0001673:	89 ce                	mov    esi,ecx
c0001675:	29 cb                	sub    ebx,ecx
c0001677:	83 ce 01             	or     esi,0x1
c000167a:	40                   	inc    eax
c000167b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167e:	01 cf                	add    edi,ecx
c0001680:	eb c6                	jmp    c0001648 <iALLOc+0x159>
c0001682:	83 cb 01             	or     ebx,0x1
c0001685:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001688:	eb 08                	jmp    c0001692 <iALLOc+0x1a3>
c000168a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 c4 2c             	add    esp,0x2c
c0001699:	5b                   	pop    ebx
c000169a:	5e                   	pop    esi
c000169b:	5f                   	pop    edi
c000169c:	5d                   	pop    ebp
c000169d:	c3                   	ret    

c000169e <dlrealloc>:
c000169e:	55                   	push   ebp
c000169f:	57                   	push   edi
c00016a0:	56                   	push   esi
c00016a1:	53                   	push   ebx
c00016a2:	83 ec 1c             	sub    esp,0x1c
c00016a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016ad:	85 db                	test   ebx,ebx
c00016af:	75 10                	jne    c00016c1 <dlrealloc+0x23>
c00016b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b5:	83 c4 1c             	add    esp,0x1c
c00016b8:	5b                   	pop    ebx
c00016b9:	5e                   	pop    esi
c00016ba:	5f                   	pop    edi
c00016bb:	5d                   	pop    ebp
c00016bc:	e9 a0 fa ff ff       	jmp    c0001161 <dlmalloc>
c00016c1:	83 f8 df             	cmp    eax,0xffffffdf
c00016c4:	76 07                	jbe    c00016cd <dlrealloc+0x2f>
c00016c6:	31 db                	xor    ebx,ebx
c00016c8:	e9 7c 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c00016cd:	83 c0 0b             	add    eax,0xb
c00016d0:	bf 10 00 00 00       	mov    edi,0x10
c00016d5:	83 f8 0f             	cmp    eax,0xf
c00016d8:	76 05                	jbe    c00016df <dlrealloc+0x41>
c00016da:	83 e0 f8             	and    eax,0xfffffff8
c00016dd:	89 c7                	mov    edi,eax
c00016df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016e2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016e5:	89 c6                	mov    esi,eax
c00016e7:	83 e6 fc             	and    esi,0xfffffffc
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 d8                	jne    c00016c6 <dlrealloc+0x28>
c00016ee:	39 f7                	cmp    edi,esi
c00016f0:	0f 86 15 01 00 00    	jbe    c000180b <dlrealloc+0x16d>
c00016f6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016fa:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016fd:	39 15 ec b5 03 c0    	cmp    DWORD PTR ds:0xc003b5ec,edx
c0001703:	75 33                	jne    c0001738 <dlrealloc+0x9a>
c0001705:	83 e1 fc             	and    ecx,0xfffffffc
c0001708:	01 f1                	add    ecx,esi
c000170a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170e:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001711:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001715:	77 49                	ja     c0001760 <dlrealloc+0xc2>
c0001717:	01 fd                	add    ebp,edi
c0001719:	83 e0 01             	and    eax,0x1
c000171c:	09 f8                	or     eax,edi
c000171e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001721:	89 2d ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,ebp
c0001727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000172b:	29 f8                	sub    eax,edi
c000172d:	83 c8 01             	or     eax,0x1
c0001730:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001733:	e9 11 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c0001738:	89 c8                	mov    eax,ecx
c000173a:	83 e0 fe             	and    eax,0xfffffffe
c000173d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001742:	75 1c                	jne    c0001760 <dlrealloc+0xc2>
c0001744:	83 e1 fc             	and    ecx,0xfffffffc
c0001747:	01 f1                	add    ecx,esi
c0001749:	39 cf                	cmp    edi,ecx
c000174b:	77 13                	ja     c0001760 <dlrealloc+0xc2>
c000174d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001750:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001753:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001756:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001759:	89 ce                	mov    esi,ecx
c000175b:	e9 ab 00 00 00       	jmp    c000180b <dlrealloc+0x16d>
c0001760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001764:	8d 47 f9             	lea    eax,[edi-0x7]
c0001767:	83 ec 0c             	sub    esp,0xc
c000176a:	50                   	push   eax
c000176b:	e8 f1 f9 ff ff       	call   c0001161 <dlmalloc>
c0001770:	83 c4 10             	add    esp,0x10
c0001773:	89 c1                	mov    ecx,eax
c0001775:	85 c0                	test   eax,eax
c0001777:	0f 84 49 ff ff ff    	je     c00016c6 <dlrealloc+0x28>
c000177d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001784:	39 c2                	cmp    edx,eax
c0001786:	75 0a                	jne    c0001792 <dlrealloc+0xf4>
c0001788:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000178b:	83 e0 fc             	and    eax,0xfffffffc
c000178e:	01 c6                	add    esi,eax
c0001790:	eb 79                	jmp    c000180b <dlrealloc+0x16d>
c0001792:	83 ee 04             	sub    esi,0x4
c0001795:	83 fe 27             	cmp    esi,0x27
c0001798:	76 16                	jbe    c00017b0 <dlrealloc+0x112>
c000179a:	50                   	push   eax
c000179b:	56                   	push   esi
c000179c:	53                   	push   ebx
c000179d:	51                   	push   ecx
c000179e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00017a2:	e8 ba ee ff ff       	call   c0000661 <memcpy>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017ae:	eb 43                	jmp    c00017f3 <dlrealloc+0x155>
c00017b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00017b2:	83 fe 13             	cmp    esi,0x13
c00017b5:	89 01                	mov    DWORD PTR [ecx],eax
c00017b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00017ba:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00017bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00017c0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00017c3:	76 2e                	jbe    c00017f3 <dlrealloc+0x155>
c00017c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017c8:	83 fe 1b             	cmp    esi,0x1b
c00017cb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017d1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017d4:	76 1d                	jbe    c00017f3 <dlrealloc+0x155>
c00017d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017d9:	83 fe 23             	cmp    esi,0x23
c00017dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017e2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017e5:	76 0c                	jbe    c00017f3 <dlrealloc+0x155>
c00017e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017ea:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017f0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017f7:	83 ec 0c             	sub    esp,0xc
c00017fa:	53                   	push   ebx
c00017fb:	e8 06 f6 ff ff       	call   c0000e06 <dlfree>
c0001800:	83 c4 10             	add    esp,0x10
c0001803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001807:	89 cb                	mov    ebx,ecx
c0001809:	eb 3e                	jmp    c0001849 <dlrealloc+0x1ab>
c000180b:	89 f2                	mov    edx,esi
c000180d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001810:	29 fa                	sub    edx,edi
c0001812:	83 e1 01             	and    ecx,0x1
c0001815:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001819:	83 fa 0f             	cmp    edx,0xf
c000181c:	77 0b                	ja     c0001829 <dlrealloc+0x18b>
c000181e:	09 ce                	or     esi,ecx
c0001820:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001823:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001827:	eb 20                	jmp    c0001849 <dlrealloc+0x1ab>
c0001829:	01 fd                	add    ebp,edi
c000182b:	83 ec 0c             	sub    esp,0xc
c000182e:	09 cf                	or     edi,ecx
c0001830:	83 ca 01             	or     edx,0x1
c0001833:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001836:	83 c5 08             	add    ebp,0x8
c0001839:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000183c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001840:	55                   	push   ebp
c0001841:	e8 c0 f5 ff ff       	call   c0000e06 <dlfree>
c0001846:	83 c4 10             	add    esp,0x10
c0001849:	83 c4 1c             	add    esp,0x1c
c000184c:	89 d8                	mov    eax,ebx
c000184e:	5b                   	pop    ebx
c000184f:	5e                   	pop    esi
c0001850:	5f                   	pop    edi
c0001851:	5d                   	pop    ebp
c0001852:	c3                   	ret    

c0001853 <dlmemalign>:
c0001853:	55                   	push   ebp
c0001854:	57                   	push   edi
c0001855:	56                   	push   esi
c0001856:	53                   	push   ebx
c0001857:	83 ec 0c             	sub    esp,0xc
c000185a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000185e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001862:	83 fa 08             	cmp    edx,0x8
c0001865:	77 10                	ja     c0001877 <dlmemalign+0x24>
c0001867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000186b:	83 c4 0c             	add    esp,0xc
c000186e:	5b                   	pop    ebx
c000186f:	5e                   	pop    esi
c0001870:	5f                   	pop    edi
c0001871:	5d                   	pop    ebp
c0001872:	e9 ea f8 ff ff       	jmp    c0001161 <dlmalloc>
c0001877:	bf 10 00 00 00       	mov    edi,0x10
c000187c:	83 fa 0f             	cmp    edx,0xf
c000187f:	76 13                	jbe    c0001894 <dlmemalign+0x41>
c0001881:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001884:	85 d1                	test   ecx,edx
c0001886:	75 04                	jne    c000188c <dlmemalign+0x39>
c0001888:	89 d7                	mov    edi,edx
c000188a:	eb 08                	jmp    c0001894 <dlmemalign+0x41>
c000188c:	39 d7                	cmp    edi,edx
c000188e:	73 04                	jae    c0001894 <dlmemalign+0x41>
c0001890:	01 ff                	add    edi,edi
c0001892:	eb f8                	jmp    c000188c <dlmemalign+0x39>
c0001894:	83 f8 df             	cmp    eax,0xffffffdf
c0001897:	76 07                	jbe    c00018a0 <dlmemalign+0x4d>
c0001899:	31 c0                	xor    eax,eax
c000189b:	e9 ce 00 00 00       	jmp    c000196e <dlmemalign+0x11b>
c00018a0:	83 c0 0b             	add    eax,0xb
c00018a3:	bd 10 00 00 00       	mov    ebp,0x10
c00018a8:	83 f8 0f             	cmp    eax,0xf
c00018ab:	76 05                	jbe    c00018b2 <dlmemalign+0x5f>
c00018ad:	83 e0 f8             	and    eax,0xfffffff8
c00018b0:	89 c5                	mov    ebp,eax
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b9:	50                   	push   eax
c00018ba:	e8 a2 f8 ff ff       	call   c0001161 <dlmalloc>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	89 c1                	mov    ecx,eax
c00018c4:	85 c0                	test   eax,eax
c00018c6:	74 d1                	je     c0001899 <dlmemalign+0x46>
c00018c8:	31 d2                	xor    edx,edx
c00018ca:	8d 70 f8             	lea    esi,[eax-0x8]
c00018cd:	f7 f7                	div    edi
c00018cf:	85 d2                	test   edx,edx
c00018d1:	74 62                	je     c0001935 <dlmemalign+0xe2>
c00018d3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d7:	89 f8                	mov    eax,edi
c00018d9:	f7 d8                	neg    eax
c00018db:	21 c3                	and    ebx,eax
c00018dd:	83 eb 08             	sub    ebx,0x8
c00018e0:	89 d8                	mov    eax,ebx
c00018e2:	29 f0                	sub    eax,esi
c00018e4:	83 f8 0f             	cmp    eax,0xf
c00018e7:	77 02                	ja     c00018eb <dlmemalign+0x98>
c00018e9:	01 fb                	add    ebx,edi
c00018eb:	89 d8                	mov    eax,ebx
c00018ed:	29 f0                	sub    eax,esi
c00018ef:	89 c6                	mov    esi,eax
c00018f1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f4:	89 c2                	mov    edx,eax
c00018f6:	83 e2 fc             	and    edx,0xfffffffc
c00018f9:	29 f2                	sub    edx,esi
c00018fb:	a8 02                	test   al,0x2
c00018fd:	74 10                	je     c000190f <dlmemalign+0xbc>
c00018ff:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001902:	83 ca 02             	or     edx,0x2
c0001905:	8d 43 08             	lea    eax,[ebx+0x8]
c0001908:	89 33                	mov    DWORD PTR [ebx],esi
c000190a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000190d:	eb 5f                	jmp    c000196e <dlmemalign+0x11b>
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	89 d0                	mov    eax,edx
c0001914:	83 c8 01             	or     eax,0x1
c0001917:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000191a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000191f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001922:	83 e0 01             	and    eax,0x1
c0001925:	09 f0                	or     eax,esi
c0001927:	89 de                	mov    esi,ebx
c0001929:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000192c:	51                   	push   ecx
c000192d:	e8 d4 f4 ff ff       	call   c0000e06 <dlfree>
c0001932:	83 c4 10             	add    esp,0x10
c0001935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001938:	a8 02                	test   al,0x2
c000193a:	75 2f                	jne    c000196b <dlmemalign+0x118>
c000193c:	83 e0 fc             	and    eax,0xfffffffc
c000193f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001942:	39 c2                	cmp    edx,eax
c0001944:	73 25                	jae    c000196b <dlmemalign+0x118>
c0001946:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001949:	83 ec 0c             	sub    esp,0xc
c000194c:	29 e8                	sub    eax,ebp
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	83 c8 01             	or     eax,0x1
c0001954:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001957:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195a:	83 e0 01             	and    eax,0x1
c000195d:	09 c5                	or     ebp,eax
c000195f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001962:	52                   	push   edx
c0001963:	e8 9e f4 ff ff       	call   c0000e06 <dlfree>
c0001968:	83 c4 10             	add    esp,0x10
c000196b:	8d 46 08             	lea    eax,[esi+0x8]
c000196e:	83 c4 0c             	add    esp,0xc
c0001971:	5b                   	pop    ebx
c0001972:	5e                   	pop    esi
c0001973:	5f                   	pop    edi
c0001974:	5d                   	pop    ebp
c0001975:	c3                   	ret    

c0001976 <dlcalloc>:
c0001976:	53                   	push   ebx
c0001977:	83 ec 14             	sub    esp,0x14
c000197a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000197e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001983:	50                   	push   eax
c0001984:	e8 d8 f7 ff ff       	call   c0001161 <dlmalloc>
c0001989:	83 c4 10             	add    esp,0x10
c000198c:	89 c3                	mov    ebx,eax
c000198e:	85 c0                	test   eax,eax
c0001990:	74 77                	je     c0001a09 <dlcalloc+0x93>
c0001992:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001995:	89 d0                	mov    eax,edx
c0001997:	83 e0 fc             	and    eax,0xfffffffc
c000199a:	80 e2 02             	and    dl,0x2
c000199d:	75 5a                	jne    c00019f9 <dlcalloc+0x83>
c000199f:	83 e8 04             	sub    eax,0x4
c00019a2:	83 f8 27             	cmp    eax,0x27
c00019a5:	76 03                	jbe    c00019aa <dlcalloc+0x34>
c00019a7:	51                   	push   ecx
c00019a8:	eb 53                	jmp    c00019fd <dlcalloc+0x87>
c00019aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019be:	83 f8 13             	cmp    eax,0x13
c00019c1:	76 46                	jbe    c0001a09 <dlcalloc+0x93>
c00019c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019d1:	83 f8 1b             	cmp    eax,0x1b
c00019d4:	76 33                	jbe    c0001a09 <dlcalloc+0x93>
c00019d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e4:	83 f8 23             	cmp    eax,0x23
c00019e7:	76 20                	jbe    c0001a09 <dlcalloc+0x93>
c00019e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f7:	eb 10                	jmp    c0001a09 <dlcalloc+0x93>
c00019f9:	83 e8 08             	sub    eax,0x8
c00019fc:	52                   	push   edx
c00019fd:	50                   	push   eax
c00019fe:	6a 00                	push   0x0
c0001a00:	53                   	push   ebx
c0001a01:	e8 d2 ec ff ff       	call   c00006d8 <memset>
c0001a06:	83 c4 10             	add    esp,0x10
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	83 c4 08             	add    esp,0x8
c0001a0e:	5b                   	pop    ebx
c0001a0f:	c3                   	ret    

c0001a10 <dlcfree>:
c0001a10:	e9 f1 f3 ff ff       	jmp    c0000e06 <dlfree>

c0001a15 <dlindependent_calloc>:
c0001a15:	83 ec 28             	sub    esp,0x28
c0001a18:	b9 03 00 00 00       	mov    ecx,0x3
c0001a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a31:	e8 b9 fa ff ff       	call   c00014ef <iALLOc>
c0001a36:	83 c4 2c             	add    esp,0x2c
c0001a39:	c3                   	ret    

c0001a3a <dlindependent_comalloc>:
c0001a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a42:	31 c9                	xor    ecx,ecx
c0001a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a4c:	e9 9e fa ff ff       	jmp    c00014ef <iALLOc>

c0001a51 <dlvalloc>:
c0001a51:	83 ec 0c             	sub    esp,0xc
c0001a54:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c0001a5b:	75 0a                	jne    c0001a67 <dlvalloc+0x16>
c0001a5d:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001a62:	e8 b8 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a67:	50                   	push   eax
c0001a68:	50                   	push   eax
c0001a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a6d:	ff 35 1c b9 03 c0    	push   DWORD PTR ds:0xc003b91c
c0001a73:	e8 db fd ff ff       	call   c0001853 <dlmemalign>
c0001a78:	83 c4 1c             	add    esp,0x1c
c0001a7b:	c3                   	ret    

c0001a7c <dlpvalloc>:
c0001a7c:	83 ec 0c             	sub    esp,0xc
c0001a7f:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c0001a86:	75 0a                	jne    c0001a92 <dlpvalloc+0x16>
c0001a88:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001a8d:	e8 8d f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a92:	a1 1c b9 03 c0       	mov    eax,ds:0xc003b91c
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	52                   	push   edx
c0001a9a:	f7 d9                	neg    ecx
c0001a9c:	52                   	push   edx
c0001a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001aa1:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aa5:	21 ca                	and    edx,ecx
c0001aa7:	52                   	push   edx
c0001aa8:	50                   	push   eax
c0001aa9:	e8 a5 fd ff ff       	call   c0001853 <dlmemalign>
c0001aae:	83 c4 1c             	add    esp,0x1c
c0001ab1:	c3                   	ret    

c0001ab2 <dlmalloc_trim>:
c0001ab2:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001ab7:	e8 63 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001abc:	31 c0                	xor    eax,eax
c0001abe:	c3                   	ret    

c0001abf <dlmalloc_usable_size>:
c0001abf:	53                   	push   ebx
c0001ac0:	31 c0                	xor    eax,eax
c0001ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac6:	85 c9                	test   ecx,ecx
c0001ac8:	74 24                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001aca:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001acd:	f6 c2 02             	test   dl,0x2
c0001ad0:	74 08                	je     c0001ada <dlmalloc_usable_size+0x1b>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad8:	eb 14                	jmp    c0001aee <dlmalloc_usable_size+0x2f>
c0001ada:	89 d3                	mov    ebx,edx
c0001adc:	31 c0                	xor    eax,eax
c0001ade:	83 e3 fe             	and    ebx,0xfffffffe
c0001ae1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae6:	74 06                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001ae8:	83 e2 fc             	and    edx,0xfffffffc
c0001aeb:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aee:	5b                   	pop    ebx
c0001aef:	c3                   	ret    

c0001af0 <dlmallinfo>:
c0001af0:	55                   	push   ebp
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	53                   	push   ebx
c0001af4:	83 ec 08             	sub    esp,0x8
c0001af7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afb:	83 3d ec b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5ec,0x0
c0001b02:	75 0a                	jne    c0001b0e <dlmallinfo+0x1e>
c0001b04:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001b09:	e8 11 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001b0e:	a1 ec b5 03 c0       	mov    eax,ds:0xc003b5ec
c0001b13:	31 ed                	xor    ebp,ebp
c0001b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b18:	31 c9                	xor    ecx,ecx
c0001b1a:	83 e0 fc             	and    eax,0xfffffffc
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	8b 14 85 c4 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4a3c]
c0001b2a:	85 d2                	test   edx,edx
c0001b2c:	74 0e                	je     c0001b3c <dlmallinfo+0x4c>
c0001b2e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b31:	45                   	inc    ebp
c0001b32:	83 e6 fc             	and    esi,0xfffffffc
c0001b35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b38:	01 f1                	add    ecx,esi
c0001b3a:	eb ee                	jmp    c0001b2a <dlmallinfo+0x3a>
c0001b3c:	40                   	inc    eax
c0001b3d:	83 f8 0a             	cmp    eax,0xa
c0001b40:	75 e1                	jne    c0001b23 <dlmallinfo+0x33>
c0001b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b50:	b8 f4 b5 03 c0       	mov    eax,0xc003b5f4
c0001b55:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b58:	39 f0                	cmp    eax,esi
c0001b5a:	74 10                	je     c0001b6c <dlmallinfo+0x7c>
c0001b5c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b5f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b62:	83 e7 fc             	and    edi,0xfffffffc
c0001b65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b68:	01 fa                	add    edx,edi
c0001b6a:	eb ec                	jmp    c0001b58 <dlmallinfo+0x68>
c0001b6c:	83 c0 08             	add    eax,0x8
c0001b6f:	3d ec b8 03 c0       	cmp    eax,0xc003b8ec
c0001b74:	75 df                	jne    c0001b55 <dlmallinfo+0x65>
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b7c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b7f:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0001b84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b87:	89 03                	mov    DWORD PTR [ebx],eax
c0001b89:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b8c:	8b 35 10 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b910
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b9a:	8b 35 24 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b924
c0001ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	8b 35 34 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b934
c0001bb0:	89 d8                	mov    eax,ebx
c0001bb2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bb5:	83 c4 08             	add    esp,0x8
c0001bb8:	5b                   	pop    ebx
c0001bb9:	5e                   	pop    esi
c0001bba:	5f                   	pop    edi
c0001bbb:	5d                   	pop    ebp
c0001bbc:	c2 04 00             	ret    0x4

c0001bbf <dlmalloc_stats>:
c0001bbf:	83 ec 30             	sub    esp,0x30
c0001bc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc6:	50                   	push   eax
c0001bc7:	e8 24 ff ff ff       	call   c0001af0 <dlmallinfo>
c0001bcc:	83 c4 30             	add    esp,0x30
c0001bcf:	c3                   	ret    

c0001bd0 <dlmallopt>:
c0001bd0:	56                   	push   esi
c0001bd1:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001bd6:	53                   	push   ebx
c0001bd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bdf:	e8 3b f1 ff ff       	call   c0000d1f <malloc_consolidate>
c0001be4:	8d 46 04             	lea    eax,[esi+0x4]
c0001be7:	83 f8 05             	cmp    eax,0x5
c0001bea:	77 67                	ja     c0001c53 <dlmallopt+0x83>
c0001bec:	ff 24 85 24 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe09dc]
c0001bf3:	83 fb 50             	cmp    ebx,0x50
c0001bf6:	77 5b                	ja     c0001c53 <dlmallopt+0x83>
c0001bf8:	ba 08 00 00 00       	mov    edx,0x8
c0001bfd:	85 db                	test   ebx,ebx
c0001bff:	74 12                	je     c0001c13 <dlmallopt+0x43>
c0001c01:	83 c3 0b             	add    ebx,0xb
c0001c04:	ba 10 00 00 00       	mov    edx,0x10
c0001c09:	83 fb 0f             	cmp    ebx,0xf
c0001c0c:	76 05                	jbe    c0001c13 <dlmallopt+0x43>
c0001c0e:	89 da                	mov    edx,ebx
c0001c10:	83 e2 f8             	and    edx,0xfffffff8
c0001c13:	a1 c0 b5 03 c0       	mov    eax,ds:0xc003b5c0
c0001c18:	83 e0 03             	and    eax,0x3
c0001c1b:	09 d0                	or     eax,edx
c0001c1d:	a3 c0 b5 03 c0       	mov    ds:0xc003b5c0,eax
c0001c22:	eb 31                	jmp    c0001c55 <dlmallopt+0x85>
c0001c24:	89 1d 04 b9 03 c0    	mov    DWORD PTR ds:0xc003b904,ebx
c0001c2a:	eb 06                	jmp    c0001c32 <dlmallopt+0x62>
c0001c2c:	89 1d 08 b9 03 c0    	mov    DWORD PTR ds:0xc003b908,ebx
c0001c32:	be 01 00 00 00       	mov    esi,0x1
c0001c37:	eb 1c                	jmp    c0001c55 <dlmallopt+0x85>
c0001c39:	89 1d 0c b9 03 c0    	mov    DWORD PTR ds:0xc003b90c,ebx
c0001c3f:	eb f1                	jmp    c0001c32 <dlmallopt+0x62>
c0001c41:	31 f6                	xor    esi,esi
c0001c43:	85 db                	test   ebx,ebx
c0001c45:	75 0e                	jne    c0001c55 <dlmallopt+0x85>
c0001c47:	c7 05 14 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b914,0x0
c0001c51:	eb df                	jmp    c0001c32 <dlmallopt+0x62>
c0001c53:	31 f6                	xor    esi,esi
c0001c55:	89 f0                	mov    eax,esi
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	c3                   	ret    

c0001c5a <disk_status>:
c0001c5a:	31 c0                	xor    eax,eax
c0001c5c:	c3                   	ret    

c0001c5d <disk_initialize>:
c0001c5d:	31 c0                	xor    eax,eax
c0001c5f:	c3                   	ret    

c0001c60 <disk_read>:
c0001c60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c65:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c71:	e9 a6 79 01 00       	jmp    c001961c <fatWrapperReadDisk>

c0001c76 <disk_write>:
c0001c76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c7b:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c87:	e9 d7 79 01 00       	jmp    c0019663 <fatWrapperWriteDisk>

c0001c8c <disk_ioctl>:
c0001c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c95:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c9a:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ca6:	e9 ff 79 01 00       	jmp    c00196aa <fatWrapperIoctl>

c0001cab <ld_word>:
c0001cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001caf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cb2:	c1 e2 08             	shl    edx,0x8
c0001cb5:	09 d0                	or     eax,edx
c0001cb7:	c3                   	ret    

c0001cb8 <ld_dword>:
c0001cb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001cbc:	89 d1                	mov    ecx,edx
c0001cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc2:	c1 e1 08             	shl    ecx,0x8
c0001cc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc8:	09 ca                	or     edx,ecx
c0001cca:	c1 e2 08             	shl    edx,0x8
c0001ccd:	09 d0                	or     eax,edx
c0001ccf:	c3                   	ret    

c0001cd0 <ld_qword>:
c0001cd0:	57                   	push   edi
c0001cd1:	56                   	push   esi
c0001cd2:	53                   	push   ebx
c0001cd3:	31 db                	xor    ebx,ebx
c0001cd5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cd8:	89 df                	mov    edi,ebx
c0001cda:	89 ce                	mov    esi,ecx
c0001cdc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ce0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ce4:	c1 e6 08             	shl    esi,0x8
c0001ce7:	09 f2                	or     edx,esi
c0001ce9:	89 d6                	mov    esi,edx
c0001ceb:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cef:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cf3:	c1 e6 08             	shl    esi,0x8
c0001cf6:	09 f2                	or     edx,esi
c0001cf8:	89 d6                	mov    esi,edx
c0001cfa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cfe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001d02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d05:	c1 e6 08             	shl    esi,0x8
c0001d08:	89 fb                	mov    ebx,edi
c0001d0a:	09 f2                	or     edx,esi
c0001d0c:	89 d1                	mov    ecx,edx
c0001d0e:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001d12:	c1 e1 08             	shl    ecx,0x8
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	09 c8                	or     eax,ecx
c0001d19:	5b                   	pop    ebx
c0001d1a:	5e                   	pop    esi
c0001d1b:	5f                   	pop    edi
c0001d1c:	c3                   	ret    

c0001d1d <st_word>:
c0001d1d:	66 89 10             	mov    WORD PTR [eax],dx
c0001d20:	c3                   	ret    

c0001d21 <st_dword>:
c0001d21:	89 10                	mov    DWORD PTR [eax],edx
c0001d23:	c3                   	ret    

c0001d24 <st_qword>:
c0001d24:	89 10                	mov    DWORD PTR [eax],edx
c0001d26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d29:	c3                   	ret    

c0001d2a <mem_cpy>:
c0001d2a:	85 c9                	test   ecx,ecx
c0001d2c:	74 10                	je     c0001d3e <mem_cpy+0x14>
c0001d2e:	57                   	push   edi
c0001d2f:	01 c1                	add    ecx,eax
c0001d31:	56                   	push   esi
c0001d32:	89 c7                	mov    edi,eax
c0001d34:	89 d6                	mov    esi,edx
c0001d36:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d37:	39 f9                	cmp    ecx,edi
c0001d39:	75 fb                	jne    c0001d36 <mem_cpy+0xc>
c0001d3b:	5e                   	pop    esi
c0001d3c:	5f                   	pop    edi
c0001d3d:	c3                   	ret    
c0001d3e:	c3                   	ret    

c0001d3f <mem_set>:
c0001d3f:	01 c1                	add    ecx,eax
c0001d41:	40                   	inc    eax
c0001d42:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d45:	39 c8                	cmp    eax,ecx
c0001d47:	75 f8                	jne    c0001d41 <mem_set+0x2>
c0001d49:	c3                   	ret    

c0001d4a <mem_cmp>:
c0001d4a:	57                   	push   edi
c0001d4b:	56                   	push   esi
c0001d4c:	89 c6                	mov    esi,eax
c0001d4e:	53                   	push   ebx
c0001d4f:	46                   	inc    esi
c0001d50:	42                   	inc    edx
c0001d51:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d55:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d59:	29 fb                	sub    ebx,edi
c0001d5b:	89 cf                	mov    edi,ecx
c0001d5d:	29 f7                	sub    edi,esi
c0001d5f:	01 c7                	add    edi,eax
c0001d61:	74 04                	je     c0001d67 <mem_cmp+0x1d>
c0001d63:	85 db                	test   ebx,ebx
c0001d65:	74 e8                	je     c0001d4f <mem_cmp+0x5>
c0001d67:	89 d8                	mov    eax,ebx
c0001d69:	5b                   	pop    ebx
c0001d6a:	5e                   	pop    esi
c0001d6b:	5f                   	pop    edi
c0001d6c:	c3                   	ret    

c0001d6d <chk_chr>:
c0001d6d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d70:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d73:	74 07                	je     c0001d7c <chk_chr+0xf>
c0001d75:	39 d1                	cmp    ecx,edx
c0001d77:	74 03                	je     c0001d7c <chk_chr+0xf>
c0001d79:	40                   	inc    eax
c0001d7a:	eb f1                	jmp    c0001d6d <chk_chr>
c0001d7c:	89 c8                	mov    eax,ecx
c0001d7e:	c3                   	ret    

c0001d7f <dbc_1st>:
c0001d7f:	31 c0                	xor    eax,eax
c0001d81:	c3                   	ret    

c0001d82 <dbc_2nd>:
c0001d82:	31 c0                	xor    eax,eax
c0001d84:	c3                   	ret    

c0001d85 <tchar2uni>:
c0001d85:	57                   	push   edi
c0001d86:	89 c7                	mov    edi,eax
c0001d88:	56                   	push   esi
c0001d89:	53                   	push   ebx
c0001d8a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d8c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d8e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d91:	84 c9                	test   cl,cl
c0001d93:	78 0a                	js     c0001d9f <tchar2uni+0x1a>
c0001d95:	0f b6 d1             	movzx  edx,cl
c0001d98:	89 f3                	mov    ebx,esi
c0001d9a:	e9 9f 00 00 00       	jmp    c0001e3e <tchar2uni+0xb9>
c0001d9f:	88 ca                	mov    dl,cl
c0001da1:	83 e2 e0             	and    edx,0xffffffe0
c0001da4:	80 fa c0             	cmp    dl,0xc0
c0001da7:	75 0c                	jne    c0001db5 <tchar2uni+0x30>
c0001da9:	89 ca                	mov    edx,ecx
c0001dab:	b9 01 00 00 00       	mov    ecx,0x1
c0001db0:	83 e2 1f             	and    edx,0x1f
c0001db3:	eb 2e                	jmp    c0001de3 <tchar2uni+0x5e>
c0001db5:	88 ca                	mov    dl,cl
c0001db7:	83 e2 f0             	and    edx,0xfffffff0
c0001dba:	80 fa e0             	cmp    dl,0xe0
c0001dbd:	75 0c                	jne    c0001dcb <tchar2uni+0x46>
c0001dbf:	89 ca                	mov    edx,ecx
c0001dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0001dc6:	83 e2 0f             	and    edx,0xf
c0001dc9:	eb 18                	jmp    c0001de3 <tchar2uni+0x5e>
c0001dcb:	88 ca                	mov    dl,cl
c0001dcd:	83 e2 f8             	and    edx,0xfffffff8
c0001dd0:	88 d0                	mov    al,dl
c0001dd2:	83 ca ff             	or     edx,0xffffffff
c0001dd5:	3c f0                	cmp    al,0xf0
c0001dd7:	75 6c                	jne    c0001e45 <tchar2uni+0xc0>
c0001dd9:	89 ca                	mov    edx,ecx
c0001ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0001de0:	83 e2 07             	and    edx,0x7
c0001de3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001de7:	46                   	inc    esi
c0001de8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 e0 c0             	and    eax,0xffffffc0
c0001df0:	3c 80                	cmp    al,0x80
c0001df2:	75 4e                	jne    c0001e42 <tchar2uni+0xbd>
c0001df4:	c1 e2 06             	shl    edx,0x6
c0001df7:	83 e1 3f             	and    ecx,0x3f
c0001dfa:	09 ca                	or     edx,ecx
c0001dfc:	39 de                	cmp    esi,ebx
c0001dfe:	75 e7                	jne    c0001de7 <tchar2uni+0x62>
c0001e00:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e03:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e09:	77 37                	ja     c0001e42 <tchar2uni+0xbd>
c0001e0b:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e11:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e17:	76 29                	jbe    c0001e42 <tchar2uni+0xbd>
c0001e19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e1f:	76 1d                	jbe    c0001e3e <tchar2uni+0xb9>
c0001e21:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e27:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e2d:	c1 e1 06             	shl    ecx,0x6
c0001e30:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e36:	09 ca                	or     edx,ecx
c0001e38:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e3e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e40:	eb 03                	jmp    c0001e45 <tchar2uni+0xc0>
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	5b                   	pop    ebx
c0001e46:	89 d0                	mov    eax,edx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	c3                   	ret    

c0001e4b <put_utf>:
c0001e4b:	53                   	push   ebx
c0001e4c:	83 f8 7f             	cmp    eax,0x7f
c0001e4f:	89 c3                	mov    ebx,eax
c0001e51:	b0 00                	mov    al,0x0
c0001e53:	77 11                	ja     c0001e66 <put_utf+0x1b>
c0001e55:	85 c9                	test   ecx,ecx
c0001e57:	0f 84 e5 00 00 00    	je     c0001f42 <put_utf+0xf7>
c0001e5d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e5f:	b0 01                	mov    al,0x1
c0001e61:	e9 dc 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e6c:	77 23                	ja     c0001e91 <put_utf+0x46>
c0001e6e:	83 f9 01             	cmp    ecx,0x1
c0001e71:	0f 86 cb 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	83 e3 3f             	and    ebx,0x3f
c0001e7c:	c1 e8 06             	shr    eax,0x6
c0001e7f:	83 cb 80             	or     ebx,0xffffff80
c0001e82:	83 c8 c0             	or     eax,0xffffffc0
c0001e85:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e88:	88 02                	mov    BYTE PTR [edx],al
c0001e8a:	b0 02                	mov    al,0x2
c0001e8c:	e9 b1 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e91:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e97:	77 40                	ja     c0001ed9 <put_utf+0x8e>
c0001e99:	83 f9 02             	cmp    ecx,0x2
c0001e9c:	0f 86 a0 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001ea2:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ea8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eae:	0f 86 8e 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001eb4:	89 d8                	mov    eax,ebx
c0001eb6:	c1 e8 0c             	shr    eax,0xc
c0001eb9:	83 c8 e0             	or     eax,0xffffffe0
c0001ebc:	88 02                	mov    BYTE PTR [edx],al
c0001ebe:	89 d8                	mov    eax,ebx
c0001ec0:	83 e3 3f             	and    ebx,0x3f
c0001ec3:	c1 e8 06             	shr    eax,0x6
c0001ec6:	83 cb 80             	or     ebx,0xffffff80
c0001ec9:	83 e0 3f             	and    eax,0x3f
c0001ecc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ecf:	83 c8 80             	or     eax,0xffffff80
c0001ed2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ed5:	b0 03                	mov    al,0x3
c0001ed7:	eb 69                	jmp    c0001f42 <put_utf+0xf7>
c0001ed9:	83 f9 03             	cmp    ecx,0x3
c0001edc:	76 64                	jbe    c0001f42 <put_utf+0xf7>
c0001ede:	89 d9                	mov    ecx,ebx
c0001ee0:	0f b7 c3             	movzx  eax,bx
c0001ee3:	66 31 c9             	xor    cx,cx
c0001ee6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eec:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ef2:	c1 e9 06             	shr    ecx,0x6
c0001ef5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001efb:	77 43                	ja     c0001f40 <put_utf+0xf5>
c0001efd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f03:	77 3b                	ja     c0001f40 <put_utf+0xf5>
c0001f05:	09 cb                	or     ebx,ecx
c0001f07:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f0d:	89 d8                	mov    eax,ebx
c0001f0f:	c1 e8 12             	shr    eax,0x12
c0001f12:	83 c8 f0             	or     eax,0xfffffff0
c0001f15:	88 02                	mov    BYTE PTR [edx],al
c0001f17:	89 d8                	mov    eax,ebx
c0001f19:	c1 e8 0c             	shr    eax,0xc
c0001f1c:	83 e0 3f             	and    eax,0x3f
c0001f1f:	83 c8 80             	or     eax,0xffffff80
c0001f22:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f25:	89 d8                	mov    eax,ebx
c0001f27:	83 e3 3f             	and    ebx,0x3f
c0001f2a:	c1 e8 06             	shr    eax,0x6
c0001f2d:	83 cb 80             	or     ebx,0xffffff80
c0001f30:	83 e0 3f             	and    eax,0x3f
c0001f33:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f36:	83 c8 80             	or     eax,0xffffff80
c0001f39:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f3c:	b0 04                	mov    al,0x4
c0001f3e:	eb 02                	jmp    c0001f42 <put_utf+0xf7>
c0001f40:	31 c0                	xor    eax,eax
c0001f42:	5b                   	pop    ebx
c0001f43:	c3                   	ret    

c0001f44 <clst2sect>:
c0001f44:	89 c1                	mov    ecx,eax
c0001f46:	83 ea 02             	sub    edx,0x2
c0001f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f4c:	83 e8 02             	sub    eax,0x2
c0001f4f:	39 d0                	cmp    eax,edx
c0001f51:	76 0d                	jbe    c0001f60 <clst2sect+0x1c>
c0001f53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f57:	f7 e2                	mul    edx
c0001f59:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f5c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f5f:	c3                   	ret    
c0001f60:	31 c0                	xor    eax,eax
c0001f62:	31 d2                	xor    edx,edx
c0001f64:	c3                   	ret    

c0001f65 <clmt_clust>:
c0001f65:	57                   	push   edi
c0001f66:	89 cf                	mov    edi,ecx
c0001f68:	56                   	push   esi
c0001f69:	89 d6                	mov    esi,edx
c0001f6b:	53                   	push   ebx
c0001f6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f70:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f73:	89 f2                	mov    edx,esi
c0001f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f77:	c1 ef 09             	shr    edi,0x9
c0001f7a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f7e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f81:	89 f9                	mov    ecx,edi
c0001f83:	31 ff                	xor    edi,edi
c0001f85:	57                   	push   edi
c0001f86:	56                   	push   esi
c0001f87:	51                   	push   ecx
c0001f88:	52                   	push   edx
c0001f89:	e8 2e c7 01 00       	call   c001e6bc <__udivdi3>
c0001f8e:	83 c4 10             	add    esp,0x10
c0001f91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f93:	85 d2                	test   edx,edx
c0001f95:	74 10                	je     c0001fa7 <clmt_clust+0x42>
c0001f97:	39 d0                	cmp    eax,edx
c0001f99:	72 07                	jb     c0001fa2 <clmt_clust+0x3d>
c0001f9b:	29 d0                	sub    eax,edx
c0001f9d:	83 c3 08             	add    ebx,0x8
c0001fa0:	eb ef                	jmp    c0001f91 <clmt_clust+0x2c>
c0001fa2:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001fa5:	89 c2                	mov    edx,eax
c0001fa7:	5b                   	pop    ebx
c0001fa8:	89 d0                	mov    eax,edx
c0001faa:	5e                   	pop    esi
c0001fab:	5f                   	pop    edi
c0001fac:	c3                   	ret    

c0001fad <pick_lfn>:
c0001fad:	55                   	push   ebp
c0001fae:	57                   	push   edi
c0001faf:	56                   	push   esi
c0001fb0:	89 d6                	mov    esi,edx
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c3                	mov    ebx,eax
c0001fb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fb8:	e8 ee fc ff ff       	call   c0001cab <ld_word>
c0001fbd:	66 85 c0             	test   ax,ax
c0001fc0:	74 04                	je     c0001fc6 <pick_lfn+0x19>
c0001fc2:	31 c0                	xor    eax,eax
c0001fc4:	eb 5c                	jmp    c0002022 <pick_lfn+0x75>
c0001fc6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0001fce:	83 e1 bf             	and    ecx,0xffffffbf
c0001fd1:	31 ff                	xor    edi,edi
c0001fd3:	49                   	dec    ecx
c0001fd4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fd7:	0f b6 87 40 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe08c0]
c0001fde:	01 f0                	add    eax,esi
c0001fe0:	e8 c6 fc ff ff       	call   c0001cab <ld_word>
c0001fe5:	66 85 ed             	test   bp,bp
c0001fe8:	74 11                	je     c0001ffb <pick_lfn+0x4e>
c0001fea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff0:	77 d0                	ja     c0001fc2 <pick_lfn+0x15>
c0001ff2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ff6:	89 c5                	mov    ebp,eax
c0001ff8:	41                   	inc    ecx
c0001ff9:	eb 04                	jmp    c0001fff <pick_lfn+0x52>
c0001ffb:	66 40                	inc    ax
c0001ffd:	75 c3                	jne    c0001fc2 <pick_lfn+0x15>
c0001fff:	47                   	inc    edi
c0002000:	83 ff 0d             	cmp    edi,0xd
c0002003:	75 d2                	jne    c0001fd7 <pick_lfn+0x2a>
c0002005:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002008:	74 13                	je     c000201d <pick_lfn+0x70>
c000200a:	66 85 ed             	test   bp,bp
c000200d:	74 0e                	je     c000201d <pick_lfn+0x70>
c000200f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002015:	77 ab                	ja     c0001fc2 <pick_lfn+0x15>
c0002017:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000201d:	b8 01 00 00 00       	mov    eax,0x1
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <put_lfn>:
c0002027:	55                   	push   ebp
c0002028:	31 ed                	xor    ebp,ebp
c000202a:	57                   	push   edi
c000202b:	89 d7                	mov    edi,edx
c000202d:	56                   	push   esi
c000202e:	31 f6                	xor    esi,esi
c0002030:	53                   	push   ebx
c0002031:	83 ec 08             	sub    esp,0x8
c0002034:	89 04 24             	mov    DWORD PTR [esp],eax
c0002037:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000203b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000203f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002045:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002048:	8d 42 1a             	lea    eax,[edx+0x1a]
c000204b:	31 d2                	xor    edx,edx
c000204d:	e8 cb fc ff ff       	call   c0001d1d <st_word>
c0002052:	0f b6 d9             	movzx  ebx,cl
c0002055:	4b                   	dec    ebx
c0002056:	6b db 0d             	imul   ebx,ebx,0xd
c0002059:	66 83 fe ff          	cmp    si,0xffff
c000205d:	74 08                	je     c0002067 <put_lfn+0x40>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002066:	43                   	inc    ebx
c0002067:	0f b6 85 40 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe08c0]
c000206e:	0f b7 d6             	movzx  edx,si
c0002071:	01 f8                	add    eax,edi
c0002073:	e8 a5 fc ff ff       	call   c0001d1d <st_word>
c0002078:	66 85 f6             	test   si,si
c000207b:	75 03                	jne    c0002080 <put_lfn+0x59>
c000207d:	83 ce ff             	or     esi,0xffffffff
c0002080:	45                   	inc    ebp
c0002081:	83 fd 0d             	cmp    ebp,0xd
c0002084:	75 d3                	jne    c0002059 <put_lfn+0x32>
c0002086:	66 46                	inc    si
c0002088:	74 0a                	je     c0002094 <put_lfn+0x6d>
c000208a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002092:	75 09                	jne    c000209d <put_lfn+0x76>
c0002094:	88 c8                	mov    al,cl
c0002096:	83 c8 40             	or     eax,0x40
c0002099:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000209d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020a1:	88 07                	mov    BYTE PTR [edi],al
c00020a3:	83 c4 08             	add    esp,0x8
c00020a6:	5b                   	pop    ebx
c00020a7:	5e                   	pop    esi
c00020a8:	5f                   	pop    edi
c00020a9:	5d                   	pop    ebp
c00020aa:	c3                   	ret    

c00020ab <gen_numname>:
c00020ab:	57                   	push   edi
c00020ac:	89 cf                	mov    edi,ecx
c00020ae:	56                   	push   esi
c00020af:	b9 0b 00 00 00       	mov    ecx,0xb
c00020b4:	53                   	push   ebx
c00020b5:	89 c6                	mov    esi,eax
c00020b7:	83 ec 10             	sub    esp,0x10
c00020ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020be:	e8 67 fc ff ff       	call   c0001d2a <mem_cpy>
c00020c3:	83 fb 05             	cmp    ebx,0x5
c00020c6:	76 2d                	jbe    c00020f5 <gen_numname+0x4a>
c00020c8:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020cb:	66 85 c0             	test   ax,ax
c00020ce:	74 25                	je     c00020f5 <gen_numname+0x4a>
c00020d0:	83 c7 02             	add    edi,0x2
c00020d3:	ba 10 00 00 00       	mov    edx,0x10
c00020d8:	01 db                	add    ebx,ebx
c00020da:	89 c1                	mov    ecx,eax
c00020dc:	66 d1 e8             	shr    ax,1
c00020df:	83 e1 01             	and    ecx,0x1
c00020e2:	01 cb                	add    ebx,ecx
c00020e4:	0f ba e3 10          	bt     ebx,0x10
c00020e8:	73 06                	jae    c00020f0 <gen_numname+0x45>
c00020ea:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020f0:	4a                   	dec    edx
c00020f1:	75 e5                	jne    c00020d8 <gen_numname+0x2d>
c00020f3:	eb d3                	jmp    c00020c8 <gen_numname+0x1d>
c00020f5:	b8 07 00 00 00       	mov    eax,0x7
c00020fa:	88 d9                	mov    cl,bl
c00020fc:	83 e1 0f             	and    ecx,0xf
c00020ff:	8d 51 30             	lea    edx,[ecx+0x30]
c0002102:	80 fa 39             	cmp    dl,0x39
c0002105:	76 03                	jbe    c000210a <gen_numname+0x5f>
c0002107:	8d 51 37             	lea    edx,[ecx+0x37]
c000210a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000210d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002111:	89 da                	mov    edx,ebx
c0002113:	c1 ea 04             	shr    edx,0x4
c0002116:	83 fb 0f             	cmp    ebx,0xf
c0002119:	76 06                	jbe    c0002121 <gen_numname+0x76>
c000211b:	89 c8                	mov    eax,ecx
c000211d:	89 d3                	mov    ebx,edx
c000211f:	eb d9                	jmp    c00020fa <gen_numname+0x4f>
c0002121:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002126:	31 d2                	xor    edx,edx
c0002128:	8d 58 fe             	lea    ebx,[eax-0x2]
c000212b:	8d 04 16             	lea    eax,[esi+edx*1]
c000212e:	39 ca                	cmp    edx,ecx
c0002130:	73 18                	jae    c000214a <gen_numname+0x9f>
c0002132:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002135:	3c 20                	cmp    al,0x20
c0002137:	74 11                	je     c000214a <gen_numname+0x9f>
c0002139:	e8 41 fc ff ff       	call   c0001d7f <dbc_1st>
c000213e:	85 c0                	test   eax,eax
c0002140:	74 05                	je     c0002147 <gen_numname+0x9c>
c0002142:	39 d3                	cmp    ebx,edx
c0002144:	74 04                	je     c000214a <gen_numname+0x9f>
c0002146:	42                   	inc    edx
c0002147:	42                   	inc    edx
c0002148:	eb e1                	jmp    c000212b <gen_numname+0x80>
c000214a:	b0 20                	mov    al,0x20
c000214c:	83 f9 07             	cmp    ecx,0x7
c000214f:	77 05                	ja     c0002156 <gen_numname+0xab>
c0002151:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002155:	41                   	inc    ecx
c0002156:	42                   	inc    edx
c0002157:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000215b:	83 fa 07             	cmp    edx,0x7
c000215e:	76 ea                	jbe    c000214a <gen_numname+0x9f>
c0002160:	83 c4 10             	add    esp,0x10
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	5f                   	pop    edi
c0002166:	c3                   	ret    

c0002167 <sum_sfn>:
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	31 d2                	xor    edx,edx
c000216b:	d0 ca                	ror    dl,1
c000216d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002170:	41                   	inc    ecx
c0002171:	83 f9 0b             	cmp    ecx,0xb
c0002174:	75 f5                	jne    c000216b <sum_sfn+0x4>
c0002176:	88 d0                	mov    al,dl
c0002178:	c3                   	ret    

c0002179 <xdir_sum>:
c0002179:	56                   	push   esi
c000217a:	31 c9                	xor    ecx,ecx
c000217c:	53                   	push   ebx
c000217d:	31 d2                	xor    edx,edx
c000217f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002183:	43                   	inc    ebx
c0002184:	c1 e3 05             	shl    ebx,0x5
c0002187:	83 fa 02             	cmp    edx,0x2
c000218a:	74 0b                	je     c0002197 <xdir_sum+0x1e>
c000218c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002190:	66 d1 c9             	ror    cx,1
c0002193:	01 f1                	add    ecx,esi
c0002195:	eb 05                	jmp    c000219c <xdir_sum+0x23>
c0002197:	ba 03 00 00 00       	mov    edx,0x3
c000219c:	42                   	inc    edx
c000219d:	39 d3                	cmp    ebx,edx
c000219f:	77 e6                	ja     c0002187 <xdir_sum+0xe>
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <xsum32>:
c00021a6:	d1 ca                	ror    edx,1
c00021a8:	0f b6 c0             	movzx  eax,al
c00021ab:	01 d0                	add    eax,edx
c00021ad:	c3                   	ret    

c00021ae <get_xfileinfo>:
c00021ae:	55                   	push   ebp
c00021af:	31 c9                	xor    ecx,ecx
c00021b1:	57                   	push   edi
c00021b2:	bd 40 00 00 00       	mov    ebp,0x40
c00021b7:	56                   	push   esi
c00021b8:	31 ff                	xor    edi,edi
c00021ba:	53                   	push   ebx
c00021bb:	89 c6                	mov    esi,eax
c00021bd:	83 ec 0c             	sub    esp,0xc
c00021c0:	89 d3                	mov    ebx,edx
c00021c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021c9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021cd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021d0:	76 6d                	jbe    c000223f <get_xfileinfo+0x91>
c00021d2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021d8:	76 0b                	jbe    c00021e5 <get_xfileinfo+0x37>
c00021da:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021de:	bf 01 00 00 00       	mov    edi,0x1
c00021e3:	eb 63                	jmp    c0002248 <get_xfileinfo+0x9a>
c00021e5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021eb:	75 03                	jne    c00021f0 <get_xfileinfo+0x42>
c00021ed:	83 c5 02             	add    ebp,0x2
c00021f0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021f3:	83 c5 02             	add    ebp,0x2
c00021f6:	e8 b0 fa ff ff       	call   c0001cab <ld_word>
c00021fb:	ff 04 24             	inc    DWORD PTR [esp]
c00021fe:	66 85 c9             	test   cx,cx
c0002201:	75 0d                	jne    c0002210 <get_xfileinfo+0x62>
c0002203:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002209:	66 81 fa ff 07       	cmp    dx,0x7ff
c000220e:	76 2b                	jbe    c000223b <get_xfileinfo+0x8d>
c0002210:	c1 e1 10             	shl    ecx,0x10
c0002213:	ba ff 00 00 00       	mov    edx,0xff
c0002218:	0f b7 c0             	movzx  eax,ax
c000221b:	29 fa                	sub    edx,edi
c000221d:	09 c8                	or     eax,ecx
c000221f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002223:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002227:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000222b:	e8 1b fc ff ff       	call   c0001e4b <put_utf>
c0002230:	84 c0                	test   al,al
c0002232:	74 a6                	je     c00021da <get_xfileinfo+0x2c>
c0002234:	0f b6 c0             	movzx  eax,al
c0002237:	01 c7                	add    edi,eax
c0002239:	31 c0                	xor    eax,eax
c000223b:	89 c1                	mov    ecx,eax
c000223d:	eb 8a                	jmp    c00021c9 <get_xfileinfo+0x1b>
c000223f:	85 ff                	test   edi,edi
c0002241:	74 97                	je     c00021da <get_xfileinfo+0x2c>
c0002243:	66 85 c9             	test   cx,cx
c0002246:	75 92                	jne    c00021da <get_xfileinfo+0x2c>
c0002248:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000224d:	31 c0                	xor    eax,eax
c000224f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002253:	31 d2                	xor    edx,edx
c0002255:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002258:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000225b:	80 e1 10             	and    cl,0x10
c000225e:	75 08                	jne    c0002268 <get_xfileinfo+0xba>
c0002260:	8d 46 38             	lea    eax,[esi+0x38]
c0002263:	e8 68 fa ff ff       	call   c0001cd0 <ld_qword>
c0002268:	89 03                	mov    DWORD PTR [ebx],eax
c000226a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000226d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002270:	e8 36 fa ff ff       	call   c0001cab <ld_word>
c0002275:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002279:	8d 46 0e             	lea    eax,[esi+0xe]
c000227c:	e8 2a fa ff ff       	call   c0001cab <ld_word>
c0002281:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002285:	83 c4 0c             	add    esp,0xc
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	5d                   	pop    ebp
c000228c:	c3                   	ret    

c000228d <get_ldnumber>:
c000228d:	8b 10                	mov    edx,DWORD PTR [eax]
c000228f:	85 d2                	test   edx,edx
c0002291:	74 14                	je     c00022a7 <get_ldnumber+0x1a>
c0002293:	56                   	push   esi
c0002294:	53                   	push   ebx
c0002295:	89 d3                	mov    ebx,edx
c0002297:	43                   	inc    ebx
c0002298:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000229b:	80 f9 1f             	cmp    cl,0x1f
c000229e:	76 0d                	jbe    c00022ad <get_ldnumber+0x20>
c00022a0:	80 f9 3a             	cmp    cl,0x3a
c00022a3:	75 f2                	jne    c0002297 <get_ldnumber+0xa>
c00022a5:	eb 0a                	jmp    c00022b1 <get_ldnumber+0x24>
c00022a7:	83 c9 ff             	or     ecx,0xffffffff
c00022aa:	89 c8                	mov    eax,ecx
c00022ac:	c3                   	ret    
c00022ad:	31 c9                	xor    ecx,ecx
c00022af:	eb 24                	jmp    c00022d5 <get_ldnumber+0x48>
c00022b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00022b4:	8d 4e d0             	lea    ecx,[esi-0x30]
c00022b7:	80 f9 09             	cmp    cl,0x9
c00022ba:	77 16                	ja     c00022d2 <get_ldnumber+0x45>
c00022bc:	83 c2 02             	add    edx,0x2
c00022bf:	83 c9 ff             	or     ecx,0xffffffff
c00022c2:	39 d3                	cmp    ebx,edx
c00022c4:	75 0f                	jne    c00022d5 <get_ldnumber+0x48>
c00022c6:	89 f2                	mov    edx,esi
c00022c8:	89 18                	mov    DWORD PTR [eax],ebx
c00022ca:	0f be ca             	movsx  ecx,dl
c00022cd:	83 e9 30             	sub    ecx,0x30
c00022d0:	eb 03                	jmp    c00022d5 <get_ldnumber+0x48>
c00022d2:	83 c9 ff             	or     ecx,0xffffffff
c00022d5:	89 c8                	mov    eax,ecx
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <crc32>:
c00022da:	56                   	push   esi
c00022db:	89 d6                	mov    esi,edx
c00022dd:	53                   	push   ebx
c00022de:	b2 01                	mov    dl,0x1
c00022e0:	bb 08 00 00 00       	mov    ebx,0x8
c00022e5:	89 f1                	mov    ecx,esi
c00022e7:	84 d1                	test   cl,dl
c00022e9:	0f 95 c1             	setne  cl
c00022ec:	0f b6 c9             	movzx  ecx,cl
c00022ef:	31 c1                	xor    ecx,eax
c00022f1:	89 c8                	mov    eax,ecx
c00022f3:	d1 e8                	shr    eax,1
c00022f5:	80 e1 01             	and    cl,0x1
c00022f8:	74 05                	je     c00022ff <crc32+0x25>
c00022fa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022ff:	d1 e2                	shl    edx,1
c0002301:	4b                   	dec    ebx
c0002302:	75 e1                	jne    c00022e5 <crc32+0xb>
c0002304:	5b                   	pop    ebx
c0002305:	5e                   	pop    esi
c0002306:	c3                   	ret    

c0002307 <test_gpt_header>:
c0002307:	55                   	push   ebp
c0002308:	b9 10 00 00 00       	mov    ecx,0x10
c000230d:	57                   	push   edi
c000230e:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0002313:	56                   	push   esi
c0002314:	31 ff                	xor    edi,edi
c0002316:	53                   	push   ebx
c0002317:	89 c3                	mov    ebx,eax
c0002319:	e8 2c fa ff ff       	call   c0001d4a <mem_cmp>
c000231e:	85 c0                	test   eax,eax
c0002320:	75 55                	jne    c0002377 <test_gpt_header+0x70>
c0002322:	89 c7                	mov    edi,eax
c0002324:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002329:	83 ce ff             	or     esi,0xffffffff
c000232c:	31 d2                	xor    edx,edx
c000232e:	83 fd 03             	cmp    ebp,0x3
c0002331:	76 05                	jbe    c0002338 <test_gpt_header+0x31>
c0002333:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002338:	89 f0                	mov    eax,esi
c000233a:	45                   	inc    ebp
c000233b:	e8 9a ff ff ff       	call   c00022da <crc32>
c0002340:	83 fd 4c             	cmp    ebp,0x4c
c0002343:	89 c6                	mov    esi,eax
c0002345:	75 e5                	jne    c000232c <test_gpt_header+0x25>
c0002347:	8d 43 10             	lea    eax,[ebx+0x10]
c000234a:	f7 d6                	not    esi
c000234c:	e8 67 f9 ff ff       	call   c0001cb8 <ld_dword>
c0002351:	39 c6                	cmp    esi,eax
c0002353:	75 22                	jne    c0002377 <test_gpt_header+0x70>
c0002355:	8d 43 54             	lea    eax,[ebx+0x54]
c0002358:	e8 5b f9 ff ff       	call   c0001cb8 <ld_dword>
c000235d:	83 c0 80             	add    eax,0xffffff80
c0002360:	75 15                	jne    c0002377 <test_gpt_header+0x70>
c0002362:	8d 43 50             	lea    eax,[ebx+0x50]
c0002365:	e8 4e f9 ff ff       	call   c0001cb8 <ld_dword>
c000236a:	3d 80 00 00 00       	cmp    eax,0x80
c000236f:	0f 96 c0             	setbe  al
c0002372:	0f b6 c0             	movzx  eax,al
c0002375:	89 c7                	mov    edi,eax
c0002377:	5b                   	pop    ebx
c0002378:	89 f8                	mov    eax,edi
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <make_rand>:
c000237e:	56                   	push   esi
c000237f:	85 c0                	test   eax,eax
c0002381:	53                   	push   ebx
c0002382:	75 05                	jne    c0002389 <make_rand+0xb>
c0002384:	b8 01 00 00 00       	mov    eax,0x1
c0002389:	01 d1                	add    ecx,edx
c000238b:	bb 08 00 00 00       	mov    ebx,0x8
c0002390:	89 c6                	mov    esi,eax
c0002392:	d1 e8                	shr    eax,1
c0002394:	83 e6 01             	and    esi,0x1
c0002397:	85 f6                	test   esi,esi
c0002399:	74 05                	je     c00023a0 <make_rand+0x22>
c000239b:	35 00 00 00 a3       	xor    eax,0xa3000000
c00023a0:	4b                   	dec    ebx
c00023a1:	75 ed                	jne    c0002390 <make_rand+0x12>
c00023a3:	42                   	inc    edx
c00023a4:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00023a7:	39 ca                	cmp    edx,ecx
c00023a9:	75 e0                	jne    c000238b <make_rand+0xd>
c00023ab:	5b                   	pop    ebx
c00023ac:	5e                   	pop    esi
c00023ad:	c3                   	ret    

c00023ae <validate>:
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	89 d6                	mov    esi,edx
c00023b2:	51                   	push   ecx
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 09                	jne    c00023c0 <validate+0x12>
c00023b7:	b8 09 00 00 00       	mov    eax,0x9
c00023bc:	31 c9                	xor    ecx,ecx
c00023be:	eb 2f                	jmp    c00023ef <validate+0x41>
c00023c0:	89 c3                	mov    ebx,eax
c00023c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00023c4:	85 c0                	test   eax,eax
c00023c6:	74 ef                	je     c00023b7 <validate+0x9>
c00023c8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023cb:	74 ea                	je     c00023b7 <validate+0x9>
c00023cd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023d1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023d5:	75 e0                	jne    c00023b7 <validate+0x9>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 76 f8 ff ff       	call   c0001c5a <disk_status>
c00023e4:	83 c4 10             	add    esp,0x10
c00023e7:	a8 01                	test   al,0x1
c00023e9:	75 cc                	jne    c00023b7 <validate+0x9>
c00023eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ed:	31 c0                	xor    eax,eax
c00023ef:	89 0e                	mov    DWORD PTR [esi],ecx
c00023f1:	5a                   	pop    edx
c00023f2:	5b                   	pop    ebx
c00023f3:	5e                   	pop    esi
c00023f4:	c3                   	ret    

c00023f5 <sync_window>:
c00023f5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023f9:	0f 84 85 00 00 00    	je     c0002484 <sync_window+0x8f>
c00023ff:	55                   	push   ebp
c0002400:	8d 68 54             	lea    ebp,[eax+0x54]
c0002403:	57                   	push   edi
c0002404:	56                   	push   esi
c0002405:	53                   	push   ebx
c0002406:	89 c3                	mov    ebx,eax
c0002408:	83 ec 28             	sub    esp,0x28
c000240b:	6a 01                	push   0x1
c000240d:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002410:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002413:	55                   	push   ebp
c0002414:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002418:	50                   	push   eax
c0002419:	e8 58 f8 ff ff       	call   c0001c76 <disk_write>
c000241e:	83 c4 20             	add    esp,0x20
c0002421:	ba 01 00 00 00       	mov    edx,0x1
c0002426:	85 c0                	test   eax,eax
c0002428:	75 50                	jne    c000247a <sync_window+0x85>
c000242a:	31 ff                	xor    edi,edi
c000242c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000242f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002437:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000243a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000243d:	89 c6                	mov    esi,eax
c000243f:	89 d7                	mov    edi,edx
c0002441:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002444:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002448:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000244b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000244f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002453:	73 23                	jae    c0002478 <sync_window+0x83>
c0002455:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002459:	75 1d                	jne    c0002478 <sync_window+0x83>
c000245b:	83 ec 0c             	sub    esp,0xc
c000245e:	6a 01                	push   0x1
c0002460:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002464:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002468:	52                   	push   edx
c0002469:	50                   	push   eax
c000246a:	55                   	push   ebp
c000246b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 01 f8 ff ff       	call   c0001c76 <disk_write>
c0002475:	83 c4 20             	add    esp,0x20
c0002478:	31 d2                	xor    edx,edx
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	89 d0                	mov    eax,edx
c000247f:	5b                   	pop    ebx
c0002480:	5e                   	pop    esi
c0002481:	5f                   	pop    edi
c0002482:	5d                   	pop    ebp
c0002483:	c3                   	ret    
c0002484:	31 d2                	xor    edx,edx
c0002486:	89 d0                	mov    eax,edx
c0002488:	c3                   	ret    

c0002489 <move_window>:
c0002489:	56                   	push   esi
c000248a:	53                   	push   ebx
c000248b:	89 c3                	mov    ebx,eax
c000248d:	83 ec 14             	sub    esp,0x14
c0002490:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002493:	75 07                	jne    c000249c <move_window+0x13>
c0002495:	31 f6                	xor    esi,esi
c0002497:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000249a:	74 59                	je     c00024f5 <move_window+0x6c>
c000249c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 4a ff ff ff       	call   c00023f5 <sync_window>
c00024ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024af:	89 c6                	mov    esi,eax
c00024b1:	85 c0                	test   eax,eax
c00024b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b7:	75 3c                	jne    c00024f5 <move_window+0x6c>
c00024b9:	83 ec 0c             	sub    esp,0xc
c00024bc:	8d 43 54             	lea    eax,[ebx+0x54]
c00024bf:	6a 01                	push   0x1
c00024c1:	51                   	push   ecx
c00024c2:	52                   	push   edx
c00024c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024c7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024cb:	50                   	push   eax
c00024cc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024d0:	50                   	push   eax
c00024d1:	e8 8a f7 ff ff       	call   c0001c60 <disk_read>
c00024d6:	83 c4 20             	add    esp,0x20
c00024d9:	85 c0                	test   eax,eax
c00024db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024e3:	74 0a                	je     c00024ef <move_window+0x66>
c00024e5:	83 ca ff             	or     edx,0xffffffff
c00024e8:	be 01 00 00 00       	mov    esi,0x1
c00024ed:	89 d1                	mov    ecx,edx
c00024ef:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024f2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024f5:	89 f0                	mov    eax,esi
c00024f7:	83 c4 14             	add    esp,0x14
c00024fa:	5b                   	pop    ebx
c00024fb:	5e                   	pop    esi
c00024fc:	c3                   	ret    

c00024fd <check_fs>:
c00024fd:	53                   	push   ebx
c00024fe:	89 c3                	mov    ebx,eax
c0002500:	83 ec 08             	sub    esp,0x8
c0002503:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002507:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000250e:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002515:	e8 6f ff ff ff       	call   c0002489 <move_window>
c000251a:	ba 04 00 00 00       	mov    edx,0x4
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 85 89 00 00 00    	jne    c00025b0 <check_fs+0xb3>
c0002527:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000252d:	e8 79 f7 ff ff       	call   c0001cab <ld_word>
c0002532:	ba 03 00 00 00       	mov    edx,0x3
c0002537:	66 3d 55 aa          	cmp    ax,0xaa55
c000253b:	75 73                	jne    c00025b0 <check_fs+0xb3>
c000253d:	ba 60 f7 01 c0       	mov    edx,0xc001f760
c0002542:	8d 43 54             	lea    eax,[ebx+0x54]
c0002545:	b9 0b 00 00 00       	mov    ecx,0xb
c000254a:	e8 fb f7 ff ff       	call   c0001d4a <mem_cmp>
c000254f:	ba 01 00 00 00       	mov    edx,0x1
c0002554:	85 c0                	test   eax,eax
c0002556:	74 58                	je     c00025b0 <check_fs+0xb3>
c0002558:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000255b:	8d 50 18             	lea    edx,[eax+0x18]
c000255e:	80 fa 01             	cmp    dl,0x1
c0002561:	76 09                	jbe    c000256c <check_fs+0x6f>
c0002563:	ba 02 00 00 00       	mov    edx,0x2
c0002568:	3c eb                	cmp    al,0xeb
c000256a:	75 44                	jne    c00025b0 <check_fs+0xb3>
c000256c:	ba 70 a4 03 c0       	mov    edx,0xc003a470
c0002571:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002577:	b9 03 00 00 00       	mov    ecx,0x3
c000257c:	e8 c9 f7 ff ff       	call   c0001d4a <mem_cmp>
c0002581:	31 d2                	xor    edx,edx
c0002583:	85 c0                	test   eax,eax
c0002585:	74 29                	je     c00025b0 <check_fs+0xb3>
c0002587:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000258c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002592:	b9 05 00 00 00       	mov    ecx,0x5
c0002597:	e8 ae f7 ff ff       	call   c0001d4a <mem_cmp>
c000259c:	31 d2                	xor    edx,edx
c000259e:	85 c0                	test   eax,eax
c00025a0:	74 0e                	je     c00025b0 <check_fs+0xb3>
c00025a2:	31 d2                	xor    edx,edx
c00025a4:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00025ab:	0f 95 c2             	setne  dl
c00025ae:	01 d2                	add    edx,edx
c00025b0:	89 d0                	mov    eax,edx
c00025b2:	83 c4 08             	add    esp,0x8
c00025b5:	5b                   	pop    ebx
c00025b6:	c3                   	ret    

c00025b7 <find_volume>:
c00025b7:	55                   	push   ebp
c00025b8:	31 c9                	xor    ecx,ecx
c00025ba:	57                   	push   edi
c00025bb:	56                   	push   esi
c00025bc:	89 d6                	mov    esi,edx
c00025be:	53                   	push   ebx
c00025bf:	31 d2                	xor    edx,edx
c00025c1:	83 ec 3c             	sub    esp,0x3c
c00025c4:	89 c3                	mov    ebx,eax
c00025c6:	e8 32 ff ff ff       	call   c00024fd <check_fs>
c00025cb:	83 f8 02             	cmp    eax,0x2
c00025ce:	74 0e                	je     c00025de <find_volume+0x27>
c00025d0:	0f 87 5d 01 00 00    	ja     c0002733 <find_volume+0x17c>
c00025d6:	85 f6                	test   esi,esi
c00025d8:	0f 84 55 01 00 00    	je     c0002733 <find_volume+0x17c>
c00025de:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025e5:	0f 85 dd 00 00 00    	jne    c00026c8 <find_volume+0x111>
c00025eb:	31 c9                	xor    ecx,ecx
c00025ed:	ba 01 00 00 00       	mov    edx,0x1
c00025f2:	89 d8                	mov    eax,ebx
c00025f4:	e8 90 fe ff ff       	call   c0002489 <move_window>
c00025f9:	85 c0                	test   eax,eax
c00025fb:	74 0a                	je     c0002607 <find_volume+0x50>
c00025fd:	b8 04 00 00 00       	mov    eax,0x4
c0002602:	e9 2c 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c0002607:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000260a:	89 e8                	mov    eax,ebp
c000260c:	e8 f6 fc ff ff       	call   c0002307 <test_gpt_header>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 0a                	jne    c000261f <find_volume+0x68>
c0002615:	b8 03 00 00 00       	mov    eax,0x3
c000261a:	e9 14 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c000261f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002625:	e8 8e f6 ff ff       	call   c0001cb8 <ld_dword>
c000262a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000262e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002634:	e8 97 f6 ff ff       	call   c0001cd0 <ld_qword>
c0002639:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002641:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002645:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002651:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002655:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002659:	74 ba                	je     c0002615 <find_volume+0x5e>
c000265b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000265f:	31 c9                	xor    ecx,ecx
c0002661:	c1 e7 07             	shl    edi,0x7
c0002664:	89 d8                	mov    eax,ebx
c0002666:	89 fa                	mov    edx,edi
c0002668:	c1 ea 09             	shr    edx,0x9
c000266b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000266f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002673:	e8 11 fe ff ff       	call   c0002489 <move_window>
c0002678:	85 c0                	test   eax,eax
c000267a:	75 81                	jne    c00025fd <find_volume+0x46>
c000267c:	81 e7 80 01 00 00    	and    edi,0x180
c0002682:	b9 10 00 00 00       	mov    ecx,0x10
c0002687:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000268b:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c0002690:	e8 b5 f6 ff ff       	call   c0001d4a <mem_cmp>
c0002695:	85 c0                	test   eax,eax
c0002697:	75 29                	jne    c00026c2 <find_volume+0x10b>
c0002699:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000269d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00026a1:	e8 2a f6 ff ff       	call   c0001cd0 <ld_qword>
c00026a6:	89 d1                	mov    ecx,edx
c00026a8:	89 c2                	mov    edx,eax
c00026aa:	89 d8                	mov    eax,ebx
c00026ac:	e8 4c fe ff ff       	call   c00024fd <check_fs>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	75 07                	jne    c00026bc <find_volume+0x105>
c00026b5:	83 f8 01             	cmp    eax,0x1
c00026b8:	77 08                	ja     c00026c2 <find_volume+0x10b>
c00026ba:	eb 77                	jmp    c0002733 <find_volume+0x17c>
c00026bc:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026c0:	74 71                	je     c0002733 <find_volume+0x17c>
c00026c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026c6:	eb 89                	jmp    c0002651 <find_volume+0x9a>
c00026c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026cc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026d2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026dc:	89 cd                	mov    ebp,ecx
c00026de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026e2:	89 f8                	mov    eax,edi
c00026e4:	83 c7 10             	add    edi,0x10
c00026e7:	e8 cc f5 ff ff       	call   c0001cb8 <ld_dword>
c00026ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026f0:	89 01                	mov    DWORD PTR [ecx],eax
c00026f2:	83 c1 04             	add    ecx,0x4
c00026f5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026f9:	75 e3                	jne    c00026de <find_volume+0x127>
c00026fb:	31 ff                	xor    edi,edi
c00026fd:	85 f6                	test   esi,esi
c00026ff:	74 03                	je     c0002704 <find_volume+0x14d>
c0002701:	8d 7e ff             	lea    edi,[esi-0x1]
c0002704:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002708:	85 d2                	test   edx,edx
c000270a:	74 14                	je     c0002720 <find_volume+0x169>
c000270c:	31 c9                	xor    ecx,ecx
c000270e:	89 d8                	mov    eax,ebx
c0002710:	e8 e8 fd ff ff       	call   c00024fd <check_fs>
c0002715:	83 f8 01             	cmp    eax,0x1
c0002718:	76 19                	jbe    c0002733 <find_volume+0x17c>
c000271a:	85 f6                	test   esi,esi
c000271c:	74 0f                	je     c000272d <find_volume+0x176>
c000271e:	eb 13                	jmp    c0002733 <find_volume+0x17c>
c0002720:	85 f6                	test   esi,esi
c0002722:	0f 85 ed fe ff ff    	jne    c0002615 <find_volume+0x5e>
c0002728:	b8 03 00 00 00       	mov    eax,0x3
c000272d:	47                   	inc    edi
c000272e:	83 ff 03             	cmp    edi,0x3
c0002731:	76 d1                	jbe    c0002704 <find_volume+0x14d>
c0002733:	83 c4 3c             	add    esp,0x3c
c0002736:	5b                   	pop    ebx
c0002737:	5e                   	pop    esi
c0002738:	5f                   	pop    edi
c0002739:	5d                   	pop    ebp
c000273a:	c3                   	ret    

c000273b <mount_volume>:
c000273b:	55                   	push   ebp
c000273c:	57                   	push   edi
c000273d:	89 cf                	mov    edi,ecx
c000273f:	56                   	push   esi
c0002740:	53                   	push   ebx
c0002741:	bb 0b 00 00 00       	mov    ebx,0xb
c0002746:	83 ec 3c             	sub    esp,0x3c
c0002749:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000274f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002753:	e8 35 fb ff ff       	call   c000228d <get_ldnumber>
c0002758:	85 c0                	test   eax,eax
c000275a:	0f 88 3a 05 00 00    	js     c0002c9a <mount_volume+0x55f>
c0002760:	8b 2c 85 60 b9 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc46a0]
c0002767:	89 c6                	mov    esi,eax
c0002769:	bb 0c 00 00 00       	mov    ebx,0xc
c000276e:	85 ed                	test   ebp,ebp
c0002770:	0f 84 24 05 00 00    	je     c0002c9a <mount_volume+0x55f>
c0002776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000277a:	83 e7 fe             	and    edi,0xfffffffe
c000277d:	89 2a                	mov    DWORD PTR [edx],ebp
c000277f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002783:	74 32                	je     c00027b7 <mount_volume+0x7c>
c0002785:	83 ec 0c             	sub    esp,0xc
c0002788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000278c:	50                   	push   eax
c000278d:	e8 c8 f4 ff ff       	call   c0001c5a <disk_status>
c0002792:	83 c4 10             	add    esp,0x10
c0002795:	a8 01                	test   al,0x1
c0002797:	75 1e                	jne    c00027b7 <mount_volume+0x7c>
c0002799:	31 db                	xor    ebx,ebx
c000279b:	89 f9                	mov    ecx,edi
c000279d:	84 c9                	test   cl,cl
c000279f:	0f 84 f5 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027a5:	a8 04                	test   al,0x4
c00027a7:	0f 84 ed 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00027b2:	e9 e3 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027b7:	83 ec 0c             	sub    esp,0xc
c00027ba:	89 f0                	mov    eax,esi
c00027bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00027c0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00027c3:	0f b6 f0             	movzx  esi,al
c00027c6:	bb 03 00 00 00       	mov    ebx,0x3
c00027cb:	56                   	push   esi
c00027cc:	e8 8c f4 ff ff       	call   c0001c5d <disk_initialize>
c00027d1:	83 c4 10             	add    esp,0x10
c00027d4:	a8 01                	test   al,0x1
c00027d6:	0f 85 be 04 00 00    	jne    c0002c9a <mount_volume+0x55f>
c00027dc:	89 f9                	mov    ecx,edi
c00027de:	84 c9                	test   cl,cl
c00027e0:	74 04                	je     c00027e6 <mount_volume+0xab>
c00027e2:	a8 04                	test   al,0x4
c00027e4:	75 c7                	jne    c00027ad <mount_volume+0x72>
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 e8                	mov    eax,ebp
c00027ea:	e8 c8 fd ff ff       	call   c00025b7 <find_volume>
c00027ef:	83 f8 04             	cmp    eax,0x4
c00027f2:	75 0a                	jne    c00027fe <mount_volume+0xc3>
c00027f4:	bb 01 00 00 00       	mov    ebx,0x1
c00027f9:	e9 9c 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <mount_volume+0xd2>
c0002803:	bb 0d 00 00 00       	mov    ebx,0xd
c0002808:	e9 8d 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c000280d:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002810:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000281b:	75 17                	jne    c0002834 <mount_volume+0xf9>
c000281d:	b8 0b 00 00 00       	mov    eax,0xb
c0002822:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002827:	75 da                	jne    c0002803 <mount_volume+0xc8>
c0002829:	40                   	inc    eax
c000282a:	83 f8 40             	cmp    eax,0x40
c000282d:	75 f3                	jne    c0002822 <mount_volume+0xe7>
c000282f:	e9 5a 02 00 00       	jmp    c0002a8e <mount_volume+0x353>
c0002834:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002837:	e8 6f f4 ff ff       	call   c0001cab <ld_word>
c000283c:	66 3d 00 02          	cmp    ax,0x200
c0002840:	75 c1                	jne    c0002803 <mount_volume+0xc8>
c0002842:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002845:	e8 61 f4 ff ff       	call   c0001cab <ld_word>
c000284a:	0f b7 c0             	movzx  eax,ax
c000284d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002851:	85 c0                	test   eax,eax
c0002853:	75 0c                	jne    c0002861 <mount_volume+0x126>
c0002855:	8d 45 78             	lea    eax,[ebp+0x78]
c0002858:	e8 5b f4 ff ff       	call   c0001cb8 <ld_dword>
c000285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000286b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000286f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002872:	48                   	dec    eax
c0002873:	3c 01                	cmp    al,0x1
c0002875:	77 8c                	ja     c0002803 <mount_volume+0xc8>
c0002877:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000287b:	89 c3                	mov    ebx,eax
c000287d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002881:	66 85 c0             	test   ax,ax
c0002884:	0f 84 79 ff ff ff    	je     c0002803 <mount_volume+0xc8>
c000288a:	8d 40 ff             	lea    eax,[eax-0x1]
c000288d:	85 d8                	test   eax,ebx
c000288f:	0f 85 6e ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002895:	8d 45 65             	lea    eax,[ebp+0x65]
c0002898:	e8 0e f4 ff ff       	call   c0001cab <ld_word>
c000289d:	89 c7                	mov    edi,eax
c000289f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00028a3:	a8 0f                	test   al,0xf
c00028a5:	0f 85 58 ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c00028ab:	8d 45 67             	lea    eax,[ebp+0x67]
c00028ae:	e8 f8 f3 ff ff       	call   c0001cab <ld_word>
c00028b3:	0f b7 f0             	movzx  esi,ax
c00028b6:	85 f6                	test   esi,esi
c00028b8:	75 0a                	jne    c00028c4 <mount_volume+0x189>
c00028ba:	8d 45 74             	lea    eax,[ebp+0x74]
c00028bd:	e8 f6 f3 ff ff       	call   c0001cb8 <ld_dword>
c00028c2:	89 c6                	mov    esi,eax
c00028c4:	8d 45 62             	lea    eax,[ebp+0x62]
c00028c7:	e8 df f3 ff ff       	call   c0001cab <ld_word>
c00028cc:	66 85 c0             	test   ax,ax
c00028cf:	0f 84 2e ff ff ff    	je     c0002803 <mount_volume+0xc8>
c00028d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028da:	0f b7 c8             	movzx  ecx,ax
c00028dd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028e6:	89 fa                	mov    edx,edi
c00028e8:	66 c1 ea 04          	shr    dx,0x4
c00028ec:	0f b7 d2             	movzx  edx,dx
c00028ef:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028fa:	39 c6                	cmp    esi,eax
c00028fc:	0f 82 01 ff ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002902:	29 c6                	sub    esi,eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 f0                	mov    eax,esi
c0002908:	f7 f3                	div    ebx
c000290a:	39 de                	cmp    esi,ebx
c000290c:	0f 82 f1 fe ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002912:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002917:	0f 87 e6 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c000291d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002922:	0f 86 63 03 00 00    	jbe    c0002c8b <mount_volume+0x550>
c0002928:	bb 03 00 00 00       	mov    ebx,0x3
c000292d:	8d 70 02             	lea    esi,[eax+0x2]
c0002930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002938:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000293b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000293e:	31 d2                	xor    edx,edx
c0002940:	89 c8                	mov    eax,ecx
c0002942:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002945:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002949:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000294d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002951:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002955:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002958:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000295b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000295f:	31 d2                	xor    edx,edx
c0002961:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002965:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002969:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000296c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000296f:	83 fb 03             	cmp    ebx,0x3
c0002972:	75 2b                	jne    c000299f <mount_volume+0x264>
c0002974:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002977:	e8 2f f3 ff ff       	call   c0001cab <ld_word>
c000297c:	66 09 c7             	or     di,ax
c000297f:	0f 85 7e fe ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002985:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000298b:	c1 e6 02             	shl    esi,0x2
c000298e:	e8 25 f3 ff ff       	call   c0001cb8 <ld_dword>
c0002993:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000299a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000299d:	eb 30                	jmp    c00029cf <mount_volume+0x294>
c000299f:	66 85 ff             	test   di,di
c00029a2:	0f 84 5b fe ff ff    	je     c0002803 <mount_volume+0xc8>
c00029a8:	31 d2                	xor    edx,edx
c00029aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029ae:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00029b2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00029b6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00029b9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00029bc:	83 fb 02             	cmp    ebx,0x2
c00029bf:	75 04                	jne    c00029c5 <mount_volume+0x28a>
c00029c1:	01 f6                	add    esi,esi
c00029c3:	eb 0a                	jmp    c00029cf <mount_volume+0x294>
c00029c5:	8d 04 76             	lea    eax,[esi+esi*2]
c00029c8:	83 e6 01             	and    esi,0x1
c00029cb:	d1 e8                	shr    eax,1
c00029cd:	01 c6                	add    esi,eax
c00029cf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029d5:	c1 ee 09             	shr    esi,0x9
c00029d8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029dc:	0f 87 21 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c00029e2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029f0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029f4:	83 fb 03             	cmp    ebx,0x3
c00029f7:	75 7a                	jne    c0002a73 <mount_volume+0x338>
c00029f9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029ff:	e8 a7 f2 ff ff       	call   c0001cab <ld_word>
c0002a04:	66 48                	dec    ax
c0002a06:	75 6b                	jne    c0002a73 <mount_volume+0x338>
c0002a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a10:	83 c2 01             	add    edx,0x1
c0002a13:	89 e8                	mov    eax,ebp
c0002a15:	83 d1 00             	adc    ecx,0x0
c0002a18:	e8 6c fa ff ff       	call   c0002489 <move_window>
c0002a1d:	85 c0                	test   eax,eax
c0002a1f:	75 52                	jne    c0002a73 <mount_volume+0x338>
c0002a21:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002a25:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a2b:	e8 7b f2 ff ff       	call   c0001cab <ld_word>
c0002a30:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a34:	75 3d                	jne    c0002a73 <mount_volume+0x338>
c0002a36:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a39:	e8 7a f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a3e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a43:	75 2e                	jne    c0002a73 <mount_volume+0x338>
c0002a45:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a4b:	e8 68 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a50:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a55:	75 1c                	jne    c0002a73 <mount_volume+0x338>
c0002a57:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a5d:	e8 56 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a62:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a65:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a6b:	e8 48 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a70:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a73:	66 a1 40 b9 03 c0    	mov    ax,ds:0xc003b940
c0002a79:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a7c:	40                   	inc    eax
c0002a7d:	31 db                	xor    ebx,ebx
c0002a7f:	66 a3 40 b9 03 c0    	mov    ds:0xc003b940,ax
c0002a85:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a89:	e9 0c 02 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c0002a8e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a94:	e8 12 f2 ff ff       	call   c0001cab <ld_word>
c0002a99:	66 3d 00 01          	cmp    ax,0x100
c0002a9d:	0f 85 60 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002aa3:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002aaa:	0f 85 53 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ab0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002ab6:	e8 15 f2 ff ff       	call   c0001cd0 <ld_qword>
c0002abb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002abf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002ac3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002ac9:	e8 ea f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ace:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002ad1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ad7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ada:	fe c8                	dec    al
c0002adc:	0f 85 21 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ae2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ae9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aee:	d3 e3                	shl    ebx,cl
c0002af0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002af4:	66 85 db             	test   bx,bx
c0002af7:	0f 84 06 fd ff ff    	je     c0002803 <mount_volume+0xc8>
c0002afd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002b03:	e8 b0 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b08:	89 c6                	mov    esi,eax
c0002b0a:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002b0f:	0f 87 ee fc ff ff    	ja     c0002803 <mount_volume+0xc8>
c0002b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b19:	8d 40 02             	lea    eax,[eax+0x2]
c0002b1c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002b1f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b26:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b29:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b2f:	e8 84 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b46:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b49:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b4c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b52:	e8 61 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b61:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b65:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b68:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b6b:	0f b7 c3             	movzx  eax,bx
c0002b6e:	31 d2                	xor    edx,edx
c0002b70:	0f af f0             	imul   esi,eax
c0002b73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b77:	89 f0                	mov    eax,esi
c0002b79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b7d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b81:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b85:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b89:	39 c1                	cmp    ecx,eax
c0002b8b:	89 df                	mov    edi,ebx
c0002b8d:	19 d7                	sbb    edi,edx
c0002b8f:	0f 82 6e fc ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002b95:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b9b:	31 db                	xor    ebx,ebx
c0002b9d:	e8 16 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ba2:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002ba9:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002bb4:	85 db                	test   ebx,ebx
c0002bb6:	75 39                	jne    c0002bf1 <mount_volume+0x4b6>
c0002bb8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bbc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002bc0:	0f 86 3d fc ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002bc6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002bc9:	31 ff                	xor    edi,edi
c0002bcb:	89 e8                	mov    eax,ebp
c0002bcd:	e8 72 f3 ff ff       	call   c0001f44 <clst2sect>
c0002bd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bd6:	01 c6                	add    esi,eax
c0002bd8:	89 e8                	mov    eax,ebp
c0002bda:	11 d7                	adc    edi,edx
c0002bdc:	89 f2                	mov    edx,esi
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	e8 a4 f8 ff ff       	call   c0002489 <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 07 fc ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002bed:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bf1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bf6:	74 0b                	je     c0002c03 <mount_volume+0x4c8>
c0002bf8:	83 c3 20             	add    ebx,0x20
c0002bfb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002c01:	eb b1                	jmp    c0002bb4 <mount_volume+0x479>
c0002c03:	8d 75 54             	lea    esi,[ebp+0x54]
c0002c06:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002c0a:	e8 a9 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c0f:	89 c3                	mov    ebx,eax
c0002c11:	83 f8 01             	cmp    eax,0x1
c0002c14:	0f 86 e9 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c1a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002c1d:	0f 86 e0 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c23:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c26:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c2a:	0f af c2             	imul   eax,edx
c0002c2d:	31 d2                	xor    edx,edx
c0002c2f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c32:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c35:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c38:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c3b:	31 c9                	xor    ecx,ecx
c0002c3d:	89 da                	mov    edx,ebx
c0002c3f:	89 e8                	mov    eax,ebp
c0002c41:	c1 ea 07             	shr    edx,0x7
c0002c44:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c47:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c4a:	e8 3a f8 ff ff       	call   c0002489 <move_window>
c0002c4f:	85 c0                	test   eax,eax
c0002c51:	0f 85 9d fb ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	83 e0 7f             	and    eax,0x7f
c0002c5c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c5f:	e8 54 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c64:	83 f8 ff             	cmp    eax,0xffffffff
c0002c67:	74 0a                	je     c0002c73 <mount_volume+0x538>
c0002c69:	43                   	inc    ebx
c0002c6a:	39 d8                	cmp    eax,ebx
c0002c6c:	74 cd                	je     c0002c3b <mount_volume+0x500>
c0002c6e:	e9 90 fb ff ff       	jmp    c0002803 <mount_volume+0xc8>
c0002c73:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c7a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c81:	bb 04 00 00 00       	mov    ebx,0x4
c0002c86:	e9 e8 fd ff ff       	jmp    c0002a73 <mount_volume+0x338>
c0002c8b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c90:	19 db                	sbb    ebx,ebx
c0002c92:	83 c3 02             	add    ebx,0x2
c0002c95:	e9 93 fc ff ff       	jmp    c000292d <mount_volume+0x1f2>
c0002c9a:	83 c4 3c             	add    esp,0x3c
c0002c9d:	89 d8                	mov    eax,ebx
c0002c9f:	5b                   	pop    ebx
c0002ca0:	5e                   	pop    esi
c0002ca1:	5f                   	pop    edi
c0002ca2:	5d                   	pop    ebp
c0002ca3:	c3                   	ret    

c0002ca4 <find_bitmap>:
c0002ca4:	55                   	push   ebp
c0002ca5:	57                   	push   edi
c0002ca6:	89 c7                	mov    edi,eax
c0002ca8:	56                   	push   esi
c0002ca9:	8d 72 fe             	lea    esi,[edx-0x2]
c0002cac:	53                   	push   ebx
c0002cad:	83 ec 1c             	sub    esp,0x1c
c0002cb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002cb3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002cb7:	83 e8 02             	sub    eax,0x2
c0002cba:	39 f0                	cmp    eax,esi
c0002cbc:	77 02                	ja     c0002cc0 <find_bitmap+0x1c>
c0002cbe:	31 f6                	xor    esi,esi
c0002cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002cc4:	89 f3                	mov    ebx,esi
c0002cc6:	31 ed                	xor    ebp,ebp
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	89 da                	mov    edx,ebx
c0002ccc:	89 f8                	mov    eax,edi
c0002cce:	c1 ea 0c             	shr    edx,0xc
c0002cd1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cd4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cd7:	e8 ad f7 ff ff       	call   c0002489 <move_window>
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 68                	jne    c0002d48 <find_bitmap+0xa4>
c0002ce0:	89 da                	mov    edx,ebx
c0002ce2:	89 d9                	mov    ecx,ebx
c0002ce4:	c1 ea 03             	shr    edx,0x3
c0002ce7:	83 e1 07             	and    ecx,0x7
c0002cea:	b8 01 00 00 00       	mov    eax,0x1
c0002cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cf5:	d3 e0                	shl    eax,cl
c0002cf7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cfa:	83 e9 02             	sub    ecx,0x2
c0002cfd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d01:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002d05:	43                   	inc    ebx
c0002d06:	21 c1                	and    ecx,eax
c0002d08:	d1 e0                	shl    eax,1
c0002d0a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002d0e:	77 09                	ja     c0002d19 <find_bitmap+0x75>
c0002d10:	31 db                	xor    ebx,ebx
c0002d12:	ba 00 02 00 00       	mov    edx,0x200
c0002d17:	31 c0                	xor    eax,eax
c0002d19:	84 c9                	test   cl,cl
c0002d1b:	75 10                	jne    c0002d2d <find_bitmap+0x89>
c0002d1d:	45                   	inc    ebp
c0002d1e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002d22:	75 0f                	jne    c0002d33 <find_bitmap+0x8f>
c0002d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d28:	83 c0 02             	add    eax,0x2
c0002d2b:	eb 22                	jmp    c0002d4f <find_bitmap+0xab>
c0002d2d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d31:	31 ed                	xor    ebp,ebp
c0002d33:	39 de                	cmp    esi,ebx
c0002d35:	74 16                	je     c0002d4d <find_bitmap+0xa9>
c0002d37:	84 c0                	test   al,al
c0002d39:	75 c6                	jne    c0002d01 <find_bitmap+0x5d>
c0002d3b:	42                   	inc    edx
c0002d3c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d42:	77 84                	ja     c0002cc8 <find_bitmap+0x24>
c0002d44:	b0 01                	mov    al,0x1
c0002d46:	eb b9                	jmp    c0002d01 <find_bitmap+0x5d>
c0002d48:	83 c8 ff             	or     eax,0xffffffff
c0002d4b:	eb 02                	jmp    c0002d4f <find_bitmap+0xab>
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 1c             	add    esp,0x1c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <change_bitmap>:
c0002d57:	55                   	push   ebp
c0002d58:	89 cd                	mov    ebp,ecx
c0002d5a:	57                   	push   edi
c0002d5b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d5e:	56                   	push   esi
c0002d5f:	89 c7                	mov    edi,eax
c0002d61:	53                   	push   ebx
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	83 ec 1c             	sub    esp,0x1c
c0002d67:	31 d2                	xor    edx,edx
c0002d69:	89 ce                	mov    esi,ecx
c0002d6b:	c1 e8 0c             	shr    eax,0xc
c0002d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d73:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d76:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d79:	c1 ee 03             	shr    esi,0x3
c0002d7c:	83 e1 07             	and    ecx,0x7
c0002d7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d85:	d3 e3                	shl    ebx,cl
c0002d87:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d8b:	89 c1                	mov    ecx,eax
c0002d8d:	89 d3                	mov    ebx,edx
c0002d8f:	83 c1 01             	add    ecx,0x1
c0002d92:	83 d3 00             	adc    ebx,0x0
c0002d95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d9d:	89 d1                	mov    ecx,edx
c0002d9f:	89 c2                	mov    edx,eax
c0002da1:	89 f8                	mov    eax,edi
c0002da3:	e8 e1 f6 ff ff       	call   c0002489 <move_window>
c0002da8:	89 c1                	mov    ecx,eax
c0002daa:	85 c0                	test   eax,eax
c0002dac:	75 48                	jne    c0002df6 <change_bitmap+0x9f>
c0002dae:	31 d2                	xor    edx,edx
c0002db0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002db4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002db8:	0f 95 c2             	setne  dl
c0002dbb:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002dbf:	74 3c                	je     c0002dfd <change_bitmap+0xa6>
c0002dc1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002dc5:	4d                   	dec    ebp
c0002dc6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002dca:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002dce:	74 32                	je     c0002e02 <change_bitmap+0xab>
c0002dd0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dd4:	75 d8                	jne    c0002dae <change_bitmap+0x57>
c0002dd6:	8d 46 01             	lea    eax,[esi+0x1]
c0002dd9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002dde:	89 c3                	mov    ebx,eax
c0002de0:	31 f6                	xor    esi,esi
c0002de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dea:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002df0:	74 99                	je     c0002d8b <change_bitmap+0x34>
c0002df2:	89 de                	mov    esi,ebx
c0002df4:	eb b8                	jmp    c0002dae <change_bitmap+0x57>
c0002df6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dfb:	eb 05                	jmp    c0002e02 <change_bitmap+0xab>
c0002dfd:	b9 02 00 00 00       	mov    ecx,0x2
c0002e02:	83 c4 1c             	add    esp,0x1c
c0002e05:	89 c8                	mov    eax,ecx
c0002e07:	5b                   	pop    ebx
c0002e08:	5e                   	pop    esi
c0002e09:	5f                   	pop    edi
c0002e0a:	5d                   	pop    ebp
c0002e0b:	c3                   	ret    

c0002e0c <put_fat>:
c0002e0c:	83 fa 01             	cmp    edx,0x1
c0002e0f:	0f 86 7b 01 00 00    	jbe    c0002f90 <put_fat+0x184>
c0002e15:	55                   	push   ebp
c0002e16:	57                   	push   edi
c0002e17:	89 cf                	mov    edi,ecx
c0002e19:	56                   	push   esi
c0002e1a:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1f:	53                   	push   ebx
c0002e20:	89 c6                	mov    esi,eax
c0002e22:	83 ec 1c             	sub    esp,0x1c
c0002e25:	89 d3                	mov    ebx,edx
c0002e27:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e2a:	0f 86 68 01 00 00    	jbe    c0002f98 <put_fat+0x18c>
c0002e30:	8a 00                	mov    al,BYTE PTR [eax]
c0002e32:	3c 02                	cmp    al,0x2
c0002e34:	0f 84 c7 00 00 00    	je     c0002f01 <put_fat+0xf5>
c0002e3a:	77 09                	ja     c0002e45 <put_fat+0x39>
c0002e3c:	fe c8                	dec    al
c0002e3e:	74 17                	je     c0002e57 <put_fat+0x4b>
c0002e40:	e9 53 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e45:	b9 02 00 00 00       	mov    ecx,0x2
c0002e4a:	3c 04                	cmp    al,0x4
c0002e4c:	0f 86 e1 00 00 00    	jbe    c0002f33 <put_fat+0x127>
c0002e52:	e9 41 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e57:	89 d5                	mov    ebp,edx
c0002e59:	31 c9                	xor    ecx,ecx
c0002e5b:	d1 ed                	shr    ebp,1
c0002e5d:	89 f0                	mov    eax,esi
c0002e5f:	01 d5                	add    ebp,edx
c0002e61:	89 ea                	mov    edx,ebp
c0002e63:	c1 ea 09             	shr    edx,0x9
c0002e66:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e69:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e6c:	e8 18 f6 ff ff       	call   c0002489 <move_window>
c0002e71:	89 c1                	mov    ecx,eax
c0002e73:	85 c0                	test   eax,eax
c0002e75:	0f 85 1d 01 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002e7b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e82:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e8f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e93:	89 f8                	mov    eax,edi
c0002e95:	83 e3 01             	and    ebx,0x1
c0002e98:	74 0d                	je     c0002ea7 <put_fat+0x9b>
c0002e9a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e9d:	89 fa                	mov    edx,edi
c0002e9f:	83 e0 0f             	and    eax,0xf
c0002ea2:	c1 e2 04             	shl    edx,0x4
c0002ea5:	09 d0                	or     eax,edx
c0002ea7:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002eaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb4:	c1 ea 09             	shr    edx,0x9
c0002eb7:	89 f0                	mov    eax,esi
c0002eb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ebc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebf:	e8 c5 f5 ff ff       	call   c0002489 <move_window>
c0002ec4:	89 c1                	mov    ecx,eax
c0002ec6:	85 c0                	test   eax,eax
c0002ec8:	0f 85 ca 00 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002ece:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ed2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002ed8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002edc:	85 db                	test   ebx,ebx
c0002ede:	74 07                	je     c0002ee7 <put_fat+0xdb>
c0002ee0:	c1 ef 04             	shr    edi,0x4
c0002ee3:	89 fa                	mov    edx,edi
c0002ee5:	eb 0e                	jmp    c0002ef5 <put_fat+0xe9>
c0002ee7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eea:	c1 ef 08             	shr    edi,0x8
c0002eed:	83 e2 f0             	and    edx,0xfffffff0
c0002ef0:	83 e7 0f             	and    edi,0xf
c0002ef3:	09 fa                	or     edx,edi
c0002ef5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ef8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002efc:	e9 97 00 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002f01:	31 c9                	xor    ecx,ecx
c0002f03:	c1 ea 08             	shr    edx,0x8
c0002f06:	89 f0                	mov    eax,esi
c0002f08:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f0b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f0e:	e8 76 f5 ff ff       	call   c0002489 <move_window>
c0002f13:	89 c1                	mov    ecx,eax
c0002f15:	85 c0                	test   eax,eax
c0002f17:	75 7f                	jne    c0002f98 <put_fat+0x18c>
c0002f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1d:	01 db                	add    ebx,ebx
c0002f1f:	0f b7 d7             	movzx  edx,di
c0002f22:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f28:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f2c:	e8 ec ed ff ff       	call   c0001d1d <st_word>
c0002f31:	eb 53                	jmp    c0002f86 <put_fat+0x17a>
c0002f33:	31 c9                	xor    ecx,ecx
c0002f35:	c1 ea 07             	shr    edx,0x7
c0002f38:	89 f0                	mov    eax,esi
c0002f3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f40:	e8 44 f5 ff ff       	call   c0002489 <move_window>
c0002f45:	89 c1                	mov    ecx,eax
c0002f47:	85 c0                	test   eax,eax
c0002f49:	75 4d                	jne    c0002f98 <put_fat+0x18c>
c0002f4b:	c1 e3 02             	shl    ebx,0x2
c0002f4e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f57:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f5b:	74 1c                	je     c0002f79 <put_fat+0x16d>
c0002f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f61:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f67:	89 d8                	mov    eax,ebx
c0002f69:	e8 4a ed ff ff       	call   c0001cb8 <ld_dword>
c0002f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f72:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f77:	09 c7                	or     edi,eax
c0002f79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7d:	89 fa                	mov    edx,edi
c0002f7f:	89 d8                	mov    eax,ebx
c0002f81:	e8 9b ed ff ff       	call   c0001d21 <st_dword>
c0002f86:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8e:	eb 08                	jmp    c0002f98 <put_fat+0x18c>
c0002f90:	b9 02 00 00 00       	mov    ecx,0x2
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	c3                   	ret    
c0002f98:	83 c4 1c             	add    esp,0x1c
c0002f9b:	89 c8                	mov    eax,ecx
c0002f9d:	5b                   	pop    ebx
c0002f9e:	5e                   	pop    esi
c0002f9f:	5f                   	pop    edi
c0002fa0:	5d                   	pop    ebp
c0002fa1:	c3                   	ret    

c0002fa2 <fill_last_frag>:
c0002fa2:	57                   	push   edi
c0002fa3:	89 cf                	mov    edi,ecx
c0002fa5:	56                   	push   esi
c0002fa6:	89 d6                	mov    esi,edx
c0002fa8:	53                   	push   ebx
c0002fa9:	89 c3                	mov    ebx,eax
c0002fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002fae:	85 c0                	test   eax,eax
c0002fb0:	74 21                	je     c0002fd3 <fill_last_frag+0x31>
c0002fb2:	89 f9                	mov    ecx,edi
c0002fb4:	83 f8 01             	cmp    eax,0x1
c0002fb7:	76 05                	jbe    c0002fbe <fill_last_frag+0x1c>
c0002fb9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002fbc:	29 c1                	sub    ecx,eax
c0002fbe:	8d 56 01             	lea    edx,[esi+0x1]
c0002fc1:	29 c2                	sub    edx,eax
c0002fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc5:	e8 42 fe ff ff       	call   c0002e0c <put_fat>
c0002fca:	85 c0                	test   eax,eax
c0002fcc:	75 05                	jne    c0002fd3 <fill_last_frag+0x31>
c0002fce:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fd1:	eb d8                	jmp    c0002fab <fill_last_frag+0x9>
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <fill_first_frag>:
c0002fd7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fdb:	75 2d                	jne    c000300a <fill_first_frag+0x33>
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	89 c3                	mov    ebx,eax
c0002fe2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fe5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fe8:	01 d7                	add    edi,edx
c0002fea:	39 fa                	cmp    edx,edi
c0002fec:	74 14                	je     c0003002 <fill_first_frag+0x2b>
c0002fee:	8d 72 01             	lea    esi,[edx+0x1]
c0002ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ff3:	89 f1                	mov    ecx,esi
c0002ff5:	e8 12 fe ff ff       	call   c0002e0c <put_fat>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	85 c0                	test   eax,eax
c0002ffe:	74 ea                	je     c0002fea <fill_first_frag+0x13>
c0003000:	eb 0b                	jmp    c000300d <fill_first_frag+0x36>
c0003002:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003006:	31 c0                	xor    eax,eax
c0003008:	eb 03                	jmp    c000300d <fill_first_frag+0x36>
c000300a:	31 c0                	xor    eax,eax
c000300c:	c3                   	ret    
c000300d:	5b                   	pop    ebx
c000300e:	5e                   	pop    esi
c000300f:	5f                   	pop    edi
c0003010:	c3                   	ret    

c0003011 <get_fat>:
c0003011:	83 fa 01             	cmp    edx,0x1
c0003014:	0f 86 db 01 00 00    	jbe    c00031f5 <get_fat+0x1e4>
c000301a:	55                   	push   ebp
c000301b:	b9 01 00 00 00       	mov    ecx,0x1
c0003020:	57                   	push   edi
c0003021:	56                   	push   esi
c0003022:	53                   	push   ebx
c0003023:	83 ec 1c             	sub    esp,0x1c
c0003026:	8b 38                	mov    edi,DWORD PTR [eax]
c0003028:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c000302b:	0f 86 cc 01 00 00    	jbe    c00031fd <get_fat+0x1ec>
c0003031:	89 c3                	mov    ebx,eax
c0003033:	89 d6                	mov    esi,edx
c0003035:	8a 07                	mov    al,BYTE PTR [edi]
c0003037:	3c 02                	cmp    al,0x2
c0003039:	0f 84 99 00 00 00    	je     c00030d8 <get_fat+0xc7>
c000303f:	77 09                	ja     c000304a <get_fat+0x39>
c0003041:	fe c8                	dec    al
c0003043:	74 1a                	je     c000305f <get_fat+0x4e>
c0003045:	e9 b3 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000304a:	3c 03                	cmp    al,0x3
c000304c:	0f 84 b5 00 00 00    	je     c0003107 <get_fat+0xf6>
c0003052:	3c 04                	cmp    al,0x4
c0003054:	0f 84 e3 00 00 00    	je     c000313d <get_fat+0x12c>
c000305a:	e9 9e 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000305f:	89 d3                	mov    ebx,edx
c0003061:	31 c9                	xor    ecx,ecx
c0003063:	d1 eb                	shr    ebx,1
c0003065:	89 f8                	mov    eax,edi
c0003067:	01 d3                	add    ebx,edx
c0003069:	89 da                	mov    edx,ebx
c000306b:	c1 ea 09             	shr    edx,0x9
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 10 f4 ff ff       	call   c0002489 <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	74 08                	je     c0003085 <get_fat+0x74>
c000307d:	83 c9 ff             	or     ecx,0xffffffff
c0003080:	e9 78 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003085:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003088:	31 c9                	xor    ecx,ecx
c000308a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003090:	89 ea                	mov    edx,ebp
c0003092:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003096:	c1 ea 09             	shr    edx,0x9
c0003099:	89 f8                	mov    eax,edi
c000309b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000309e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a1:	e8 e3 f3 ff ff       	call   c0002489 <move_window>
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 d3                	jne    c000307d <get_fat+0x6c>
c00030aa:	0f b6 c3             	movzx  eax,bl
c00030ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00030b3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c00030b8:	c1 e3 08             	shl    ebx,0x8
c00030bb:	09 c3                	or     ebx,eax
c00030bd:	89 d9                	mov    ecx,ebx
c00030bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00030c5:	83 e6 01             	and    esi,0x1
c00030c8:	0f 84 2f 01 00 00    	je     c00031fd <get_fat+0x1ec>
c00030ce:	89 d9                	mov    ecx,ebx
c00030d0:	c1 e9 04             	shr    ecx,0x4
c00030d3:	e9 25 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c00030d8:	31 c9                	xor    ecx,ecx
c00030da:	c1 ea 08             	shr    edx,0x8
c00030dd:	89 f8                	mov    eax,edi
c00030df:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e5:	e8 9f f3 ff ff       	call   c0002489 <move_window>
c00030ea:	85 c0                	test   eax,eax
c00030ec:	75 8f                	jne    c000307d <get_fat+0x6c>
c00030ee:	01 f6                	add    esi,esi
c00030f0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030f6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030fa:	e8 ac eb ff ff       	call   c0001cab <ld_word>
c00030ff:	0f b7 c8             	movzx  ecx,ax
c0003102:	e9 f6 00 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	c1 ea 07             	shr    edx,0x7
c000310c:	89 f8                	mov    eax,edi
c000310e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003111:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003114:	e8 70 f3 ff ff       	call   c0002489 <move_window>
c0003119:	85 c0                	test   eax,eax
c000311b:	0f 85 5c ff ff ff    	jne    c000307d <get_fat+0x6c>
c0003121:	c1 e6 02             	shl    esi,0x2
c0003124:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000312a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000312e:	e8 85 eb ff ff       	call   c0001cb8 <ld_dword>
c0003133:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003138:	e9 b4 00 00 00       	jmp    c00031f1 <get_fat+0x1e0>
c000313d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003140:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003143:	89 d1                	mov    ecx,edx
c0003145:	09 c1                	or     ecx,eax
c0003147:	74 06                	je     c000314f <get_fat+0x13e>
c0003149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000314d:	75 0f                	jne    c000315e <get_fat+0x14d>
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003158:	0f 85 9f 00 00 00    	jne    c00031fd <get_fat+0x1ec>
c000315e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003162:	89 f5                	mov    ebp,esi
c0003164:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003169:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000316c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000316f:	80 f9 02             	cmp    cl,0x2
c0003172:	75 35                	jne    c00031a9 <get_fat+0x198>
c0003174:	83 c0 ff             	add    eax,0xffffffff
c0003177:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000317c:	83 d2 ff             	adc    edx,0xffffffff
c000317f:	31 db                	xor    ebx,ebx
c0003181:	0f ac d0 09          	shrd   eax,edx,0x9
c0003185:	53                   	push   ebx
c0003186:	c1 ea 09             	shr    edx,0x9
c0003189:	51                   	push   ecx
c000318a:	52                   	push   edx
c000318b:	50                   	push   eax
c000318c:	e8 2b b5 01 00       	call   c001e6bc <__udivdi3>
c0003191:	83 c4 10             	add    esp,0x10
c0003194:	b9 01 00 00 00       	mov    ecx,0x1
c0003199:	39 c5                	cmp    ebp,eax
c000319b:	77 60                	ja     c00031fd <get_fat+0x1ec>
c000319d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031a2:	74 59                	je     c00031fd <get_fat+0x1ec>
c00031a4:	8d 4e 01             	lea    ecx,[esi+0x1]
c00031a7:	eb 54                	jmp    c00031fd <get_fat+0x1ec>
c00031a9:	80 f9 03             	cmp    cl,0x3
c00031ac:	75 05                	jne    c00031b3 <get_fat+0x1a2>
c00031ae:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00031b1:	77 f1                	ja     c00031a4 <get_fat+0x193>
c00031b3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031b8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00031bc:	75 3f                	jne    c00031fd <get_fat+0x1ec>
c00031be:	31 c9                	xor    ecx,ecx
c00031c0:	89 f2                	mov    edx,esi
c00031c2:	89 f8                	mov    eax,edi
c00031c4:	c1 ea 07             	shr    edx,0x7
c00031c7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031ca:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031cd:	e8 b7 f2 ff ff       	call   c0002489 <move_window>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	0f 85 a3 fe ff ff    	jne    c000307d <get_fat+0x6c>
c00031da:	c1 e6 02             	shl    esi,0x2
c00031dd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e7:	e8 cc ea ff ff       	call   c0001cb8 <ld_dword>
c00031ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031f1:	89 c1                	mov    ecx,eax
c00031f3:	eb 08                	jmp    c00031fd <get_fat+0x1ec>
c00031f5:	b9 01 00 00 00       	mov    ecx,0x1
c00031fa:	89 c8                	mov    eax,ecx
c00031fc:	c3                   	ret    
c00031fd:	83 c4 1c             	add    esp,0x1c
c0003200:	89 c8                	mov    eax,ecx
c0003202:	5b                   	pop    ebx
c0003203:	5e                   	pop    esi
c0003204:	5f                   	pop    edi
c0003205:	5d                   	pop    ebp
c0003206:	c3                   	ret    

c0003207 <dir_sdi>:
c0003207:	55                   	push   ebp
c0003208:	57                   	push   edi
c0003209:	56                   	push   esi
c000320a:	53                   	push   ebx
c000320b:	89 c3                	mov    ebx,eax
c000320d:	83 ec 1c             	sub    esp,0x1c
c0003210:	8b 38                	mov    edi,DWORD PTR [eax]
c0003212:	31 c0                	xor    eax,eax
c0003214:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003217:	0f 94 c0             	sete   al
c000321a:	48                   	dec    eax
c000321b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003220:	05 00 00 00 10       	add    eax,0x10000000
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 0a                	ja     c0003233 <dir_sdi+0x2c>
c0003229:	b8 02 00 00 00       	mov    eax,0x2
c000322e:	e9 c4 00 00 00       	jmp    c00032f7 <dir_sdi+0xf0>
c0003233:	89 d6                	mov    esi,edx
c0003235:	f6 c2 1f             	test   dl,0x1f
c0003238:	75 ef                	jne    c0003229 <dir_sdi+0x22>
c000323a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000323d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003240:	85 c9                	test   ecx,ecx
c0003242:	75 2d                	jne    c0003271 <dir_sdi+0x6a>
c0003244:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003247:	77 1b                	ja     c0003264 <dir_sdi+0x5d>
c0003249:	89 f2                	mov    edx,esi
c000324b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324f:	c1 ea 05             	shr    edx,0x5
c0003252:	39 c2                	cmp    edx,eax
c0003254:	73 d3                	jae    c0003229 <dir_sdi+0x22>
c0003256:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003259:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000325c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003262:	eb 4b                	jmp    c00032af <dir_sdi+0xa8>
c0003264:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003267:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000326b:	85 c0                	test   eax,eax
c000326d:	74 da                	je     c0003249 <dir_sdi+0x42>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003275:	c1 e5 09             	shl    ebp,0x9
c0003278:	89 ca                	mov    edx,ecx
c000327a:	39 ee                	cmp    esi,ebp
c000327c:	72 1c                	jb     c000329a <dir_sdi+0x93>
c000327e:	89 d8                	mov    eax,ebx
c0003280:	e8 8c fd ff ff       	call   c0003011 <get_fat>
c0003285:	89 c1                	mov    ecx,eax
c0003287:	83 f8 ff             	cmp    eax,0xffffffff
c000328a:	74 66                	je     c00032f2 <dir_sdi+0xeb>
c000328c:	83 f8 01             	cmp    eax,0x1
c000328f:	76 98                	jbe    c0003229 <dir_sdi+0x22>
c0003291:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003294:	76 93                	jbe    c0003229 <dir_sdi+0x22>
c0003296:	29 ee                	sub    esi,ebp
c0003298:	eb de                	jmp    c0003278 <dir_sdi+0x71>
c000329a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329e:	89 f8                	mov    eax,edi
c00032a0:	e8 9f ec ff ff       	call   c0001f44 <clst2sect>
c00032a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00032a9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032ac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032af:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00032b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00032b5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00032b8:	89 d1                	mov    ecx,edx
c00032ba:	09 c1                	or     ecx,eax
c00032bc:	0f 84 67 ff ff ff    	je     c0003229 <dir_sdi+0x22>
c00032c2:	89 f1                	mov    ecx,esi
c00032c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032cc:	c1 e9 09             	shr    ecx,0x9
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032de:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032e7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032eb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ee:	31 c0                	xor    eax,eax
c00032f0:	eb 05                	jmp    c00032f7 <dir_sdi+0xf0>
c00032f2:	b8 01 00 00 00       	mov    eax,0x1
c00032f7:	83 c4 1c             	add    esp,0x1c
c00032fa:	5b                   	pop    ebx
c00032fb:	5e                   	pop    esi
c00032fc:	5f                   	pop    edi
c00032fd:	5d                   	pop    ebp
c00032fe:	c3                   	ret    

c00032ff <create_chain>:
c00032ff:	55                   	push   ebp
c0003300:	89 c5                	mov    ebp,eax
c0003302:	57                   	push   edi
c0003303:	56                   	push   esi
c0003304:	53                   	push   ebx
c0003305:	83 ec 1c             	sub    esp,0x1c
c0003308:	85 d2                	test   edx,edx
c000330a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000330e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003310:	75 0e                	jne    c0003320 <create_chain+0x21>
c0003312:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003315:	85 ff                	test   edi,edi
c0003317:	74 39                	je     c0003352 <create_chain+0x53>
c0003319:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000331c:	77 39                	ja     c0003357 <create_chain+0x58>
c000331e:	eb 32                	jmp    c0003352 <create_chain+0x53>
c0003320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003324:	e8 e8 fc ff ff       	call   c0003011 <get_fat>
c0003329:	89 c3                	mov    ebx,eax
c000332b:	83 f8 01             	cmp    eax,0x1
c000332e:	77 0a                	ja     c000333a <create_chain+0x3b>
c0003330:	bb 01 00 00 00       	mov    ebx,0x1
c0003335:	e9 ba 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c000333a:	83 f8 ff             	cmp    eax,0xffffffff
c000333d:	0f 84 62 01 00 00    	je     c00034a5 <create_chain+0x1a6>
c0003343:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003346:	0f 87 a8 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c000334c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003350:	eb 05                	jmp    c0003357 <create_chain+0x58>
c0003352:	bf 01 00 00 00       	mov    edi,0x1
c0003357:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000335b:	75 07                	jne    c0003364 <create_chain+0x65>
c000335d:	31 db                	xor    ebx,ebx
c000335f:	e9 90 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c0003364:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003367:	75 74                	jne    c00033dd <create_chain+0xde>
c0003369:	b9 01 00 00 00       	mov    ecx,0x1
c000336e:	89 fa                	mov    edx,edi
c0003370:	89 f0                	mov    eax,esi
c0003372:	e8 2d f9 ff ff       	call   c0002ca4 <find_bitmap>
c0003377:	89 c3                	mov    ebx,eax
c0003379:	8d 40 ff             	lea    eax,[eax-0x1]
c000337c:	83 f8 fd             	cmp    eax,0xfffffffd
c000337f:	0f 87 6f 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c0003385:	83 ec 0c             	sub    esp,0xc
c0003388:	b9 01 00 00 00       	mov    ecx,0x1
c000338d:	6a 01                	push   0x1
c000338f:	89 da                	mov    edx,ebx
c0003391:	89 f0                	mov    eax,esi
c0003393:	e8 bf f9 ff ff       	call   c0002d57 <change_bitmap>
c0003398:	83 c4 10             	add    esp,0x10
c000339b:	83 f8 02             	cmp    eax,0x2
c000339e:	74 90                	je     c0003330 <create_chain+0x31>
c00033a0:	83 f8 01             	cmp    eax,0x1
c00033a3:	0f 84 fc 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c00033a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ae:	75 09                	jne    c00033b9 <create_chain+0xba>
c00033b0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00033b4:	e9 0c 01 00 00       	jmp    c00034c5 <create_chain+0x1c6>
c00033b9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00033bd:	0f 85 e7 00 00 00    	jne    c00034aa <create_chain+0x1ab>
c00033c3:	8d 57 01             	lea    edx,[edi+0x1]
c00033c6:	39 da                	cmp    edx,ebx
c00033c8:	0f 84 f7 00 00 00    	je     c00034c5 <create_chain+0x1c6>
c00033ce:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033d1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033d5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033d8:	e9 cd 00 00 00       	jmp    c00034aa <create_chain+0x1ab>
c00033dd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033e1:	75 41                	jne    c0003424 <create_chain+0x125>
c00033e3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033e6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e9:	77 05                	ja     c00033f0 <create_chain+0xf1>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 18 fc ff ff       	call   c0003011 <get_fat>
c00033f9:	83 f8 01             	cmp    eax,0x1
c00033fc:	0f 84 2e ff ff ff    	je     c0003330 <create_chain+0x31>
c0003402:	83 f8 ff             	cmp    eax,0xffffffff
c0003405:	0f 84 9a 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c000340b:	85 c0                	test   eax,eax
c000340d:	74 11                	je     c0003420 <create_chain+0x121>
c000340f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	76 0d                	jbe    c0003424 <create_chain+0x125>
c0003417:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000341a:	76 08                	jbe    c0003424 <create_chain+0x125>
c000341c:	89 c7                	mov    edi,eax
c000341e:	eb 04                	jmp    c0003424 <create_chain+0x125>
c0003420:	85 db                	test   ebx,ebx
c0003422:	75 38                	jne    c000345c <create_chain+0x15d>
c0003424:	89 fb                	mov    ebx,edi
c0003426:	43                   	inc    ebx
c0003427:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000342a:	77 0e                	ja     c000343a <create_chain+0x13b>
c000342c:	83 ff 01             	cmp    edi,0x1
c000342f:	0f 86 28 ff ff ff    	jbe    c000335d <create_chain+0x5e>
c0003435:	bb 02 00 00 00       	mov    ebx,0x2
c000343a:	89 da                	mov    edx,ebx
c000343c:	89 e8                	mov    eax,ebp
c000343e:	e8 ce fb ff ff       	call   c0003011 <get_fat>
c0003443:	85 c0                	test   eax,eax
c0003445:	74 15                	je     c000345c <create_chain+0x15d>
c0003447:	83 f8 01             	cmp    eax,0x1
c000344a:	0f 84 e0 fe ff ff    	je     c0003330 <create_chain+0x31>
c0003450:	40                   	inc    eax
c0003451:	74 52                	je     c00034a5 <create_chain+0x1a6>
c0003453:	39 fb                	cmp    ebx,edi
c0003455:	75 cf                	jne    c0003426 <create_chain+0x127>
c0003457:	e9 01 ff ff ff       	jmp    c000335d <create_chain+0x5e>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	89 da                	mov    edx,ebx
c0003461:	89 f0                	mov    eax,esi
c0003463:	e8 a4 f9 ff ff       	call   c0002e0c <put_fat>
c0003468:	85 c0                	test   eax,eax
c000346a:	75 32                	jne    c000349e <create_chain+0x19f>
c000346c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003471:	74 11                	je     c0003484 <create_chain+0x185>
c0003473:	89 d9                	mov    ecx,ebx
c0003475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003479:	89 f0                	mov    eax,esi
c000347b:	e8 8c f9 ff ff       	call   c0002e0c <put_fat>
c0003480:	85 c0                	test   eax,eax
c0003482:	75 1a                	jne    c000349e <create_chain+0x19f>
c0003484:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003487:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000348a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000348d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003490:	39 d0                	cmp    eax,edx
c0003492:	77 04                	ja     c0003498 <create_chain+0x199>
c0003494:	48                   	dec    eax
c0003495:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003498:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000349c:	eb 56                	jmp    c00034f4 <create_chain+0x1f5>
c000349e:	48                   	dec    eax
c000349f:	0f 85 8b fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034a5:	83 cb ff             	or     ebx,0xffffffff
c00034a8:	eb 4a                	jmp    c00034f4 <create_chain+0x1f5>
c00034aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00034b1:	41                   	inc    ecx
c00034b2:	39 d9                	cmp    ecx,ebx
c00034b4:	75 19                	jne    c00034cf <create_chain+0x1d0>
c00034b6:	b9 02 00 00 00       	mov    ecx,0x2
c00034bb:	85 d2                	test   edx,edx
c00034bd:	74 03                	je     c00034c2 <create_chain+0x1c3>
c00034bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00034c2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00034c5:	85 c0                	test   eax,eax
c00034c7:	0f 85 63 fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034cd:	eb b5                	jmp    c0003484 <create_chain+0x185>
c00034cf:	85 d2                	test   edx,edx
c00034d1:	75 07                	jne    c00034da <create_chain+0x1db>
c00034d3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034e0:	89 e8                	mov    eax,ebp
c00034e2:	e8 bb fa ff ff       	call   c0002fa2 <fill_last_frag>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	75 b3                	jne    c000349e <create_chain+0x19f>
c00034eb:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034f2:	eb 90                	jmp    c0003484 <create_chain+0x185>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	89 d8                	mov    eax,ebx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <remove_chain>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	83 fa 01             	cmp    edx,0x1
c0003508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000350c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000350e:	77 0a                	ja     c000351a <remove_chain+0x1c>
c0003510:	b8 02 00 00 00       	mov    eax,0x2
c0003515:	e9 24 01 00 00       	jmp    c000363e <remove_chain+0x140>
c000351a:	89 d6                	mov    esi,edx
c000351c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000351f:	76 ef                	jbe    c0003510 <remove_chain+0x12>
c0003521:	89 c7                	mov    edi,eax
c0003523:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003528:	75 06                	jne    c0003530 <remove_chain+0x32>
c000352a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000352e:	eb 54                	jmp    c0003584 <remove_chain+0x86>
c0003530:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003533:	75 06                	jne    c000353b <remove_chain+0x3d>
c0003535:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003539:	74 ef                	je     c000352a <remove_chain+0x2c>
c000353b:	83 c9 ff             	or     ecx,0xffffffff
c000353e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003542:	89 d8                	mov    eax,ebx
c0003544:	e8 c3 f8 ff ff       	call   c0002e0c <put_fat>
c0003549:	85 c0                	test   eax,eax
c000354b:	74 dd                	je     c000352a <remove_chain+0x2c>
c000354d:	e9 ec 00 00 00       	jmp    c000363e <remove_chain+0x140>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 b9                	je     c0003510 <remove_chain+0x12>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 6d                	je     c00035c9 <remove_chain+0xcb>
c000355c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355f:	75 6f                	jne    c00035d0 <remove_chain+0xd2>
c0003561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003564:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003567:	8d 51 fe             	lea    edx,[ecx-0x2]
c000356a:	39 d0                	cmp    eax,edx
c000356c:	73 08                	jae    c0003576 <remove_chain+0x78>
c000356e:	40                   	inc    eax
c000356f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003576:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003579:	39 e9                	cmp    ecx,ebp
c000357b:	75 64                	jne    c00035e1 <remove_chain+0xe3>
c000357d:	89 ee                	mov    esi,ebp
c000357f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003582:	76 0f                	jbe    c0003593 <remove_chain+0x95>
c0003584:	89 f2                	mov    edx,esi
c0003586:	89 f8                	mov    eax,edi
c0003588:	e8 84 fa ff ff       	call   c0003011 <get_fat>
c000358d:	89 c5                	mov    ebp,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	75 bf                	jne    c0003552 <remove_chain+0x54>
c0003593:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003596:	0f 85 a0 00 00 00    	jne    c000363c <remove_chain+0x13e>
c000359c:	eb 6c                	jmp    c000360a <remove_chain+0x10c>
c000359e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00035a1:	84 c0                	test   al,al
c00035a3:	75 7d                	jne    c0003622 <remove_chain+0x124>
c00035a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00035a8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00035ac:	0f 84 86 00 00 00    	je     c0003638 <remove_chain+0x13a>
c00035b2:	89 da                	mov    edx,ebx
c00035b4:	89 f8                	mov    eax,edi
c00035b6:	e8 56 fa ff ff       	call   c0003011 <get_fat>
c00035bb:	83 f8 01             	cmp    eax,0x1
c00035be:	0f 86 4c ff ff ff    	jbe    c0003510 <remove_chain+0x12>
c00035c4:	83 f8 ff             	cmp    eax,0xffffffff
c00035c7:	75 4e                	jne    c0003617 <remove_chain+0x119>
c00035c9:	b8 01 00 00 00       	mov    eax,0x1
c00035ce:	eb 6e                	jmp    c000363e <remove_chain+0x140>
c00035d0:	31 c9                	xor    ecx,ecx
c00035d2:	89 f2                	mov    edx,esi
c00035d4:	89 d8                	mov    eax,ebx
c00035d6:	e8 31 f8 ff ff       	call   c0002e0c <put_fat>
c00035db:	85 c0                	test   eax,eax
c00035dd:	74 82                	je     c0003561 <remove_chain+0x63>
c00035df:	eb 5d                	jmp    c000363e <remove_chain+0x140>
c00035e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035e4:	75 1b                	jne    c0003601 <remove_chain+0x103>
c00035e6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035ea:	89 d8                	mov    eax,ebx
c00035ec:	83 ec 0c             	sub    esp,0xc
c00035ef:	6a 00                	push   0x0
c00035f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035f5:	e8 5d f7 ff ff       	call   c0002d57 <change_bitmap>
c00035fa:	83 c4 10             	add    esp,0x10
c00035fd:	85 c0                	test   eax,eax
c00035ff:	75 3d                	jne    c000363e <remove_chain+0x140>
c0003601:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003605:	e9 73 ff ff ff       	jmp    c000357d <remove_chain+0x7f>
c000360a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000360f:	75 8d                	jne    c000359e <remove_chain+0xa0>
c0003611:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003615:	eb 25                	jmp    c000363c <remove_chain+0x13e>
c0003617:	8d 53 01             	lea    edx,[ebx+0x1]
c000361a:	89 c3                	mov    ebx,eax
c000361c:	39 c2                	cmp    edx,eax
c000361e:	74 88                	je     c00035a8 <remove_chain+0xaa>
c0003620:	eb 1a                	jmp    c000363c <remove_chain+0x13e>
c0003622:	3c 03                	cmp    al,0x3
c0003624:	75 16                	jne    c000363c <remove_chain+0x13e>
c0003626:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003629:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000362d:	77 0d                	ja     c000363c <remove_chain+0x13e>
c000362f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003632:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003636:	72 04                	jb     c000363c <remove_chain+0x13e>
c0003638:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000363c:	31 c0                	xor    eax,eax
c000363e:	83 c4 1c             	add    esp,0x1c
c0003641:	5b                   	pop    ebx
c0003642:	5e                   	pop    esi
c0003643:	5f                   	pop    edi
c0003644:	5d                   	pop    ebp
c0003645:	c3                   	ret    

c0003646 <dir_clear>:
c0003646:	55                   	push   ebp
c0003647:	57                   	push   edi
c0003648:	56                   	push   esi
c0003649:	89 c6                	mov    esi,eax
c000364b:	53                   	push   ebx
c000364c:	83 ec 1c             	sub    esp,0x1c
c000364f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003653:	e8 9d ed ff ff       	call   c00023f5 <sync_window>
c0003658:	85 c0                	test   eax,eax
c000365a:	0f 85 de 00 00 00    	jne    c000373e <dir_clear+0xf8>
c0003660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003664:	89 f0                	mov    eax,esi
c0003666:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003669:	e8 d6 e8 ff ff       	call   c0001f44 <clst2sect>
c000366e:	b9 00 02 00 00       	mov    ecx,0x200
c0003673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000367b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000367e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003681:	89 e8                	mov    eax,ebp
c0003683:	31 d2                	xor    edx,edx
c0003685:	e8 b5 e6 ff ff       	call   c0001d3f <mem_set>
c000368a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000368e:	c1 e3 09             	shl    ebx,0x9
c0003691:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003697:	76 1f                	jbe    c00036b8 <dir_clear+0x72>
c0003699:	bb 00 80 00 00       	mov    ebx,0x8000
c000369e:	eb 18                	jmp    c00036b8 <dir_clear+0x72>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	53                   	push   ebx
c00036a4:	e8 35 4e 00 00       	call   c00084de <ff_memalloc>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	89 c7                	mov    edi,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 8f 00 00 00    	jne    c0003745 <dir_clear+0xff>
c00036b6:	d1 eb                	shr    ebx,1
c00036b8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00036be:	77 e0                	ja     c00036a0 <dir_clear+0x5a>
c00036c0:	31 db                	xor    ebx,ebx
c00036c2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c6:	39 d8                	cmp    eax,ebx
c00036c8:	76 66                	jbe    c0003730 <dir_clear+0xea>
c00036ca:	83 ec 0c             	sub    esp,0xc
c00036cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d1:	6a 01                	push   0x1
c00036d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036db:	55                   	push   ebp
c00036dc:	50                   	push   eax
c00036dd:	e8 94 e5 ff ff       	call   c0001c76 <disk_write>
c00036e2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036e7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ec:	83 c4 20             	add    esp,0x20
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 3d                	jne    c0003730 <dir_clear+0xea>
c00036f3:	43                   	inc    ebx
c00036f4:	eb cc                	jmp    c00036c2 <dir_clear+0x7c>
c00036f6:	83 ec 0c             	sub    esp,0xc
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	55                   	push   ebp
c00036fc:	89 d8                	mov    eax,ebx
c00036fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003702:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003706:	52                   	push   edx
c0003707:	50                   	push   eax
c0003708:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000370c:	57                   	push   edi
c000370d:	50                   	push   eax
c000370e:	e8 63 e5 ff ff       	call   c0001c76 <disk_write>
c0003713:	83 c4 20             	add    esp,0x20
c0003716:	85 c0                	test   eax,eax
c0003718:	75 0a                	jne    c0003724 <dir_clear+0xde>
c000371a:	01 eb                	add    ebx,ebp
c000371c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003720:	39 d8                	cmp    eax,ebx
c0003722:	77 d2                	ja     c00036f6 <dir_clear+0xb0>
c0003724:	83 ec 0c             	sub    esp,0xc
c0003727:	57                   	push   edi
c0003728:	e8 c7 4d 00 00       	call   c00084f4 <ff_memfree>
c000372d:	83 c4 10             	add    esp,0x10
c0003730:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003734:	39 d8                	cmp    eax,ebx
c0003736:	0f 95 c0             	setne  al
c0003739:	0f b6 c0             	movzx  eax,al
c000373c:	eb 19                	jmp    c0003757 <dir_clear+0x111>
c000373e:	b8 01 00 00 00       	mov    eax,0x1
c0003743:	eb 12                	jmp    c0003757 <dir_clear+0x111>
c0003745:	89 d9                	mov    ecx,ebx
c0003747:	31 d2                	xor    edx,edx
c0003749:	c1 eb 09             	shr    ebx,0x9
c000374c:	e8 ee e5 ff ff       	call   c0001d3f <mem_set>
c0003751:	89 dd                	mov    ebp,ebx
c0003753:	31 db                	xor    ebx,ebx
c0003755:	eb c5                	jmp    c000371c <dir_clear+0xd6>
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <dir_next>:
c000375f:	55                   	push   ebp
c0003760:	57                   	push   edi
c0003761:	56                   	push   esi
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000376e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003771:	8d 78 20             	lea    edi,[eax+0x20]
c0003774:	31 c0                	xor    eax,eax
c0003776:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000377a:	0f 94 c0             	sete   al
c000377d:	48                   	dec    eax
c000377e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003783:	05 00 00 00 10       	add    eax,0x10000000
c0003788:	39 f8                	cmp    eax,edi
c000378a:	77 0e                	ja     c000379a <dir_next+0x3b>
c000378c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003793:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000379a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a0:	b8 04 00 00 00       	mov    eax,0x4
c00037a5:	89 ce                	mov    esi,ecx
c00037a7:	09 d6                	or     esi,edx
c00037a9:	0f 84 da 00 00 00    	je     c0003889 <dir_next+0x12a>
c00037af:	89 f8                	mov    eax,edi
c00037b1:	25 ff 01 00 00       	and    eax,0x1ff
c00037b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037ba:	0f 85 b9 00 00 00    	jne    c0003879 <dir_next+0x11a>
c00037c0:	83 c2 01             	add    edx,0x1
c00037c3:	83 d1 00             	adc    ecx,0x0
c00037c6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037c9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037cf:	85 d2                	test   edx,edx
c00037d1:	75 29                	jne    c00037fc <dir_next+0x9d>
c00037d3:	89 fa                	mov    edx,edi
c00037d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037d9:	c1 ea 05             	shr    edx,0x5
c00037dc:	39 c2                	cmp    edx,eax
c00037de:	0f 82 95 00 00 00    	jb     c0003879 <dir_next+0x11a>
c00037e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037f2:	b8 04 00 00 00       	mov    eax,0x4
c00037f7:	e9 8d 00 00 00       	jmp    c0003889 <dir_next+0x12a>
c00037fc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003800:	89 f9                	mov    ecx,edi
c0003802:	48                   	dec    eax
c0003803:	c1 e9 09             	shr    ecx,0x9
c0003806:	85 c8                	test   eax,ecx
c0003808:	75 6f                	jne    c0003879 <dir_next+0x11a>
c000380a:	89 d8                	mov    eax,ebx
c000380c:	e8 00 f8 ff ff       	call   c0003011 <get_fat>
c0003811:	89 c6                	mov    esi,eax
c0003813:	83 f8 01             	cmp    eax,0x1
c0003816:	77 07                	ja     c000381f <dir_next+0xc0>
c0003818:	b8 02 00 00 00       	mov    eax,0x2
c000381d:	eb 6a                	jmp    c0003889 <dir_next+0x12a>
c000381f:	83 f8 ff             	cmp    eax,0xffffffff
c0003822:	75 07                	jne    c000382b <dir_next+0xcc>
c0003824:	b8 01 00 00 00       	mov    eax,0x1
c0003829:	eb 5e                	jmp    c0003889 <dir_next+0x12a>
c000382b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000382e:	77 37                	ja     c0003867 <dir_next+0x108>
c0003830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003835:	74 ad                	je     c00037e4 <dir_next+0x85>
c0003837:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 be fa ff ff       	call   c00032ff <create_chain>
c0003841:	89 c6                	mov    esi,eax
c0003843:	b8 07 00 00 00       	mov    eax,0x7
c0003848:	85 f6                	test   esi,esi
c000384a:	74 3d                	je     c0003889 <dir_next+0x12a>
c000384c:	83 fe 01             	cmp    esi,0x1
c000384f:	74 c7                	je     c0003818 <dir_next+0xb9>
c0003851:	83 fe ff             	cmp    esi,0xffffffff
c0003854:	74 ce                	je     c0003824 <dir_next+0xc5>
c0003856:	89 f2                	mov    edx,esi
c0003858:	89 e8                	mov    eax,ebp
c000385a:	e8 e7 fd ff ff       	call   c0003646 <dir_clear>
c000385f:	85 c0                	test   eax,eax
c0003861:	75 c1                	jne    c0003824 <dir_next+0xc5>
c0003863:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003867:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000386a:	89 f2                	mov    edx,esi
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 d1 e6 ff ff       	call   c0001f44 <clst2sect>
c0003873:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003876:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003880:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003884:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003887:	31 c0                	xor    eax,eax
c0003889:	83 c4 1c             	add    esp,0x1c
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <load_xdir>:
c0003891:	55                   	push   ebp
c0003892:	57                   	push   edi
c0003893:	56                   	push   esi
c0003894:	89 c6                	mov    esi,eax
c0003896:	53                   	push   ebx
c0003897:	83 ec 1c             	sub    esp,0x1c
c000389a:	8b 00                	mov    eax,DWORD PTR [eax]
c000389c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a5:	e8 df eb ff ff       	call   c0002489 <move_window>
c00038aa:	89 c3                	mov    ebx,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 0c 01 00 00    	jne    c00039c0 <load_xdir+0x12f>
c00038b4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00038ba:	0f 85 fb 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c00038c0:	89 f8                	mov    eax,edi
c00038c2:	b9 20 00 00 00       	mov    ecx,0x20
c00038c7:	e8 5e e4 ff ff       	call   c0001d2a <mem_cpy>
c00038cc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038d0:	40                   	inc    eax
c00038d1:	c1 e0 05             	shl    eax,0x5
c00038d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038d8:	83 e8 60             	sub    eax,0x60
c00038db:	3d 00 02 00 00       	cmp    eax,0x200
c00038e0:	0f 87 d5 00 00 00    	ja     c00039bb <load_xdir+0x12a>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 70 fe ff ff       	call   c000375f <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	0f 84 c1 00 00 00    	je     c00039bb <load_xdir+0x12a>
c00038fa:	85 c0                	test   eax,eax
c00038fc:	0f 85 be 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003902:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003905:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003908:	8b 06                	mov    eax,DWORD PTR [esi]
c000390a:	e8 7a eb ff ff       	call   c0002489 <move_window>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 85 a7 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003919:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000391f:	0f 85 96 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c0003925:	8d 47 20             	lea    eax,[edi+0x20]
c0003928:	b9 20 00 00 00       	mov    ecx,0x20
c000392d:	e8 f8 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003932:	31 d2                	xor    edx,edx
c0003934:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003938:	b9 0f 00 00 00       	mov    ecx,0xf
c000393d:	83 c0 2c             	add    eax,0x2c
c0003940:	f7 f1                	div    ecx
c0003942:	c1 e0 05             	shl    eax,0x5
c0003945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003949:	77 70                	ja     c00039bb <load_xdir+0x12a>
c000394b:	bd 40 00 00 00       	mov    ebp,0x40
c0003950:	31 d2                	xor    edx,edx
c0003952:	89 f0                	mov    eax,esi
c0003954:	e8 06 fe ff ff       	call   c000375f <dir_next>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	83 f8 04             	cmp    eax,0x4
c000395e:	74 5b                	je     c00039bb <load_xdir+0x12a>
c0003960:	85 c0                	test   eax,eax
c0003962:	75 5c                	jne    c00039c0 <load_xdir+0x12f>
c0003964:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003967:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000396a:	8b 06                	mov    eax,DWORD PTR [esi]
c000396c:	e8 18 eb ff ff       	call   c0002489 <move_window>
c0003971:	89 c3                	mov    ebx,eax
c0003973:	85 c0                	test   eax,eax
c0003975:	75 49                	jne    c00039c0 <load_xdir+0x12f>
c0003977:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000397a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000397d:	75 3c                	jne    c00039bb <load_xdir+0x12a>
c000397f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003985:	77 0d                	ja     c0003994 <load_xdir+0x103>
c0003987:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000398a:	b9 20 00 00 00       	mov    ecx,0x20
c000398f:	e8 96 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003994:	83 c5 20             	add    ebp,0x20
c0003997:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000399b:	77 b3                	ja     c0003950 <load_xdir+0xbf>
c000399d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00039a3:	77 1b                	ja     c00039c0 <load_xdir+0x12f>
c00039a5:	89 f8                	mov    eax,edi
c00039a7:	e8 cd e7 ff ff       	call   c0002179 <xdir_sum>
c00039ac:	89 c1                	mov    ecx,eax
c00039ae:	8d 47 02             	lea    eax,[edi+0x2]
c00039b1:	e8 f5 e2 ff ff       	call   c0001cab <ld_word>
c00039b6:	66 39 c1             	cmp    cx,ax
c00039b9:	74 05                	je     c00039c0 <load_xdir+0x12f>
c00039bb:	bb 02 00 00 00       	mov    ebx,0x2
c00039c0:	83 c4 1c             	add    esp,0x1c
c00039c3:	89 d8                	mov    eax,ebx
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <load_obj_xdir>:
c00039ca:	53                   	push   ebx
c00039cb:	89 c3                	mov    ebx,eax
c00039cd:	83 ec 08             	sub    esp,0x8
c00039d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d2:	89 03                	mov    DWORD PTR [ebx],eax
c00039d4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039dd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039ea:	30 c0                	xor    al,al
c00039ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039f3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039f6:	89 d8                	mov    eax,ebx
c00039f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039fb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039fe:	e8 04 f8 ff ff       	call   c0003207 <dir_sdi>
c0003a03:	85 c0                	test   eax,eax
c0003a05:	75 0b                	jne    c0003a12 <load_obj_xdir+0x48>
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	83 c4 08             	add    esp,0x8
c0003a0c:	5b                   	pop    ebx
c0003a0d:	e9 7f fe ff ff       	jmp    c0003891 <load_xdir>
c0003a12:	83 c4 08             	add    esp,0x8
c0003a15:	5b                   	pop    ebx
c0003a16:	c3                   	ret    

c0003a17 <dir_read>:
c0003a17:	55                   	push   ebp
c0003a18:	bd 04 00 00 00       	mov    ebp,0x4
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	83 ec 1c             	sub    esp,0x1c
c0003a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a2e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a30:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a35:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a38:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3b:	89 c8                	mov    eax,ecx
c0003a3d:	09 d0                	or     eax,edx
c0003a3f:	0f 84 25 01 00 00    	je     c0003b6a <dir_read+0x153>
c0003a45:	89 f8                	mov    eax,edi
c0003a47:	e8 3d ea ff ff       	call   c0002489 <move_window>
c0003a4c:	89 c5                	mov    ebp,eax
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	0f 85 23 01 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a56:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a59:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a5b:	84 c9                	test   cl,cl
c0003a5d:	0f 84 11 01 00 00    	je     c0003b74 <dir_read+0x15d>
c0003a63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a66:	75 48                	jne    c0003ab0 <dir_read+0x99>
c0003a68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a6d:	74 10                	je     c0003a7f <dir_read+0x68>
c0003a6f:	80 f9 83             	cmp    cl,0x83
c0003a72:	0f 85 dd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a78:	31 ed                	xor    ebp,ebp
c0003a7a:	e9 08 01 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003a7f:	80 f9 85             	cmp    cl,0x85
c0003a82:	0f 85 cd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a8b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a8e:	89 d8                	mov    eax,ebx
c0003a90:	e8 fc fd ff ff       	call   c0003891 <load_xdir>
c0003a95:	89 c5                	mov    ebp,eax
c0003a97:	85 c0                	test   eax,eax
c0003a99:	0f 85 da 00 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a9f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003aa2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003aa5:	83 e0 3f             	and    eax,0x3f
c0003aa8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003aab:	e9 d7 00 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003ab0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003ab3:	83 e0 3f             	and    eax,0x3f
c0003ab6:	80 f9 2e             	cmp    cl,0x2e
c0003ab9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003abd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ac0:	0f 84 8a 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003ac6:	80 f9 e5             	cmp    cl,0xe5
c0003ac9:	0f 84 81 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ad3:	83 e0 1f             	and    eax,0x1f
c0003ad6:	83 f8 08             	cmp    eax,0x8
c0003ad9:	0f 94 c0             	sete   al
c0003adc:	0f b6 c0             	movzx  eax,al
c0003adf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ae3:	75 6b                	jne    c0003b50 <dir_read+0x139>
c0003ae5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aea:	75 44                	jne    c0003b30 <dir_read+0x119>
c0003aec:	f6 c1 40             	test   cl,0x40
c0003aef:	74 12                	je     c0003b03 <dir_read+0xec>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	83 e1 bf             	and    ecx,0xffffffbf
c0003af7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003afb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003afe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003b01:	eb 06                	jmp    c0003b09 <dir_read+0xf2>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	38 c8                	cmp    al,cl
c0003b07:	75 47                	jne    c0003b50 <dir_read+0x139>
c0003b09:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b0d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b12:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003b15:	75 3e                	jne    c0003b55 <dir_read+0x13e>
c0003b17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b1e:	e8 8a e4 ff ff       	call   c0001fad <pick_lfn>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	74 2e                	je     c0003b55 <dir_read+0x13e>
c0003b27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b2b:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b2e:	eb 25                	jmp    c0003b55 <dir_read+0x13e>
c0003b30:	89 f0                	mov    eax,esi
c0003b32:	84 c0                	test   al,al
c0003b34:	75 11                	jne    c0003b47 <dir_read+0x130>
c0003b36:	89 d0                	mov    eax,edx
c0003b38:	e8 2a e6 ff ff       	call   c0002167 <sum_sfn>
c0003b3d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b41:	0f 84 31 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b47:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b4e:	eb 37                	jmp    c0003b87 <dir_read+0x170>
c0003b50:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	89 d8                	mov    eax,ebx
c0003b59:	e8 01 fc ff ff       	call   c000375f <dir_next>
c0003b5e:	89 c5                	mov    ebp,eax
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 84 cd fe ff ff    	je     c0003a35 <dir_read+0x1e>
c0003b68:	eb 0f                	jmp    c0003b79 <dir_read+0x162>
c0003b6a:	85 ed                	test   ebp,ebp
c0003b6c:	0f 84 06 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b72:	eb 05                	jmp    c0003b79 <dir_read+0x162>
c0003b74:	bd 04 00 00 00       	mov    ebp,0x4
c0003b79:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b80:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b87:	83 c4 1c             	add    esp,0x1c
c0003b8a:	89 e8                	mov    eax,ebp
c0003b8c:	5b                   	pop    ebx
c0003b8d:	5e                   	pop    esi
c0003b8e:	5f                   	pop    edi
c0003b8f:	5d                   	pop    ebp
c0003b90:	c3                   	ret    

c0003b91 <dir_alloc>:
c0003b91:	55                   	push   ebp
c0003b92:	89 d5                	mov    ebp,edx
c0003b94:	57                   	push   edi
c0003b95:	31 d2                	xor    edx,edx
c0003b97:	56                   	push   esi
c0003b98:	53                   	push   ebx
c0003b99:	89 c3                	mov    ebx,eax
c0003b9b:	83 ec 0c             	sub    esp,0xc
c0003b9e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ba0:	e8 62 f6 ff ff       	call   c0003207 <dir_sdi>
c0003ba5:	85 c0                	test   eax,eax
c0003ba7:	75 4e                	jne    c0003bf7 <dir_alloc+0x66>
c0003ba9:	31 f6                	xor    esi,esi
c0003bab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003bae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 d1 e8 ff ff       	call   c0002489 <move_window>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	75 3b                	jne    c0003bf7 <dir_alloc+0x66>
c0003bbc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003bc2:	8a 12                	mov    dl,BYTE PTR [edx]
c0003bc4:	75 07                	jne    c0003bcd <dir_alloc+0x3c>
c0003bc6:	f7 d2                	not    edx
c0003bc8:	c0 ea 07             	shr    dl,0x7
c0003bcb:	eb 0d                	jmp    c0003bda <dir_alloc+0x49>
c0003bcd:	84 d2                	test   dl,dl
c0003bcf:	0f 94 c1             	sete   cl
c0003bd2:	80 fa e5             	cmp    dl,0xe5
c0003bd5:	0f 94 c2             	sete   dl
c0003bd8:	09 ca                	or     edx,ecx
c0003bda:	84 d2                	test   dl,dl
c0003bdc:	74 07                	je     c0003be5 <dir_alloc+0x54>
c0003bde:	46                   	inc    esi
c0003bdf:	39 ee                	cmp    esi,ebp
c0003be1:	75 04                	jne    c0003be7 <dir_alloc+0x56>
c0003be3:	eb 1c                	jmp    c0003c01 <dir_alloc+0x70>
c0003be5:	31 f6                	xor    esi,esi
c0003be7:	ba 01 00 00 00       	mov    edx,0x1
c0003bec:	89 d8                	mov    eax,ebx
c0003bee:	e8 6c fb ff ff       	call   c000375f <dir_next>
c0003bf3:	85 c0                	test   eax,eax
c0003bf5:	74 b4                	je     c0003bab <dir_alloc+0x1a>
c0003bf7:	83 f8 04             	cmp    eax,0x4
c0003bfa:	75 05                	jne    c0003c01 <dir_alloc+0x70>
c0003bfc:	b8 07 00 00 00       	mov    eax,0x7
c0003c01:	83 c4 0c             	add    esp,0xc
c0003c04:	5b                   	pop    ebx
c0003c05:	5e                   	pop    esi
c0003c06:	5f                   	pop    edi
c0003c07:	5d                   	pop    ebp
c0003c08:	c3                   	ret    

c0003c09 <store_xdir>:
c0003c09:	55                   	push   ebp
c0003c0a:	57                   	push   edi
c0003c0b:	89 c7                	mov    edi,eax
c0003c0d:	56                   	push   esi
c0003c0e:	53                   	push   ebx
c0003c0f:	83 ec 0c             	sub    esp,0xc
c0003c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c14:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003c17:	89 e8                	mov    eax,ebp
c0003c19:	e8 5b e5 ff ff       	call   c0002179 <xdir_sum>
c0003c1e:	0f b7 d0             	movzx  edx,ax
c0003c21:	8d 45 02             	lea    eax,[ebp+0x2]
c0003c24:	e8 f4 e0 ff ff       	call   c0001d1d <st_word>
c0003c29:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c2d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c30:	89 f8                	mov    eax,edi
c0003c32:	e8 d0 f5 ff ff       	call   c0003207 <dir_sdi>
c0003c37:	89 c6                	mov    esi,eax
c0003c39:	85 f6                	test   esi,esi
c0003c3b:	75 3d                	jne    c0003c7a <store_xdir+0x71>
c0003c3d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c40:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c45:	e8 3f e8 ff ff       	call   c0002489 <move_window>
c0003c4a:	89 c6                	mov    esi,eax
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 2a                	jne    c0003c7a <store_xdir+0x71>
c0003c50:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c53:	b9 20 00 00 00       	mov    ecx,0x20
c0003c58:	89 ea                	mov    edx,ebp
c0003c5a:	e8 cb e0 ff ff       	call   c0001d2a <mem_cpy>
c0003c5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c61:	85 db                	test   ebx,ebx
c0003c63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c67:	74 11                	je     c0003c7a <store_xdir+0x71>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	83 c5 20             	add    ebp,0x20
c0003c70:	e8 ea fa ff ff       	call   c000375f <dir_next>
c0003c75:	4b                   	dec    ebx
c0003c76:	89 c6                	mov    esi,eax
c0003c78:	eb bf                	jmp    c0003c39 <store_xdir+0x30>
c0003c7a:	89 f0                	mov    eax,esi
c0003c7c:	83 fe 02             	cmp    esi,0x2
c0003c7f:	76 05                	jbe    c0003c86 <store_xdir+0x7d>
c0003c81:	b8 02 00 00 00       	mov    eax,0x2
c0003c86:	83 c4 0c             	add    esp,0xc
c0003c89:	5b                   	pop    ebx
c0003c8a:	5e                   	pop    esi
c0003c8b:	5f                   	pop    edi
c0003c8c:	5d                   	pop    ebp
c0003c8d:	c3                   	ret    

c0003c8e <dir_remove>:
c0003c8e:	57                   	push   edi
c0003c8f:	56                   	push   esi
c0003c90:	53                   	push   ebx
c0003c91:	89 c3                	mov    ebx,eax
c0003c93:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c98:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c9b:	83 fa ff             	cmp    edx,0xffffffff
c0003c9e:	74 09                	je     c0003ca9 <dir_remove+0x1b>
c0003ca0:	e8 62 f5 ff ff       	call   c0003207 <dir_sdi>
c0003ca5:	85 c0                	test   eax,eax
c0003ca7:	75 41                	jne    c0003cea <dir_remove+0x5c>
c0003ca9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003cac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003caf:	89 f0                	mov    eax,esi
c0003cb1:	e8 d3 e7 ff ff       	call   c0002489 <move_window>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	75 26                	jne    c0003ce0 <dir_remove+0x52>
c0003cba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003cbd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003cc0:	75 05                	jne    c0003cc7 <dir_remove+0x39>
c0003cc2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003cc5:	eb 03                	jmp    c0003cca <dir_remove+0x3c>
c0003cc7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003cca:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003cce:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cd1:	73 17                	jae    c0003cea <dir_remove+0x5c>
c0003cd3:	31 d2                	xor    edx,edx
c0003cd5:	89 d8                	mov    eax,ebx
c0003cd7:	e8 83 fa ff ff       	call   c000375f <dir_next>
c0003cdc:	85 c0                	test   eax,eax
c0003cde:	74 c9                	je     c0003ca9 <dir_remove+0x1b>
c0003ce0:	83 f8 04             	cmp    eax,0x4
c0003ce3:	75 05                	jne    c0003cea <dir_remove+0x5c>
c0003ce5:	b8 02 00 00 00       	mov    eax,0x2
c0003cea:	5b                   	pop    ebx
c0003ceb:	5e                   	pop    esi
c0003cec:	5f                   	pop    edi
c0003ced:	c3                   	ret    

c0003cee <create_name>:
c0003cee:	55                   	push   ebp
c0003cef:	89 d5                	mov    ebp,edx
c0003cf1:	57                   	push   edi
c0003cf2:	89 c7                	mov    edi,eax
c0003cf4:	56                   	push   esi
c0003cf5:	31 f6                	xor    esi,esi
c0003cf7:	53                   	push   ebx
c0003cf8:	83 ec 3c             	sub    esp,0x3c
c0003cfb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003d0e:	e8 72 e0 ff ff       	call   c0001d85 <tchar2uni>
c0003d13:	89 c3                	mov    ebx,eax
c0003d15:	83 f8 ff             	cmp    eax,0xffffffff
c0003d18:	75 0a                	jne    c0003d24 <create_name+0x36>
c0003d1a:	b8 06 00 00 00       	mov    eax,0x6
c0003d1f:	e9 9e 02 00 00       	jmp    c0003fc2 <create_name+0x2d4>
c0003d24:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d29:	76 0c                	jbe    c0003d37 <create_name+0x49>
c0003d2b:	c1 e8 10             	shr    eax,0x10
c0003d2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d32:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d36:	46                   	inc    esi
c0003d37:	66 83 fb 1f          	cmp    bx,0x1f
c0003d3b:	76 4f                	jbe    c0003d8c <create_name+0x9e>
c0003d3d:	66 83 fb 5c          	cmp    bx,0x5c
c0003d41:	74 35                	je     c0003d78 <create_name+0x8a>
c0003d43:	66 83 fb 2f          	cmp    bx,0x2f
c0003d47:	74 2f                	je     c0003d78 <create_name+0x8a>
c0003d49:	66 83 fb 7f          	cmp    bx,0x7f
c0003d4d:	77 11                	ja     c0003d60 <create_name+0x72>
c0003d4f:	0f b7 d3             	movzx  edx,bx
c0003d52:	b8 72 f7 01 c0       	mov    eax,0xc001f772
c0003d57:	e8 11 e0 ff ff       	call   c0001d6d <chk_chr>
c0003d5c:	85 c0                	test   eax,eax
c0003d5e:	75 ba                	jne    c0003d1a <create_name+0x2c>
c0003d60:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d66:	77 b2                	ja     c0003d1a <create_name+0x2c>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d70:	46                   	inc    esi
c0003d71:	eb 97                	jmp    c0003d0a <create_name+0x1c>
c0003d73:	40                   	inc    eax
c0003d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d7c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d7e:	80 fa 2f             	cmp    dl,0x2f
c0003d81:	74 f0                	je     c0003d73 <create_name+0x85>
c0003d83:	80 fa 5c             	cmp    dl,0x5c
c0003d86:	74 eb                	je     c0003d73 <create_name+0x85>
c0003d88:	31 db                	xor    ebx,ebx
c0003d8a:	eb 02                	jmp    c0003d8e <create_name+0xa0>
c0003d8c:	b3 04                	mov    bl,0x4
c0003d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d95:	85 f6                	test   esi,esi
c0003d97:	74 18                	je     c0003db1 <create_name+0xc3>
c0003d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003da2:	66 83 f8 20          	cmp    ax,0x20
c0003da6:	74 06                	je     c0003dae <create_name+0xc0>
c0003da8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dac:	75 03                	jne    c0003db1 <create_name+0xc3>
c0003dae:	4e                   	dec    esi
c0003daf:	eb e4                	jmp    c0003d95 <create_name+0xa7>
c0003db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db5:	31 ed                	xor    ebp,ebp
c0003db7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003dbd:	85 f6                	test   esi,esi
c0003dbf:	0f 84 55 ff ff ff    	je     c0003d1a <create_name+0x2c>
c0003dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003dcc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003dd0:	66 83 f8 20          	cmp    ax,0x20
c0003dd4:	75 04                	jne    c0003dda <create_name+0xec>
c0003dd6:	89 d5                	mov    ebp,edx
c0003dd8:	eb eb                	jmp    c0003dc5 <create_name+0xd7>
c0003dda:	85 ed                	test   ebp,ebp
c0003ddc:	75 06                	jne    c0003de4 <create_name+0xf6>
c0003dde:	66 83 f8 2e          	cmp    ax,0x2e
c0003de2:	75 08                	jne    c0003dec <create_name+0xfe>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	eb 03                	jmp    c0003dec <create_name+0xfe>
c0003de9:	4e                   	dec    esi
c0003dea:	74 0c                	je     c0003df8 <create_name+0x10a>
c0003dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003df6:	75 f1                	jne    c0003de9 <create_name+0xfb>
c0003df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003e00:	ba 20 00 00 00       	mov    edx,0x20
c0003e05:	e8 35 df ff ff       	call   c0001d3f <mem_set>
c0003e0a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003e12:	31 c9                	xor    ecx,ecx
c0003e14:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0003e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003e24:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e28:	66 85 ed             	test   bp,bp
c0003e2b:	0f 84 30 01 00 00    	je     c0003f61 <create_name+0x273>
c0003e31:	66 83 fd 20          	cmp    bp,0x20
c0003e35:	74 10                	je     c0003e47 <create_name+0x159>
c0003e37:	66 83 fd 2e          	cmp    bp,0x2e
c0003e3b:	75 13                	jne    c0003e50 <create_name+0x162>
c0003e3d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e41:	0f 84 6b 01 00 00    	je     c0003fb2 <create_name+0x2c4>
c0003e47:	83 cb 03             	or     ebx,0x3
c0003e4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e4e:	eb c9                	jmp    c0003e19 <create_name+0x12b>
c0003e50:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e54:	73 0b                	jae    c0003e61 <create_name+0x173>
c0003e56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5a:	75 47                	jne    c0003ea3 <create_name+0x1b5>
c0003e5c:	e9 51 01 00 00       	jmp    c0003fb2 <create_name+0x2c4>
c0003e61:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e66:	75 10                	jne    c0003e78 <create_name+0x18a>
c0003e68:	83 cb 03             	or     ebx,0x3
c0003e6b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e73:	e9 e9 00 00 00       	jmp    c0003f61 <create_name+0x273>
c0003e78:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e7c:	74 0d                	je     c0003e8b <create_name+0x19d>
c0003e7e:	83 cb 03             	or     ebx,0x3
c0003e81:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e85:	0f 87 d6 00 00 00    	ja     c0003f61 <create_name+0x273>
c0003e8b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e94:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0003ea1:	eb a7                	jmp    c0003e4a <create_name+0x15c>
c0003ea3:	66 83 fd 7f          	cmp    bp,0x7f
c0003ea7:	76 68                	jbe    c0003f11 <create_name+0x223>
c0003ea9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003ead:	88 da                	mov    dl,bl
c0003eaf:	83 ca 02             	or     edx,0x2
c0003eb2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003eb6:	50                   	push   eax
c0003eb7:	50                   	push   eax
c0003eb8:	68 b5 01 00 00       	push   0x1b5
c0003ebd:	55                   	push   ebp
c0003ebe:	e8 48 46 00 00       	call   c000850b <ff_uni2oem>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	89 c5                	mov    ebp,eax
c0003ec8:	a8 80                	test   al,0x80
c0003eca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ed2:	74 0c                	je     c0003ee0 <create_name+0x1f2>
c0003ed4:	83 e5 7f             	and    ebp,0x7f
c0003ed7:	0f b6 ad c0 f6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0940]
c0003ede:	eb 2a                	jmp    c0003f0a <create_name+0x21c>
c0003ee0:	66 3d ff 00          	cmp    ax,0xff
c0003ee4:	76 24                	jbe    c0003f0a <create_name+0x21c>
c0003ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eea:	48                   	dec    eax
c0003eeb:	39 c8                	cmp    eax,ecx
c0003eed:	77 0c                	ja     c0003efb <create_name+0x20d>
c0003eef:	83 cb 03             	or     ebx,0x3
c0003ef2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef6:	e9 4f ff ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003efb:	89 e8                	mov    eax,ebp
c0003efd:	88 d3                	mov    bl,dl
c0003eff:	66 c1 e8 08          	shr    ax,0x8
c0003f03:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f07:	41                   	inc    ecx
c0003f08:	eb 4b                	jmp    c0003f55 <create_name+0x267>
c0003f0a:	88 d3                	mov    bl,dl
c0003f0c:	66 85 ed             	test   bp,bp
c0003f0f:	74 19                	je     c0003f2a <create_name+0x23c>
c0003f11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003f15:	0f b7 d5             	movzx  edx,bp
c0003f18:	b8 7b f7 01 c0       	mov    eax,0xc001f77b
c0003f1d:	e8 4b de ff ff       	call   c0001d6d <chk_chr>
c0003f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f26:	85 c0                	test   eax,eax
c0003f28:	74 0a                	je     c0003f34 <create_name+0x246>
c0003f2a:	83 cb 03             	or     ebx,0x3
c0003f2d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f32:	eb 21                	jmp    c0003f55 <create_name+0x267>
c0003f34:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f37:	66 83 f8 19          	cmp    ax,0x19
c0003f3b:	77 07                	ja     c0003f44 <create_name+0x256>
c0003f3d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f42:	eb 11                	jmp    c0003f55 <create_name+0x267>
c0003f44:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f47:	66 83 f8 19          	cmp    ax,0x19
c0003f4b:	77 08                	ja     c0003f55 <create_name+0x267>
c0003f4d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f52:	83 ed 20             	sub    ebp,0x20
c0003f55:	89 e8                	mov    eax,ebp
c0003f57:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f5b:	41                   	inc    ecx
c0003f5c:	e9 e9 fe ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003f61:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f65:	75 04                	jne    c0003f6b <create_name+0x27d>
c0003f67:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f6b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f70:	75 05                	jne    c0003f77 <create_name+0x289>
c0003f72:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f7b:	83 e0 0c             	and    eax,0xc
c0003f7e:	3c 0c                	cmp    al,0xc
c0003f80:	74 0b                	je     c0003f8d <create_name+0x29f>
c0003f82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f86:	83 e0 03             	and    eax,0x3
c0003f89:	3c 03                	cmp    al,0x3
c0003f8b:	75 05                	jne    c0003f92 <create_name+0x2a4>
c0003f8d:	83 cb 02             	or     ebx,0x2
c0003f90:	eb 19                	jmp    c0003fab <create_name+0x2bd>
c0003f92:	f6 c3 02             	test   bl,0x2
c0003f95:	75 14                	jne    c0003fab <create_name+0x2bd>
c0003f97:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f9c:	74 03                	je     c0003fa1 <create_name+0x2b3>
c0003f9e:	83 cb 10             	or     ebx,0x10
c0003fa1:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003fa6:	74 03                	je     c0003fab <create_name+0x2bd>
c0003fa8:	83 cb 08             	or     ebx,0x8
c0003fab:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003fae:	31 c0                	xor    eax,eax
c0003fb0:	eb 10                	jmp    c0003fc2 <create_name+0x2d4>
c0003fb2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003fb7:	0f 85 ce fe ff ff    	jne    c0003e8b <create_name+0x19d>
c0003fbd:	e9 a6 fe ff ff       	jmp    c0003e68 <create_name+0x17a>
c0003fc2:	83 c4 3c             	add    esp,0x3c
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	5f                   	pop    edi
c0003fc8:	5d                   	pop    ebp
c0003fc9:	c3                   	ret    

c0003fca <xname_sum>:
c0003fca:	56                   	push   esi
c0003fcb:	53                   	push   ebx
c0003fcc:	89 c6                	mov    esi,eax
c0003fce:	51                   	push   ecx
c0003fcf:	31 db                	xor    ebx,ebx
c0003fd1:	83 c6 02             	add    esi,0x2
c0003fd4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fd8:	66 85 c0             	test   ax,ax
c0003fdb:	74 1f                	je     c0003ffc <xname_sum+0x32>
c0003fdd:	83 ec 0c             	sub    esp,0xc
c0003fe0:	66 d1 cb             	ror    bx,1
c0003fe3:	50                   	push   eax
c0003fe4:	e8 1e 46 00 00       	call   c0008607 <ff_wtoupper>
c0003fe9:	83 c4 10             	add    esp,0x10
c0003fec:	0f b6 d0             	movzx  edx,al
c0003fef:	66 c1 e8 08          	shr    ax,0x8
c0003ff3:	01 d3                	add    ebx,edx
c0003ff5:	66 d1 cb             	ror    bx,1
c0003ff8:	01 c3                	add    ebx,eax
c0003ffa:	eb d5                	jmp    c0003fd1 <xname_sum+0x7>
c0003ffc:	89 d8                	mov    eax,ebx
c0003ffe:	5a                   	pop    edx
c0003fff:	5b                   	pop    ebx
c0004000:	5e                   	pop    esi
c0004001:	c3                   	ret    

c0004002 <create_xdir>:
c0004002:	55                   	push   ebp
c0004003:	b9 40 00 00 00       	mov    ecx,0x40
c0004008:	57                   	push   edi
c0004009:	bd 01 00 00 00       	mov    ebp,0x1
c000400e:	56                   	push   esi
c000400f:	31 ff                	xor    edi,edi
c0004011:	53                   	push   ebx
c0004012:	be 40 00 00 00       	mov    esi,0x40
c0004017:	89 c3                	mov    ebx,eax
c0004019:	83 ec 1c             	sub    esp,0x1c
c000401c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004020:	31 d2                	xor    edx,edx
c0004022:	e8 18 dd ff ff       	call   c0001d3f <mem_set>
c0004027:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c000402a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c000402e:	31 c9                	xor    ecx,ecx
c0004030:	8d 46 01             	lea    eax,[esi+0x1]
c0004033:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004037:	83 c6 02             	add    esi,0x2
c000403a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000403e:	66 85 ed             	test   bp,bp
c0004041:	74 12                	je     c0004055 <create_xdir+0x53>
c0004043:	0f b6 c1             	movzx  eax,cl
c0004046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000404e:	66 83 fd 01          	cmp    bp,0x1
c0004052:	80 d9 ff             	sbb    cl,0xff
c0004055:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004058:	0f b7 d5             	movzx  edx,bp
c000405b:	83 c6 02             	add    esi,0x2
c000405e:	e8 ba dc ff ff       	call   c0001d1d <st_word>
c0004063:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004069:	75 d3                	jne    c000403e <create_xdir+0x3c>
c000406b:	8d 47 01             	lea    eax,[edi+0x1]
c000406e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004072:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004076:	0f b6 c1             	movzx  eax,cl
c0004079:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000407e:	74 07                	je     c0004087 <create_xdir+0x85>
c0004080:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004085:	eb a9                	jmp    c0004030 <create_xdir+0x2e>
c0004087:	8d 47 02             	lea    eax,[edi+0x2]
c000408a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000408d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004090:	89 d0                	mov    eax,edx
c0004092:	e8 33 ff ff ff       	call   c0003fca <xname_sum>
c0004097:	83 c4 1c             	add    esp,0x1c
c000409a:	0f b7 d0             	movzx  edx,ax
c000409d:	8d 43 24             	lea    eax,[ebx+0x24]
c00040a0:	5b                   	pop    ebx
c00040a1:	5e                   	pop    esi
c00040a2:	5f                   	pop    edi
c00040a3:	5d                   	pop    ebp
c00040a4:	e9 74 dc ff ff       	jmp    c0001d1d <st_word>

c00040a9 <cmp_lfn>:
c00040a9:	55                   	push   ebp
c00040aa:	57                   	push   edi
c00040ab:	89 d7                	mov    edi,edx
c00040ad:	56                   	push   esi
c00040ae:	53                   	push   ebx
c00040af:	83 ec 1c             	sub    esp,0x1c
c00040b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00040b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00040b9:	e8 ed db ff ff       	call   c0001cab <ld_word>
c00040be:	66 85 c0             	test   ax,ax
c00040c1:	74 07                	je     c00040ca <cmp_lfn+0x21>
c00040c3:	31 c0                	xor    eax,eax
c00040c5:	e9 9a 00 00 00       	jmp    c0004164 <cmp_lfn+0xbb>
c00040ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040cc:	bd 01 00 00 00       	mov    ebp,0x1
c00040d1:	83 e3 3f             	and    ebx,0x3f
c00040d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040dc:	4b                   	dec    ebx
c00040dd:	6b db 0d             	imul   ebx,ebx,0xd
c00040e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040e4:	0f b6 80 40 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe08c0]
c00040eb:	01 f8                	add    eax,edi
c00040ed:	e8 b9 db ff ff       	call   c0001cab <ld_word>
c00040f2:	66 85 ed             	test   bp,bp
c00040f5:	89 c6                	mov    esi,eax
c00040f7:	74 3c                	je     c0004135 <cmp_lfn+0x8c>
c00040f9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040ff:	77 c2                	ja     c00040c3 <cmp_lfn+0x1a>
c0004101:	83 ec 0c             	sub    esp,0xc
c0004104:	0f b7 c0             	movzx  eax,ax
c0004107:	50                   	push   eax
c0004108:	e8 fa 44 00 00       	call   c0008607 <ff_wtoupper>
c000410d:	89 c5                	mov    ebp,eax
c000410f:	8d 43 01             	lea    eax,[ebx+0x1]
c0004112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000411a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000411e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004121:	e8 e1 44 00 00       	call   c0008607 <ff_wtoupper>
c0004126:	83 c4 10             	add    esp,0x10
c0004129:	39 c5                	cmp    ebp,eax
c000412b:	75 96                	jne    c00040c3 <cmp_lfn+0x1a>
c000412d:	89 f5                	mov    ebp,esi
c000412f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004133:	eb 04                	jmp    c0004139 <cmp_lfn+0x90>
c0004135:	66 46                	inc    si
c0004137:	75 8a                	jne    c00040c3 <cmp_lfn+0x1a>
c0004139:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000413d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004142:	75 9c                	jne    c00040e0 <cmp_lfn+0x37>
c0004144:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004147:	74 16                	je     c000415f <cmp_lfn+0xb6>
c0004149:	66 85 ed             	test   bp,bp
c000414c:	74 11                	je     c000415f <cmp_lfn+0xb6>
c000414e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004152:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004157:	0f 94 c0             	sete   al
c000415a:	0f b6 c0             	movzx  eax,al
c000415d:	eb 05                	jmp    c0004164 <cmp_lfn+0xbb>
c000415f:	b8 01 00 00 00       	mov    eax,0x1
c0004164:	83 c4 1c             	add    esp,0x1c
c0004167:	5b                   	pop    ebx
c0004168:	5e                   	pop    esi
c0004169:	5f                   	pop    edi
c000416a:	5d                   	pop    ebp
c000416b:	c3                   	ret    

c000416c <dir_find>:
c000416c:	55                   	push   ebp
c000416d:	31 d2                	xor    edx,edx
c000416f:	57                   	push   edi
c0004170:	56                   	push   esi
c0004171:	53                   	push   ebx
c0004172:	89 c3                	mov    ebx,eax
c0004174:	83 ec 1c             	sub    esp,0x1c
c0004177:	8b 30                	mov    esi,DWORD PTR [eax]
c0004179:	e8 89 f0 ff ff       	call   c0003207 <dir_sdi>
c000417e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004181:	85 c0                	test   eax,eax
c0004183:	0f 85 9e 01 00 00    	jne    c0004327 <dir_find+0x1bb>
c0004189:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000418c:	0f 85 8d 00 00 00    	jne    c000421f <dir_find+0xb3>
c0004192:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004195:	e8 30 fe ff ff       	call   c0003fca <xname_sum>
c000419a:	89 c7                	mov    edi,eax
c000419c:	31 d2                	xor    edx,edx
c000419e:	89 d8                	mov    eax,ebx
c00041a0:	e8 72 f8 ff ff       	call   c0003a17 <dir_read>
c00041a5:	85 c0                	test   eax,eax
c00041a7:	0f 85 5e 01 00 00    	jne    c000430b <dir_find+0x19f>
c00041ad:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00041b0:	8d 41 24             	lea    eax,[ecx+0x24]
c00041b3:	e8 f3 da ff ff       	call   c0001cab <ld_word>
c00041b8:	66 39 f8             	cmp    ax,di
c00041bb:	75 df                	jne    c000419c <dir_find+0x30>
c00041bd:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00041c0:	31 ed                	xor    ebp,ebp
c00041c2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041c6:	ba 40 00 00 00       	mov    edx,0x40
c00041cb:	89 e9                	mov    ecx,ebp
c00041cd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041d1:	0f 84 42 01 00 00    	je     c0004319 <dir_find+0x1ad>
c00041d7:	f6 c2 1f             	test   dl,0x1f
c00041da:	75 03                	jne    c00041df <dir_find+0x73>
c00041dc:	83 c2 02             	add    edx,0x2
c00041df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041e3:	89 d0                	mov    eax,edx
c00041e5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041e8:	e8 be da ff ff       	call   c0001cab <ld_word>
c00041ed:	83 ec 0c             	sub    esp,0xc
c00041f0:	0f b7 c0             	movzx  eax,ax
c00041f3:	50                   	push   eax
c00041f4:	e8 0e 44 00 00       	call   c0008607 <ff_wtoupper>
c00041f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041fd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004200:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004204:	89 04 24             	mov    DWORD PTR [esp],eax
c0004207:	e8 fb 43 00 00       	call   c0008607 <ff_wtoupper>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004213:	75 87                	jne    c000419c <dir_find+0x30>
c0004215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004219:	45                   	inc    ebp
c000421a:	83 c2 02             	add    edx,0x2
c000421d:	eb ac                	jmp    c00041cb <dir_find+0x5f>
c000421f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004226:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c000422b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004230:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004233:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004236:	89 f0                	mov    eax,esi
c0004238:	e8 4c e2 ff ff       	call   c0002489 <move_window>
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 c6 00 00 00    	jne    c000430b <dir_find+0x19f>
c0004245:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004248:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000424b:	84 c9                	test   cl,cl
c000424d:	0f 84 bd 00 00 00    	je     c0004310 <dir_find+0x1a4>
c0004253:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004256:	88 d0                	mov    al,dl
c0004258:	83 e0 3f             	and    eax,0x3f
c000425b:	80 f9 e5             	cmp    cl,0xe5
c000425e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004261:	0f 84 87 00 00 00    	je     c00042ee <dir_find+0x182>
c0004267:	80 e2 08             	and    dl,0x8
c000426a:	74 06                	je     c0004272 <dir_find+0x106>
c000426c:	3c 0f                	cmp    al,0xf
c000426e:	75 7e                	jne    c00042ee <dir_find+0x182>
c0004270:	eb 04                	jmp    c0004276 <dir_find+0x10a>
c0004272:	3c 0f                	cmp    al,0xf
c0004274:	75 4c                	jne    c00042c2 <dir_find+0x156>
c0004276:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000427a:	75 7e                	jne    c00042fa <dir_find+0x18e>
c000427c:	f6 c1 40             	test   cl,0x40
c000427f:	74 12                	je     c0004293 <dir_find+0x127>
c0004281:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004284:	83 e1 bf             	and    ecx,0xffffffbf
c0004287:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000428b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000428e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004291:	eb 06                	jmp    c0004299 <dir_find+0x12d>
c0004293:	89 f8                	mov    eax,edi
c0004295:	38 c8                	cmp    al,cl
c0004297:	75 5c                	jne    c00042f5 <dir_find+0x189>
c0004299:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000429d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042a2:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00042a5:	75 53                	jne    c00042fa <dir_find+0x18e>
c00042a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00042ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ae:	89 ea                	mov    edx,ebp
c00042b0:	e8 f4 fd ff ff       	call   c00040a9 <cmp_lfn>
c00042b5:	85 c0                	test   eax,eax
c00042b7:	74 41                	je     c00042fa <dir_find+0x18e>
c00042b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00042bd:	8d 79 ff             	lea    edi,[ecx-0x1]
c00042c0:	eb 38                	jmp    c00042fa <dir_find+0x18e>
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	84 c0                	test   al,al
c00042c6:	75 0d                	jne    c00042d5 <dir_find+0x169>
c00042c8:	89 e8                	mov    eax,ebp
c00042ca:	e8 98 de ff ff       	call   c0002167 <sum_sfn>
c00042cf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042d3:	74 52                	je     c0004327 <dir_find+0x1bb>
c00042d5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042d9:	75 13                	jne    c00042ee <dir_find+0x182>
c00042db:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042de:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e3:	89 e8                	mov    eax,ebp
c00042e5:	e8 60 da ff ff       	call   c0001d4a <mem_cmp>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	74 39                	je     c0004327 <dir_find+0x1bb>
c00042ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042fa:	31 d2                	xor    edx,edx
c00042fc:	89 d8                	mov    eax,ebx
c00042fe:	e8 5c f4 ff ff       	call   c000375f <dir_next>
c0004303:	85 c0                	test   eax,eax
c0004305:	0f 84 25 ff ff ff    	je     c0004230 <dir_find+0xc4>
c000430b:	89 04 24             	mov    DWORD PTR [esp],eax
c000430e:	eb 17                	jmp    c0004327 <dir_find+0x1bb>
c0004310:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004317:	eb 0e                	jmp    c0004327 <dir_find+0x1bb>
c0004319:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000431c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004321:	0f 85 75 fe ff ff    	jne    c000419c <dir_find+0x30>
c0004327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000432a:	83 c4 1c             	add    esp,0x1c
c000432d:	5b                   	pop    ebx
c000432e:	5e                   	pop    esi
c000432f:	5f                   	pop    edi
c0004330:	5d                   	pop    ebp
c0004331:	c3                   	ret    

c0004332 <dir_register>:
c0004332:	55                   	push   ebp
c0004333:	57                   	push   edi
c0004334:	56                   	push   esi
c0004335:	be 06 00 00 00       	mov    esi,0x6
c000433a:	53                   	push   ebx
c000433b:	83 ec 6c             	sub    esp,0x6c
c000433e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004342:	0f 85 62 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004348:	8b 28                	mov    ebp,DWORD PTR [eax]
c000434a:	31 ff                	xor    edi,edi
c000434c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000434f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004354:	74 03                	je     c0004359 <dir_register+0x27>
c0004356:	47                   	inc    edi
c0004357:	eb f6                	jmp    c000434f <dir_register+0x1d>
c0004359:	89 c3                	mov    ebx,eax
c000435b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000435f:	0f 85 e1 00 00 00    	jne    c0004446 <dir_register+0x114>
c0004365:	83 c7 0e             	add    edi,0xe
c0004368:	b9 0f 00 00 00       	mov    ecx,0xf
c000436d:	89 f8                	mov    eax,edi
c000436f:	31 d2                	xor    edx,edx
c0004371:	f7 f1                	div    ecx
c0004373:	8d 50 02             	lea    edx,[eax+0x2]
c0004376:	89 c7                	mov    edi,eax
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 12 f8 ff ff       	call   c0003b91 <dir_alloc>
c000437f:	89 c6                	mov    esi,eax
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 21 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004389:	81 c7 01 00 00 08    	add    edi,0x8000001
c000438f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004392:	c1 e7 05             	shl    edi,0x5
c0004395:	29 f8                	sub    eax,edi
c0004397:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000439a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000439d:	a8 04                	test   al,0x4
c000439f:	0f 84 91 00 00 00    	je     c0004436 <dir_register+0x104>
c00043a5:	83 e0 fb             	and    eax,0xfffffffb
c00043a8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 25 ec ff ff       	call   c0002fd7 <fill_first_frag>
c00043b2:	85 c0                	test   eax,eax
c00043b4:	0f 85 ee 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043ba:	83 c9 ff             	or     ecx,0xffffffff
c00043bd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00043c0:	89 d8                	mov    eax,ebx
c00043c2:	e8 db eb ff ff       	call   c0002fa2 <fill_last_frag>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 85 d9 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043cf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043d3:	74 61                	je     c0004436 <dir_register+0x104>
c00043d5:	89 da                	mov    edx,ebx
c00043d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043db:	e8 ea f5 ff ff       	call   c00039ca <load_obj_xdir>
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 85 c0 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043e8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ec:	31 c9                	xor    ecx,ecx
c00043ee:	c1 e2 09             	shl    edx,0x9
c00043f1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043f4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043f7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043fa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004400:	83 c0 38             	add    eax,0x38
c0004403:	e8 1c d9 ff ff       	call   c0001d24 <st_qword>
c0004408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000440e:	83 c0 28             	add    eax,0x28
c0004411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004414:	e8 0b d9 ff ff       	call   c0001d24 <st_qword>
c0004419:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000441c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000441f:	83 c8 01             	or     eax,0x1
c0004422:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004429:	e8 db f7 ff ff       	call   c0003c09 <store_xdir>
c000442e:	85 c0                	test   eax,eax
c0004430:	0f 85 72 01 00 00    	jne    c00045a8 <dir_register+0x276>
c0004436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000443c:	e8 c1 fb ff ff       	call   c0004002 <create_xdir>
c0004441:	e9 64 01 00 00       	jmp    c00045aa <dir_register+0x278>
c0004446:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004449:	b9 0c 00 00 00       	mov    ecx,0xc
c000444e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004452:	89 c2                	mov    edx,eax
c0004454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004458:	e8 cd d8 ff ff       	call   c0001d2a <mem_cpy>
c000445d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004462:	74 58                	je     c00044bc <dir_register+0x18a>
c0004464:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004468:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004470:	83 ec 0c             	sub    esp,0xc
c0004473:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000447a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	e8 24 dc ff ff       	call   c00020ab <gen_numname>
c0004487:	89 d8                	mov    eax,ebx
c0004489:	e8 de fc ff ff       	call   c000416c <dir_find>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	89 c6                	mov    esi,eax
c0004493:	85 c0                	test   eax,eax
c0004495:	75 15                	jne    c00044ac <dir_register+0x17a>
c0004497:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000449b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00044a0:	75 ce                	jne    c0004470 <dir_register+0x13e>
c00044a2:	be 07 00 00 00       	mov    esi,0x7
c00044a7:	e9 fe 00 00 00       	jmp    c00045aa <dir_register+0x278>
c00044ac:	83 f8 04             	cmp    eax,0x4
c00044af:	0f 85 f5 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00044b9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00044bc:	b9 01 00 00 00       	mov    ecx,0x1
c00044c1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044c6:	74 0f                	je     c00044d7 <dir_register+0x1a5>
c00044c8:	b9 0d 00 00 00       	mov    ecx,0xd
c00044cd:	8d 47 0c             	lea    eax,[edi+0xc]
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	f7 f1                	div    ecx
c00044d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00044d7:	89 ca                	mov    edx,ecx
c00044d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 ad f6 ff ff       	call   c0003b91 <dir_alloc>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 bc 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044f2:	49                   	dec    ecx
c00044f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044f7:	74 6a                	je     c0004563 <dir_register+0x231>
c00044f9:	89 c8                	mov    eax,ecx
c00044fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044fe:	c1 e0 05             	shl    eax,0x5
c0004501:	29 c2                	sub    edx,eax
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 fd ec ff ff       	call   c0003207 <dir_sdi>
c000450a:	89 c6                	mov    esi,eax
c000450c:	85 c0                	test   eax,eax
c000450e:	0f 85 96 00 00 00    	jne    c00045aa <dir_register+0x278>
c0004514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004518:	e8 4a dc ff ff       	call   c0002167 <sum_sfn>
c000451d:	0f b6 f8             	movzx  edi,al
c0004520:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004523:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004526:	89 e8                	mov    eax,ebp
c0004528:	e8 5c df ff ff       	call   c0002489 <move_window>
c000452d:	89 c6                	mov    esi,eax
c000452f:	85 c0                	test   eax,eax
c0004531:	75 77                	jne    c00045aa <dir_register+0x278>
c0004533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004538:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453b:	83 ec 0c             	sub    esp,0xc
c000453e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004541:	57                   	push   edi
c0004542:	e8 e0 da ff ff       	call   c0002027 <put_lfn>
c0004547:	31 d2                	xor    edx,edx
c0004549:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454d:	89 d8                	mov    eax,ebx
c000454f:	e8 0b f2 ff ff       	call   c000375f <dir_next>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	89 c6                	mov    esi,eax
c0004559:	85 c0                	test   eax,eax
c000455b:	75 4d                	jne    c00045aa <dir_register+0x278>
c000455d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004561:	75 bd                	jne    c0004520 <dir_register+0x1ee>
c0004563:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004566:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004569:	89 e8                	mov    eax,ebp
c000456b:	e8 19 df ff ff       	call   c0002489 <move_window>
c0004570:	89 c6                	mov    esi,eax
c0004572:	85 c0                	test   eax,eax
c0004574:	75 34                	jne    c00045aa <dir_register+0x278>
c0004576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004579:	b9 20 00 00 00       	mov    ecx,0x20
c000457e:	31 d2                	xor    edx,edx
c0004580:	e8 ba d7 ff ff       	call   c0001d3f <mem_set>
c0004585:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000458c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004591:	e8 94 d7 ff ff       	call   c0001d2a <mem_cpy>
c0004596:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004599:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000459c:	83 e0 18             	and    eax,0x18
c000459f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00045a2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00045a6:	eb 02                	jmp    c00045aa <dir_register+0x278>
c00045a8:	89 c6                	mov    esi,eax
c00045aa:	83 c4 6c             	add    esp,0x6c
c00045ad:	89 f0                	mov    eax,esi
c00045af:	5b                   	pop    ebx
c00045b0:	5e                   	pop    esi
c00045b1:	5f                   	pop    edi
c00045b2:	5d                   	pop    ebp
c00045b3:	c3                   	ret    

c00045b4 <sync_fs>:
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	53                   	push   ebx
c00045b7:	89 c3                	mov    ebx,eax
c00045b9:	e8 37 de ff ff       	call   c00023f5 <sync_window>
c00045be:	85 c0                	test   eax,eax
c00045c0:	0f 85 b1 00 00 00    	jne    c0004677 <sync_fs+0xc3>
c00045c6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045c9:	0f 85 8e 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045cf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045d3:	0f 85 84 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045d9:	b9 00 02 00 00       	mov    ecx,0x200
c00045de:	8d 73 54             	lea    esi,[ebx+0x54]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	89 f0                	mov    eax,esi
c00045e5:	e8 55 d7 ff ff       	call   c0001d3f <mem_set>
c00045ea:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045f0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045f5:	e8 23 d7 ff ff       	call   c0001d1d <st_word>
c00045fa:	ba 52 52 61 41       	mov    edx,0x41615252
c00045ff:	89 f0                	mov    eax,esi
c0004601:	e8 1b d7 ff ff       	call   c0001d21 <st_dword>
c0004606:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000460c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004611:	e8 0b d7 ff ff       	call   c0001d21 <st_dword>
c0004616:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004619:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000461f:	e8 fd d6 ff ff       	call   c0001d21 <st_dword>
c0004624:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004627:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000462d:	e8 ef d6 ff ff       	call   c0001d21 <st_dword>
c0004632:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004635:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004638:	83 c0 01             	add    eax,0x1
c000463b:	83 d2 00             	adc    edx,0x0
c000463e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004641:	83 ec 0c             	sub    esp,0xc
c0004644:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	50                   	push   eax
c000464b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000464f:	56                   	push   esi
c0004650:	50                   	push   eax
c0004651:	e8 20 d6 ff ff       	call   c0001c76 <disk_write>
c0004656:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000465a:	83 c4 20             	add    esp,0x20
c000465d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004661:	51                   	push   ecx
c0004662:	6a 00                	push   0x0
c0004664:	6a 00                	push   0x0
c0004666:	50                   	push   eax
c0004667:	e8 20 d6 ff ff       	call   c0001c8c <disk_ioctl>
c000466c:	83 c4 10             	add    esp,0x10
c000466f:	85 c0                	test   eax,eax
c0004671:	0f 95 c0             	setne  al
c0004674:	0f b6 c0             	movzx  eax,al
c0004677:	5a                   	pop    edx
c0004678:	5b                   	pop    ebx
c0004679:	5e                   	pop    esi
c000467a:	c3                   	ret    

c000467b <create_partition>:
c000467b:	55                   	push   ebp
c000467c:	0f b6 c0             	movzx  eax,al
c000467f:	57                   	push   edi
c0004680:	56                   	push   esi
c0004681:	53                   	push   ebx
c0004682:	83 ec 60             	sub    esp,0x60
c0004685:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004689:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000468d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004691:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004695:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004699:	50                   	push   eax
c000469a:	6a 01                	push   0x1
c000469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00046a0:	e8 e7 d5 ff ff       	call   c0001c8c <disk_ioctl>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	74 0a                	je     c00046b6 <create_partition+0x3b>
c00046ac:	b8 01 00 00 00       	mov    eax,0x1
c00046b1:	e9 67 05 00 00       	jmp    c0004c1d <create_partition+0x5a2>
c00046b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ba:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00046c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046cb:	0f 86 ed 03 00 00    	jbe    c0004abe <create_partition+0x443>
c00046d1:	83 c0 df             	add    eax,0xffffffdf
c00046d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046dc:	83 d2 ff             	adc    edx,0xffffffff
c00046df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ef:	83 c0 bd             	add    eax,0xffffffbd
c00046f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046f9:	83 d2 ff             	adc    edx,0xffffffff
c00046fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004704:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470c:	be 22 00 00 00       	mov    esi,0x22
c0004711:	31 ff                	xor    edi,edi
c0004713:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000471b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004723:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000472b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000472f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004735:	75 0e                	jne    c0004745 <create_partition+0xca>
c0004737:	b9 00 02 00 00       	mov    ecx,0x200
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 d8                	mov    eax,ebx
c0004740:	e8 fa d5 ff ff       	call   c0001d3f <mem_set>
c0004745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004751:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004754:	0f 84 23 01 00 00    	je     c000487d <create_partition+0x202>
c000475a:	89 f0                	mov    eax,esi
c000475c:	89 fa                	mov    edx,edi
c000475e:	05 ff 07 00 00       	add    eax,0x7ff
c0004763:	83 d2 00             	adc    edx,0x0
c0004766:	89 c1                	mov    ecx,eax
c0004768:	89 d7                	mov    edi,edx
c000476a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004770:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004774:	89 ce                	mov    esi,ecx
c0004776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000477a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000477e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004782:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004789:	89 04 24             	mov    DWORD PTR [esp],eax
c000478c:	b8 64 00 00 00       	mov    eax,0x64
c0004791:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004794:	b8 00 00 00 00       	mov    eax,0x0
c0004799:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000479d:	72 41                	jb     c00047e0 <create_partition+0x165>
c000479f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00047a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a7:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00047ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00047b0:	01 c1                	add    ecx,eax
c00047b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00047b6:	f7 24 24             	mul    DWORD PTR [esp]
c00047b9:	6a 00                	push   0x0
c00047bb:	01 ca                	add    edx,ecx
c00047bd:	6a 64                	push   0x64
c00047bf:	52                   	push   edx
c00047c0:	50                   	push   eax
c00047c1:	e8 f6 9e 01 00       	call   c001e6bc <__udivdi3>
c00047c6:	83 c4 10             	add    esp,0x10
c00047c9:	05 ff 07 00 00       	add    eax,0x7ff
c00047ce:	83 d2 00             	adc    edx,0x0
c00047d1:	89 c1                	mov    ecx,eax
c00047d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047d7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047dd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047e7:	01 f0                	add    eax,esi
c00047e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ed:	11 fa                	adc    edx,edi
c00047ef:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047f3:	19 d1                	sbb    ecx,edx
c00047f5:	73 2e                	jae    c0004825 <create_partition+0x1aa>
c00047f7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004804:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004810:	73 6b                	jae    c000487d <create_partition+0x202>
c0004812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000481a:	29 f0                	sub    eax,esi
c000481c:	19 fa                	sbb    edx,edi
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004829:	0b 04 24             	or     eax,DWORD PTR [esp]
c000482c:	74 4f                	je     c000487d <create_partition+0x202>
c000482e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004831:	b9 10 00 00 00       	mov    ecx,0x10
c0004836:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000483b:	e8 ea d4 ff ff       	call   c0001d2a <mem_cpy>
c0004840:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004844:	b9 10 00 00 00       	mov    ecx,0x10
c0004849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000484d:	e8 2c db ff ff       	call   c000237e <make_rand>
c0004852:	89 f2                	mov    edx,esi
c0004854:	89 f9                	mov    ecx,edi
c0004856:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000485a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000485e:	e8 c1 d4 ff ff       	call   c0001d24 <st_qword>
c0004863:	03 34 24             	add    esi,DWORD PTR [esp]
c0004866:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000486a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000486e:	89 f2                	mov    edx,esi
c0004870:	89 f9                	mov    ecx,edi
c0004872:	83 c2 ff             	add    edx,0xffffffff
c0004875:	83 d1 ff             	adc    ecx,0xffffffff
c0004878:	e8 a7 d4 ff ff       	call   c0001d24 <st_qword>
c000487d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004881:	83 e8 80             	sub    eax,0xffffff80
c0004884:	89 c5                	mov    ebp,eax
c0004886:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000488a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004890:	75 6b                	jne    c00048fd <create_partition+0x282>
c0004892:	45                   	inc    ebp
c0004893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004897:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000489c:	e8 39 da ff ff       	call   c00022da <crc32>
c00048a1:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00048a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048ab:	75 e5                	jne    c0004892 <create_partition+0x217>
c00048ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	83 ec 0c             	sub    esp,0xc
c00048b6:	c1 ed 09             	shr    ebp,0x9
c00048b9:	6a 01                	push   0x1
c00048bb:	8d 45 02             	lea    eax,[ebp+0x2]
c00048be:	52                   	push   edx
c00048bf:	50                   	push   eax
c00048c0:	53                   	push   ebx
c00048c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c5:	e8 ac d3 ff ff       	call   c0001c76 <disk_write>
c00048ca:	83 c4 20             	add    esp,0x20
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 85 d7 fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	31 d2                	xor    edx,edx
c00048da:	6a 01                	push   0x1
c00048dc:	89 e8                	mov    eax,ebp
c00048de:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048e2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048e6:	52                   	push   edx
c00048e7:	50                   	push   eax
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 84 d3 ff ff       	call   c0001c76 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 85 af fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004901:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004905:	3d 00 40 00 00       	cmp    eax,0x4000
c000490a:	74 0d                	je     c0004919 <create_partition+0x29e>
c000490c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004910:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004914:	e9 12 fe ff ff       	jmp    c000472b <create_partition+0xb0>
c0004919:	31 d2                	xor    edx,edx
c000491b:	b9 00 02 00 00       	mov    ecx,0x200
c0004920:	89 d8                	mov    eax,ebx
c0004922:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004925:	e8 15 d4 ff ff       	call   c0001d3f <mem_set>
c000492a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000492d:	b9 10 00 00 00       	mov    ecx,0x10
c0004932:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0004937:	89 d8                	mov    eax,ebx
c0004939:	e8 ec d3 ff ff       	call   c0001d2a <mem_cpy>
c000493e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004942:	8d 43 58             	lea    eax,[ebx+0x58]
c0004945:	f7 d2                	not    edx
c0004947:	e8 d5 d3 ff ff       	call   c0001d21 <st_dword>
c000494c:	8d 43 18             	lea    eax,[ebx+0x18]
c000494f:	31 c9                	xor    ecx,ecx
c0004951:	89 04 24             	mov    DWORD PTR [esp],eax
c0004954:	ba 01 00 00 00       	mov    edx,0x1
c0004959:	e8 c6 d3 ff ff       	call   c0001d24 <st_qword>
c000495e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004962:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004966:	83 c2 ff             	add    edx,0xffffffff
c0004969:	89 e8                	mov    eax,ebp
c000496b:	83 d1 ff             	adc    ecx,0xffffffff
c000496e:	e8 b1 d3 ff ff       	call   c0001d24 <st_qword>
c0004973:	31 c9                	xor    ecx,ecx
c0004975:	8d 43 28             	lea    eax,[ebx+0x28]
c0004978:	ba 22 00 00 00       	mov    edx,0x22
c000497d:	e8 a2 d3 ff ff       	call   c0001d24 <st_qword>
c0004982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000498a:	83 c2 de             	add    edx,0xffffffde
c000498d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004990:	83 d1 ff             	adc    ecx,0xffffffff
c0004993:	31 f6                	xor    esi,esi
c0004995:	e8 8a d3 ff ff       	call   c0001d24 <st_qword>
c000499a:	8d 43 54             	lea    eax,[ebx+0x54]
c000499d:	ba 80 00 00 00       	mov    edx,0x80
c00049a2:	e8 7a d3 ff ff       	call   c0001d21 <st_dword>
c00049a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00049aa:	ba 80 00 00 00       	mov    edx,0x80
c00049af:	e8 6d d3 ff ff       	call   c0001d21 <st_dword>
c00049b4:	ba 02 00 00 00       	mov    edx,0x2
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	e8 61 d3 ff ff       	call   c0001d21 <st_dword>
c00049c0:	8d 53 38             	lea    edx,[ebx+0x38]
c00049c3:	b9 10 00 00 00       	mov    ecx,0x10
c00049c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049cc:	e8 ad d9 ff ff       	call   c000237e <make_rand>
c00049d1:	83 c8 ff             	or     eax,0xffffffff
c00049d4:	46                   	inc    esi
c00049d5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049da:	e8 fb d8 ff ff       	call   c00022da <crc32>
c00049df:	83 fe 5c             	cmp    esi,0x5c
c00049e2:	75 f0                	jne    c00049d4 <create_partition+0x359>
c00049e4:	f7 d0                	not    eax
c00049e6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049e9:	89 c2                	mov    edx,eax
c00049eb:	89 f0                	mov    eax,esi
c00049ed:	e8 2f d3 ff ff       	call   c0001d21 <st_dword>
c00049f2:	83 ec 0c             	sub    esp,0xc
c00049f5:	6a 01                	push   0x1
c00049f7:	6a 00                	push   0x0
c00049f9:	6a 01                	push   0x1
c00049fb:	53                   	push   ebx
c00049fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a00:	e8 71 d2 ff ff       	call   c0001c76 <disk_write>
c0004a05:	83 c4 20             	add    esp,0x20
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 9c fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004a14:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004a18:	83 c2 ff             	add    edx,0xffffffff
c0004a1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a1e:	83 d1 ff             	adc    ecx,0xffffffff
c0004a21:	e8 fe d2 ff ff       	call   c0001d24 <st_qword>
c0004a26:	ba 01 00 00 00       	mov    edx,0x1
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	e8 f0 d2 ff ff       	call   c0001d24 <st_qword>
c0004a34:	89 f8                	mov    eax,edi
c0004a36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	e8 df d2 ff ff       	call   c0001d24 <st_qword>
c0004a45:	89 f0                	mov    eax,esi
c0004a47:	31 d2                	xor    edx,edx
c0004a49:	e8 d3 d2 ff ff       	call   c0001d21 <st_dword>
c0004a4e:	83 c8 ff             	or     eax,0xffffffff
c0004a51:	47                   	inc    edi
c0004a52:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a57:	e8 7e d8 ff ff       	call   c00022da <crc32>
c0004a5c:	83 ff 5c             	cmp    edi,0x5c
c0004a5f:	75 f0                	jne    c0004a51 <create_partition+0x3d6>
c0004a61:	f7 d0                	not    eax
c0004a63:	89 c2                	mov    edx,eax
c0004a65:	89 f0                	mov    eax,esi
c0004a67:	e8 b5 d2 ff ff       	call   c0001d21 <st_dword>
c0004a6c:	83 ec 0c             	sub    esp,0xc
c0004a6f:	6a 01                	push   0x1
c0004a71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a75:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a79:	83 c0 ff             	add    eax,0xffffffff
c0004a7c:	83 d2 ff             	adc    edx,0xffffffff
c0004a7f:	52                   	push   edx
c0004a80:	50                   	push   eax
c0004a81:	53                   	push   ebx
c0004a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a86:	e8 eb d1 ff ff       	call   c0001c76 <disk_write>
c0004a8b:	83 c4 20             	add    esp,0x20
c0004a8e:	85 c0                	test   eax,eax
c0004a90:	0f 85 16 fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a96:	31 d2                	xor    edx,edx
c0004a98:	89 d8                	mov    eax,ebx
c0004a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a9f:	e8 9b d2 ff ff       	call   c0001d3f <mem_set>
c0004aa4:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004aaa:	b9 10 00 00 00       	mov    ecx,0x10
c0004aaf:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c0004ab4:	e8 71 d2 ff ff       	call   c0001d2a <mem_cpy>
c0004ab9:	e9 21 01 00 00       	jmp    c0004bdf <create_partition+0x564>
c0004abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac2:	b9 05 00 00 00       	mov    ecx,0x5
c0004ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aca:	bf 08 00 00 00       	mov    edi,0x8
c0004acf:	89 f8                	mov    eax,edi
c0004ad1:	31 d2                	xor    edx,edx
c0004ad3:	0f b6 f0             	movzx  esi,al
c0004ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ad9:	f7 f6                	div    esi
c0004adb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ae0:	76 0a                	jbe    c0004aec <create_partition+0x471>
c0004ae2:	d1 e7                	shl    edi,1
c0004ae4:	49                   	dec    ecx
c0004ae5:	75 e8                	jne    c0004acf <create_partition+0x454>
c0004ae7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aec:	b9 00 02 00 00       	mov    ecx,0x200
c0004af1:	31 d2                	xor    edx,edx
c0004af3:	89 d8                	mov    eax,ebx
c0004af5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004afb:	e8 3f d2 ff ff       	call   c0001d3f <mem_set>
c0004b00:	b9 64 00 00 00       	mov    ecx,0x64
c0004b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b08:	31 d2                	xor    edx,edx
c0004b0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004b12:	f7 f1                	div    ecx
c0004b14:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004b19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004b1d:	89 f8                	mov    eax,edi
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b26:	e9 80 00 00 00       	jmp    c0004bab <create_partition+0x530>
c0004b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b2e:	29 cf                	sub    edi,ecx
c0004b30:	89 ca                	mov    edx,ecx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b39:	e8 e3 d1 ff ff       	call   c0001d21 <st_dword>
c0004b3e:	8d 46 04             	lea    eax,[esi+0x4]
c0004b41:	89 fa                	mov    edx,edi
c0004b43:	83 c6 10             	add    esi,0x10
c0004b46:	e8 d6 d1 ff ff       	call   c0001d21 <st_dword>
c0004b4b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b4f:	31 d2                	xor    edx,edx
c0004b51:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b54:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b58:	89 c8                	mov    eax,ecx
c0004b5a:	01 f9                	add    ecx,edi
c0004b5c:	f7 f5                	div    ebp
c0004b5e:	89 d5                	mov    ebp,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	45                   	inc    ebp
c0004b63:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b67:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b6d:	89 c2                	mov    edx,eax
c0004b6f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b72:	c1 ea 02             	shr    edx,0x2
c0004b75:	83 e2 c0             	and    edx,0xffffffc0
c0004b78:	09 ea                	or     edx,ebp
c0004b7a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b7f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	f7 f5                	div    ebp
c0004b86:	89 d7                	mov    edi,edx
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	47                   	inc    edi
c0004b8b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b8f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b92:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b95:	89 c5                	mov    ebp,eax
c0004b97:	c1 ed 02             	shr    ebp,0x2
c0004b9a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b9d:	09 ef                	or     edi,ebp
c0004b9f:	89 fa                	mov    edx,edi
c0004ba1:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004ba4:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004ba9:	74 34                	je     c0004bdf <create_partition+0x564>
c0004bab:	85 c9                	test   ecx,ecx
c0004bad:	74 30                	je     c0004bdf <create_partition+0x564>
c0004baf:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004bb2:	76 2b                	jbe    c0004bdf <create_partition+0x564>
c0004bb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004bbc:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004bbf:	83 ff 64             	cmp    edi,0x64
c0004bc2:	76 4b                	jbe    c0004c0f <create_partition+0x594>
c0004bc4:	89 f8                	mov    eax,edi
c0004bc6:	01 c8                	add    eax,ecx
c0004bc8:	0f 82 5d ff ff ff    	jb     c0004b2b <create_partition+0x4b0>
c0004bce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bd1:	0f 87 54 ff ff ff    	ja     c0004b2b <create_partition+0x4b0>
c0004bd7:	85 ff                	test   edi,edi
c0004bd9:	0f 85 51 ff ff ff    	jne    c0004b30 <create_partition+0x4b5>
c0004bdf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004be5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bea:	e8 2e d1 ff ff       	call   c0001d1d <st_word>
c0004bef:	83 ec 0c             	sub    esp,0xc
c0004bf2:	6a 01                	push   0x1
c0004bf4:	6a 00                	push   0x0
c0004bf6:	6a 00                	push   0x0
c0004bf8:	53                   	push   ebx
c0004bf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bfd:	e8 74 d0 ff ff       	call   c0001c76 <disk_write>
c0004c02:	83 c4 20             	add    esp,0x20
c0004c05:	85 c0                	test   eax,eax
c0004c07:	0f 95 c0             	setne  al
c0004c0a:	0f b6 c0             	movzx  eax,al
c0004c0d:	eb 0e                	jmp    c0004c1d <create_partition+0x5a2>
c0004c0f:	74 07                	je     c0004c18 <create_partition+0x59d>
c0004c11:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004c16:	eb ac                	jmp    c0004bc4 <create_partition+0x549>
c0004c18:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c1b:	eb a7                	jmp    c0004bc4 <create_partition+0x549>
c0004c1d:	83 c4 5c             	add    esp,0x5c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	c3                   	ret    

c0004c25 <get_fileinfo>:
c0004c25:	55                   	push   ebp
c0004c26:	57                   	push   edi
c0004c27:	56                   	push   esi
c0004c28:	53                   	push   ebx
c0004c29:	83 ec 1c             	sub    esp,0x1c
c0004c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c2e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c36:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c39:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c3c:	0f 84 dc 01 00 00    	je     c0004e1e <get_fileinfo+0x1f9>
c0004c42:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c45:	75 0f                	jne    c0004c56 <get_fileinfo+0x31>
c0004c47:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c4a:	83 c4 1c             	add    esp,0x1c
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	5f                   	pop    edi
c0004c50:	5d                   	pop    ebp
c0004c51:	e9 58 d5 ff ff       	jmp    c00021ae <get_xfileinfo>
c0004c56:	89 d3                	mov    ebx,edx
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c5e:	74 6a                	je     c0004cca <get_fileinfo+0xa5>
c0004c60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c68:	31 ed                	xor    ebp,ebp
c0004c6a:	31 ff                	xor    edi,edi
c0004c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c77:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c7b:	66 85 d2             	test   dx,dx
c0004c7e:	74 3e                	je     c0004cbe <get_fileinfo+0x99>
c0004c80:	66 85 ed             	test   bp,bp
c0004c83:	75 0c                	jne    c0004c91 <get_fileinfo+0x6c>
c0004c85:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c8b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c8f:	76 22                	jbe    c0004cb3 <get_fileinfo+0x8e>
c0004c91:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c96:	89 e8                	mov    eax,ebp
c0004c98:	29 f9                	sub    ecx,edi
c0004c9a:	c1 e0 10             	shl    eax,0x10
c0004c9d:	09 d0                	or     eax,edx
c0004c9f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ca3:	e8 a3 d1 ff ff       	call   c0001e4b <put_utf>
c0004ca8:	84 c0                	test   al,al
c0004caa:	74 10                	je     c0004cbc <get_fileinfo+0x97>
c0004cac:	0f b6 c0             	movzx  eax,al
c0004caf:	31 d2                	xor    edx,edx
c0004cb1:	01 c7                	add    edi,eax
c0004cb3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004cb8:	89 d5                	mov    ebp,edx
c0004cba:	eb b0                	jmp    c0004c6c <get_fileinfo+0x47>
c0004cbc:	31 ff                	xor    edi,edi
c0004cbe:	66 85 ed             	test   bp,bp
c0004cc1:	74 02                	je     c0004cc5 <get_fileinfo+0xa0>
c0004cc3:	31 ff                	xor    edi,edi
c0004cc5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004cca:	31 ff                	xor    edi,edi
c0004ccc:	31 c9                	xor    ecx,ecx
c0004cce:	83 f9 0a             	cmp    ecx,0xa
c0004cd1:	0f 87 ad 00 00 00    	ja     c0004d84 <get_fileinfo+0x15f>
c0004cd7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cda:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cdd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ce1:	66 83 fa 20          	cmp    dx,0x20
c0004ce5:	0f 84 92 00 00 00    	je     c0004d7d <get_fileinfo+0x158>
c0004ceb:	66 83 fa 05          	cmp    dx,0x5
c0004cef:	75 05                	jne    c0004cf6 <get_fileinfo+0xd1>
c0004cf1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cf6:	83 ff 0b             	cmp    edi,0xb
c0004cf9:	77 0b                	ja     c0004d06 <get_fileinfo+0xe1>
c0004cfb:	83 fd 09             	cmp    ebp,0x9
c0004cfe:	75 06                	jne    c0004d06 <get_fileinfo+0xe1>
c0004d00:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004d05:	47                   	inc    edi
c0004d06:	0f b7 c2             	movzx  eax,dx
c0004d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0d:	e8 6d d0 ff ff       	call   c0001d7f <dbc_1st>
c0004d12:	85 c0                	test   eax,eax
c0004d14:	74 2f                	je     c0004d45 <get_fileinfo+0x120>
c0004d16:	83 fd 08             	cmp    ebp,0x8
c0004d19:	74 2a                	je     c0004d45 <get_fileinfo+0x120>
c0004d1b:	83 fd 0b             	cmp    ebp,0xb
c0004d1e:	74 25                	je     c0004d45 <get_fileinfo+0x120>
c0004d20:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d23:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d27:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d2b:	e8 52 d0 ff ff       	call   c0001d82 <dbc_2nd>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 11                	je     c0004d45 <get_fileinfo+0x120>
c0004d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d3d:	c1 e2 08             	shl    edx,0x8
c0004d40:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d43:	09 c2                	or     edx,eax
c0004d45:	0f b7 d2             	movzx  edx,dx
c0004d48:	50                   	push   eax
c0004d49:	50                   	push   eax
c0004d4a:	68 b5 01 00 00       	push   0x1b5
c0004d4f:	52                   	push   edx
c0004d50:	e8 46 38 00 00       	call   c000859b <ff_oem2uni>
c0004d55:	83 c4 10             	add    esp,0x10
c0004d58:	66 85 c0             	test   ax,ax
c0004d5b:	75 04                	jne    c0004d61 <get_fileinfo+0x13c>
c0004d5d:	31 ff                	xor    edi,edi
c0004d5f:	eb 23                	jmp    c0004d84 <get_fileinfo+0x15f>
c0004d61:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d66:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d6a:	29 f9                	sub    ecx,edi
c0004d6c:	0f b7 c0             	movzx  eax,ax
c0004d6f:	e8 d7 d0 ff ff       	call   c0001e4b <put_utf>
c0004d74:	84 c0                	test   al,al
c0004d76:	74 e5                	je     c0004d5d <get_fileinfo+0x138>
c0004d78:	0f b6 c0             	movzx  eax,al
c0004d7b:	01 c7                	add    edi,eax
c0004d7d:	89 e9                	mov    ecx,ebp
c0004d7f:	e9 4a ff ff ff       	jmp    c0004cce <get_fileinfo+0xa9>
c0004d84:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d89:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d8d:	75 54                	jne    c0004de3 <get_fileinfo+0x1be>
c0004d8f:	85 ff                	test   edi,edi
c0004d91:	75 0b                	jne    c0004d9e <get_fileinfo+0x179>
c0004d93:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d97:	ba 01 00 00 00       	mov    edx,0x1
c0004d9c:	eb 33                	jmp    c0004dd1 <get_fileinfo+0x1ac>
c0004d9e:	b1 08                	mov    cl,0x8
c0004da0:	31 d2                	xor    edx,edx
c0004da2:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004da8:	84 c0                	test   al,al
c0004daa:	74 25                	je     c0004dd1 <get_fileinfo+0x1ac>
c0004dac:	66 83 f8 2e          	cmp    ax,0x2e
c0004db0:	74 16                	je     c0004dc8 <get_fileinfo+0x1a3>
c0004db2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004db5:	66 83 ff 19          	cmp    di,0x19
c0004db9:	77 0f                	ja     c0004dca <get_fileinfo+0x1a5>
c0004dbb:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004dbe:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004dc1:	74 07                	je     c0004dca <get_fileinfo+0x1a5>
c0004dc3:	83 c0 20             	add    eax,0x20
c0004dc6:	eb 02                	jmp    c0004dca <get_fileinfo+0x1a5>
c0004dc8:	b1 10                	mov    cl,0x10
c0004dca:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004dce:	42                   	inc    edx
c0004dcf:	eb d1                	jmp    c0004da2 <get_fileinfo+0x17d>
c0004dd1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004dd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ddd:	75 04                	jne    c0004de3 <get_fileinfo+0x1be>
c0004ddf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004de3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004de9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dec:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004def:	83 c0 1c             	add    eax,0x1c
c0004df2:	e8 c1 ce ff ff       	call   c0001cb8 <ld_dword>
c0004df7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dfe:	89 03                	mov    DWORD PTR [ebx],eax
c0004e00:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e03:	83 c0 16             	add    eax,0x16
c0004e06:	e8 a0 ce ff ff       	call   c0001cab <ld_word>
c0004e0b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004e0f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e12:	83 c0 18             	add    eax,0x18
c0004e15:	e8 91 ce ff ff       	call   c0001cab <ld_word>
c0004e1a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004e1e:	83 c4 1c             	add    esp,0x1c
c0004e21:	5b                   	pop    ebx
c0004e22:	5e                   	pop    esi
c0004e23:	5f                   	pop    edi
c0004e24:	5d                   	pop    ebp
c0004e25:	c3                   	ret    

c0004e26 <ld_clust.isra.0>:
c0004e26:	56                   	push   esi
c0004e27:	89 c6                	mov    esi,eax
c0004e29:	53                   	push   ebx
c0004e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	e8 77 ce ff ff       	call   c0001cab <ld_word>
c0004e34:	0f b7 c8             	movzx  ecx,ax
c0004e37:	89 f0                	mov    eax,esi
c0004e39:	3c 03                	cmp    al,0x3
c0004e3b:	75 0d                	jne    c0004e4a <ld_clust.isra.0+0x24>
c0004e3d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e40:	e8 66 ce ff ff       	call   c0001cab <ld_word>
c0004e45:	c1 e0 10             	shl    eax,0x10
c0004e48:	09 c1                	or     ecx,eax
c0004e4a:	89 c8                	mov    eax,ecx
c0004e4c:	5b                   	pop    ebx
c0004e4d:	5e                   	pop    esi
c0004e4e:	c3                   	ret    

c0004e4f <st_clust.isra.1>:
c0004e4f:	56                   	push   esi
c0004e50:	89 c6                	mov    esi,eax
c0004e52:	53                   	push   ebx
c0004e53:	89 d3                	mov    ebx,edx
c0004e55:	0f b7 d1             	movzx  edx,cx
c0004e58:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e5b:	e8 bd ce ff ff       	call   c0001d1d <st_word>
c0004e60:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e63:	75 0f                	jne    c0004e74 <st_clust.isra.1+0x25>
c0004e65:	c1 e9 10             	shr    ecx,0x10
c0004e68:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e6b:	89 ca                	mov    edx,ecx
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5e                   	pop    esi
c0004e6f:	e9 a9 ce ff ff       	jmp    c0001d1d <st_word>
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <init_alloc_info.isra.2>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c6                	mov    esi,eax
c0004e7b:	89 d3                	mov    ebx,edx
c0004e7d:	51                   	push   ecx
c0004e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e80:	83 c0 34             	add    eax,0x34
c0004e83:	e8 30 ce ff ff       	call   c0001cb8 <ld_dword>
c0004e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e8d:	83 c0 38             	add    eax,0x38
c0004e90:	e8 3b ce ff ff       	call   c0001cd0 <ld_qword>
c0004e95:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e98:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e9d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004ea0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea7:	83 e0 02             	and    eax,0x2
c0004eaa:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004ead:	5b                   	pop    ebx
c0004eae:	5b                   	pop    ebx
c0004eaf:	5e                   	pop    esi
c0004eb0:	c3                   	ret    

c0004eb1 <follow_path>:
c0004eb1:	56                   	push   esi
c0004eb2:	53                   	push   ebx
c0004eb3:	89 c3                	mov    ebx,eax
c0004eb5:	83 ec 14             	sub    esp,0x14
c0004eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ebc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ec2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ec4:	80 fa 5c             	cmp    dl,0x5c
c0004ec7:	75 07                	jne    c0004ed0 <follow_path+0x1f>
c0004ec9:	40                   	inc    eax
c0004eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ece:	eb ee                	jmp    c0004ebe <follow_path+0xd>
c0004ed0:	80 fa 2f             	cmp    dl,0x2f
c0004ed3:	74 f4                	je     c0004ec9 <follow_path+0x18>
c0004ed5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004edc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ee3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ee6:	77 52                	ja     c0004f3a <follow_path+0x89>
c0004ee8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eec:	31 d2                	xor    edx,edx
c0004eee:	89 d8                	mov    eax,ebx
c0004ef0:	e8 12 e3 ff ff       	call   c0003207 <dir_sdi>
c0004ef5:	eb 7c                	jmp    c0004f73 <follow_path+0xc2>
c0004ef7:	89 d8                	mov    eax,ebx
c0004ef9:	e8 6e f2 ff ff       	call   c000416c <dir_find>
c0004efe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004f01:	85 c0                	test   eax,eax
c0004f03:	75 46                	jne    c0004f4b <follow_path+0x9a>
c0004f05:	80 e2 04             	and    dl,0x4
c0004f08:	75 69                	jne    c0004f73 <follow_path+0xc2>
c0004f0a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004f0e:	74 5e                	je     c0004f6e <follow_path+0xbd>
c0004f10:	8a 06                	mov    al,BYTE PTR [esi]
c0004f12:	3c 04                	cmp    al,0x4
c0004f14:	75 41                	jne    c0004f57 <follow_path+0xa6>
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004f1d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004f23:	30 c0                	xor    al,al
c0004f25:	09 d0                	or     eax,edx
c0004f27:	89 da                	mov    edx,ebx
c0004f29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f32:	8d 46 10             	lea    eax,[esi+0x10]
c0004f35:	e8 3d ff ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0004f3a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f3e:	89 d8                	mov    eax,ebx
c0004f40:	e8 a9 ed ff ff       	call   c0003cee <create_name>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 ae                	je     c0004ef7 <follow_path+0x46>
c0004f49:	eb 28                	jmp    c0004f73 <follow_path+0xc2>
c0004f4b:	83 f8 04             	cmp    eax,0x4
c0004f4e:	75 23                	jne    c0004f73 <follow_path+0xc2>
c0004f50:	80 e2 04             	and    dl,0x4
c0004f53:	74 19                	je     c0004f6e <follow_path+0xbd>
c0004f55:	eb 1c                	jmp    c0004f73 <follow_path+0xc2>
c0004f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f5a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f60:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f64:	e8 bd fe ff ff       	call   c0004e26 <ld_clust.isra.0>
c0004f69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6c:	eb cc                	jmp    c0004f3a <follow_path+0x89>
c0004f6e:	b8 05 00 00 00       	mov    eax,0x5
c0004f73:	83 c4 14             	add    esp,0x14
c0004f76:	5b                   	pop    ebx
c0004f77:	5e                   	pop    esi
c0004f78:	c3                   	ret    

c0004f79 <f_mount>:
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 18             	sub    esp,0x18
c0004f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f8d:	e8 fb d2 ff ff       	call   c000228d <get_ldnumber>
c0004f92:	89 c2                	mov    edx,eax
c0004f94:	b8 0b 00 00 00       	mov    eax,0xb
c0004f99:	85 d2                	test   edx,edx
c0004f9b:	78 39                	js     c0004fd6 <f_mount+0x5d>
c0004f9d:	8b 04 95 60 b9 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc46a0]
c0004fa4:	85 c0                	test   eax,eax
c0004fa6:	74 03                	je     c0004fab <f_mount+0x32>
c0004fa8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	74 03                	je     c0004fb6 <f_mount+0x3d>
c0004fb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fba:	89 04 95 60 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc46a0],eax
c0004fc1:	31 c0                	xor    eax,eax
c0004fc3:	84 db                	test   bl,bl
c0004fc5:	74 0f                	je     c0004fd6 <f_mount+0x5d>
c0004fc7:	31 c9                	xor    ecx,ecx
c0004fc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fd1:	e8 65 d7 ff ff       	call   c000273b <mount_volume>
c0004fd6:	83 c4 18             	add    esp,0x18
c0004fd9:	5b                   	pop    ebx
c0004fda:	c3                   	ret    

c0004fdb <f_open>:
c0004fdb:	55                   	push   ebp
c0004fdc:	bd 09 00 00 00       	mov    ebp,0x9
c0004fe1:	57                   	push   edi
c0004fe2:	56                   	push   esi
c0004fe3:	53                   	push   ebx
c0004fe4:	83 ec 7c             	sub    esp,0x7c
c0004fe7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fee:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ff5:	85 db                	test   ebx,ebx
c0004ff7:	0f 84 10 04 00 00    	je     c000540d <f_open+0x432>
c0004ffd:	89 fe                	mov    esi,edi
c0004fff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0005003:	83 e6 3f             	and    esi,0x3f
c0005006:	89 f0                	mov    eax,esi
c0005008:	0f b6 c8             	movzx  ecx,al
c000500b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0005012:	e8 24 d7 ff ff       	call   c000273b <mount_volume>
c0005017:	89 c5                	mov    ebp,eax
c0005019:	85 c0                	test   eax,eax
c000501b:	0f 85 e6 03 00 00    	jne    c0005407 <f_open+0x42c>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	bd 11 00 00 00       	mov    ebp,0x11
c000502a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000502e:	83 ec 0c             	sub    esp,0xc
c0005031:	68 60 04 00 00       	push   0x460
c0005036:	e8 a3 34 00 00       	call   c00084de <ff_memalloc>
c000503b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000503f:	83 c4 10             	add    esp,0x10
c0005042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005047:	0f 84 c0 03 00 00    	je     c000540d <f_open+0x432>
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005055:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000505b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000505e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005061:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005068:	8d 44 24 24          	lea    eax,[esp+0x24]
c000506c:	e8 40 fe ff ff       	call   c0004eb1 <follow_path>
c0005071:	89 c5                	mov    ebp,eax
c0005073:	85 c0                	test   eax,eax
c0005075:	75 0c                	jne    c0005083 <f_open+0xa8>
c0005077:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000507c:	79 05                	jns    c0005083 <f_open+0xa8>
c000507e:	bd 06 00 00 00       	mov    ebp,0x6
c0005083:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005089:	0f 84 84 01 00 00    	je     c0005213 <f_open+0x238>
c000508f:	85 ed                	test   ebp,ebp
c0005091:	74 20                	je     c00050b3 <f_open+0xd8>
c0005093:	83 fd 04             	cmp    ebp,0x4
c0005096:	0f 85 58 03 00 00    	jne    c00053f4 <f_open+0x419>
c000509c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a0:	83 ce 08             	or     esi,0x8
c00050a3:	e8 8a f2 ff ff       	call   c0004332 <dir_register>
c00050a8:	89 c5                	mov    ebp,eax
c00050aa:	85 c0                	test   eax,eax
c00050ac:	74 2f                	je     c00050dd <f_open+0x102>
c00050ae:	e9 41 03 00 00       	jmp    c00053f4 <f_open+0x419>
c00050b3:	bd 07 00 00 00       	mov    ebp,0x7
c00050b8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c00050bd:	0f 85 31 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050c3:	bd 08 00 00 00       	mov    ebp,0x8
c00050c8:	f7 c7 04 00 00 00    	test   edi,0x4
c00050ce:	0f 85 20 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050d4:	83 e7 08             	and    edi,0x8
c00050d7:	0f 84 65 01 00 00    	je     c0005242 <f_open+0x267>
c00050dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050e1:	8a 02                	mov    al,BYTE PTR [edx]
c00050e3:	3c 04                	cmp    al,0x4
c00050e5:	0f 85 97 00 00 00    	jne    c0005182 <f_open+0x1a7>
c00050eb:	8d 42 10             	lea    eax,[edx+0x10]
c00050ee:	89 13                	mov    DWORD PTR [ebx],edx
c00050f0:	89 da                	mov    edx,ebx
c00050f2:	e8 80 fd ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00050f7:	31 d2                	xor    edx,edx
c00050f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	83 c0 02             	add    eax,0x2
c0005108:	e8 32 cc ff ff       	call   c0001d3f <mem_set>
c000510d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005118:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511b:	83 c0 26             	add    eax,0x26
c000511e:	e8 1c cc ff ff       	call   c0001d3f <mem_set>
c0005123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005127:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000512a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005136:	83 c0 08             	add    eax,0x8
c0005139:	e8 e3 cb ff ff       	call   c0001d21 <st_dword>
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005145:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000514d:	e8 b7 ea ff ff       	call   c0003c09 <store_xdir>
c0005152:	89 c5                	mov    ebp,eax
c0005154:	85 c0                	test   eax,eax
c0005156:	0f 85 98 02 00 00    	jne    c00053f4 <f_open+0x419>
c000515c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000515f:	85 d2                	test   edx,edx
c0005161:	0f 84 db 00 00 00    	je     c0005242 <f_open+0x267>
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	89 d8                	mov    eax,ebx
c000516b:	e8 8e e3 ff ff       	call   c00034fe <remove_chain>
c0005170:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005174:	89 c5                	mov    ebp,eax
c0005176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005179:	48                   	dec    eax
c000517a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000517d:	e9 b8 00 00 00       	jmp    c000523a <f_open+0x25f>
c0005182:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005186:	89 ea                	mov    edx,ebp
c0005188:	e8 99 fc ff ff       	call   c0004e26 <ld_clust.isra.0>
c000518d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005192:	89 c7                	mov    edi,eax
c0005194:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005197:	e8 85 cb ff ff       	call   c0001d21 <st_dword>
c000519c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051a0:	31 c9                	xor    ecx,ecx
c00051a2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00051a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051aa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00051ae:	e8 9c fc ff ff       	call   c0004e4f <st_clust.isra.1>
c00051b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051b7:	31 d2                	xor    edx,edx
c00051b9:	83 c0 1c             	add    eax,0x1c
c00051bc:	e8 60 cb ff ff       	call   c0001d21 <st_dword>
c00051c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c5:	85 ff                	test   edi,edi
c00051c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051cb:	74 75                	je     c0005242 <f_open+0x267>
c00051cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d1:	31 c9                	xor    ecx,ecx
c00051d3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051d6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051e1:	89 fa                	mov    edx,edi
c00051e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051e7:	e8 12 e3 ff ff       	call   c00034fe <remove_chain>
c00051ec:	89 c5                	mov    ebp,eax
c00051ee:	85 c0                	test   eax,eax
c00051f0:	0f 85 fe 01 00 00    	jne    c00053f4 <f_open+0x419>
c00051f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005202:	4f                   	dec    edi
c0005203:	e8 81 d2 ff ff       	call   c0002489 <move_window>
c0005208:	89 c5                	mov    ebp,eax
c000520a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000520e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0005211:	eb 27                	jmp    c000523a <f_open+0x25f>
c0005213:	85 ed                	test   ebp,ebp
c0005215:	0f 85 d9 01 00 00    	jne    c00053f4 <f_open+0x419>
c000521b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000521f:	bd 04 00 00 00       	mov    ebp,0x4
c0005224:	a8 10                	test   al,0x10
c0005226:	0f 85 c8 01 00 00    	jne    c00053f4 <f_open+0x419>
c000522c:	83 e7 02             	and    edi,0x2
c000522f:	74 11                	je     c0005242 <f_open+0x267>
c0005231:	bd 07 00 00 00       	mov    ebp,0x7
c0005236:	a8 01                	test   al,0x1
c0005238:	eb 02                	jmp    c000523c <f_open+0x261>
c000523a:	85 ed                	test   ebp,ebp
c000523c:	0f 85 b2 01 00 00    	jne    c00053f4 <f_open+0x419>
c0005242:	f7 c6 08 00 00 00    	test   esi,0x8
c0005248:	74 03                	je     c000524d <f_open+0x272>
c000524a:	83 ce 40             	or     esi,0x40
c000524d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005251:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005254:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005257:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000525a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000525d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005261:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005264:	8a 02                	mov    al,BYTE PTR [edx]
c0005266:	3c 04                	cmp    al,0x4
c0005268:	75 2a                	jne    c0005294 <f_open+0x2b9>
c000526a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000526e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000527a:	30 c0                	xor    al,al
c000527c:	09 c8                	or     eax,ecx
c000527e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005281:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005285:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005288:	8d 42 10             	lea    eax,[edx+0x10]
c000528b:	89 da                	mov    edx,ebx
c000528d:	e8 e5 fb ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0005292:	eb 1c                	jmp    c00052b0 <f_open+0x2d5>
c0005294:	89 fa                	mov    edx,edi
c0005296:	e8 8b fb ff ff       	call   c0004e26 <ld_clust.isra.0>
c000529b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000529e:	8d 47 1c             	lea    eax,[edi+0x1c]
c00052a1:	e8 12 ca ff ff       	call   c0001cb8 <ld_dword>
c00052a6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00052ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052b4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00052bb:	89 03                	mov    DWORD PTR [ebx],eax
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00052c3:	b9 00 02 00 00       	mov    ecx,0x200
c00052c8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052cc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052d0:	89 f0                	mov    eax,esi
c00052d2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052d9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052dc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052e3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ed:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052f8:	e8 42 ca ff ff       	call   c0001d3f <mem_set>
c00052fd:	83 e6 20             	and    esi,0x20
c0005300:	75 07                	jne    c0005309 <f_open+0x32e>
c0005302:	31 ed                	xor    ebp,ebp
c0005304:	e9 eb 00 00 00       	jmp    c00053f4 <f_open+0x419>
c0005309:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000531b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000531f:	74 e1                	je     c0005302 <f_open+0x327>
c0005321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005329:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000532c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000532f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005333:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005336:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000533a:	31 ff                	xor    edi,edi
c000533c:	c1 e5 09             	shl    ebp,0x9
c000533f:	89 ee                	mov    esi,ebp
c0005341:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005345:	89 f8                	mov    eax,edi
c0005347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000534b:	73 22                	jae    c000536f <f_open+0x394>
c000534d:	89 d8                	mov    eax,ebx
c000534f:	e8 bd dc ff ff       	call   c0003011 <get_fat>
c0005354:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005358:	89 c2                	mov    edx,eax
c000535a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000535e:	83 f8 01             	cmp    eax,0x1
c0005361:	76 10                	jbe    c0005373 <f_open+0x398>
c0005363:	83 f8 ff             	cmp    eax,0xffffffff
c0005366:	75 d9                	jne    c0005341 <f_open+0x366>
c0005368:	bd 01 00 00 00       	mov    ebp,0x1
c000536d:	eb 09                	jmp    c0005378 <f_open+0x39d>
c000536f:	31 ed                	xor    ebp,ebp
c0005371:	eb 05                	jmp    c0005378 <f_open+0x39d>
c0005373:	bd 02 00 00 00       	mov    ebp,0x2
c0005378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000537b:	85 ed                	test   ebp,ebp
c000537d:	75 75                	jne    c00053f4 <f_open+0x419>
c000537f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005383:	25 ff 01 00 00       	and    eax,0x1ff
c0005388:	0f 84 74 ff ff ff    	je     c0005302 <f_open+0x327>
c000538e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005392:	bd 02 00 00 00       	mov    ebp,0x2
c0005397:	89 c8                	mov    eax,ecx
c0005399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000539d:	e8 a2 cb ff ff       	call   c0001f44 <clst2sect>
c00053a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053a6:	89 d7                	mov    edi,edx
c00053a8:	09 c7                	or     edi,eax
c00053aa:	74 48                	je     c00053f4 <f_open+0x419>
c00053ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00053b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00053b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00053bc:	0f ac fe 09          	shrd   esi,edi,0x9
c00053c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00053c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053cf:	83 ec 0c             	sub    esp,0xc
c00053d2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053d5:	6a 01                	push   0x1
c00053d7:	52                   	push   edx
c00053d8:	50                   	push   eax
c00053d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 79 c8 ff ff       	call   c0001c60 <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 95 c0             	setne  al
c00053ef:	0f b6 c0             	movzx  eax,al
c00053f2:	89 c5                	mov    ebp,eax
c00053f4:	83 ec 0c             	sub    esp,0xc
c00053f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053fb:	e8 f4 30 00 00       	call   c00084f4 <ff_memfree>
c0005400:	83 c4 10             	add    esp,0x10
c0005403:	85 ed                	test   ebp,ebp
c0005405:	74 06                	je     c000540d <f_open+0x432>
c0005407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000540d:	83 c4 7c             	add    esp,0x7c
c0005410:	89 e8                	mov    eax,ebp
c0005412:	5b                   	pop    ebx
c0005413:	5e                   	pop    esi
c0005414:	5f                   	pop    edi
c0005415:	5d                   	pop    ebp
c0005416:	c3                   	ret    

c0005417 <f_read>:
c0005417:	55                   	push   ebp
c0005418:	57                   	push   edi
c0005419:	56                   	push   esi
c000541a:	53                   	push   ebx
c000541b:	83 ec 2c             	sub    esp,0x2c
c000541e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005422:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005426:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005430:	89 d8                	mov    eax,ebx
c0005432:	e8 77 cf ff ff       	call   c00023ae <validate>
c0005437:	89 c5                	mov    ebp,eax
c0005439:	85 c0                	test   eax,eax
c000543b:	0f 85 4c 02 00 00    	jne    c000568d <f_read+0x276>
c0005441:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005445:	85 ed                	test   ebp,ebp
c0005447:	0f 85 40 02 00 00    	jne    c000568d <f_read+0x276>
c000544d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005451:	0f 84 31 02 00 00    	je     c0005688 <f_read+0x271>
c0005457:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000545a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000545d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005460:	bf 00 00 00 00       	mov    edi,0x0
c0005465:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005468:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000546c:	89 d1                	mov    ecx,edx
c000546e:	19 f9                	sbb    ecx,edi
c0005470:	0f 83 cf 00 00 00    	jae    c0005545 <f_read+0x12e>
c0005476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547a:	e9 c6 00 00 00       	jmp    c0005545 <f_read+0x12e>
c000547f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005482:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005485:	89 d0                	mov    eax,edx
c0005487:	25 ff 01 00 00       	and    eax,0x1ff
c000548c:	0f 85 c9 01 00 00    	jne    c000565b <f_read+0x244>
c0005492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005496:	89 d6                	mov    esi,edx
c0005498:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549c:	89 cf                	mov    edi,ecx
c000549e:	48                   	dec    eax
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	21 f0                	and    eax,esi
c00054a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a9:	0f 84 a6 00 00 00    	je     c0005555 <f_read+0x13e>
c00054af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054b6:	89 c8                	mov    eax,ecx
c00054b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00054bb:	e8 84 ca ff ff       	call   c0001f44 <clst2sect>
c00054c0:	89 d7                	mov    edi,edx
c00054c2:	09 c7                	or     edi,eax
c00054c4:	0f 84 b4 00 00 00    	je     c000557e <f_read+0x167>
c00054ca:	31 ff                	xor    edi,edi
c00054cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054d3:	01 c6                	add    esi,eax
c00054d5:	11 d7                	adc    edi,edx
c00054d7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054df:	0f 86 fd 00 00 00    	jbe    c00055e2 <f_read+0x1cb>
c00054e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ed:	c1 e8 09             	shr    eax,0x9
c00054f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054f3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054f7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054fa:	39 c2                	cmp    edx,eax
c00054fc:	76 07                	jbe    c0005505 <f_read+0xee>
c00054fe:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005502:	89 04 24             	mov    DWORD PTR [esp],eax
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000550c:	57                   	push   edi
c000550d:	56                   	push   esi
c000550e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005512:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005516:	50                   	push   eax
c0005517:	e8 44 c7 ff ff       	call   c0001c60 <disk_read>
c000551c:	83 c4 20             	add    esp,0x20
c000551f:	85 c0                	test   eax,eax
c0005521:	75 6e                	jne    c0005591 <f_read+0x17a>
c0005523:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005527:	78 7e                	js     c00055a7 <f_read+0x190>
c0005529:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000552c:	c1 e6 09             	shl    esi,0x9
c000552f:	31 ff                	xor    edi,edi
c0005531:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005535:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005539:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000553d:	01 30                	add    DWORD PTR [eax],esi
c000553f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005542:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005545:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000554a:	0f 85 2f ff ff ff    	jne    c000547f <f_read+0x68>
c0005550:	e9 38 01 00 00       	jmp    c000568d <f_read+0x276>
c0005555:	89 c8                	mov    eax,ecx
c0005557:	09 d0                	or     eax,edx
c0005559:	75 05                	jne    c0005560 <f_read+0x149>
c000555b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000555e:	eb 19                	jmp    c0005579 <f_read+0x162>
c0005560:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005564:	74 09                	je     c000556f <f_read+0x158>
c0005566:	89 d8                	mov    eax,ebx
c0005568:	e8 f8 c9 ff ff       	call   c0001f65 <clmt_clust>
c000556d:	eb 0a                	jmp    c0005579 <f_read+0x162>
c000556f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005572:	89 d8                	mov    eax,ebx
c0005574:	e8 98 da ff ff       	call   c0003011 <get_fat>
c0005579:	83 f8 01             	cmp    eax,0x1
c000557c:	77 0e                	ja     c000558c <f_read+0x175>
c000557e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005582:	bd 02 00 00 00       	mov    ebp,0x2
c0005587:	e9 01 01 00 00       	jmp    c000568d <f_read+0x276>
c000558c:	83 f8 ff             	cmp    eax,0xffffffff
c000558f:	75 0e                	jne    c000559f <f_read+0x188>
c0005591:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005595:	bd 01 00 00 00       	mov    ebp,0x1
c000559a:	e9 ee 00 00 00       	jmp    c000568d <f_read+0x276>
c000559f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055a2:	e9 08 ff ff ff       	jmp    c00054af <f_read+0x98>
c00055a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ad:	29 f0                	sub    eax,esi
c00055af:	19 fa                	sbb    edx,edi
c00055b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00055b4:	89 d7                	mov    edi,edx
c00055b6:	ba 00 00 00 00       	mov    edx,0x0
c00055bb:	89 f9                	mov    ecx,edi
c00055bd:	19 d1                	sbb    ecx,edx
c00055bf:	0f 83 64 ff ff ff    	jae    c0005529 <f_read+0x112>
c00055c5:	89 c7                	mov    edi,eax
c00055c7:	8d 53 50             	lea    edx,[ebx+0x50]
c00055ca:	c1 e7 09             	shl    edi,0x9
c00055cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055d1:	b9 00 02 00 00       	mov    ecx,0x200
c00055d6:	01 f8                	add    eax,edi
c00055d8:	e8 4d c7 ff ff       	call   c0001d2a <mem_cpy>
c00055dd:	e9 47 ff ff ff       	jmp    c0005529 <f_read+0x112>
c00055e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055e5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ef:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055f3:	75 05                	jne    c00055fa <f_read+0x1e3>
c00055f5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055f8:	74 5b                	je     c0005655 <f_read+0x23e>
c00055fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00055fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005605:	79 2a                	jns    c0005631 <f_read+0x21a>
c0005607:	83 ec 0c             	sub    esp,0xc
c000560a:	6a 01                	push   0x1
c000560c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005614:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000561c:	50                   	push   eax
c000561d:	e8 54 c6 ff ff       	call   c0001c76 <disk_write>
c0005622:	83 c4 20             	add    esp,0x20
c0005625:	85 c0                	test   eax,eax
c0005627:	0f 85 64 ff ff ff    	jne    c0005591 <f_read+0x17a>
c000562d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	6a 01                	push   0x1
c0005636:	57                   	push   edi
c0005637:	56                   	push   esi
c0005638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 16 c6 ff ff       	call   c0001c60 <disk_read>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	0f 85 3c ff ff ff    	jne    c0005591 <f_read+0x17a>
c0005655:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005658:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000565b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000565e:	ba 00 02 00 00       	mov    edx,0x200
c0005663:	25 ff 01 00 00       	and    eax,0x1ff
c0005668:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000566c:	29 c2                	sub    edx,eax
c000566e:	39 d6                	cmp    esi,edx
c0005670:	76 02                	jbe    c0005674 <f_read+0x25d>
c0005672:	89 d6                	mov    esi,edx
c0005674:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005678:	89 f1                	mov    ecx,esi
c000567a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567e:	e8 a7 c6 ff ff       	call   c0001d2a <mem_cpy>
c0005683:	e9 a7 fe ff ff       	jmp    c000552f <f_read+0x118>
c0005688:	bd 07 00 00 00       	mov    ebp,0x7
c000568d:	83 c4 2c             	add    esp,0x2c
c0005690:	89 e8                	mov    eax,ebp
c0005692:	5b                   	pop    ebx
c0005693:	5e                   	pop    esi
c0005694:	5f                   	pop    edi
c0005695:	5d                   	pop    ebp
c0005696:	c3                   	ret    

c0005697 <f_write>:
c0005697:	55                   	push   ebp
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	53                   	push   ebx
c000569b:	83 ec 2c             	sub    esp,0x2c
c000569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00056a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00056ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00056b0:	89 d8                	mov    eax,ebx
c00056b2:	e8 f7 cc ff ff       	call   c00023ae <validate>
c00056b7:	89 c5                	mov    ebp,eax
c00056b9:	85 c0                	test   eax,eax
c00056bb:	0f 85 86 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056c1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00056c5:	85 ed                	test   ebp,ebp
c00056c7:	0f 85 7a 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056cd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056d1:	0f 84 6b 02 00 00    	je     c0005942 <f_write+0x2ab>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056de:	0f 84 43 01 00 00    	je     c0005827 <f_write+0x190>
c00056e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056e7:	89 c1                	mov    ecx,eax
c00056e9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ed:	0f 83 34 01 00 00    	jae    c0005827 <f_write+0x190>
c00056f3:	f7 d0                	not    eax
c00056f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056f9:	e9 29 01 00 00       	jmp    c0005827 <f_write+0x190>
c00056fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005701:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005704:	89 d0                	mov    eax,edx
c0005706:	25 ff 01 00 00       	and    eax,0x1ff
c000570b:	0f 85 00 02 00 00    	jne    c0005911 <f_write+0x27a>
c0005711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005715:	89 d6                	mov    esi,edx
c0005717:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000571b:	89 cf                	mov    edi,ecx
c000571d:	48                   	dec    eax
c000571e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005722:	21 f0                	and    eax,esi
c0005724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005728:	0f 84 06 01 00 00    	je     c0005834 <f_write+0x19d>
c000572e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005732:	0f 88 6e 01 00 00    	js     c00058a6 <f_write+0x20f>
c0005738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000573c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000573f:	89 c8                	mov    eax,ecx
c0005741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005745:	e8 fa c7 ff ff       	call   c0001f44 <clst2sect>
c000574a:	89 d1                	mov    ecx,edx
c000574c:	09 c1                	or     ecx,eax
c000574e:	0f 84 1c 01 00 00    	je     c0005870 <f_write+0x1d9>
c0005754:	31 ff                	xor    edi,edi
c0005756:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000575a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000575e:	01 c6                	add    esi,eax
c0005760:	11 d7                	adc    edi,edx
c0005762:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000576a:	0f 86 63 01 00 00    	jbe    c00058d3 <f_write+0x23c>
c0005770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005778:	c1 e8 09             	shr    eax,0x9
c000577b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000577f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005787:	39 c2                	cmp    edx,eax
c0005789:	76 08                	jbe    c0005793 <f_write+0xfc>
c000578b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000579a:	57                   	push   edi
c000579b:	56                   	push   esi
c000579c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00057a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a4:	50                   	push   eax
c00057a5:	e8 cc c4 ff ff       	call   c0001c76 <disk_write>
c00057aa:	83 c4 20             	add    esp,0x20
c00057ad:	85 c0                	test   eax,eax
c00057af:	0f 85 ce 00 00 00    	jne    c0005883 <f_write+0x1ec>
c00057b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00057b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00057bb:	29 f0                	sub    eax,esi
c00057bd:	19 fa                	sbb    edx,edi
c00057bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00057c3:	89 d7                	mov    edi,edx
c00057c5:	ba 00 00 00 00       	mov    edx,0x0
c00057ca:	89 f9                	mov    ecx,edi
c00057cc:	19 d1                	sbb    ecx,edx
c00057ce:	73 1c                	jae    c00057ec <f_write+0x155>
c00057d0:	89 c7                	mov    edi,eax
c00057d2:	b9 00 02 00 00       	mov    ecx,0x200
c00057d7:	c1 e7 09             	shl    edi,0x9
c00057da:	8d 43 50             	lea    eax,[ebx+0x50]
c00057dd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057e1:	89 fa                	mov    edx,edi
c00057e3:	e8 42 c5 ff ff       	call   c0001d2a <mem_cpy>
c00057e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057f0:	c1 e6 09             	shl    esi,0x9
c00057f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057f7:	31 ff                	xor    edi,edi
c00057f9:	01 30                	add    DWORD PTR [eax],esi
c00057fb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000580c:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000580f:	89 c1                	mov    ecx,eax
c0005811:	39 f2                	cmp    edx,esi
c0005813:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005816:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005819:	19 f9                	sbb    ecx,edi
c000581b:	73 04                	jae    c0005821 <f_write+0x18a>
c000581d:	89 f2                	mov    edx,esi
c000581f:	89 f8                	mov    eax,edi
c0005821:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005824:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005827:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000582c:	0f 85 cc fe ff ff    	jne    c00056fe <f_write+0x67>
c0005832:	eb 2e                	jmp    c0005862 <f_write+0x1cb>
c0005834:	89 c8                	mov    eax,ecx
c0005836:	09 d0                	or     eax,edx
c0005838:	75 0b                	jne    c0005845 <f_write+0x1ae>
c000583a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000583d:	31 d2                	xor    edx,edx
c000583f:	85 c0                	test   eax,eax
c0005841:	75 28                	jne    c000586b <f_write+0x1d4>
c0005843:	eb 12                	jmp    c0005857 <f_write+0x1c0>
c0005845:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005849:	74 09                	je     c0005854 <f_write+0x1bd>
c000584b:	89 d8                	mov    eax,ebx
c000584d:	e8 13 c7 ff ff       	call   c0001f65 <clmt_clust>
c0005852:	eb 0a                	jmp    c000585e <f_write+0x1c7>
c0005854:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005857:	89 d8                	mov    eax,ebx
c0005859:	e8 a1 da ff ff       	call   c00032ff <create_chain>
c000585e:	85 c0                	test   eax,eax
c0005860:	75 09                	jne    c000586b <f_write+0x1d4>
c0005862:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005866:	e9 dc 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000586b:	83 f8 01             	cmp    eax,0x1
c000586e:	75 0e                	jne    c000587e <f_write+0x1e7>
c0005870:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005874:	bd 02 00 00 00       	mov    ebp,0x2
c0005879:	e9 c9 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000587e:	83 f8 ff             	cmp    eax,0xffffffff
c0005881:	75 0e                	jne    c0005891 <f_write+0x1fa>
c0005883:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005887:	bd 01 00 00 00       	mov    ebp,0x1
c000588c:	e9 b6 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c0005891:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005894:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005898:	0f 85 90 fe ff ff    	jne    c000572e <f_write+0x97>
c000589e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00058a1:	e9 88 fe ff ff       	jmp    c000572e <f_write+0x97>
c00058a6:	83 ec 0c             	sub    esp,0xc
c00058a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ac:	6a 01                	push   0x1
c00058ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00058b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00058b4:	50                   	push   eax
c00058b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00058b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00058bd:	50                   	push   eax
c00058be:	e8 b3 c3 ff ff       	call   c0001c76 <disk_write>
c00058c3:	83 c4 20             	add    esp,0x20
c00058c6:	85 c0                	test   eax,eax
c00058c8:	75 b9                	jne    c0005883 <f_write+0x1ec>
c00058ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ce:	e9 65 fe ff ff       	jmp    c0005738 <f_write+0xa1>
c00058d3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058d6:	75 05                	jne    c00058dd <f_write+0x246>
c00058d8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058db:	74 2e                	je     c000590b <f_write+0x274>
c00058dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058e3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058e6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058e9:	73 20                	jae    c000590b <f_write+0x274>
c00058eb:	83 ec 0c             	sub    esp,0xc
c00058ee:	8d 43 50             	lea    eax,[ebx+0x50]
c00058f1:	6a 01                	push   0x1
c00058f3:	57                   	push   edi
c00058f4:	56                   	push   esi
c00058f5:	50                   	push   eax
c00058f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058fa:	50                   	push   eax
c00058fb:	e8 60 c3 ff ff       	call   c0001c60 <disk_read>
c0005900:	83 c4 20             	add    esp,0x20
c0005903:	85 c0                	test   eax,eax
c0005905:	0f 85 78 ff ff ff    	jne    c0005883 <f_write+0x1ec>
c000590b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000590e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005911:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005914:	ba 00 02 00 00       	mov    edx,0x200
c0005919:	25 ff 01 00 00       	and    eax,0x1ff
c000591e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005922:	29 c2                	sub    edx,eax
c0005924:	39 d6                	cmp    esi,edx
c0005926:	76 02                	jbe    c000592a <f_write+0x293>
c0005928:	89 d6                	mov    esi,edx
c000592a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000592e:	89 f1                	mov    ecx,esi
c0005930:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005934:	e8 f1 c3 ff ff       	call   c0001d2a <mem_cpy>
c0005939:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000593d:	e9 b1 fe ff ff       	jmp    c00057f3 <f_write+0x15c>
c0005942:	bd 07 00 00 00       	mov    ebp,0x7
c0005947:	83 c4 2c             	add    esp,0x2c
c000594a:	89 e8                	mov    eax,ebp
c000594c:	5b                   	pop    ebx
c000594d:	5e                   	pop    esi
c000594e:	5f                   	pop    edi
c000594f:	5d                   	pop    ebp
c0005950:	c3                   	ret    

c0005951 <f_sync>:
c0005951:	56                   	push   esi
c0005952:	53                   	push   ebx
c0005953:	83 ec 64             	sub    esp,0x64
c0005956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000595a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 49 ca ff ff       	call   c00023ae <validate>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 ba 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c000596d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005970:	f6 c2 40             	test   dl,0x40
c0005973:	0f 84 ae 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005979:	84 d2                	test   dl,dl
c000597b:	79 33                	jns    c00059b0 <f_sync+0x5f>
c000597d:	83 ec 0c             	sub    esp,0xc
c0005980:	8d 43 50             	lea    eax,[ebx+0x50]
c0005983:	6a 01                	push   0x1
c0005985:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000598b:	50                   	push   eax
c000598c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005990:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005994:	50                   	push   eax
c0005995:	e8 dc c2 ff ff       	call   c0001c76 <disk_write>
c000599a:	83 c4 20             	add    esp,0x20
c000599d:	89 c2                	mov    edx,eax
c000599f:	b8 01 00 00 00       	mov    eax,0x1
c00059a4:	85 d2                	test   edx,edx
c00059a6:	0f 85 7b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00059b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00059b7:	0f 85 11 01 00 00    	jne    c0005ace <f_sync+0x17d>
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 13 d6 ff ff       	call   c0002fd7 <fill_first_frag>
c00059c4:	85 c0                	test   eax,eax
c00059c6:	0f 85 5b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059cc:	83 c9 ff             	or     ecx,0xffffffff
c00059cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059d2:	89 d8                	mov    eax,ebx
c00059d4:	e8 c9 d5 ff ff       	call   c0002fa2 <fill_last_frag>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 46 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059e1:	83 ec 0c             	sub    esp,0xc
c00059e4:	68 60 04 00 00       	push   0x460
c00059e9:	e8 f0 2a 00 00       	call   c00084de <ff_memalloc>
c00059ee:	83 c4 10             	add    esp,0x10
c00059f1:	89 c6                	mov    esi,eax
c00059f3:	b8 11 00 00 00       	mov    eax,0x11
c00059f8:	85 f6                	test   esi,esi
c00059fa:	0f 84 27 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a04:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005a0a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005a0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005a10:	89 da                	mov    edx,ebx
c0005a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a16:	e8 af df ff ff       	call   c00039ca <load_obj_xdir>
c0005a1b:	85 c0                	test   eax,eax
c0005a1d:	0f 85 95 00 00 00    	jne    c0005ab8 <f_sync+0x167>
c0005a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a31:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a34:	83 ca 01             	or     edx,0x1
c0005a37:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a3a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a40:	83 c0 34             	add    eax,0x34
c0005a43:	e8 d9 c2 ff ff       	call   c0001d21 <st_dword>
c0005a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a55:	83 c0 38             	add    eax,0x38
c0005a58:	e8 c7 c2 ff ff       	call   c0001d24 <st_qword>
c0005a5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a6a:	83 c0 28             	add    eax,0x28
c0005a6d:	e8 b2 c2 ff ff       	call   c0001d24 <st_qword>
c0005a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a76:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a7e:	83 c0 0c             	add    eax,0xc
c0005a81:	e8 9b c2 ff ff       	call   c0001d21 <st_dword>
c0005a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a8d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a91:	31 d2                	xor    edx,edx
c0005a93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a96:	83 c0 10             	add    eax,0x10
c0005a99:	e8 83 c2 ff ff       	call   c0001d21 <st_dword>
c0005a9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005aa2:	e8 62 e1 ff ff       	call   c0003c09 <store_xdir>
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 0d                	jne    c0005ab8 <f_sync+0x167>
c0005aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aaf:	e8 00 eb ff ff       	call   c00045b4 <sync_fs>
c0005ab4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	56                   	push   esi
c0005ac0:	e8 2f 2a 00 00       	call   c00084f4 <ff_memfree>
c0005ac5:	83 c4 10             	add    esp,0x10
c0005ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005acc:	eb 59                	jmp    c0005b27 <f_sync+0x1d6>
c0005ace:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005ad1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005ad4:	e8 b0 c9 ff ff       	call   c0002489 <move_window>
c0005ad9:	85 c0                	test   eax,eax
c0005adb:	75 4a                	jne    c0005b27 <f_sync+0x1d6>
c0005add:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ae0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ae4:	89 f2                	mov    edx,esi
c0005ae6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aeb:	e8 5f f3 ff ff       	call   c0004e4f <st_clust.isra.1>
c0005af0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005af6:	e8 26 c2 ff ff       	call   c0001d21 <st_dword>
c0005afb:	8d 46 16             	lea    eax,[esi+0x16]
c0005afe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b03:	e8 19 c2 ff ff       	call   c0001d21 <st_dword>
c0005b08:	8d 46 12             	lea    eax,[esi+0x12]
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	e8 0b c2 ff ff       	call   c0001d1d <st_word>
c0005b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b16:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b1e:	e8 91 ea ff ff       	call   c00045b4 <sync_fs>
c0005b23:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b27:	83 c4 64             	add    esp,0x64
c0005b2a:	5b                   	pop    ebx
c0005b2b:	5e                   	pop    esi
c0005b2c:	c3                   	ret    

c0005b2d <f_close>:
c0005b2d:	53                   	push   ebx
c0005b2e:	83 ec 24             	sub    esp,0x24
c0005b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b35:	53                   	push   ebx
c0005b36:	e8 16 fe ff ff       	call   c0005951 <f_sync>
c0005b3b:	83 c4 10             	add    esp,0x10
c0005b3e:	85 c0                	test   eax,eax
c0005b40:	75 15                	jne    c0005b57 <f_close+0x2a>
c0005b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b46:	89 d8                	mov    eax,ebx
c0005b48:	e8 61 c8 ff ff       	call   c00023ae <validate>
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 06                	jne    c0005b57 <f_close+0x2a>
c0005b51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b57:	83 c4 18             	add    esp,0x18
c0005b5a:	5b                   	pop    ebx
c0005b5b:	c3                   	ret    

c0005b5c <f_lseek>:
c0005b5c:	55                   	push   ebp
c0005b5d:	57                   	push   edi
c0005b5e:	56                   	push   esi
c0005b5f:	53                   	push   ebx
c0005b60:	83 ec 3c             	sub    esp,0x3c
c0005b63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b7c:	e8 2d c8 ff ff       	call   c00023ae <validate>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	85 c0                	test   eax,eax
c0005b87:	0f 85 7a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b8d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b95:	85 c0                	test   eax,eax
c0005b97:	0f 85 6a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005ba4:	74 0c                	je     c0005bb2 <f_lseek+0x56>
c0005ba6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005ba9:	85 c0                	test   eax,eax
c0005bab:	75 1f                	jne    c0005bcc <f_lseek+0x70>
c0005bad:	e9 b5 01 00 00       	jmp    c0005d67 <f_lseek+0x20b>
c0005bb2:	83 c9 ff             	or     ecx,0xffffffff
c0005bb5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005bb8:	89 d8                	mov    eax,ebx
c0005bba:	e8 e3 d3 ff ff       	call   c0002fa2 <fill_last_frag>
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	74 e3                	je     c0005ba6 <f_lseek+0x4a>
c0005bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005bc7:	e9 3b 04 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005bcc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bd1:	0f 85 ac 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005bd7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bdb:	0f 85 a2 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005be1:	8d 78 04             	lea    edi,[eax+0x4]
c0005be4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005be9:	be 02 00 00 00       	mov    esi,0x2
c0005bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	74 73                	je     c0005c69 <f_lseek+0x10d>
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bff:	ff 04 24             	inc    DWORD PTR [esp]
c0005c02:	89 ca                	mov    edx,ecx
c0005c04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c08:	89 d8                	mov    eax,ebx
c0005c0a:	e8 02 d4 ff ff       	call   c0003011 <get_fat>
c0005c0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c13:	83 f8 01             	cmp    eax,0x1
c0005c16:	77 11                	ja     c0005c29 <f_lseek+0xcd>
c0005c18:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005c1c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005c24:	e9 de 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c29:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2c:	75 11                	jne    c0005c3f <f_lseek+0xe3>
c0005c2e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c32:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c3a:	e9 c8 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c42:	89 c1                	mov    ecx,eax
c0005c44:	39 c2                	cmp    edx,eax
c0005c46:	74 b7                	je     c0005bff <f_lseek+0xa3>
c0005c48:	83 c6 02             	add    esi,0x2
c0005c4b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c4f:	72 0b                	jb     c0005c5c <f_lseek+0x100>
c0005c51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c54:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c57:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c59:	83 c7 08             	add    edi,0x8
c0005c5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c60:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c63:	76 04                	jbe    c0005c69 <f_lseek+0x10d>
c0005c65:	89 c5                	mov    ebp,eax
c0005c67:	eb 8d                	jmp    c0005bf6 <f_lseek+0x9a>
c0005c69:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c6c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c70:	89 30                	mov    DWORD PTR [eax],esi
c0005c72:	0f 87 87 03 00 00    	ja     c0005fff <f_lseek+0x4a3>
c0005c78:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c7e:	e9 84 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c9c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005ca0:	73 0f                	jae    c0005cb1 <f_lseek+0x155>
c0005ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005cbc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005cc7:	0f 84 3a 03 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005ccd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005cd5:	83 c6 ff             	add    esi,0xffffffff
c0005cd8:	89 d8                	mov    eax,ebx
c0005cda:	83 d7 ff             	adc    edi,0xffffffff
c0005cdd:	89 f2                	mov    edx,esi
c0005cdf:	89 f9                	mov    ecx,edi
c0005ce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ce8:	e8 78 c2 ff ff       	call   c0001f65 <clmt_clust>
c0005ced:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cf1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf4:	89 c2                	mov    edx,eax
c0005cf6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cfa:	89 c8                	mov    eax,ecx
c0005cfc:	e8 43 c2 ff ff       	call   c0001f44 <clst2sect>
c0005d01:	89 d7                	mov    edi,edx
c0005d03:	09 c7                	or     edi,eax
c0005d05:	0f 84 0d ff ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005d0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005d0f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005d15:	0f 84 ec 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d26:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d2e:	4d                   	dec    ebp
c0005d2f:	31 ff                	xor    edi,edi
c0005d31:	21 ee                	and    esi,ebp
c0005d33:	01 c6                	add    esi,eax
c0005d35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 08                	jne    c0005d49 <f_lseek+0x1ed>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	0f 84 be 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d50:	0f 89 80 02 00 00    	jns    c0005fd6 <f_lseek+0x47a>
c0005d56:	83 ec 0c             	sub    esp,0xc
c0005d59:	6a 01                	push   0x1
c0005d5b:	52                   	push   edx
c0005d5c:	50                   	push   eax
c0005d5d:	55                   	push   ebp
c0005d5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d62:	e9 5a 02 00 00       	jmp    c0005fc1 <f_lseek+0x465>
c0005d67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d6b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d6e:	74 16                	je     c0005d86 <f_lseek+0x22a>
c0005d70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d75:	76 0f                	jbe    c0005d86 <f_lseek+0x22a>
c0005d77:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d7e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d8c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d8f:	89 c7                	mov    edi,eax
c0005d91:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d95:	73 0d                	jae    c0005da4 <f_lseek+0x248>
c0005d97:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d9b:	75 07                	jne    c0005da4 <f_lseek+0x248>
c0005d9d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005da7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005daa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005dae:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005db5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005dbc:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005dbf:	75 09                	jne    c0005dca <f_lseek+0x26e>
c0005dc1:	31 f6                	xor    esi,esi
c0005dc3:	31 ff                	xor    edi,edi
c0005dc5:	e9 af 01 00 00       	jmp    c0005f79 <f_lseek+0x41d>
c0005dca:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005dce:	89 d7                	mov    edi,edx
c0005dd0:	c1 e1 09             	shl    ecx,0x9
c0005dd3:	09 c7                	or     edi,eax
c0005dd5:	89 cd                	mov    ebp,ecx
c0005dd7:	74 6d                	je     c0005e46 <f_lseek+0x2ea>
c0005dd9:	83 c0 ff             	add    eax,0xffffffff
c0005ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005de0:	83 d2 ff             	adc    edx,0xffffffff
c0005de3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005de6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dea:	83 c0 ff             	add    eax,0xffffffff
c0005ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005df1:	83 d2 ff             	adc    edx,0xffffffff
c0005df4:	31 ff                	xor    edi,edi
c0005df6:	57                   	push   edi
c0005df7:	51                   	push   ecx
c0005df8:	52                   	push   edx
c0005df9:	50                   	push   eax
c0005dfa:	e8 bd 88 01 00       	call   c001e6bc <__udivdi3>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005e0a:	57                   	push   edi
c0005e0b:	55                   	push   ebp
c0005e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e14:	e8 a3 88 01 00       	call   c001e6bc <__udivdi3>
c0005e19:	83 c4 10             	add    esp,0x10
c0005e1c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e24:	19 d1                	sbb    ecx,edx
c0005e26:	72 1e                	jb     c0005e46 <f_lseek+0x2ea>
c0005e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e2c:	89 e9                	mov    ecx,ebp
c0005e2e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e31:	f7 d9                	neg    ecx
c0005e33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e36:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e3a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e3d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e40:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e44:	eb 28                	jmp    c0005e6e <f_lseek+0x312>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	85 c0                	test   eax,eax
c0005e4b:	75 1e                	jne    c0005e6b <f_lseek+0x30f>
c0005e4d:	31 d2                	xor    edx,edx
c0005e4f:	89 d8                	mov    eax,ebx
c0005e51:	e8 a9 d4 ff ff       	call   c00032ff <create_chain>
c0005e56:	83 f8 01             	cmp    eax,0x1
c0005e59:	0f 84 b9 fd ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005e5f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e62:	0f 84 c6 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005e68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e6e:	85 c0                	test   eax,eax
c0005e70:	0f 84 4b ff ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005e76:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e82:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e89:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e8c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e93:	0f 83 9d 00 00 00    	jae    c0005f36 <f_lseek+0x3da>
c0005e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005ea1:	29 34 24             	sub    DWORD PTR [esp],esi
c0005ea4:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005ea8:	01 f2                	add    edx,esi
c0005eaa:	11 f9                	adc    ecx,edi
c0005eac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eb4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005eb7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005eba:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ebd:	f6 c1 02             	test   cl,0x2
c0005ec0:	74 35                	je     c0005ef7 <f_lseek+0x39b>
c0005ec2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ec6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ec9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ecc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ed0:	73 16                	jae    c0005ee8 <f_lseek+0x38c>
c0005ed2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eda:	88 ca                	mov    dl,cl
c0005edc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005edf:	83 ca 40             	or     edx,0x40
c0005ee2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ee5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	89 d8                	mov    eax,ebx
c0005eec:	e8 0e d4 ff ff       	call   c00032ff <create_chain>
c0005ef1:	85 c0                	test   eax,eax
c0005ef3:	75 0b                	jne    c0005f00 <f_lseek+0x3a4>
c0005ef5:	eb 30                	jmp    c0005f27 <f_lseek+0x3cb>
c0005ef7:	89 c2                	mov    edx,eax
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 11 d1 ff ff       	call   c0003011 <get_fat>
c0005f00:	83 f8 ff             	cmp    eax,0xffffffff
c0005f03:	0f 84 25 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005f09:	83 f8 01             	cmp    eax,0x1
c0005f0c:	0f 86 06 fd ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005f16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005f19:	0f 86 f9 fc ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f1f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005f22:	e9 5b ff ff ff       	jmp    c0005e82 <f_lseek+0x326>
c0005f27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f39:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f3d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f43:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f4c:	0f 84 6f fe ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005f52:	89 c2                	mov    edx,eax
c0005f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f58:	e8 e7 bf ff ff       	call   c0001f44 <clst2sect>
c0005f5d:	89 d7                	mov    edi,edx
c0005f5f:	09 c7                	or     edi,eax
c0005f61:	0f 84 b1 fc ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005f67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f6e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f72:	c1 ef 09             	shr    edi,0x9
c0005f75:	01 c6                	add    esi,eax
c0005f77:	11 d7                	adc    edi,edx
c0005f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f82:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f85:	19 d1                	sbb    ecx,edx
c0005f87:	73 0a                	jae    c0005f93 <f_lseek+0x437>
c0005f89:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f8c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f8f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f93:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f98:	74 6d                	je     c0006007 <f_lseek+0x4ab>
c0005f9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005fa0:	39 fa                	cmp    edx,edi
c0005fa2:	75 04                	jne    c0005fa8 <f_lseek+0x44c>
c0005fa4:	39 f0                	cmp    eax,esi
c0005fa6:	74 5f                	je     c0006007 <f_lseek+0x4ab>
c0005fa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005fab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005faf:	79 25                	jns    c0005fd6 <f_lseek+0x47a>
c0005fb1:	83 ec 0c             	sub    esp,0xc
c0005fb4:	6a 01                	push   0x1
c0005fb6:	52                   	push   edx
c0005fb7:	50                   	push   eax
c0005fb8:	55                   	push   ebp
c0005fb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc1:	50                   	push   eax
c0005fc2:	e8 af bc ff ff       	call   c0001c76 <disk_write>
c0005fc7:	83 c4 20             	add    esp,0x20
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	0f 85 5c fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005fd2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fd6:	83 ec 0c             	sub    esp,0xc
c0005fd9:	6a 01                	push   0x1
c0005fdb:	57                   	push   edi
c0005fdc:	56                   	push   esi
c0005fdd:	55                   	push   ebp
c0005fde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fe2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fe6:	50                   	push   eax
c0005fe7:	e8 74 bc ff ff       	call   c0001c60 <disk_read>
c0005fec:	83 c4 20             	add    esp,0x20
c0005fef:	85 c0                	test   eax,eax
c0005ff1:	0f 85 37 fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005ff7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ffa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ffd:	eb 08                	jmp    c0006007 <f_lseek+0x4ab>
c0005fff:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0006007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000600b:	83 c4 3c             	add    esp,0x3c
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	5d                   	pop    ebp
c0006012:	c3                   	ret    

c0006013 <f_opendir>:
c0006013:	56                   	push   esi
c0006014:	b8 09 00 00 00       	mov    eax,0x9
c0006019:	53                   	push   ebx
c000601a:	83 ec 24             	sub    esp,0x24
c000601d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006021:	85 db                	test   ebx,ebx
c0006023:	0f 84 e6 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000602f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006033:	e8 03 c7 ff ff       	call   c000273b <mount_volume>
c0006038:	85 c0                	test   eax,eax
c000603a:	0f 85 c9 00 00 00    	jne    c0006109 <f_opendir+0xf6>
c0006040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	89 03                	mov    DWORD PTR [ebx],eax
c0006049:	68 60 04 00 00       	push   0x460
c000604e:	e8 8b 24 00 00       	call   c00084de <ff_memalloc>
c0006053:	83 c4 10             	add    esp,0x10
c0006056:	89 c6                	mov    esi,eax
c0006058:	b8 11 00 00 00       	mov    eax,0x11
c000605d:	85 f6                	test   esi,esi
c000605f:	0f 84 aa 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006069:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000606f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006072:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006079:	89 d8                	mov    eax,ebx
c000607b:	e8 31 ee ff ff       	call   c0004eb1 <follow_path>
c0006080:	85 c0                	test   eax,eax
c0006082:	75 61                	jne    c00060e5 <f_opendir+0xd2>
c0006084:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006088:	78 46                	js     c00060d0 <f_opendir+0xbd>
c000608a:	b8 05 00 00 00       	mov    eax,0x5
c000608f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006093:	74 50                	je     c00060e5 <f_opendir+0xd2>
c0006095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006099:	8a 01                	mov    al,BYTE PTR [ecx]
c000609b:	3c 04                	cmp    al,0x4
c000609d:	75 26                	jne    c00060c5 <f_opendir+0xb2>
c000609f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00060a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00060a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00060a8:	30 d2                	xor    dl,dl
c00060aa:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c00060ae:	09 c2                	or     edx,eax
c00060b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00060b3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00060b6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00060b9:	89 da                	mov    edx,ebx
c00060bb:	8d 41 10             	lea    eax,[ecx+0x10]
c00060be:	e8 b4 ed ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00060c3:	eb 0b                	jmp    c00060d0 <f_opendir+0xbd>
c00060c5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060c8:	e8 59 ed ff ff       	call   c0004e26 <ld_clust.isra.0>
c00060cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060de:	89 d8                	mov    eax,ebx
c00060e0:	e8 22 d1 ff ff       	call   c0003207 <dir_sdi>
c00060e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e9:	83 ec 0c             	sub    esp,0xc
c00060ec:	56                   	push   esi
c00060ed:	e8 02 24 00 00       	call   c00084f4 <ff_memfree>
c00060f2:	83 c4 10             	add    esp,0x10
c00060f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f9:	83 f8 04             	cmp    eax,0x4
c00060fc:	74 06                	je     c0006104 <f_opendir+0xf1>
c00060fe:	85 c0                	test   eax,eax
c0006100:	74 0d                	je     c000610f <f_opendir+0xfc>
c0006102:	eb 05                	jmp    c0006109 <f_opendir+0xf6>
c0006104:	b8 05 00 00 00       	mov    eax,0x5
c0006109:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610f:	83 c4 24             	add    esp,0x24
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	c3                   	ret    

c0006115 <f_closedir>:
c0006115:	53                   	push   ebx
c0006116:	83 ec 18             	sub    esp,0x18
c0006119:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000611d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006121:	89 d8                	mov    eax,ebx
c0006123:	e8 86 c2 ff ff       	call   c00023ae <validate>
c0006128:	85 c0                	test   eax,eax
c000612a:	75 06                	jne    c0006132 <f_closedir+0x1d>
c000612c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006132:	83 c4 18             	add    esp,0x18
c0006135:	5b                   	pop    ebx
c0006136:	c3                   	ret    

c0006137 <f_readdir>:
c0006137:	57                   	push   edi
c0006138:	56                   	push   esi
c0006139:	53                   	push   ebx
c000613a:	83 ec 20             	sub    esp,0x20
c000613d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006145:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006149:	89 d8                	mov    eax,ebx
c000614b:	e8 5e c2 ff ff       	call   c00023ae <validate>
c0006150:	85 c0                	test   eax,eax
c0006152:	75 77                	jne    c00061cb <f_readdir+0x94>
c0006154:	85 ff                	test   edi,edi
c0006156:	75 0b                	jne    c0006163 <f_readdir+0x2c>
c0006158:	31 d2                	xor    edx,edx
c000615a:	89 d8                	mov    eax,ebx
c000615c:	e8 a6 d0 ff ff       	call   c0003207 <dir_sdi>
c0006161:	eb 68                	jmp    c00061cb <f_readdir+0x94>
c0006163:	83 ec 0c             	sub    esp,0xc
c0006166:	68 60 04 00 00       	push   0x460
c000616b:	e8 6e 23 00 00       	call   c00084de <ff_memalloc>
c0006170:	83 c4 10             	add    esp,0x10
c0006173:	89 c6                	mov    esi,eax
c0006175:	b8 11 00 00 00       	mov    eax,0x11
c000617a:	85 f6                	test   esi,esi
c000617c:	74 4d                	je     c00061cb <f_readdir+0x94>
c000617e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006182:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006188:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000618b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000618e:	31 d2                	xor    edx,edx
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 80 d8 ff ff       	call   c0003a17 <dir_read>
c0006197:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000619c:	75 19                	jne    c00061b7 <f_readdir+0x80>
c000619e:	89 fa                	mov    edx,edi
c00061a0:	89 d8                	mov    eax,ebx
c00061a2:	e8 7e ea ff ff       	call   c0004c25 <get_fileinfo>
c00061a7:	31 d2                	xor    edx,edx
c00061a9:	89 d8                	mov    eax,ebx
c00061ab:	e8 af d5 ff ff       	call   c000375f <dir_next>
c00061b0:	83 f8 04             	cmp    eax,0x4
c00061b3:	75 02                	jne    c00061b7 <f_readdir+0x80>
c00061b5:	31 c0                	xor    eax,eax
c00061b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	56                   	push   esi
c00061bf:	e8 30 23 00 00       	call   c00084f4 <ff_memfree>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 20             	add    esp,0x20
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	c3                   	ret    

c00061d2 <f_stat>:
c00061d2:	57                   	push   edi
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 50             	sub    esp,0x50
c00061da:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061de:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061e2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061e6:	e8 50 c5 ff ff       	call   c000273b <mount_volume>
c00061eb:	89 c3                	mov    ebx,eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	75 67                	jne    c0006258 <f_stat+0x86>
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	bb 11 00 00 00       	mov    ebx,0x11
c00061f9:	68 60 04 00 00       	push   0x460
c00061fe:	e8 db 22 00 00       	call   c00084de <ff_memalloc>
c0006203:	83 c4 10             	add    esp,0x10
c0006206:	89 c6                	mov    esi,eax
c0006208:	85 c0                	test   eax,eax
c000620a:	74 4c                	je     c0006258 <f_stat+0x86>
c000620c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006210:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006216:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006219:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000621c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0006220:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006224:	e8 88 ec ff ff       	call   c0004eb1 <follow_path>
c0006229:	89 c3                	mov    ebx,eax
c000622b:	85 c0                	test   eax,eax
c000622d:	75 1d                	jne    c000624c <f_stat+0x7a>
c000622f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006234:	78 11                	js     c0006247 <f_stat+0x75>
c0006236:	85 ff                	test   edi,edi
c0006238:	74 12                	je     c000624c <f_stat+0x7a>
c000623a:	89 fa                	mov    edx,edi
c000623c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006240:	e8 e0 e9 ff ff       	call   c0004c25 <get_fileinfo>
c0006245:	eb 05                	jmp    c000624c <f_stat+0x7a>
c0006247:	bb 06 00 00 00       	mov    ebx,0x6
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	56                   	push   esi
c0006250:	e8 9f 22 00 00       	call   c00084f4 <ff_memfree>
c0006255:	83 c4 10             	add    esp,0x10
c0006258:	83 c4 50             	add    esp,0x50
c000625b:	89 d8                	mov    eax,ebx
c000625d:	5b                   	pop    ebx
c000625e:	5e                   	pop    esi
c000625f:	5f                   	pop    edi
c0006260:	c3                   	ret    

c0006261 <f_getfree>:
c0006261:	55                   	push   ebp
c0006262:	31 c9                	xor    ecx,ecx
c0006264:	57                   	push   edi
c0006265:	56                   	push   esi
c0006266:	53                   	push   ebx
c0006267:	83 ec 5c             	sub    esp,0x5c
c000626a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000626e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006272:	e8 c4 c4 ff ff       	call   c000273b <mount_volume>
c0006277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000627b:	85 c0                	test   eax,eax
c000627d:	0f 85 9d 01 00 00    	jne    c0006420 <f_getfree+0x1bf>
c0006283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006287:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000628b:	89 02                	mov    DWORD PTR [edx],eax
c000628d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006293:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006296:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000629a:	39 f2                	cmp    edx,esi
c000629c:	77 0b                	ja     c00062a9 <f_getfree+0x48>
c000629e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062a2:	89 10                	mov    DWORD PTR [eax],edx
c00062a4:	e9 77 01 00 00       	jmp    c0006420 <f_getfree+0x1bf>
c00062a9:	8a 10                	mov    dl,BYTE PTR [eax]
c00062ab:	80 fa 01             	cmp    dl,0x1
c00062ae:	75 3a                	jne    c00062ea <f_getfree+0x89>
c00062b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062b4:	be 02 00 00 00       	mov    esi,0x2
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	89 f2                	mov    edx,esi
c00062bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00062c1:	e8 4b cd ff ff       	call   c0003011 <get_fat>
c00062c6:	83 f8 ff             	cmp    eax,0xffffffff
c00062c9:	0f 84 28 01 00 00    	je     c00063f7 <f_getfree+0x196>
c00062cf:	83 f8 01             	cmp    eax,0x1
c00062d2:	0f 84 29 01 00 00    	je     c0006401 <f_getfree+0x1a0>
c00062d8:	83 d3 00             	adc    ebx,0x0
c00062db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062df:	46                   	inc    esi
c00062e0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062e3:	77 d6                	ja     c00062bb <f_getfree+0x5a>
c00062e5:	e9 25 01 00 00       	jmp    c000640f <f_getfree+0x1ae>
c00062ea:	80 fa 04             	cmp    dl,0x4
c00062ed:	0f 85 88 00 00 00    	jne    c000637b <f_getfree+0x11a>
c00062f3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062f6:	31 ed                	xor    ebp,ebp
c00062f8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006303:	31 db                	xor    ebx,ebx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	75 3f                	jne    c0006348 <f_getfree+0xe7>
c0006309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000630d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006311:	83 c0 01             	add    eax,0x1
c0006314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006318:	83 d2 00             	adc    edx,0x0
c000631b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000631f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006323:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000632b:	e8 59 c1 ff ff       	call   c0002489 <move_window>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 d3 00 00 00    	jne    c000640b <f_getfree+0x1aa>
c0006338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000633c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000634f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006353:	89 cf                	mov    edi,ecx
c0006355:	85 f6                	test   esi,esi
c0006357:	74 12                	je     c000636b <f_getfree+0x10a>
c0006359:	88 c1                	mov    cl,al
c000635b:	83 e1 01             	and    ecx,0x1
c000635e:	80 f9 01             	cmp    cl,0x1
c0006361:	83 d3 00             	adc    ebx,0x0
c0006364:	d0 e8                	shr    al,1
c0006366:	4e                   	dec    esi
c0006367:	39 fe                	cmp    esi,edi
c0006369:	75 ea                	jne    c0006355 <f_getfree+0xf4>
c000636b:	45                   	inc    ebp
c000636c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006372:	85 f6                	test   esi,esi
c0006374:	75 8f                	jne    c0006305 <f_getfree+0xa4>
c0006376:	e9 94 00 00 00       	jmp    c000640f <f_getfree+0x1ae>
c000637b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000637e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006381:	31 f6                	xor    esi,esi
c0006383:	31 db                	xor    ebx,ebx
c0006385:	85 f6                	test   esi,esi
c0006387:	75 1b                	jne    c00063a4 <f_getfree+0x143>
c0006389:	89 d7                	mov    edi,edx
c000638b:	89 cd                	mov    ebp,ecx
c000638d:	83 c7 01             	add    edi,0x1
c0006390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006394:	83 d5 00             	adc    ebp,0x0
c0006397:	e8 ed c0 ff ff       	call   c0002489 <move_window>
c000639c:	85 c0                	test   eax,eax
c000639e:	75 6b                	jne    c000640b <f_getfree+0x1aa>
c00063a0:	89 fa                	mov    edx,edi
c00063a2:	89 e9                	mov    ecx,ebp
c00063a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00063ac:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00063b0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00063b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00063b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00063bb:	75 11                	jne    c00063ce <f_getfree+0x16d>
c00063bd:	e8 e9 b8 ff ff       	call   c0001cab <ld_word>
c00063c2:	66 83 f8 01          	cmp    ax,0x1
c00063c6:	83 d3 00             	adc    ebx,0x0
c00063c9:	83 c6 02             	add    esi,0x2
c00063cc:	eb 13                	jmp    c00063e1 <f_getfree+0x180>
c00063ce:	e8 e5 b8 ff ff       	call   c0001cb8 <ld_dword>
c00063d3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063d8:	83 f8 01             	cmp    eax,0x1
c00063db:	83 d3 00             	adc    ebx,0x0
c00063de:	83 c6 04             	add    esi,0x4
c00063e1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ef:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063f3:	75 90                	jne    c0006385 <f_getfree+0x124>
c00063f5:	eb 18                	jmp    c000640f <f_getfree+0x1ae>
c00063f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063ff:	eb 0e                	jmp    c000640f <f_getfree+0x1ae>
c0006401:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006409:	eb 04                	jmp    c000640f <f_getfree+0x1ae>
c000640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006413:	89 18                	mov    DWORD PTR [eax],ebx
c0006415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006419:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000641c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006424:	83 c4 5c             	add    esp,0x5c
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <f_truncate>:
c000642c:	56                   	push   esi
c000642d:	53                   	push   ebx
c000642e:	83 ec 14             	sub    esp,0x14
c0006431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006435:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006439:	89 d8                	mov    eax,ebx
c000643b:	e8 6e bf ff ff       	call   c00023ae <validate>
c0006440:	89 c6                	mov    esi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 85 d2 00 00 00    	jne    c000651c <f_truncate+0xf0>
c000644a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000644e:	85 f6                	test   esi,esi
c0006450:	0f 85 c6 00 00 00    	jne    c000651c <f_truncate+0xf0>
c0006456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000645a:	0f 84 b7 00 00 00    	je     c0006517 <f_truncate+0xeb>
c0006460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006463:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006466:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006469:	89 d1                	mov    ecx,edx
c000646b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000646e:	0f 83 a8 00 00 00    	jae    c000651c <f_truncate+0xf0>
c0006474:	09 c2                	or     edx,eax
c0006476:	75 15                	jne    c000648d <f_truncate+0x61>
c0006478:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000647b:	31 c9                	xor    ecx,ecx
c000647d:	89 d8                	mov    eax,ebx
c000647f:	e8 7a d0 ff ff       	call   c00034fe <remove_chain>
c0006484:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000648b:	eb 35                	jmp    c00064c2 <f_truncate+0x96>
c000648d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006490:	89 d8                	mov    eax,ebx
c0006492:	e8 7a cb ff ff       	call   c0003011 <get_fat>
c0006497:	89 c2                	mov    edx,eax
c0006499:	b8 01 00 00 00       	mov    eax,0x1
c000649e:	83 fa ff             	cmp    edx,0xffffffff
c00064a1:	74 1f                	je     c00064c2 <f_truncate+0x96>
c00064a3:	b8 02 00 00 00       	mov    eax,0x2
c00064a8:	83 fa 01             	cmp    edx,0x1
c00064ab:	74 15                	je     c00064c2 <f_truncate+0x96>
c00064ad:	31 c0                	xor    eax,eax
c00064af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00064b6:	76 0a                	jbe    c00064c2 <f_truncate+0x96>
c00064b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00064bb:	89 d8                	mov    eax,ebx
c00064bd:	e8 3c d0 ff ff       	call   c00034fe <remove_chain>
c00064c2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00064c5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064cb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064ce:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064d1:	83 ca 40             	or     edx,0x40
c00064d4:	85 c0                	test   eax,eax
c00064d6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064d9:	75 35                	jne    c0006510 <f_truncate+0xe4>
c00064db:	84 d2                	test   dl,dl
c00064dd:	79 3d                	jns    c000651c <f_truncate+0xf0>
c00064df:	83 ec 0c             	sub    esp,0xc
c00064e2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064e5:	6a 01                	push   0x1
c00064e7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ed:	50                   	push   eax
c00064ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064f6:	50                   	push   eax
c00064f7:	e8 7a b7 ff ff       	call   c0001c76 <disk_write>
c00064fc:	83 c4 20             	add    esp,0x20
c00064ff:	85 c0                	test   eax,eax
c0006501:	75 08                	jne    c000650b <f_truncate+0xdf>
c0006503:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006507:	31 f6                	xor    esi,esi
c0006509:	eb 11                	jmp    c000651c <f_truncate+0xf0>
c000650b:	b8 01 00 00 00       	mov    eax,0x1
c0006510:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006513:	89 c6                	mov    esi,eax
c0006515:	eb 05                	jmp    c000651c <f_truncate+0xf0>
c0006517:	be 07 00 00 00       	mov    esi,0x7
c000651c:	89 f0                	mov    eax,esi
c000651e:	83 c4 14             	add    esp,0x14
c0006521:	5b                   	pop    ebx
c0006522:	5e                   	pop    esi
c0006523:	c3                   	ret    

c0006524 <f_unlink>:
c0006524:	56                   	push   esi
c0006525:	b9 02 00 00 00       	mov    ecx,0x2
c000652a:	53                   	push   ebx
c000652b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006531:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006535:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000653c:	e8 fa c1 ff ff       	call   c000273b <mount_volume>
c0006541:	85 c0                	test   eax,eax
c0006543:	0f 85 55 01 00 00    	jne    c000669e <f_unlink+0x17a>
c0006549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006554:	68 60 04 00 00       	push   0x460
c0006559:	e8 80 1f 00 00       	call   c00084de <ff_memalloc>
c000655e:	83 c4 10             	add    esp,0x10
c0006561:	89 c3                	mov    ebx,eax
c0006563:	b8 11 00 00 00       	mov    eax,0x11
c0006568:	85 db                	test   ebx,ebx
c000656a:	0f 84 2e 01 00 00    	je     c000669e <f_unlink+0x17a>
c0006570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006574:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000657a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000657d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006580:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 21 e9 ff ff       	call   c0004eb1 <follow_path>
c0006590:	85 c0                	test   eax,eax
c0006592:	0f 85 f2 00 00 00    	jne    c000668a <f_unlink+0x166>
c0006598:	b8 06 00 00 00       	mov    eax,0x6
c000659d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00065a5:	0f 88 df 00 00 00    	js     c000668a <f_unlink+0x166>
c00065ab:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00065b0:	74 0a                	je     c00065bc <f_unlink+0x98>
c00065b2:	b8 07 00 00 00       	mov    eax,0x7
c00065b7:	e9 ce 00 00 00       	jmp    c000668a <f_unlink+0x166>
c00065bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00065c4:	8a 02                	mov    al,BYTE PTR [edx]
c00065c6:	3c 04                	cmp    al,0x4
c00065c8:	75 12                	jne    c00065dc <f_unlink+0xb8>
c00065ca:	8d 42 10             	lea    eax,[edx+0x10]
c00065cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065d1:	e8 a1 e8 ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00065d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065da:	eb 0e                	jmp    c00065ea <f_unlink+0xc6>
c00065dc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065e3:	e8 3e e8 ff ff       	call   c0004e26 <ld_clust.isra.0>
c00065e8:	89 c6                	mov    esi,eax
c00065ea:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ef:	75 12                	jne    c0006603 <f_unlink+0xdf>
c00065f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065f5:	e8 94 d6 ff ff       	call   c0003c8e <dir_remove>
c00065fa:	85 c0                	test   eax,eax
c00065fc:	74 6c                	je     c000666a <f_unlink+0x146>
c00065fe:	e9 87 00 00 00       	jmp    c000668a <f_unlink+0x166>
c0006603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006607:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000660e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006615:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006618:	75 21                	jne    c000663b <f_unlink+0x117>
c000661a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000661e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006622:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006629:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006630:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006634:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000663b:	31 d2                	xor    edx,edx
c000663d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006644:	e8 be cb ff ff       	call   c0003207 <dir_sdi>
c0006649:	85 c0                	test   eax,eax
c000664b:	75 3d                	jne    c000668a <f_unlink+0x166>
c000664d:	31 d2                	xor    edx,edx
c000664f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006656:	e8 bc d3 ff ff       	call   c0003a17 <dir_read>
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 84 4f ff ff ff    	je     c00065b2 <f_unlink+0x8e>
c0006663:	83 f8 04             	cmp    eax,0x4
c0006666:	75 22                	jne    c000668a <f_unlink+0x166>
c0006668:	eb 87                	jmp    c00065f1 <f_unlink+0xcd>
c000666a:	85 f6                	test   esi,esi
c000666c:	75 0b                	jne    c0006679 <f_unlink+0x155>
c000666e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006672:	e8 3d df ff ff       	call   c00045b4 <sync_fs>
c0006677:	eb 11                	jmp    c000668a <f_unlink+0x166>
c0006679:	31 c9                	xor    ecx,ecx
c000667b:	89 f2                	mov    edx,esi
c000667d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006681:	e8 78 ce ff ff       	call   c00034fe <remove_chain>
c0006686:	85 c0                	test   eax,eax
c0006688:	74 e4                	je     c000666e <f_unlink+0x14a>
c000668a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000668e:	83 ec 0c             	sub    esp,0xc
c0006691:	53                   	push   ebx
c0006692:	e8 5d 1e 00 00       	call   c00084f4 <ff_memfree>
c0006697:	83 c4 10             	add    esp,0x10
c000669a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000669e:	81 c4 e4 00 00 00    	add    esp,0xe4
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	c3                   	ret    

c00066a7 <f_mkdir>:
c00066a7:	57                   	push   edi
c00066a8:	b9 02 00 00 00       	mov    ecx,0x2
c00066ad:	56                   	push   esi
c00066ae:	53                   	push   ebx
c00066af:	83 c4 80             	add    esp,0xffffff80
c00066b2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00066b6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00066bd:	e8 79 c0 ff ff       	call   c000273b <mount_volume>
c00066c2:	89 c3                	mov    ebx,eax
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 fe 01 00 00    	jne    c00068ca <f_mkdir+0x223>
c00066cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d0:	bb 11 00 00 00       	mov    ebx,0x11
c00066d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066d9:	83 ec 0c             	sub    esp,0xc
c00066dc:	68 60 04 00 00       	push   0x460
c00066e1:	e8 f8 1d 00 00       	call   c00084de <ff_memalloc>
c00066e6:	83 c4 10             	add    esp,0x10
c00066e9:	89 c7                	mov    edi,eax
c00066eb:	85 c0                	test   eax,eax
c00066ed:	0f 84 d7 01 00 00    	je     c00068ca <f_mkdir+0x223>
c00066f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006703:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000670a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000670e:	e8 9e e7 ff ff       	call   c0004eb1 <follow_path>
c0006713:	89 c3                	mov    ebx,eax
c0006715:	85 c0                	test   eax,eax
c0006717:	74 3e                	je     c0006757 <f_mkdir+0xb0>
c0006719:	83 f8 04             	cmp    eax,0x4
c000671c:	75 3e                	jne    c000675c <f_mkdir+0xb5>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	31 d2                	xor    edx,edx
c0006724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672c:	e8 ce cb ff ff       	call   c00032ff <create_chain>
c0006731:	89 c6                	mov    esi,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	74 0c                	je     c0006743 <f_mkdir+0x9c>
c0006737:	bb 02 00 00 00       	mov    ebx,0x2
c000673c:	83 f8 01             	cmp    eax,0x1
c000673f:	74 07                	je     c0006748 <f_mkdir+0xa1>
c0006741:	eb 2a                	jmp    c000676d <f_mkdir+0xc6>
c0006743:	bb 07 00 00 00       	mov    ebx,0x7
c0006748:	31 c9                	xor    ecx,ecx
c000674a:	89 f2                	mov    edx,esi
c000674c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006750:	e8 a9 cd ff ff       	call   c00034fe <remove_chain>
c0006755:	eb 05                	jmp    c000675c <f_mkdir+0xb5>
c0006757:	bb 08 00 00 00       	mov    ebx,0x8
c000675c:	83 ec 0c             	sub    esp,0xc
c000675f:	57                   	push   edi
c0006760:	e8 8f 1d 00 00       	call   c00084f4 <ff_memfree>
c0006765:	83 c4 10             	add    esp,0x10
c0006768:	e9 5d 01 00 00       	jmp    c00068ca <f_mkdir+0x223>
c000676d:	bb 01 00 00 00       	mov    ebx,0x1
c0006772:	83 f8 ff             	cmp    eax,0xffffffff
c0006775:	74 d1                	je     c0006748 <f_mkdir+0xa1>
c0006777:	89 f2                	mov    edx,esi
c0006779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677d:	e8 c4 ce ff ff       	call   c0003646 <dir_clear>
c0006782:	89 c3                	mov    ebx,eax
c0006784:	85 c0                	test   eax,eax
c0006786:	75 c0                	jne    c0006748 <f_mkdir+0xa1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000678f:	74 69                	je     c00067fa <f_mkdir+0x153>
c0006791:	b9 0b 00 00 00       	mov    ecx,0xb
c0006796:	83 c0 54             	add    eax,0x54
c0006799:	ba 20 00 00 00       	mov    edx,0x20
c000679e:	e8 9c b5 ff ff       	call   c0001d3f <mem_set>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067ac:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00067b0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00067b4:	83 c0 6a             	add    eax,0x6a
c00067b7:	e8 65 b5 ff ff       	call   c0001d21 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f1                	mov    ecx,esi
c00067c2:	8d 50 54             	lea    edx,[eax+0x54]
c00067c5:	e8 85 e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8d 50 54             	lea    edx,[eax+0x54]
c00067d6:	83 c0 74             	add    eax,0x74
c00067d9:	e8 4c b5 ff ff       	call   c0001d2a <mem_cpy>
c00067de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067e6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067ea:	8d 50 74             	lea    edx,[eax+0x74]
c00067ed:	e8 5d e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067fe:	e8 2f db ff ff       	call   c0004332 <dir_register>
c0006803:	89 c3                	mov    ebx,eax
c0006805:	85 c0                	test   eax,eax
c0006807:	0f 85 3b ff ff ff    	jne    c0006748 <f_mkdir+0xa1>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006814:	75 74                	jne    c000688a <f_mkdir+0x1e3>
c0006816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006819:	ba 00 00 21 50       	mov    edx,0x50210000
c000681e:	83 c0 0c             	add    eax,0xc
c0006821:	e8 fb b4 ff ff       	call   c0001d21 <st_dword>
c0006826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682a:	89 f2                	mov    edx,esi
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	83 c0 34             	add    eax,0x34
c0006832:	e8 ea b4 ff ff       	call   c0001d21 <st_dword>
c0006837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000683f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006842:	c1 e2 09             	shl    edx,0x9
c0006845:	83 c0 38             	add    eax,0x38
c0006848:	e8 d4 b4 ff ff       	call   c0001d21 <st_dword>
c000684d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006851:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006855:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006858:	c1 e2 09             	shl    edx,0x9
c000685b:	83 c0 28             	add    eax,0x28
c000685e:	e8 be b4 ff ff       	call   c0001d21 <st_dword>
c0006863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006867:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000686a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000686e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006871:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006875:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006879:	e8 8b d3 ff ff       	call   c0003c09 <store_xdir>
c000687e:	89 c3                	mov    ebx,eax
c0006880:	85 c0                	test   eax,eax
c0006882:	0f 85 d4 fe ff ff    	jne    c000675c <f_mkdir+0xb5>
c0006888:	eb 30                	jmp    c00068ba <f_mkdir+0x213>
c000688a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000688e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006893:	83 c0 16             	add    eax,0x16
c0006896:	e8 86 b4 ff ff       	call   c0001d21 <st_dword>
c000689b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000689f:	89 f1                	mov    ecx,esi
c00068a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00068a5:	e8 a5 e5 ff ff       	call   c0004e4f <st_clust.isra.1>
c00068aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00068ae:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00068b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068be:	e8 f1 dc ff ff       	call   c00045b4 <sync_fs>
c00068c3:	89 c3                	mov    ebx,eax
c00068c5:	e9 92 fe ff ff       	jmp    c000675c <f_mkdir+0xb5>
c00068ca:	83 ec 80             	sub    esp,0xffffff80
c00068cd:	89 d8                	mov    eax,ebx
c00068cf:	5b                   	pop    ebx
c00068d0:	5e                   	pop    esi
c00068d1:	5f                   	pop    edi
c00068d2:	c3                   	ret    

c00068d3 <f_rename>:
c00068d3:	55                   	push   ebp
c00068d4:	57                   	push   edi
c00068d5:	56                   	push   esi
c00068d6:	53                   	push   ebx
c00068d7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068e4:	e8 a4 b9 ff ff       	call   c000228d <get_ldnumber>
c00068e9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068f2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068f9:	e8 3d be ff ff       	call   c000273b <mount_volume>
c00068fe:	85 c0                	test   eax,eax
c0006900:	0f 85 b5 02 00 00    	jne    c0006bbb <f_rename+0x2e8>
c0006906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006911:	68 60 04 00 00       	push   0x460
c0006916:	e8 c3 1b 00 00       	call   c00084de <ff_memalloc>
c000691b:	83 c4 10             	add    esp,0x10
c000691e:	89 c3                	mov    ebx,eax
c0006920:	b8 11 00 00 00       	mov    eax,0x11
c0006925:	85 db                	test   ebx,ebx
c0006927:	0f 84 8e 02 00 00    	je     c0006bbb <f_rename+0x2e8>
c000692d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006931:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006937:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000693a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000693d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006944:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006948:	e8 64 e5 ff ff       	call   c0004eb1 <follow_path>
c000694d:	85 c0                	test   eax,eax
c000694f:	0f 85 52 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006955:	b8 06 00 00 00       	mov    eax,0x6
c000695a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006962:	0f 85 3f 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000696c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000696f:	0f 85 05 01 00 00    	jne    c0006a7a <f_rename+0x1a7>
c0006975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006978:	b9 40 00 00 00       	mov    ecx,0x40
c000697d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006981:	e8 a4 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006986:	b9 4c 00 00 00       	mov    ecx,0x4c
c000698b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000698f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006996:	e8 8f b3 ff ff       	call   c0001d2a <mem_cpy>
c000699b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 03 e5 ff ff       	call   c0004eb1 <follow_path>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	75 29                	jne    c00069db <f_rename+0x108>
c00069b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069b6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069bd:	74 0a                	je     c00069c9 <f_rename+0xf6>
c00069bf:	b8 08 00 00 00       	mov    eax,0x8
c00069c4:	e9 de 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c00069c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d7:	75 e6                	jne    c00069bf <f_rename+0xec>
c00069d9:	eb 09                	jmp    c00069e4 <f_rename+0x111>
c00069db:	83 f8 04             	cmp    eax,0x4
c00069de:	0f 85 c3 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069eb:	e8 42 d9 ff ff       	call   c0004332 <dir_register>
c00069f0:	85 c0                	test   eax,eax
c00069f2:	0f 85 af 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069ff:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006a02:	89 c5                	mov    ebp,eax
c0006a04:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006a0b:	8d 46 24             	lea    eax,[esi+0x24]
c0006a0e:	e8 98 b2 ff ff       	call   c0001cab <ld_word>
c0006a13:	b9 40 00 00 00       	mov    ecx,0x40
c0006a18:	89 c7                	mov    edi,eax
c0006a1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006a1e:	89 f0                	mov    eax,esi
c0006a20:	e8 05 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a29:	89 e9                	mov    ecx,ebp
c0006a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a2e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a31:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a39:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a3c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a3f:	0f b7 d7             	movzx  edx,di
c0006a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a45:	83 c0 24             	add    eax,0x24
c0006a48:	e8 d0 b2 ff ff       	call   c0001d1d <st_word>
c0006a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a54:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a57:	a8 10                	test   al,0x10
c0006a59:	75 06                	jne    c0006a61 <f_rename+0x18e>
c0006a5b:	83 c8 20             	or     eax,0x20
c0006a5e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 9c d1 ff ff       	call   c0003c09 <store_xdir>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 84 1c 01 00 00    	je     c0006b91 <f_rename+0x2be>
c0006a75:	e9 2d 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c0006a7a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a7f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a8a:	e8 9b b2 ff ff       	call   c0001d2a <mem_cpy>
c0006a8f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a98:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a9f:	e8 86 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006aa4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 fa e3 ff ff       	call   c0004eb1 <follow_path>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	75 27                	jne    c0006ae2 <f_rename+0x20f>
c0006abb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006abf:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006ac6:	0f 85 f3 fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006acc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ad3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ada:	0f 85 df fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006ae0:	eb 09                	jmp    c0006aeb <f_rename+0x218>
c0006ae2:	83 f8 04             	cmp    eax,0x4
c0006ae5:	0f 85 bc 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aeb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006af2:	e8 3b d8 ff ff       	call   c0004332 <dir_register>
c0006af7:	85 c0                	test   eax,eax
c0006af9:	0f 85 a8 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aff:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006b06:	b9 13 00 00 00       	mov    ecx,0x13
c0006b0b:	8d 46 0d             	lea    eax,[esi+0xd]
c0006b0e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006b12:	e8 13 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006b17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006b1b:	a8 10                	test   al,0x10
c0006b1d:	75 03                	jne    c0006b22 <f_rename+0x24f>
c0006b1f:	83 c8 20             	or     eax,0x20
c0006b22:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b2d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b31:	74 5e                	je     c0006b91 <f_rename+0x2be>
c0006b33:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b3a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b3e:	74 51                	je     c0006b91 <f_rename+0x2be>
c0006b40:	89 f2                	mov    edx,esi
c0006b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b46:	8a 07                	mov    al,BYTE PTR [edi]
c0006b48:	e8 d9 e2 ff ff       	call   c0004e26 <ld_clust.isra.0>
c0006b4d:	89 c2                	mov    edx,eax
c0006b4f:	89 f8                	mov    eax,edi
c0006b51:	e8 ee b3 ff ff       	call   c0001f44 <clst2sect>
c0006b56:	89 c6                	mov    esi,eax
c0006b58:	89 d1                	mov    ecx,edx
c0006b5a:	b8 02 00 00 00       	mov    eax,0x2
c0006b5f:	09 f2                	or     edx,esi
c0006b61:	74 44                	je     c0006ba7 <f_rename+0x2d4>
c0006b63:	89 f2                	mov    edx,esi
c0006b65:	89 f8                	mov    eax,edi
c0006b67:	e8 1d b9 ff ff       	call   c0002489 <move_window>
c0006b6c:	85 c0                	test   eax,eax
c0006b6e:	75 37                	jne    c0006ba7 <f_rename+0x2d4>
c0006b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b74:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b78:	75 17                	jne    c0006b91 <f_rename+0x2be>
c0006b7a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b7d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b84:	e8 c6 e2 ff ff       	call   c0004e4f <st_clust.isra.1>
c0006b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b91:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b95:	e8 f4 d0 ff ff       	call   c0003c8e <dir_remove>
c0006b9a:	85 c0                	test   eax,eax
c0006b9c:	75 09                	jne    c0006ba7 <f_rename+0x2d4>
c0006b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ba2:	e8 0d da ff ff       	call   c00045b4 <sync_fs>
c0006ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	53                   	push   ebx
c0006baf:	e8 40 19 00 00       	call   c00084f4 <ff_memfree>
c0006bb4:	83 c4 10             	add    esp,0x10
c0006bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bbb:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006bc1:	5b                   	pop    ebx
c0006bc2:	5e                   	pop    esi
c0006bc3:	5f                   	pop    edi
c0006bc4:	5d                   	pop    ebp
c0006bc5:	c3                   	ret    

c0006bc6 <f_chmod>:
c0006bc6:	57                   	push   edi
c0006bc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006bcc:	56                   	push   esi
c0006bcd:	53                   	push   ebx
c0006bce:	83 ec 60             	sub    esp,0x60
c0006bd1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006bd5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bd9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bdd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006be1:	e8 55 bb ff ff       	call   c000273b <mount_volume>
c0006be6:	85 c0                	test   eax,eax
c0006be8:	0f 85 af 00 00 00    	jne    c0006c9d <f_chmod+0xd7>
c0006bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf2:	83 ec 0c             	sub    esp,0xc
c0006bf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bf9:	68 60 04 00 00       	push   0x460
c0006bfe:	e8 db 18 00 00       	call   c00084de <ff_memalloc>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	89 c6                	mov    esi,eax
c0006c08:	b8 11 00 00 00       	mov    eax,0x11
c0006c0d:	85 f6                	test   esi,esi
c0006c0f:	0f 84 88 00 00 00    	je     c0006c9d <f_chmod+0xd7>
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006c1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006c22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c2d:	e8 7f e2 ff ff       	call   c0004eb1 <follow_path>
c0006c32:	85 c0                	test   eax,eax
c0006c34:	75 53                	jne    c0006c89 <f_chmod+0xc3>
c0006c36:	b8 06 00 00 00       	mov    eax,0x6
c0006c3b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c40:	75 47                	jne    c0006c89 <f_chmod+0xc3>
c0006c42:	89 f9                	mov    ecx,edi
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	83 e1 27             	and    ecx,0x27
c0006c4b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c4e:	75 1d                	jne    c0006c6d <f_chmod+0xa7>
c0006c50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c53:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c56:	21 cb                	and    ebx,ecx
c0006c58:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c5b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c62:	e8 a2 cf ff ff       	call   c0003c09 <store_xdir>
c0006c67:	85 c0                	test   eax,eax
c0006c69:	75 1e                	jne    c0006c89 <f_chmod+0xc3>
c0006c6b:	eb 13                	jmp    c0006c80 <f_chmod+0xba>
c0006c6d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c71:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c74:	21 cb                	and    ebx,ecx
c0006c76:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c79:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c84:	e8 2b d9 ff ff       	call   c00045b4 <sync_fs>
c0006c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	56                   	push   esi
c0006c91:	e8 5e 18 00 00       	call   c00084f4 <ff_memfree>
c0006c96:	83 c4 10             	add    esp,0x10
c0006c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c9d:	83 c4 60             	add    esp,0x60
c0006ca0:	5b                   	pop    ebx
c0006ca1:	5e                   	pop    esi
c0006ca2:	5f                   	pop    edi
c0006ca3:	c3                   	ret    

c0006ca4 <f_utime>:
c0006ca4:	56                   	push   esi
c0006ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0006caa:	53                   	push   ebx
c0006cab:	83 ec 64             	sub    esp,0x64
c0006cae:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006cb2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006cb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006cba:	e8 7c ba ff ff       	call   c000273b <mount_volume>
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	0f 85 b5 00 00 00    	jne    c0006d7c <f_utime+0xd8>
c0006cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccb:	83 ec 0c             	sub    esp,0xc
c0006cce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cd2:	68 60 04 00 00       	push   0x460
c0006cd7:	e8 02 18 00 00       	call   c00084de <ff_memalloc>
c0006cdc:	83 c4 10             	add    esp,0x10
c0006cdf:	89 c3                	mov    ebx,eax
c0006ce1:	b8 11 00 00 00       	mov    eax,0x11
c0006ce6:	85 db                	test   ebx,ebx
c0006ce8:	0f 84 8e 00 00 00    	je     c0006d7c <f_utime+0xd8>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cf8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cfe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 a6 e1 ff ff       	call   c0004eb1 <follow_path>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 59                	jne    c0006d68 <f_utime+0xc4>
c0006d0f:	b8 06 00 00 00       	mov    eax,0x6
c0006d14:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006d19:	75 4d                	jne    c0006d68 <f_utime+0xc4>
c0006d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006d23:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d27:	c1 e2 10             	shl    edx,0x10
c0006d2a:	09 ca                	or     edx,ecx
c0006d2c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2f:	75 1a                	jne    c0006d4b <f_utime+0xa7>
c0006d31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d34:	83 c0 0c             	add    eax,0xc
c0006d37:	e8 e5 af ff ff       	call   c0001d21 <st_dword>
c0006d3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d40:	e8 c4 ce ff ff       	call   c0003c09 <store_xdir>
c0006d45:	85 c0                	test   eax,eax
c0006d47:	75 1f                	jne    c0006d68 <f_utime+0xc4>
c0006d49:	eb 14                	jmp    c0006d5f <f_utime+0xbb>
c0006d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d4f:	83 c0 16             	add    eax,0x16
c0006d52:	e8 ca af ff ff       	call   c0001d21 <st_dword>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d63:	e8 4c d8 ff ff       	call   c00045b4 <sync_fs>
c0006d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d6c:	83 ec 0c             	sub    esp,0xc
c0006d6f:	53                   	push   ebx
c0006d70:	e8 7f 17 00 00       	call   c00084f4 <ff_memfree>
c0006d75:	83 c4 10             	add    esp,0x10
c0006d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7c:	83 c4 64             	add    esp,0x64
c0006d7f:	5b                   	pop    ebx
c0006d80:	5e                   	pop    esi
c0006d81:	c3                   	ret    

c0006d82 <f_getlabel>:
c0006d82:	55                   	push   ebp
c0006d83:	31 c9                	xor    ecx,ecx
c0006d85:	57                   	push   edi
c0006d86:	56                   	push   esi
c0006d87:	53                   	push   ebx
c0006d88:	83 ec 6c             	sub    esp,0x6c
c0006d8b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d8f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d96:	e8 a0 b9 ff ff       	call   c000273b <mount_volume>
c0006d9b:	89 c6                	mov    esi,eax
c0006d9d:	85 c0                	test   eax,eax
c0006d9f:	0f 85 c1 01 00 00    	jne    c0006f66 <f_getlabel+0x1e4>
c0006da5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006dad:	0f 84 5f 01 00 00    	je     c0006f12 <f_getlabel+0x190>
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	31 d2                	xor    edx,edx
c0006db9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006dbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006dc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006dc9:	e8 39 c4 ff ff       	call   c0003207 <dir_sdi>
c0006dce:	85 c0                	test   eax,eax
c0006dd0:	0f 85 2d 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dd6:	ba 01 00 00 00       	mov    edx,0x1
c0006ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ddf:	e8 33 cc ff ff       	call   c0003a17 <dir_read>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 17 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006df3:	74 09                	je     c0006dfe <f_getlabel+0x7c>
c0006df5:	31 db                	xor    ebx,ebx
c0006df7:	31 c9                	xor    ecx,ecx
c0006df9:	e9 c8 00 00 00       	jmp    c0006ec6 <f_getlabel+0x144>
c0006dfe:	31 ed                	xor    ebp,ebp
c0006e00:	31 db                	xor    ebx,ebx
c0006e02:	31 ff                	xor    edi,edi
c0006e04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e08:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006e0c:	39 fa                	cmp    edx,edi
c0006e0e:	76 4b                	jbe    c0006e5b <f_getlabel+0xd9>
c0006e10:	47                   	inc    edi
c0006e11:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006e14:	01 d0                	add    eax,edx
c0006e16:	e8 90 ae ff ff       	call   c0001cab <ld_word>
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	75 0d                	jne    c0006e2d <f_getlabel+0xab>
c0006e20:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e26:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e2b:	76 28                	jbe    c0006e55 <f_getlabel+0xd3>
c0006e2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e34:	89 e9                	mov    ecx,ebp
c0006e36:	01 da                	add    edx,ebx
c0006e38:	c1 e1 10             	shl    ecx,0x10
c0006e3b:	0f b7 c0             	movzx  eax,ax
c0006e3e:	09 c8                	or     eax,ecx
c0006e40:	b9 04 00 00 00       	mov    ecx,0x4
c0006e45:	e8 01 b0 ff ff       	call   c0001e4b <put_utf>
c0006e4a:	84 c0                	test   al,al
c0006e4c:	74 0b                	je     c0006e59 <f_getlabel+0xd7>
c0006e4e:	0f b6 c0             	movzx  eax,al
c0006e51:	01 c3                	add    ebx,eax
c0006e53:	31 c0                	xor    eax,eax
c0006e55:	89 c5                	mov    ebp,eax
c0006e57:	eb ab                	jmp    c0006e04 <f_getlabel+0x82>
c0006e59:	31 db                	xor    ebx,ebx
c0006e5b:	66 85 ed             	test   bp,bp
c0006e5e:	74 02                	je     c0006e62 <f_getlabel+0xe0>
c0006e60:	31 db                	xor    ebx,ebx
c0006e62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e69:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e6d:	e9 a0 00 00 00       	jmp    c0006f12 <f_getlabel+0x190>
c0006e72:	83 ff 0b             	cmp    edi,0xb
c0006e75:	74 11                	je     c0006e88 <f_getlabel+0x106>
c0006e77:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e80:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e83:	c1 e0 08             	shl    eax,0x8
c0006e86:	09 c2                	or     edx,eax
c0006e88:	0f b7 d2             	movzx  edx,dx
c0006e8b:	50                   	push   eax
c0006e8c:	50                   	push   eax
c0006e8d:	68 b5 01 00 00       	push   0x1b5
c0006e92:	52                   	push   edx
c0006e93:	e8 03 17 00 00       	call   c000859b <ff_oem2uni>
c0006e98:	83 c4 10             	add    esp,0x10
c0006e9b:	66 85 c0             	test   ax,ax
c0006e9e:	74 46                	je     c0006ee6 <f_getlabel+0x164>
c0006ea0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ea7:	0f b7 c0             	movzx  eax,ax
c0006eaa:	01 da                	add    edx,ebx
c0006eac:	b9 04 00 00 00       	mov    ecx,0x4
c0006eb1:	e8 95 af ff ff       	call   c0001e4b <put_utf>
c0006eb6:	84 c0                	test   al,al
c0006eb8:	74 2c                	je     c0006ee6 <f_getlabel+0x164>
c0006eba:	0f b6 c0             	movzx  eax,al
c0006ebd:	01 c3                	add    ebx,eax
c0006ebf:	83 ff 0b             	cmp    edi,0xb
c0006ec2:	74 24                	je     c0006ee8 <f_getlabel+0x166>
c0006ec4:	89 f9                	mov    ecx,edi
c0006ec6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006eca:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ecd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ed2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006edb:	e8 9f ae ff ff       	call   c0001d7f <dbc_1st>
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	74 a4                	je     c0006e88 <f_getlabel+0x106>
c0006ee4:	eb 8c                	jmp    c0006e72 <f_getlabel+0xf0>
c0006ee6:	31 db                	xor    ebx,ebx
c0006ee8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ef2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ef9:	74 17                	je     c0006f12 <f_getlabel+0x190>
c0006efb:	4b                   	dec    ebx
c0006efc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eff:	74 ee                	je     c0006eef <f_getlabel+0x16d>
c0006f01:	eb 0f                	jmp    c0006f12 <f_getlabel+0x190>
c0006f03:	83 f8 04             	cmp    eax,0x4
c0006f06:	75 5c                	jne    c0006f64 <f_getlabel+0x1e2>
c0006f08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006f0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f12:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006f1a:	74 4a                	je     c0006f66 <f_getlabel+0x1e4>
c0006f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f20:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006f23:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f26:	e8 5e b5 ff ff       	call   c0002489 <move_window>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	75 35                	jne    c0006f66 <f_getlabel+0x1e4>
c0006f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f35:	b8 43 00 00 00       	mov    eax,0x43
c0006f3a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f3c:	80 f9 03             	cmp    cl,0x3
c0006f3f:	74 0f                	je     c0006f50 <f_getlabel+0x1ce>
c0006f41:	31 c0                	xor    eax,eax
c0006f43:	80 f9 04             	cmp    cl,0x4
c0006f46:	0f 94 c0             	sete   al
c0006f49:	48                   	dec    eax
c0006f4a:	83 e0 c3             	and    eax,0xffffffc3
c0006f4d:	83 c0 64             	add    eax,0x64
c0006f50:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f54:	e8 5f ad ff ff       	call   c0001cb8 <ld_dword>
c0006f59:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f60:	89 07                	mov    DWORD PTR [edi],eax
c0006f62:	eb 02                	jmp    c0006f66 <f_getlabel+0x1e4>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	83 c4 6c             	add    esp,0x6c
c0006f69:	89 f0                	mov    eax,esi
c0006f6b:	5b                   	pop    ebx
c0006f6c:	5e                   	pop    esi
c0006f6d:	5f                   	pop    edi
c0006f6e:	5d                   	pop    ebp
c0006f6f:	c3                   	ret    

c0006f70 <f_setlabel>:
c0006f70:	56                   	push   esi
c0006f71:	b9 02 00 00 00       	mov    ecx,0x2
c0006f76:	53                   	push   ebx
c0006f77:	83 ec 74             	sub    esp,0x74
c0006f7a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f7e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f85:	e8 b1 b7 ff ff       	call   c000273b <mount_volume>
c0006f8a:	89 c6                	mov    esi,eax
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	0f 85 41 02 00 00    	jne    c00071d5 <f_setlabel+0x265>
c0006f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f9b:	0f 85 8e 00 00 00    	jne    c000702f <f_setlabel+0xbf>
c0006fa1:	b9 16 00 00 00       	mov    ecx,0x16
c0006fa6:	31 d2                	xor    edx,edx
c0006fa8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fac:	31 db                	xor    ebx,ebx
c0006fae:	e8 8c ad ff ff       	call   c0001d3f <mem_set>
c0006fb3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbd:	0f 86 0a 01 00 00    	jbe    c00070cd <f_setlabel+0x15d>
c0006fc3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fca:	e8 b6 ad ff ff       	call   c0001d85 <tchar2uni>
c0006fcf:	89 c6                	mov    esi,eax
c0006fd1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd6:	76 2a                	jbe    c0007002 <f_setlabel+0x92>
c0006fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0006fdb:	74 05                	je     c0006fe2 <f_setlabel+0x72>
c0006fdd:	83 fb 09             	cmp    ebx,0x9
c0006fe0:	76 0a                	jbe    c0006fec <f_setlabel+0x7c>
c0006fe2:	be 06 00 00 00       	mov    esi,0x6
c0006fe7:	e9 e9 01 00 00       	jmp    c00071d5 <f_setlabel+0x265>
c0006fec:	89 c2                	mov    edx,eax
c0006fee:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff5:	c1 ea 10             	shr    edx,0x10
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 1d ad ff ff       	call   c0001d1d <st_word>
c0007000:	eb 04                	jmp    c0007006 <f_setlabel+0x96>
c0007002:	85 c0                	test   eax,eax
c0007004:	74 dc                	je     c0006fe2 <f_setlabel+0x72>
c0007006:	89 f2                	mov    edx,esi
c0007008:	b8 97 f6 01 c0       	mov    eax,0xc001f697
c000700d:	e8 5b ad ff ff       	call   c0001d6d <chk_chr>
c0007012:	85 c0                	test   eax,eax
c0007014:	75 cc                	jne    c0006fe2 <f_setlabel+0x72>
c0007016:	83 fb 0a             	cmp    ebx,0xa
c0007019:	77 c7                	ja     c0006fe2 <f_setlabel+0x72>
c000701b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000701e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0007022:	0f b7 d6             	movzx  edx,si
c0007025:	01 c8                	add    eax,ecx
c0007027:	43                   	inc    ebx
c0007028:	e8 f0 ac ff ff       	call   c0001d1d <st_word>
c000702d:	eb 84                	jmp    c0006fb3 <f_setlabel+0x43>
c000702f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007034:	ba 20 00 00 00       	mov    edx,0x20
c0007039:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000703d:	31 db                	xor    ebx,ebx
c000703f:	e8 fb ac ff ff       	call   c0001d3f <mem_set>
c0007044:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000704b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000704e:	76 60                	jbe    c00070b0 <f_setlabel+0x140>
c0007050:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007057:	e8 29 ad ff ff       	call   c0001d85 <tchar2uni>
c000705c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007061:	0f 87 7b ff ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	50                   	push   eax
c000706b:	e8 97 15 00 00       	call   c0008607 <ff_wtoupper>
c0007070:	5a                   	pop    edx
c0007071:	59                   	pop    ecx
c0007072:	68 b5 01 00 00       	push   0x1b5
c0007077:	50                   	push   eax
c0007078:	e8 8e 14 00 00       	call   c000850b <ff_uni2oem>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	89 c6                	mov    esi,eax
c0007082:	66 85 c0             	test   ax,ax
c0007085:	0f 84 57 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c000708b:	0f b7 d0             	movzx  edx,ax
c000708e:	b8 90 f6 01 c0       	mov    eax,0xc001f690
c0007093:	e8 d5 ac ff ff       	call   c0001d6d <chk_chr>
c0007098:	85 c0                	test   eax,eax
c000709a:	0f 85 42 ff ff ff    	jne    c0006fe2 <f_setlabel+0x72>
c00070a0:	66 81 fe ff 00       	cmp    si,0xff
c00070a5:	0f 87 14 01 00 00    	ja     c00071bf <f_setlabel+0x24f>
c00070ab:	e9 fa 00 00 00       	jmp    c00071aa <f_setlabel+0x23a>
c00070b0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c00070b5:	0f 84 27 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c00070bb:	85 db                	test   ebx,ebx
c00070bd:	74 0e                	je     c00070cd <f_setlabel+0x15d>
c00070bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00070c2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070c7:	75 04                	jne    c00070cd <f_setlabel+0x15d>
c00070c9:	89 c3                	mov    ebx,eax
c00070cb:	eb ee                	jmp    c00070bb <f_setlabel+0x14b>
c00070cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070d1:	31 d2                	xor    edx,edx
c00070d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070e3:	e8 1f c1 ff ff       	call   c0003207 <dir_sdi>
c00070e8:	89 c6                	mov    esi,eax
c00070ea:	85 c0                	test   eax,eax
c00070ec:	0f 85 e3 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 17 c9 ff ff       	call   c0003a17 <dir_read>
c0007100:	85 c0                	test   eax,eax
c0007102:	75 21                	jne    c0007125 <f_setlabel+0x1b5>
c0007104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000710f:	74 5d                	je     c000716e <f_setlabel+0x1fe>
c0007111:	85 db                	test   ebx,ebx
c0007113:	74 0b                	je     c0007120 <f_setlabel+0x1b0>
c0007115:	b9 0b 00 00 00       	mov    ecx,0xb
c000711a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000711e:	eb 70                	jmp    c0007190 <f_setlabel+0x220>
c0007120:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007123:	eb 70                	jmp    c0007195 <f_setlabel+0x225>
c0007125:	83 f8 04             	cmp    eax,0x4
c0007128:	75 7c                	jne    c00071a6 <f_setlabel+0x236>
c000712a:	85 db                	test   ebx,ebx
c000712c:	0f 84 a3 00 00 00    	je     c00071d5 <f_setlabel+0x265>
c0007132:	ba 01 00 00 00       	mov    edx,0x1
c0007137:	8d 44 24 24          	lea    eax,[esp+0x24]
c000713b:	e8 51 ca ff ff       	call   c0003b91 <dir_alloc>
c0007140:	89 c6                	mov    esi,eax
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 85 8b 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c000714a:	31 d2                	xor    edx,edx
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	b9 20 00 00 00       	mov    ecx,0x20
c0007155:	e8 e5 ab ff ff       	call   c0001d3f <mem_set>
c000715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007161:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007165:	75 18                	jne    c000717f <f_setlabel+0x20f>
c0007167:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000716a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007171:	b9 16 00 00 00       	mov    ecx,0x16
c0007176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000717a:	83 c0 02             	add    eax,0x2
c000717d:	eb 9b                	jmp    c000711a <f_setlabel+0x1aa>
c000717f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007183:	b9 0b 00 00 00       	mov    ecx,0xb
c0007188:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000718c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007190:	e8 95 ab ff ff       	call   c0001d2a <mem_cpy>
c0007195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007199:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000719d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a1:	e8 0e d4 ff ff       	call   c00045b4 <sync_fs>
c00071a6:	89 c6                	mov    esi,eax
c00071a8:	eb 2b                	jmp    c00071d5 <f_setlabel+0x265>
c00071aa:	83 fb 0a             	cmp    ebx,0xa
c00071ad:	0f 87 2f fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071b3:	89 f0                	mov    eax,esi
c00071b5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071b9:	43                   	inc    ebx
c00071ba:	e9 85 fe ff ff       	jmp    c0007044 <f_setlabel+0xd4>
c00071bf:	83 fb 09             	cmp    ebx,0x9
c00071c2:	0f 87 1a fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071c8:	89 f0                	mov    eax,esi
c00071ca:	66 c1 e8 08          	shr    ax,0x8
c00071ce:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071d2:	43                   	inc    ebx
c00071d3:	eb de                	jmp    c00071b3 <f_setlabel+0x243>
c00071d5:	89 f0                	mov    eax,esi
c00071d7:	83 c4 74             	add    esp,0x74
c00071da:	5b                   	pop    ebx
c00071db:	5e                   	pop    esi
c00071dc:	c3                   	ret    

c00071dd <f_forward>:
c00071dd:	55                   	push   ebp
c00071de:	57                   	push   edi
c00071df:	56                   	push   esi
c00071e0:	53                   	push   ebx
c00071e1:	83 ec 2c             	sub    esp,0x2c
c00071e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071f6:	89 d8                	mov    eax,ebx
c00071f8:	e8 b1 b1 ff ff       	call   c00023ae <validate>
c00071fd:	89 c5                	mov    ebp,eax
c00071ff:	85 c0                	test   eax,eax
c0007201:	0f 85 aa 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007207:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000720b:	85 ed                	test   ebp,ebp
c000720d:	0f 85 9e 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007213:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007217:	0f 84 8f 01 00 00    	je     c00073ac <f_forward+0x1cf>
c000721d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007220:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007223:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007226:	bf 00 00 00 00       	mov    edi,0x0
c000722b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000722e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007232:	89 d1                	mov    ecx,edx
c0007234:	19 f9                	sbb    ecx,edi
c0007236:	0f 83 cf 00 00 00    	jae    c000730b <f_forward+0x12e>
c000723c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007240:	e9 c6 00 00 00       	jmp    c000730b <f_forward+0x12e>
c0007245:	50                   	push   eax
c0007246:	50                   	push   eax
c0007247:	6a 00                	push   0x0
c0007249:	6a 00                	push   0x0
c000724b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	85 c0                	test   eax,eax
c0007254:	0f 84 57 01 00 00    	je     c00073b1 <f_forward+0x1d4>
c000725a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007264:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007268:	89 d7                	mov    edi,edx
c000726a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000726d:	89 c6                	mov    esi,eax
c000726f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007273:	21 ce                	and    esi,ecx
c0007275:	89 c1                	mov    ecx,eax
c0007277:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000727d:	0f 84 98 00 00 00    	je     c000731b <f_forward+0x13e>
c0007283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007287:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000728a:	89 c8                	mov    eax,ecx
c000728c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007290:	e8 af ac ff ff       	call   c0001f44 <clst2sect>
c0007295:	89 d7                	mov    edi,edx
c0007297:	09 c7                	or     edi,eax
c0007299:	0f 84 9e 00 00 00    	je     c000733d <f_forward+0x160>
c000729f:	31 ff                	xor    edi,edi
c00072a1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00072a4:	01 c6                	add    esi,eax
c00072a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00072aa:	11 d7                	adc    edi,edx
c00072ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00072af:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00072b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b6:	39 fa                	cmp    edx,edi
c00072b8:	0f 85 a2 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072be:	39 f0                	cmp    eax,esi
c00072c0:	0f 85 9a 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072c9:	ba 00 02 00 00       	mov    edx,0x200
c00072ce:	25 ff 01 00 00       	and    eax,0x1ff
c00072d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072d7:	29 c2                	sub    edx,eax
c00072d9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072dc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072df:	39 d1                	cmp    ecx,edx
c00072e1:	76 02                	jbe    c00072e5 <f_forward+0x108>
c00072e3:	89 d1                	mov    ecx,edx
c00072e5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072e8:	52                   	push   edx
c00072e9:	01 c6                	add    esi,eax
c00072eb:	52                   	push   edx
c00072ec:	51                   	push   ecx
c00072ed:	56                   	push   esi
c00072ee:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	85 c0                	test   eax,eax
c00072f7:	74 44                	je     c000733d <f_forward+0x160>
c00072f9:	31 ff                	xor    edi,edi
c00072fb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072fe:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007301:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007305:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007309:	01 07                	add    DWORD PTR [edi],eax
c000730b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007310:	0f 85 2f ff ff ff    	jne    c0007245 <f_forward+0x68>
c0007316:	e9 96 00 00 00       	jmp    c00073b1 <f_forward+0x1d4>
c000731b:	85 f6                	test   esi,esi
c000731d:	0f 85 60 ff ff ff    	jne    c0007283 <f_forward+0xa6>
c0007323:	89 d7                	mov    edi,edx
c0007325:	09 c7                	or     edi,eax
c0007327:	75 05                	jne    c000732e <f_forward+0x151>
c0007329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000732c:	eb 0a                	jmp    c0007338 <f_forward+0x15b>
c000732e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007331:	89 d8                	mov    eax,ebx
c0007333:	e8 d9 bc ff ff       	call   c0003011 <get_fat>
c0007338:	83 f8 01             	cmp    eax,0x1
c000733b:	77 0b                	ja     c0007348 <f_forward+0x16b>
c000733d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007341:	bd 02 00 00 00       	mov    ebp,0x2
c0007346:	eb 69                	jmp    c00073b1 <f_forward+0x1d4>
c0007348:	83 f8 ff             	cmp    eax,0xffffffff
c000734b:	75 0b                	jne    c0007358 <f_forward+0x17b>
c000734d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007351:	bd 01 00 00 00       	mov    ebp,0x1
c0007356:	eb 59                	jmp    c00073b1 <f_forward+0x1d4>
c0007358:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000735b:	e9 23 ff ff ff       	jmp    c0007283 <f_forward+0xa6>
c0007360:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007364:	79 20                	jns    c0007386 <f_forward+0x1a9>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	6a 01                	push   0x1
c000736b:	52                   	push   edx
c000736c:	50                   	push   eax
c000736d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007371:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007375:	50                   	push   eax
c0007376:	e8 fb a8 ff ff       	call   c0001c76 <disk_write>
c000737b:	83 c4 20             	add    esp,0x20
c000737e:	85 c0                	test   eax,eax
c0007380:	75 cb                	jne    c000734d <f_forward+0x170>
c0007382:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007386:	83 ec 0c             	sub    esp,0xc
c0007389:	6a 01                	push   0x1
c000738b:	57                   	push   edi
c000738c:	56                   	push   esi
c000738d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007399:	50                   	push   eax
c000739a:	e8 c1 a8 ff ff       	call   c0001c60 <disk_read>
c000739f:	83 c4 20             	add    esp,0x20
c00073a2:	85 c0                	test   eax,eax
c00073a4:	0f 84 1c ff ff ff    	je     c00072c6 <f_forward+0xe9>
c00073aa:	eb a1                	jmp    c000734d <f_forward+0x170>
c00073ac:	bd 07 00 00 00       	mov    ebp,0x7
c00073b1:	83 c4 2c             	add    esp,0x2c
c00073b4:	89 e8                	mov    eax,ebp
c00073b6:	5b                   	pop    ebx
c00073b7:	5e                   	pop    esi
c00073b8:	5f                   	pop    edi
c00073b9:	5d                   	pop    ebp
c00073ba:	c3                   	ret    

c00073bb <f_mkfs>:
c00073bb:	55                   	push   ebp
c00073bc:	57                   	push   edi
c00073bd:	56                   	push   esi
c00073be:	53                   	push   ebx
c00073bf:	bb 0b 00 00 00       	mov    ebx,0xb
c00073c4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073ca:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073d1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073d8:	e8 b0 ae ff ff       	call   c000228d <get_ldnumber>
c00073dd:	85 c0                	test   eax,eax
c00073df:	0f 88 ec 10 00 00    	js     c00084d1 <f_mkfs+0x1116>
c00073e5:	8b 14 85 60 b9 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc46a0]
c00073ec:	85 d2                	test   edx,edx
c00073ee:	74 03                	je     c00073f3 <f_mkfs+0x38>
c00073f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073f3:	85 f6                	test   esi,esi
c00073f5:	75 05                	jne    c00073fc <f_mkfs+0x41>
c00073f7:	be 80 f6 01 c0       	mov    esi,0xc001f680
c00073fc:	83 ec 0c             	sub    esp,0xc
c00073ff:	0f b6 c0             	movzx  eax,al
c0007402:	bb 03 00 00 00       	mov    ebx,0x3
c0007407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000740b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000740f:	e8 49 a8 ff ff       	call   c0001c5d <disk_initialize>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	a8 01                	test   al,0x1
c0007419:	0f 85 b2 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000741f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007424:	a8 04                	test   al,0x4
c0007426:	0f 85 a5 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000742c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000742f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007433:	85 c0                	test   eax,eax
c0007435:	75 20                	jne    c0007457 <f_mkfs+0x9c>
c0007437:	51                   	push   ecx
c0007438:	8d 44 24 78          	lea    eax,[esp+0x78]
c000743c:	50                   	push   eax
c000743d:	6a 03                	push   0x3
c000743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007443:	e8 44 a8 ff ff       	call   c0001c8c <disk_ioctl>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	85 c0                	test   eax,eax
c000744d:	74 08                	je     c0007457 <f_mkfs+0x9c>
c000744f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007457:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000745b:	8d 42 ff             	lea    eax,[edx-0x1]
c000745e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007463:	77 04                	ja     c0007469 <f_mkfs+0xae>
c0007465:	85 c2                	test   edx,eax
c0007467:	74 08                	je     c0007471 <f_mkfs+0xb6>
c0007469:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007471:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007474:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007478:	48                   	dec    eax
c0007479:	3c 01                	cmp    al,0x1
c000747b:	76 05                	jbe    c0007482 <f_mkfs+0xc7>
c000747d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007482:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007489:	48                   	dec    eax
c000748a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000748f:	77 07                	ja     c0007498 <f_mkfs+0xdd>
c0007491:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007496:	74 08                	je     c00074a0 <f_mkfs+0xe5>
c0007498:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00074a0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00074a3:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00074a9:	77 07                	ja     c00074b2 <f_mkfs+0xf7>
c00074ab:	8d 43 ff             	lea    eax,[ebx-0x1]
c00074ae:	85 d8                	test   eax,ebx
c00074b0:	74 02                	je     c00074b4 <f_mkfs+0xf9>
c00074b2:	31 db                	xor    ebx,ebx
c00074b4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00074bf:	77 0a                	ja     c00074cb <f_mkfs+0x110>
c00074c1:	bb 11 00 00 00       	mov    ebx,0x11
c00074c6:	e9 06 10 00 00       	jmp    c00084d1 <f_mkfs+0x1116>
c00074cb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074d2:	8b 36                	mov    esi,DWORD PTR [esi]
c00074d4:	85 ed                	test   ebp,ebp
c00074d6:	75 1e                	jne    c00074f6 <f_mkfs+0x13b>
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074e7:	50                   	push   eax
c00074e8:	e8 f1 0f 00 00       	call   c00084de <ff_memalloc>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	89 c5                	mov    ebp,eax
c00074f2:	85 c0                	test   eax,eax
c00074f4:	74 cb                	je     c00074c1 <f_mkfs+0x106>
c00074f6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074fe:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007506:	52                   	push   edx
c0007507:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000750b:	50                   	push   eax
c000750c:	6a 01                	push   0x1
c000750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007512:	e8 75 a7 ff ff       	call   c0001c8c <disk_ioctl>
c0007517:	83 c4 10             	add    esp,0x10
c000751a:	85 c0                	test   eax,eax
c000751c:	0f 85 4a 0f 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007522:	89 f1                	mov    ecx,esi
c0007524:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000752c:	83 e1 0f             	and    ecx,0xf
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000753b:	83 e6 08             	and    esi,0x8
c000753e:	75 56                	jne    c0007596 <f_mkfs+0x1db>
c0007540:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007544:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007548:	83 ff 00             	cmp    edi,0x0
c000754b:	76 20                	jbe    c000756d <f_mkfs+0x1b2>
c000754d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007552:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000755a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007560:	83 d7 ff             	adc    edi,0xffffffff
c0007563:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007567:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000756b:	eb 21                	jmp    c000758e <f_mkfs+0x1d3>
c000756d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007572:	39 f2                	cmp    edx,esi
c0007574:	19 f8                	sbb    eax,edi
c0007576:	73 1e                	jae    c0007596 <f_mkfs+0x1db>
c0007578:	83 c6 c1             	add    esi,0xffffffc1
c000757b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007583:	83 d7 ff             	adc    edi,0xffffffff
c0007586:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000758a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000758e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007596:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000759a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	31 c0                	xor    eax,eax
c00075a7:	ba 7f 00 00 00       	mov    edx,0x7f
c00075ac:	89 c7                	mov    edi,eax
c00075ae:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075b1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075b5:	0f 83 c5 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	c1 ef 09             	shr    edi,0x9
c00075c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00075c4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075cb:	c1 ef 09             	shr    edi,0x9
c00075ce:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075d3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075d7:	74 29                	je     c0007602 <f_mkfs+0x247>
c00075d9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075df:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075e4:	0f 97 c2             	seta   dl
c00075e7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ee:	0f 92 c0             	setb   al
c00075f1:	08 c2                	or     dl,al
c00075f3:	75 5b                	jne    c0007650 <f_mkfs+0x295>
c00075f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f9:	83 e0 07             	and    eax,0x7
c00075fc:	3c 04                	cmp    al,0x4
c00075fe:	74 50                	je     c0007650 <f_mkfs+0x295>
c0007600:	eb 1b                	jmp    c000761d <f_mkfs+0x262>
c0007602:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007607:	0f 87 73 0a 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000760d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007613:	76 08                	jbe    c000761d <f_mkfs+0x262>
c0007615:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000761d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007621:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007625:	83 e0 01             	and    eax,0x1
c0007628:	80 e1 02             	and    cl,0x2
c000762b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000762f:	74 0d                	je     c000763e <f_mkfs+0x283>
c0007631:	84 c0                	test   al,al
c0007633:	0f 84 53 09 00 00    	je     c0007f8c <f_mkfs+0xbd1>
c0007639:	e9 12 08 00 00       	jmp    c0007e50 <f_mkfs+0xa95>
c000763e:	bb 13 00 00 00       	mov    ebx,0x13
c0007643:	84 c0                	test   al,al
c0007645:	0f 85 05 08 00 00    	jne    c0007e50 <f_mkfs+0xa95>
c000764b:	e9 39 0e 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c0007650:	31 c0                	xor    eax,eax
c0007652:	ba ff 0f 00 00       	mov    edx,0xfff
c0007657:	89 c7                	mov    edi,eax
c0007659:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000765c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007660:	0f 83 1a 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007666:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000766c:	77 39                	ja     c00076a7 <f_mkfs+0x2ec>
c000766e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007673:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000767b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000767e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007682:	73 08                	jae    c000768c <f_mkfs+0x2d1>
c0007684:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000768c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007691:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007694:	b8 00 00 00 00       	mov    eax,0x0
c0007699:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000769d:	73 08                	jae    c00076a7 <f_mkfs+0x2ec>
c000769f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00076a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00076af:	83 c0 20             	add    eax,0x20
c00076b2:	83 d2 00             	adc    edx,0x0
c00076b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00076b9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	31 d2                	xor    edx,edx
c00076c3:	31 ff                	xor    edi,edi
c00076c5:	52                   	push   edx
c00076c6:	89 fb                	mov    ebx,edi
c00076c8:	50                   	push   eax
c00076c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076d1:	e8 e6 6f 01 00       	call   c001e6bc <__udivdi3>
c00076d6:	83 c4 10             	add    esp,0x10
c00076d9:	c1 e0 02             	shl    eax,0x2
c00076dc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076e0:	05 07 02 00 00       	add    eax,0x207
c00076e5:	89 f1                	mov    ecx,esi
c00076e7:	c1 e8 09             	shr    eax,0x9
c00076ea:	83 c1 ff             	add    ecx,0xffffffff
c00076ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076f1:	83 d3 ff             	adc    ebx,0xffffffff
c00076f4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076f8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	01 c8                	add    eax,ecx
c0007700:	11 da                	adc    edx,ebx
c0007702:	89 c1                	mov    ecx,eax
c0007704:	f7 de                	neg    esi
c0007706:	89 d0                	mov    eax,edx
c0007708:	83 d7 00             	adc    edi,0x0
c000770b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000770f:	f7 df                	neg    edi
c0007711:	21 f1                	and    ecx,esi
c0007713:	21 f8                	and    eax,edi
c0007715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007721:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007725:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007730:	0f ac d0 01          	shrd   eax,edx,0x1
c0007734:	89 df                	mov    edi,ebx
c0007736:	d1 ea                	shr    edx,1
c0007738:	39 c1                	cmp    ecx,eax
c000773a:	19 d7                	sbb    edi,edx
c000773c:	0f 83 3e 09 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007746:	31 d2                	xor    edx,edx
c0007748:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000774c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007750:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000775b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000775f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007763:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007767:	83 f8 0f             	cmp    eax,0xf
c000776a:	0f 86 10 09 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007770:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007778:	0f 87 02 09 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000777e:	31 d2                	xor    edx,edx
c0007780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007784:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000778c:	83 c0 07             	add    eax,0x7
c000778f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007797:	c1 e8 03             	shr    eax,0x3
c000779a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00077a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00077a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a9:	c1 e0 09             	shl    eax,0x9
c00077ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00077b0:	48                   	dec    eax
c00077b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00077b5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00077b9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00077bd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00077c1:	31 d2                	xor    edx,edx
c00077c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077db:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077e3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	31 f6                	xor    esi,esi
c00077eb:	31 db                	xor    ebx,ebx
c00077ed:	85 ff                	test   edi,edi
c00077ef:	74 05                	je     c00077f6 <f_mkfs+0x43b>
c00077f1:	4f                   	dec    edi
c00077f2:	74 44                	je     c0007838 <f_mkfs+0x47d>
c00077f4:	eb 4f                	jmp    c0007845 <f_mkfs+0x48a>
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	0f b7 c3             	movzx  eax,bx
c00077fc:	50                   	push   eax
c00077fd:	e8 05 0e 00 00       	call   c0008607 <ff_wtoupper>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	89 c1                	mov    ecx,eax
c0007807:	8d 53 01             	lea    edx,[ebx+0x1]
c000780a:	66 39 c3             	cmp    bx,ax
c000780d:	75 3e                	jne    c000784d <f_mkfs+0x492>
c000780f:	be 01 00 00 00       	mov    esi,0x1
c0007814:	89 df                	mov    edi,ebx
c0007816:	66 01 f7             	add    di,si
c0007819:	75 07                	jne    c0007822 <f_mkfs+0x467>
c000781b:	83 fe 7f             	cmp    esi,0x7f
c000781e:	77 31                	ja     c0007851 <f_mkfs+0x496>
c0007820:	eb 16                	jmp    c0007838 <f_mkfs+0x47d>
c0007822:	83 ec 0c             	sub    esp,0xc
c0007825:	0f b7 ff             	movzx  edi,di
c0007828:	57                   	push   edi
c0007829:	e8 d9 0d 00 00       	call   c0008607 <ff_wtoupper>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	39 c7                	cmp    edi,eax
c0007833:	75 e6                	jne    c000781b <f_mkfs+0x460>
c0007835:	46                   	inc    esi
c0007836:	eb dc                	jmp    c0007814 <f_mkfs+0x459>
c0007838:	31 c0                	xor    eax,eax
c000783a:	89 d9                	mov    ecx,ebx
c000783c:	4e                   	dec    esi
c000783d:	0f 95 c0             	setne  al
c0007840:	43                   	inc    ebx
c0007841:	89 c7                	mov    edi,eax
c0007843:	eb 14                	jmp    c0007859 <f_mkfs+0x49e>
c0007845:	89 f1                	mov    ecx,esi
c0007847:	01 f3                	add    ebx,esi
c0007849:	31 ff                	xor    edi,edi
c000784b:	eb 0c                	jmp    c0007859 <f_mkfs+0x49e>
c000784d:	89 d3                	mov    ebx,edx
c000784f:	eb 08                	jmp    c0007859 <f_mkfs+0x49e>
c0007851:	bf 02 00 00 00       	mov    edi,0x2
c0007856:	83 c9 ff             	or     ecx,0xffffffff
c0007859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007860:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007864:	0f b6 c1             	movzx  eax,cl
c0007867:	e8 3a a9 ff ff       	call   c00021a6 <xsum32>
c000786c:	66 c1 e9 08          	shr    cx,0x8
c0007870:	89 c2                	mov    edx,eax
c0007872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007875:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007879:	0f b7 c1             	movzx  eax,cx
c000787c:	e8 25 a9 ff ff       	call   c00021a6 <xsum32>
c0007881:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007886:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000788a:	66 85 db             	test   bx,bx
c000788d:	74 1f                	je     c00078ae <f_mkfs+0x4f3>
c000788f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007892:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007899:	83 c0 02             	add    eax,0x2
c000789c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00078a2:	39 c2                	cmp    edx,eax
c00078a4:	74 08                	je     c00078ae <f_mkfs+0x4f3>
c00078a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a9:	e9 3f ff ff ff       	jmp    c00077ed <f_mkfs+0x432>
c00078ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	05 01 02 00 00       	add    eax,0x201
c00078b9:	c1 e8 09             	shr    eax,0x9
c00078bc:	50                   	push   eax
c00078bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00078c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c9:	55                   	push   ebp
c00078ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ce:	e8 a3 a3 ff ff       	call   c0001c76 <disk_write>
c00078d3:	83 c4 20             	add    esp,0x20
c00078d6:	85 c0                	test   eax,eax
c00078d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078db:	0f 85 8b 0b 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00078e1:	89 d0                	mov    eax,edx
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078e9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ed:	66 85 db             	test   bx,bx
c00078f0:	74 04                	je     c00078f6 <f_mkfs+0x53b>
c00078f2:	31 c0                	xor    eax,eax
c00078f4:	eb b0                	jmp    c00078a6 <f_mkfs+0x4eb>
c00078f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078fe:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007902:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007908:	31 d2                	xor    edx,edx
c000790a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007919:	c1 eb 09             	shr    ebx,0x9
c000791c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007927:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000792b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000792f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007933:	8d 70 01             	lea    esi,[eax+0x1]
c0007936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000793e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007945:	31 d2                	xor    edx,edx
c0007947:	25 00 fe ff ff       	and    eax,0xfffffe00
c000794c:	89 04 24             	mov    DWORD PTR [esp],eax
c000794f:	89 c1                	mov    ecx,eax
c0007951:	89 e8                	mov    eax,ebp
c0007953:	e8 e7 a3 ff ff       	call   c0001d3f <mem_set>
c0007958:	31 c0                	xor    eax,eax
c000795a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000795d:	76 10                	jbe    c000796f <f_mkfs+0x5b4>
c000795f:	83 fe 07             	cmp    esi,0x7
c0007962:	76 0b                	jbe    c000796f <f_mkfs+0x5b4>
c0007964:	40                   	inc    eax
c0007965:	83 ee 08             	sub    esi,0x8
c0007968:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000796d:	eb eb                	jmp    c000795a <f_mkfs+0x59f>
c000796f:	b2 01                	mov    dl,0x1
c0007971:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007975:	85 f6                	test   esi,esi
c0007977:	74 0c                	je     c0007985 <f_mkfs+0x5ca>
c0007979:	39 04 24             	cmp    DWORD PTR [esp],eax
c000797c:	76 07                	jbe    c0007985 <f_mkfs+0x5ca>
c000797e:	08 11                	or     BYTE PTR [ecx],dl
c0007980:	4e                   	dec    esi
c0007981:	d1 e2                	shl    edx,1
c0007983:	eb f0                	jmp    c0007975 <f_mkfs+0x5ba>
c0007985:	89 df                	mov    edi,ebx
c0007987:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000798b:	76 04                	jbe    c0007991 <f_mkfs+0x5d6>
c000798d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007991:	83 ec 0c             	sub    esp,0xc
c0007994:	57                   	push   edi
c0007995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	55                   	push   ebp
c000799e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a2:	e8 cf a2 ff ff       	call   c0001c76 <disk_write>
c00079a7:	83 c4 20             	add    esp,0x20
c00079aa:	85 c0                	test   eax,eax
c00079ac:	0f 85 ba 0a 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00079b2:	31 d2                	xor    edx,edx
c00079b4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00079b8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00079bc:	29 fb                	sub    ebx,edi
c00079be:	0f 85 7a ff ff ff    	jne    c000793e <f_mkfs+0x583>
c00079c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079d0:	31 f6                	xor    esi,esi
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079d9:	31 d2                	xor    edx,edx
c00079db:	89 e8                	mov    eax,ebp
c00079dd:	e8 5d a3 ff ff       	call   c0001d3f <mem_set>
c00079e2:	31 c9                	xor    ecx,ecx
c00079e4:	85 db                	test   ebx,ebx
c00079e6:	75 40                	jne    c0007a28 <f_mkfs+0x66d>
c00079e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	bb 02 00 00 00       	mov    ebx,0x2
c00079f4:	e8 28 a3 ff ff       	call   c0001d21 <st_dword>
c00079f9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079fc:	83 ca ff             	or     edx,0xffffffff
c00079ff:	e8 1d a3 ff ff       	call   c0001d21 <st_dword>
c0007a04:	b9 08 00 00 00       	mov    ecx,0x8
c0007a09:	eb 1d                	jmp    c0007a28 <f_mkfs+0x66d>
c0007a0b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0e:	76 3b                	jbe    c0007a4b <f_mkfs+0x690>
c0007a10:	43                   	inc    ebx
c0007a11:	83 fe 01             	cmp    esi,0x1
c0007a14:	89 da                	mov    edx,ebx
c0007a16:	77 03                	ja     c0007a1b <f_mkfs+0x660>
c0007a18:	83 ca ff             	or     edx,0xffffffff
c0007a1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007a1f:	4e                   	dec    esi
c0007a20:	e8 fc a2 ff ff       	call   c0001d21 <st_dword>
c0007a25:	83 c1 04             	add    ecx,0x4
c0007a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2c:	85 f6                	test   esi,esi
c0007a2e:	75 db                	jne    c0007a0b <f_mkfs+0x650>
c0007a30:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a35:	77 14                	ja     c0007a4b <f_mkfs+0x690>
c0007a37:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a3b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a42:	85 f6                	test   esi,esi
c0007a44:	74 05                	je     c0007a4b <f_mkfs+0x690>
c0007a46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a49:	77 dd                	ja     c0007a28 <f_mkfs+0x66d>
c0007a4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a53:	39 cf                	cmp    edi,ecx
c0007a55:	76 02                	jbe    c0007a59 <f_mkfs+0x69e>
c0007a57:	89 cf                	mov    edi,ecx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a65:	55                   	push   ebp
c0007a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6a:	e8 07 a2 ff ff       	call   c0001c76 <disk_write>
c0007a6f:	83 c4 20             	add    esp,0x20
c0007a72:	85 c0                	test   eax,eax
c0007a74:	0f 85 f2 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007a7a:	31 d2                	xor    edx,edx
c0007a7c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a80:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a84:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a88:	0f 85 48 ff ff ff    	jne    c00079d6 <f_mkfs+0x61b>
c0007a8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a91:	31 d2                	xor    edx,edx
c0007a93:	89 e8                	mov    eax,ebp
c0007a95:	31 ff                	xor    edi,edi
c0007a97:	e8 a3 a2 ff ff       	call   c0001d3f <mem_set>
c0007a9c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a9f:	ba 02 00 00 00       	mov    edx,0x2
c0007aa4:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007aa8:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007aac:	e8 70 a2 ff ff       	call   c0001d21 <st_dword>
c0007ab1:	8d 45 38             	lea    eax,[ebp+0x38]
c0007ab4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007ab8:	e8 64 a2 ff ff       	call   c0001d21 <st_dword>
c0007abd:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ac0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ac4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ac8:	e8 54 a2 ff ff       	call   c0001d21 <st_dword>
c0007acd:	8d 45 54             	lea    eax,[ebp+0x54]
c0007ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007ad4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ad8:	83 c2 02             	add    edx,0x2
c0007adb:	e8 41 a2 ff ff       	call   c0001d21 <st_dword>
c0007ae0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ae3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ae7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aeb:	e8 31 a2 ff ff       	call   c0001d21 <st_dword>
c0007af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007af4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007af9:	89 c6                	mov    esi,eax
c0007afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007b0a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007b0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b11:	39 cb                	cmp    ebx,ecx
c0007b13:	76 02                	jbe    c0007b17 <f_mkfs+0x75c>
c0007b15:	89 cb                	mov    ebx,ecx
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	53                   	push   ebx
c0007b1b:	57                   	push   edi
c0007b1c:	56                   	push   esi
c0007b1d:	55                   	push   ebp
c0007b1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b22:	e8 4f a1 ff ff       	call   c0001c76 <disk_write>
c0007b27:	83 c4 20             	add    esp,0x20
c0007b2a:	85 c0                	test   eax,eax
c0007b2c:	0f 85 3a 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007b32:	31 d2                	xor    edx,edx
c0007b34:	b9 00 02 00 00       	mov    ecx,0x200
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 ff a1 ff ff       	call   c0001d3f <mem_set>
c0007b40:	31 d2                	xor    edx,edx
c0007b42:	01 de                	add    esi,ebx
c0007b44:	11 d7                	adc    edi,edx
c0007b46:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b49:	75 bf                	jne    c0007b0a <f_mkfs+0x74f>
c0007b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b53:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b5b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	89 e8                	mov    eax,ebp
c0007b64:	e8 d6 a1 ff ff       	call   c0001d3f <mem_set>
c0007b69:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b6e:	ba 60 f7 01 c0       	mov    edx,0xc001f760
c0007b73:	89 e8                	mov    eax,ebp
c0007b75:	e8 b0 a1 ff ff       	call   c0001d2a <mem_cpy>
c0007b7a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b85:	e8 9a a1 ff ff       	call   c0001d24 <st_qword>
c0007b8a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b8e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b95:	e8 8a a1 ff ff       	call   c0001d24 <st_qword>
c0007b9a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b9d:	ba 20 00 00 00       	mov    edx,0x20
c0007ba2:	e8 7a a1 ff ff       	call   c0001d21 <st_dword>
c0007ba7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007bab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007baf:	e8 6d a1 ff ff       	call   c0001d21 <st_dword>
c0007bb4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007bbc:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007bc0:	e8 5c a1 ff ff       	call   c0001d21 <st_dword>
c0007bc5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007bc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bcc:	e8 50 a1 ff ff       	call   c0001d21 <st_dword>
c0007bd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0007bd8:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bdb:	e8 41 a1 ff ff       	call   c0001d21 <st_dword>
c0007be0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007be3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007be8:	e8 34 a1 ff ff       	call   c0001d21 <st_dword>
c0007bed:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bf0:	ba 00 01 00 00       	mov    edx,0x100
c0007bf5:	e8 23 a1 ff ff       	call   c0001d1d <st_word>
c0007bfa:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bfe:	b8 0a 00 00 00       	mov    eax,0xa
c0007c03:	48                   	dec    eax
c0007c04:	74 05                	je     c0007c0b <f_mkfs+0x850>
c0007c06:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007c09:	eb f8                	jmp    c0007c03 <f_mkfs+0x848>
c0007c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c0f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007c1b:	74 05                	je     c0007c22 <f_mkfs+0x867>
c0007c1d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007c20:	eb f5                	jmp    c0007c17 <f_mkfs+0x85c>
c0007c22:	8d 45 78             	lea    eax,[ebp+0x78]
c0007c25:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c2a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	e8 e6 a0 ff ff       	call   c0001d1d <st_word>
c0007c37:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c45:	e8 d3 a0 ff ff       	call   c0001d1d <st_word>
c0007c4a:	31 c9                	xor    ecx,ecx
c0007c4c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c4f:	83 f8 01             	cmp    eax,0x1
c0007c52:	76 13                	jbe    c0007c67 <f_mkfs+0x8ac>
c0007c54:	83 f9 70             	cmp    ecx,0x70
c0007c57:	74 0e                	je     c0007c67 <f_mkfs+0x8ac>
c0007c59:	89 da                	mov    edx,ebx
c0007c5b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c60:	e8 41 a5 ff ff       	call   c00021a6 <xsum32>
c0007c65:	89 c3                	mov    ebx,eax
c0007c67:	41                   	inc    ecx
c0007c68:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c6e:	75 dc                	jne    c0007c4c <f_mkfs+0x891>
c0007c70:	89 f0                	mov    eax,esi
c0007c72:	89 fa                	mov    edx,edi
c0007c74:	83 c0 01             	add    eax,0x1
c0007c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c7b:	83 d2 00             	adc    edx,0x0
c0007c7e:	83 ec 0c             	sub    esp,0xc
c0007c81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c85:	6a 01                	push   0x1
c0007c87:	57                   	push   edi
c0007c88:	56                   	push   esi
c0007c89:	55                   	push   ebp
c0007c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c8e:	e8 e3 9f ff ff       	call   c0001c76 <disk_write>
c0007c93:	83 c4 20             	add    esp,0x20
c0007c96:	85 c0                	test   eax,eax
c0007c98:	0f 85 ce 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ca5:	89 e8                	mov    eax,ebp
c0007ca7:	e8 93 a0 ff ff       	call   c0001d3f <mem_set>
c0007cac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cb4:	e8 64 a0 ff ff       	call   c0001d1d <st_word>
c0007cb9:	89 f0                	mov    eax,esi
c0007cbb:	89 fa                	mov    edx,edi
c0007cbd:	83 c0 09             	add    eax,0x9
c0007cc0:	83 d2 00             	adc    edx,0x0
c0007cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007cca:	31 c9                	xor    ecx,ecx
c0007ccc:	41                   	inc    ecx
c0007ccd:	89 da                	mov    edx,ebx
c0007ccf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cd4:	e8 cd a4 ff ff       	call   c00021a6 <xsum32>
c0007cd9:	89 c3                	mov    ebx,eax
c0007cdb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ce1:	75 e9                	jne    c0007ccc <f_mkfs+0x911>
c0007ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ceb:	83 c0 01             	add    eax,0x1
c0007cee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cf2:	83 d2 00             	adc    edx,0x0
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cfc:	6a 01                	push   0x1
c0007cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d06:	55                   	push   ebp
c0007d07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d0b:	e8 66 9f ff ff       	call   c0001c76 <disk_write>
c0007d10:	83 c4 20             	add    esp,0x20
c0007d13:	85 c0                	test   eax,eax
c0007d15:	0f 85 51 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007d23:	75 09                	jne    c0007d2e <f_mkfs+0x973>
c0007d25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d2c:	74 12                	je     c0007d40 <f_mkfs+0x985>
c0007d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d3e:	eb 8a                	jmp    c0007cca <f_mkfs+0x90f>
c0007d40:	31 d2                	xor    edx,edx
c0007d42:	b9 00 02 00 00       	mov    ecx,0x200
c0007d47:	89 e8                	mov    eax,ebp
c0007d49:	e8 f1 9f ff ff       	call   c0001d3f <mem_set>
c0007d4e:	83 c6 0b             	add    esi,0xb
c0007d51:	83 d7 00             	adc    edi,0x0
c0007d54:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d58:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d5c:	31 c9                	xor    ecx,ecx
c0007d5e:	41                   	inc    ecx
c0007d5f:	89 da                	mov    edx,ebx
c0007d61:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d66:	e8 3b a4 ff ff       	call   c00021a6 <xsum32>
c0007d6b:	89 c3                	mov    ebx,eax
c0007d6d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d73:	75 e9                	jne    c0007d5e <f_mkfs+0x9a3>
c0007d75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7c:	83 c6 01             	add    esi,0x1
c0007d7f:	83 d7 00             	adc    edi,0x0
c0007d82:	83 ec 0c             	sub    esp,0xc
c0007d85:	6a 01                	push   0x1
c0007d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8f:	55                   	push   ebp
c0007d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d94:	e8 dd 9e ff ff       	call   c0001c76 <disk_write>
c0007d99:	83 c4 20             	add    esp,0x20
c0007d9c:	85 c0                	test   eax,eax
c0007d9e:	0f 85 c8 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007da4:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007da8:	75 06                	jne    c0007db0 <f_mkfs+0x9f5>
c0007daa:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007dae:	74 09                	je     c0007db9 <f_mkfs+0x9fe>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007db7:	eb a3                	jmp    c0007d5c <f_mkfs+0x9a1>
c0007db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007dbd:	89 da                	mov    edx,ebx
c0007dbf:	01 e8                	add    eax,ebp
c0007dc1:	e8 5b 9f ff ff       	call   c0001d21 <st_dword>
c0007dc6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007dcb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dd3:	75 e4                	jne    c0007db9 <f_mkfs+0x9fe>
c0007dd5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dd8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ddc:	83 c6 02             	add    esi,0x2
c0007ddf:	83 d7 00             	adc    edi,0x0
c0007de2:	83 ec 0c             	sub    esp,0xc
c0007de5:	6a 01                	push   0x1
c0007de7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007deb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007def:	55                   	push   ebp
c0007df0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df4:	e8 7d 9e ff ff       	call   c0001c76 <disk_write>
c0007df9:	83 c4 20             	add    esp,0x20
c0007dfc:	85 c0                	test   eax,eax
c0007dfe:	0f 85 68 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007e04:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007e09:	74 0d                	je     c0007e18 <f_mkfs+0xa5d>
c0007e0b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007e13:	e9 43 fd ff ff       	jmp    c0007b5b <f_mkfs+0x7a0>
c0007e18:	b1 07                	mov    cl,0x7
c0007e1a:	e9 e3 05 00 00       	jmp    c0008402 <f_mkfs+0x1047>
c0007e1f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007e24:	0f 85 4f 02 00 00    	jne    c0008079 <f_mkfs+0xcbe>
c0007e2a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e2f:	0f 86 22 02 00 00    	jbe    c0008057 <f_mkfs+0xc9c>
c0007e35:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e3a:	0f 85 81 06 00 00    	jne    c00084c1 <f_mkfs+0x1106>
c0007e40:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e47:	83 f8 40             	cmp    eax,0x40
c0007e4a:	0f 87 51 06 00 00    	ja     c00084a1 <f_mkfs+0x10e6>
c0007e50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e54:	85 ff                	test   edi,edi
c0007e56:	75 1c                	jne    c0007e74 <f_mkfs+0xab9>
c0007e58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e5b:	ba 60 f6 01 c0       	mov    edx,0xc001f660
c0007e60:	c1 e9 0c             	shr    ecx,0xc
c0007e63:	bf 01 00 00 00       	mov    edi,0x1
c0007e68:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e6b:	66 85 c0             	test   ax,ax
c0007e6e:	0f 85 95 01 00 00    	jne    c0008009 <f_mkfs+0xc4e>
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e79:	f7 f7                	div    edi
c0007e7b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e80:	0f 86 95 01 00 00    	jbe    c000801b <f_mkfs+0xc60>
c0007e86:	83 c0 02             	add    eax,0x2
c0007e89:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e8e:	01 c0                	add    eax,eax
c0007e90:	05 ff 01 00 00       	add    eax,0x1ff
c0007e95:	be 01 00 00 00       	mov    esi,0x1
c0007e9a:	c1 e8 09             	shr    eax,0x9
c0007e9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ea5:	c1 e0 05             	shl    eax,0x5
c0007ea8:	c1 e8 09             	shr    eax,0x9
c0007eab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007eaf:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007eb4:	31 d2                	xor    edx,edx
c0007eb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007eba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ebe:	89 f0                	mov    eax,esi
c0007ec0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ec4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ed4:	31 d2                	xor    edx,edx
c0007ed6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007edb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007edf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	01 c8                	add    eax,ecx
c0007ee7:	11 da                	adc    edx,ebx
c0007ee9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eed:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ef1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ef5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ef9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007efd:	f7 da                	neg    edx
c0007eff:	21 d1                	and    ecx,edx
c0007f01:	29 d9                	sub    ecx,ebx
c0007f03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f08:	0f 85 20 01 00 00    	jne    c000802e <f_mkfs+0xc73>
c0007f0e:	31 db                	xor    ebx,ebx
c0007f10:	01 ce                	add    esi,ecx
c0007f12:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007f16:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007f22:	c1 e0 04             	shl    eax,0x4
c0007f25:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f29:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f2d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f31:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f38:	19 d3                	sbb    ebx,edx
c0007f3a:	0f 82 40 01 00 00    	jb     c0008080 <f_mkfs+0xcc5>
c0007f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f47:	89 c8                	mov    eax,ecx
c0007f49:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f4e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f52:	29 f0                	sub    eax,esi
c0007f54:	29 d0                	sub    eax,edx
c0007f56:	31 d2                	xor    edx,edx
c0007f58:	f7 f7                	div    edi
c0007f5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5f:	89 c3                	mov    ebx,eax
c0007f61:	0f 85 b8 fe ff ff    	jne    c0007e1f <f_mkfs+0xa64>
c0007f67:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f6c:	0f 87 1d 01 00 00    	ja     c000808f <f_mkfs+0xcd4>
c0007f72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f77:	0f 85 03 01 00 00    	jne    c0008080 <f_mkfs+0xcc5>
c0007f7d:	83 ff 01             	cmp    edi,0x1
c0007f80:	0f 86 fa 00 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007f86:	d1 ef                	shr    edi,1
c0007f88:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f93:	85 db                	test   ebx,ebx
c0007f95:	75 2d                	jne    c0007fc4 <f_mkfs+0xc09>
c0007f97:	89 cb                	mov    ebx,ecx
c0007f99:	ba 70 f6 01 c0       	mov    edx,0xc001f670
c0007f9e:	c1 eb 11             	shr    ebx,0x11
c0007fa1:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007fa9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007fac:	66 85 c0             	test   ax,ax
c0007faf:	74 11                	je     c0007fc2 <f_mkfs+0xc07>
c0007fb1:	83 c2 02             	add    edx,0x2
c0007fb4:	39 d8                	cmp    eax,ebx
c0007fb6:	77 0a                	ja     c0007fc2 <f_mkfs+0xc07>
c0007fb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fbc:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007fc0:	eb e7                	jmp    c0007fa9 <f_mkfs+0xbee>
c0007fc2:	31 db                	xor    ebx,ebx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fcc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fd3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fd8:	c1 ea 09             	shr    edx,0x9
c0007fdb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fe0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fe4:	0f 87 96 00 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c0007fea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fee:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ff6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ffa:	be 20 00 00 00       	mov    esi,0x20
c0007fff:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008004:	e9 a6 fe ff ff       	jmp    c0007eaf <f_mkfs+0xaf4>
c0008009:	83 c2 02             	add    edx,0x2
c000800c:	39 c8                	cmp    eax,ecx
c000800e:	0f 87 60 fe ff ff    	ja     c0007e74 <f_mkfs+0xab9>
c0008014:	01 ff                	add    edi,edi
c0008016:	e9 4d fe ff ff       	jmp    c0007e68 <f_mkfs+0xaad>
c000801b:	8d 04 40             	lea    eax,[eax+eax*2]
c000801e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008023:	40                   	inc    eax
c0008024:	d1 e8                	shr    eax,1
c0008026:	83 c0 03             	add    eax,0x3
c0008029:	e9 62 fe ff ff       	jmp    c0007e90 <f_mkfs+0xad5>
c000802e:	31 d2                	xor    edx,edx
c0008030:	89 c8                	mov    eax,ecx
c0008032:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008036:	85 d2                	test   edx,edx
c0008038:	74 0c                	je     c0008046 <f_mkfs+0xc8b>
c000803a:	49                   	dec    ecx
c000803b:	46                   	inc    esi
c000803c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008041:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008046:	89 c8                	mov    eax,ecx
c0008048:	31 d2                	xor    edx,edx
c000804a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000804e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008052:	e9 c3 fe ff ff       	jmp    c0007f1a <f_mkfs+0xb5f>
c0008057:	3d f5 0f 00 00       	cmp    eax,0xff5
c000805c:	77 31                	ja     c000808f <f_mkfs+0xcd4>
c000805e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008063:	75 1b                	jne    c0008080 <f_mkfs+0xcc5>
c0008065:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806c:	3d 80 00 00 00       	cmp    eax,0x80
c0008071:	0f 86 d9 fd ff ff    	jbe    c0007e50 <f_mkfs+0xa95>
c0008077:	eb 07                	jmp    c0008080 <f_mkfs+0xcc5>
c0008079:	3d f5 0f 00 00       	cmp    eax,0xff5
c000807e:	76 0a                	jbe    c000808a <f_mkfs+0xccf>
c0008080:	bb 0e 00 00 00       	mov    ebx,0xe
c0008085:	e9 ff 03 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c000808a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000808f:	31 d2                	xor    edx,edx
c0008091:	b9 00 02 00 00       	mov    ecx,0x200
c0008096:	89 e8                	mov    eax,ebp
c0008098:	e8 a2 9c ff ff       	call   c0001d3f <mem_set>
c000809d:	b9 0b 00 00 00       	mov    ecx,0xb
c00080a2:	ba 82 f7 01 c0       	mov    edx,0xc001f782
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 7c 9c ff ff       	call   c0001d2a <mem_cpy>
c00080ae:	8d 45 0b             	lea    eax,[ebp+0xb]
c00080b1:	ba 00 02 00 00       	mov    edx,0x200
c00080b6:	e8 62 9c ff ff       	call   c0001d1d <st_word>
c00080bb:	89 f8                	mov    eax,edi
c00080bd:	0f b7 d6             	movzx  edx,si
c00080c0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00080c3:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080c6:	e8 52 9c ff ff       	call   c0001d1d <st_word>
c00080cb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080cf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080d7:	75 08                	jne    c00080e1 <f_mkfs+0xd26>
c00080d9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080e1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080e8:	e8 30 9c ff ff       	call   c0001d1d <st_word>
c00080ed:	b8 ff ff 00 00       	mov    eax,0xffff
c00080f2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080f6:	39 d0                	cmp    eax,edx
c00080f8:	b8 00 00 00 00       	mov    eax,0x0
c00080fd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008101:	72 0a                	jb     c000810d <f_mkfs+0xd52>
c0008103:	8d 45 13             	lea    eax,[ebp+0x13]
c0008106:	e8 12 9c ff ff       	call   c0001d1d <st_word>
c000810b:	eb 08                	jmp    c0008115 <f_mkfs+0xd5a>
c000810d:	8d 45 20             	lea    eax,[ebp+0x20]
c0008110:	e8 0c 9c ff ff       	call   c0001d21 <st_dword>
c0008115:	8d 45 18             	lea    eax,[ebp+0x18]
c0008118:	ba 3f 00 00 00       	mov    edx,0x3f
c000811d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008121:	e8 f7 9b ff ff       	call   c0001d1d <st_word>
c0008126:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008129:	ba ff 00 00 00       	mov    edx,0xff
c000812e:	e8 ea 9b ff ff       	call   c0001d1d <st_word>
c0008133:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000813a:	e8 e2 9b ff ff       	call   c0001d21 <st_dword>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	75 57                	jne    c000819d <f_mkfs+0xde2>
c0008146:	8d 45 43             	lea    eax,[ebp+0x43]
c0008149:	ba 00 00 21 50       	mov    edx,0x50210000
c000814e:	e8 ce 9b ff ff       	call   c0001d21 <st_dword>
c0008153:	8d 45 24             	lea    eax,[ebp+0x24]
c0008156:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000815a:	e8 c2 9b ff ff       	call   c0001d21 <st_dword>
c000815f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008162:	ba 02 00 00 00       	mov    edx,0x2
c0008167:	e8 b5 9b ff ff       	call   c0001d21 <st_dword>
c000816c:	8d 45 30             	lea    eax,[ebp+0x30]
c000816f:	ba 01 00 00 00       	mov    edx,0x1
c0008174:	e8 a4 9b ff ff       	call   c0001d1d <st_word>
c0008179:	8d 45 32             	lea    eax,[ebp+0x32]
c000817c:	ba 06 00 00 00       	mov    edx,0x6
c0008181:	e8 97 9b ff ff       	call   c0001d1d <st_word>
c0008186:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000818a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000818e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008191:	b9 13 00 00 00       	mov    ecx,0x13
c0008196:	ba 8e f7 01 c0       	mov    edx,0xc001f78e
c000819b:	eb 2f                	jmp    c00081cc <f_mkfs+0xe11>
c000819d:	8d 45 27             	lea    eax,[ebp+0x27]
c00081a0:	ba 00 00 21 50       	mov    edx,0x50210000
c00081a5:	e8 77 9b ff ff       	call   c0001d21 <st_dword>
c00081aa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00081af:	8d 45 16             	lea    eax,[ebp+0x16]
c00081b2:	e8 66 9b ff ff       	call   c0001d1d <st_word>
c00081b7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00081bb:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00081bf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00081c2:	b9 13 00 00 00       	mov    ecx,0x13
c00081c7:	ba a2 f7 01 c0       	mov    edx,0xc001f7a2
c00081cc:	e8 59 9b ff ff       	call   c0001d2a <mem_cpy>
c00081d1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081d7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081dc:	89 f0                	mov    eax,esi
c00081de:	e8 3a 9b ff ff       	call   c0001d1d <st_word>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081f0:	55                   	push   ebp
c00081f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f5:	e8 7c 9a ff ff       	call   c0001c76 <disk_write>
c00081fa:	83 c4 20             	add    esp,0x20
c00081fd:	85 c0                	test   eax,eax
c00081ff:	0f 85 67 02 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	0f 85 b7 00 00 00    	jne    c00082c7 <f_mkfs+0xf0c>
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	6a 01                	push   0x1
c0008215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000821d:	83 c0 06             	add    eax,0x6
c0008220:	83 d2 00             	adc    edx,0x0
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	55                   	push   ebp
c0008226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000822a:	e8 47 9a ff ff       	call   c0001c76 <disk_write>
c000822f:	83 c4 20             	add    esp,0x20
c0008232:	b9 00 02 00 00       	mov    ecx,0x200
c0008237:	31 d2                	xor    edx,edx
c0008239:	89 e8                	mov    eax,ebp
c000823b:	e8 ff 9a ff ff       	call   c0001d3f <mem_set>
c0008240:	ba 52 52 61 41       	mov    edx,0x41615252
c0008245:	89 e8                	mov    eax,ebp
c0008247:	e8 d5 9a ff ff       	call   c0001d21 <st_dword>
c000824c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008252:	ba 72 72 41 61       	mov    edx,0x61417272
c0008257:	e8 c5 9a ff ff       	call   c0001d21 <st_dword>
c000825c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000825f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008265:	e8 b7 9a ff ff       	call   c0001d21 <st_dword>
c000826a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008270:	ba 02 00 00 00       	mov    edx,0x2
c0008275:	e8 a7 9a ff ff       	call   c0001d21 <st_dword>
c000827a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000827f:	89 f0                	mov    eax,esi
c0008281:	e8 97 9a ff ff       	call   c0001d1d <st_word>
c0008286:	83 ec 0c             	sub    esp,0xc
c0008289:	6a 01                	push   0x1
c000828b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000828f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008293:	83 c0 07             	add    eax,0x7
c0008296:	83 d2 00             	adc    edx,0x0
c0008299:	52                   	push   edx
c000829a:	50                   	push   eax
c000829b:	55                   	push   ebp
c000829c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082a0:	e8 d1 99 ff ff       	call   c0001c76 <disk_write>
c00082a5:	83 c4 14             	add    esp,0x14
c00082a8:	6a 01                	push   0x1
c00082aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082b2:	83 c0 01             	add    eax,0x1
c00082b5:	83 d2 00             	adc    edx,0x0
c00082b8:	52                   	push   edx
c00082b9:	50                   	push   eax
c00082ba:	55                   	push   ebp
c00082bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bf:	e8 b2 99 ff ff       	call   c0001c76 <disk_write>
c00082c4:	83 c4 20             	add    esp,0x20
c00082c7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082ce:	31 d2                	xor    edx,edx
c00082d0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082d6:	31 db                	xor    ebx,ebx
c00082d8:	89 e8                	mov    eax,ebp
c00082da:	e8 60 9a ff ff       	call   c0001d3f <mem_set>
c00082df:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082eb:	0f 94 c3             	sete   bl
c00082ee:	4b                   	dec    ebx
c00082ef:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082f5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	75 21                	jne    c0008323 <f_mkfs+0xf68>
c0008302:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008307:	89 e8                	mov    eax,ebp
c0008309:	e8 13 9a ff ff       	call   c0001d21 <st_dword>
c000830e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008311:	83 ca ff             	or     edx,0xffffffff
c0008314:	e8 08 9a ff ff       	call   c0001d21 <st_dword>
c0008319:	8d 45 08             	lea    eax,[ebp+0x8]
c000831c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008321:	eb 04                	jmp    c0008327 <f_mkfs+0xf6c>
c0008323:	89 da                	mov    edx,ebx
c0008325:	89 e8                	mov    eax,ebp
c0008327:	e8 f5 99 ff ff       	call   c0001d21 <st_dword>
c000832c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008334:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008338:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000833c:	39 ce                	cmp    esi,ecx
c000833e:	76 02                	jbe    c0008342 <f_mkfs+0xf87>
c0008340:	89 ce                	mov    esi,ecx
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	56                   	push   esi
c0008346:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834e:	55                   	push   ebp
c000834f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008353:	e8 1e 99 ff ff       	call   c0001c76 <disk_write>
c0008358:	83 c4 20             	add    esp,0x20
c000835b:	85 c0                	test   eax,eax
c000835d:	0f 85 09 01 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008363:	31 d2                	xor    edx,edx
c0008365:	b9 00 02 00 00       	mov    ecx,0x200
c000836a:	89 e8                	mov    eax,ebp
c000836c:	e8 ce 99 ff ff       	call   c0001d3f <mem_set>
c0008371:	31 d2                	xor    edx,edx
c0008373:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008377:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000837f:	75 b3                	jne    c0008334 <f_mkfs+0xf79>
c0008381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008384:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000838b:	40                   	inc    eax
c000838c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008390:	0f 87 65 ff ff ff    	ja     c00082fb <f_mkfs+0xf40>
c0008396:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000839b:	74 04                	je     c00083a1 <f_mkfs+0xfe6>
c000839d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00083a1:	89 fb                	mov    ebx,edi
c00083a3:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00083a7:	76 04                	jbe    c00083ad <f_mkfs+0xff2>
c00083a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083ad:	83 ec 0c             	sub    esp,0xc
c00083b0:	53                   	push   ebx
c00083b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b9:	55                   	push   ebp
c00083ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083be:	e8 b3 98 ff ff       	call   c0001c76 <disk_write>
c00083c3:	83 c4 20             	add    esp,0x20
c00083c6:	85 c0                	test   eax,eax
c00083c8:	0f 85 9e 00 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00083ce:	31 d2                	xor    edx,edx
c00083d0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083d4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083d8:	29 df                	sub    edi,ebx
c00083da:	75 c5                	jne    c00083a1 <f_mkfs+0xfe6>
c00083dc:	b1 0c                	mov    cl,0xc
c00083de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e3:	74 1d                	je     c0008402 <f_mkfs+0x1047>
c00083e5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083ea:	b1 06                	mov    cl,0x6
c00083ec:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083f0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083f4:	72 0c                	jb     c0008402 <f_mkfs+0x1047>
c00083f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083fb:	0f 94 c1             	sete   cl
c00083fe:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008402:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008407:	75 4c                	jne    c0008455 <f_mkfs+0x109a>
c0008409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000840d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008411:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000841f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000842a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008435:	0f b6 c9             	movzx  ecx,cl
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	55                   	push   ebp
c000843c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008447:	e8 2f c2 ff ff       	call   c000467b <create_partition>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c3                	mov    ebx,eax
c0008451:	85 c0                	test   eax,eax
c0008453:	75 34                	jne    c0008489 <f_mkfs+0x10ce>
c0008455:	31 db                	xor    ebx,ebx
c0008457:	50                   	push   eax
c0008458:	6a 00                	push   0x0
c000845a:	6a 00                	push   0x0
c000845c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008460:	e8 27 98 ff ff       	call   c0001c8c <disk_ioctl>
c0008465:	83 c4 10             	add    esp,0x10
c0008468:	85 c0                	test   eax,eax
c000846a:	74 1d                	je     c0008489 <f_mkfs+0x10ce>
c000846c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008474:	75 0c                	jne    c0008482 <f_mkfs+0x10c7>
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	55                   	push   ebp
c000847a:	e8 75 00 00 00       	call   c00084f4 <ff_memfree>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	bb 01 00 00 00       	mov    ebx,0x1
c0008487:	eb 48                	jmp    c00084d1 <f_mkfs+0x1116>
c0008489:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008491:	75 3e                	jne    c00084d1 <f_mkfs+0x1116>
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	55                   	push   ebp
c0008497:	e8 58 00 00 00       	call   c00084f4 <ff_memfree>
c000849c:	83 c4 10             	add    esp,0x10
c000849f:	eb 30                	jmp    c00084d1 <f_mkfs+0x1116>
c00084a1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a6:	0f 85 eb fa ff ff    	jne    c0007f97 <f_mkfs+0xbdc>
c00084ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084b0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00084b6:	0f 86 b8 f9 ff ff    	jbe    c0007e74 <f_mkfs+0xab9>
c00084bc:	e9 bf fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084c1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084c6:	0f 85 c0 fa ff ff    	jne    c0007f8c <f_mkfs+0xbd1>
c00084cc:	e9 af fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084d1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084d7:	89 d8                	mov    eax,ebx
c00084d9:	5b                   	pop    ebx
c00084da:	5e                   	pop    esi
c00084db:	5f                   	pop    edi
c00084dc:	5d                   	pop    ebp
c00084dd:	c3                   	ret    

c00084de <ff_memalloc>:
c00084de:	83 ec 0c             	sub    esp,0xc
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e8:	e8 ac 4f 00 00       	call   c000d499 <malloc>
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	83 c4 0c             	add    esp,0xc
c00084f3:	c3                   	ret    

c00084f4 <ff_memfree>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 a6 4f 00 00       	call   c000d4a9 <free>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <ff_uni2oem>:
c000850b:	83 ec 14             	sub    esp,0x14
c000850e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008512:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008516:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000851d:	c7 44 24 0c c0 fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fac0
c0008525:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000852a:	77 0b                	ja     c0008537 <ff_uni2oem+0x2c>
c000852c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008530:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008535:	eb 5b                	jmp    c0008592 <ff_uni2oem+0x87>
c0008537:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000853f:	77 51                	ja     c0008592 <ff_uni2oem+0x87>
c0008541:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008547:	75 49                	jne    c0008592 <ff_uni2oem+0x87>
c0008549:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008550:	eb 0b                	jmp    c000855d <ff_uni2oem+0x52>
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	40                   	inc    eax
c0008558:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000855d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008563:	77 1b                	ja     c0008580 <ff_uni2oem+0x75>
c0008565:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000856a:	01 c0                	add    eax,eax
c000856c:	89 c2                	mov    edx,eax
c000856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008572:	01 d0                	add    eax,edx
c0008574:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008577:	0f b7 c0             	movzx  eax,ax
c000857a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000857e:	75 d2                	jne    c0008552 <ff_uni2oem+0x47>
c0008580:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008585:	83 e8 80             	sub    eax,0xffffff80
c0008588:	25 ff 00 00 00       	and    eax,0xff
c000858d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008592:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008597:	83 c4 14             	add    esp,0x14
c000859a:	c3                   	ret    

c000859b <ff_oem2uni>:
c000859b:	83 ec 18             	sub    esp,0x18
c000859e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00085a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a6:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00085ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085af:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00085b6:	c7 44 24 10 c0 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fac0
c00085be:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00085c4:	77 0b                	ja     c00085d1 <ff_oem2uni+0x36>
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085cf:	eb 2d                	jmp    c00085fe <ff_oem2uni+0x63>
c00085d1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085d7:	75 25                	jne    c00085fe <ff_oem2uni+0x63>
c00085d9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085e0:	77 1c                	ja     c00085fe <ff_oem2uni+0x63>
c00085e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085e7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ec:	01 c0                	add    eax,eax
c00085ee:	89 c2                	mov    edx,eax
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	01 d0                	add    eax,edx
c00085f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085fe:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008603:	83 c4 18             	add    esp,0x18
c0008606:	c3                   	ret    

c0008607 <ff_wtoupper>:
c0008607:	83 ec 10             	sub    esp,0x10
c000860a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008612:	0f 87 3e 01 00 00    	ja     c0008756 <ff_wtoupper+0x14f>
c0008618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008621:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008628:	77 07                	ja     c0008631 <ff_wtoupper+0x2a>
c000862a:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c000862f:	eb 05                	jmp    c0008636 <ff_wtoupper+0x2f>
c0008631:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c0008636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000863a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863e:	8d 50 02             	lea    edx,[eax+0x2]
c0008641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008645:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008648:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000864d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008653:	0f 84 f4 00 00 00    	je     c000874d <ff_wtoupper+0x146>
c0008659:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000865e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008663:	0f 82 e4 00 00 00    	jb     c000874d <ff_wtoupper+0x146>
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	8d 50 02             	lea    edx,[eax+0x2]
c0008670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008674:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008677:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000867c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008681:	66 c1 e8 08          	shr    ax,0x8
c0008685:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000868a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008691:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008696:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000869b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00086a0:	01 ca                	add    edx,ecx
c00086a2:	39 d0                	cmp    eax,edx
c00086a4:	0f 8d 86 00 00 00    	jge    c0008730 <ff_wtoupper+0x129>
c00086aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086af:	83 f8 08             	cmp    eax,0x8
c00086b2:	0f 87 94 00 00 00    	ja     c000874c <ff_wtoupper+0x145>
c00086b8:	8b 04 85 c0 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0840]
c00086bf:	ff e0                	jmp    eax
c00086c1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086c6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086cb:	29 c2                	sub    edx,eax
c00086cd:	89 d0                	mov    eax,edx
c00086cf:	01 c0                	add    eax,eax
c00086d1:	89 c2                	mov    edx,eax
c00086d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d7:	01 d0                	add    eax,edx
c00086d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086e1:	eb 4b                	jmp    c000872e <ff_wtoupper+0x127>
c00086e3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ec:	83 e0 01             	and    eax,0x1
c00086ef:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086f4:	eb 38                	jmp    c000872e <ff_wtoupper+0x127>
c00086f6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086fc:	eb 30                	jmp    c000872e <ff_wtoupper+0x127>
c00086fe:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008704:	eb 28                	jmp    c000872e <ff_wtoupper+0x127>
c0008706:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000870c:	eb 20                	jmp    c000872e <ff_wtoupper+0x127>
c000870e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008714:	eb 18                	jmp    c000872e <ff_wtoupper+0x127>
c0008716:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000871c:	eb 10                	jmp    c000872e <ff_wtoupper+0x127>
c000871e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008724:	eb 08                	jmp    c000872e <ff_wtoupper+0x127>
c0008726:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000872d:	90                   	nop
c000872e:	eb 1c                	jmp    c000874c <ff_wtoupper+0x145>
c0008730:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008736:	0f 85 fe fe ff ff    	jne    c000863a <ff_wtoupper+0x33>
c000873c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008741:	01 c0                	add    eax,eax
c0008743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008747:	e9 ee fe ff ff       	jmp    c000863a <ff_wtoupper+0x33>
c000874c:	90                   	nop
c000874d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	c3                   	ret    

c000875e <is_bad_src_ratio>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	89 04 24             	mov    DWORD PTR [esp],eax
c0008768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000876c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008770:	dd 04 24             	fld    QWORD PTR [esp]
c0008773:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0008779:	de d9                	fcompp 
c000877b:	df e0                	fnstsw ax
c000877d:	f6 c4 45             	test   ah,0x45
c0008780:	74 10                	je     c0008792 <is_bad_src_ratio+0x34>
c0008782:	dd 04 24             	fld    QWORD PTR [esp]
c0008785:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c000878b:	df e0                	fnstsw ax
c000878d:	f6 c4 45             	test   ah,0x45
c0008790:	75 07                	jne    c0008799 <is_bad_src_ratio+0x3b>
c0008792:	b8 01 00 00 00       	mov    eax,0x1
c0008797:	eb 05                	jmp    c000879e <is_bad_src_ratio+0x40>
c0008799:	b8 00 00 00 00       	mov    eax,0x0
c000879e:	83 c4 0c             	add    esp,0xc
c00087a1:	c3                   	ret    

c00087a2 <psrc_set_converter>:
c00087a2:	56                   	push   esi
c00087a3:	89 d6                	mov    esi,edx
c00087a5:	53                   	push   ebx
c00087a6:	89 c3                	mov    ebx,eax
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	52                   	push   edx
c00087ac:	50                   	push   eax
c00087ad:	e8 33 24 00 00       	call   c000abe5 <sinc_set_converter>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	85 c0                	test   eax,eax
c00087b7:	74 25                	je     c00087de <psrc_set_converter+0x3c>
c00087b9:	50                   	push   eax
c00087ba:	50                   	push   eax
c00087bb:	56                   	push   esi
c00087bc:	53                   	push   ebx
c00087bd:	e8 39 29 00 00       	call   c000b0fb <zoh_set_converter>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 15                	je     c00087de <psrc_set_converter+0x3c>
c00087c9:	51                   	push   ecx
c00087ca:	51                   	push   ecx
c00087cb:	56                   	push   esi
c00087cc:	53                   	push   ebx
c00087cd:	e8 10 0a 00 00       	call   c00091e2 <linear_set_converter>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	ba 0a 00 00 00       	mov    edx,0xa
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 02                	jne    c00087e0 <psrc_set_converter+0x3e>
c00087de:	31 d2                	xor    edx,edx
c00087e0:	89 d0                	mov    eax,edx
c00087e2:	5a                   	pop    edx
c00087e3:	5b                   	pop    ebx
c00087e4:	5e                   	pop    esi
c00087e5:	c3                   	ret    

c00087e6 <src_delete>:
c00087e6:	53                   	push   ebx
c00087e7:	83 ec 08             	sub    esp,0x8
c00087ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ee:	85 db                	test   ebx,ebx
c00087f0:	74 29                	je     c000881b <src_delete+0x35>
c00087f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f5:	85 c0                	test   eax,eax
c00087f7:	74 0c                	je     c0008805 <src_delete+0x1f>
c00087f9:	83 ec 0c             	sub    esp,0xc
c00087fc:	50                   	push   eax
c00087fd:	e8 a7 4c 00 00       	call   c000d4a9 <free>
c0008802:	83 c4 10             	add    esp,0x10
c0008805:	50                   	push   eax
c0008806:	6a 3c                	push   0x3c
c0008808:	6a 00                	push   0x0
c000880a:	53                   	push   ebx
c000880b:	e8 c8 7e ff ff       	call   c00006d8 <memset>
c0008810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008813:	e8 91 4c 00 00       	call   c000d4a9 <free>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	31 c0                	xor    eax,eax
c000881d:	83 c4 08             	add    esp,0x8
c0008820:	5b                   	pop    ebx
c0008821:	c3                   	ret    

c0008822 <src_process>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	53                   	push   ebx
c0008825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000882d:	85 f6                	test   esi,esi
c000882f:	0f 84 e2 00 00 00    	je     c0008917 <src_process+0xf5>
c0008835:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008839:	0f 84 df 00 00 00    	je     c000891e <src_process+0xfc>
c000883f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008843:	0f 84 d5 00 00 00    	je     c000891e <src_process+0xfc>
c0008849:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008850:	0f 85 cf 00 00 00    	jne    c0008925 <src_process+0x103>
c0008856:	85 db                	test   ebx,ebx
c0008858:	0f 84 ce 00 00 00    	je     c000892c <src_process+0x10a>
c000885e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008861:	0f 84 cc 00 00 00    	je     c0008933 <src_process+0x111>
c0008867:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000886b:	0f 84 c2 00 00 00    	je     c0008933 <src_process+0x111>
c0008871:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008874:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008877:	e8 e2 fe ff ff       	call   c000875e <is_bad_src_ratio>
c000887c:	5a                   	pop    edx
c000887d:	85 c0                	test   eax,eax
c000887f:	59                   	pop    ecx
c0008880:	0f 85 b4 00 00 00    	jne    c000893a <src_process+0x118>
c0008886:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000888a:	79 07                	jns    c0008893 <src_process+0x71>
c000888c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008893:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008897:	79 07                	jns    c00088a0 <src_process+0x7e>
c0008899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00088a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00088a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00088a8:	39 ca                	cmp    edx,ecx
c00088aa:	73 0b                	jae    c00088b7 <src_process+0x95>
c00088ac:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00088b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00088b3:	39 c1                	cmp    ecx,eax
c00088b5:	eb 09                	jmp    c00088c0 <src_process+0x9e>
c00088b7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00088bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00088be:	39 c2                	cmp    edx,eax
c00088c0:	72 7f                	jb     c0008941 <src_process+0x11f>
c00088c2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d0:	d9 05 a0 00 02 c0    	fld    DWORD PTR ds:0xc00200a0
c00088d6:	dc 1e                	fcomp  QWORD PTR [esi]
c00088d8:	df e0                	fnstsw ax
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xc0>
c00088dd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088e0:	dd 1e                	fstp   QWORD PTR [esi]
c00088e2:	83 ec 10             	sub    esp,0x10
c00088e5:	dd 06                	fld    QWORD PTR [esi]
c00088e7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088ed:	e8 ee 5f 01 00       	call   c001e8e0 <fabs>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	dd 05 90 00 02 c0    	fld    QWORD PTR ds:0xc0020090
c00088fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088ff:	de d9                	fcompp 
c0008901:	df e0                	fnstsw ax
c0008903:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008907:	9e                   	sahf   
c0008908:	76 05                	jbe    c000890f <src_process+0xed>
c000890a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000890d:	eb 03                	jmp    c0008912 <src_process+0xf0>
c000890f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008912:	59                   	pop    ecx
c0008913:	5b                   	pop    ebx
c0008914:	5e                   	pop    esi
c0008915:	ff e0                	jmp    eax
c0008917:	b8 02 00 00 00       	mov    eax,0x2
c000891c:	eb 28                	jmp    c0008946 <src_process+0x124>
c000891e:	b8 07 00 00 00       	mov    eax,0x7
c0008923:	eb 21                	jmp    c0008946 <src_process+0x124>
c0008925:	b8 12 00 00 00       	mov    eax,0x12
c000892a:	eb 1a                	jmp    c0008946 <src_process+0x124>
c000892c:	b8 03 00 00 00       	mov    eax,0x3
c0008931:	eb 13                	jmp    c0008946 <src_process+0x124>
c0008933:	b8 04 00 00 00       	mov    eax,0x4
c0008938:	eb 0c                	jmp    c0008946 <src_process+0x124>
c000893a:	b8 06 00 00 00       	mov    eax,0x6
c000893f:	eb 05                	jmp    c0008946 <src_process+0x124>
c0008941:	b8 10 00 00 00       	mov    eax,0x10
c0008946:	5a                   	pop    edx
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 4c             	sub    esp,0x4c
c0008951:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008955:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008959:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000895d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008961:	85 ff                	test   edi,edi
c0008963:	0f 8e 36 01 00 00    	jle    c0008a9f <src_callback_read+0x155>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 2e 01 00 00    	je     c0008a9f <src_callback_read+0x155>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 19 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 07 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00089a1:	50                   	push   eax
c00089a2:	e8 31 7d ff ff       	call   c00006d8 <memset>
c00089a7:	5e                   	pop    esi
c00089a8:	5d                   	pop    ebp
c00089a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089b1:	e8 a8 fd ff ff       	call   c000875e <is_bad_src_ratio>
c00089b6:	83 c4 10             	add    esp,0x10
c00089b9:	85 c0                	test   eax,eax
c00089bb:	74 0c                	je     c00089c9 <src_callback_read+0x7f>
c00089bd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089c4:	e9 d6 00 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c00089c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089cd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089dc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e4:	31 f6                	xor    esi,esi
c00089e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089f2:	75 30                	jne    c0008a24 <src_callback_read+0xda>
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xda>
c0008a1c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 ea fd ff ff       	call   c0008822 <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 42                	jne    c0008a88 <src_callback_read+0x13e>
c0008a46:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 e9                	mov    ecx,ebp
c0008a4f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a77:	75 04                	jne    c0008a7d <src_callback_read+0x133>
c0008a79:	85 c9                	test   ecx,ecx
c0008a7b:	74 0b                	je     c0008a88 <src_callback_read+0x13e>
c0008a7d:	39 d7                	cmp    edi,edx
c0008a7f:	7e 09                	jle    c0008a8a <src_callback_read+0x140>
c0008a81:	89 d6                	mov    esi,edx
c0008a83:	e9 65 ff ff ff       	jmp    c00089ed <src_callback_read+0xa3>
c0008a88:	89 f2                	mov    edx,esi
c0008a8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a8e:	85 c0                	test   eax,eax
c0008a90:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a97:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a9a:	74 05                	je     c0008aa1 <src_callback_read+0x157>
c0008a9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9f:	31 d2                	xor    edx,edx
c0008aa1:	83 c4 4c             	add    esp,0x4c
c0008aa4:	89 d0                	mov    eax,edx
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	5d                   	pop    ebp
c0008aaa:	c3                   	ret    

c0008aab <src_set_ratio>:
c0008aab:	53                   	push   ebx
c0008aac:	b8 02 00 00 00       	mov    eax,0x2
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 33                	je     c0008af3 <src_set_ratio+0x48>
c0008ac0:	b8 07 00 00 00       	mov    eax,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 2c                	je     c0008af7 <src_set_ratio+0x4c>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 2a                	je     c0008afb <src_set_ratio+0x50>
c0008ad1:	50                   	push   eax
c0008ad2:	50                   	push   eax
c0008ad3:	dd 14 24             	fst    QWORD PTR [esp]
c0008ad6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ada:	e8 7f fc ff ff       	call   c000875e <is_bad_src_ratio>
c0008adf:	5a                   	pop    edx
c0008ae0:	85 c0                	test   eax,eax
c0008ae2:	59                   	pop    ecx
c0008ae3:	75 07                	jne    c0008aec <src_set_ratio+0x41>
c0008ae5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0008aea:	eb 11                	jmp    c0008afd <src_set_ratio+0x52>
c0008aec:	b8 06 00 00 00       	mov    eax,0x6
c0008af1:	eb 0a                	jmp    c0008afd <src_set_ratio+0x52>
c0008af3:	dd d8                	fstp   st(0)
c0008af5:	eb 06                	jmp    c0008afd <src_set_ratio+0x52>
c0008af7:	dd d8                	fstp   st(0)
c0008af9:	eb 02                	jmp    c0008afd <src_set_ratio+0x52>
c0008afb:	dd d8                	fstp   st(0)
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <src_get_channels>:
c0008b02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b06:	b8 02 00 00 00       	mov    eax,0x2
c0008b0b:	85 d2                	test   edx,edx
c0008b0d:	74 14                	je     c0008b23 <src_get_channels+0x21>
c0008b0f:	b8 07 00 00 00       	mov    eax,0x7
c0008b14:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b18:	74 09                	je     c0008b23 <src_get_channels+0x21>
c0008b1a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b1e:	74 03                	je     c0008b23 <src_get_channels+0x21>
c0008b20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b23:	c3                   	ret    

c0008b24 <src_reset>:
c0008b24:	53                   	push   ebx
c0008b25:	b8 02 00 00 00       	mov    eax,0x2
c0008b2a:	83 ec 08             	sub    esp,0x8
c0008b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b31:	85 db                	test   ebx,ebx
c0008b33:	74 2e                	je     c0008b63 <src_reset+0x3f>
c0008b35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 09                	je     c0008b45 <src_reset+0x21>
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	53                   	push   ebx
c0008b40:	ff d0                	call   eax
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	d9 ee                	fldz   
c0008b47:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b4e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b51:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b58:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b61:	31 c0                	xor    eax,eax
c0008b63:	83 c4 08             	add    esp,0x8
c0008b66:	5b                   	pop    ebx
c0008b67:	c3                   	ret    

c0008b68 <src_new>:
c0008b68:	57                   	push   edi
c0008b69:	56                   	push   esi
c0008b6a:	53                   	push   ebx
c0008b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b73:	85 f6                	test   esi,esi
c0008b75:	74 73                	je     c0008bea <src_new+0x82>
c0008b77:	85 ff                	test   edi,edi
c0008b79:	7f 08                	jg     c0008b83 <src_new+0x1b>
c0008b7b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b81:	eb 1e                	jmp    c0008ba1 <src_new+0x39>
c0008b83:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b89:	50                   	push   eax
c0008b8a:	50                   	push   eax
c0008b8b:	6a 3c                	push   0x3c
c0008b8d:	6a 01                	push   0x1
c0008b8f:	e8 35 49 00 00       	call   c000d4c9 <calloc>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	89 c3                	mov    ebx,eax
c0008b99:	85 c0                	test   eax,eax
c0008b9b:	75 10                	jne    c0008bad <src_new+0x45>
c0008b9d:	85 f6                	test   esi,esi
c0008b9f:	75 04                	jne    c0008ba5 <src_new+0x3d>
c0008ba1:	31 db                	xor    ebx,ebx
c0008ba3:	eb 4b                	jmp    c0008bf0 <src_new+0x88>
c0008ba5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bab:	eb 43                	jmp    c0008bf0 <src_new+0x88>
c0008bad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bb0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bbb:	e8 e2 fb ff ff       	call   c00087a2 <psrc_set_converter>
c0008bc0:	85 c0                	test   eax,eax
c0008bc2:	74 18                	je     c0008bdc <src_new+0x74>
c0008bc4:	85 f6                	test   esi,esi
c0008bc6:	74 06                	je     c0008bce <src_new+0x66>
c0008bc8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	53                   	push   ebx
c0008bd2:	31 db                	xor    ebx,ebx
c0008bd4:	e8 d0 48 00 00       	call   c000d4a9 <free>
c0008bd9:	83 c4 10             	add    esp,0x10
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	53                   	push   ebx
c0008be0:	e8 3f ff ff ff       	call   c0008b24 <src_reset>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	eb 06                	jmp    c0008bf0 <src_new+0x88>
c0008bea:	85 ff                	test   edi,edi
c0008bec:	7f 9b                	jg     c0008b89 <src_new+0x21>
c0008bee:	eb b1                	jmp    c0008ba1 <src_new+0x39>
c0008bf0:	89 d8                	mov    eax,ebx
c0008bf2:	5b                   	pop    ebx
c0008bf3:	5e                   	pop    esi
c0008bf4:	5f                   	pop    edi
c0008bf5:	c3                   	ret    

c0008bf6 <src_callback_new>:
c0008bf6:	56                   	push   esi
c0008bf7:	53                   	push   ebx
c0008bf8:	53                   	push   ebx
c0008bf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c01:	85 f6                	test   esi,esi
c0008c03:	75 0e                	jne    c0008c13 <src_callback_new+0x1d>
c0008c05:	31 db                	xor    ebx,ebx
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 47                	je     c0008c52 <src_callback_new+0x5c>
c0008c0b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c11:	eb 3f                	jmp    c0008c52 <src_callback_new+0x5c>
c0008c13:	85 c0                	test   eax,eax
c0008c15:	74 06                	je     c0008c1d <src_callback_new+0x27>
c0008c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1d:	51                   	push   ecx
c0008c1e:	50                   	push   eax
c0008c1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c27:	e8 3c ff ff ff       	call   c0008b68 <src_new>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c3                	mov    ebx,eax
c0008c31:	85 c0                	test   eax,eax
c0008c33:	74 1d                	je     c0008c52 <src_callback_new+0x5c>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	50                   	push   eax
c0008c39:	e8 e6 fe ff ff       	call   c0008b24 <src_reset>
c0008c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c42:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c49:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	89 d8                	mov    eax,ebx
c0008c54:	5a                   	pop    edx
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_get_name>:
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 14             	sub    esp,0x14
c0008c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c60:	53                   	push   ebx
c0008c61:	e8 59 1f 00 00       	call   c000abbf <sinc_get_name>
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	85 c0                	test   eax,eax
c0008c6b:	75 1d                	jne    c0008c8a <src_get_name+0x32>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 67 24 00 00       	call   c000b0dd <zoh_get_name>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	85 c0                	test   eax,eax
c0008c7b:	75 0d                	jne    c0008c8a <src_get_name+0x32>
c0008c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c81:	83 c4 08             	add    esp,0x8
c0008c84:	5b                   	pop    ebx
c0008c85:	e9 3a 05 00 00       	jmp    c00091c4 <linear_get_name>
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    

c0008c8f <src_get_description>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 35 1f 00 00       	call   c000abd2 <sinc_get_description>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_description+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 3f 24 00 00       	call   c000b0ec <zoh_get_description>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_description+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 12 05 00 00       	jmp    c00091d3 <linear_get_description>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_version>:
c0008cc6:	b8 c0 fb 01 c0       	mov    eax,0xc001fbc0
c0008ccb:	c3                   	ret    

c0008ccc <src_is_valid_ratio>:
c0008ccc:	50                   	push   eax
c0008ccd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd5:	e8 84 fa ff ff       	call   c000875e <is_bad_src_ratio>
c0008cda:	85 c0                	test   eax,eax
c0008cdc:	0f 94 c0             	sete   al
c0008cdf:	83 c4 0c             	add    esp,0xc
c0008ce2:	0f b6 c0             	movzx  eax,al
c0008ce5:	c3                   	ret    

c0008ce6 <src_error>:
c0008ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cea:	31 c0                	xor    eax,eax
c0008cec:	85 d2                	test   edx,edx
c0008cee:	74 03                	je     c0008cf3 <src_error+0xd>
c0008cf0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cf3:	c3                   	ret    

c0008cf4 <src_strerror>:
c0008cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cf8:	31 c0                	xor    eax,eax
c0008cfa:	83 fa 17             	cmp    edx,0x17
c0008cfd:	77 07                	ja     c0008d06 <src_strerror+0x12>
c0008cff:	8b 04 95 20 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffe0]
c0008d06:	c3                   	ret    

c0008d07 <src_simple>:
c0008d07:	56                   	push   esi
c0008d08:	53                   	push   ebx
c0008d09:	83 ec 18             	sub    esp,0x18
c0008d0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d14:	50                   	push   eax
c0008d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d1d:	e8 46 fe ff ff       	call   c0008b68 <src_new>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	85 c0                	test   eax,eax
c0008d27:	75 06                	jne    c0008d2f <src_simple+0x28>
c0008d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d2d:	eb 25                	jmp    c0008d54 <src_simple+0x4d>
c0008d2f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d36:	89 c3                	mov    ebx,eax
c0008d38:	50                   	push   eax
c0008d39:	50                   	push   eax
c0008d3a:	56                   	push   esi
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 e1 fa ff ff       	call   c0008822 <src_process>
c0008d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d48:	e8 99 fa ff ff       	call   c00087e6 <src_delete>
c0008d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <src_short_to_float_array>:
c0008d5a:	83 ec 0c             	sub    esp,0xc
c0008d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d69:	85 c0                	test   eax,eax
c0008d6b:	74 0f                	je     c0008d7c <src_short_to_float_array+0x22>
c0008d6d:	48                   	dec    eax
c0008d6e:	d9 05 a4 00 02 c0    	fld    DWORD PTR ds:0xc00200a4
c0008d74:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d77:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d7a:	eb ed                	jmp    c0008d69 <src_short_to_float_array+0xf>
c0008d7c:	83 c4 0c             	add    esp,0xc
c0008d7f:	c3                   	ret    

c0008d80 <src_float_to_short_array>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	52                   	push   edx
c0008d83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d8b:	85 db                	test   ebx,ebx
c0008d8d:	74 51                	je     c0008de0 <src_float_to_short_array+0x60>
c0008d8f:	4b                   	dec    ebx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	d9 05 a8 00 02 c0    	fld    DWORD PTR ds:0xc00200a8
c0008d9a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d9d:	dc 15 98 00 02 c0    	fcom   QWORD PTR ds:0xc0020098
c0008da3:	df e0                	fnstsw ax
c0008da5:	9e                   	sahf   
c0008da6:	72 0a                	jb     c0008db2 <src_float_to_short_array+0x32>
c0008da8:	dd d8                	fstp   st(0)
c0008daa:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008db0:	eb d9                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008db2:	d9 05 ac 00 02 c0    	fld    DWORD PTR ds:0xc00200ac
c0008db8:	d8 d9                	fcomp  st(1)
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	72 0a                	jb     c0008dc9 <src_float_to_short_array+0x49>
c0008dbf:	dd d8                	fstp   st(0)
c0008dc1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008dc7:	eb c2                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcf:	e8 2c 5b 01 00       	call   c001e900 <lrint>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	c1 f8 10             	sar    eax,0x10
c0008dda:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008dde:	eb ab                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008de0:	58                   	pop    eax
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <src_int_to_float_array>:
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 0f                	je     c0008e06 <src_int_to_float_array+0x22>
c0008df7:	48                   	dec    eax
c0008df8:	d9 05 b0 00 02 c0    	fld    DWORD PTR ds:0xc00200b0
c0008dfe:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008e01:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008e04:	eb ed                	jmp    c0008df3 <src_int_to_float_array+0xf>
c0008e06:	83 c4 0c             	add    esp,0xc
c0008e09:	c3                   	ret    

c0008e0a <src_float_to_int_array>:
c0008e0a:	56                   	push   esi
c0008e0b:	53                   	push   ebx
c0008e0c:	52                   	push   edx
c0008e0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008e15:	85 db                	test   ebx,ebx
c0008e17:	74 4f                	je     c0008e68 <src_float_to_int_array+0x5e>
c0008e19:	4b                   	dec    ebx
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	d9 05 a8 00 02 c0    	fld    DWORD PTR ds:0xc00200a8
c0008e24:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008e27:	dc 15 98 00 02 c0    	fcom   QWORD PTR ds:0xc0020098
c0008e2d:	df e0                	fnstsw ax
c0008e2f:	9e                   	sahf   
c0008e30:	72 0b                	jb     c0008e3d <src_float_to_int_array+0x33>
c0008e32:	dd d8                	fstp   st(0)
c0008e34:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e3b:	eb d8                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e3d:	d9 05 ac 00 02 c0    	fld    DWORD PTR ds:0xc00200ac
c0008e43:	d8 d9                	fcomp  st(1)
c0008e45:	df e0                	fnstsw ax
c0008e47:	9e                   	sahf   
c0008e48:	72 0b                	jb     c0008e55 <src_float_to_int_array+0x4b>
c0008e4a:	dd d8                	fstp   st(0)
c0008e4c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e53:	eb c0                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e55:	83 ec 10             	sub    esp,0x10
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	e8 a0 5a 01 00       	call   c001e900 <lrint>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e66:	eb ad                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e68:	58                   	pop    eax
c0008e69:	5b                   	pop    ebx
c0008e6a:	5e                   	pop    esi
c0008e6b:	c3                   	ret    

c0008e6c <is_bad_src_ratio>:
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0008e81:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0008e87:	de d9                	fcompp 
c0008e89:	df e0                	fnstsw ax
c0008e8b:	f6 c4 45             	test   ah,0x45
c0008e8e:	74 10                	je     c0008ea0 <is_bad_src_ratio+0x34>
c0008e90:	dd 04 24             	fld    QWORD PTR [esp]
c0008e93:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c0008e99:	df e0                	fnstsw ax
c0008e9b:	f6 c4 45             	test   ah,0x45
c0008e9e:	75 07                	jne    c0008ea7 <is_bad_src_ratio+0x3b>
c0008ea0:	b8 01 00 00 00       	mov    eax,0x1
c0008ea5:	eb 05                	jmp    c0008eac <is_bad_src_ratio+0x40>
c0008ea7:	b8 00 00 00 00       	mov    eax,0x0
c0008eac:	83 c4 0c             	add    esp,0xc
c0008eaf:	c3                   	ret    

c0008eb0 <fmod_one>:
c0008eb0:	83 ec 2c             	sub    esp,0x2c
c0008eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec3:	83 ec 08             	sub    esp,0x8
c0008ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ece:	e8 2d 5a 01 00       	call   c001e900 <lrint>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eda:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ede:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ee2:	de e1                	fsubrp st(1),st
c0008ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ee8:	d9 ee                	fldz   
c0008eea:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008eee:	df e0                	fnstsw ax
c0008ef0:	f6 c4 45             	test   ah,0x45
c0008ef3:	75 0a                	jne    c0008eff <fmod_one+0x4f>
c0008ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ef9:	d9 e8                	fld1   
c0008efb:	de c1                	faddp  st(1),st
c0008efd:	eb 04                	jmp    c0008f03 <fmod_one+0x53>
c0008eff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008f03:	83 c4 2c             	add    esp,0x2c
c0008f06:	c3                   	ret    

c0008f07 <linear_vari_process>:
c0008f07:	55                   	push   ebp
c0008f08:	57                   	push   edi
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 2c             	sub    esp,0x2c
c0008f0e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008f12:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008f16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008f1e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008f22:	0f 8e 5e 02 00 00    	jle    c0009186 <linear_vari_process+0x27f>
c0008f28:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008f2b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f33:	85 db                	test   ebx,ebx
c0008f35:	0f 84 4b 02 00 00    	je     c0009186 <linear_vari_process+0x27f>
c0008f3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f3e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f42:	74 19                	je     c0008f5d <linear_vari_process+0x56>
c0008f44:	31 d2                	xor    edx,edx
c0008f46:	39 c2                	cmp    edx,eax
c0008f48:	7d 0c                	jge    c0008f56 <linear_vari_process+0x4f>
c0008f4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f4c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f4f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f53:	42                   	inc    edx
c0008f54:	eb f0                	jmp    c0008f46 <linear_vari_process+0x3f>
c0008f56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f60:	0f af d0             	imul   edx,eax
c0008f63:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f66:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f6a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f74:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f7b:	dd 07                	fld    QWORD PTR [edi]
c0008f7d:	dd 14 24             	fst    QWORD PTR [esp]
c0008f80:	50                   	push   eax
c0008f81:	50                   	push   eax
c0008f82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f85:	e8 e2 fe ff ff       	call   c0008e6c <is_bad_src_ratio>
c0008f8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f8e:	5a                   	pop    edx
c0008f8f:	59                   	pop    ecx
c0008f90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f95:	0f 85 e3 01 00 00    	jne    c000917e <linear_vari_process+0x277>
c0008f9b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f9e:	d9 e8                	fld1   
c0008fa0:	d8 d1                	fcom   st(1)
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008fa9:	0f 86 99 00 00 00    	jbe    c0009048 <linear_vari_process+0x141>
c0008faf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008fb2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008fb5:	0f 8d 8d 00 00 00    	jge    c0009048 <linear_vari_process+0x141>
c0008fbb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008fbf:	d8 c1                	fadd   st,st(1)
c0008fc1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008fc4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008fc7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008fca:	df e0                	fnstsw ax
c0008fcc:	9e                   	sahf   
c0008fcd:	73 79                	jae    c0009048 <linear_vari_process+0x141>
c0008fcf:	85 d2                	test   edx,edx
c0008fd1:	7e 38                	jle    c000900b <linear_vari_process+0x104>
c0008fd3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008fd7:	83 ec 10             	sub    esp,0x10
c0008fda:	dd 07                	fld    QWORD PTR [edi]
c0008fdc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe2:	e8 f9 58 01 00       	call   c001e8e0 <fabs>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c0008ff0:	df e0                	fnstsw ax
c0008ff2:	9e                   	sahf   
c0008ff3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ff7:	76 12                	jbe    c000900b <linear_vari_process+0x104>
c0008ff9:	dd 07                	fld    QWORD PTR [edi]
c0008ffb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ffe:	d8 e1                	fsub   st,st(1)
c0009000:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0009003:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0009006:	de c1                	faddp  st(1),st
c0009008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900b:	31 c0                	xor    eax,eax
c000900d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0009010:	7e 1f                	jle    c0009031 <linear_vari_process+0x12a>
c0009012:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0009016:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009018:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000901b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009022:	d8 e1                	fsub   st,st(1)
c0009024:	40                   	inc    eax
c0009025:	d8 ca                	fmul   st,st(2)
c0009027:	de c1                	faddp  st(1),st
c0009029:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000902c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000902f:	eb dc                	jmp    c000900d <linear_vari_process+0x106>
c0009031:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009035:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009038:	de c1                	faddp  st(1),st
c000903a:	e9 5f ff ff ff       	jmp    c0008f9e <linear_vari_process+0x97>
c000903f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009043:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009046:	de c1                	faddp  st(1),st
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	dd 14 24             	fst    QWORD PTR [esp]
c000904e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009052:	e8 59 fe ff ff       	call   c0008eb0 <fmod_one>
c0009057:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000905a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000905e:	d8 e1                	fsub   st,st(1)
c0009060:	d9 c9                	fxch   st(1)
c0009062:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009066:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009069:	e8 92 58 01 00       	call   c001e900 <lrint>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	0f af e8             	imul   ebp,eax
c0009074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009078:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000907b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000907e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009081:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009084:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0009087:	0f 8d 97 00 00 00    	jge    c0009124 <linear_vari_process+0x21d>
c000908d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009091:	d9 c0                	fld    st(0)
c0009093:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009096:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000909a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000909e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00090a2:	de d9                	fcompp 
c00090a4:	df e0                	fnstsw ax
c00090a6:	9e                   	sahf   
c00090a7:	76 7b                	jbe    c0009124 <linear_vari_process+0x21d>
c00090a9:	85 ed                	test   ebp,ebp
c00090ab:	7e 38                	jle    c00090e5 <linear_vari_process+0x1de>
c00090ad:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090b1:	83 ec 10             	sub    esp,0x10
c00090b4:	dd 07                	fld    QWORD PTR [edi]
c00090b6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	e8 1f 58 01 00       	call   c001e8e0 <fabs>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c00090ca:	df e0                	fnstsw ax
c00090cc:	9e                   	sahf   
c00090cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090d1:	76 12                	jbe    c00090e5 <linear_vari_process+0x1de>
c00090d3:	dd 07                	fld    QWORD PTR [edi]
c00090d5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090d8:	d8 e1                	fsub   st,st(1)
c00090da:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090dd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090e0:	de c1                	faddp  st(1),st
c00090e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e5:	31 c0                	xor    eax,eax
c00090e7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090ea:	39 c2                	cmp    edx,eax
c00090ec:	0f 8e 4d ff ff ff    	jle    c000903f <linear_vari_process+0x138>
c00090f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090fb:	89 e9                	mov    ecx,ebp
c00090fd:	01 c5                	add    ebp,eax
c00090ff:	29 d1                	sub    ecx,edx
c0009101:	89 ca                	mov    edx,ecx
c0009103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009107:	01 c2                	add    edx,eax
c0009109:	40                   	inc    eax
c000910a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000910d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0009110:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009113:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009116:	d8 e1                	fsub   st,st(1)
c0009118:	d8 ca                	fmul   st,st(2)
c000911a:	de c1                	faddp  st(1),st
c000911c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000911f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009122:	eb c3                	jmp    c00090e7 <linear_vari_process+0x1e0>
c0009124:	39 d1                	cmp    ecx,edx
c0009126:	7d 13                	jge    c000913b <linear_vari_process+0x234>
c0009128:	89 d0                	mov    eax,edx
c000912a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000912d:	29 c8                	sub    eax,ecx
c000912f:	99                   	cdq    
c0009130:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009137:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000913b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000913e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009141:	85 c0                	test   eax,eax
c0009143:	7f 1b                	jg     c0009160 <linear_vari_process+0x259>
c0009145:	dd 04 24             	fld    QWORD PTR [esp]
c0009148:	dd 1f                	fstp   QWORD PTR [edi]
c000914a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000914d:	99                   	cdq    
c000914e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009151:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	99                   	cdq    
c0009158:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000915b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000915e:	eb 26                	jmp    c0009186 <linear_vari_process+0x27f>
c0009160:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009163:	31 d2                	xor    edx,edx
c0009165:	29 c8                	sub    eax,ecx
c0009167:	c1 e0 02             	shl    eax,0x2
c000916a:	39 d1                	cmp    ecx,edx
c000916c:	7e d7                	jle    c0009145 <linear_vari_process+0x23e>
c000916e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009170:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009174:	83 c0 04             	add    eax,0x4
c0009177:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000917b:	42                   	inc    edx
c000917c:	eb ec                	jmp    c000916a <linear_vari_process+0x263>
c000917e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000918a:	83 c4 2c             	add    esp,0x2c
c000918d:	5b                   	pop    ebx
c000918e:	5e                   	pop    esi
c000918f:	5f                   	pop    edi
c0009190:	5d                   	pop    ebp
c0009191:	c3                   	ret    

c0009192 <linear_reset>:
c0009192:	83 ec 0c             	sub    esp,0xc
c0009195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009199:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000919c:	85 c0                	test   eax,eax
c000919e:	74 20                	je     c00091c0 <linear_reset+0x2e>
c00091a0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00091a3:	83 c0 1c             	add    eax,0x1c
c00091a6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00091a9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00091b0:	c1 e2 02             	shl    edx,0x2
c00091b3:	51                   	push   ecx
c00091b4:	52                   	push   edx
c00091b5:	6a 00                	push   0x0
c00091b7:	50                   	push   eax
c00091b8:	e8 1b 75 ff ff       	call   c00006d8 <memset>
c00091bd:	83 c4 10             	add    esp,0x10
c00091c0:	83 c4 0c             	add    esp,0xc
c00091c3:	c3                   	ret    

c00091c4 <linear_get_name>:
c00091c4:	31 c0                	xor    eax,eax
c00091c6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091cb:	75 05                	jne    c00091d2 <linear_get_name+0xe>
c00091cd:	b8 b4 00 02 c0       	mov    eax,0xc00200b4
c00091d2:	c3                   	ret    

c00091d3 <linear_get_description>:
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091da:	75 05                	jne    c00091e1 <linear_get_description+0xe>
c00091dc:	b8 c8 00 02 c0       	mov    eax,0xc00200c8
c00091e1:	c3                   	ret    

c00091e2 <linear_set_converter>:
c00091e2:	53                   	push   ebx
c00091e3:	b8 0a 00 00 00       	mov    eax,0xa
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091f4:	75 6e                	jne    c0009264 <linear_set_converter+0x82>
c00091f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091f9:	85 c0                	test   eax,eax
c00091fb:	74 13                	je     c0009210 <linear_set_converter+0x2e>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	50                   	push   eax
c0009201:	e8 a3 42 00 00       	call   c000d4a9 <free>
c0009206:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	50                   	push   eax
c0009211:	50                   	push   eax
c0009212:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000921c:	50                   	push   eax
c000921d:	6a 01                	push   0x1
c000921f:	e8 a5 42 00 00       	call   c000d4c9 <calloc>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	89 c2                	mov    edx,eax
c0009229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000922c:	85 d2                	test   edx,edx
c000922e:	b8 01 00 00 00       	mov    eax,0x1
c0009233:	74 2f                	je     c0009264 <linear_set_converter+0x82>
c0009235:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000923b:	83 ec 0c             	sub    esp,0xc
c000923e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009244:	c7 43 24 07 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008f07
c000924b:	c7 43 20 07 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008f07
c0009252:	c7 43 28 92 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009192
c0009259:	53                   	push   ebx
c000925a:	e8 33 ff ff ff       	call   c0009192 <linear_reset>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	31 c0                	xor    eax,eax
c0009264:	83 c4 08             	add    esp,0x8
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <is_bad_src_ratio>:
c0009269:	83 ec 0c             	sub    esp,0xc
c000926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009270:	89 04 24             	mov    DWORD PTR [esp],eax
c0009273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000927b:	dd 04 24             	fld    QWORD PTR [esp]
c000927e:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0009284:	de d9                	fcompp 
c0009286:	df e0                	fnstsw ax
c0009288:	f6 c4 45             	test   ah,0x45
c000928b:	74 10                	je     c000929d <is_bad_src_ratio+0x34>
c000928d:	dd 04 24             	fld    QWORD PTR [esp]
c0009290:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c0009296:	df e0                	fnstsw ax
c0009298:	f6 c4 45             	test   ah,0x45
c000929b:	75 07                	jne    c00092a4 <is_bad_src_ratio+0x3b>
c000929d:	b8 01 00 00 00       	mov    eax,0x1
c00092a2:	eb 05                	jmp    c00092a9 <is_bad_src_ratio+0x40>
c00092a4:	b8 00 00 00 00       	mov    eax,0x0
c00092a9:	83 c4 0c             	add    esp,0xc
c00092ac:	c3                   	ret    

c00092ad <int_to_fp>:
c00092ad:	c1 e0 0c             	shl    eax,0xc
c00092b0:	c3                   	ret    

c00092b1 <fp_to_int>:
c00092b1:	c1 f8 0c             	sar    eax,0xc
c00092b4:	c3                   	ret    

c00092b5 <fp_fraction_part>:
c00092b5:	25 ff 0f 00 00       	and    eax,0xfff
c00092ba:	c3                   	ret    

c00092bb <fp_to_double>:
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	e8 f2 ff ff ff       	call   c00092b5 <fp_fraction_part>
c00092c3:	d9 05 c0 87 03 c0    	fld    DWORD PTR ds:0xc00387c0
c00092c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092cd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092d1:	83 c4 0c             	add    esp,0xc
c00092d4:	c3                   	ret    

c00092d5 <calc_output_single>:
c00092d5:	55                   	push   ebp
c00092d6:	57                   	push   edi
c00092d7:	89 c7                	mov    edi,eax
c00092d9:	56                   	push   esi
c00092da:	53                   	push   ebx
c00092db:	89 d3                	mov    ebx,edx
c00092dd:	83 ec 24             	sub    esp,0x24
c00092e0:	89 de                	mov    esi,ebx
c00092e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092e5:	e8 c3 ff ff ff       	call   c00092ad <int_to_fp>
c00092ea:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092f8:	29 c8                	sub    eax,ecx
c00092fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009302:	99                   	cdq    
c0009303:	f7 fb                	idiv   ebx
c0009305:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009308:	0f af f0             	imul   esi,eax
c000930b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000930f:	01 ce                	add    esi,ecx
c0009311:	29 c2                	sub    edx,eax
c0009313:	8d 14 97             	lea    edx,[edi+edx*4]
c0009316:	89 f0                	mov    eax,esi
c0009318:	e8 9e ff ff ff       	call   c00092bb <fp_to_double>
c000931d:	89 f0                	mov    eax,esi
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	e8 89 ff ff ff       	call   c00092b1 <fp_to_int>
c0009328:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000932c:	83 c2 04             	add    edx,0x4
c000932f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009333:	d8 e1                	fsub   st,st(1)
c0009335:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009339:	de c9                	fmulp  st(1),st
c000933b:	de c1                	faddp  st(1),st
c000933d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009343:	29 de                	sub    esi,ebx
c0009345:	dc 04 24             	fadd   QWORD PTR [esp]
c0009348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000934b:	79 c9                	jns    c0009316 <calc_output_single+0x41>
c000934d:	89 d8                	mov    eax,ebx
c000934f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	d9 ee                	fldz   
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000936b:	01 d1                	add    ecx,edx
c000936d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009370:	89 c8                	mov    eax,ecx
c0009372:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009376:	e8 40 ff ff ff       	call   c00092bb <fp_to_double>
c000937b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000937f:	89 c8                	mov    eax,ecx
c0009381:	e8 2b ff ff ff       	call   c00092b1 <fp_to_int>
c0009386:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000938a:	29 d9                	sub    ecx,ebx
c000938c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009390:	83 ea 04             	sub    edx,0x4
c0009393:	d8 e1                	fsub   st,st(1)
c0009395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009399:	de c9                	fmulp  st(1),st
c000939b:	de c1                	faddp  st(1),st
c000939d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00093a3:	85 c9                	test   ecx,ecx
c00093a5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093a9:	de c1                	faddp  st(1),st
c00093ab:	7f c3                	jg     c0009370 <calc_output_single+0x9b>
c00093ad:	dd 04 24             	fld    QWORD PTR [esp]
c00093b0:	83 c4 24             	add    esp,0x24
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	5b                   	pop    ebx
c00093b6:	5e                   	pop    esi
c00093b7:	5f                   	pop    edi
c00093b8:	5d                   	pop    ebp
c00093b9:	c3                   	ret    

c00093ba <calc_output_stereo>:
c00093ba:	55                   	push   ebp
c00093bb:	57                   	push   edi
c00093bc:	89 c7                	mov    edi,eax
c00093be:	56                   	push   esi
c00093bf:	53                   	push   ebx
c00093c0:	89 d3                	mov    ebx,edx
c00093c2:	83 ec 44             	sub    esp,0x44
c00093c5:	89 de                	mov    esi,ebx
c00093c7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00093cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	e8 d6 fe ff ff       	call   c00092ad <int_to_fp>
c00093d7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093de:	d9 ee                	fldz   
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 14 24             	fst    QWORD PTR [esp]
c00093e5:	99                   	cdq    
c00093e6:	f7 fb                	idiv   ebx
c00093e8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093eb:	0f af f0             	imul   esi,eax
c00093ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093f2:	01 ce                	add    esi,ecx
c00093f4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093f7:	0f af c2             	imul   eax,edx
c00093fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009402:	29 c2                	sub    edx,eax
c0009404:	8d 14 97             	lea    edx,[edi+edx*4]
c0009407:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000940b:	89 f0                	mov    eax,esi
c000940d:	e8 a9 fe ff ff       	call   c00092bb <fp_to_double>
c0009412:	89 f0                	mov    eax,esi
c0009414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009418:	e8 94 fe ff ff       	call   c00092b1 <fp_to_int>
c000941d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009421:	83 c2 08             	add    edx,0x8
c0009424:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009428:	d8 e1                	fsub   st,st(1)
c000942a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000942e:	de c9                	fmulp  st(1),st
c0009430:	de c1                	faddp  st(1),st
c0009432:	d9 c0                	fld    st(0)
c0009434:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000943a:	dc 04 24             	fadd   QWORD PTR [esp]
c000943d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009440:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009446:	29 de                	sub    esi,ebx
c0009448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000944c:	de c1                	faddp  st(1),st
c000944e:	79 b7                	jns    c0009407 <calc_output_stereo+0x4d>
c0009450:	89 d8                	mov    eax,ebx
c0009452:	d9 ee                	fldz   
c0009454:	d9 ee                	fldz   
c0009456:	29 c8                	sub    eax,ecx
c0009458:	89 c1                	mov    ecx,eax
c000945a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945e:	29 c8                	sub    eax,ecx
c0009460:	99                   	cdq    
c0009461:	f7 fb                	idiv   ebx
c0009463:	89 da                	mov    edx,ebx
c0009465:	0f af d0             	imul   edx,eax
c0009468:	40                   	inc    eax
c0009469:	01 d1                	add    ecx,edx
c000946b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009470:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009474:	8d 14 87             	lea    edx,[edi+eax*4]
c0009477:	eb 04                	jmp    c000947d <calc_output_stereo+0xc3>
c0009479:	d9 ca                	fxch   st(2)
c000947b:	d9 c9                	fxch   st(1)
c000947d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009481:	d9 c9                	fxch   st(1)
c0009483:	89 c8                	mov    eax,ecx
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948d:	e8 29 fe ff ff       	call   c00092bb <fp_to_double>
c0009492:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009496:	89 c8                	mov    eax,ecx
c0009498:	e8 14 fe ff ff       	call   c00092b1 <fp_to_int>
c000949d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094a1:	29 d9                	sub    ecx,ebx
c00094a3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094a7:	83 ea 08             	sub    edx,0x8
c00094aa:	d8 e1                	fsub   st,st(1)
c00094ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00094b0:	de c9                	fmulp  st(1),st
c00094b2:	de c1                	faddp  st(1),st
c00094b4:	d9 c0                	fld    st(0)
c00094b6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00094bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00094c0:	de c1                	faddp  st(1),st
c00094c2:	d9 c9                	fxch   st(1)
c00094c4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00094ca:	85 c9                	test   ecx,ecx
c00094cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094d0:	de c1                	faddp  st(1),st
c00094d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094d6:	7f a1                	jg     c0009479 <calc_output_stereo+0xbf>
c00094d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094dc:	dd 04 24             	fld    QWORD PTR [esp]
c00094df:	de c3                	faddp  st(3),st
c00094e1:	d9 ca                	fxch   st(2)
c00094e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094e7:	d9 18                	fstp   DWORD PTR [eax]
c00094e9:	de c1                	faddp  st(1),st
c00094eb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ef:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094f2:	83 c4 44             	add    esp,0x44
c00094f5:	5b                   	pop    ebx
c00094f6:	5e                   	pop    esi
c00094f7:	5f                   	pop    edi
c00094f8:	5d                   	pop    ebp
c00094f9:	c3                   	ret    

c00094fa <calc_output_quad>:
c00094fa:	55                   	push   ebp
c00094fb:	57                   	push   edi
c00094fc:	56                   	push   esi
c00094fd:	89 c6                	mov    esi,eax
c00094ff:	53                   	push   ebx
c0009500:	89 d3                	mov    ebx,edx
c0009502:	83 ec 5c             	sub    esp,0x5c
c0009505:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009509:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000950c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000950f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009513:	e8 95 fd ff ff       	call   c00092ad <int_to_fp>
c0009518:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000951b:	d9 ee                	fldz   
c000951d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009521:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009525:	29 c8                	sub    eax,ecx
c0009527:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000952b:	99                   	cdq    
c000952c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009530:	f7 fb                	idiv   ebx
c0009532:	89 da                	mov    edx,ebx
c0009534:	0f af d0             	imul   edx,eax
c0009537:	01 ca                	add    edx,ecx
c0009539:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009544:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009547:	0f af c2             	imul   eax,edx
c000954a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000954e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009552:	29 c2                	sub    edx,eax
c0009554:	8d 14 96             	lea    edx,[esi+edx*4]
c0009557:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955f:	e8 57 fd ff ff       	call   c00092bb <fp_to_double>
c0009564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009568:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000956c:	e8 40 fd ff ff       	call   c00092b1 <fp_to_int>
c0009571:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009575:	83 c2 10             	add    edx,0x10
c0009578:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000957c:	d8 e1                	fsub   st,st(1)
c000957e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009582:	de c9                	fmulp  st(1),st
c0009584:	de c1                	faddp  st(1),st
c0009586:	d9 c0                	fld    st(0)
c0009588:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000958e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009592:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009596:	d9 c0                	fld    st(0)
c0009598:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000959e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00095a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00095a6:	d9 c0                	fld    st(0)
c00095a8:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00095ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00095b6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00095bc:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00095c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095c4:	de c1                	faddp  st(1),st
c00095c6:	79 8f                	jns    c0009557 <calc_output_quad+0x5d>
c00095c8:	89 d8                	mov    eax,ebx
c00095ca:	d9 ee                	fldz   
c00095cc:	29 c8                	sub    eax,ecx
c00095ce:	d9 ee                	fldz   
c00095d0:	89 c1                	mov    ecx,eax
c00095d2:	d9 ee                	fldz   
c00095d4:	d9 ee                	fldz   
c00095d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095da:	29 c8                	sub    eax,ecx
c00095dc:	99                   	cdq    
c00095dd:	f7 fb                	idiv   ebx
c00095df:	89 da                	mov    edx,ebx
c00095e1:	0f af d0             	imul   edx,eax
c00095e4:	40                   	inc    eax
c00095e5:	01 d1                	add    ecx,edx
c00095e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095ec:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095f0:	8d 14 86             	lea    edx,[esi+eax*4]
c00095f3:	eb 0a                	jmp    c00095ff <calc_output_quad+0x105>
c00095f5:	d9 cc                	fxch   st(4)
c00095f7:	d9 ca                	fxch   st(2)
c00095f9:	d9 c9                	fxch   st(1)
c00095fb:	d9 cb                	fxch   st(3)
c00095fd:	d9 c9                	fxch   st(1)
c00095ff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009603:	d9 c9                	fxch   st(1)
c0009605:	89 c8                	mov    eax,ecx
c0009607:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000960b:	d9 c9                	fxch   st(1)
c000960d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009611:	d9 c9                	fxch   st(1)
c0009613:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009617:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000961b:	e8 9b fc ff ff       	call   c00092bb <fp_to_double>
c0009620:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009624:	89 c8                	mov    eax,ecx
c0009626:	e8 86 fc ff ff       	call   c00092b1 <fp_to_int>
c000962b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000962f:	29 d9                	sub    ecx,ebx
c0009631:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009635:	83 ea 10             	sub    edx,0x10
c0009638:	d8 e1                	fsub   st,st(1)
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	de c9                	fmulp  st(1),st
c0009640:	de c1                	faddp  st(1),st
c0009642:	d9 c0                	fld    st(0)
c0009644:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000964a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964e:	de c1                	faddp  st(1),st
c0009650:	d9 c1                	fld    st(1)
c0009652:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009658:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000965c:	de c1                	faddp  st(1),st
c000965e:	d9 c2                	fld    st(2)
c0009660:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009666:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000966a:	de c1                	faddp  st(1),st
c000966c:	d9 cb                	fxch   st(3)
c000966e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009674:	85 c9                	test   ecx,ecx
c0009676:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	0f 8f 6f ff ff ff    	jg     c00095f5 <calc_output_quad+0xfb>
c0009686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000968a:	de c4                	faddp  st(4),st
c000968c:	d9 cb                	fxch   st(3)
c000968e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009691:	d9 1f                	fstp   DWORD PTR [edi]
c0009693:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009697:	de c2                	faddp  st(2),st
c0009699:	d9 c9                	fxch   st(1)
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c00096a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00096a5:	de c3                	faddp  st(3),st
c00096a7:	d9 ca                	fxch   st(2)
c00096a9:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096ac:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00096af:	de c1                	faddp  st(1),st
c00096b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096b4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00096b7:	83 c4 5c             	add    esp,0x5c
c00096ba:	5b                   	pop    ebx
c00096bb:	5e                   	pop    esi
c00096bc:	5f                   	pop    edi
c00096bd:	5d                   	pop    ebp
c00096be:	c3                   	ret    

c00096bf <calc_output_hex>:
c00096bf:	55                   	push   ebp
c00096c0:	57                   	push   edi
c00096c1:	89 c7                	mov    edi,eax
c00096c3:	56                   	push   esi
c00096c4:	53                   	push   ebx
c00096c5:	89 d3                	mov    ebx,edx
c00096c7:	83 ec 7c             	sub    esp,0x7c
c00096ca:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096d7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096de:	e8 ca fb ff ff       	call   c00092ad <int_to_fp>
c00096e3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096e6:	d9 ee                	fldz   
c00096e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096ec:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096f0:	29 c8                	sub    eax,ecx
c00096f2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096f6:	99                   	cdq    
c00096f7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096fb:	f7 fb                	idiv   ebx
c00096fd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009701:	89 da                	mov    edx,ebx
c0009703:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009707:	0f af d0             	imul   edx,eax
c000970a:	01 ca                	add    edx,ecx
c000970c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009710:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009713:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009717:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000971a:	0f af c2             	imul   eax,edx
c000971d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009721:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009725:	29 c2                	sub    edx,eax
c0009727:	8d 14 97             	lea    edx,[edi+edx*4]
c000972a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000972e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009732:	e8 84 fb ff ff       	call   c00092bb <fp_to_double>
c0009737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000973b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000973f:	e8 6d fb ff ff       	call   c00092b1 <fp_to_int>
c0009744:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009748:	83 c2 18             	add    edx,0x18
c000974b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000974f:	d8 e1                	fsub   st,st(1)
c0009751:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009755:	de c9                	fmulp  st(1),st
c0009757:	de c1                	faddp  st(1),st
c0009759:	d9 c0                	fld    st(0)
c000975b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009761:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009765:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009769:	d9 c0                	fld    st(0)
c000976b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009771:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009775:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009779:	d9 c0                	fld    st(0)
c000977b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009781:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009785:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009789:	d9 c0                	fld    st(0)
c000978b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009791:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009795:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00097a1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097a5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00097a9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00097af:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00097b3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00097b7:	de c1                	faddp  st(1),st
c00097b9:	0f 89 6b ff ff ff    	jns    c000972a <calc_output_hex+0x6b>
c00097bf:	d9 ee                	fldz   
c00097c1:	d9 ee                	fldz   
c00097c3:	89 d8                	mov    eax,ebx
c00097c5:	29 c8                	sub    eax,ecx
c00097c7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00097cb:	89 c1                	mov    ecx,eax
c00097cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097d1:	29 c8                	sub    eax,ecx
c00097d3:	99                   	cdq    
c00097d4:	f7 fb                	idiv   ebx
c00097d6:	89 da                	mov    edx,ebx
c00097d8:	0f af d0             	imul   edx,eax
c00097db:	40                   	inc    eax
c00097dc:	01 d1                	add    ecx,edx
c00097de:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097e7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097eb:	8d 14 87             	lea    edx,[edi+eax*4]
c00097ee:	d9 ee                	fldz   
c00097f0:	d9 ee                	fldz   
c00097f2:	d9 ca                	fxch   st(2)
c00097f4:	eb 08                	jmp    c00097fe <calc_output_hex+0x13f>
c00097f6:	d9 cc                	fxch   st(4)
c00097f8:	d9 cb                	fxch   st(3)
c00097fa:	d9 ca                	fxch   st(2)
c00097fc:	d9 c9                	fxch   st(1)
c00097fe:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009802:	89 c8                	mov    eax,ecx
c0009804:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009808:	d9 ca                	fxch   st(2)
c000980a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000980e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009812:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009816:	e8 a0 fa ff ff       	call   c00092bb <fp_to_double>
c000981b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000981f:	89 c8                	mov    eax,ecx
c0009821:	e8 8b fa ff ff       	call   c00092b1 <fp_to_int>
c0009826:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000982a:	29 d9                	sub    ecx,ebx
c000982c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009830:	83 ea 18             	sub    edx,0x18
c0009833:	d8 e1                	fsub   st,st(1)
c0009835:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009839:	de c9                	fmulp  st(1),st
c000983b:	de c1                	faddp  st(1),st
c000983d:	d9 c0                	fld    st(0)
c000983f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009845:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009849:	de c1                	faddp  st(1),st
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009853:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009857:	de c1                	faddp  st(1),st
c0009859:	d9 c2                	fld    st(2)
c000985b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009861:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009865:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009869:	d9 c2                	fld    st(2)
c000986b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009871:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009875:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009879:	d9 c2                	fld    st(2)
c000987b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009885:	de c1                	faddp  st(1),st
c0009887:	d9 cb                	fxch   st(3)
c0009889:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000988f:	85 c9                	test   ecx,ecx
c0009891:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000989b:	0f 8f 55 ff ff ff    	jg     c00097f6 <calc_output_hex+0x137>
c00098a1:	d9 cb                	fxch   st(3)
c00098a3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00098a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098aa:	d9 1e                	fstp   DWORD PTR [esi]
c00098ac:	d9 c9                	fxch   st(1)
c00098ae:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00098b2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00098b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098bc:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00098c0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098c3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00098c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00098ca:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098ce:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098d1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098d4:	d9 ca                	fxch   st(2)
c00098d6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098da:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098dd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098e0:	de c1                	faddp  st(1),st
c00098e2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098e5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098e8:	83 c4 7c             	add    esp,0x7c
c00098eb:	5b                   	pop    ebx
c00098ec:	5e                   	pop    esi
c00098ed:	5f                   	pop    edi
c00098ee:	5d                   	pop    ebp
c00098ef:	c3                   	ret    

c00098f0 <calc_output_multi>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	8d 78 44             	lea    edi,[eax+0x44]
c00098f5:	56                   	push   esi
c00098f6:	89 c6                	mov    esi,eax
c00098f8:	53                   	push   ebx
c00098f9:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098ff:	83 ec 4c             	sub    esp,0x4c
c0009902:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009906:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000990a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000990e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009912:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000991a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000991d:	e8 8b f9 ff ff       	call   c00092ad <int_to_fp>
c0009922:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	99                   	cdq    
c000992e:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009936:	0f af d0             	imul   edx,eax
c0009939:	0f af c3             	imul   eax,ebx
c000993c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009940:	29 c5                	sub    ebp,eax
c0009942:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009946:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000994a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009955:	52                   	push   edx
c0009956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995a:	6a 00                	push   0x0
c000995c:	57                   	push   edi
c000995d:	e8 76 6d ff ff       	call   c00006d8 <memset>
c0009962:	83 c4 10             	add    esp,0x10
c0009965:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009969:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000996d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009971:	e8 45 f9 ff ff       	call   c00092bb <fp_to_double>
c0009976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000997a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000997e:	e8 2e f9 ff ff       	call   c00092b1 <fp_to_int>
c0009983:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009986:	89 d9                	mov    ecx,ebx
c0009988:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000998b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000998f:	d8 e1                	fsub   st,st(1)
c0009991:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009995:	de c9                	fmulp  st(1),st
c0009997:	de c1                	faddp  st(1),st
c0009999:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000999d:	89 c8                	mov    eax,ecx
c000999f:	bd 08 00 00 00       	mov    ebp,0x8
c00099a4:	99                   	cdq    
c00099a5:	f7 fd                	idiv   ebp
c00099a7:	4a                   	dec    edx
c00099a8:	83 fa 06             	cmp    edx,0x6
c00099ab:	77 07                	ja     c00099b4 <calc_output_multi+0xc4>
c00099ad:	ff 24 95 00 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff00]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099ee:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f5:	d9 c1                	fld    st(1)
c00099f7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099fb:	dc 00                	fadd   QWORD PTR [eax]
c00099fd:	dd 18                	fstp   QWORD PTR [eax]
c00099ff:	49                   	dec    ecx
c0009a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a04:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a07:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0e:	d9 c1                	fld    st(1)
c0009a10:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a14:	dc 00                	fadd   QWORD PTR [eax]
c0009a16:	dd 18                	fstp   QWORD PTR [eax]
c0009a18:	49                   	dec    ecx
c0009a19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a20:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a27:	d9 c1                	fld    st(1)
c0009a29:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a2d:	dc 00                	fadd   QWORD PTR [eax]
c0009a2f:	dd 18                	fstp   QWORD PTR [eax]
c0009a31:	49                   	dec    ecx
c0009a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a36:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a39:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a40:	d9 c1                	fld    st(1)
c0009a42:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a46:	dc 00                	fadd   QWORD PTR [eax]
c0009a48:	dd 18                	fstp   QWORD PTR [eax]
c0009a4a:	49                   	dec    ecx
c0009a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a52:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a59:	d9 c1                	fld    st(1)
c0009a5b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5f:	dc 00                	fadd   QWORD PTR [eax]
c0009a61:	dd 18                	fstp   QWORD PTR [eax]
c0009a63:	49                   	dec    ecx
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	85 c9                	test   ecx,ecx
c0009a76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a7a:	dc 00                	fadd   QWORD PTR [eax]
c0009a7c:	dd 18                	fstp   QWORD PTR [eax]
c0009a7e:	0f 8f 19 ff ff ff    	jg     c000999d <calc_output_multi+0xad>
c0009a84:	dd d9                	fstp   st(1)
c0009a86:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a8e:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a92:	0f 89 d1 fe ff ff    	jns    c0009969 <calc_output_multi+0x79>
c0009a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a9c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009aa0:	89 d1                	mov    ecx,edx
c0009aa2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009aa6:	29 c8                	sub    eax,ecx
c0009aa8:	99                   	cdq    
c0009aa9:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009aad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ab1:	0f af d0             	imul   edx,eax
c0009ab4:	40                   	inc    eax
c0009ab5:	01 d1                	add    ecx,edx
c0009ab7:	0f af c3             	imul   eax,ebx
c0009aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abe:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ac5:	50                   	push   eax
c0009ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aca:	6a 00                	push   0x0
c0009acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ad0:	e8 03 6c ff ff       	call   c00006d8 <memset>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009adc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ae4:	e8 d2 f7 ff ff       	call   c00092bb <fp_to_double>
c0009ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009af1:	e8 bb f7 ff ff       	call   c00092b1 <fp_to_int>
c0009af6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009af9:	89 d9                	mov    ecx,ebx
c0009afb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009afe:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009b02:	d8 e1                	fsub   st,st(1)
c0009b04:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b08:	de c9                	fmulp  st(1),st
c0009b0a:	de c1                	faddp  st(1),st
c0009b0c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009b10:	89 c8                	mov    eax,ecx
c0009b12:	bd 08 00 00 00       	mov    ebp,0x8
c0009b17:	99                   	cdq    
c0009b18:	f7 fd                	idiv   ebp
c0009b1a:	4a                   	dec    edx
c0009b1b:	83 fa 06             	cmp    edx,0x6
c0009b1e:	77 07                	ja     c0009b27 <calc_output_multi+0x237>
c0009b20:	ff 24 95 1c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfee4]
c0009b27:	49                   	dec    ecx
c0009b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b30:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b33:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b3a:	d9 c1                	fld    st(1)
c0009b3c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b40:	dc 00                	fadd   QWORD PTR [eax]
c0009b42:	dd 18                	fstp   QWORD PTR [eax]
c0009b44:	49                   	dec    ecx
c0009b45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b50:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b57:	d9 c1                	fld    st(1)
c0009b59:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b5d:	dc 00                	fadd   QWORD PTR [eax]
c0009b5f:	dd 18                	fstp   QWORD PTR [eax]
c0009b61:	49                   	dec    ecx
c0009b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b6d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b74:	d9 c1                	fld    st(1)
c0009b76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b7a:	dc 00                	fadd   QWORD PTR [eax]
c0009b7c:	dd 18                	fstp   QWORD PTR [eax]
c0009b7e:	49                   	dec    ecx
c0009b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b87:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b8a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b91:	d9 c1                	fld    st(1)
c0009b93:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b97:	dc 00                	fadd   QWORD PTR [eax]
c0009b99:	dd 18                	fstp   QWORD PTR [eax]
c0009b9b:	49                   	dec    ecx
c0009b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ba7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bae:	d9 c1                	fld    st(1)
c0009bb0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bb4:	dc 00                	fadd   QWORD PTR [eax]
c0009bb6:	dd 18                	fstp   QWORD PTR [eax]
c0009bb8:	49                   	dec    ecx
c0009bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bc4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bcb:	d9 c1                	fld    st(1)
c0009bcd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bd1:	dc 00                	fadd   QWORD PTR [eax]
c0009bd3:	dd 18                	fstp   QWORD PTR [eax]
c0009bd5:	49                   	dec    ecx
c0009bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bde:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009be1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009be8:	d9 c1                	fld    st(1)
c0009bea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bee:	dc 00                	fadd   QWORD PTR [eax]
c0009bf0:	dd 18                	fstp   QWORD PTR [eax]
c0009bf2:	49                   	dec    ecx
c0009bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bfb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bfe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009c05:	d9 c1                	fld    st(1)
c0009c07:	85 c9                	test   ecx,ecx
c0009c09:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009c0d:	dc 00                	fadd   QWORD PTR [eax]
c0009c0f:	dd 18                	fstp   QWORD PTR [eax]
c0009c11:	0f 8f f9 fe ff ff    	jg     c0009b10 <calc_output_multi+0x220>
c0009c17:	dd d9                	fstp   st(1)
c0009c19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009c1d:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009c21:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009c25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009c2a:	0f 8f ac fe ff ff    	jg     c0009adc <calc_output_multi+0x1ec>
c0009c30:	b9 08 00 00 00       	mov    ecx,0x8
c0009c35:	89 d8                	mov    eax,ebx
c0009c37:	99                   	cdq    
c0009c38:	f7 f9                	idiv   ecx
c0009c3a:	4a                   	dec    edx
c0009c3b:	83 fa 06             	cmp    edx,0x6
c0009c3e:	77 07                	ja     c0009c47 <calc_output_multi+0x357>
c0009c40:	ff 24 95 38 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfec8]
c0009c47:	4b                   	dec    ebx
c0009c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c4c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c52:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c56:	d8 c9                	fmul   st,st(1)
c0009c58:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c5b:	4b                   	dec    ebx
c0009c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c60:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c63:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c66:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c6a:	d8 c9                	fmul   st,st(1)
c0009c6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6f:	4b                   	dec    ebx
c0009c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c7e:	d8 c9                	fmul   st,st(1)
c0009c80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c83:	4b                   	dec    ebx
c0009c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c92:	d8 c9                	fmul   st,st(1)
c0009c94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c97:	4b                   	dec    ebx
c0009c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ca2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca6:	d8 c9                	fmul   st,st(1)
c0009ca8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cab:	4b                   	dec    ebx
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cb3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cba:	d8 c9                	fmul   st,st(1)
c0009cbc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbf:	4b                   	dec    ebx
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cc7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cca:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cce:	d8 c9                	fmul   st,st(1)
c0009cd0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cd3:	4b                   	dec    ebx
c0009cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cdb:	85 db                	test   ebx,ebx
c0009cdd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ce0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ce4:	d8 c9                	fmul   st,st(1)
c0009ce6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ce9:	0f 8f 46 ff ff ff    	jg     c0009c35 <calc_output_multi+0x345>
c0009cef:	dd d8                	fstp   st(0)
c0009cf1:	83 c4 4c             	add    esp,0x4c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    

c0009cf9 <sinc_reset>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	51                   	push   ecx
c0009cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d00:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009d03:	85 db                	test   ebx,ebx
c0009d05:	74 51                	je     c0009d58 <sinc_reset+0x5f>
c0009d07:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009d0e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009d15:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009d1c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009d22:	d9 ee                	fldz   
c0009d24:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009d27:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009d2a:	52                   	push   edx
c0009d2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d2e:	c1 e0 02             	shl    eax,0x2
c0009d31:	50                   	push   eax
c0009d32:	6a 00                	push   0x0
c0009d34:	56                   	push   esi
c0009d35:	e8 9e 69 ff ff       	call   c00006d8 <memset>
c0009d3a:	83 c4 0c             	add    esp,0xc
c0009d3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d40:	c1 e0 02             	shl    eax,0x2
c0009d43:	50                   	push   eax
c0009d44:	68 aa 00 00 00       	push   0xaa
c0009d49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d4c:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d4f:	50                   	push   eax
c0009d50:	e8 83 69 ff ff       	call   c00006d8 <memset>
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	58                   	pop    eax
c0009d59:	5b                   	pop    ebx
c0009d5a:	5e                   	pop    esi
c0009d5b:	c3                   	ret    

c0009d5c <double_to_fp>:
c0009d5c:	d9 05 c4 87 03 c0    	fld    DWORD PTR ds:0xc00387c4
c0009d62:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d66:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d6a:	e9 91 4b 01 00       	jmp    c001e900 <lrint>

c0009d6f <fmod_one>:
c0009d6f:	83 ec 2c             	sub    esp,0x2c
c0009d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	83 ec 08             	sub    esp,0x8
c0009d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d8d:	e8 6e 4b 01 00       	call   c001e900 <lrint>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d99:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d9d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009da1:	de e1                	fsubrp st(1),st
c0009da3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009da7:	d9 ee                	fldz   
c0009da9:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009dad:	df e0                	fnstsw ax
c0009daf:	f6 c4 45             	test   ah,0x45
c0009db2:	75 0a                	jne    c0009dbe <fmod_one+0x4f>
c0009db4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009db8:	d9 e8                	fld1   
c0009dba:	de c1                	faddp  st(1),st
c0009dbc:	eb 04                	jmp    c0009dc2 <fmod_one+0x53>
c0009dbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009dc2:	83 c4 2c             	add    esp,0x2c
c0009dc5:	c3                   	ret    

c0009dc6 <prepare_data>:
c0009dc6:	55                   	push   ebp
c0009dc7:	57                   	push   edi
c0009dc8:	56                   	push   esi
c0009dc9:	53                   	push   ebx
c0009dca:	83 ec 1c             	sub    esp,0x1c
c0009dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009dd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dd5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dd9:	0f 89 57 01 00 00    	jns    c0009f36 <prepare_data+0x170>
c0009ddf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009de2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009de5:	85 d2                	test   edx,edx
c0009de7:	75 0d                	jne    c0009df6 <prepare_data+0x30>
c0009de9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009def:	29 d0                	sub    eax,edx
c0009df1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009df4:	eb 44                	jmp    c0009e3a <prepare_data+0x74>
c0009df6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009df9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dfc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dff:	39 c1                	cmp    ecx,eax
c0009e01:	7d 04                	jge    c0009e07 <prepare_data+0x41>
c0009e03:	29 d0                	sub    eax,edx
c0009e05:	eb 2d                	jmp    c0009e34 <prepare_data+0x6e>
c0009e07:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009e0d:	29 d7                	sub    edi,edx
c0009e0f:	01 f7                	add    edi,esi
c0009e11:	51                   	push   ecx
c0009e12:	29 f2                	sub    edx,esi
c0009e14:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009e1b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009e1e:	51                   	push   ecx
c0009e1f:	52                   	push   edx
c0009e20:	50                   	push   eax
c0009e21:	e8 ce 67 ff ff       	call   c00005f4 <memmove>
c0009e26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009e29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009e2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e2f:	29 f0                	sub    eax,esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	29 f0                	sub    eax,esi
c0009e36:	79 02                	jns    c0009e3a <prepare_data+0x74>
c0009e38:	31 c0                	xor    eax,eax
c0009e3a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e3d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e40:	29 ef                	sub    edi,ebp
c0009e42:	39 c7                	cmp    edi,eax
c0009e44:	7e 02                	jle    c0009e48 <prepare_data+0x82>
c0009e46:	89 c7                	mov    edi,eax
c0009e48:	89 f8                	mov    eax,edi
c0009e4a:	99                   	cdq    
c0009e4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e4e:	b8 15 00 00 00       	mov    eax,0x15
c0009e53:	29 d7                	sub    edi,edx
c0009e55:	0f 88 dd 00 00 00    	js     c0009f38 <prepare_data+0x172>
c0009e5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e5e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e61:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e64:	0f 8f ce 00 00 00    	jg     c0009f38 <prepare_data+0x172>
c0009e6a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e70:	50                   	push   eax
c0009e71:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e78:	50                   	push   eax
c0009e79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e82:	50                   	push   eax
c0009e83:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e8a:	50                   	push   eax
c0009e8b:	e8 d1 67 ff ff       	call   c0000661 <memcpy>
c0009e90:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e96:	01 fd                	add    ebp,edi
c0009e98:	01 f9                	add    ecx,edi
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009ea0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009ea3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009ea6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eaa:	0f 85 86 00 00 00    	jne    c0009f36 <prepare_data+0x170>
c0009eb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009eb3:	89 e8                	mov    eax,ebp
c0009eb5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009eb8:	29 c8                	sub    eax,ecx
c0009eba:	39 f8                	cmp    eax,edi
c0009ebc:	7d 78                	jge    c0009f36 <prepare_data+0x170>
c0009ebe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ec2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ec6:	74 6e                	je     c0009f36 <prepare_data+0x170>
c0009ec8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009ecb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ecf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ed2:	29 ef                	sub    edi,ebp
c0009ed4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009ed8:	7c 29                	jl     c0009f03 <prepare_data+0x13d>
c0009eda:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009edd:	29 f1                	sub    ecx,esi
c0009edf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ee6:	55                   	push   ebp
c0009ee7:	50                   	push   eax
c0009ee8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009eeb:	50                   	push   eax
c0009eec:	52                   	push   edx
c0009eed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ef1:	e8 fe 66 ff ff       	call   c00005f4 <memmove>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009efc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f06:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f09:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009f0c:	83 c6 05             	add    esi,0x5
c0009f0f:	78 07                	js     c0009f18 <prepare_data+0x152>
c0009f11:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009f14:	39 cf                	cmp    edi,ecx
c0009f16:	7e 04                	jle    c0009f1c <prepare_data+0x156>
c0009f18:	89 ce                	mov    esi,ecx
c0009f1a:	29 c6                	sub    esi,eax
c0009f1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009f1f:	51                   	push   ecx
c0009f20:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009f27:	51                   	push   ecx
c0009f28:	6a 00                	push   0x0
c0009f2a:	50                   	push   eax
c0009f2b:	e8 a8 67 ff ff       	call   c00006d8 <memset>
c0009f30:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	31 c0                	xor    eax,eax
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	5b                   	pop    ebx
c0009f3c:	5e                   	pop    esi
c0009f3d:	5f                   	pop    edi
c0009f3e:	5d                   	pop    ebp
c0009f3f:	c3                   	ret    

c0009f40 <sinc_multichan_vari_process>:
c0009f40:	55                   	push   ebp
c0009f41:	b8 05 00 00 00       	mov    eax,0x5
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	83 ec 3c             	sub    esp,0x3c
c0009f4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f54:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f57:	85 db                	test   ebx,ebx
c0009f59:	0f 84 5d 02 00 00    	je     c000a1bc <sinc_multichan_vari_process+0x27c>
c0009f5f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f65:	0f af d0             	imul   edx,eax
c0009f68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f6b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f86:	55                   	push   ebp
c0009f87:	55                   	push   ebp
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 d9 f2 ff ff       	call   c0009269 <is_bad_src_ratio>
c0009f90:	89 c2                	mov    edx,eax
c0009f92:	58                   	pop    eax
c0009f93:	85 d2                	test   edx,edx
c0009f95:	59                   	pop    ecx
c0009f96:	b8 16 00 00 00       	mov    eax,0x16
c0009f9b:	0f 85 1b 02 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c0009fa1:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c0009fa7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009faa:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fad:	dd 06                	fld    QWORD PTR [esi]
c0009faf:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb2:	d8 d1                	fcom   st(1)
c0009fb4:	df e0                	fnstsw ax
c0009fb6:	9e                   	sahf   
c0009fb7:	76 0f                	jbe    c0009fc8 <sinc_multichan_vari_process+0x88>
c0009fb9:	dd d8                	fstp   st(0)
c0009fbb:	d9 e8                	fld1   
c0009fbd:	d8 d9                	fcomp  st(1)
c0009fbf:	df e0                	fnstsw ax
c0009fc1:	9e                   	sahf   
c0009fc2:	77 0f                	ja     c0009fd3 <sinc_multichan_vari_process+0x93>
c0009fc4:	dd d8                	fstp   st(0)
c0009fc6:	eb 11                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fc8:	dd d9                	fstp   st(1)
c0009fca:	d9 e8                	fld1   
c0009fcc:	d8 d9                	fcomp  st(1)
c0009fce:	df e0                	fnstsw ax
c0009fd0:	9e                   	sahf   
c0009fd1:	76 04                	jbe    c0009fd7 <sinc_multichan_vari_process+0x97>
c0009fd3:	de f9                	fdivp  st(1),st
c0009fd5:	eb 02                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fd7:	dd d8                	fstp   st(0)
c0009fd9:	83 ec 10             	sub    esp,0x10
c0009fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe2:	e8 19 49 01 00       	call   c001e900 <lrint>
c0009fe7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fea:	40                   	inc    eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	0f af c5             	imul   eax,ebp
c0009ff1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	e8 71 fd ff ff       	call   c0009d6f <fmod_one>
c0009ffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a008:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a010:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a014:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a017:	e8 e4 48 01 00       	call   c001e900 <lrint>
c000a01c:	0f af e8             	imul   ebp,eax
c000a01f:	d9 e8                	fld1   
c000a021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	01 e8                	add    eax,ebp
c000a02b:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a031:	99                   	cdq    
c000a032:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a036:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a042:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a045:	7d 4b                	jge    c000a092 <sinc_multichan_vari_process+0x152>
c000a047:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a04a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04d:	01 c8                	add    eax,ecx
c000a04f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a052:	99                   	cdq    
c000a053:	f7 f9                	idiv   ecx
c000a055:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a059:	7d 09                	jge    c000a064 <sinc_multichan_vari_process+0x124>
c000a05b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05e:	85 c0                	test   eax,eax
c000a060:	79 57                	jns    c000a0b9 <sinc_multichan_vari_process+0x179>
c000a062:	eb 70                	jmp    c000a0d4 <sinc_multichan_vari_process+0x194>
c000a064:	51                   	push   ecx
c000a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a069:	57                   	push   edi
c000a06a:	53                   	push   ebx
c000a06b:	e8 56 fd ff ff       	call   c0009dc6 <prepare_data>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 85 3e 01 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a07e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a081:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a084:	01 c8                	add    eax,ecx
c000a086:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a089:	99                   	cdq    
c000a08a:	f7 f9                	idiv   ecx
c000a08c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a090:	7c c9                	jl     c000a05b <sinc_multichan_vari_process+0x11b>
c000a092:	dd 04 24             	fld    QWORD PTR [esp]
c000a095:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a098:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09c:	dd 1e                	fstp   QWORD PTR [esi]
c000a09e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a1:	99                   	cdq    
c000a0a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0ab:	99                   	cdq    
c000a0ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b2:	31 c0                	xor    eax,eax
c000a0b4:	e9 03 01 00 00       	jmp    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a0b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bd:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0cb:	d9 c9                	fxch   st(1)
c000a0cd:	de d9                	fcompp 
c000a0cf:	df e0                	fnstsw ax
c000a0d1:	9e                   	sahf   
c000a0d2:	73 be                	jae    c000a092 <sinc_multichan_vari_process+0x152>
c000a0d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d8:	7e 31                	jle    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 06                	fld    QWORD PTR [esi]
c000a0df:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e5:	e8 f6 47 01 00       	call   c001e8e0 <fabs>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a0f3:	df e0                	fnstsw ax
c000a0f5:	9e                   	sahf   
c000a0f6:	76 13                	jbe    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0f8:	dd 06                	fld    QWORD PTR [esi]
c000a0fa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0fd:	d8 e1                	fsub   st,st(1)
c000a0ff:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a102:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a105:	de c1                	faddp  st(1),st
c000a107:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a10b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a112:	d9 e8                	fld1   
c000a114:	d8 d9                	fcomp  st(1)
c000a116:	df e0                	fnstsw ax
c000a118:	9e                   	sahf   
c000a119:	77 04                	ja     c000a11f <sinc_multichan_vari_process+0x1df>
c000a11b:	dd d8                	fstp   st(0)
c000a11d:	d9 e8                	fld1   
c000a11f:	de c9                	fmulp  st(1),st
c000a121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a125:	50                   	push   eax
c000a126:	50                   	push   eax
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12f:	e8 28 fc ff ff       	call   c0009d5c <double_to_fp>
c000a134:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a13e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a141:	e8 16 fc ff ff       	call   c0009d5c <double_to_fp>
c000a146:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a149:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a14c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	52                   	push   edx
c000a152:	89 d8                	mov    eax,ebx
c000a154:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a158:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15b:	52                   	push   edx
c000a15c:	52                   	push   edx
c000a15d:	89 ea                	mov    edx,ebp
c000a15f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a162:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a165:	e8 86 f7 ff ff       	call   c00098f0 <calc_output_multi>
c000a16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a16d:	d9 e8                	fld1   
c000a16f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a172:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a176:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 e6 fb ff ff       	call   c0009d6f <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a190:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a193:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 59 47 01 00       	call   c001e900 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 80 fe ff ff       	jmp    c000a03c <sinc_multichan_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_hex_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 58 02 00 00    	je     c000a43b <sinc_hex_vari_process+0x277>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 55 f0 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	85 d2                	test   edx,edx
c000a219:	59                   	pop    ecx
c000a21a:	b8 16 00 00 00       	mov    eax,0x16
c000a21f:	0f 85 16 02 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a225:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_hex_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_hex_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_hex_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 95 46 01 00       	call   c001e900 <lrint>
c000a26b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a26e:	40                   	inc    eax
c000a26f:	dd 14 24             	fst    QWORD PTR [esp]
c000a272:	0f af c5             	imul   eax,ebp
c000a275:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27d:	e8 ed fa ff ff       	call   c0009d6f <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a289:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 60 46 01 00       	call   c001e900 <lrint>
c000a2a0:	0f af e8             	imul   ebp,eax
c000a2a3:	d9 e8                	fld1   
c000a2a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a2b5:	99                   	cdq    
c000a2b6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ba:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2bd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_hex_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_hex_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_hex_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_hex_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 d2 fa ff ff       	call   c0009dc6 <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 39 01 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_hex_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fe 00 00 00       	jmp    c000a43b <sinc_hex_vari_process+0x277>
c000a33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a341:	dd 04 24             	fld    QWORD PTR [esp]
c000a344:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_hex_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 31                	jle    c000a38f <sinc_hex_vari_process+0x1cb>
c000a35e:	83 ec 10             	sub    esp,0x10
c000a361:	dd 06                	fld    QWORD PTR [esi]
c000a363:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 72 45 01 00       	call   c001e8e0 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 13                	jbe    c000a38f <sinc_hex_vari_process+0x1cb>
c000a37c:	dd 06                	fld    QWORD PTR [esi]
c000a37e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a381:	d8 e1                	fsub   st,st(1)
c000a383:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a386:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a389:	de c1                	faddp  st(1),st
c000a38b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a392:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a396:	d9 e8                	fld1   
c000a398:	d8 d9                	fcomp  st(1)
c000a39a:	df e0                	fnstsw ax
c000a39c:	9e                   	sahf   
c000a39d:	77 04                	ja     c000a3a3 <sinc_hex_vari_process+0x1df>
c000a39f:	dd d8                	fstp   st(0)
c000a3a1:	d9 e8                	fld1   
c000a3a3:	de c9                	fmulp  st(1),st
c000a3a5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a9:	50                   	push   eax
c000a3aa:	50                   	push   eax
c000a3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b3:	e8 a4 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3b8:	89 c5                	mov    ebp,eax
c000a3ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3be:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c5:	e8 92 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d6:	89 c1                	mov    ecx,eax
c000a3d8:	52                   	push   edx
c000a3d9:	89 d8                	mov    eax,ebx
c000a3db:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3df:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e2:	52                   	push   edx
c000a3e3:	52                   	push   edx
c000a3e4:	89 ea                	mov    edx,ebp
c000a3e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e9:	e8 d1 f2 ff ff       	call   c00096bf <calc_output_hex>
c000a3ee:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3f2:	d9 e8                	fld1   
c000a3f4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fc:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a403:	e8 67 f9 ff ff       	call   c0009d6f <fmod_one>
c000a408:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a412:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a421:	e8 da 44 01 00       	call   c001e900 <lrint>
c000a426:	0f af e8             	imul   ebp,eax
c000a429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42d:	01 e8                	add    eax,ebp
c000a42f:	99                   	cdq    
c000a430:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a433:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a436:	e9 85 fe ff ff       	jmp    c000a2c0 <sinc_hex_vari_process+0xfc>
c000a43b:	83 c4 3c             	add    esp,0x3c
c000a43e:	5b                   	pop    ebx
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	c3                   	ret    

c000a443 <sinc_quad_vari_process>:
c000a443:	55                   	push   ebp
c000a444:	b8 05 00 00 00       	mov    eax,0x5
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 3c             	sub    esp,0x3c
c000a44f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a453:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a457:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45a:	85 db                	test   ebx,ebx
c000a45c:	0f 84 58 02 00 00    	je     c000a6ba <sinc_quad_vari_process+0x277>
c000a462:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a468:	0f af d0             	imul   edx,eax
c000a46b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a479:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a489:	55                   	push   ebp
c000a48a:	55                   	push   ebp
c000a48b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48e:	e8 d6 ed ff ff       	call   c0009269 <is_bad_src_ratio>
c000a493:	89 c2                	mov    edx,eax
c000a495:	58                   	pop    eax
c000a496:	85 d2                	test   edx,edx
c000a498:	59                   	pop    ecx
c000a499:	b8 16 00 00 00       	mov    eax,0x16
c000a49e:	0f 85 16 02 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a4a4:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a4aa:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b5:	d8 d1                	fcom   st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 0f                	jbe    c000a4cb <sinc_quad_vari_process+0x88>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	d9 e8                	fld1   
c000a4c0:	d8 d9                	fcomp  st(1)
c000a4c2:	df e0                	fnstsw ax
c000a4c4:	9e                   	sahf   
c000a4c5:	77 0f                	ja     c000a4d6 <sinc_quad_vari_process+0x93>
c000a4c7:	dd d8                	fstp   st(0)
c000a4c9:	eb 11                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4cb:	dd d9                	fstp   st(1)
c000a4cd:	d9 e8                	fld1   
c000a4cf:	d8 d9                	fcomp  st(1)
c000a4d1:	df e0                	fnstsw ax
c000a4d3:	9e                   	sahf   
c000a4d4:	76 04                	jbe    c000a4da <sinc_quad_vari_process+0x97>
c000a4d6:	de f9                	fdivp  st(1),st
c000a4d8:	eb 02                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4da:	dd d8                	fstp   st(0)
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e5:	e8 16 44 01 00       	call   c001e900 <lrint>
c000a4ea:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ed:	40                   	inc    eax
c000a4ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f1:	0f af c5             	imul   eax,ebp
c000a4f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fc:	e8 6e f8 ff ff       	call   c0009d6f <fmod_one>
c000a501:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a504:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a508:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a50f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a513:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a517:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51a:	e8 e1 43 01 00       	call   c001e900 <lrint>
c000a51f:	0f af e8             	imul   ebp,eax
c000a522:	d9 e8                	fld1   
c000a524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a528:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52c:	01 e8                	add    eax,ebp
c000a52e:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a534:	99                   	cdq    
c000a535:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a539:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a548:	7d 4b                	jge    c000a595 <sinc_quad_vari_process+0x152>
c000a54a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a550:	01 c8                	add    eax,ecx
c000a552:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a555:	99                   	cdq    
c000a556:	f7 f9                	idiv   ecx
c000a558:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55c:	7d 09                	jge    c000a567 <sinc_quad_vari_process+0x124>
c000a55e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a561:	85 c0                	test   eax,eax
c000a563:	79 57                	jns    c000a5bc <sinc_quad_vari_process+0x179>
c000a565:	eb 70                	jmp    c000a5d7 <sinc_quad_vari_process+0x194>
c000a567:	51                   	push   ecx
c000a568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56c:	57                   	push   edi
c000a56d:	53                   	push   ebx
c000a56e:	e8 53 f8 ff ff       	call   c0009dc6 <prepare_data>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a579:	85 c0                	test   eax,eax
c000a57b:	0f 85 39 01 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a581:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a584:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a587:	01 c8                	add    eax,ecx
c000a589:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58c:	99                   	cdq    
c000a58d:	f7 f9                	idiv   ecx
c000a58f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a593:	7c c9                	jl     c000a55e <sinc_quad_vari_process+0x11b>
c000a595:	dd 04 24             	fld    QWORD PTR [esp]
c000a598:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59f:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a4:	99                   	cdq    
c000a5a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ae:	99                   	cdq    
c000a5af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	e9 fe 00 00 00       	jmp    c000a6ba <sinc_quad_vari_process+0x277>
c000a5bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ca:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5ce:	d9 c9                	fxch   st(1)
c000a5d0:	de d9                	fcompp 
c000a5d2:	df e0                	fnstsw ax
c000a5d4:	9e                   	sahf   
c000a5d5:	73 be                	jae    c000a595 <sinc_quad_vari_process+0x152>
c000a5d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5db:	7e 31                	jle    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5dd:	83 ec 10             	sub    esp,0x10
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e8:	e8 f3 42 01 00       	call   c001e8e0 <fabs>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a5f6:	df e0                	fnstsw ax
c000a5f8:	9e                   	sahf   
c000a5f9:	76 13                	jbe    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5fb:	dd 06                	fld    QWORD PTR [esi]
c000a5fd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a600:	d8 e1                	fsub   st,st(1)
c000a602:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a605:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a608:	de c1                	faddp  st(1),st
c000a60a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a611:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a615:	d9 e8                	fld1   
c000a617:	d8 d9                	fcomp  st(1)
c000a619:	df e0                	fnstsw ax
c000a61b:	9e                   	sahf   
c000a61c:	77 04                	ja     c000a622 <sinc_quad_vari_process+0x1df>
c000a61e:	dd d8                	fstp   st(0)
c000a620:	d9 e8                	fld1   
c000a622:	de c9                	fmulp  st(1),st
c000a624:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a628:	50                   	push   eax
c000a629:	50                   	push   eax
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a632:	e8 25 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a637:	89 c5                	mov    ebp,eax
c000a639:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 13 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a649:	83 c4 0c             	add    esp,0xc
c000a64c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a652:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a655:	89 c1                	mov    ecx,eax
c000a657:	52                   	push   edx
c000a658:	89 d8                	mov    eax,ebx
c000a65a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a661:	52                   	push   edx
c000a662:	52                   	push   edx
c000a663:	89 ea                	mov    edx,ebp
c000a665:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a668:	e8 8d ee ff ff       	call   c00094fa <calc_output_quad>
c000a66d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a671:	d9 e8                	fld1   
c000a673:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a677:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67b:	dd 14 24             	fst    QWORD PTR [esp]
c000a67e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a682:	e8 e8 f6 ff ff       	call   c0009d6f <fmod_one>
c000a687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a68e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a699:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a0:	e8 5b 42 01 00       	call   c001e900 <lrint>
c000a6a5:	0f af e8             	imul   ebp,eax
c000a6a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ac:	01 e8                	add    eax,ebp
c000a6ae:	99                   	cdq    
c000a6af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b5:	e9 85 fe ff ff       	jmp    c000a53f <sinc_quad_vari_process+0xfc>
c000a6ba:	83 c4 3c             	add    esp,0x3c
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	5d                   	pop    ebp
c000a6c1:	c3                   	ret    

c000a6c2 <sinc_stereo_vari_process>:
c000a6c2:	55                   	push   ebp
c000a6c3:	b8 05 00 00 00       	mov    eax,0x5
c000a6c8:	57                   	push   edi
c000a6c9:	56                   	push   esi
c000a6ca:	53                   	push   ebx
c000a6cb:	83 ec 3c             	sub    esp,0x3c
c000a6ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d9:	85 db                	test   ebx,ebx
c000a6db:	0f 84 58 02 00 00    	je     c000a939 <sinc_stereo_vari_process+0x277>
c000a6e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e7:	0f af d0             	imul   edx,eax
c000a6ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a708:	55                   	push   ebp
c000a709:	55                   	push   ebp
c000a70a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70d:	e8 57 eb ff ff       	call   c0009269 <is_bad_src_ratio>
c000a712:	89 c2                	mov    edx,eax
c000a714:	58                   	pop    eax
c000a715:	85 d2                	test   edx,edx
c000a717:	59                   	pop    ecx
c000a718:	b8 16 00 00 00       	mov    eax,0x16
c000a71d:	0f 85 16 02 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a723:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a729:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a734:	d8 d1                	fcom   st(1)
c000a736:	df e0                	fnstsw ax
c000a738:	9e                   	sahf   
c000a739:	76 0f                	jbe    c000a74a <sinc_stereo_vari_process+0x88>
c000a73b:	dd d8                	fstp   st(0)
c000a73d:	d9 e8                	fld1   
c000a73f:	d8 d9                	fcomp  st(1)
c000a741:	df e0                	fnstsw ax
c000a743:	9e                   	sahf   
c000a744:	77 0f                	ja     c000a755 <sinc_stereo_vari_process+0x93>
c000a746:	dd d8                	fstp   st(0)
c000a748:	eb 11                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a74a:	dd d9                	fstp   st(1)
c000a74c:	d9 e8                	fld1   
c000a74e:	d8 d9                	fcomp  st(1)
c000a750:	df e0                	fnstsw ax
c000a752:	9e                   	sahf   
c000a753:	76 04                	jbe    c000a759 <sinc_stereo_vari_process+0x97>
c000a755:	de f9                	fdivp  st(1),st
c000a757:	eb 02                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a759:	dd d8                	fstp   st(0)
c000a75b:	83 ec 10             	sub    esp,0x10
c000a75e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a761:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a764:	e8 97 41 01 00       	call   c001e900 <lrint>
c000a769:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76c:	40                   	inc    eax
c000a76d:	dd 14 24             	fst    QWORD PTR [esp]
c000a770:	0f af c5             	imul   eax,ebp
c000a773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a777:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a77b:	e8 ef f5 ff ff       	call   c0009d6f <fmod_one>
c000a780:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a783:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a787:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a78e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a792:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a796:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a799:	e8 62 41 01 00       	call   c001e900 <lrint>
c000a79e:	0f af e8             	imul   ebp,eax
c000a7a1:	d9 e8                	fld1   
c000a7a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	01 e8                	add    eax,ebp
c000a7ad:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a7b3:	99                   	cdq    
c000a7b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a7b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c7:	7d 4b                	jge    c000a814 <sinc_stereo_vari_process+0x152>
c000a7c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cf:	01 c8                	add    eax,ecx
c000a7d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d4:	99                   	cdq    
c000a7d5:	f7 f9                	idiv   ecx
c000a7d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7db:	7d 09                	jge    c000a7e6 <sinc_stereo_vari_process+0x124>
c000a7dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e0:	85 c0                	test   eax,eax
c000a7e2:	79 57                	jns    c000a83b <sinc_stereo_vari_process+0x179>
c000a7e4:	eb 70                	jmp    c000a856 <sinc_stereo_vari_process+0x194>
c000a7e6:	51                   	push   ecx
c000a7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7eb:	57                   	push   edi
c000a7ec:	53                   	push   ebx
c000a7ed:	e8 d4 f5 ff ff       	call   c0009dc6 <prepare_data>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f8:	85 c0                	test   eax,eax
c000a7fa:	0f 85 39 01 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a800:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a803:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a806:	01 c8                	add    eax,ecx
c000a808:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80b:	99                   	cdq    
c000a80c:	f7 f9                	idiv   ecx
c000a80e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a812:	7c c9                	jl     c000a7dd <sinc_stereo_vari_process+0x11b>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 fe 00 00 00       	jmp    c000a939 <sinc_stereo_vari_process+0x277>
c000a83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a83f:	dd 04 24             	fld    QWORD PTR [esp]
c000a842:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a845:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a849:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	73 be                	jae    c000a814 <sinc_stereo_vari_process+0x152>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 31                	jle    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a85c:	83 ec 10             	sub    esp,0x10
c000a85f:	dd 06                	fld    QWORD PTR [esi]
c000a861:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 74 40 01 00       	call   c001e8e0 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 13                	jbe    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a87a:	dd 06                	fld    QWORD PTR [esi]
c000a87c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87f:	d8 e1                	fsub   st,st(1)
c000a881:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a884:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a887:	de c1                	faddp  st(1),st
c000a889:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a890:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a894:	d9 e8                	fld1   
c000a896:	d8 d9                	fcomp  st(1)
c000a898:	df e0                	fnstsw ax
c000a89a:	9e                   	sahf   
c000a89b:	77 04                	ja     c000a8a1 <sinc_stereo_vari_process+0x1df>
c000a89d:	dd d8                	fstp   st(0)
c000a89f:	d9 e8                	fld1   
c000a8a1:	de c9                	fmulp  st(1),st
c000a8a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a8a7:	50                   	push   eax
c000a8a8:	50                   	push   eax
c000a8a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b1:	e8 a6 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8b6:	89 c5                	mov    ebp,eax
c000a8b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 94 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8c8:	83 c4 0c             	add    esp,0xc
c000a8cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8d4:	89 c1                	mov    ecx,eax
c000a8d6:	52                   	push   edx
c000a8d7:	89 d8                	mov    eax,ebx
c000a8d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	89 ea                	mov    edx,ebp
c000a8e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e7:	e8 ce ea ff ff       	call   c00093ba <calc_output_stereo>
c000a8ec:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8f0:	d9 e8                	fld1   
c000a8f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a901:	e8 69 f4 ff ff       	call   c0009d6f <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91f:	e8 dc 3f 01 00       	call   c001e900 <lrint>
c000a924:	0f af e8             	imul   ebp,eax
c000a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a92b:	01 e8                	add    eax,ebp
c000a92d:	99                   	cdq    
c000a92e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a931:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a934:	e9 85 fe ff ff       	jmp    c000a7be <sinc_stereo_vari_process+0xfc>
c000a939:	83 c4 3c             	add    esp,0x3c
c000a93c:	5b                   	pop    ebx
c000a93d:	5e                   	pop    esi
c000a93e:	5f                   	pop    edi
c000a93f:	5d                   	pop    ebp
c000a940:	c3                   	ret    

c000a941 <sinc_mono_vari_process>:
c000a941:	55                   	push   ebp
c000a942:	b8 05 00 00 00       	mov    eax,0x5
c000a947:	57                   	push   edi
c000a948:	56                   	push   esi
c000a949:	53                   	push   ebx
c000a94a:	83 ec 3c             	sub    esp,0x3c
c000a94d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a951:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a955:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a958:	85 db                	test   ebx,ebx
c000a95a:	0f 84 57 02 00 00    	je     c000abb7 <sinc_mono_vari_process+0x276>
c000a960:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a963:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a966:	0f af d0             	imul   edx,eax
c000a969:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a96c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a977:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a97a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a987:	51                   	push   ecx
c000a988:	51                   	push   ecx
c000a989:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a98c:	e8 d8 e8 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a991:	5d                   	pop    ebp
c000a992:	89 c2                	mov    edx,eax
c000a994:	58                   	pop    eax
c000a995:	85 d2                	test   edx,edx
c000a997:	b8 16 00 00 00       	mov    eax,0x16
c000a99c:	0f 85 15 02 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000a9a2:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a9a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a9ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a9ae:	dd 06                	fld    QWORD PTR [esi]
c000a9b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9b3:	d8 d1                	fcom   st(1)
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	9e                   	sahf   
c000a9b8:	76 0f                	jbe    c000a9c9 <sinc_mono_vari_process+0x88>
c000a9ba:	dd d8                	fstp   st(0)
c000a9bc:	d9 e8                	fld1   
c000a9be:	d8 d9                	fcomp  st(1)
c000a9c0:	df e0                	fnstsw ax
c000a9c2:	9e                   	sahf   
c000a9c3:	77 0f                	ja     c000a9d4 <sinc_mono_vari_process+0x93>
c000a9c5:	dd d8                	fstp   st(0)
c000a9c7:	eb 11                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9c9:	dd d9                	fstp   st(1)
c000a9cb:	d9 e8                	fld1   
c000a9cd:	d8 d9                	fcomp  st(1)
c000a9cf:	df e0                	fnstsw ax
c000a9d1:	9e                   	sahf   
c000a9d2:	76 04                	jbe    c000a9d8 <sinc_mono_vari_process+0x97>
c000a9d4:	de f9                	fdivp  st(1),st
c000a9d6:	eb 02                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9d8:	dd d8                	fstp   st(0)
c000a9da:	83 ec 10             	sub    esp,0x10
c000a9dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9e3:	e8 18 3f 01 00       	call   c001e900 <lrint>
c000a9e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9eb:	40                   	inc    eax
c000a9ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a9ef:	0f af e8             	imul   ebp,eax
c000a9f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9f6:	e8 74 f3 ff ff       	call   c0009d6f <fmod_one>
c000a9fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000aa0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa0d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa15:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa18:	e8 e3 3e 01 00       	call   c001e900 <lrint>
c000aa1d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aa22:	d9 e8                	fld1   
c000aa24:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa28:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa2c:	99                   	cdq    
c000aa2d:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000aa33:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa36:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa3a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa43:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa46:	7d 44                	jge    c000aa8c <sinc_mono_vari_process+0x14b>
c000aa48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa4e:	01 c8                	add    eax,ecx
c000aa50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa53:	99                   	cdq    
c000aa54:	f7 f9                	idiv   ecx
c000aa56:	39 d5                	cmp    ebp,edx
c000aa58:	7d 09                	jge    c000aa63 <sinc_mono_vari_process+0x122>
c000aa5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa5d:	85 c0                	test   eax,eax
c000aa5f:	79 52                	jns    c000aab3 <sinc_mono_vari_process+0x172>
c000aa61:	eb 6b                	jmp    c000aace <sinc_mono_vari_process+0x18d>
c000aa63:	52                   	push   edx
c000aa64:	55                   	push   ebp
c000aa65:	57                   	push   edi
c000aa66:	53                   	push   ebx
c000aa67:	e8 5a f3 ff ff       	call   c0009dc6 <prepare_data>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa72:	85 c0                	test   eax,eax
c000aa74:	0f 85 3d 01 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000aa7a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa7d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa80:	01 c8                	add    eax,ecx
c000aa82:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa85:	99                   	cdq    
c000aa86:	f7 f9                	idiv   ecx
c000aa88:	39 d5                	cmp    ebp,edx
c000aa8a:	7c ce                	jl     c000aa5a <sinc_mono_vari_process+0x119>
c000aa8c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa92:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa96:	dd 1e                	fstp   QWORD PTR [esi]
c000aa98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa9b:	99                   	cdq    
c000aa9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa9f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aaa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aaa5:	99                   	cdq    
c000aaa6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aaa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaac:	31 c0                	xor    eax,eax
c000aaae:	e9 04 01 00 00       	jmp    c000abb7 <sinc_mono_vari_process+0x276>
c000aab3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab7:	dd 04 24             	fld    QWORD PTR [esp]
c000aaba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aabd:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aac1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aac5:	d9 c9                	fxch   st(1)
c000aac7:	de d9                	fcompp 
c000aac9:	df e0                	fnstsw ax
c000aacb:	9e                   	sahf   
c000aacc:	77 be                	ja     c000aa8c <sinc_mono_vari_process+0x14b>
c000aace:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aad2:	7e 31                	jle    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aad4:	83 ec 10             	sub    esp,0x10
c000aad7:	dd 06                	fld    QWORD PTR [esi]
c000aad9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aadc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aadf:	e8 fc 3d 01 00       	call   c001e8e0 <fabs>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000aaed:	df e0                	fnstsw ax
c000aaef:	9e                   	sahf   
c000aaf0:	76 13                	jbe    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aaf2:	dd 06                	fld    QWORD PTR [esi]
c000aaf4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaf7:	d8 e1                	fsub   st,st(1)
c000aaf9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aafc:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aaff:	de c1                	faddp  st(1),st
c000ab01:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000ab05:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000ab08:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab0c:	d9 e8                	fld1   
c000ab0e:	d8 d9                	fcomp  st(1)
c000ab10:	df e0                	fnstsw ax
c000ab12:	9e                   	sahf   
c000ab13:	77 04                	ja     c000ab19 <sinc_mono_vari_process+0x1d8>
c000ab15:	dd d8                	fstp   st(0)
c000ab17:	d9 e8                	fld1   
c000ab19:	de c9                	fmulp  st(1),st
c000ab1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab29:	e8 2e f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab32:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab36:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3d:	e8 1a f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab46:	89 c1                	mov    ecx,eax
c000ab48:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab51:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab55:	e8 7b e7 ff ff       	call   c00092d5 <calc_output_single>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab60:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab64:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab67:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab6a:	d9 e8                	fld1   
c000ab6c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab70:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab74:	dd 14 24             	fst    QWORD PTR [esp]
c000ab77:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab7b:	e8 ef f1 ff ff       	call   c0009d6f <fmod_one>
c000ab80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab8b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab8f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab92:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9d:	e8 5e 3d 01 00       	call   c001e900 <lrint>
c000aba2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aba7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000abab:	99                   	cdq    
c000abac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000abaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000abb2:	e9 86 fe ff ff       	jmp    c000aa3d <sinc_mono_vari_process+0xfc>
c000abb7:	83 c4 3c             	add    esp,0x3c
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	5f                   	pop    edi
c000abbd:	5d                   	pop    ebp
c000abbe:	c3                   	ret    

c000abbf <sinc_get_name>:
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	83 fa 02             	cmp    edx,0x2
c000abc8:	77 07                	ja     c000abd1 <sinc_get_name+0x12>
c000abca:	8b 04 95 60 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfea0]
c000abd1:	c3                   	ret    

c000abd2 <sinc_get_description>:
c000abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abd6:	31 c0                	xor    eax,eax
c000abd8:	83 fa 02             	cmp    edx,0x2
c000abdb:	77 07                	ja     c000abe4 <sinc_get_description+0x12>
c000abdd:	8b 04 95 54 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfeac]
c000abe4:	c3                   	ret    

c000abe5 <sinc_set_converter>:
c000abe5:	55                   	push   ebp
c000abe6:	57                   	push   edi
c000abe7:	56                   	push   esi
c000abe8:	53                   	push   ebx
c000abe9:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abef:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abf6:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abfd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 13                	je     c000ac17 <sinc_set_converter+0x32>
c000ac04:	83 ec 0c             	sub    esp,0xc
c000ac07:	50                   	push   eax
c000ac08:	e8 9c 28 00 00       	call   c000d4a9 <free>
c000ac0d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	56                   	push   esi
c000ac18:	68 44 08 00 00       	push   0x844
c000ac1d:	6a 00                	push   0x0
c000ac1f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ac23:	56                   	push   esi
c000ac24:	e8 af 5a ff ff       	call   c00006d8 <memset>
c000ac29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac2c:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac38:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac46:	0f 8f 58 01 00 00    	jg     c000ada4 <sinc_set_converter+0x1bf>
c000ac4c:	83 fa 01             	cmp    edx,0x1
c000ac4f:	75 10                	jne    c000ac61 <sinc_set_converter+0x7c>
c000ac51:	c7 43 24 41 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a941
c000ac58:	c7 43 20 41 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a941
c000ac5f:	eb 4d                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac61:	83 fa 02             	cmp    edx,0x2
c000ac64:	75 10                	jne    c000ac76 <sinc_set_converter+0x91>
c000ac66:	c7 43 24 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c2
c000ac6d:	c7 43 20 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c2
c000ac74:	eb 38                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac76:	83 fa 04             	cmp    edx,0x4
c000ac79:	75 10                	jne    c000ac8b <sinc_set_converter+0xa6>
c000ac7b:	c7 43 24 43 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a443
c000ac82:	c7 43 20 43 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a443
c000ac89:	eb 23                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac8b:	83 fa 06             	cmp    edx,0x6
c000ac8e:	75 10                	jne    c000aca0 <sinc_set_converter+0xbb>
c000ac90:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000ac97:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000ac9e:	eb 0e                	jmp    c000acae <sinc_set_converter+0xc9>
c000aca0:	c7 43 24 40 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f40
c000aca7:	c7 43 20 40 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f40
c000acae:	c7 43 28 f9 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009cf9
c000acb5:	83 fd 01             	cmp    ebp,0x1
c000acb8:	74 28                	je     c000ace2 <sinc_set_converter+0xfd>
c000acba:	b8 0a 00 00 00       	mov    eax,0xa
c000acbf:	83 fd 02             	cmp    ebp,0x2
c000acc2:	0f 85 dc 00 00 00    	jne    c000ada4 <sinc_set_converter+0x1bf>
c000acc8:	c7 44 24 3c 24 60 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0036024
c000acd0:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acd8:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000ace0:	eb 18                	jmp    c000acfa <sinc_set_converter+0x115>
c000ace2:	c7 44 24 3c 84 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc0020184
c000acea:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acf2:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000acfa:	83 ec 10             	sub    esp,0x10
c000acfd:	d9 05 cc 87 03 c0    	fld    DWORD PTR ds:0xc00387cc
c000ad03:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ad07:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ad0b:	d8 0d d0 87 03 c0    	fmul   DWORD PTR ds:0xc00387d0
c000ad11:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ad14:	e8 e7 3b 01 00       	call   c001e900 <lrint>
c000ad19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad1d:	83 c4 10             	add    esp,0x10
c000ad20:	3d 00 10 00 00       	cmp    eax,0x1000
c000ad25:	7d 05                	jge    c000ad2c <sinc_set_converter+0x147>
c000ad27:	b8 00 10 00 00       	mov    eax,0x1000
c000ad2c:	0f af c2             	imul   eax,edx
c000ad2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad33:	51                   	push   ecx
c000ad34:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e0 02             	shl    eax,0x2
c000ad3f:	50                   	push   eax
c000ad40:	6a 01                	push   0x1
c000ad42:	e8 82 27 00 00       	call   c000d4c9 <calloc>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	89 c5                	mov    ebp,eax
c000ad4c:	b8 01 00 00 00       	mov    eax,0x1
c000ad51:	85 ed                	test   ebp,ebp
c000ad53:	74 4f                	je     c000ada4 <sinc_set_converter+0x1bf>
c000ad55:	b9 11 02 00 00       	mov    ecx,0x211
c000ad5a:	fc                   	cld    
c000ad5b:	89 ef                	mov    edi,ebp
c000ad5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad5f:	50                   	push   eax
c000ad60:	68 44 08 00 00       	push   0x844
c000ad65:	68 ee 00 00 00       	push   0xee
c000ad6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad6e:	50                   	push   eax
c000ad6f:	e8 64 59 ff ff       	call   c00006d8 <memset>
c000ad74:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad7a:	e8 7a ef ff ff       	call   c0009cf9 <sinc_reset>
c000ad7f:	bb 01 00 00 00       	mov    ebx,0x1
c000ad84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	31 c9                	xor    ecx,ecx
c000ad8c:	89 da                	mov    edx,ebx
c000ad8e:	d3 e2                	shl    edx,cl
c000ad90:	39 c2                	cmp    edx,eax
c000ad92:	7d 05                	jge    c000ad99 <sinc_set_converter+0x1b4>
c000ad94:	09 d0                	or     eax,edx
c000ad96:	41                   	inc    ecx
c000ad97:	eb f3                	jmp    c000ad8c <sinc_set_converter+0x1a7>
c000ad99:	31 c0                	xor    eax,eax
c000ad9b:	83 f9 15             	cmp    ecx,0x15
c000ad9e:	0f 9d c0             	setge  al
c000ada1:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ada4:	81 c4 5c 08 00 00    	add    esp,0x85c
c000adaa:	5b                   	pop    ebx
c000adab:	5e                   	pop    esi
c000adac:	5f                   	pop    edi
c000adad:	5d                   	pop    ebp
c000adae:	c3                   	ret    

c000adaf <is_bad_src_ratio>:
c000adaf:	83 ec 0c             	sub    esp,0xc
c000adb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc1:	dd 04 24             	fld    QWORD PTR [esp]
c000adc4:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c000adca:	de d9                	fcompp 
c000adcc:	df e0                	fnstsw ax
c000adce:	f6 c4 45             	test   ah,0x45
c000add1:	74 10                	je     c000ade3 <is_bad_src_ratio+0x34>
c000add3:	dd 04 24             	fld    QWORD PTR [esp]
c000add6:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c000addc:	df e0                	fnstsw ax
c000adde:	f6 c4 45             	test   ah,0x45
c000ade1:	75 07                	jne    c000adea <is_bad_src_ratio+0x3b>
c000ade3:	b8 01 00 00 00       	mov    eax,0x1
c000ade8:	eb 05                	jmp    c000adef <is_bad_src_ratio+0x40>
c000adea:	b8 00 00 00 00       	mov    eax,0x0
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    

c000adf3 <fmod_one>:
c000adf3:	83 ec 2c             	sub    esp,0x2c
c000adf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae06:	83 ec 08             	sub    esp,0x8
c000ae09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae11:	e8 ea 3a 01 00       	call   c001e900 <lrint>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae1d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ae21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ae25:	de e1                	fsubrp st(1),st
c000ae27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae2b:	d9 ee                	fldz   
c000ae2d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae31:	df e0                	fnstsw ax
c000ae33:	f6 c4 45             	test   ah,0x45
c000ae36:	75 0a                	jne    c000ae42 <fmod_one+0x4f>
c000ae38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae3c:	d9 e8                	fld1   
c000ae3e:	de c1                	faddp  st(1),st
c000ae40:	eb 04                	jmp    c000ae46 <fmod_one+0x53>
c000ae42:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae46:	83 c4 2c             	add    esp,0x2c
c000ae49:	c3                   	ret    

c000ae4a <zoh_vari_process>:
c000ae4a:	55                   	push   ebp
c000ae4b:	57                   	push   edi
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 2c             	sub    esp,0x2c
c000ae51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae61:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae65:	0f 8e 34 02 00 00    	jle    c000b09f <zoh_vari_process+0x255>
c000ae6b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae6e:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae76:	85 db                	test   ebx,ebx
c000ae78:	0f 84 21 02 00 00    	je     c000b09f <zoh_vari_process+0x255>
c000ae7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae81:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae85:	74 19                	je     c000aea0 <zoh_vari_process+0x56>
c000ae87:	31 d2                	xor    edx,edx
c000ae89:	39 c2                	cmp    edx,eax
c000ae8b:	7d 0c                	jge    c000ae99 <zoh_vari_process+0x4f>
c000ae8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae8f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae92:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae96:	42                   	inc    edx
c000ae97:	eb f0                	jmp    c000ae89 <zoh_vari_process+0x3f>
c000ae99:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aea0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aea3:	0f af d0             	imul   edx,eax
c000aea6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aea9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aead:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aeb4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aebe:	dd 07                	fld    QWORD PTR [edi]
c000aec0:	dd 14 24             	fst    QWORD PTR [esp]
c000aec3:	50                   	push   eax
c000aec4:	50                   	push   eax
c000aec5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aec8:	e8 e2 fe ff ff       	call   c000adaf <is_bad_src_ratio>
c000aecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aed1:	5a                   	pop    edx
c000aed2:	59                   	pop    ecx
c000aed3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aed8:	0f 85 b9 01 00 00    	jne    c000b097 <zoh_vari_process+0x24d>
c000aede:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aee1:	d9 e8                	fld1   
c000aee3:	d8 d1                	fcom   st(1)
c000aee5:	df e0                	fnstsw ax
c000aee7:	9e                   	sahf   
c000aee8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aeec:	0f 86 85 00 00 00    	jbe    c000af77 <zoh_vari_process+0x12d>
c000aef2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aef5:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aef8:	7d 7d                	jge    c000af77 <zoh_vari_process+0x12d>
c000aefa:	d9 c0                	fld    st(0)
c000aefc:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aeff:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000af02:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000af05:	df e0                	fnstsw ax
c000af07:	9e                   	sahf   
c000af08:	73 6d                	jae    c000af77 <zoh_vari_process+0x12d>
c000af0a:	85 d2                	test   edx,edx
c000af0c:	7e 38                	jle    c000af46 <zoh_vari_process+0xfc>
c000af0e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000af12:	83 ec 10             	sub    esp,0x10
c000af15:	dd 07                	fld    QWORD PTR [edi]
c000af17:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000af1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af1d:	e8 be 39 01 00       	call   c001e8e0 <fabs>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c000af2b:	df e0                	fnstsw ax
c000af2d:	9e                   	sahf   
c000af2e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af32:	76 12                	jbe    c000af46 <zoh_vari_process+0xfc>
c000af34:	dd 07                	fld    QWORD PTR [edi]
c000af36:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af39:	d8 e1                	fsub   st,st(1)
c000af3b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af3e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af41:	de c1                	faddp  st(1),st
c000af43:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af46:	31 c0                	xor    eax,eax
c000af48:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af4b:	7e 13                	jle    c000af60 <zoh_vari_process+0x116>
c000af4d:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af51:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af54:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af57:	40                   	inc    eax
c000af58:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af5b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af5e:	eb e8                	jmp    c000af48 <zoh_vari_process+0xfe>
c000af60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af64:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af67:	de c1                	faddp  st(1),st
c000af69:	e9 73 ff ff ff       	jmp    c000aee1 <zoh_vari_process+0x97>
c000af6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af72:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af75:	de c1                	faddp  st(1),st
c000af77:	83 ec 10             	sub    esp,0x10
c000af7a:	dd 14 24             	fst    QWORD PTR [esp]
c000af7d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af81:	e8 6d fe ff ff       	call   c000adf3 <fmod_one>
c000af86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af8d:	d8 e1                	fsub   st,st(1)
c000af8f:	d9 c9                	fxch   st(1)
c000af91:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af98:	e8 63 39 01 00       	call   c001e900 <lrint>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	0f af e8             	imul   ebp,eax
c000afa3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000afa6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000afa9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000afb0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000afb3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000afb6:	0f 8d 82 00 00 00    	jge    c000b03e <zoh_vari_process+0x1f4>
c000afbc:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000afc0:	d9 c0                	fld    st(0)
c000afc2:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000afc5:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000afc9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afcd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afd1:	de d9                	fcompp 
c000afd3:	df e0                	fnstsw ax
c000afd5:	9e                   	sahf   
c000afd6:	72 66                	jb     c000b03e <zoh_vari_process+0x1f4>
c000afd8:	85 d2                	test   edx,edx
c000afda:	7e 38                	jle    c000b014 <zoh_vari_process+0x1ca>
c000afdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afe0:	83 ec 10             	sub    esp,0x10
c000afe3:	dd 07                	fld    QWORD PTR [edi]
c000afe5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afe8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afeb:	e8 f0 38 01 00       	call   c001e8e0 <fabs>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c000aff9:	df e0                	fnstsw ax
c000affb:	9e                   	sahf   
c000affc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000b000:	76 12                	jbe    c000b014 <zoh_vari_process+0x1ca>
c000b002:	dd 07                	fld    QWORD PTR [edi]
c000b004:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000b007:	d8 e1                	fsub   st,st(1)
c000b009:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000b00c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000b00f:	de c1                	faddp  st(1),st
c000b011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000b014:	31 d2                	xor    edx,edx
c000b016:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b019:	39 d0                	cmp    eax,edx
c000b01b:	0f 8e 4d ff ff ff    	jle    c000af6e <zoh_vari_process+0x124>
c000b021:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000b024:	29 c1                	sub    ecx,eax
c000b026:	89 c8                	mov    eax,ecx
c000b028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b02a:	01 d0                	add    eax,edx
c000b02c:	42                   	inc    edx
c000b02d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b030:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b033:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b036:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b039:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b03c:	eb d8                	jmp    c000b016 <zoh_vari_process+0x1cc>
c000b03e:	39 e9                	cmp    ecx,ebp
c000b040:	7d 13                	jge    c000b055 <zoh_vari_process+0x20b>
c000b042:	89 e8                	mov    eax,ebp
c000b044:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b047:	29 c8                	sub    eax,ecx
c000b049:	99                   	cdq    
c000b04a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b051:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b055:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7f 1b                	jg     c000b07a <zoh_vari_process+0x230>
c000b05f:	dd 04 24             	fld    QWORD PTR [esp]
c000b062:	dd 1f                	fstp   QWORD PTR [edi]
c000b064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b067:	99                   	cdq    
c000b068:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b06b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b06e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b071:	99                   	cdq    
c000b072:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b075:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b078:	eb 25                	jmp    c000b09f <zoh_vari_process+0x255>
c000b07a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b07d:	31 d2                	xor    edx,edx
c000b07f:	29 e8                	sub    eax,ebp
c000b081:	c1 e0 02             	shl    eax,0x2
c000b084:	39 d5                	cmp    ebp,edx
c000b086:	7e d7                	jle    c000b05f <zoh_vari_process+0x215>
c000b088:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b08a:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b08d:	83 c0 04             	add    eax,0x4
c000b090:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b094:	42                   	inc    edx
c000b095:	eb ed                	jmp    c000b084 <zoh_vari_process+0x23a>
c000b097:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	83 c4 2c             	add    esp,0x2c
c000b0a6:	5b                   	pop    ebx
c000b0a7:	5e                   	pop    esi
c000b0a8:	5f                   	pop    edi
c000b0a9:	5d                   	pop    ebp
c000b0aa:	c3                   	ret    

c000b0ab <zoh_reset>:
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b0b5:	85 c0                	test   eax,eax
c000b0b7:	74 20                	je     c000b0d9 <zoh_reset+0x2e>
c000b0b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b0bc:	83 c0 1c             	add    eax,0x1c
c000b0bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b0c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b0c9:	c1 e2 02             	shl    edx,0x2
c000b0cc:	51                   	push   ecx
c000b0cd:	52                   	push   edx
c000b0ce:	6a 00                	push   0x0
c000b0d0:	50                   	push   eax
c000b0d1:	e8 02 56 ff ff       	call   c00006d8 <memset>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    

c000b0dd <zoh_get_name>:
c000b0dd:	31 c0                	xor    eax,eax
c000b0df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0e4:	75 05                	jne    c000b0eb <zoh_get_name+0xe>
c000b0e6:	b8 d4 87 03 c0       	mov    eax,0xc00387d4
c000b0eb:	c3                   	ret    

c000b0ec <zoh_get_description>:
c000b0ec:	31 c0                	xor    eax,eax
c000b0ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0f3:	75 05                	jne    c000b0fa <zoh_get_description+0xe>
c000b0f5:	b8 e5 87 03 c0       	mov    eax,0xc00387e5
c000b0fa:	c3                   	ret    

c000b0fb <zoh_set_converter>:
c000b0fb:	53                   	push   ebx
c000b0fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b101:	83 ec 08             	sub    esp,0x8
c000b104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b108:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b10d:	75 6e                	jne    c000b17d <zoh_set_converter+0x82>
c000b10f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b112:	85 c0                	test   eax,eax
c000b114:	74 13                	je     c000b129 <zoh_set_converter+0x2e>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 8a 23 00 00       	call   c000d4a9 <free>
c000b11f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	50                   	push   eax
c000b12a:	50                   	push   eax
c000b12b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b135:	50                   	push   eax
c000b136:	6a 01                	push   0x1
c000b138:	e8 8c 23 00 00       	call   c000d4c9 <calloc>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c2                	mov    edx,eax
c000b142:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b145:	85 d2                	test   edx,edx
c000b147:	b8 01 00 00 00       	mov    eax,0x1
c000b14c:	74 2f                	je     c000b17d <zoh_set_converter+0x82>
c000b14e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b15a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b15d:	c7 43 24 4a ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae4a
c000b164:	c7 43 20 4a ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae4a
c000b16b:	c7 43 28 ab b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b0ab
c000b172:	53                   	push   ebx
c000b173:	e8 33 ff ff ff       	call   c000b0ab <zoh_reset>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	31 c0                	xor    eax,eax
c000b17d:	83 c4 08             	add    esp,0x8
c000b180:	5b                   	pop    ebx
c000b181:	c3                   	ret    

c000b182 <Computer::close(int, int, void*)>:
c000b182:	57                   	push   edi
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b189:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b18d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b19a:	e8 2f 87 00 00       	call   c00138ce <Device::closeAll()>
c000b19f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1aa:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b1ae:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b1b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1be:	5b                   	pop    ebx
c000b1bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b1c2:	5e                   	pop    esi
c000b1c3:	5f                   	pop    edi
c000b1c4:	ff e0                	jmp    eax

c000b1c6 <Computer::Computer()>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	83 ec 08             	sub    esp,0x8
c000b1d0:	68 1c 88 03 c0       	push   0xc003881c
c000b1d5:	50                   	push   eax
c000b1d6:	e8 6d 87 00 00       	call   c0013948 <Device::Device(char const*)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	ba 98 88 03 c0       	mov    edx,0xc0038898
c000b1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e7:	89 10                	mov    DWORD PTR [eax],edx
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b209:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b20f:	83 ca 04             	or     edx,0x4
c000b212:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b222:	0f b6 d0             	movzx  edx,al
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b23a:	0f b6 d0             	movzx  edx,al
c000b23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b241:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b250:	8d 50 01             	lea    edx,[eax+0x1]
c000b253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b257:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b25d:	0f b6 d0             	movzx  edx,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b268:	83 e1 3f             	and    ecx,0x3f
c000b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b279:	0f b6 d0             	movzx  edx,al
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b291:	0f b6 d0             	movzx  edx,al
c000b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b298:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2b4:	0f b6 d0             	movzx  edx,al
c000b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2bf:	83 e1 3f             	and    ecx,0x3f
c000b2c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d0:	0f b6 d0             	movzx  edx,al
c000b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2e8:	0f b6 d0             	movzx  edx,al
c000b2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2fe:	8d 50 01             	lea    edx,[eax+0x1]
c000b301:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b305:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b30b:	0f b6 d0             	movzx  edx,al
c000b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b312:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b316:	83 e1 3f             	and    ecx,0x3f
c000b319:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b31d:	90                   	nop
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Computer::setBootMessage(char const*)>:
c000b322:	c3                   	ret    
c000b323:	90                   	nop

c000b324 <Computer::start()>:
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	50                   	push   eax
c000b327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b32b:	e8 10 30 00 00       	call   c000e340 <lockScheduler()>
c000b330:	e8 3f 33 00 00       	call   c000e674 <schedule()>
c000b335:	e8 08 30 00 00       	call   c000e342 <unlockScheduler()>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	68 3b 07 00 00       	push   0x73b
c000b343:	e8 06 71 00 00       	call   c001244e <operator new(unsigned long)>
c000b348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34f:	89 c6                	mov    esi,eax
c000b351:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000b357:	68 25 88 03 c0       	push   0xc0038825
c000b35c:	6a 01                	push   0x1
c000b35e:	50                   	push   eax
c000b35f:	e8 3c 2e 00 00       	call   c000e1a0 <Process::Process(bool, char const*, Process*, char**)>
c000b364:	83 c4 20             	add    esp,0x20
c000b367:	68 ff 00 00 00       	push   0xff
c000b36c:	6a 00                	push   0x0
c000b36e:	68 0d c9 00 c0       	push   0xc000c90d
c000b373:	56                   	push   esi
c000b374:	e8 f1 30 00 00       	call   c000e46a <Process::createThread(void (*)(void*), void*, int)>
c000b379:	6a 7a                	push   0x7a
c000b37b:	6a 00                	push   0x0
c000b37d:	68 b0 ee 00 c0       	push   0xc000eeb0
c000b382:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000b388:	e8 dd 30 00 00       	call   c000e46a <Process::createThread(void (*)(void*), void*, int)>
c000b38d:	83 c4 20             	add    esp,0x20
c000b390:	a3 d0 bb 03 c0       	mov    ds:0xc003bbd0,eax
c000b395:	c6 05 cd b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9cd,0x1
c000b39c:	e8 07 73 00 00       	call   c00126a8 <initVFS()>
c000b3a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b3a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a9:	6a 00                	push   0x0
c000b3ab:	6a 00                	push   0x0
c000b3ad:	6a 00                	push   0x0
c000b3af:	50                   	push   eax
c000b3b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3b3:	e8 95 48 00 00       	call   c000fc4d <setupSystemCalls()>
c000b3b8:	e8 e9 7d 00 00       	call   c00131a6 <loadClockSettings()>
c000b3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c0:	e8 dd 84 00 00       	call   c00138a2 <Device::loadDriversForAll()>
c000b3c5:	c7 04 24 32 88 03 c0 	mov    DWORD PTR [esp],0xc0038832
c000b3cc:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c000b3d2:	e8 a7 12 00 00       	call   c000c67e <loadDLL(char const*)>
c000b3d7:	5a                   	pop    edx
c000b3d8:	59                   	pop    ecx
c000b3d9:	53                   	push   ebx
c000b3da:	50                   	push   eax
c000b3db:	e8 67 13 00 00       	call   c000c747 <executeDLL(unsigned long, void*)>
c000b3e0:	c7 04 24 14 a0 03 c0 	mov    DWORD PTR [esp],0xc003a014
c000b3e7:	e8 b2 1a 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	6a 02                	push   0x2
c000b3f4:	e8 46 35 00 00       	call   c000e93f <blockTask(TaskState)>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	eb f1                	jmp    c000b3ef <Computer::start()+0xcb>

c000b3fe <firstTask()>:
c000b3fe:	83 ec 18             	sub    esp,0x18
c000b401:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c000b407:	e8 18 ff ff ff       	call   c000b324 <Computer::start()>

c000b40c <Computer::detectFeatures()>:
c000b40c:	55                   	push   ebp
c000b40d:	57                   	push   edi
c000b40e:	56                   	push   esi
c000b40f:	53                   	push   ebx
c000b410:	83 ec 1c             	sub    esp,0x1c
c000b413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b417:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b421:	e8 c6 4e ff ff       	call   c00002ec <detectCPUID>
c000b426:	85 c0                	test   eax,eax
c000b428:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b42e:	0f 95 c2             	setne  dl
c000b431:	83 e0 fd             	and    eax,0xfffffffd
c000b434:	d1 e2                	shl    edx,1
c000b436:	09 d0                	or     eax,edx
c000b438:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b43e:	a8 02                	test   al,0x2
c000b440:	75 46                	jne    c000b488 <Computer::detectFeatures()+0x7c>
c000b442:	f6 05 75 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb75,0x4
c000b449:	74 07                	je     c000b452 <Computer::detectFeatures()+0x46>
c000b44b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b452:	e8 2f 2f 01 00       	call   c001e386 <x87Detect>
c000b457:	83 e0 01             	and    eax,0x1
c000b45a:	c1 e0 04             	shl    eax,0x4
c000b45d:	88 c2                	mov    dl,al
c000b45f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b465:	83 e0 ef             	and    eax,0xffffffef
c000b468:	09 d0                	or     eax,edx
c000b46a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b470:	a8 10                	test   al,0x10
c000b472:	0f 85 10 01 00 00    	jne    c000b588 <Computer::detectFeatures()+0x17c>
c000b478:	84 c0                	test   al,al
c000b47a:	0f 88 2b 01 00 00    	js     c000b5ab <Computer::detectFeatures()+0x19f>
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	5b                   	pop    ebx
c000b484:	5e                   	pop    esi
c000b485:	5f                   	pop    edi
c000b486:	5d                   	pop    ebp
c000b487:	c3                   	ret    
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	6a 20                	push   0x20
c000b48d:	e8 0b bc 00 00       	call   c001709d <cpuidCheckEDX(unsigned int)>
c000b492:	83 e0 01             	and    eax,0x1
c000b495:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b49c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4a2:	83 e0 f7             	and    eax,0xfffffff7
c000b4a5:	09 d0                	or     eax,edx
c000b4a7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4ad:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b4b4:	e8 e4 bb 00 00       	call   c001709d <cpuidCheckEDX(unsigned int)>
c000b4b9:	83 e0 01             	and    eax,0x1
c000b4bc:	88 c2                	mov    dl,al
c000b4be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4c4:	83 e0 fe             	and    eax,0xfffffffe
c000b4c7:	09 d0                	or     eax,edx
c000b4c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4cf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4d6:	e8 c2 bb 00 00       	call   c001709d <cpuidCheckEDX(unsigned int)>
c000b4db:	c1 e0 07             	shl    eax,0x7
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4e6:	83 e0 7f             	and    eax,0x7f
c000b4e9:	09 d0                	or     eax,edx
c000b4eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4f1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4f8:	e8 a0 bb 00 00       	call   c001709d <cpuidCheckEDX(unsigned int)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 e0 01             	and    eax,0x1
c000b503:	c1 e0 05             	shl    eax,0x5
c000b506:	88 c2                	mov    dl,al
c000b508:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b50e:	83 e0 df             	and    eax,0xffffffdf
c000b511:	09 d0                	or     eax,edx
c000b513:	f7 05 74 bb 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bb74,0x401
c000b51d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b523:	0f 84 a8 00 00 00    	je     c000b5d1 <Computer::detectFeatures()+0x1c5>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b533:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b537:	50                   	push   eax
c000b538:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b53c:	55                   	push   ebp
c000b53d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b541:	57                   	push   edi
c000b542:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b546:	56                   	push   esi
c000b547:	68 00 00 00 80       	push   0x80000000
c000b54c:	e8 c9 ba 00 00       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b551:	83 c4 20             	add    esp,0x20
c000b554:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b55b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b55f:	0f 86 dd fe ff ff    	jbe    c000b442 <Computer::detectFeatures()+0x36>
c000b565:	83 ec 0c             	sub    esp,0xc
c000b568:	50                   	push   eax
c000b569:	55                   	push   ebp
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	68 01 00 00 80       	push   0x80000001
c000b571:	e8 a4 ba 00 00       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b576:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	e9 ba fe ff ff       	jmp    c000b442 <Computer::detectFeatures()+0x36>
c000b588:	e8 b3 2d 01 00       	call   c001e340 <sseDetect>
c000b58d:	88 c2                	mov    dl,al
c000b58f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b595:	c1 e2 07             	shl    edx,0x7
c000b598:	83 e0 7f             	and    eax,0x7f
c000b59b:	09 d0                	or     eax,edx
c000b59d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b5a3:	84 c0                	test   al,al
c000b5a5:	0f 89 d5 fe ff ff    	jns    c000b480 <Computer::detectFeatures()+0x74>
c000b5ab:	e8 80 2d 01 00       	call   c001e330 <avxDetect>
c000b5b0:	83 e0 01             	and    eax,0x1
c000b5b3:	c1 e0 05             	shl    eax,0x5
c000b5b6:	88 c2                	mov    dl,al
c000b5b8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b5be:	83 e0 df             	and    eax,0xffffffdf
c000b5c1:	09 d0                	or     eax,edx
c000b5c3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b5c9:	83 c4 1c             	add    esp,0x1c
c000b5cc:	5b                   	pop    ebx
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	5d                   	pop    ebp
c000b5d0:	c3                   	ret    
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 00 02 00 00       	push   0x200
c000b5d9:	e8 bf ba 00 00       	call   c001709d <cpuidCheckEDX(unsigned int)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	e9 43 ff ff ff       	jmp    c000b529 <Computer::detectFeatures()+0x11d>

c000b5e6 <Computer::displayFeatures()>:
c000b5e6:	c3                   	ret    
c000b5e7:	90                   	nop

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 4e 88 03 c0       	push   0xc003884e
c000b60a:	e8 ad 19 00 00       	call   c000cfbc <panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 54 88 03 c0       	push   0xc0038854
c000b642:	e8 75 19 00 00       	call   c000cfbc <panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 74 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb74,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 00 ae 03 c0 	sete   BYTE PTR ds:0xc003ae00
c000b6a6:	e8 a3 6d 00 00       	call   c001244e <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 d7 b0 00 00       	call   c001678c <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 94 80 00 00       	call   c0013758 <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 40 fd ff ff       	call   c000b40c <Computer::detectFeatures()>
c000b6cc:	59                   	pop    ecx
c000b6cd:	5e                   	pop    esi
c000b6ce:	6a 01                	push   0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	e8 9c ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6d6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6dd:	e8 6c 6d 00 00       	call   c001244e <operator new(unsigned long)>
c000b6e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6e5:	89 c6                	mov    esi,eax
c000b6e7:	e8 7c ba 00 00       	call   c0017168 <CPU::CPU()>
c000b6ec:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6f2:	58                   	pop    eax
c000b6f3:	5a                   	pop    edx
c000b6f4:	56                   	push   esi
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 5d 80 00 00       	call   c0013758 <Device::addChild(Device*)>
c000b6fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b707:	6a 00                	push   0x0
c000b709:	6a 00                	push   0x0
c000b70b:	50                   	push   eax
c000b70c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70f:	83 c4 20             	add    esp,0x20
c000b712:	e8 a9 85 00 00       	call   c0013cc0 <setupFPU()>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b720:	50                   	push   eax
c000b721:	53                   	push   ebx
c000b722:	e8 31 80 00 00       	call   c0013758 <Device::addChild(Device*)>
c000b727:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b72f:	6a 00                	push   0x0
c000b731:	6a 00                	push   0x0
c000b733:	6a 00                	push   0x0
c000b735:	50                   	push   eax
c000b736:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b739:	83 c4 14             	add    esp,0x14
c000b73c:	68 fe b3 00 c0       	push   0xc000b3fe
c000b741:	e8 24 2e 00 00       	call   c000e56a <setupMultitasking(void (*)())>
c000b746:	83 c4 14             	add    esp,0x14
c000b749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::disableNMI()>:
c000b752:	6a 00                	push   0x0
c000b754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b758:	e8 15 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b75d:	58                   	pop    eax
c000b75e:	5a                   	pop    edx
c000b75f:	c3                   	ret    

c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b764:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b76b:	19 c0                	sbb    eax,eax
c000b76d:	83 e0 80             	and    eax,0xffffff80
c000b770:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b774:	e6 70                	out    0x70,al
c000b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b77a:	e6 71                	out    0x71,al
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Computer::handleNMI()>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	83 ec 10             	sub    esp,0x10
c000b783:	e4 92                	in     al,0x92
c000b785:	89 c6                	mov    esi,eax
c000b787:	e4 61                	in     al,0x61
c000b789:	68 5a 88 03 c0       	push   0xc003885a
c000b78e:	88 c3                	mov    bl,al
c000b790:	e8 09 17 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 e6 10             	and    esi,0x10
c000b79b:	75 0d                	jne    c000b7aa <Computer::handleNMI()+0x2c>
c000b79d:	f6 c3 40             	test   bl,0x40
c000b7a0:	75 1d                	jne    c000b7bf <Computer::handleNMI()+0x41>
c000b7a2:	84 db                	test   bl,bl
c000b7a4:	78 2d                	js     c000b7d3 <Computer::handleNMI()+0x55>
c000b7a6:	58                   	pop    eax
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 6b 88 03 c0       	push   0xc003886b
c000b7b2:	e8 05 18 00 00       	call   c000cfbc <panic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	f6 c3 40             	test   bl,0x40
c000b7bd:	74 e3                	je     c000b7a2 <Computer::handleNMI()+0x24>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	68 78 88 03 c0       	push   0xc0038878
c000b7c7:	e8 f0 17 00 00       	call   c000cfbc <panic(char const*)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	84 db                	test   bl,bl
c000b7d1:	79 d3                	jns    c000b7a6 <Computer::handleNMI()+0x28>
c000b7d3:	c7 44 24 10 82 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038882
c000b7db:	5a                   	pop    edx
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	e9 d9 17 00 00       	jmp    c000cfbc <panic(char const*)>
c000b7e3:	90                   	nop

c000b7e4 <Computer::setDiskActivityLight(int, bool)>:
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ef:	77 1b                	ja     c000b80c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7f1:	e4 92                	in     al,0x92
c000b7f3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7fc:	89 da                	mov    edx,ebx
c000b7fe:	d3 e2                	shl    edx,cl
c000b800:	89 f1                	mov    ecx,esi
c000b802:	f7 d2                	not    edx
c000b804:	d3 e3                	shl    ebx,cl
c000b806:	21 d0                	and    eax,edx
c000b808:	09 d8                	or     eax,ebx
c000b80a:	e6 92                	out    0x92,al
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	c3                   	ret    

c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b80f:	55                   	push   ebp
c000b810:	89 e5                	mov    ebp,esp
c000b812:	57                   	push   edi
c000b813:	56                   	push   esi
c000b814:	53                   	push   ebx
c000b815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b81b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b81e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 95 c1             	setne  cl
c000b826:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b82a:	0f 94 c2             	sete   dl
c000b82d:	84 d1                	test   cl,dl
c000b82f:	74 26                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b831:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b838:	74 1d                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b83a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b83d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b843:	89 d6                	mov    esi,edx
c000b845:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b84b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b851:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b854:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	05 ff 0f 00 00       	add    eax,0xfff
c000b85f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b862:	6a 01                	push   0x1
c000b864:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b86a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b870:	e8 48 5a 00 00       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	89 c6                	mov    esi,eax
c000b87a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b880:	0f 86 21 01 00 00    	jbe    c000b9a7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b886:	c1 eb 0c             	shr    ebx,0xc
c000b889:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b893:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b89f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b8a5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b8a8:	29 d8                	sub    eax,ebx
c000b8aa:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b8b0:	0f 83 f4 00 00 00    	jae    c000b9aa <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b8b6:	83 ec 0c             	sub    esp,0xc
c000b8b9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b8bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b8c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b8c7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b8c9:	52                   	push   edx
c000b8ca:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8d0:	52                   	push   edx
c000b8d1:	76 05                	jbe    c000b8d8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8d3:	b8 00 10 00 00       	mov    eax,0x1000
c000b8d8:	31 d2                	xor    edx,edx
c000b8da:	52                   	push   edx
c000b8db:	50                   	push   eax
c000b8dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	85 c0                	test   eax,eax
c000b8e7:	74 1f                	je     c000b908 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8e9:	51                   	push   ecx
c000b8ea:	51                   	push   ecx
c000b8eb:	50                   	push   eax
c000b8ec:	68 bc 88 03 c0       	push   0xc00388bc
c000b8f1:	e8 a8 15 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000b8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8f9:	e8 f5 5c 00 00       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	31 c0                	xor    eax,eax
c000b903:	e9 7c 01 00 00       	jmp    c000ba84 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b908:	e8 33 2a 00 00       	call   c000e340 <lockScheduler()>
c000b90d:	e8 31 21 00 00       	call   c000da43 <Phys::allocatePage()>
c000b912:	6a 07                	push   0x7
c000b914:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b91a:	56                   	push   esi
c000b91b:	50                   	push   eax
c000b91c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b922:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b925:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b92b:	e8 c4 5f 00 00       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b939:	6a 00                	push   0x0
c000b93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b941:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b944:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b94a:	e8 03 5e 00 00       	call   c0011752 <VAS::mapOtherVASIn(bool, VAS*)>
c000b94f:	58                   	pop    eax
c000b950:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b956:	5a                   	pop    edx
c000b957:	68 07 04 00 00       	push   0x407
c000b95c:	53                   	push   ebx
c000b95d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b963:	50                   	push   eax
c000b964:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b96a:	6a 00                	push   0x0
c000b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b97a:	e8 75 66 00 00       	call   c0011ff4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b988:	68 00 10 00 00       	push   0x1000
c000b98d:	50                   	push   eax
c000b98e:	56                   	push   esi
c000b98f:	e8 cd 4c ff ff       	call   c0000661 <memcpy>
c000b994:	e8 a9 29 00 00       	call   c000e342 <unlockScheduler()>
c000b999:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	e9 f5 fe ff ff       	jmp    c000b89c <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b9a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b9aa:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b9b4:	0f 86 bc 00 00 00    	jbe    c000ba76 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b9ba:	e8 81 29 00 00       	call   c000e340 <lockScheduler()>
c000b9bf:	51                   	push   ecx
c000b9c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b9c6:	6a 00                	push   0x0
c000b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9d6:	e8 77 5d 00 00       	call   c0011752 <VAS::mapOtherVASIn(bool, VAS*)>
c000b9db:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	c1 e8 0c             	shr    eax,0xc
c000b9e7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9f1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9f7:	e8 47 20 00 00       	call   c000da43 <Phys::allocatePage()>
c000b9fc:	6a 07                	push   0x7
c000b9fe:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000ba04:	56                   	push   esi
c000ba05:	50                   	push   eax
c000ba06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ba0c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ba0f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000ba15:	e8 da 5e 00 00       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba1a:	58                   	pop    eax
c000ba1b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000ba21:	5a                   	pop    edx
c000ba22:	68 07 04 00 00       	push   0x407
c000ba27:	53                   	push   ebx
c000ba28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba2e:	50                   	push   eax
c000ba2f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba35:	6a 00                	push   0x0
c000ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba45:	e8 aa 65 00 00       	call   c0011ff4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	68 00 10 00 00       	push   0x1000
c000ba52:	6a 00                	push   0x0
c000ba54:	56                   	push   esi
c000ba55:	e8 7e 4c ff ff       	call   c00006d8 <memset>
c000ba5a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba69:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba6f:	77 86                	ja     c000b9f7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba71:	e8 cc 28 00 00       	call   c000e342 <unlockScheduler()>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	56                   	push   esi
c000ba7a:	e8 74 5b 00 00       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	b0 01                	mov    al,0x1
c000ba84:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba87:	5b                   	pop    ebx
c000ba88:	5e                   	pop    esi
c000ba89:	5f                   	pop    edi
c000ba8a:	5d                   	pop    ebp
c000ba8b:	c3                   	ret    

c000ba8c <loadProgramIntoMemory(Process*, char const*)>:
c000ba8c:	55                   	push   ebp
c000ba8d:	57                   	push   edi
c000ba8e:	56                   	push   esi
c000ba8f:	53                   	push   ebx
c000ba90:	83 ec 48             	sub    esp,0x48
c000ba93:	68 14 01 00 00       	push   0x114
c000ba98:	e8 b1 69 00 00       	call   c001244e <operator new(unsigned long)>
c000ba9d:	83 c4 0c             	add    esp,0xc
c000baa0:	89 c6                	mov    esi,eax
c000baa2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000baa6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000baaa:	50                   	push   eax
c000baab:	e8 cc 6d 00 00       	call   c001287c <File::File(char const*, Process*)>
c000bab0:	58                   	pop    eax
c000bab1:	5a                   	pop    edx
c000bab2:	6a 01                	push   0x1
c000bab4:	56                   	push   esi
c000bab5:	e8 26 6e 00 00       	call   c00128e0 <File::open(FileOpenMode)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 85 47 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	6a 34                	push   0x34
c000bad2:	e8 c2 19 00 00       	call   c000d499 <malloc>
c000bad7:	89 c3                	mov    ebx,eax
c000bad9:	58                   	pop    eax
c000bada:	8b 06                	mov    eax,DWORD PTR [esi]
c000badc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bae0:	57                   	push   edi
c000bae1:	53                   	push   ebx
c000bae2:	6a 00                	push   0x0
c000bae4:	6a 34                	push   0x34
c000bae6:	56                   	push   esi
c000bae7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baea:	83 c4 20             	add    esp,0x20
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 85 17 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bafb:	0f 85 0b 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 84 00 01 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb0c:	31 d2                	xor    edx,edx
c000bb0e:	55                   	push   ebp
c000bb0f:	52                   	push   edx
c000bb10:	50                   	push   eax
c000bb11:	56                   	push   esi
c000bb12:	e8 87 6e 00 00       	call   c001299e <File::seek(unsigned long long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	85 c0                	test   eax,eax
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bb28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb30:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb34:	0f af c2             	imul   eax,edx
c000bb37:	50                   	push   eax
c000bb38:	e8 5c 19 00 00       	call   c000d499 <malloc>
c000bb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb4a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb4e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb52:	0f af c2             	imul   eax,edx
c000bb55:	99                   	cdq    
c000bb56:	52                   	push   edx
c000bb57:	50                   	push   eax
c000bb58:	56                   	push   esi
c000bb59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb5c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 84 a2 00 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb6a:	31 d2                	xor    edx,edx
c000bb6c:	51                   	push   ecx
c000bb6d:	52                   	push   edx
c000bb6e:	50                   	push   eax
c000bb6f:	56                   	push   esi
c000bb70:	e8 29 6e 00 00       	call   c001299e <File::seek(unsigned long long)>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 8c 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb8b:	31 ed                	xor    ebp,ebp
c000bb8d:	0f af c2             	imul   eax,edx
c000bb90:	50                   	push   eax
c000bb91:	e8 03 19 00 00       	call   c000d499 <malloc>
c000bb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bba7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bbab:	0f af c2             	imul   eax,edx
c000bbae:	99                   	cdq    
c000bbaf:	52                   	push   edx
c000bbb0:	50                   	push   eax
c000bbb1:	56                   	push   esi
c000bbb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bbb5:	83 c4 20             	add    esp,0x20
c000bbb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bbc0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bbc4:	0f 86 80 00 00 00    	jbe    c000bc4a <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bbca:	0f b7 fd             	movzx  edi,bp
c000bbcd:	c1 e7 05             	shl    edi,0x5
c000bbd0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bbd4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbd7:	75 6b                	jne    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe7:	52                   	push   edx
c000bbe8:	31 d2                	xor    edx,edx
c000bbea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbed:	52                   	push   edx
c000bbee:	50                   	push   eax
c000bbef:	56                   	push   esi
c000bbf0:	e8 a9 6d 00 00       	call   c001299e <File::seek(unsigned long long)>
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 17                	je     c000bc13 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	68 e7 88 03 c0       	push   0xc00388e7
c000bc04:	e8 95 12 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	e9 87 00 00 00       	jmp    c000bc9a <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bc13:	83 ec 0c             	sub    esp,0xc
c000bc16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bc19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bc1c:	50                   	push   eax
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	56                   	push   esi
c000bc26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bc2a:	e8 e0 fb ff ff       	call   c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc37:	83 c4 20             	add    esp,0x20
c000bc3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc3e:	73 04                	jae    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc44:	45                   	inc    ebp
c000bc45:	e9 76 ff ff ff       	jmp    c000bbc0 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc56:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc6a:	05 00 10 00 00       	add    eax,0x1000
c000bc6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 2e 18 00 00       	call   c000d4a9 <free>
c000bc7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc7e:	e8 26 18 00 00       	call   c000d4a9 <free>
c000bc83:	58                   	pop    eax
c000bc84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc88:	e8 1c 18 00 00       	call   c000d4a9 <free>
c000bc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc90:	e8 a9 6c 00 00       	call   c001293e <File::close()>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	b0 01                	mov    al,0x1
c000bc9a:	83 c4 3c             	add    esp,0x3c
c000bc9d:	5b                   	pop    ebx
c000bc9e:	5e                   	pop    esi
c000bc9f:	5f                   	pop    edi
c000bca0:	5d                   	pop    ebp
c000bca1:	c3                   	ret    

c000bca2 <runtimeReferenceHelper()>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 ef 88 03 c0       	push   0xc00388ef
c000bcaa:	e8 ef 11 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000bcaf:	fa                   	cli    
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	eb fe                	jmp    c000bcb3 <runtimeReferenceHelper()+0x11>

c000bcb5 <getAddressOfKernelSymbol(char const*)>:
c000bcb5:	57                   	push   edi
c000bcb6:	56                   	push   esi
c000bcb7:	53                   	push   ebx
c000bcb8:	31 db                	xor    ebx,ebx
c000bcba:	39 1d 60 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb60,ebx
c000bcc0:	7e 3c                	jle    c000bcfe <getAddressOfKernelSymbol(char const*)+0x49>
c000bcc2:	8b 34 9d e0 ba 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc4520]
c000bcc9:	31 ff                	xor    edi,edi
c000bccb:	39 3c 9d e0 b9 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc4620],edi
c000bcd2:	7e 27                	jle    c000bcfb <getAddressOfKernelSymbol(char const*)+0x46>
c000bcd4:	50                   	push   eax
c000bcd5:	50                   	push   eax
c000bcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdc:	03 04 9d 60 ba 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc45a0]
c000bce3:	50                   	push   eax
c000bce4:	e8 91 4b ff ff       	call   c000087a <strcmp>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	85 c0                	test   eax,eax
c000bcee:	75 05                	jne    c000bcf5 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcf3:	eb 0b                	jmp    c000bd00 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcf5:	83 c6 10             	add    esi,0x10
c000bcf8:	47                   	inc    edi
c000bcf9:	eb d0                	jmp    c000bccb <getAddressOfKernelSymbol(char const*)+0x16>
c000bcfb:	43                   	inc    ebx
c000bcfc:	eb bc                	jmp    c000bcba <getAddressOfKernelSymbol(char const*)+0x5>
c000bcfe:	31 c0                	xor    eax,eax
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	5f                   	pop    edi
c000bd03:	c3                   	ret    

c000bd04 <loadKernelSymbolTable(char const*)>:
c000bd04:	55                   	push   ebp
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	53                   	push   ebx
c000bd08:	83 ec 68             	sub    esp,0x68
c000bd0b:	8b 35 1c bc 03 c0    	mov    esi,DWORD PTR ds:0xc003bc1c
c000bd11:	68 14 01 00 00       	push   0x114
c000bd16:	e8 33 67 00 00       	call   c001244e <operator new(unsigned long)>
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	89 c3                	mov    ebx,eax
c000bd20:	56                   	push   esi
c000bd21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bd25:	50                   	push   eax
c000bd26:	e8 51 6b 00 00       	call   c001287c <File::File(char const*, Process*)>
c000bd2b:	5e                   	pop    esi
c000bd2c:	5f                   	pop    edi
c000bd2d:	6a 01                	push   0x1
c000bd2f:	53                   	push   ebx
c000bd30:	e8 ab 6b 00 00       	call   c00128e0 <File::open(FileOpenMode)>
c000bd35:	83 c4 10             	add    esp,0x10
c000bd38:	31 d2                	xor    edx,edx
c000bd3a:	85 c0                	test   eax,eax
c000bd3c:	0f 85 79 02 00 00    	jne    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	6a 34                	push   0x34
c000bd4f:	e8 45 17 00 00       	call   c000d499 <malloc>
c000bd54:	59                   	pop    ecx
c000bd55:	89 c7                	mov    edi,eax
c000bd57:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	56                   	push   esi
c000bd5e:	57                   	push   edi
c000bd5f:	6a 00                	push   0x0
c000bd61:	6a 34                	push   0x34
c000bd63:	53                   	push   ebx
c000bd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd67:	83 c4 20             	add    esp,0x20
c000bd6a:	85 c0                	test   eax,eax
c000bd6c:	74 17                	je     c000bd85 <loadKernelSymbolTable(char const*)+0x81>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	68 11 89 03 c0       	push   0xc0038911
c000bd76:	e8 41 12 00 00       	call   c000cfbc <panic(char const*)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 d2                	xor    edx,edx
c000bd80:	e9 36 02 00 00       	jmp    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd8b:	75 e1                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 da                	je     c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd94:	52                   	push   edx
c000bd95:	31 d2                	xor    edx,edx
c000bd97:	52                   	push   edx
c000bd98:	50                   	push   eax
c000bd99:	53                   	push   ebx
c000bd9a:	e8 ff 6b 00 00       	call   c001299e <File::seek(unsigned long long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	85 c0                	test   eax,eax
c000bda4:	75 c8                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdb1:	31 ed                	xor    ebp,ebp
c000bdb3:	0f af c2             	imul   eax,edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 dd 16 00 00       	call   c000d499 <malloc>
c000bdbc:	89 34 24             	mov    DWORD PTR [esp],esi
c000bdbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bdc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdd1:	0f af c2             	imul   eax,edx
c000bdd4:	99                   	cdq    
c000bdd5:	52                   	push   edx
c000bdd6:	50                   	push   eax
c000bdd7:	53                   	push   ebx
c000bdd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bddb:	83 c4 20             	add    esp,0x20
c000bdde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bde6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdfe:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000be02:	0f 86 aa 00 00 00    	jbe    c000beb2 <loadKernelSymbolTable(char const*)+0x1ae>
c000be08:	0f b7 f5             	movzx  esi,bp
c000be0b:	6b f6 28             	imul   esi,esi,0x28
c000be0e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000be12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000be15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be19:	50                   	push   eax
c000be1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be1e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000be22:	8b 16                	mov    edx,DWORD PTR [esi]
c000be24:	6b c0 28             	imul   eax,eax,0x28
c000be27:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000be2b:	89 d0                	mov    eax,edx
c000be2d:	31 d2                	xor    edx,edx
c000be2f:	52                   	push   edx
c000be30:	50                   	push   eax
c000be31:	53                   	push   ebx
c000be32:	e8 67 6b 00 00       	call   c001299e <File::seek(unsigned long long)>
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	6a 20                	push   0x20
c000be3c:	6a 00                	push   0x0
c000be3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be42:	52                   	push   edx
c000be43:	e8 90 48 ff ff       	call   c00006d8 <memset>
c000be48:	58                   	pop    eax
c000be49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be4f:	51                   	push   ecx
c000be50:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be54:	52                   	push   edx
c000be55:	6a 00                	push   0x0
c000be57:	6a 1f                	push   0x1f
c000be59:	53                   	push   ebx
c000be5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be5d:	83 c4 18             	add    esp,0x18
c000be60:	68 28 89 03 c0       	push   0xc0038928
c000be65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be69:	52                   	push   edx
c000be6a:	e8 0b 4a ff ff       	call   c000087a <strcmp>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	85 c0                	test   eax,eax
c000be74:	75 0f                	jne    c000be85 <loadKernelSymbolTable(char const*)+0x181>
c000be76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be85:	50                   	push   eax
c000be86:	50                   	push   eax
c000be87:	68 30 89 03 c0       	push   0xc0038930
c000be8c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be90:	50                   	push   eax
c000be91:	e8 e4 49 ff ff       	call   c000087a <strcmp>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 0f                	jne    c000beac <loadKernelSymbolTable(char const*)+0x1a8>
c000be9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beac:	45                   	inc    ebp
c000bead:	e9 4c ff ff ff       	jmp    c000bdfe <loadKernelSymbolTable(char const*)+0xfa>
c000beb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000beb7:	75 10                	jne    c000bec9 <loadKernelSymbolTable(char const*)+0x1c5>
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	68 38 89 03 c0       	push   0xc0038938
c000bec1:	e8 f6 10 00 00       	call   c000cfbc <panic(char const*)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bece:	75 10                	jne    c000bee0 <loadKernelSymbolTable(char const*)+0x1dc>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	68 38 89 03 c0       	push   0xc0038938
c000bed8:	e8 df 10 00 00       	call   c000cfbc <panic(char const*)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	31 d2                	xor    edx,edx
c000bee2:	50                   	push   eax
c000bee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee7:	52                   	push   edx
c000bee8:	50                   	push   eax
c000bee9:	53                   	push   ebx
c000beea:	e8 af 6a 00 00       	call   c001299e <File::seek(unsigned long long)>
c000beef:	5a                   	pop    edx
c000bef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef4:	e8 a0 15 00 00       	call   c000d499 <malloc>
c000bef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf01:	89 c1                	mov    ecx,eax
c000bf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf0b:	5e                   	pop    esi
c000bf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bf12:	55                   	push   ebp
c000bf13:	51                   	push   ecx
c000bf14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bf18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf20:	53                   	push   ebx
c000bf21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf24:	83 c4 14             	add    esp,0x14
c000bf27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf2b:	e8 69 15 00 00       	call   c000d499 <malloc>
c000bf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf33:	89 c6                	mov    esi,eax
c000bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf37:	56                   	push   esi
c000bf38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf48:	8b 15 60 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bb60
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	c1 e8 04             	shr    eax,0x4
c000bf54:	89 04 95 e0 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4620],eax
c000bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5f:	31 d2                	xor    edx,edx
c000bf61:	52                   	push   edx
c000bf62:	50                   	push   eax
c000bf63:	53                   	push   ebx
c000bf64:	e8 35 6a 00 00       	call   c001299e <File::seek(unsigned long long)>
c000bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf6c:	31 d2                	xor    edx,edx
c000bf6e:	56                   	push   esi
c000bf6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf77:	53                   	push   ebx
c000bf78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	53                   	push   ebx
c000bf7f:	e8 ba 69 00 00       	call   c001293e <File::close()>
c000bf84:	5d                   	pop    ebp
c000bf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf89:	e8 1b 15 00 00       	call   c000d4a9 <free>
c000bf8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf91:	e8 13 15 00 00       	call   c000d4a9 <free>
c000bf96:	a1 60 bb 03 c0       	mov    eax,ds:0xc003bb60
c000bf9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf9f:	8d 50 01             	lea    edx,[eax+0x1]
c000bfa2:	89 0c 85 e0 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4520],ecx
c000bfa9:	89 15 60 bb 03 c0    	mov    DWORD PTR ds:0xc003bb60,edx
c000bfaf:	89 34 85 60 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45a0],esi
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	b2 01                	mov    dl,0x1
c000bfbb:	83 c4 5c             	add    esp,0x5c
c000bfbe:	88 d0                	mov    al,dl
c000bfc0:	5b                   	pop    ebx
c000bfc1:	5e                   	pop    esi
c000bfc2:	5f                   	pop    edi
c000bfc3:	5d                   	pop    ebp
c000bfc4:	c3                   	ret    

c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bfc5:	55                   	push   ebp
c000bfc6:	57                   	push   edi
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	81 ec 68 05 00 00    	sub    esp,0x568
c000bfcf:	8b 1d 1c bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bc1c
c000bfd5:	68 14 01 00 00       	push   0x114
c000bfda:	e8 6f 64 00 00       	call   c001244e <operator new(unsigned long)>
c000bfdf:	83 c4 0c             	add    esp,0xc
c000bfe2:	89 c5                	mov    ebp,eax
c000bfe4:	53                   	push   ebx
c000bfe5:	ff b4 24 78 05 00 00 	push   DWORD PTR [esp+0x578]
c000bfec:	50                   	push   eax
c000bfed:	e8 8a 68 00 00       	call   c001287c <File::File(char const*, Process*)>
c000bff2:	5e                   	pop    esi
c000bff3:	5f                   	pop    edi
c000bff4:	6a 01                	push   0x1
c000bff6:	55                   	push   ebp
c000bff7:	e8 e4 68 00 00       	call   c00128e0 <File::open(FileOpenMode)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	85 c0                	test   eax,eax
c000c001:	0f 85 5f 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c007:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 34                	push   0x34
c000c014:	e8 80 14 00 00       	call   c000d499 <malloc>
c000c019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c01d:	5b                   	pop    ebx
c000c01e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c021:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c025:	53                   	push   ebx
c000c026:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02a:	6a 00                	push   0x0
c000c02c:	6a 34                	push   0x34
c000c02e:	55                   	push   ebp
c000c02f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	85 c0                	test   eax,eax
c000c037:	0f 85 29 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c03d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c041:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c000c047:	0f 85 19 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c04d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c050:	85 c0                	test   eax,eax
c000c052:	0f 84 0e 01 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c058:	31 d2                	xor    edx,edx
c000c05a:	51                   	push   ecx
c000c05b:	52                   	push   edx
c000c05c:	50                   	push   eax
c000c05d:	55                   	push   ebp
c000c05e:	e8 3b 69 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	85 c0                	test   eax,eax
c000c068:	0f 85 f8 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c06e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000c078:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c07c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c080:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c084:	0f b7 51 2e          	movzx  edx,WORD PTR [ecx+0x2e]
c000c088:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c08c:	0f af c2             	imul   eax,edx
c000c08f:	50                   	push   eax
c000c090:	e8 04 14 00 00       	call   c000d499 <malloc>
c000c095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c098:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c09c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c09f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c0ab:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c0b3:	0f af c2             	imul   eax,edx
c000c0b6:	99                   	cdq    
c000c0b7:	52                   	push   edx
c000c0b8:	50                   	push   eax
c000c0b9:	55                   	push   ebp
c000c0ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	0f 84 97 00 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0cf:	52                   	push   edx
c000c0d0:	31 d2                	xor    edx,edx
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	55                   	push   ebp
c000c0d5:	e8 c4 68 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	0f 85 81 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0f0:	0f b7 51 2a          	movzx  edx,WORD PTR [ecx+0x2a]
c000c0f4:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c0f8:	0f af c2             	imul   eax,edx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 98 13 00 00       	call   c000d499 <malloc>
c000c101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c104:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c108:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c10b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c10f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c117:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c11b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c11f:	31 ff                	xor    edi,edi
c000c121:	0f af c2             	imul   eax,edx
c000c124:	99                   	cdq    
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	55                   	push   ebp
c000c128:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c12b:	83 c4 20             	add    esp,0x20
c000c12e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c132:	66 39 78 2c          	cmp    WORD PTR [eax+0x2c],di
c000c136:	76 7c                	jbe    c000c1b4 <loadDriverIntoMemory(char const*, unsigned long)+0x1ef>
c000c138:	0f b7 df             	movzx  ebx,di
c000c13b:	c1 e3 05             	shl    ebx,0x5
c000c13e:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000c142:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c145:	75 67                	jne    c000c1ae <loadDriverIntoMemory(char const*, unsigned long)+0x1e9>
c000c147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c14a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000c14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c151:	31 d2                	xor    edx,edx
c000c153:	50                   	push   eax
c000c154:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c157:	52                   	push   edx
c000c158:	50                   	push   eax
c000c159:	55                   	push   ebp
c000c15a:	e8 3f 68 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	74 07                	je     c000c16d <loadDriverIntoMemory(char const*, unsigned long)+0x1a8>
c000c166:	31 c0                	xor    eax,eax
c000c168:	e9 06 05 00 00       	jmp    c000c673 <loadDriverIntoMemory(char const*, unsigned long)+0x6ae>
c000c16d:	8b 84 24 74 05 00 00 	mov    eax,DWORD PTR [esp+0x574]
c000c174:	31 d2                	xor    edx,edx
c000c176:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000c17a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c17d:	83 ec 0c             	sub    esp,0xc
c000c180:	01 c6                	add    esi,eax
c000c182:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c189:	50                   	push   eax
c000c18a:	56                   	push   esi
c000c18b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18f:	52                   	push   edx
c000c190:	50                   	push   eax
c000c191:	55                   	push   ebp
c000c192:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c195:	83 c4 1c             	add    esp,0x1c
c000c198:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c19b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c19e:	50                   	push   eax
c000c19f:	6a 00                	push   0x0
c000c1a1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000c1a5:	56                   	push   esi
c000c1a6:	e8 2d 45 ff ff       	call   c00006d8 <memset>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	47                   	inc    edi
c000c1af:	e9 7a ff ff ff       	jmp    c000c12e <loadDriverIntoMemory(char const*, unsigned long)+0x169>
c000c1b4:	31 db                	xor    ebx,ebx
c000c1b6:	50                   	push   eax
c000c1b7:	68 00 02 00 00       	push   0x200
c000c1bc:	6a 00                	push   0x0
c000c1be:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c1c5:	50                   	push   eax
c000c1c6:	e8 0d 45 ff ff       	call   c00006d8 <memset>
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	68 00 02 00 00       	push   0x200
c000c1d3:	6a 00                	push   0x0
c000c1d5:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 f6 44 ff ff       	call   c00006d8 <memset>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000c1f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c1fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c205:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c20d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c211:	66 39 58 30          	cmp    WORD PTR [eax+0x30],bx
c000c215:	0f 86 f1 00 00 00    	jbe    c000c30c <loadDriverIntoMemory(char const*, unsigned long)+0x347>
c000c21b:	0f b7 f3             	movzx  esi,bx
c000c21e:	6b f6 28             	imul   esi,esi,0x28
c000c221:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c225:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c228:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c22c:	50                   	push   eax
c000c22d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c235:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c000c239:	8b 06                	mov    eax,DWORD PTR [esi]
c000c23b:	6b d2 28             	imul   edx,edx,0x28
c000c23e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c242:	31 d2                	xor    edx,edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	55                   	push   ebp
c000c247:	e8 52 67 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	6a 20                	push   0x20
c000c251:	6a 00                	push   0x0
c000c253:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c257:	57                   	push   edi
c000c258:	e8 7b 44 ff ff       	call   c00006d8 <memset>
c000c25d:	58                   	pop    eax
c000c25e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c261:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c265:	52                   	push   edx
c000c266:	57                   	push   edi
c000c267:	6a 00                	push   0x0
c000c269:	6a 1f                	push   0x1f
c000c26b:	55                   	push   ebp
c000c26c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c26f:	83 c4 18             	add    esp,0x18
c000c272:	57                   	push   edi
c000c273:	68 52 89 03 c0       	push   0xc0038952
c000c278:	e8 21 0c 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c27d:	83 c4 0c             	add    esp,0xc
c000c280:	6a 09                	push   0x9
c000c282:	68 5f 89 03 c0       	push   0xc003895f
c000c287:	57                   	push   edi
c000c288:	e8 0f 43 ff ff       	call   c000059c <memcmp>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	85 c0                	test   eax,eax
c000c292:	75 24                	jne    c000c2b8 <loadDriverIntoMemory(char const*, unsigned long)+0x2f3>
c000c294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c298:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c29c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c2a0:	89 94 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],edx
c000c2a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2aa:	89 84 bc 50 03 00 00 	mov    DWORD PTR [esp+edi*4+0x350],eax
c000c2b1:	89 f8                	mov    eax,edi
c000c2b3:	40                   	inc    eax
c000c2b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c2b8:	50                   	push   eax
c000c2b9:	50                   	push   eax
c000c2ba:	68 28 89 03 c0       	push   0xc0038928
c000c2bf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2c3:	50                   	push   eax
c000c2c4:	e8 b1 45 ff ff       	call   c000087a <strcmp>
c000c2c9:	83 c4 10             	add    esp,0x10
c000c2cc:	85 c0                	test   eax,eax
c000c2ce:	75 0f                	jne    c000c2df <loadDriverIntoMemory(char const*, unsigned long)+0x31a>
c000c2d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2df:	57                   	push   edi
c000c2e0:	57                   	push   edi
c000c2e1:	68 30 89 03 c0       	push   0xc0038930
c000c2e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2ea:	50                   	push   eax
c000c2eb:	e8 8a 45 ff ff       	call   c000087a <strcmp>
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	85 c0                	test   eax,eax
c000c2f5:	75 0f                	jne    c000c306 <loadDriverIntoMemory(char const*, unsigned long)+0x341>
c000c2f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c302:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c306:	43                   	inc    ebx
c000c307:	e9 01 ff ff ff       	jmp    c000c20d <loadDriverIntoMemory(char const*, unsigned long)+0x248>
c000c30c:	52                   	push   edx
c000c30d:	31 d2                	xor    edx,edx
c000c30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c313:	52                   	push   edx
c000c314:	50                   	push   eax
c000c315:	55                   	push   ebp
c000c316:	e8 83 66 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c31b:	59                   	pop    ecx
c000c31c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c320:	e8 74 11 00 00       	call   c000d499 <malloc>
c000c325:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c328:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c32c:	31 d2                	xor    edx,edx
c000c32e:	5b                   	pop    ebx
c000c32f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c333:	53                   	push   ebx
c000c334:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c33c:	52                   	push   edx
c000c33d:	50                   	push   eax
c000c33e:	55                   	push   ebp
c000c33f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c342:	83 c4 14             	add    esp,0x14
c000c345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c349:	e8 4b 11 00 00       	call   c000d499 <malloc>
c000c34e:	31 d2                	xor    edx,edx
c000c350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c354:	83 c4 0c             	add    esp,0xc
c000c357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c35b:	52                   	push   edx
c000c35c:	50                   	push   eax
c000c35d:	55                   	push   ebp
c000c35e:	e8 3b 66 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c363:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c366:	31 d2                	xor    edx,edx
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c36f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c373:	52                   	push   edx
c000c374:	50                   	push   eax
c000c375:	55                   	push   ebp
c000c376:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c379:	83 c4 20             	add    esp,0x20
c000c37c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c388:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c000c38c:	0f 84 b5 02 00 00    	je     c000c647 <loadDriverIntoMemory(char const*, unsigned long)+0x682>
c000c392:	8b 84 94 50 03 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x350]
c000c399:	31 d2                	xor    edx,edx
c000c39b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c39f:	c1 e8 03             	shr    eax,0x3
c000c3a2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c3a6:	50                   	push   eax
c000c3a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ab:	8b 84 84 54 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x154]
c000c3b2:	52                   	push   edx
c000c3b3:	50                   	push   eax
c000c3b4:	55                   	push   ebp
c000c3b5:	e8 e4 65 00 00       	call   c001299e <File::seek(unsigned long long)>
c000c3ba:	58                   	pop    eax
c000c3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3bf:	ff b4 84 5c 03 00 00 	push   DWORD PTR [esp+eax*4+0x35c]
c000c3c6:	e8 ce 10 00 00       	call   c000d499 <malloc>
c000c3cb:	31 d2                	xor    edx,edx
c000c3cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c3d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3d4:	58                   	pop    eax
c000c3d5:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c3d9:	50                   	push   eax
c000c3da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c3de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3e2:	8b 84 84 64 03 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x364]
c000c3e9:	52                   	push   edx
c000c3ea:	50                   	push   eax
c000c3eb:	55                   	push   ebp
c000c3ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3ef:	83 c4 20             	add    esp,0x20
c000c3f2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000c3fa:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c3fe:	39 4c 24 24          	cmp    DWORD PTR [esp+0x24],ecx
c000c402:	0f 8d 27 02 00 00    	jge    c000c62f <loadDriverIntoMemory(char const*, unsigned long)+0x66a>
c000c408:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000c40c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c410:	83 ec 0c             	sub    esp,0xc
c000c413:	8b 04 f8             	mov    eax,DWORD PTR [eax+edi*8]
c000c416:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c41a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c41e:	8b 44 f8 04          	mov    eax,DWORD PTR [eax+edi*8+0x4]
c000c422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c426:	89 c6                	mov    esi,eax
c000c428:	c1 ee 08             	shr    esi,0x8
c000c42b:	c1 e6 04             	shl    esi,0x4
c000c42e:	03 74 24 44          	add    esi,DWORD PTR [esp+0x44]
c000c432:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c435:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c43d:	53                   	push   ebx
c000c43e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c442:	03 06                	add    eax,DWORD PTR [esi]
c000c444:	50                   	push   eax
c000c445:	68 69 89 03 c0       	push   0xc0038969
c000c44a:	e8 4f 0a 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c44f:	83 c4 20             	add    esp,0x20
c000c452:	85 db                	test   ebx,ebx
c000c454:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000c459:	0f 85 fb 00 00 00    	jne    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c45f:	83 ec 0c             	sub    esp,0xc
c000c462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c466:	03 06                	add    eax,DWORD PTR [esi]
c000c468:	50                   	push   eax
c000c469:	e8 47 f8 ff ff       	call   c000bcb5 <getAddressOfKernelSymbol(char const*)>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	89 c3                	mov    ebx,eax
c000c473:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c000c478:	85 c0                	test   eax,eax
c000c47a:	0f 85 da 00 00 00    	jne    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c480:	50                   	push   eax
c000c481:	50                   	push   eax
c000c482:	68 9b 89 03 c0       	push   0xc003899b
c000c487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c48b:	03 06                	add    eax,DWORD PTR [esi]
c000c48d:	50                   	push   eax
c000c48e:	e8 e7 43 ff ff       	call   c000087a <strcmp>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	75 0a                	jne    c000c4a4 <loadDriverIntoMemory(char const*, unsigned long)+0x4df>
c000c49a:	bb bc e6 01 c0       	mov    ebx,0xc001e6bc
c000c49f:	e9 b1 00 00 00       	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4a4:	50                   	push   eax
c000c4a5:	50                   	push   eax
c000c4a6:	68 a5 89 03 c0       	push   0xc00389a5
c000c4ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4af:	03 06                	add    eax,DWORD PTR [esi]
c000c4b1:	50                   	push   eax
c000c4b2:	e8 c3 43 ff ff       	call   c000087a <strcmp>
c000c4b7:	83 c4 10             	add    esp,0x10
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	75 0a                	jne    c000c4c8 <loadDriverIntoMemory(char const*, unsigned long)+0x503>
c000c4be:	bb f0 e3 01 c0       	mov    ebx,0xc001e3f0
c000c4c3:	e9 8d 00 00 00       	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4c8:	50                   	push   eax
c000c4c9:	50                   	push   eax
c000c4ca:	68 ae 89 03 c0       	push   0xc00389ae
c000c4cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4d3:	03 06                	add    eax,DWORD PTR [esi]
c000c4d5:	50                   	push   eax
c000c4d6:	e8 9f 43 ff ff       	call   c000087a <strcmp>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	75 07                	jne    c000c4e9 <loadDriverIntoMemory(char const*, unsigned long)+0x524>
c000c4e2:	bb bc e7 01 c0       	mov    ebx,0xc001e7bc
c000c4e7:	eb 6c                	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4e9:	57                   	push   edi
c000c4ea:	57                   	push   edi
c000c4eb:	68 b8 89 03 c0       	push   0xc00389b8
c000c4f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4f4:	03 06                	add    eax,DWORD PTR [esi]
c000c4f6:	50                   	push   eax
c000c4f7:	e8 7e 43 ff ff       	call   c000087a <strcmp>
c000c4fc:	83 c4 10             	add    esp,0x10
c000c4ff:	85 c0                	test   eax,eax
c000c501:	74 4d                	je     c000c550 <loadDriverIntoMemory(char const*, unsigned long)+0x58b>
c000c503:	51                   	push   ecx
c000c504:	51                   	push   ecx
c000c505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c509:	03 06                	add    eax,DWORD PTR [esi]
c000c50b:	50                   	push   eax
c000c50c:	68 c1 89 03 c0       	push   0xc00389c1
c000c511:	e8 88 09 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c516:	5f                   	pop    edi
c000c517:	58                   	pop    eax
c000c518:	68 db 89 03 c0       	push   0xc00389db
c000c51d:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c521:	57                   	push   edi
c000c522:	e8 cd 42 ff ff       	call   c00007f4 <strcpy>
c000c527:	58                   	pop    eax
c000c528:	5a                   	pop    edx
c000c529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c52d:	03 06                	add    eax,DWORD PTR [esi]
c000c52f:	50                   	push   eax
c000c530:	57                   	push   edi
c000c531:	e8 0b 44 ff ff       	call   c0000941 <strcat>
c000c536:	59                   	pop    ecx
c000c537:	5e                   	pop    esi
c000c538:	68 bb 8a 03 c0       	push   0xc0038abb
c000c53d:	57                   	push   edi
c000c53e:	e8 fe 43 ff ff       	call   c0000941 <strcat>
c000c543:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c546:	e8 71 0a 00 00       	call   c000cfbc <panic(char const*)>
c000c54b:	83 c4 10             	add    esp,0x10
c000c54e:	eb 0a                	jmp    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c550:	bb 3c e5 01 c0       	mov    ebx,0xc001e53c
c000c555:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c000c55a:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c55f:	75 66                	jne    c000c5c7 <loadDriverIntoMemory(char const*, unsigned long)+0x602>
c000c561:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c565:	8b b4 24 74 05 00 00 	mov    esi,DWORD PTR [esp+0x574]
c000c56c:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c570:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c000c575:	8d 3c 30             	lea    edi,[eax+esi*1]
c000c578:	8b 07                	mov    eax,DWORD PTR [edi]
c000c57a:	74 04                	je     c000c580 <loadDriverIntoMemory(char const*, unsigned long)+0x5bb>
c000c57c:	01 c3                	add    ebx,eax
c000c57e:	eb 43                	jmp    c000c5c3 <loadDriverIntoMemory(char const*, unsigned long)+0x5fe>
c000c580:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c588:	75 05                	jne    c000c58f <loadDriverIntoMemory(char const*, unsigned long)+0x5ca>
c000c58a:	8d 1c 30             	lea    ebx,[eax+esi*1]
c000c58d:	eb 34                	jmp    c000c5c3 <loadDriverIntoMemory(char const*, unsigned long)+0x5fe>
c000c58f:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c597:	75 26                	jne    c000c5bf <loadDriverIntoMemory(char const*, unsigned long)+0x5fa>
c000c599:	52                   	push   edx
c000c59a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59e:	53                   	push   ebx
c000c59f:	ff b4 24 80 05 00 00 	push   DWORD PTR [esp+0x580]
c000c5a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c5aa:	50                   	push   eax
c000c5ab:	57                   	push   edi
c000c5ac:	68 f2 89 03 c0       	push   0xc00389f2
c000c5b1:	e8 e8 08 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c5b6:	03 37                	add    esi,DWORD PTR [edi]
c000c5b8:	83 c4 20             	add    esp,0x20
c000c5bb:	89 f3                	mov    ebx,esi
c000c5bd:	eb 04                	jmp    c000c5c3 <loadDriverIntoMemory(char const*, unsigned long)+0x5fe>
c000c5bf:	01 c6                	add    esi,eax
c000c5c1:	01 f3                	add    ebx,esi
c000c5c3:	89 1f                	mov    DWORD PTR [edi],ebx
c000c5c5:	eb 5f                	jmp    c000c626 <loadDriverIntoMemory(char const*, unsigned long)+0x661>
c000c5c7:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c5cc:	75 37                	jne    c000c605 <loadDriverIntoMemory(char const*, unsigned long)+0x640>
c000c5ce:	8b 94 24 74 05 00 00 	mov    edx,DWORD PTR [esp+0x574]
c000c5d5:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c000c5d9:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000c5dd:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c000c5e2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c5e4:	74 13                	je     c000c5f9 <loadDriverIntoMemory(char const*, unsigned long)+0x634>
c000c5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5ea:	2b 84 24 74 05 00 00 	sub    eax,DWORD PTR [esp+0x574]
c000c5f1:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c5f5:	01 c8                	add    eax,ecx
c000c5f7:	eb 06                	jmp    c000c5ff <loadDriverIntoMemory(char const*, unsigned long)+0x63a>
c000c5f9:	89 c8                	mov    eax,ecx
c000c5fb:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c5ff:	01 c3                	add    ebx,eax
c000c601:	89 1a                	mov    DWORD PTR [edx],ebx
c000c603:	eb 21                	jmp    c000c626 <loadDriverIntoMemory(char const*, unsigned long)+0x661>
c000c605:	53                   	push   ebx
c000c606:	53                   	push   ebx
c000c607:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c60c:	50                   	push   eax
c000c60d:	68 74 8a 03 c0       	push   0xc0038a74
c000c612:	e8 87 08 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c617:	c7 04 24 7f 8a 03 c0 	mov    DWORD PTR [esp],0xc0038a7f
c000c61e:	e8 99 09 00 00       	call   c000cfbc <panic(char const*)>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c62a:	e9 cb fd ff ff       	jmp    c000c3fa <loadDriverIntoMemory(char const*, unsigned long)+0x435>
c000c62f:	83 ec 0c             	sub    esp,0xc
c000c632:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c636:	e8 6e 0e 00 00       	call   c000d4a9 <free>
c000c63b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c63f:	83 c4 10             	add    esp,0x10
c000c642:	e9 3d fd ff ff       	jmp    c000c384 <loadDriverIntoMemory(char const*, unsigned long)+0x3bf>
c000c647:	83 ec 0c             	sub    esp,0xc
c000c64a:	55                   	push   ebp
c000c64b:	e8 ee 62 00 00       	call   c001293e <File::close()>
c000c650:	58                   	pop    eax
c000c651:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c655:	e8 4f 0e 00 00       	call   c000d4a9 <free>
c000c65a:	5a                   	pop    edx
c000c65b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c65f:	e8 45 0e 00 00       	call   c000d4a9 <free>
c000c664:	59                   	pop    ecx
c000c665:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c669:	e8 3b 0e 00 00       	call   c000d4a9 <free>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	b0 01                	mov    al,0x1
c000c673:	81 c4 5c 05 00 00    	add    esp,0x55c
c000c679:	5b                   	pop    ebx
c000c67a:	5e                   	pop    esi
c000c67b:	5f                   	pop    edi
c000c67c:	5d                   	pop    ebp
c000c67d:	c3                   	ret    

c000c67e <loadDLL(char const*)>:
c000c67e:	57                   	push   edi
c000c67f:	56                   	push   esi
c000c680:	53                   	push   ebx
c000c681:	81 ec 18 01 00 00    	sub    esp,0x118
c000c687:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c68e:	53                   	push   ebx
c000c68f:	68 97 8a 03 c0       	push   0xc0038a97
c000c694:	e8 05 08 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c699:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6a0:	e8 a9 5d 00 00       	call   c001244e <operator new(unsigned long)>
c000c6a5:	83 c4 0c             	add    esp,0xc
c000c6a8:	89 c6                	mov    esi,eax
c000c6aa:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000c6b0:	53                   	push   ebx
c000c6b1:	50                   	push   eax
c000c6b2:	e8 c5 61 00 00       	call   c001287c <File::File(char const*, Process*)>
c000c6b7:	83 c4 0c             	add    esp,0xc
c000c6ba:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c6be:	50                   	push   eax
c000c6bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6c3:	50                   	push   eax
c000c6c4:	56                   	push   esi
c000c6c5:	e8 c2 64 00 00       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c000c6ca:	83 c4 10             	add    esp,0x10
c000c6cd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c6d2:	75 0a                	jne    c000c6de <loadDLL(char const*)+0x60>
c000c6d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6d8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c6dc:	75 32                	jne    c000c710 <loadDLL(char const*)+0x92>
c000c6de:	50                   	push   eax
c000c6df:	50                   	push   eax
c000c6e0:	68 a8 8a 03 c0       	push   0xc0038aa8
c000c6e5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c6e9:	57                   	push   edi
c000c6ea:	e8 05 41 ff ff       	call   c00007f4 <strcpy>
c000c6ef:	58                   	pop    eax
c000c6f0:	5a                   	pop    edx
c000c6f1:	53                   	push   ebx
c000c6f2:	57                   	push   edi
c000c6f3:	e8 49 42 ff ff       	call   c0000941 <strcat>
c000c6f8:	59                   	pop    ecx
c000c6f9:	58                   	pop    eax
c000c6fa:	68 bb 8a 03 c0       	push   0xc0038abb
c000c6ff:	57                   	push   edi
c000c700:	e8 3c 42 ff ff       	call   c0000941 <strcat>
c000c705:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c708:	e8 af 08 00 00       	call   c000cfbc <panic(char const*)>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	83 ec 0c             	sub    esp,0xc
c000c713:	8b 06                	mov    eax,DWORD PTR [esi]
c000c715:	56                   	push   esi
c000c716:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c719:	58                   	pop    eax
c000c71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c71e:	e8 76 0d 00 00       	call   c000d499 <malloc>
c000c723:	5a                   	pop    edx
c000c724:	89 c6                	mov    esi,eax
c000c726:	59                   	pop    ecx
c000c727:	50                   	push   eax
c000c728:	68 bd 8a 03 c0       	push   0xc0038abd
c000c72d:	e8 6c 07 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c732:	5f                   	pop    edi
c000c733:	58                   	pop    eax
c000c734:	56                   	push   esi
c000c735:	53                   	push   ebx
c000c736:	e8 8a f8 ff ff       	call   c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>
c000c73b:	81 c4 20 01 00 00    	add    esp,0x120
c000c741:	89 f0                	mov    eax,esi
c000c743:	5b                   	pop    ebx
c000c744:	5e                   	pop    esi
c000c745:	5f                   	pop    edi
c000c746:	c3                   	ret    

c000c747 <executeDLL(unsigned long, void*)>:
c000c747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c74b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c74f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c753:	ff e0                	jmp    eax
c000c755:	90                   	nop

c000c756 <GDTEntry::setBase(unsigned int)>:
c000c756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c75a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c75e:	89 c1                	mov    ecx,eax
c000c760:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c764:	c1 e9 10             	shr    ecx,0x10
c000c767:	c1 e8 18             	shr    eax,0x18
c000c76a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c76d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c770:	c3                   	ret    
c000c771:	90                   	nop

c000c772 <GDTEntry::setLimit(unsigned int)>:
c000c772:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c77a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c77d:	66 89 01             	mov    WORD PTR [ecx],ax
c000c780:	83 e2 f0             	and    edx,0xfffffff0
c000c783:	c1 e8 10             	shr    eax,0x10
c000c786:	83 e0 0f             	and    eax,0xf
c000c789:	09 d0                	or     eax,edx
c000c78b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c78e:	c3                   	ret    
c000c78f:	90                   	nop

c000c790 <GDT::GDT()>:
c000c790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c794:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c79e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7a4:	90                   	nop
c000c7a5:	c3                   	ret    

c000c7a6 <GDT::addEntry(GDTEntry)>:
c000c7a6:	53                   	push   ebx
c000c7a7:	83 ec 0c             	sub    esp,0xc
c000c7aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c7ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c7b7:	52                   	push   edx
c000c7b8:	50                   	push   eax
c000c7b9:	68 dc 8a 03 c0       	push   0xc0038adc
c000c7be:	e8 db 06 00 00       	call   c000ce9e <kprintf(char const*, ...)>
c000c7c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7c9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c7cd:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c7d1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c7d5:	8d 50 01             	lea    edx,[eax+0x1]
c000c7d8:	c1 e0 03             	shl    eax,0x3
c000c7db:	89 13                	mov    DWORD PTR [ebx],edx
c000c7dd:	83 c4 18             	add    esp,0x18
c000c7e0:	5b                   	pop    ebx
c000c7e1:	c3                   	ret    

c000c7e2 <GDT::getNumberOfEntries()>:
c000c7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7e8:	c3                   	ret    
c000c7e9:	90                   	nop

c000c7ea <GDT::flush()>:
c000c7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7ee:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7f0:	83 c0 04             	add    eax,0x4
c000c7f3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c7fa:	a3 66 bb 03 c0       	mov    ds:0xc003bb66,eax
c000c7ff:	66 89 15 64 bb 03 c0 	mov    WORD PTR ds:0xc003bb64,dx
c000c806:	e9 55 3b ff ff       	jmp    c0000360 <loadGDT>
c000c80b:	90                   	nop

c000c80c <GDT::setup()>:
c000c80c:	55                   	push   ebp
c000c80d:	57                   	push   edi
c000c80e:	56                   	push   esi
c000c80f:	53                   	push   ebx
c000c810:	83 ec 3c             	sub    esp,0x3c
c000c813:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c817:	6a 00                	push   0x0
c000c819:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c81d:	53                   	push   ebx
c000c81e:	e8 33 ff ff ff       	call   c000c756 <GDTEntry::setBase(unsigned int)>
c000c823:	6a 00                	push   0x0
c000c825:	53                   	push   ebx
c000c826:	e8 47 ff ff ff       	call   c000c772 <GDTEntry::setLimit(unsigned int)>
c000c82b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c833:	6a 00                	push   0x0
c000c835:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c839:	53                   	push   ebx
c000c83a:	e8 17 ff ff ff       	call   c000c756 <GDTEntry::setBase(unsigned int)>
c000c83f:	68 ff ff ff 00       	push   0xffffff
c000c844:	53                   	push   ebx
c000c845:	e8 28 ff ff ff       	call   c000c772 <GDTEntry::setLimit(unsigned int)>
c000c84a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c84e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c853:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c858:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c85c:	83 c4 20             	add    esp,0x20
c000c85f:	6a 00                	push   0x0
c000c861:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c865:	53                   	push   ebx
c000c866:	e8 eb fe ff ff       	call   c000c756 <GDTEntry::setBase(unsigned int)>
c000c86b:	68 ff ff ff 00       	push   0xffffff
c000c870:	53                   	push   ebx
c000c871:	e8 fc fe ff ff       	call   c000c772 <GDTEntry::setLimit(unsigned int)>
c000c876:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c87a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c87e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c882:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c886:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c88a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c88f:	0d 00 92 c0 00       	or     eax,0xc09200
c000c894:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c898:	89 d8                	mov    eax,ebx
c000c89a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c89e:	80 cc 60             	or     ah,0x60
c000c8a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c8a5:	83 c4 0c             	add    esp,0xc
c000c8a8:	89 f8                	mov    eax,edi
c000c8aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8ae:	80 cc 60             	or     ah,0x60
c000c8b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8b5:	89 c7                	mov    edi,eax
c000c8b7:	55                   	push   ebp
c000c8b8:	e8 e9 fe ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c000c8bd:	83 c4 0c             	add    esp,0xc
c000c8c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8c8:	55                   	push   ebp
c000c8c9:	e8 d8 fe ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c000c8ce:	83 c4 0c             	add    esp,0xc
c000c8d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8d9:	55                   	push   ebp
c000c8da:	e8 c7 fe ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c000c8df:	83 c4 0c             	add    esp,0xc
c000c8e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8ea:	53                   	push   ebx
c000c8eb:	51                   	push   ecx
c000c8ec:	55                   	push   ebp
c000c8ed:	e8 b4 fe ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c000c8f2:	83 c4 0c             	add    esp,0xc
c000c8f5:	57                   	push   edi
c000c8f6:	56                   	push   esi
c000c8f7:	55                   	push   ebp
c000c8f8:	e8 a9 fe ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c000c8fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c900:	e8 e5 fe ff ff       	call   c000c7ea <GDT::flush()>
c000c905:	83 c4 4c             	add    esp,0x4c
c000c908:	5b                   	pop    ebx
c000c909:	5e                   	pop    esi
c000c90a:	5f                   	pop    edi
c000c90b:	5d                   	pop    ebp
c000c90c:	c3                   	ret    

c000c90d <idleFunction(void*)>:
c000c90d:	53                   	push   ebx
c000c90e:	83 ec 08             	sub    esp,0x8
c000c911:	e8 2c 1a 00 00       	call   c000e342 <unlockScheduler()>
c000c916:	e8 39 a8 00 00       	call   c0017154 <thisCPU()>
c000c91b:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c922:	74 41                	je     c000c965 <idleFunction(void*)+0x58>
c000c924:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000c929:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c930:	74 33                	je     c000c965 <idleFunction(void*)+0x58>
c000c932:	31 db                	xor    ebx,ebx
c000c934:	52                   	push   edx
c000c935:	52                   	push   edx
c000c936:	68 e1 00 00 00       	push   0xe1
c000c93b:	50                   	push   eax
c000c93c:	e8 a7 ec ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000c941:	53                   	push   ebx
c000c942:	83 e0 02             	and    eax,0x2
c000c945:	50                   	push   eax
c000c946:	68 e1 00 00 00       	push   0xe1
c000c94b:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c000c951:	e8 be ec ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c956:	83 c4 20             	add    esp,0x20
c000c959:	e8 f2 37 ff ff       	call   c0000150 <doTPAUSE>
c000c95e:	e8 1d 20 01 00       	call   c001e980 <idleCommon()>
c000c963:	eb f4                	jmp    c000c959 <idleFunction(void*)+0x4c>
c000c965:	fb                   	sti    
c000c966:	f4                   	hlt    
c000c967:	e8 14 20 01 00       	call   c001e980 <idleCommon()>
c000c96c:	eb f7                	jmp    c000c965 <idleFunction(void*)+0x58>

c000c96e <IDTEntry::IDTEntry(bool)>:
c000c96e:	83 ec 04             	sub    esp,0x4
c000c971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c975:	88 04 24             	mov    BYTE PTR [esp],al
c000c978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c97c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c986:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c98e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c991:	83 e2 f0             	and    edx,0xfffffff0
c000c994:	83 ca 0e             	or     edx,0xe
c000c997:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c99e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9a1:	83 e2 ef             	and    edx,0xffffffef
c000c9a4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9a7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c9ab:	74 04                	je     c000c9b1 <IDTEntry::IDTEntry(bool)+0x43>
c000c9ad:	b2 03                	mov    dl,0x3
c000c9af:	eb 02                	jmp    c000c9b3 <IDTEntry::IDTEntry(bool)+0x45>
c000c9b1:	b2 00                	mov    dl,0x0
c000c9b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b7:	83 e2 03             	and    edx,0x3
c000c9ba:	88 d1                	mov    cl,dl
c000c9bc:	c1 e1 05             	shl    ecx,0x5
c000c9bf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9c2:	83 e2 9f             	and    edx,0xffffff9f
c000c9c5:	09 ca                	or     edx,ecx
c000c9c7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ce:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9d1:	83 ca 80             	or     edx,0xffffff80
c000c9d4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9d7:	90                   	nop
c000c9d8:	83 c4 04             	add    esp,0x4
c000c9db:	c3                   	ret    

c000c9dc <IDTEntry::setOffset(unsigned int)>:
c000c9dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e4:	66 89 02             	mov    WORD PTR [edx],ax
c000c9e7:	c1 e8 10             	shr    eax,0x10
c000c9ea:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c9ee:	c3                   	ret    
c000c9ef:	90                   	nop

c000c9f0 <IDT::IDT()>:
c000c9f0:	90                   	nop
c000c9f1:	c3                   	ret    

c000c9f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c9f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9f6:	83 c0 30             	add    eax,0x30
c000c9f9:	c3                   	ret    

c000c9fa <IDT::addEntry(IDTEntry, int)>:
c000c9fa:	53                   	push   ebx
c000c9fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca0b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ca0e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ca12:	5b                   	pop    ebx
c000ca13:	c3                   	ret    

c000ca14 <IDT::addEntry(int, void (*)(), bool)>:
c000ca14:	53                   	push   ebx
c000ca15:	83 ec 10             	sub    esp,0x10
c000ca18:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ca1d:	50                   	push   eax
c000ca1e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ca22:	53                   	push   ebx
c000ca23:	e8 46 ff ff ff       	call   c000c96e <IDTEntry::IDTEntry(bool)>
c000ca28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca2c:	53                   	push   ebx
c000ca2d:	e8 aa ff ff ff       	call   c000c9dc <IDTEntry::setOffset(unsigned int)>
c000ca32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca42:	e8 b3 ff ff ff       	call   c000c9fa <IDT::addEntry(IDTEntry, int)>
c000ca47:	83 c4 30             	add    esp,0x30
c000ca4a:	5b                   	pop    ebx
c000ca4b:	c3                   	ret    

c000ca4c <IDT::flush()>:
c000ca4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca50:	66 c7 05 6c bb 03 c0 ff 07 	mov    WORD PTR ds:0xc003bb6c,0x7ff
c000ca59:	a3 6e bb 03 c0       	mov    ds:0xc003bb6e,eax
c000ca5e:	0f 01 1d 6c bb 03 c0 	lidtd  ds:0xc003bb6c
c000ca65:	c3                   	ret    

c000ca66 <IDT::setup()>:
c000ca66:	57                   	push   edi
c000ca67:	56                   	push   esi
c000ca68:	53                   	push   ebx
c000ca69:	83 ec 10             	sub    esp,0x10
c000ca6c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca70:	6a 00                	push   0x0
c000ca72:	68 80 03 00 c0       	push   0xc0000380
c000ca77:	6a 00                	push   0x0
c000ca79:	53                   	push   ebx
c000ca7a:	e8 95 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ca7f:	6a 00                	push   0x0
c000ca81:	68 90 03 00 c0       	push   0xc0000390
c000ca86:	6a 01                	push   0x1
c000ca88:	53                   	push   ebx
c000ca89:	e8 86 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ca8e:	83 c4 20             	add    esp,0x20
c000ca91:	6a 00                	push   0x0
c000ca93:	68 9a 03 00 c0       	push   0xc000039a
c000ca98:	6a 02                	push   0x2
c000ca9a:	53                   	push   ebx
c000ca9b:	e8 74 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000caa0:	6a 00                	push   0x0
c000caa2:	68 a4 03 00 c0       	push   0xc00003a4
c000caa7:	6a 03                	push   0x3
c000caa9:	53                   	push   ebx
c000caaa:	e8 65 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000caaf:	83 c4 20             	add    esp,0x20
c000cab2:	6a 00                	push   0x0
c000cab4:	68 ae 03 00 c0       	push   0xc00003ae
c000cab9:	6a 04                	push   0x4
c000cabb:	53                   	push   ebx
c000cabc:	e8 53 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cac1:	6a 00                	push   0x0
c000cac3:	68 b8 03 00 c0       	push   0xc00003b8
c000cac8:	6a 05                	push   0x5
c000caca:	53                   	push   ebx
c000cacb:	e8 44 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cad0:	83 c4 20             	add    esp,0x20
c000cad3:	6a 00                	push   0x0
c000cad5:	68 c2 03 00 c0       	push   0xc00003c2
c000cada:	6a 06                	push   0x6
c000cadc:	53                   	push   ebx
c000cadd:	e8 32 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cae2:	6a 00                	push   0x0
c000cae4:	68 cc 03 00 c0       	push   0xc00003cc
c000cae9:	6a 07                	push   0x7
c000caeb:	53                   	push   ebx
c000caec:	e8 23 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000caf1:	83 c4 20             	add    esp,0x20
c000caf4:	6a 00                	push   0x0
c000caf6:	68 d6 03 00 c0       	push   0xc00003d6
c000cafb:	6a 08                	push   0x8
c000cafd:	53                   	push   ebx
c000cafe:	e8 11 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb03:	6a 00                	push   0x0
c000cb05:	68 de 03 00 c0       	push   0xc00003de
c000cb0a:	6a 09                	push   0x9
c000cb0c:	53                   	push   ebx
c000cb0d:	e8 02 ff ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb12:	83 c4 20             	add    esp,0x20
c000cb15:	6a 00                	push   0x0
c000cb17:	68 e8 03 00 c0       	push   0xc00003e8
c000cb1c:	6a 0a                	push   0xa
c000cb1e:	53                   	push   ebx
c000cb1f:	e8 f0 fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb24:	6a 00                	push   0x0
c000cb26:	68 f0 03 00 c0       	push   0xc00003f0
c000cb2b:	6a 0b                	push   0xb
c000cb2d:	53                   	push   ebx
c000cb2e:	e8 e1 fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb33:	83 c4 20             	add    esp,0x20
c000cb36:	6a 00                	push   0x0
c000cb38:	68 f8 03 00 c0       	push   0xc00003f8
c000cb3d:	6a 0c                	push   0xc
c000cb3f:	53                   	push   ebx
c000cb40:	e8 cf fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb45:	6a 00                	push   0x0
c000cb47:	68 00 04 00 c0       	push   0xc0000400
c000cb4c:	6a 0d                	push   0xd
c000cb4e:	53                   	push   ebx
c000cb4f:	e8 c0 fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb54:	83 c4 20             	add    esp,0x20
c000cb57:	6a 00                	push   0x0
c000cb59:	68 08 04 00 c0       	push   0xc0000408
c000cb5e:	6a 0e                	push   0xe
c000cb60:	53                   	push   ebx
c000cb61:	e8 ae fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb66:	6a 00                	push   0x0
c000cb68:	68 10 04 00 c0       	push   0xc0000410
c000cb6d:	6a 0f                	push   0xf
c000cb6f:	53                   	push   ebx
c000cb70:	e8 9f fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb75:	83 c4 20             	add    esp,0x20
c000cb78:	6a 00                	push   0x0
c000cb7a:	68 1a 04 00 c0       	push   0xc000041a
c000cb7f:	6a 10                	push   0x10
c000cb81:	53                   	push   ebx
c000cb82:	e8 8d fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb87:	6a 00                	push   0x0
c000cb89:	68 24 04 00 c0       	push   0xc0000424
c000cb8e:	6a 11                	push   0x11
c000cb90:	53                   	push   ebx
c000cb91:	e8 7e fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cb96:	83 c4 20             	add    esp,0x20
c000cb99:	6a 00                	push   0x0
c000cb9b:	68 2e 04 00 c0       	push   0xc000042e
c000cba0:	6a 12                	push   0x12
c000cba2:	53                   	push   ebx
c000cba3:	e8 6c fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cba8:	6a 01                	push   0x1
c000cbaa:	68 38 04 00 c0       	push   0xc0000438
c000cbaf:	6a 60                	push   0x60
c000cbb1:	53                   	push   ebx
c000cbb2:	e8 5d fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cbb7:	83 c4 20             	add    esp,0x20
c000cbba:	6a 00                	push   0x0
c000cbbc:	68 42 04 00 c0       	push   0xc0000442
c000cbc1:	6a 20                	push   0x20
c000cbc3:	53                   	push   ebx
c000cbc4:	e8 4b fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cbc9:	6a 00                	push   0x0
c000cbcb:	68 4c 04 00 c0       	push   0xc000044c
c000cbd0:	6a 21                	push   0x21
c000cbd2:	53                   	push   ebx
c000cbd3:	e8 3c fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cbd8:	83 c4 20             	add    esp,0x20
c000cbdb:	6a 00                	push   0x0
c000cbdd:	68 56 04 00 c0       	push   0xc0000456
c000cbe2:	6a 22                	push   0x22
c000cbe4:	53                   	push   ebx
c000cbe5:	e8 2a fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cbea:	6a 00                	push   0x0
c000cbec:	68 60 04 00 c0       	push   0xc0000460
c000cbf1:	6a 23                	push   0x23
c000cbf3:	53                   	push   ebx
c000cbf4:	e8 1b fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cbf9:	83 c4 20             	add    esp,0x20
c000cbfc:	6a 00                	push   0x0
c000cbfe:	68 6a 04 00 c0       	push   0xc000046a
c000cc03:	6a 24                	push   0x24
c000cc05:	53                   	push   ebx
c000cc06:	e8 09 fe ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc0b:	6a 00                	push   0x0
c000cc0d:	68 74 04 00 c0       	push   0xc0000474
c000cc12:	6a 25                	push   0x25
c000cc14:	53                   	push   ebx
c000cc15:	e8 fa fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc1a:	83 c4 20             	add    esp,0x20
c000cc1d:	6a 00                	push   0x0
c000cc1f:	68 7e 04 00 c0       	push   0xc000047e
c000cc24:	6a 26                	push   0x26
c000cc26:	53                   	push   ebx
c000cc27:	e8 e8 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc2c:	6a 00                	push   0x0
c000cc2e:	68 88 04 00 c0       	push   0xc0000488
c000cc33:	6a 27                	push   0x27
c000cc35:	53                   	push   ebx
c000cc36:	e8 d9 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc3b:	83 c4 20             	add    esp,0x20
c000cc3e:	6a 00                	push   0x0
c000cc40:	68 92 04 00 c0       	push   0xc0000492
c000cc45:	6a 28                	push   0x28
c000cc47:	53                   	push   ebx
c000cc48:	e8 c7 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc4d:	6a 00                	push   0x0
c000cc4f:	68 9c 04 00 c0       	push   0xc000049c
c000cc54:	6a 29                	push   0x29
c000cc56:	53                   	push   ebx
c000cc57:	e8 b8 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc5c:	83 c4 20             	add    esp,0x20
c000cc5f:	6a 00                	push   0x0
c000cc61:	68 a6 04 00 c0       	push   0xc00004a6
c000cc66:	6a 2a                	push   0x2a
c000cc68:	53                   	push   ebx
c000cc69:	e8 a6 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc6e:	6a 00                	push   0x0
c000cc70:	68 b0 04 00 c0       	push   0xc00004b0
c000cc75:	6a 2b                	push   0x2b
c000cc77:	53                   	push   ebx
c000cc78:	e8 97 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc7d:	83 c4 20             	add    esp,0x20
c000cc80:	6a 00                	push   0x0
c000cc82:	68 ba 04 00 c0       	push   0xc00004ba
c000cc87:	6a 2c                	push   0x2c
c000cc89:	53                   	push   ebx
c000cc8a:	e8 85 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc8f:	6a 00                	push   0x0
c000cc91:	68 c4 04 00 c0       	push   0xc00004c4
c000cc96:	6a 2d                	push   0x2d
c000cc98:	53                   	push   ebx
c000cc99:	e8 76 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cc9e:	83 c4 20             	add    esp,0x20
c000cca1:	6a 00                	push   0x0
c000cca3:	68 ce 04 00 c0       	push   0xc00004ce
c000cca8:	6a 2e                	push   0x2e
c000ccaa:	53                   	push   ebx
c000ccab:	e8 64 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ccb0:	6a 00                	push   0x0
c000ccb2:	68 d8 04 00 c0       	push   0xc00004d8
c000ccb7:	6a 2f                	push   0x2f
c000ccb9:	53                   	push   ebx
c000ccba:	e8 55 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ccbf:	83 c4 20             	add    esp,0x20
c000ccc2:	6a 00                	push   0x0
c000ccc4:	68 e2 04 00 c0       	push   0xc00004e2
c000ccc9:	6a 30                	push   0x30
c000cccb:	53                   	push   ebx
c000cccc:	e8 43 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ccd1:	6a 00                	push   0x0
c000ccd3:	68 ec 04 00 c0       	push   0xc00004ec
c000ccd8:	6a 31                	push   0x31
c000ccda:	53                   	push   ebx
c000ccdb:	e8 34 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cce0:	83 c4 20             	add    esp,0x20
c000cce3:	6a 00                	push   0x0
c000cce5:	68 f6 04 00 c0       	push   0xc00004f6
c000ccea:	6a 32                	push   0x32
c000ccec:	53                   	push   ebx
c000cced:	e8 22 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000ccf2:	6a 00                	push   0x0
c000ccf4:	68 00 05 00 c0       	push   0xc0000500
c000ccf9:	6a 33                	push   0x33
c000ccfb:	53                   	push   ebx
c000ccfc:	e8 13 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cd01:	83 c4 20             	add    esp,0x20
c000cd04:	6a 00                	push   0x0
c000cd06:	68 0a 05 00 c0       	push   0xc000050a
c000cd0b:	6a 34                	push   0x34
c000cd0d:	53                   	push   ebx
c000cd0e:	e8 01 fd ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cd13:	6a 00                	push   0x0
c000cd15:	68 14 05 00 c0       	push   0xc0000514
c000cd1a:	6a 35                	push   0x35
c000cd1c:	53                   	push   ebx
c000cd1d:	e8 f2 fc ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cd22:	83 c4 20             	add    esp,0x20
c000cd25:	6a 00                	push   0x0
c000cd27:	68 1e 05 00 c0       	push   0xc000051e
c000cd2c:	6a 36                	push   0x36
c000cd2e:	53                   	push   ebx
c000cd2f:	e8 e0 fc ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cd34:	6a 00                	push   0x0
c000cd36:	68 28 05 00 c0       	push   0xc0000528
c000cd3b:	6a 37                	push   0x37
c000cd3d:	53                   	push   ebx
c000cd3e:	e8 d1 fc ff ff       	call   c000ca14 <IDT::addEntry(int, void (*)(), bool)>
c000cd43:	83 c4 20             	add    esp,0x20
c000cd46:	e8 02 47 00 00       	call   c001144d <Virt::getAKernelVAS()>
c000cd4b:	52                   	push   edx
c000cd4c:	6a 03                	push   0x3
c000cd4e:	6a 02                	push   0x2
c000cd50:	50                   	push   eax
c000cd51:	e8 9e 4c 00 00       	call   c00119f4 <VAS::allocatePages(int, int)>
c000cd56:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cd5d:	89 c6                	mov    esi,eax
c000cd5f:	e8 ea 56 00 00       	call   c001244e <operator new(unsigned long)>
c000cd64:	81 c6 00 20 00 00    	add    esi,0x2000
c000cd6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd6d:	89 c7                	mov    edi,eax
c000cd6f:	e8 30 40 00 00       	call   c0010da4 <TSS::TSS()>
c000cd74:	83 c4 0c             	add    esp,0xc
c000cd77:	68 d6 03 00 c0       	push   0xc00003d6
c000cd7c:	56                   	push   esi
c000cd7d:	57                   	push   edi
c000cd7e:	e8 61 40 00 00       	call   c0010de4 <TSS::setup(unsigned long, unsigned long)>
c000cd83:	59                   	pop    ecx
c000cd84:	89 c6                	mov    esi,eax
c000cd86:	5f                   	pop    edi
c000cd87:	6a 00                	push   0x0
c000cd89:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cd8d:	50                   	push   eax
c000cd8e:	e8 db fb ff ff       	call   c000c96e <IDTEntry::IDTEntry(bool)>
c000cd93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd97:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cd9c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cda3:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cda9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cdad:	80 ce 05             	or     dh,0x5
c000cdb0:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cdb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdbb:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cdbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdc1:	e8 86 fc ff ff       	call   c000ca4c <IDT::flush()>
c000cdc6:	83 c4 20             	add    esp,0x20
c000cdc9:	5b                   	pop    ebx
c000cdca:	5e                   	pop    esi
c000cdcb:	5f                   	pop    edi
c000cdcc:	c3                   	ret    

c000cdcd <stringifyxWithBase(unsigned int, char*, int)>:
c000cdcd:	57                   	push   edi
c000cdce:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cdd3:	56                   	push   esi
c000cdd4:	be f8 8a 03 c0       	mov    esi,0xc0038af8
c000cdd9:	53                   	push   ebx
c000cdda:	83 ec 40             	sub    esp,0x40
c000cddd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cde1:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cde5:	fc                   	cld    
c000cde6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cde8:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cdec:	83 f9 3e             	cmp    ecx,0x3e
c000cdef:	7e 05                	jle    c000cdf6 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cdf1:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cdf6:	89 df                	mov    edi,ebx
c000cdf8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cdfc:	eb 02                	jmp    c000ce00 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cdfe:	89 c7                	mov    edi,eax
c000ce00:	31 d2                	xor    edx,edx
c000ce02:	46                   	inc    esi
c000ce03:	89 f8                	mov    eax,edi
c000ce05:	f7 f1                	div    ecx
c000ce07:	39 cf                	cmp    edi,ecx
c000ce09:	73 f3                	jae    c000cdfe <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ce0b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce0e:	eb 02                	jmp    c000ce12 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ce10:	89 c3                	mov    ebx,eax
c000ce12:	31 d2                	xor    edx,edx
c000ce14:	4e                   	dec    esi
c000ce15:	89 d8                	mov    eax,ebx
c000ce17:	f7 f1                	div    ecx
c000ce19:	39 cb                	cmp    ebx,ecx
c000ce1b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ce1f:	88 16                	mov    BYTE PTR [esi],dl
c000ce21:	73 ed                	jae    c000ce10 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ce23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce27:	83 c4 40             	add    esp,0x40
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	5f                   	pop    edi
c000ce2d:	c3                   	ret    

c000ce2e <logc(char)>:
c000ce2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce32:	ba fd 03 00 00       	mov    edx,0x3fd
c000ce37:	ec                   	in     al,dx
c000ce38:	a8 20                	test   al,0x20
c000ce3a:	74 fb                	je     c000ce37 <logc(char)+0x9>
c000ce3c:	ba f8 03 00 00       	mov    edx,0x3f8
c000ce41:	88 c8                	mov    al,cl
c000ce43:	ee                   	out    dx,al
c000ce44:	c3                   	ret    

c000ce45 <logs(char*)>:
c000ce45:	53                   	push   ebx
c000ce46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ce4a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce4d:	84 c0                	test   al,al
c000ce4f:	74 0f                	je     c000ce60 <logs(char*)+0x1b>
c000ce51:	50                   	push   eax
c000ce52:	43                   	inc    ebx
c000ce53:	e8 d6 ff ff ff       	call   c000ce2e <logc(char)>
c000ce58:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce5b:	5a                   	pop    edx
c000ce5c:	84 c0                	test   al,al
c000ce5e:	75 f1                	jne    c000ce51 <logs(char*)+0xc>
c000ce60:	5b                   	pop    ebx
c000ce61:	c3                   	ret    

c000ce62 <logWriteInt(unsigned int)>:
c000ce62:	83 ec 10             	sub    esp,0x10
c000ce65:	6a 0a                	push   0xa
c000ce67:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce6b:	50                   	push   eax
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	e8 58 ff ff ff       	call   c000cdcd <stringifyxWithBase(unsigned int, char*, int)>
c000ce75:	50                   	push   eax
c000ce76:	e8 ca ff ff ff       	call   c000ce45 <logs(char*)>
c000ce7b:	83 c4 20             	add    esp,0x20
c000ce7e:	c3                   	ret    

c000ce7f <logWriteIntBase(unsigned int, int)>:
c000ce7f:	83 ec 10             	sub    esp,0x10
c000ce82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce86:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce8a:	50                   	push   eax
c000ce8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8f:	e8 39 ff ff ff       	call   c000cdcd <stringifyxWithBase(unsigned int, char*, int)>
c000ce94:	50                   	push   eax
c000ce95:	e8 ab ff ff ff       	call   c000ce45 <logs(char*)>
c000ce9a:	83 c4 20             	add    esp,0x20
c000ce9d:	c3                   	ret    

c000ce9e <kprintf(char const*, ...)>:
c000ce9e:	55                   	push   ebp
c000ce9f:	57                   	push   edi
c000cea0:	56                   	push   esi
c000cea1:	53                   	push   ebx
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cea9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cead:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ceb1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ceb4:	84 c0                	test   al,al
c000ceb6:	74 4a                	je     c000cf02 <kprintf(char const*, ...)+0x64>
c000ceb8:	31 db                	xor    ebx,ebx
c000ceba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cebd:	3c 25                	cmp    al,0x25
c000cebf:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cec2:	0f 85 e4 00 00 00    	jne    c000cfac <kprintf(char const*, ...)+0x10e>
c000cec8:	83 c3 02             	add    ebx,0x2
c000cecb:	8a 07                	mov    al,BYTE PTR [edi]
c000cecd:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ced0:	83 e8 25             	sub    eax,0x25
c000ced3:	3c 53                	cmp    al,0x53
c000ced5:	0f 87 ba 00 00 00    	ja     c000cf95 <kprintf(char const*, ...)+0xf7>
c000cedb:	0f b6 c0             	movzx  eax,al
c000cede:	ff 24 85 4c 8c 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc73b4]
c000cee5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cee9:	89 c8                	mov    eax,ecx
c000ceeb:	83 c1 04             	add    ecx,0x4
c000ceee:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cef2:	ff 30                	push   DWORD PTR [eax]
c000cef4:	e8 4c ff ff ff       	call   c000ce45 <logs(char*)>
c000cef9:	58                   	pop    eax
c000cefa:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cefe:	84 c0                	test   al,al
c000cf00:	75 b8                	jne    c000ceba <kprintf(char const*, ...)+0x1c>
c000cf02:	83 c4 0c             	add    esp,0xc
c000cf05:	5b                   	pop    ebx
c000cf06:	5e                   	pop    esi
c000cf07:	5f                   	pop    edi
c000cf08:	5d                   	pop    ebp
c000cf09:	c3                   	ret    
c000cf0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf0e:	89 d0                	mov    eax,edx
c000cf10:	83 c2 04             	add    edx,0x4
c000cf13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf17:	ff 30                	push   DWORD PTR [eax]
c000cf19:	e8 44 ff ff ff       	call   c000ce62 <logWriteInt(unsigned int)>
c000cf1e:	58                   	pop    eax
c000cf1f:	eb d9                	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf25:	89 d0                	mov    eax,edx
c000cf27:	83 c2 04             	add    edx,0x4
c000cf2a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cf2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf31:	50                   	push   eax
c000cf32:	e8 f7 fe ff ff       	call   c000ce2e <logc(char)>
c000cf37:	58                   	pop    eax
c000cf38:	eb c0                	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf3e:	89 c8                	mov    eax,ecx
c000cf40:	83 c1 04             	add    ecx,0x4
c000cf43:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf47:	ff 30                	push   DWORD PTR [eax]
c000cf49:	e8 14 ff ff ff       	call   c000ce62 <logWriteInt(unsigned int)>
c000cf4e:	5f                   	pop    edi
c000cf4f:	eb a9                	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf55:	89 c8                	mov    eax,ecx
c000cf57:	83 c1 04             	add    ecx,0x4
c000cf5a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf5e:	6a 10                	push   0x10
c000cf60:	ff 30                	push   DWORD PTR [eax]
c000cf62:	e8 18 ff ff ff       	call   c000ce7f <logWriteIntBase(unsigned int, int)>
c000cf67:	59                   	pop    ecx
c000cf68:	5f                   	pop    edi
c000cf69:	eb 8f                	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf6f:	89 d0                	mov    eax,edx
c000cf71:	83 c2 08             	add    edx,0x8
c000cf74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf78:	6a 10                	push   0x10
c000cf7a:	ff 30                	push   DWORD PTR [eax]
c000cf7c:	e8 fe fe ff ff       	call   c000ce7f <logWriteIntBase(unsigned int, int)>
c000cf81:	58                   	pop    eax
c000cf82:	5a                   	pop    edx
c000cf83:	e9 72 ff ff ff       	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf88:	6a 25                	push   0x25
c000cf8a:	e8 9f fe ff ff       	call   c000ce2e <logc(char)>
c000cf8f:	58                   	pop    eax
c000cf90:	e9 65 ff ff ff       	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cf95:	6a 25                	push   0x25
c000cf97:	e8 92 fe ff ff       	call   c000ce2e <logc(char)>
c000cf9c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cf9f:	50                   	push   eax
c000cfa0:	e8 89 fe ff ff       	call   c000ce2e <logc(char)>
c000cfa5:	5a                   	pop    edx
c000cfa6:	59                   	pop    ecx
c000cfa7:	e9 4e ff ff ff       	jmp    c000cefa <kprintf(char const*, ...)+0x5c>
c000cfac:	50                   	push   eax
c000cfad:	89 eb                	mov    ebx,ebp
c000cfaf:	e8 7a fe ff ff       	call   c000ce2e <logc(char)>
c000cfb4:	89 fd                	mov    ebp,edi
c000cfb6:	58                   	pop    eax
c000cfb7:	e9 3e ff ff ff       	jmp    c000cefa <kprintf(char const*, ...)+0x5c>

c000cfbc <panic(char const*)>:
c000cfbc:	55                   	push   ebp
c000cfbd:	89 e5                	mov    ebp,esp
c000cfbf:	53                   	push   ebx
c000cfc0:	50                   	push   eax
c000cfc1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cfc4:	fa                   	cli    
c000cfc5:	c6 05 72 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb72,0x1
c000cfcc:	53                   	push   ebx
c000cfcd:	c6 05 00 ae 03 c0 00 	mov    BYTE PTR ds:0xc003ae00,0x0
c000cfd4:	68 9c 8d 03 c0       	push   0xc0038d9c
c000cfd9:	e8 c0 fe ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000cfde:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000cfe3:	52                   	push   edx
c000cfe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfea:	e8 36 36 00 00       	call   c0010625 <setActiveTerminal(VgaText*)>
c000cfef:	83 c4 0c             	add    esp,0xc
c000cff2:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000cff7:	6a 01                	push   0x1
c000cff9:	6a 0f                	push   0xf
c000cffb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d001:	e8 5e 30 00 00       	call   c0010064 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d006:	59                   	pop    ecx
c000d007:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d00c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d012:	e8 af 38 00 00       	call   c00108c6 <VgaText::clearScreen()>
c000d017:	58                   	pop    eax
c000d018:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d01d:	5a                   	pop    edx
c000d01e:	68 b5 8d 03 c0       	push   0xc0038db5
c000d023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d029:	e8 16 3a 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d02e:	59                   	pop    ecx
c000d02f:	58                   	pop    eax
c000d030:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d035:	68 38 8b 03 c0       	push   0xc0038b38
c000d03a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d040:	e8 ff 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d045:	58                   	pop    eax
c000d046:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d04b:	5a                   	pop    edx
c000d04c:	68 d1 8d 03 c0       	push   0xc0038dd1
c000d051:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d057:	e8 e8 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d05c:	59                   	pop    ecx
c000d05d:	58                   	pop    eax
c000d05e:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d063:	53                   	push   ebx
c000d064:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d06a:	e8 d5 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d06f:	58                   	pop    eax
c000d070:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d075:	5a                   	pop    edx
c000d076:	68 f1 8d 03 c0       	push   0xc0038df1
c000d07b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d081:	e8 be 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d086:	59                   	pop    ecx
c000d087:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d08c:	5b                   	pop    ebx
c000d08d:	68 74 8b 03 c0       	push   0xc0038b74
c000d092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d098:	e8 a7 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d09d:	58                   	pop    eax
c000d09e:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0a3:	5a                   	pop    edx
c000d0a4:	68 d1 8d 03 c0       	push   0xc0038dd1
c000d0a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0af:	e8 90 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d0b4:	59                   	pop    ecx
c000d0b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d0ba:	5b                   	pop    ebx
c000d0bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d0be:	83 c0 0c             	add    eax,0xc
c000d0c1:	50                   	push   eax
c000d0c2:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0cd:	e8 72 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d0d2:	58                   	pop    eax
c000d0d3:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0d8:	5a                   	pop    edx
c000d0d9:	68 f0 8d 03 c0       	push   0xc0038df0
c000d0de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0e4:	e8 5b 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d0e9:	59                   	pop    ecx
c000d0ea:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0ef:	5b                   	pop    ebx
c000d0f0:	68 a0 8b 03 c0       	push   0xc0038ba0
c000d0f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0fb:	e8 44 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d100:	58                   	pop    eax
c000d101:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d106:	5a                   	pop    edx
c000d107:	68 e0 8b 03 c0       	push   0xc0038be0
c000d10c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d112:	e8 2d 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d117:	59                   	pop    ecx
c000d118:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d11d:	5b                   	pop    ebx
c000d11e:	68 dc 8d 03 c0       	push   0xc0038ddc
c000d123:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d129:	e8 16 39 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d12e:	58                   	pop    eax
c000d12f:	5a                   	pop    edx
c000d130:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d133:	68 f4 8d 03 c0       	push   0xc0038df4
c000d138:	e8 61 fd ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000d13d:	59                   	pop    ecx
c000d13e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d141:	5b                   	pop    ebx
c000d142:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d145:	68 fd 8d 03 c0       	push   0xc0038dfd
c000d14a:	e8 4f fd ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000d14f:	5a                   	pop    edx
c000d150:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d153:	59                   	pop    ecx
c000d154:	8b 00                	mov    eax,DWORD PTR [eax]
c000d156:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d159:	68 99 9c 03 c0       	push   0xc0039c99
c000d15e:	e8 3b fd ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000d163:	5b                   	pop    ebx
c000d164:	58                   	pop    eax
c000d165:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d16a:	68 24 8c 03 c0       	push   0xc0038c24
c000d16f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d175:	e8 ca 38 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d17a:	58                   	pop    eax
c000d17b:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d180:	5a                   	pop    edx
c000d181:	68 06 8e 03 c0       	push   0xc0038e06
c000d186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d18c:	e8 b3 38 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d191:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d196:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d19c:	e8 f4 17 01 00       	call   c001e995 <CPU::readCR0()>
c000d1a1:	59                   	pop    ecx
c000d1a2:	5a                   	pop    edx
c000d1a3:	50                   	push   eax
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 c0 38 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d1aa:	59                   	pop    ecx
c000d1ab:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1b0:	5b                   	pop    ebx
c000d1b1:	68 10 8e 03 c0       	push   0xc0038e10
c000d1b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1bc:	e8 83 38 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d1c1:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1c6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1cc:	e8 d6 17 01 00       	call   c001e9a7 <CPU::readCR2()>
c000d1d1:	5a                   	pop    edx
c000d1d2:	59                   	pop    ecx
c000d1d3:	50                   	push   eax
c000d1d4:	53                   	push   ebx
c000d1d5:	e8 90 38 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d1da:	5b                   	pop    ebx
c000d1db:	58                   	pop    eax
c000d1dc:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1e1:	68 1a 8e 03 c0       	push   0xc0038e1a
c000d1e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1ec:	e8 53 38 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d1f1:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1f6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1fc:	e8 b8 17 01 00       	call   c001e9b9 <CPU::readCR3()>
c000d201:	5a                   	pop    edx
c000d202:	59                   	pop    ecx
c000d203:	50                   	push   eax
c000d204:	53                   	push   ebx
c000d205:	e8 60 38 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d20a:	5b                   	pop    ebx
c000d20b:	58                   	pop    eax
c000d20c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d211:	68 2d 8e 03 c0       	push   0xc0038e2d
c000d216:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d21c:	e8 23 38 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d221:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d226:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d22c:	e8 9a 17 01 00       	call   c001e9cb <CPU::readCR4()>
c000d231:	5a                   	pop    edx
c000d232:	59                   	pop    ecx
c000d233:	50                   	push   eax
c000d234:	53                   	push   ebx
c000d235:	e8 30 38 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d23a:	5b                   	pop    ebx
c000d23b:	58                   	pop    eax
c000d23c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d241:	68 37 8e 03 c0       	push   0xc0038e37
c000d246:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d24c:	e8 f3 37 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d251:	5a                   	pop    edx
c000d252:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d257:	59                   	pop    ecx
c000d258:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	50                   	push   eax
c000d262:	e8 03 38 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d267:	5b                   	pop    ebx
c000d268:	58                   	pop    eax
c000d269:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d26e:	68 4e 8e 03 c0       	push   0xc0038e4e
c000d273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d279:	e8 c6 37 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d27e:	5a                   	pop    edx
c000d27f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d284:	59                   	pop    ecx
c000d285:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d28b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d28e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d291:	50                   	push   eax
c000d292:	e8 d3 37 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d297:	5b                   	pop    ebx
c000d298:	58                   	pop    eax
c000d299:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d29e:	68 4e 8e 03 c0       	push   0xc0038e4e
c000d2a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2a9:	e8 96 37 00 00       	call   c0010a44 <VgaText::puts(char const*)>
c000d2ae:	59                   	pop    ecx
c000d2af:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d2b4:	5b                   	pop    ebx
c000d2b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2bb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2be:	8b 12                	mov    edx,DWORD PTR [edx]
c000d2c0:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2c3:	50                   	push   eax
c000d2c4:	e8 a1 37 00 00       	call   c0010a6a <VgaText::putx(unsigned int)>
c000d2c9:	83 c4 10             	add    esp,0x10
c000d2cc:	b2 fe                	mov    dl,0xfe
c000d2ce:	e4 60                	in     al,0x60
c000d2d0:	3c 1c                	cmp    al,0x1c
c000d2d2:	74 04                	je     c000d2d8 <panic(char const*)+0x31c>
c000d2d4:	3c 5a                	cmp    al,0x5a
c000d2d6:	75 f6                	jne    c000d2ce <panic(char const*)+0x312>
c000d2d8:	e4 64                	in     al,0x64
c000d2da:	a8 02                	test   al,0x2
c000d2dc:	75 fa                	jne    c000d2d8 <panic(char const*)+0x31c>
c000d2de:	88 d0                	mov    al,dl
c000d2e0:	e6 64                	out    0x64,al
c000d2e2:	fa                   	cli    
c000d2e3:	f4                   	hlt    
c000d2e4:	eb e8                	jmp    c000d2ce <panic(char const*)+0x312>

c000d2e6 <sbrk>:
c000d2e6:	55                   	push   ebp
c000d2e7:	57                   	push   edi
c000d2e8:	56                   	push   esi
c000d2e9:	53                   	push   ebx
c000d2ea:	83 ec 1c             	sub    esp,0x1c
c000d2ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d2f1:	85 db                	test   ebx,ebx
c000d2f3:	74 37                	je     c000d32c <sbrk+0x46>
c000d2f5:	78 3f                	js     c000d336 <sbrk+0x50>
c000d2f7:	e8 58 9e 00 00       	call   c0017154 <thisCPU()>
c000d2fc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d302:	83 e0 01             	and    eax,0x1
c000d305:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d309:	a1 ec ad 03 c0       	mov    eax,ds:0xc003adec
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d318:	89 d8                	mov    eax,ebx
c000d31a:	78 35                	js     c000d351 <sbrk+0x6b>
c000d31c:	c1 f8 0c             	sar    eax,0xc
c000d31f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d323:	89 c7                	mov    edi,eax
c000d325:	be 00 00 00 00       	mov    esi,0x0
c000d32a:	eb 3c                	jmp    c000d368 <sbrk+0x82>
c000d32c:	a1 ec ad 03 c0       	mov    eax,ds:0xc003adec
c000d331:	e9 ad 00 00 00       	jmp    c000d3e3 <sbrk+0xfd>
c000d336:	83 ec 08             	sub    esp,0x8
c000d339:	53                   	push   ebx
c000d33a:	68 54 8e 03 c0       	push   0xc0038e54
c000d33f:	e8 5a fb ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000d344:	83 c4 10             	add    esp,0x10
c000d347:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d34c:	e9 92 00 00 00       	jmp    c000d3e3 <sbrk+0xfd>
c000d351:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d357:	eb c3                	jmp    c000d31c <sbrk+0x36>
c000d359:	81 05 ec ad 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003adec,0x1000
c000d363:	46                   	inc    esi
c000d364:	39 f7                	cmp    edi,esi
c000d366:	74 34                	je     c000d39c <sbrk+0xb6>
c000d368:	e8 e0 40 00 00       	call   c001144d <Virt::getAKernelVAS()>
c000d36d:	89 c3                	mov    ebx,eax
c000d36f:	8b 2d ec ad 03 c0    	mov    ebp,DWORD PTR ds:0xc003adec
c000d375:	e8 c9 06 00 00       	call   c000da43 <Phys::allocatePage()>
c000d37a:	68 01 04 00 00       	push   0x401
c000d37f:	55                   	push   ebp
c000d380:	50                   	push   eax
c000d381:	53                   	push   ebx
c000d382:	e8 6d 45 00 00       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d38f:	74 c8                	je     c000d359 <sbrk+0x73>
c000d391:	8b 1d ec ad 03 c0    	mov    ebx,DWORD PTR ds:0xc003adec
c000d397:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d39a:	eb bd                	jmp    c000d359 <sbrk+0x73>
c000d39c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3a1:	74 48                	je     c000d3eb <sbrk+0x105>
c000d3a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3a7:	89 d3                	mov    ebx,edx
c000d3a9:	c1 eb 0a             	shr    ebx,0xa
c000d3ac:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d3b2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d3b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3bc:	c1 e0 0c             	shl    eax,0xc
c000d3bf:	01 d0                	add    eax,edx
c000d3c1:	c1 e8 0a             	shr    eax,0xa
c000d3c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d3c9:	2d 00 00 40 00       	sub    eax,0x400000
c000d3ce:	39 c3                	cmp    ebx,eax
c000d3d0:	77 0d                	ja     c000d3df <sbrk+0xf9>
c000d3d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d3db:	39 d8                	cmp    eax,ebx
c000d3dd:	73 f3                	jae    c000d3d2 <sbrk+0xec>
c000d3df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3e3:	83 c4 1c             	add    esp,0x1c
c000d3e6:	5b                   	pop    ebx
c000d3e7:	5e                   	pop    esi
c000d3e8:	5f                   	pop    edi
c000d3e9:	5d                   	pop    ebp
c000d3ea:	c3                   	ret    
c000d3eb:	e8 c9 15 01 00       	call   c001e9b9 <CPU::readCR3()>
c000d3f0:	83 ec 0c             	sub    esp,0xc
c000d3f3:	50                   	push   eax
c000d3f4:	e8 e4 15 01 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	eb e1                	jmp    c000d3df <sbrk+0xf9>

c000d3fe <mmap>:
c000d3fe:	83 ec 18             	sub    esp,0x18
c000d401:	68 84 8e 03 c0       	push   0xc0038e84
c000d406:	e8 b1 fb ff ff       	call   c000cfbc <panic(char const*)>
c000d40b:	b8 00 00 00 00       	mov    eax,0x0
c000d410:	83 c4 1c             	add    esp,0x1c
c000d413:	c3                   	ret    

c000d414 <munmap>:
c000d414:	83 ec 18             	sub    esp,0x18
c000d417:	68 89 8e 03 c0       	push   0xc0038e89
c000d41c:	e8 9b fb ff ff       	call   c000cfbc <panic(char const*)>
c000d421:	b8 00 00 00 00       	mov    eax,0x0
c000d426:	83 c4 1c             	add    esp,0x1c
c000d429:	c3                   	ret    

c000d42a <liballoc_lock()>:
c000d42a:	83 ec 0c             	sub    esp,0xc
c000d42d:	e8 0e 0f 00 00       	call   c000e340 <lockScheduler()>
c000d432:	b8 00 00 00 00       	mov    eax,0x0
c000d437:	83 c4 0c             	add    esp,0xc
c000d43a:	c3                   	ret    

c000d43b <liballoc_unlock()>:
c000d43b:	83 ec 0c             	sub    esp,0xc
c000d43e:	e8 ff 0e 00 00       	call   c000e342 <unlockScheduler()>
c000d443:	b8 00 00 00 00       	mov    eax,0x0
c000d448:	83 c4 0c             	add    esp,0xc
c000d44b:	c3                   	ret    

c000d44c <liballoc_alloc(int)>:
c000d44c:	83 ec 0c             	sub    esp,0xc
c000d44f:	e8 f9 3f 00 00       	call   c001144d <Virt::getAKernelVAS()>
c000d454:	83 ec 04             	sub    esp,0x4
c000d457:	6a 01                	push   0x1
c000d459:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d45d:	50                   	push   eax
c000d45e:	e8 91 45 00 00       	call   c00119f4 <VAS::allocatePages(int, int)>
c000d463:	83 c4 1c             	add    esp,0x1c
c000d466:	c3                   	ret    

c000d467 <liballoc_free(void*, int)>:
c000d467:	83 ec 0c             	sub    esp,0xc
c000d46a:	e8 de 3f 00 00       	call   c001144d <Virt::getAKernelVAS()>
c000d46f:	83 ec 08             	sub    esp,0x8
c000d472:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d476:	50                   	push   eax
c000d477:	e8 9a 42 00 00       	call   c0011716 <VAS::freeAllocatedPages(unsigned long)>
c000d47c:	b8 00 00 00 00       	mov    eax,0x0
c000d481:	83 c4 1c             	add    esp,0x1c
c000d484:	c3                   	ret    

c000d485 <realloc>:
c000d485:	83 ec 14             	sub    esp,0x14
c000d488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d490:	e8 09 42 ff ff       	call   c000169e <dlrealloc>
c000d495:	83 c4 1c             	add    esp,0x1c
c000d498:	c3                   	ret    

c000d499 <malloc>:
c000d499:	83 ec 18             	sub    esp,0x18
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 bc 3c ff ff       	call   c0001161 <dlmalloc>
c000d4a5:	83 c4 1c             	add    esp,0x1c
c000d4a8:	c3                   	ret    

c000d4a9 <free>:
c000d4a9:	83 ec 18             	sub    esp,0x18
c000d4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b0:	e8 51 39 ff ff       	call   c0000e06 <dlfree>
c000d4b5:	83 c4 1c             	add    esp,0x1c
c000d4b8:	c3                   	ret    

c000d4b9 <rfree>:
c000d4b9:	83 ec 18             	sub    esp,0x18
c000d4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c0:	e8 e4 ff ff ff       	call   c000d4a9 <free>
c000d4c5:	83 c4 1c             	add    esp,0x1c
c000d4c8:	c3                   	ret    

c000d4c9 <calloc>:
c000d4c9:	56                   	push   esi
c000d4ca:	53                   	push   ebx
c000d4cb:	83 ec 10             	sub    esp,0x10
c000d4ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d4d7:	53                   	push   ebx
c000d4d8:	e8 bc ff ff ff       	call   c000d499 <malloc>
c000d4dd:	89 c6                	mov    esi,eax
c000d4df:	83 c4 0c             	add    esp,0xc
c000d4e2:	53                   	push   ebx
c000d4e3:	6a 00                	push   0x0
c000d4e5:	50                   	push   eax
c000d4e6:	e8 ed 31 ff ff       	call   c00006d8 <memset>
c000d4eb:	89 f0                	mov    eax,esi
c000d4ed:	83 c4 14             	add    esp,0x14
c000d4f0:	5b                   	pop    ebx
c000d4f1:	5e                   	pop    esi
c000d4f2:	c3                   	ret    

c000d4f3 <hwTextMode_loadInData(VgaText*)>:
c000d4f3:	57                   	push   edi
c000d4f4:	56                   	push   esi
c000d4f5:	53                   	push   ebx
c000d4f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d4fa:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d500:	85 c0                	test   eax,eax
c000d502:	7e 30                	jle    c000d534 <hwTextMode_loadInData(VgaText*)+0x41>
c000d504:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d507:	31 f6                	xor    esi,esi
c000d509:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d50c:	31 c0                	xor    eax,eax
c000d50e:	c1 e1 05             	shl    ecx,0x5
c000d511:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d517:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d51b:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d51f:	40                   	inc    eax
c000d520:	83 f8 50             	cmp    eax,0x50
c000d523:	75 f2                	jne    c000d517 <hwTextMode_loadInData(VgaText*)+0x24>
c000d525:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d52b:	46                   	inc    esi
c000d52c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d532:	7f d5                	jg     c000d509 <hwTextMode_loadInData(VgaText*)+0x16>
c000d534:	5b                   	pop    ebx
c000d535:	5e                   	pop    esi
c000d536:	5f                   	pop    edi
c000d537:	c3                   	ret    

c000d538 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d538:	56                   	push   esi
c000d539:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d53e:	53                   	push   ebx
c000d53f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d543:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d547:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d54d:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d553:	c1 e0 04             	shl    eax,0x4
c000d556:	83 e6 0f             	and    esi,0xf
c000d559:	0f b6 c0             	movzx  eax,al
c000d55c:	41                   	inc    ecx
c000d55d:	09 f0                	or     eax,esi
c000d55f:	83 c2 02             	add    edx,0x2
c000d562:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d566:	c1 e0 08             	shl    eax,0x8
c000d569:	09 f0                	or     eax,esi
c000d56b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d56f:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d575:	75 d0                	jne    c000d547 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d577:	5b                   	pop    ebx
c000d578:	5e                   	pop    esi
c000d579:	c3                   	ret    

c000d57a <hwTextMode_showCursor(VgaText*, bool)>:
c000d57a:	56                   	push   esi
c000d57b:	53                   	push   ebx
c000d57c:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d581:	74 38                	je     c000d5bb <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d583:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d588:	b0 0a                	mov    al,0xa
c000d58a:	89 da                	mov    edx,ebx
c000d58c:	ee                   	out    dx,al
c000d58d:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d592:	89 ca                	mov    edx,ecx
c000d594:	ec                   	in     al,dx
c000d595:	b2 0f                	mov    dl,0xf
c000d597:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d59b:	83 e0 c0             	and    eax,0xffffffc0
c000d59e:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d5a4:	09 d0                	or     eax,edx
c000d5a6:	89 ca                	mov    edx,ecx
c000d5a8:	ee                   	out    dx,al
c000d5a9:	b0 0b                	mov    al,0xb
c000d5ab:	89 da                	mov    edx,ebx
c000d5ad:	ee                   	out    dx,al
c000d5ae:	89 ca                	mov    edx,ecx
c000d5b0:	ec                   	in     al,dx
c000d5b1:	83 e0 e0             	and    eax,0xffffffe0
c000d5b4:	83 c8 0f             	or     eax,0xf
c000d5b7:	ee                   	out    dx,al
c000d5b8:	5b                   	pop    ebx
c000d5b9:	5e                   	pop    esi
c000d5ba:	c3                   	ret    
c000d5bb:	b0 0a                	mov    al,0xa
c000d5bd:	ba d4 03 00 00       	mov    edx,0x3d4
c000d5c2:	ee                   	out    dx,al
c000d5c3:	b0 20                	mov    al,0x20
c000d5c5:	ba d5 03 00 00       	mov    edx,0x3d5
c000d5ca:	ee                   	out    dx,al
c000d5cb:	5b                   	pop    ebx
c000d5cc:	5e                   	pop    esi
c000d5cd:	c3                   	ret    

c000d5ce <hwTextMode_update(VgaText*)>:
c000d5ce:	c3                   	ret    

c000d5cf <hwTextMode_updateCursor(VgaText*)>:
c000d5cf:	56                   	push   esi
c000d5d0:	b9 19 00 00 00       	mov    ecx,0x19
c000d5d5:	53                   	push   ebx
c000d5d6:	be d4 03 00 00       	mov    esi,0x3d4
c000d5db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5df:	89 f2                	mov    edx,esi
c000d5e1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d5e7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d5ed:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d5f0:	c1 e1 04             	shl    ecx,0x4
c000d5f3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d5f9:	b0 0f                	mov    al,0xf
c000d5fb:	ee                   	out    dx,al
c000d5fc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d601:	88 c8                	mov    al,cl
c000d603:	89 da                	mov    edx,ebx
c000d605:	ee                   	out    dx,al
c000d606:	b0 0e                	mov    al,0xe
c000d608:	89 f2                	mov    edx,esi
c000d60a:	ee                   	out    dx,al
c000d60b:	89 c8                	mov    eax,ecx
c000d60d:	89 da                	mov    edx,ebx
c000d60f:	66 c1 e8 08          	shr    ax,0x8
c000d613:	ee                   	out    dx,al
c000d614:	5b                   	pop    ebx
c000d615:	5e                   	pop    esi
c000d616:	c3                   	ret    

c000d617 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d617:	ba da 03 00 00       	mov    edx,0x3da
c000d61c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d621:	75 18                	jne    c000d63b <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d623:	ec                   	in     al,dx
c000d624:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d629:	b0 30                	mov    al,0x30
c000d62b:	89 ca                	mov    edx,ecx
c000d62d:	ee                   	out    dx,al
c000d62e:	ba c1 03 00 00       	mov    edx,0x3c1
c000d633:	ec                   	in     al,dx
c000d634:	83 c8 08             	or     eax,0x8
c000d637:	89 ca                	mov    edx,ecx
c000d639:	ee                   	out    dx,al
c000d63a:	c3                   	ret    
c000d63b:	ec                   	in     al,dx
c000d63c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d641:	b0 30                	mov    al,0x30
c000d643:	89 ca                	mov    edx,ecx
c000d645:	ee                   	out    dx,al
c000d646:	ba c1 03 00 00       	mov    edx,0x3c1
c000d64b:	ec                   	in     al,dx
c000d64c:	83 e0 f7             	and    eax,0xfffffff7
c000d64f:	89 ca                	mov    edx,ecx
c000d651:	ee                   	out    dx,al
c000d652:	c3                   	ret    

c000d653 <hwTextMode_scrollScreen(VgaText*)>:
c000d653:	55                   	push   ebp
c000d654:	bd 02 00 00 00       	mov    ebp,0x2
c000d659:	57                   	push   edi
c000d65a:	56                   	push   esi
c000d65b:	53                   	push   ebx
c000d65c:	83 ec 1c             	sub    esp,0x1c
c000d65f:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d667:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d66b:	31 c0                	xor    eax,eax
c000d66d:	eb 0b                	jmp    c000d67a <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d66f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d675:	74 57                	je     c000d6ce <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d677:	43                   	inc    ebx
c000d678:	89 f0                	mov    eax,esi
c000d67a:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d680:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d686:	88 13                	mov    BYTE PTR [ebx],dl
c000d688:	8d 70 01             	lea    esi,[eax+0x1]
c000d68b:	83 fd 18             	cmp    ebp,0x18
c000d68e:	75 df                	jne    c000d66f <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d690:	a8 01                	test   al,0x1
c000d692:	75 13                	jne    c000d6a7 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d694:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d697:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d69d:	75 d8                	jne    c000d677 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d69f:	83 c4 1c             	add    esp,0x1c
c000d6a2:	5b                   	pop    ebx
c000d6a3:	5e                   	pop    esi
c000d6a4:	5f                   	pop    edi
c000d6a5:	5d                   	pop    ebp
c000d6a6:	c3                   	ret    
c000d6a7:	83 ec 08             	sub    esp,0x8
c000d6aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6ae:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d6b5:	50                   	push   eax
c000d6b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6ba:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d6c1:	50                   	push   eax
c000d6c2:	e8 bd 29 00 00       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	88 07                	mov    BYTE PTR [edi],al
c000d6cc:	eb c9                	jmp    c000d697 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d6ce:	45                   	inc    ebp
c000d6cf:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d6d7:	eb 8e                	jmp    c000d667 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d6d9 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d6d9:	56                   	push   esi
c000d6da:	53                   	push   ebx
c000d6db:	83 ec 0c             	sub    esp,0xc
c000d6de:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d6e6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6eb:	50                   	push   eax
c000d6ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6f1:	50                   	push   eax
c000d6f2:	e8 8d 29 00 00       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c000d6f7:	5a                   	pop    edx
c000d6f8:	0f b6 c0             	movzx  eax,al
c000d6fb:	59                   	pop    ecx
c000d6fc:	50                   	push   eax
c000d6fd:	89 f0                	mov    eax,esi
c000d6ff:	0f be f0             	movsx  esi,al
c000d702:	56                   	push   esi
c000d703:	e8 22 2a 00 00       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c000d708:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d70c:	ba 19 00 00 00       	mov    edx,0x19
c000d711:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d717:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d71a:	8d 14 92             	lea    edx,[edx+edx*4]
c000d71d:	c1 e1 04             	shl    ecx,0x4
c000d720:	c1 e2 04             	shl    edx,0x4
c000d723:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d727:	01 ca                	add    edx,ecx
c000d729:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d731:	83 c4 14             	add    esp,0x14
c000d734:	5b                   	pop    ebx
c000d735:	5e                   	pop    esi
c000d736:	c3                   	ret    

c000d737 <setupTextMode()>:
c000d737:	c7 05 58 be 03 c0 17 d6 00 c0 	mov    DWORD PTR ds:0xc003be58,0xc000d617
c000d741:	c7 05 44 be 03 c0 f3 d4 00 c0 	mov    DWORD PTR ds:0xc003be44,0xc000d4f3
c000d74b:	c7 05 40 be 03 c0 38 d5 00 c0 	mov    DWORD PTR ds:0xc003be40,0xc000d538
c000d755:	c7 05 4c be 03 c0 53 d6 00 c0 	mov    DWORD PTR ds:0xc003be4c,0xc000d653
c000d75f:	c7 05 54 be 03 c0 7a d5 00 c0 	mov    DWORD PTR ds:0xc003be54,0xc000d57a
c000d769:	c7 05 48 be 03 c0 ce d5 00 c0 	mov    DWORD PTR ds:0xc003be48,0xc000d5ce
c000d773:	c7 05 50 be 03 c0 cf d5 00 c0 	mov    DWORD PTR ds:0xc003be50,0xc000d5cf
c000d77d:	c7 05 5c be 03 c0 d9 d6 00 c0 	mov    DWORD PTR ds:0xc003be5c,0xc000d6d9
c000d787:	c3                   	ret    

c000d788 <kernel_main>:
c000d788:	57                   	push   edi
c000d789:	bf f9 03 00 00       	mov    edi,0x3f9
c000d78e:	56                   	push   esi
c000d78f:	31 f6                	xor    esi,esi
c000d791:	53                   	push   ebx
c000d792:	83 ec 10             	sub    esp,0x10
c000d795:	e8 44 27 00 00       	call   c000fede <installVgaTextImplementation()>
c000d79a:	e8 98 ff ff ff       	call   c000d737 <setupTextMode()>
c000d79f:	89 f0                	mov    eax,esi
c000d7a1:	89 fa                	mov    edx,edi
c000d7a3:	ee                   	out    dx,al
c000d7a4:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d7a9:	b0 80                	mov    al,0x80
c000d7ab:	89 da                	mov    edx,ebx
c000d7ad:	ee                   	out    dx,al
c000d7ae:	b1 03                	mov    cl,0x3
c000d7b0:	ba f8 03 00 00       	mov    edx,0x3f8
c000d7b5:	88 c8                	mov    al,cl
c000d7b7:	ee                   	out    dx,al
c000d7b8:	89 f0                	mov    eax,esi
c000d7ba:	89 fa                	mov    edx,edi
c000d7bc:	ee                   	out    dx,al
c000d7bd:	88 c8                	mov    al,cl
c000d7bf:	89 da                	mov    edx,ebx
c000d7c1:	ee                   	out    dx,al
c000d7c2:	b0 c7                	mov    al,0xc7
c000d7c4:	ba fa 03 00 00       	mov    edx,0x3fa
c000d7c9:	ee                   	out    dx,al
c000d7ca:	b0 0b                	mov    al,0xb
c000d7cc:	ba fc 03 00 00       	mov    edx,0x3fc
c000d7d1:	ee                   	out    dx,al
c000d7d2:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d7d7:	83 ec 0c             	sub    esp,0xc
c000d7da:	05 ff 0f 00 00       	add    eax,0xfff
c000d7df:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d7e4:	50                   	push   eax
c000d7e5:	e8 4d 03 00 00       	call   c000db37 <Phys::physicalMemorySetup(unsigned int)>
c000d7ea:	e8 df 3b 00 00       	call   c00113ce <Virt::virtualMemorySetup()>
c000d7ef:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d7fe:	75 0e                	jne    c000d80e <kernel_main+0x86>
c000d800:	89 d8                	mov    eax,ebx
c000d802:	25 48 03 00 00       	and    eax,0x348
c000d807:	3d 00 03 00 00       	cmp    eax,0x300
c000d80c:	74 10                	je     c000d81e <kernel_main+0x96>
c000d80e:	83 ec 0c             	sub    esp,0xc
c000d811:	68 f3 8d 03 c0       	push   0xc0038df3
c000d816:	e8 a1 f7 ff ff       	call   c000cfbc <panic(char const*)>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	83 ec 0c             	sub    esp,0xc
c000d821:	89 1d 74 bb 03 c0    	mov    DWORD PTR ds:0xc003bb74,ebx
c000d827:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d82b:	53                   	push   ebx
c000d82c:	e8 47 3d 00 00       	call   c0011578 <VAS::VAS()>
c000d831:	89 1d 7c be 03 c0    	mov    DWORD PTR ds:0xc003be7c,ebx
c000d837:	e8 e4 27 ff ff       	call   c0000020 <callGlobalConstructors>
c000d83c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d843:	e8 06 4c 00 00       	call   c001244e <operator new(unsigned long)>
c000d848:	89 04 24             	mov    DWORD PTR [esp],eax
c000d84b:	89 c6                	mov    esi,eax
c000d84d:	e8 74 d9 ff ff       	call   c000b1c6 <Computer::Computer()>
c000d852:	6a 00                	push   0x0
c000d854:	89 35 c8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9c8,esi
c000d85a:	6a 00                	push   0x0
c000d85c:	6a 00                	push   0x0
c000d85e:	56                   	push   esi
c000d85f:	e8 26 de ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000d864:	83 c4 14             	add    esp,0x14
c000d867:	53                   	push   ebx
c000d868:	e8 1b 3f 00 00       	call   c0011788 <VAS::~VAS()>
c000d86d:	c7 04 24 90 8e 03 c0 	mov    DWORD PTR [esp],0xc0038e90
c000d874:	e8 43 f7 ff ff       	call   c000cfbc <panic(char const*)>
c000d879:	83 c4 20             	add    esp,0x20
c000d87c:	5b                   	pop    ebx
c000d87d:	5e                   	pop    esi
c000d87e:	5f                   	pop    edi
c000d87f:	c3                   	ret    

c000d880 <Phys::allocateDMA(unsigned long)>:
c000d880:	55                   	push   ebp
c000d881:	31 d2                	xor    edx,edx
c000d883:	57                   	push   edi
c000d884:	31 ed                	xor    ebp,ebp
c000d886:	56                   	push   esi
c000d887:	31 c9                	xor    ecx,ecx
c000d889:	53                   	push   ebx
c000d88a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d88e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d894:	31 c0                	xor    eax,eax
c000d896:	c1 ee 0c             	shr    esi,0xc
c000d899:	eb 17                	jmp    c000d8b2 <Phys::allocateDMA(unsigned long)+0x32>
c000d89b:	85 c9                	test   ecx,ecx
c000d89d:	75 04                	jne    c000d8a3 <Phys::allocateDMA(unsigned long)+0x23>
c000d89f:	89 d5                	mov    ebp,edx
c000d8a1:	89 d0                	mov    eax,edx
c000d8a3:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d8a6:	39 de                	cmp    esi,ebx
c000d8a8:	74 20                	je     c000d8ca <Phys::allocateDMA(unsigned long)+0x4a>
c000d8aa:	42                   	inc    edx
c000d8ab:	89 d9                	mov    ecx,ebx
c000d8ad:	83 fa 2f             	cmp    edx,0x2f
c000d8b0:	7f 11                	jg     c000d8c3 <Phys::allocateDMA(unsigned long)+0x43>
c000d8b2:	80 ba a0 bb 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4460],0x0
c000d8b9:	74 e0                	je     c000d89b <Phys::allocateDMA(unsigned long)+0x1b>
c000d8bb:	31 c9                	xor    ecx,ecx
c000d8bd:	42                   	inc    edx
c000d8be:	83 fa 2f             	cmp    edx,0x2f
c000d8c1:	7e ef                	jle    c000d8b2 <Phys::allocateDMA(unsigned long)+0x32>
c000d8c3:	5b                   	pop    ebx
c000d8c4:	31 c0                	xor    eax,eax
c000d8c6:	5e                   	pop    esi
c000d8c7:	5f                   	pop    edi
c000d8c8:	5d                   	pop    ebp
c000d8c9:	c3                   	ret    
c000d8ca:	8d 14 30             	lea    edx,[eax+esi*1]
c000d8cd:	89 d7                	mov    edi,edx
c000d8cf:	4f                   	dec    edi
c000d8d0:	79 03                	jns    c000d8d5 <Phys::allocateDMA(unsigned long)+0x55>
c000d8d2:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d8d5:	c1 ff 04             	sar    edi,0x4
c000d8d8:	89 c2                	mov    edx,eax
c000d8da:	c1 fa 04             	sar    edx,0x4
c000d8dd:	39 fa                	cmp    edx,edi
c000d8df:	75 2f                	jne    c000d910 <Phys::allocateDMA(unsigned long)+0x90>
c000d8e1:	85 db                	test   ebx,ebx
c000d8e3:	74 1a                	je     c000d8ff <Phys::allocateDMA(unsigned long)+0x7f>
c000d8e5:	be a0 bb 03 c0       	mov    esi,0xc003bba0
c000d8ea:	8d 90 a0 bb 03 c0    	lea    edx,[eax-0x3ffc4460]
c000d8f0:	f7 d6                	not    esi
c000d8f2:	29 c6                	sub    esi,eax
c000d8f4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d8f7:	42                   	inc    edx
c000d8f8:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d8fb:	39 d9                	cmp    ecx,ebx
c000d8fd:	7f f5                	jg     c000d8f4 <Phys::allocateDMA(unsigned long)+0x74>
c000d8ff:	85 ff                	test   edi,edi
c000d901:	74 13                	je     c000d916 <Phys::allocateDMA(unsigned long)+0x96>
c000d903:	5b                   	pop    ebx
c000d904:	05 50 20 0c 00       	add    eax,0xc2050
c000d909:	5e                   	pop    esi
c000d90a:	c1 e0 0c             	shl    eax,0xc
c000d90d:	5f                   	pop    edi
c000d90e:	5d                   	pop    ebp
c000d90f:	c3                   	ret    
c000d910:	89 ea                	mov    edx,ebp
c000d912:	31 c9                	xor    ecx,ecx
c000d914:	eb a7                	jmp    c000d8bd <Phys::allocateDMA(unsigned long)+0x3d>
c000d916:	5b                   	pop    ebx
c000d917:	c1 e0 0c             	shl    eax,0xc
c000d91a:	5e                   	pop    esi
c000d91b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d920:	5f                   	pop    edi
c000d921:	5d                   	pop    ebp
c000d922:	c3                   	ret    

c000d923 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d927:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d92b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d931:	c1 e9 0c             	shr    ecx,0xc
c000d934:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d939:	76 25                	jbe    c000d960 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d93b:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d940:	c1 e8 0c             	shr    eax,0xc
c000d943:	8d 50 10             	lea    edx,[eax+0x10]
c000d946:	85 c9                	test   ecx,ecx
c000d948:	74 15                	je     c000d95f <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d94a:	8d 82 a0 bb 03 c0    	lea    eax,[edx-0x3ffc4460]
c000d950:	8d 94 11 a0 bb 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4460]
c000d957:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d95a:	40                   	inc    eax
c000d95b:	39 d0                	cmp    eax,edx
c000d95d:	75 f8                	jne    c000d957 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d95f:	c3                   	ret    
c000d960:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d966:	c1 ea 0c             	shr    edx,0xc
c000d969:	eb db                	jmp    c000d946 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d96b <Phys::setPageState(unsigned long, bool)>:
c000d96b:	56                   	push   esi
c000d96c:	ba 01 00 00 00       	mov    edx,0x1
c000d971:	53                   	push   ebx
c000d972:	8b 35 f0 ad 03 c0    	mov    esi,DWORD PTR ds:0xc003adf0
c000d978:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d97c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d980:	89 c8                	mov    eax,ecx
c000d982:	83 e1 07             	and    ecx,0x7
c000d985:	c1 e8 03             	shr    eax,0x3
c000d988:	d3 e3                	shl    ebx,cl
c000d98a:	01 c6                	add    esi,eax
c000d98c:	d3 e2                	shl    edx,cl
c000d98e:	f7 d2                	not    edx
c000d990:	20 16                	and    BYTE PTR [esi],dl
c000d992:	03 05 f0 ad 03 c0    	add    eax,DWORD PTR ds:0xc003adf0
c000d998:	08 18                	or     BYTE PTR [eax],bl
c000d99a:	5b                   	pop    ebx
c000d99b:	5e                   	pop    esi
c000d99c:	c3                   	ret    

c000d99d <Phys::getPageState(unsigned long)>:
c000d99d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d9a1:	8b 15 f0 ad 03 c0    	mov    edx,DWORD PTR ds:0xc003adf0
c000d9a7:	89 c8                	mov    eax,ecx
c000d9a9:	83 e1 07             	and    ecx,0x7
c000d9ac:	c1 e8 03             	shr    eax,0x3
c000d9af:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d9b3:	d3 f8                	sar    eax,cl
c000d9b5:	83 e0 01             	and    eax,0x1
c000d9b8:	c3                   	ret    

c000d9b9 <Phys::freePage(unsigned long)>:
c000d9b9:	53                   	push   ebx
c000d9ba:	83 ec 08             	sub    esp,0x8
c000d9bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d9c1:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d9c7:	76 57                	jbe    c000da20 <Phys::freePage(unsigned long)+0x67>
c000d9c9:	c1 eb 0c             	shr    ebx,0xc
c000d9cc:	53                   	push   ebx
c000d9cd:	e8 cb ff ff ff       	call   c000d99d <Phys::getPageState(unsigned long)>
c000d9d2:	5a                   	pop    edx
c000d9d3:	84 c0                	test   al,al
c000d9d5:	74 5b                	je     c000da32 <Phys::freePage(unsigned long)+0x79>
c000d9d7:	a1 8c bb 03 c0       	mov    eax,ds:0xc003bb8c
c000d9dc:	48                   	dec    eax
c000d9dd:	a3 8c bb 03 c0       	mov    ds:0xc003bb8c,eax
c000d9e2:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9e5:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9e8:	c1 e0 02             	shl    eax,0x2
c000d9eb:	99                   	cdq    
c000d9ec:	f7 3d 90 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb90
c000d9f2:	39 05 88 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb88,eax
c000d9f8:	75 13                	jne    c000da0d <Phys::freePage(unsigned long)+0x54>
c000d9fa:	83 ec 08             	sub    esp,0x8
c000d9fd:	6a 00                	push   0x0
c000d9ff:	53                   	push   ebx
c000da00:	e8 66 ff ff ff       	call   c000d96b <Phys::setPageState(unsigned long, bool)>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	83 c4 08             	add    esp,0x8
c000da0b:	5b                   	pop    ebx
c000da0c:	c3                   	ret    
c000da0d:	83 ec 0c             	sub    esp,0xc
c000da10:	a3 88 bb 03 c0       	mov    ds:0xc003bb88,eax
c000da15:	50                   	push   eax
c000da16:	e8 57 28 00 00       	call   c0010272 <VgaText::updateRAMUsageDisplay(int)>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	eb da                	jmp    c000d9fa <Phys::freePage(unsigned long)+0x41>
c000da20:	68 00 10 00 00       	push   0x1000
c000da25:	53                   	push   ebx
c000da26:	e8 f8 fe ff ff       	call   c000d923 <Phys::freeDMA(unsigned long, unsigned long)>
c000da2b:	59                   	pop    ecx
c000da2c:	5b                   	pop    ebx
c000da2d:	83 c4 08             	add    esp,0x8
c000da30:	5b                   	pop    ebx
c000da31:	c3                   	ret    
c000da32:	c7 44 24 10 ab 8e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038eab
c000da3a:	83 c4 08             	add    esp,0x8
c000da3d:	5b                   	pop    ebx
c000da3e:	e9 79 f5 ff ff       	jmp    c000cfbc <panic(char const*)>

c000da43 <Phys::allocatePage()>:
c000da43:	56                   	push   esi
c000da44:	53                   	push   ebx
c000da45:	51                   	push   ecx
c000da46:	8b 35 80 bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bb80
c000da4c:	89 f3                	mov    ebx,esi
c000da4e:	eb 0a                	jmp    c000da5a <Phys::allocatePage()+0x17>
c000da50:	89 1d 80 bb 03 c0    	mov    DWORD PTR ds:0xc003bb80,ebx
c000da56:	39 de                	cmp    esi,ebx
c000da58:	74 24                	je     c000da7e <Phys::allocatePage()+0x3b>
c000da5a:	53                   	push   ebx
c000da5b:	e8 3d ff ff ff       	call   c000d99d <Phys::getPageState(unsigned long)>
c000da60:	5a                   	pop    edx
c000da61:	84 c0                	test   al,al
c000da63:	74 4e                	je     c000dab3 <Phys::allocatePage()+0x70>
c000da65:	43                   	inc    ebx
c000da66:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000da6c:	75 e2                	jne    c000da50 <Phys::allocatePage()+0xd>
c000da6e:	31 db                	xor    ebx,ebx
c000da70:	c7 05 80 bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bb80,0x0
c000da7a:	39 de                	cmp    esi,ebx
c000da7c:	75 dc                	jne    c000da5a <Phys::allocatePage()+0x17>
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	68 00 10 00 00       	push   0x1000
c000da86:	e8 f5 fd ff ff       	call   c000d880 <Phys::allocateDMA(unsigned long)>
c000da8b:	83 c4 10             	add    esp,0x10
c000da8e:	85 c0                	test   eax,eax
c000da90:	75 56                	jne    c000dae8 <Phys::allocatePage()+0xa5>
c000da92:	83 ec 0c             	sub    esp,0xc
c000da95:	68 c1 8e 03 c0       	push   0xc0038ec1
c000da9a:	e8 1d f5 ff ff       	call   c000cfbc <panic(char const*)>
c000da9f:	83 c4 10             	add    esp,0x10
c000daa2:	8b 1d 80 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb80
c000daa8:	53                   	push   ebx
c000daa9:	e8 ef fe ff ff       	call   c000d99d <Phys::getPageState(unsigned long)>
c000daae:	5a                   	pop    edx
c000daaf:	84 c0                	test   al,al
c000dab1:	75 b2                	jne    c000da65 <Phys::allocatePage()+0x22>
c000dab3:	6a 01                	push   0x1
c000dab5:	53                   	push   ebx
c000dab6:	e8 b0 fe ff ff       	call   c000d96b <Phys::setPageState(unsigned long, bool)>
c000dabb:	a1 8c bb 03 c0       	mov    eax,ds:0xc003bb8c
c000dac0:	59                   	pop    ecx
c000dac1:	40                   	inc    eax
c000dac2:	5b                   	pop    ebx
c000dac3:	a3 8c bb 03 c0       	mov    ds:0xc003bb8c,eax
c000dac8:	8d 04 80             	lea    eax,[eax+eax*4]
c000dacb:	8d 04 80             	lea    eax,[eax+eax*4]
c000dace:	c1 e0 02             	shl    eax,0x2
c000dad1:	99                   	cdq    
c000dad2:	f7 3d 90 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb90
c000dad8:	39 05 88 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb88,eax
c000dade:	75 0c                	jne    c000daec <Phys::allocatePage()+0xa9>
c000dae0:	a1 80 bb 03 c0       	mov    eax,ds:0xc003bb80
c000dae5:	c1 e0 0c             	shl    eax,0xc
c000dae8:	5a                   	pop    edx
c000dae9:	5b                   	pop    ebx
c000daea:	5e                   	pop    esi
c000daeb:	c3                   	ret    
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	a3 88 bb 03 c0       	mov    ds:0xc003bb88,eax
c000daf4:	50                   	push   eax
c000daf5:	e8 78 27 00 00       	call   c0010272 <VgaText::updateRAMUsageDisplay(int)>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	eb e1                	jmp    c000dae0 <Phys::allocatePage()+0x9d>

c000daff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000daff:	56                   	push   esi
c000db00:	53                   	push   ebx
c000db01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db05:	39 1d 84 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb84,ebx
c000db0b:	73 06                	jae    c000db13 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000db0d:	89 1d 84 bb 03 c0    	mov    DWORD PTR ds:0xc003bb84,ebx
c000db13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db17:	c1 eb 0c             	shr    ebx,0xc
c000db1a:	c1 e8 0c             	shr    eax,0xc
c000db1d:	39 d8                	cmp    eax,ebx
c000db1f:	73 13                	jae    c000db34 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000db21:	6a 00                	push   0x0
c000db23:	8d 70 01             	lea    esi,[eax+0x1]
c000db26:	50                   	push   eax
c000db27:	e8 3f fe ff ff       	call   c000d96b <Phys::setPageState(unsigned long, bool)>
c000db2c:	5a                   	pop    edx
c000db2d:	89 f0                	mov    eax,esi
c000db2f:	59                   	pop    ecx
c000db30:	39 f3                	cmp    ebx,esi
c000db32:	75 ed                	jne    c000db21 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000db34:	5b                   	pop    ebx
c000db35:	5e                   	pop    esi
c000db36:	c3                   	ret    

c000db37 <Phys::physicalMemorySetup(unsigned int)>:
c000db37:	55                   	push   ebp
c000db38:	57                   	push   edi
c000db39:	56                   	push   esi
c000db3a:	53                   	push   ebx
c000db3b:	31 db                	xor    ebx,ebx
c000db3d:	83 ec 30             	sub    esp,0x30
c000db40:	6a 30                	push   0x30
c000db42:	6a 00                	push   0x0
c000db44:	68 a0 bb 03 c0       	push   0xc003bba0
c000db49:	e8 8a 2b ff ff       	call   c00006d8 <memset>
c000db4e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db52:	25 00 f0 ff ff       	and    eax,0xfffff000
c000db57:	05 00 10 00 00       	add    eax,0x1000
c000db5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db60:	83 c4 10             	add    esp,0x10
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	6a 01                	push   0x1
c000db68:	53                   	push   ebx
c000db69:	43                   	inc    ebx
c000db6a:	e8 fc fd ff ff       	call   c000d96b <Phys::setPageState(unsigned long, bool)>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000db78:	75 e9                	jne    c000db63 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000db7a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000db81:	66 85 c0             	test   ax,ax
c000db84:	0f 84 28 01 00 00    	je     c000dcb2 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000db8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8e:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000db94:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000db99:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000db9f:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000dba5:	89 f1                	mov    ecx,esi
c000dba7:	89 fb                	mov    ebx,edi
c000dba9:	01 c1                	add    ecx,eax
c000dbab:	89 d5                	mov    ebp,edx
c000dbad:	11 d3                	adc    ebx,edx
c000dbaf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dbb2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dbb6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbba:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000dbc0:	09 dd                	or     ebp,ebx
c000dbc2:	0f 85 fa 00 00 00    	jne    c000dcc2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbc8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbd4:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000dbdc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbe0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dbe8:	eb 45                	jmp    c000dc2f <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dbea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dbee:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dbf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbf7:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dbfb:	0f 84 c1 00 00 00    	je     c000dcc2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc01:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc05:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc08:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc0b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dc0e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dc11:	89 c1                	mov    ecx,eax
c000dc13:	89 d3                	mov    ebx,edx
c000dc15:	01 f1                	add    ecx,esi
c000dc17:	11 fb                	adc    ebx,edi
c000dc19:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc1c:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc20:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dc23:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc27:	09 d3                	or     ebx,edx
c000dc29:	0f 85 93 00 00 00    	jne    c000dcc2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc2f:	49                   	dec    ecx
c000dc30:	75 b8                	jne    c000dbea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc32:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dc35:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc39:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc3d:	39 e9                	cmp    ecx,ebp
c000dc3f:	89 d9                	mov    ecx,ebx
c000dc41:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc45:	72 a3                	jb     c000dbea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc47:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dc4c:	39 f1                	cmp    ecx,esi
c000dc4e:	b9 00 00 00 00       	mov    ecx,0x0
c000dc53:	19 f9                	sbb    ecx,edi
c000dc55:	73 93                	jae    c000dbea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc57:	39 e8                	cmp    eax,ebp
c000dc59:	89 d1                	mov    ecx,edx
c000dc5b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc5f:	73 13                	jae    c000dc74 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dc61:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc64:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc68:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dc6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc70:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dc74:	83 ec 08             	sub    esp,0x8
c000dc77:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dc7b:	50                   	push   eax
c000dc7c:	e8 7e fe ff ff       	call   c000daff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dc81:	83 c4 0c             	add    esp,0xc
c000dc84:	89 fa                	mov    edx,edi
c000dc86:	89 f0                	mov    eax,esi
c000dc88:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dc8c:	03 05 90 bb 03 c0    	add    eax,DWORD PTR ds:0xc003bb90
c000dc92:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dc99:	a3 90 bb 03 c0       	mov    ds:0xc003bb90,eax
c000dc9e:	52                   	push   edx
c000dc9f:	50                   	push   eax
c000dca0:	68 dd 8e 03 c0       	push   0xc0038edd
c000dca5:	e8 f4 f1 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000dcaa:	83 c4 10             	add    esp,0x10
c000dcad:	e9 38 ff ff ff       	jmp    c000dbea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dcb2:	83 ec 0c             	sub    esp,0xc
c000dcb5:	68 cf 8e 03 c0       	push   0xc0038ecf
c000dcba:	e8 fd f2 ff ff       	call   c000cfbc <panic(char const*)>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	bb 40 01 00 00       	mov    ebx,0x140
c000dcc7:	83 ec 08             	sub    esp,0x8
c000dcca:	6a 00                	push   0x0
c000dccc:	53                   	push   ebx
c000dccd:	43                   	inc    ebx
c000dcce:	e8 98 fc ff ff       	call   c000d96b <Phys::setPageState(unsigned long, bool)>
c000dcd3:	ff 05 90 bb 03 c0    	inc    DWORD PTR ds:0xc003bb90
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dce2:	75 e3                	jne    c000dcc7 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dce4:	83 c4 2c             	add    esp,0x2c
c000dce7:	5b                   	pop    ebx
c000dce8:	5e                   	pop    esi
c000dce9:	5f                   	pop    edi
c000dcea:	5d                   	pop    ebp
c000dceb:	c3                   	ret    

c000dcec <Pipe::isAtty()>:
c000dcec:	31 c0                	xor    eax,eax
c000dcee:	c3                   	ret    
c000dcef:	90                   	nop

c000dcf0 <Pipe::~Pipe()>:
c000dcf0:	83 ec 0c             	sub    esp,0xc
c000dcf3:	ba 3c 8f 03 c0       	mov    edx,0xc0038f3c
c000dcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcfc:	89 10                	mov    DWORD PTR [eax],edx
c000dcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd02:	83 ec 0c             	sub    esp,0xc
c000dd05:	50                   	push   eax
c000dd06:	e8 d3 33 00 00       	call   c00110de <UnixFile::~UnixFile()>
c000dd0b:	83 c4 10             	add    esp,0x10
c000dd0e:	90                   	nop
c000dd0f:	83 c4 0c             	add    esp,0xc
c000dd12:	c3                   	ret    
c000dd13:	90                   	nop

c000dd14 <Pipe::~Pipe()>:
c000dd14:	83 ec 0c             	sub    esp,0xc
c000dd17:	83 ec 0c             	sub    esp,0xc
c000dd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd1e:	e8 cd ff ff ff       	call   c000dcf0 <Pipe::~Pipe()>
c000dd23:	83 c4 10             	add    esp,0x10
c000dd26:	83 ec 08             	sub    esp,0x8
c000dd29:	6a 20                	push   0x20
c000dd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2f:	e8 29 47 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000dd34:	83 c4 10             	add    esp,0x10
c000dd37:	83 c4 0c             	add    esp,0xc
c000dd3a:	c3                   	ret    
c000dd3b:	90                   	nop

c000dd3c <Pipe::read(unsigned long long, void*, int*)>:
c000dd3c:	55                   	push   ebp
c000dd3d:	57                   	push   edi
c000dd3e:	56                   	push   esi
c000dd3f:	53                   	push   ebx
c000dd40:	83 ec 1c             	sub    esp,0x1c
c000dd43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd47:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd4f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dd52:	89 c8                	mov    eax,ecx
c000dd54:	99                   	cdq    
c000dd55:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dd59:	74 19                	je     c000dd74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd5b:	39 f9                	cmp    ecx,edi
c000dd5d:	89 d1                	mov    ecx,edx
c000dd5f:	19 f1                	sbb    ecx,esi
c000dd61:	73 11                	jae    c000dd74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd63:	e8 d8 05 00 00       	call   c000e340 <lockScheduler()>
c000dd68:	e8 07 09 00 00       	call   c000e674 <schedule()>
c000dd6d:	e8 d0 05 00 00       	call   c000e342 <unlockScheduler()>
c000dd72:	eb db                	jmp    c000dd4f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000dd74:	39 f8                	cmp    eax,edi
c000dd76:	89 d1                	mov    ecx,edx
c000dd78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dd7c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dd80:	19 f1                	sbb    ecx,esi
c000dd82:	73 08                	jae    c000dd8c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dd84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dd8f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dd92:	29 c6                	sub    esi,eax
c000dd94:	89 f1                	mov    ecx,esi
c000dd96:	c1 f9 1f             	sar    ecx,0x1f
c000dd99:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dd9d:	89 ca                	mov    edx,ecx
c000dd9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dda3:	19 d1                	sbb    ecx,edx
c000dda5:	73 04                	jae    c000ddab <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000dda7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ddab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ddaf:	89 fd                	mov    ebp,edi
c000ddb1:	29 f5                	sub    ebp,esi
c000ddb3:	85 f6                	test   esi,esi
c000ddb5:	74 12                	je     c000ddc9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ddb7:	52                   	push   edx
c000ddb8:	56                   	push   esi
c000ddb9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ddbc:	50                   	push   eax
c000ddbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ddc1:	e8 9b 28 ff ff       	call   c0000661 <memcpy>
c000ddc6:	83 c4 10             	add    esp,0x10
c000ddc9:	85 ed                	test   ebp,ebp
c000ddcb:	74 12                	je     c000dddf <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ddcd:	50                   	push   eax
c000ddce:	55                   	push   ebp
c000ddcf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ddd2:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ddd6:	56                   	push   esi
c000ddd7:	e8 85 28 ff ff       	call   c0000661 <memcpy>
c000dddc:	83 c4 10             	add    esp,0x10
c000dddf:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000dde2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dde5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dde8:	99                   	cdq    
c000dde9:	89 f7                	mov    edi,esi
c000ddeb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ddef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ddf3:	c1 ff 1f             	sar    edi,0x1f
c000ddf6:	57                   	push   edi
c000ddf7:	56                   	push   esi
c000ddf8:	52                   	push   edx
c000ddf9:	50                   	push   eax
c000ddfa:	e8 bd 09 01 00       	call   c001e7bc <__umoddi3>
c000ddff:	83 c4 10             	add    esp,0x10
c000de02:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000de05:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de0a:	75 10                	jne    c000de1c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000de0c:	83 ec 0c             	sub    esp,0xc
c000de0f:	68 f9 8e 03 c0       	push   0xc0038ef9
c000de14:	e8 a3 f1 ff ff       	call   c000cfbc <panic(char const*)>
c000de19:	83 c4 10             	add    esp,0x10
c000de1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de24:	89 10                	mov    DWORD PTR [eax],edx
c000de26:	83 c4 1c             	add    esp,0x1c
c000de29:	31 c0                	xor    eax,eax
c000de2b:	5b                   	pop    ebx
c000de2c:	5e                   	pop    esi
c000de2d:	5f                   	pop    edi
c000de2e:	5d                   	pop    ebp
c000de2f:	c3                   	ret    

c000de30 <Pipe::write(unsigned long long, void*, int*)>:
c000de30:	55                   	push   ebp
c000de31:	57                   	push   edi
c000de32:	56                   	push   esi
c000de33:	53                   	push   ebx
c000de34:	83 ec 1c             	sub    esp,0x1c
c000de37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de3b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000de3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de43:	89 04 24             	mov    DWORD PTR [esp],eax
c000de46:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000de49:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000de4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de50:	89 de                	mov    esi,ebx
c000de52:	89 df                	mov    edi,ebx
c000de54:	c1 ff 1f             	sar    edi,0x1f
c000de57:	01 c6                	add    esi,eax
c000de59:	89 c8                	mov    eax,ecx
c000de5b:	11 d7                	adc    edi,edx
c000de5d:	99                   	cdq    
c000de5e:	39 f1                	cmp    ecx,esi
c000de60:	89 d0                	mov    eax,edx
c000de62:	19 f8                	sbb    eax,edi
c000de64:	b8 01 00 00 00       	mov    eax,0x1
c000de69:	0f 82 80 00 00 00    	jb     c000deef <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000de6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000de72:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de75:	01 d8                	add    eax,ebx
c000de77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000de7b:	99                   	cdq    
c000de7c:	f7 f9                	idiv   ecx
c000de7e:	29 d1                	sub    ecx,edx
c000de80:	89 d7                	mov    edi,edx
c000de82:	89 c8                	mov    eax,ecx
c000de84:	99                   	cdq    
c000de85:	39 ce                	cmp    esi,ecx
c000de87:	19 d3                	sbb    ebx,edx
c000de89:	bb 00 00 00 00       	mov    ebx,0x0
c000de8e:	72 04                	jb     c000de94 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000de90:	89 f3                	mov    ebx,esi
c000de92:	29 cb                	sub    ebx,ecx
c000de94:	89 f1                	mov    ecx,esi
c000de96:	29 d9                	sub    ecx,ebx
c000de98:	74 1a                	je     c000deb4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000de9a:	52                   	push   edx
c000de9b:	51                   	push   ecx
c000de9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dea0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dea4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dea7:	57                   	push   edi
c000dea8:	e8 b4 27 ff ff       	call   c0000661 <memcpy>
c000dead:	83 c4 10             	add    esp,0x10
c000deb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deb4:	85 db                	test   ebx,ebx
c000deb6:	74 12                	je     c000deca <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000deb8:	50                   	push   eax
c000deb9:	53                   	push   ebx
c000deba:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000debe:	51                   	push   ecx
c000debf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dec2:	e8 9a 27 ff ff       	call   c0000661 <memcpy>
c000dec7:	83 c4 10             	add    esp,0x10
c000deca:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000decd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ded2:	75 10                	jne    c000dee4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	68 15 8f 03 c0       	push   0xc0038f15
c000dedc:	e8 db f0 ff ff       	call   c000cfbc <panic(char const*)>
c000dee1:	83 c4 10             	add    esp,0x10
c000dee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dee8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000deeb:	89 38                	mov    DWORD PTR [eax],edi
c000deed:	31 c0                	xor    eax,eax
c000deef:	83 c4 1c             	add    esp,0x1c
c000def2:	5b                   	pop    ebx
c000def3:	5e                   	pop    esi
c000def4:	5f                   	pop    edi
c000def5:	5d                   	pop    ebp
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Pipe::Pipe(int)>:
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deff:	83 ec 08             	sub    esp,0x8
c000df02:	6a 00                	push   0x0
c000df04:	50                   	push   eax
c000df05:	e8 70 31 00 00       	call   c001107a <UnixFile::UnixFile(int)>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	ba 3c 8f 03 c0       	mov    edx,0xc0038f3c
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	89 10                	mov    DWORD PTR [eax],edx
c000df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000df23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df27:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000df2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df32:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000df39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	50                   	push   eax
c000df41:	e8 53 f5 ff ff       	call   c000d499 <malloc>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	89 c2                	mov    edx,eax
c000df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000df5a:	90                   	nop
c000df5b:	83 c4 0c             	add    esp,0xc
c000df5e:	c3                   	ret    
c000df5f:	90                   	nop

c000df60 <changeTSS>:
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	e8 ec 91 00 00       	call   c0017154 <thisCPU()>
c000df68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000df6e:	83 ec 08             	sub    esp,0x8
c000df71:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000df74:	05 7c 11 00 00       	add    eax,0x117c
c000df79:	c1 e1 15             	shl    ecx,0x15
c000df7c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000df81:	29 ca                	sub    edx,ecx
c000df83:	52                   	push   edx
c000df84:	50                   	push   eax
c000df85:	e8 28 2e 00 00       	call   c0010db2 <TSS::setESP(unsigned long)>
c000df8a:	83 c4 1c             	add    esp,0x1c
c000df8d:	c3                   	ret    

c000df8e <Process::addArgs(char**)>:
c000df8e:	57                   	push   edi
c000df8f:	56                   	push   esi
c000df90:	53                   	push   ebx
c000df91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df99:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dfa3:	85 ff                	test   edi,edi
c000dfa5:	74 3d                	je     c000dfe4 <Process::addArgs(char**)+0x56>
c000dfa7:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfa9:	85 c0                	test   eax,eax
c000dfab:	74 37                	je     c000dfe4 <Process::addArgs(char**)+0x56>
c000dfad:	31 db                	xor    ebx,ebx
c000dfaf:	83 ec 0c             	sub    esp,0xc
c000dfb2:	50                   	push   eax
c000dfb3:	e8 49 27 ff ff       	call   c0000701 <strlen>
c000dfb8:	40                   	inc    eax
c000dfb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfbc:	e8 d8 f4 ff ff       	call   c000d499 <malloc>
c000dfc1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dfc8:	5a                   	pop    edx
c000dfc9:	59                   	pop    ecx
c000dfca:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dfcd:	43                   	inc    ebx
c000dfce:	50                   	push   eax
c000dfcf:	e8 20 28 ff ff       	call   c00007f4 <strcpy>
c000dfd4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dfe0:	85 c0                	test   eax,eax
c000dfe2:	75 cb                	jne    c000dfaf <Process::addArgs(char**)+0x21>
c000dfe4:	5b                   	pop    ebx
c000dfe5:	5e                   	pop    esi
c000dfe6:	5f                   	pop    edi
c000dfe7:	c3                   	ret    

c000dfe8 <Process::Process(char const*, Process*, char**)>:
c000dfe8:	56                   	push   esi
c000dfe9:	53                   	push   ebx
c000dfea:	83 ec 14             	sub    esp,0x14
c000dfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff1:	05 0c 02 00 00       	add    eax,0x20c
c000dff6:	bb 07 00 00 00       	mov    ebx,0x7
c000dffb:	89 c6                	mov    esi,eax
c000dffd:	85 db                	test   ebx,ebx
c000dfff:	78 12                	js     c000e013 <Process::Process(char const*, Process*, char**)+0x2b>
c000e001:	83 ec 0c             	sub    esp,0xc
c000e004:	56                   	push   esi
c000e005:	e8 de 09 01 00       	call   c001e9e8 <ThreadControlBlock::ThreadControlBlock()>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	83 c6 63             	add    esi,0x63
c000e010:	4b                   	dec    ebx
c000e011:	eb ea                	jmp    c000dffd <Process::Process(char const*, Process*, char**)+0x15>
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e022:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e02b:	a1 f4 ad 03 c0       	mov    eax,ds:0xc003adf4
c000e030:	8d 50 01             	lea    edx,[eax+0x1]
c000e033:	89 15 f4 ad 03 c0    	mov    DWORD PTR ds:0xc003adf4,edx
c000e039:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e03d:	89 02                	mov    DWORD PTR [edx],eax
c000e03f:	83 ec 0c             	sub    esp,0xc
c000e042:	6a 10                	push   0x10
c000e044:	e8 05 44 00 00       	call   c001244e <operator new(unsigned long)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	89 c3                	mov    ebx,eax
c000e04e:	83 ec 08             	sub    esp,0x8
c000e051:	6a 00                	push   0x0
c000e053:	53                   	push   ebx
c000e054:	e8 89 40 00 00       	call   c00120e2 <VAS::VAS(bool)>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e060:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e06a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e078:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e07c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e086:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e08c:	85 c0                	test   eax,eax
c000e08e:	74 42                	je     c000e0d2 <Process::Process(char const*, Process*, char**)+0xea>
c000e090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e094:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e09a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e0aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0be:	05 0c 01 00 00       	add    eax,0x10c
c000e0c3:	83 ec 08             	sub    esp,0x8
c000e0c6:	52                   	push   edx
c000e0c7:	50                   	push   eax
c000e0c8:	e8 27 27 ff ff       	call   c00007f4 <strcpy>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	eb 5c                	jmp    c000e12e <Process::Process(char const*, Process*, char**)+0x146>
c000e0d2:	83 ec 0c             	sub    esp,0xc
c000e0d5:	68 60 12 00 00       	push   0x1260
c000e0da:	e8 6f 43 00 00       	call   c001244e <operator new(unsigned long)>
c000e0df:	83 c4 10             	add    esp,0x10
c000e0e2:	89 c3                	mov    ebx,eax
c000e0e4:	83 ec 08             	sub    esp,0x8
c000e0e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0eb:	53                   	push   ebx
c000e0ec:	e8 bf 29 00 00       	call   c0010ab0 <VgaText::VgaText(char const*)>
c000e0f1:	83 c4 10             	add    esp,0x10
c000e0f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e0fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e102:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	50                   	push   eax
c000e10c:	e8 a0 1d 00 00       	call   c000feb1 <addToTerminalCycle(VgaText*)>
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e118:	05 0c 01 00 00       	add    eax,0x10c
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	68 50 8f 03 c0       	push   0xc0038f50
c000e125:	50                   	push   eax
c000e126:	e8 c9 26 ff ff       	call   c00007f4 <strcpy>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e132:	83 c0 0c             	add    eax,0xc
c000e135:	83 ec 08             	sub    esp,0x8
c000e138:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e13c:	50                   	push   eax
c000e13d:	e8 b2 26 ff ff       	call   c00007f4 <strcpy>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	83 ec 08             	sub    esp,0x8
c000e148:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e14c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e150:	e8 39 fe ff ff       	call   c000df8e <Process::addArgs(char**)>
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	83 ec 08             	sub    esp,0x8
c000e15b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e163:	e8 24 d9 ff ff       	call   c000ba8c <loadProgramIntoMemory(Process*, char const*)>
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e16f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e173:	83 f0 01             	xor    eax,0x1
c000e176:	88 c2                	mov    dl,al
c000e178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e182:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e187:	83 ec 08             	sub    esp,0x8
c000e18a:	50                   	push   eax
c000e18b:	68 a4 8f 03 c0       	push   0xc0038fa4
c000e190:	e8 09 ed ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000e195:	83 c4 10             	add    esp,0x10
c000e198:	90                   	nop
c000e199:	83 c4 14             	add    esp,0x14
c000e19c:	5b                   	pop    ebx
c000e19d:	5e                   	pop    esi
c000e19e:	c3                   	ret    
c000e19f:	90                   	nop

c000e1a0 <Process::Process(bool, char const*, Process*, char**)>:
c000e1a0:	56                   	push   esi
c000e1a1:	53                   	push   ebx
c000e1a2:	83 ec 14             	sub    esp,0x14
c000e1a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e1a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e1ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b1:	05 0c 02 00 00       	add    eax,0x20c
c000e1b6:	bb 07 00 00 00       	mov    ebx,0x7
c000e1bb:	89 c6                	mov    esi,eax
c000e1bd:	85 db                	test   ebx,ebx
c000e1bf:	78 12                	js     c000e1d3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e1c1:	83 ec 0c             	sub    esp,0xc
c000e1c4:	56                   	push   esi
c000e1c5:	e8 1e 08 01 00       	call   c001e9e8 <ThreadControlBlock::ThreadControlBlock()>
c000e1ca:	83 c4 10             	add    esp,0x10
c000e1cd:	83 c6 63             	add    esi,0x63
c000e1d0:	4b                   	dec    ebx
c000e1d1:	eb ea                	jmp    c000e1bd <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e1de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e1eb:	a1 f4 ad 03 c0       	mov    eax,ds:0xc003adf4
c000e1f0:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f3:	89 15 f4 ad 03 c0    	mov    DWORD PTR ds:0xc003adf4,edx
c000e1f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e1fd:	89 02                	mov    DWORD PTR [edx],eax
c000e1ff:	83 ec 0c             	sub    esp,0xc
c000e202:	6a 10                	push   0x10
c000e204:	e8 45 42 00 00       	call   c001244e <operator new(unsigned long)>
c000e209:	83 c4 10             	add    esp,0x10
c000e20c:	89 c3                	mov    ebx,eax
c000e20e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e213:	83 ec 08             	sub    esp,0x8
c000e216:	50                   	push   eax
c000e217:	53                   	push   ebx
c000e218:	e8 c5 3e 00 00       	call   c00120e2 <VAS::VAS(bool)>
c000e21d:	83 c4 10             	add    esp,0x10
c000e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e224:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e240:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e250:	85 c0                	test   eax,eax
c000e252:	74 42                	je     c000e296 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e258:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e25e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e268:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e272:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e278:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e282:	05 0c 01 00 00       	add    eax,0x10c
c000e287:	83 ec 08             	sub    esp,0x8
c000e28a:	52                   	push   edx
c000e28b:	50                   	push   eax
c000e28c:	e8 63 25 ff ff       	call   c00007f4 <strcpy>
c000e291:	83 c4 10             	add    esp,0x10
c000e294:	eb 5c                	jmp    c000e2f2 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e296:	83 ec 0c             	sub    esp,0xc
c000e299:	68 60 12 00 00       	push   0x1260
c000e29e:	e8 ab 41 00 00       	call   c001244e <operator new(unsigned long)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	89 c3                	mov    ebx,eax
c000e2a8:	83 ec 08             	sub    esp,0x8
c000e2ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2af:	53                   	push   ebx
c000e2b0:	e8 fb 27 00 00       	call   c0010ab0 <VgaText::VgaText(char const*)>
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	50                   	push   eax
c000e2d0:	e8 dc 1b 00 00       	call   c000feb1 <addToTerminalCycle(VgaText*)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2dc:	05 0c 01 00 00       	add    eax,0x10c
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 50 8f 03 c0       	push   0xc0038f50
c000e2e9:	50                   	push   eax
c000e2ea:	e8 05 25 ff ff       	call   c00007f4 <strcpy>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f6:	83 c0 0c             	add    eax,0xc
c000e2f9:	83 ec 08             	sub    esp,0x8
c000e2fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e300:	50                   	push   eax
c000e301:	e8 ee 24 ff ff       	call   c00007f4 <strcpy>
c000e306:	83 c4 10             	add    esp,0x10
c000e309:	83 ec 08             	sub    esp,0x8
c000e30c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e314:	e8 75 fc ff ff       	call   c000df8e <Process::addArgs(char**)>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	90                   	nop
c000e31d:	83 c4 14             	add    esp,0x14
c000e320:	5b                   	pop    ebx
c000e321:	5e                   	pop    esi
c000e322:	c3                   	ret    

c000e323 <disableIRQs()>:
c000e323:	fa                   	cli    
c000e324:	ff 05 f4 bb 03 c0    	inc    DWORD PTR ds:0xc003bbf4
c000e32a:	c3                   	ret    

c000e32b <getIRQNestingLevel()>:
c000e32b:	a1 f4 bb 03 c0       	mov    eax,ds:0xc003bbf4
c000e330:	c3                   	ret    

c000e331 <enableIRQs()>:
c000e331:	a1 f4 bb 03 c0       	mov    eax,ds:0xc003bbf4
c000e336:	48                   	dec    eax
c000e337:	a3 f4 bb 03 c0       	mov    ds:0xc003bbf4,eax
c000e33c:	75 01                	jne    c000e33f <enableIRQs()+0xe>
c000e33e:	fb                   	sti    
c000e33f:	c3                   	ret    

c000e340 <lockScheduler()>:
c000e340:	eb e1                	jmp    c000e323 <disableIRQs()>

c000e342 <unlockScheduler()>:
c000e342:	eb ed                	jmp    c000e331 <enableIRQs()>

c000e344 <userModeEntryPoint(void*)>:
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	e8 f6 ff ff ff       	call   c000e342 <unlockScheduler()>
c000e34c:	fb                   	sti    
c000e34d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e352:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e355:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e35b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35f:	83 c4 0c             	add    esp,0xc
c000e362:	e9 ac 1e ff ff       	jmp    c0000213 <goToUsermode>

c000e367 <lockStuff()>:
c000e367:	e8 b7 ff ff ff       	call   c000e323 <disableIRQs()>
c000e36c:	ff 05 f0 bb 03 c0    	inc    DWORD PTR ds:0xc003bbf0
c000e372:	c3                   	ret    

c000e373 <taskStartupFunction>:
c000e373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e378:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e37b:	c3                   	ret    

c000e37c <updateTimeUsed()>:
c000e37c:	57                   	push   edi
c000e37d:	56                   	push   esi
c000e37e:	53                   	push   ebx
c000e37f:	e8 d0 8d 00 00       	call   c0017154 <thisCPU()>
c000e384:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e38b:	74 49                	je     c000e3d6 <updateTimeUsed()+0x5a>
c000e38d:	0f 31                	rdtsc  
c000e38f:	89 c1                	mov    ecx,eax
c000e391:	a3 30 bc 03 c0       	mov    ds:0xc003bc30,eax
c000e396:	2b 0d 20 bc 03 c0    	sub    ecx,DWORD PTR ds:0xc003bc20
c000e39c:	89 d3                	mov    ebx,edx
c000e39e:	89 0d 28 bc 03 c0    	mov    DWORD PTR ds:0xc003bc28,ecx
c000e3a4:	1b 1d 24 bc 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bc24
c000e3aa:	a3 20 bc 03 c0       	mov    ds:0xc003bc20,eax
c000e3af:	89 1d 2c bc 03 c0    	mov    DWORD PTR ds:0xc003bc2c,ebx
c000e3b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3ba:	89 15 34 bc 03 c0    	mov    DWORD PTR ds:0xc003bc34,edx
c000e3c0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e3c3:	89 15 24 bc 03 c0    	mov    DWORD PTR ds:0xc003bc24,edx
c000e3c9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e3cc:	01 f1                	add    ecx,esi
c000e3ce:	11 fb                	adc    ebx,edi
c000e3d0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e3d3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e3d6:	5b                   	pop    ebx
c000e3d7:	5e                   	pop    esi
c000e3d8:	5f                   	pop    edi
c000e3d9:	c3                   	ret    

c000e3da <switchToThread(ThreadControlBlock*)>:
c000e3da:	53                   	push   ebx
c000e3db:	83 ec 08             	sub    esp,0x8
c000e3de:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e3e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3e7:	85 c0                	test   eax,eax
c000e3e9:	75 30                	jne    c000e41b <switchToThread(ThreadControlBlock*)+0x41>
c000e3eb:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e3ee:	3c ff                	cmp    al,0xff
c000e3f0:	74 25                	je     c000e417 <switchToThread(ThreadControlBlock*)+0x3d>
c000e3f2:	0f b6 d0             	movzx  edx,al
c000e3f5:	b8 84 03 00 00       	mov    eax,0x384
c000e3fa:	29 d0                	sub    eax,edx
c000e3fc:	c1 e0 10             	shl    eax,0x10
c000e3ff:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e402:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e405:	e8 72 ff ff ff       	call   c000e37c <updateTimeUsed()>
c000e40a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e40e:	83 c4 08             	add    esp,0x8
c000e411:	5b                   	pop    ebx
c000e412:	e9 35 1e ff ff       	jmp    c000024c <switchToThreadASM>
c000e417:	31 c0                	xor    eax,eax
c000e419:	eb e7                	jmp    c000e402 <switchToThread(ThreadControlBlock*)+0x28>
c000e41b:	c7 05 ec bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x1
c000e425:	83 c4 08             	add    esp,0x8
c000e428:	5b                   	pop    ebx
c000e429:	c3                   	ret    

c000e42a <Semaphore::Semaphore(int)>:
c000e42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e432:	89 10                	mov    DWORD PTR [eax],edx
c000e434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e438:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e43f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e443:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e44a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e44e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e455:	90                   	nop
c000e456:	c3                   	ret    
c000e457:	90                   	nop

c000e458 <Mutex::Mutex()>:
c000e458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e45c:	6a 01                	push   0x1
c000e45e:	50                   	push   eax
c000e45f:	e8 c6 ff ff ff       	call   c000e42a <Semaphore::Semaphore(int)>
c000e464:	83 c4 08             	add    esp,0x8
c000e467:	90                   	nop
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <Process::createThread(void (*)(void*), void*, int)>:
c000e46a:	55                   	push   ebp
c000e46b:	31 c9                	xor    ecx,ecx
c000e46d:	57                   	push   edi
c000e46e:	56                   	push   esi
c000e46f:	53                   	push   ebx
c000e470:	83 ec 1c             	sub    esp,0x1c
c000e473:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e477:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e47e:	89 f2                	mov    edx,esi
c000e480:	0f b7 c2             	movzx  eax,dx
c000e483:	83 e2 01             	and    edx,0x1
c000e486:	74 14                	je     c000e49c <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e488:	d1 f8                	sar    eax,1
c000e48a:	41                   	inc    ecx
c000e48b:	89 c2                	mov    edx,eax
c000e48d:	83 f9 10             	cmp    ecx,0x10
c000e490:	75 ee                	jne    c000e480 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e492:	83 c4 1c             	add    esp,0x1c
c000e495:	31 c0                	xor    eax,eax
c000e497:	5b                   	pop    ebx
c000e498:	5e                   	pop    esi
c000e499:	5f                   	pop    edi
c000e49a:	5d                   	pop    ebp
c000e49b:	c3                   	ret    
c000e49c:	83 ec 08             	sub    esp,0x8
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	d3 e0                	shl    eax,cl
c000e4a6:	09 c6                	or     esi,eax
c000e4a8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e4ae:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e4b5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e4b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4bb:	01 ce                	add    esi,ecx
c000e4bd:	89 f0                	mov    eax,esi
c000e4bf:	c1 e0 05             	shl    eax,0x5
c000e4c2:	01 c6                	add    esi,eax
c000e4c4:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e4c7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e4cd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e4d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e4d7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e4dd:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e4e3:	89 ca                	mov    edx,ecx
c000e4e5:	f7 da                	neg    edx
c000e4e7:	c1 e2 15             	shl    edx,0x15
c000e4ea:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e4f0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e4f6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e4fa:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e504:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e50a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e50e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e514:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e51e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e528:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e52f:	50                   	push   eax
c000e530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e534:	68 10 bc 03 c0       	push   0xc003bc10
c000e539:	e8 40 05 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e53e:	83 c4 10             	add    esp,0x10
c000e541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e545:	83 c4 1c             	add    esp,0x1c
c000e548:	5b                   	pop    ebx
c000e549:	5e                   	pop    esi
c000e54a:	5f                   	pop    edi
c000e54b:	5d                   	pop    ebp
c000e54c:	c3                   	ret    
c000e54d:	90                   	nop

c000e54e <Process::createUserThread()>:
c000e54e:	83 ec 0c             	sub    esp,0xc
c000e551:	68 80 00 00 00       	push   0x80
c000e556:	6a 00                	push   0x0
c000e558:	68 44 e3 00 c0       	push   0xc000e344
c000e55d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e561:	e8 04 ff ff ff       	call   c000e46a <Process::createThread(void (*)(void*), void*, int)>
c000e566:	83 c4 1c             	add    esp,0x1c
c000e569:	c3                   	ret    

c000e56a <setupMultitasking(void (*)())>:
c000e56a:	56                   	push   esi
c000e56b:	53                   	push   ebx
c000e56c:	53                   	push   ebx
c000e56d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e571:	eb 10                	jmp    c000e583 <setupMultitasking(void (*)())+0x19>
c000e573:	83 ec 0c             	sub    esp,0xc
c000e576:	68 10 bc 03 c0       	push   0xc003bc10
c000e57b:	e8 ee 05 01 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e580:	83 c4 10             	add    esp,0x10
c000e583:	83 ec 0c             	sub    esp,0xc
c000e586:	68 10 bc 03 c0       	push   0xc003bc10
c000e58b:	e8 c2 05 01 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e590:	83 c4 10             	add    esp,0x10
c000e593:	84 c0                	test   al,al
c000e595:	74 dc                	je     c000e573 <setupMultitasking(void (*)())+0x9>
c000e597:	83 ec 0c             	sub    esp,0xc
c000e59a:	68 3b 07 00 00       	push   0x73b
c000e59f:	e8 aa 3e 00 00       	call   c001244e <operator new(unsigned long)>
c000e5a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e5ab:	89 c3                	mov    ebx,eax
c000e5ad:	6a 00                	push   0x0
c000e5af:	68 54 8f 03 c0       	push   0xc0038f54
c000e5b4:	6a 01                	push   0x1
c000e5b6:	50                   	push   eax
c000e5b7:	e8 e4 fb ff ff       	call   c000e1a0 <Process::Process(bool, char const*, Process*, char**)>
c000e5bc:	83 c4 18             	add    esp,0x18
c000e5bf:	89 1d 1c bc 03 c0    	mov    DWORD PTR ds:0xc003bc1c,ebx
c000e5c5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5cb:	68 cc 8f 03 c0       	push   0xc0038fcc
c000e5d0:	e8 c9 e8 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000e5d5:	58                   	pop    eax
c000e5d6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5dc:	e8 44 20 00 00       	call   c0010625 <setActiveTerminal(VgaText*)>
c000e5e1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e5e9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e5ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5f2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e5fc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e602:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e608:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e612:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e61c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e626:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e62c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e632:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e63c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e642:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e64c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e652:	5a                   	pop    edx
c000e653:	59                   	pop    ecx
c000e654:	68 50 8f 03 c0       	push   0xc0038f50
c000e659:	50                   	push   eax
c000e65a:	e8 95 21 ff ff       	call   c00007f4 <strcpy>
c000e65f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e666:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e66a:	83 c4 14             	add    esp,0x14
c000e66d:	5b                   	pop    ebx
c000e66e:	5e                   	pop    esi
c000e66f:	e9 ca 1b ff ff       	jmp    c000023e <switchToThreadASMFirstTime>

c000e674 <schedule()>:
c000e674:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e679:	85 c0                	test   eax,eax
c000e67b:	74 0b                	je     c000e688 <schedule()+0x14>
c000e67d:	c7 05 ec bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x1
c000e687:	c3                   	ret    
c000e688:	53                   	push   ebx
c000e689:	83 ec 14             	sub    esp,0x14
c000e68c:	68 10 bc 03 c0       	push   0xc003bc10
c000e691:	e8 bc 04 01 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e696:	83 c4 10             	add    esp,0x10
c000e699:	84 c0                	test   al,al
c000e69b:	75 38                	jne    c000e6d5 <schedule()+0x61>
c000e69d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e6a5:	4a                   	dec    edx
c000e6a6:	74 32                	je     c000e6da <schedule()+0x66>
c000e6a8:	83 ec 0c             	sub    esp,0xc
c000e6ab:	68 10 bc 03 c0       	push   0xc003bc10
c000e6b0:	e8 67 05 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e6b5:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000e6bc:	89 c3                	mov    ebx,eax
c000e6be:	e8 ab 04 01 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e6c3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e6ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6cd:	e8 08 fd ff ff       	call   c000e3da <switchToThread(ThreadControlBlock*)>
c000e6d2:	83 c4 10             	add    esp,0x10
c000e6d5:	83 c4 08             	add    esp,0x8
c000e6d8:	5b                   	pop    ebx
c000e6d9:	c3                   	ret    
c000e6da:	83 ec 08             	sub    esp,0x8
c000e6dd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e6e4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e6ea:	68 10 bc 03 c0       	push   0xc003bc10
c000e6ef:	e8 8a 03 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e6f4:	83 c4 10             	add    esp,0x10
c000e6f7:	eb af                	jmp    c000e6a8 <schedule()+0x34>

c000e6f9 <unlockStuff()>:
c000e6f9:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e6fe:	48                   	dec    eax
c000e6ff:	a3 f0 bb 03 c0       	mov    ds:0xc003bbf0,eax
c000e704:	75 09                	jne    c000e70f <unlockStuff()+0x16>
c000e706:	a1 ec bb 03 c0       	mov    eax,ds:0xc003bbec
c000e70b:	85 c0                	test   eax,eax
c000e70d:	75 05                	jne    c000e714 <unlockStuff()+0x1b>
c000e70f:	e9 1d fc ff ff       	jmp    c000e331 <enableIRQs()>
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	c7 05 ec bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x0
c000e721:	e8 4e ff ff ff       	call   c000e674 <schedule()>
c000e726:	83 c4 0c             	add    esp,0xc
c000e729:	e9 03 fc ff ff       	jmp    c000e331 <enableIRQs()>

c000e72e <forkProcess(regs*)>:
c000e72e:	56                   	push   esi
c000e72f:	53                   	push   ebx
c000e730:	50                   	push   eax
c000e731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e736:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e739:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e741:	0f 85 3e 01 00 00    	jne    c000e885 <forkProcess(regs*)+0x157>
c000e747:	e8 1b fc ff ff       	call   c000e367 <lockStuff()>
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	68 3b 07 00 00       	push   0x73b
c000e754:	e8 f5 3c 00 00       	call   c001244e <operator new(unsigned long)>
c000e759:	89 c3                	mov    ebx,eax
c000e75b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e760:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e763:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e76a:	50                   	push   eax
c000e76b:	83 c0 0c             	add    eax,0xc
c000e76e:	50                   	push   eax
c000e76f:	6a 00                	push   0x0
c000e771:	53                   	push   ebx
c000e772:	e8 29 fa ff ff       	call   c000e1a0 <Process::Process(bool, char const*, Process*, char**)>
c000e777:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e77d:	83 c4 20             	add    esp,0x20
c000e780:	85 f6                	test   esi,esi
c000e782:	74 16                	je     c000e79a <forkProcess(regs*)+0x6c>
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	56                   	push   esi
c000e788:	e8 fb 2f 00 00       	call   c0011788 <VAS::~VAS()>
c000e78d:	59                   	pop    ecx
c000e78e:	58                   	pop    eax
c000e78f:	6a 10                	push   0x10
c000e791:	56                   	push   esi
c000e792:	e8 c6 3c 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000e797:	83 c4 10             	add    esp,0x10
c000e79a:	83 ec 0c             	sub    esp,0xc
c000e79d:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e7a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7ae:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e7b4:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e7ba:	6a 10                	push   0x10
c000e7bc:	e8 8d 3c 00 00       	call   c001244e <operator new(unsigned long)>
c000e7c1:	59                   	pop    ecx
c000e7c2:	89 c6                	mov    esi,eax
c000e7c4:	58                   	pop    eax
c000e7c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7cd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e7d3:	56                   	push   esi
c000e7d4:	e8 d1 34 00 00       	call   c0011caa <VAS::VAS(VAS*)>
c000e7d9:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e7df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e7e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e7e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e7ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7f2:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e800:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e80b:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e80e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e818:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e81e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e824:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e82a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e82f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e832:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e839:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e83c:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e843:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e84a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e856:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e859:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e85c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e861:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e864:	58                   	pop    eax
c000e865:	5a                   	pop    edx
c000e866:	53                   	push   ebx
c000e867:	68 10 bc 03 c0       	push   0xc003bc10
c000e86c:	e8 0d 02 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e871:	e8 83 fe ff ff       	call   c000e6f9 <unlockStuff()>
c000e876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e881:	5a                   	pop    edx
c000e882:	5b                   	pop    ebx
c000e883:	5e                   	pop    esi
c000e884:	c3                   	ret    
c000e885:	83 ec 0c             	sub    esp,0xc
c000e888:	68 00 90 03 c0       	push   0xc0039000
c000e88d:	e8 0c e6 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e89a:	eb e5                	jmp    c000e881 <forkProcess(regs*)+0x153>

c000e89c <Semaphore::tryAcquire()>:
c000e89c:	83 ec 0c             	sub    esp,0xc
c000e89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a3:	e8 bf fa ff ff       	call   c000e367 <lockStuff()>
c000e8a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e8ab:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e8ad:	7c 0b                	jl     c000e8ba <Semaphore::tryAcquire()+0x1e>
c000e8af:	e8 45 fe ff ff       	call   c000e6f9 <unlockStuff()>
c000e8b4:	31 c0                	xor    eax,eax
c000e8b6:	83 c4 0c             	add    esp,0xc
c000e8b9:	c3                   	ret    
c000e8ba:	42                   	inc    edx
c000e8bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e8be:	e8 36 fe ff ff       	call   c000e6f9 <unlockStuff()>
c000e8c3:	b0 01                	mov    al,0x1
c000e8c5:	83 c4 0c             	add    esp,0xc
c000e8c8:	c3                   	ret    
c000e8c9:	90                   	nop

c000e8ca <Semaphore::assertLocked(char const*)>:
c000e8ca:	83 ec 0c             	sub    esp,0xc
c000e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e8d5:	e8 8d fa ff ff       	call   c000e367 <lockStuff()>
c000e8da:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e8dc:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e8df:	7c 08                	jl     c000e8e9 <Semaphore::assertLocked(char const*)+0x1f>
c000e8e1:	83 c4 0c             	add    esp,0xc
c000e8e4:	e9 10 fe ff ff       	jmp    c000e6f9 <unlockStuff()>
c000e8e9:	83 ec 0c             	sub    esp,0xc
c000e8ec:	52                   	push   edx
c000e8ed:	e8 ca e6 ff ff       	call   c000cfbc <panic(char const*)>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	83 c4 0c             	add    esp,0xc
c000e8f8:	e9 fc fd ff ff       	jmp    c000e6f9 <unlockStuff()>

c000e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e8fd:	83 ec 0c             	sub    esp,0xc
c000e900:	e8 26 fa ff ff       	call   c000e32b <getIRQNestingLevel()>
c000e905:	83 ec 08             	sub    esp,0x8
c000e908:	50                   	push   eax
c000e909:	68 2c 90 03 c0       	push   0xc003902c
c000e90e:	e8 8b e5 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000e913:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e91c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e91f:	e8 50 fd ff ff       	call   c000e674 <schedule()>
c000e924:	e8 19 fa ff ff       	call   c000e342 <unlockScheduler()>
c000e929:	e8 fd f9 ff ff       	call   c000e32b <getIRQNestingLevel()>
c000e92e:	5a                   	pop    edx
c000e92f:	59                   	pop    ecx
c000e930:	50                   	push   eax
c000e931:	68 60 90 03 c0       	push   0xc0039060
c000e936:	e8 63 e5 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000e93b:	83 c4 1c             	add    esp,0x1c
c000e93e:	c3                   	ret    

c000e93f <blockTask(TaskState)>:
c000e93f:	83 ec 0c             	sub    esp,0xc
c000e942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e946:	e8 f5 f9 ff ff       	call   c000e340 <lockScheduler()>
c000e94b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e950:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e953:	e8 1c fd ff ff       	call   c000e674 <schedule()>
c000e958:	83 c4 0c             	add    esp,0xc
c000e95b:	e9 e2 f9 ff ff       	jmp    c000e342 <unlockScheduler()>

c000e960 <waitTask(int, int*, int)>:
c000e960:	83 ec 18             	sub    esp,0x18
c000e963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e968:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e96c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e96f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e978:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e97b:	6a 07                	push   0x7
c000e97d:	e8 bd ff ff ff       	call   c000e93f <blockTask(TaskState)>
c000e982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e98d:	85 d2                	test   edx,edx
c000e98f:	74 0a                	je     c000e99b <waitTask(int, int*, int)+0x3b>
c000e991:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e994:	89 02                	mov    DWORD PTR [edx],eax
c000e996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e99b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e99e:	83 c4 0c             	add    esp,0xc
c000e9a1:	c3                   	ret    

c000e9a2 <nanoSleepUntil(unsigned long long)>:
c000e9a2:	83 ec 0c             	sub    esp,0xc
c000e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e9ad:	3b 05 90 c3 03 c0    	cmp    eax,DWORD PTR ds:0xc003c390
c000e9b3:	89 d1                	mov    ecx,edx
c000e9b5:	1b 0d 94 c3 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c394
c000e9bb:	73 04                	jae    c000e9c1 <nanoSleepUntil(unsigned long long)+0x1f>
c000e9bd:	83 c4 0c             	add    esp,0xc
c000e9c0:	c3                   	ret    
c000e9c1:	e8 a1 f9 ff ff       	call   c000e367 <lockStuff()>
c000e9c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e9cc:	83 ec 08             	sub    esp,0x8
c000e9cf:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e9d2:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e9d5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e9db:	68 04 bc 03 c0       	push   0xc003bc04
c000e9e0:	e8 99 00 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e9e5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e9ec:	e8 4e ff ff ff       	call   c000e93f <blockTask(TaskState)>
c000e9f1:	83 c4 1c             	add    esp,0x1c
c000e9f4:	e9 00 fd ff ff       	jmp    c000e6f9 <unlockStuff()>

c000e9f9 <nanoSleep(unsigned long long)>:
c000e9f9:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c000e9fe:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c000ea04:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000ea08:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000ea0c:	eb 94                	jmp    c000e9a2 <nanoSleepUntil(unsigned long long)>

c000ea0e <sleep(unsigned long long)>:
c000ea0e:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000ea16:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000ea1b:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000ea1f:	01 ca                	add    edx,ecx
c000ea21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea29:	eb ce                	jmp    c000e9f9 <nanoSleep(unsigned long long)>
c000ea2b:	90                   	nop

c000ea2c <Semaphore::acquire()>:
c000ea2c:	83 ec 0c             	sub    esp,0xc
c000ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea33:	e8 2f f9 ff ff       	call   c000e367 <lockStuff()>
c000ea38:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ea3b:	3b 10                	cmp    edx,DWORD PTR [eax]
c000ea3d:	7d 0c                	jge    c000ea4b <Semaphore::acquire()+0x1f>
c000ea3f:	42                   	inc    edx
c000ea40:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ea43:	83 c4 0c             	add    esp,0xc
c000ea46:	e9 ae fc ff ff       	jmp    c000e6f9 <unlockStuff()>
c000ea4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea51:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000ea58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ea5b:	85 d2                	test   edx,edx
c000ea5d:	74 2a                	je     c000ea89 <Semaphore::acquire()+0x5d>
c000ea5f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ea62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea68:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000ea6b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea77:	6a 05                	push   0x5
c000ea79:	e8 c1 fe ff ff       	call   c000e93f <blockTask(TaskState)>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	83 c4 0c             	add    esp,0xc
c000ea84:	e9 70 fc ff ff       	jmp    c000e6f9 <unlockStuff()>
c000ea89:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea92:	eb d7                	jmp    c000ea6b <Semaphore::acquire()+0x3f>

c000ea94 <execveProcess(char const*, char* const*, char* const*)>:
c000ea94:	56                   	push   esi
c000ea95:	53                   	push   ebx
c000ea96:	50                   	push   eax
c000ea97:	e8 cb f8 ff ff       	call   c000e367 <lockStuff()>
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eaa4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaa7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000eaad:	68 3b 07 00 00       	push   0x73b
c000eab2:	e8 97 39 00 00       	call   c001244e <operator new(unsigned long)>
c000eab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eabb:	89 c3                	mov    ebx,eax
c000eabd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eac2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eac5:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000eacb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eacf:	53                   	push   ebx
c000ead0:	e8 13 f5 ff ff       	call   c000dfe8 <Process::Process(char const*, Process*, char**)>
c000ead5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eada:	83 c4 20             	add    esp,0x20
c000eadd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eae0:	85 f6                	test   esi,esi
c000eae2:	8b 00                	mov    eax,DWORD PTR [eax]
c000eae4:	89 03                	mov    DWORD PTR [ebx],eax
c000eae6:	74 06                	je     c000eaee <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eae8:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eaee:	83 ec 0c             	sub    esp,0xc
c000eaf1:	53                   	push   ebx
c000eaf2:	e8 57 fa ff ff       	call   c000e54e <Process::createUserThread()>
c000eaf7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eafe:	e8 3c fe ff ff       	call   c000e93f <blockTask(TaskState)>
c000eb03:	e8 f1 fb ff ff       	call   c000e6f9 <unlockStuff()>
c000eb08:	e8 33 f8 ff ff       	call   c000e340 <lockScheduler()>
c000eb0d:	e8 62 fb ff ff       	call   c000e674 <schedule()>
c000eb12:	e8 2b f8 ff ff       	call   c000e342 <unlockScheduler()>
c000eb17:	83 c4 14             	add    esp,0x14
c000eb1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb1f:	5b                   	pop    ebx
c000eb20:	5e                   	pop    esi
c000eb21:	c3                   	ret    

c000eb22 <taskReturned>:
c000eb22:	83 ec 0c             	sub    esp,0xc
c000eb25:	e8 18 f8 ff ff       	call   c000e342 <unlockScheduler()>
c000eb2a:	83 ec 08             	sub    esp,0x8
c000eb2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb35:	83 c0 0c             	add    eax,0xc
c000eb38:	50                   	push   eax
c000eb39:	68 5b 8f 03 c0       	push   0xc0038f5b
c000eb3e:	e8 5b e3 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000eb43:	83 c4 10             	add    esp,0x10
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	6a 02                	push   0x2
c000eb4b:	e8 ef fd ff ff       	call   c000e93f <blockTask(TaskState)>
c000eb50:	e8 eb f7 ff ff       	call   c000e340 <lockScheduler()>
c000eb55:	e8 1a fb ff ff       	call   c000e674 <schedule()>
c000eb5a:	e8 e3 f7 ff ff       	call   c000e342 <unlockScheduler()>
c000eb5f:	83 c4 10             	add    esp,0x10
c000eb62:	eb e2                	jmp    c000eb46 <taskReturned+0x24>

c000eb64 <unblockTask(ThreadControlBlock*)>:
c000eb64:	53                   	push   ebx
c000eb65:	83 ec 08             	sub    esp,0x8
c000eb68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb6c:	e8 cf f7 ff ff       	call   c000e340 <lockScheduler()>
c000eb71:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb74:	85 c0                	test   eax,eax
c000eb76:	74 5c                	je     c000ebd4 <unblockTask(ThreadControlBlock*)+0x70>
c000eb78:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb7b:	48                   	dec    eax
c000eb7c:	74 31                	je     c000ebaf <unblockTask(ThreadControlBlock*)+0x4b>
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	68 10 bc 03 c0       	push   0xc003bc10
c000eb86:	e8 91 00 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb8b:	83 c4 10             	add    esp,0x10
c000eb8e:	85 c0                	test   eax,eax
c000eb90:	75 17                	jne    c000eba9 <unblockTask(ThreadControlBlock*)+0x45>
c000eb92:	eb 65                	jmp    c000ebf9 <unblockTask(ThreadControlBlock*)+0x95>
c000eb94:	83 ec 08             	sub    esp,0x8
c000eb97:	50                   	push   eax
c000eb98:	68 10 bc 03 c0       	push   0xc003bc10
c000eb9d:	e8 82 00 01 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000eba2:	83 c4 10             	add    esp,0x10
c000eba5:	85 c0                	test   eax,eax
c000eba7:	74 50                	je     c000ebf9 <unblockTask(ThreadControlBlock*)+0x95>
c000eba9:	39 c3                	cmp    ebx,eax
c000ebab:	75 e7                	jne    c000eb94 <unblockTask(ThreadControlBlock*)+0x30>
c000ebad:	eb 1c                	jmp    c000ebcb <unblockTask(ThreadControlBlock*)+0x67>
c000ebaf:	83 ec 0c             	sub    esp,0xc
c000ebb2:	68 50 91 03 c0       	push   0xc0039150
c000ebb7:	e8 e2 e2 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000ebbc:	c7 04 24 dc 90 03 c0 	mov    DWORD PTR [esp],0xc00390dc
c000ebc3:	e8 d6 e2 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	83 c4 08             	add    esp,0x8
c000ebce:	5b                   	pop    ebx
c000ebcf:	e9 6e f7 ff ff       	jmp    c000e342 <unlockScheduler()>
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	68 94 90 03 c0       	push   0xc0039094
c000ebdc:	e8 bd e2 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000ebe1:	c7 04 24 dc 90 03 c0 	mov    DWORD PTR [esp],0xc00390dc
c000ebe8:	e8 b1 e2 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	83 c4 08             	add    esp,0x8
c000ebf3:	5b                   	pop    ebx
c000ebf4:	e9 49 f7 ff ff       	jmp    c000e342 <unlockScheduler()>
c000ebf9:	83 ec 08             	sub    esp,0x8
c000ebfc:	53                   	push   ebx
c000ebfd:	68 10 bc 03 c0       	push   0xc003bc10
c000ec02:	e8 77 fe 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	83 c4 08             	add    esp,0x8
c000ec0d:	5b                   	pop    ebx
c000ec0e:	e9 2f f7 ff ff       	jmp    c000e342 <unlockScheduler()>

c000ec13 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ec13:	55                   	push   ebp
c000ec14:	57                   	push   edi
c000ec15:	56                   	push   esi
c000ec16:	53                   	push   ebx
c000ec17:	83 ec 1c             	sub    esp,0x1c
c000ec1a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ec1e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec21:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ec27:	85 c9                	test   ecx,ecx
c000ec29:	7e 20                	jle    c000ec4b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ec2b:	31 f6                	xor    esi,esi
c000ec2d:	83 ec 0c             	sub    esp,0xc
c000ec30:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ec37:	46                   	inc    esi
c000ec38:	e8 6c e8 ff ff       	call   c000d4a9 <free>
c000ec3d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec40:	83 c4 10             	add    esp,0x10
c000ec43:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ec49:	7f e2                	jg     c000ec2d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ec4b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ec55:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ec5a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ec5d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ec60:	d3 c0                	rol    eax,cl
c000ec62:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ec69:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ec6c:	89 f7                	mov    edi,esi
c000ec6e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ec76:	0f 85 4f 01 00 00    	jne    c000edcb <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ec7c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec82:	85 c0                	test   eax,eax
c000ec84:	0f 84 aa 00 00 00    	je     c000ed34 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec8a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ec8d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ec91:	31 c9                	xor    ecx,ecx
c000ec93:	eb 10                	jmp    c000eca5 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ec95:	41                   	inc    ecx
c000ec96:	83 f9 10             	cmp    ecx,0x10
c000ec99:	0f 84 95 00 00 00    	je     c000ed34 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec9f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000eca5:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ecac:	d3 fa                	sar    edx,cl
c000ecae:	83 e2 01             	and    edx,0x1
c000ecb1:	74 e2                	je     c000ec95 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecb3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ecb6:	01 ca                	add    edx,ecx
c000ecb8:	89 d5                	mov    ebp,edx
c000ecba:	c1 e5 05             	shl    ebp,0x5
c000ecbd:	01 ea                	add    edx,ebp
c000ecbf:	01 d0                	add    eax,edx
c000ecc1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ecc7:	83 fd 07             	cmp    ebp,0x7
c000ecca:	75 c9                	jne    c000ec95 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000eccc:	05 40 02 00 00       	add    eax,0x240
c000ecd1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ecd4:	83 fd ff             	cmp    ebp,0xffffffff
c000ecd7:	0f 8c 01 01 00 00    	jl     c000edde <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ecdd:	0f 84 b2 01 00 00    	je     c000ee95 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ece3:	85 ed                	test   ebp,ebp
c000ece5:	0f 84 99 01 00 00    	je     c000ee84 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000eceb:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000eced:	75 a6                	jne    c000ec95 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecef:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ecf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ecf9:	01 d0                	add    eax,edx
c000ecfb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ecff:	83 ec 0c             	sub    esp,0xc
c000ed02:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ed08:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ed11:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ed18:	50                   	push   eax
c000ed19:	e8 46 fe ff ff       	call   c000eb64 <unblockTask(ThreadControlBlock*)>
c000ed1e:	83 c4 10             	add    esp,0x10
c000ed21:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed28:	89 f7                	mov    edi,esi
c000ed2a:	41                   	inc    ecx
c000ed2b:	83 f9 10             	cmp    ecx,0x10
c000ed2e:	0f 85 6b ff ff ff    	jne    c000ec9f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ed34:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ed3a:	85 c0                	test   eax,eax
c000ed3c:	74 5d                	je     c000ed9b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed3e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ed44:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ed4a:	74 4f                	je     c000ed9b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed4c:	83 ec 0c             	sub    esp,0xc
c000ed4f:	68 10 bc 03 c0       	push   0xc003bc10
c000ed54:	e8 c3 fe 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ed59:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ed60:	89 c7                	mov    edi,eax
c000ed62:	e8 eb fd 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ed67:	83 c4 10             	add    esp,0x10
c000ed6a:	84 c0                	test   al,al
c000ed6c:	0f 84 dd 00 00 00    	je     c000ee4f <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ed72:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed75:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ed7b:	85 d2                	test   edx,edx
c000ed7d:	74 0f                	je     c000ed8e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000ed7f:	83 ec 0c             	sub    esp,0xc
c000ed82:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed84:	52                   	push   edx
c000ed85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ed88:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed8b:	83 c4 10             	add    esp,0x10
c000ed8e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ed98:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ed9b:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000eda1:	85 f6                	test   esi,esi
c000eda3:	74 16                	je     c000edbb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000eda5:	83 ec 0c             	sub    esp,0xc
c000eda8:	56                   	push   esi
c000eda9:	e8 da 29 00 00       	call   c0011788 <VAS::~VAS()>
c000edae:	58                   	pop    eax
c000edaf:	5a                   	pop    edx
c000edb0:	6a 10                	push   0x10
c000edb2:	56                   	push   esi
c000edb3:	e8 a5 36 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000edb8:	83 c4 10             	add    esp,0x10
c000edbb:	83 ec 0c             	sub    esp,0xc
c000edbe:	68 77 8f 03 c0       	push   0xc0038f77
c000edc3:	e8 d6 e0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	83 ec 08             	sub    esp,0x8
c000edce:	6a 63                	push   0x63
c000edd0:	53                   	push   ebx
c000edd1:	e8 87 36 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000edd6:	83 c4 2c             	add    esp,0x2c
c000edd9:	5b                   	pop    ebx
c000edda:	5e                   	pop    esi
c000eddb:	5f                   	pop    edi
c000eddc:	5d                   	pop    ebp
c000eddd:	c3                   	ret    
c000edde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ede2:	83 ec 0c             	sub    esp,0xc
c000ede5:	68 94 91 03 c0       	push   0xc0039194
c000edea:	e8 cd e1 ff ff       	call   c000cfbc <panic(char const*)>
c000edef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000edf2:	83 c4 10             	add    esp,0x10
c000edf5:	89 f7                	mov    edi,esi
c000edf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edfb:	e9 95 fe ff ff       	jmp    c000ec95 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ee00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ee06:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ee0c:	75 1c                	jne    c000ee2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee0e:	83 ec 0c             	sub    esp,0xc
c000ee11:	68 fc 91 03 c0       	push   0xc00391fc
c000ee16:	e8 83 e0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000ee1b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ee22:	e8 18 fb ff ff       	call   c000e93f <blockTask(TaskState)>
c000ee27:	83 c4 10             	add    esp,0x10
c000ee2a:	83 ec 08             	sub    esp,0x8
c000ee2d:	56                   	push   esi
c000ee2e:	68 10 bc 03 c0       	push   0xc003bc10
c000ee33:	e8 46 fc 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ee38:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ee3f:	e8 d8 fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee44:	83 c4 10             	add    esp,0x10
c000ee47:	39 f8                	cmp    eax,edi
c000ee49:	0f 84 23 ff ff ff    	je     c000ed72 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ee4f:	83 ec 0c             	sub    esp,0xc
c000ee52:	68 10 bc 03 c0       	push   0xc003bc10
c000ee57:	e8 c0 fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee5c:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ee63:	89 c6                	mov    esi,eax
c000ee65:	e8 04 fd 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	39 f3                	cmp    ebx,esi
c000ee6f:	74 b9                	je     c000ee2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee71:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ee74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee77:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ee7d:	75 ab                	jne    c000ee2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee7f:	e9 7c ff ff ff       	jmp    c000ee00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000ee84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee88:	83 ec 0c             	sub    esp,0xc
c000ee8b:	68 c8 91 03 c0       	push   0xc00391c8
c000ee90:	e9 55 ff ff ff       	jmp    c000edea <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ee95:	8b 36                	mov    esi,DWORD PTR [esi]
c000ee97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee9b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ee9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eea1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000eea7:	01 d7                	add    edi,edx
c000eea9:	89 f8                	mov    eax,edi
c000eeab:	e9 4b fe ff ff       	jmp    c000ecfb <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000eeb0 <cleanerTaskFunction(void*)>:
c000eeb0:	53                   	push   ebx
c000eeb1:	83 ec 08             	sub    esp,0x8
c000eeb4:	e8 89 f4 ff ff       	call   c000e342 <unlockScheduler()>
c000eeb9:	e8 82 f4 ff ff       	call   c000e340 <lockScheduler()>
c000eebe:	80 3d d4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbd4,0x0
c000eec5:	75 72                	jne    c000ef39 <cleanerTaskFunction(void*)+0x89>
c000eec7:	83 ec 0c             	sub    esp,0xc
c000eeca:	6a 02                	push   0x2
c000eecc:	e8 2c fa ff ff       	call   c000e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000eed1:	83 c4 10             	add    esp,0x10
c000eed4:	c6 05 d4 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bbd4,0x0
c000eedb:	e8 87 f4 ff ff       	call   c000e367 <lockStuff()>
c000eee0:	e8 5b f4 ff ff       	call   c000e340 <lockScheduler()>
c000eee5:	83 ec 0c             	sub    esp,0xc
c000eee8:	68 f8 bb 03 c0       	push   0xc003bbf8
c000eeed:	e8 60 fc 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000eef2:	83 c4 10             	add    esp,0x10
c000eef5:	84 c0                	test   al,al
c000eef7:	75 28                	jne    c000ef21 <cleanerTaskFunction(void*)+0x71>
c000eef9:	83 ec 0c             	sub    esp,0xc
c000eefc:	68 f8 bb 03 c0       	push   0xc003bbf8
c000ef01:	e8 16 fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ef06:	c7 04 24 f8 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf8
c000ef0d:	89 c3                	mov    ebx,eax
c000ef0f:	e8 5a fc 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ef14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef17:	e8 f7 fc ff ff       	call   c000ec13 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ef1c:	83 c4 10             	add    esp,0x10
c000ef1f:	eb c4                	jmp    c000eee5 <cleanerTaskFunction(void*)+0x35>
c000ef21:	e8 1c f4 ff ff       	call   c000e342 <unlockScheduler()>
c000ef26:	e8 ce f7 ff ff       	call   c000e6f9 <unlockStuff()>
c000ef2b:	e8 10 f4 ff ff       	call   c000e340 <lockScheduler()>
c000ef30:	80 3d d4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbd4,0x0
c000ef37:	74 8e                	je     c000eec7 <cleanerTaskFunction(void*)+0x17>
c000ef39:	e8 04 f4 ff ff       	call   c000e342 <unlockScheduler()>
c000ef3e:	eb 94                	jmp    c000eed4 <cleanerTaskFunction(void*)+0x24>

c000ef40 <terminateTask(int)>:
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	e8 1f f4 ff ff       	call   c000e367 <lockStuff()>
c000ef48:	e8 f3 f3 ff ff       	call   c000e340 <lockScheduler()>
c000ef4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef56:	83 ec 08             	sub    esp,0x8
c000ef59:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ef5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef61:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ef64:	50                   	push   eax
c000ef65:	68 f8 bb 03 c0       	push   0xc003bbf8
c000ef6a:	e8 0f fb 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ef6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef74:	83 c4 10             	add    esp,0x10
c000ef77:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ef7e:	a1 d0 bb 03 c0       	mov    eax,ds:0xc003bbd0
c000ef83:	85 c0                	test   eax,eax
c000ef85:	74 2e                	je     c000efb5 <terminateTask(int)+0x75>
c000ef87:	83 ec 0c             	sub    esp,0xc
c000ef8a:	c6 05 d4 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bbd4,0x1
c000ef91:	50                   	push   eax
c000ef92:	e8 cd fb ff ff       	call   c000eb64 <unblockTask(ThreadControlBlock*)>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	e8 a3 f3 ff ff       	call   c000e342 <unlockScheduler()>
c000ef9f:	e8 55 f7 ff ff       	call   c000e6f9 <unlockStuff()>
c000efa4:	e8 97 f3 ff ff       	call   c000e340 <lockScheduler()>
c000efa9:	e8 c6 f6 ff ff       	call   c000e674 <schedule()>
c000efae:	e8 8f f3 ff ff       	call   c000e342 <unlockScheduler()>
c000efb3:	eb ef                	jmp    c000efa4 <terminateTask(int)+0x64>
c000efb5:	83 ec 0c             	sub    esp,0xc
c000efb8:	68 85 8f 03 c0       	push   0xc0038f85
c000efbd:	e8 dc de ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000efc2:	83 c4 10             	add    esp,0x10
c000efc5:	eb d3                	jmp    c000ef9a <terminateTask(int)+0x5a>
c000efc7:	90                   	nop

c000efc8 <Semaphore::release()>:
c000efc8:	83 ec 0c             	sub    esp,0xc
c000efcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efcf:	e8 93 f3 ff ff       	call   c000e367 <lockStuff()>
c000efd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000efd7:	85 d2                	test   edx,edx
c000efd9:	74 1a                	je     c000eff5 <Semaphore::release()+0x2d>
c000efdb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000efde:	83 ec 0c             	sub    esp,0xc
c000efe1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000efe4:	52                   	push   edx
c000efe5:	e8 7a fb ff ff       	call   c000eb64 <unblockTask(ThreadControlBlock*)>
c000efea:	83 c4 10             	add    esp,0x10
c000efed:	83 c4 0c             	add    esp,0xc
c000eff0:	e9 04 f7 ff ff       	jmp    c000e6f9 <unlockStuff()>
c000eff5:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000eff8:	83 c4 0c             	add    esp,0xc
c000effb:	e9 f9 f6 ff ff       	jmp    c000e6f9 <unlockStuff()>

c000f000 <__static_initialization_and_destruction_0(int, int)>:
c000f000:	83 ec 0c             	sub    esp,0xc
c000f003:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f008:	0f 85 88 00 00 00    	jne    c000f096 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f00e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000f016:	75 7e                	jne    c000f096 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f018:	83 ec 0c             	sub    esp,0xc
c000f01b:	68 10 bc 03 c0       	push   0xc003bc10
c000f020:	e8 01 fa 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f025:	83 c4 10             	add    esp,0x10
c000f028:	83 ec 04             	sub    esp,0x4
c000f02b:	68 e8 ad 03 c0       	push   0xc003ade8
c000f030:	68 10 bc 03 c0       	push   0xc003bc10
c000f035:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f03a:	e8 9a 33 00 00       	call   c00123d9 <__cxa_atexit>
c000f03f:	83 c4 10             	add    esp,0x10
c000f042:	83 ec 0c             	sub    esp,0xc
c000f045:	68 04 bc 03 c0       	push   0xc003bc04
c000f04a:	e8 d7 f9 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f04f:	83 c4 10             	add    esp,0x10
c000f052:	83 ec 04             	sub    esp,0x4
c000f055:	68 e8 ad 03 c0       	push   0xc003ade8
c000f05a:	68 04 bc 03 c0       	push   0xc003bc04
c000f05f:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f064:	e8 70 33 00 00       	call   c00123d9 <__cxa_atexit>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	83 ec 0c             	sub    esp,0xc
c000f06f:	68 f8 bb 03 c0       	push   0xc003bbf8
c000f074:	e8 ad f9 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f079:	83 c4 10             	add    esp,0x10
c000f07c:	83 ec 04             	sub    esp,0x4
c000f07f:	68 e8 ad 03 c0       	push   0xc003ade8
c000f084:	68 f8 bb 03 c0       	push   0xc003bbf8
c000f089:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f08e:	e8 46 33 00 00       	call   c00123d9 <__cxa_atexit>
c000f093:	83 c4 10             	add    esp,0x10
c000f096:	90                   	nop
c000f097:	83 c4 0c             	add    esp,0xc
c000f09a:	c3                   	ret    

c000f09b <_GLOBAL__sub_I_kernelProcess>:
c000f09b:	83 ec 0c             	sub    esp,0xc
c000f09e:	83 ec 08             	sub    esp,0x8
c000f0a1:	68 ff ff 00 00       	push   0xffff
c000f0a6:	6a 01                	push   0x1
c000f0a8:	e8 53 ff ff ff       	call   c000f000 <__static_initialization_and_destruction_0(int, int)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	83 c4 0c             	add    esp,0xc
c000f0b3:	c3                   	ret    

c000f0b4 <sysCallGetPID(regs*)>:
c000f0b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	99                   	cdq    
c000f0bf:	c3                   	ret    

c000f0c0 <sysCallSeekDir(regs*)>:
c000f0c0:	31 c0                	xor    eax,eax
c000f0c2:	31 d2                	xor    edx,edx
c000f0c4:	c3                   	ret    

c000f0c5 <sysCallTellDir(regs*)>:
c000f0c5:	31 c0                	xor    eax,eax
c000f0c7:	31 d2                	xor    edx,edx
c000f0c9:	c3                   	ret    

c000f0ca <sysCallVerify(regs*)>:
c000f0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ce:	31 d2                	xor    edx,edx
c000f0d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0d3:	c3                   	ret    

c000f0d4 <sysCallGetArgc(regs*)>:
c000f0d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0dc:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f0e2:	99                   	cdq    
c000f0e3:	c3                   	ret    

c000f0e4 <sysFormatDisk(regs*)>:
c000f0e4:	56                   	push   esi
c000f0e5:	53                   	push   ebx
c000f0e6:	53                   	push   ebx
c000f0e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f0eb:	8b 1d 80 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be80
c000f0f1:	eb 25                	jmp    c000f118 <sysFormatDisk(regs*)+0x34>
c000f0f3:	83 ec 0c             	sub    esp,0xc
c000f0f6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f0f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f0fb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f0fe:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f101:	50                   	push   eax
c000f102:	ff 34 85 20 c3 03 c0 	push   DWORD PTR [eax*4-0x3ffc3ce0]
c000f109:	53                   	push   ebx
c000f10a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	83 f8 08             	cmp    eax,0x8
c000f113:	75 12                	jne    c000f127 <sysFormatDisk(regs*)+0x43>
c000f115:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f118:	85 db                	test   ebx,ebx
c000f11a:	75 d7                	jne    c000f0f3 <sysFormatDisk(regs*)+0xf>
c000f11c:	59                   	pop    ecx
c000f11d:	b8 03 00 00 00       	mov    eax,0x3
c000f122:	31 d2                	xor    edx,edx
c000f124:	5b                   	pop    ebx
c000f125:	5e                   	pop    esi
c000f126:	c3                   	ret    
c000f127:	85 c0                	test   eax,eax
c000f129:	74 1b                	je     c000f146 <sysFormatDisk(regs*)+0x62>
c000f12b:	83 f8 09             	cmp    eax,0x9
c000f12e:	74 0b                	je     c000f13b <sysFormatDisk(regs*)+0x57>
c000f130:	59                   	pop    ecx
c000f131:	b8 02 00 00 00       	mov    eax,0x2
c000f136:	31 d2                	xor    edx,edx
c000f138:	5b                   	pop    ebx
c000f139:	5e                   	pop    esi
c000f13a:	c3                   	ret    
c000f13b:	59                   	pop    ecx
c000f13c:	b8 01 00 00 00       	mov    eax,0x1
c000f141:	31 d2                	xor    edx,edx
c000f143:	5b                   	pop    ebx
c000f144:	5e                   	pop    esi
c000f145:	c3                   	ret    
c000f146:	59                   	pop    ecx
c000f147:	31 c0                	xor    eax,eax
c000f149:	31 d2                	xor    edx,edx
c000f14b:	5b                   	pop    ebx
c000f14c:	5e                   	pop    esi
c000f14d:	c3                   	ret    

c000f14e <sysSetDiskVolumeLabel(regs*)>:
c000f14e:	56                   	push   esi
c000f14f:	53                   	push   ebx
c000f150:	53                   	push   ebx
c000f151:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f155:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f158:	83 f8 19             	cmp    eax,0x19
c000f15b:	77 29                	ja     c000f186 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f15d:	8b 0c 85 20 c3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3ce0]
c000f164:	85 c9                	test   ecx,ecx
c000f166:	74 1e                	je     c000f186 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f168:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f16b:	85 d2                	test   edx,edx
c000f16d:	74 17                	je     c000f186 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f16f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f175:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f177:	52                   	push   edx
c000f178:	50                   	push   eax
c000f179:	51                   	push   ecx
c000f17a:	53                   	push   ebx
c000f17b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	99                   	cdq    
c000f182:	59                   	pop    ecx
c000f183:	5b                   	pop    ebx
c000f184:	5e                   	pop    esi
c000f185:	c3                   	ret    
c000f186:	59                   	pop    ecx
c000f187:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f18c:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f191:	5b                   	pop    ebx
c000f192:	5e                   	pop    esi
c000f193:	c3                   	ret    

c000f194 <sysGetDiskVolumeLabel(regs*)>:
c000f194:	57                   	push   edi
c000f195:	56                   	push   esi
c000f196:	53                   	push   ebx
c000f197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f19b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f19e:	83 fa 19             	cmp    edx,0x19
c000f1a1:	77 34                	ja     c000f1d7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1a3:	8b 0c 95 20 c3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3ce0]
c000f1aa:	85 c9                	test   ecx,ecx
c000f1ac:	74 29                	je     c000f1d7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1ae:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f1b1:	85 db                	test   ebx,ebx
c000f1b3:	74 22                	je     c000f1d7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1b5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f1b8:	85 c0                	test   eax,eax
c000f1ba:	74 1b                	je     c000f1d7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1bc:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f1c2:	83 ec 0c             	sub    esp,0xc
c000f1c5:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f1c7:	50                   	push   eax
c000f1c8:	53                   	push   ebx
c000f1c9:	52                   	push   edx
c000f1ca:	51                   	push   ecx
c000f1cb:	56                   	push   esi
c000f1cc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f1cf:	83 c4 20             	add    esp,0x20
c000f1d2:	99                   	cdq    
c000f1d3:	5b                   	pop    ebx
c000f1d4:	5e                   	pop    esi
c000f1d5:	5f                   	pop    edi
c000f1d6:	c3                   	ret    
c000f1d7:	5b                   	pop    ebx
c000f1d8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1e2:	5e                   	pop    esi
c000f1e3:	5f                   	pop    edi
c000f1e4:	c3                   	ret    

c000f1e5 <sysShutdown(regs*)>:
c000f1e5:	83 ec 0c             	sub    esp,0xc
c000f1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f1ef:	85 c0                	test   eax,eax
c000f1f1:	74 24                	je     c000f217 <sysShutdown(regs*)+0x32>
c000f1f3:	48                   	dec    eax
c000f1f4:	74 0e                	je     c000f204 <sysShutdown(regs*)+0x1f>
c000f1f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f200:	83 c4 0c             	add    esp,0xc
c000f203:	c3                   	ret    
c000f204:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c000f209:	85 c0                	test   eax,eax
c000f20b:	74 02                	je     c000f20f <sysShutdown(regs*)+0x2a>
c000f20d:	ff d0                	call   eax
c000f20f:	31 c0                	xor    eax,eax
c000f211:	31 d2                	xor    edx,edx
c000f213:	83 c4 0c             	add    esp,0xc
c000f216:	c3                   	ret    
c000f217:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000f21c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f21e:	6a 00                	push   0x0
c000f220:	6a 00                	push   0x0
c000f222:	6a 00                	push   0x0
c000f224:	50                   	push   eax
c000f225:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f228:	83 c4 10             	add    esp,0x10
c000f22b:	eb c9                	jmp    c000f1f6 <sysShutdown(regs*)+0x11>

c000f22d <sysCallGetCwd(regs*)>:
c000f22d:	83 ec 10             	sub    esp,0x10
c000f230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f234:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f237:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f23f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f242:	e8 a6 39 00 00       	call   c0012bed <getcwd(Process*, char*, int)>
c000f247:	83 c4 1c             	add    esp,0x1c
c000f24a:	99                   	cdq    
c000f24b:	c3                   	ret    

c000f24c <sysCallSetCwd(regs*)>:
c000f24c:	83 ec 14             	sub    esp,0x14
c000f24f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f253:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f25b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f25e:	e8 b4 39 00 00       	call   c0012c17 <setcwd(Process*, char*)>
c000f263:	83 c4 1c             	add    esp,0x1c
c000f266:	99                   	cdq    
c000f267:	c3                   	ret    

c000f268 <sysCallRealpath(regs*)>:
c000f268:	83 ec 0c             	sub    esp,0xc
c000f26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f26f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f272:	85 d2                	test   edx,edx
c000f274:	74 07                	je     c000f27d <sysCallRealpath(regs*)+0x15>
c000f276:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f279:	85 c0                	test   eax,eax
c000f27b:	75 0b                	jne    c000f288 <sysCallRealpath(regs*)+0x20>
c000f27d:	b8 01 00 00 00       	mov    eax,0x1
c000f282:	31 d2                	xor    edx,edx
c000f284:	83 c4 0c             	add    esp,0xc
c000f287:	c3                   	ret    
c000f288:	51                   	push   ecx
c000f289:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f28f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f292:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f298:	51                   	push   ecx
c000f299:	52                   	push   edx
c000f29a:	50                   	push   eax
c000f29b:	e8 32 34 00 00       	call   c00126d2 <standardiseFiles(char*, char const*, char const*)>
c000f2a0:	83 c4 10             	add    esp,0x10
c000f2a3:	31 c0                	xor    eax,eax
c000f2a5:	31 d2                	xor    edx,edx
c000f2a7:	83 c4 0c             	add    esp,0xc
c000f2aa:	c3                   	ret    

c000f2ab <sysCallOpen(regs*)>:
c000f2ab:	56                   	push   esi
c000f2ac:	53                   	push   ebx
c000f2ad:	81 ec 04 01 00 00    	sub    esp,0x104
c000f2b3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f2ba:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f2bd:	85 d2                	test   edx,edx
c000f2bf:	0f 84 c3 00 00 00    	je     c000f388 <sysCallOpen(regs*)+0xdd>
c000f2c5:	50                   	push   eax
c000f2c6:	68 cb 92 03 c0       	push   0xc00392cb
c000f2cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f2ce:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f2d2:	56                   	push   esi
c000f2d3:	e8 fa 33 00 00       	call   c00126d2 <standardiseFiles(char*, char const*, char const*)>
c000f2d8:	89 34 24             	mov    DWORD PTR [esp],esi
c000f2db:	e8 21 14 ff ff       	call   c0000701 <strlen>
c000f2e0:	83 c4 10             	add    esp,0x10
c000f2e3:	48                   	dec    eax
c000f2e4:	74 1d                	je     c000f303 <sysCallOpen(regs*)+0x58>
c000f2e6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f2e9:	eb 0f                	jmp    c000f2fa <sysCallOpen(regs*)+0x4f>
c000f2eb:	80 fa 3a             	cmp    dl,0x3a
c000f2ee:	74 0f                	je     c000f2ff <sysCallOpen(regs*)+0x54>
c000f2f0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f2f4:	48                   	dec    eax
c000f2f5:	74 0c                	je     c000f303 <sysCallOpen(regs*)+0x58>
c000f2f7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f2fa:	80 fa 2e             	cmp    dl,0x2e
c000f2fd:	75 ec                	jne    c000f2eb <sysCallOpen(regs*)+0x40>
c000f2ff:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f303:	83 ec 0c             	sub    esp,0xc
c000f306:	68 14 01 00 00       	push   0x114
c000f30b:	e8 3e 31 00 00       	call   c001244e <operator new(unsigned long)>
c000f310:	83 c4 0c             	add    esp,0xc
c000f313:	89 c6                	mov    esi,eax
c000f315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f31a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f31d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f320:	56                   	push   esi
c000f321:	e8 56 35 00 00       	call   c001287c <File::File(char const*, Process*)>
c000f326:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f329:	83 c4 10             	add    esp,0x10
c000f32c:	0f b6 d0             	movzx  edx,al
c000f32f:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f332:	89 c2                	mov    edx,eax
c000f334:	83 e2 01             	and    edx,0x1
c000f337:	a8 02                	test   al,0x2
c000f339:	74 03                	je     c000f33e <sysCallOpen(regs*)+0x93>
c000f33b:	83 ca 02             	or     edx,0x2
c000f33e:	a8 04                	test   al,0x4
c000f340:	74 03                	je     c000f345 <sysCallOpen(regs*)+0x9a>
c000f342:	83 ca 04             	or     edx,0x4
c000f345:	a8 08                	test   al,0x8
c000f347:	74 03                	je     c000f34c <sysCallOpen(regs*)+0xa1>
c000f349:	83 ca 0a             	or     edx,0xa
c000f34c:	a8 10                	test   al,0x10
c000f34e:	74 03                	je     c000f353 <sysCallOpen(regs*)+0xa8>
c000f350:	83 ca 12             	or     edx,0x12
c000f353:	83 ec 08             	sub    esp,0x8
c000f356:	52                   	push   edx
c000f357:	56                   	push   esi
c000f358:	e8 83 35 00 00       	call   c00128e0 <File::open(FileOpenMode)>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	85 c0                	test   eax,eax
c000f362:	75 24                	jne    c000f388 <sysCallOpen(regs*)+0xdd>
c000f364:	83 ec 0c             	sub    esp,0xc
c000f367:	56                   	push   esi
c000f368:	e8 05 1d 00 00       	call   c0011072 <UnixFile::getFileDescriptor()>
c000f36d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f370:	83 c4 10             	add    esp,0x10
c000f373:	89 02                	mov    DWORD PTR [edx],eax
c000f375:	c1 f8 1f             	sar    eax,0x1f
c000f378:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f37b:	81 c4 04 01 00 00    	add    esp,0x104
c000f381:	31 c0                	xor    eax,eax
c000f383:	31 d2                	xor    edx,edx
c000f385:	5b                   	pop    ebx
c000f386:	5e                   	pop    esi
c000f387:	c3                   	ret    
c000f388:	81 c4 04 01 00 00    	add    esp,0x104
c000f38e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f393:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f398:	5b                   	pop    ebx
c000f399:	5e                   	pop    esi
c000f39a:	c3                   	ret    

c000f39b <sysCallReadDir(regs*)>:
c000f39b:	53                   	push   ebx
c000f39c:	83 ec 18             	sub    esp,0x18
c000f39f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f3a6:	83 f8 02             	cmp    eax,0x2
c000f3a9:	77 0c                	ja     c000f3b7 <sysCallReadDir(regs*)+0x1c>
c000f3ab:	b8 01 00 00 00       	mov    eax,0x1
c000f3b0:	31 d2                	xor    edx,edx
c000f3b2:	83 c4 18             	add    esp,0x18
c000f3b5:	5b                   	pop    ebx
c000f3b6:	c3                   	ret    
c000f3b7:	83 ec 0c             	sub    esp,0xc
c000f3ba:	50                   	push   eax
c000f3bb:	e8 17 1e 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f3c0:	83 c4 10             	add    esp,0x10
c000f3c3:	85 c0                	test   eax,eax
c000f3c5:	74 37                	je     c000f3fe <sysCallReadDir(regs*)+0x63>
c000f3c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3cf:	83 ec 0c             	sub    esp,0xc
c000f3d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3d4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f3d8:	51                   	push   ecx
c000f3d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f3dc:	6a 00                	push   0x0
c000f3de:	68 10 01 00 00       	push   0x110
c000f3e3:	50                   	push   eax
c000f3e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	85 c0                	test   eax,eax
c000f3ec:	74 0c                	je     c000f3fa <sysCallReadDir(regs*)+0x5f>
c000f3ee:	83 f8 07             	cmp    eax,0x7
c000f3f1:	74 b8                	je     c000f3ab <sysCallReadDir(regs*)+0x10>
c000f3f3:	b8 02 00 00 00       	mov    eax,0x2
c000f3f8:	eb b6                	jmp    c000f3b0 <sysCallReadDir(regs*)+0x15>
c000f3fa:	31 c0                	xor    eax,eax
c000f3fc:	eb b2                	jmp    c000f3b0 <sysCallReadDir(regs*)+0x15>
c000f3fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f403:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f408:	eb a8                	jmp    c000f3b2 <sysCallReadDir(regs*)+0x17>

c000f40a <sysCallIsATTY(regs*)>:
c000f40a:	83 ec 0c             	sub    esp,0xc
c000f40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f411:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f414:	83 f8 02             	cmp    eax,0x2
c000f417:	77 26                	ja     c000f43f <sysCallIsATTY(regs*)+0x35>
c000f419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f41e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f421:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f427:	85 c0                	test   eax,eax
c000f429:	74 24                	je     c000f44f <sysCallIsATTY(regs*)+0x45>
c000f42b:	83 ec 0c             	sub    esp,0xc
c000f42e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f430:	50                   	push   eax
c000f431:	ff 12                	call   DWORD PTR [edx]
c000f433:	31 d2                	xor    edx,edx
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	83 c4 10             	add    esp,0x10
c000f43b:	83 c4 0c             	add    esp,0xc
c000f43e:	c3                   	ret    
c000f43f:	83 ec 0c             	sub    esp,0xc
c000f442:	50                   	push   eax
c000f443:	e8 8f 1d 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f448:	83 c4 10             	add    esp,0x10
c000f44b:	85 c0                	test   eax,eax
c000f44d:	75 dc                	jne    c000f42b <sysCallIsATTY(regs*)+0x21>
c000f44f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f454:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f459:	83 c4 0c             	add    esp,0xc
c000f45c:	c3                   	ret    

c000f45d <sysCallSeek(regs*)>:
c000f45d:	53                   	push   ebx
c000f45e:	83 ec 08             	sub    esp,0x8
c000f461:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f465:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f468:	83 f8 02             	cmp    eax,0x2
c000f46b:	76 32                	jbe    c000f49f <sysCallSeek(regs*)+0x42>
c000f46d:	83 ec 0c             	sub    esp,0xc
c000f470:	50                   	push   eax
c000f471:	e8 61 1d 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f476:	83 c4 0c             	add    esp,0xc
c000f479:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f47c:	31 db                	xor    ebx,ebx
c000f47e:	53                   	push   ebx
c000f47f:	51                   	push   ecx
c000f480:	50                   	push   eax
c000f481:	e8 18 35 00 00       	call   c001299e <File::seek(unsigned long long)>
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	85 c0                	test   eax,eax
c000f48b:	0f 95 c0             	setne  al
c000f48e:	31 d2                	xor    edx,edx
c000f490:	0f b6 c0             	movzx  eax,al
c000f493:	f7 d8                	neg    eax
c000f495:	83 d2 00             	adc    edx,0x0
c000f498:	83 c4 08             	add    esp,0x8
c000f49b:	f7 da                	neg    edx
c000f49d:	5b                   	pop    ebx
c000f49e:	c3                   	ret    
c000f49f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4a9:	83 c4 08             	add    esp,0x8
c000f4ac:	5b                   	pop    ebx
c000f4ad:	c3                   	ret    

c000f4ae <sysCallTell(regs*)>:
c000f4ae:	53                   	push   ebx
c000f4af:	83 ec 08             	sub    esp,0x8
c000f4b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4b9:	83 f8 02             	cmp    eax,0x2
c000f4bc:	76 2d                	jbe    c000f4eb <sysCallTell(regs*)+0x3d>
c000f4be:	83 ec 0c             	sub    esp,0xc
c000f4c1:	50                   	push   eax
c000f4c2:	e8 10 1d 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f4c7:	5a                   	pop    edx
c000f4c8:	59                   	pop    ecx
c000f4c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f4cc:	50                   	push   eax
c000f4cd:	e8 22 35 00 00       	call   c00129f4 <File::tell(unsigned long long*)>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	0f 95 c0             	setne  al
c000f4da:	31 d2                	xor    edx,edx
c000f4dc:	0f b6 c0             	movzx  eax,al
c000f4df:	f7 d8                	neg    eax
c000f4e1:	83 d2 00             	adc    edx,0x0
c000f4e4:	83 c4 08             	add    esp,0x8
c000f4e7:	f7 da                	neg    edx
c000f4e9:	5b                   	pop    ebx
c000f4ea:	c3                   	ret    
c000f4eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4f5:	83 c4 08             	add    esp,0x8
c000f4f8:	5b                   	pop    ebx
c000f4f9:	c3                   	ret    

c000f4fa <sysCallSizeFromFilename(regs*)>:
c000f4fa:	57                   	push   edi
c000f4fb:	56                   	push   esi
c000f4fc:	53                   	push   ebx
c000f4fd:	83 ec 10             	sub    esp,0x10
c000f500:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f504:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f507:	83 ff 02             	cmp    edi,0x2
c000f50a:	76 56                	jbe    c000f562 <sysCallSizeFromFilename(regs*)+0x68>
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	68 14 01 00 00       	push   0x114
c000f514:	e8 35 2f 00 00       	call   c001244e <operator new(unsigned long)>
c000f519:	83 c4 0c             	add    esp,0xc
c000f51c:	89 c3                	mov    ebx,eax
c000f51e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f523:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f526:	57                   	push   edi
c000f527:	53                   	push   ebx
c000f528:	e8 4f 33 00 00       	call   c001287c <File::File(char const*, Process*)>
c000f52d:	83 c4 0c             	add    esp,0xc
c000f530:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f534:	50                   	push   eax
c000f535:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f538:	53                   	push   ebx
c000f539:	e8 4e 36 00 00       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c000f53e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f541:	89 c6                	mov    esi,eax
c000f543:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f545:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f548:	83 c4 10             	add    esp,0x10
c000f54b:	31 c0                	xor    eax,eax
c000f54d:	85 f6                	test   esi,esi
c000f54f:	0f 95 c0             	setne  al
c000f552:	31 d2                	xor    edx,edx
c000f554:	f7 d8                	neg    eax
c000f556:	83 d2 00             	adc    edx,0x0
c000f559:	83 c4 10             	add    esp,0x10
c000f55c:	f7 da                	neg    edx
c000f55e:	5b                   	pop    ebx
c000f55f:	5e                   	pop    esi
c000f560:	5f                   	pop    edi
c000f561:	c3                   	ret    
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f56a:	5b                   	pop    ebx
c000f56b:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f570:	5e                   	pop    esi
c000f571:	5f                   	pop    edi
c000f572:	c3                   	ret    

c000f573 <sysCallSize(regs*)>:
c000f573:	53                   	push   ebx
c000f574:	83 ec 18             	sub    esp,0x18
c000f577:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f57b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f57e:	83 f8 02             	cmp    eax,0x2
c000f581:	76 33                	jbe    c000f5b6 <sysCallSize(regs*)+0x43>
c000f583:	83 ec 0c             	sub    esp,0xc
c000f586:	50                   	push   eax
c000f587:	e8 4b 1c 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f58c:	83 c4 0c             	add    esp,0xc
c000f58f:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f593:	52                   	push   edx
c000f594:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f597:	50                   	push   eax
c000f598:	e8 ef 35 00 00       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c000f59d:	83 c4 10             	add    esp,0x10
c000f5a0:	85 c0                	test   eax,eax
c000f5a2:	0f 95 c0             	setne  al
c000f5a5:	31 d2                	xor    edx,edx
c000f5a7:	0f b6 c0             	movzx  eax,al
c000f5aa:	f7 d8                	neg    eax
c000f5ac:	83 d2 00             	adc    edx,0x0
c000f5af:	83 c4 18             	add    esp,0x18
c000f5b2:	f7 da                	neg    edx
c000f5b4:	5b                   	pop    ebx
c000f5b5:	c3                   	ret    
c000f5b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5c0:	83 c4 18             	add    esp,0x18
c000f5c3:	5b                   	pop    ebx
c000f5c4:	c3                   	ret    

c000f5c5 <sysCallClose(regs*)>:
c000f5c5:	53                   	push   ebx
c000f5c6:	83 ec 08             	sub    esp,0x8
c000f5c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f5d0:	83 f8 02             	cmp    eax,0x2
c000f5d3:	76 2f                	jbe    c000f604 <sysCallClose(regs*)+0x3f>
c000f5d5:	83 ec 0c             	sub    esp,0xc
c000f5d8:	50                   	push   eax
c000f5d9:	e8 f9 1b 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f5de:	89 c3                	mov    ebx,eax
c000f5e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5e3:	e8 56 33 00 00       	call   c001293e <File::close()>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	85 db                	test   ebx,ebx
c000f5ed:	74 0c                	je     c000f5fb <sysCallClose(regs*)+0x36>
c000f5ef:	83 ec 0c             	sub    esp,0xc
c000f5f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5f4:	53                   	push   ebx
c000f5f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f5f8:	83 c4 10             	add    esp,0x10
c000f5fb:	31 c0                	xor    eax,eax
c000f5fd:	31 d2                	xor    edx,edx
c000f5ff:	83 c4 08             	add    esp,0x8
c000f602:	5b                   	pop    ebx
c000f603:	c3                   	ret    
c000f604:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f609:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f60e:	83 c4 08             	add    esp,0x8
c000f611:	5b                   	pop    ebx
c000f612:	c3                   	ret    

c000f613 <sysCallOpenDir(regs*)>:
c000f613:	56                   	push   esi
c000f614:	53                   	push   ebx
c000f615:	53                   	push   ebx
c000f616:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f61a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f61d:	85 f6                	test   esi,esi
c000f61f:	74 51                	je     c000f672 <sysCallOpenDir(regs*)+0x5f>
c000f621:	83 ec 0c             	sub    esp,0xc
c000f624:	68 14 01 00 00       	push   0x114
c000f629:	e8 20 2e 00 00       	call   c001244e <operator new(unsigned long)>
c000f62e:	83 c4 0c             	add    esp,0xc
c000f631:	89 c6                	mov    esi,eax
c000f633:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f638:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f63b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f63e:	56                   	push   esi
c000f63f:	e8 fa 36 00 00       	call   c0012d3e <Directory::Directory(char const*, Process*)>
c000f644:	89 34 24             	mov    DWORD PTR [esp],esi
c000f647:	e8 56 37 00 00       	call   c0012da2 <Directory::open()>
c000f64c:	83 c4 10             	add    esp,0x10
c000f64f:	85 c0                	test   eax,eax
c000f651:	75 1f                	jne    c000f672 <sysCallOpenDir(regs*)+0x5f>
c000f653:	83 ec 0c             	sub    esp,0xc
c000f656:	56                   	push   esi
c000f657:	e8 16 1a 00 00       	call   c0011072 <UnixFile::getFileDescriptor()>
c000f65c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f65f:	83 c4 10             	add    esp,0x10
c000f662:	89 02                	mov    DWORD PTR [edx],eax
c000f664:	c1 f8 1f             	sar    eax,0x1f
c000f667:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f66a:	31 c0                	xor    eax,eax
c000f66c:	59                   	pop    ecx
c000f66d:	31 d2                	xor    edx,edx
c000f66f:	5b                   	pop    ebx
c000f670:	5e                   	pop    esi
c000f671:	c3                   	ret    
c000f672:	59                   	pop    ecx
c000f673:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f678:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f67d:	5b                   	pop    ebx
c000f67e:	5e                   	pop    esi
c000f67f:	c3                   	ret    

c000f680 <sysCallMakeDir(regs*)>:
c000f680:	56                   	push   esi
c000f681:	53                   	push   ebx
c000f682:	83 ec 10             	sub    esp,0x10
c000f685:	68 14 01 00 00       	push   0x114
c000f68a:	e8 bf 2d 00 00       	call   c001244e <operator new(unsigned long)>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	89 c3                	mov    ebx,eax
c000f694:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f699:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f69c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f6a3:	53                   	push   ebx
c000f6a4:	e8 95 36 00 00       	call   c0012d3e <Directory::Directory(char const*, Process*)>
c000f6a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ac:	e8 d1 38 00 00       	call   c0012f82 <Directory::create()>
c000f6b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6b4:	89 c6                	mov    esi,eax
c000f6b6:	e8 43 37 00 00       	call   c0012dfe <Directory::close()>
c000f6bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f6bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f6c3:	31 c0                	xor    eax,eax
c000f6c5:	85 f6                	test   esi,esi
c000f6c7:	0f 95 c0             	setne  al
c000f6ca:	31 d2                	xor    edx,edx
c000f6cc:	f7 d8                	neg    eax
c000f6ce:	83 d2 00             	adc    edx,0x0
c000f6d1:	83 c4 14             	add    esp,0x14
c000f6d4:	f7 da                	neg    edx
c000f6d6:	5b                   	pop    ebx
c000f6d7:	5e                   	pop    esi
c000f6d8:	c3                   	ret    

c000f6d9 <sysCallCloseDir(regs*)>:
c000f6d9:	53                   	push   ebx
c000f6da:	83 ec 08             	sub    esp,0x8
c000f6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f6e4:	83 f8 02             	cmp    eax,0x2
c000f6e7:	76 2f                	jbe    c000f718 <sysCallCloseDir(regs*)+0x3f>
c000f6e9:	83 ec 0c             	sub    esp,0xc
c000f6ec:	50                   	push   eax
c000f6ed:	e8 e5 1a 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f6f2:	89 c3                	mov    ebx,eax
c000f6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6f7:	e8 02 37 00 00       	call   c0012dfe <Directory::close()>
c000f6fc:	83 c4 10             	add    esp,0x10
c000f6ff:	85 db                	test   ebx,ebx
c000f701:	74 0c                	je     c000f70f <sysCallCloseDir(regs*)+0x36>
c000f703:	83 ec 0c             	sub    esp,0xc
c000f706:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f708:	53                   	push   ebx
c000f709:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f70c:	83 c4 10             	add    esp,0x10
c000f70f:	31 c0                	xor    eax,eax
c000f711:	31 d2                	xor    edx,edx
c000f713:	83 c4 08             	add    esp,0x8
c000f716:	5b                   	pop    ebx
c000f717:	c3                   	ret    
c000f718:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f71d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f722:	83 c4 08             	add    esp,0x8
c000f725:	5b                   	pop    ebx
c000f726:	c3                   	ret    

c000f727 <sysCallWait(regs*)>:
c000f727:	83 ec 10             	sub    esp,0x10
c000f72a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f72e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f731:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f734:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f737:	e8 24 f2 ff ff       	call   c000e960 <waitTask(int, int*, int)>
c000f73c:	83 c4 1c             	add    esp,0x1c
c000f73f:	99                   	cdq    
c000f740:	c3                   	ret    

c000f741 <sysCallFork(regs*)>:
c000f741:	83 ec 18             	sub    esp,0x18
c000f744:	68 cf 92 03 c0       	push   0xc00392cf
c000f749:	e8 50 d7 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000f74e:	58                   	pop    eax
c000f74f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f753:	e8 d6 ef ff ff       	call   c000e72e <forkProcess(regs*)>
c000f758:	83 c4 1c             	add    esp,0x1c
c000f75b:	99                   	cdq    
c000f75c:	c3                   	ret    

c000f75d <sysCallExecve(regs*)>:
c000f75d:	53                   	push   ebx
c000f75e:	81 ec 24 01 00 00    	sub    esp,0x124
c000f764:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f76b:	68 dd 92 03 c0       	push   0xc00392dd
c000f770:	e8 29 d7 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000f775:	83 c4 0c             	add    esp,0xc
c000f778:	68 00 01 00 00       	push   0x100
c000f77d:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f781:	50                   	push   eax
c000f782:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f787:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f78a:	e8 5e 34 00 00       	call   c0012bed <getcwd(Process*, char*, int)>
c000f78f:	83 c4 0c             	add    esp,0xc
c000f792:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f795:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f798:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f79b:	e8 f4 f2 ff ff       	call   c000ea94 <execveProcess(char const*, char* const*, char* const*)>
c000f7a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f7aa:	81 c4 28 01 00 00    	add    esp,0x128
c000f7b0:	5b                   	pop    ebx
c000f7b1:	c3                   	ret    

c000f7b2 <sysCallRmdir(regs*)>:
c000f7b2:	56                   	push   esi
c000f7b3:	53                   	push   ebx
c000f7b4:	83 ec 10             	sub    esp,0x10
c000f7b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7bb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f7be:	68 14 01 00 00       	push   0x114
c000f7c3:	e8 86 2c 00 00       	call   c001244e <operator new(unsigned long)>
c000f7c8:	83 c4 0c             	add    esp,0xc
c000f7cb:	89 c3                	mov    ebx,eax
c000f7cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7d5:	56                   	push   esi
c000f7d6:	53                   	push   ebx
c000f7d7:	e8 a0 30 00 00       	call   c001287c <File::File(char const*, Process*)>
c000f7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7df:	e8 74 32 00 00       	call   c0012a58 <File::unlink()>
c000f7e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7e7:	89 c6                	mov    esi,eax
c000f7e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f7eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f7ee:	31 c0                	xor    eax,eax
c000f7f0:	85 f6                	test   esi,esi
c000f7f2:	0f 95 c0             	setne  al
c000f7f5:	31 d2                	xor    edx,edx
c000f7f7:	f7 d8                	neg    eax
c000f7f9:	83 d2 00             	adc    edx,0x0
c000f7fc:	83 c4 14             	add    esp,0x14
c000f7ff:	f7 da                	neg    edx
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	c3                   	ret    

c000f804 <sysCallUnlink(regs*)>:
c000f804:	56                   	push   esi
c000f805:	53                   	push   ebx
c000f806:	83 ec 10             	sub    esp,0x10
c000f809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f80d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f810:	68 14 01 00 00       	push   0x114
c000f815:	e8 34 2c 00 00       	call   c001244e <operator new(unsigned long)>
c000f81a:	83 c4 0c             	add    esp,0xc
c000f81d:	89 c3                	mov    ebx,eax
c000f81f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f824:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f827:	56                   	push   esi
c000f828:	53                   	push   ebx
c000f829:	e8 4e 30 00 00       	call   c001287c <File::File(char const*, Process*)>
c000f82e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f831:	e8 22 32 00 00       	call   c0012a58 <File::unlink()>
c000f836:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f839:	89 c6                	mov    esi,eax
c000f83b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f83d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f840:	31 c0                	xor    eax,eax
c000f842:	85 f6                	test   esi,esi
c000f844:	0f 95 c0             	setne  al
c000f847:	31 d2                	xor    edx,edx
c000f849:	f7 d8                	neg    eax
c000f84b:	83 d2 00             	adc    edx,0x0
c000f84e:	83 c4 14             	add    esp,0x14
c000f851:	f7 da                	neg    edx
c000f853:	5b                   	pop    ebx
c000f854:	5e                   	pop    esi
c000f855:	c3                   	ret    

c000f856 <sysCallGetArgv(regs*)>:
c000f856:	83 ec 0c             	sub    esp,0xc
c000f859:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f85d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f860:	85 c0                	test   eax,eax
c000f862:	78 2b                	js     c000f88f <sysCallGetArgv(regs*)+0x39>
c000f864:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f86a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f86d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f873:	7d 1a                	jge    c000f88f <sysCallGetArgv(regs*)+0x39>
c000f875:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f87c:	85 c0                	test   eax,eax
c000f87e:	74 17                	je     c000f897 <sysCallGetArgv(regs*)+0x41>
c000f880:	83 ec 08             	sub    esp,0x8
c000f883:	50                   	push   eax
c000f884:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f887:	e8 68 0f ff ff       	call   c00007f4 <strcpy>
c000f88c:	83 c4 10             	add    esp,0x10
c000f88f:	31 c0                	xor    eax,eax
c000f891:	31 d2                	xor    edx,edx
c000f893:	83 c4 0c             	add    esp,0xc
c000f896:	c3                   	ret    
c000f897:	b8 01 00 00 00       	mov    eax,0x1
c000f89c:	31 d2                	xor    edx,edx
c000f89e:	83 c4 0c             	add    esp,0xc
c000f8a1:	c3                   	ret    

c000f8a2 <sysCallTTYName(regs*)>:
c000f8a2:	56                   	push   esi
c000f8a3:	53                   	push   ebx
c000f8a4:	53                   	push   ebx
c000f8a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8a9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f8ac:	85 c0                	test   eax,eax
c000f8ae:	74 58                	je     c000f908 <sysCallTTYName(regs*)+0x66>
c000f8b0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f8b3:	83 f8 02             	cmp    eax,0x2
c000f8b6:	77 3e                	ja     c000f8f6 <sysCallTTYName(regs*)+0x54>
c000f8b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f8bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8c0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f8c6:	85 db                	test   ebx,ebx
c000f8c8:	74 3e                	je     c000f908 <sysCallTTYName(regs*)+0x66>
c000f8ca:	83 ec 0c             	sub    esp,0xc
c000f8cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8cf:	53                   	push   ebx
c000f8d0:	ff 10                	call   DWORD PTR [eax]
c000f8d2:	83 c4 10             	add    esp,0x10
c000f8d5:	84 c0                	test   al,al
c000f8d7:	74 3a                	je     c000f913 <sysCallTTYName(regs*)+0x71>
c000f8d9:	83 ec 08             	sub    esp,0x8
c000f8dc:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f8e2:	53                   	push   ebx
c000f8e3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f8e6:	e8 09 0f ff ff       	call   c00007f4 <strcpy>
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	31 c0                	xor    eax,eax
c000f8f0:	59                   	pop    ecx
c000f8f1:	31 d2                	xor    edx,edx
c000f8f3:	5b                   	pop    ebx
c000f8f4:	5e                   	pop    esi
c000f8f5:	c3                   	ret    
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	50                   	push   eax
c000f8fa:	e8 d8 18 00 00       	call   c00111d7 <getFromFileDescriptor(int)>
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	89 c3                	mov    ebx,eax
c000f904:	85 db                	test   ebx,ebx
c000f906:	75 c2                	jne    c000f8ca <sysCallTTYName(regs*)+0x28>
c000f908:	59                   	pop    ecx
c000f909:	b8 01 00 00 00       	mov    eax,0x1
c000f90e:	31 d2                	xor    edx,edx
c000f910:	5b                   	pop    ebx
c000f911:	5e                   	pop    esi
c000f912:	c3                   	ret    
c000f913:	59                   	pop    ecx
c000f914:	b8 02 00 00 00       	mov    eax,0x2
c000f919:	31 d2                	xor    edx,edx
c000f91b:	5b                   	pop    ebx
c000f91c:	5e                   	pop    esi
c000f91d:	c3                   	ret    

c000f91e <sysCallGetEnv(regs*)>:
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f925:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f928:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f92b:	85 c9                	test   ecx,ecx
c000f92d:	75 0c                	jne    c000f93b <sysCallGetEnv(regs*)+0x1d>
c000f92f:	85 d2                	test   edx,edx
c000f931:	74 14                	je     c000f947 <sysCallGetEnv(regs*)+0x29>
c000f933:	31 c0                	xor    eax,eax
c000f935:	31 d2                	xor    edx,edx
c000f937:	83 c4 0c             	add    esp,0xc
c000f93a:	c3                   	ret    
c000f93b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f93e:	85 d2                	test   edx,edx
c000f940:	74 1b                	je     c000f95d <sysCallGetEnv(regs*)+0x3f>
c000f942:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f945:	eb ec                	jmp    c000f933 <sysCallGetEnv(regs*)+0x15>
c000f947:	83 ec 0c             	sub    esp,0xc
c000f94a:	68 28 93 03 c0       	push   0xc0039328
c000f94f:	e8 ad 0d ff ff       	call   c0000701 <strlen>
c000f954:	83 c4 10             	add    esp,0x10
c000f957:	31 d2                	xor    edx,edx
c000f959:	83 c4 0c             	add    esp,0xc
c000f95c:	c3                   	ret    
c000f95d:	83 ec 08             	sub    esp,0x8
c000f960:	68 28 93 03 c0       	push   0xc0039328
c000f965:	50                   	push   eax
c000f966:	e8 89 0e ff ff       	call   c00007f4 <strcpy>
c000f96b:	83 c4 10             	add    esp,0x10
c000f96e:	eb c3                	jmp    c000f933 <sysCallGetEnv(regs*)+0x15>

c000f970 <sysCallUSleep(regs*)>:
c000f970:	83 ec 14             	sub    esp,0x14
c000f973:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f97c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f983:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f986:	01 ca                	add    edx,ecx
c000f988:	52                   	push   edx
c000f989:	50                   	push   eax
c000f98a:	e8 6a f0 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c000f98f:	31 c0                	xor    eax,eax
c000f991:	31 d2                	xor    edx,edx
c000f993:	83 c4 1c             	add    esp,0x1c
c000f996:	c3                   	ret    

c000f997 <sysCallSpawn(regs*)>:
c000f997:	56                   	push   esi
c000f998:	53                   	push   ebx
c000f999:	53                   	push   ebx
c000f99a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f99e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f9a1:	85 f6                	test   esi,esi
c000f9a3:	75 08                	jne    c000f9ad <sysCallSpawn(regs*)+0x16>
c000f9a5:	59                   	pop    ecx
c000f9a6:	31 c0                	xor    eax,eax
c000f9a8:	31 d2                	xor    edx,edx
c000f9aa:	5b                   	pop    ebx
c000f9ab:	5e                   	pop    esi
c000f9ac:	c3                   	ret    
c000f9ad:	83 ec 0c             	sub    esp,0xc
c000f9b0:	68 ed 92 03 c0       	push   0xc00392ed
c000f9b5:	e8 e4 d4 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000f9ba:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f9c1:	e8 88 2a 00 00       	call   c001244e <operator new(unsigned long)>
c000f9c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f9c9:	89 c6                	mov    esi,eax
c000f9cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f9d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f9d6:	56                   	push   esi
c000f9d7:	e8 0c e6 ff ff       	call   c000dfe8 <Process::Process(char const*, Process*, char**)>
c000f9dc:	83 c4 20             	add    esp,0x20
c000f9df:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f9e6:	75 bd                	jne    c000f9a5 <sysCallSpawn(regs*)+0xe>
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 f8 92 03 c0       	push   0xc00392f8
c000f9f0:	e8 a9 d4 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000f9f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9f8:	e8 51 eb ff ff       	call   c000e54e <Process::createUserThread()>
c000f9fd:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9ff:	83 c4 10             	add    esp,0x10
c000fa02:	99                   	cdq    
c000fa03:	59                   	pop    ecx
c000fa04:	5b                   	pop    ebx
c000fa05:	5e                   	pop    esi
c000fa06:	c3                   	ret    

c000fa07 <sysAppSettings(regs*)>:
c000fa07:	53                   	push   ebx
c000fa08:	83 ec 08             	sub    esp,0x8
c000fa0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000fa12:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000fa18:	25 e0 1f 00 00       	and    eax,0x1fe0
c000fa1d:	66 3d c0 09          	cmp    ax,0x9c0
c000fa21:	75 2f                	jne    c000fa52 <sysAppSettings(regs*)+0x4b>
c000fa23:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000fa29:	83 e0 1f             	and    eax,0x1f
c000fa2c:	3c 01                	cmp    al,0x1
c000fa2e:	74 2e                	je     c000fa5e <sysAppSettings(regs*)+0x57>
c000fa30:	3c 07                	cmp    al,0x7
c000fa32:	0f 84 bd 00 00 00    	je     c000faf5 <sysAppSettings(regs*)+0xee>
c000fa38:	84 c0                	test   al,al
c000fa3a:	0f 84 dc 00 00 00    	je     c000fb1c <sysAppSettings(regs*)+0x115>
c000fa40:	3c 08                	cmp    al,0x8
c000fa42:	74 6d                	je     c000fab1 <sysAppSettings(regs*)+0xaa>
c000fa44:	0f b6 c0             	movzx  eax,al
c000fa47:	83 c4 08             	add    esp,0x8
c000fa4a:	05 e8 03 00 00       	add    eax,0x3e8
c000fa4f:	5b                   	pop    ebx
c000fa50:	99                   	cdq    
c000fa51:	c3                   	ret    
c000fa52:	b8 01 00 00 00       	mov    eax,0x1
c000fa57:	31 d2                	xor    edx,edx
c000fa59:	83 c4 08             	add    esp,0x8
c000fa5c:	5b                   	pop    ebx
c000fa5d:	c3                   	ret    
c000fa5e:	51                   	push   ecx
c000fa5f:	68 00 01 00 00       	push   0x100
c000fa64:	6a 00                	push   0x0
c000fa66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa6e:	83 c0 0c             	add    eax,0xc
c000fa71:	50                   	push   eax
c000fa72:	e8 61 0c ff ff       	call   c00006d8 <memset>
c000fa77:	83 c4 0c             	add    esp,0xc
c000fa7a:	68 ff 00 00 00       	push   0xff
c000fa7f:	53                   	push   ebx
c000fa80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa88:	83 c0 0c             	add    eax,0xc
c000fa8b:	50                   	push   eax
c000fa8c:	e8 d0 0b ff ff       	call   c0000661 <memcpy>
c000fa91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa96:	5b                   	pop    ebx
c000fa97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa9a:	5a                   	pop    edx
c000fa9b:	8d 50 0c             	lea    edx,[eax+0xc]
c000fa9e:	52                   	push   edx
c000fa9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000faa5:	e8 ee 09 00 00       	call   c0010498 <VgaText::setTitle(char*)>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	31 c0                	xor    eax,eax
c000faaf:	eb a6                	jmp    c000fa57 <sysAppSettings(regs*)+0x50>
c000fab1:	83 ec 08             	sub    esp,0x8
c000fab4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000faba:	83 e0 0f             	and    eax,0xf
c000fabd:	50                   	push   eax
c000fabe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fac3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fac6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000facc:	e8 b7 09 00 00       	call   c0010488 <VgaText::setTitleColour(VgaColour)>
c000fad1:	58                   	pop    eax
c000fad2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fad8:	5a                   	pop    edx
c000fad9:	c1 e8 04             	shr    eax,0x4
c000fadc:	83 e0 0f             	and    eax,0xf
c000fadf:	50                   	push   eax
c000fae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fae5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000faee:	e8 85 09 00 00       	call   c0010478 <VgaText::setTitleTextColour(VgaColour)>
c000faf3:	eb b5                	jmp    c000faaa <sysAppSettings(regs*)+0xa3>
c000faf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fafa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fafd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fb03:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000fb09:	c0 e8 06             	shr    al,0x6
c000fb0c:	83 e0 01             	and    eax,0x1
c000fb0f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fb15:	31 c0                	xor    eax,eax
c000fb17:	e9 3b ff ff ff       	jmp    c000fa57 <sysAppSettings(regs*)+0x50>
c000fb1c:	b8 02 00 00 00       	mov    eax,0x2
c000fb21:	e9 31 ff ff ff       	jmp    c000fa57 <sysAppSettings(regs*)+0x50>

c000fb26 <sysSetFatAttrib(regs*)>:
c000fb26:	57                   	push   edi
c000fb27:	56                   	push   esi
c000fb28:	53                   	push   ebx
c000fb29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb2d:	83 ec 0c             	sub    esp,0xc
c000fb30:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fb33:	68 14 01 00 00       	push   0x114
c000fb38:	e8 11 29 00 00       	call   c001244e <operator new(unsigned long)>
c000fb3d:	83 c4 0c             	add    esp,0xc
c000fb40:	89 c3                	mov    ebx,eax
c000fb42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb47:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fb4a:	57                   	push   edi
c000fb4b:	53                   	push   ebx
c000fb4c:	e8 2b 2d 00 00       	call   c001287c <File::File(char const*, Process*)>
c000fb51:	83 c4 0c             	add    esp,0xc
c000fb54:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fb57:	0f b6 d4             	movzx  edx,ah
c000fb5a:	0f b6 c0             	movzx  eax,al
c000fb5d:	52                   	push   edx
c000fb5e:	50                   	push   eax
c000fb5f:	53                   	push   ebx
c000fb60:	e8 8d 2f 00 00       	call   c0012af2 <File::chfatattr(unsigned char, unsigned char)>
c000fb65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb68:	89 c6                	mov    esi,eax
c000fb6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	31 c0                	xor    eax,eax
c000fb74:	5b                   	pop    ebx
c000fb75:	85 f6                	test   esi,esi
c000fb77:	5e                   	pop    esi
c000fb78:	0f 95 c0             	setne  al
c000fb7b:	5f                   	pop    edi
c000fb7c:	31 d2                	xor    edx,edx
c000fb7e:	f7 d8                	neg    eax
c000fb80:	83 d2 00             	adc    edx,0x0
c000fb83:	f7 da                	neg    edx
c000fb85:	c3                   	ret    

c000fb86 <sysPanic(regs*)>:
c000fb86:	83 ec 18             	sub    esp,0x18
c000fb89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb8d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fb90:	e8 27 d4 ff ff       	call   c000cfbc <panic(char const*)>
c000fb95:	c7 04 24 05 93 03 c0 	mov    DWORD PTR [esp],0xc0039305
c000fb9c:	e8 1b d4 ff ff       	call   c000cfbc <panic(char const*)>
c000fba1:	b8 01 00 00 00       	mov    eax,0x1
c000fba6:	31 d2                	xor    edx,edx
c000fba8:	83 c4 1c             	add    esp,0x1c
c000fbab:	c3                   	ret    

c000fbac <sysPipe(regs*)>:
c000fbac:	57                   	push   edi
c000fbad:	56                   	push   esi
c000fbae:	53                   	push   ebx
c000fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbb3:	83 ec 0c             	sub    esp,0xc
c000fbb6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fbb9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fbbc:	6a 20                	push   0x20
c000fbbe:	e8 8b 28 00 00       	call   c001244e <operator new(unsigned long)>
c000fbc3:	89 c3                	mov    ebx,eax
c000fbc5:	58                   	pop    eax
c000fbc6:	5a                   	pop    edx
c000fbc7:	68 00 50 00 00       	push   0x5000
c000fbcc:	53                   	push   ebx
c000fbcd:	e8 26 e3 ff ff       	call   c000def8 <Pipe::Pipe(int)>
c000fbd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd5:	e8 98 14 00 00       	call   c0011072 <UnixFile::getFileDescriptor()>
c000fbda:	89 07                	mov    DWORD PTR [edi],eax
c000fbdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbdf:	e8 8e 14 00 00       	call   c0011072 <UnixFile::getFileDescriptor()>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	89 06                	mov    DWORD PTR [esi],eax
c000fbe9:	31 d2                	xor    edx,edx
c000fbeb:	5b                   	pop    ebx
c000fbec:	31 c0                	xor    eax,eax
c000fbee:	5e                   	pop    esi
c000fbef:	5f                   	pop    edi
c000fbf0:	c3                   	ret    

c000fbf1 <sysGetUnixTime(regs*)>:
c000fbf1:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000fbf6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fbfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc00:	e9 3f 36 00 00       	jmp    c0013244 <Clock::timeInSecondsLocal()>

c000fc05 <string_ends_with(char const*, char const*)>:
c000fc05:	57                   	push   edi
c000fc06:	56                   	push   esi
c000fc07:	53                   	push   ebx
c000fc08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc0c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	53                   	push   ebx
c000fc14:	e8 e8 0a ff ff       	call   c0000701 <strlen>
c000fc19:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc1c:	89 c6                	mov    esi,eax
c000fc1e:	e8 de 0a ff ff       	call   c0000701 <strlen>
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	39 c6                	cmp    esi,eax
c000fc28:	7d 06                	jge    c000fc30 <string_ends_with(char const*, char const*)+0x2b>
c000fc2a:	5b                   	pop    ebx
c000fc2b:	31 c0                	xor    eax,eax
c000fc2d:	5e                   	pop    esi
c000fc2e:	5f                   	pop    edi
c000fc2f:	c3                   	ret    
c000fc30:	83 ec 08             	sub    esp,0x8
c000fc33:	29 c6                	sub    esi,eax
c000fc35:	57                   	push   edi
c000fc36:	01 f3                	add    ebx,esi
c000fc38:	53                   	push   ebx
c000fc39:	e8 3c 0c ff ff       	call   c000087a <strcmp>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	85 c0                	test   eax,eax
c000fc43:	5b                   	pop    ebx
c000fc44:	0f 94 c0             	sete   al
c000fc47:	5e                   	pop    esi
c000fc48:	0f b6 c0             	movzx  eax,al
c000fc4b:	5f                   	pop    edi
c000fc4c:	c3                   	ret    

c000fc4d <setupSystemCalls()>:
c000fc4d:	c7 05 40 bc 03 c0 9a 84 01 c0 	mov    DWORD PTR ds:0xc003bc40,0xc001849a
c000fc57:	c7 05 44 bc 03 c0 5d 83 01 c0 	mov    DWORD PTR ds:0xc003bc44,0xc001835d
c000fc61:	c7 05 48 bc 03 c0 dd 83 01 c0 	mov    DWORD PTR ds:0xc003bc48,0xc00183dd
c000fc6b:	c7 05 4c bc 03 c0 32 84 01 c0 	mov    DWORD PTR ds:0xc003bc4c,0xc0018432
c000fc75:	c7 05 50 bc 03 c0 75 83 01 c0 	mov    DWORD PTR ds:0xc003bc50,0xc0018375
c000fc7f:	c7 05 54 bc 03 c0 b4 f0 00 c0 	mov    DWORD PTR ds:0xc003bc54,0xc000f0b4
c000fc89:	c7 05 58 bc 03 c0 2d f2 00 c0 	mov    DWORD PTR ds:0xc003bc58,0xc000f22d
c000fc93:	c7 05 5c bc 03 c0 4c f2 00 c0 	mov    DWORD PTR ds:0xc003bc5c,0xc000f24c
c000fc9d:	c7 05 64 bc 03 c0 c5 f5 00 c0 	mov    DWORD PTR ds:0xc003bc64,0xc000f5c5
c000fca7:	c7 05 60 bc 03 c0 ab f2 00 c0 	mov    DWORD PTR ds:0xc003bc60,0xc000f2ab
c000fcb1:	c7 05 68 bc 03 c0 13 f6 00 c0 	mov    DWORD PTR ds:0xc003bc68,0xc000f613
c000fcbb:	c7 05 6c bc 03 c0 9b f3 00 c0 	mov    DWORD PTR ds:0xc003bc6c,0xc000f39b
c000fcc5:	c7 05 70 bc 03 c0 c0 f0 00 c0 	mov    DWORD PTR ds:0xc003bc70,0xc000f0c0
c000fccf:	c7 05 74 bc 03 c0 c5 f0 00 c0 	mov    DWORD PTR ds:0xc003bc74,0xc000f0c5
c000fcd9:	c7 05 78 bc 03 c0 80 f6 00 c0 	mov    DWORD PTR ds:0xc003bc78,0xc000f680
c000fce3:	c7 05 7c bc 03 c0 d9 f6 00 c0 	mov    DWORD PTR ds:0xc003bc7c,0xc000f6d9
c000fced:	c7 05 80 bc 03 c0 5d f4 00 c0 	mov    DWORD PTR ds:0xc003bc80,0xc000f45d
c000fcf7:	c7 05 84 bc 03 c0 ae f4 00 c0 	mov    DWORD PTR ds:0xc003bc84,0xc000f4ae
c000fd01:	c7 05 88 bc 03 c0 73 f5 00 c0 	mov    DWORD PTR ds:0xc003bc88,0xc000f573
c000fd0b:	c7 05 8c bc 03 c0 ca f0 00 c0 	mov    DWORD PTR ds:0xc003bc8c,0xc000f0ca
c000fd15:	c7 05 90 bc 03 c0 27 f7 00 c0 	mov    DWORD PTR ds:0xc003bc90,0xc000f727
c000fd1f:	c7 05 94 bc 03 c0 41 f7 00 c0 	mov    DWORD PTR ds:0xc003bc94,0xc000f741
c000fd29:	c7 05 98 bc 03 c0 5d f7 00 c0 	mov    DWORD PTR ds:0xc003bc98,0xc000f75d
c000fd33:	c7 05 9c bc 03 c0 b2 f7 00 c0 	mov    DWORD PTR ds:0xc003bc9c,0xc000f7b2
c000fd3d:	c7 05 a0 bc 03 c0 04 f8 00 c0 	mov    DWORD PTR ds:0xc003bca0,0xc000f804
c000fd47:	c7 05 a4 bc 03 c0 d4 f0 00 c0 	mov    DWORD PTR ds:0xc003bca4,0xc000f0d4
c000fd51:	c7 05 a8 bc 03 c0 56 f8 00 c0 	mov    DWORD PTR ds:0xc003bca8,0xc000f856
c000fd5b:	c7 05 ac bc 03 c0 68 f2 00 c0 	mov    DWORD PTR ds:0xc003bcac,0xc000f268
c000fd65:	c7 05 b0 bc 03 c0 a2 f8 00 c0 	mov    DWORD PTR ds:0xc003bcb0,0xc000f8a2
c000fd6f:	c7 05 b4 bc 03 c0 0a f4 00 c0 	mov    DWORD PTR ds:0xc003bcb4,0xc000f40a
c000fd79:	c7 05 b8 bc 03 c0 70 f9 00 c0 	mov    DWORD PTR ds:0xc003bcb8,0xc000f970
c000fd83:	c7 05 bc bc 03 c0 fa f4 00 c0 	mov    DWORD PTR ds:0xc003bcbc,0xc000f4fa
c000fd8d:	c7 05 c0 bc 03 c0 97 f9 00 c0 	mov    DWORD PTR ds:0xc003bcc0,0xc000f997
c000fd97:	c7 05 c4 bc 03 c0 1e f9 00 c0 	mov    DWORD PTR ds:0xc003bcc4,0xc000f91e
c000fda1:	c7 05 c8 bc 03 c0 07 fa 00 c0 	mov    DWORD PTR ds:0xc003bcc8,0xc000fa07
c000fdab:	c7 05 cc bc 03 c0 e4 f0 00 c0 	mov    DWORD PTR ds:0xc003bccc,0xc000f0e4
c000fdb5:	c7 05 d0 bc 03 c0 4e f1 00 c0 	mov    DWORD PTR ds:0xc003bcd0,0xc000f14e
c000fdbf:	c7 05 d4 bc 03 c0 94 f1 00 c0 	mov    DWORD PTR ds:0xc003bcd4,0xc000f194
c000fdc9:	c7 05 d8 bc 03 c0 26 fb 00 c0 	mov    DWORD PTR ds:0xc003bcd8,0xc000fb26
c000fdd3:	c7 05 dc bc 03 c0 86 fb 00 c0 	mov    DWORD PTR ds:0xc003bcdc,0xc000fb86
c000fddd:	c7 05 e0 bc 03 c0 e5 f1 00 c0 	mov    DWORD PTR ds:0xc003bce0,0xc000f1e5
c000fde7:	c7 05 e4 bc 03 c0 ac fb 00 c0 	mov    DWORD PTR ds:0xc003bce4,0xc000fbac
c000fdf1:	c7 05 e8 bc 03 c0 f1 fb 00 c0 	mov    DWORD PTR ds:0xc003bce8,0xc000fbf1
c000fdfb:	c3                   	ret    

c000fdfc <systemCall(regs*, void*)>:
c000fdfc:	53                   	push   ebx
c000fdfd:	83 ec 08             	sub    esp,0x8
c000fe00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fe07:	83 f8 7f             	cmp    eax,0x7f
c000fe0a:	77 16                	ja     c000fe22 <systemCall(regs*, void*)+0x26>
c000fe0c:	8b 14 85 40 bc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc43c0]
c000fe13:	85 d2                	test   edx,edx
c000fe15:	74 0b                	je     c000fe22 <systemCall(regs*, void*)+0x26>
c000fe17:	83 ec 0c             	sub    esp,0xc
c000fe1a:	53                   	push   ebx
c000fe1b:	ff d2                	call   edx
c000fe1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fe20:	eb 0d                	jmp    c000fe2f <systemCall(regs*, void*)+0x33>
c000fe22:	52                   	push   edx
c000fe23:	52                   	push   edx
c000fe24:	50                   	push   eax
c000fe25:	68 14 93 03 c0       	push   0xc0039314
c000fe2a:	e8 6f d0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c000fe2f:	83 c4 10             	add    esp,0x10
c000fe32:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fe37:	31 d2                	xor    edx,edx
c000fe39:	83 c4 08             	add    esp,0x8
c000fe3c:	5b                   	pop    ebx
c000fe3d:	c3                   	ret    

c000fe3e <VgaText::isAtty()>:
c000fe3e:	b0 01                	mov    al,0x1
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <VgaText::~VgaText()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c000fe4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4e:	89 10                	mov    DWORD PTR [eax],edx
c000fe50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	50                   	push   eax
c000fe58:	e8 81 12 00 00       	call   c00110de <UnixFile::~UnixFile()>
c000fe5d:	83 c4 10             	add    esp,0x10
c000fe60:	90                   	nop
c000fe61:	83 c4 0c             	add    esp,0xc
c000fe64:	c3                   	ret    
c000fe65:	90                   	nop

c000fe66 <VgaText::~VgaText()>:
c000fe66:	83 ec 0c             	sub    esp,0xc
c000fe69:	83 ec 0c             	sub    esp,0xc
c000fe6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe70:	e8 cd ff ff ff       	call   c000fe42 <VgaText::~VgaText()>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	83 ec 08             	sub    esp,0x8
c000fe7b:	68 60 12 00 00       	push   0x1260
c000fe80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe84:	e8 d4 25 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	83 c4 0c             	add    esp,0xc
c000fe8f:	c3                   	ret    

c000fe90 <VgaText::read(unsigned long long, void*, int*)>:
c000fe90:	83 ec 10             	sub    esp,0x10
c000fe93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe9f:	e8 34 4f 00 00       	call   c0014dd8 <readKeyboard(VgaText*, char*, unsigned long)>
c000fea4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fea8:	89 02                	mov    DWORD PTR [edx],eax
c000feaa:	31 c0                	xor    eax,eax
c000feac:	83 c4 1c             	add    esp,0x1c
c000feaf:	c3                   	ret    

c000feb0 <setTerminalScrollLock(bool)>:
c000feb0:	c3                   	ret    

c000feb1 <addToTerminalCycle(VgaText*)>:
c000feb1:	8b 15 60 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be60
c000feb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000febb:	85 d2                	test   edx,edx
c000febd:	75 0c                	jne    c000fecb <addToTerminalCycle(VgaText*)+0x1a>
c000febf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fec5:	a3 60 be 03 c0       	mov    ds:0xc003be60,eax
c000feca:	c3                   	ret    
c000fecb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fed1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fed7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fedd:	c3                   	ret    

c000fede <installVgaTextImplementation()>:
c000fede:	83 ec 10             	sub    esp,0x10
c000fee1:	6a 20                	push   0x20
c000fee3:	6a 00                	push   0x0
c000fee5:	68 40 be 03 c0       	push   0xc003be40
c000feea:	e8 e9 07 ff ff       	call   c00006d8 <memset>
c000feef:	83 c4 1c             	add    esp,0x1c
c000fef2:	c3                   	ret    

c000fef3 <scrollTerminalScrollLock(int)>:
c000fef3:	c3                   	ret    

c000fef4 <VgaText::load()>:
c000fef4:	53                   	push   ebx
c000fef5:	31 c0                	xor    eax,eax
c000fef7:	83 ec 58             	sub    esp,0x58
c000fefa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fefe:	89 e2                	mov    edx,esp
c000ff00:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ff04:	40                   	inc    eax
c000ff05:	83 f8 50             	cmp    eax,0x50
c000ff08:	75 f6                	jne    c000ff00 <VgaText::load()+0xc>
c000ff0a:	31 c0                	xor    eax,eax
c000ff0c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000ff13:	84 c9                	test   cl,cl
c000ff15:	74 06                	je     c000ff1d <VgaText::load()+0x29>
c000ff17:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ff1a:	40                   	inc    eax
c000ff1b:	eb ef                	jmp    c000ff0c <VgaText::load()+0x18>
c000ff1d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ff23:	85 c0                	test   eax,eax
c000ff25:	74 09                	je     c000ff30 <VgaText::load()+0x3c>
c000ff27:	51                   	push   ecx
c000ff28:	51                   	push   ecx
c000ff29:	52                   	push   edx
c000ff2a:	53                   	push   ebx
c000ff2b:	ff d0                	call   eax
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ff36:	85 c0                	test   eax,eax
c000ff38:	74 09                	je     c000ff43 <VgaText::load()+0x4f>
c000ff3a:	83 ec 0c             	sub    esp,0xc
c000ff3d:	53                   	push   ebx
c000ff3e:	ff d0                	call   eax
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	83 c4 58             	add    esp,0x58
c000ff46:	5b                   	pop    ebx
c000ff47:	c3                   	ret    

c000ff48 <VgaText::updateCursor()>:
c000ff48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff4c:	39 05 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,eax
c000ff52:	75 0c                	jne    c000ff60 <VgaText::updateCursor()+0x18>
c000ff54:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	74 02                	je     c000ff60 <VgaText::updateCursor()+0x18>
c000ff5e:	ff e0                	jmp    eax
c000ff60:	c3                   	ret    
c000ff61:	90                   	nop

c000ff62 <VgaText::showCursor(bool)>:
c000ff62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff6a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <VgaText::disableBlink(bool)>:
c000ff72:	56                   	push   esi
c000ff73:	53                   	push   ebx
c000ff74:	51                   	push   ecx
c000ff75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff7d:	39 1d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebx
c000ff83:	75 18                	jne    c000ff9d <VgaText::disableBlink(bool)+0x2b>
c000ff85:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ff8b:	85 c0                	test   eax,eax
c000ff8d:	74 0e                	je     c000ff9d <VgaText::disableBlink(bool)+0x2b>
c000ff8f:	89 f1                	mov    ecx,esi
c000ff91:	52                   	push   edx
c000ff92:	52                   	push   edx
c000ff93:	0f b6 d1             	movzx  edx,cl
c000ff96:	52                   	push   edx
c000ff97:	53                   	push   ebx
c000ff98:	ff d0                	call   eax
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	89 f0                	mov    eax,esi
c000ff9f:	83 f0 01             	xor    eax,0x1
c000ffa2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ffa8:	58                   	pop    eax
c000ffa9:	5b                   	pop    ebx
c000ffaa:	5e                   	pop    esi
c000ffab:	c3                   	ret    

c000ffac <VgaText::doANSI_SGR(int)>:
c000ffac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb4:	85 d2                	test   edx,edx
c000ffb6:	75 14                	jne    c000ffcc <VgaText::doANSI_SGR(int)+0x20>
c000ffb8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ffbe:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ffc4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ffca:	eb 65                	jmp    c0010031 <VgaText::doANSI_SGR(int)+0x85>
c000ffcc:	83 fa 07             	cmp    edx,0x7
c000ffcf:	75 14                	jne    c000ffe5 <VgaText::doANSI_SGR(int)+0x39>
c000ffd1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ffd7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ffdd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ffe3:	eb 4c                	jmp    c0010031 <VgaText::doANSI_SGR(int)+0x85>
c000ffe5:	83 fa 1b             	cmp    edx,0x1b
c000ffe8:	74 ce                	je     c000ffb8 <VgaText::doANSI_SGR(int)+0xc>
c000ffea:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ffed:	83 f9 07             	cmp    ecx,0x7
c000fff0:	77 09                	ja     c000fffb <VgaText::doANSI_SGR(int)+0x4f>
c000fff2:	8b 14 8d 20 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51e0]
c000fff9:	eb 20                	jmp    c001001b <VgaText::doANSI_SGR(int)+0x6f>
c000fffb:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fffe:	83 f9 07             	cmp    ecx,0x7
c0010001:	77 09                	ja     c001000c <VgaText::doANSI_SGR(int)+0x60>
c0010003:	8b 14 8d 20 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51e0]
c001000a:	eb 25                	jmp    c0010031 <VgaText::doANSI_SGR(int)+0x85>
c001000c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001000f:	83 f9 07             	cmp    ecx,0x7
c0010012:	77 0e                	ja     c0010022 <VgaText::doANSI_SGR(int)+0x76>
c0010014:	8b 14 95 d8 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5328]
c001001b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010021:	c3                   	ret    
c0010022:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010025:	83 f9 07             	cmp    ecx,0x7
c0010028:	77 0d                	ja     c0010037 <VgaText::doANSI_SGR(int)+0x8b>
c001002a:	8b 14 95 b0 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5350]
c0010031:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010037:	c3                   	ret    

c0010038 <VgaText::setDefaultBgColour(VgaColour)>:
c0010038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001003c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010040:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010046:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001004c:	c3                   	ret    
c001004d:	90                   	nop

c001004e <VgaText::setDefaultFgColour(VgaColour)>:
c001004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010056:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001005c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010062:	c3                   	ret    
c0010063:	90                   	nop

c0010064 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010064:	53                   	push   ebx
c0010065:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010069:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001006d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010071:	51                   	push   ecx
c0010072:	e8 c1 ff ff ff       	call   c0010038 <VgaText::setDefaultBgColour(VgaColour)>
c0010077:	58                   	pop    eax
c0010078:	5a                   	pop    edx
c0010079:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001007d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010081:	5b                   	pop    ebx
c0010082:	eb ca                	jmp    c001004e <VgaText::setDefaultFgColour(VgaColour)>

c0010084 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010084:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010088:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001008d:	83 e0 0f             	and    eax,0xf
c0010090:	c1 e2 04             	shl    edx,0x4
c0010093:	09 d0                	or     eax,edx
c0010095:	c3                   	ret    

c0010096 <VgaText::scrollScreen()>:
c0010096:	57                   	push   edi
c0010097:	56                   	push   esi
c0010098:	be 01 00 00 00       	mov    esi,0x1
c001009d:	53                   	push   ebx
c001009e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100a2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00100a8:	31 ff                	xor    edi,edi
c00100aa:	01 d9                	add    ecx,ebx
c00100ac:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00100af:	83 fe 17             	cmp    esi,0x17
c00100b2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00100b8:	75 28                	jne    c00100e2 <VgaText::scrollScreen()+0x4c>
c00100ba:	f7 c7 01 00 00 00    	test   edi,0x1
c00100c0:	74 1c                	je     c00100de <VgaText::scrollScreen()+0x48>
c00100c2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00100c9:	50                   	push   eax
c00100ca:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00100d1:	50                   	push   eax
c00100d2:	e8 ad ff ff ff       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c00100d7:	5a                   	pop    edx
c00100d8:	5a                   	pop    edx
c00100d9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00100dc:	eb 04                	jmp    c00100e2 <VgaText::scrollScreen()+0x4c>
c00100de:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00100e2:	47                   	inc    edi
c00100e3:	41                   	inc    ecx
c00100e4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00100ea:	75 c0                	jne    c00100ac <VgaText::scrollScreen()+0x16>
c00100ec:	46                   	inc    esi
c00100ed:	83 fe 18             	cmp    esi,0x18
c00100f0:	75 b0                	jne    c00100a2 <VgaText::scrollScreen()+0xc>
c00100f2:	39 1d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebx
c00100f8:	75 24                	jne    c001011e <VgaText::scrollScreen()+0x88>
c00100fa:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010101:	74 08                	je     c001010b <VgaText::scrollScreen()+0x75>
c0010103:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010109:	eb 13                	jmp    c001011e <VgaText::scrollScreen()+0x88>
c001010b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010111:	85 c0                	test   eax,eax
c0010113:	74 09                	je     c001011e <VgaText::scrollScreen()+0x88>
c0010115:	83 ec 0c             	sub    esp,0xc
c0010118:	53                   	push   ebx
c0010119:	ff d0                	call   eax
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010122:	5b                   	pop    ebx
c0010123:	5e                   	pop    esi
c0010124:	5f                   	pop    edi
c0010125:	e9 1e fe ff ff       	jmp    c000ff48 <VgaText::updateCursor()>

c001012a <VgaText::combineCharAndColour(char, unsigned char)>:
c001012a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001012f:	c1 e0 08             	shl    eax,0x8
c0010132:	89 c2                	mov    edx,eax
c0010134:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010139:	09 d0                	or     eax,edx
c001013b:	c3                   	ret    

c001013c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001013c:	53                   	push   ebx
c001013d:	83 ec 08             	sub    esp,0x8
c0010140:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010144:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010149:	50                   	push   eax
c001014a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001014f:	50                   	push   eax
c0010150:	e8 2f ff ff ff       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c0010155:	5a                   	pop    edx
c0010156:	0f b6 c0             	movzx  eax,al
c0010159:	5b                   	pop    ebx
c001015a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001015f:	50                   	push   eax
c0010160:	53                   	push   ebx
c0010161:	e8 c4 ff ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010166:	5a                   	pop    edx
c0010167:	5a                   	pop    edx
c0010168:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001016e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010172:	0f b7 d2             	movzx  edx,dx
c0010175:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001017a:	39 0d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ecx
c0010180:	75 14                	jne    c0010196 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010182:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010188:	85 c0                	test   eax,eax
c001018a:	74 0a                	je     c0010196 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001018c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010190:	83 c4 08             	add    esp,0x8
c0010193:	5b                   	pop    ebx
c0010194:	ff e0                	jmp    eax
c0010196:	83 c4 08             	add    esp,0x8
c0010199:	5b                   	pop    ebx
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <VgaText::getCursorX()>:
c001019c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00101a6:	c3                   	ret    
c00101a7:	90                   	nop

c00101a8 <VgaText::getCursorY()>:
c00101a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ac:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00101b2:	c3                   	ret    
c00101b3:	90                   	nop

c00101b4 <VgaText::setCursor(int, int)>:
c00101b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00101c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101c6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00101cc:	e9 77 fd ff ff       	jmp    c000ff48 <VgaText::updateCursor()>
c00101d1:	90                   	nop

c00101d2 <VgaText::setCursorX(int)>:
c00101d2:	83 ec 10             	sub    esp,0x10
c00101d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101d9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00101df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e3:	50                   	push   eax
c00101e4:	e8 cb ff ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c00101e9:	83 c4 1c             	add    esp,0x1c
c00101ec:	c3                   	ret    
c00101ed:	90                   	nop

c00101ee <VgaText::setCursorY(int)>:
c00101ee:	83 ec 10             	sub    esp,0x10
c00101f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101f9:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00101ff:	50                   	push   eax
c0010200:	e8 af ff ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c0010205:	83 c4 1c             	add    esp,0x1c
c0010208:	c3                   	ret    
c0010209:	90                   	nop

c001020a <VgaText::incrementCursor(bool)>:
c001020a:	56                   	push   esi
c001020b:	53                   	push   ebx
c001020c:	51                   	push   ecx
c001020d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010211:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010215:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001021b:	40                   	inc    eax
c001021c:	83 f8 50             	cmp    eax,0x50
c001021f:	74 08                	je     c0010229 <VgaText::incrementCursor(bool)+0x1f>
c0010221:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010227:	eb 33                	jmp    c001025c <VgaText::incrementCursor(bool)+0x52>
c0010229:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001022f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010239:	8d 50 01             	lea    edx,[eax+0x1]
c001023c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010242:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010248:	75 12                	jne    c001025c <VgaText::incrementCursor(bool)+0x52>
c001024a:	83 ec 0c             	sub    esp,0xc
c001024d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010253:	53                   	push   ebx
c0010254:	e8 3d fe ff ff       	call   c0010096 <VgaText::scrollScreen()>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	89 f0                	mov    eax,esi
c001025e:	84 c0                	test   al,al
c0010260:	74 0c                	je     c001026e <VgaText::incrementCursor(bool)+0x64>
c0010262:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010266:	5a                   	pop    edx
c0010267:	5b                   	pop    ebx
c0010268:	5e                   	pop    esi
c0010269:	e9 da fc ff ff       	jmp    c000ff48 <VgaText::updateCursor()>
c001026e:	58                   	pop    eax
c001026f:	5b                   	pop    ebx
c0010270:	5e                   	pop    esi
c0010271:	c3                   	ret    

c0010272 <VgaText::updateRAMUsageDisplay(int)>:
c0010272:	53                   	push   ebx
c0010273:	bb 0a 00 00 00       	mov    ebx,0xa
c0010278:	6a 0f                	push   0xf
c001027a:	6a 00                	push   0x0
c001027c:	e8 03 fe ff ff       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c0010281:	5a                   	pop    edx
c0010282:	59                   	pop    ecx
c0010283:	0f b6 c8             	movzx  ecx,al
c0010286:	51                   	push   ecx
c0010287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001028b:	99                   	cdq    
c001028c:	f7 fb                	idiv   ebx
c001028e:	89 d3                	mov    ebx,edx
c0010290:	83 c0 30             	add    eax,0x30
c0010293:	83 c3 30             	add    ebx,0x30
c0010296:	0f be c0             	movsx  eax,al
c0010299:	0f b6 db             	movzx  ebx,bl
c001029c:	50                   	push   eax
c001029d:	e8 88 fe ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00102a2:	5a                   	pop    edx
c00102a3:	5a                   	pop    edx
c00102a4:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00102aa:	51                   	push   ecx
c00102ab:	53                   	push   ebx
c00102ac:	e8 79 fe ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00102b1:	5b                   	pop    ebx
c00102b2:	5a                   	pop    edx
c00102b3:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00102b9:	51                   	push   ecx
c00102ba:	6a 25                	push   0x25
c00102bc:	e8 69 fe ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00102c1:	59                   	pop    ecx
c00102c2:	5b                   	pop    ebx
c00102c3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00102c9:	5b                   	pop    ebx
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <VgaText::updateDiskUsage()>:
c00102cc:	55                   	push   ebp
c00102cd:	bd 10 27 00 00       	mov    ebp,0x2710
c00102d2:	57                   	push   edi
c00102d3:	56                   	push   esi
c00102d4:	53                   	push   ebx
c00102d5:	6a 0f                	push   0xf
c00102d7:	6a 00                	push   0x0
c00102d9:	e8 a6 fd ff ff       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c00102de:	5a                   	pop    edx
c00102df:	0f b6 d8             	movzx  ebx,al
c00102e2:	59                   	pop    ecx
c00102e3:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c00102e8:	53                   	push   ebx
c00102e9:	b9 0a 00 00 00       	mov    ecx,0xa
c00102ee:	99                   	cdq    
c00102ef:	f7 fd                	idiv   ebp
c00102f1:	99                   	cdq    
c00102f2:	f7 f9                	idiv   ecx
c00102f4:	8d 42 30             	lea    eax,[edx+0x30]
c00102f7:	0f b6 c0             	movzx  eax,al
c00102fa:	50                   	push   eax
c00102fb:	e8 2a fe ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010300:	5e                   	pop    esi
c0010301:	5f                   	pop    edi
c0010302:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010308:	bf e8 03 00 00       	mov    edi,0x3e8
c001030d:	53                   	push   ebx
c001030e:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c0010313:	99                   	cdq    
c0010314:	f7 ff                	idiv   edi
c0010316:	99                   	cdq    
c0010317:	f7 f9                	idiv   ecx
c0010319:	8d 42 30             	lea    eax,[edx+0x30]
c001031c:	0f b6 c0             	movzx  eax,al
c001031f:	50                   	push   eax
c0010320:	e8 05 fe ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010325:	5a                   	pop    edx
c0010326:	5e                   	pop    esi
c0010327:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001032d:	be 64 00 00 00       	mov    esi,0x64
c0010332:	53                   	push   ebx
c0010333:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c0010338:	99                   	cdq    
c0010339:	f7 fe                	idiv   esi
c001033b:	99                   	cdq    
c001033c:	f7 f9                	idiv   ecx
c001033e:	8d 42 30             	lea    eax,[edx+0x30]
c0010341:	0f b6 c0             	movzx  eax,al
c0010344:	50                   	push   eax
c0010345:	e8 e0 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c001034a:	5a                   	pop    edx
c001034b:	5a                   	pop    edx
c001034c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010352:	53                   	push   ebx
c0010353:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c0010358:	99                   	cdq    
c0010359:	f7 f9                	idiv   ecx
c001035b:	99                   	cdq    
c001035c:	f7 f9                	idiv   ecx
c001035e:	8d 42 30             	lea    eax,[edx+0x30]
c0010361:	0f b6 c0             	movzx  eax,al
c0010364:	50                   	push   eax
c0010365:	e8 c0 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c001036a:	5a                   	pop    edx
c001036b:	5a                   	pop    edx
c001036c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010372:	53                   	push   ebx
c0010373:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c0010378:	99                   	cdq    
c0010379:	f7 f9                	idiv   ecx
c001037b:	8d 42 30             	lea    eax,[edx+0x30]
c001037e:	0f b6 c0             	movzx  eax,al
c0010381:	50                   	push   eax
c0010382:	e8 a3 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010387:	5a                   	pop    edx
c0010388:	5a                   	pop    edx
c0010389:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001038f:	53                   	push   ebx
c0010390:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c0010395:	99                   	cdq    
c0010396:	f7 fd                	idiv   ebp
c0010398:	99                   	cdq    
c0010399:	f7 f9                	idiv   ecx
c001039b:	8d 42 30             	lea    eax,[edx+0x30]
c001039e:	0f b6 c0             	movzx  eax,al
c00103a1:	50                   	push   eax
c00103a2:	e8 83 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00103a7:	5d                   	pop    ebp
c00103a8:	5a                   	pop    edx
c00103a9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00103af:	53                   	push   ebx
c00103b0:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103b5:	99                   	cdq    
c00103b6:	f7 ff                	idiv   edi
c00103b8:	99                   	cdq    
c00103b9:	f7 f9                	idiv   ecx
c00103bb:	8d 42 30             	lea    eax,[edx+0x30]
c00103be:	0f b6 c0             	movzx  eax,al
c00103c1:	50                   	push   eax
c00103c2:	e8 63 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00103c7:	5f                   	pop    edi
c00103c8:	5d                   	pop    ebp
c00103c9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00103cf:	53                   	push   ebx
c00103d0:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103d5:	99                   	cdq    
c00103d6:	f7 fe                	idiv   esi
c00103d8:	99                   	cdq    
c00103d9:	f7 f9                	idiv   ecx
c00103db:	8d 42 30             	lea    eax,[edx+0x30]
c00103de:	0f b6 c0             	movzx  eax,al
c00103e1:	50                   	push   eax
c00103e2:	e8 43 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c00103e7:	5a                   	pop    edx
c00103e8:	5e                   	pop    esi
c00103e9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00103ef:	53                   	push   ebx
c00103f0:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103f5:	99                   	cdq    
c00103f6:	f7 f9                	idiv   ecx
c00103f8:	99                   	cdq    
c00103f9:	f7 f9                	idiv   ecx
c00103fb:	8d 42 30             	lea    eax,[edx+0x30]
c00103fe:	0f b6 c0             	movzx  eax,al
c0010401:	50                   	push   eax
c0010402:	e8 23 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010407:	5f                   	pop    edi
c0010408:	5d                   	pop    ebp
c0010409:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001040f:	53                   	push   ebx
c0010410:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c0010415:	99                   	cdq    
c0010416:	f7 f9                	idiv   ecx
c0010418:	83 c2 30             	add    edx,0x30
c001041b:	0f b6 d2             	movzx  edx,dl
c001041e:	52                   	push   edx
c001041f:	e8 06 fd ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c0010424:	5a                   	pop    edx
c0010425:	59                   	pop    ecx
c0010426:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001042c:	5b                   	pop    ebx
c001042d:	5e                   	pop    esi
c001042e:	5f                   	pop    edi
c001042f:	5d                   	pop    ebp
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <VgaText::updateTitle()>:
c0010432:	53                   	push   ebx
c0010433:	31 c0                	xor    eax,eax
c0010435:	83 ec 58             	sub    esp,0x58
c0010438:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001043c:	89 e1                	mov    ecx,esp
c001043e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010442:	40                   	inc    eax
c0010443:	83 f8 50             	cmp    eax,0x50
c0010446:	75 f6                	jne    c001043e <VgaText::updateTitle()+0xc>
c0010448:	31 c0                	xor    eax,eax
c001044a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010451:	84 db                	test   bl,bl
c0010453:	74 06                	je     c001045b <VgaText::updateTitle()+0x29>
c0010455:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010458:	40                   	inc    eax
c0010459:	eb ef                	jmp    c001044a <VgaText::updateTitle()+0x18>
c001045b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010461:	85 c0                	test   eax,eax
c0010463:	74 09                	je     c001046e <VgaText::updateTitle()+0x3c>
c0010465:	53                   	push   ebx
c0010466:	53                   	push   ebx
c0010467:	51                   	push   ecx
c0010468:	52                   	push   edx
c0010469:	ff d0                	call   eax
c001046b:	83 c4 10             	add    esp,0x10
c001046e:	e8 59 fe ff ff       	call   c00102cc <VgaText::updateDiskUsage()>
c0010473:	83 c4 58             	add    esp,0x58
c0010476:	5b                   	pop    ebx
c0010477:	c3                   	ret    

c0010478 <VgaText::setTitleTextColour(VgaColour)>:
c0010478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010480:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010486:	eb aa                	jmp    c0010432 <VgaText::updateTitle()>

c0010488 <VgaText::setTitleColour(VgaColour)>:
c0010488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001048c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010490:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010496:	eb 9a                	jmp    c0010432 <VgaText::updateTitle()>

c0010498 <VgaText::setTitle(char*)>:
c0010498:	53                   	push   ebx
c0010499:	83 ec 10             	sub    esp,0x10
c001049c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00104aa:	50                   	push   eax
c00104ab:	e8 44 03 ff ff       	call   c00007f4 <strcpy>
c00104b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104b4:	83 c4 18             	add    esp,0x18
c00104b7:	5b                   	pop    ebx
c00104b8:	e9 75 ff ff ff       	jmp    c0010432 <VgaText::updateTitle()>
c00104bd:	90                   	nop

c00104be <VgaText::decrementCursor(bool)>:
c00104be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00104c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104c6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00104cc:	85 c0                	test   eax,eax
c00104ce:	74 07                	je     c00104d7 <VgaText::decrementCursor(bool)+0x19>
c00104d0:	48                   	dec    eax
c00104d1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00104d7:	84 c9                	test   cl,cl
c00104d9:	74 09                	je     c00104e4 <VgaText::decrementCursor(bool)+0x26>
c00104db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104df:	e9 64 fa ff ff       	jmp    c000ff48 <VgaText::updateCursor()>
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00104e6:	53                   	push   ebx
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00104f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00104fa:	3c 07                	cmp    al,0x7
c00104fc:	75 2a                	jne    c0010528 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00104fe:	a1 84 be 03 c0       	mov    eax,ds:0xc003be84
c0010503:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001050b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010513:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001051b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001051f:	83 c4 08             	add    esp,0x8
c0010522:	5b                   	pop    ebx
c0010523:	e9 10 2c 00 00       	jmp    c0013138 <Buzzer::beep(int, int, bool)>
c0010528:	3c 0d                	cmp    al,0xd
c001052a:	75 0c                	jne    c0010538 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001052c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010536:	eb 3b                	jmp    c0010573 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010538:	3c 0a                	cmp    al,0xa
c001053a:	75 40                	jne    c001057c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001053c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010542:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001054c:	8d 50 01             	lea    edx,[eax+0x1]
c001054f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010555:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001055b:	75 12                	jne    c001056f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001055d:	83 ec 0c             	sub    esp,0xc
c0010560:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010566:	53                   	push   ebx
c0010567:	e8 2a fb ff ff       	call   c0010096 <VgaText::scrollScreen()>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010573:	83 c4 08             	add    esp,0x8
c0010576:	5b                   	pop    ebx
c0010577:	e9 cc f9 ff ff       	jmp    c000ff48 <VgaText::updateCursor()>
c001057c:	3c 08                	cmp    al,0x8
c001057e:	75 31                	jne    c00105b1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010580:	50                   	push   eax
c0010581:	50                   	push   eax
c0010582:	6a 01                	push   0x1
c0010584:	53                   	push   ebx
c0010585:	e8 34 ff ff ff       	call   c00104be <VgaText::decrementCursor(bool)>
c001058a:	5a                   	pop    edx
c001058b:	59                   	pop    ecx
c001058c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010592:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010598:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001059e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00105a4:	6a 20                	push   0x20
c00105a6:	53                   	push   ebx
c00105a7:	e8 90 fb ff ff       	call   c001013c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ac:	83 c4 28             	add    esp,0x28
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    
c00105b1:	83 ec 08             	sub    esp,0x8
c00105b4:	0f be c0             	movsx  eax,al
c00105b7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105bd:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105c3:	51                   	push   ecx
c00105c4:	52                   	push   edx
c00105c5:	50                   	push   eax
c00105c6:	53                   	push   ebx
c00105c7:	e8 70 fb ff ff       	call   c001013c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105cc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00105d0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00105d8:	83 c4 28             	add    esp,0x28
c00105db:	5b                   	pop    ebx
c00105dc:	e9 29 fc ff ff       	jmp    c001020a <VgaText::incrementCursor(bool)>
c00105e1:	90                   	nop

c00105e2 <VgaText::isShowingCursor()>:
c00105e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00105ec:	c3                   	ret    
c00105ed:	90                   	nop

c00105ee <VgaText::isBlinkDisabled()>:
c00105ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00105f8:	83 f0 01             	xor    eax,0x1
c00105fb:	c3                   	ret    

c00105fc <VgaText::setCursorHeight(int)>:
c00105fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010604:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001060a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010611:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010615:	e9 48 f9 ff ff       	jmp    c000ff62 <VgaText::showCursor(bool)>

c001061a <VgaText::getCursorHeight()>:
c001061a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010624:	c3                   	ret    

c0010625 <setActiveTerminal(VgaText*)>:
c0010625:	53                   	push   ebx
c0010626:	83 ec 08             	sub    esp,0x8
c0010629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001062d:	85 db                	test   ebx,ebx
c001062f:	75 11                	jne    c0010642 <setActiveTerminal(VgaText*)+0x1d>
c0010631:	c7 44 24 10 74 93 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039374
c0010639:	83 c4 08             	add    esp,0x8
c001063c:	5b                   	pop    ebx
c001063d:	e9 7a c9 ff ff       	jmp    c000cfbc <panic(char const*)>
c0010642:	50                   	push   eax
c0010643:	50                   	push   eax
c0010644:	53                   	push   ebx
c0010645:	68 82 93 03 c0       	push   0xc0039382
c001064a:	e8 4f c8 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001064f:	a1 64 be 03 c0       	mov    eax,ds:0xc003be64
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	85 c0                	test   eax,eax
c0010659:	74 0c                	je     c0010667 <setActiveTerminal(VgaText*)+0x42>
c001065b:	83 ec 0c             	sub    esp,0xc
c001065e:	50                   	push   eax
c001065f:	e8 e4 f8 ff ff       	call   c000ff48 <VgaText::updateCursor()>
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	89 1d 64 be 03 c0    	mov    DWORD PTR ds:0xc003be64,ebx
c001066d:	51                   	push   ecx
c001066e:	51                   	push   ecx
c001066f:	53                   	push   ebx
c0010670:	68 9a 93 03 c0       	push   0xc003939a
c0010675:	e8 24 c8 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001067a:	83 c4 0c             	add    esp,0xc
c001067d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010683:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010689:	53                   	push   ebx
c001068a:	e8 25 fb ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c001068f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010692:	e8 57 ff ff ff       	call   c00105ee <VgaText::isBlinkDisabled()>
c0010697:	5a                   	pop    edx
c0010698:	0f b6 c0             	movzx  eax,al
c001069b:	59                   	pop    ecx
c001069c:	50                   	push   eax
c001069d:	53                   	push   ebx
c001069e:	e8 cf f8 ff ff       	call   c000ff72 <VgaText::disableBlink(bool)>
c00106a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106a6:	e8 6f ff ff ff       	call   c001061a <VgaText::getCursorHeight()>
c00106ab:	5a                   	pop    edx
c00106ac:	59                   	pop    ecx
c00106ad:	50                   	push   eax
c00106ae:	53                   	push   ebx
c00106af:	e8 48 ff ff ff       	call   c00105fc <VgaText::setCursorHeight(int)>
c00106b4:	83 c4 10             	add    esp,0x10
c00106b7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00106be:	75 0a                	jne    c00106ca <setActiveTerminal(VgaText*)+0xa5>
c00106c0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00106ca:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106ce:	83 c4 08             	add    esp,0x8
c00106d1:	5b                   	pop    ebx
c00106d2:	e9 1d f8 ff ff       	jmp    c000fef4 <VgaText::load()>

c00106d7 <doTerminalCycle()>:
c00106d7:	83 ec 18             	sub    esp,0x18
c00106da:	a1 60 be 03 c0       	mov    eax,ds:0xc003be60
c00106df:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00106e5:	50                   	push   eax
c00106e6:	a3 60 be 03 c0       	mov    ds:0xc003be60,eax
c00106eb:	e8 35 ff ff ff       	call   c0010625 <setActiveTerminal(VgaText*)>
c00106f0:	83 c4 1c             	add    esp,0x1c
c00106f3:	c3                   	ret    

c00106f4 <VgaText::doUpdate()>:
c00106f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 02                	je     c0010704 <VgaText::doUpdate()+0x10>
c0010702:	ff e0                	jmp    eax
c0010704:	c3                   	ret    
c0010705:	90                   	nop

c0010706 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010706:	55                   	push   ebp
c0010707:	57                   	push   edi
c0010708:	56                   	push   esi
c0010709:	53                   	push   ebx
c001070a:	83 ec 1c             	sub    esp,0x1c
c001070d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010711:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010716:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001071d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010720:	50                   	push   eax
c0010721:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010726:	50                   	push   eax
c0010727:	e8 58 f9 ff ff       	call   c0010084 <VgaText::combineColours(unsigned char, unsigned char)>
c001072c:	59                   	pop    ecx
c001072d:	0f b6 c0             	movzx  eax,al
c0010730:	5b                   	pop    ebx
c0010731:	31 c9                	xor    ecx,ecx
c0010733:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001073b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001073f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010749:	0f b7 db             	movzx  ebx,bx
c001074c:	01 db                	add    ebx,ebx
c001074e:	01 fb                	add    ebx,edi
c0010750:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010753:	84 c0                	test   al,al
c0010755:	0f 84 38 01 00 00    	je     c0010893 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001075b:	3c 0d                	cmp    al,0xd
c001075d:	75 0f                	jne    c001076e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001075f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010769:	e9 1f 01 00 00       	jmp    c001088d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001076e:	3c 0a                	cmp    al,0xa
c0010770:	75 5b                	jne    c00107cd <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010772:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010778:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010782:	8d 48 01             	lea    ecx,[eax+0x1]
c0010785:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001078b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010791:	75 12                	jne    c00107a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010793:	83 ec 0c             	sub    esp,0xc
c0010796:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001079c:	55                   	push   ebp
c001079d:	e8 f4 f8 ff ff       	call   c0010096 <VgaText::scrollScreen()>
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	83 ec 0c             	sub    esp,0xc
c00107a8:	55                   	push   ebp
c00107a9:	e8 9a f7 ff ff       	call   c000ff48 <VgaText::updateCursor()>
c00107ae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107b6:	83 c4 10             	add    esp,0x10
c00107b9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00107bf:	31 c9                	xor    ecx,ecx
c00107c1:	0f b7 db             	movzx  ebx,bx
c00107c4:	01 db                	add    ebx,ebx
c00107c6:	01 fb                	add    ebx,edi
c00107c8:	e9 c0 00 00 00       	jmp    c001088d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107cd:	3c 08                	cmp    al,0x8
c00107cf:	75 4e                	jne    c001081f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00107d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107d5:	53                   	push   ebx
c00107d6:	53                   	push   ebx
c00107d7:	6a 01                	push   0x1
c00107d9:	55                   	push   ebp
c00107da:	e8 df fc ff ff       	call   c00104be <VgaText::decrementCursor(bool)>
c00107df:	58                   	pop    eax
c00107e0:	5a                   	pop    edx
c00107e1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00107e7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00107ed:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00107f3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00107f9:	6a 20                	push   0x20
c00107fb:	55                   	push   ebp
c00107fc:	e8 3b f9 ff ff       	call   c001013c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010801:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010809:	83 c4 20             	add    esp,0x20
c001080c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010812:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010816:	0f b7 db             	movzx  ebx,bx
c0010819:	01 db                	add    ebx,ebx
c001081b:	01 fb                	add    ebx,edi
c001081d:	eb 6e                	jmp    c001088d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001081f:	51                   	push   ecx
c0010820:	51                   	push   ecx
c0010821:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010825:	50                   	push   eax
c0010826:	e8 ff f8 ff ff       	call   c001012a <VgaText::combineCharAndColour(char, unsigned char)>
c001082b:	83 c4 10             	add    esp,0x10
c001082e:	66 89 03             	mov    WORD PTR [ebx],ax
c0010831:	39 2d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebp
c0010837:	75 2a                	jne    c0010863 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010839:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001083f:	85 c0                	test   eax,eax
c0010841:	74 20                	je     c0010863 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010843:	52                   	push   edx
c0010844:	52                   	push   edx
c0010845:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001084b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010851:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010855:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010859:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001085c:	51                   	push   ecx
c001085d:	55                   	push   ebp
c001085e:	ff d0                	call   eax
c0010860:	83 c4 20             	add    esp,0x20
c0010863:	83 c3 02             	add    ebx,0x2
c0010866:	50                   	push   eax
c0010867:	50                   	push   eax
c0010868:	6a 00                	push   0x0
c001086a:	55                   	push   ebp
c001086b:	e8 9a f9 ff ff       	call   c001020a <VgaText::incrementCursor(bool)>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001087a:	75 0f                	jne    c001088b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001087c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010884:	0f b7 db             	movzx  ebx,bx
c0010887:	01 db                	add    ebx,ebx
c0010889:	01 fb                	add    ebx,edi
c001088b:	b1 01                	mov    cl,0x1
c001088d:	46                   	inc    esi
c001088e:	e9 bd fe ff ff       	jmp    c0010750 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010893:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010897:	83 ec 0c             	sub    esp,0xc
c001089a:	55                   	push   ebp
c001089b:	e8 a8 f6 ff ff       	call   c000ff48 <VgaText::updateCursor()>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00108a7:	84 c9                	test   cl,cl
c00108a9:	74 0c                	je     c00108b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	55                   	push   ebp
c00108af:	e8 40 fe ff ff       	call   c00106f4 <VgaText::doUpdate()>
c00108b4:	83 c4 10             	add    esp,0x10
c00108b7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00108be:	83 c4 1c             	add    esp,0x1c
c00108c1:	5b                   	pop    ebx
c00108c2:	5e                   	pop    esi
c00108c3:	5f                   	pop    edi
c00108c4:	5d                   	pop    ebp
c00108c5:	c3                   	ret    

c00108c6 <VgaText::clearScreen()>:
c00108c6:	57                   	push   edi
c00108c7:	56                   	push   esi
c00108c8:	31 f6                	xor    esi,esi
c00108ca:	53                   	push   ebx
c00108cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cf:	52                   	push   edx
c00108d0:	6a 00                	push   0x0
c00108d2:	6a 00                	push   0x0
c00108d4:	53                   	push   ebx
c00108d5:	e8 da f8 ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c00108da:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00108e1:	83 c4 10             	add    esp,0x10
c00108e4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00108ea:	7e 26                	jle    c0010912 <VgaText::clearScreen()+0x4c>
c00108ec:	31 ff                	xor    edi,edi
c00108ee:	50                   	push   eax
c00108ef:	50                   	push   eax
c00108f0:	56                   	push   esi
c00108f1:	57                   	push   edi
c00108f2:	47                   	inc    edi
c00108f3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108f9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108ff:	6a 20                	push   0x20
c0010901:	53                   	push   ebx
c0010902:	e8 35 f8 ff ff       	call   c001013c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010907:	83 c4 20             	add    esp,0x20
c001090a:	83 ff 50             	cmp    edi,0x50
c001090d:	75 df                	jne    c00108ee <VgaText::clearScreen()+0x28>
c001090f:	46                   	inc    esi
c0010910:	eb d2                	jmp    c00108e4 <VgaText::clearScreen()+0x1e>
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	53                   	push   ebx
c0010916:	e8 d9 fd ff ff       	call   c00106f4 <VgaText::doUpdate()>
c001091b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010922:	83 c4 10             	add    esp,0x10
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	5f                   	pop    edi
c0010928:	c3                   	ret    
c0010929:	90                   	nop

c001092a <VgaText::putchar(char)>:
c001092a:	56                   	push   esi
c001092b:	53                   	push   ebx
c001092c:	83 ec 14             	sub    esp,0x14
c001092f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010933:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010937:	3c 5b                	cmp    al,0x5b
c0010939:	75 21                	jne    c001095c <VgaText::putchar(char)+0x32>
c001093b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010942:	74 28                	je     c001096c <VgaText::putchar(char)+0x42>
c0010944:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001094d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010957:	e9 e2 00 00 00       	jmp    c0010a3e <VgaText::putchar(char)+0x114>
c001095c:	3c 1b                	cmp    al,0x1b
c001095e:	75 0c                	jne    c001096c <VgaText::putchar(char)+0x42>
c0010960:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010967:	e9 d2 00 00 00       	jmp    c0010a3e <VgaText::putchar(char)+0x114>
c001096c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010972:	84 c9                	test   cl,cl
c0010974:	0f 84 ab 00 00 00    	je     c0010a25 <VgaText::putchar(char)+0xfb>
c001097a:	8d 50 c0             	lea    edx,[eax-0x40]
c001097d:	80 fa 3e             	cmp    dl,0x3e
c0010980:	0f 87 82 00 00 00    	ja     c0010a08 <VgaText::putchar(char)+0xde>
c0010986:	3c 6d                	cmp    al,0x6d
c0010988:	75 4d                	jne    c00109d7 <VgaText::putchar(char)+0xad>
c001098a:	31 f6                	xor    esi,esi
c001098c:	31 d2                	xor    edx,edx
c001098e:	31 c0                	xor    eax,eax
c0010990:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010996:	7e 30                	jle    c00109c8 <VgaText::putchar(char)+0x9e>
c0010998:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00109a0:	80 fa 3b             	cmp    dl,0x3b
c00109a3:	75 17                	jne    c00109bc <VgaText::putchar(char)+0x92>
c00109a5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109a9:	50                   	push   eax
c00109aa:	53                   	push   ebx
c00109ab:	e8 fc f5 ff ff       	call   c000ffac <VgaText::doANSI_SGR(int)>
c00109b0:	59                   	pop    ecx
c00109b1:	31 d2                	xor    edx,edx
c00109b3:	58                   	pop    eax
c00109b4:	31 c0                	xor    eax,eax
c00109b6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109ba:	eb 09                	jmp    c00109c5 <VgaText::putchar(char)+0x9b>
c00109bc:	6b c0 0a             	imul   eax,eax,0xa
c00109bf:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00109c3:	88 ca                	mov    dl,cl
c00109c5:	46                   	inc    esi
c00109c6:	eb c8                	jmp    c0010990 <VgaText::putchar(char)+0x66>
c00109c8:	84 d2                	test   dl,dl
c00109ca:	74 31                	je     c00109fd <VgaText::putchar(char)+0xd3>
c00109cc:	50                   	push   eax
c00109cd:	53                   	push   ebx
c00109ce:	e8 d9 f5 ff ff       	call   c000ffac <VgaText::doANSI_SGR(int)>
c00109d3:	58                   	pop    eax
c00109d4:	5a                   	pop    edx
c00109d5:	eb 26                	jmp    c00109fd <VgaText::putchar(char)+0xd3>
c00109d7:	3c 4a                	cmp    al,0x4a
c00109d9:	75 22                	jne    c00109fd <VgaText::putchar(char)+0xd3>
c00109db:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00109e2:	75 19                	jne    c00109fd <VgaText::putchar(char)+0xd3>
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	53                   	push   ebx
c00109e8:	e8 d9 fe ff ff       	call   c00108c6 <VgaText::clearScreen()>
c00109ed:	83 c4 0c             	add    esp,0xc
c00109f0:	6a 00                	push   0x0
c00109f2:	6a 00                	push   0x0
c00109f4:	53                   	push   ebx
c00109f5:	e8 ba f7 ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c00109fa:	83 c4 10             	add    esp,0x10
c00109fd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010a06:	eb 36                	jmp    c0010a3e <VgaText::putchar(char)+0x114>
c0010a08:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010a0e:	83 fa 0e             	cmp    edx,0xe
c0010a11:	7f 2b                	jg     c0010a3e <VgaText::putchar(char)+0x114>
c0010a13:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a16:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010a1c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010a23:	eb 19                	jmp    c0010a3e <VgaText::putchar(char)+0x114>
c0010a25:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a2b:	0f be c0             	movsx  eax,al
c0010a2e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a34:	50                   	push   eax
c0010a35:	53                   	push   ebx
c0010a36:	e8 ab fa ff ff       	call   c00104e6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	83 c4 14             	add    esp,0x14
c0010a41:	5b                   	pop    ebx
c0010a42:	5e                   	pop    esi
c0010a43:	c3                   	ret    

c0010a44 <VgaText::puts(char const*)>:
c0010a44:	53                   	push   ebx
c0010a45:	83 ec 08             	sub    esp,0x8
c0010a48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a4c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a4f:	84 c0                	test   al,al
c0010a51:	74 12                	je     c0010a65 <VgaText::puts(char const*)+0x21>
c0010a53:	43                   	inc    ebx
c0010a54:	51                   	push   ecx
c0010a55:	51                   	push   ecx
c0010a56:	50                   	push   eax
c0010a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5b:	e8 ca fe ff ff       	call   c001092a <VgaText::putchar(char)>
c0010a60:	83 c4 10             	add    esp,0x10
c0010a63:	eb e7                	jmp    c0010a4c <VgaText::puts(char const*)+0x8>
c0010a65:	83 c4 08             	add    esp,0x8
c0010a68:	5b                   	pop    ebx
c0010a69:	c3                   	ret    

c0010a6a <VgaText::putx(unsigned int)>:
c0010a6a:	57                   	push   edi
c0010a6b:	b9 11 00 00 00       	mov    ecx,0x11
c0010a70:	56                   	push   esi
c0010a71:	be b6 93 03 c0       	mov    esi,0xc00393b6
c0010a76:	53                   	push   ebx
c0010a77:	83 ec 20             	sub    esp,0x20
c0010a7a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a7e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a82:	fc                   	cld    
c0010a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a85:	be 08 00 00 00       	mov    esi,0x8
c0010a8a:	50                   	push   eax
c0010a8b:	50                   	push   eax
c0010a8c:	89 d8                	mov    eax,ebx
c0010a8e:	c1 e3 04             	shl    ebx,0x4
c0010a91:	c1 e8 1c             	shr    eax,0x1c
c0010a94:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010a99:	50                   	push   eax
c0010a9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a9e:	e8 87 fe ff ff       	call   c001092a <VgaText::putchar(char)>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	4e                   	dec    esi
c0010aa7:	75 e1                	jne    c0010a8a <VgaText::putx(unsigned int)+0x20>
c0010aa9:	83 c4 20             	add    esp,0x20
c0010aac:	5b                   	pop    ebx
c0010aad:	5e                   	pop    esi
c0010aae:	5f                   	pop    edi
c0010aaf:	c3                   	ret    

c0010ab0 <VgaText::VgaText(char const*)>:
c0010ab0:	57                   	push   edi
c0010ab1:	56                   	push   esi
c0010ab2:	53                   	push   ebx
c0010ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab7:	83 ec 08             	sub    esp,0x8
c0010aba:	6a 00                	push   0x0
c0010abc:	50                   	push   eax
c0010abd:	e8 b8 05 00 00       	call   c001107a <UnixFile::UnixFile(int)>
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c0010aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ace:	89 10                	mov    DWORD PTR [eax],edx
c0010ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b06:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b14:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b22:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b38:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010b3e:	bb 40 be 03 c0       	mov    ebx,0xc003be40
c0010b43:	b8 08 00 00 00       	mov    eax,0x8
c0010b48:	fc                   	cld    
c0010b49:	89 d7                	mov    edi,edx
c0010b4b:	89 de                	mov    esi,ebx
c0010b4d:	89 c1                	mov    ecx,eax
c0010b4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b55:	05 1e 10 00 00       	add    eax,0x101e
c0010b5a:	83 ec 08             	sub    esp,0x8
c0010b5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b61:	50                   	push   eax
c0010b62:	e8 8d fc fe ff       	call   c00007f4 <strcpy>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7c:	83 c0 0c             	add    eax,0xc
c0010b7f:	83 ec 04             	sub    esp,0x4
c0010b82:	68 00 0f 00 00       	push   0xf00
c0010b87:	6a 00                	push   0x0
c0010b89:	50                   	push   eax
c0010b8a:	e8 49 fb fe ff       	call   c00006d8 <memset>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	83 ec 04             	sub    esp,0x4
c0010b95:	6a 00                	push   0x0
c0010b97:	6a 07                	push   0x7
c0010b99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9d:	e8 c2 f4 ff ff       	call   c0010064 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ba2:	83 c4 10             	add    esp,0x10
c0010ba5:	83 ec 08             	sub    esp,0x8
c0010ba8:	6a 02                	push   0x2
c0010baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bae:	e8 49 fa ff ff       	call   c00105fc <VgaText::setCursorHeight(int)>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	83 ec 04             	sub    esp,0x4
c0010bb9:	6a 00                	push   0x0
c0010bbb:	6a 00                	push   0x0
c0010bbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc1:	e8 ee f5 ff ff       	call   c00101b4 <VgaText::setCursor(int, int)>
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	83 ec 08             	sub    esp,0x8
c0010bcc:	6a 01                	push   0x1
c0010bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd2:	e8 8b f3 ff ff       	call   c000ff62 <VgaText::showCursor(bool)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	83 ec 08             	sub    esp,0x8
c0010bdd:	6a 01                	push   0x1
c0010bdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be3:	e8 8a f3 ff ff       	call   c000ff72 <VgaText::disableBlink(bool)>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	83 ec 0c             	sub    esp,0xc
c0010bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf2:	e8 cf fc ff ff       	call   c00108c6 <VgaText::clearScreen()>
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfe:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c09:	05 9e 10 00 00       	add    eax,0x109e
c0010c0e:	83 ec 04             	sub    esp,0x4
c0010c11:	68 96 00 00 00       	push   0x96
c0010c16:	6a 00                	push   0x0
c0010c18:	50                   	push   eax
c0010c19:	e8 ba fa fe ff       	call   c00006d8 <memset>
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c25:	05 34 11 00 00       	add    eax,0x1134
c0010c2a:	83 ec 04             	sub    esp,0x4
c0010c2d:	68 2c 01 00 00       	push   0x12c
c0010c32:	6a 00                	push   0x0
c0010c34:	50                   	push   eax
c0010c35:	e8 9e fa fe ff       	call   c00006d8 <memset>
c0010c3a:	83 c4 10             	add    esp,0x10
c0010c3d:	90                   	nop
c0010c3e:	5b                   	pop    ebx
c0010c3f:	5e                   	pop    esi
c0010c40:	5f                   	pop    edi
c0010c41:	c3                   	ret    

c0010c42 <VgaText::receiveKey(unsigned char)>:
c0010c42:	55                   	push   ebp
c0010c43:	57                   	push   edi
c0010c44:	56                   	push   esi
c0010c45:	53                   	push   ebx
c0010c46:	83 ec 1c             	sub    esp,0x1c
c0010c49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c51:	84 db                	test   bl,bl
c0010c53:	0f 84 c9 00 00 00    	je     c0010d22 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c59:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010c5f:	80 fb 08             	cmp    bl,0x8
c0010c62:	75 2c                	jne    c0010c90 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	57                   	push   edi
c0010c68:	e8 94 fa fe ff       	call   c0000701 <strlen>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	85 c0                	test   eax,eax
c0010c72:	74 41                	je     c0010cb5 <VgaText::receiveKey(unsigned char)+0x73>
c0010c74:	50                   	push   eax
c0010c75:	50                   	push   eax
c0010c76:	6a 08                	push   0x8
c0010c78:	56                   	push   esi
c0010c79:	e8 ac fc ff ff       	call   c001092a <VgaText::putchar(char)>
c0010c7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c81:	e8 7b fa fe ff       	call   c0000701 <strlen>
c0010c86:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010c8e:	eb 22                	jmp    c0010cb2 <VgaText::receiveKey(unsigned char)+0x70>
c0010c90:	0f be c3             	movsx  eax,bl
c0010c93:	52                   	push   edx
c0010c94:	52                   	push   edx
c0010c95:	50                   	push   eax
c0010c96:	56                   	push   esi
c0010c97:	e8 8e fc ff ff       	call   c001092a <VgaText::putchar(char)>
c0010c9c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ca0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ca5:	59                   	pop    ecx
c0010ca6:	5d                   	pop    ebp
c0010ca7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cab:	50                   	push   eax
c0010cac:	57                   	push   edi
c0010cad:	e8 8f fc fe ff       	call   c0000941 <strcat>
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010cbc:	75 05                	jne    c0010cc3 <VgaText::receiveKey(unsigned char)+0x81>
c0010cbe:	80 fb 0a             	cmp    bl,0xa
c0010cc1:	75 53                	jne    c0010d16 <VgaText::receiveKey(unsigned char)+0xd4>
c0010cc3:	83 ec 0c             	sub    esp,0xc
c0010cc6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 2f fa fe ff       	call   c0000701 <strlen>
c0010cd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cd5:	89 c5                	mov    ebp,eax
c0010cd7:	e8 25 fa fe ff       	call   c0000701 <strlen>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ce3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ce8:	76 10                	jbe    c0010cfa <VgaText::receiveKey(unsigned char)+0xb8>
c0010cea:	83 ec 0c             	sub    esp,0xc
c0010ced:	68 c7 93 03 c0       	push   0xc00393c7
c0010cf2:	e8 c5 c2 ff ff       	call   c000cfbc <panic(char const*)>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	50                   	push   eax
c0010cfb:	50                   	push   eax
c0010cfc:	57                   	push   edi
c0010cfd:	53                   	push   ebx
c0010cfe:	e8 3e fc fe ff       	call   c0000941 <strcat>
c0010d03:	83 c4 0c             	add    esp,0xc
c0010d06:	68 96 00 00 00       	push   0x96
c0010d0b:	6a 00                	push   0x0
c0010d0d:	57                   	push   edi
c0010d0e:	e8 c5 f9 fe ff       	call   c00006d8 <memset>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	83 ec 0c             	sub    esp,0xc
c0010d19:	56                   	push   esi
c0010d1a:	e8 d5 f9 ff ff       	call   c00106f4 <VgaText::doUpdate()>
c0010d1f:	83 c4 10             	add    esp,0x10
c0010d22:	83 c4 1c             	add    esp,0x1c
c0010d25:	5b                   	pop    ebx
c0010d26:	5e                   	pop    esi
c0010d27:	5f                   	pop    edi
c0010d28:	5d                   	pop    ebp
c0010d29:	c3                   	ret    

c0010d2a <VgaText::write(unsigned long long, void*, int*)>:
c0010d2a:	55                   	push   ebp
c0010d2b:	57                   	push   edi
c0010d2c:	56                   	push   esi
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 0c             	sub    esp,0xc
c0010d31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d35:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d3d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010d44:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d47:	39 eb                	cmp    ebx,ebp
c0010d49:	74 13                	je     c0010d5e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d4b:	43                   	inc    ebx
c0010d4c:	50                   	push   eax
c0010d4d:	50                   	push   eax
c0010d4e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d52:	50                   	push   eax
c0010d53:	56                   	push   esi
c0010d54:	e8 d1 fb ff ff       	call   c001092a <VgaText::putchar(char)>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	eb e9                	jmp    c0010d47 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010d68:	56                   	push   esi
c0010d69:	e8 86 f9 ff ff       	call   c00106f4 <VgaText::doUpdate()>
c0010d6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d72:	89 38                	mov    DWORD PTR [eax],edi
c0010d74:	83 c4 1c             	add    esp,0x1c
c0010d77:	31 c0                	xor    eax,eax
c0010d79:	5b                   	pop    ebx
c0010d7a:	5e                   	pop    esi
c0010d7b:	5f                   	pop    edi
c0010d7c:	5d                   	pop    ebp
c0010d7d:	c3                   	ret    

c0010d7e <newTerminal(char*)>:
c0010d7e:	83 ec 28             	sub    esp,0x28
c0010d81:	68 60 12 00 00       	push   0x1260
c0010d86:	e8 c3 16 00 00       	call   c001244e <operator new(unsigned long)>
c0010d8b:	5a                   	pop    edx
c0010d8c:	59                   	pop    ecx
c0010d8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d91:	50                   	push   eax
c0010d92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d96:	e8 15 fd ff ff       	call   c0010ab0 <VgaText::VgaText(char const*)>
c0010d9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010d9f:	83 c4 2c             	add    esp,0x2c
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <TSS::TSS()>:
c0010da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010daf:	90                   	nop
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <TSS::setESP(unsigned long)>:
c0010db2:	55                   	push   ebp
c0010db3:	89 e5                	mov    ebp,esp
c0010db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010dbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010dc1:	90                   	nop
c0010dc2:	5d                   	pop    ebp
c0010dc3:	c3                   	ret    

c0010dc4 <TSS::flush()>:
c0010dc4:	55                   	push   ebp
c0010dc5:	89 e5                	mov    ebp,esp
c0010dc7:	83 ec 10             	sub    esp,0x10
c0010dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	83 c8 03             	or     eax,0x3
c0010dd2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010dd6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010dda:	66 89 d0             	mov    ax,dx
c0010ddd:	0f 00 d8             	ltr    ax
c0010de0:	90                   	nop
c0010de1:	c9                   	leave  
c0010de2:	c3                   	ret    
c0010de3:	90                   	nop

c0010de4 <TSS::setup(unsigned long, unsigned long)>:
c0010de4:	55                   	push   ebp
c0010de5:	89 e5                	mov    ebp,esp
c0010de7:	53                   	push   ebx
c0010de8:	83 ec 14             	sub    esp,0x14
c0010deb:	83 ec 0c             	sub    esp,0xc
c0010dee:	6a 68                	push   0x68
c0010df0:	e8 a4 c6 ff ff       	call   c000d499 <malloc>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	89 c2                	mov    edx,eax
c0010dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dfd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e06:	83 ec 04             	sub    esp,0x4
c0010e09:	6a 68                	push   0x68
c0010e0b:	6a 00                	push   0x0
c0010e0d:	50                   	push   eax
c0010e0e:	e8 c5 f8 fe ff       	call   c00006d8 <memset>
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e28:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e40:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e58:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e64:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e70:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e73:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e88:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e92:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010e95:	e8 1f db 00 00       	call   c001e9b9 <CPU::readCR3()>
c0010e9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea3:	83 ec 08             	sub    esp,0x8
c0010ea6:	50                   	push   eax
c0010ea7:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010eaa:	50                   	push   eax
c0010eab:	e8 a6 b8 ff ff       	call   c000c756 <GDTEntry::setBase(unsigned int)>
c0010eb0:	83 c4 10             	add    esp,0x10
c0010eb3:	83 ec 08             	sub    esp,0x8
c0010eb6:	6a 68                	push   0x68
c0010eb8:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ebb:	50                   	push   eax
c0010ebc:	e8 b1 b8 ff ff       	call   c000c772 <GDTEntry::setLimit(unsigned int)>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010ec8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010ecb:	83 e0 0f             	and    eax,0xf
c0010ece:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010ed1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010ed4:	83 c8 40             	or     eax,0x40
c0010ed7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010eda:	e8 75 62 00 00       	call   c0017154 <thisCPU()>
c0010edf:	05 78 01 00 00       	add    eax,0x178
c0010ee4:	83 ec 04             	sub    esp,0x4
c0010ee7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010eea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010eed:	50                   	push   eax
c0010eee:	e8 b3 b8 ff ff       	call   c000c7a6 <GDT::addEntry(GDTEntry)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	89 c2                	mov    edx,eax
c0010ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010efb:	89 10                	mov    DWORD PTR [eax],edx
c0010efd:	e8 52 62 00 00       	call   c0017154 <thisCPU()>
c0010f02:	05 78 01 00 00       	add    eax,0x178
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	50                   	push   eax
c0010f0b:	e8 da b8 ff ff       	call   c000c7ea <GDT::flush()>
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f18:	83 ec 08             	sub    esp,0x8
c0010f1b:	50                   	push   eax
c0010f1c:	68 30 94 03 c0       	push   0xc0039430
c0010f21:	e8 78 bf ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f2e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010f31:	c9                   	leave  
c0010f32:	c3                   	ret    
c0010f33:	90                   	nop

c0010f34 <ReservedFilename::isAtty()>:
c0010f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f3b:	31 c0                	xor    eax,eax
c0010f3d:	83 fa 08             	cmp    edx,0x8
c0010f40:	74 06                	je     c0010f48 <ReservedFilename::isAtty()+0x14>
c0010f42:	83 fa 06             	cmp    edx,0x6
c0010f45:	0f 94 c0             	sete   al
c0010f48:	c3                   	ret    
c0010f49:	90                   	nop

c0010f4a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f4a:	55                   	push   ebp
c0010f4b:	57                   	push   edi
c0010f4c:	56                   	push   esi
c0010f4d:	53                   	push   ebx
c0010f4e:	83 ec 0c             	sub    esp,0xc
c0010f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f60:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010f64:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f68:	83 f8 08             	cmp    eax,0x8
c0010f6b:	75 08                	jne    c0010f75 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010f6d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f73:	eb 5c                	jmp    c0010fd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010f75:	83 f8 06             	cmp    eax,0x6
c0010f78:	75 3d                	jne    c0010fb7 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010f7a:	83 ec 0c             	sub    esp,0xc
c0010f7d:	68 4e 94 03 c0       	push   0xc003944e
c0010f82:	e8 17 bf ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0010f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f97:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010f9b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010f9f:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010fa3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010fa7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010fab:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010fae:	83 c4 1c             	add    esp,0x1c
c0010fb1:	5b                   	pop    ebx
c0010fb2:	5e                   	pop    esi
c0010fb3:	5f                   	pop    edi
c0010fb4:	5d                   	pop    ebp
c0010fb5:	ff e0                	jmp    eax
c0010fb7:	89 c2                	mov    edx,eax
c0010fb9:	83 e2 fd             	and    edx,0xfffffffd
c0010fbc:	83 fa 05             	cmp    edx,0x5
c0010fbf:	74 ac                	je     c0010f6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fc1:	8d 50 f5             	lea    edx,[eax-0xb]
c0010fc4:	83 fa 08             	cmp    edx,0x8
c0010fc7:	76 a4                	jbe    c0010f6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fc9:	83 e8 15             	sub    eax,0x15
c0010fcc:	83 f8 08             	cmp    eax,0x8
c0010fcf:	76 9c                	jbe    c0010f6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fd1:	83 c4 0c             	add    esp,0xc
c0010fd4:	31 c0                	xor    eax,eax
c0010fd6:	5b                   	pop    ebx
c0010fd7:	5e                   	pop    esi
c0010fd8:	5f                   	pop    edi
c0010fd9:	5d                   	pop    ebp
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010fdc:	55                   	push   ebp
c0010fdd:	57                   	push   edi
c0010fde:	56                   	push   esi
c0010fdf:	53                   	push   ebx
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010feb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ff2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010ff6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010ffa:	83 f8 08             	cmp    eax,0x8
c0010ffd:	75 08                	jne    c0011007 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010fff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011005:	eb 60                	jmp    c0011067 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011007:	83 f8 06             	cmp    eax,0x6
c001100a:	75 3d                	jne    c0011049 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	68 5b 94 03 c0       	push   0xc003945b
c0011014:	e8 85 be ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001101e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011021:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011027:	8b 10                	mov    edx,DWORD PTR [eax]
c0011029:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001102d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0011031:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0011035:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0011039:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001103d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0011040:	83 c4 1c             	add    esp,0x1c
c0011043:	5b                   	pop    ebx
c0011044:	5e                   	pop    esi
c0011045:	5f                   	pop    edi
c0011046:	5d                   	pop    ebp
c0011047:	ff e0                	jmp    eax
c0011049:	83 f8 05             	cmp    eax,0x5
c001104c:	75 04                	jne    c0011052 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c001104e:	89 33                	mov    DWORD PTR [ebx],esi
c0011050:	eb 15                	jmp    c0011067 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011052:	83 f8 07             	cmp    eax,0x7
c0011055:	74 a8                	je     c0010fff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011057:	8d 50 f5             	lea    edx,[eax-0xb]
c001105a:	83 fa 08             	cmp    edx,0x8
c001105d:	76 a0                	jbe    c0010fff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c001105f:	83 e8 15             	sub    eax,0x15
c0011062:	83 f8 08             	cmp    eax,0x8
c0011065:	76 98                	jbe    c0010fff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011067:	83 c4 0c             	add    esp,0xc
c001106a:	31 c0                	xor    eax,eax
c001106c:	5b                   	pop    ebx
c001106d:	5e                   	pop    esi
c001106e:	5f                   	pop    edi
c001106f:	5d                   	pop    ebp
c0011070:	c3                   	ret    
c0011071:	90                   	nop

c0011072 <UnixFile::getFileDescriptor()>:
c0011072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011079:	c3                   	ret    

c001107a <UnixFile::UnixFile(int)>:
c001107a:	83 ec 0c             	sub    esp,0xc
c001107d:	ba c0 94 03 c0       	mov    edx,0xc00394c0
c0011082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011086:	89 10                	mov    DWORD PTR [eax],edx
c0011088:	a1 60 ae 03 c0       	mov    eax,ds:0xc003ae60
c001108d:	8d 50 01             	lea    edx,[eax+0x1]
c0011090:	89 15 60 ae 03 c0    	mov    DWORD PTR ds:0xc003ae60,edx
c0011096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001109a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001109d:	83 ec 08             	sub    esp,0x8
c00110a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110a4:	68 70 be 03 c0       	push   0xc003be70
c00110a9:	e8 8a dc 00 00       	call   c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	90                   	nop
c00110b2:	83 c4 0c             	add    esp,0xc
c00110b5:	c3                   	ret    

c00110b6 <ReservedFilename::ReservedFilename(int)>:
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	83 ec 08             	sub    esp,0x8
c00110c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c4:	50                   	push   eax
c00110c5:	e8 b0 ff ff ff       	call   c001107a <UnixFile::UnixFile(int)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	ba dc 94 03 c0       	mov    edx,0xc00394dc
c00110d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d6:	89 10                	mov    DWORD PTR [eax],edx
c00110d8:	90                   	nop
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    
c00110dd:	90                   	nop

c00110de <UnixFile::~UnixFile()>:
c00110de:	83 ec 1c             	sub    esp,0x1c
c00110e1:	ba c0 94 03 c0       	mov    edx,0xc00394c0
c00110e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ea:	89 10                	mov    DWORD PTR [eax],edx
c00110ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	68 70 be 03 c0       	push   0xc003be70
c00110fc:	e8 85 db 00 00       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	68 70 be 03 c0       	push   0xc003be70
c0011110:	e8 79 db 00 00       	call   c001ec8e <LinkedList<UnixFile>::removeFirst()>
c0011115:	83 c4 10             	add    esp,0x10
c0011118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001111c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011120:	74 3d                	je     c001115f <UnixFile::~UnixFile()+0x81>
c0011122:	83 ec 08             	sub    esp,0x8
c0011125:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011129:	68 70 be 03 c0       	push   0xc003be70
c001112e:	e8 05 dc 00 00       	call   c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113a:	8d 50 01             	lea    edx,[eax+0x1]
c001113d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011141:	3d 88 13 00 00       	cmp    eax,0x1388
c0011146:	0f 94 c0             	sete   al
c0011149:	84 c0                	test   al,al
c001114b:	74 a7                	je     c00110f4 <UnixFile::~UnixFile()+0x16>
c001114d:	83 ec 0c             	sub    esp,0xc
c0011150:	68 98 94 03 c0       	push   0xc0039498
c0011155:	e8 62 be ff ff       	call   c000cfbc <panic(char const*)>
c001115a:	83 c4 10             	add    esp,0x10
c001115d:	eb 95                	jmp    c00110f4 <UnixFile::~UnixFile()+0x16>
c001115f:	90                   	nop
c0011160:	83 c4 1c             	add    esp,0x1c
c0011163:	c3                   	ret    

c0011164 <UnixFile::~UnixFile()>:
c0011164:	83 ec 0c             	sub    esp,0xc
c0011167:	83 ec 0c             	sub    esp,0xc
c001116a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116e:	e8 6b ff ff ff       	call   c00110de <UnixFile::~UnixFile()>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	83 ec 08             	sub    esp,0x8
c0011179:	6a 0c                	push   0xc
c001117b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117f:	e8 d9 12 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	83 c4 0c             	add    esp,0xc
c001118a:	c3                   	ret    
c001118b:	90                   	nop

c001118c <ReservedFilename::~ReservedFilename()>:
c001118c:	83 ec 0c             	sub    esp,0xc
c001118f:	ba dc 94 03 c0       	mov    edx,0xc00394dc
c0011194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011198:	89 10                	mov    DWORD PTR [eax],edx
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	83 ec 0c             	sub    esp,0xc
c00111a1:	50                   	push   eax
c00111a2:	e8 37 ff ff ff       	call   c00110de <UnixFile::~UnixFile()>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	90                   	nop
c00111ab:	83 c4 0c             	add    esp,0xc
c00111ae:	c3                   	ret    
c00111af:	90                   	nop

c00111b0 <ReservedFilename::~ReservedFilename()>:
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	83 ec 0c             	sub    esp,0xc
c00111b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ba:	e8 cd ff ff ff       	call   c001118c <ReservedFilename::~ReservedFilename()>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 ec 08             	sub    esp,0x8
c00111c5:	6a 0c                	push   0xc
c00111c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cb:	e8 8d 12 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	c3                   	ret    

c00111d7 <getFromFileDescriptor(int)>:
c00111d7:	83 ec 18             	sub    esp,0x18
c00111da:	68 70 be 03 c0       	push   0xc003be70
c00111df:	e8 a2 da 00 00       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c00111e4:	83 c4 10             	add    esp,0x10
c00111e7:	85 c0                	test   eax,eax
c00111e9:	74 18                	je     c0011203 <getFromFileDescriptor(int)+0x2c>
c00111eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111ef:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c00111f2:	74 0f                	je     c0011203 <getFromFileDescriptor(int)+0x2c>
c00111f4:	52                   	push   edx
c00111f5:	52                   	push   edx
c00111f6:	50                   	push   eax
c00111f7:	68 70 be 03 c0       	push   0xc003be70
c00111fc:	e8 2f db 00 00       	call   c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011201:	eb e1                	jmp    c00111e4 <getFromFileDescriptor(int)+0xd>
c0011203:	83 c4 0c             	add    esp,0xc
c0011206:	c3                   	ret    

c0011207 <__static_initialization_and_destruction_0(int, int)>:
c0011207:	83 ec 0c             	sub    esp,0xc
c001120a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001120f:	75 34                	jne    c0011245 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011211:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011219:	75 2a                	jne    c0011245 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001121b:	83 ec 0c             	sub    esp,0xc
c001121e:	68 70 be 03 c0       	push   0xc003be70
c0011223:	e8 06 da 00 00       	call   c001ec2e <LinkedList<UnixFile>::LinkedList()>
c0011228:	83 c4 10             	add    esp,0x10
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	68 e8 ad 03 c0       	push   0xc003ade8
c0011233:	68 70 be 03 c0       	push   0xc003be70
c0011238:	68 2c ec 01 c0       	push   0xc001ec2c
c001123d:	e8 97 11 00 00       	call   c00123d9 <__cxa_atexit>
c0011242:	83 c4 10             	add    esp,0x10
c0011245:	90                   	nop
c0011246:	83 c4 0c             	add    esp,0xc
c0011249:	c3                   	ret    

c001124a <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	83 ec 08             	sub    esp,0x8
c0011250:	68 ff ff 00 00       	push   0xffff
c0011255:	6a 01                	push   0x1
c0011257:	e8 ab ff ff ff       	call   c0011207 <__static_initialization_and_destruction_0(int, int)>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	83 c4 0c             	add    esp,0xc
c0011262:	c3                   	ret    
c0011263:	90                   	nop

c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011264:	53                   	push   ebx
c0011265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011269:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001126d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011273:	89 c8                	mov    eax,ecx
c0011275:	d1 e8                	shr    eax,1
c0011277:	03 05 68 ae 03 c0    	add    eax,DWORD PTR ds:0xc003ae68
c001127d:	83 e1 01             	and    ecx,0x1
c0011280:	8a 10                	mov    dl,BYTE PTR [eax]
c0011282:	75 09                	jne    c001128d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011284:	83 e2 f0             	and    edx,0xfffffff0
c0011287:	09 da                	or     edx,ebx
c0011289:	88 10                	mov    BYTE PTR [eax],dl
c001128b:	5b                   	pop    ebx
c001128c:	c3                   	ret    
c001128d:	c1 e3 04             	shl    ebx,0x4
c0011290:	83 e2 0f             	and    edx,0xf
c0011293:	09 da                	or     edx,ebx
c0011295:	88 10                	mov    BYTE PTR [eax],dl
c0011297:	5b                   	pop    ebx
c0011298:	c3                   	ret    

c0011299 <Virt::getPageState(unsigned long)>:
c0011299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129d:	8b 0d 68 ae 03 c0    	mov    ecx,DWORD PTR ds:0xc003ae68
c00112a3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00112a9:	89 d0                	mov    eax,edx
c00112ab:	d1 e8                	shr    eax,1
c00112ad:	83 e2 01             	and    edx,0x1
c00112b0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00112b3:	75 04                	jne    c00112b9 <Virt::getPageState(unsigned long)+0x20>
c00112b5:	83 e0 0f             	and    eax,0xf
c00112b8:	c3                   	ret    
c00112b9:	c0 e8 04             	shr    al,0x4
c00112bc:	c3                   	ret    

c00112bd <Virt::allocateKernelVirtualPages(int)>:
c00112bd:	55                   	push   ebp
c00112be:	31 ed                	xor    ebp,ebp
c00112c0:	57                   	push   edi
c00112c1:	56                   	push   esi
c00112c2:	53                   	push   ebx
c00112c3:	31 db                	xor    ebx,ebx
c00112c5:	83 ec 1c             	sub    esp,0x1c
c00112c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112cc:	8b 3d 64 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae64
c00112d2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00112d7:	57                   	push   edi
c00112d8:	e8 bc ff ff ff       	call   c0011299 <Virt::getPageState(unsigned long)>
c00112dd:	5a                   	pop    edx
c00112de:	84 c0                	test   al,al
c00112e0:	75 3a                	jne    c001131c <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112e2:	85 db                	test   ebx,ebx
c00112e4:	75 02                	jne    c00112e8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112e6:	89 fd                	mov    ebp,edi
c00112e8:	43                   	inc    ebx
c00112e9:	39 f3                	cmp    ebx,esi
c00112eb:	74 5a                	je     c0011347 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112ed:	47                   	inc    edi
c00112ee:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112f4:	76 31                	jbe    c0011327 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112f6:	c7 05 64 ae 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003ae64,0xc8000
c0011300:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011305:	75 28                	jne    c001132f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011307:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001130c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011311:	57                   	push   edi
c0011312:	e8 82 ff ff ff       	call   c0011299 <Virt::getPageState(unsigned long)>
c0011317:	5a                   	pop    edx
c0011318:	84 c0                	test   al,al
c001131a:	74 c6                	je     c00112e2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001131c:	31 db                	xor    ebx,ebx
c001131e:	47                   	inc    edi
c001131f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011325:	77 cf                	ja     c00112f6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011327:	89 3d 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,edi
c001132d:	eb a8                	jmp    c00112d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	68 f0 94 03 c0       	push   0xc00394f0
c0011337:	e8 80 bc ff ff       	call   c000cfbc <panic(char const*)>
c001133c:	8b 3d 64 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae64
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	eb 90                	jmp    c00112d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011347:	89 2d 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,ebp
c001134d:	4b                   	dec    ebx
c001134e:	74 5f                	je     c00113af <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011350:	85 f6                	test   esi,esi
c0011352:	74 3d                	je     c0011391 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011354:	89 e8                	mov    eax,ebp
c0011356:	31 db                	xor    ebx,ebx
c0011358:	8d 7e ff             	lea    edi,[esi-0x1]
c001135b:	eb 14                	jmp    c0011371 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001135d:	6a 01                	push   0x1
c001135f:	43                   	inc    ebx
c0011360:	50                   	push   eax
c0011361:	e8 fe fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011366:	58                   	pop    eax
c0011367:	39 f3                	cmp    ebx,esi
c0011369:	5a                   	pop    edx
c001136a:	74 25                	je     c0011391 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001136c:	a1 64 ae 03 c0       	mov    eax,ds:0xc003ae64
c0011371:	8d 50 01             	lea    edx,[eax+0x1]
c0011374:	85 db                	test   ebx,ebx
c0011376:	89 15 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,edx
c001137c:	74 20                	je     c001139e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001137e:	39 df                	cmp    edi,ebx
c0011380:	75 db                	jne    c001135d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011382:	6a 03                	push   0x3
c0011384:	43                   	inc    ebx
c0011385:	50                   	push   eax
c0011386:	e8 d9 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001138b:	59                   	pop    ecx
c001138c:	39 f3                	cmp    ebx,esi
c001138e:	58                   	pop    eax
c001138f:	75 db                	jne    c001136c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011391:	83 c4 1c             	add    esp,0x1c
c0011394:	89 e8                	mov    eax,ebp
c0011396:	5b                   	pop    ebx
c0011397:	c1 e0 0c             	shl    eax,0xc
c001139a:	5e                   	pop    esi
c001139b:	5f                   	pop    edi
c001139c:	5d                   	pop    ebp
c001139d:	c3                   	ret    
c001139e:	6a 02                	push   0x2
c00113a0:	bb 01 00 00 00       	mov    ebx,0x1
c00113a5:	50                   	push   eax
c00113a6:	e8 b9 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ab:	58                   	pop    eax
c00113ac:	5a                   	pop    edx
c00113ad:	eb bd                	jmp    c001136c <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113af:	6a 04                	push   0x4
c00113b1:	8d 45 01             	lea    eax,[ebp+0x1]
c00113b4:	55                   	push   ebp
c00113b5:	a3 64 ae 03 c0       	mov    ds:0xc003ae64,eax
c00113ba:	e8 a5 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113bf:	59                   	pop    ecx
c00113c0:	89 e8                	mov    eax,ebp
c00113c2:	5b                   	pop    ebx
c00113c3:	c1 e0 0c             	shl    eax,0xc
c00113c6:	83 c4 1c             	add    esp,0x1c
c00113c9:	5b                   	pop    ebx
c00113ca:	5e                   	pop    esi
c00113cb:	5f                   	pop    edi
c00113cc:	5d                   	pop    ebp
c00113cd:	c3                   	ret    

c00113ce <Virt::virtualMemorySetup()>:
c00113ce:	53                   	push   ebx
c00113cf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113d4:	83 ec 08             	sub    esp,0x8
c00113d7:	6a 0f                	push   0xf
c00113d9:	53                   	push   ebx
c00113da:	43                   	inc    ebx
c00113db:	e8 84 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e0:	59                   	pop    ecx
c00113e1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113e7:	58                   	pop    eax
c00113e8:	75 ed                	jne    c00113d7 <Virt::virtualMemorySetup()+0x9>
c00113ea:	83 ec 08             	sub    esp,0x8
c00113ed:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113f2:	68 00 00 00 c8       	push   0xc8000000
c00113f7:	68 9b 96 03 c0       	push   0xc003969b
c00113fc:	e8 9d ba ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011401:	58                   	pop    eax
c0011402:	5a                   	pop    edx
c0011403:	68 00 f0 ff ef       	push   0xeffff000
c0011408:	68 af 96 03 c0       	push   0xc00396af
c001140d:	e8 8c ba ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	83 ec 08             	sub    esp,0x8
c0011418:	6a 00                	push   0x0
c001141a:	53                   	push   ebx
c001141b:	43                   	inc    ebx
c001141c:	e8 43 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001142a:	75 e9                	jne    c0011415 <Virt::virtualMemorySetup()+0x47>
c001142c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011431:	83 ec 08             	sub    esp,0x8
c0011434:	6a 0f                	push   0xf
c0011436:	53                   	push   ebx
c0011437:	43                   	inc    ebx
c0011438:	e8 27 fe ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011446:	75 e9                	jne    c0011431 <Virt::virtualMemorySetup()+0x63>
c0011448:	83 c4 08             	add    esp,0x8
c001144b:	5b                   	pop    ebx
c001144c:	c3                   	ret    

c001144d <Virt::getAKernelVAS()>:
c001144d:	a1 7c be 03 c0       	mov    eax,ds:0xc003be7c
c0011452:	c3                   	ret    

c0011453 <Virt::setupPageSwapping(int)>:
c0011453:	57                   	push   edi
c0011454:	56                   	push   esi
c0011455:	53                   	push   ebx
c0011456:	83 ec 1c             	sub    esp,0x1c
c0011459:	68 14 01 00 00       	push   0x114
c001145e:	e8 eb 0f 00 00       	call   c001244e <operator new(unsigned long)>
c0011463:	83 c4 0c             	add    esp,0xc
c0011466:	89 c6                	mov    esi,eax
c0011468:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c001146e:	68 c3 96 03 c0       	push   0xc00396c3
c0011473:	50                   	push   eax
c0011474:	e8 03 14 00 00       	call   c001287c <File::File(char const*, Process*)>
c0011479:	89 34 24             	mov    DWORD PTR [esp],esi
c001147c:	e8 d7 15 00 00       	call   c0012a58 <File::unlink()>
c0011481:	58                   	pop    eax
c0011482:	5a                   	pop    edx
c0011483:	6a 12                	push   0x12
c0011485:	56                   	push   esi
c0011486:	e8 55 14 00 00       	call   c00128e0 <File::open(FileOpenMode)>
c001148b:	83 c4 10             	add    esp,0x10
c001148e:	85 c0                	test   eax,eax
c0011490:	0f 85 bf 00 00 00    	jne    c0011555 <Virt::setupPageSwapping(int)+0x102>
c0011496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001149a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114a2:	c1 e3 08             	shl    ebx,0x8
c00114a5:	83 ec 0c             	sub    esp,0xc
c00114a8:	68 00 00 01 00       	push   0x10000
c00114ad:	e8 e7 bf ff ff       	call   c000d499 <malloc>
c00114b2:	83 c4 0c             	add    esp,0xc
c00114b5:	89 c7                	mov    edi,eax
c00114b7:	68 00 00 01 00       	push   0x10000
c00114bc:	6a 00                	push   0x0
c00114be:	50                   	push   eax
c00114bf:	e8 14 f2 fe ff       	call   c00006d8 <memset>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	85 db                	test   ebx,ebx
c00114c9:	79 03                	jns    c00114ce <Virt::setupPageSwapping(int)+0x7b>
c00114cb:	83 c3 0f             	add    ebx,0xf
c00114ce:	c1 fb 04             	sar    ebx,0x4
c00114d1:	4b                   	dec    ebx
c00114d2:	83 fb ff             	cmp    ebx,0xffffffff
c00114d5:	74 4b                	je     c0011522 <Virt::setupPageSwapping(int)+0xcf>
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	8b 06                	mov    eax,DWORD PTR [esi]
c00114dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114e0:	52                   	push   edx
c00114e1:	57                   	push   edi
c00114e2:	6a 00                	push   0x0
c00114e4:	68 00 00 01 00       	push   0x10000
c00114e9:	56                   	push   esi
c00114ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114ed:	83 c4 20             	add    esp,0x20
c00114f0:	85 c0                	test   eax,eax
c00114f2:	75 4e                	jne    c0011542 <Virt::setupPageSwapping(int)+0xef>
c00114f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114f8:	3d 00 00 01 00       	cmp    eax,0x10000
c00114fd:	74 d2                	je     c00114d1 <Virt::setupPageSwapping(int)+0x7e>
c00114ff:	83 ec 08             	sub    esp,0x8
c0011502:	4b                   	dec    ebx
c0011503:	50                   	push   eax
c0011504:	68 16 97 03 c0       	push   0xc0039716
c0011509:	e8 90 b9 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001150e:	c7 04 24 1f 97 03 c0 	mov    DWORD PTR [esp],0xc003971f
c0011515:	e8 a2 ba ff ff       	call   c000cfbc <panic(char const*)>
c001151a:	83 c4 10             	add    esp,0x10
c001151d:	83 fb ff             	cmp    ebx,0xffffffff
c0011520:	75 b5                	jne    c00114d7 <Virt::setupPageSwapping(int)+0x84>
c0011522:	83 ec 0c             	sub    esp,0xc
c0011525:	56                   	push   esi
c0011526:	e8 13 14 00 00       	call   c001293e <File::close()>
c001152b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001152e:	e8 86 bf ff ff       	call   c000d4b9 <rfree>
c0011533:	89 34 24             	mov    DWORD PTR [esp],esi
c0011536:	8b 06                	mov    eax,DWORD PTR [esi]
c0011538:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001153b:	83 c4 20             	add    esp,0x20
c001153e:	5b                   	pop    ebx
c001153f:	5e                   	pop    esi
c0011540:	5f                   	pop    edi
c0011541:	c3                   	ret    
c0011542:	83 ec 08             	sub    esp,0x8
c0011545:	50                   	push   eax
c0011546:	68 fe 96 03 c0       	push   0xc00396fe
c001154b:	e8 4e b9 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	eb 9f                	jmp    c00114f4 <Virt::setupPageSwapping(int)+0xa1>
c0011555:	83 ec 08             	sub    esp,0x8
c0011558:	50                   	push   eax
c0011559:	68 da 96 03 c0       	push   0xc00396da
c001155e:	e8 3b b9 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011563:	c7 04 24 e3 96 03 c0 	mov    DWORD PTR [esp],0xc00396e3
c001156a:	e8 4d ba ff ff       	call   c000cfbc <panic(char const*)>
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	e9 1f ff ff ff       	jmp    c0011496 <Virt::setupPageSwapping(int)+0x43>
c0011577:	90                   	nop

c0011578 <VAS::VAS()>:
c0011578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011587:	a3 7c be 03 c0       	mov    ds:0xc003be7c,eax
c001158c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011590:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011598:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001159b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00115a6:	90                   	nop
c00115a7:	c3                   	ret    

c00115a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ac:	89 c2                	mov    edx,eax
c00115ae:	c1 e8 0a             	shr    eax,0xa
c00115b1:	c1 ea 16             	shr    edx,0x16
c00115b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115b9:	19 c9                	sbb    ecx,ecx
c00115bb:	c1 e2 0c             	shl    edx,0xc
c00115be:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115c4:	25 fc 0f 00 00       	and    eax,0xffc
c00115c9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115d0:	01 d0                	add    eax,edx
c00115d2:	c3                   	ret    
c00115d3:	90                   	nop

c00115d4 <VAS::getPageTableEntry(unsigned long)>:
c00115d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115d8:	89 ca                	mov    edx,ecx
c00115da:	c1 e9 0a             	shr    ecx,0xa
c00115dd:	c1 ea 16             	shr    edx,0x16
c00115e0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115e6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115ec:	c1 e0 0c             	shl    eax,0xc
c00115ef:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115f2:	c3                   	ret    

c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115f3:	57                   	push   edi
c00115f4:	56                   	push   esi
c00115f5:	be 01 00 00 00       	mov    esi,0x1
c00115fa:	53                   	push   ebx
c00115fb:	83 ec 10             	sub    esp,0x10
c00115fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011602:	c1 eb 0c             	shr    ebx,0xc
c0011605:	eb 3f                	jmp    c0011646 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011607:	e8 41 fe ff ff       	call   c001144d <Virt::getAKernelVAS()>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	57                   	push   edi
c0011610:	50                   	push   eax
c0011611:	e8 be ff ff ff       	call   c00115d4 <VAS::getPageTableEntry(unsigned long)>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	8b 00                	mov    eax,DWORD PTR [eax]
c001161b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001161f:	f6 c4 04             	test   ah,0x4
c0011622:	75 5f                	jne    c0011683 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011624:	80 fa 04             	cmp    dl,0x4
c0011627:	74 78                	je     c00116a1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011629:	80 fa 02             	cmp    dl,0x2
c001162c:	0f 84 88 00 00 00    	je     c00116ba <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011632:	80 fa 03             	cmp    dl,0x3
c0011635:	0f 84 ad 00 00 00    	je     c00116e8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001163b:	fe ca                	dec    dl
c001163d:	0f 84 92 00 00 00    	je     c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011643:	43                   	inc    ebx
c0011644:	31 f6                	xor    esi,esi
c0011646:	53                   	push   ebx
c0011647:	e8 4d fc ff ff       	call   c0011299 <Virt::getPageState(unsigned long)>
c001164c:	5f                   	pop    edi
c001164d:	89 df                	mov    edi,ebx
c001164f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011653:	c1 e7 0c             	shl    edi,0xc
c0011656:	84 c0                	test   al,al
c0011658:	75 ad                	jne    c0011607 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	68 25 97 03 c0       	push   0xc0039725
c0011662:	e8 55 b9 ff ff       	call   c000cfbc <panic(char const*)>
c0011667:	e8 e1 fd ff ff       	call   c001144d <Virt::getAKernelVAS()>
c001166c:	5a                   	pop    edx
c001166d:	59                   	pop    ecx
c001166e:	57                   	push   edi
c001166f:	50                   	push   eax
c0011670:	e8 5f ff ff ff       	call   c00115d4 <VAS::getPageTableEntry(unsigned long)>
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	8b 00                	mov    eax,DWORD PTR [eax]
c001167a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001167e:	f6 c4 04             	test   ah,0x4
c0011681:	74 c0                	je     c0011643 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011683:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011687:	25 00 f0 ff ff       	and    eax,0xfffff000
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	50                   	push   eax
c0011690:	e8 24 c3 ff ff       	call   c000d9b9 <Phys::freePage(unsigned long)>
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001169c:	80 fa 04             	cmp    dl,0x4
c001169f:	75 88                	jne    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116a1:	89 f0                	mov    eax,esi
c00116a3:	84 c0                	test   al,al
c00116a5:	75 47                	jne    c00116ee <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116a7:	c7 44 24 20 10 95 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039510
c00116af:	83 c4 10             	add    esp,0x10
c00116b2:	5b                   	pop    ebx
c00116b3:	5e                   	pop    esi
c00116b4:	5f                   	pop    edi
c00116b5:	e9 02 b9 ff ff       	jmp    c000cfbc <panic(char const*)>
c00116ba:	89 f0                	mov    eax,esi
c00116bc:	84 c0                	test   al,al
c00116be:	75 15                	jne    c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	68 41 97 03 c0       	push   0xc0039741
c00116c8:	e8 ef b8 ff ff       	call   c000cfbc <panic(char const*)>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	e9 6e ff ff ff       	jmp    c0011643 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d5:	83 ec 08             	sub    esp,0x8
c00116d8:	6a 00                	push   0x0
c00116da:	53                   	push   ebx
c00116db:	e8 84 fb ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e0:	83 c4 10             	add    esp,0x10
c00116e3:	e9 5b ff ff ff       	jmp    c0011643 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116e8:	89 f0                	mov    eax,esi
c00116ea:	84 c0                	test   al,al
c00116ec:	75 15                	jne    c0011703 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116ee:	83 ec 08             	sub    esp,0x8
c00116f1:	6a 00                	push   0x0
c00116f3:	53                   	push   ebx
c00116f4:	e8 6b fb ff ff       	call   c0011264 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	5b                   	pop    ebx
c0011700:	5e                   	pop    esi
c0011701:	5f                   	pop    edi
c0011702:	c3                   	ret    
c0011703:	c7 44 24 20 5d 97 03 c0 	mov    DWORD PTR [esp+0x20],0xc003975d
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	5b                   	pop    ebx
c001170f:	5e                   	pop    esi
c0011710:	5f                   	pop    edi
c0011711:	e9 a6 b8 ff ff       	jmp    c000cfbc <panic(char const*)>

c0011716 <VAS::freeAllocatedPages(unsigned long)>:
c0011716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001171a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001171e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011722:	74 09                	je     c001172d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011724:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011728:	e9 c6 fe ff ff       	jmp    c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c001172d:	c7 44 24 04 34 95 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039534
c0011735:	e9 64 b7 ff ff       	jmp    c000ce9e <kprintf(char const*, ...)>

c001173a <VAS::virtualToPhysical(unsigned long)>:
c001173a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001173e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011742:	e8 8d fe ff ff       	call   c00115d4 <VAS::getPageTableEntry(unsigned long)>
c0011747:	5a                   	pop    edx
c0011748:	8b 00                	mov    eax,DWORD PTR [eax]
c001174a:	59                   	pop    ecx
c001174b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011750:	c3                   	ret    
c0011751:	90                   	nop

c0011752 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011752:	83 ec 0c             	sub    esp,0xc
c0011755:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001175a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001175e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011765:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011768:	19 c0                	sbb    eax,eax
c001176a:	83 ca 03             	or     edx,0x3
c001176d:	83 e0 fc             	and    eax,0xfffffffc
c0011770:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011777:	e8 3d d2 00 00       	call   c001e9b9 <CPU::readCR3()>
c001177c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011780:	83 c4 0c             	add    esp,0xc
c0011783:	e9 55 d2 00 00       	jmp    c001e9dd <CPU::writeCR3(unsigned long)>

c0011788 <VAS::~VAS()>:
c0011788:	83 ec 2c             	sub    esp,0x2c
c001178b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011793:	e8 a8 cb ff ff       	call   c000e340 <lockScheduler()>
c0011798:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001179d:	8b 00                	mov    eax,DWORD PTR [eax]
c001179f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117a2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117a8:	83 ec 04             	sub    esp,0x4
c00117ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117af:	6a 01                	push   0x1
c00117b1:	50                   	push   eax
c00117b2:	e8 9b ff ff ff       	call   c0011752 <VAS::mapOtherVASIn(bool, VAS*)>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117c2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00117ca:	0f 8f d7 00 00 00    	jg     c00118a7 <VAS::~VAS()+0x11f>
c00117d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00117db:	c1 e2 02             	shl    edx,0x2
c00117de:	01 d0                	add    eax,edx
c00117e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00117e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ea:	83 e0 01             	and    eax,0x1
c00117ed:	0f 84 ab 00 00 00    	je     c001189e <VAS::~VAS()+0x116>
c00117f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00117fb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011803:	7f 75                	jg     c001187a <VAS::~VAS()+0xf2>
c0011805:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011809:	c1 e0 0a             	shl    eax,0xa
c001180c:	89 c2                	mov    edx,eax
c001180e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011812:	01 d0                	add    eax,edx
c0011814:	c1 e0 0c             	shl    eax,0xc
c0011817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001181b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011820:	8b 00                	mov    eax,DWORD PTR [eax]
c0011822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011825:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182b:	83 ec 04             	sub    esp,0x4
c001182e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011832:	6a 01                	push   0x1
c0011834:	50                   	push   eax
c0011835:	e8 6e fd ff ff       	call   c00115a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011845:	8b 00                	mov    eax,DWORD PTR [eax]
c0011847:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001184b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001184f:	25 01 04 00 00       	and    eax,0x401
c0011854:	3d 01 04 00 00       	cmp    eax,0x401
c0011859:	75 19                	jne    c0011874 <VAS::~VAS()+0xec>
c001185b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001185f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011864:	83 ec 0c             	sub    esp,0xc
c0011867:	50                   	push   eax
c0011868:	e8 4c c1 ff ff       	call   c000d9b9 <Phys::freePage(unsigned long)>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011874:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011878:	eb 81                	jmp    c00117fb <VAS::~VAS()+0x73>
c001187a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187e:	25 00 04 00 00       	and    eax,0x400
c0011883:	74 19                	je     c001189e <VAS::~VAS()+0x116>
c0011885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011889:	25 00 f0 ff ff       	and    eax,0xfffff000
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	50                   	push   eax
c0011892:	e8 22 c1 ff ff       	call   c000d9b9 <Phys::freePage(unsigned long)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001189e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118a2:	e9 1b ff ff ff       	jmp    c00117c2 <VAS::~VAS()+0x3a>
c00118a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118ae:	83 ec 0c             	sub    esp,0xc
c00118b1:	50                   	push   eax
c00118b2:	e8 3c fd ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118c1:	83 ec 0c             	sub    esp,0xc
c00118c4:	50                   	push   eax
c00118c5:	e8 ef c0 ff ff       	call   c000d9b9 <Phys::freePage(unsigned long)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d5:	c1 e0 02             	shl    eax,0x2
c00118d8:	83 ec 08             	sub    esp,0x8
c00118db:	50                   	push   eax
c00118dc:	68 58 95 03 c0       	push   0xc0039558
c00118e1:	e8 b8 b5 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	e8 54 ca ff ff       	call   c000e342 <unlockScheduler()>
c00118ee:	90                   	nop
c00118ef:	83 c4 2c             	add    esp,0x2c
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00118f4:	55                   	push   ebp
c00118f5:	57                   	push   edi
c00118f6:	56                   	push   esi
c00118f7:	53                   	push   ebx
c00118f8:	83 ec 1c             	sub    esp,0x1c
c00118fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00118ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011903:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011909:	77 08                	ja     c0011913 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001190b:	0f 20 d8             	mov    eax,cr3
c001190e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011911:	75 47                	jne    c001195a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011913:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011917:	09 d8                	or     eax,ebx
c0011919:	a9 ff 0f 00 00       	test   eax,0xfff
c001191e:	75 57                	jne    c0011977 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011920:	89 de                	mov    esi,ebx
c0011922:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011925:	c1 ee 16             	shr    esi,0x16
c0011928:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001192f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011933:	74 54                	je     c0011989 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011935:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011939:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001193f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011943:	c1 e6 0c             	shl    esi,0xc
c0011946:	c1 eb 0a             	shr    ebx,0xa
c0011949:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001194f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011952:	83 c4 1c             	add    esp,0x1c
c0011955:	5b                   	pop    ebx
c0011956:	5e                   	pop    esi
c0011957:	5f                   	pop    edi
c0011958:	5d                   	pop    ebp
c0011959:	c3                   	ret    
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	68 78 95 03 c0       	push   0xc0039578
c0011962:	e8 37 b5 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001196e:	09 d8                	or     eax,ebx
c0011970:	a9 ff 0f 00 00       	test   eax,0xfff
c0011975:	74 a9                	je     c0011920 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	68 e0 95 03 c0       	push   0xc00395e0
c001197f:	e8 38 b6 ff ff       	call   c000cfbc <panic(char const*)>
c0011984:	83 c4 10             	add    esp,0x10
c0011987:	eb 97                	jmp    c0011920 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011989:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198d:	e8 b1 c0 ff ff       	call   c000da43 <Phys::allocatePage()>
c0011992:	89 c5                	mov    ebp,eax
c0011994:	e8 b4 fa ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0011999:	83 ec 0c             	sub    esp,0xc
c001199c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119a0:	6a 01                	push   0x1
c00119a2:	e8 16 f9 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c00119a7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119ae:	6a 01                	push   0x1
c00119b0:	50                   	push   eax
c00119b1:	55                   	push   ebp
c00119b2:	81 cd 07 04 00 00    	or     ebp,0x407
c00119b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119bc:	51                   	push   ecx
c00119bd:	e8 1e 02 00 00       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119c2:	83 c4 1c             	add    esp,0x1c
c00119c5:	68 00 10 00 00       	push   0x1000
c00119ca:	6a 00                	push   0x0
c00119cc:	50                   	push   eax
c00119cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119d1:	e8 02 ed fe ff       	call   c00006d8 <memset>
c00119d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00119da:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00119dd:	e8 11 fc ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c00119e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00119e9:	83 c4 10             	add    esp,0x10
c00119ec:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00119ef:	e9 41 ff ff ff       	jmp    c0011935 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00119f4 <VAS::allocatePages(int, int)>:
c00119f4:	55                   	push   ebp
c00119f5:	57                   	push   edi
c00119f6:	56                   	push   esi
c00119f7:	53                   	push   ebx
c00119f8:	83 ec 1c             	sub    esp,0x1c
c00119fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119ff:	e8 50 57 00 00       	call   c0017154 <thisCPU()>
c0011a04:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a0a:	83 e0 01             	and    eax,0x1
c0011a0d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a11:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a15:	0f 85 d7 00 00 00    	jne    c0011af2 <VAS::allocatePages(int, int)+0xfe>
c0011a1b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a22:	85 c0                	test   eax,eax
c0011a24:	0f 84 ac 00 00 00    	je     c0011ad6 <VAS::allocatePages(int, int)+0xe2>
c0011a2a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a32:	c1 e6 0c             	shl    esi,0xc
c0011a35:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a39:	85 c0                	test   eax,eax
c0011a3b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a3e:	7e 33                	jle    c0011a73 <VAS::allocatePages(int, int)+0x7f>
c0011a40:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a48:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a4e:	e8 f0 bf ff ff       	call   c000da43 <Phys::allocatePage()>
c0011a53:	55                   	push   ebp
c0011a54:	53                   	push   ebx
c0011a55:	50                   	push   eax
c0011a56:	57                   	push   edi
c0011a57:	e8 98 fe ff ff       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a5c:	83 c4 10             	add    esp,0x10
c0011a5f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a64:	74 03                	je     c0011a69 <VAS::allocatePages(int, int)+0x75>
c0011a66:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a69:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a6f:	39 de                	cmp    esi,ebx
c0011a71:	75 db                	jne    c0011a4e <VAS::allocatePages(int, int)+0x5a>
c0011a73:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a78:	74 3f                	je     c0011ab9 <VAS::allocatePages(int, int)+0xc5>
c0011a7a:	c1 ee 0a             	shr    esi,0xa
c0011a7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a81:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011a87:	c1 eb 0a             	shr    ebx,0xa
c0011a8a:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011a90:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011a96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011a9c:	39 f3                	cmp    ebx,esi
c0011a9e:	77 0d                	ja     c0011aad <VAS::allocatePages(int, int)+0xb9>
c0011aa0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aa3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011aa9:	39 de                	cmp    esi,ebx
c0011aab:	73 f3                	jae    c0011aa0 <VAS::allocatePages(int, int)+0xac>
c0011aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ab1:	83 c4 1c             	add    esp,0x1c
c0011ab4:	5b                   	pop    ebx
c0011ab5:	5e                   	pop    esi
c0011ab6:	5f                   	pop    edi
c0011ab7:	5d                   	pop    ebp
c0011ab8:	c3                   	ret    
c0011ab9:	e8 fb ce 00 00       	call   c001e9b9 <CPU::readCR3()>
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	50                   	push   eax
c0011ac2:	e8 16 cf 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ace:	83 c4 1c             	add    esp,0x1c
c0011ad1:	5b                   	pop    ebx
c0011ad2:	5e                   	pop    esi
c0011ad3:	5f                   	pop    edi
c0011ad4:	5d                   	pop    ebp
c0011ad5:	c3                   	ret    
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	68 04 96 03 c0       	push   0xc0039604
c0011ade:	e8 d9 b4 ff ff       	call   c000cfbc <panic(char const*)>
c0011ae3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ae6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	e9 38 ff ff ff       	jmp    c0011a2a <VAS::allocatePages(int, int)+0x36>
c0011af2:	83 ec 0c             	sub    esp,0xc
c0011af5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011af9:	e8 bf f7 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0011afe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b0a:	0f 87 94 00 00 00    	ja     c0011ba4 <VAS::allocatePages(int, int)+0x1b0>
c0011b10:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b14:	85 d2                	test   edx,edx
c0011b16:	7e 3c                	jle    c0011b54 <VAS::allocatePages(int, int)+0x160>
c0011b18:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b1c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b24:	c1 e5 0c             	shl    ebp,0xc
c0011b27:	81 ce 00 04 00 00    	or     esi,0x400
c0011b2d:	01 dd                	add    ebp,ebx
c0011b2f:	e8 0f bf ff ff       	call   c000da43 <Phys::allocatePage()>
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	50                   	push   eax
c0011b37:	57                   	push   edi
c0011b38:	e8 b7 fd ff ff       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b45:	74 03                	je     c0011b4a <VAS::allocatePages(int, int)+0x156>
c0011b47:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b4a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b50:	39 dd                	cmp    ebp,ebx
c0011b52:	75 db                	jne    c0011b2f <VAS::allocatePages(int, int)+0x13b>
c0011b54:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b59:	0f 84 5a ff ff ff    	je     c0011ab9 <VAS::allocatePages(int, int)+0xc5>
c0011b5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b67:	89 d3                	mov    ebx,edx
c0011b69:	c1 e0 0c             	shl    eax,0xc
c0011b6c:	c1 eb 0a             	shr    ebx,0xa
c0011b6f:	01 d0                	add    eax,edx
c0011b71:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b77:	c1 e8 0a             	shr    eax,0xa
c0011b7a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b85:	2d 00 00 40 00       	sub    eax,0x400000
c0011b8a:	39 c3                	cmp    ebx,eax
c0011b8c:	0f 87 1b ff ff ff    	ja     c0011aad <VAS::allocatePages(int, int)+0xb9>
c0011b92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b95:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b9b:	39 d8                	cmp    eax,ebx
c0011b9d:	73 f3                	jae    c0011b92 <VAS::allocatePages(int, int)+0x19e>
c0011b9f:	e9 09 ff ff ff       	jmp    c0011aad <VAS::allocatePages(int, int)+0xb9>
c0011ba4:	e8 ab 55 00 00       	call   c0017154 <thisCPU()>
c0011ba9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011bb0:	0f 84 5a ff ff ff    	je     c0011b10 <VAS::allocatePages(int, int)+0x11c>
c0011bb6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011bbe:	e9 4d ff ff ff       	jmp    c0011b10 <VAS::allocatePages(int, int)+0x11c>
c0011bc3:	90                   	nop

c0011bc4 <VAS::setCPUSpecific(unsigned long)>:
c0011bc4:	83 ec 0c             	sub    esp,0xc
c0011bc7:	6a 05                	push   0x5
c0011bc9:	68 00 00 40 c2       	push   0xc2400000
c0011bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bd6:	e8 19 fd ff ff       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bdb:	83 c4 1c             	add    esp,0x1c
c0011bde:	c3                   	ret    
c0011bdf:	90                   	nop

c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011be0:	55                   	push   ebp
c0011be1:	57                   	push   edi
c0011be2:	56                   	push   esi
c0011be3:	53                   	push   ebx
c0011be4:	83 ec 1c             	sub    esp,0x1c
c0011be7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011beb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bef:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011bf3:	e8 5c 55 00 00       	call   c0017154 <thisCPU()>
c0011bf8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011bfe:	83 e0 01             	and    eax,0x1
c0011c01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c09:	85 c0                	test   eax,eax
c0011c0b:	7e 39                	jle    c0011c46 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c11:	89 f3                	mov    ebx,esi
c0011c13:	c1 e0 0c             	shl    eax,0xc
c0011c16:	01 f0                	add    eax,esi
c0011c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c1c:	55                   	push   ebp
c0011c1d:	53                   	push   ebx
c0011c1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c22:	29 f0                	sub    eax,esi
c0011c24:	01 d8                	add    eax,ebx
c0011c26:	50                   	push   eax
c0011c27:	57                   	push   edi
c0011c28:	e8 c7 fc ff ff       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c35:	74 03                	je     c0011c3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c37:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c40:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c44:	75 d6                	jne    c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c46:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c4b:	74 42                	je     c0011c8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c4d:	89 f3                	mov    ebx,esi
c0011c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c53:	c1 eb 0a             	shr    ebx,0xa
c0011c56:	c1 e0 0c             	shl    eax,0xc
c0011c59:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5f:	01 f0                	add    eax,esi
c0011c61:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c67:	c1 e8 0a             	shr    eax,0xa
c0011c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6f:	2d 00 00 40 00       	sub    eax,0x400000
c0011c74:	39 c3                	cmp    ebx,eax
c0011c76:	77 0d                	ja     c0011c85 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011c78:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c7b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c81:	39 d8                	cmp    eax,ebx
c0011c83:	73 f3                	jae    c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011c85:	83 c4 1c             	add    esp,0x1c
c0011c88:	89 f0                	mov    eax,esi
c0011c8a:	5b                   	pop    ebx
c0011c8b:	5e                   	pop    esi
c0011c8c:	5f                   	pop    edi
c0011c8d:	5d                   	pop    ebp
c0011c8e:	c3                   	ret    
c0011c8f:	e8 25 cd 00 00       	call   c001e9b9 <CPU::readCR3()>
c0011c94:	83 ec 0c             	sub    esp,0xc
c0011c97:	50                   	push   eax
c0011c98:	e8 40 cd 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c0011c9d:	89 f0                	mov    eax,esi
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	83 c4 1c             	add    esp,0x1c
c0011ca5:	5b                   	pop    ebx
c0011ca6:	5e                   	pop    esi
c0011ca7:	5f                   	pop    edi
c0011ca8:	5d                   	pop    ebp
c0011ca9:	c3                   	ret    

c0011caa <VAS::VAS(VAS*)>:
c0011caa:	53                   	push   ebx
c0011cab:	83 ec 38             	sub    esp,0x38
c0011cae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cb9:	e8 a9 c6 ff ff       	call   c000e367 <lockStuff()>
c0011cbe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cc2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cc9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011ccc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cd0:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011cd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cd7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011cda:	e8 64 bd ff ff       	call   c000da43 <Phys::allocatePage()>
c0011cdf:	89 c2                	mov    edx,eax
c0011ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ce5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ce8:	e8 60 f7 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0011ced:	89 c3                	mov    ebx,eax
c0011cef:	83 ec 0c             	sub    esp,0xc
c0011cf2:	6a 01                	push   0x1
c0011cf4:	e8 c4 f5 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0011cf9:	83 c4 10             	add    esp,0x10
c0011cfc:	89 c2                	mov    edx,eax
c0011cfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d05:	83 ec 0c             	sub    esp,0xc
c0011d08:	6a 03                	push   0x3
c0011d0a:	6a 01                	push   0x1
c0011d0c:	52                   	push   edx
c0011d0d:	50                   	push   eax
c0011d0e:	53                   	push   ebx
c0011d0f:	e8 cc fe ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d14:	83 c4 20             	add    esp,0x20
c0011d17:	89 c2                	mov    edx,eax
c0011d19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d20:	83 ec 04             	sub    esp,0x4
c0011d23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011d27:	6a 01                	push   0x1
c0011d29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d2d:	e8 20 fa ff ff       	call   c0011752 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d32:	83 c4 10             	add    esp,0x10
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	6a 01                	push   0x1
c0011d3a:	e8 7e f5 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	6a 01                	push   0x1
c0011d4b:	e8 6d f5 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d5f:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011d67:	0f 8f 5e 02 00 00    	jg     c0011fcb <VAS::VAS(VAS*)+0x321>
c0011d6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d77:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d84:	c1 e2 02             	shl    edx,0x2
c0011d87:	01 d0                	add    eax,edx
c0011d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d8f:	83 ec 08             	sub    esp,0x8
c0011d92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d96:	68 77 97 03 c0       	push   0xc0039777
c0011d9b:	e8 fe b0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011da7:	25 01 04 00 00       	and    eax,0x401
c0011dac:	3d 01 04 00 00       	cmp    eax,0x401
c0011db1:	0f 85 e5 01 00 00    	jne    c0011f9c <VAS::VAS(VAS*)+0x2f2>
c0011db7:	83 ec 0c             	sub    esp,0xc
c0011dba:	68 88 97 03 c0       	push   0xc0039788
c0011dbf:	e8 da b0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	e8 77 bc ff ff       	call   c000da43 <Phys::allocatePage()>
c0011dcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd0:	83 ec 08             	sub    esp,0x8
c0011dd3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dd7:	68 9e 97 03 c0       	push   0xc003979e
c0011ddc:	e8 bd b0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011de8:	25 ff 0f 00 00       	and    eax,0xfff
c0011ded:	89 c1                	mov    ecx,eax
c0011def:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011df3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011df6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011dfa:	c1 e2 02             	shl    edx,0x2
c0011dfd:	01 c2                	add    edx,eax
c0011dff:	89 c8                	mov    eax,ecx
c0011e01:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e05:	89 02                	mov    DWORD PTR [edx],eax
c0011e07:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011e0f:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011e17:	0f 8f a5 01 00 00    	jg     c0011fc2 <VAS::VAS(VAS*)+0x318>
c0011e1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e21:	c1 e0 0a             	shl    eax,0xa
c0011e24:	89 c2                	mov    edx,eax
c0011e26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e2a:	01 d0                	add    eax,edx
c0011e2c:	c1 e0 0c             	shl    eax,0xc
c0011e2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e33:	83 ec 08             	sub    esp,0x8
c0011e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e3e:	e8 91 f7 ff ff       	call   c00115d4 <VAS::getPageTableEntry(unsigned long)>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e4c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e56:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e5c:	83 ec 04             	sub    esp,0x4
c0011e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e63:	6a 01                	push   0x1
c0011e65:	50                   	push   eax
c0011e66:	e8 3d f7 ff ff       	call   c00115a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e72:	83 ec 04             	sub    esp,0x4
c0011e75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e7d:	68 30 96 03 c0       	push   0xc0039630
c0011e82:	e8 17 b0 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011e87:	83 c4 10             	add    esp,0x10
c0011e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8e:	25 01 04 00 00       	and    eax,0x401
c0011e93:	3d 01 04 00 00       	cmp    eax,0x401
c0011e98:	0f 85 db 00 00 00    	jne    c0011f79 <VAS::VAS(VAS*)+0x2cf>
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	68 ad 97 03 c0       	push   0xc00397ad
c0011ea6:	e8 f3 af ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	e8 90 bb ff ff       	call   c000da43 <Phys::allocatePage()>
c0011eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011eb7:	83 ec 08             	sub    esp,0x8
c0011eba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ebe:	68 bc 97 03 c0       	push   0xc00397bc
c0011ec3:	e8 d6 af ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ecf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ed4:	83 ec 08             	sub    esp,0x8
c0011ed7:	50                   	push   eax
c0011ed8:	68 d0 97 03 c0       	push   0xc00397d0
c0011edd:	e8 bc af ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011ee2:	83 c4 10             	add    esp,0x10
c0011ee5:	e8 63 f5 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	6a 03                	push   0x3
c0011eef:	6a 01                	push   0x1
c0011ef1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ef5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ef9:	50                   	push   eax
c0011efa:	e8 e1 fc ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eff:	83 c4 20             	add    esp,0x20
c0011f02:	e8 46 f5 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0011f07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f0b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f11:	83 ec 0c             	sub    esp,0xc
c0011f14:	6a 03                	push   0x3
c0011f16:	6a 01                	push   0x1
c0011f18:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f1c:	52                   	push   edx
c0011f1d:	50                   	push   eax
c0011f1e:	e8 bd fc ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f23:	83 c4 20             	add    esp,0x20
c0011f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f2e:	83 ec 04             	sub    esp,0x4
c0011f31:	68 00 10 00 00       	push   0x1000
c0011f36:	52                   	push   edx
c0011f37:	50                   	push   eax
c0011f38:	e8 24 e7 fe ff       	call   c0000661 <memcpy>
c0011f3d:	83 c4 10             	add    esp,0x10
c0011f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f44:	25 ff 0f 00 00       	and    eax,0xfff
c0011f49:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f4d:	89 c2                	mov    edx,eax
c0011f4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f53:	89 10                	mov    DWORD PTR [eax],edx
c0011f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f59:	25 ff 0f 00 00       	and    eax,0xfff
c0011f5e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f62:	83 ec 04             	sub    esp,0x4
c0011f65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f69:	50                   	push   eax
c0011f6a:	68 54 96 03 c0       	push   0xc0039654
c0011f6f:	e8 2a af ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011f74:	83 c4 10             	add    esp,0x10
c0011f77:	eb 1a                	jmp    c0011f93 <VAS::VAS(VAS*)+0x2e9>
c0011f79:	83 ec 0c             	sub    esp,0xc
c0011f7c:	68 e4 97 03 c0       	push   0xc00397e4
c0011f81:	e8 18 af ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f91:	89 10                	mov    DWORD PTR [eax],edx
c0011f93:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011f97:	e9 73 fe ff ff       	jmp    c0011e0f <VAS::VAS(VAS*)+0x165>
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	68 e8 97 03 c0       	push   0xc00397e8
c0011fa4:	e8 f5 ae ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0011fa9:	83 c4 10             	add    esp,0x10
c0011fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fb0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fb3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011fb7:	c1 e2 02             	shl    edx,0x2
c0011fba:	01 c2                	add    edx,eax
c0011fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fc0:	89 02                	mov    DWORD PTR [edx],eax
c0011fc2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011fc6:	e9 94 fd ff ff       	jmp    c0011d5f <VAS::VAS(VAS*)+0xb5>
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fd2:	e8 1c f6 ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	83 ec 0c             	sub    esp,0xc
c0011fdd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011fe1:	e8 0d f6 ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fe6:	83 c4 10             	add    esp,0x10
c0011fe9:	e8 0b c7 ff ff       	call   c000e6f9 <unlockStuff()>
c0011fee:	90                   	nop
c0011fef:	83 c4 38             	add    esp,0x38
c0011ff2:	5b                   	pop    ebx
c0011ff3:	c3                   	ret    

c0011ff4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011ff4:	55                   	push   ebp
c0011ff5:	57                   	push   edi
c0011ff6:	56                   	push   esi
c0011ff7:	53                   	push   ebx
c0011ff8:	83 ec 1c             	sub    esp,0x1c
c0011ffb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012003:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012007:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001200b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012010:	75 4a                	jne    c001205c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012016:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012019:	c1 eb 16             	shr    ebx,0x16
c001201c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012023:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012027:	74 4d                	je     c0012076 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012029:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001202d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012031:	c1 e8 0a             	shr    eax,0xa
c0012034:	80 fa 01             	cmp    dl,0x1
c0012037:	19 d2                	sbb    edx,edx
c0012039:	c1 e3 0c             	shl    ebx,0xc
c001203c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012040:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012046:	25 fc 0f 00 00       	and    eax,0xffc
c001204b:	01 d8                	add    eax,ebx
c001204d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012054:	83 c4 1c             	add    esp,0x1c
c0012057:	5b                   	pop    ebx
c0012058:	5e                   	pop    esi
c0012059:	5f                   	pop    edi
c001205a:	5d                   	pop    ebp
c001205b:	c3                   	ret    
c001205c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	68 78 96 03 c0       	push   0xc0039678
c0012068:	e8 4f af ff ff       	call   c000cfbc <panic(char const*)>
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012074:	eb 9c                	jmp    c0012012 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012076:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001207a:	e8 c4 b9 ff ff       	call   c000da43 <Phys::allocatePage()>
c001207f:	89 c5                	mov    ebp,eax
c0012081:	e8 c7 f3 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001208d:	6a 01                	push   0x1
c001208f:	e8 29 f2 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0012094:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001209b:	6a 01                	push   0x1
c001209d:	50                   	push   eax
c001209e:	55                   	push   ebp
c001209f:	81 cd 07 04 00 00    	or     ebp,0x407
c00120a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00120a9:	51                   	push   ecx
c00120aa:	e8 31 fb ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120af:	83 c4 1c             	add    esp,0x1c
c00120b2:	68 00 10 00 00       	push   0x1000
c00120b7:	6a 00                	push   0x0
c00120b9:	50                   	push   eax
c00120ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120be:	e8 15 e6 fe ff       	call   c00006d8 <memset>
c00120c3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120ca:	e8 24 f5 ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c00120cf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00120d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120dc:	e9 48 ff ff ff       	jmp    c0012029 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00120e1:	90                   	nop

c00120e2 <VAS::VAS(bool)>:
c00120e2:	53                   	push   ebx
c00120e3:	83 ec 28             	sub    esp,0x28
c00120e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00120ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120fd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012101:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012104:	e8 3a b9 ff ff       	call   c000da43 <Phys::allocatePage()>
c0012109:	89 c2                	mov    edx,eax
c001210b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012112:	e8 36 f3 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c0012117:	89 c3                	mov    ebx,eax
c0012119:	83 ec 0c             	sub    esp,0xc
c001211c:	6a 01                	push   0x1
c001211e:	e8 9a f1 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0012123:	83 c4 10             	add    esp,0x10
c0012126:	89 c2                	mov    edx,eax
c0012128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001212f:	83 ec 0c             	sub    esp,0xc
c0012132:	6a 03                	push   0x3
c0012134:	6a 01                	push   0x1
c0012136:	52                   	push   edx
c0012137:	50                   	push   eax
c0012138:	53                   	push   ebx
c0012139:	e8 a2 fa ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001213e:	83 c4 20             	add    esp,0x20
c0012141:	89 c2                	mov    edx,eax
c0012143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012147:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001214a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012152:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001215a:	7f 1c                	jg     c0012178 <VAS::VAS(bool)+0x96>
c001215c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012160:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012163:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012167:	c1 e2 02             	shl    edx,0x2
c001216a:	01 d0                	add    eax,edx
c001216c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012172:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012176:	eb da                	jmp    c0012152 <VAS::VAS(bool)+0x70>
c0012178:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012180:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012188:	7f 71                	jg     c00121fb <VAS::VAS(bool)+0x119>
c001218a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001218e:	2d 00 02 00 00       	sub    eax,0x200
c0012193:	c1 e0 0c             	shl    eax,0xc
c0012196:	83 c8 03             	or     eax,0x3
c0012199:	89 c3                	mov    ebx,eax
c001219b:	e8 b4 4f 00 00       	call   c0017154 <thisCPU()>
c00121a0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121a6:	83 e0 10             	and    eax,0x10
c00121a9:	84 c0                	test   al,al
c00121ab:	74 07                	je     c00121b4 <VAS::VAS(bool)+0xd2>
c00121ad:	b8 00 01 00 00       	mov    eax,0x100
c00121b2:	eb 05                	jmp    c00121b9 <VAS::VAS(bool)+0xd7>
c00121b4:	b8 00 00 00 00       	mov    eax,0x0
c00121b9:	09 d8                	or     eax,ebx
c00121bb:	89 c1                	mov    ecx,eax
c00121bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121c8:	c1 e2 02             	shl    edx,0x2
c00121cb:	01 d0                	add    eax,edx
c00121cd:	89 ca                	mov    edx,ecx
c00121cf:	89 10                	mov    DWORD PTR [eax],edx
c00121d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121d5:	2d 40 03 00 00       	sub    eax,0x340
c00121da:	83 f8 7f             	cmp    eax,0x7f
c00121dd:	77 16                	ja     c00121f5 <VAS::VAS(bool)+0x113>
c00121df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ea:	c1 e2 02             	shl    edx,0x2
c00121ed:	01 d0                	add    eax,edx
c00121ef:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121f5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121f9:	eb 85                	jmp    c0012180 <VAS::VAS(bool)+0x9e>
c00121fb:	e8 54 4f 00 00       	call   c0017154 <thisCPU()>
c0012200:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012206:	83 e0 10             	and    eax,0x10
c0012209:	84 c0                	test   al,al
c001220b:	74 07                	je     c0012214 <VAS::VAS(bool)+0x132>
c001220d:	b8 03 41 00 00       	mov    eax,0x4103
c0012212:	eb 05                	jmp    c0012219 <VAS::VAS(bool)+0x137>
c0012214:	b8 03 40 00 00       	mov    eax,0x4003
c0012219:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001221d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012220:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012226:	89 02                	mov    DWORD PTR [edx],eax
c0012228:	e8 27 4f 00 00       	call   c0017154 <thisCPU()>
c001222d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012233:	83 ec 08             	sub    esp,0x8
c0012236:	50                   	push   eax
c0012237:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001223b:	e8 84 f9 ff ff       	call   c0011bc4 <VAS::setCPUSpecific(unsigned long)>
c0012240:	83 c4 10             	add    esp,0x10
c0012243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012247:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c001224a:	e8 05 4f 00 00       	call   c0017154 <thisCPU()>
c001224f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012255:	83 e0 10             	and    eax,0x10
c0012258:	84 c0                	test   al,al
c001225a:	74 07                	je     c0012263 <VAS::VAS(bool)+0x181>
c001225c:	b8 00 01 00 00       	mov    eax,0x100
c0012261:	eb 05                	jmp    c0012268 <VAS::VAS(bool)+0x186>
c0012263:	b8 00 00 00 00       	mov    eax,0x0
c0012268:	09 d8                	or     eax,ebx
c001226a:	89 c2                	mov    edx,eax
c001226c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012270:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012273:	05 fc 0f 00 00       	add    eax,0xffc
c0012278:	83 ca 03             	or     edx,0x3
c001227b:	89 10                	mov    DWORD PTR [eax],edx
c001227d:	e8 d2 4e 00 00       	call   c0017154 <thisCPU()>
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	50                   	push   eax
c0012286:	e8 af 17 00 00       	call   c0013a3a <Device::getName()>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	83 ec 08             	sub    esp,0x8
c0012291:	68 f8 97 03 c0       	push   0xc00397f8
c0012296:	50                   	push   eax
c0012297:	e8 de e5 fe ff       	call   c000087a <strcmp>
c001229c:	83 c4 10             	add    esp,0x10
c001229f:	85 c0                	test   eax,eax
c00122a1:	0f 94 c0             	sete   al
c00122a4:	84 c0                	test   al,al
c00122a6:	74 64                	je     c001230c <VAS::VAS(bool)+0x22a>
c00122a8:	e8 76 c0 ff ff       	call   c000e323 <disableIRQs()>
c00122ad:	e8 a2 4e 00 00       	call   c0017154 <thisCPU()>
c00122b2:	05 7c 09 00 00       	add    eax,0x97c
c00122b7:	83 ec 0c             	sub    esp,0xc
c00122ba:	50                   	push   eax
c00122bb:	e8 32 a7 ff ff       	call   c000c9f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122c8:	89 c3                	mov    ebx,eax
c00122ca:	e8 85 4e 00 00       	call   c0017154 <thisCPU()>
c00122cf:	05 7c 09 00 00       	add    eax,0x97c
c00122d4:	83 ec 0c             	sub    esp,0xc
c00122d7:	50                   	push   eax
c00122d8:	e8 15 a7 ff ff       	call   c000c9f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	83 ec 08             	sub    esp,0x8
c00122e3:	50                   	push   eax
c00122e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122e8:	e8 e7 f2 ff ff       	call   c00115d4 <VAS::getPageTableEntry(unsigned long)>
c00122ed:	83 c4 10             	add    esp,0x10
c00122f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00122f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122f7:	6a 11                	push   0x11
c00122f9:	53                   	push   ebx
c00122fa:	50                   	push   eax
c00122fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122ff:	e8 f0 f5 ff ff       	call   c00118f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	e8 25 c0 ff ff       	call   c000e331 <enableIRQs()>
c001230c:	90                   	nop
c001230d:	83 c4 28             	add    esp,0x28
c0012310:	5b                   	pop    ebx
c0012311:	c3                   	ret    

c0012312 <mapVASFirstTime>:
c0012312:	55                   	push   ebp
c0012313:	57                   	push   edi
c0012314:	56                   	push   esi
c0012315:	53                   	push   ebx
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001231e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012321:	4a                   	dec    edx
c0012322:	0f 84 99 00 00 00    	je     c00123c1 <mapVASFirstTime+0xaf>
c0012328:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001232b:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001232e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012333:	c1 e5 15             	shl    ebp,0x15
c0012336:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001233b:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012341:	29 eb                	sub    ebx,ebp
c0012343:	29 ee                	sub    esi,ebp
c0012345:	e8 f9 b6 ff ff       	call   c000da43 <Phys::allocatePage()>
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	68 03 04 00 00       	push   0x403
c0012352:	6a 01                	push   0x1
c0012354:	53                   	push   ebx
c0012355:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001235b:	50                   	push   eax
c001235c:	57                   	push   edi
c001235d:	e8 7e f8 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012362:	83 c4 20             	add    esp,0x20
c0012365:	39 f3                	cmp    ebx,esi
c0012367:	75 dc                	jne    c0012345 <mapVASFirstTime+0x33>
c0012369:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001236e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012373:	29 ee                	sub    esi,ebp
c0012375:	29 e8                	sub    eax,ebp
c0012377:	89 c5                	mov    ebp,eax
c0012379:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001237d:	19 db                	sbb    ebx,ebx
c001237f:	e8 bf b6 ff ff       	call   c000da43 <Phys::allocatePage()>
c0012384:	83 e3 04             	and    ebx,0x4
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012390:	53                   	push   ebx
c0012391:	6a 01                	push   0x1
c0012393:	56                   	push   esi
c0012394:	81 ee 00 10 00 00    	sub    esi,0x1000
c001239a:	50                   	push   eax
c001239b:	57                   	push   edi
c001239c:	e8 3f f8 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123a1:	83 c4 20             	add    esp,0x20
c00123a4:	39 f5                	cmp    ebp,esi
c00123a6:	75 d1                	jne    c0012379 <mapVASFirstTime+0x67>
c00123a8:	e8 0c c6 00 00       	call   c001e9b9 <CPU::readCR3()>
c00123ad:	83 ec 0c             	sub    esp,0xc
c00123b0:	50                   	push   eax
c00123b1:	e8 27 c6 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c00123b6:	83 c4 10             	add    esp,0x10
c00123b9:	83 c4 0c             	add    esp,0xc
c00123bc:	5b                   	pop    ebx
c00123bd:	5e                   	pop    esi
c00123be:	5f                   	pop    edi
c00123bf:	5d                   	pop    ebp
c00123c0:	c3                   	ret    
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	68 06 98 03 c0       	push   0xc0039806
c00123c9:	e8 d0 aa ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00123ce:	83 c4 10             	add    esp,0x10
c00123d1:	83 c4 0c             	add    esp,0xc
c00123d4:	5b                   	pop    ebx
c00123d5:	5e                   	pop    esi
c00123d6:	5f                   	pop    edi
c00123d7:	5d                   	pop    ebp
c00123d8:	c3                   	ret    

c00123d9 <__cxa_atexit>:
c00123d9:	31 c0                	xor    eax,eax
c00123db:	c3                   	ret    

c00123dc <__cxa_finalize>:
c00123dc:	c3                   	ret    

c00123dd <__stack_chk_fail>:
c00123dd:	55                   	push   ebp
c00123de:	89 e5                	mov    ebp,esp
c00123e0:	83 ec 10             	sub    esp,0x10
c00123e3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123e6:	68 1f 98 03 c0       	push   0xc003981f
c00123eb:	e8 ae aa ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00123f0:	58                   	pop    eax
c00123f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123f4:	5a                   	pop    edx
c00123f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123f8:	68 1f 98 03 c0       	push   0xc003981f
c00123fd:	e8 9c aa ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0012402:	59                   	pop    ecx
c0012403:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012406:	5a                   	pop    edx
c0012407:	8b 00                	mov    eax,DWORD PTR [eax]
c0012409:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001240c:	68 1f 98 03 c0       	push   0xc003981f
c0012411:	e8 88 aa ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0012416:	59                   	pop    ecx
c0012417:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001241a:	5a                   	pop    edx
c001241b:	8b 00                	mov    eax,DWORD PTR [eax]
c001241d:	8b 00                	mov    eax,DWORD PTR [eax]
c001241f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012422:	68 1f 98 03 c0       	push   0xc003981f
c0012427:	e8 72 aa ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001242c:	c7 04 24 27 98 03 c0 	mov    DWORD PTR [esp],0xc0039827
c0012433:	e8 84 ab ff ff       	call   c000cfbc <panic(char const*)>
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	c9                   	leave  
c001243c:	c3                   	ret    

c001243d <__cxa_pure_virtual>:
c001243d:	83 ec 18             	sub    esp,0x18
c0012440:	68 3f 98 03 c0       	push   0xc003983f
c0012445:	e8 72 ab ff ff       	call   c000cfbc <panic(char const*)>
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	c3                   	ret    

c001244e <operator new(unsigned long)>:
c001244e:	e9 46 b0 ff ff       	jmp    c000d499 <malloc>

c0012453 <operator new[](unsigned long)>:
c0012453:	e9 41 b0 ff ff       	jmp    c000d499 <malloc>

c0012458 <operator delete(void*)>:
c0012458:	e9 5c b0 ff ff       	jmp    c000d4b9 <rfree>

c001245d <operator delete(void*, unsigned long)>:
c001245d:	e9 57 b0 ff ff       	jmp    c000d4b9 <rfree>

c0012462 <operator delete[](void*)>:
c0012462:	e9 52 b0 ff ff       	jmp    c000d4b9 <rfree>

c0012467 <operator delete[](void*, unsigned long)>:
c0012467:	e9 4d b0 ff ff       	jmp    c000d4b9 <rfree>

c001246c <File::read(unsigned long long, void*, int*)>:
c001246c:	53                   	push   ebx
c001246d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012471:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012475:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001247c:	3c 19                	cmp    al,0x19
c001247e:	77 35                	ja     c00124b5 <File::read(unsigned long long, void*, int*)+0x49>
c0012480:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0012487:	85 c0                	test   eax,eax
c0012489:	74 2a                	je     c00124b5 <File::read(unsigned long long, void*, int*)+0x49>
c001248b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012491:	85 c0                	test   eax,eax
c0012493:	74 20                	je     c00124b5 <File::read(unsigned long long, void*, int*)+0x49>
c0012495:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012499:	74 21                	je     c00124bc <File::read(unsigned long long, void*, int*)+0x50>
c001249b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001249d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124af:	5b                   	pop    ebx
c00124b0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00124b3:	ff e0                	jmp    eax
c00124b5:	b8 0b 00 00 00       	mov    eax,0xb
c00124ba:	eb 05                	jmp    c00124c1 <File::read(unsigned long long, void*, int*)+0x55>
c00124bc:	b8 05 00 00 00       	mov    eax,0x5
c00124c1:	5b                   	pop    ebx
c00124c2:	c3                   	ret    
c00124c3:	90                   	nop

c00124c4 <File::write(unsigned long long, void*, int*)>:
c00124c4:	53                   	push   ebx
c00124c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124d4:	3c 19                	cmp    al,0x19
c00124d6:	77 35                	ja     c001250d <File::write(unsigned long long, void*, int*)+0x49>
c00124d8:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c00124df:	85 c0                	test   eax,eax
c00124e1:	74 2a                	je     c001250d <File::write(unsigned long long, void*, int*)+0x49>
c00124e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124e9:	85 c0                	test   eax,eax
c00124eb:	74 20                	je     c001250d <File::write(unsigned long long, void*, int*)+0x49>
c00124ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124f1:	74 21                	je     c0012514 <File::write(unsigned long long, void*, int*)+0x50>
c00124f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124f9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012503:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012507:	5b                   	pop    ebx
c0012508:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001250b:	ff e0                	jmp    eax
c001250d:	b8 0b 00 00 00       	mov    eax,0xb
c0012512:	eb 05                	jmp    c0012519 <File::write(unsigned long long, void*, int*)+0x55>
c0012514:	b8 05 00 00 00       	mov    eax,0x5
c0012519:	5b                   	pop    ebx
c001251a:	c3                   	ret    
c001251b:	90                   	nop

c001251c <Directory::read(unsigned long long, void*, int*)>:
c001251c:	53                   	push   ebx
c001251d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012521:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012525:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001252c:	3c 19                	cmp    al,0x19
c001252e:	77 35                	ja     c0012565 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012530:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0012537:	85 c0                	test   eax,eax
c0012539:	74 2a                	je     c0012565 <Directory::read(unsigned long long, void*, int*)+0x49>
c001253b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012541:	85 c0                	test   eax,eax
c0012543:	74 20                	je     c0012565 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012545:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012549:	74 21                	je     c001256c <Directory::read(unsigned long long, void*, int*)+0x50>
c001254b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001254d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012551:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001255b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001255f:	5b                   	pop    ebx
c0012560:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012563:	ff e0                	jmp    eax
c0012565:	b8 0b 00 00 00       	mov    eax,0xb
c001256a:	eb 05                	jmp    c0012571 <Directory::read(unsigned long long, void*, int*)+0x55>
c001256c:	b8 05 00 00 00       	mov    eax,0x5
c0012571:	5b                   	pop    ebx
c0012572:	c3                   	ret    
c0012573:	90                   	nop

c0012574 <Directory::write(unsigned long long, void*, int*)>:
c0012574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012578:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001257f:	b8 0b 00 00 00       	mov    eax,0xb
c0012584:	80 fa 19             	cmp    dl,0x19
c0012587:	77 18                	ja     c00125a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012589:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012590:	85 d2                	test   edx,edx
c0012592:	74 0d                	je     c00125a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012594:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001259b:	19 c0                	sbb    eax,eax
c001259d:	83 e0 0a             	and    eax,0xa
c00125a0:	40                   	inc    eax
c00125a1:	c3                   	ret    

c00125a2 <File::isAtty()>:
c00125a2:	31 c0                	xor    eax,eax
c00125a4:	c3                   	ret    
c00125a5:	90                   	nop

c00125a6 <Directory::isAtty()>:
c00125a6:	31 c0                	xor    eax,eax
c00125a8:	c3                   	ret    
c00125a9:	90                   	nop

c00125aa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00125aa:	b8 0a 00 00 00       	mov    eax,0xa
c00125af:	c3                   	ret    

c00125b0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00125b0:	b8 0a 00 00 00       	mov    eax,0xa
c00125b5:	c3                   	ret    

c00125b6 <File::~File()>:
c00125b6:	83 ec 0c             	sub    esp,0xc
c00125b9:	ba c0 98 03 c0       	mov    edx,0xc00398c0
c00125be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c2:	89 10                	mov    DWORD PTR [eax],edx
c00125c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c8:	83 ec 0c             	sub    esp,0xc
c00125cb:	50                   	push   eax
c00125cc:	e8 0d eb ff ff       	call   c00110de <UnixFile::~UnixFile()>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	90                   	nop
c00125d5:	83 c4 0c             	add    esp,0xc
c00125d8:	c3                   	ret    
c00125d9:	90                   	nop

c00125da <File::~File()>:
c00125da:	83 ec 0c             	sub    esp,0xc
c00125dd:	83 ec 0c             	sub    esp,0xc
c00125e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e4:	e8 cd ff ff ff       	call   c00125b6 <File::~File()>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	83 ec 08             	sub    esp,0x8
c00125ef:	68 14 01 00 00       	push   0x114
c00125f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125f8:	e8 60 fe ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	83 c4 0c             	add    esp,0xc
c0012603:	c3                   	ret    

c0012604 <Directory::~Directory()>:
c0012604:	83 ec 0c             	sub    esp,0xc
c0012607:	ba dc 98 03 c0       	mov    edx,0xc00398dc
c001260c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012610:	89 10                	mov    DWORD PTR [eax],edx
c0012612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012616:	83 ec 0c             	sub    esp,0xc
c0012619:	50                   	push   eax
c001261a:	e8 bf ea ff ff       	call   c00110de <UnixFile::~UnixFile()>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	90                   	nop
c0012623:	83 c4 0c             	add    esp,0xc
c0012626:	c3                   	ret    
c0012627:	90                   	nop

c0012628 <Directory::~Directory()>:
c0012628:	83 ec 0c             	sub    esp,0xc
c001262b:	83 ec 0c             	sub    esp,0xc
c001262e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012632:	e8 cd ff ff ff       	call   c0012604 <Directory::~Directory()>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	83 ec 08             	sub    esp,0x8
c001263d:	68 14 01 00 00       	push   0x114
c0012642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012646:	e8 12 fe ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	83 c4 0c             	add    esp,0xc
c0012651:	c3                   	ret    

c0012652 <Filesystem::Filesystem()>:
c0012652:	ba 5c 98 03 c0       	mov    edx,0xc003985c
c0012657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265b:	89 10                	mov    DWORD PTR [eax],edx
c001265d:	8b 15 80 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be80
c0012663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012667:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001266a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001266e:	a3 80 be 03 c0       	mov    ds:0xc003be80,eax
c0012673:	90                   	nop
c0012674:	c3                   	ret    
c0012675:	90                   	nop

c0012676 <Filesystem::~Filesystem()>:
c0012676:	ba 5c 98 03 c0       	mov    edx,0xc003985c
c001267b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001267f:	89 10                	mov    DWORD PTR [eax],edx
c0012681:	90                   	nop
c0012682:	c3                   	ret    
c0012683:	90                   	nop

c0012684 <Filesystem::~Filesystem()>:
c0012684:	83 ec 0c             	sub    esp,0xc
c0012687:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001268b:	e8 e6 ff ff ff       	call   c0012676 <Filesystem::~Filesystem()>
c0012690:	83 c4 04             	add    esp,0x4
c0012693:	83 ec 08             	sub    esp,0x8
c0012696:	6a 08                	push   0x8
c0012698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001269c:	e8 bc fd ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00126a1:	83 c4 10             	add    esp,0x10
c00126a4:	83 c4 0c             	add    esp,0xc
c00126a7:	c3                   	ret    

c00126a8 <initVFS()>:
c00126a8:	83 ec 18             	sub    esp,0x18
c00126ab:	6a 08                	push   0x8
c00126ad:	e8 9c fd ff ff       	call   c001244e <operator new(unsigned long)>
c00126b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00126b5:	e8 f4 70 00 00       	call   c00197ae <FAT::FAT()>
c00126ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00126c1:	e8 88 fd ff ff       	call   c001244e <operator new(unsigned long)>
c00126c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00126c9:	e8 ea 82 00 00       	call   c001a9b8 <ISO9660::ISO9660()>
c00126ce:	83 c4 1c             	add    esp,0x1c
c00126d1:	c3                   	ret    

c00126d2 <standardiseFiles(char*, char const*, char const*)>:
c00126d2:	55                   	push   ebp
c00126d3:	57                   	push   edi
c00126d4:	56                   	push   esi
c00126d5:	53                   	push   ebx
c00126d6:	81 ec 10 04 00 00    	sub    esp,0x410
c00126dc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00126e3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00126ea:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00126f1:	68 00 04 00 00       	push   0x400
c00126f6:	6a 00                	push   0x0
c00126f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00126fc:	56                   	push   esi
c00126fd:	e8 d6 df fe ff       	call   c00006d8 <memset>
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012709:	75 0b                	jne    c0012716 <standardiseFiles(char*, char const*, char const*)+0x44>
c001270b:	50                   	push   eax
c001270c:	50                   	push   eax
c001270d:	57                   	push   edi
c001270e:	56                   	push   esi
c001270f:	e8 e0 e0 fe ff       	call   c00007f4 <strcpy>
c0012714:	eb 41                	jmp    c0012757 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012716:	8a 07                	mov    al,BYTE PTR [edi]
c0012718:	3c 5c                	cmp    al,0x5c
c001271a:	74 04                	je     c0012720 <standardiseFiles(char*, char const*, char const*)+0x4e>
c001271c:	3c 2f                	cmp    al,0x2f
c001271e:	75 18                	jne    c0012738 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012720:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012723:	3c 60                	cmp    al,0x60
c0012725:	7e 03                	jle    c001272a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012727:	83 e8 20             	sub    eax,0x20
c001272a:	88 04 24             	mov    BYTE PTR [esp],al
c001272d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012734:	50                   	push   eax
c0012735:	50                   	push   eax
c0012736:	eb 18                	jmp    c0012750 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012738:	50                   	push   eax
c0012739:	50                   	push   eax
c001273a:	55                   	push   ebp
c001273b:	56                   	push   esi
c001273c:	e8 b3 e0 fe ff       	call   c00007f4 <strcpy>
c0012741:	5a                   	pop    edx
c0012742:	59                   	pop    ecx
c0012743:	68 52 8f 03 c0       	push   0xc0038f52
c0012748:	56                   	push   esi
c0012749:	e8 f3 e1 fe ff       	call   c0000941 <strcat>
c001274e:	5d                   	pop    ebp
c001274f:	58                   	pop    eax
c0012750:	57                   	push   edi
c0012751:	56                   	push   esi
c0012752:	e8 ea e1 fe ff       	call   c0000941 <strcat>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001275d:	3c 60                	cmp    al,0x60
c001275f:	7e 03                	jle    c0012764 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012761:	83 e8 20             	sub    eax,0x20
c0012764:	88 04 24             	mov    BYTE PTR [esp],al
c0012767:	88 03                	mov    BYTE PTR [ebx],al
c0012769:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012770:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012776:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001277a:	bf 03 00 00 00       	mov    edi,0x3
c001277f:	b8 03 00 00 00       	mov    eax,0x3
c0012784:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012787:	84 d2                	test   dl,dl
c0012789:	0f 84 91 00 00 00    	je     c0012820 <standardiseFiles(char*, char const*, char const*)+0x14e>
c001278f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012792:	80 fa 5c             	cmp    dl,0x5c
c0012795:	74 05                	je     c001279c <standardiseFiles(char*, char const*, char const*)+0xca>
c0012797:	80 fa 2f             	cmp    dl,0x2f
c001279a:	75 12                	jne    c00127ae <standardiseFiles(char*, char const*, char const*)+0xdc>
c001279c:	89 c5                	mov    ebp,eax
c001279e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00127a3:	74 09                	je     c00127ae <standardiseFiles(char*, char const*, char const*)+0xdc>
c00127a5:	40                   	inc    eax
c00127a6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00127aa:	89 cf                	mov    edi,ecx
c00127ac:	eb d6                	jmp    c0012784 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00127ae:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00127b3:	75 5b                	jne    c0012810 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127b5:	80 fa 2e             	cmp    dl,0x2e
c00127b8:	75 56                	jne    c0012810 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127ba:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00127be:	74 19                	je     c00127d9 <standardiseFiles(char*, char const*, char const*)+0x107>
c00127c0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127c5:	74 53                	je     c001281a <standardiseFiles(char*, char const*, char const*)+0x148>
c00127c7:	89 f9                	mov    ecx,edi
c00127c9:	41                   	inc    ecx
c00127ca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127cd:	80 fa 2f             	cmp    dl,0x2f
c00127d0:	74 f7                	je     c00127c9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127d2:	80 fa 5c             	cmp    dl,0x5c
c00127d5:	74 f2                	je     c00127c9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127d7:	eb d1                	jmp    c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127d9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127de:	74 3a                	je     c001281a <standardiseFiles(char*, char const*, char const*)+0x148>
c00127e0:	83 f8 03             	cmp    eax,0x3
c00127e3:	74 c5                	je     c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127e5:	41                   	inc    ecx
c00127e6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127e9:	80 fa 2f             	cmp    dl,0x2f
c00127ec:	74 f7                	je     c00127e5 <standardiseFiles(char*, char const*, char const*)+0x113>
c00127ee:	80 fa 5c             	cmp    dl,0x5c
c00127f1:	74 f2                	je     c00127e5 <standardiseFiles(char*, char const*, char const*)+0x113>
c00127f3:	48                   	dec    eax
c00127f4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00127f8:	75 06                	jne    c0012800 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00127fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00127fe:	eb f3                	jmp    c00127f3 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012800:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012804:	74 07                	je     c001280d <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012806:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001280a:	48                   	dec    eax
c001280b:	eb f3                	jmp    c0012800 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001280d:	40                   	inc    eax
c001280e:	eb 9a                	jmp    c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012810:	80 fa 2f             	cmp    dl,0x2f
c0012813:	74 95                	je     c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012815:	80 fa 5c             	cmp    dl,0x5c
c0012818:	74 90                	je     c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c001281a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001281d:	40                   	inc    eax
c001281e:	eb 8a                	jmp    c00127aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012820:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012824:	83 ec 0c             	sub    esp,0xc
c0012827:	53                   	push   ebx
c0012828:	e8 d4 de fe ff       	call   c0000701 <strlen>
c001282d:	83 c4 10             	add    esp,0x10
c0012830:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012835:	75 26                	jne    c001285d <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012837:	83 ec 0c             	sub    esp,0xc
c001283a:	53                   	push   ebx
c001283b:	e8 c1 de fe ff       	call   c0000701 <strlen>
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012848:	74 26                	je     c0012870 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	53                   	push   ebx
c001284e:	e8 ae de fe ff       	call   c0000701 <strlen>
c0012853:	83 c4 10             	add    esp,0x10
c0012856:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001285b:	eb c7                	jmp    c0012824 <standardiseFiles(char*, char const*, char const*)+0x152>
c001285d:	83 ec 0c             	sub    esp,0xc
c0012860:	53                   	push   ebx
c0012861:	e8 9b de fe ff       	call   c0000701 <strlen>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001286e:	74 c7                	je     c0012837 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012870:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012876:	5b                   	pop    ebx
c0012877:	5e                   	pop    esi
c0012878:	5f                   	pop    edi
c0012879:	5d                   	pop    ebp
c001287a:	c3                   	ret    
c001287b:	90                   	nop

c001287c <File::File(char const*, Process*)>:
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012883:	83 ec 08             	sub    esp,0x8
c0012886:	6a 00                	push   0x0
c0012888:	50                   	push   eax
c0012889:	e8 ec e7 ff ff       	call   c001107a <UnixFile::UnixFile(int)>
c001288e:	83 c4 10             	add    esp,0x10
c0012891:	ba c0 98 03 c0       	mov    edx,0xc00398c0
c0012896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289a:	89 10                	mov    DWORD PTR [eax],edx
c001289c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128a0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00128a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128aa:	83 c0 0d             	add    eax,0xd
c00128ad:	83 ec 04             	sub    esp,0x4
c00128b0:	52                   	push   edx
c00128b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b5:	50                   	push   eax
c00128b6:	e8 17 fe ff ff       	call   c00126d2 <standardiseFiles(char*, char const*, char const*)>
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00128c5:	8d 50 bf             	lea    edx,[eax-0x41]
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00128d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00128da:	90                   	nop
c00128db:	83 c4 0c             	add    esp,0xc
c00128de:	c3                   	ret    
c00128df:	90                   	nop

c00128e0 <File::open(FileOpenMode)>:
c00128e0:	53                   	push   ebx
c00128e1:	b8 0b 00 00 00       	mov    eax,0xb
c00128e6:	83 ec 08             	sub    esp,0x8
c00128e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128ed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00128f4:	80 fa 19             	cmp    dl,0x19
c00128f7:	77 40                	ja     c0012939 <File::open(FileOpenMode)+0x59>
c00128f9:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012900:	85 d2                	test   edx,edx
c0012902:	74 35                	je     c0012939 <File::open(FileOpenMode)+0x59>
c0012904:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001290a:	85 d2                	test   edx,edx
c001290c:	74 2b                	je     c0012939 <File::open(FileOpenMode)+0x59>
c001290e:	b8 06 00 00 00       	mov    eax,0x6
c0012913:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012917:	75 20                	jne    c0012939 <File::open(FileOpenMode)+0x59>
c0012919:	8b 02                	mov    eax,DWORD PTR [edx]
c001291b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012921:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012925:	51                   	push   ecx
c0012926:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012929:	51                   	push   ecx
c001292a:	52                   	push   edx
c001292b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001292e:	83 c4 10             	add    esp,0x10
c0012931:	85 c0                	test   eax,eax
c0012933:	75 04                	jne    c0012939 <File::open(FileOpenMode)+0x59>
c0012935:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012939:	83 c4 08             	add    esp,0x8
c001293c:	5b                   	pop    ebx
c001293d:	c3                   	ret    

c001293e <File::close()>:
c001293e:	53                   	push   ebx
c001293f:	b8 0b 00 00 00       	mov    eax,0xb
c0012944:	83 ec 08             	sub    esp,0x8
c0012947:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001294b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012952:	80 fa 19             	cmp    dl,0x19
c0012955:	77 41                	ja     c0012998 <File::close()+0x5a>
c0012957:	8b 1c 95 20 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3ce0]
c001295e:	85 db                	test   ebx,ebx
c0012960:	74 36                	je     c0012998 <File::close()+0x5a>
c0012962:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012969:	74 2d                	je     c0012998 <File::close()+0x5a>
c001296b:	b8 05 00 00 00       	mov    eax,0x5
c0012970:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012974:	74 22                	je     c0012998 <File::close()+0x5a>
c0012976:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001297a:	8b 04 95 20 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3ce0]
c0012981:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012987:	53                   	push   ebx
c0012988:	53                   	push   ebx
c0012989:	8b 10                	mov    edx,DWORD PTR [eax]
c001298b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012991:	50                   	push   eax
c0012992:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	83 c4 08             	add    esp,0x8
c001299b:	5b                   	pop    ebx
c001299c:	c3                   	ret    
c001299d:	90                   	nop

c001299e <File::seek(unsigned long long)>:
c001299e:	56                   	push   esi
c001299f:	53                   	push   ebx
c00129a0:	b8 0b 00 00 00       	mov    eax,0xb
c00129a5:	51                   	push   ecx
c00129a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00129aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00129ae:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00129b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00129b9:	80 fa 19             	cmp    dl,0x19
c00129bc:	77 31                	ja     c00129ef <File::seek(unsigned long long)+0x51>
c00129be:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c00129c5:	85 d2                	test   edx,edx
c00129c7:	74 26                	je     c00129ef <File::seek(unsigned long long)+0x51>
c00129c9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00129cf:	85 d2                	test   edx,edx
c00129d1:	74 1c                	je     c00129ef <File::seek(unsigned long long)+0x51>
c00129d3:	b8 05 00 00 00       	mov    eax,0x5
c00129d8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00129dc:	74 11                	je     c00129ef <File::seek(unsigned long long)+0x51>
c00129de:	8b 02                	mov    eax,DWORD PTR [edx]
c00129e0:	53                   	push   ebx
c00129e1:	51                   	push   ecx
c00129e2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00129e8:	52                   	push   edx
c00129e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	5a                   	pop    edx
c00129f0:	5b                   	pop    ebx
c00129f1:	5e                   	pop    esi
c00129f2:	c3                   	ret    
c00129f3:	90                   	nop

c00129f4 <File::tell(unsigned long long*)>:
c00129f4:	83 ec 0c             	sub    esp,0xc
c00129f7:	b8 0b 00 00 00       	mov    eax,0xb
c00129fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a00:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012a07:	80 fa 19             	cmp    dl,0x19
c0012a0a:	77 34                	ja     c0012a40 <File::tell(unsigned long long*)+0x4c>
c0012a0c:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012a13:	85 d2                	test   edx,edx
c0012a15:	74 29                	je     c0012a40 <File::tell(unsigned long long*)+0x4c>
c0012a17:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a1d:	85 d2                	test   edx,edx
c0012a1f:	74 1f                	je     c0012a40 <File::tell(unsigned long long*)+0x4c>
c0012a21:	b8 05 00 00 00       	mov    eax,0x5
c0012a26:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a2a:	74 14                	je     c0012a40 <File::tell(unsigned long long*)+0x4c>
c0012a2c:	50                   	push   eax
c0012a2d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a33:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a39:	52                   	push   edx
c0012a3a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	83 c4 0c             	add    esp,0xc
c0012a43:	c3                   	ret    

c0012a44 <File::rewind()>:
c0012a44:	83 ec 10             	sub    esp,0x10
c0012a47:	6a 00                	push   0x0
c0012a49:	6a 00                	push   0x0
c0012a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4f:	e8 4a ff ff ff       	call   c001299e <File::seek(unsigned long long)>
c0012a54:	83 c4 1c             	add    esp,0x1c
c0012a57:	c3                   	ret    

c0012a58 <File::unlink()>:
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a6b:	80 f9 19             	cmp    cl,0x19
c0012a6e:	77 2f                	ja     c0012a9f <File::unlink()+0x47>
c0012a70:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012a77:	85 c9                	test   ecx,ecx
c0012a79:	74 24                	je     c0012a9f <File::unlink()+0x47>
c0012a7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a81:	85 c9                	test   ecx,ecx
c0012a83:	74 1a                	je     c0012a9f <File::unlink()+0x47>
c0012a85:	b8 06 00 00 00       	mov    eax,0x6
c0012a8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a8e:	75 0f                	jne    c0012a9f <File::unlink()+0x47>
c0012a90:	83 c2 0d             	add    edx,0xd
c0012a93:	50                   	push   eax
c0012a94:	50                   	push   eax
c0012a95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a97:	52                   	push   edx
c0012a98:	51                   	push   ecx
c0012a99:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012a9c:	83 c4 10             	add    esp,0x10
c0012a9f:	83 c4 0c             	add    esp,0xc
c0012aa2:	c3                   	ret    
c0012aa3:	90                   	nop

c0012aa4 <File::rename(char const*)>:
c0012aa4:	83 ec 0c             	sub    esp,0xc
c0012aa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012aac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ab0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ab7:	80 f9 19             	cmp    cl,0x19
c0012aba:	77 32                	ja     c0012aee <File::rename(char const*)+0x4a>
c0012abc:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	74 27                	je     c0012aee <File::rename(char const*)+0x4a>
c0012ac7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012acd:	85 c9                	test   ecx,ecx
c0012acf:	74 1d                	je     c0012aee <File::rename(char const*)+0x4a>
c0012ad1:	b8 06 00 00 00       	mov    eax,0x6
c0012ad6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ada:	75 12                	jne    c0012aee <File::rename(char const*)+0x4a>
c0012adc:	83 c2 0d             	add    edx,0xd
c0012adf:	50                   	push   eax
c0012ae0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ae6:	52                   	push   edx
c0012ae7:	51                   	push   ecx
c0012ae8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	83 c4 0c             	add    esp,0xc
c0012af1:	c3                   	ret    

c0012af2 <File::chfatattr(unsigned char, unsigned char)>:
c0012af2:	57                   	push   edi
c0012af3:	b8 0b 00 00 00       	mov    eax,0xb
c0012af8:	56                   	push   esi
c0012af9:	53                   	push   ebx
c0012afa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012afe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b0d:	80 f9 19             	cmp    cl,0x19
c0012b10:	77 37                	ja     c0012b49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b12:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012b19:	85 c9                	test   ecx,ecx
c0012b1b:	74 2c                	je     c0012b49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b1d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b23:	85 c9                	test   ecx,ecx
c0012b25:	74 22                	je     c0012b49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b27:	b8 06 00 00 00       	mov    eax,0x6
c0012b2c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b30:	75 17                	jne    c0012b49 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b32:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012b34:	89 f0                	mov    eax,esi
c0012b36:	83 c2 0d             	add    edx,0xd
c0012b39:	0f b6 f0             	movzx  esi,al
c0012b3c:	0f b6 db             	movzx  ebx,bl
c0012b3f:	56                   	push   esi
c0012b40:	53                   	push   ebx
c0012b41:	52                   	push   edx
c0012b42:	51                   	push   ecx
c0012b43:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	5b                   	pop    ebx
c0012b4a:	5e                   	pop    esi
c0012b4b:	5f                   	pop    edi
c0012b4c:	c3                   	ret    
c0012b4d:	90                   	nop

c0012b4e <File::exists()>:
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	31 c0                	xor    eax,eax
c0012b53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b57:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b5e:	80 f9 19             	cmp    cl,0x19
c0012b61:	77 24                	ja     c0012b87 <File::exists()+0x39>
c0012b63:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012b6a:	85 c9                	test   ecx,ecx
c0012b6c:	74 19                	je     c0012b87 <File::exists()+0x39>
c0012b6e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b74:	85 c9                	test   ecx,ecx
c0012b76:	74 0f                	je     c0012b87 <File::exists()+0x39>
c0012b78:	83 c2 0d             	add    edx,0xd
c0012b7b:	50                   	push   eax
c0012b7c:	50                   	push   eax
c0012b7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b7f:	52                   	push   edx
c0012b80:	51                   	push   ecx
c0012b81:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012b84:	83 c4 10             	add    esp,0x10
c0012b87:	83 c4 0c             	add    esp,0xc
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <File::stat(unsigned long long*, bool*)>:
c0012b8c:	56                   	push   esi
c0012b8d:	53                   	push   ebx
c0012b8e:	50                   	push   eax
c0012b8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012b94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ba3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ba7:	80 f9 19             	cmp    cl,0x19
c0012baa:	77 3d                	ja     c0012be9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012bac:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012bb3:	85 c9                	test   ecx,ecx
c0012bb5:	74 32                	je     c0012be9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012bb7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bbd:	85 c9                	test   ecx,ecx
c0012bbf:	74 28                	je     c0012be9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012bc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bc3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bc7:	74 13                	je     c0012bdc <File::stat(unsigned long long*, bool*)+0x50>
c0012bc9:	83 ec 04             	sub    esp,0x4
c0012bcc:	56                   	push   esi
c0012bcd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012bd3:	51                   	push   ecx
c0012bd4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012bd7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012bda:	eb 0a                	jmp    c0012be6 <File::stat(unsigned long long*, bool*)+0x5a>
c0012bdc:	53                   	push   ebx
c0012bdd:	83 c2 0d             	add    edx,0xd
c0012be0:	56                   	push   esi
c0012be1:	52                   	push   edx
c0012be2:	51                   	push   ecx
c0012be3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	5a                   	pop    edx
c0012bea:	5b                   	pop    ebx
c0012beb:	5e                   	pop    esi
c0012bec:	c3                   	ret    

c0012bed <getcwd(Process*, char*, int)>:
c0012bed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bf1:	31 c0                	xor    eax,eax
c0012bf3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bf6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bfa:	7d 15                	jge    c0012c11 <getcwd(Process*, char*, int)+0x24>
c0012bfc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c00:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c07:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c0a:	84 c9                	test   cl,cl
c0012c0c:	74 06                	je     c0012c14 <getcwd(Process*, char*, int)+0x27>
c0012c0e:	40                   	inc    eax
c0012c0f:	eb e2                	jmp    c0012bf3 <getcwd(Process*, char*, int)+0x6>
c0012c11:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c14:	31 c0                	xor    eax,eax
c0012c16:	c3                   	ret    

c0012c17 <setcwd(Process*, char*)>:
c0012c17:	55                   	push   ebp
c0012c18:	57                   	push   edi
c0012c19:	56                   	push   esi
c0012c1a:	53                   	push   ebx
c0012c1b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012c21:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012c28:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012c2e:	57                   	push   edi
c0012c2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012c36:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012c3a:	56                   	push   esi
c0012c3b:	e8 92 fa ff ff       	call   c00126d2 <standardiseFiles(char*, char const*, char const*)>
c0012c40:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c43:	e8 b9 da fe ff       	call   c0000701 <strlen>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	83 f8 02             	cmp    eax,0x2
c0012c4e:	77 17                	ja     c0012c67 <setcwd(Process*, char*)+0x50>
c0012c50:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012c55:	83 e8 41             	sub    eax,0x41
c0012c58:	83 f8 19             	cmp    eax,0x19
c0012c5b:	76 24                	jbe    c0012c81 <setcwd(Process*, char*)+0x6a>
c0012c5d:	b8 03 00 00 00       	mov    eax,0x3
c0012c62:	e9 cb 00 00 00       	jmp    c0012d32 <setcwd(Process*, char*)+0x11b>
c0012c67:	83 ec 0c             	sub    esp,0xc
c0012c6a:	56                   	push   esi
c0012c6b:	e8 91 da fe ff       	call   c0000701 <strlen>
c0012c70:	83 c4 10             	add    esp,0x10
c0012c73:	83 f8 03             	cmp    eax,0x3
c0012c76:	75 33                	jne    c0012cab <setcwd(Process*, char*)+0x94>
c0012c78:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012c7d:	75 2c                	jne    c0012cab <setcwd(Process*, char*)+0x94>
c0012c7f:	eb cf                	jmp    c0012c50 <setcwd(Process*, char*)+0x39>
c0012c81:	8b 14 85 20 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3ce0]
c0012c88:	b8 05 00 00 00       	mov    eax,0x5
c0012c8d:	85 d2                	test   edx,edx
c0012c8f:	0f 84 9d 00 00 00    	je     c0012d32 <setcwd(Process*, char*)+0x11b>
c0012c95:	b8 06 00 00 00       	mov    eax,0x6
c0012c9a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ca1:	0f 84 8b 00 00 00    	je     c0012d32 <setcwd(Process*, char*)+0x11b>
c0012ca7:	51                   	push   ecx
c0012ca8:	51                   	push   ecx
c0012ca9:	eb 7b                	jmp    c0012d26 <setcwd(Process*, char*)+0x10f>
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	68 14 01 00 00       	push   0x114
c0012cb3:	e8 96 f7 ff ff       	call   c001244e <operator new(unsigned long)>
c0012cb8:	83 c4 0c             	add    esp,0xc
c0012cbb:	89 c3                	mov    ebx,eax
c0012cbd:	55                   	push   ebp
c0012cbe:	56                   	push   esi
c0012cbf:	50                   	push   eax
c0012cc0:	e8 b7 fb ff ff       	call   c001287c <File::File(char const*, Process*)>
c0012cc5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012cca:	83 c4 0c             	add    esp,0xc
c0012ccd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012cd1:	50                   	push   eax
c0012cd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012cd6:	50                   	push   eax
c0012cd7:	53                   	push   ebx
c0012cd8:	e8 af fe ff ff       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ce2:	83 f8 02             	cmp    eax,0x2
c0012ce5:	75 09                	jne    c0012cf0 <setcwd(Process*, char*)+0xd9>
c0012ce7:	83 ec 0c             	sub    esp,0xc
c0012cea:	53                   	push   ebx
c0012ceb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012cee:	eb 0d                	jmp    c0012cfd <setcwd(Process*, char*)+0xe6>
c0012cf0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012cf3:	85 c0                	test   eax,eax
c0012cf5:	74 10                	je     c0012d07 <setcwd(Process*, char*)+0xf0>
c0012cf7:	83 ec 0c             	sub    esp,0xc
c0012cfa:	53                   	push   ebx
c0012cfb:	ff d2                	call   edx
c0012cfd:	83 c4 10             	add    esp,0x10
c0012d00:	b8 01 00 00 00       	mov    eax,0x1
c0012d05:	eb 2b                	jmp    c0012d32 <setcwd(Process*, char*)+0x11b>
c0012d07:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012d0c:	75 10                	jne    c0012d1e <setcwd(Process*, char*)+0x107>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	53                   	push   ebx
c0012d12:	ff d2                	call   edx
c0012d14:	83 c4 10             	add    esp,0x10
c0012d17:	b8 02 00 00 00       	mov    eax,0x2
c0012d1c:	eb 14                	jmp    c0012d32 <setcwd(Process*, char*)+0x11b>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	53                   	push   ebx
c0012d22:	ff d2                	call   edx
c0012d24:	58                   	pop    eax
c0012d25:	5a                   	pop    edx
c0012d26:	56                   	push   esi
c0012d27:	57                   	push   edi
c0012d28:	e8 c7 da fe ff       	call   c00007f4 <strcpy>
c0012d2d:	83 c4 10             	add    esp,0x10
c0012d30:	31 c0                	xor    eax,eax
c0012d32:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012d38:	5b                   	pop    ebx
c0012d39:	5e                   	pop    esi
c0012d3a:	5f                   	pop    edi
c0012d3b:	5d                   	pop    ebp
c0012d3c:	c3                   	ret    
c0012d3d:	90                   	nop

c0012d3e <Directory::Directory(char const*, Process*)>:
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d45:	83 ec 08             	sub    esp,0x8
c0012d48:	6a 00                	push   0x0
c0012d4a:	50                   	push   eax
c0012d4b:	e8 2a e3 ff ff       	call   c001107a <UnixFile::UnixFile(int)>
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	ba dc 98 03 c0       	mov    edx,0xc00398dc
c0012d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5c:	89 10                	mov    DWORD PTR [eax],edx
c0012d5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6c:	83 c0 0d             	add    eax,0xd
c0012d6f:	83 ec 04             	sub    esp,0x4
c0012d72:	52                   	push   edx
c0012d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d77:	50                   	push   eax
c0012d78:	e8 55 f9 ff ff       	call   c00126d2 <standardiseFiles(char*, char const*, char const*)>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d87:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d98:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d9c:	90                   	nop
c0012d9d:	83 c4 0c             	add    esp,0xc
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <Directory::open()>:
c0012da2:	53                   	push   ebx
c0012da3:	b8 0b 00 00 00       	mov    eax,0xb
c0012da8:	83 ec 08             	sub    esp,0x8
c0012dab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012daf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012db6:	80 fa 19             	cmp    dl,0x19
c0012db9:	77 3d                	ja     c0012df8 <Directory::open()+0x56>
c0012dbb:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012dc2:	85 d2                	test   edx,edx
c0012dc4:	74 32                	je     c0012df8 <Directory::open()+0x56>
c0012dc6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dcc:	85 d2                	test   edx,edx
c0012dce:	74 28                	je     c0012df8 <Directory::open()+0x56>
c0012dd0:	b8 06 00 00 00       	mov    eax,0x6
c0012dd5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012dd9:	75 1d                	jne    c0012df8 <Directory::open()+0x56>
c0012ddb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012de1:	50                   	push   eax
c0012de2:	8b 02                	mov    eax,DWORD PTR [edx]
c0012de4:	51                   	push   ecx
c0012de5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012de8:	51                   	push   ecx
c0012de9:	52                   	push   edx
c0012dea:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	85 c0                	test   eax,eax
c0012df2:	75 04                	jne    c0012df8 <Directory::open()+0x56>
c0012df4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012df8:	83 c4 08             	add    esp,0x8
c0012dfb:	5b                   	pop    ebx
c0012dfc:	c3                   	ret    
c0012dfd:	90                   	nop

c0012dfe <Directory::close()>:
c0012dfe:	53                   	push   ebx
c0012dff:	b8 0b 00 00 00       	mov    eax,0xb
c0012e04:	83 ec 08             	sub    esp,0x8
c0012e07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e0b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e12:	80 fa 19             	cmp    dl,0x19
c0012e15:	77 41                	ja     c0012e58 <Directory::close()+0x5a>
c0012e17:	8b 1c 95 20 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012e1e:	85 db                	test   ebx,ebx
c0012e20:	74 36                	je     c0012e58 <Directory::close()+0x5a>
c0012e22:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e29:	74 2d                	je     c0012e58 <Directory::close()+0x5a>
c0012e2b:	b8 05 00 00 00       	mov    eax,0x5
c0012e30:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e34:	74 22                	je     c0012e58 <Directory::close()+0x5a>
c0012e36:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e3a:	8b 04 95 20 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3ce0]
c0012e41:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e47:	53                   	push   ebx
c0012e48:	53                   	push   ebx
c0012e49:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e4b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e51:	50                   	push   eax
c0012e52:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	83 c4 08             	add    esp,0x8
c0012e5b:	5b                   	pop    ebx
c0012e5c:	c3                   	ret    
c0012e5d:	90                   	nop

c0012e5e <Directory::unlink()>:
c0012e5e:	83 ec 0c             	sub    esp,0xc
c0012e61:	b8 0b 00 00 00       	mov    eax,0xb
c0012e66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e71:	80 f9 19             	cmp    cl,0x19
c0012e74:	77 2f                	ja     c0012ea5 <Directory::unlink()+0x47>
c0012e76:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012e7d:	85 c9                	test   ecx,ecx
c0012e7f:	74 24                	je     c0012ea5 <Directory::unlink()+0x47>
c0012e81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e87:	85 c9                	test   ecx,ecx
c0012e89:	74 1a                	je     c0012ea5 <Directory::unlink()+0x47>
c0012e8b:	b8 06 00 00 00       	mov    eax,0x6
c0012e90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e94:	75 0f                	jne    c0012ea5 <Directory::unlink()+0x47>
c0012e96:	83 c2 0d             	add    edx,0xd
c0012e99:	50                   	push   eax
c0012e9a:	50                   	push   eax
c0012e9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e9d:	52                   	push   edx
c0012e9e:	51                   	push   ecx
c0012e9f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	83 c4 0c             	add    esp,0xc
c0012ea8:	c3                   	ret    
c0012ea9:	90                   	nop

c0012eaa <Directory::rename(char const*)>:
c0012eaa:	83 ec 0c             	sub    esp,0xc
c0012ead:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebd:	80 f9 19             	cmp    cl,0x19
c0012ec0:	77 32                	ja     c0012ef4 <Directory::rename(char const*)+0x4a>
c0012ec2:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 27                	je     c0012ef4 <Directory::rename(char const*)+0x4a>
c0012ecd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed3:	85 c9                	test   ecx,ecx
c0012ed5:	74 1d                	je     c0012ef4 <Directory::rename(char const*)+0x4a>
c0012ed7:	b8 06 00 00 00       	mov    eax,0x6
c0012edc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee0:	75 12                	jne    c0012ef4 <Directory::rename(char const*)+0x4a>
c0012ee2:	83 c2 0d             	add    edx,0xd
c0012ee5:	50                   	push   eax
c0012ee6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eec:	52                   	push   edx
c0012eed:	51                   	push   ecx
c0012eee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	83 c4 0c             	add    esp,0xc
c0012ef7:	c3                   	ret    

c0012ef8 <Directory::exists()>:
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	31 c0                	xor    eax,eax
c0012efd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f08:	80 f9 19             	cmp    cl,0x19
c0012f0b:	77 24                	ja     c0012f31 <Directory::exists()+0x39>
c0012f0d:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012f14:	85 c9                	test   ecx,ecx
c0012f16:	74 19                	je     c0012f31 <Directory::exists()+0x39>
c0012f18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f1e:	85 c9                	test   ecx,ecx
c0012f20:	74 0f                	je     c0012f31 <Directory::exists()+0x39>
c0012f22:	83 c2 0d             	add    edx,0xd
c0012f25:	50                   	push   eax
c0012f26:	50                   	push   eax
c0012f27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f29:	52                   	push   edx
c0012f2a:	51                   	push   ecx
c0012f2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	83 c4 0c             	add    esp,0xc
c0012f34:	c3                   	ret    
c0012f35:	90                   	nop

c0012f36 <Directory::read(dirent*)>:
c0012f36:	83 ec 1c             	sub    esp,0x1c
c0012f39:	b8 0b 00 00 00       	mov    eax,0xb
c0012f3e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012f42:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f49:	80 fa 19             	cmp    dl,0x19
c0012f4c:	77 30                	ja     c0012f7e <Directory::read(dirent*)+0x48>
c0012f4e:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012f55:	85 d2                	test   edx,edx
c0012f57:	74 25                	je     c0012f7e <Directory::read(dirent*)+0x48>
c0012f59:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f60:	74 1c                	je     c0012f7e <Directory::read(dirent*)+0x48>
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f67:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012f6b:	52                   	push   edx
c0012f6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f70:	6a 00                	push   0x0
c0012f72:	68 10 01 00 00       	push   0x110
c0012f77:	51                   	push   ecx
c0012f78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f7b:	83 c4 20             	add    esp,0x20
c0012f7e:	83 c4 1c             	add    esp,0x1c
c0012f81:	c3                   	ret    

c0012f82 <Directory::create()>:
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	b8 0b 00 00 00       	mov    eax,0xb
c0012f8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f95:	80 f9 19             	cmp    cl,0x19
c0012f98:	77 2f                	ja     c0012fc9 <Directory::create()+0x47>
c0012f9a:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012fa1:	85 c9                	test   ecx,ecx
c0012fa3:	74 24                	je     c0012fc9 <Directory::create()+0x47>
c0012fa5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fab:	85 c9                	test   ecx,ecx
c0012fad:	74 1a                	je     c0012fc9 <Directory::create()+0x47>
c0012faf:	b8 06 00 00 00       	mov    eax,0x6
c0012fb4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fb8:	75 0f                	jne    c0012fc9 <Directory::create()+0x47>
c0012fba:	83 c2 0d             	add    edx,0xd
c0012fbd:	50                   	push   eax
c0012fbe:	50                   	push   eax
c0012fbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc1:	52                   	push   edx
c0012fc2:	51                   	push   ecx
c0012fc3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	83 c4 0c             	add    esp,0xc
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012fce:	b8 0a 00 00 00       	mov    eax,0xa
c0012fd3:	c3                   	ret    

c0012fd4 <Bus::Bus(char const*)>:
c0012fd4:	83 ec 0c             	sub    esp,0xc
c0012fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fdb:	83 ec 08             	sub    esp,0x8
c0012fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe2:	50                   	push   eax
c0012fe3:	e8 60 09 00 00       	call   c0013948 <Device::Device(char const*)>
c0012fe8:	83 c4 10             	add    esp,0x10
c0012feb:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c0012ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff4:	89 10                	mov    DWORD PTR [eax],edx
c0012ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013004:	90                   	nop
c0013005:	83 c4 0c             	add    esp,0xc
c0013008:	c3                   	ret    
c0013009:	90                   	nop

c001300a <Bus::~Bus()>:
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c0013012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013016:	89 10                	mov    DWORD PTR [eax],edx
c0013018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301c:	83 ec 0c             	sub    esp,0xc
c001301f:	50                   	push   eax
c0013020:	e8 d5 05 00 00       	call   c00135fa <Device::~Device()>
c0013025:	83 c4 10             	add    esp,0x10
c0013028:	90                   	nop
c0013029:	83 c4 0c             	add    esp,0xc
c001302c:	c3                   	ret    
c001302d:	90                   	nop

c001302e <Bus::~Bus()>:
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	83 ec 0c             	sub    esp,0xc
c0013034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013038:	e8 cd ff ff ff       	call   c001300a <Bus::~Bus()>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	83 ec 08             	sub    esp,0x8
c0013043:	68 58 01 00 00       	push   0x158
c0013048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001304c:	e8 0c f4 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	83 c4 0c             	add    esp,0xc
c0013057:	c3                   	ret    

c0013058 <Buzzer::Buzzer(char const*)>:
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305f:	83 ec 08             	sub    esp,0x8
c0013062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013066:	50                   	push   eax
c0013067:	e8 dc 08 00 00       	call   c0013948 <Device::Device(char const*)>
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	ba 24 99 03 c0       	mov    edx,0xc0039924
c0013074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013078:	89 10                	mov    DWORD PTR [eax],edx
c001307a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013096:	90                   	nop
c0013097:	83 c4 0c             	add    esp,0xc
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Buzzer::~Buzzer()>:
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	ba 24 99 03 c0       	mov    edx,0xc0039924
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	89 10                	mov    DWORD PTR [eax],edx
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	50                   	push   eax
c00130b2:	e8 43 05 00 00       	call   c00135fa <Device::~Device()>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	90                   	nop
c00130bb:	83 c4 0c             	add    esp,0xc
c00130be:	c3                   	ret    
c00130bf:	90                   	nop

c00130c0 <Buzzer::~Buzzer()>:
c00130c0:	83 ec 0c             	sub    esp,0xc
c00130c3:	83 ec 0c             	sub    esp,0xc
c00130c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ca:	e8 cd ff ff ff       	call   c001309c <Buzzer::~Buzzer()>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	83 ec 08             	sub    esp,0x8
c00130d5:	68 5c 01 00 00       	push   0x15c
c00130da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130de:	e8 7a f3 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	83 c4 0c             	add    esp,0xc
c00130e9:	c3                   	ret    

c00130ea <Buzzer::stop()>:
c00130ea:	83 ec 14             	sub    esp,0x14
c00130ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00130f3:	6a 00                	push   0x0
c00130f5:	50                   	push   eax
c00130f6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00130f9:	83 c4 1c             	add    esp,0x1c
c00130fc:	c3                   	ret    

c00130fd <beepThread(void*)>:
c00130fd:	53                   	push   ebx
c00130fe:	83 ec 08             	sub    esp,0x8
c0013101:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013105:	e8 38 b2 ff ff       	call   c000e342 <unlockScheduler()>
c001310a:	b8 40 42 0f 00       	mov    eax,0xf4240
c001310f:	52                   	push   edx
c0013110:	52                   	push   edx
c0013111:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013117:	52                   	push   edx
c0013118:	50                   	push   eax
c0013119:	e8 db b8 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001311e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013121:	e8 c4 ff ff ff       	call   c00130ea <Buzzer::stop()>
c0013126:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001312e:	83 c4 18             	add    esp,0x18
c0013131:	5b                   	pop    ebx
c0013132:	e9 08 b8 ff ff       	jmp    c000e93f <blockTask(TaskState)>
c0013137:	90                   	nop

c0013138 <Buzzer::beep(int, int, bool)>:
c0013138:	57                   	push   edi
c0013139:	56                   	push   esi
c001313a:	53                   	push   ebx
c001313b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001313f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013143:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013147:	52                   	push   edx
c0013148:	52                   	push   edx
c0013149:	8b 06                	mov    eax,DWORD PTR [esi]
c001314b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001314f:	56                   	push   esi
c0013150:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	89 f8                	mov    eax,edi
c0013158:	84 c0                	test   al,al
c001315a:	74 1f                	je     c001317b <Buzzer::beep(int, int, bool)+0x43>
c001315c:	50                   	push   eax
c001315d:	50                   	push   eax
c001315e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013164:	99                   	cdq    
c0013165:	52                   	push   edx
c0013166:	50                   	push   eax
c0013167:	e8 8d b8 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013173:	5b                   	pop    ebx
c0013174:	5e                   	pop    esi
c0013175:	5f                   	pop    edi
c0013176:	e9 6f ff ff ff       	jmp    c00130ea <Buzzer::stop()>
c001317b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013181:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0013186:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001318e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013192:	c7 44 24 14 fd 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc00130fd
c001319a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001319e:	5b                   	pop    ebx
c001319f:	5e                   	pop    esi
c00131a0:	5f                   	pop    edi
c00131a1:	e9 c4 b2 ff ff       	jmp    c000e46a <Process::createThread(void (*)(void*), void*, int)>

c00131a6 <loadClockSettings()>:
c00131a6:	c7 05 8c be 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003be8c,0xa
c00131b0:	c6 05 89 be 03 c0 00 	mov    BYTE PTR ds:0xc003be89,0x0
c00131b7:	c6 05 88 be 03 c0 01 	mov    BYTE PTR ds:0xc003be88,0x1
c00131be:	c3                   	ret    
c00131bf:	90                   	nop

c00131c0 <Clock::Clock(char const*)>:
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c7:	83 ec 08             	sub    esp,0x8
c00131ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ce:	50                   	push   eax
c00131cf:	e8 74 07 00 00       	call   c0013948 <Device::Device(char const*)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	ba 54 99 03 c0       	mov    edx,0xc0039954
c00131dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e0:	89 10                	mov    DWORD PTR [eax],edx
c00131e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00131f0:	90                   	nop
c00131f1:	83 c4 0c             	add    esp,0xc
c00131f4:	c3                   	ret    
c00131f5:	90                   	nop

c00131f6 <Clock::~Clock()>:
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	ba 54 99 03 c0       	mov    edx,0xc0039954
c00131fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013202:	89 10                	mov    DWORD PTR [eax],edx
c0013204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	50                   	push   eax
c001320c:	e8 e9 03 00 00       	call   c00135fa <Device::~Device()>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	90                   	nop
c0013215:	83 c4 0c             	add    esp,0xc
c0013218:	c3                   	ret    
c0013219:	90                   	nop

c001321a <Clock::~Clock()>:
c001321a:	83 ec 0c             	sub    esp,0xc
c001321d:	83 ec 0c             	sub    esp,0xc
c0013220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013224:	e8 cd ff ff ff       	call   c00131f6 <Clock::~Clock()>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 ec 08             	sub    esp,0x8
c001322f:	68 58 01 00 00       	push   0x158
c0013234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013238:	e8 20 f2 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	83 c4 0c             	add    esp,0xc
c0013243:	c3                   	ret    

c0013244 <Clock::timeInSecondsLocal()>:
c0013244:	53                   	push   ebx
c0013245:	83 ec 14             	sub    esp,0x14
c0013248:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001324c:	8b 10                	mov    edx,DWORD PTR [eax]
c001324e:	50                   	push   eax
c001324f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013252:	0f b6 0d 88 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be88
c0013259:	03 0d 8c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be8c
c001325f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013265:	89 cb                	mov    ebx,ecx
c0013267:	c1 fb 1f             	sar    ebx,0x1f
c001326a:	01 c8                	add    eax,ecx
c001326c:	11 da                	adc    edx,ebx
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	31 c9                	xor    ecx,ecx
c0013273:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c001327a:	74 05                	je     c0013281 <Clock::timeInSecondsLocal()+0x3d>
c001327c:	b9 08 07 00 00       	mov    ecx,0x708
c0013281:	31 db                	xor    ebx,ebx
c0013283:	01 c8                	add    eax,ecx
c0013285:	11 da                	adc    edx,ebx
c0013287:	83 c4 08             	add    esp,0x8
c001328a:	5b                   	pop    ebx
c001328b:	c3                   	ret    

c001328c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001328c:	57                   	push   edi
c001328d:	56                   	push   esi
c001328e:	53                   	push   ebx
c001328f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013293:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013297:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013299:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001329d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00132a0:	0f b6 05 88 be 03 c0 	movzx  eax,BYTE PTR ds:0xc003be88
c00132a7:	03 05 8c be 03 c0    	add    eax,DWORD PTR ds:0xc003be8c
c00132ad:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00132b3:	99                   	cdq    
c00132b4:	29 c6                	sub    esi,eax
c00132b6:	19 d7                	sbb    edi,edx
c00132b8:	89 f0                	mov    eax,esi
c00132ba:	89 fa                	mov    edx,edi
c00132bc:	31 f6                	xor    esi,esi
c00132be:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c00132c5:	74 05                	je     c00132cc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00132c7:	be 08 07 00 00       	mov    esi,0x708
c00132cc:	31 ff                	xor    edi,edi
c00132ce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00132d2:	29 f0                	sub    eax,esi
c00132d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132d8:	19 fa                	sbb    edx,edi
c00132da:	89 d8                	mov    eax,ebx
c00132dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00132e0:	5b                   	pop    ebx
c00132e1:	5e                   	pop    esi
c00132e2:	5f                   	pop    edi
c00132e3:	ff e0                	jmp    eax

c00132e5 <datetimeToSeconds(datetime_t)>:
c00132e5:	55                   	push   ebp
c00132e6:	57                   	push   edi
c00132e7:	56                   	push   esi
c00132e8:	53                   	push   ebx
c00132e9:	83 ec 14             	sub    esp,0x14
c00132ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132f0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00132f4:	89 d3                	mov    ebx,edx
c00132f6:	0f b6 c6             	movzx  eax,dh
c00132f9:	c1 eb 10             	shr    ebx,0x10
c00132fc:	48                   	dec    eax
c00132fd:	66 81 eb 6c 07       	sub    bx,0x76c
c0013302:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013306:	0f b6 f5             	movzx  esi,ch
c0013309:	89 cf                	mov    edi,ecx
c001330b:	6b f6 3c             	imul   esi,esi,0x3c
c001330e:	c1 ef 10             	shr    edi,0x10
c0013311:	0f b6 c9             	movzx  ecx,cl
c0013314:	89 f8                	mov    eax,edi
c0013316:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001331c:	0f b6 f8             	movzx  edi,al
c001331f:	0f b6 d2             	movzx  edx,dl
c0013322:	01 fe                	add    esi,edi
c0013324:	01 f1                	add    ecx,esi
c0013326:	0f b7 f3             	movzx  esi,bx
c0013329:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001332d:	c1 f9 1f             	sar    ecx,0x1f
c0013330:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013335:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013339:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001333e:	8b 0c 8d a0 99 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6660]
c0013345:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013349:	76 29                	jbe    c0013374 <datetimeToSeconds(datetime_t)+0x8f>
c001334b:	f6 c3 03             	test   bl,0x3
c001334e:	75 24                	jne    c0013374 <datetimeToSeconds(datetime_t)+0x8f>
c0013350:	31 d2                	xor    edx,edx
c0013352:	bf 64 00 00 00       	mov    edi,0x64
c0013357:	89 d8                	mov    eax,ebx
c0013359:	66 f7 f7             	div    di
c001335c:	66 85 d2             	test   dx,dx
c001335f:	75 12                	jne    c0013373 <datetimeToSeconds(datetime_t)+0x8e>
c0013361:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013367:	bf 90 01 00 00       	mov    edi,0x190
c001336c:	99                   	cdq    
c001336d:	f7 ff                	idiv   edi
c001336f:	85 d2                	test   edx,edx
c0013371:	75 01                	jne    c0013374 <datetimeToSeconds(datetime_t)+0x8f>
c0013373:	41                   	inc    ecx
c0013374:	66 83 fb 46          	cmp    bx,0x46
c0013378:	76 45                	jbe    c00133bf <datetimeToSeconds(datetime_t)+0xda>
c001337a:	bb 46 00 00 00       	mov    ebx,0x46
c001337f:	bf 64 00 00 00       	mov    edi,0x64
c0013384:	bd 90 01 00 00       	mov    ebp,0x190
c0013389:	b8 6d 01 00 00       	mov    eax,0x16d
c001338e:	f6 c3 03             	test   bl,0x3
c0013391:	75 23                	jne    c00133b6 <datetimeToSeconds(datetime_t)+0xd1>
c0013393:	89 d8                	mov    eax,ebx
c0013395:	99                   	cdq    
c0013396:	f7 ff                	idiv   edi
c0013398:	b8 6e 01 00 00       	mov    eax,0x16e
c001339d:	85 d2                	test   edx,edx
c001339f:	75 15                	jne    c00133b6 <datetimeToSeconds(datetime_t)+0xd1>
c00133a1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00133a7:	99                   	cdq    
c00133a8:	f7 fd                	idiv   ebp
c00133aa:	83 fa 01             	cmp    edx,0x1
c00133ad:	19 c0                	sbb    eax,eax
c00133af:	f7 d0                	not    eax
c00133b1:	05 6e 01 00 00       	add    eax,0x16e
c00133b6:	01 c1                	add    ecx,eax
c00133b8:	43                   	inc    ebx
c00133b9:	39 f3                	cmp    ebx,esi
c00133bb:	7c cc                	jl     c0013389 <datetimeToSeconds(datetime_t)+0xa4>
c00133bd:	eb 35                	jmp    c00133f4 <datetimeToSeconds(datetime_t)+0x10f>
c00133bf:	74 33                	je     c00133f4 <datetimeToSeconds(datetime_t)+0x10f>
c00133c1:	b8 45 00 00 00       	mov    eax,0x45
c00133c6:	89 c2                	mov    edx,eax
c00133c8:	83 e2 03             	and    edx,0x3
c00133cb:	39 f0                	cmp    eax,esi
c00133cd:	7e 0f                	jle    c00133de <datetimeToSeconds(datetime_t)+0xf9>
c00133cf:	83 fa 01             	cmp    edx,0x1
c00133d2:	19 d2                	sbb    edx,edx
c00133d4:	48                   	dec    eax
c00133d5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00133dc:	eb e8                	jmp    c00133c6 <datetimeToSeconds(datetime_t)+0xe1>
c00133de:	b8 6d 01 00 00       	mov    eax,0x16d
c00133e3:	85 d2                	test   edx,edx
c00133e5:	75 0b                	jne    c00133f2 <datetimeToSeconds(datetime_t)+0x10d>
c00133e7:	66 83 fb 01          	cmp    bx,0x1
c00133eb:	19 c0                	sbb    eax,eax
c00133ed:	05 6e 01 00 00       	add    eax,0x16e
c00133f2:	29 c1                	sub    ecx,eax
c00133f4:	b8 80 51 01 00       	mov    eax,0x15180
c00133f9:	f7 e9                	imul   ecx
c00133fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00133ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013403:	83 c4 14             	add    esp,0x14
c0013406:	5b                   	pop    ebx
c0013407:	5e                   	pop    esi
c0013408:	5f                   	pop    edi
c0013409:	5d                   	pop    ebp
c001340a:	c3                   	ret    
c001340b:	90                   	nop

c001340c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001340c:	57                   	push   edi
c001340d:	56                   	push   esi
c001340e:	53                   	push   ebx
c001340f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013413:	8b 06                	mov    eax,DWORD PTR [esi]
c0013415:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001341c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013420:	e8 c0 fe ff ff       	call   c00132e5 <datetimeToSeconds(datetime_t)>
c0013425:	59                   	pop    ecx
c0013426:	0f b6 0d 88 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be88
c001342d:	5b                   	pop    ebx
c001342e:	03 0d 8c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be8c
c0013434:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001343a:	89 cb                	mov    ebx,ecx
c001343c:	c1 fb 1f             	sar    ebx,0x1f
c001343f:	29 c8                	sub    eax,ecx
c0013441:	19 da                	sbb    edx,ebx
c0013443:	31 c9                	xor    ecx,ecx
c0013445:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c001344c:	74 05                	je     c0013453 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001344e:	b9 08 07 00 00       	mov    ecx,0x708
c0013453:	31 db                	xor    ebx,ebx
c0013455:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013459:	29 c8                	sub    eax,ecx
c001345b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001345f:	19 da                	sbb    edx,ebx
c0013461:	89 f8                	mov    eax,edi
c0013463:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013467:	5b                   	pop    ebx
c0013468:	5e                   	pop    esi
c0013469:	5f                   	pop    edi
c001346a:	ff e0                	jmp    eax

c001346c <secondsToDatetime(unsigned long long)>:
c001346c:	55                   	push   ebp
c001346d:	57                   	push   edi
c001346e:	56                   	push   esi
c001346f:	53                   	push   ebx
c0013470:	83 ec 1c             	sub    esp,0x1c
c0013473:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013477:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001347b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001347f:	6a 00                	push   0x0
c0013481:	68 80 51 01 00       	push   0x15180
c0013486:	55                   	push   ebp
c0013487:	57                   	push   edi
c0013488:	e8 2f b2 00 00       	call   c001e6bc <__udivdi3>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013496:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001349a:	6a 00                	push   0x0
c001349c:	68 80 51 01 00       	push   0x15180
c00134a1:	55                   	push   ebp
c00134a2:	57                   	push   edi
c00134a3:	bf 10 0e 00 00       	mov    edi,0xe10
c00134a8:	e8 0f b3 00 00       	call   c001e7bc <__umoddi3>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	99                   	cdq    
c00134b1:	f7 ff                	idiv   edi
c00134b3:	bf 3c 00 00 00       	mov    edi,0x3c
c00134b8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00134bb:	89 d0                	mov    eax,edx
c00134bd:	99                   	cdq    
c00134be:	f7 ff                	idiv   edi
c00134c0:	85 db                	test   ebx,ebx
c00134c2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00134c5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00134c8:	79 11                	jns    c00134db <secondsToDatetime(unsigned long long)+0x6f>
c00134ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134ce:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00134d4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134d9:	eb 07                	jmp    c00134e2 <secondsToDatetime(unsigned long long)+0x76>
c00134db:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134e0:	89 d8                	mov    eax,ebx
c00134e2:	bf b4 05 00 00       	mov    edi,0x5b4
c00134e7:	99                   	cdq    
c00134e8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00134ed:	f7 f9                	idiv   ecx
c00134ef:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00134f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134f8:	31 d2                	xor    edx,edx
c00134fa:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013502:	01 c3                	add    ebx,eax
c0013504:	89 d8                	mov    eax,ebx
c0013506:	f7 f1                	div    ecx
c0013508:	31 d2                	xor    edx,edx
c001350a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001350d:	89 d8                	mov    eax,ebx
c001350f:	f7 f7                	div    edi
c0013511:	31 d2                	xor    edx,edx
c0013513:	29 c1                	sub    ecx,eax
c0013515:	89 d8                	mov    eax,ebx
c0013517:	f7 f5                	div    ebp
c0013519:	bd 6d 01 00 00       	mov    ebp,0x16d
c001351e:	29 c1                	sub    ecx,eax
c0013520:	31 d2                	xor    edx,edx
c0013522:	89 c8                	mov    eax,ecx
c0013524:	f7 f5                	div    ebp
c0013526:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001352b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001352f:	31 d2                	xor    edx,edx
c0013531:	89 c8                	mov    eax,ecx
c0013533:	f7 f5                	div    ebp
c0013535:	31 d2                	xor    edx,edx
c0013537:	01 c3                	add    ebx,eax
c0013539:	89 c8                	mov    eax,ecx
c001353b:	f7 f7                	div    edi
c001353d:	bf 99 00 00 00       	mov    edi,0x99
c0013542:	29 c3                	sub    ebx,eax
c0013544:	31 d2                	xor    edx,edx
c0013546:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001354e:	29 c3                	sub    ebx,eax
c0013550:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013553:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013556:	bb 05 00 00 00       	mov    ebx,0x5
c001355b:	83 c1 02             	add    ecx,0x2
c001355e:	89 c8                	mov    eax,ecx
c0013560:	f7 f7                	div    edi
c0013562:	31 d2                	xor    edx,edx
c0013564:	89 c7                	mov    edi,eax
c0013566:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001356c:	83 c0 02             	add    eax,0x2
c001356f:	f7 f3                	div    ebx
c0013571:	89 eb                	mov    ebx,ebp
c0013573:	29 c3                	sub    ebx,eax
c0013575:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001357b:	88 1e                	mov    BYTE PTR [esi],bl
c001357d:	19 c0                	sbb    eax,eax
c001357f:	31 d2                	xor    edx,edx
c0013581:	83 e0 0c             	and    eax,0xc
c0013584:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013588:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013590:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013594:	83 f9 01             	cmp    ecx,0x1
c0013597:	0f 96 c2             	setbe  dl
c001359a:	41                   	inc    ecx
c001359b:	01 d0                	add    eax,edx
c001359d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00135a0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00135a4:	83 c4 1c             	add    esp,0x1c
c00135a7:	89 f0                	mov    eax,esi
c00135a9:	5b                   	pop    ebx
c00135aa:	5e                   	pop    esi
c00135ab:	5f                   	pop    edi
c00135ac:	5d                   	pop    ebp
c00135ad:	c2 04 00             	ret    0x4

c00135b0 <Clock::timeInDatetimeLocal()>:
c00135b0:	53                   	push   ebx
c00135b1:	83 ec 14             	sub    esp,0x14
c00135b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135bc:	e8 83 fc ff ff       	call   c0013244 <Clock::timeInSecondsLocal()>
c00135c1:	83 c4 0c             	add    esp,0xc
c00135c4:	52                   	push   edx
c00135c5:	50                   	push   eax
c00135c6:	53                   	push   ebx
c00135c7:	e8 a0 fe ff ff       	call   c001346c <secondsToDatetime(unsigned long long)>
c00135cc:	89 d8                	mov    eax,ebx
c00135ce:	83 c4 14             	add    esp,0x14
c00135d1:	5b                   	pop    ebx
c00135d2:	c2 04 00             	ret    0x4
c00135d5:	90                   	nop

c00135d6 <Device::hibernate()>:
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <Device::wake()>:
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Device::detect()>:
c00135da:	c3                   	ret    
c00135db:	90                   	nop

c00135dc <Device::disableLegacy()>:
c00135dc:	c3                   	ret    
c00135dd:	90                   	nop

c00135de <Device::powerSaving(PowerSavingLevel)>:
c00135de:	c3                   	ret    
c00135df:	90                   	nop

c00135e0 <DriverlessDevice::close(int, int, void*)>:
c00135e0:	31 c0                	xor    eax,eax
c00135e2:	c3                   	ret    
c00135e3:	90                   	nop

c00135e4 <DriverlessDevice::detect()>:
c00135e4:	c3                   	ret    
c00135e5:	90                   	nop

c00135e6 <DriverlessDevice::open(int, int, void*)>:
c00135e6:	83 ec 18             	sub    esp,0x18
c00135e9:	68 d0 99 03 c0       	push   0xc00399d0
c00135ee:	e8 c9 99 ff ff       	call   c000cfbc <panic(char const*)>
c00135f3:	83 c8 ff             	or     eax,0xffffffff
c00135f6:	83 c4 1c             	add    esp,0x1c
c00135f9:	c3                   	ret    

c00135fa <Device::~Device()>:
c00135fa:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c00135ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013603:	89 10                	mov    DWORD PTR [eax],edx
c0013605:	90                   	nop
c0013606:	c3                   	ret    
c0013607:	90                   	nop

c0013608 <Device::~Device()>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001360f:	e8 e6 ff ff ff       	call   c00135fa <Device::~Device()>
c0013614:	83 c4 04             	add    esp,0x4
c0013617:	83 ec 08             	sub    esp,0x8
c001361a:	68 58 01 00 00       	push   0x158
c001361f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013623:	e8 35 ee ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	83 c4 0c             	add    esp,0xc
c001362e:	c3                   	ret    
c001362f:	90                   	nop

c0013630 <Device::findAndLoadDriver()>:
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013632:	57                   	push   edi
c0013633:	b9 09 00 00 00       	mov    ecx,0x9
c0013638:	56                   	push   esi
c0013639:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001363d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013641:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001364b:	81 c7 18 01 00 00    	add    edi,0x118
c0013651:	fc                   	cld    
c0013652:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013654:	5e                   	pop    esi
c0013655:	5f                   	pop    edi
c0013656:	c3                   	ret    
c0013657:	90                   	nop

c0013658 <Device::preOpenACPI(void*, char*, char*)>:
c0013658:	56                   	push   esi
c0013659:	53                   	push   ebx
c001365a:	83 ec 08             	sub    esp,0x8
c001365d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013661:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013665:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001366f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013673:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013679:	6a 1e                	push   0x1e
c001367b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013681:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013685:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001368b:	50                   	push   eax
c001368c:	e8 d0 cf fe ff       	call   c0000661 <memcpy>
c0013691:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013695:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013699:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00136a1:	83 c4 14             	add    esp,0x14
c00136a4:	5b                   	pop    ebx
c00136a5:	5e                   	pop    esi
c00136a6:	e9 b6 cf fe ff       	jmp    c0000661 <memcpy>
c00136ab:	90                   	nop

c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00136ac:	55                   	push   ebp
c00136ad:	57                   	push   edi
c00136ae:	56                   	push   esi
c00136af:	53                   	push   ebx
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136b7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00136bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00136bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00136c3:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00136c8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00136cf:	75 0b                	jne    c00136dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00136d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00136d3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00136da:	eb 24                	jmp    c0013700 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00136dc:	e8 73 3a 00 00       	call   c0017154 <thisCPU()>
c00136e1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00136e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00136e9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00136ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136f1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00136f5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136fd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013700:	83 c4 0c             	add    esp,0xc
c0013703:	5b                   	pop    ebx
c0013704:	5e                   	pop    esi
c0013705:	5f                   	pop    edi
c0013706:	5d                   	pop    ebp
c0013707:	ff e0                	jmp    eax
c0013709:	90                   	nop

c001370a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001370a:	57                   	push   edi
c001370b:	56                   	push   esi
c001370c:	53                   	push   ebx
c001370d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013711:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013715:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013719:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001371e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013725:	75 0b                	jne    c0013732 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013727:	8b 00                	mov    eax,DWORD PTR [eax]
c0013729:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001372d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013730:	eb 20                	jmp    c0013752 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013732:	e8 1d 3a 00 00       	call   c0017154 <thisCPU()>
c0013737:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001373d:	8b 10                	mov    edx,DWORD PTR [eax]
c001373f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013743:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013747:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001374b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001374f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	5f                   	pop    edi
c0013755:	ff e0                	jmp    eax
c0013757:	90                   	nop

c0013758 <Device::addChild(Device*)>:
c0013758:	53                   	push   ebx
c0013759:	83 ec 08             	sub    esp,0x8
c001375c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013764:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001376a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013770:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013772:	85 d2                	test   edx,edx
c0013774:	74 04                	je     c001377a <Device::addChild(Device*)+0x22>
c0013776:	89 d3                	mov    ebx,edx
c0013778:	eb f6                	jmp    c0013770 <Device::addChild(Device*)+0x18>
c001377a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001377d:	83 ec 0c             	sub    esp,0xc
c0013780:	6a 08                	push   0x8
c0013782:	e8 c7 ec ff ff       	call   c001244e <operator new(unsigned long)>
c0013787:	89 03                	mov    DWORD PTR [ebx],eax
c0013789:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001378f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013796:	83 c4 18             	add    esp,0x18
c0013799:	5b                   	pop    ebx
c001379a:	c3                   	ret    
c001379b:	90                   	nop

c001379c <Device::removeAllChildren()>:
c001379c:	56                   	push   esi
c001379d:	53                   	push   ebx
c001379e:	52                   	push   edx
c001379f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137a3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00137a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137ac:	74 17                	je     c00137c5 <Device::removeAllChildren()+0x29>
c00137ae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00137b1:	85 c0                	test   eax,eax
c00137b3:	74 0c                	je     c00137c1 <Device::removeAllChildren()+0x25>
c00137b5:	83 ec 0c             	sub    esp,0xc
c00137b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00137ba:	50                   	push   eax
c00137bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137c3:	eb e4                	jmp    c00137a9 <Device::removeAllChildren()+0xd>
c00137c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137de:	58                   	pop    eax
c00137df:	5b                   	pop    ebx
c00137e0:	5e                   	pop    esi
c00137e1:	c3                   	ret    

c00137e2 <Device::hibernateAll()>:
c00137e2:	53                   	push   ebx
c00137e3:	83 ec 14             	sub    esp,0x14
c00137e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ec:	53                   	push   ebx
c00137ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00137f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137fc:	74 0f                	je     c001380d <Device::hibernateAll()+0x2b>
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013804:	e8 d9 ff ff ff       	call   c00137e2 <Device::hibernateAll()>
c0013809:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001380b:	eb e9                	jmp    c00137f6 <Device::hibernateAll()+0x14>
c001380d:	83 c4 08             	add    esp,0x8
c0013810:	5b                   	pop    ebx
c0013811:	c3                   	ret    

c0013812 <Device::wakeAll()>:
c0013812:	53                   	push   ebx
c0013813:	83 ec 14             	sub    esp,0x14
c0013816:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001381a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001381c:	53                   	push   ebx
c001381d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013820:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001382c:	74 0f                	je     c001383d <Device::wakeAll()+0x2b>
c001382e:	83 ec 0c             	sub    esp,0xc
c0013831:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013834:	e8 d9 ff ff ff       	call   c0013812 <Device::wakeAll()>
c0013839:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001383b:	eb e9                	jmp    c0013826 <Device::wakeAll()+0x14>
c001383d:	83 c4 08             	add    esp,0x8
c0013840:	5b                   	pop    ebx
c0013841:	c3                   	ret    

c0013842 <Device::detectAll()>:
c0013842:	53                   	push   ebx
c0013843:	83 ec 14             	sub    esp,0x14
c0013846:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001384a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001384c:	53                   	push   ebx
c001384d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013850:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001385c:	74 0f                	je     c001386d <Device::detectAll()+0x2b>
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013864:	e8 d9 ff ff ff       	call   c0013842 <Device::detectAll()>
c0013869:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001386b:	eb e9                	jmp    c0013856 <Device::detectAll()+0x14>
c001386d:	83 c4 08             	add    esp,0x8
c0013870:	5b                   	pop    ebx
c0013871:	c3                   	ret    

c0013872 <Device::disableLegacyAll()>:
c0013872:	53                   	push   ebx
c0013873:	83 ec 14             	sub    esp,0x14
c0013876:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001387a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387c:	53                   	push   ebx
c001387d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013880:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001388c:	74 0f                	je     c001389d <Device::disableLegacyAll()+0x2b>
c001388e:	83 ec 0c             	sub    esp,0xc
c0013891:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013894:	e8 d9 ff ff ff       	call   c0013872 <Device::disableLegacyAll()>
c0013899:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001389b:	eb e9                	jmp    c0013886 <Device::disableLegacyAll()+0x14>
c001389d:	83 c4 08             	add    esp,0x8
c00138a0:	5b                   	pop    ebx
c00138a1:	c3                   	ret    

c00138a2 <Device::loadDriversForAll()>:
c00138a2:	53                   	push   ebx
c00138a3:	83 ec 08             	sub    esp,0x8
c00138a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138aa:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138b0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00138b2:	85 db                	test   ebx,ebx
c00138b4:	74 12                	je     c00138c8 <Device::loadDriversForAll()+0x26>
c00138b6:	83 ec 0c             	sub    esp,0xc
c00138b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00138bc:	e8 e1 ff ff ff       	call   c00138a2 <Device::loadDriversForAll()>
c00138c1:	83 c4 10             	add    esp,0x10
c00138c4:	89 d8                	mov    eax,ebx
c00138c6:	eb e8                	jmp    c00138b0 <Device::loadDriversForAll()+0xe>
c00138c8:	83 c4 08             	add    esp,0x8
c00138cb:	5b                   	pop    ebx
c00138cc:	c3                   	ret    
c00138cd:	90                   	nop

c00138ce <Device::closeAll()>:
c00138ce:	53                   	push   ebx
c00138cf:	83 ec 08             	sub    esp,0x8
c00138d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138d8:	6a 00                	push   0x0
c00138da:	6a 00                	push   0x0
c00138dc:	6a 00                	push   0x0
c00138de:	53                   	push   ebx
c00138df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138ee:	74 0f                	je     c00138ff <Device::closeAll()+0x31>
c00138f0:	83 ec 0c             	sub    esp,0xc
c00138f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138f6:	e8 d3 ff ff ff       	call   c00138ce <Device::closeAll()>
c00138fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138fd:	eb e9                	jmp    c00138e8 <Device::closeAll()+0x1a>
c00138ff:	83 c4 08             	add    esp,0x8
c0013902:	5b                   	pop    ebx
c0013903:	c3                   	ret    

c0013904 <Device::powerSavingAll(PowerSavingLevel)>:
c0013904:	56                   	push   esi
c0013905:	53                   	push   ebx
c0013906:	83 ec 0c             	sub    esp,0xc
c0013909:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001390d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013913:	56                   	push   esi
c0013914:	53                   	push   ebx
c0013915:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013918:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001391e:	83 c4 10             	add    esp,0x10
c0013921:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013924:	74 0f                	je     c0013935 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013926:	52                   	push   edx
c0013927:	52                   	push   edx
c0013928:	56                   	push   esi
c0013929:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001392c:	e8 d3 ff ff ff       	call   c0013904 <Device::powerSavingAll(PowerSavingLevel)>
c0013931:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013933:	eb e9                	jmp    c001391e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013935:	58                   	pop    eax
c0013936:	5b                   	pop    ebx
c0013937:	5e                   	pop    esi
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Device::setName(char const*)>:
c001393a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013942:	e9 ad ce fe ff       	jmp    c00007f4 <strcpy>
c0013947:	90                   	nop

c0013948 <Device::Device(char const*)>:
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c0013950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013954:	89 10                	mov    DWORD PTR [eax],edx
c0013956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013976:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013984:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001398e:	83 ec 08             	sub    esp,0x8
c0013991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013999:	e8 9c ff ff ff       	call   c001393a <Device::setName(char const*)>
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	6a 08                	push   0x8
c00139a6:	e8 a3 ea ff ff       	call   c001244e <operator new(unsigned long)>
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139bf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00139c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ea:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00139f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00139fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a00:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013a34:	90                   	nop
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <Device::getName()>:
c0013a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a3e:	05 d0 00 00 00       	add    eax,0xd0
c0013a43:	c3                   	ret    

c0013a44 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4b:	83 ec 08             	sub    esp,0x8
c0013a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a52:	50                   	push   eax
c0013a53:	e8 f0 fe ff ff       	call   c0013948 <Device::Device(char const*)>
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	ba 24 9a 03 c0       	mov    edx,0xc0039a24
c0013a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a64:	89 10                	mov    DWORD PTR [eax],edx
c0013a66:	90                   	nop
c0013a67:	83 c4 0c             	add    esp,0xc
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013a6c:	57                   	push   edi
c0013a6d:	56                   	push   esi
c0013a6e:	53                   	push   ebx
c0013a6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a7b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013a81:	75 0c                	jne    c0013a8f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013a83:	52                   	push   edx
c0013a84:	52                   	push   edx
c0013a85:	53                   	push   ebx
c0013a86:	56                   	push   esi
c0013a87:	e8 20 b4 00 00       	call   c001eeac <LinkedList<Device>::addElement(Device*)>
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a98:	74 12                	je     c0013aac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013a9a:	50                   	push   eax
c0013a9b:	57                   	push   edi
c0013a9c:	56                   	push   esi
c0013a9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aa0:	e8 c7 ff ff ff       	call   c0013a6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013aa5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aa7:	83 c4 10             	add    esp,0x10
c0013aaa:	eb e9                	jmp    c0013a95 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013aac:	5b                   	pop    ebx
c0013aad:	5e                   	pop    esi
c0013aae:	5f                   	pop    edi
c0013aaf:	c3                   	ret    

c0013ab0 <getDevicesOfType(DeviceType)>:
c0013ab0:	53                   	push   ebx
c0013ab1:	83 ec 14             	sub    esp,0x14
c0013ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ab8:	53                   	push   ebx
c0013ab9:	e8 ca b4 00 00       	call   c001ef88 <LinkedList<Device>::LinkedList()>
c0013abe:	83 c4 0c             	add    esp,0xc
c0013ac1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac5:	53                   	push   ebx
c0013ac6:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0013acc:	e8 9b ff ff ff       	call   c0013a6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ad1:	89 d8                	mov    eax,ebx
c0013ad3:	83 c4 18             	add    esp,0x18
c0013ad6:	5b                   	pop    ebx
c0013ad7:	c2 04 00             	ret    0x4

c0013ada <HardDiskController::HardDiskController(char const*)>:
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae1:	83 ec 08             	sub    esp,0x8
c0013ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae8:	50                   	push   eax
c0013ae9:	e8 5a fe ff ff       	call   c0013948 <Device::Device(char const*)>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	ba 50 9a 03 c0       	mov    edx,0xc0039a50
c0013af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afa:	89 10                	mov    DWORD PTR [eax],edx
c0013afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b00:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013b0a:	90                   	nop
c0013b0b:	83 c4 0c             	add    esp,0xc
c0013b0e:	c3                   	ret    
c0013b0f:	90                   	nop

c0013b10 <HardDiskController::~HardDiskController()>:
c0013b10:	83 ec 0c             	sub    esp,0xc
c0013b13:	ba 50 9a 03 c0       	mov    edx,0xc0039a50
c0013b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1c:	89 10                	mov    DWORD PTR [eax],edx
c0013b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	50                   	push   eax
c0013b26:	e8 cf fa ff ff       	call   c00135fa <Device::~Device()>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	90                   	nop
c0013b2f:	83 c4 0c             	add    esp,0xc
c0013b32:	c3                   	ret    
c0013b33:	90                   	nop

c0013b34 <HardDiskController::~HardDiskController()>:
c0013b34:	83 ec 0c             	sub    esp,0xc
c0013b37:	83 ec 0c             	sub    esp,0xc
c0013b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3e:	e8 cd ff ff ff       	call   c0013b10 <HardDiskController::~HardDiskController()>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	83 ec 08             	sub    esp,0x8
c0013b49:	68 58 01 00 00       	push   0x158
c0013b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b52:	e8 06 e9 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013b57:	83 c4 10             	add    esp,0x10
c0013b5a:	83 c4 0c             	add    esp,0xc
c0013b5d:	c3                   	ret    

c0013b5e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b65:	83 ec 08             	sub    esp,0x8
c0013b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6c:	50                   	push   eax
c0013b6d:	e8 d6 fd ff ff       	call   c0013948 <Device::Device(char const*)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	ba 7c 9a 03 c0       	mov    edx,0xc0039a7c
c0013b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7e:	89 10                	mov    DWORD PTR [eax],edx
c0013b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b84:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bc0:	90                   	nop
c0013bc1:	83 c4 0c             	add    esp,0xc
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <PhysicalDisk::startCache()>:
c0013bc6:	56                   	push   esi
c0013bc7:	53                   	push   ebx
c0013bc8:	83 ec 10             	sub    esp,0x10
c0013bcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bcf:	6a 30                	push   0x30
c0013bd1:	e8 78 e8 ff ff       	call   c001244e <operator new(unsigned long)>
c0013bd6:	89 c6                	mov    esi,eax
c0013bd8:	58                   	pop    eax
c0013bd9:	5a                   	pop    edx
c0013bda:	53                   	push   ebx
c0013bdb:	56                   	push   esi
c0013bdc:	e8 b7 1d 00 00       	call   c0015998 <VCache::VCache(PhysicalDisk*)>
c0013be1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013be7:	83 c4 14             	add    esp,0x14
c0013bea:	5b                   	pop    ebx
c0013beb:	5e                   	pop    esi
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <PhysicalDisk::~PhysicalDisk()>:
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	ba 7c 9a 03 c0       	mov    edx,0xc0039a7c
c0013bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfa:	89 10                	mov    DWORD PTR [eax],edx
c0013bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	50                   	push   eax
c0013c04:	e8 f1 f9 ff ff       	call   c00135fa <Device::~Device()>
c0013c09:	83 c4 10             	add    esp,0x10
c0013c0c:	90                   	nop
c0013c0d:	83 c4 0c             	add    esp,0xc
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <PhysicalDisk::~PhysicalDisk()>:
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1c:	e8 cd ff ff ff       	call   c0013bee <PhysicalDisk::~PhysicalDisk()>
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	83 ec 08             	sub    esp,0x8
c0013c27:	68 6c 01 00 00       	push   0x16c
c0013c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c30:	e8 28 e8 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	83 c4 0c             	add    esp,0xc
c0013c3b:	c3                   	ret    

c0013c3c <FPU::FPU(char const*)>:
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c43:	83 ec 08             	sub    esp,0x8
c0013c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c4a:	50                   	push   eax
c0013c4b:	e8 f8 fc ff ff       	call   c0013948 <Device::Device(char const*)>
c0013c50:	83 c4 10             	add    esp,0x10
c0013c53:	ba b8 9a 03 c0       	mov    edx,0xc0039ab8
c0013c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5c:	89 10                	mov    DWORD PTR [eax],edx
c0013c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c62:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013c6c:	90                   	nop
c0013c6d:	83 c4 0c             	add    esp,0xc
c0013c70:	c3                   	ret    
c0013c71:	90                   	nop

c0013c72 <FPU::~FPU()>:
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	ba b8 9a 03 c0       	mov    edx,0xc0039ab8
c0013c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7e:	89 10                	mov    DWORD PTR [eax],edx
c0013c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	50                   	push   eax
c0013c88:	e8 6d f9 ff ff       	call   c00135fa <Device::~Device()>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	90                   	nop
c0013c91:	83 c4 0c             	add    esp,0xc
c0013c94:	c3                   	ret    
c0013c95:	90                   	nop

c0013c96 <FPU::~FPU()>:
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	83 ec 0c             	sub    esp,0xc
c0013c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca0:	e8 cd ff ff ff       	call   c0013c72 <FPU::~FPU()>
c0013ca5:	83 c4 10             	add    esp,0x10
c0013ca8:	83 ec 08             	sub    esp,0x8
c0013cab:	68 58 01 00 00       	push   0x158
c0013cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb4:	e8 a4 e7 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 c4 0c             	add    esp,0xc
c0013cbf:	c3                   	ret    

c0013cc0 <setupFPU()>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 08             	sub    esp,0x8
c0013cc4:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0013cc9:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013cd0:	74 19                	je     c0013ceb <setupFPU()+0x2b>
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	68 58 01 00 00       	push   0x158
c0013cda:	e8 6f e7 ff ff       	call   c001244e <operator new(unsigned long)>
c0013cdf:	89 c3                	mov    ebx,eax
c0013ce1:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ce4:	e8 a5 96 00 00       	call   c001d38e <AVX::AVX()>
c0013ce9:	eb 5b                	jmp    c0013d46 <setupFPU()+0x86>
c0013ceb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013cf1:	84 c0                	test   al,al
c0013cf3:	79 19                	jns    c0013d0e <setupFPU()+0x4e>
c0013cf5:	83 ec 0c             	sub    esp,0xc
c0013cf8:	68 58 01 00 00       	push   0x158
c0013cfd:	e8 4c e7 ff ff       	call   c001244e <operator new(unsigned long)>
c0013d02:	89 c3                	mov    ebx,eax
c0013d04:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d07:	e8 a8 97 00 00       	call   c001d4b4 <SSE::SSE()>
c0013d0c:	eb 38                	jmp    c0013d46 <setupFPU()+0x86>
c0013d0e:	a8 20                	test   al,0x20
c0013d10:	74 19                	je     c0013d2b <setupFPU()+0x6b>
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	68 58 01 00 00       	push   0x158
c0013d1a:	e8 2f e7 ff ff       	call   c001244e <operator new(unsigned long)>
c0013d1f:	89 c3                	mov    ebx,eax
c0013d21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d24:	e8 f5 96 00 00       	call   c001d41e <MMX::MMX()>
c0013d29:	eb 1b                	jmp    c0013d46 <setupFPU()+0x86>
c0013d2b:	a8 10                	test   al,0x10
c0013d2d:	74 1c                	je     c0013d4b <setupFPU()+0x8b>
c0013d2f:	83 ec 0c             	sub    esp,0xc
c0013d32:	68 58 01 00 00       	push   0x158
c0013d37:	e8 12 e7 ff ff       	call   c001244e <operator new(unsigned long)>
c0013d3c:	89 c3                	mov    ebx,eax
c0013d3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d41:	e8 fc 97 00 00       	call   c001d542 <x87::x87()>
c0013d46:	83 c4 10             	add    esp,0x10
c0013d49:	eb 12                	jmp    c0013d5d <setupFPU()+0x9d>
c0013d4b:	83 ec 0c             	sub    esp,0xc
c0013d4e:	31 db                	xor    ebx,ebx
c0013d50:	68 a8 9a 03 c0       	push   0xc0039aa8
c0013d55:	e8 62 92 ff ff       	call   c000cfbc <panic(char const*)>
c0013d5a:	83 c4 10             	add    esp,0x10
c0013d5d:	89 d8                	mov    eax,ebx
c0013d5f:	83 c4 08             	add    esp,0x8
c0013d62:	5b                   	pop    ebx
c0013d63:	c3                   	ret    

c0013d64 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d6c:	c1 e0 04             	shl    eax,0x4
c0013d6f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013d73:	8d 50 10             	lea    edx,[eax+0x10]
c0013d76:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013d7c:	74 08                	je     c0013d86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013d7e:	83 c0 04             	add    eax,0x4
c0013d81:	39 d0                	cmp    eax,edx
c0013d83:	75 f1                	jne    c0013d76 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013d85:	c3                   	ret    
c0013d86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d90:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013d9a:	eb e2                	jmp    c0013d7e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013d9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013d9c:	57                   	push   edi
c0013d9d:	31 c0                	xor    eax,eax
c0013d9f:	56                   	push   esi
c0013da0:	53                   	push   ebx
c0013da1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013da5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013da9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013dad:	89 da                	mov    edx,ebx
c0013daf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013db3:	c1 e2 04             	shl    edx,0x4
c0013db6:	01 ca                	add    edx,ecx
c0013db8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013dc0:	74 16                	je     c0013dd8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013dc2:	40                   	inc    eax
c0013dc3:	83 f8 04             	cmp    eax,0x4
c0013dc6:	75 f0                	jne    c0013db8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013dc8:	c7 44 24 10 e8 9a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039ae8
c0013dd0:	5b                   	pop    ebx
c0013dd1:	5e                   	pop    esi
c0013dd2:	5f                   	pop    edi
c0013dd3:	e9 e4 91 ff ff       	jmp    c000cfbc <panic(char const*)>
c0013dd8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013ddb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013dde:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013de4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013dea:	5b                   	pop    ebx
c0013deb:	5e                   	pop    esi
c0013dec:	5f                   	pop    edi
c0013ded:	c3                   	ret    

c0013dee <doubleFault(regs*, void*)>:
c0013dee:	c7 44 24 04 18 9c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039c18
c0013df6:	e9 c1 91 ff ff       	jmp    c000cfbc <panic(char const*)>
c0013dfb:	90                   	nop

c0013dfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013dfc:	56                   	push   esi
c0013dfd:	53                   	push   ebx
c0013dfe:	50                   	push   eax
c0013dff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e07:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e0c:	75 35                	jne    c0013e43 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013e0e:	8d 43 20             	lea    eax,[ebx+0x20]
c0013e11:	31 d2                	xor    edx,edx
c0013e13:	89 c1                	mov    ecx,eax
c0013e15:	c1 e1 04             	shl    ecx,0x4
c0013e18:	01 f1                	add    ecx,esi
c0013e1a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013e22:	74 3e                	je     c0013e62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013e24:	42                   	inc    edx
c0013e25:	83 fa 04             	cmp    edx,0x4
c0013e28:	75 f0                	jne    c0013e1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013e2a:	83 ec 0c             	sub    esp,0xc
c0013e2d:	68 5c 9b 03 c0       	push   0xc0039b5c
c0013e32:	e8 85 91 ff ff       	call   c000cfbc <panic(char const*)>
c0013e37:	83 c4 10             	add    esp,0x10
c0013e3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e3f:	5a                   	pop    edx
c0013e40:	5b                   	pop    ebx
c0013e41:	5e                   	pop    esi
c0013e42:	c3                   	ret    
c0013e43:	83 ec 0c             	sub    esp,0xc
c0013e46:	56                   	push   esi
c0013e47:	e8 ee fb ff ff       	call   c0013a3a <Device::getName()>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e52:	75 ba                	jne    c0013e0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e54:	83 fb 0f             	cmp    ebx,0xf
c0013e57:	7f 29                	jg     c0013e82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013e59:	0f b6 9b 20 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ee0]
c0013e60:	eb ac                	jmp    c0013e0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e62:	8d 04 82             	lea    eax,[edx+eax*4]
c0013e65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e69:	8d 04 86             	lea    eax,[esi+eax*4]
c0013e6c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013e72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e76:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013e7c:	89 d8                	mov    eax,ebx
c0013e7e:	5a                   	pop    edx
c0013e7f:	5b                   	pop    ebx
c0013e80:	5e                   	pop    esi
c0013e81:	c3                   	ret    
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	68 24 9b 03 c0       	push   0xc0039b24
c0013e8a:	e8 2d 91 ff ff       	call   c000cfbc <panic(char const*)>
c0013e8f:	83 c4 10             	add    esp,0x10
c0013e92:	e9 77 ff ff ff       	jmp    c0013e0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e97:	90                   	nop

c0013e98 <InterruptController::clearAllHandlers(int, bool)>:
c0013e98:	56                   	push   esi
c0013e99:	53                   	push   ebx
c0013e9a:	52                   	push   edx
c0013e9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013ea8:	75 61                	jne    c0013f0b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013eaa:	8d 46 20             	lea    eax,[esi+0x20]
c0013ead:	c1 e6 04             	shl    esi,0x4
c0013eb0:	c1 e0 04             	shl    eax,0x4
c0013eb3:	01 de                	add    esi,ebx
c0013eb5:	01 d8                	add    eax,ebx
c0013eb7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013ec1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013ecb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013ed5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013edf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013ee9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013ef3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013efd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013f07:	58                   	pop    eax
c0013f08:	5b                   	pop    ebx
c0013f09:	5e                   	pop    esi
c0013f0a:	c3                   	ret    
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	53                   	push   ebx
c0013f0f:	e8 26 fb ff ff       	call   c0013a3a <Device::getName()>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f1a:	75 8e                	jne    c0013eaa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f1c:	83 fe 0f             	cmp    esi,0xf
c0013f1f:	7f 09                	jg     c0013f2a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013f21:	0f b6 b6 20 b1 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4ee0]
c0013f28:	eb 80                	jmp    c0013eaa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	68 98 9b 03 c0       	push   0xc0039b98
c0013f32:	e8 85 90 ff ff       	call   c000cfbc <panic(char const*)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	e9 6b ff ff ff       	jmp    c0013eaa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f3f:	90                   	nop

c0013f40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	52                   	push   edx
c0013f43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013f50:	75 3a                	jne    c0013f8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f56:	8d 50 20             	lea    edx,[eax+0x20]
c0013f59:	c1 e2 04             	shl    edx,0x4
c0013f5c:	8d 04 16             	lea    eax,[esi+edx*1]
c0013f5f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013f63:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013f69:	74 0b                	je     c0013f76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013f6b:	83 c0 04             	add    eax,0x4
c0013f6e:	39 d0                	cmp    eax,edx
c0013f70:	75 f1                	jne    c0013f63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013f72:	58                   	pop    eax
c0013f73:	5b                   	pop    ebx
c0013f74:	5e                   	pop    esi
c0013f75:	c3                   	ret    
c0013f76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013f8a:	eb df                	jmp    c0013f6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	56                   	push   esi
c0013f90:	e8 a5 fa ff ff       	call   c0013a3a <Device::getName()>
c0013f95:	83 c4 10             	add    esp,0x10
c0013f98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f9b:	75 b5                	jne    c0013f52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f9d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013fa2:	7f 11                	jg     c0013fb5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013fa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fa8:	0f b6 80 20 b1 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4ee0]
c0013faf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fb3:	eb 9d                	jmp    c0013f52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013fb5:	83 ec 0c             	sub    esp,0xc
c0013fb8:	68 98 9b 03 c0       	push   0xc0039b98
c0013fbd:	e8 fa 8f ff ff       	call   c000cfbc <panic(char const*)>
c0013fc2:	83 c4 10             	add    esp,0x10
c0013fc5:	eb 8b                	jmp    c0013f52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013fc7 <nmiHandler(regs*, void*)>:
c0013fc7:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0013fcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fd0:	e9 a9 77 ff ff       	jmp    c000b77e <Computer::handleNMI()>

c0013fd5 <int_handler>:
c0013fd5:	55                   	push   ebp
c0013fd6:	57                   	push   edi
c0013fd7:	56                   	push   esi
c0013fd8:	53                   	push   ebx
c0013fd9:	83 ec 0c             	sub    esp,0xc
c0013fdc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013fe0:	80 3d 72 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb72,0x0
c0013fe7:	74 0b                	je     c0013ff4 <int_handler+0x1f>
c0013fe9:	fa                   	cli    
c0013fea:	f4                   	hlt    
c0013feb:	80 3d 72 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb72,0x0
c0013ff2:	75 f5                	jne    c0013fe9 <int_handler+0x14>
c0013ff4:	e8 5b 31 00 00       	call   c0017154 <thisCPU()>
c0013ff9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013ffc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014002:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014005:	83 f8 17             	cmp    eax,0x17
c0014008:	77 13                	ja     c001401d <int_handler+0x48>
c001400a:	83 ec 08             	sub    esp,0x8
c001400d:	8b 17                	mov    edx,DWORD PTR [edi]
c001400f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014012:	0f b6 c0             	movzx  eax,al
c0014015:	50                   	push   eax
c0014016:	57                   	push   edi
c0014017:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001401a:	83 c4 10             	add    esp,0x10
c001401d:	83 c3 15             	add    ebx,0x15
c0014020:	c1 e3 04             	shl    ebx,0x4
c0014023:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014027:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001402e:	31 db                	xor    ebx,ebx
c0014030:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014034:	85 c0                	test   eax,eax
c0014036:	74 13                	je     c001404b <int_handler+0x76>
c0014038:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001403b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001403f:	74 1c                	je     c001405d <int_handler+0x88>
c0014041:	83 ec 08             	sub    esp,0x8
c0014044:	52                   	push   edx
c0014045:	56                   	push   esi
c0014046:	ff d0                	call   eax
c0014048:	83 c4 10             	add    esp,0x10
c001404b:	43                   	inc    ebx
c001404c:	83 fb 04             	cmp    ebx,0x4
c001404f:	75 df                	jne    c0014030 <int_handler+0x5b>
c0014051:	83 c4 0c             	add    esp,0xc
c0014054:	31 c0                	xor    eax,eax
c0014056:	5b                   	pop    ebx
c0014057:	31 d2                	xor    edx,edx
c0014059:	5e                   	pop    esi
c001405a:	5f                   	pop    edi
c001405b:	5d                   	pop    ebp
c001405c:	c3                   	ret    
c001405d:	83 ec 08             	sub    esp,0x8
c0014060:	52                   	push   edx
c0014061:	56                   	push   esi
c0014062:	ff d0                	call   eax
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	83 c4 0c             	add    esp,0xc
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	5f                   	pop    edi
c001406d:	5d                   	pop    ebp
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <InterruptController::InterruptController(char const*)>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014077:	83 ec 08             	sub    esp,0x8
c001407a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407e:	50                   	push   eax
c001407f:	e8 c4 f8 ff ff       	call   c0013948 <Device::Device(char const*)>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	ba 90 9d 03 c0       	mov    edx,0xc0039d90
c001408c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014090:	89 10                	mov    DWORD PTR [eax],edx
c0014092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014096:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00140a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140a8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00140b0:	7f 5e                	jg     c0014110 <InterruptController::InterruptController(char const*)+0xa0>
c00140b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140ba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00140bf:	7f 49                	jg     c001410a <InterruptController::InterruptController(char const*)+0x9a>
c00140c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140c9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140d4:	01 ca                	add    edx,ecx
c00140d6:	83 c2 54             	add    edx,0x54
c00140d9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00140e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140f4:	01 ca                	add    edx,ecx
c00140f6:	81 c2 54 04 00 00    	add    edx,0x454
c00140fc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014104:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014108:	eb b0                	jmp    c00140ba <InterruptController::InterruptController(char const*)+0x4a>
c001410a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001410e:	eb 98                	jmp    c00140a8 <InterruptController::InterruptController(char const*)+0x38>
c0014110:	90                   	nop
c0014111:	83 c4 1c             	add    esp,0x1c
c0014114:	c3                   	ret    
c0014115:	90                   	nop

c0014116 <InterruptController::~InterruptController()>:
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	ba 90 9d 03 c0       	mov    edx,0xc0039d90
c001411e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014122:	89 10                	mov    DWORD PTR [eax],edx
c0014124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014128:	83 ec 0c             	sub    esp,0xc
c001412b:	50                   	push   eax
c001412c:	e8 c9 f4 ff ff       	call   c00135fa <Device::~Device()>
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	90                   	nop
c0014135:	83 c4 0c             	add    esp,0xc
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <InterruptController::~InterruptController()>:
c001413a:	83 ec 0c             	sub    esp,0xc
c001413d:	83 ec 0c             	sub    esp,0xc
c0014140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014144:	e8 cd ff ff ff       	call   c0014116 <InterruptController::~InterruptController()>
c0014149:	83 c4 10             	add    esp,0x10
c001414c:	83 ec 08             	sub    esp,0x8
c001414f:	68 58 21 00 00       	push   0x2158
c0014154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014158:	e8 00 e3 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001415d:	83 c4 10             	add    esp,0x10
c0014160:	83 c4 0c             	add    esp,0xc
c0014163:	c3                   	ret    

c0014164 <displayDebugInfo(regs*)>:
c0014164:	55                   	push   ebp
c0014165:	57                   	push   edi
c0014166:	56                   	push   esi
c0014167:	53                   	push   ebx
c0014168:	83 ec 24             	sub    esp,0x24
c001416b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001416f:	0f 20 c2             	mov    edx,cr0
c0014172:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014176:	0f 20 d7             	mov    edi,cr2
c0014179:	0f 20 de             	mov    esi,cr3
c001417c:	0f 20 e5             	mov    ebp,cr4
c001417f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014182:	68 25 9c 03 c0       	push   0xc0039c25
c0014187:	e8 12 8d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001418c:	58                   	pop    eax
c001418d:	5a                   	pop    edx
c001418e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014191:	68 30 9c 03 c0       	push   0xc0039c30
c0014196:	e8 03 8d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001419b:	59                   	pop    ecx
c001419c:	58                   	pop    eax
c001419d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141a0:	68 3b 9c 03 c0       	push   0xc0039c3b
c00141a5:	e8 f4 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141aa:	58                   	pop    eax
c00141ab:	5a                   	pop    edx
c00141ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141af:	68 46 9c 03 c0       	push   0xc0039c46
c00141b4:	e8 e5 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141b9:	59                   	pop    ecx
c00141ba:	58                   	pop    eax
c00141bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00141be:	68 51 9c 03 c0       	push   0xc0039c51
c00141c3:	e8 d6 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141c8:	58                   	pop    eax
c00141c9:	5a                   	pop    edx
c00141ca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00141cd:	68 5c 9c 03 c0       	push   0xc0039c5c
c00141d2:	e8 c7 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141d7:	59                   	pop    ecx
c00141d8:	58                   	pop    eax
c00141d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141dc:	68 76 9c 03 c0       	push   0xc0039c76
c00141e1:	e8 b8 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141e6:	58                   	pop    eax
c00141e7:	5a                   	pop    edx
c00141e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00141eb:	68 67 9c 03 c0       	push   0xc0039c67
c00141f0:	e8 a9 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00141f5:	59                   	pop    ecx
c00141f6:	58                   	pop    eax
c00141f7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00141fa:	68 72 9c 03 c0       	push   0xc0039c72
c00141ff:	e8 9a 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0014204:	58                   	pop    eax
c0014205:	5a                   	pop    edx
c0014206:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014209:	68 81 9c 03 c0       	push   0xc0039c81
c001420e:	e8 8b 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0014213:	59                   	pop    ecx
c0014214:	58                   	pop    eax
c0014215:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014218:	68 8c 9c 03 c0       	push   0xc0039c8c
c001421d:	e8 7c 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0014222:	58                   	pop    eax
c0014223:	5a                   	pop    edx
c0014224:	57                   	push   edi
c0014225:	68 97 9c 03 c0       	push   0xc0039c97
c001422a:	e8 6f 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001422f:	59                   	pop    ecx
c0014230:	58                   	pop    eax
c0014231:	56                   	push   esi
c0014232:	68 a2 9c 03 c0       	push   0xc0039ca2
c0014237:	e8 62 8c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001423c:	58                   	pop    eax
c001423d:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014242:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014248:	e8 d8 c3 ff ff       	call   c0010625 <setActiveTerminal(VgaText*)>
c001424d:	58                   	pop    eax
c001424e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014251:	5a                   	pop    edx
c0014252:	c1 e0 05             	shl    eax,0x5
c0014255:	05 80 ae 03 c0       	add    eax,0xc003ae80
c001425a:	50                   	push   eax
c001425b:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014266:	e8 d9 c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c001426b:	59                   	pop    ecx
c001426c:	58                   	pop    eax
c001426d:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014272:	68 ad 9c 03 c0       	push   0xc0039cad
c0014277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001427d:	e8 c2 c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014282:	58                   	pop    eax
c0014283:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014288:	5a                   	pop    edx
c0014289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001428c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014292:	e8 d3 c7 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c0014297:	59                   	pop    ecx
c0014298:	58                   	pop    eax
c0014299:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001429e:	68 b5 9c 03 c0       	push   0xc0039cb5
c00142a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a9:	e8 96 c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00142ae:	58                   	pop    eax
c00142af:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142b4:	5a                   	pop    edx
c00142b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00142b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142be:	e8 a7 c7 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00142c3:	59                   	pop    ecx
c00142c4:	58                   	pop    eax
c00142c5:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142ca:	68 bd 9c 03 c0       	push   0xc0039cbd
c00142cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d5:	e8 6a c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00142da:	58                   	pop    eax
c00142db:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142e0:	5a                   	pop    edx
c00142e1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00142e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ea:	e8 7b c7 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00142ef:	59                   	pop    ecx
c00142f0:	58                   	pop    eax
c00142f1:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142f6:	68 c5 9c 03 c0       	push   0xc0039cc5
c00142fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014301:	e8 3e c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014306:	58                   	pop    eax
c0014307:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001430c:	5a                   	pop    edx
c001430d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014310:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014316:	e8 4f c7 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001431b:	59                   	pop    ecx
c001431c:	58                   	pop    eax
c001431d:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014322:	68 cd 9c 03 c0       	push   0xc0039ccd
c0014327:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432d:	e8 12 c7 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014332:	58                   	pop    eax
c0014333:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014338:	5a                   	pop    edx
c0014339:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001433c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014342:	e8 23 c7 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c0014347:	59                   	pop    ecx
c0014348:	58                   	pop    eax
c0014349:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001434e:	68 d5 9c 03 c0       	push   0xc0039cd5
c0014353:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014359:	e8 e6 c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c001435e:	58                   	pop    eax
c001435f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014364:	5a                   	pop    edx
c0014365:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014368:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436e:	e8 f7 c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c0014373:	59                   	pop    ecx
c0014374:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014379:	5b                   	pop    ebx
c001437a:	68 dd 9c 03 c0       	push   0xc0039cdd
c001437f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014385:	e8 ba c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c001438a:	58                   	pop    eax
c001438b:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014390:	5a                   	pop    edx
c0014391:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014395:	52                   	push   edx
c0014396:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001439c:	e8 c9 c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00143a1:	59                   	pop    ecx
c00143a2:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143a7:	5b                   	pop    ebx
c00143a8:	68 e6 9c 03 c0       	push   0xc0039ce6
c00143ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143b3:	e8 8c c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00143b8:	58                   	pop    eax
c00143b9:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143be:	5a                   	pop    edx
c00143bf:	57                   	push   edi
c00143c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c6:	e8 9f c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00143cb:	59                   	pop    ecx
c00143cc:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143d1:	5b                   	pop    ebx
c00143d2:	68 ee 9c 03 c0       	push   0xc0039cee
c00143d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143dd:	e8 62 c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00143e2:	5f                   	pop    edi
c00143e3:	58                   	pop    eax
c00143e4:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143e9:	56                   	push   esi
c00143ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f0:	e8 75 c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00143f5:	58                   	pop    eax
c00143f6:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143fb:	5a                   	pop    edx
c00143fc:	68 f6 9c 03 c0       	push   0xc0039cf6
c0014401:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014407:	e8 38 c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c001440c:	59                   	pop    ecx
c001440d:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014412:	5b                   	pop    ebx
c0014413:	55                   	push   ebp
c0014414:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001441a:	e8 4b c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001441f:	5e                   	pop    esi
c0014420:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014425:	5f                   	pop    edi
c0014426:	68 fe 9c 03 c0       	push   0xc0039cfe
c001442b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014431:	e8 0e c6 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014436:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001443b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014441:	e8 9a ab 00 00       	call   c001efe0 <CPU::readDR0()>
c0014446:	5d                   	pop    ebp
c0014447:	5a                   	pop    edx
c0014448:	50                   	push   eax
c0014449:	53                   	push   ebx
c001444a:	e8 1b c6 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001444f:	59                   	pop    ecx
c0014450:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014455:	5b                   	pop    ebx
c0014456:	68 07 9d 03 c0       	push   0xc0039d07
c001445b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014461:	e8 de c5 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014466:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001446b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014471:	e8 7c ab 00 00       	call   c001eff2 <CPU::readDR1()>
c0014476:	5e                   	pop    esi
c0014477:	5f                   	pop    edi
c0014478:	50                   	push   eax
c0014479:	53                   	push   ebx
c001447a:	e8 eb c5 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001447f:	5d                   	pop    ebp
c0014480:	58                   	pop    eax
c0014481:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014486:	68 0f 9d 03 c0       	push   0xc0039d0f
c001448b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014491:	e8 ae c5 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014496:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001449b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144a1:	e8 5e ab 00 00       	call   c001f004 <CPU::readDR2()>
c00144a6:	5a                   	pop    edx
c00144a7:	59                   	pop    ecx
c00144a8:	50                   	push   eax
c00144a9:	53                   	push   ebx
c00144aa:	e8 bb c5 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00144af:	5b                   	pop    ebx
c00144b0:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144b5:	5e                   	pop    esi
c00144b6:	68 17 9d 03 c0       	push   0xc0039d17
c00144bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144c1:	e8 7e c5 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00144c6:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144cb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144d1:	e8 40 ab 00 00       	call   c001f016 <CPU::readDR3()>
c00144d6:	5f                   	pop    edi
c00144d7:	5d                   	pop    ebp
c00144d8:	50                   	push   eax
c00144d9:	53                   	push   ebx
c00144da:	e8 8b c5 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c00144df:	58                   	pop    eax
c00144e0:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144e5:	5a                   	pop    edx
c00144e6:	68 1f 9d 03 c0       	push   0xc0039d1f
c00144eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f1:	e8 4e c5 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c00144f6:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144fb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014501:	e8 22 ab 00 00       	call   c001f028 <CPU::readDR6()>
c0014506:	59                   	pop    ecx
c0014507:	5e                   	pop    esi
c0014508:	50                   	push   eax
c0014509:	53                   	push   ebx
c001450a:	e8 5b c5 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001450f:	5f                   	pop    edi
c0014510:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014515:	5d                   	pop    ebp
c0014516:	68 27 9d 03 c0       	push   0xc0039d27
c001451b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014521:	e8 1e c5 ff ff       	call   c0010a44 <VgaText::puts(char const*)>
c0014526:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001452b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014531:	e8 04 ab 00 00       	call   c001f03a <CPU::readDR7()>
c0014536:	5a                   	pop    edx
c0014537:	59                   	pop    ecx
c0014538:	50                   	push   eax
c0014539:	53                   	push   ebx
c001453a:	e8 2b c5 ff ff       	call   c0010a6a <VgaText::putx(unsigned int)>
c001453f:	fa                   	cli    
c0014540:	f4                   	hlt    
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	eb fe                	jmp    c0014544 <displayDebugInfo(regs*)+0x3e0>

c0014546 <gpFault(regs*, void*)>:
c0014546:	53                   	push   ebx
c0014547:	83 ec 14             	sub    esp,0x14
c001454a:	c7 05 a8 be 03 c0 39 87 01 c0 	mov    DWORD PTR ds:0xc003bea8,0xc0018739
c0014554:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014558:	53                   	push   ebx
c0014559:	e8 db 41 00 00       	call   c0018739 <vm8086FaultHandler(regs*)>
c001455e:	83 c4 10             	add    esp,0x10
c0014561:	84 c0                	test   al,al
c0014563:	74 05                	je     c001456a <gpFault(regs*, void*)+0x24>
c0014565:	83 c4 08             	add    esp,0x8
c0014568:	5b                   	pop    ebx
c0014569:	c3                   	ret    
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	68 2f 9d 03 c0       	push   0xc0039d2f
c0014572:	e8 27 89 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0014577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001457a:	e8 e5 fb ff ff       	call   c0014164 <displayDebugInfo(regs*)>

c001457f <pgFault(regs*, void*)>:
c001457f:	83 ec 18             	sub    esp,0x18
c0014582:	68 4a 9d 03 c0       	push   0xc0039d4a
c0014587:	e8 12 89 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001458c:	58                   	pop    eax
c001458d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014591:	e8 ce fb ff ff       	call   c0014164 <displayDebugInfo(regs*)>

c0014596 <otherISRHandler(regs*, void*)>:
c0014596:	53                   	push   ebx
c0014597:	83 ec 0c             	sub    esp,0xc
c001459a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001459e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145a1:	50                   	push   eax
c00145a2:	50                   	push   eax
c00145a3:	68 57 9d 03 c0       	push   0xc0039d57
c00145a8:	e8 f1 88 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00145ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b0:	e8 af fb ff ff       	call   c0014164 <displayDebugInfo(regs*)>

c00145b5 <opcodeFault(regs*, void*)>:
c00145b5:	53                   	push   ebx
c00145b6:	83 ec 08             	sub    esp,0x8
c00145b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145bd:	e8 92 2b 00 00       	call   c0017154 <thisCPU()>
c00145c2:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00145c9:	74 16                	je     c00145e1 <opcodeFault(regs*, void*)+0x2c>
c00145cb:	83 ec 0c             	sub    esp,0xc
c00145ce:	68 d4 9b 03 c0       	push   0xc0039bd4
c00145d3:	e8 c6 88 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00145d8:	83 43 38 40          	add    DWORD PTR [ebx+0x38],0x40
c00145dc:	83 c4 18             	add    esp,0x18
c00145df:	5b                   	pop    ebx
c00145e0:	c3                   	ret    
c00145e1:	83 ec 0c             	sub    esp,0xc
c00145e4:	68 74 9d 03 c0       	push   0xc0039d74
c00145e9:	e8 b0 88 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00145ee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00145f1:	c1 e0 04             	shl    eax,0x4
c00145f4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00145f7:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00145fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00145fe:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0014602:	52                   	push   edx
c0014603:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014607:	52                   	push   edx
c0014608:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001460b:	50                   	push   eax
c001460c:	68 f8 9b 03 c0       	push   0xc0039bf8
c0014611:	e8 88 88 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0014616:	83 c4 14             	add    esp,0x14
c0014619:	53                   	push   ebx
c001461a:	e8 45 fb ff ff       	call   c0014164 <displayDebugInfo(regs*)>

c001461f <displayProgramFault(char const*)>:
c001461f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014624:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014627:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001462d:	85 c0                	test   eax,eax
c001462f:	74 15                	je     c0014646 <displayProgramFault(char const*)+0x27>
c0014631:	83 ec 0c             	sub    esp,0xc
c0014634:	6a 04                	push   0x4
c0014636:	6a 0f                	push   0xf
c0014638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001463c:	50                   	push   eax
c001463d:	e8 c4 c0 ff ff       	call   c0010706 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014642:	83 c4 1c             	add    esp,0x1c
c0014645:	c3                   	ret    
c0014646:	c3                   	ret    
c0014647:	90                   	nop

c0014648 <InterruptController::convertLegacyIRQNumber(int)>:
c0014648:	53                   	push   ebx
c0014649:	83 ec 14             	sub    esp,0x14
c001464c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014654:	e8 e1 f3 ff ff       	call   c0013a3a <Device::getName()>
c0014659:	83 c4 10             	add    esp,0x10
c001465c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001465f:	74 07                	je     c0014668 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014661:	89 d8                	mov    eax,ebx
c0014663:	83 c4 08             	add    esp,0x8
c0014666:	5b                   	pop    ebx
c0014667:	c3                   	ret    
c0014668:	83 fb 0f             	cmp    ebx,0xf
c001466b:	7f 0e                	jg     c001467b <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001466d:	0f b6 9b 20 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ee0]
c0014674:	83 c4 08             	add    esp,0x8
c0014677:	89 d8                	mov    eax,ebx
c0014679:	5b                   	pop    ebx
c001467a:	c3                   	ret    
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	68 24 9b 03 c0       	push   0xc0039b24
c0014683:	e8 34 89 ff ff       	call   c000cfbc <panic(char const*)>
c0014688:	89 d8                	mov    eax,ebx
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	83 c4 08             	add    esp,0x8
c0014690:	5b                   	pop    ebx
c0014691:	c3                   	ret    

c0014692 <setupInterruptController()>:
c0014692:	56                   	push   esi
c0014693:	53                   	push   ebx
c0014694:	51                   	push   ecx
c0014695:	e8 b7 2a 00 00       	call   c0017151 <getCPUNumber()>
c001469a:	85 c0                	test   eax,eax
c001469c:	0f 85 10 02 00 00    	jne    c00148b2 <setupInterruptController()+0x220>
c00146a2:	83 ec 0c             	sub    esp,0xc
c00146a5:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00146aa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00146b0:	68 58 21 00 00       	push   0x2158
c00146b5:	83 e0 01             	and    eax,0x1
c00146b8:	89 c6                	mov    esi,eax
c00146ba:	e8 8f dd ff ff       	call   c001244e <operator new(unsigned long)>
c00146bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00146c2:	89 c3                	mov    ebx,eax
c00146c4:	e8 e5 94 00 00       	call   c001dbae <PIC::PIC()>
c00146c9:	6a 00                	push   0x0
c00146cb:	6a 00                	push   0x0
c00146cd:	6a 00                	push   0x0
c00146cf:	53                   	push   ebx
c00146d0:	e8 1d 98 00 00       	call   c001def2 <PIC::open(int, int, void*)>
c00146d5:	83 c4 20             	add    esp,0x20
c00146d8:	89 f0                	mov    eax,esi
c00146da:	84 c0                	test   al,al
c00146dc:	0f 85 92 01 00 00    	jne    c0014874 <setupInterruptController()+0x1e2>
c00146e2:	83 ec 08             	sub    esp,0x8
c00146e5:	53                   	push   ebx
c00146e6:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c00146ec:	e8 67 f0 ff ff       	call   c0013758 <Device::addChild(Device*)>
c00146f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146f3:	6a 00                	push   0x0
c00146f5:	68 96 45 01 c0       	push   0xc0014596
c00146fa:	6a 00                	push   0x0
c00146fc:	53                   	push   ebx
c00146fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014700:	83 c4 20             	add    esp,0x20
c0014703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014705:	6a 00                	push   0x0
c0014707:	68 96 45 01 c0       	push   0xc0014596
c001470c:	6a 01                	push   0x1
c001470e:	53                   	push   ebx
c001470f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014712:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014714:	6a 00                	push   0x0
c0014716:	68 c7 3f 01 c0       	push   0xc0013fc7
c001471b:	6a 02                	push   0x2
c001471d:	53                   	push   ebx
c001471e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014721:	83 c4 20             	add    esp,0x20
c0014724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014726:	6a 00                	push   0x0
c0014728:	68 96 45 01 c0       	push   0xc0014596
c001472d:	6a 03                	push   0x3
c001472f:	53                   	push   ebx
c0014730:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014733:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014735:	6a 00                	push   0x0
c0014737:	68 96 45 01 c0       	push   0xc0014596
c001473c:	6a 04                	push   0x4
c001473e:	53                   	push   ebx
c001473f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014742:	83 c4 20             	add    esp,0x20
c0014745:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014747:	6a 00                	push   0x0
c0014749:	68 96 45 01 c0       	push   0xc0014596
c001474e:	6a 05                	push   0x5
c0014750:	53                   	push   ebx
c0014751:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014754:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014756:	6a 00                	push   0x0
c0014758:	68 b5 45 01 c0       	push   0xc00145b5
c001475d:	6a 06                	push   0x6
c001475f:	53                   	push   ebx
c0014760:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014763:	83 c4 20             	add    esp,0x20
c0014766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014768:	6a 00                	push   0x0
c001476a:	68 96 45 01 c0       	push   0xc0014596
c001476f:	6a 07                	push   0x7
c0014771:	53                   	push   ebx
c0014772:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014777:	6a 00                	push   0x0
c0014779:	68 ee 3d 01 c0       	push   0xc0013dee
c001477e:	6a 08                	push   0x8
c0014780:	53                   	push   ebx
c0014781:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014784:	83 c4 20             	add    esp,0x20
c0014787:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014789:	6a 00                	push   0x0
c001478b:	68 96 45 01 c0       	push   0xc0014596
c0014790:	6a 09                	push   0x9
c0014792:	53                   	push   ebx
c0014793:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014798:	6a 00                	push   0x0
c001479a:	68 96 45 01 c0       	push   0xc0014596
c001479f:	6a 0a                	push   0xa
c00147a1:	53                   	push   ebx
c00147a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a5:	83 c4 20             	add    esp,0x20
c00147a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147aa:	6a 00                	push   0x0
c00147ac:	68 96 45 01 c0       	push   0xc0014596
c00147b1:	6a 0b                	push   0xb
c00147b3:	53                   	push   ebx
c00147b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147b9:	6a 00                	push   0x0
c00147bb:	68 96 45 01 c0       	push   0xc0014596
c00147c0:	6a 0c                	push   0xc
c00147c2:	53                   	push   ebx
c00147c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147c6:	83 c4 20             	add    esp,0x20
c00147c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147cb:	6a 00                	push   0x0
c00147cd:	68 46 45 01 c0       	push   0xc0014546
c00147d2:	6a 0d                	push   0xd
c00147d4:	53                   	push   ebx
c00147d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147da:	6a 00                	push   0x0
c00147dc:	68 7f 45 01 c0       	push   0xc001457f
c00147e1:	6a 0e                	push   0xe
c00147e3:	53                   	push   ebx
c00147e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147e7:	83 c4 20             	add    esp,0x20
c00147ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ec:	6a 00                	push   0x0
c00147ee:	68 96 45 01 c0       	push   0xc0014596
c00147f3:	6a 0f                	push   0xf
c00147f5:	53                   	push   ebx
c00147f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147fb:	6a 00                	push   0x0
c00147fd:	68 96 45 01 c0       	push   0xc0014596
c0014802:	6a 10                	push   0x10
c0014804:	53                   	push   ebx
c0014805:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014808:	83 c4 20             	add    esp,0x20
c001480b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480d:	6a 00                	push   0x0
c001480f:	68 96 45 01 c0       	push   0xc0014596
c0014814:	6a 11                	push   0x11
c0014816:	53                   	push   ebx
c0014817:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001481a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001481c:	6a 00                	push   0x0
c001481e:	68 96 45 01 c0       	push   0xc0014596
c0014823:	6a 12                	push   0x12
c0014825:	53                   	push   ebx
c0014826:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014829:	83 c4 20             	add    esp,0x20
c001482c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001482e:	6a 00                	push   0x0
c0014830:	68 96 45 01 c0       	push   0xc0014596
c0014835:	6a 13                	push   0x13
c0014837:	53                   	push   ebx
c0014838:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001483b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483d:	6a 00                	push   0x0
c001483f:	68 96 45 01 c0       	push   0xc0014596
c0014844:	6a 14                	push   0x14
c0014846:	53                   	push   ebx
c0014847:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001484a:	83 c4 20             	add    esp,0x20
c001484d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001484f:	6a 00                	push   0x0
c0014851:	68 96 45 01 c0       	push   0xc0014596
c0014856:	6a 1e                	push   0x1e
c0014858:	53                   	push   ebx
c0014859:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001485c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001485e:	6a 00                	push   0x0
c0014860:	68 fc fd 00 c0       	push   0xc000fdfc
c0014865:	6a 60                	push   0x60
c0014867:	53                   	push   ebx
c0014868:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001486b:	83 c4 20             	add    esp,0x20
c001486e:	89 d8                	mov    eax,ebx
c0014870:	5a                   	pop    edx
c0014871:	5b                   	pop    ebx
c0014872:	5e                   	pop    esi
c0014873:	c3                   	ret    
c0014874:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014876:	6a 00                	push   0x0
c0014878:	6a 00                	push   0x0
c001487a:	6a 00                	push   0x0
c001487c:	53                   	push   ebx
c001487d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014880:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014885:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0014888:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001488f:	e8 ba db ff ff       	call   c001244e <operator new(unsigned long)>
c0014894:	89 04 24             	mov    DWORD PTR [esp],eax
c0014897:	89 c3                	mov    ebx,eax
c0014899:	e8 4e 8e 00 00       	call   c001d6ec <APIC::APIC()>
c001489e:	6a 00                	push   0x0
c00148a0:	6a 00                	push   0x0
c00148a2:	6a 00                	push   0x0
c00148a4:	53                   	push   ebx
c00148a5:	e8 60 8d 00 00       	call   c001d60a <APIC::open(int, int, void*)>
c00148aa:	83 c4 20             	add    esp,0x20
c00148ad:	e9 30 fe ff ff       	jmp    c00146e2 <setupInterruptController()+0x50>
c00148b2:	83 ec 0c             	sub    esp,0xc
c00148b5:	68 58 21 00 00       	push   0x2158
c00148ba:	e8 8f db ff ff       	call   c001244e <operator new(unsigned long)>
c00148bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c2:	89 c3                	mov    ebx,eax
c00148c4:	e8 23 8e 00 00       	call   c001d6ec <APIC::APIC()>
c00148c9:	6a 00                	push   0x0
c00148cb:	6a 00                	push   0x0
c00148cd:	6a 00                	push   0x0
c00148cf:	53                   	push   ebx
c00148d0:	e8 35 8d 00 00       	call   c001d60a <APIC::open(int, int, void*)>
c00148d5:	83 c4 18             	add    esp,0x18
c00148d8:	53                   	push   ebx
c00148d9:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c00148df:	e8 74 ee ff ff       	call   c0013758 <Device::addChild(Device*)>
c00148e4:	83 c4 10             	add    esp,0x10
c00148e7:	89 d8                	mov    eax,ebx
c00148e9:	5a                   	pop    edx
c00148ea:	5b                   	pop    ebx
c00148eb:	5e                   	pop    esi
c00148ec:	c3                   	ret    
c00148ed:	90                   	nop

c00148ee <startGUI(void*)>:
c00148ee:	55                   	push   ebp
c00148ef:	89 e5                	mov    ebp,esp
c00148f1:	53                   	push   ebx
c00148f2:	83 ec 04             	sub    esp,0x4
c00148f5:	e8 48 9a ff ff       	call   c000e342 <unlockScheduler()>
c00148fa:	e8 2c 9a ff ff       	call   c000e32b <getIRQNestingLevel()>
c00148ff:	83 ec 08             	sub    esp,0x8
c0014902:	50                   	push   eax
c0014903:	68 d0 9d 03 c0       	push   0xc0039dd0
c0014908:	e8 91 85 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	68 ea 9d 03 c0       	push   0xc0039dea
c001491e:	e8 5b 7d ff ff       	call   c000c67e <loadDLL(char const*)>
c0014923:	83 c4 10             	add    esp,0x10
c0014926:	83 ec 08             	sub    esp,0x8
c0014929:	53                   	push   ebx
c001492a:	50                   	push   eax
c001492b:	e8 17 7e ff ff       	call   c000c747 <executeDLL(unsigned long, void*)>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	68 04 9e 03 c0       	push   0xc0039e04
c0014941:	e8 38 7d ff ff       	call   c000c67e <loadDLL(char const*)>
c0014946:	83 c4 10             	add    esp,0x10
c0014949:	83 ec 08             	sub    esp,0x8
c001494c:	53                   	push   ebx
c001494d:	50                   	push   eax
c001494e:	e8 f4 7d ff ff       	call   c000c747 <executeDLL(unsigned long, void*)>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	90                   	nop
c0014957:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001495a:	c9                   	leave  
c001495b:	c3                   	ret    

c001495c <sendKeyToTerminal(unsigned char)>:
c001495c:	55                   	push   ebp
c001495d:	89 e5                	mov    ebp,esp
c001495f:	83 ec 28             	sub    esp,0x28
c0014962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014965:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014968:	a1 64 be 03 c0       	mov    eax,ds:0xc003be64
c001496d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014971:	83 ec 08             	sub    esp,0x8
c0014974:	52                   	push   edx
c0014975:	50                   	push   eax
c0014976:	e8 c7 c2 ff ff       	call   c0010c42 <VgaText::receiveKey(unsigned char)>
c001497b:	83 c4 10             	add    esp,0x10
c001497e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014982:	75 41                	jne    c00149c5 <sendKeyToTerminal(unsigned char)+0x69>
c0014984:	e8 de 99 ff ff       	call   c000e367 <lockStuff()>
c0014989:	a1 c0 be 03 c0       	mov    eax,ds:0xc003bec0
c001498e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014991:	c7 05 c0 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bec0,0x0
c001499b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001499f:	74 1f                	je     c00149c0 <sendKeyToTerminal(unsigned char)+0x64>
c00149a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00149a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00149aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00149b6:	e8 a9 a1 ff ff       	call   c000eb64 <unblockTask(ThreadControlBlock*)>
c00149bb:	83 c4 10             	add    esp,0x10
c00149be:	eb db                	jmp    c001499b <sendKeyToTerminal(unsigned char)+0x3f>
c00149c0:	e8 34 9d ff ff       	call   c000e6f9 <unlockStuff()>
c00149c5:	90                   	nop
c00149c6:	c9                   	leave  
c00149c7:	c3                   	ret    

c00149c8 <sendKeyboardToken(KeyboardToken)>:
c00149c8:	55                   	push   ebp
c00149c9:	89 e5                	mov    ebp,esp
c00149cb:	83 ec 18             	sub    esp,0x18
c00149ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00149d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d4:	0f b7 c0             	movzx  eax,ax
c00149d7:	83 f2 01             	xor    edx,0x1
c00149da:	88 90 e0 be 03 c0    	mov    BYTE PTR [eax-0x3ffc4120],dl
c00149e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e3:	66 3d 03 02          	cmp    ax,0x203
c00149e7:	75 07                	jne    c00149f0 <sendKeyboardToken(KeyboardToken)+0x28>
c00149e9:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c00149ee:	84 c0                	test   al,al
c00149f0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00149f4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00149f7:	a0 e8 c2 03 c0       	mov    al,ds:0xc003c2e8
c00149fc:	38 c2                	cmp    dl,al
c00149fe:	74 1c                	je     c0014a1c <sendKeyboardToken(KeyboardToken)+0x54>
c0014a00:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014a03:	a2 e8 c2 03 c0       	mov    ds:0xc003c2e8,al
c0014a08:	a0 e8 c2 03 c0       	mov    al,ds:0xc003c2e8
c0014a0d:	0f b6 c0             	movzx  eax,al
c0014a10:	83 ec 0c             	sub    esp,0xc
c0014a13:	50                   	push   eax
c0014a14:	e8 97 b4 ff ff       	call   c000feb0 <setTerminalScrollLock(bool)>
c0014a19:	83 c4 10             	add    esp,0x10
c0014a1c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014a1f:	84 c0                	test   al,al
c0014a21:	0f 84 ae 00 00 00    	je     c0014ad5 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2a:	66 3d 10 03          	cmp    ax,0x310
c0014a2e:	75 06                	jne    c0014a36 <sendKeyboardToken(KeyboardToken)+0x6e>
c0014a30:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a39:	66 3d 11 03          	cmp    ax,0x311
c0014a3d:	75 06                	jne    c0014a45 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014a3f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a48:	66 3d 12 03          	cmp    ax,0x312
c0014a4c:	75 06                	jne    c0014a54 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014a4e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a57:	66 3d 13 03          	cmp    ax,0x313
c0014a5b:	75 06                	jne    c0014a63 <sendKeyboardToken(KeyboardToken)+0x9b>
c0014a5d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a66:	66 3d 14 03          	cmp    ax,0x314
c0014a6a:	75 06                	jne    c0014a72 <sendKeyboardToken(KeyboardToken)+0xaa>
c0014a6c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a75:	66 3d 15 03          	cmp    ax,0x315
c0014a79:	75 06                	jne    c0014a81 <sendKeyboardToken(KeyboardToken)+0xb9>
c0014a7b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a84:	66 3d 16 03          	cmp    ax,0x316
c0014a88:	75 06                	jne    c0014a90 <sendKeyboardToken(KeyboardToken)+0xc8>
c0014a8a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	66 3d 17 03          	cmp    ax,0x317
c0014a97:	75 06                	jne    c0014a9f <sendKeyboardToken(KeyboardToken)+0xd7>
c0014a99:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa2:	66 3d 18 03          	cmp    ax,0x318
c0014aa6:	75 06                	jne    c0014aae <sendKeyboardToken(KeyboardToken)+0xe6>
c0014aa8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab1:	66 3d 19 03          	cmp    ax,0x319
c0014ab5:	75 06                	jne    c0014abd <sendKeyboardToken(KeyboardToken)+0xf5>
c0014ab7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac0:	66 3d 1a 03          	cmp    ax,0x31a
c0014ac4:	0f 85 c9 00 00 00    	jne    c0014b93 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014aca:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014ad0:	e9 be 00 00 00       	jmp    c0014b93 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad8:	66 3d 10 03          	cmp    ax,0x310
c0014adc:	75 0a                	jne    c0014ae8 <sendKeyboardToken(KeyboardToken)+0x120>
c0014ade:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014ae4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aeb:	66 3d 11 03          	cmp    ax,0x311
c0014aef:	75 0a                	jne    c0014afb <sendKeyboardToken(KeyboardToken)+0x133>
c0014af1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014af7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afe:	66 3d 12 03          	cmp    ax,0x312
c0014b02:	75 0a                	jne    c0014b0e <sendKeyboardToken(KeyboardToken)+0x146>
c0014b04:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014b0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b11:	66 3d 13 03          	cmp    ax,0x313
c0014b15:	75 0a                	jne    c0014b21 <sendKeyboardToken(KeyboardToken)+0x159>
c0014b17:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014b1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b24:	66 3d 14 03          	cmp    ax,0x314
c0014b28:	75 0a                	jne    c0014b34 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014b2a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014b30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b37:	66 3d 15 03          	cmp    ax,0x315
c0014b3b:	75 0a                	jne    c0014b47 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014b3d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014b43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4a:	66 3d 16 03          	cmp    ax,0x316
c0014b4e:	75 0a                	jne    c0014b5a <sendKeyboardToken(KeyboardToken)+0x192>
c0014b50:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014b56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5d:	66 3d 17 03          	cmp    ax,0x317
c0014b61:	75 0a                	jne    c0014b6d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014b63:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014b69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	66 3d 18 03          	cmp    ax,0x318
c0014b74:	75 0a                	jne    c0014b80 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014b76:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014b7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b83:	66 3d 19 03          	cmp    ax,0x319
c0014b87:	75 0a                	jne    c0014b93 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b89:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014b8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b96:	66 3d 00 02          	cmp    ax,0x200
c0014b9a:	75 2a                	jne    c0014bc6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014b9c:	a0 e0 c2 03 c0       	mov    al,ds:0xc003c2e0
c0014ba1:	83 f0 01             	xor    eax,0x1
c0014ba4:	84 c0                	test   al,al
c0014ba6:	74 1e                	je     c0014bc6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014ba8:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014bad:	6a 01                	push   0x1
c0014baf:	6a 00                	push   0x0
c0014bb1:	68 ee 48 01 c0       	push   0xc00148ee
c0014bb6:	50                   	push   eax
c0014bb7:	e8 ae 98 ff ff       	call   c000e46a <Process::createThread(void (*)(void*), void*, int)>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	c6 05 e0 c2 03 c0 01 	mov    BYTE PTR ds:0xc003c2e0,0x1
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	66 3d 1d 03          	cmp    ax,0x31d
c0014bcd:	75 06                	jne    c0014bd5 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014bcf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd8:	66 3d 1c 03          	cmp    ax,0x31c
c0014bdc:	75 06                	jne    c0014be4 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014bde:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be7:	66 3d 1b 03          	cmp    ax,0x31b
c0014beb:	75 06                	jne    c0014bf3 <sendKeyboardToken(KeyboardToken)+0x22b>
c0014bed:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf6:	66 3d 1e 03          	cmp    ax,0x31e
c0014bfa:	75 06                	jne    c0014c02 <sendKeyboardToken(KeyboardToken)+0x23a>
c0014bfc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c05:	66 3d 1f 03          	cmp    ax,0x31f
c0014c09:	75 06                	jne    c0014c11 <sendKeyboardToken(KeyboardToken)+0x249>
c0014c0b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c14:	66 3d 1a 03          	cmp    ax,0x31a
c0014c18:	75 06                	jne    c0014c20 <sendKeyboardToken(KeyboardToken)+0x258>
c0014c1a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014c20:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014c24:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c27:	83 f0 01             	xor    eax,0x1
c0014c2a:	84 c0                	test   al,al
c0014c2c:	74 77                	je     c0014ca5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014c2e:	a0 e1 bf 03 c0       	mov    al,ds:0xc003bfe1
c0014c33:	84 c0                	test   al,al
c0014c35:	74 41                	je     c0014c78 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014c37:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c3b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014c3f:	74 2b                	je     c0014c6c <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014c41:	8b 15 e4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2e4
c0014c47:	89 d0                	mov    eax,edx
c0014c49:	c1 e0 02             	shl    eax,0x2
c0014c4c:	01 d0                	add    eax,edx
c0014c4e:	01 c0                	add    eax,eax
c0014c50:	a3 e4 c2 03 c0       	mov    ds:0xc003c2e4,eax
c0014c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c58:	0f b7 c0             	movzx  eax,ax
c0014c5b:	8d 50 d0             	lea    edx,[eax-0x30]
c0014c5e:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c63:	01 d0                	add    eax,edx
c0014c65:	a3 e4 c2 03 c0       	mov    ds:0xc003c2e4,eax
c0014c6a:	eb 6d                	jmp    c0014cd9 <sendKeyboardToken(KeyboardToken)+0x311>
c0014c6c:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014c76:	eb 61                	jmp    c0014cd9 <sendKeyboardToken(KeyboardToken)+0x311>
c0014c78:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c7d:	85 c0                	test   eax,eax
c0014c7f:	74 18                	je     c0014c99 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014c81:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c86:	0f b6 c0             	movzx  eax,al
c0014c89:	83 ec 0c             	sub    esp,0xc
c0014c8c:	50                   	push   eax
c0014c8d:	e8 ca fc ff ff       	call   c001495c <sendKeyToTerminal(unsigned char)>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c99:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014ca3:	eb 34                	jmp    c0014cd9 <sendKeyboardToken(KeyboardToken)+0x311>
c0014ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca8:	66 3d 01 01          	cmp    ax,0x101
c0014cac:	75 2b                	jne    c0014cd9 <sendKeyboardToken(KeyboardToken)+0x311>
c0014cae:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014cb3:	85 c0                	test   eax,eax
c0014cb5:	74 18                	je     c0014ccf <sendKeyboardToken(KeyboardToken)+0x307>
c0014cb7:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014cbc:	0f b6 c0             	movzx  eax,al
c0014cbf:	83 ec 0c             	sub    esp,0xc
c0014cc2:	50                   	push   eax
c0014cc3:	e8 94 fc ff ff       	call   c001495c <sendKeyToTerminal(unsigned char)>
c0014cc8:	83 c4 10             	add    esp,0x10
c0014ccb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014ccf:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014cd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014cdc:	83 f0 01             	xor    eax,0x1
c0014cdf:	84 c0                	test   al,al
c0014ce1:	74 4c                	je     c0014d2f <sendKeyboardToken(KeyboardToken)+0x367>
c0014ce3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014ce6:	83 f0 01             	xor    eax,0x1
c0014ce9:	84 c0                	test   al,al
c0014ceb:	74 42                	je     c0014d2f <sendKeyboardToken(KeyboardToken)+0x367>
c0014ced:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c0014cf2:	83 f0 01             	xor    eax,0x1
c0014cf5:	84 c0                	test   al,al
c0014cf7:	74 36                	je     c0014d2f <sendKeyboardToken(KeyboardToken)+0x367>
c0014cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfc:	66 83 f8 1f          	cmp    ax,0x1f
c0014d00:	76 09                	jbe    c0014d0b <sendKeyboardToken(KeyboardToken)+0x343>
c0014d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d05:	66 83 f8 7e          	cmp    ax,0x7e
c0014d09:	76 12                	jbe    c0014d1d <sendKeyboardToken(KeyboardToken)+0x355>
c0014d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0e:	66 83 f8 0a          	cmp    ax,0xa
c0014d12:	74 09                	je     c0014d1d <sendKeyboardToken(KeyboardToken)+0x355>
c0014d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d17:	66 83 f8 08          	cmp    ax,0x8
c0014d1b:	75 12                	jne    c0014d2f <sendKeyboardToken(KeyboardToken)+0x367>
c0014d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d20:	0f b6 c0             	movzx  eax,al
c0014d23:	83 ec 0c             	sub    esp,0xc
c0014d26:	50                   	push   eax
c0014d27:	e8 30 fc ff ff       	call   c001495c <sendKeyToTerminal(unsigned char)>
c0014d2c:	83 c4 10             	add    esp,0x10
c0014d2f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d32:	83 f0 01             	xor    eax,0x1
c0014d35:	84 c0                	test   al,al
c0014d37:	74 4f                	je     c0014d88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d39:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d3c:	83 f0 01             	xor    eax,0x1
c0014d3f:	84 c0                	test   al,al
c0014d41:	74 45                	je     c0014d88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d43:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c0014d48:	84 c0                	test   al,al
c0014d4a:	74 3c                	je     c0014d88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4f:	66 83 f8 3f          	cmp    ax,0x3f
c0014d53:	76 33                	jbe    c0014d88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d58:	66 83 f8 7f          	cmp    ax,0x7f
c0014d5c:	77 2a                	ja     c0014d88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d61:	88 c2                	mov    dl,al
c0014d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d66:	66 83 f8 5f          	cmp    ax,0x5f
c0014d6a:	76 04                	jbe    c0014d70 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014d6c:	b0 20                	mov    al,0x20
c0014d6e:	eb 02                	jmp    c0014d72 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014d70:	b0 00                	mov    al,0x0
c0014d72:	29 c2                	sub    edx,eax
c0014d74:	88 d0                	mov    al,dl
c0014d76:	83 e8 40             	sub    eax,0x40
c0014d79:	0f b6 c0             	movzx  eax,al
c0014d7c:	83 ec 0c             	sub    esp,0xc
c0014d7f:	50                   	push   eax
c0014d80:	e8 d7 fb ff ff       	call   c001495c <sendKeyToTerminal(unsigned char)>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8b:	66 3d 00 03          	cmp    ax,0x300
c0014d8f:	75 0f                	jne    c0014da0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d94:	83 f0 01             	xor    eax,0x1
c0014d97:	84 c0                	test   al,al
c0014d99:	74 05                	je     c0014da0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d9b:	e8 37 b9 ff ff       	call   c00106d7 <doTerminalCycle()>
c0014da0:	90                   	nop
c0014da1:	c9                   	leave  
c0014da2:	c3                   	ret    

c0014da3 <clearInternalKeybuffer(VgaText*)>:
c0014da3:	55                   	push   ebp
c0014da4:	89 e5                	mov    ebp,esp
c0014da6:	83 ec 08             	sub    esp,0x8
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	05 34 11 00 00       	add    eax,0x1134
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	50                   	push   eax
c0014db5:	e8 47 b9 fe ff       	call   c0000701 <strlen>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014dc0:	81 c2 34 11 00 00    	add    edx,0x1134
c0014dc6:	83 ec 04             	sub    esp,0x4
c0014dc9:	50                   	push   eax
c0014dca:	6a 00                	push   0x0
c0014dcc:	52                   	push   edx
c0014dcd:	e8 06 b9 fe ff       	call   c00006d8 <memset>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	90                   	nop
c0014dd6:	c9                   	leave  
c0014dd7:	c3                   	ret    

c0014dd8 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014dd8:	55                   	push   ebp
c0014dd9:	89 e5                	mov    ebp,esp
c0014ddb:	83 ec 18             	sub    esp,0x18
c0014dde:	fb                   	sti    
c0014ddf:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014de6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014dea:	74 77                	je     c0014e63 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014def:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014df5:	84 c0                	test   al,al
c0014df7:	75 02                	jne    c0014dfb <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014df9:	eb f1                	jmp    c0014dec <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014dfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0014e01:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014e04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e07:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014e0d:	88 10                	mov    BYTE PTR [eax],dl
c0014e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e12:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e18:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1e:	05 34 11 00 00       	add    eax,0x1134
c0014e23:	83 ec 0c             	sub    esp,0xc
c0014e26:	50                   	push   eax
c0014e27:	e8 d5 b8 fe ff       	call   c0000701 <strlen>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e32:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e38:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014e3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e3e:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e44:	83 ec 04             	sub    esp,0x4
c0014e47:	50                   	push   eax
c0014e48:	51                   	push   ecx
c0014e49:	52                   	push   edx
c0014e4a:	e8 a5 b7 fe ff       	call   c00005f4 <memmove>
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014e55:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e58:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014e5c:	75 88                	jne    c0014de6 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014e5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e61:	eb 03                	jmp    c0014e66 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014e63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e66:	c9                   	leave  
c0014e67:	c3                   	ret    

c0014e68 <Keyboard::Keyboard(char const*)>:
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6f:	83 ec 08             	sub    esp,0x8
c0014e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e76:	50                   	push   eax
c0014e77:	e8 cc ea ff ff       	call   c0013948 <Device::Device(char const*)>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	ba 28 9e 03 c0       	mov    edx,0xc0039e28
c0014e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e88:	89 10                	mov    DWORD PTR [eax],edx
c0014e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e8e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014e98:	c6 05 c4 be 03 c0 01 	mov    BYTE PTR ds:0xc003bec4,0x1
c0014e9f:	90                   	nop
c0014ea0:	83 c4 0c             	add    esp,0xc
c0014ea3:	c3                   	ret    

c0014ea4 <Keyboard::~Keyboard()>:
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	ba 28 9e 03 c0       	mov    edx,0xc0039e28
c0014eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb0:	89 10                	mov    DWORD PTR [eax],edx
c0014eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb6:	83 ec 0c             	sub    esp,0xc
c0014eb9:	50                   	push   eax
c0014eba:	e8 3b e7 ff ff       	call   c00135fa <Device::~Device()>
c0014ebf:	83 c4 10             	add    esp,0x10
c0014ec2:	90                   	nop
c0014ec3:	83 c4 0c             	add    esp,0xc
c0014ec6:	c3                   	ret    
c0014ec7:	90                   	nop

c0014ec8 <Keyboard::~Keyboard()>:
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	83 ec 0c             	sub    esp,0xc
c0014ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ed2:	e8 cd ff ff ff       	call   c0014ea4 <Keyboard::~Keyboard()>
c0014ed7:	83 c4 10             	add    esp,0x10
c0014eda:	83 ec 08             	sub    esp,0x8
c0014edd:	68 5c 01 00 00       	push   0x15c
c0014ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ee6:	e8 72 d5 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0014eeb:	83 c4 10             	add    esp,0x10
c0014eee:	83 c4 0c             	add    esp,0xc
c0014ef1:	c3                   	ret    

c0014ef2 <LogicalDisk::close(int, int, void*)>:
c0014ef2:	83 c8 ff             	or     eax,0xffffffff
c0014ef5:	c3                   	ret    

c0014ef6 <LogicalDisk::~LogicalDisk()>:
c0014ef6:	83 ec 0c             	sub    esp,0xc
c0014ef9:	ba d8 9e 03 c0       	mov    edx,0xc0039ed8
c0014efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f02:	89 10                	mov    DWORD PTR [eax],edx
c0014f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	50                   	push   eax
c0014f0c:	e8 e9 e6 ff ff       	call   c00135fa <Device::~Device()>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	90                   	nop
c0014f15:	83 c4 0c             	add    esp,0xc
c0014f18:	c3                   	ret    
c0014f19:	90                   	nop

c0014f1a <LogicalDisk::~LogicalDisk()>:
c0014f1a:	83 ec 0c             	sub    esp,0xc
c0014f1d:	83 ec 0c             	sub    esp,0xc
c0014f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f24:	e8 cd ff ff ff       	call   c0014ef6 <LogicalDisk::~LogicalDisk()>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	83 ec 08             	sub    esp,0x8
c0014f2f:	68 74 01 00 00       	push   0x174
c0014f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f38:	e8 20 d5 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	83 c4 0c             	add    esp,0xc
c0014f43:	c3                   	ret    

c0014f44 <LogicalDisk::open(int, int, void*)>:
c0014f44:	83 ec 18             	sub    esp,0x18
c0014f47:	68 54 9e 03 c0       	push   0xc0039e54
c0014f4c:	e8 6b 80 ff ff       	call   c000cfbc <panic(char const*)>
c0014f51:	83 c8 ff             	or     eax,0xffffffff
c0014f54:	83 c4 1c             	add    esp,0x1c
c0014f57:	c3                   	ret    

c0014f58 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014f58:	53                   	push   ebx
c0014f59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f65:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014f6b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014f71:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014f77:	77 10                	ja     c0014f89 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014f79:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014f7f:	89 d3                	mov    ebx,edx
c0014f81:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014f87:	72 05                	jb     c0014f8e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014f89:	83 c8 ff             	or     eax,0xffffffff
c0014f8c:	89 c2                	mov    edx,eax
c0014f8e:	5b                   	pop    ebx
c0014f8f:	c3                   	ret    

c0014f90 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014f90:	56                   	push   esi
c0014f91:	83 c8 ff             	or     eax,0xffffffff
c0014f94:	53                   	push   ebx
c0014f95:	89 c2                	mov    edx,eax
c0014f97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f9b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014f9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014fa3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014fa9:	77 27                	ja     c0014fd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fab:	89 d8                	mov    eax,ebx
c0014fad:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014fb3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014fb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014fbe:	89 c2                	mov    edx,eax
c0014fc0:	73 10                	jae    c0014fd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fc2:	89 c8                	mov    eax,ecx
c0014fc4:	89 da                	mov    edx,ebx
c0014fc6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014fcc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014fd2:	5b                   	pop    ebx
c0014fd3:	5e                   	pop    esi
c0014fd4:	c3                   	ret    
c0014fd5:	90                   	nop

c0014fd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014fd6:	83 ec 1c             	sub    esp,0x1c
c0014fd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014fdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014fe1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fe9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014fed:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ff0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014ff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffc:	83 ec 08             	sub    esp,0x8
c0014fff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015003:	50                   	push   eax
c0015004:	e8 3f e9 ff ff       	call   c0013948 <Device::Device(char const*)>
c0015009:	83 c4 10             	add    esp,0x10
c001500c:	ba d8 9e 03 c0       	mov    edx,0xc0039ed8
c0015011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015015:	89 10                	mov    DWORD PTR [eax],edx
c0015017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001501b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015026:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001502d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015031:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001503b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001503f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015047:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001504d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015053:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015057:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001505a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001505e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015064:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001506a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001506e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015072:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015086:	90                   	nop
c0015087:	83 c4 1c             	add    esp,0x1c
c001508a:	c3                   	ret    
c001508b:	90                   	nop

c001508c <LogicalDisk::assignDriveLetter()>:
c001508c:	55                   	push   ebp
c001508d:	57                   	push   edi
c001508e:	56                   	push   esi
c001508f:	53                   	push   ebx
c0015090:	83 ec 14             	sub    esp,0x14
c0015093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015097:	8b 3d 00 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c300
c001509d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00150a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00150a7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00150ad:	8b 3d 04 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c304
c00150b3:	3c 01                	cmp    al,0x1
c00150b5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00150b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00150bd:	19 c0                	sbb    eax,eax
c00150bf:	83 e0 02             	and    eax,0x2
c00150c2:	83 c0 41             	add    eax,0x41
c00150c5:	0f be e8             	movsx  ebp,al
c00150c8:	3c 43                	cmp    al,0x43
c00150ca:	75 10                	jne    c00150dc <LogicalDisk::assignDriveLetter()+0x50>
c00150cc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00150d3:	75 5d                	jne    c0015132 <LogicalDisk::assignDriveLetter()+0xa6>
c00150d5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00150da:	75 56                	jne    c0015132 <LogicalDisk::assignDriveLetter()+0xa6>
c00150dc:	8d 75 bf             	lea    esi,[ebp-0x41]
c00150df:	ba 01 00 00 00       	mov    edx,0x1
c00150e4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00150e8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00150ec:	d3 e2                	shl    edx,cl
c00150ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150f2:	89 d7                	mov    edi,edx
c00150f4:	89 d6                	mov    esi,edx
c00150f6:	c1 ff 1f             	sar    edi,0x1f
c00150f9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00150fd:	21 f9                	and    ecx,edi
c00150ff:	09 d1                	or     ecx,edx
c0015101:	75 2f                	jne    c0015132 <LogicalDisk::assignDriveLetter()+0xa6>
c0015103:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015107:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001510b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015111:	09 f2                	or     edx,esi
c0015113:	89 15 00 c3 03 c0    	mov    DWORD PTR ds:0xc003c300,edx
c0015119:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001511d:	09 fa                	or     edx,edi
c001511f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015123:	89 15 04 c3 03 c0    	mov    DWORD PTR ds:0xc003c304,edx
c0015129:	89 1c bd 20 c3 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3ce0],ebx
c0015130:	eb 08                	jmp    c001513a <LogicalDisk::assignDriveLetter()+0xae>
c0015132:	45                   	inc    ebp
c0015133:	40                   	inc    eax
c0015134:	3c 5b                	cmp    al,0x5b
c0015136:	75 90                	jne    c00150c8 <LogicalDisk::assignDriveLetter()+0x3c>
c0015138:	31 c0                	xor    eax,eax
c001513a:	83 c4 14             	add    esp,0x14
c001513d:	5b                   	pop    ebx
c001513e:	5e                   	pop    esi
c001513f:	5f                   	pop    edi
c0015140:	5d                   	pop    ebp
c0015141:	c3                   	ret    

c0015142 <LogicalDisk::mount()>:
c0015142:	56                   	push   esi
c0015143:	53                   	push   ebx
c0015144:	51                   	push   ecx
c0015145:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015149:	8b 1d 80 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be80
c001514f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015159:	85 db                	test   ebx,ebx
c001515b:	74 50                	je     c00151ad <LogicalDisk::mount()+0x6b>
c001515d:	e8 c9 91 ff ff       	call   c000e32b <getIRQNestingLevel()>
c0015162:	52                   	push   edx
c0015163:	52                   	push   edx
c0015164:	50                   	push   eax
c0015165:	68 78 9e 03 c0       	push   0xc0039e78
c001516a:	e8 2f 7d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001516f:	83 c4 0c             	add    esp,0xc
c0015172:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015179:	8b 13                	mov    edx,DWORD PTR [ebx]
c001517b:	83 e8 41             	sub    eax,0x41
c001517e:	50                   	push   eax
c001517f:	56                   	push   esi
c0015180:	53                   	push   ebx
c0015181:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	84 c0                	test   al,al
c0015189:	74 08                	je     c0015193 <LogicalDisk::mount()+0x51>
c001518b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015191:	eb 1c                	jmp    c00151af <LogicalDisk::mount()+0x6d>
c0015193:	e8 93 91 ff ff       	call   c000e32b <getIRQNestingLevel()>
c0015198:	51                   	push   ecx
c0015199:	51                   	push   ecx
c001519a:	50                   	push   eax
c001519b:	68 93 9e 03 c0       	push   0xc0039e93
c00151a0:	e8 f9 7c ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00151a5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	eb ac                	jmp    c0015159 <LogicalDisk::mount()+0x17>
c00151ad:	31 c0                	xor    eax,eax
c00151af:	5a                   	pop    edx
c00151b0:	5b                   	pop    ebx
c00151b1:	5e                   	pop    esi
c00151b2:	c3                   	ret    
c00151b3:	90                   	nop

c00151b4 <LogicalDisk::unmount()>:
c00151b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151b8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00151c2:	c3                   	ret    
c00151c3:	90                   	nop

c00151c4 <LogicalDisk::unassignDriveLetter()>:
c00151c4:	57                   	push   edi
c00151c5:	56                   	push   esi
c00151c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151ca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00151d1:	84 c9                	test   cl,cl
c00151d3:	75 0f                	jne    c00151e4 <LogicalDisk::unassignDriveLetter()+0x20>
c00151d5:	c7 44 24 0c ae 9e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039eae
c00151dd:	5e                   	pop    esi
c00151de:	5f                   	pop    edi
c00151df:	e9 d8 7d ff ff       	jmp    c000cfbc <panic(char const*)>
c00151e4:	83 e9 41             	sub    ecx,0x41
c00151e7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00151ee:	b8 01 00 00 00       	mov    eax,0x1
c00151f3:	c7 04 8d 20 c3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3ce0],0x0
c00151fe:	d3 e0                	shl    eax,cl
c0015200:	89 c7                	mov    edi,eax
c0015202:	f7 d0                	not    eax
c0015204:	c1 ff 1f             	sar    edi,0x1f
c0015207:	21 05 00 c3 03 c0    	and    DWORD PTR ds:0xc003c300,eax
c001520d:	89 fe                	mov    esi,edi
c001520f:	f7 d6                	not    esi
c0015211:	21 35 04 c3 03 c0    	and    DWORD PTR ds:0xc003c304,esi
c0015217:	5e                   	pop    esi
c0015218:	5f                   	pop    edi
c0015219:	c3                   	ret    

c001521a <LogicalDisk::read(unsigned long long, int, void*)>:
c001521a:	57                   	push   edi
c001521b:	56                   	push   esi
c001521c:	53                   	push   ebx
c001521d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015221:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015225:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001522d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015233:	77 41                	ja     c0015276 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015235:	99                   	cdq    
c0015236:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001523c:	01 c8                	add    eax,ecx
c001523e:	11 da                	adc    edx,ebx
c0015240:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015246:	19 d7                	sbb    edi,edx
c0015248:	72 33                	jb     c001527d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001524a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015250:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015256:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001525a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001525e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015264:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001526a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001526e:	5b                   	pop    ebx
c001526f:	5e                   	pop    esi
c0015270:	5f                   	pop    edi
c0015271:	e9 9a 09 00 00       	jmp    c0015c10 <VCache::read(unsigned long long, int, void*)>
c0015276:	b8 05 00 00 00       	mov    eax,0x5
c001527b:	eb 05                	jmp    c0015282 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001527d:	b8 07 00 00 00       	mov    eax,0x7
c0015282:	5b                   	pop    ebx
c0015283:	5e                   	pop    esi
c0015284:	5f                   	pop    edi
c0015285:	c3                   	ret    

c0015286 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015286:	57                   	push   edi
c0015287:	56                   	push   esi
c0015288:	53                   	push   ebx
c0015289:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001528d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015291:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015299:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001529f:	77 41                	ja     c00152e2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00152a1:	99                   	cdq    
c00152a2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00152a8:	01 c8                	add    eax,ecx
c00152aa:	11 da                	adc    edx,ebx
c00152ac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00152b2:	19 d7                	sbb    edi,edx
c00152b4:	72 33                	jb     c00152e9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00152b6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00152bc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00152c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00152c6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00152ca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00152d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00152d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152da:	5b                   	pop    ebx
c00152db:	5e                   	pop    esi
c00152dc:	5f                   	pop    edi
c00152dd:	e9 4a 08 00 00       	jmp    c0015b2c <VCache::write(unsigned long long, int, void*)>
c00152e2:	b8 05 00 00 00       	mov    eax,0x5
c00152e7:	eb 05                	jmp    c00152ee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00152e9:	b8 07 00 00 00       	mov    eax,0x7
c00152ee:	5b                   	pop    ebx
c00152ef:	5e                   	pop    esi
c00152f0:	5f                   	pop    edi
c00152f1:	c3                   	ret    

c00152f2 <Mouse::Mouse(char const*)>:
c00152f2:	83 ec 0c             	sub    esp,0xc
c00152f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152f9:	83 ec 08             	sub    esp,0x8
c00152fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015300:	50                   	push   eax
c0015301:	e8 42 e6 ff ff       	call   c0013948 <Device::Device(char const*)>
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	ba 04 9f 03 c0       	mov    edx,0xc0039f04
c001530e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015312:	89 10                	mov    DWORD PTR [eax],edx
c0015314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015318:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015322:	90                   	nop
c0015323:	83 c4 0c             	add    esp,0xc
c0015326:	c3                   	ret    
c0015327:	90                   	nop

c0015328 <Mouse::~Mouse()>:
c0015328:	83 ec 0c             	sub    esp,0xc
c001532b:	ba 04 9f 03 c0       	mov    edx,0xc0039f04
c0015330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015334:	89 10                	mov    DWORD PTR [eax],edx
c0015336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	50                   	push   eax
c001533e:	e8 b7 e2 ff ff       	call   c00135fa <Device::~Device()>
c0015343:	83 c4 10             	add    esp,0x10
c0015346:	90                   	nop
c0015347:	83 c4 0c             	add    esp,0xc
c001534a:	c3                   	ret    
c001534b:	90                   	nop

c001534c <Mouse::~Mouse()>:
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	83 ec 0c             	sub    esp,0xc
c0015352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015356:	e8 cd ff ff ff       	call   c0015328 <Mouse::~Mouse()>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	83 ec 08             	sub    esp,0x8
c0015361:	68 58 01 00 00       	push   0x158
c0015366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001536a:	e8 ee d0 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	83 c4 0c             	add    esp,0xc
c0015375:	c3                   	ret    

c0015376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015376:	55                   	push   ebp
c0015377:	57                   	push   edi
c0015378:	56                   	push   esi
c0015379:	53                   	push   ebx
c001537a:	81 ec 28 01 00 00    	sub    esp,0x128
c0015380:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015387:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001538e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015395:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001539c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00153a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00153ab:	e8 8a e6 ff ff       	call   c0013a3a <Device::getName()>
c00153b0:	5a                   	pop    edx
c00153b1:	59                   	pop    ecx
c00153b2:	50                   	push   eax
c00153b3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00153b7:	55                   	push   ebp
c00153b8:	e8 37 b4 fe ff       	call   c00007f4 <strcpy>
c00153bd:	5b                   	pop    ebx
c00153be:	58                   	pop    eax
c00153bf:	68 28 9f 03 c0       	push   0xc0039f28
c00153c4:	55                   	push   ebp
c00153c5:	e8 77 b5 fe ff       	call   c0000941 <strcat>
c00153ca:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00153d1:	e8 78 d0 ff ff       	call   c001244e <operator new(unsigned long)>
c00153d6:	83 c4 0c             	add    esp,0xc
c00153d9:	89 c3                	mov    ebx,eax
c00153db:	57                   	push   edi
c00153dc:	56                   	push   esi
c00153dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153e5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00153ec:	55                   	push   ebp
c00153ed:	50                   	push   eax
c00153ee:	e8 e3 fb ff ff       	call   c0014fd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00153f3:	83 c4 14             	add    esp,0x14
c00153f6:	53                   	push   ebx
c00153f7:	e8 90 fc ff ff       	call   c001508c <LogicalDisk::assignDriveLetter()>
c00153fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ff:	e8 3e fd ff ff       	call   c0015142 <LogicalDisk::mount()>
c0015404:	58                   	pop    eax
c0015405:	5a                   	pop    edx
c0015406:	53                   	push   ebx
c0015407:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001540e:	e8 45 e3 ff ff       	call   c0013758 <Device::addChild(Device*)>
c0015413:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015419:	5b                   	pop    ebx
c001541a:	5e                   	pop    esi
c001541b:	5f                   	pop    edi
c001541c:	5d                   	pop    ebp
c001541d:	c3                   	ret    

c001541e <createPartitionsForDisk(PhysicalDisk*)>:
c001541e:	55                   	push   ebp
c001541f:	57                   	push   edi
c0015420:	56                   	push   esi
c0015421:	53                   	push   ebx
c0015422:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015428:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001542f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015435:	3d 00 02 00 00       	cmp    eax,0x200
c001543a:	74 27                	je     c0015463 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001543c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015442:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015448:	83 ec 10             	sub    esp,0x10
c001544b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001544f:	99                   	cdq    
c0015450:	c1 e6 0a             	shl    esi,0xa
c0015453:	52                   	push   edx
c0015454:	89 fd                	mov    ebp,edi
c0015456:	50                   	push   eax
c0015457:	55                   	push   ebp
c0015458:	56                   	push   esi
c0015459:	e8 5e 92 00 00       	call   c001e6bc <__udivdi3>
c001545e:	e9 b1 00 00 00       	jmp    c0015514 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015463:	83 ec 0c             	sub    esp,0xc
c0015466:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015468:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001546c:	56                   	push   esi
c001546d:	6a 01                	push   0x1
c001546f:	6a 00                	push   0x0
c0015471:	6a 00                	push   0x0
c0015473:	53                   	push   ebx
c0015474:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015477:	83 c4 20             	add    esp,0x20
c001547a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015482:	75 0a                	jne    c001548e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015484:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001548c:	74 2c                	je     c00154ba <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001548e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015494:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001549a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154a0:	83 ec 10             	sub    esp,0x10
c00154a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00154a7:	89 f7                	mov    edi,esi
c00154a9:	c1 e0 0a             	shl    eax,0xa
c00154ac:	c1 ff 1f             	sar    edi,0x1f
c00154af:	57                   	push   edi
c00154b0:	56                   	push   esi
c00154b1:	52                   	push   edx
c00154b2:	50                   	push   eax
c00154b3:	e8 04 92 00 00       	call   c001e6bc <__udivdi3>
c00154b8:	eb 5a                	jmp    c0015514 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00154ba:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00154c1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00154c8:	83 e1 7f             	and    ecx,0x7f
c00154cb:	83 e0 7f             	and    eax,0x7f
c00154ce:	01 c1                	add    ecx,eax
c00154d0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00154d7:	83 e0 7f             	and    eax,0x7f
c00154da:	01 c1                	add    ecx,eax
c00154dc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00154e3:	83 e0 7f             	and    eax,0x7f
c00154e6:	00 c1                	add    cl,al
c00154e8:	74 41                	je     c001552b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00154ea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154f0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154fc:	83 ec 10             	sub    esp,0x10
c00154ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015503:	89 f7                	mov    edi,esi
c0015505:	c1 e0 0a             	shl    eax,0xa
c0015508:	c1 ff 1f             	sar    edi,0x1f
c001550b:	57                   	push   edi
c001550c:	56                   	push   esi
c001550d:	52                   	push   edx
c001550e:	50                   	push   eax
c001550f:	e8 a8 91 00 00       	call   c001e6bc <__udivdi3>
c0015514:	83 c4 14             	add    esp,0x14
c0015517:	52                   	push   edx
c0015518:	50                   	push   eax
c0015519:	6a 00                	push   0x0
c001551b:	6a 00                	push   0x0
c001551d:	53                   	push   ebx
c001551e:	e8 53 fe ff ff       	call   c0015376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015523:	83 c4 20             	add    esp,0x20
c0015526:	e9 79 01 00 00       	jmp    c00156a4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001552b:	89 f0                	mov    eax,esi
c001552d:	31 f6                	xor    esi,esi
c001552f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015536:	75 02                	jne    c001553a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015538:	89 f1                	mov    ecx,esi
c001553a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015541:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015548:	c1 e2 08             	shl    edx,0x8
c001554b:	c1 e7 10             	shl    edi,0x10
c001554e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015556:	09 fa                	or     edx,edi
c0015558:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015560:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015567:	83 c0 10             	add    eax,0x10
c001556a:	09 fa                	or     edx,edi
c001556c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015573:	c1 e7 18             	shl    edi,0x18
c0015576:	09 fa                	or     edx,edi
c0015578:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001557f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015583:	c1 e7 10             	shl    edi,0x10
c0015586:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001558d:	c1 e2 08             	shl    edx,0x8
c0015590:	09 fa                	or     edx,edi
c0015592:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015599:	09 fa                	or     edx,edi
c001559b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00155a2:	c1 e7 18             	shl    edi,0x18
c00155a5:	09 fa                	or     edx,edi
c00155a7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00155ab:	46                   	inc    esi
c00155ac:	83 fe 04             	cmp    esi,0x4
c00155af:	0f 85 7a ff ff ff    	jne    c001552f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00155b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155b9:	83 f0 01             	xor    eax,0x1
c00155bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00155c0:	75 57                	jne    c0015619 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155c6:	83 f0 01             	xor    eax,0x1
c00155c9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00155cd:	75 4a                	jne    c0015619 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00155d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00155db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00155e3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00155e9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00155ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00155f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00155f9:	89 f7                	mov    edi,esi
c00155fb:	c1 e0 0a             	shl    eax,0xa
c00155fe:	c1 ff 1f             	sar    edi,0x1f
c0015601:	57                   	push   edi
c0015602:	56                   	push   esi
c0015603:	52                   	push   edx
c0015604:	50                   	push   eax
c0015605:	e8 b2 90 00 00       	call   c001e6bc <__udivdi3>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015611:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015615:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015619:	84 c9                	test   cl,cl
c001561b:	74 53                	je     c0015670 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001561d:	0f b6 c9             	movzx  ecx,cl
c0015620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015628:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001562c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015630:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015634:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015638:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001563c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015644:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001564c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015650:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015654:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015658:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001565c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015660:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015664:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015668:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001566c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015670:	31 ed                	xor    ebp,ebp
c0015672:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015676:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001567a:	89 f8                	mov    eax,edi
c001567c:	09 f0                	or     eax,esi
c001567e:	74 1e                	je     c001569e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015680:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015684:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015688:	89 d1                	mov    ecx,edx
c001568a:	09 c1                	or     ecx,eax
c001568c:	74 10                	je     c001569e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001568e:	83 ec 0c             	sub    esp,0xc
c0015691:	57                   	push   edi
c0015692:	56                   	push   esi
c0015693:	52                   	push   edx
c0015694:	50                   	push   eax
c0015695:	53                   	push   ebx
c0015696:	e8 db fc ff ff       	call   c0015376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001569b:	83 c4 20             	add    esp,0x20
c001569e:	45                   	inc    ebp
c001569f:	83 fd 04             	cmp    ebp,0x4
c00156a2:	75 ce                	jne    c0015672 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00156a4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00156aa:	5b                   	pop    ebx
c00156ab:	5e                   	pop    esi
c00156ac:	5f                   	pop    edi
c00156ad:	5d                   	pop    ebp
c00156ae:	c3                   	ret    
c00156af:	90                   	nop

c00156b0 <Timer::Timer(char const*)>:
c00156b0:	83 ec 0c             	sub    esp,0xc
c00156b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b7:	83 ec 08             	sub    esp,0x8
c00156ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156be:	50                   	push   eax
c00156bf:	e8 84 e2 ff ff       	call   c0013948 <Device::Device(char const*)>
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	ba 3c 9f 03 c0       	mov    edx,0xc0039f3c
c00156cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d0:	89 10                	mov    DWORD PTR [eax],edx
c00156d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00156e0:	90                   	nop
c00156e1:	83 c4 0c             	add    esp,0xc
c00156e4:	c3                   	ret    
c00156e5:	90                   	nop

c00156e6 <Timer::~Timer()>:
c00156e6:	83 ec 0c             	sub    esp,0xc
c00156e9:	ba 3c 9f 03 c0       	mov    edx,0xc0039f3c
c00156ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f2:	89 10                	mov    DWORD PTR [eax],edx
c00156f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f8:	83 ec 0c             	sub    esp,0xc
c00156fb:	50                   	push   eax
c00156fc:	e8 f9 de ff ff       	call   c00135fa <Device::~Device()>
c0015701:	83 c4 10             	add    esp,0x10
c0015704:	90                   	nop
c0015705:	83 c4 0c             	add    esp,0xc
c0015708:	c3                   	ret    
c0015709:	90                   	nop

c001570a <Timer::~Timer()>:
c001570a:	83 ec 0c             	sub    esp,0xc
c001570d:	83 ec 0c             	sub    esp,0xc
c0015710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015714:	e8 cd ff ff ff       	call   c00156e6 <Timer::~Timer()>
c0015719:	83 c4 10             	add    esp,0x10
c001571c:	83 ec 08             	sub    esp,0x8
c001571f:	68 5c 01 00 00       	push   0x15c
c0015724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015728:	e8 30 cd ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	83 c4 0c             	add    esp,0xc
c0015733:	c3                   	ret    

c0015734 <Timer::read()>:
c0015734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015738:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001573e:	c3                   	ret    

c001573f <timerHandler(unsigned long long)>:
c001573f:	55                   	push   ebp
c0015740:	57                   	push   edi
c0015741:	56                   	push   esi
c0015742:	53                   	push   ebx
c0015743:	83 ec 0c             	sub    esp,0xc
c0015746:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001574a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001574e:	01 35 90 c3 03 c0    	add    DWORD PTR ds:0xc003c390,esi
c0015754:	11 3d 94 c3 03 c0    	adc    DWORD PTR ds:0xc003c394,edi
c001575a:	80 3d cd b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9cd,0x0
c0015761:	0f 84 07 01 00 00    	je     c001586e <timerHandler(unsigned long long)+0x12f>
c0015767:	e8 fb 8b ff ff       	call   c000e367 <lockStuff()>
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	68 04 bc 03 c0       	push   0xc003bc04
c0015774:	e8 a3 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015779:	c7 04 24 04 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc04
c0015780:	89 c3                	mov    ebx,eax
c0015782:	e8 cb 93 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015787:	83 c4 10             	add    esp,0x10
c001578a:	84 c0                	test   al,al
c001578c:	74 60                	je     c00157ee <timerHandler(unsigned long long)+0xaf>
c001578e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015794:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015797:	85 c0                	test   eax,eax
c0015799:	0f 85 91 00 00 00    	jne    c0015830 <timerHandler(unsigned long long)+0xf1>
c001579f:	e9 be 00 00 00       	jmp    c0015862 <timerHandler(unsigned long long)+0x123>
c00157a4:	83 ec 0c             	sub    esp,0xc
c00157a7:	55                   	push   ebp
c00157a8:	e8 b7 93 ff ff       	call   c000eb64 <unblockTask(ThreadControlBlock*)>
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	39 eb                	cmp    ebx,ebp
c00157b2:	75 12                	jne    c00157c6 <timerHandler(unsigned long long)+0x87>
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	68 04 bc 03 c0       	push   0xc003bc04
c00157bc:	e8 5b 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157c1:	89 c3                	mov    ebx,eax
c00157c3:	83 c4 10             	add    esp,0x10
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	68 04 bc 03 c0       	push   0xc003bc04
c00157ce:	e8 7f 93 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	84 c0                	test   al,al
c00157d8:	75 b4                	jne    c001578e <timerHandler(unsigned long long)+0x4f>
c00157da:	83 ec 0c             	sub    esp,0xc
c00157dd:	68 04 bc 03 c0       	push   0xc003bc04
c00157e2:	e8 35 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	39 d8                	cmp    eax,ebx
c00157ec:	74 a0                	je     c001578e <timerHandler(unsigned long long)+0x4f>
c00157ee:	83 ec 0c             	sub    esp,0xc
c00157f1:	68 04 bc 03 c0       	push   0xc003bc04
c00157f6:	e8 21 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157fb:	c7 04 24 04 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc04
c0015802:	89 c5                	mov    ebp,eax
c0015804:	e8 65 93 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015809:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015812:	39 15 90 c3 03 c0    	cmp    DWORD PTR ds:0xc003c390,edx
c0015818:	a1 94 c3 03 c0       	mov    eax,ds:0xc003c394
c001581d:	19 c8                	sbb    eax,ecx
c001581f:	73 83                	jae    c00157a4 <timerHandler(unsigned long long)+0x65>
c0015821:	50                   	push   eax
c0015822:	50                   	push   eax
c0015823:	55                   	push   ebp
c0015824:	68 04 bc 03 c0       	push   0xc003bc04
c0015829:	e8 50 92 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001582e:	eb 93                	jmp    c00157c3 <timerHandler(unsigned long long)+0x84>
c0015830:	80 3d cc b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9cc,0x0
c0015837:	74 29                	je     c0015862 <timerHandler(unsigned long long)+0x123>
c0015839:	39 c6                	cmp    esi,eax
c001583b:	bb 00 00 00 00       	mov    ebx,0x0
c0015840:	19 df                	sbb    edi,ebx
c0015842:	72 19                	jb     c001585d <timerHandler(unsigned long long)+0x11e>
c0015844:	e8 f7 8a ff ff       	call   c000e340 <lockScheduler()>
c0015849:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001584e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015851:	e8 1e 8e ff ff       	call   c000e674 <schedule()>
c0015856:	e8 e7 8a ff ff       	call   c000e342 <unlockScheduler()>
c001585b:	eb 05                	jmp    c0015862 <timerHandler(unsigned long long)+0x123>
c001585d:	29 f0                	sub    eax,esi
c001585f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015862:	83 c4 0c             	add    esp,0xc
c0015865:	5b                   	pop    ebx
c0015866:	5e                   	pop    esi
c0015867:	5f                   	pop    edi
c0015868:	5d                   	pop    ebp
c0015869:	e9 8b 8e ff ff       	jmp    c000e6f9 <unlockStuff()>
c001586e:	83 c4 0c             	add    esp,0xc
c0015871:	5b                   	pop    ebx
c0015872:	5e                   	pop    esi
c0015873:	5f                   	pop    edi
c0015874:	5d                   	pop    ebp
c0015875:	c3                   	ret    

c0015876 <setupTimer(int)>:
c0015876:	57                   	push   edi
c0015877:	56                   	push   esi
c0015878:	53                   	push   ebx
c0015879:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001587d:	e8 cf 18 00 00       	call   c0017151 <getCPUNumber()>
c0015882:	85 c0                	test   eax,eax
c0015884:	74 32                	je     c00158b8 <setupTimer(int)+0x42>
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	68 60 01 00 00       	push   0x160
c001588e:	e8 bb cb ff ff       	call   c001244e <operator new(unsigned long)>
c0015893:	89 04 24             	mov    DWORD PTR [esp],eax
c0015896:	89 c3                	mov    ebx,eax
c0015898:	e8 bf 88 00 00       	call   c001e15c <APICTimer::APICTimer()>
c001589d:	6a 00                	push   0x0
c001589f:	6a 00                	push   0x0
c00158a1:	56                   	push   esi
c00158a2:	53                   	push   ebx
c00158a3:	e8 bc 87 00 00       	call   c001e064 <APICTimer::open(int, int, void*)>
c00158a8:	83 c4 20             	add    esp,0x20
c00158ab:	e8 a4 18 00 00       	call   c0017154 <thisCPU()>
c00158b0:	56                   	push   esi
c00158b1:	56                   	push   esi
c00158b2:	53                   	push   ebx
c00158b3:	e9 96 00 00 00       	jmp    c001594e <setupTimer(int)+0xd8>
c00158b8:	e8 97 18 00 00       	call   c0017154 <thisCPU()>
c00158bd:	83 ec 0c             	sub    esp,0xc
c00158c0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00158c6:	e8 6f e1 ff ff       	call   c0013a3a <Device::getName()>
c00158cb:	83 c4 10             	add    esp,0x10
c00158ce:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00158d1:	0f 85 87 00 00 00    	jne    c001595e <setupTimer(int)+0xe8>
c00158d7:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00158dc:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00158e3:	74 79                	je     c001595e <setupTimer(int)+0xe8>
c00158e5:	83 ec 0c             	sub    esp,0xc
c00158e8:	68 5c 01 00 00       	push   0x15c
c00158ed:	e8 5c cb ff ff       	call   c001244e <operator new(unsigned long)>
c00158f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00158f5:	89 c3                	mov    ebx,eax
c00158f7:	e8 b0 89 00 00       	call   c001e2ac <PIT::PIT()>
c00158fc:	59                   	pop    ecx
c00158fd:	5f                   	pop    edi
c00158fe:	53                   	push   ebx
c00158ff:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0015905:	e8 4e de ff ff       	call   c0013758 <Device::addChild(Device*)>
c001590a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001590c:	6a 00                	push   0x0
c001590e:	6a 00                	push   0x0
c0015910:	56                   	push   esi
c0015911:	53                   	push   ebx
c0015912:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015915:	83 c4 14             	add    esp,0x14
c0015918:	68 60 01 00 00       	push   0x160
c001591d:	e8 2c cb ff ff       	call   c001244e <operator new(unsigned long)>
c0015922:	89 04 24             	mov    DWORD PTR [esp],eax
c0015925:	89 c7                	mov    edi,eax
c0015927:	e8 30 88 00 00       	call   c001e15c <APICTimer::APICTimer()>
c001592c:	6a 00                	push   0x0
c001592e:	6a 00                	push   0x0
c0015930:	56                   	push   esi
c0015931:	57                   	push   edi
c0015932:	e8 2d 87 00 00       	call   c001e064 <APICTimer::open(int, int, void*)>
c0015937:	83 c4 20             	add    esp,0x20
c001593a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001593c:	6a 00                	push   0x0
c001593e:	6a 00                	push   0x0
c0015940:	6a 00                	push   0x0
c0015942:	53                   	push   ebx
c0015943:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015946:	e8 09 18 00 00       	call   c0017154 <thisCPU()>
c001594b:	5a                   	pop    edx
c001594c:	59                   	pop    ecx
c001594d:	57                   	push   edi
c001594e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015954:	e8 ff dd ff ff       	call   c0013758 <Device::addChild(Device*)>
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	eb 33                	jmp    c0015991 <setupTimer(int)+0x11b>
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	68 5c 01 00 00       	push   0x15c
c0015966:	e8 e3 ca ff ff       	call   c001244e <operator new(unsigned long)>
c001596b:	89 04 24             	mov    DWORD PTR [esp],eax
c001596e:	89 c3                	mov    ebx,eax
c0015970:	e8 37 89 00 00       	call   c001e2ac <PIT::PIT()>
c0015975:	58                   	pop    eax
c0015976:	5a                   	pop    edx
c0015977:	53                   	push   ebx
c0015978:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001597e:	e8 d5 dd ff ff       	call   c0013758 <Device::addChild(Device*)>
c0015983:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015985:	6a 00                	push   0x0
c0015987:	6a 00                	push   0x0
c0015989:	56                   	push   esi
c001598a:	53                   	push   ebx
c001598b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001598e:	83 c4 20             	add    esp,0x20
c0015991:	89 d8                	mov    eax,ebx
c0015993:	5b                   	pop    ebx
c0015994:	5e                   	pop    esi
c0015995:	5f                   	pop    edi
c0015996:	c3                   	ret    
c0015997:	90                   	nop

c0015998 <VCache::VCache(PhysicalDisk*)>:
c0015998:	53                   	push   ebx
c0015999:	83 ec 08             	sub    esp,0x8
c001599c:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c00159a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a5:	89 10                	mov    DWORD PTR [eax],edx
c00159a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00159b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00159bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00159c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00159cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00159da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00159e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00159ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	6a 10                	push   0x10
c00159f9:	e8 50 ca ff ff       	call   c001244e <operator new(unsigned long)>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	89 c3                	mov    ebx,eax
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	53                   	push   ebx
c0015a07:	e8 4c 8a ff ff       	call   c000e458 <Mutex::Mutex()>
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a13:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a25:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015a2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015a3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a41:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015a47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a51:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015a54:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a5b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015a69:	c1 e0 06             	shl    eax,0x6
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	50                   	push   eax
c0015a70:	e8 24 7a ff ff       	call   c000d499 <malloc>
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	89 c2                	mov    edx,eax
c0015a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015a81:	90                   	nop
c0015a82:	83 c4 08             	add    esp,0x8
c0015a85:	5b                   	pop    ebx
c0015a86:	c3                   	ret    
c0015a87:	90                   	nop

c0015a88 <VCache::writeWriteBuffer()>:
c0015a88:	53                   	push   ebx
c0015a89:	83 ec 14             	sub    esp,0x14
c0015a8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015a90:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015a93:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a98:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a9b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015aa1:	50                   	push   eax
c0015aa2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015aa5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015aac:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015ab3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015ab7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015abe:	83 c4 28             	add    esp,0x28
c0015ac1:	5b                   	pop    ebx
c0015ac2:	c3                   	ret    
c0015ac3:	90                   	nop

c0015ac4 <VCache::~VCache()>:
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c0015acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad0:	89 10                	mov    DWORD PTR [eax],edx
c0015ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015ad9:	84 c0                	test   al,al
c0015adb:	74 0f                	je     c0015aec <VCache::~VCache()+0x28>
c0015add:	83 ec 0c             	sub    esp,0xc
c0015ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ae4:	e8 9f ff ff ff       	call   c0015a88 <VCache::writeWriteBuffer()>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015af3:	83 ec 0c             	sub    esp,0xc
c0015af6:	50                   	push   eax
c0015af7:	e8 ad 79 ff ff       	call   c000d4a9 <free>
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	90                   	nop
c0015b00:	83 c4 0c             	add    esp,0xc
c0015b03:	c3                   	ret    

c0015b04 <VCache::~VCache()>:
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	83 ec 0c             	sub    esp,0xc
c0015b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b0e:	e8 b1 ff ff ff       	call   c0015ac4 <VCache::~VCache()>
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	83 ec 08             	sub    esp,0x8
c0015b19:	6a 30                	push   0x30
c0015b1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b1f:	e8 39 c9 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	83 c4 0c             	add    esp,0xc
c0015b2a:	c3                   	ret    
c0015b2b:	90                   	nop

c0015b2c <VCache::write(unsigned long long, int, void*)>:
c0015b2c:	55                   	push   ebp
c0015b2d:	57                   	push   edi
c0015b2e:	56                   	push   esi
c0015b2f:	53                   	push   ebx
c0015b30:	83 ec 28             	sub    esp,0x28
c0015b33:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015b37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b3b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b3f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015b43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b46:	e8 e1 8e ff ff       	call   c000ea2c <Semaphore::acquire()>
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b52:	74 66                	je     c0015bba <VCache::write(unsigned long long, int, void*)+0x8e>
c0015b54:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b57:	99                   	cdq    
c0015b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b5c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015b5f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015b62:	89 c1                	mov    ecx,eax
c0015b64:	89 d0                	mov    eax,edx
c0015b66:	31 f1                	xor    ecx,esi
c0015b68:	31 f8                	xor    eax,edi
c0015b6a:	89 ca                	mov    edx,ecx
c0015b6c:	09 c2                	or     edx,eax
c0015b6e:	75 3e                	jne    c0015bae <VCache::write(unsigned long long, int, void*)+0x82>
c0015b70:	83 fd 01             	cmp    ebp,0x1
c0015b73:	75 39                	jne    c0015bae <VCache::write(unsigned long long, int, void*)+0x82>
c0015b75:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015b7e:	51                   	push   ecx
c0015b7f:	50                   	push   eax
c0015b80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b84:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015b88:	0f af c8             	imul   ecx,eax
c0015b8b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015b8e:	51                   	push   ecx
c0015b8f:	e8 cd aa fe ff       	call   c0000661 <memcpy>
c0015b94:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	40                   	inc    eax
c0015b9b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015b9e:	83 f8 40             	cmp    eax,0x40
c0015ba1:	75 57                	jne    c0015bfa <VCache::write(unsigned long long, int, void*)+0xce>
c0015ba3:	83 ec 0c             	sub    esp,0xc
c0015ba6:	53                   	push   ebx
c0015ba7:	e8 dc fe ff ff       	call   c0015a88 <VCache::writeWriteBuffer()>
c0015bac:	eb 34                	jmp    c0015be2 <VCache::write(unsigned long long, int, void*)+0xb6>
c0015bae:	83 ec 0c             	sub    esp,0xc
c0015bb1:	53                   	push   ebx
c0015bb2:	e8 d1 fe ff ff       	call   c0015a88 <VCache::writeWriteBuffer()>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bbd:	83 fd 3f             	cmp    ebp,0x3f
c0015bc0:	7f 25                	jg     c0015be7 <VCache::write(unsigned long long, int, void*)+0xbb>
c0015bc2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015bc5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015bc8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015bcb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015bcf:	52                   	push   edx
c0015bd0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015bd6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015bda:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015bdd:	e8 7f aa fe ff       	call   c0000661 <memcpy>
c0015be2:	83 c4 10             	add    esp,0x10
c0015be5:	eb 13                	jmp    c0015bfa <VCache::write(unsigned long long, int, void*)+0xce>
c0015be7:	83 ec 0c             	sub    esp,0xc
c0015bea:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015bf0:	55                   	push   ebp
c0015bf1:	57                   	push   edi
c0015bf2:	56                   	push   esi
c0015bf3:	50                   	push   eax
c0015bf4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015bf7:	83 c4 20             	add    esp,0x20
c0015bfa:	83 ec 0c             	sub    esp,0xc
c0015bfd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c00:	e8 c3 93 ff ff       	call   c000efc8 <Semaphore::release()>
c0015c05:	83 c4 2c             	add    esp,0x2c
c0015c08:	31 c0                	xor    eax,eax
c0015c0a:	5b                   	pop    ebx
c0015c0b:	5e                   	pop    esi
c0015c0c:	5f                   	pop    edi
c0015c0d:	5d                   	pop    ebp
c0015c0e:	c3                   	ret    
c0015c0f:	90                   	nop

c0015c10 <VCache::read(unsigned long long, int, void*)>:
c0015c10:	57                   	push   edi
c0015c11:	56                   	push   esi
c0015c12:	53                   	push   ebx
c0015c13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c1f:	83 ec 0c             	sub    esp,0xc
c0015c22:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c25:	e8 02 8e ff ff       	call   c000ea2c <Semaphore::acquire()>
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015c31:	74 0c                	je     c0015c3f <VCache::read(unsigned long long, int, void*)+0x2f>
c0015c33:	83 ec 0c             	sub    esp,0xc
c0015c36:	53                   	push   ebx
c0015c37:	e8 4c fe ff ff       	call   c0015a88 <VCache::writeWriteBuffer()>
c0015c3c:	83 c4 10             	add    esp,0x10
c0015c3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c42:	83 ec 0c             	sub    esp,0xc
c0015c45:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4f:	57                   	push   edi
c0015c50:	56                   	push   esi
c0015c51:	50                   	push   eax
c0015c52:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c55:	83 c4 14             	add    esp,0x14
c0015c58:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c5b:	e8 68 93 ff ff       	call   c000efc8 <Semaphore::release()>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	31 c0                	xor    eax,eax
c0015c65:	5b                   	pop    ebx
c0015c66:	5e                   	pop    esi
c0015c67:	5f                   	pop    edi
c0015c68:	c3                   	ret    
c0015c69:	90                   	nop

c0015c6a <Video::putrect(int, int, int, int, unsigned int)>:
c0015c6a:	55                   	push   ebp
c0015c6b:	57                   	push   edi
c0015c6c:	56                   	push   esi
c0015c6d:	53                   	push   ebx
c0015c6e:	83 ec 1c             	sub    esp,0x1c
c0015c71:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015c75:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015c79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c7d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015c81:	01 e8                	add    eax,ebp
c0015c83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c8b:	01 df                	add    edi,ebx
c0015c8d:	39 fb                	cmp    ebx,edi
c0015c8f:	7d 1b                	jge    c0015cac <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015c91:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015c95:	7d 12                	jge    c0015ca9 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015c97:	8b 16                	mov    edx,DWORD PTR [esi]
c0015c99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015c9d:	53                   	push   ebx
c0015c9e:	55                   	push   ebp
c0015c9f:	45                   	inc    ebp
c0015ca0:	56                   	push   esi
c0015ca1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	eb e8                	jmp    c0015c91 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015ca9:	43                   	inc    ebx
c0015caa:	eb e1                	jmp    c0015c8d <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015cac:	83 c4 1c             	add    esp,0x1c
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	5f                   	pop    edi
c0015cb2:	5d                   	pop    ebp
c0015cb3:	c3                   	ret    

c0015cb4 <Video::blit(unsigned int*, int, int, int, int)>:
c0015cb4:	55                   	push   ebp
c0015cb5:	57                   	push   edi
c0015cb6:	56                   	push   esi
c0015cb7:	53                   	push   ebx
c0015cb8:	83 ec 1c             	sub    esp,0x1c
c0015cbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015cbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cc3:	85 c0                	test   eax,eax
c0015cc5:	79 02                	jns    c0015cc9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015cc7:	31 c0                	xor    eax,eax
c0015cc9:	c1 e0 02             	shl    eax,0x2
c0015ccc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015cd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cd8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015cdc:	39 d8                	cmp    eax,ebx
c0015cde:	7e 49                	jle    c0015d29 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015ce0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015ce6:	7c 41                	jl     c0015d29 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015ce8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015cec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015cf0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015cf4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015cf8:	39 f9                	cmp    ecx,edi
c0015cfa:	7e 22                	jle    c0015d1e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015cfc:	83 c5 04             	add    ebp,0x4
c0015cff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d05:	7c 14                	jl     c0015d1b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015d07:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d09:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015d0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d14:	56                   	push   esi
c0015d15:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	47                   	inc    edi
c0015d1c:	eb d2                	jmp    c0015cf0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d22:	43                   	inc    ebx
c0015d23:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015d27:	eb ab                	jmp    c0015cd4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015d29:	83 c4 1c             	add    esp,0x1c
c0015d2c:	5b                   	pop    ebx
c0015d2d:	5e                   	pop    esi
c0015d2e:	5f                   	pop    edi
c0015d2f:	5d                   	pop    ebp
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <Video::clearScreen(unsigned int)>:
c0015d32:	57                   	push   edi
c0015d33:	56                   	push   esi
c0015d34:	53                   	push   ebx
c0015d35:	31 db                	xor    ebx,ebx
c0015d37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d3b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d41:	7e 1f                	jle    c0015d62 <Video::clearScreen(unsigned int)+0x30>
c0015d43:	31 ff                	xor    edi,edi
c0015d45:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d4b:	7e 12                	jle    c0015d5f <Video::clearScreen(unsigned int)+0x2d>
c0015d4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d53:	53                   	push   ebx
c0015d54:	57                   	push   edi
c0015d55:	47                   	inc    edi
c0015d56:	56                   	push   esi
c0015d57:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015d5a:	83 c4 10             	add    esp,0x10
c0015d5d:	eb e6                	jmp    c0015d45 <Video::clearScreen(unsigned int)+0x13>
c0015d5f:	43                   	inc    ebx
c0015d60:	eb d9                	jmp    c0015d3b <Video::clearScreen(unsigned int)+0x9>
c0015d62:	5b                   	pop    ebx
c0015d63:	5e                   	pop    esi
c0015d64:	5f                   	pop    edi
c0015d65:	c3                   	ret    

c0015d66 <Video::putpixel(int, int, unsigned int)>:
c0015d66:	c7 44 24 04 74 9f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039f74
c0015d6e:	e9 2b 71 ff ff       	jmp    c000ce9e <kprintf(char const*, ...)>
c0015d73:	90                   	nop

c0015d74 <Video::Video(char const*)>:
c0015d74:	83 ec 0c             	sub    esp,0xc
c0015d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7b:	83 ec 08             	sub    esp,0x8
c0015d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d82:	50                   	push   eax
c0015d83:	e8 c0 db ff ff       	call   c0013948 <Device::Device(char const*)>
c0015d88:	83 c4 10             	add    esp,0x10
c0015d8b:	ba 8c 9f 03 c0       	mov    edx,0xc0039f8c
c0015d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d94:	89 10                	mov    DWORD PTR [eax],edx
c0015d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015da4:	90                   	nop
c0015da5:	83 c4 0c             	add    esp,0xc
c0015da8:	c3                   	ret    
c0015da9:	90                   	nop

c0015daa <Video::~Video()>:
c0015daa:	83 ec 0c             	sub    esp,0xc
c0015dad:	ba 8c 9f 03 c0       	mov    edx,0xc0039f8c
c0015db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db6:	89 10                	mov    DWORD PTR [eax],edx
c0015db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbc:	83 ec 0c             	sub    esp,0xc
c0015dbf:	50                   	push   eax
c0015dc0:	e8 35 d8 ff ff       	call   c00135fa <Device::~Device()>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	90                   	nop
c0015dc9:	83 c4 0c             	add    esp,0xc
c0015dcc:	c3                   	ret    
c0015dcd:	90                   	nop

c0015dce <Video::~Video()>:
c0015dce:	83 ec 0c             	sub    esp,0xc
c0015dd1:	83 ec 0c             	sub    esp,0xc
c0015dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dd8:	e8 cd ff ff ff       	call   c0015daa <Video::~Video()>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	68 64 01 00 00       	push   0x164
c0015de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dec:	e8 6c c6 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	83 c4 0c             	add    esp,0xc
c0015df7:	c3                   	ret    

c0015df8 <Video::isMonochrome()>:
c0015df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dfc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015e02:	c3                   	ret    
c0015e03:	90                   	nop

c0015e04 <Video::getWidth()>:
c0015e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e0e:	c3                   	ret    
c0015e0f:	90                   	nop

c0015e10 <Video::getHeight()>:
c0015e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e14:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e1a:	c3                   	ret    
c0015e1b:	90                   	nop

c0015e1c <Video::drawCursor(int, int, unsigned char*, int)>:
c0015e1c:	55                   	push   ebp
c0015e1d:	57                   	push   edi
c0015e1e:	56                   	push   esi
c0015e1f:	53                   	push   ebx
c0015e20:	83 ec 2c             	sub    esp,0x2c
c0015e23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e27:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015e2b:	83 f8 01             	cmp    eax,0x1
c0015e2e:	19 c9                	sbb    ecx,ecx
c0015e30:	31 db                	xor    ebx,ebx
c0015e32:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e36:	89 cd                	mov    ebp,ecx
c0015e38:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015e40:	f7 d5                	not    ebp
c0015e42:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015e48:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015e4c:	01 d8                	add    eax,ebx
c0015e4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e52:	56                   	push   esi
c0015e53:	e8 b8 ff ff ff       	call   c0015e10 <Video::getHeight()>
c0015e58:	59                   	pop    ecx
c0015e59:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015e5d:	7e 70                	jle    c0015ecf <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015e5f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e63:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e67:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015e6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e6e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e72:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015e79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e7d:	89 f8                	mov    eax,edi
c0015e7f:	83 c0 20             	add    eax,0x20
c0015e82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e86:	56                   	push   esi
c0015e87:	e8 78 ff ff ff       	call   c0015e04 <Video::getWidth()>
c0015e8c:	5a                   	pop    edx
c0015e8d:	39 c7                	cmp    edi,eax
c0015e8f:	7d 34                	jge    c0015ec5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015e91:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015e96:	74 05                	je     c0015e9d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015e98:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e9a:	55                   	push   ebp
c0015e9b:	eb 0d                	jmp    c0015eaa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015e9d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015ea2:	74 12                	je     c0015eb6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015ea4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ea6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015eaa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015eae:	57                   	push   edi
c0015eaf:	56                   	push   esi
c0015eb0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015eba:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015ebe:	47                   	inc    edi
c0015ebf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015ec3:	75 c1                	jne    c0015e86 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015ec5:	43                   	inc    ebx
c0015ec6:	83 fb 20             	cmp    ebx,0x20
c0015ec9:	0f 85 79 ff ff ff    	jne    c0015e48 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015ecf:	83 c4 2c             	add    esp,0x2c
c0015ed2:	5b                   	pop    ebx
c0015ed3:	5e                   	pop    esi
c0015ed4:	5f                   	pop    edi
c0015ed5:	5d                   	pop    ebp
c0015ed6:	c3                   	ret    
c0015ed7:	90                   	nop

c0015ed8 <ACPI::close(int, int, void*)>:
c0015ed8:	83 ec 1c             	sub    esp,0x1c
c0015edb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015ee3:	74 0a                	je     c0015eef <ACPI::close(int, int, void*)+0x17>
c0015ee5:	b8 00 00 00 00       	mov    eax,0x0
c0015eea:	e9 9a 00 00 00       	jmp    c0015f89 <ACPI::close(int, int, void*)+0xb1>
c0015eef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ef4:	75 37                	jne    c0015f2d <ACPI::close(int, int, void*)+0x55>
c0015ef6:	83 ec 0c             	sub    esp,0xc
c0015ef9:	68 c4 9f 03 c0       	push   0xc0039fc4
c0015efe:	e8 9b 6f ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	a1 a8 c3 03 c0       	mov    eax,ds:0xc003c3a8
c0015f0b:	85 c0                	test   eax,eax
c0015f0d:	74 07                	je     c0015f16 <ACPI::close(int, int, void*)+0x3e>
c0015f0f:	a1 a8 c3 03 c0       	mov    eax,ds:0xc003c3a8
c0015f14:	ff d0                	call   eax
c0015f16:	83 ec 0c             	sub    esp,0xc
c0015f19:	68 78 a0 03 c0       	push   0xc003a078
c0015f1e:	e8 99 70 ff ff       	call   c000cfbc <panic(char const*)>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f2b:	eb 5c                	jmp    c0015f89 <ACPI::close(int, int, void*)+0xb1>
c0015f2d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015f32:	75 50                	jne    c0015f84 <ACPI::close(int, int, void*)+0xac>
c0015f34:	a1 a4 c3 03 c0       	mov    eax,ds:0xc003c3a4
c0015f39:	85 c0                	test   eax,eax
c0015f3b:	74 07                	je     c0015f44 <ACPI::close(int, int, void*)+0x6c>
c0015f3d:	a1 a4 c3 03 c0       	mov    eax,ds:0xc003c3a4
c0015f42:	ff d0                	call   eax
c0015f44:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015f49:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015f4e:	83 e0 02             	and    eax,0x2
c0015f51:	74 1c                	je     c0015f6f <ACPI::close(int, int, void*)+0x97>
c0015f53:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015f5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f5e:	89 c2                	mov    edx,eax
c0015f60:	ec                   	in     al,dx
c0015f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015f65:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015f6d:	eb da                	jmp    c0015f49 <ACPI::close(int, int, void*)+0x71>
c0015f6f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015f76:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015f7b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015f7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f83:	ee                   	out    dx,al
c0015f84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f89:	83 c4 1c             	add    esp,0x1c
c0015f8c:	c3                   	ret    

c0015f8d <findRSDP()>:
c0015f8d:	83 ec 1c             	sub    esp,0x1c
c0015f90:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0015f95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f9b:	83 e0 04             	and    eax,0x4
c0015f9e:	84 c0                	test   al,al
c0015fa0:	75 07                	jne    c0015fa9 <findRSDP()+0x1c>
c0015fa2:	b8 00 00 00 00       	mov    eax,0x0
c0015fa7:	eb 6a                	jmp    c0016013 <findRSDP()+0x86>
c0015fa9:	a1 90 bb 03 c0       	mov    eax,ds:0xc003bb90
c0015fae:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015fb3:	7f 1b                	jg     c0015fd0 <findRSDP()+0x43>
c0015fb5:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0015fba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015fc0:	83 e2 fb             	and    edx,0xfffffffb
c0015fc3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015fc9:	b8 00 00 00 00       	mov    eax,0x0
c0015fce:	eb 43                	jmp    c0016013 <findRSDP()+0x86>
c0015fd0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015fd8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015fe0:	77 2c                	ja     c001600e <findRSDP()+0x81>
c0015fe2:	83 ec 04             	sub    esp,0x4
c0015fe5:	6a 08                	push   0x8
c0015fe7:	68 d1 9f 03 c0       	push   0xc0039fd1
c0015fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ff0:	e8 a7 a5 fe ff       	call   c000059c <memcmp>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	85 c0                	test   eax,eax
c0015ffa:	0f 94 c0             	sete   al
c0015ffd:	84 c0                	test   al,al
c0015fff:	74 06                	je     c0016007 <findRSDP()+0x7a>
c0016001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016005:	eb 0c                	jmp    c0016013 <findRSDP()+0x86>
c0016007:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001600c:	eb ca                	jmp    c0015fd8 <findRSDP()+0x4b>
c001600e:	b8 00 00 00 00       	mov    eax,0x0
c0016013:	83 c4 1c             	add    esp,0x1c
c0016016:	c3                   	ret    

c0016017 <loadACPITables(unsigned char*)>:
c0016017:	56                   	push   esi
c0016018:	53                   	push   ebx
c0016019:	83 ec 44             	sub    esp,0x44
c001601c:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016021:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016027:	83 e0 04             	and    eax,0x4
c001602a:	84 c0                	test   al,al
c001602c:	0f 84 05 02 00 00    	je     c0016237 <loadACPITables(unsigned char*)+0x220>
c0016032:	a0 c0 c5 03 c0       	mov    al,ds:0xc003c5c0
c0016037:	84 c0                	test   al,al
c0016039:	74 75                	je     c00160b0 <loadACPITables(unsigned char*)+0x99>
c001603b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001603f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016043:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001604a:	83 e8 24             	sub    eax,0x24
c001604d:	c1 e8 03             	shr    eax,0x3
c0016050:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016054:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001605c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016060:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016064:	0f 8d b2 00 00 00    	jge    c001611c <loadACPITables(unsigned char*)+0x105>
c001606a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001606e:	83 c0 24             	add    eax,0x24
c0016071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016075:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016079:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001607d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016081:	c1 e0 03             	shl    eax,0x3
c0016084:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016088:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001608c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001608f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016091:	89 c1                	mov    ecx,eax
c0016093:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c0016098:	8d 50 01             	lea    edx,[eax+0x1]
c001609b:	89 15 ac c3 03 c0    	mov    DWORD PTR ds:0xc003c3ac,edx
c00160a1:	89 ca                	mov    edx,ecx
c00160a3:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c00160aa:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00160ae:	eb ac                	jmp    c001605c <loadACPITables(unsigned char*)+0x45>
c00160b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160bf:	83 e8 24             	sub    eax,0x24
c00160c2:	c1 e8 02             	shr    eax,0x2
c00160c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160c9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00160d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160d5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00160d9:	7d 41                	jge    c001611c <loadACPITables(unsigned char*)+0x105>
c00160db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160df:	83 c0 24             	add    eax,0x24
c00160e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160f2:	c1 e0 02             	shl    eax,0x2
c00160f5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00160f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00160ff:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c0016104:	8d 50 01             	lea    edx,[eax+0x1]
c0016107:	89 15 ac c3 03 c0    	mov    DWORD PTR ds:0xc003c3ac,edx
c001610d:	89 ca                	mov    edx,ecx
c001610f:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c0016116:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001611a:	eb b5                	jmp    c00160d1 <loadACPITables(unsigned char*)+0xba>
c001611c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016124:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c0016129:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001612d:	0f 8d 05 01 00 00    	jge    c0016238 <loadACPITables(unsigned char*)+0x221>
c0016133:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016137:	8b 04 c5 c4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c3c]
c001613e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016146:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001614a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001614e:	25 ff 0f 00 00       	and    eax,0xfff
c0016153:	89 c6                	mov    esi,eax
c0016155:	e8 f3 b2 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c001615a:	89 c3                	mov    ebx,eax
c001615c:	83 ec 0c             	sub    esp,0xc
c001615f:	6a 01                	push   0x1
c0016161:	e8 57 b1 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001616d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	6a 01                	push   0x1
c0016178:	6a 01                	push   0x1
c001617a:	50                   	push   eax
c001617b:	52                   	push   edx
c001617c:	53                   	push   ebx
c001617d:	e8 5e ba ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016182:	83 c4 20             	add    esp,0x20
c0016185:	09 f0                	or     eax,esi
c0016187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001618b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001618f:	c1 e0 03             	shl    eax,0x3
c0016192:	05 c0 c3 03 c0       	add    eax,0xc003c3c0
c0016197:	83 ec 04             	sub    esp,0x4
c001619a:	6a 04                	push   0x4
c001619c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161a0:	50                   	push   eax
c00161a1:	e8 bb a4 fe ff       	call   c0000661 <memcpy>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00161b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161b8:	05 00 10 00 00       	add    eax,0x1000
c00161bd:	c1 e8 0c             	shr    eax,0xc
c00161c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00161cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161cf:	25 ff 0f 00 00       	and    eax,0xfff
c00161d4:	89 c6                	mov    esi,eax
c00161d6:	e8 72 b2 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c00161db:	89 c3                	mov    ebx,eax
c00161dd:	83 ec 0c             	sub    esp,0xc
c00161e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161e4:	e8 d4 b0 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c00161e9:	83 c4 10             	add    esp,0x10
c00161ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00161f6:	83 ec 0c             	sub    esp,0xc
c00161f9:	6a 01                	push   0x1
c00161fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161ff:	50                   	push   eax
c0016200:	52                   	push   edx
c0016201:	53                   	push   ebx
c0016202:	e8 d9 b9 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016207:	83 c4 20             	add    esp,0x20
c001620a:	09 f0                	or     eax,esi
c001620c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016210:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	50                   	push   eax
c0016217:	e8 d7 b3 ff ff       	call   c00115f3 <Virt::freeKernelVirtualPages(unsigned long)>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016223:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016227:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c001622e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016232:	e9 ed fe ff ff       	jmp    c0016124 <loadACPITables(unsigned char*)+0x10d>
c0016237:	90                   	nop
c0016238:	83 c4 44             	add    esp,0x44
c001623b:	5b                   	pop    ebx
c001623c:	5e                   	pop    esi
c001623d:	c3                   	ret    

c001623e <findRSDT(unsigned char*)>:
c001623e:	56                   	push   esi
c001623f:	53                   	push   ebx
c0016240:	83 ec 44             	sub    esp,0x44
c0016243:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016248:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001624e:	83 e0 04             	and    eax,0x4
c0016251:	84 c0                	test   al,al
c0016253:	75 0a                	jne    c001625f <findRSDT(unsigned char*)+0x21>
c0016255:	b8 00 00 00 00       	mov    eax,0x0
c001625a:	e9 f7 00 00 00       	jmp    c0016356 <findRSDT(unsigned char*)+0x118>
c001625f:	83 ec 04             	sub    esp,0x4
c0016262:	6a 24                	push   0x24
c0016264:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016268:	8d 44 24 18          	lea    eax,[esp+0x18]
c001626c:	50                   	push   eax
c001626d:	e8 ef a3 fe ff       	call   c0000661 <memcpy>
c0016272:	83 c4 10             	add    esp,0x10
c0016275:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016279:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001627d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016285:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016289:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001628d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016295:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016299:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001629d:	25 ff 0f 00 00       	and    eax,0xfff
c00162a2:	89 c6                	mov    esi,eax
c00162a4:	e8 a4 b1 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c00162a9:	89 c3                	mov    ebx,eax
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	6a 02                	push   0x2
c00162b0:	e8 08 b0 ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00162bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00162c2:	83 ec 0c             	sub    esp,0xc
c00162c5:	6a 01                	push   0x1
c00162c7:	6a 02                	push   0x2
c00162c9:	50                   	push   eax
c00162ca:	52                   	push   edx
c00162cb:	53                   	push   ebx
c00162cc:	e8 0f b9 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00162d1:	83 c4 20             	add    esp,0x20
c00162d4:	09 f0                	or     eax,esi
c00162d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162de:	25 ff 0f 00 00       	and    eax,0xfff
c00162e3:	89 c6                	mov    esi,eax
c00162e5:	e8 63 b1 ff ff       	call   c001144d <Virt::getAKernelVAS()>
c00162ea:	89 c3                	mov    ebx,eax
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	6a 02                	push   0x2
c00162f1:	e8 c7 af ff ff       	call   c00112bd <Virt::allocateKernelVirtualPages(int)>
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00162fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016303:	83 ec 0c             	sub    esp,0xc
c0016306:	6a 01                	push   0x1
c0016308:	6a 02                	push   0x2
c001630a:	50                   	push   eax
c001630b:	52                   	push   edx
c001630c:	53                   	push   ebx
c001630d:	e8 ce b8 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016312:	83 c4 20             	add    esp,0x20
c0016315:	09 f0                	or     eax,esi
c0016317:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001631b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016320:	75 11                	jne    c0016333 <findRSDT(unsigned char*)+0xf5>
c0016322:	c6 05 c0 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c5c0,0x0
c0016329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001632d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016331:	eb 1f                	jmp    c0016352 <findRSDT(unsigned char*)+0x114>
c0016333:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016338:	75 11                	jne    c001634b <findRSDT(unsigned char*)+0x10d>
c001633a:	c6 05 c0 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c5c0,0x1
c0016341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016345:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016349:	eb 07                	jmp    c0016352 <findRSDT(unsigned char*)+0x114>
c001634b:	b8 00 00 00 00       	mov    eax,0x0
c0016350:	eb 04                	jmp    c0016356 <findRSDT(unsigned char*)+0x118>
c0016352:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016356:	83 c4 44             	add    esp,0x44
c0016359:	5b                   	pop    ebx
c001635a:	5e                   	pop    esi
c001635b:	c3                   	ret    

c001635c <findDataTable(unsigned char*, char*)>:
c001635c:	83 ec 1c             	sub    esp,0x1c
c001635f:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016364:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001636a:	83 e0 04             	and    eax,0x4
c001636d:	84 c0                	test   al,al
c001636f:	75 07                	jne    c0016378 <findDataTable(unsigned char*, char*)+0x1c>
c0016371:	b8 00 00 00 00       	mov    eax,0x0
c0016376:	eb 7c                	jmp    c00163f4 <findDataTable(unsigned char*, char*)+0x98>
c0016378:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016380:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c0016385:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016389:	7d 3a                	jge    c00163c5 <findDataTable(unsigned char*, char*)+0x69>
c001638b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001638f:	c1 e0 03             	shl    eax,0x3
c0016392:	05 c0 c3 03 c0       	add    eax,0xc003c3c0
c0016397:	83 ec 04             	sub    esp,0x4
c001639a:	6a 04                	push   0x4
c001639c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163a0:	50                   	push   eax
c00163a1:	e8 f6 a1 fe ff       	call   c000059c <memcmp>
c00163a6:	83 c4 10             	add    esp,0x10
c00163a9:	85 c0                	test   eax,eax
c00163ab:	0f 94 c0             	sete   al
c00163ae:	84 c0                	test   al,al
c00163b0:	74 0d                	je     c00163bf <findDataTable(unsigned char*, char*)+0x63>
c00163b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163b6:	8b 04 c5 c4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c3c]
c00163bd:	eb 35                	jmp    c00163f4 <findDataTable(unsigned char*, char*)+0x98>
c00163bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163c3:	eb bb                	jmp    c0016380 <findDataTable(unsigned char*, char*)+0x24>
c00163c5:	a0 c0 c5 03 c0       	mov    al,ds:0xc003c5c0
c00163ca:	84 c0                	test   al,al
c00163cc:	74 07                	je     c00163d5 <findDataTable(unsigned char*, char*)+0x79>
c00163ce:	b8 58 00 00 00       	mov    eax,0x58
c00163d3:	eb 05                	jmp    c00163da <findDataTable(unsigned char*, char*)+0x7e>
c00163d5:	b8 52 00 00 00       	mov    eax,0x52
c00163da:	83 ec 04             	sub    esp,0x4
c00163dd:	50                   	push   eax
c00163de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163e2:	68 9c a0 03 c0       	push   0xc003a09c
c00163e7:	e8 b2 6a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	b8 00 00 00 00       	mov    eax,0x0
c00163f4:	83 c4 1c             	add    esp,0x1c
c00163f7:	c3                   	ret    

c00163f8 <scanMADT()>:
c00163f8:	83 ec 2c             	sub    esp,0x2c
c00163fb:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016400:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016406:	83 e0 04             	and    eax,0x4
c0016409:	84 c0                	test   al,al
c001640b:	0f 84 73 03 00 00    	je     c0016784 <scanMADT()+0x38c>
c0016411:	e8 77 fb ff ff       	call   c0015f8d <findRSDP()>
c0016416:	a3 cc c5 03 c0       	mov    ds:0xc003c5cc,eax
c001641b:	a1 cc c5 03 c0       	mov    eax,ds:0xc003c5cc
c0016420:	85 c0                	test   eax,eax
c0016422:	75 19                	jne    c001643d <scanMADT()+0x45>
c0016424:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016429:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001642f:	83 e2 fb             	and    edx,0xfffffffb
c0016432:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016438:	e9 4b 03 00 00       	jmp    c0016788 <scanMADT()+0x390>
c001643d:	a1 cc c5 03 c0       	mov    eax,ds:0xc003c5cc
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	50                   	push   eax
c0016446:	e8 f3 fd ff ff       	call   c001623e <findRSDT(unsigned char*)>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	a3 c8 c5 03 c0       	mov    ds:0xc003c5c8,eax
c0016453:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c0016458:	85 c0                	test   eax,eax
c001645a:	75 19                	jne    c0016475 <scanMADT()+0x7d>
c001645c:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016461:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016467:	83 e2 fb             	and    edx,0xfffffffb
c001646a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016470:	e9 13 03 00 00       	jmp    c0016788 <scanMADT()+0x390>
c0016475:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	50                   	push   eax
c001647e:	e8 94 fb ff ff       	call   c0016017 <loadACPITables(unsigned char*)>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c001648b:	83 ec 08             	sub    esp,0x8
c001648e:	68 da 9f 03 c0       	push   0xc0039fda
c0016493:	50                   	push   eax
c0016494:	e8 c3 fe ff ff       	call   c001635c <findDataTable(unsigned char*, char*)>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164a0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00164a5:	75 19                	jne    c00164c0 <scanMADT()+0xc8>
c00164a7:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00164ac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164b2:	83 e2 fe             	and    edx,0xfffffffe
c00164b5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00164bb:	e9 c8 02 00 00       	jmp    c0016788 <scanMADT()+0x390>
c00164c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00164c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00164cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00164d3:	0f 87 af 02 00 00    	ja     c0016788 <scanMADT()+0x390>
c00164d9:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00164e1:	0f 87 a1 02 00 00    	ja     c0016788 <scanMADT()+0x390>
c00164e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164f3:	8d 50 01             	lea    edx,[eax+0x1]
c00164f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016502:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001650a:	8d 50 01             	lea    edx,[eax+0x1]
c001650d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016511:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016515:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016519:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001651d:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016522:	0f 86 5f 02 00 00    	jbe    c0016787 <scanMADT()+0x38f>
c0016528:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001652d:	75 57                	jne    c0016586 <scanMADT()+0x18e>
c001652f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016533:	8d 50 01             	lea    edx,[eax+0x1]
c0016536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001653a:	8a 15 00 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c700
c0016540:	0f b6 d2             	movzx  edx,dl
c0016543:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016547:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001654b:	88 82 40 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38c0],al
c0016551:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016555:	8d 50 01             	lea    edx,[eax+0x1]
c0016558:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001655c:	8a 15 00 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c700
c0016562:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016565:	88 0d 00 c7 03 c0    	mov    BYTE PTR ds:0xc003c700,cl
c001656b:	0f b6 d2             	movzx  edx,dl
c001656e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016572:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016576:	88 82 20 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38e0],al
c001657c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016581:	e9 ea 01 00 00       	jmp    c0016770 <scanMADT()+0x378>
c0016586:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c001658b:	0f 85 14 01 00 00    	jne    c00166a5 <scanMADT()+0x2ad>
c0016591:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016595:	8d 50 01             	lea    edx,[eax+0x1]
c0016598:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001659c:	8a 15 d0 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c5d0
c00165a2:	0f b6 d2             	movzx  edx,dl
c00165a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165a9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165ad:	88 82 e0 c5 03 c0    	mov    BYTE PTR [edx-0x3ffc3a20],al
c00165b3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00165b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165bf:	01 d0                	add    eax,edx
c00165c1:	83 c0 2c             	add    eax,0x2c
c00165c4:	8a 00                	mov    al,BYTE PTR [eax]
c00165c6:	0f b6 d0             	movzx  edx,al
c00165c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165cd:	8d 48 01             	lea    ecx,[eax+0x1]
c00165d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165d4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00165d8:	0f b6 c0             	movzx  eax,al
c00165db:	c1 e0 08             	shl    eax,0x8
c00165de:	89 d1                	mov    ecx,edx
c00165e0:	09 c1                	or     ecx,eax
c00165e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165e6:	8d 50 02             	lea    edx,[eax+0x2]
c00165e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165f1:	0f b6 c0             	movzx  eax,al
c00165f4:	c1 e0 10             	shl    eax,0x10
c00165f7:	09 c1                	or     ecx,eax
c00165f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165fd:	8d 50 03             	lea    edx,[eax+0x3]
c0016600:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016604:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016608:	0f b6 c0             	movzx  eax,al
c001660b:	c1 e0 18             	shl    eax,0x18
c001660e:	09 c1                	or     ecx,eax
c0016610:	89 ca                	mov    edx,ecx
c0016612:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c0016617:	0f b6 c0             	movzx  eax,al
c001661a:	89 14 85 00 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3a00],edx
c0016621:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001662a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001662e:	01 d0                	add    eax,edx
c0016630:	83 c0 2c             	add    eax,0x2c
c0016633:	8a 00                	mov    al,BYTE PTR [eax]
c0016635:	0f b6 d0             	movzx  edx,al
c0016638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001663c:	8d 48 01             	lea    ecx,[eax+0x1]
c001663f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016643:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016647:	0f b6 c0             	movzx  eax,al
c001664a:	c1 e0 08             	shl    eax,0x8
c001664d:	89 d1                	mov    ecx,edx
c001664f:	09 c1                	or     ecx,eax
c0016651:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016655:	8d 50 02             	lea    edx,[eax+0x2]
c0016658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001665c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016660:	0f b6 c0             	movzx  eax,al
c0016663:	c1 e0 10             	shl    eax,0x10
c0016666:	09 c1                	or     ecx,eax
c0016668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001666c:	8d 50 03             	lea    edx,[eax+0x3]
c001666f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016673:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016677:	0f b6 c0             	movzx  eax,al
c001667a:	c1 e0 18             	shl    eax,0x18
c001667d:	09 c1                	or     ecx,eax
c001667f:	89 ca                	mov    edx,ecx
c0016681:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c0016686:	0f b6 c0             	movzx  eax,al
c0016689:	89 14 85 80 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3980],edx
c0016690:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016695:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c001669a:	40                   	inc    eax
c001669b:	a2 d0 c5 03 c0       	mov    ds:0xc003c5d0,al
c00166a0:	e9 cb 00 00 00       	jmp    c0016770 <scanMADT()+0x378>
c00166a5:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00166aa:	0f 85 a6 00 00 00    	jne    c0016756 <scanMADT()+0x35e>
c00166b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b4:	8d 50 01             	lea    edx,[eax+0x1]
c00166b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166bf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166c3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00166c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166cb:	8d 50 01             	lea    edx,[eax+0x1]
c00166ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166da:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00166de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166e6:	01 d0                	add    eax,edx
c00166e8:	83 c0 2c             	add    eax,0x2c
c00166eb:	8a 00                	mov    al,BYTE PTR [eax]
c00166ed:	0f b6 d0             	movzx  edx,al
c00166f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166f4:	8d 48 01             	lea    ecx,[eax+0x1]
c00166f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00166ff:	0f b6 c0             	movzx  eax,al
c0016702:	c1 e0 08             	shl    eax,0x8
c0016705:	89 d1                	mov    ecx,edx
c0016707:	09 c1                	or     ecx,eax
c0016709:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001670d:	8d 50 02             	lea    edx,[eax+0x2]
c0016710:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016714:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016718:	0f b6 c0             	movzx  eax,al
c001671b:	c1 e0 10             	shl    eax,0x10
c001671e:	09 c1                	or     ecx,eax
c0016720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016724:	8d 50 03             	lea    edx,[eax+0x3]
c0016727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001672b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001672f:	0f b6 c0             	movzx  eax,al
c0016732:	c1 e0 18             	shl    eax,0x18
c0016735:	09 c8                	or     eax,ecx
c0016737:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001673b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016740:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016745:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001674a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001674e:	88 90 20 b1 03 c0    	mov    BYTE PTR [eax-0x3ffc4ee0],dl
c0016754:	eb 1a                	jmp    c0016770 <scanMADT()+0x378>
c0016756:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001675b:	75 07                	jne    c0016764 <scanMADT()+0x36c>
c001675d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016762:	eb 0c                	jmp    c0016770 <scanMADT()+0x378>
c0016764:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016769:	75 05                	jne    c0016770 <scanMADT()+0x378>
c001676b:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016770:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016775:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016779:	01 d0                	add    eax,edx
c001677b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001677f:	e9 44 fd ff ff       	jmp    c00164c8 <scanMADT()+0xd0>
c0016784:	90                   	nop
c0016785:	eb 01                	jmp    c0016788 <scanMADT()+0x390>
c0016787:	90                   	nop
c0016788:	83 c4 2c             	add    esp,0x2c
c001678b:	c3                   	ret    

c001678c <ACPI::ACPI()>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016793:	83 ec 08             	sub    esp,0x8
c0016796:	68 df 9f 03 c0       	push   0xc0039fdf
c001679b:	50                   	push   eax
c001679c:	e8 a7 d1 ff ff       	call   c0013948 <Device::Device(char const*)>
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	ba 04 a1 03 c0       	mov    edx,0xc003a104
c00167a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ad:	89 10                	mov    DWORD PTR [eax],edx
c00167af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00167c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167cc:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00167d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167da:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00167e1:	e8 12 fc ff ff       	call   c00163f8 <scanMADT()>
c00167e6:	90                   	nop
c00167e7:	83 c4 0c             	add    esp,0xc
c00167ea:	c3                   	ret    
c00167eb:	90                   	nop

c00167ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00167ec:	83 ec 2c             	sub    esp,0x2c
c00167ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00167f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00167f7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00167fb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00167ff:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016804:	88 d0                	mov    al,dl
c0016806:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001680a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001680f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001681b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016821:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016825:	0f 8d 97 00 00 00    	jge    c00168c2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001682b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001682f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016833:	83 c2 2a             	add    edx,0x2a
c0016836:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001683a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001683f:	75 78                	jne    c00168b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016849:	83 c2 2a             	add    edx,0x2a
c001684c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016850:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016854:	75 63                	jne    c00168b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016856:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001685b:	74 3a                	je     c0016897 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001685d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016861:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016865:	83 c2 2a             	add    edx,0x2a
c0016868:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001686c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016870:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016873:	39 c2                	cmp    edx,eax
c0016875:	74 10                	je     c0016887 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016877:	83 ec 0c             	sub    esp,0xc
c001687a:	68 cc a0 03 c0       	push   0xc003a0cc
c001687f:	e8 38 67 ff ff       	call   c000cfbc <panic(char const*)>
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	68 e4 9f 03 c0       	push   0xc0039fe4
c001688f:	e8 28 67 ff ff       	call   c000cfbc <panic(char const*)>
c0016894:	83 c4 10             	add    esp,0x10
c0016897:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001689b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001689f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168a3:	83 c2 2a             	add    edx,0x2a
c00168a6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00168aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00168ac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00168af:	89 01                	mov    DWORD PTR [ecx],eax
c00168b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00168b4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00168b9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00168bd:	e9 55 ff ff ff       	jmp    c0016817 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00168c2:	90                   	nop
c00168c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168c7:	83 c4 2c             	add    esp,0x2c
c00168ca:	c2 04 00             	ret    0x4
c00168cd:	90                   	nop

c00168ce <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00168ce:	83 ec 1c             	sub    esp,0x1c
c00168d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168d5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00168d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168dd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00168e2:	88 c8                	mov    al,cl
c00168e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00168e8:	88 d0                	mov    al,dl
c00168ea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00168ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00168ff:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016903:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016911:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016915:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001691c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016925:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001692b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001692f:	8d 48 01             	lea    ecx,[eax+0x1]
c0016932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016936:	83 c2 2a             	add    edx,0x2a
c0016939:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001693d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016941:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001694e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016952:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016960:	8d 50 01             	lea    edx,[eax+0x1]
c0016963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016967:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001696d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016971:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016977:	3d 00 08 00 00       	cmp    eax,0x800
c001697c:	75 10                	jne    c001698e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	68 f3 9f 03 c0       	push   0xc0039ff3
c0016986:	e8 31 66 ff ff       	call   c000cfbc <panic(char const*)>
c001698b:	83 c4 10             	add    esp,0x10
c001698e:	90                   	nop
c001698f:	83 c4 1c             	add    esp,0x1c
c0016992:	c3                   	ret    
c0016993:	90                   	nop

c0016994 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0016994:	b8 00 00 00 00       	mov    eax,0x0
c0016999:	c3                   	ret    

c001699a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001699a:	83 ec 1c             	sub    esp,0x1c
c001699d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169a1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00169a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00169a8:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00169ad:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00169b2:	83 ec 08             	sub    esp,0x8
c00169b5:	52                   	push   edx
c00169b6:	50                   	push   eax
c00169b7:	e8 9c 4c ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00169c3:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00169c8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00169cd:	83 ec 04             	sub    esp,0x4
c00169d0:	6a 01                	push   0x1
c00169d2:	52                   	push   edx
c00169d3:	50                   	push   eax
c00169d4:	e8 87 4d ff ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c00169d9:	83 c4 10             	add    esp,0x10
c00169dc:	90                   	nop
c00169dd:	83 c4 1c             	add    esp,0x1c
c00169e0:	c3                   	ret    
c00169e1:	90                   	nop

c00169e2 <ACPI::open(int, int, void*)>:
c00169e2:	53                   	push   ebx
c00169e3:	83 ec 18             	sub    esp,0x18
c00169e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ea:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00169f0:	83 f0 01             	xor    eax,0x1
c00169f3:	84 c0                	test   al,al
c00169f5:	74 0b                	je     c0016a02 <ACPI::open(int, int, void*)+0x20>
c00169f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fb:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a06:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a0c:	84 c0                	test   al,al
c0016a0e:	74 60                	je     c0016a70 <ACPI::open(int, int, void*)+0x8e>
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	68 58 01 00 00       	push   0x158
c0016a18:	e8 31 ba ff ff       	call   c001244e <operator new(unsigned long)>
c0016a1d:	83 c4 10             	add    esp,0x10
c0016a20:	89 c3                	mov    ebx,eax
c0016a22:	83 ec 0c             	sub    esp,0xc
c0016a25:	53                   	push   ebx
c0016a26:	e8 25 45 00 00       	call   c001af50 <PCI::PCI()>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a36:	83 ec 08             	sub    esp,0x8
c0016a39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a3d:	50                   	push   eax
c0016a3e:	e8 15 cd ff ff       	call   c0013758 <Device::addChild(Device*)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a4c:	83 c0 08             	add    eax,0x8
c0016a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a51:	6a 00                	push   0x0
c0016a53:	6a 00                	push   0x0
c0016a55:	6a 00                	push   0x0
c0016a57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a5b:	ff d0                	call   eax
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	68 10 a0 03 c0       	push   0xc003a010
c0016a68:	e8 31 64 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	83 ec 0c             	sub    esp,0xc
c0016a73:	68 1b a0 03 c0       	push   0xc003a01b
c0016a78:	e8 87 52 ff ff       	call   c000bd04 <loadKernelSymbolTable(char const*)>
c0016a7d:	83 c4 10             	add    esp,0x10
c0016a80:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	68 39 a0 03 c0       	push   0xc003a039
c0016a8e:	e8 eb 5b ff ff       	call   c000c67e <loadDLL(char const*)>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	83 ec 08             	sub    esp,0x8
c0016a99:	53                   	push   ebx
c0016a9a:	50                   	push   eax
c0016a9b:	e8 a7 5c ff ff       	call   c000c747 <executeDLL(unsigned long, void*)>
c0016aa0:	83 c4 10             	add    esp,0x10
c0016aa3:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016aa8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016aae:	83 e0 04             	and    eax,0x4
c0016ab1:	84 c0                	test   al,al
c0016ab3:	74 23                	je     c0016ad8 <ACPI::open(int, int, void*)+0xf6>
c0016ab5:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0016abb:	83 ec 0c             	sub    esp,0xc
c0016abe:	68 56 a0 03 c0       	push   0xc003a056
c0016ac3:	e8 b6 5b ff ff       	call   c000c67e <loadDLL(char const*)>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	83 ec 08             	sub    esp,0x8
c0016ace:	53                   	push   ebx
c0016acf:	50                   	push   eax
c0016ad0:	e8 72 5c ff ff       	call   c000c747 <executeDLL(unsigned long, void*)>
c0016ad5:	83 c4 10             	add    esp,0x10
c0016ad8:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c0016add:	83 ec 08             	sub    esp,0x8
c0016ae0:	68 73 a0 03 c0       	push   0xc003a073
c0016ae5:	50                   	push   eax
c0016ae6:	e8 71 f8 ff ff       	call   c001635c <findDataTable(unsigned char*, char*)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016af2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016af7:	74 13                	je     c0016b0c <ACPI::open(int, int, void*)+0x12a>
c0016af9:	83 ec 08             	sub    esp,0x8
c0016afc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b04:	e8 91 fe ff ff       	call   c001699a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	b8 00 00 00 00       	mov    eax,0x0
c0016b11:	83 c4 18             	add    esp,0x18
c0016b14:	5b                   	pop    ebx
c0016b15:	c3                   	ret    

c0016b16 <ACPI::sleep()>:
c0016b16:	83 ec 0c             	sub    esp,0xc
c0016b19:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c0016b1e:	85 c0                	test   eax,eax
c0016b20:	74 07                	je     c0016b29 <ACPI::sleep()+0x13>
c0016b22:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c0016b27:	ff d0                	call   eax
c0016b29:	90                   	nop
c0016b2a:	83 c4 0c             	add    esp,0xc
c0016b2d:	c3                   	ret    

c0016b2e <CPU::close(int, int, void*)>:
c0016b2e:	31 c0                	xor    eax,eax
c0016b30:	c3                   	ret    

c0016b31 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016b31:	55                   	push   ebp
c0016b32:	57                   	push   edi
c0016b33:	56                   	push   esi
c0016b34:	53                   	push   ebx
c0016b35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016b39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b3d:	89 ce                	mov    esi,ecx
c0016b3f:	89 d5                	mov    ebp,edx
c0016b41:	80 f9 04             	cmp    cl,0x4
c0016b44:	75 28                	jne    c0016b6e <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016b46:	8d 42 f9             	lea    eax,[edx-0x7]
c0016b49:	3c 03                	cmp    al,0x3
c0016b4b:	0f 86 63 01 00 00    	jbe    c0016cb4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b51:	80 fa 03             	cmp    dl,0x3
c0016b54:	0f 84 5a 01 00 00    	je     c0016cb4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b5a:	8d 7a f2             	lea    edi,[edx-0xe]
c0016b5d:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016b62:	89 fb                	mov    ebx,edi
c0016b64:	80 fb 01             	cmp    bl,0x1
c0016b67:	77 4e                	ja     c0016bb7 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016b69:	e9 52 01 00 00       	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b6e:	80 f9 05             	cmp    cl,0x5
c0016b71:	75 4d                	jne    c0016bc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016b73:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016b78:	80 fa 03             	cmp    dl,0x3
c0016b7b:	0f 86 3f 01 00 00    	jbe    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b81:	8d 7a fa             	lea    edi,[edx-0x6]
c0016b84:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016b89:	89 fb                	mov    ebx,edi
c0016b8b:	80 fb 01             	cmp    bl,0x1
c0016b8e:	0f 86 2c 01 00 00    	jbe    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b94:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016b99:	80 fa 08             	cmp    dl,0x8
c0016b9c:	0f 84 1e 01 00 00    	je     c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ba2:	89 d7                	mov    edi,edx
c0016ba4:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016ba9:	83 e7 fb             	and    edi,0xfffffffb
c0016bac:	89 fb                	mov    ebx,edi
c0016bae:	80 fb 09             	cmp    bl,0x9
c0016bb1:	0f 84 09 01 00 00    	je     c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bb7:	31 c0                	xor    eax,eax
c0016bb9:	89 eb                	mov    ebx,ebp
c0016bbb:	0f b6 fb             	movzx  edi,bl
c0016bbe:	eb 30                	jmp    c0016bf0 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016bc0:	31 c0                	xor    eax,eax
c0016bc2:	80 f9 06             	cmp    cl,0x6
c0016bc5:	75 f2                	jne    c0016bb9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bc7:	80 fa 0a             	cmp    dl,0xa
c0016bca:	77 ed                	ja     c0016bb9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bcc:	bf de 05 00 00       	mov    edi,0x5de
c0016bd1:	0f a3 d7             	bt     edi,edx
c0016bd4:	73 e3                	jae    c0016bb9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bd6:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016bdb:	e9 e0 00 00 00       	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016be0:	39 c7                	cmp    edi,eax
c0016be2:	0f 84 d3 00 00 00    	je     c0016cbb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016be8:	40                   	inc    eax
c0016be9:	3d d0 00 00 00       	cmp    eax,0xd0
c0016bee:	74 09                	je     c0016bf9 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016bf0:	89 f3                	mov    ebx,esi
c0016bf2:	80 fb 0f             	cmp    bl,0xf
c0016bf5:	75 f1                	jne    c0016be8 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016bf7:	eb e7                	jmp    c0016be0 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016bf9:	80 f9 10             	cmp    cl,0x10
c0016bfc:	75 14                	jne    c0016c12 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016bfe:	8d 42 fc             	lea    eax,[edx-0x4]
c0016c01:	83 e0 fb             	and    eax,0xfffffffb
c0016c04:	3c 02                	cmp    al,0x2
c0016c06:	76 34                	jbe    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016c08:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c0d:	80 fa 02             	cmp    dl,0x2
c0016c10:	eb 24                	jmp    c0016c36 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016c12:	80 f9 11             	cmp    cl,0x11
c0016c15:	75 13                	jne    c0016c2a <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016c17:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c1c:	80 fa 03             	cmp    dl,0x3
c0016c1f:	0f 85 9b 00 00 00    	jne    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c25:	e9 91 00 00 00       	jmp    c0016cbb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c2a:	80 f9 12             	cmp    cl,0x12
c0016c2d:	75 14                	jne    c0016c43 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016c2f:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c34:	fe ca                	dec    dl
c0016c36:	0f 85 84 00 00 00    	jne    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c3c:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016c41:	eb 7d                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c43:	80 f9 14             	cmp    cl,0x14
c0016c46:	75 12                	jne    c0016c5a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016c48:	4a                   	dec    edx
c0016c49:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c4e:	80 fa 01             	cmp    dl,0x1
c0016c51:	77 6d                	ja     c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c53:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016c58:	eb 66                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c5a:	80 f9 15             	cmp    cl,0x15
c0016c5d:	75 31                	jne    c0016c90 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016c5f:	b8 80 b3 03 c0       	mov    eax,0xc003b380
c0016c64:	80 fa 01             	cmp    dl,0x1
c0016c67:	74 57                	je     c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c69:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c6e:	80 fa 13             	cmp    dl,0x13
c0016c71:	76 0c                	jbe    c0016c7f <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016c73:	80 fa 30             	cmp    dl,0x30
c0016c76:	75 48                	jne    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c78:	b8 a0 b3 03 c0       	mov    eax,0xc003b3a0
c0016c7d:	eb 41                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c7f:	b9 04 00 09 00       	mov    ecx,0x90004
c0016c84:	0f a3 d1             	bt     ecx,edx
c0016c87:	73 37                	jae    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c89:	b8 90 b3 03 c0       	mov    eax,0xc003b390
c0016c8e:	eb 30                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c90:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c95:	80 f9 16             	cmp    cl,0x16
c0016c98:	75 26                	jne    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c9a:	b8 b0 b3 03 c0       	mov    eax,0xc003b3b0
c0016c9f:	84 d2                	test   dl,dl
c0016ca1:	74 1d                	je     c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca3:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016ca8:	80 fa 30             	cmp    dl,0x30
c0016cab:	75 13                	jne    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cad:	b8 c0 b3 03 c0       	mov    eax,0xc003b3c0
c0016cb2:	eb 0c                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cb4:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016cb9:	eb 05                	jmp    c0016cc0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cbb:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016cc0:	5b                   	pop    ebx
c0016cc1:	5e                   	pop    esi
c0016cc2:	5f                   	pop    edi
c0016cc3:	5d                   	pop    ebp
c0016cc4:	c3                   	ret    

c0016cc5 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016cc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ccd:	80 f9 04             	cmp    cl,0x4
c0016cd0:	75 6b                	jne    c0016d3d <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016cd2:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016cd7:	80 fa 01             	cmp    dl,0x1
c0016cda:	0f 86 92 02 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ce0:	b8 50 b1 03 c0       	mov    eax,0xc003b150
c0016ce5:	80 fa 02             	cmp    dl,0x2
c0016ce8:	0f 84 84 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cee:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016cf3:	80 fa 03             	cmp    dl,0x3
c0016cf6:	0f 84 76 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cfc:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016d01:	80 fa 04             	cmp    dl,0x4
c0016d04:	0f 84 68 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d0a:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d0f:	80 fa 05             	cmp    dl,0x5
c0016d12:	0f 84 5a 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d18:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d1d:	80 fa 07             	cmp    dl,0x7
c0016d20:	0f 84 4c 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d26:	83 ea 08             	sub    edx,0x8
c0016d29:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016d2e:	80 fa 01             	cmp    dl,0x1
c0016d31:	0f 87 3b 02 00 00    	ja     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d37:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016d3c:	c3                   	ret    
c0016d3d:	80 f9 05             	cmp    cl,0x5
c0016d40:	75 45                	jne    c0016d87 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016d42:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016d45:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016d4a:	80 f9 02             	cmp    cl,0x2
c0016d4d:	0f 86 1f 02 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d53:	80 fa 04             	cmp    dl,0x4
c0016d56:	0f 84 f3 01 00 00    	je     c0016f4f <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016d5c:	80 fa 07             	cmp    dl,0x7
c0016d5f:	0f 84 0d 02 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d65:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016d6a:	80 fa 08             	cmp    dl,0x8
c0016d6d:	0f 84 ff 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d73:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016d78:	80 fa 09             	cmp    dl,0x9
c0016d7b:	0f 85 f1 01 00 00    	jne    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d81:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016d86:	c3                   	ret    
c0016d87:	80 f9 06             	cmp    cl,0x6
c0016d8a:	0f 85 85 01 00 00    	jne    c0016f15 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016d90:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016d95:	80 fa 01             	cmp    dl,0x1
c0016d98:	0f 84 d4 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d9e:	8d 42 fb             	lea    eax,[edx-0x5]
c0016da1:	3c 01                	cmp    al,0x1
c0016da3:	0f 86 ac 01 00 00    	jbe    c0016f55 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016da9:	80 fa 03             	cmp    dl,0x3
c0016dac:	0f 84 a3 01 00 00    	je     c0016f55 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016db2:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016db5:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016dba:	80 f9 01             	cmp    cl,0x1
c0016dbd:	0f 86 af 01 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dc3:	80 fa 09             	cmp    dl,0x9
c0016dc6:	0f 84 8f 01 00 00    	je     c0016f5b <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016dcc:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016dcf:	80 f9 01             	cmp    cl,0x1
c0016dd2:	0f 86 9a 01 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dd8:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016ddd:	80 fa 0d             	cmp    dl,0xd
c0016de0:	0f 84 8c 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016de6:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016deb:	80 fa 0e             	cmp    dl,0xe
c0016dee:	0f 84 7e 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016df4:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016df9:	80 fa 0f             	cmp    dl,0xf
c0016dfc:	0f 84 70 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e02:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016e07:	80 fa 15             	cmp    dl,0x15
c0016e0a:	0f 84 62 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e10:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016e13:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016e18:	80 f9 01             	cmp    cl,0x1
c0016e1b:	0f 86 51 01 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e21:	80 fa 1a             	cmp    dl,0x1a
c0016e24:	0f 84 37 01 00 00    	je     c0016f61 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016e2a:	80 fa 1c             	cmp    dl,0x1c
c0016e2d:	0f 84 34 01 00 00    	je     c0016f67 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016e33:	80 fa 1d             	cmp    dl,0x1d
c0016e36:	0f 84 36 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e3c:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e41:	80 fa 25             	cmp    dl,0x25
c0016e44:	0f 84 28 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e4a:	8d 4a da             	lea    ecx,[edx-0x26]
c0016e4d:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016e52:	80 f9 01             	cmp    cl,0x1
c0016e55:	0f 86 17 01 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e5b:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016e60:	80 fa 2a             	cmp    dl,0x2a
c0016e63:	0f 84 09 01 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e69:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e6e:	80 fa 2c             	cmp    dl,0x2c
c0016e71:	0f 84 fb 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e77:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016e7c:	80 fa 2d             	cmp    dl,0x2d
c0016e7f:	0f 84 ed 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e85:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016e8a:	80 fa 2e             	cmp    dl,0x2e
c0016e8d:	0f 84 df 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e93:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e98:	80 fa 2f             	cmp    dl,0x2f
c0016e9b:	0f 84 d1 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ea1:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016ea4:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016ea9:	80 f9 01             	cmp    cl,0x1
c0016eac:	0f 86 c0 00 00 00    	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eb2:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016eb7:	80 fa 37             	cmp    dl,0x37
c0016eba:	0f 84 b2 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ec0:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016ec5:	80 fa 3a             	cmp    dl,0x3a
c0016ec8:	0f 84 a4 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ece:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016ed3:	80 fa 3c             	cmp    dl,0x3c
c0016ed6:	0f 84 96 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016edc:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016ee1:	80 fa 3d             	cmp    dl,0x3d
c0016ee4:	0f 84 88 00 00 00    	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eea:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016eef:	80 fa 3e             	cmp    dl,0x3e
c0016ef2:	74 7e                	je     c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ef4:	8d 42 bb             	lea    eax,[edx-0x45]
c0016ef7:	3c 01                	cmp    al,0x1
c0016ef9:	76 72                	jbe    c0016f6d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016efb:	80 fa 3f             	cmp    dl,0x3f
c0016efe:	74 6d                	je     c0016f6d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f00:	80 fa 4a             	cmp    dl,0x4a
c0016f03:	74 0a                	je     c0016f0f <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016f05:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f0a:	80 fa 4d             	cmp    dl,0x4d
c0016f0d:	75 63                	jne    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f0f:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016f14:	c3                   	ret    
c0016f15:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f1a:	80 f9 0b             	cmp    cl,0xb
c0016f1d:	75 0a                	jne    c0016f29 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016f1f:	fe ca                	dec    dl
c0016f21:	75 4f                	jne    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f23:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016f28:	c3                   	ret    
c0016f29:	80 f9 0f             	cmp    cl,0xf
c0016f2c:	75 44                	jne    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f2e:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016f33:	80 fa 02             	cmp    dl,0x2
c0016f36:	76 3a                	jbe    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f38:	8d 42 fd             	lea    eax,[edx-0x3]
c0016f3b:	3c 01                	cmp    al,0x1
c0016f3d:	76 0a                	jbe    c0016f49 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016f3f:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f44:	80 fa 06             	cmp    dl,0x6
c0016f47:	75 29                	jne    c0016f72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f49:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016f4e:	c3                   	ret    
c0016f4f:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016f54:	c3                   	ret    
c0016f55:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016f5a:	c3                   	ret    
c0016f5b:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016f60:	c3                   	ret    
c0016f61:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016f66:	c3                   	ret    
c0016f67:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016f6c:	c3                   	ret    
c0016f6d:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016f72:	c3                   	ret    

c0016f73 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016f73:	60                   	pusha  
c0016f74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f80:	9c                   	pushf  
c0016f81:	fa                   	cli    
c0016f82:	0f 09                	wbinvd 
c0016f84:	0f 30                	wrmsr  
c0016f86:	9d                   	popf   
c0016f87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f8b:	89 02                	mov    DWORD PTR [edx],eax
c0016f8d:	61                   	popa   
c0016f8e:	c3                   	ret    

c0016f8f <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016f8f:	60                   	pusha  
c0016f90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f94:	9c                   	pushf  
c0016f95:	fa                   	cli    
c0016f96:	0f 09                	wbinvd 
c0016f98:	31 c0                	xor    eax,eax
c0016f9a:	31 d2                	xor    edx,edx
c0016f9c:	0f 32                	rdmsr  
c0016f9e:	9d                   	popf   
c0016f9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fa3:	89 02                	mov    DWORD PTR [edx],eax
c0016fa5:	61                   	popa   
c0016fa6:	c3                   	ret    

c0016fa7 <AMD_K6_writeback(int, int, int)>:
c0016fa7:	56                   	push   esi
c0016fa8:	53                   	push   ebx
c0016fa9:	83 ec 10             	sub    esp,0x10
c0016fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb0:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016fb5:	75 5d                	jne    c0017014 <AMD_K6_writeback(int, int, int)+0x6d>
c0016fb7:	83 f8 08             	cmp    eax,0x8
c0016fba:	75 09                	jne    c0016fc5 <AMD_K6_writeback(int, int, int)+0x1e>
c0016fbc:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016fc1:	7e 13                	jle    c0016fd6 <AMD_K6_writeback(int, int, int)+0x2f>
c0016fc3:	eb 30                	jmp    c0016ff5 <AMD_K6_writeback(int, int, int)+0x4e>
c0016fc5:	83 f8 06             	cmp    eax,0x6
c0016fc8:	7c 4a                	jl     c0017014 <AMD_K6_writeback(int, int, int)+0x6d>
c0016fca:	83 f8 07             	cmp    eax,0x7
c0016fcd:	7e 07                	jle    c0016fd6 <AMD_K6_writeback(int, int, int)+0x2f>
c0016fcf:	83 f8 09             	cmp    eax,0x9
c0016fd2:	74 21                	je     c0016ff5 <AMD_K6_writeback(int, int, int)+0x4e>
c0016fd4:	eb 3e                	jmp    c0017014 <AMD_K6_writeback(int, int, int)+0x6d>
c0016fd6:	89 e6                	mov    esi,esp
c0016fd8:	8b 1d 84 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb84
c0016fde:	56                   	push   esi
c0016fdf:	c1 eb 15             	shr    ebx,0x15
c0016fe2:	68 82 00 00 c0       	push   0xc0000082
c0016fe7:	83 e3 7e             	and    ebx,0x7e
c0016fea:	e8 a0 ff ff ff       	call   c0016f8f <AMD_K6_read_msr(unsigned int, REGS*)>
c0016fef:	56                   	push   esi
c0016ff0:	6a 00                	push   0x0
c0016ff2:	53                   	push   ebx
c0016ff3:	eb 12                	jmp    c0017007 <AMD_K6_writeback(int, int, int)+0x60>
c0016ff5:	89 e3                	mov    ebx,esp
c0016ff7:	53                   	push   ebx
c0016ff8:	68 82 00 00 c0       	push   0xc0000082
c0016ffd:	e8 8d ff ff ff       	call   c0016f8f <AMD_K6_read_msr(unsigned int, REGS*)>
c0017002:	53                   	push   ebx
c0017003:	6a 00                	push   0x0
c0017005:	6a 00                	push   0x0
c0017007:	68 82 00 00 c0       	push   0xc0000082
c001700c:	e8 62 ff ff ff       	call   c0016f73 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017011:	83 c4 18             	add    esp,0x18
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	5b                   	pop    ebx
c0017018:	5e                   	pop    esi
c0017019:	c3                   	ret    

c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001701a:	55                   	push   ebp
c001701b:	57                   	push   edi
c001701c:	56                   	push   esi
c001701d:	53                   	push   ebx
c001701e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017022:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017026:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001702a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001702e:	39 05 e0 b3 03 c0    	cmp    DWORD PTR ds:0xc003b3e0,eax
c0017034:	75 23                	jne    c0017059 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017036:	a1 6c c7 03 c0       	mov    eax,ds:0xc003c76c
c001703b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001703f:	89 06                	mov    DWORD PTR [esi],eax
c0017041:	a1 68 c7 03 c0       	mov    eax,ds:0xc003c768
c0017046:	89 07                	mov    DWORD PTR [edi],eax
c0017048:	a1 64 c7 03 c0       	mov    eax,ds:0xc003c764
c001704d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017050:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c0017055:	89 02                	mov    DWORD PTR [edx],eax
c0017057:	eb 3f                	jmp    c0017098 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017059:	31 c9                	xor    ecx,ecx
c001705b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001705f:	0f a2                	cpuid  
c0017061:	89 06                	mov    DWORD PTR [esi],eax
c0017063:	89 1f                	mov    DWORD PTR [edi],ebx
c0017065:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017069:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001706c:	89 10                	mov    DWORD PTR [eax],edx
c001706e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017072:	a3 e0 b3 03 c0       	mov    ds:0xc003b3e0,eax
c0017077:	8b 06                	mov    eax,DWORD PTR [esi]
c0017079:	a3 6c c7 03 c0       	mov    ds:0xc003c76c,eax
c001707e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017080:	a3 68 c7 03 c0       	mov    ds:0xc003c768,eax
c0017085:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017088:	a3 64 c7 03 c0       	mov    ds:0xc003c764,eax
c001708d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017091:	8b 00                	mov    eax,DWORD PTR [eax]
c0017093:	a3 60 c7 03 c0       	mov    ds:0xc003c760,eax
c0017098:	5b                   	pop    ebx
c0017099:	5e                   	pop    esi
c001709a:	5f                   	pop    edi
c001709b:	5d                   	pop    ebp
c001709c:	c3                   	ret    

c001709d <cpuidCheckEDX(unsigned int)>:
c001709d:	83 ec 10             	sub    esp,0x10
c00170a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a4:	50                   	push   eax
c00170a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a9:	50                   	push   eax
c00170aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170ae:	50                   	push   eax
c00170af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170b3:	50                   	push   eax
c00170b4:	6a 01                	push   0x1
c00170b6:	e8 5f ff ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170bf:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00170c3:	0f 95 c0             	setne  al
c00170c6:	83 c4 24             	add    esp,0x24
c00170c9:	c3                   	ret    

c00170ca <cpuidCheckECX(unsigned int)>:
c00170ca:	83 ec 10             	sub    esp,0x10
c00170cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170d1:	50                   	push   eax
c00170d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170d6:	50                   	push   eax
c00170d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170db:	50                   	push   eax
c00170dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170e0:	50                   	push   eax
c00170e1:	6a 01                	push   0x1
c00170e3:	e8 32 ff ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170ec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00170f0:	0f 95 c0             	setne  al
c00170f3:	83 c4 24             	add    esp,0x24
c00170f6:	c3                   	ret    

c00170f7 <cpuidCheckExtendedEBX(unsigned int)>:
c00170f7:	83 ec 10             	sub    esp,0x10
c00170fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170fe:	50                   	push   eax
c00170ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017103:	50                   	push   eax
c0017104:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017108:	50                   	push   eax
c0017109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001710d:	50                   	push   eax
c001710e:	6a 07                	push   0x7
c0017110:	e8 05 ff ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017115:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017119:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001711d:	0f 95 c0             	setne  al
c0017120:	83 c4 24             	add    esp,0x24
c0017123:	c3                   	ret    

c0017124 <cpuidCheckExtendedECX(unsigned int)>:
c0017124:	83 ec 10             	sub    esp,0x10
c0017127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001712b:	50                   	push   eax
c001712c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017130:	50                   	push   eax
c0017131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017135:	50                   	push   eax
c0017136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001713a:	50                   	push   eax
c001713b:	6a 07                	push   0x7
c001713d:	e8 d8 fe ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017146:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001714a:	0f 95 c0             	setne  al
c001714d:	83 c4 24             	add    esp,0x24
c0017150:	c3                   	ret    

c0017151 <getCPUNumber()>:
c0017151:	31 c0                	xor    eax,eax
c0017153:	c3                   	ret    

c0017154 <thisCPU()>:
c0017154:	e8 f8 ff ff ff       	call   c0017151 <getCPUNumber()>
c0017159:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001715f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017166:	c3                   	ret    
c0017167:	90                   	nop

c0017168 <CPU::CPU()>:
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001716f:	83 ec 08             	sub    esp,0x8
c0017172:	68 7d a2 03 c0       	push   0xc003a27d
c0017177:	50                   	push   eax
c0017178:	e8 cb c7 ff ff       	call   c0013948 <Device::Device(char const*)>
c001717d:	83 c4 10             	add    esp,0x10
c0017180:	ba 54 a3 03 c0       	mov    edx,0xc003a354
c0017185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017189:	89 10                	mov    DWORD PTR [eax],edx
c001718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001719d:	05 78 01 00 00       	add    eax,0x178
c00171a2:	83 ec 0c             	sub    esp,0xc
c00171a5:	50                   	push   eax
c00171a6:	e8 e5 55 ff ff       	call   c000c790 <GDT::GDT()>
c00171ab:	83 c4 10             	add    esp,0x10
c00171ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b2:	05 7c 09 00 00       	add    eax,0x97c
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	50                   	push   eax
c00171bb:	e8 30 58 ff ff       	call   c000c9f0 <IDT::IDT()>
c00171c0:	83 c4 10             	add    esp,0x10
c00171c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c7:	05 7c 11 00 00       	add    eax,0x117c
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	50                   	push   eax
c00171d0:	e8 cf 9b ff ff       	call   c0010da4 <TSS::TSS()>
c00171d5:	83 c4 10             	add    esp,0x10
c00171d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171dc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00171e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00171f1:	90                   	nop
c00171f2:	83 c4 0c             	add    esp,0xc
c00171f5:	c3                   	ret    

c00171f6 <CPU::displayFeatures()>:
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <CPU::detectFeatures()>:
c00171f8:	55                   	push   ebp
c00171f9:	57                   	push   edi
c00171fa:	56                   	push   esi
c00171fb:	53                   	push   ebx
c00171fc:	83 ec 50             	sub    esp,0x50
c00171ff:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017203:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001720d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017214:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001721a:	6a 0d                	push   0xd
c001721c:	6a 00                	push   0x0
c001721e:	57                   	push   edi
c001721f:	e8 b4 94 fe ff       	call   c00006d8 <memset>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001722c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017233:	0f 84 20 09 00 00    	je     c0017b59 <CPU::detectFeatures()+0x961>
c0017239:	83 ec 0c             	sub    esp,0xc
c001723c:	6a 10                	push   0x10
c001723e:	e8 5a fe ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c0017243:	83 e0 01             	and    eax,0x1
c0017246:	8d 14 00             	lea    edx,[eax+eax*1]
c0017249:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001724f:	83 e0 fd             	and    eax,0xfffffffd
c0017252:	09 d0                	or     eax,edx
c0017254:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001725a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017261:	e8 37 fe ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c0017266:	83 e0 01             	and    eax,0x1
c0017269:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017270:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017276:	83 e0 fb             	and    eax,0xfffffffb
c0017279:	09 d0                	or     eax,edx
c001727b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017281:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017288:	e8 10 fe ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c001728d:	83 e0 01             	and    eax,0x1
c0017290:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017297:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001729d:	83 e0 f7             	and    eax,0xfffffff7
c00172a0:	09 d0                	or     eax,edx
c00172a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172a8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00172af:	e8 e9 fd ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c00172b4:	83 e0 01             	and    eax,0x1
c00172b7:	c1 e0 04             	shl    eax,0x4
c00172ba:	88 c2                	mov    dl,al
c00172bc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172c2:	83 e0 ef             	and    eax,0xffffffef
c00172c5:	09 d0                	or     eax,edx
c00172c7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172cd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00172d4:	e8 c4 fd ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c00172d9:	83 e0 01             	and    eax,0x1
c00172dc:	c1 e0 05             	shl    eax,0x5
c00172df:	88 c2                	mov    dl,al
c00172e1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172e7:	83 e0 df             	and    eax,0xffffffdf
c00172ea:	09 d0                	or     eax,edx
c00172ec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00172f9:	e8 9f fd ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c00172fe:	83 e0 01             	and    eax,0x1
c0017301:	8d 14 00             	lea    edx,[eax+eax*1]
c0017304:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001730a:	83 e0 fd             	and    eax,0xfffffffd
c001730d:	09 d0                	or     eax,edx
c001730f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017315:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001731c:	e8 7c fd ff ff       	call   c001709d <cpuidCheckEDX(unsigned int)>
c0017321:	83 e0 01             	and    eax,0x1
c0017324:	c1 e0 06             	shl    eax,0x6
c0017327:	88 c2                	mov    dl,al
c0017329:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001732f:	83 e0 bf             	and    eax,0xffffffbf
c0017332:	09 d0                	or     eax,edx
c0017334:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001733a:	58                   	pop    eax
c001733b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001733f:	56                   	push   esi
c0017340:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017344:	55                   	push   ebp
c0017345:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017349:	50                   	push   eax
c001734a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001734e:	52                   	push   edx
c001734f:	6a 00                	push   0x0
c0017351:	e8 c4 fc ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017356:	83 c4 1c             	add    esp,0x1c
c0017359:	6a 04                	push   0x4
c001735b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001735f:	50                   	push   eax
c0017360:	57                   	push   edi
c0017361:	e8 fb 92 fe ff       	call   c0000661 <memcpy>
c0017366:	83 c4 0c             	add    esp,0xc
c0017369:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001736f:	6a 04                	push   0x4
c0017371:	56                   	push   esi
c0017372:	50                   	push   eax
c0017373:	e8 e9 92 fe ff       	call   c0000661 <memcpy>
c0017378:	83 c4 0c             	add    esp,0xc
c001737b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017381:	6a 04                	push   0x4
c0017383:	55                   	push   ebp
c0017384:	50                   	push   eax
c0017385:	e8 d7 92 fe ff       	call   c0000661 <memcpy>
c001738a:	58                   	pop    eax
c001738b:	5a                   	pop    edx
c001738c:	68 28 a1 03 c0       	push   0xc003a128
c0017391:	57                   	push   edi
c0017392:	e8 e3 94 fe ff       	call   c000087a <strcmp>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	85 c0                	test   eax,eax
c001739c:	75 0f                	jne    c00173ad <CPU::detectFeatures()+0x1b5>
c001739e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00173a8:	e9 22 02 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c00173ad:	50                   	push   eax
c00173ae:	50                   	push   eax
c00173af:	68 35 a1 03 c0       	push   0xc003a135
c00173b4:	57                   	push   edi
c00173b5:	e8 c0 94 fe ff       	call   c000087a <strcmp>
c00173ba:	83 c4 10             	add    esp,0x10
c00173bd:	85 c0                	test   eax,eax
c00173bf:	74 dd                	je     c001739e <CPU::detectFeatures()+0x1a6>
c00173c1:	51                   	push   ecx
c00173c2:	51                   	push   ecx
c00173c3:	68 42 a1 03 c0       	push   0xc003a142
c00173c8:	57                   	push   edi
c00173c9:	e8 ac 94 fe ff       	call   c000087a <strcmp>
c00173ce:	83 c4 10             	add    esp,0x10
c00173d1:	85 c0                	test   eax,eax
c00173d3:	74 2a                	je     c00173ff <CPU::detectFeatures()+0x207>
c00173d5:	52                   	push   edx
c00173d6:	52                   	push   edx
c00173d7:	68 4f a1 03 c0       	push   0xc003a14f
c00173dc:	57                   	push   edi
c00173dd:	e8 98 94 fe ff       	call   c000087a <strcmp>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	85 c0                	test   eax,eax
c00173e7:	74 16                	je     c00173ff <CPU::detectFeatures()+0x207>
c00173e9:	50                   	push   eax
c00173ea:	50                   	push   eax
c00173eb:	68 5c a1 03 c0       	push   0xc003a15c
c00173f0:	57                   	push   edi
c00173f1:	e8 84 94 fe ff       	call   c000087a <strcmp>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	85 c0                	test   eax,eax
c00173fb:	74 48                	je     c0017445 <CPU::detectFeatures()+0x24d>
c00173fd:	eb 0f                	jmp    c001740e <CPU::detectFeatures()+0x216>
c00173ff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017409:	e9 c1 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c001740e:	50                   	push   eax
c001740f:	50                   	push   eax
c0017410:	68 69 a1 03 c0       	push   0xc003a169
c0017415:	57                   	push   edi
c0017416:	e8 5f 94 fe ff       	call   c000087a <strcmp>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	85 c0                	test   eax,eax
c0017420:	74 23                	je     c0017445 <CPU::detectFeatures()+0x24d>
c0017422:	50                   	push   eax
c0017423:	50                   	push   eax
c0017424:	68 76 a1 03 c0       	push   0xc003a176
c0017429:	57                   	push   edi
c001742a:	e8 4b 94 fe ff       	call   c000087a <strcmp>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	85 c0                	test   eax,eax
c0017434:	75 1e                	jne    c0017454 <CPU::detectFeatures()+0x25c>
c0017436:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017440:	e9 8a 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017445:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001744f:	e9 7b 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017454:	50                   	push   eax
c0017455:	50                   	push   eax
c0017456:	68 83 a1 03 c0       	push   0xc003a183
c001745b:	57                   	push   edi
c001745c:	e8 19 94 fe ff       	call   c000087a <strcmp>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	85 c0                	test   eax,eax
c0017466:	75 0f                	jne    c0017477 <CPU::detectFeatures()+0x27f>
c0017468:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017472:	e9 58 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017477:	50                   	push   eax
c0017478:	50                   	push   eax
c0017479:	68 42 a1 03 c0       	push   0xc003a142
c001747e:	57                   	push   edi
c001747f:	e8 f6 93 fe ff       	call   c000087a <strcmp>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	85 c0                	test   eax,eax
c0017489:	75 0f                	jne    c001749a <CPU::detectFeatures()+0x2a2>
c001748b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017495:	e9 35 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c001749a:	50                   	push   eax
c001749b:	50                   	push   eax
c001749c:	68 90 a1 03 c0       	push   0xc003a190
c00174a1:	57                   	push   edi
c00174a2:	e8 d3 93 fe ff       	call   c000087a <strcmp>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	85 c0                	test   eax,eax
c00174ac:	75 0f                	jne    c00174bd <CPU::detectFeatures()+0x2c5>
c00174ae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00174b8:	e9 12 01 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c00174bd:	51                   	push   ecx
c00174be:	51                   	push   ecx
c00174bf:	68 9d a1 03 c0       	push   0xc003a19d
c00174c4:	57                   	push   edi
c00174c5:	e8 b0 93 fe ff       	call   c000087a <strcmp>
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	85 c0                	test   eax,eax
c00174cf:	75 0f                	jne    c00174e0 <CPU::detectFeatures()+0x2e8>
c00174d1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00174db:	e9 ef 00 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c00174e0:	52                   	push   edx
c00174e1:	52                   	push   edx
c00174e2:	68 aa a1 03 c0       	push   0xc003a1aa
c00174e7:	57                   	push   edi
c00174e8:	e8 8d 93 fe ff       	call   c000087a <strcmp>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	85 c0                	test   eax,eax
c00174f2:	75 0f                	jne    c0017503 <CPU::detectFeatures()+0x30b>
c00174f4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00174fe:	e9 cc 00 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017503:	50                   	push   eax
c0017504:	50                   	push   eax
c0017505:	68 b7 a1 03 c0       	push   0xc003a1b7
c001750a:	57                   	push   edi
c001750b:	e8 6a 93 fe ff       	call   c000087a <strcmp>
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	85 c0                	test   eax,eax
c0017515:	75 0f                	jne    c0017526 <CPU::detectFeatures()+0x32e>
c0017517:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017521:	e9 a9 00 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017526:	50                   	push   eax
c0017527:	50                   	push   eax
c0017528:	68 c4 a1 03 c0       	push   0xc003a1c4
c001752d:	57                   	push   edi
c001752e:	e8 47 93 fe ff       	call   c000087a <strcmp>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	85 c0                	test   eax,eax
c0017538:	75 0f                	jne    c0017549 <CPU::detectFeatures()+0x351>
c001753a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017544:	e9 86 00 00 00       	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017549:	50                   	push   eax
c001754a:	50                   	push   eax
c001754b:	68 d1 a1 03 c0       	push   0xc003a1d1
c0017550:	57                   	push   edi
c0017551:	e8 24 93 fe ff       	call   c000087a <strcmp>
c0017556:	83 c4 10             	add    esp,0x10
c0017559:	85 c0                	test   eax,eax
c001755b:	75 0c                	jne    c0017569 <CPU::detectFeatures()+0x371>
c001755d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017567:	eb 66                	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017569:	50                   	push   eax
c001756a:	50                   	push   eax
c001756b:	68 de a1 03 c0       	push   0xc003a1de
c0017570:	57                   	push   edi
c0017571:	e8 04 93 fe ff       	call   c000087a <strcmp>
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	85 c0                	test   eax,eax
c001757b:	75 0c                	jne    c0017589 <CPU::detectFeatures()+0x391>
c001757d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017587:	eb 46                	jmp    c00175cf <CPU::detectFeatures()+0x3d7>
c0017589:	50                   	push   eax
c001758a:	50                   	push   eax
c001758b:	68 eb a1 03 c0       	push   0xc003a1eb
c0017590:	57                   	push   edi
c0017591:	e8 e4 92 fe ff       	call   c000087a <strcmp>
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	85 c0                	test   eax,eax
c001759b:	74 e0                	je     c001757d <CPU::detectFeatures()+0x385>
c001759d:	50                   	push   eax
c001759e:	50                   	push   eax
c001759f:	68 f8 a1 03 c0       	push   0xc003a1f8
c00175a4:	57                   	push   edi
c00175a5:	e8 d0 92 fe ff       	call   c000087a <strcmp>
c00175aa:	83 c4 10             	add    esp,0x10
c00175ad:	85 c0                	test   eax,eax
c00175af:	74 cc                	je     c001757d <CPU::detectFeatures()+0x385>
c00175b1:	51                   	push   ecx
c00175b2:	51                   	push   ecx
c00175b3:	68 05 a2 03 c0       	push   0xc003a205
c00175b8:	57                   	push   edi
c00175b9:	e8 bc 92 fe ff       	call   c000087a <strcmp>
c00175be:	83 c4 10             	add    esp,0x10
c00175c1:	85 c0                	test   eax,eax
c00175c3:	74 b8                	je     c001757d <CPU::detectFeatures()+0x385>
c00175c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00175cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00175d4:	0f 86 be 00 00 00    	jbe    c0017698 <CPU::detectFeatures()+0x4a0>
c00175da:	83 ec 0c             	sub    esp,0xc
c00175dd:	68 80 00 00 00       	push   0x80
c00175e2:	e8 10 fb ff ff       	call   c00170f7 <cpuidCheckExtendedEBX(unsigned int)>
c00175e7:	83 e0 01             	and    eax,0x1
c00175ea:	c1 e0 06             	shl    eax,0x6
c00175ed:	88 c2                	mov    dl,al
c00175ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00175f5:	83 e0 bf             	and    eax,0xffffffbf
c00175f8:	09 d0                	or     eax,edx
c00175fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017600:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017607:	e8 eb fa ff ff       	call   c00170f7 <cpuidCheckExtendedEBX(unsigned int)>
c001760c:	83 e0 01             	and    eax,0x1
c001760f:	c1 e0 04             	shl    eax,0x4
c0017612:	88 c2                	mov    dl,al
c0017614:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001761a:	83 e0 ef             	and    eax,0xffffffef
c001761d:	09 d0                	or     eax,edx
c001761f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017625:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001762c:	e8 c6 fa ff ff       	call   c00170f7 <cpuidCheckExtendedEBX(unsigned int)>
c0017631:	c1 e0 07             	shl    eax,0x7
c0017634:	88 c2                	mov    dl,al
c0017636:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001763c:	83 e0 7f             	and    eax,0x7f
c001763f:	09 d0                	or     eax,edx
c0017641:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017647:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001764e:	e8 d1 fa ff ff       	call   c0017124 <cpuidCheckExtendedECX(unsigned int)>
c0017653:	83 e0 01             	and    eax,0x1
c0017656:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001765d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017663:	83 e0 f7             	and    eax,0xfffffff7
c0017666:	09 d0                	or     eax,edx
c0017668:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001766e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0017675:	e8 aa fa ff ff       	call   c0017124 <cpuidCheckExtendedECX(unsigned int)>
c001767a:	83 c4 10             	add    esp,0x10
c001767d:	83 e0 01             	and    eax,0x1
c0017680:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017687:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001768d:	83 e0 fb             	and    eax,0xfffffffb
c0017690:	09 d0                	or     eax,edx
c0017692:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	56                   	push   esi
c001769c:	55                   	push   ebp
c001769d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00176a1:	57                   	push   edi
c00176a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00176a6:	50                   	push   eax
c00176a7:	6a 01                	push   0x1
c00176a9:	e8 6c f9 ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00176ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00176b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00176b8:	88 ca                	mov    dl,cl
c00176ba:	83 e0 f0             	and    eax,0xfffffff0
c00176bd:	83 e2 0f             	and    edx,0xf
c00176c0:	09 d0                	or     eax,edx
c00176c2:	88 ca                	mov    dl,cl
c00176c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00176ca:	c0 ea 04             	shr    dl,0x4
c00176cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00176d1:	0f b6 c2             	movzx  eax,dl
c00176d4:	83 c4 20             	add    esp,0x20
c00176d7:	c1 e0 06             	shl    eax,0x6
c00176da:	89 c5                	mov    ebp,eax
c00176dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00176e2:	66 25 3f c0          	and    ax,0xc03f
c00176e6:	09 e8                	or     eax,ebp
c00176e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00176ef:	89 c8                	mov    eax,ecx
c00176f1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00176f7:	c1 e8 08             	shr    eax,0x8
c00176fa:	83 e2 3f             	and    edx,0x3f
c00176fd:	83 e0 0f             	and    eax,0xf
c0017700:	89 c5                	mov    ebp,eax
c0017702:	c1 e5 06             	shl    ebp,0x6
c0017705:	09 d5                	or     ebp,edx
c0017707:	89 ea                	mov    edx,ebp
c0017709:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001770f:	88 c2                	mov    dl,al
c0017711:	c0 ea 02             	shr    dl,0x2
c0017714:	89 d5                	mov    ebp,edx
c0017716:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001771c:	83 e2 c0             	and    edx,0xffffffc0
c001771f:	09 d5                	or     ebp,edx
c0017721:	89 ea                	mov    edx,ebp
c0017723:	89 cd                	mov    ebp,ecx
c0017725:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001772b:	c1 ed 0c             	shr    ebp,0xc
c001772e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017734:	83 e5 03             	and    ebp,0x3
c0017737:	83 e2 cf             	and    edx,0xffffffcf
c001773a:	c1 e5 04             	shl    ebp,0x4
c001773d:	09 d5                	or     ebp,edx
c001773f:	3c 06                	cmp    al,0x6
c0017741:	89 ea                	mov    edx,ebp
c0017743:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0017749:	74 04                	je     c001774f <CPU::detectFeatures()+0x557>
c001774b:	3c 0f                	cmp    al,0xf
c001774d:	75 5c                	jne    c00177ab <CPU::detectFeatures()+0x5b3>
c001774f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017753:	89 cd                	mov    ebp,ecx
c0017755:	c1 ed 10             	shr    ebp,0x10
c0017758:	c1 e5 04             	shl    ebp,0x4
c001775b:	09 ea                	or     edx,ebp
c001775d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0017763:	0f b6 d2             	movzx  edx,dl
c0017766:	66 81 e5 3f c0       	and    bp,0xc03f
c001776b:	c1 e2 06             	shl    edx,0x6
c001776e:	09 ea                	or     edx,ebp
c0017770:	3c 0f                	cmp    al,0xf
c0017772:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0017779:	75 30                	jne    c00177ab <CPU::detectFeatures()+0x5b3>
c001777b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0017781:	c1 e9 14             	shr    ecx,0x14
c0017784:	83 e0 3f             	and    eax,0x3f
c0017787:	83 c1 0f             	add    ecx,0xf
c001778a:	88 ca                	mov    dl,cl
c001778c:	c0 e9 02             	shr    cl,0x2
c001778f:	c1 e2 06             	shl    edx,0x6
c0017792:	09 d0                	or     eax,edx
c0017794:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001779a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00177a0:	83 e0 c0             	and    eax,0xffffffc0
c00177a3:	09 c1                	or     ecx,eax
c00177a5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00177ab:	83 ec 0c             	sub    esp,0xc
c00177ae:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00177b5:	56                   	push   esi
c00177b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00177ba:	50                   	push   eax
c00177bb:	57                   	push   edi
c00177bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00177c0:	55                   	push   ebp
c00177c1:	68 00 00 00 80       	push   0x80000000
c00177c6:	e8 4f f8 ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177cb:	83 c4 20             	add    esp,0x20
c00177ce:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00177d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177da:	76 1e                	jbe    c00177fa <CPU::detectFeatures()+0x602>
c00177dc:	83 ec 0c             	sub    esp,0xc
c00177df:	56                   	push   esi
c00177e0:	50                   	push   eax
c00177e1:	57                   	push   edi
c00177e2:	55                   	push   ebp
c00177e3:	68 01 00 00 80       	push   0x80000001
c00177e8:	e8 2d f8 ff ff       	call   c001701a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177ed:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00177f7:	83 c4 20             	add    esp,0x20
c00177fa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017800:	83 f8 01             	cmp    eax,0x1
c0017803:	75 6f                	jne    c0017874 <CPU::detectFeatures()+0x67c>
c0017805:	51                   	push   ecx
c0017806:	51                   	push   ecx
c0017807:	68 11 a2 03 c0       	push   0xc003a211
c001780c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017810:	56                   	push   esi
c0017811:	e8 de 8f fe ff       	call   c00007f4 <strcpy>
c0017816:	5f                   	pop    edi
c0017817:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001781d:	5d                   	pop    ebp
c001781e:	66 c1 e8 06          	shr    ax,0x6
c0017822:	0f b6 c0             	movzx  eax,al
c0017825:	50                   	push   eax
c0017826:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001782c:	c1 e8 0e             	shr    eax,0xe
c001782f:	0f b6 c0             	movzx  eax,al
c0017832:	50                   	push   eax
c0017833:	e8 8d f4 ff ff       	call   c0016cc5 <lookupIntelCPUName(unsigned char, unsigned char)>
c0017838:	5a                   	pop    edx
c0017839:	59                   	pop    ecx
c001783a:	50                   	push   eax
c001783b:	56                   	push   esi
c001783c:	e8 00 91 fe ff       	call   c0000941 <strcat>
c0017841:	5f                   	pop    edi
c0017842:	5d                   	pop    ebp
c0017843:	56                   	push   esi
c0017844:	53                   	push   ebx
c0017845:	e8 f0 c0 ff ff       	call   c001393a <Device::setName(char const*)>
c001784a:	58                   	pop    eax
c001784b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017851:	5a                   	pop    edx
c0017852:	68 18 a2 03 c0       	push   0xc003a218
c0017857:	50                   	push   eax
c0017858:	e8 1d 90 fe ff       	call   c000087a <strcmp>
c001785d:	83 c4 10             	add    esp,0x10
c0017860:	85 c0                	test   eax,eax
c0017862:	0f 85 73 03 00 00    	jne    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017868:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001786f:	e9 67 03 00 00       	jmp    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017874:	83 f8 02             	cmp    eax,0x2
c0017877:	0f 85 b5 00 00 00    	jne    c0017932 <CPU::detectFeatures()+0x73a>
c001787d:	57                   	push   edi
c001787e:	57                   	push   edi
c001787f:	68 2a a2 03 c0       	push   0xc003a22a
c0017884:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017888:	56                   	push   esi
c0017889:	e8 66 8f fe ff       	call   c00007f4 <strcpy>
c001788e:	5d                   	pop    ebp
c001788f:	58                   	pop    eax
c0017890:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017896:	66 c1 e8 06          	shr    ax,0x6
c001789a:	0f b6 c0             	movzx  eax,al
c001789d:	50                   	push   eax
c001789e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178a4:	c1 e8 0e             	shr    eax,0xe
c00178a7:	0f b6 c0             	movzx  eax,al
c00178aa:	50                   	push   eax
c00178ab:	e8 81 f2 ff ff       	call   c0016b31 <lookupAMDCPUName(unsigned char, unsigned char)>
c00178b0:	5a                   	pop    edx
c00178b1:	59                   	pop    ecx
c00178b2:	50                   	push   eax
c00178b3:	56                   	push   esi
c00178b4:	e8 88 90 fe ff       	call   c0000941 <strcat>
c00178b9:	5f                   	pop    edi
c00178ba:	5d                   	pop    ebp
c00178bb:	56                   	push   esi
c00178bc:	53                   	push   ebx
c00178bd:	e8 78 c0 ff ff       	call   c001393a <Device::setName(char const*)>
c00178c2:	58                   	pop    eax
c00178c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00178c9:	5a                   	pop    edx
c00178ca:	68 2f a2 03 c0       	push   0xc003a22f
c00178cf:	50                   	push   eax
c00178d0:	e8 a5 8f fe ff       	call   c000087a <strcmp>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	85 c0                	test   eax,eax
c00178da:	75 20                	jne    c00178fc <CPU::detectFeatures()+0x704>
c00178dc:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c00178e2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00178e8:	a8 01                	test   al,0x1
c00178ea:	74 10                	je     c00178fc <CPU::detectFeatures()+0x704>
c00178ec:	83 e0 fe             	and    eax,0xfffffffe
c00178ef:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00178f5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00178fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017902:	c1 e8 0e             	shr    eax,0xe
c0017905:	3c 05                	cmp    al,0x5
c0017907:	0f 85 ce 02 00 00    	jne    c0017bdb <CPU::detectFeatures()+0x9e3>
c001790d:	56                   	push   esi
c001790e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017914:	83 e0 0f             	and    eax,0xf
c0017917:	50                   	push   eax
c0017918:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001791e:	66 c1 e8 06          	shr    ax,0x6
c0017922:	0f b6 c0             	movzx  eax,al
c0017925:	50                   	push   eax
c0017926:	6a 05                	push   0x5
c0017928:	e8 7a f6 ff ff       	call   c0016fa7 <AMD_K6_writeback(int, int, int)>
c001792d:	e9 1f 02 00 00       	jmp    c0017b51 <CPU::detectFeatures()+0x959>
c0017932:	8d 50 fd             	lea    edx,[eax-0x3]
c0017935:	83 fa 01             	cmp    edx,0x1
c0017938:	76 09                	jbe    c0017943 <CPU::detectFeatures()+0x74b>
c001793a:	83 f8 06             	cmp    eax,0x6
c001793d:	0f 85 91 01 00 00    	jne    c0017ad4 <CPU::detectFeatures()+0x8dc>
c0017943:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017949:	c1 ea 0e             	shr    edx,0xe
c001794c:	80 fa 05             	cmp    dl,0x5
c001794f:	75 7b                	jne    c00179cc <CPU::detectFeatures()+0x7d4>
c0017951:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017957:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001795c:	66 81 fa 00 01       	cmp    dx,0x100
c0017961:	75 0c                	jne    c001796f <CPU::detectFeatures()+0x777>
c0017963:	51                   	push   ecx
c0017964:	51                   	push   ecx
c0017965:	68 36 a2 03 c0       	push   0xc003a236
c001796a:	e9 dc 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c001796f:	66 81 fa 00 02       	cmp    dx,0x200
c0017974:	75 0c                	jne    c0017982 <CPU::detectFeatures()+0x78a>
c0017976:	52                   	push   edx
c0017977:	52                   	push   edx
c0017978:	68 49 a2 03 c0       	push   0xc003a249
c001797d:	e9 c9 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017982:	66 81 fa 40 02       	cmp    dx,0x240
c0017987:	75 0c                	jne    c0017995 <CPU::detectFeatures()+0x79d>
c0017989:	50                   	push   eax
c001798a:	50                   	push   eax
c001798b:	68 5b a2 03 c0       	push   0xc003a25b
c0017990:	e9 b6 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017995:	83 f8 06             	cmp    eax,0x6
c0017998:	75 0c                	jne    c00179a6 <CPU::detectFeatures()+0x7ae>
c001799a:	50                   	push   eax
c001799b:	50                   	push   eax
c001799c:	68 6d a2 03 c0       	push   0xc003a26d
c00179a1:	e9 a5 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c00179a6:	83 f8 04             	cmp    eax,0x4
c00179a9:	75 0c                	jne    c00179b7 <CPU::detectFeatures()+0x7bf>
c00179ab:	50                   	push   eax
c00179ac:	50                   	push   eax
c00179ad:	68 79 a2 03 c0       	push   0xc003a279
c00179b2:	e9 94 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c00179b7:	83 f8 03             	cmp    eax,0x3
c00179ba:	0f 85 1b 02 00 00    	jne    c0017bdb <CPU::detectFeatures()+0x9e3>
c00179c0:	50                   	push   eax
c00179c1:	50                   	push   eax
c00179c2:	68 81 a2 03 c0       	push   0xc003a281
c00179c7:	e9 7f 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c00179cc:	80 fa 06             	cmp    dl,0x6
c00179cf:	0f 85 db 00 00 00    	jne    c0017ab0 <CPU::detectFeatures()+0x8b8>
c00179d5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179db:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179e0:	66 81 fa 80 01       	cmp    dx,0x180
c00179e5:	75 0c                	jne    c00179f3 <CPU::detectFeatures()+0x7fb>
c00179e7:	50                   	push   eax
c00179e8:	50                   	push   eax
c00179e9:	68 8c a2 03 c0       	push   0xc003a28c
c00179ee:	e9 58 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c00179f3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00179f9:	66 f7 c1 80 ff       	test   cx,0xff80
c00179fe:	75 0c                	jne    c0017a0c <CPU::detectFeatures()+0x814>
c0017a00:	50                   	push   eax
c0017a01:	50                   	push   eax
c0017a02:	68 9c a2 03 c0       	push   0xc003a29c
c0017a07:	e9 3f 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017a0c:	66 81 fa 40 02       	cmp    dx,0x240
c0017a11:	75 0c                	jne    c0017a1f <CPU::detectFeatures()+0x827>
c0017a13:	55                   	push   ebp
c0017a14:	55                   	push   ebp
c0017a15:	68 a3 a2 03 c0       	push   0xc003a2a3
c0017a1a:	e9 2c 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017a1f:	66 81 fa 80 02       	cmp    dx,0x280
c0017a24:	75 0c                	jne    c0017a32 <CPU::detectFeatures()+0x83a>
c0017a26:	57                   	push   edi
c0017a27:	57                   	push   edi
c0017a28:	68 ac a2 03 c0       	push   0xc003a2ac
c0017a2d:	e9 19 01 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017a32:	66 81 fa 40 03       	cmp    dx,0x340
c0017a37:	74 ed                	je     c0017a26 <CPU::detectFeatures()+0x82e>
c0017a39:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017a3e:	75 0c                	jne    c0017a4c <CPU::detectFeatures()+0x854>
c0017a40:	56                   	push   esi
c0017a41:	56                   	push   esi
c0017a42:	68 b3 a2 03 c0       	push   0xc003a2b3
c0017a47:	e9 ff 00 00 00       	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017a4c:	83 f8 06             	cmp    eax,0x6
c0017a4f:	0f 84 45 ff ff ff    	je     c001799a <CPU::detectFeatures()+0x7a2>
c0017a55:	83 f8 04             	cmp    eax,0x4
c0017a58:	0f 84 4d ff ff ff    	je     c00179ab <CPU::detectFeatures()+0x7b3>
c0017a5e:	83 f8 03             	cmp    eax,0x3
c0017a61:	0f 85 74 01 00 00    	jne    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017a67:	51                   	push   ecx
c0017a68:	51                   	push   ecx
c0017a69:	68 bc a2 03 c0       	push   0xc003a2bc
c0017a6e:	53                   	push   ebx
c0017a6f:	e8 c6 be ff ff       	call   c001393a <Device::setName(char const*)>
c0017a74:	b1 c1                	mov    cl,0xc1
c0017a76:	88 c8                	mov    al,cl
c0017a78:	e6 22                	out    0x22,al
c0017a7a:	e4 23                	in     al,0x23
c0017a7c:	88 c2                	mov    dl,al
c0017a7e:	88 c8                	mov    al,cl
c0017a80:	e6 22                	out    0x22,al
c0017a82:	88 d0                	mov    al,dl
c0017a84:	83 c8 10             	or     eax,0x10
c0017a87:	e6 23                	out    0x23,al
c0017a89:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017a90:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017a93:	89 d0                	mov    eax,edx
c0017a95:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017a9b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017a9f:	40                   	inc    eax
c0017aa0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017aa6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017aab:	e9 a1 00 00 00       	jmp    c0017b51 <CPU::detectFeatures()+0x959>
c0017ab0:	83 f8 06             	cmp    eax,0x6
c0017ab3:	0f 84 e1 fe ff ff    	je     c001799a <CPU::detectFeatures()+0x7a2>
c0017ab9:	83 f8 04             	cmp    eax,0x4
c0017abc:	0f 84 e9 fe ff ff    	je     c00179ab <CPU::detectFeatures()+0x7b3>
c0017ac2:	83 f8 03             	cmp    eax,0x3
c0017ac5:	0f 85 10 01 00 00    	jne    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017acb:	52                   	push   edx
c0017acc:	52                   	push   edx
c0017acd:	68 c7 a2 03 c0       	push   0xc003a2c7
c0017ad2:	eb 77                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017ad4:	83 f8 07             	cmp    eax,0x7
c0017ad7:	75 09                	jne    c0017ae2 <CPU::detectFeatures()+0x8ea>
c0017ad9:	50                   	push   eax
c0017ada:	50                   	push   eax
c0017adb:	68 d1 a2 03 c0       	push   0xc003a2d1
c0017ae0:	eb 69                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017ae2:	83 f8 0a             	cmp    eax,0xa
c0017ae5:	75 09                	jne    c0017af0 <CPU::detectFeatures()+0x8f8>
c0017ae7:	50                   	push   eax
c0017ae8:	50                   	push   eax
c0017ae9:	68 dc a2 03 c0       	push   0xc003a2dc
c0017aee:	eb 5b                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017af0:	83 f8 0b             	cmp    eax,0xb
c0017af3:	75 09                	jne    c0017afe <CPU::detectFeatures()+0x906>
c0017af5:	50                   	push   eax
c0017af6:	50                   	push   eax
c0017af7:	68 e4 a2 03 c0       	push   0xc003a2e4
c0017afc:	eb 4d                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017afe:	83 f8 08             	cmp    eax,0x8
c0017b01:	75 09                	jne    c0017b0c <CPU::detectFeatures()+0x914>
c0017b03:	50                   	push   eax
c0017b04:	50                   	push   eax
c0017b05:	68 ed a2 03 c0       	push   0xc003a2ed
c0017b0a:	eb 3f                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017b0c:	83 f8 09             	cmp    eax,0x9
c0017b0f:	75 09                	jne    c0017b1a <CPU::detectFeatures()+0x922>
c0017b11:	50                   	push   eax
c0017b12:	50                   	push   eax
c0017b13:	68 f5 a2 03 c0       	push   0xc003a2f5
c0017b18:	eb 31                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017b1a:	83 f8 05             	cmp    eax,0x5
c0017b1d:	75 09                	jne    c0017b28 <CPU::detectFeatures()+0x930>
c0017b1f:	50                   	push   eax
c0017b20:	50                   	push   eax
c0017b21:	68 fd a2 03 c0       	push   0xc003a2fd
c0017b26:	eb 23                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017b28:	83 f8 0c             	cmp    eax,0xc
c0017b2b:	75 09                	jne    c0017b36 <CPU::detectFeatures()+0x93e>
c0017b2d:	55                   	push   ebp
c0017b2e:	55                   	push   ebp
c0017b2f:	68 0b a3 03 c0       	push   0xc003a30b
c0017b34:	eb 15                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017b36:	83 f8 0d             	cmp    eax,0xd
c0017b39:	75 09                	jne    c0017b44 <CPU::detectFeatures()+0x94c>
c0017b3b:	57                   	push   edi
c0017b3c:	57                   	push   edi
c0017b3d:	68 16 a3 03 c0       	push   0xc003a316
c0017b42:	eb 07                	jmp    c0017b4b <CPU::detectFeatures()+0x953>
c0017b44:	56                   	push   esi
c0017b45:	56                   	push   esi
c0017b46:	68 2a a3 03 c0       	push   0xc003a32a
c0017b4b:	53                   	push   ebx
c0017b4c:	e8 e9 bd ff ff       	call   c001393a <Device::setName(char const*)>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	e9 82 00 00 00       	jmp    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017b59:	51                   	push   ecx
c0017b5a:	51                   	push   ecx
c0017b5b:	68 76 a1 03 c0       	push   0xc003a176
c0017b60:	57                   	push   edi
c0017b61:	e8 8e 8c fe ff       	call   c00007f4 <strcpy>
c0017b66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017b70:	e8 0a 86 fe ff       	call   c000017f <is486>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	85 c0                	test   eax,eax
c0017b7a:	74 2d                	je     c0017ba9 <CPU::detectFeatures()+0x9b1>
c0017b7c:	52                   	push   edx
c0017b7d:	52                   	push   edx
c0017b7e:	68 36 a3 03 c0       	push   0xc003a336
c0017b83:	53                   	push   ebx
c0017b84:	e8 b1 bd ff ff       	call   c001393a <Device::setName(char const*)>
c0017b89:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017b90:	e8 00 6e 00 00       	call   c001e995 <CPU::readCR0()>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	83 e0 14             	and    eax,0x14
c0017b9b:	83 f8 04             	cmp    eax,0x4
c0017b9e:	75 1f                	jne    c0017bbf <CPU::detectFeatures()+0x9c7>
c0017ba0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017ba7:	eb 32                	jmp    c0017bdb <CPU::detectFeatures()+0x9e3>
c0017ba9:	50                   	push   eax
c0017baa:	50                   	push   eax
c0017bab:	68 41 a3 03 c0       	push   0xc003a341
c0017bb0:	53                   	push   ebx
c0017bb1:	e8 84 bd ff ff       	call   c001393a <Device::setName(char const*)>
c0017bb6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017bbd:	eb d1                	jmp    c0017b90 <CPU::detectFeatures()+0x998>
c0017bbf:	e8 96 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017bc4:	83 e0 01             	and    eax,0x1
c0017bc7:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bca:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017bd0:	83 e0 fd             	and    eax,0xfffffffd
c0017bd3:	09 d0                	or     eax,edx
c0017bd5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017bdb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017be2:	83 c4 4c             	add    esp,0x4c
c0017be5:	5b                   	pop    ebx
c0017be6:	5e                   	pop    esi
c0017be7:	5f                   	pop    edi
c0017be8:	5d                   	pop    ebp
c0017be9:	c3                   	ret    

c0017bea <CPU::setupSMEP()>:
c0017bea:	83 ec 0c             	sub    esp,0xc
c0017bed:	e8 d9 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017bf2:	0d 00 00 10 00       	or     eax,0x100000
c0017bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bfb:	83 c4 0c             	add    esp,0xc
c0017bfe:	e9 ee 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c03:	90                   	nop

c0017c04 <CPU::setupUMIP()>:
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	e8 bf 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c0c:	80 cc 08             	or     ah,0x8
c0017c0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c13:	83 c4 0c             	add    esp,0xc
c0017c16:	e9 d6 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c1b:	90                   	nop

c0017c1c <CPU::setupTSC()>:
c0017c1c:	83 ec 0c             	sub    esp,0xc
c0017c1f:	e8 a7 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c24:	83 c8 04             	or     eax,0x4
c0017c27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c2b:	83 c4 0c             	add    esp,0xc
c0017c2e:	e9 be 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c33:	90                   	nop

c0017c34 <CPU::setupLargePages()>:
c0017c34:	83 ec 0c             	sub    esp,0xc
c0017c37:	e8 8f 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c3c:	83 c8 10             	or     eax,0x10
c0017c3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c43:	83 c4 0c             	add    esp,0xc
c0017c46:	e9 a6 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c4b:	90                   	nop

c0017c4c <CPU::setupPAT()>:
c0017c4c:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0017c51:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017c58:	74 2c                	je     c0017c86 <CPU::setupPAT()+0x3a>
c0017c5a:	53                   	push   ebx
c0017c5b:	83 ec 10             	sub    esp,0x10
c0017c5e:	68 77 02 00 00       	push   0x277
c0017c63:	50                   	push   eax
c0017c64:	e8 7f 39 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c0017c69:	83 e2 f8             	and    edx,0xfffffff8
c0017c6c:	83 ca 01             	or     edx,0x1
c0017c6f:	52                   	push   edx
c0017c70:	50                   	push   eax
c0017c71:	68 77 02 00 00       	push   0x277
c0017c76:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0017c7c:	e8 93 39 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c81:	83 c4 28             	add    esp,0x28
c0017c84:	5b                   	pop    ebx
c0017c85:	c3                   	ret    
c0017c86:	c3                   	ret    
c0017c87:	90                   	nop

c0017c88 <CPU::setupMTRR()>:
c0017c88:	c3                   	ret    
c0017c89:	90                   	nop

c0017c8a <CPU::setupGlobalPages()>:
c0017c8a:	83 ec 0c             	sub    esp,0xc
c0017c8d:	e8 39 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c92:	0c 80                	or     al,0x80
c0017c94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c98:	83 c4 0c             	add    esp,0xc
c0017c9b:	e9 51 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>

c0017ca0 <CPU::allowUsermodeDataAccess()>:
c0017ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017cab:	74 03                	je     c0017cb0 <CPU::allowUsermodeDataAccess()+0x10>
c0017cad:	0f 01 cb             	stac   
c0017cb0:	c3                   	ret    
c0017cb1:	90                   	nop

c0017cb2 <CPU::prohibitUsermodeDataAccess()>:
c0017cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017cbd:	74 03                	je     c0017cc2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017cbf:	0f 01 ca             	clac   
c0017cc2:	c3                   	ret    
c0017cc3:	90                   	nop

c0017cc4 <CPU::setupSMAP()>:
c0017cc4:	53                   	push   ebx
c0017cc5:	83 ec 08             	sub    esp,0x8
c0017cc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ccc:	e8 fa 6c 00 00       	call   c001e9cb <CPU::readCR4()>
c0017cd1:	83 ec 0c             	sub    esp,0xc
c0017cd4:	0d 00 00 20 00       	or     eax,0x200000
c0017cd9:	50                   	push   eax
c0017cda:	e8 12 74 00 00       	call   c001f0f1 <CPU::writeCR4(unsigned long)>
c0017cdf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017ce3:	83 c4 18             	add    esp,0x18
c0017ce6:	5b                   	pop    ebx
c0017ce7:	eb c9                	jmp    c0017cb2 <CPU::prohibitUsermodeDataAccess()>
c0017ce9:	90                   	nop

c0017cea <CPU::setupFeatures()>:
c0017cea:	53                   	push   ebx
c0017ceb:	83 ec 08             	sub    esp,0x8
c0017cee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cf2:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017cf9:	74 0c                	je     c0017d07 <CPU::setupFeatures()+0x1d>
c0017cfb:	83 ec 0c             	sub    esp,0xc
c0017cfe:	53                   	push   ebx
c0017cff:	e8 e6 fe ff ff       	call   c0017bea <CPU::setupSMEP()>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017d0e:	74 0c                	je     c0017d1c <CPU::setupFeatures()+0x32>
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	53                   	push   ebx
c0017d14:	e8 ab ff ff ff       	call   c0017cc4 <CPU::setupSMAP()>
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017d23:	74 0c                	je     c0017d31 <CPU::setupFeatures()+0x47>
c0017d25:	83 ec 0c             	sub    esp,0xc
c0017d28:	53                   	push   ebx
c0017d29:	e8 d6 fe ff ff       	call   c0017c04 <CPU::setupUMIP()>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017d38:	74 0c                	je     c0017d46 <CPU::setupFeatures()+0x5c>
c0017d3a:	83 ec 0c             	sub    esp,0xc
c0017d3d:	53                   	push   ebx
c0017d3e:	e8 d9 fe ff ff       	call   c0017c1c <CPU::setupTSC()>
c0017d43:	83 c4 10             	add    esp,0x10
c0017d46:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017d4d:	74 0c                	je     c0017d5b <CPU::setupFeatures()+0x71>
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	53                   	push   ebx
c0017d53:	e8 dc fe ff ff       	call   c0017c34 <CPU::setupLargePages()>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017d62:	74 0c                	je     c0017d70 <CPU::setupFeatures()+0x86>
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	53                   	push   ebx
c0017d68:	e8 1d ff ff ff       	call   c0017c8a <CPU::setupGlobalPages()>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017d77:	74 0d                	je     c0017d86 <CPU::setupFeatures()+0x9c>
c0017d79:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d7d:	83 c4 08             	add    esp,0x8
c0017d80:	5b                   	pop    ebx
c0017d81:	e9 c6 fe ff ff       	jmp    c0017c4c <CPU::setupPAT()>
c0017d86:	83 c4 08             	add    esp,0x8
c0017d89:	5b                   	pop    ebx
c0017d8a:	c3                   	ret    
c0017d8b:	90                   	nop

c0017d8c <CPU::open(int, int, void*)>:
c0017d8c:	57                   	push   edi
c0017d8d:	56                   	push   esi
c0017d8e:	53                   	push   ebx
c0017d8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d97:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017d9d:	83 ec 0c             	sub    esp,0xc
c0017da0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017da6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017dac:	50                   	push   eax
c0017dad:	e8 5a 4a ff ff       	call   c000c80c <GDT::setup()>
c0017db2:	83 c4 0c             	add    esp,0xc
c0017db5:	6a 00                	push   0x0
c0017db7:	68 ef be ad de       	push   0xdeadbeef
c0017dbc:	57                   	push   edi
c0017dbd:	e8 22 90 ff ff       	call   c0010de4 <TSS::setup(unsigned long, unsigned long)>
c0017dc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017dc5:	e8 fa 8f ff ff       	call   c0010dc4 <TSS::flush()>
c0017dca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017dd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dd3:	e8 8e 4c ff ff       	call   c000ca66 <IDT::setup()>
c0017dd8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017ddf:	e8 04 73 00 00       	call   c001f0e8 <CPU::writeDR7(unsigned long)>
c0017de4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017dee:	e8 50 5c ff ff       	call   c000da43 <Phys::allocatePage()>
c0017df3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017df9:	89 30                	mov    DWORD PTR [eax],esi
c0017dfb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017e01:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017e04:	58                   	pop    eax
c0017e05:	5a                   	pop    edx
c0017e06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017e0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e10:	e8 af 9d ff ff       	call   c0011bc4 <VAS::setCPUSpecific(unsigned long)>
c0017e15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e18:	e8 db f3 ff ff       	call   c00171f8 <CPU::detectFeatures()>
c0017e1d:	e8 70 c8 ff ff       	call   c0014692 <setupInterruptController()>
c0017e22:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017e28:	a1 74 bb 03 c0       	mov    eax,ds:0xc003bb74
c0017e2d:	83 e0 10             	and    eax,0x10
c0017e30:	83 f8 01             	cmp    eax,0x1
c0017e33:	19 c0                	sbb    eax,eax
c0017e35:	83 e0 46             	and    eax,0x46
c0017e38:	83 c0 1e             	add    eax,0x1e
c0017e3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e3e:	e8 33 da ff ff       	call   c0015876 <setupTimer(int)>
c0017e43:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017e49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e4c:	e8 99 fe ff ff       	call   c0017cea <CPU::setupFeatures()>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	31 c0                	xor    eax,eax
c0017e56:	5b                   	pop    ebx
c0017e57:	5e                   	pop    esi
c0017e58:	5f                   	pop    edi
c0017e59:	c3                   	ret    

c0017e5a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017e5a:	55                   	push   ebp
c0017e5b:	57                   	push   edi
c0017e5c:	56                   	push   esi
c0017e5d:	53                   	push   ebx
c0017e5e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017e64:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017e6b:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017e6d:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017e70:	80 fb 40             	cmp    bl,0x40
c0017e73:	75 1b                	jne    c0017e90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017e75:	8a 16                	mov    dl,BYTE PTR [esi]
c0017e77:	84 d2                	test   dl,dl
c0017e79:	0f 84 f1 00 00 00    	je     c0017f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e7f:	8d 46 01             	lea    eax,[esi+0x1]
c0017e82:	80 fa 3a             	cmp    dl,0x3a
c0017e85:	74 04                	je     c0017e8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017e87:	89 c6                	mov    esi,eax
c0017e89:	eb ea                	jmp    c0017e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017e8b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017e8e:	89 c6                	mov    esi,eax
c0017e90:	50                   	push   eax
c0017e91:	6a 40                	push   0x40
c0017e93:	6a 00                	push   0x0
c0017e95:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e99:	50                   	push   eax
c0017e9a:	e8 39 88 fe ff       	call   c00006d8 <memset>
c0017e9f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017ea6:	31 c0                	xor    eax,eax
c0017ea8:	83 c4 10             	add    esp,0x10
c0017eab:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017ead:	84 c9                	test   cl,cl
c0017eaf:	0f 84 bb 00 00 00    	je     c0017f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017eb5:	3d c7 00 00 00       	cmp    eax,0xc7
c0017eba:	0f 8f b0 00 00 00    	jg     c0017f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ec0:	80 f9 0a             	cmp    cl,0xa
c0017ec3:	0f 85 98 00 00 00    	jne    c0017f61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017ec9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017ece:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017ed2:	a8 df                	test   al,0xdf
c0017ed4:	0f 94 c1             	sete   cl
c0017ed7:	3c 23                	cmp    al,0x23
c0017ed9:	0f 94 c2             	sete   dl
c0017edc:	08 d1                	or     cl,dl
c0017ede:	75 4a                	jne    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ee0:	8d 50 f7             	lea    edx,[eax-0x9]
c0017ee3:	80 fa 01             	cmp    dl,0x1
c0017ee6:	76 42                	jbe    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ee8:	3c 5b                	cmp    al,0x5b
c0017eea:	75 42                	jne    c0017f2e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017eec:	80 fb 40             	cmp    bl,0x40
c0017eef:	75 39                	jne    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017ef8:	52                   	push   edx
c0017ef9:	e8 03 88 fe ff       	call   c0000701 <strlen>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	83 f8 3f             	cmp    eax,0x3f
c0017f04:	77 6a                	ja     c0017f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f06:	50                   	push   eax
c0017f07:	50                   	push   eax
c0017f08:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017f0c:	52                   	push   edx
c0017f0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f11:	52                   	push   edx
c0017f12:	e8 dd 88 fe ff       	call   c00007f4 <strcpy>
c0017f17:	58                   	pop    eax
c0017f18:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f1c:	52                   	push   edx
c0017f1d:	e8 df 87 fe ff       	call   c0000701 <strlen>
c0017f22:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	31 d2                	xor    edx,edx
c0017f2c:	eb 3a                	jmp    c0017f68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017f2e:	80 fb 40             	cmp    bl,0x40
c0017f31:	74 06                	je     c0017f39 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017f33:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f37:	eb 20                	jmp    c0017f59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017f39:	50                   	push   eax
c0017f3a:	50                   	push   eax
c0017f3b:	55                   	push   ebp
c0017f3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f40:	50                   	push   eax
c0017f41:	e8 34 89 fe ff       	call   c000087a <strcmp>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	85 c0                	test   eax,eax
c0017f4b:	75 dd                	jne    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f4d:	eb e4                	jmp    c0017f33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017f4f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f52:	80 f9 3d             	cmp    cl,0x3d
c0017f55:	74 1d                	je     c0017f74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017f57:	89 d0                	mov    eax,edx
c0017f59:	8a 08                	mov    cl,BYTE PTR [eax]
c0017f5b:	84 c9                	test   cl,cl
c0017f5d:	75 f0                	jne    c0017f4f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017f5f:	eb 0f                	jmp    c0017f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f61:	8d 50 01             	lea    edx,[eax+0x1]
c0017f64:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017f68:	47                   	inc    edi
c0017f69:	89 d0                	mov    eax,edx
c0017f6b:	e9 3b ff ff ff       	jmp    c0017eab <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017f70:	31 c0                	xor    eax,eax
c0017f72:	eb 33                	jmp    c0017fa7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017f74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017f7b:	50                   	push   eax
c0017f7c:	50                   	push   eax
c0017f7d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017f81:	50                   	push   eax
c0017f82:	56                   	push   esi
c0017f83:	e8 f2 88 fe ff       	call   c000087a <strcmp>
c0017f88:	83 c4 10             	add    esp,0x10
c0017f8b:	85 c0                	test   eax,eax
c0017f8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f91:	75 97                	jne    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f93:	51                   	push   ecx
c0017f94:	51                   	push   ecx
c0017f95:	52                   	push   edx
c0017f96:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017f9d:	e8 52 88 fe ff       	call   c00007f4 <strcpy>
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	b0 01                	mov    al,0x1
c0017fa7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017fad:	5b                   	pop    ebx
c0017fae:	5e                   	pop    esi
c0017faf:	5f                   	pop    edi
c0017fb0:	5d                   	pop    ebp
c0017fb1:	c3                   	ret    

c0017fb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017fb2:	57                   	push   edi
c0017fb3:	56                   	push   esi
c0017fb4:	53                   	push   ebx
c0017fb5:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017fbb:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017fc2:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017fc9:	53                   	push   ebx
c0017fca:	e8 32 87 fe ff       	call   c0000701 <strlen>
c0017fcf:	89 34 24             	mov    DWORD PTR [esp],esi
c0017fd2:	89 c7                	mov    edi,eax
c0017fd4:	e8 28 87 fe ff       	call   c0000701 <strlen>
c0017fd9:	83 c4 10             	add    esp,0x10
c0017fdc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017fe0:	31 ff                	xor    edi,edi
c0017fe2:	3d ff 00 00 00       	cmp    eax,0xff
c0017fe7:	0f 87 18 01 00 00    	ja     c0018105 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017fed:	51                   	push   ecx
c0017fee:	51                   	push   ecx
c0017fef:	56                   	push   esi
c0017ff0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017ff4:	56                   	push   esi
c0017ff5:	e8 fa 87 fe ff       	call   c00007f4 <strcpy>
c0017ffa:	58                   	pop    eax
c0017ffb:	5a                   	pop    edx
c0017ffc:	68 52 8f 03 c0       	push   0xc0038f52
c0018001:	56                   	push   esi
c0018002:	e8 3a 89 fe ff       	call   c0000941 <strcat>
c0018007:	59                   	pop    ecx
c0018008:	58                   	pop    eax
c0018009:	53                   	push   ebx
c001800a:	56                   	push   esi
c001800b:	e8 31 89 fe ff       	call   c0000941 <strcat>
c0018010:	58                   	pop    eax
c0018011:	5a                   	pop    edx
c0018012:	68 78 a3 03 c0       	push   0xc003a378
c0018017:	56                   	push   esi
c0018018:	e8 24 89 fe ff       	call   c0000941 <strcat>
c001801d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018024:	e8 25 a4 ff ff       	call   c001244e <operator new(unsigned long)>
c0018029:	83 c4 0c             	add    esp,0xc
c001802c:	89 c3                	mov    ebx,eax
c001802e:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c0018034:	56                   	push   esi
c0018035:	50                   	push   eax
c0018036:	e8 41 a8 ff ff       	call   c001287c <File::File(char const*, Process*)>
c001803b:	59                   	pop    ecx
c001803c:	5e                   	pop    esi
c001803d:	6a 01                	push   0x1
c001803f:	53                   	push   ebx
c0018040:	e8 9b a8 ff ff       	call   c00128e0 <File::open(FileOpenMode)>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	85 c0                	test   eax,eax
c001804a:	74 08                	je     c0018054 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018051:	53                   	push   ebx
c0018052:	eb 2e                	jmp    c0018082 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018054:	52                   	push   edx
c0018055:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018059:	50                   	push   eax
c001805a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001805e:	50                   	push   eax
c001805f:	53                   	push   ebx
c0018060:	e8 27 ab ff ff       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c0018065:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	89 c1                	mov    ecx,eax
c001806e:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018072:	75 13                	jne    c0018087 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	53                   	push   ebx
c0018078:	e8 c1 a8 ff ff       	call   c001293e <File::close()>
c001807d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001807f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018082:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018085:	eb 7b                	jmp    c0018102 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018087:	83 ec 0c             	sub    esp,0xc
c001808a:	50                   	push   eax
c001808b:	e8 09 54 ff ff       	call   c000d499 <malloc>
c0018090:	89 c6                	mov    esi,eax
c0018092:	58                   	pop    eax
c0018093:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018095:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018099:	52                   	push   edx
c001809a:	56                   	push   esi
c001809b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001809f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180a3:	53                   	push   ebx
c00180a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00180a7:	83 c4 20             	add    esp,0x20
c00180aa:	85 c0                	test   eax,eax
c00180ac:	75 0a                	jne    c00180b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00180ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180b2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00180b6:	74 18                	je     c00180d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00180b8:	83 ec 0c             	sub    esp,0xc
c00180bb:	31 ff                	xor    edi,edi
c00180bd:	53                   	push   ebx
c00180be:	e8 7b a8 ff ff       	call   c001293e <File::close()>
c00180c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	eb 35                	jmp    c0018105 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	53                   	push   ebx
c00180d4:	e8 65 a8 ff ff       	call   c001293e <File::close()>
c00180d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180e1:	83 c4 0c             	add    esp,0xc
c00180e4:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180eb:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180f2:	56                   	push   esi
c00180f3:	e8 62 fd ff ff       	call   c0017e5a <Reg::findLineFromLoadedData(char*, char*, char*)>
c00180f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00180fb:	89 c7                	mov    edi,eax
c00180fd:	e8 a7 53 ff ff       	call   c000d4a9 <free>
c0018102:	83 c4 10             	add    esp,0x10
c0018105:	81 c4 10 01 00 00    	add    esp,0x110
c001810b:	89 f8                	mov    eax,edi
c001810d:	5b                   	pop    ebx
c001810e:	5e                   	pop    esi
c001810f:	5f                   	pop    edi
c0018110:	c3                   	ret    

c0018111 <Reg::getLine(char*, char*, char*)>:
c0018111:	57                   	push   edi
c0018112:	56                   	push   esi
c0018113:	53                   	push   ebx
c0018114:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018118:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001811c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018120:	57                   	push   edi
c0018121:	56                   	push   esi
c0018122:	53                   	push   ebx
c0018123:	68 7d a3 03 c0       	push   0xc003a37d
c0018128:	e8 85 fe ff ff       	call   c0017fb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	84 c0                	test   al,al
c0018132:	75 10                	jne    c0018144 <Reg::getLine(char*, char*, char*)+0x33>
c0018134:	57                   	push   edi
c0018135:	56                   	push   esi
c0018136:	53                   	push   ebx
c0018137:	68 a2 a3 03 c0       	push   0xc003a3a2
c001813c:	e8 71 fe ff ff       	call   c0017fb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	5b                   	pop    ebx
c0018145:	5e                   	pop    esi
c0018146:	5f                   	pop    edi
c0018147:	c3                   	ret    

c0018148 <Reg::readInt(char*, char*, int*)>:
c0018148:	55                   	push   ebp
c0018149:	57                   	push   edi
c001814a:	56                   	push   esi
c001814b:	53                   	push   ebx
c001814c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0018152:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0018156:	57                   	push   edi
c0018157:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001815e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018165:	e8 a7 ff ff ff       	call   c0018111 <Reg::getLine(char*, char*, char*)>
c001816a:	83 c4 10             	add    esp,0x10
c001816d:	84 c0                	test   al,al
c001816f:	0f 84 b3 00 00 00    	je     c0018228 <Reg::readInt(char*, char*, int*)+0xe0>
c0018175:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0018179:	80 fa 2b             	cmp    dl,0x2b
c001817c:	74 0c                	je     c001818a <Reg::readInt(char*, char*, int*)+0x42>
c001817e:	80 fa 2d             	cmp    dl,0x2d
c0018181:	75 0e                	jne    c0018191 <Reg::readInt(char*, char*, int*)+0x49>
c0018183:	ba 01 00 00 00       	mov    edx,0x1
c0018188:	eb 0b                	jmp    c0018195 <Reg::readInt(char*, char*, int*)+0x4d>
c001818a:	ba 01 00 00 00       	mov    edx,0x1
c001818f:	eb 02                	jmp    c0018193 <Reg::readInt(char*, char*, int*)+0x4b>
c0018191:	31 d2                	xor    edx,edx
c0018193:	31 c0                	xor    eax,eax
c0018195:	be 0a 00 00 00       	mov    esi,0xa
c001819a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001819f:	75 20                	jne    c00181c1 <Reg::readInt(char*, char*, int*)+0x79>
c00181a1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00181a5:	80 f9 78             	cmp    cl,0x78
c00181a8:	75 0a                	jne    c00181b4 <Reg::readInt(char*, char*, int*)+0x6c>
c00181aa:	83 c2 02             	add    edx,0x2
c00181ad:	be 10 00 00 00       	mov    esi,0x10
c00181b2:	eb 0d                	jmp    c00181c1 <Reg::readInt(char*, char*, int*)+0x79>
c00181b4:	80 f9 62             	cmp    cl,0x62
c00181b7:	75 08                	jne    c00181c1 <Reg::readInt(char*, char*, int*)+0x79>
c00181b9:	83 c2 02             	add    edx,0x2
c00181bc:	be 02 00 00 00       	mov    esi,0x2
c00181c1:	01 d7                	add    edi,edx
c00181c3:	31 d2                	xor    edx,edx
c00181c5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00181c7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00181cb:	80 fb 0d             	cmp    bl,0xd
c00181ce:	0f 94 c3             	sete   bl
c00181d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00181d6:	0f 94 c1             	sete   cl
c00181d9:	08 cb                	or     bl,cl
c00181db:	75 3a                	jne    c0018217 <Reg::readInt(char*, char*, int*)+0xcf>
c00181dd:	0f af d6             	imul   edx,esi
c00181e0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00181e5:	83 fe 10             	cmp    esi,0x10
c00181e8:	75 26                	jne    c0018210 <Reg::readInt(char*, char*, int*)+0xc8>
c00181ea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00181ee:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00181f1:	89 e9                	mov    ecx,ebp
c00181f3:	80 f9 05             	cmp    cl,0x5
c00181f6:	77 06                	ja     c00181fe <Reg::readInt(char*, char*, int*)+0xb6>
c00181f8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00181fc:	eb 16                	jmp    c0018214 <Reg::readInt(char*, char*, int*)+0xcc>
c00181fe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018202:	83 e9 61             	sub    ecx,0x61
c0018205:	80 f9 05             	cmp    cl,0x5
c0018208:	77 06                	ja     c0018210 <Reg::readInt(char*, char*, int*)+0xc8>
c001820a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001820e:	eb 04                	jmp    c0018214 <Reg::readInt(char*, char*, int*)+0xcc>
c0018210:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018214:	47                   	inc    edi
c0018215:	eb ae                	jmp    c00181c5 <Reg::readInt(char*, char*, int*)+0x7d>
c0018217:	84 c0                	test   al,al
c0018219:	74 02                	je     c001821d <Reg::readInt(char*, char*, int*)+0xd5>
c001821b:	f7 da                	neg    edx
c001821d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0018224:	89 10                	mov    DWORD PTR [eax],edx
c0018226:	88 d8                	mov    al,bl
c0018228:	81 c4 ec 00 00 00    	add    esp,0xec
c001822e:	5b                   	pop    ebx
c001822f:	5e                   	pop    esi
c0018230:	5f                   	pop    edi
c0018231:	5d                   	pop    ebp
c0018232:	c3                   	ret    

c0018233 <Reg::readString(char*, char*, char*, int)>:
c0018233:	57                   	push   edi
c0018234:	56                   	push   esi
c0018235:	53                   	push   ebx
c0018236:	81 ec d4 00 00 00    	sub    esp,0xd4
c001823c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0018243:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0018247:	57                   	push   edi
c0018248:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001824f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018256:	e8 b6 fe ff ff       	call   c0018111 <Reg::getLine(char*, char*, char*)>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	89 c6                	mov    esi,eax
c0018260:	84 c0                	test   al,al
c0018262:	74 44                	je     c00182a8 <Reg::readString(char*, char*, char*, int)+0x75>
c0018264:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001826b:	31 c0                	xor    eax,eax
c001826d:	4a                   	dec    edx
c001826e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0018271:	84 c9                	test   cl,cl
c0018273:	74 0f                	je     c0018284 <Reg::readString(char*, char*, char*, int)+0x51>
c0018275:	39 c2                	cmp    edx,eax
c0018277:	7e 0b                	jle    c0018284 <Reg::readString(char*, char*, char*, int)+0x51>
c0018279:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001827c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0018281:	40                   	inc    eax
c0018282:	eb ea                	jmp    c001826e <Reg::readString(char*, char*, char*, int)+0x3b>
c0018284:	83 ec 0c             	sub    esp,0xc
c0018287:	53                   	push   ebx
c0018288:	e8 74 84 fe ff       	call   c0000701 <strlen>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0018295:	75 11                	jne    c00182a8 <Reg::readString(char*, char*, char*, int)+0x75>
c0018297:	83 ec 0c             	sub    esp,0xc
c001829a:	53                   	push   ebx
c001829b:	e8 61 84 fe ff       	call   c0000701 <strlen>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00182a8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00182ae:	89 f0                	mov    eax,esi
c00182b0:	5b                   	pop    ebx
c00182b1:	5e                   	pop    esi
c00182b2:	5f                   	pop    edi
c00182b3:	c3                   	ret    

c00182b4 <Reg::readBool(char*, char*, bool*)>:
c00182b4:	83 ec 20             	sub    esp,0x20
c00182b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182bb:	50                   	push   eax
c00182bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c4:	e8 7f fe ff ff       	call   c0018148 <Reg::readInt(char*, char*, int*)>
c00182c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00182ce:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00182d2:	0f 95 02             	setne  BYTE PTR [edx]
c00182d5:	83 c4 2c             	add    esp,0x2c
c00182d8:	c3                   	ret    

c00182d9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00182d9:	53                   	push   ebx
c00182da:	83 ec 1c             	sub    esp,0x1c
c00182dd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00182e1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00182e5:	50                   	push   eax
c00182e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ee:	e8 c1 ff ff ff       	call   c00182b4 <Reg::readBool(char*, char*, bool*)>
c00182f3:	83 c4 10             	add    esp,0x10
c00182f6:	84 c0                	test   al,al
c00182f8:	74 04                	je     c00182fe <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00182fa:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00182fe:	88 d8                	mov    al,bl
c0018300:	83 c4 18             	add    esp,0x18
c0018303:	5b                   	pop    ebx
c0018304:	c3                   	ret    

c0018305 <Reg::readIntWithDefault(char*, char*, int)>:
c0018305:	53                   	push   ebx
c0018306:	83 ec 1c             	sub    esp,0x1c
c0018309:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001830d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018311:	50                   	push   eax
c0018312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018316:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001831a:	e8 29 fe ff ff       	call   c0018148 <Reg::readInt(char*, char*, int*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	84 c0                	test   al,al
c0018324:	74 04                	je     c001832a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0018326:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001832a:	89 d8                	mov    eax,ebx
c001832c:	83 c4 18             	add    esp,0x18
c001832f:	5b                   	pop    ebx
c0018330:	c3                   	ret    

c0018331 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018331:	56                   	push   esi
c0018332:	53                   	push   ebx
c0018333:	51                   	push   ecx
c0018334:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001833c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018340:	56                   	push   esi
c0018341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018349:	e8 e5 fe ff ff       	call   c0018233 <Reg::readString(char*, char*, char*, int)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	84 c0                	test   al,al
c0018353:	74 02                	je     c0018357 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0018355:	89 f3                	mov    ebx,esi
c0018357:	89 d8                	mov    eax,ebx
c0018359:	5a                   	pop    edx
c001835a:	5b                   	pop    ebx
c001835b:	5e                   	pop    esi
c001835c:	c3                   	ret    

c001835d <Sys::exit(regs*)>:
c001835d:	83 ec 18             	sub    esp,0x18
c0018360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018364:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0018367:	e8 d4 6b ff ff       	call   c000ef40 <terminateTask(int)>
c001836c:	83 c8 ff             	or     eax,0xffffffff
c001836f:	83 c4 1c             	add    esp,0x1c
c0018372:	89 c2                	mov    edx,eax
c0018374:	c3                   	ret    

c0018375 <Sys::read(regs*)>:
c0018375:	57                   	push   edi
c0018376:	56                   	push   esi
c0018377:	53                   	push   ebx
c0018378:	83 ec 10             	sub    esp,0x10
c001837b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001837f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018382:	83 f8 02             	cmp    eax,0x2
c0018385:	77 10                	ja     c0018397 <Sys::read(regs*)+0x22>
c0018387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001838c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001838f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018395:	eb 0e                	jmp    c00183a5 <Sys::read(regs*)+0x30>
c0018397:	83 ec 0c             	sub    esp,0xc
c001839a:	50                   	push   eax
c001839b:	e8 37 8e ff ff       	call   c00111d7 <getFromFileDescriptor(int)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	89 c1                	mov    ecx,eax
c00183a5:	83 c8 ff             	or     eax,0xffffffff
c00183a8:	85 c9                	test   ecx,ecx
c00183aa:	89 c2                	mov    edx,eax
c00183ac:	74 28                	je     c00183d6 <Sys::read(regs*)+0x61>
c00183ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183b6:	31 ff                	xor    edi,edi
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00183bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00183c1:	52                   	push   edx
c00183c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00183c5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00183c8:	57                   	push   edi
c00183c9:	56                   	push   esi
c00183ca:	51                   	push   ecx
c00183cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00183ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183d2:	83 c4 20             	add    esp,0x20
c00183d5:	99                   	cdq    
c00183d6:	83 c4 10             	add    esp,0x10
c00183d9:	5b                   	pop    ebx
c00183da:	5e                   	pop    esi
c00183db:	5f                   	pop    edi
c00183dc:	c3                   	ret    

c00183dd <Sys::sbrk(regs*)>:
c00183dd:	56                   	push   esi
c00183de:	53                   	push   ebx
c00183df:	50                   	push   eax
c00183e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183ec:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00183ef:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00183f5:	85 db                	test   ebx,ebx
c00183f7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00183fa:	74 02                	je     c00183fe <Sys::sbrk(regs*)+0x21>
c00183fc:	79 06                	jns    c0018404 <Sys::sbrk(regs*)+0x27>
c00183fe:	89 f0                	mov    eax,esi
c0018400:	31 d2                	xor    edx,edx
c0018402:	eb 2a                	jmp    c001842e <Sys::sbrk(regs*)+0x51>
c0018404:	83 c8 ff             	or     eax,0xffffffff
c0018407:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001840d:	89 c2                	mov    edx,eax
c001840f:	77 1d                	ja     c001842e <Sys::sbrk(regs*)+0x51>
c0018411:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018417:	50                   	push   eax
c0018418:	c1 ea 0c             	shr    edx,0xc
c001841b:	68 07 04 00 00       	push   0x407
c0018420:	52                   	push   edx
c0018421:	51                   	push   ecx
c0018422:	e8 cd 95 ff ff       	call   c00119f4 <VAS::allocatePages(int, int)>
c0018427:	89 f0                	mov    eax,esi
c0018429:	31 d2                	xor    edx,edx
c001842b:	83 c4 10             	add    esp,0x10
c001842e:	59                   	pop    ecx
c001842f:	5b                   	pop    ebx
c0018430:	5e                   	pop    esi
c0018431:	c3                   	ret    

c0018432 <Sys::write(regs*)>:
c0018432:	57                   	push   edi
c0018433:	56                   	push   esi
c0018434:	53                   	push   ebx
c0018435:	83 ec 10             	sub    esp,0x10
c0018438:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001843c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001843f:	83 f8 02             	cmp    eax,0x2
c0018442:	77 10                	ja     c0018454 <Sys::write(regs*)+0x22>
c0018444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018449:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001844c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018452:	eb 0e                	jmp    c0018462 <Sys::write(regs*)+0x30>
c0018454:	83 ec 0c             	sub    esp,0xc
c0018457:	50                   	push   eax
c0018458:	e8 7a 8d ff ff       	call   c00111d7 <getFromFileDescriptor(int)>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	89 c1                	mov    ecx,eax
c0018462:	83 c8 ff             	or     eax,0xffffffff
c0018465:	85 c9                	test   ecx,ecx
c0018467:	89 c2                	mov    edx,eax
c0018469:	74 28                	je     c0018493 <Sys::write(regs*)+0x61>
c001846b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018473:	31 ff                	xor    edi,edi
c0018475:	83 ec 0c             	sub    esp,0xc
c0018478:	8b 01                	mov    eax,DWORD PTR [ecx]
c001847a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001847e:	52                   	push   edx
c001847f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018482:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018485:	57                   	push   edi
c0018486:	56                   	push   esi
c0018487:	51                   	push   ecx
c0018488:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001848b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001848f:	83 c4 20             	add    esp,0x20
c0018492:	99                   	cdq    
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	5b                   	pop    ebx
c0018497:	5e                   	pop    esi
c0018498:	5f                   	pop    edi
c0018499:	c3                   	ret    

c001849a <Sys::yield(regs*)>:
c001849a:	83 ec 0c             	sub    esp,0xc
c001849d:	e8 9e 5e ff ff       	call   c000e340 <lockScheduler()>
c00184a2:	e8 cd 61 ff ff       	call   c000e674 <schedule()>
c00184a7:	e8 96 5e ff ff       	call   c000e342 <unlockScheduler()>
c00184ac:	31 c0                	xor    eax,eax
c00184ae:	31 d2                	xor    edx,edx
c00184b0:	83 c4 0c             	add    esp,0xc
c00184b3:	c3                   	ret    

c00184b4 <vm8086EntryPoint(void*)>:
c00184b4:	83 ec 0c             	sub    esp,0xc
c00184b7:	e8 86 5e ff ff       	call   c000e342 <unlockScheduler()>
c00184bc:	fb                   	sti    
c00184bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184c2:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00184c6:	52                   	push   edx
c00184c7:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00184cb:	52                   	push   edx
c00184cc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00184d0:	52                   	push   edx
c00184d1:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00184d5:	50                   	push   eax
c00184d6:	e8 07 7d fe ff       	call   c00001e2 <goToVM86>
c00184db:	83 c4 1c             	add    esp,0x1c
c00184de:	c3                   	ret    

c00184df <inbv(unsigned short)>:
c00184df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184e3:	ec                   	in     al,dx
c00184e4:	c3                   	ret    

c00184e5 <outbv(unsigned short, unsigned char)>:
c00184e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184ed:	ee                   	out    dx,al
c00184ee:	c3                   	ret    

c00184ef <realToLinear(unsigned short, unsigned short)>:
c00184ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00184f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00184f9:	c1 e0 04             	shl    eax,0x4
c00184fc:	01 d0                	add    eax,edx
c00184fe:	c3                   	ret    

c00184ff <getSegment(unsigned int)>:
c00184ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018503:	c1 e8 10             	shr    eax,0x10
c0018506:	c3                   	ret    

c0018507 <getOffset(unsigned int)>:
c0018507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001850b:	c3                   	ret    

c001850c <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001850c:	55                   	push   ebp
c001850d:	57                   	push   edi
c001850e:	56                   	push   esi
c001850f:	53                   	push   ebx
c0018510:	83 ec 2c             	sub    esp,0x2c
c0018513:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018517:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001851b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001851f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018523:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018527:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001852b:	e8 10 5e ff ff       	call   c000e340 <lockScheduler()>
c0018530:	68 80 00 00 00       	push   0x80
c0018535:	6a 00                	push   0x0
c0018537:	68 b4 84 01 c0       	push   0xc00184b4
c001853c:	55                   	push   ebp
c001853d:	e8 28 5f ff ff       	call   c000e46a <Process::createThread(void (*)(void*), void*, int)>
c0018542:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018546:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001854a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001854e:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018552:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018556:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001855a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018561:	e8 e8 9e ff ff       	call   c001244e <operator new(unsigned long)>
c0018566:	83 c4 0c             	add    esp,0xc
c0018569:	89 c3                	mov    ebx,eax
c001856b:	55                   	push   ebp
c001856c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018570:	50                   	push   eax
c0018571:	e8 06 a3 ff ff       	call   c001287c <File::File(char const*, Process*)>
c0018576:	83 c4 0c             	add    esp,0xc
c0018579:	8d 44 24 17          	lea    eax,[esp+0x17]
c001857d:	50                   	push   eax
c001857e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018582:	50                   	push   eax
c0018583:	53                   	push   ebx
c0018584:	e8 03 a6 ff ff       	call   c0012b8c <File::stat(unsigned long long*, bool*)>
c0018589:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	84 d2                	test   dl,dl
c0018592:	74 1c                	je     c00185b0 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	68 bd a3 03 c0       	push   0xc003a3bd
c001859c:	e8 1b 4a ff ff       	call   c000cfbc <panic(char const*)>
c00185a1:	e8 9c 5d ff ff       	call   c000e342 <unlockScheduler()>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	31 d2                	xor    edx,edx
c00185ab:	e9 81 00 00 00       	jmp    c0018631 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00185b0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00185b4:	51                   	push   ecx
c00185b5:	51                   	push   ecx
c00185b6:	6a 01                	push   0x1
c00185b8:	53                   	push   ebx
c00185b9:	e8 22 a3 ff ff       	call   c00128e0 <File::open(FileOpenMode)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	85 c0                	test   eax,eax
c00185c3:	74 1b                	je     c00185e0 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c00185c5:	83 ec 0c             	sub    esp,0xc
c00185c8:	68 d6 a3 03 c0       	push   0xc003a3d6
c00185cd:	e8 ea 49 ff ff       	call   c000cfbc <panic(char const*)>
c00185d2:	e8 6b 5d ff ff       	call   c000e342 <unlockScheduler()>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00185de:	eb 51                	jmp    c0018631 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00185e0:	83 ec 0c             	sub    esp,0xc
c00185e3:	0f b7 ff             	movzx  edi,di
c00185e6:	6a 07                	push   0x7
c00185e8:	0f b7 f6             	movzx  esi,si
c00185eb:	68 00 01 00 00       	push   0x100
c00185f0:	6a 00                	push   0x0
c00185f2:	6a 00                	push   0x0
c00185f4:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00185fa:	e8 e1 95 ff ff       	call   c0011be0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00185ff:	83 c4 18             	add    esp,0x18
c0018602:	57                   	push   edi
c0018603:	56                   	push   esi
c0018604:	e8 e6 fe ff ff       	call   c00184ef <realToLinear(unsigned short, unsigned short)>
c0018609:	5a                   	pop    edx
c001860a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001860c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018610:	51                   	push   ecx
c0018611:	50                   	push   eax
c0018612:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018616:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001861a:	53                   	push   ebx
c001861b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001861e:	83 c4 14             	add    esp,0x14
c0018621:	53                   	push   ebx
c0018622:	e8 17 a3 ff ff       	call   c001293e <File::close()>
c0018627:	e8 16 5d ff ff       	call   c000e342 <unlockScheduler()>
c001862c:	83 c4 10             	add    esp,0x10
c001862f:	b2 01                	mov    dl,0x1
c0018631:	83 c4 2c             	add    esp,0x2c
c0018634:	88 d0                	mov    al,dl
c0018636:	5b                   	pop    ebx
c0018637:	5e                   	pop    esi
c0018638:	5f                   	pop    edi
c0018639:	5d                   	pop    ebp
c001863a:	c3                   	ret    

c001863b <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001863b:	57                   	push   edi
c001863c:	56                   	push   esi
c001863d:	53                   	push   ebx
c001863e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018646:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001864a:	83 e8 06             	sub    eax,0x6
c001864d:	0f b7 c0             	movzx  eax,ax
c0018650:	50                   	push   eax
c0018651:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018656:	50                   	push   eax
c0018657:	e8 93 fe ff ff       	call   c00184ef <realToLinear(unsigned short, unsigned short)>
c001865c:	5a                   	pop    edx
c001865d:	5e                   	pop    esi
c001865e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018661:	8d 56 fa             	lea    edx,[esi-0x6]
c0018664:	81 e2 ff ff 00 00    	and    edx,0xffff
c001866a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001866d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018670:	83 c2 02             	add    edx,0x2
c0018673:	66 89 10             	mov    WORD PTR [eax],dx
c0018676:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018679:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001867d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018680:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018684:	89 d6                	mov    esi,edx
c0018686:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001868c:	66 81 e6 ff fd       	and    si,0xfdff
c0018691:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018695:	74 07                	je     c001869e <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018697:	89 d6                	mov    esi,edx
c0018699:	66 81 ce 00 02       	or     si,0x200
c001869e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00186a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186a7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00186ab:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00186b3:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00186b6:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00186be:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00186c1:	5b                   	pop    ebx
c00186c2:	5e                   	pop    esi
c00186c3:	5f                   	pop    edi
c00186c4:	c3                   	ret    

c00186c5 <readByteFromReal(unsigned short, unsigned short)>:
c00186c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186ca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186cf:	c1 e0 04             	shl    eax,0x4
c00186d2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00186d5:	c3                   	ret    

c00186d6 <readWordFromReal(unsigned short, unsigned short)>:
c00186d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186e0:	c1 e0 04             	shl    eax,0x4
c00186e3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00186e7:	c3                   	ret    

c00186e8 <readDwordFromReal(unsigned short, unsigned short)>:
c00186e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186f2:	c1 e0 04             	shl    eax,0x4
c00186f5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00186f8:	c3                   	ret    

c00186f9 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00186f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018703:	c1 e0 04             	shl    eax,0x4
c0018706:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001870a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001870d:	c3                   	ret    

c001870e <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001870e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018713:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018718:	c1 e0 04             	shl    eax,0x4
c001871b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001871f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018723:	c3                   	ret    

c0018724 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018724:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018729:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001872e:	c1 e0 04             	shl    eax,0x4
c0018731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018735:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018738:	c3                   	ret    

c0018739 <vm8086FaultHandler(regs*)>:
c0018739:	55                   	push   ebp
c001873a:	57                   	push   edi
c001873b:	56                   	push   esi
c001873c:	53                   	push   ebx
c001873d:	83 ec 1c             	sub    esp,0x1c
c0018740:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018744:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018747:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001874b:	0f b7 f0             	movzx  esi,ax
c001874e:	52                   	push   edx
c001874f:	0f b7 c0             	movzx  eax,ax
c0018752:	50                   	push   eax
c0018753:	e8 97 fd ff ff       	call   c00184ef <realToLinear(unsigned short, unsigned short)>
c0018758:	5a                   	pop    edx
c0018759:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001875c:	59                   	pop    ecx
c001875d:	89 c7                	mov    edi,eax
c001875f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018762:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018766:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001876b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876f:	0f b7 c5             	movzx  eax,bp
c0018772:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018776:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001877a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001877e:	e8 6c fd ff ff       	call   c00184ef <realToLinear(unsigned short, unsigned short)>
c0018783:	5a                   	pop    edx
c0018784:	59                   	pop    ecx
c0018785:	b1 06                	mov    cl,0x6
c0018787:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001878c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018791:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018794:	80 fa 9d             	cmp    dl,0x9d
c0018797:	0f 84 1d 02 00 00    	je     c00189ba <vm8086FaultHandler(regs*)+0x281>
c001879d:	0f 87 8e 00 00 00    	ja     c0018831 <vm8086FaultHandler(regs*)+0xf8>
c00187a3:	80 fa 66             	cmp    dl,0x66
c00187a6:	0f 84 89 01 00 00    	je     c0018935 <vm8086FaultHandler(regs*)+0x1fc>
c00187ac:	77 44                	ja     c00187f2 <vm8086FaultHandler(regs*)+0xb9>
c00187ae:	80 fa 36             	cmp    dl,0x36
c00187b1:	0f 84 74 01 00 00    	je     c001892b <vm8086FaultHandler(regs*)+0x1f2>
c00187b7:	77 1a                	ja     c00187d3 <vm8086FaultHandler(regs*)+0x9a>
c00187b9:	80 fa 26             	cmp    dl,0x26
c00187bc:	0f 84 4b 01 00 00    	je     c001890d <vm8086FaultHandler(regs*)+0x1d4>
c00187c2:	80 fa 2e             	cmp    dl,0x2e
c00187c5:	0f 85 4a 05 00 00    	jne    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c00187cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187ce:	31 c9                	xor    ecx,ecx
c00187d0:	47                   	inc    edi
c00187d1:	eb be                	jmp    c0018791 <vm8086FaultHandler(regs*)+0x58>
c00187d3:	80 fa 64             	cmp    dl,0x64
c00187d6:	0f 84 3b 01 00 00    	je     c0018917 <vm8086FaultHandler(regs*)+0x1de>
c00187dc:	0f 87 3f 01 00 00    	ja     c0018921 <vm8086FaultHandler(regs*)+0x1e8>
c00187e2:	80 fa 3e             	cmp    dl,0x3e
c00187e5:	0f 85 2a 05 00 00    	jne    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c00187eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187ee:	b1 01                	mov    cl,0x1
c00187f0:	eb de                	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c00187f2:	80 fa 6d             	cmp    dl,0x6d
c00187f5:	0f 84 bf 02 00 00    	je     c0018aba <vm8086FaultHandler(regs*)+0x381>
c00187fb:	77 17                	ja     c0018814 <vm8086FaultHandler(regs*)+0xdb>
c00187fd:	80 fa 67             	cmp    dl,0x67
c0018800:	0f 84 3c 01 00 00    	je     c0018942 <vm8086FaultHandler(regs*)+0x209>
c0018806:	80 fa 6c             	cmp    dl,0x6c
c0018809:	0f 84 5d 02 00 00    	je     c0018a6c <vm8086FaultHandler(regs*)+0x333>
c001880f:	e9 01 05 00 00       	jmp    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c0018814:	80 fa 6f             	cmp    dl,0x6f
c0018817:	0f 84 8b 03 00 00    	je     c0018ba8 <vm8086FaultHandler(regs*)+0x46f>
c001881d:	0f 82 0f 03 00 00    	jb     c0018b32 <vm8086FaultHandler(regs*)+0x3f9>
c0018823:	80 fa 9c             	cmp    dl,0x9c
c0018826:	0f 84 23 01 00 00    	je     c001894f <vm8086FaultHandler(regs*)+0x216>
c001882c:	e9 e4 04 00 00       	jmp    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c0018831:	80 fa ec             	cmp    dl,0xec
c0018834:	0f 84 7f 04 00 00    	je     c0018cb9 <vm8086FaultHandler(regs*)+0x580>
c001883a:	77 7b                	ja     c00188b7 <vm8086FaultHandler(regs*)+0x17e>
c001883c:	80 fa e4             	cmp    dl,0xe4
c001883f:	0f 84 fe 03 00 00    	je     c0018c43 <vm8086FaultHandler(regs*)+0x50a>
c0018845:	77 53                	ja     c001889a <vm8086FaultHandler(regs*)+0x161>
c0018847:	80 fa cd             	cmp    dl,0xcd
c001884a:	0f 84 cd 01 00 00    	je     c0018a1d <vm8086FaultHandler(regs*)+0x2e4>
c0018850:	80 fa cf             	cmp    dl,0xcf
c0018853:	0f 85 bc 04 00 00    	jne    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c0018859:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001885c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001885f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018863:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018866:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001886a:	81 ca 00 02 02 00    	or     edx,0x20200
c0018870:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018873:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018877:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001887d:	66 c1 e8 09          	shr    ax,0x9
c0018881:	83 e0 01             	and    eax,0x1
c0018884:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018887:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001888a:	83 c0 06             	add    eax,0x6
c001888d:	25 ff ff 00 00       	and    eax,0xffff
c0018892:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018895:	e9 77 04 00 00       	jmp    c0018d11 <vm8086FaultHandler(regs*)+0x5d8>
c001889a:	80 fa e6             	cmp    dl,0xe6
c001889d:	0f 84 ea 03 00 00    	je     c0018c8d <vm8086FaultHandler(regs*)+0x554>
c00188a3:	0f 82 b6 03 00 00    	jb     c0018c5f <vm8086FaultHandler(regs*)+0x526>
c00188a9:	80 fa e7             	cmp    dl,0xe7
c00188ac:	0f 84 f2 03 00 00    	je     c0018ca4 <vm8086FaultHandler(regs*)+0x56b>
c00188b2:	e9 5e 04 00 00       	jmp    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c00188b7:	80 fa ef             	cmp    dl,0xef
c00188ba:	0f 84 3c 04 00 00    	je     c0018cfc <vm8086FaultHandler(regs*)+0x5c3>
c00188c0:	77 28                	ja     c00188ea <vm8086FaultHandler(regs*)+0x1b1>
c00188c2:	80 fa ed             	cmp    dl,0xed
c00188c5:	0f 84 0a 04 00 00    	je     c0018cd5 <vm8086FaultHandler(regs*)+0x59c>
c00188cb:	80 fa ee             	cmp    dl,0xee
c00188ce:	0f 85 41 04 00 00    	jne    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c00188d4:	50                   	push   eax
c00188d5:	50                   	push   eax
c00188d6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00188da:	50                   	push   eax
c00188db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00188df:	50                   	push   eax
c00188e0:	e8 00 fc ff ff       	call   c00184e5 <outbv(unsigned short, unsigned char)>
c00188e5:	e9 0a 04 00 00       	jmp    c0018cf4 <vm8086FaultHandler(regs*)+0x5bb>
c00188ea:	80 fa fa             	cmp    dl,0xfa
c00188ed:	0f 84 5d 01 00 00    	je     c0018a50 <vm8086FaultHandler(regs*)+0x317>
c00188f3:	80 fa fb             	cmp    dl,0xfb
c00188f6:	0f 84 62 01 00 00    	je     c0018a5e <vm8086FaultHandler(regs*)+0x325>
c00188fc:	80 fa f3             	cmp    dl,0xf3
c00188ff:	0f 85 10 04 00 00    	jne    c0018d15 <vm8086FaultHandler(regs*)+0x5dc>
c0018905:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018908:	e9 c3 fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c001890d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018910:	b1 02                	mov    cl,0x2
c0018912:	e9 b9 fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c0018917:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001891a:	b1 03                	mov    cl,0x3
c001891c:	e9 af fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c0018921:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018924:	b1 04                	mov    cl,0x4
c0018926:	e9 a5 fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c001892b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001892e:	b1 05                	mov    cl,0x5
c0018930:	e9 9b fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c0018935:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018938:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001893d:	e9 8e fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c0018942:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018945:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001894a:	e9 81 fe ff ff       	jmp    c00187d0 <vm8086FaultHandler(regs*)+0x97>
c001894f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018952:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018956:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001895b:	74 30                	je     c001898d <vm8086FaultHandler(regs*)+0x254>
c001895d:	83 e9 04             	sub    ecx,0x4
c0018960:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018966:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001896c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001896f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018972:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018978:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001897c:	0f 84 8c 03 00 00    	je     c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018982:	80 ce 02             	or     dh,0x2
c0018985:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018988:	e9 81 03 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c001898d:	83 e9 02             	sub    ecx,0x2
c0018990:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018996:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018999:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001899d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189a3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189a7:	74 05                	je     c00189ae <vm8086FaultHandler(regs*)+0x275>
c00189a9:	80 ce 02             	or     dh,0x2
c00189ac:	eb 03                	jmp    c00189b1 <vm8086FaultHandler(regs*)+0x278>
c00189ae:	80 e6 fd             	and    dh,0xfd
c00189b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00189b5:	e9 54 03 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c00189ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189bf:	74 2a                	je     c00189eb <vm8086FaultHandler(regs*)+0x2b2>
c00189c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00189c3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189c9:	81 ca 00 02 02 00    	or     edx,0x20200
c00189cf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00189d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189da:	c1 e8 09             	shr    eax,0x9
c00189dd:	83 e0 01             	and    eax,0x1
c00189e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189e6:	83 c0 04             	add    eax,0x4
c00189e9:	eb 25                	jmp    c0018a10 <vm8086FaultHandler(regs*)+0x2d7>
c00189eb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00189ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00189f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a00:	66 c1 e8 09          	shr    ax,0x9
c0018a04:	83 e0 01             	and    eax,0x1
c0018a07:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a0a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a0d:	83 c0 02             	add    eax,0x2
c0018a10:	25 ff ff 00 00       	and    eax,0xffff
c0018a15:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a18:	e9 f1 02 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018a1d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a21:	3c ff                	cmp    al,0xff
c0018a23:	75 10                	jne    c0018a35 <vm8086FaultHandler(regs*)+0x2fc>
c0018a25:	83 ec 0c             	sub    esp,0xc
c0018a28:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018a2b:	e8 10 65 ff ff       	call   c000ef40 <terminateTask(int)>
c0018a30:	e9 c2 02 00 00       	jmp    c0018cf7 <vm8086FaultHandler(regs*)+0x5be>
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a40:	57                   	push   edi
c0018a41:	50                   	push   eax
c0018a42:	53                   	push   ebx
c0018a43:	e8 f3 fb ff ff       	call   c001863b <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018a48:	83 c4 20             	add    esp,0x20
c0018a4b:	e9 c1 02 00 00       	jmp    c0018d11 <vm8086FaultHandler(regs*)+0x5d8>
c0018a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a55:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a59:	e9 b0 02 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018a5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a63:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018a67:	e9 a2 02 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018a6c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a71:	74 0d                	je     c0018a80 <vm8086FaultHandler(regs*)+0x347>
c0018a73:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018a7a:	0f 87 e9 02 00 00    	ja     c0018d69 <vm8086FaultHandler(regs*)+0x630>
c0018a80:	83 ec 0c             	sub    esp,0xc
c0018a83:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018a86:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a8a:	50                   	push   eax
c0018a8b:	e8 4f fa ff ff       	call   c00184df <inbv(unsigned short)>
c0018a90:	83 c4 0c             	add    esp,0xc
c0018a93:	0f b6 c0             	movzx  eax,al
c0018a96:	0f b7 c9             	movzx  ecx,cx
c0018a99:	50                   	push   eax
c0018a9a:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018a9e:	50                   	push   eax
c0018a9f:	51                   	push   ecx
c0018aa0:	e8 54 fc ff ff       	call   c00186f9 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018aa5:	83 c4 10             	add    esp,0x10
c0018aa8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018aab:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018aaf:	74 03                	je     c0018ab4 <vm8086FaultHandler(regs*)+0x37b>
c0018ab1:	48                   	dec    eax
c0018ab2:	eb 01                	jmp    c0018ab5 <vm8086FaultHandler(regs*)+0x37c>
c0018ab4:	40                   	inc    eax
c0018ab5:	0f b7 c0             	movzx  eax,ax
c0018ab8:	eb 70                	jmp    c0018b2a <vm8086FaultHandler(regs*)+0x3f1>
c0018aba:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018abd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018ac0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ac5:	74 0c                	je     c0018ad3 <vm8086FaultHandler(regs*)+0x39a>
c0018ac7:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018acd:	0f 87 96 02 00 00    	ja     c0018d69 <vm8086FaultHandler(regs*)+0x630>
c0018ad3:	0f b7 c9             	movzx  ecx,cx
c0018ad6:	0f b7 f6             	movzx  esi,si
c0018ad9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018adc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ae1:	74 20                	je     c0018b03 <vm8086FaultHandler(regs*)+0x3ca>
c0018ae3:	ed                   	in     eax,dx
c0018ae4:	55                   	push   ebp
c0018ae5:	50                   	push   eax
c0018ae6:	51                   	push   ecx
c0018ae7:	56                   	push   esi
c0018ae8:	e8 37 fc ff ff       	call   c0018724 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018aed:	83 c4 10             	add    esp,0x10
c0018af0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018af3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018af7:	74 05                	je     c0018afe <vm8086FaultHandler(regs*)+0x3c5>
c0018af9:	83 e8 04             	sub    eax,0x4
c0018afc:	eb 27                	jmp    c0018b25 <vm8086FaultHandler(regs*)+0x3ec>
c0018afe:	83 c0 04             	add    eax,0x4
c0018b01:	eb 22                	jmp    c0018b25 <vm8086FaultHandler(regs*)+0x3ec>
c0018b03:	66 ed                	in     ax,dx
c0018b05:	0f b7 c0             	movzx  eax,ax
c0018b08:	57                   	push   edi
c0018b09:	50                   	push   eax
c0018b0a:	51                   	push   ecx
c0018b0b:	56                   	push   esi
c0018b0c:	e8 fd fb ff ff       	call   c001870e <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b17:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b1b:	74 05                	je     c0018b22 <vm8086FaultHandler(regs*)+0x3e9>
c0018b1d:	83 e8 02             	sub    eax,0x2
c0018b20:	eb 03                	jmp    c0018b25 <vm8086FaultHandler(regs*)+0x3ec>
c0018b22:	83 c0 02             	add    eax,0x2
c0018b25:	25 ff ff 00 00       	and    eax,0xffff
c0018b2a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018b2d:	e9 dc 01 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018b32:	49                   	dec    ecx
c0018b33:	80 f9 05             	cmp    cl,0x5
c0018b36:	77 24                	ja     c0018b5c <vm8086FaultHandler(regs*)+0x423>
c0018b38:	0f b6 c9             	movzx  ecx,cl
c0018b3b:	ff 24 8d 1c a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5be4]
c0018b42:	0f b7 f5             	movzx  esi,bp
c0018b45:	eb 15                	jmp    c0018b5c <vm8086FaultHandler(regs*)+0x423>
c0018b47:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018b4b:	eb 0f                	jmp    c0018b5c <vm8086FaultHandler(regs*)+0x423>
c0018b4d:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018b51:	eb 09                	jmp    c0018b5c <vm8086FaultHandler(regs*)+0x423>
c0018b53:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018b57:	eb 03                	jmp    c0018b5c <vm8086FaultHandler(regs*)+0x423>
c0018b59:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018b5c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b5f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b64:	74 0b                	je     c0018b71 <vm8086FaultHandler(regs*)+0x438>
c0018b66:	3d ff ff 00 00       	cmp    eax,0xffff
c0018b6b:	0f 87 f8 01 00 00    	ja     c0018d69 <vm8086FaultHandler(regs*)+0x630>
c0018b71:	0f b7 c0             	movzx  eax,ax
c0018b74:	52                   	push   edx
c0018b75:	52                   	push   edx
c0018b76:	50                   	push   eax
c0018b77:	56                   	push   esi
c0018b78:	e8 48 fb ff ff       	call   c00186c5 <readByteFromReal(unsigned short, unsigned short)>
c0018b7d:	59                   	pop    ecx
c0018b7e:	0f b6 c0             	movzx  eax,al
c0018b81:	5e                   	pop    esi
c0018b82:	50                   	push   eax
c0018b83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b87:	50                   	push   eax
c0018b88:	e8 58 f9 ff ff       	call   c00184e5 <outbv(unsigned short, unsigned char)>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b93:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b97:	74 03                	je     c0018b9c <vm8086FaultHandler(regs*)+0x463>
c0018b99:	48                   	dec    eax
c0018b9a:	eb 01                	jmp    c0018b9d <vm8086FaultHandler(regs*)+0x464>
c0018b9c:	40                   	inc    eax
c0018b9d:	0f b7 c0             	movzx  eax,ax
c0018ba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018ba3:	e9 66 01 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018ba8:	49                   	dec    ecx
c0018ba9:	80 f9 05             	cmp    cl,0x5
c0018bac:	77 1f                	ja     c0018bcd <vm8086FaultHandler(regs*)+0x494>
c0018bae:	0f b6 c9             	movzx  ecx,cl
c0018bb1:	ff 24 8d 34 a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5bcc]
c0018bb8:	89 ee                	mov    esi,ebp
c0018bba:	eb 11                	jmp    c0018bcd <vm8086FaultHandler(regs*)+0x494>
c0018bbc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018bbf:	eb 0c                	jmp    c0018bcd <vm8086FaultHandler(regs*)+0x494>
c0018bc1:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018bc4:	eb 07                	jmp    c0018bcd <vm8086FaultHandler(regs*)+0x494>
c0018bc6:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018bc9:	eb 02                	jmp    c0018bcd <vm8086FaultHandler(regs*)+0x494>
c0018bcb:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018bcd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018bd0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bd5:	74 0c                	je     c0018be3 <vm8086FaultHandler(regs*)+0x4aa>
c0018bd7:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018bdd:	0f 87 86 01 00 00    	ja     c0018d69 <vm8086FaultHandler(regs*)+0x630>
c0018be3:	0f b7 d6             	movzx  edx,si
c0018be6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018be9:	0f b7 c1             	movzx  eax,cx
c0018bec:	81 e7 00 04 00 00    	and    edi,0x400
c0018bf2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018bf5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bfa:	74 1d                	je     c0018c19 <vm8086FaultHandler(regs*)+0x4e0>
c0018bfc:	55                   	push   ebp
c0018bfd:	55                   	push   ebp
c0018bfe:	50                   	push   eax
c0018bff:	52                   	push   edx
c0018c00:	e8 e3 fa ff ff       	call   c00186e8 <readDwordFromReal(unsigned short, unsigned short)>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	89 f2                	mov    edx,esi
c0018c0a:	ef                   	out    dx,eax
c0018c0b:	85 ff                	test   edi,edi
c0018c0d:	74 05                	je     c0018c14 <vm8086FaultHandler(regs*)+0x4db>
c0018c0f:	83 e9 04             	sub    ecx,0x4
c0018c12:	eb 21                	jmp    c0018c35 <vm8086FaultHandler(regs*)+0x4fc>
c0018c14:	83 c1 04             	add    ecx,0x4
c0018c17:	eb 1c                	jmp    c0018c35 <vm8086FaultHandler(regs*)+0x4fc>
c0018c19:	55                   	push   ebp
c0018c1a:	55                   	push   ebp
c0018c1b:	50                   	push   eax
c0018c1c:	52                   	push   edx
c0018c1d:	e8 b4 fa ff ff       	call   c00186d6 <readWordFromReal(unsigned short, unsigned short)>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	89 f2                	mov    edx,esi
c0018c27:	66 ef                	out    dx,ax
c0018c29:	85 ff                	test   edi,edi
c0018c2b:	74 05                	je     c0018c32 <vm8086FaultHandler(regs*)+0x4f9>
c0018c2d:	83 e9 02             	sub    ecx,0x2
c0018c30:	eb 03                	jmp    c0018c35 <vm8086FaultHandler(regs*)+0x4fc>
c0018c32:	83 c1 02             	add    ecx,0x2
c0018c35:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018c3b:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018c3e:	e9 cb 00 00 00       	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018c43:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c4a:	83 ec 0c             	sub    esp,0xc
c0018c4d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c51:	50                   	push   eax
c0018c52:	e8 88 f8 ff ff       	call   c00184df <inbv(unsigned short)>
c0018c57:	0f b6 c0             	movzx  eax,al
c0018c5a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c5d:	eb 3f                	jmp    c0018c9e <vm8086FaultHandler(regs*)+0x565>
c0018c5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c64:	74 07                	je     c0018c6d <vm8086FaultHandler(regs*)+0x534>
c0018c66:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c6a:	ed                   	in     eax,dx
c0018c6b:	eb 14                	jmp    c0018c81 <vm8086FaultHandler(regs*)+0x548>
c0018c6d:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018c70:	66 31 c9             	xor    cx,cx
c0018c73:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018c76:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c7a:	66 ed                	in     ax,dx
c0018c7c:	0f b7 c0             	movzx  eax,ax
c0018c7f:	09 c8                	or     eax,ecx
c0018c81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c84:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c88:	e9 84 00 00 00       	jmp    c0018d11 <vm8086FaultHandler(regs*)+0x5d8>
c0018c8d:	52                   	push   edx
c0018c8e:	52                   	push   edx
c0018c8f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c93:	50                   	push   eax
c0018c94:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c98:	50                   	push   eax
c0018c99:	e8 47 f8 ff ff       	call   c00184e5 <outbv(unsigned short, unsigned char)>
c0018c9e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018ca2:	eb 53                	jmp    c0018cf7 <vm8086FaultHandler(regs*)+0x5be>
c0018ca4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018ca7:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cb0:	74 03                	je     c0018cb5 <vm8086FaultHandler(regs*)+0x57c>
c0018cb2:	ef                   	out    dx,eax
c0018cb3:	eb cf                	jmp    c0018c84 <vm8086FaultHandler(regs*)+0x54b>
c0018cb5:	66 ef                	out    dx,ax
c0018cb7:	eb cb                	jmp    c0018c84 <vm8086FaultHandler(regs*)+0x54b>
c0018cb9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018cc7:	50                   	push   eax
c0018cc8:	e8 12 f8 ff ff       	call   c00184df <inbv(unsigned short)>
c0018ccd:	0f b6 c0             	movzx  eax,al
c0018cd0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018cd3:	eb 1f                	jmp    c0018cf4 <vm8086FaultHandler(regs*)+0x5bb>
c0018cd5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018cd8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cdd:	74 03                	je     c0018ce2 <vm8086FaultHandler(regs*)+0x5a9>
c0018cdf:	ed                   	in     eax,dx
c0018ce0:	eb 0d                	jmp    c0018cef <vm8086FaultHandler(regs*)+0x5b6>
c0018ce2:	66 ed                	in     ax,dx
c0018ce4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018ce7:	0f b7 c0             	movzx  eax,ax
c0018cea:	66 31 d2             	xor    dx,dx
c0018ced:	09 d0                	or     eax,edx
c0018cef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018cf2:	eb 1a                	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018cf4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	eb 15                	jmp    c0018d11 <vm8086FaultHandler(regs*)+0x5d8>
c0018cfc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018cff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d02:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d07:	74 03                	je     c0018d0c <vm8086FaultHandler(regs*)+0x5d3>
c0018d09:	ef                   	out    dx,eax
c0018d0a:	eb 02                	jmp    c0018d0e <vm8086FaultHandler(regs*)+0x5d5>
c0018d0c:	66 ef                	out    dx,ax
c0018d0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d11:	b0 01                	mov    al,0x1
c0018d13:	eb 56                	jmp    c0018d6b <vm8086FaultHandler(regs*)+0x632>
c0018d15:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d19:	50                   	push   eax
c0018d1a:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d1e:	50                   	push   eax
c0018d1f:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d23:	50                   	push   eax
c0018d24:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018d28:	50                   	push   eax
c0018d29:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d2d:	50                   	push   eax
c0018d2e:	52                   	push   edx
c0018d2f:	52                   	push   edx
c0018d30:	68 ef a3 03 c0       	push   0xc003a3ef
c0018d35:	e8 64 41 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0018d3a:	83 c4 20             	add    esp,0x20
c0018d3d:	83 ec 0c             	sub    esp,0xc
c0018d40:	6a 60                	push   0x60
c0018d42:	e8 98 f7 ff ff       	call   c00184df <inbv(unsigned short)>
c0018d47:	83 c4 10             	add    esp,0x10
c0018d4a:	3c 1c                	cmp    al,0x1c
c0018d4c:	74 04                	je     c0018d52 <vm8086FaultHandler(regs*)+0x619>
c0018d4e:	3c 5a                	cmp    al,0x5a
c0018d50:	75 eb                	jne    c0018d3d <vm8086FaultHandler(regs*)+0x604>
c0018d52:	3c 5a                	cmp    al,0x5a
c0018d54:	74 04                	je     c0018d5a <vm8086FaultHandler(regs*)+0x621>
c0018d56:	3c 1c                	cmp    al,0x1c
c0018d58:	75 0f                	jne    c0018d69 <vm8086FaultHandler(regs*)+0x630>
c0018d5a:	83 ec 0c             	sub    esp,0xc
c0018d5d:	6a 60                	push   0x60
c0018d5f:	e8 7b f7 ff ff       	call   c00184df <inbv(unsigned short)>
c0018d64:	83 c4 10             	add    esp,0x10
c0018d67:	eb e9                	jmp    c0018d52 <vm8086FaultHandler(regs*)+0x619>
c0018d69:	31 c0                	xor    eax,eax
c0018d6b:	83 c4 1c             	add    esp,0x1c
c0018d6e:	5b                   	pop    ebx
c0018d6f:	5e                   	pop    esi
c0018d70:	5f                   	pop    edi
c0018d71:	5d                   	pop    ebp
c0018d72:	c3                   	ret    
c0018d73:	90                   	nop

c0018d74 <FAT::getName()>:
c0018d74:	b8 4c a4 03 c0       	mov    eax,0xc003a44c
c0018d79:	c3                   	ret    

c0018d7a <FAT::tell(void*, unsigned long long*)>:
c0018d7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d7f:	75 06                	jne    c0018d87 <FAT::tell(void*, unsigned long long*)+0xd>
c0018d81:	b8 04 00 00 00       	mov    eax,0x4
c0018d86:	c3                   	ret    
c0018d87:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d8c:	75 06                	jne    c0018d94 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018d8e:	b8 04 00 00 00       	mov    eax,0x4
c0018d93:	c3                   	ret    
c0018d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d98:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018d9b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018da2:	89 01                	mov    DWORD PTR [ecx],eax
c0018da4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018da7:	b8 00 00 00 00       	mov    eax,0x0
c0018dac:	c3                   	ret    
c0018dad:	90                   	nop

c0018dae <FAT::stat(void*, unsigned long long*)>:
c0018dae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018db3:	75 06                	jne    c0018dbb <FAT::stat(void*, unsigned long long*)+0xd>
c0018db5:	b8 04 00 00 00       	mov    eax,0x4
c0018dba:	c3                   	ret    
c0018dbb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018dc0:	75 06                	jne    c0018dc8 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018dc2:	b8 04 00 00 00       	mov    eax,0x4
c0018dc7:	c3                   	ret    
c0018dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dcc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018dcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018dd2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dd6:	89 01                	mov    DWORD PTR [ecx],eax
c0018dd8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ddb:	b8 00 00 00 00       	mov    eax,0x0
c0018de0:	c3                   	ret    
c0018de1:	90                   	nop

c0018de2 <FAT::exists(char const*)>:
c0018de2:	b0 00                	mov    al,0x0
c0018de4:	c3                   	ret    
c0018de5:	90                   	nop

c0018de6 <FAT::~FAT()>:
c0018de6:	83 ec 0c             	sub    esp,0xc
c0018de9:	ba d0 a4 03 c0       	mov    edx,0xc003a4d0
c0018dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df2:	89 10                	mov    DWORD PTR [eax],edx
c0018df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	50                   	push   eax
c0018dfc:	e8 75 98 ff ff       	call   c0012676 <Filesystem::~Filesystem()>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	90                   	nop
c0018e05:	83 c4 0c             	add    esp,0xc
c0018e08:	c3                   	ret    
c0018e09:	90                   	nop

c0018e0a <FAT::~FAT()>:
c0018e0a:	83 ec 0c             	sub    esp,0xc
c0018e0d:	83 ec 0c             	sub    esp,0xc
c0018e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e14:	e8 cd ff ff ff       	call   c0018de6 <FAT::~FAT()>
c0018e19:	83 c4 10             	add    esp,0x10
c0018e1c:	83 ec 08             	sub    esp,0x8
c0018e1f:	6a 08                	push   0x8
c0018e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e25:	e8 33 96 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0018e2a:	83 c4 10             	add    esp,0x10
c0018e2d:	83 c4 0c             	add    esp,0xc
c0018e30:	c3                   	ret    
c0018e31:	90                   	nop

c0018e32 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018e32:	83 ec 1c             	sub    esp,0x1c
c0018e35:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018e3c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018e41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e45:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018e4c:	83 f8 ff             	cmp    eax,0xffffffff
c0018e4f:	75 34                	jne    c0018e85 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018e51:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e55:	88 c2                	mov    dl,al
c0018e57:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018e5c:	01 d0                	add    eax,edx
c0018e5e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e62:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0018e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e6c:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0018e73:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018e78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e7c:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c0018e83:	eb 17                	jmp    c0018e9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018e85:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e89:	88 c2                	mov    dl,al
c0018e8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e8f:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018e96:	01 d0                	add    eax,edx
c0018e98:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e9c:	83 ec 04             	sub    esp,0x4
c0018e9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ea7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018eab:	50                   	push   eax
c0018eac:	e8 d1 de fe ff       	call   c0006d82 <f_getlabel>
c0018eb1:	83 c4 10             	add    esp,0x10
c0018eb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018eb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ebd:	75 07                	jne    c0018ec6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018ebf:	b8 00 00 00 00       	mov    eax,0x0
c0018ec4:	eb 05                	jmp    c0018ecb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018ec6:	b8 01 00 00 00       	mov    eax,0x1
c0018ecb:	83 c4 1c             	add    esp,0x1c
c0018ece:	c3                   	ret    
c0018ecf:	90                   	nop

c0018ed0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ed0:	57                   	push   edi
c0018ed1:	83 ec 58             	sub    esp,0x58
c0018ed4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018edc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ee0:	b9 0f 00 00 00       	mov    ecx,0xf
c0018ee5:	b8 00 00 00 00       	mov    eax,0x0
c0018eea:	fc                   	cld    
c0018eeb:	89 d7                	mov    edi,edx
c0018eed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018eef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ef3:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018efa:	83 f8 ff             	cmp    eax,0xffffffff
c0018efd:	75 34                	jne    c0018f33 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018eff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f03:	88 c2                	mov    dl,al
c0018f05:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018f0a:	01 d0                	add    eax,edx
c0018f0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f10:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0018f16:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f1a:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0018f21:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018f26:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018f2a:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c0018f31:	eb 17                	jmp    c0018f4a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018f33:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f37:	88 c2                	mov    dl,al
c0018f39:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f3d:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018f44:	01 d0                	add    eax,edx
c0018f46:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f4a:	83 ec 08             	sub    esp,0x8
c0018f4d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018f51:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f55:	50                   	push   eax
c0018f56:	e8 e6 79 fe ff       	call   c0000941 <strcat>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	83 ec 0c             	sub    esp,0xc
c0018f61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f65:	50                   	push   eax
c0018f66:	e8 05 e0 fe ff       	call   c0006f70 <f_setlabel>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018f72:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018f77:	75 07                	jne    c0018f80 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018f79:	b8 00 00 00 00       	mov    eax,0x0
c0018f7e:	eb 05                	jmp    c0018f85 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018f80:	b8 01 00 00 00       	mov    eax,0x1
c0018f85:	83 c4 58             	add    esp,0x58
c0018f88:	5f                   	pop    edi
c0018f89:	c3                   	ret    

c0018f8a <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f8a:	83 ec 2c             	sub    esp,0x2c
c0018f8d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f95:	83 ec 08             	sub    esp,0x8
c0018f98:	68 70 a4 03 c0       	push   0xc003a470
c0018f9d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fa1:	e8 d4 78 fe ff       	call   c000087a <strcmp>
c0018fa6:	83 c4 10             	add    esp,0x10
c0018fa9:	85 c0                	test   eax,eax
c0018fab:	0f 94 c0             	sete   al
c0018fae:	84 c0                	test   al,al
c0018fb0:	74 0d                	je     c0018fbf <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018fb2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fba:	e9 a6 00 00 00       	jmp    c0019065 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fbf:	83 ec 08             	sub    esp,0x8
c0018fc2:	68 62 a4 03 c0       	push   0xc003a462
c0018fc7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fcb:	e8 aa 78 fe ff       	call   c000087a <strcmp>
c0018fd0:	83 c4 10             	add    esp,0x10
c0018fd3:	85 c0                	test   eax,eax
c0018fd5:	0f 94 c0             	sete   al
c0018fd8:	84 c0                	test   al,al
c0018fda:	74 0a                	je     c0018fe6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018fdc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fe4:	eb 7f                	jmp    c0019065 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fe6:	83 ec 08             	sub    esp,0x8
c0018fe9:	68 68 a4 03 c0       	push   0xc003a468
c0018fee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ff2:	e8 83 78 fe ff       	call   c000087a <strcmp>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	85 c0                	test   eax,eax
c0018ffc:	0f 94 c0             	sete   al
c0018fff:	84 c0                	test   al,al
c0019001:	74 0a                	je     c001900d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019003:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001900b:	eb 58                	jmp    c0019065 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001900d:	83 ec 08             	sub    esp,0x8
c0019010:	68 6c f7 01 c0       	push   0xc001f76c
c0019015:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019019:	e8 5c 78 fe ff       	call   c000087a <strcmp>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	85 c0                	test   eax,eax
c0019023:	0f 94 c0             	sete   al
c0019026:	84 c0                	test   al,al
c0019028:	74 0a                	je     c0019034 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001902a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019032:	eb 31                	jmp    c0019065 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019034:	83 ec 08             	sub    esp,0x8
c0019037:	68 6e a4 03 c0       	push   0xc003a46e
c001903c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019040:	e8 35 78 fe ff       	call   c000087a <strcmp>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	85 c0                	test   eax,eax
c001904a:	0f 94 c0             	sete   al
c001904d:	84 c0                	test   al,al
c001904f:	74 0a                	je     c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019051:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019059:	eb 0a                	jmp    c0019065 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001905b:	b8 08 00 00 00       	mov    eax,0x8
c0019060:	e9 04 01 00 00       	jmp    c0019169 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019065:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001906c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019075:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c001907c:	83 f8 ff             	cmp    eax,0xffffffff
c001907f:	75 34                	jne    c00190b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019081:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019085:	88 c2                	mov    dl,al
c0019087:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c001908c:	01 d0                	add    eax,edx
c001908e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019092:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0019098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001909c:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c00190a3:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c00190a8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00190ac:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c00190b3:	eb 17                	jmp    c00190cc <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00190b5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190b9:	88 c2                	mov    dl,al
c00190bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190bf:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c00190c6:	01 d0                	add    eax,edx
c00190c8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190d0:	88 04 24             	mov    BYTE PTR [esp],al
c00190d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00190e3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00190e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00190f0:	83 ec 0c             	sub    esp,0xc
c00190f3:	68 00 20 00 00       	push   0x2000
c00190f8:	e8 9c 43 ff ff       	call   c000d499 <malloc>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019104:	68 00 20 00 00       	push   0x2000
c0019109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001910d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019111:	50                   	push   eax
c0019112:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019116:	50                   	push   eax
c0019117:	e8 9f e2 fe ff       	call   c00073bb <f_mkfs>
c001911c:	83 c4 10             	add    esp,0x10
c001911f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019123:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019128:	75 07                	jne    c0019131 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001912a:	b8 00 00 00 00       	mov    eax,0x0
c001912f:	eb 38                	jmp    c0019169 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019131:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019136:	75 17                	jne    c001914f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	68 a0 a4 03 c0       	push   0xc003a4a0
c0019140:	e8 59 3d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	b8 09 00 00 00       	mov    eax,0x9
c001914d:	eb 1a                	jmp    c0019169 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001914f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019153:	83 ec 08             	sub    esp,0x8
c0019156:	50                   	push   eax
c0019157:	68 74 a4 03 c0       	push   0xc003a474
c001915c:	e8 3d 3d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c0019161:	83 c4 10             	add    esp,0x10
c0019164:	b8 01 00 00 00       	mov    eax,0x1
c0019169:	83 c4 2c             	add    esp,0x2c
c001916c:	c3                   	ret    
c001916d:	90                   	nop

c001916e <FAT::tryMount(LogicalDisk*, int)>:
c001916e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019174:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0019179:	83 f8 14             	cmp    eax,0x14
c001917c:	75 17                	jne    c0019195 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001917e:	83 ec 0c             	sub    esp,0xc
c0019181:	68 86 a4 03 c0       	push   0xc003a486
c0019186:	e8 31 3e ff ff       	call   c000cfbc <panic(char const*)>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	b0 00                	mov    al,0x0
c0019190:	e9 d7 01 00 00       	jmp    c001936c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019195:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001919c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00191a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00191a8:	3d 00 02 00 00       	cmp    eax,0x200
c00191ad:	74 07                	je     c00191b6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00191af:	b0 00                	mov    al,0x0
c00191b1:	e9 b6 01 00 00       	jmp    c001936c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191b6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00191be:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00191c5:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c00191cc:	83 f8 ff             	cmp    eax,0xffffffff
c00191cf:	74 07                	je     c00191d8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00191d1:	b0 01                	mov    al,0x1
c00191d3:	e9 94 01 00 00       	jmp    c001936c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191d8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00191e2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00191ea:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00191f1:	88 c2                	mov    dl,al
c00191f3:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c00191f8:	01 d0                	add    eax,edx
c00191fa:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019201:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0019207:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001920e:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0019215:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c001921a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019221:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c0019228:	83 ec 0c             	sub    esp,0xc
c001922b:	68 54 02 00 00       	push   0x254
c0019230:	e8 64 42 ff ff       	call   c000d499 <malloc>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001923f:	83 ec 04             	sub    esp,0x4
c0019242:	6a 00                	push   0x0
c0019244:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001924b:	50                   	push   eax
c001924c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019253:	e8 21 bd fe ff       	call   c0004f79 <f_mount>
c0019258:	83 c4 10             	add    esp,0x10
c001925b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019262:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001926a:	74 19                	je     c0019285 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019276:	e8 3e 42 ff ff       	call   c000d4b9 <rfree>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	b0 00                	mov    al,0x0
c0019280:	e9 e7 00 00 00       	jmp    c001936c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019285:	83 ec 04             	sub    esp,0x4
c0019288:	68 00 01 00 00       	push   0x100
c001928d:	6a 00                	push   0x0
c001928f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019296:	50                   	push   eax
c0019297:	e8 3c 74 fe ff       	call   c00006d8 <memset>
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	83 ec 08             	sub    esp,0x8
c00192a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192a9:	50                   	push   eax
c00192aa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192b1:	50                   	push   eax
c00192b2:	e8 8a 76 fe ff       	call   c0000941 <strcat>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	83 ec 08             	sub    esp,0x8
c00192bd:	68 94 a4 03 c0       	push   0xc003a494
c00192c2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192c9:	50                   	push   eax
c00192ca:	e8 72 76 fe ff       	call   c0000941 <strcat>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	83 ec 04             	sub    esp,0x4
c00192d5:	6a 01                	push   0x1
c00192d7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00192de:	50                   	push   eax
c00192df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192e3:	50                   	push   eax
c00192e4:	e8 f2 bc fe ff       	call   c0004fdb <f_open>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192f3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192fa:	85 c0                	test   eax,eax
c00192fc:	74 0a                	je     c0019308 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00192fe:	78 2d                	js     c001932d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019300:	83 e8 04             	sub    eax,0x4
c0019303:	83 f8 01             	cmp    eax,0x1
c0019306:	77 25                	ja     c001932d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019308:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019317:	50                   	push   eax
c0019318:	e8 10 c8 fe ff       	call   c0005b2d <f_close>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	90                   	nop
c0019321:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019329:	74 3a                	je     c0019365 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001932b:	eb 2d                	jmp    c001935a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001932d:	83 ec 0c             	sub    esp,0xc
c0019330:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019337:	e8 7d 41 ff ff       	call   c000d4b9 <rfree>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	83 ec 04             	sub    esp,0x4
c0019342:	6a 00                	push   0x0
c0019344:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001934b:	50                   	push   eax
c001934c:	6a 00                	push   0x0
c001934e:	e8 26 bc fe ff       	call   c0004f79 <f_mount>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	b0 00                	mov    al,0x0
c0019358:	eb 12                	jmp    c001936c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001935a:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c001935f:	40                   	inc    eax
c0019360:	a3 80 c7 03 c0       	mov    ds:0xc003c780,eax
c0019365:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001936c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019372:	c3                   	ret    
c0019373:	90                   	nop

c0019374 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019374:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001937a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019382:	74 0a                	je     c001938e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019384:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001938c:	75 0a                	jne    c0019398 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001938e:	b8 04 00 00 00       	mov    eax,0x4
c0019393:	e9 dc 00 00 00       	jmp    c0019474 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019398:	83 ec 08             	sub    esp,0x8
c001939b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00193a2:	50                   	push   eax
c00193a3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00193aa:	e8 88 cd fe ff       	call   c0006137 <f_readdir>
c00193af:	83 c4 10             	add    esp,0x10
c00193b2:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00193b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193c0:	83 ec 0c             	sub    esp,0xc
c00193c3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00193ca:	83 c0 1a             	add    eax,0x1a
c00193cd:	50                   	push   eax
c00193ce:	e8 2e 73 fe ff       	call   c0000701 <strlen>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	ba 00 00 00 00       	mov    edx,0x0
c00193db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00193e3:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00193ea:	0f b6 c0             	movzx  eax,al
c00193ed:	83 e0 10             	and    eax,0x10
c00193f0:	74 07                	je     c00193f9 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00193f2:	b8 02 00 00 00       	mov    eax,0x2
c00193f7:	eb 05                	jmp    c00193fe <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00193f9:	b8 01 00 00 00       	mov    eax,0x1
c00193fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019402:	83 ec 08             	sub    esp,0x8
c0019405:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001940c:	83 c0 1a             	add    eax,0x1a
c001940f:	50                   	push   eax
c0019410:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019414:	83 c0 10             	add    eax,0x10
c0019417:	50                   	push   eax
c0019418:	e8 d7 73 fe ff       	call   c00007f4 <strcpy>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	83 ec 04             	sub    esp,0x4
c0019423:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001942a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001942e:	50                   	push   eax
c001942f:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019436:	e8 26 72 fe ff       	call   c0000661 <memcpy>
c001943b:	83 c4 10             	add    esp,0x10
c001943e:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019445:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001944b:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019452:	84 c0                	test   al,al
c0019454:	75 07                	jne    c001945d <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c0019456:	b8 07 00 00 00       	mov    eax,0x7
c001945b:	eb 17                	jmp    c0019474 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001945d:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019464:	85 c0                	test   eax,eax
c0019466:	75 07                	jne    c001946f <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c0019468:	b8 00 00 00 00       	mov    eax,0x0
c001946d:	eb 05                	jmp    c0019474 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001946f:	b8 01 00 00 00       	mov    eax,0x1
c0019474:	81 c4 3c 02 00 00    	add    esp,0x23c
c001947a:	c3                   	ret    
c001947b:	90                   	nop

c001947c <FAT::read(void*, unsigned long, void*, int*)>:
c001947c:	83 ec 1c             	sub    esp,0x1c
c001947f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019484:	74 07                	je     c001948d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019486:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001948b:	75 07                	jne    c0019494 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001948d:	b8 04 00 00 00       	mov    eax,0x4
c0019492:	eb 3d                	jmp    c00194d1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019494:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019498:	50                   	push   eax
c0019499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001949d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194a5:	e8 6d bf fe ff       	call   c0005417 <f_read>
c00194aa:	83 c4 10             	add    esp,0x10
c00194ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b5:	89 c2                	mov    edx,eax
c00194b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194bb:	89 10                	mov    DWORD PTR [eax],edx
c00194bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194c1:	85 c0                	test   eax,eax
c00194c3:	75 07                	jne    c00194cc <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00194c5:	b8 00 00 00 00       	mov    eax,0x0
c00194ca:	eb 05                	jmp    c00194d1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00194cc:	b8 01 00 00 00       	mov    eax,0x1
c00194d1:	83 c4 1c             	add    esp,0x1c
c00194d4:	c3                   	ret    
c00194d5:	90                   	nop

c00194d6 <FAT::write(void*, unsigned long, void*, int*)>:
c00194d6:	83 ec 1c             	sub    esp,0x1c
c00194d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194de:	74 07                	je     c00194e7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00194e0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194e5:	75 07                	jne    c00194ee <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00194e7:	b8 04 00 00 00       	mov    eax,0x4
c00194ec:	eb 3d                	jmp    c001952b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194f2:	50                   	push   eax
c00194f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ff:	e8 93 c1 fe ff       	call   c0005697 <f_write>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001950b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001950f:	89 c2                	mov    edx,eax
c0019511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019515:	89 10                	mov    DWORD PTR [eax],edx
c0019517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001951b:	85 c0                	test   eax,eax
c001951d:	75 07                	jne    c0019526 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001951f:	b8 00 00 00 00       	mov    eax,0x0
c0019524:	eb 05                	jmp    c001952b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019526:	b8 01 00 00 00       	mov    eax,0x1
c001952b:	83 c4 1c             	add    esp,0x1c
c001952e:	c3                   	ret    
c001952f:	90                   	nop

c0019530 <FAT::close(void*)>:
c0019530:	83 ec 1c             	sub    esp,0x1c
c0019533:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019538:	75 07                	jne    c0019541 <FAT::close(void*)+0x11>
c001953a:	b8 04 00 00 00       	mov    eax,0x4
c001953f:	eb 36                	jmp    c0019577 <FAT::close(void*)+0x47>
c0019541:	83 ec 0c             	sub    esp,0xc
c0019544:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019548:	e8 e0 c5 fe ff       	call   c0005b2d <f_close>
c001954d:	83 c4 10             	add    esp,0x10
c0019550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001955b:	e8 49 3f ff ff       	call   c000d4a9 <free>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019567:	85 c0                	test   eax,eax
c0019569:	75 07                	jne    c0019572 <FAT::close(void*)+0x42>
c001956b:	b8 00 00 00 00       	mov    eax,0x0
c0019570:	eb 05                	jmp    c0019577 <FAT::close(void*)+0x47>
c0019572:	b8 01 00 00 00       	mov    eax,0x1
c0019577:	83 c4 1c             	add    esp,0x1c
c001957a:	c3                   	ret    
c001957b:	90                   	nop

c001957c <FAT::closeDir(void*)>:
c001957c:	83 ec 1c             	sub    esp,0x1c
c001957f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019584:	75 07                	jne    c001958d <FAT::closeDir(void*)+0x11>
c0019586:	b8 04 00 00 00       	mov    eax,0x4
c001958b:	eb 36                	jmp    c00195c3 <FAT::closeDir(void*)+0x47>
c001958d:	83 ec 0c             	sub    esp,0xc
c0019590:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019594:	e8 7c cb fe ff       	call   c0006115 <f_closedir>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195a7:	e8 fd 3e ff ff       	call   c000d4a9 <free>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195b3:	85 c0                	test   eax,eax
c00195b5:	75 07                	jne    c00195be <FAT::closeDir(void*)+0x42>
c00195b7:	b8 00 00 00 00       	mov    eax,0x0
c00195bc:	eb 05                	jmp    c00195c3 <FAT::closeDir(void*)+0x47>
c00195be:	b8 01 00 00 00       	mov    eax,0x1
c00195c3:	83 c4 1c             	add    esp,0x1c
c00195c6:	c3                   	ret    
c00195c7:	90                   	nop

c00195c8 <FAT::seek(void*, unsigned long long)>:
c00195c8:	83 ec 2c             	sub    esp,0x2c
c00195cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195db:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195e0:	75 07                	jne    c00195e9 <FAT::seek(void*, unsigned long long)+0x21>
c00195e2:	b8 04 00 00 00       	mov    eax,0x4
c00195e7:	eb 2f                	jmp    c0019618 <FAT::seek(void*, unsigned long long)+0x50>
c00195e9:	83 ec 04             	sub    esp,0x4
c00195ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195f8:	e8 5f c5 fe ff       	call   c0005b5c <f_lseek>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019608:	85 c0                	test   eax,eax
c001960a:	75 07                	jne    c0019613 <FAT::seek(void*, unsigned long long)+0x4b>
c001960c:	b8 00 00 00 00       	mov    eax,0x0
c0019611:	eb 05                	jmp    c0019618 <FAT::seek(void*, unsigned long long)+0x50>
c0019613:	b8 01 00 00 00       	mov    eax,0x1
c0019618:	83 c4 2c             	add    esp,0x2c
c001961b:	c3                   	ret    

c001961c <fatWrapperReadDisk>:
c001961c:	83 ec 1c             	sub    esp,0x1c
c001961f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019623:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001962b:	89 04 24             	mov    DWORD PTR [esp],eax
c001962e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019632:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019636:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001963b:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0019642:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019646:	83 ec 0c             	sub    esp,0xc
c0019649:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001964d:	52                   	push   edx
c001964e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019656:	50                   	push   eax
c0019657:	e8 be bb ff ff       	call   c001521a <LogicalDisk::read(unsigned long long, int, void*)>
c001965c:	83 c4 20             	add    esp,0x20
c001965f:	83 c4 1c             	add    esp,0x1c
c0019662:	c3                   	ret    

c0019663 <fatWrapperWriteDisk>:
c0019663:	83 ec 1c             	sub    esp,0x1c
c0019666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001966a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001966e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019672:	89 04 24             	mov    DWORD PTR [esp],eax
c0019675:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001967d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019682:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0019689:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001968d:	83 ec 0c             	sub    esp,0xc
c0019690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019694:	52                   	push   edx
c0019695:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019699:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969d:	50                   	push   eax
c001969e:	e8 e3 bb ff ff       	call   c0015286 <LogicalDisk::write(unsigned long long, int, void*)>
c00196a3:	83 c4 20             	add    esp,0x20
c00196a6:	83 c4 1c             	add    esp,0x1c
c00196a9:	c3                   	ret    

c00196aa <fatWrapperIoctl>:
c00196aa:	53                   	push   ebx
c00196ab:	83 ec 28             	sub    esp,0x28
c00196ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196b6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00196ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196be:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00196c3:	75 31                	jne    c00196f6 <fatWrapperIoctl+0x4c>
c00196c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196cd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196d2:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c00196d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e9:	66 89 02             	mov    WORD PTR [edx],ax
c00196ec:	b8 00 00 00 00       	mov    eax,0x0
c00196f1:	e9 b2 00 00 00       	jmp    c00197a8 <fatWrapperIoctl+0xfe>
c00196f6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00196fb:	75 6a                	jne    c0019767 <fatWrapperIoctl+0xbd>
c00196fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019705:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001970a:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0019711:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019717:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001971d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019723:	89 c8                	mov    eax,ecx
c0019725:	89 da                	mov    edx,ebx
c0019727:	0f a4 c2 0a          	shld   edx,eax,0xa
c001972b:	c1 e0 0a             	shl    eax,0xa
c001972e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019733:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c001973a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019740:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019746:	89 cb                	mov    ebx,ecx
c0019748:	c1 fb 1f             	sar    ebx,0x1f
c001974b:	53                   	push   ebx
c001974c:	51                   	push   ecx
c001974d:	52                   	push   edx
c001974e:	50                   	push   eax
c001974f:	e8 68 4f 00 00       	call   c001e6bc <__udivdi3>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001975b:	89 01                	mov    DWORD PTR [ecx],eax
c001975d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019760:	b8 00 00 00 00       	mov    eax,0x0
c0019765:	eb 41                	jmp    c00197a8 <fatWrapperIoctl+0xfe>
c0019767:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001976c:	75 07                	jne    c0019775 <fatWrapperIoctl+0xcb>
c001976e:	b8 00 00 00 00       	mov    eax,0x0
c0019773:	eb 33                	jmp    c00197a8 <fatWrapperIoctl+0xfe>
c0019775:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001977a:	75 19                	jne    c0019795 <fatWrapperIoctl+0xeb>
c001977c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019780:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019788:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001978e:	b8 00 00 00 00       	mov    eax,0x0
c0019793:	eb 13                	jmp    c00197a8 <fatWrapperIoctl+0xfe>
c0019795:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001979a:	75 07                	jne    c00197a3 <fatWrapperIoctl+0xf9>
c001979c:	b8 00 00 00 00       	mov    eax,0x0
c00197a1:	eb 05                	jmp    c00197a8 <fatWrapperIoctl+0xfe>
c00197a3:	b8 04 00 00 00       	mov    eax,0x4
c00197a8:	83 c4 28             	add    esp,0x28
c00197ab:	5b                   	pop    ebx
c00197ac:	c3                   	ret    
c00197ad:	90                   	nop

c00197ae <FAT::FAT()>:
c00197ae:	83 ec 1c             	sub    esp,0x1c
c00197b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b5:	83 ec 0c             	sub    esp,0xc
c00197b8:	50                   	push   eax
c00197b9:	e8 94 8e ff ff       	call   c0012652 <Filesystem::Filesystem()>
c00197be:	83 c4 10             	add    esp,0x10
c00197c1:	ba d0 a4 03 c0       	mov    edx,0xc003a4d0
c00197c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197ca:	89 10                	mov    DWORD PTR [eax],edx
c00197cc:	c7 05 80 c7 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c780,0x0
c00197d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197de:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197e3:	7f 15                	jg     c00197fa <FAT::FAT()+0x4c>
c00197e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197e9:	c7 04 85 a0 c7 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3860],0xffffffff
c00197f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00197f8:	eb e4                	jmp    c00197de <FAT::FAT()+0x30>
c00197fa:	90                   	nop
c00197fb:	83 c4 1c             	add    esp,0x1c
c00197fe:	c3                   	ret    
c00197ff:	90                   	nop

c0019800 <FAT::fixFilepath(char*)>:
c0019800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019804:	8a 00                	mov    al,BYTE PTR [eax]
c0019806:	3c 40                	cmp    al,0x40
c0019808:	7e 2c                	jle    c0019836 <FAT::fixFilepath(char*)+0x36>
c001980a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001980e:	8a 00                	mov    al,BYTE PTR [eax]
c0019810:	83 e8 41             	sub    eax,0x41
c0019813:	88 c2                	mov    dl,al
c0019815:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019819:	88 10                	mov    BYTE PTR [eax],dl
c001981b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001981f:	8a 00                	mov    al,BYTE PTR [eax]
c0019821:	0f be c0             	movsx  eax,al
c0019824:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c001982b:	83 c0 30             	add    eax,0x30
c001982e:	88 c2                	mov    dl,al
c0019830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019834:	88 10                	mov    BYTE PTR [eax],dl
c0019836:	90                   	nop
c0019837:	c3                   	ret    

c0019838 <FAT::open(char const*, void**, FileOpenMode)>:
c0019838:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001983e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019846:	74 0a                	je     c0019852 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019848:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019850:	75 0a                	jne    c001985c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019852:	b8 04 00 00 00       	mov    eax,0x4
c0019857:	e9 fd 00 00 00       	jmp    c0019959 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001985c:	83 ec 08             	sub    esp,0x8
c001985f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019866:	8d 44 24 14          	lea    eax,[esp+0x14]
c001986a:	50                   	push   eax
c001986b:	e8 84 6f fe ff       	call   c00007f4 <strcpy>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	83 ec 08             	sub    esp,0x8
c0019876:	8d 44 24 10          	lea    eax,[esp+0x10]
c001987a:	50                   	push   eax
c001987b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019882:	e8 79 ff ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019887:	83 c4 10             	add    esp,0x10
c001988a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019892:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019899:	83 e0 01             	and    eax,0x1
c001989c:	74 08                	je     c00198a6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001989e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00198a6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198ad:	83 e0 04             	and    eax,0x4
c00198b0:	74 10                	je     c00198c2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00198b2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00198ba:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00198c2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198c9:	83 e0 02             	and    eax,0x2
c00198cc:	74 08                	je     c00198d6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00198ce:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00198d6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198dd:	83 e0 08             	and    eax,0x8
c00198e0:	74 08                	je     c00198ea <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00198e2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00198ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198f1:	83 e0 10             	and    eax,0x10
c00198f4:	74 08                	je     c00198fe <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00198f6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	68 50 02 00 00       	push   0x250
c0019906:	e8 8e 3b ff ff       	call   c000d499 <malloc>
c001990b:	83 c4 10             	add    esp,0x10
c001990e:	89 c2                	mov    edx,eax
c0019910:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019917:	89 10                	mov    DWORD PTR [eax],edx
c0019919:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019921:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019928:	8b 00                	mov    eax,DWORD PTR [eax]
c001992a:	83 ec 04             	sub    esp,0x4
c001992d:	52                   	push   edx
c001992e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019932:	52                   	push   edx
c0019933:	50                   	push   eax
c0019934:	e8 a2 b6 fe ff       	call   c0004fdb <f_open>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019943:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001994b:	74 07                	je     c0019954 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001994d:	b8 01 00 00 00       	mov    eax,0x1
c0019952:	eb 05                	jmp    c0019959 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019954:	b8 00 00 00 00       	mov    eax,0x0
c0019959:	81 c4 1c 01 00 00    	add    esp,0x11c
c001995f:	c3                   	ret    

c0019960 <FAT::openDir(char const*, void**)>:
c0019960:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019966:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001996e:	74 0a                	je     c001997a <FAT::openDir(char const*, void**)+0x1a>
c0019970:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019978:	75 07                	jne    c0019981 <FAT::openDir(char const*, void**)+0x21>
c001997a:	b8 04 00 00 00       	mov    eax,0x4
c001997f:	eb 7d                	jmp    c00199fe <FAT::openDir(char const*, void**)+0x9e>
c0019981:	83 ec 08             	sub    esp,0x8
c0019984:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001998b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001998f:	50                   	push   eax
c0019990:	e8 5f 6e fe ff       	call   c00007f4 <strcpy>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	83 ec 08             	sub    esp,0x8
c001999b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001999f:	50                   	push   eax
c00199a0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199a7:	e8 54 fe ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c00199ac:	83 c4 10             	add    esp,0x10
c00199af:	83 ec 0c             	sub    esp,0xc
c00199b2:	6a 4c                	push   0x4c
c00199b4:	e8 e0 3a ff ff       	call   c000d499 <malloc>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	89 c2                	mov    edx,eax
c00199be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199c5:	89 10                	mov    DWORD PTR [eax],edx
c00199c7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d0:	83 ec 08             	sub    esp,0x8
c00199d3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199d7:	52                   	push   edx
c00199d8:	50                   	push   eax
c00199d9:	e8 35 c6 fe ff       	call   c0006013 <f_opendir>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199e8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199f0:	74 07                	je     c00199f9 <FAT::openDir(char const*, void**)+0x99>
c00199f2:	b8 01 00 00 00       	mov    eax,0x1
c00199f7:	eb 05                	jmp    c00199fe <FAT::openDir(char const*, void**)+0x9e>
c00199f9:	b8 00 00 00 00       	mov    eax,0x0
c00199fe:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a04:	c3                   	ret    
c0019a05:	90                   	nop

c0019a06 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a06:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a0c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a14:	75 0a                	jne    c0019a20 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a16:	b8 04 00 00 00       	mov    eax,0x4
c0019a1b:	e9 c9 00 00 00       	jmp    c0019ae9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a20:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a28:	75 0a                	jne    c0019a34 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019a2a:	b8 04 00 00 00       	mov    eax,0x4
c0019a2f:	e9 b5 00 00 00       	jmp    c0019ae9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a34:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a3c:	75 0a                	jne    c0019a48 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	e9 a1 00 00 00       	jmp    c0019ae9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a48:	83 ec 08             	sub    esp,0x8
c0019a4b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a52:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a59:	50                   	push   eax
c0019a5a:	e8 95 6d fe ff       	call   c00007f4 <strcpy>
c0019a5f:	83 c4 10             	add    esp,0x10
c0019a62:	83 ec 08             	sub    esp,0x8
c0019a65:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a6c:	50                   	push   eax
c0019a6d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a74:	e8 87 fd ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019a79:	83 c4 10             	add    esp,0x10
c0019a7c:	83 ec 08             	sub    esp,0x8
c0019a7f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a83:	50                   	push   eax
c0019a84:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a8b:	50                   	push   eax
c0019a8c:	e8 41 c7 fe ff       	call   c00061d2 <f_stat>
c0019a91:	83 c4 10             	add    esp,0x10
c0019a94:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a9b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019aa2:	85 c0                	test   eax,eax
c0019aa4:	74 07                	je     c0019aad <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019aa6:	83 f8 04             	cmp    eax,0x4
c0019aa9:	74 32                	je     c0019add <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019aab:	eb 37                	jmp    c0019ae4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019aad:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ab1:	0f b6 c0             	movzx  eax,al
c0019ab4:	83 e0 10             	and    eax,0x10
c0019ab7:	0f 95 c2             	setne  dl
c0019aba:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ac1:	88 10                	mov    BYTE PTR [eax],dl
c0019ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019ac6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019aca:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ad1:	89 01                	mov    DWORD PTR [ecx],eax
c0019ad3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019ad6:	b8 00 00 00 00       	mov    eax,0x0
c0019adb:	eb 0c                	jmp    c0019ae9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019add:	b8 02 00 00 00       	mov    eax,0x2
c0019ae2:	eb 05                	jmp    c0019ae9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ae4:	b8 01 00 00 00       	mov    eax,0x1
c0019ae9:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019aef:	c3                   	ret    

c0019af0 <FAT::unlink(char const*)>:
c0019af0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019af6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019afe:	75 07                	jne    c0019b07 <FAT::unlink(char const*)+0x17>
c0019b00:	b8 04 00 00 00       	mov    eax,0x4
c0019b05:	eb 5c                	jmp    c0019b63 <FAT::unlink(char const*)+0x73>
c0019b07:	83 ec 08             	sub    esp,0x8
c0019b0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b11:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b15:	50                   	push   eax
c0019b16:	e8 d9 6c fe ff       	call   c00007f4 <strcpy>
c0019b1b:	83 c4 10             	add    esp,0x10
c0019b1e:	83 ec 08             	sub    esp,0x8
c0019b21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b25:	50                   	push   eax
c0019b26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b2d:	e8 ce fc ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019b32:	83 c4 10             	add    esp,0x10
c0019b35:	83 ec 0c             	sub    esp,0xc
c0019b38:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b3c:	50                   	push   eax
c0019b3d:	e8 e2 c9 fe ff       	call   c0006524 <f_unlink>
c0019b42:	83 c4 10             	add    esp,0x10
c0019b45:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b4c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b53:	85 c0                	test   eax,eax
c0019b55:	75 07                	jne    c0019b5e <FAT::unlink(char const*)+0x6e>
c0019b57:	b8 00 00 00 00       	mov    eax,0x0
c0019b5c:	eb 05                	jmp    c0019b63 <FAT::unlink(char const*)+0x73>
c0019b5e:	b8 01 00 00 00       	mov    eax,0x1
c0019b63:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b69:	c3                   	ret    

c0019b6a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b6a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b70:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019b77:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019b7e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b82:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b86:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b8e:	75 0a                	jne    c0019b9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b90:	b8 04 00 00 00       	mov    eax,0x4
c0019b95:	e9 1c 01 00 00       	jmp    c0019cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b9a:	83 ec 08             	sub    esp,0x8
c0019b9d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ba4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ba8:	50                   	push   eax
c0019ba9:	e8 46 6c fe ff       	call   c00007f4 <strcpy>
c0019bae:	83 c4 10             	add    esp,0x10
c0019bb1:	83 ec 08             	sub    esp,0x8
c0019bb4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bb8:	50                   	push   eax
c0019bb9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bc0:	e8 3b fc ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019bd0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019bd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bdd:	83 e0 01             	and    eax,0x1
c0019be0:	74 08                	je     c0019bea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019be2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019bea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bef:	83 e0 02             	and    eax,0x2
c0019bf2:	74 08                	je     c0019bfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019bf4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019bfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c01:	83 e0 04             	and    eax,0x4
c0019c04:	74 08                	je     c0019c0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019c06:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c13:	83 e0 08             	and    eax,0x8
c0019c16:	74 08                	je     c0019c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c18:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c25:	83 e0 01             	and    eax,0x1
c0019c28:	74 08                	je     c0019c32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c2a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019c32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c37:	83 e0 02             	and    eax,0x2
c0019c3a:	74 08                	je     c0019c44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019c3c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019c44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c49:	83 e0 04             	and    eax,0x4
c0019c4c:	74 08                	je     c0019c56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019c4e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019c56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c5b:	83 e0 08             	and    eax,0x8
c0019c5e:	74 08                	je     c0019c68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019c60:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019c68:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c6f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019c76:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c7e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c86:	83 ec 04             	sub    esp,0x4
c0019c89:	52                   	push   edx
c0019c8a:	50                   	push   eax
c0019c8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c8f:	50                   	push   eax
c0019c90:	e8 31 cf fe ff       	call   c0006bc6 <f_chmod>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c9f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019ca6:	85 c0                	test   eax,eax
c0019ca8:	75 07                	jne    c0019cb1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019caa:	b8 00 00 00 00       	mov    eax,0x0
c0019caf:	eb 05                	jmp    c0019cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019cb1:	b8 01 00 00 00       	mov    eax,0x1
c0019cb6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cbc:	c3                   	ret    
c0019cbd:	90                   	nop

c0019cbe <FAT::rename(char const*, char const*)>:
c0019cbe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019cc4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019ccc:	74 0a                	je     c0019cd8 <FAT::rename(char const*, char const*)+0x1a>
c0019cce:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019cd6:	75 0a                	jne    c0019ce2 <FAT::rename(char const*, char const*)+0x24>
c0019cd8:	b8 04 00 00 00       	mov    eax,0x4
c0019cdd:	e9 98 00 00 00       	jmp    c0019d7a <FAT::rename(char const*, char const*)+0xbc>
c0019ce2:	83 ec 08             	sub    esp,0x8
c0019ce5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cf3:	50                   	push   eax
c0019cf4:	e8 fb 6a fe ff       	call   c00007f4 <strcpy>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	83 ec 08             	sub    esp,0x8
c0019cff:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d06:	50                   	push   eax
c0019d07:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d0e:	e8 ed fa ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	83 ec 08             	sub    esp,0x8
c0019d19:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d20:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d24:	50                   	push   eax
c0019d25:	e8 ca 6a fe ff       	call   c00007f4 <strcpy>
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	83 ec 08             	sub    esp,0x8
c0019d30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d34:	50                   	push   eax
c0019d35:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d3c:	e8 bf fa ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	83 ec 08             	sub    esp,0x8
c0019d47:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d4b:	50                   	push   eax
c0019d4c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d53:	50                   	push   eax
c0019d54:	e8 7a cb fe ff       	call   c00068d3 <f_rename>
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d63:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d6a:	85 c0                	test   eax,eax
c0019d6c:	75 07                	jne    c0019d75 <FAT::rename(char const*, char const*)+0xb7>
c0019d6e:	b8 00 00 00 00       	mov    eax,0x0
c0019d73:	eb 05                	jmp    c0019d7a <FAT::rename(char const*, char const*)+0xbc>
c0019d75:	b8 01 00 00 00       	mov    eax,0x1
c0019d7a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d80:	c3                   	ret    
c0019d81:	90                   	nop

c0019d82 <FAT::mkdir(char const*)>:
c0019d82:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d88:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d90:	75 07                	jne    c0019d99 <FAT::mkdir(char const*)+0x17>
c0019d92:	b8 04 00 00 00       	mov    eax,0x4
c0019d97:	eb 5c                	jmp    c0019df5 <FAT::mkdir(char const*)+0x73>
c0019d99:	83 ec 08             	sub    esp,0x8
c0019d9c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019da3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019da7:	50                   	push   eax
c0019da8:	e8 47 6a fe ff       	call   c00007f4 <strcpy>
c0019dad:	83 c4 10             	add    esp,0x10
c0019db0:	83 ec 08             	sub    esp,0x8
c0019db3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019db7:	50                   	push   eax
c0019db8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dbf:	e8 3c fa ff ff       	call   c0019800 <FAT::fixFilepath(char*)>
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	83 ec 0c             	sub    esp,0xc
c0019dca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dce:	50                   	push   eax
c0019dcf:	e8 d3 c8 fe ff       	call   c00066a7 <f_mkdir>
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019dde:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019de5:	85 c0                	test   eax,eax
c0019de7:	75 07                	jne    c0019df0 <FAT::mkdir(char const*)+0x6e>
c0019de9:	b8 00 00 00 00       	mov    eax,0x0
c0019dee:	eb 05                	jmp    c0019df5 <FAT::mkdir(char const*)+0x73>
c0019df0:	b8 01 00 00 00       	mov    eax,0x1
c0019df5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dfb:	c3                   	ret    

c0019dfc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019dfc:	b8 08 00 00 00       	mov    eax,0x8
c0019e01:	c3                   	ret    

c0019e02 <ISO9660::seek(void*, unsigned long long)>:
c0019e02:	53                   	push   ebx
c0019e03:	b8 04 00 00 00       	mov    eax,0x4
c0019e08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e14:	85 d2                	test   edx,edx
c0019e16:	74 17                	je     c0019e2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e18:	89 c8                	mov    eax,ecx
c0019e1a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e1d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e20:	b8 01 00 00 00       	mov    eax,0x1
c0019e25:	73 08                	jae    c0019e2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e27:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019e2a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019e2d:	31 c0                	xor    eax,eax
c0019e2f:	5b                   	pop    ebx
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <ISO9660::tell(void*, unsigned long long*)>:
c0019e32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e3a:	85 d2                	test   edx,edx
c0019e3c:	74 12                	je     c0019e50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e3e:	85 c0                	test   eax,eax
c0019e40:	74 0e                	je     c0019e50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e42:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e45:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019e48:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e4b:	89 10                	mov    DWORD PTR [eax],edx
c0019e4d:	31 c0                	xor    eax,eax
c0019e4f:	c3                   	ret    
c0019e50:	b8 04 00 00 00       	mov    eax,0x4
c0019e55:	c3                   	ret    

c0019e56 <ISO9660::getName()>:
c0019e56:	b8 2c a5 03 c0       	mov    eax,0xc003a52c
c0019e5b:	c3                   	ret    

c0019e5c <ISO9660::stat(void*, unsigned long long*)>:
c0019e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e64:	85 d2                	test   edx,edx
c0019e66:	74 12                	je     c0019e7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e68:	85 c0                	test   eax,eax
c0019e6a:	74 0e                	je     c0019e7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019e6f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019e72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e75:	89 10                	mov    DWORD PTR [eax],edx
c0019e77:	31 c0                	xor    eax,eax
c0019e79:	c3                   	ret    
c0019e7a:	b8 04 00 00 00       	mov    eax,0x4
c0019e7f:	c3                   	ret    

c0019e80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e80:	b8 01 00 00 00       	mov    eax,0x1
c0019e85:	c3                   	ret    

c0019e86 <ISO9660::unlink(char const*)>:
c0019e86:	b8 01 00 00 00       	mov    eax,0x1
c0019e8b:	c3                   	ret    

c0019e8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e8c:	b8 01 00 00 00       	mov    eax,0x1
c0019e91:	c3                   	ret    

c0019e92 <ISO9660::rename(char const*, char const*)>:
c0019e92:	b8 01 00 00 00       	mov    eax,0x1
c0019e97:	c3                   	ret    

c0019e98 <ISO9660::mkdir(char const*)>:
c0019e98:	b8 01 00 00 00       	mov    eax,0x1
c0019e9d:	c3                   	ret    

c0019e9e <ISO9660::close(void*)>:
c0019e9e:	83 ec 0c             	sub    esp,0xc
c0019ea1:	b8 04 00 00 00       	mov    eax,0x4
c0019ea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019eaa:	85 d2                	test   edx,edx
c0019eac:	74 0e                	je     c0019ebc <ISO9660::close(void*)+0x1e>
c0019eae:	83 ec 0c             	sub    esp,0xc
c0019eb1:	52                   	push   edx
c0019eb2:	e8 f2 35 ff ff       	call   c000d4a9 <free>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	31 c0                	xor    eax,eax
c0019ebc:	83 c4 0c             	add    esp,0xc
c0019ebf:	c3                   	ret    

c0019ec0 <ISO9660::closeDir(void*)>:
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	b8 04 00 00 00       	mov    eax,0x4
c0019ec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ecc:	85 d2                	test   edx,edx
c0019ece:	74 0e                	je     c0019ede <ISO9660::closeDir(void*)+0x1e>
c0019ed0:	83 ec 0c             	sub    esp,0xc
c0019ed3:	52                   	push   edx
c0019ed4:	e8 d0 35 ff ff       	call   c000d4a9 <free>
c0019ed9:	83 c4 10             	add    esp,0x10
c0019edc:	31 c0                	xor    eax,eax
c0019ede:	83 c4 0c             	add    esp,0xc
c0019ee1:	c3                   	ret    

c0019ee2 <ISO9660::~ISO9660()>:
c0019ee2:	83 ec 0c             	sub    esp,0xc
c0019ee5:	ba 80 a5 03 c0       	mov    edx,0xc003a580
c0019eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eee:	89 10                	mov    DWORD PTR [eax],edx
c0019ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef4:	83 ec 0c             	sub    esp,0xc
c0019ef7:	50                   	push   eax
c0019ef8:	e8 79 87 ff ff       	call   c0012676 <Filesystem::~Filesystem()>
c0019efd:	83 c4 10             	add    esp,0x10
c0019f00:	90                   	nop
c0019f01:	83 c4 0c             	add    esp,0xc
c0019f04:	c3                   	ret    
c0019f05:	90                   	nop

c0019f06 <ISO9660::~ISO9660()>:
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	83 ec 0c             	sub    esp,0xc
c0019f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f10:	e8 cd ff ff ff       	call   c0019ee2 <ISO9660::~ISO9660()>
c0019f15:	83 c4 10             	add    esp,0x10
c0019f18:	83 ec 08             	sub    esp,0x8
c0019f1b:	6a 08                	push   0x8
c0019f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f21:	e8 37 85 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0019f26:	83 c4 10             	add    esp,0x10
c0019f29:	83 c4 0c             	add    esp,0xc
c0019f2c:	c3                   	ret    

c0019f2d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019f2d:	55                   	push   ebp
c0019f2e:	31 c9                	xor    ecx,ecx
c0019f30:	57                   	push   edi
c0019f31:	56                   	push   esi
c0019f32:	53                   	push   ebx
c0019f33:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019f37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f3b:	89 eb                	mov    ebx,ebp
c0019f3d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019f41:	39 ce                	cmp    esi,ecx
c0019f43:	7e 17                	jle    c0019f5c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019f45:	31 d2                	xor    edx,edx
c0019f47:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019f4b:	7d 13                	jge    c0019f60 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019f4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f51:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019f54:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019f57:	75 0d                	jne    c0019f66 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019f59:	42                   	inc    edx
c0019f5a:	eb eb                	jmp    c0019f47 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019f5c:	31 c0                	xor    eax,eax
c0019f5e:	eb 0a                	jmp    c0019f6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f60:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019f64:	eb 04                	jmp    c0019f6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f66:	41                   	inc    ecx
c0019f67:	43                   	inc    ebx
c0019f68:	eb d7                	jmp    c0019f41 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019f6a:	5b                   	pop    ebx
c0019f6b:	5e                   	pop    esi
c0019f6c:	5f                   	pop    edi
c0019f6d:	5d                   	pop    ebp
c0019f6e:	c3                   	ret    

c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019f6f:	56                   	push   esi
c0019f70:	53                   	push   ebx
c0019f71:	52                   	push   edx
c0019f72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f7e:	39 0d 80 c8 03 c0    	cmp    DWORD PTR ds:0xc003c880,ecx
c0019f84:	75 08                	jne    c0019f8e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019f86:	38 05 e4 b3 03 c0    	cmp    BYTE PTR ds:0xc003b3e4,al
c0019f8c:	74 2b                	je     c0019fb9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019f8e:	83 ec 0c             	sub    esp,0xc
c0019f91:	a2 e4 b3 03 c0       	mov    ds:0xc003b3e4,al
c0019f96:	68 a0 c8 03 c0       	push   0xc003c8a0
c0019f9b:	0f be c0             	movsx  eax,al
c0019f9e:	6a 01                	push   0x1
c0019fa0:	89 0d 80 c8 03 c0    	mov    DWORD PTR ds:0xc003c880,ecx
c0019fa6:	31 db                	xor    ebx,ebx
c0019fa8:	53                   	push   ebx
c0019fa9:	51                   	push   ecx
c0019faa:	ff 34 85 1c c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3de4]
c0019fb1:	e8 64 b2 ff ff       	call   c001521a <LogicalDisk::read(unsigned long long, int, void*)>
c0019fb6:	83 c4 20             	add    esp,0x20
c0019fb9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019fc1:	c7 44 24 14 a0 c8 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c8a0
c0019fc9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019fcd:	58                   	pop    eax
c0019fce:	5b                   	pop    ebx
c0019fcf:	5e                   	pop    esi
c0019fd0:	e9 8c 66 fe ff       	jmp    c0000661 <memcpy>
c0019fd5:	90                   	nop

c0019fd6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019fd6:	81 ec 10 08 00 00    	sub    esp,0x810
c0019fdc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019fe3:	83 c0 41             	add    eax,0x41
c0019fe6:	0f be c0             	movsx  eax,al
c0019fe9:	50                   	push   eax
c0019fea:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fee:	50                   	push   eax
c0019fef:	6a 10                	push   0x10
c0019ff1:	e8 79 ff ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	31 c0                	xor    eax,eax
c0019ffb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a000:	75 1d                	jne    c001a01f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a002:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a007:	75 16                	jne    c001a01f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a009:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a00e:	75 0f                	jne    c001a01f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a010:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a015:	75 08                	jne    c001a01f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a017:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a01c:	0f 94 c0             	sete   al
c001a01f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a025:	c3                   	ret    

c001a026 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a026:	55                   	push   ebp
c001a027:	57                   	push   edi
c001a028:	56                   	push   esi
c001a029:	53                   	push   ebx
c001a02a:	81 ec 34 08 00 00    	sub    esp,0x834
c001a030:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a037:	55                   	push   ebp
c001a038:	68 47 a5 03 c0       	push   0xc003a547
c001a03d:	e8 5c 2e ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a04d:	0f 84 06 02 00 00    	je     c001a259 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a053:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a05b:	0f 84 f8 01 00 00    	je     c001a259 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a061:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a068:	b8 01 00 00 00       	mov    eax,0x1
c001a06d:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a071:	0f 85 e7 01 00 00    	jne    c001a25e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a077:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a07a:	31 d2                	xor    edx,edx
c001a07c:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a07f:	89 e9                	mov    ecx,ebp
c001a081:	89 d3                	mov    ebx,edx
c001a083:	01 f1                	add    ecx,esi
c001a085:	11 fb                	adc    ebx,edi
c001a087:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a08b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a08f:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a096:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a099:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a09c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a0a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a0a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a0a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0ac:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a0b0:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a0b4:	72 19                	jb     c001a0cf <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a0b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0cd:	eb 13                	jmp    c001a0e2 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a0cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0d7:	29 f0                	sub    eax,esi
c001a0d9:	19 fa                	sbb    edx,edi
c001a0db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0e2:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a0e9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0ee:	53                   	push   ebx
c001a0ef:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a0f3:	c1 e0 0b             	shl    eax,0xb
c001a0f6:	01 c6                	add    esi,eax
c001a0f8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0ff:	11 d7                	adc    edi,edx
c001a101:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a105:	89 fa                	mov    edx,edi
c001a107:	50                   	push   eax
c001a108:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a10c:	50                   	push   eax
c001a10d:	89 f0                	mov    eax,esi
c001a10f:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a113:	50                   	push   eax
c001a114:	e8 56 fe ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a119:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a120:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a124:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a127:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a12b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a131:	83 c4 10             	add    esp,0x10
c001a134:	b8 00 08 00 00       	mov    eax,0x800
c001a139:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a13d:	29 d0                	sub    eax,edx
c001a13f:	39 c1                	cmp    ecx,eax
c001a141:	83 db 00             	sbb    ebx,0x0
c001a144:	7d 19                	jge    c001a15f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a146:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a14b:	75 16                	jne    c001a163 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a14d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a154:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a15a:	e9 f6 00 00 00       	jmp    c001a255 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a15f:	89 c5                	mov    ebp,eax
c001a161:	eb 03                	jmp    c001a166 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a163:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a166:	51                   	push   ecx
c001a167:	55                   	push   ebp
c001a168:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a16c:	50                   	push   eax
c001a16d:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a174:	e8 e8 64 fe ff       	call   c0000661 <memcpy>
c001a179:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a17d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a181:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a188:	01 e8                	add    eax,ebp
c001a18a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a18e:	89 e8                	mov    eax,ebp
c001a190:	99                   	cdq    
c001a191:	01 ee                	add    esi,ebp
c001a193:	11 d7                	adc    edi,edx
c001a195:	29 e9                	sub    ecx,ebp
c001a197:	19 d3                	sbb    ebx,edx
c001a199:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a19d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a1a9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a1ac:	b8 00 00 00 00       	mov    eax,0x0
c001a1b1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1b5:	7d 3f                	jge    c001a1f6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a1b7:	52                   	push   edx
c001a1b8:	89 fa                	mov    edx,edi
c001a1ba:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1c1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a1c5:	50                   	push   eax
c001a1c6:	89 f0                	mov    eax,esi
c001a1c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1cc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a1d0:	50                   	push   eax
c001a1d1:	e8 99 fd ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1d6:	81 c6 00 08 00 00    	add    esi,0x800
c001a1dc:	83 d7 00             	adc    edi,0x0
c001a1df:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a1e7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a1ef:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a1f4:	eb ab                	jmp    c001a1a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a1f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fa:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a1fd:	74 34                	je     c001a233 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a1ff:	89 fa                	mov    edx,edi
c001a201:	50                   	push   eax
c001a202:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a209:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a20d:	50                   	push   eax
c001a20e:	89 f0                	mov    eax,esi
c001a210:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a214:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a218:	55                   	push   ebp
c001a219:	50                   	push   eax
c001a21a:	e8 50 fd ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a21f:	83 c4 0c             	add    esp,0xc
c001a222:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a226:	55                   	push   ebp
c001a227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a22b:	e8 31 64 fe ff       	call   c0000661 <memcpy>
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a23a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a23e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a242:	89 38                	mov    DWORD PTR [eax],edi
c001a244:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a24b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a24f:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a252:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a255:	31 c0                	xor    eax,eax
c001a257:	eb 05                	jmp    c001a25e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a259:	b8 04 00 00 00       	mov    eax,0x4
c001a25e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a264:	5b                   	pop    ebx
c001a265:	5e                   	pop    esi
c001a266:	5f                   	pop    edi
c001a267:	5d                   	pop    ebp
c001a268:	c3                   	ret    
c001a269:	90                   	nop

c001a26a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a26a:	55                   	push   ebp
c001a26b:	57                   	push   edi
c001a26c:	56                   	push   esi
c001a26d:	53                   	push   ebx
c001a26e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a274:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a27b:	85 f6                	test   esi,esi
c001a27d:	0f 84 65 02 00 00    	je     c001a4e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a283:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a28b:	0f 84 57 02 00 00    	je     c001a4e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a291:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a294:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a297:	75 0a                	jne    c001a2a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a299:	b8 07 00 00 00       	mov    eax,0x7
c001a29e:	e9 4a 02 00 00       	jmp    c001a4ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a2a3:	50                   	push   eax
c001a2a4:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a2a8:	50                   	push   eax
c001a2a9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a2b0:	53                   	push   ebx
c001a2b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2b3:	c1 e0 0b             	shl    eax,0xb
c001a2b6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a2b9:	c1 e8 0b             	shr    eax,0xb
c001a2bc:	50                   	push   eax
c001a2bd:	e8 ad fc ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	89 c1                	mov    ecx,eax
c001a2ca:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a2cd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a2d3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a2d6:	84 db                	test   bl,bl
c001a2d8:	0f 85 90 00 00 00    	jne    c001a36e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a2de:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a2e4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a2ea:	29 c7                	sub    edi,eax
c001a2ec:	89 fb                	mov    ebx,edi
c001a2ee:	c1 fb 1f             	sar    ebx,0x1f
c001a2f1:	01 f8                	add    eax,edi
c001a2f3:	11 da                	adc    edx,ebx
c001a2f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2fd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a300:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a303:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a306:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a309:	89 04 24             	mov    DWORD PTR [esp],eax
c001a30c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a310:	89 d8                	mov    eax,ebx
c001a312:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a315:	ba 00 00 00 00       	mov    edx,0x0
c001a31a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a31e:	b8 00 00 00 00       	mov    eax,0x0
c001a323:	73 0b                	jae    c001a330 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a325:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a328:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a32c:	29 f8                	sub    eax,edi
c001a32e:	19 da                	sbb    edx,ebx
c001a330:	89 d3                	mov    ebx,edx
c001a332:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a335:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a338:	09 c3                	or     ebx,eax
c001a33a:	0f 84 59 ff ff ff    	je     c001a299 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a340:	55                   	push   ebp
c001a341:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a345:	50                   	push   eax
c001a346:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a34d:	53                   	push   ebx
c001a34e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a350:	c1 e0 0b             	shl    eax,0xb
c001a353:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a357:	c1 e8 0b             	shr    eax,0xb
c001a35a:	50                   	push   eax
c001a35b:	e8 0f fc ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a360:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a363:	83 c4 10             	add    esp,0x10
c001a366:	25 ff 07 00 00       	and    eax,0x7ff
c001a36b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a36e:	57                   	push   edi
c001a36f:	6a 28                	push   0x28
c001a371:	6a 00                	push   0x0
c001a373:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a377:	50                   	push   eax
c001a378:	e8 5b 63 fe ff       	call   c00006d8 <memset>
c001a37d:	31 d2                	xor    edx,edx
c001a37f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a382:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a388:	89 f8                	mov    eax,edi
c001a38a:	83 c0 21             	add    eax,0x21
c001a38d:	83 d2 00             	adc    edx,0x0
c001a390:	89 c7                	mov    edi,eax
c001a392:	89 d5                	mov    ebp,edx
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	31 c9                	xor    ecx,ecx
c001a399:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a3a0:	83 f9 28             	cmp    ecx,0x28
c001a3a3:	88 04 24             	mov    BYTE PTR [esp],al
c001a3a6:	0f 94 c2             	sete   dl
c001a3a9:	88 d0                	mov    al,dl
c001a3ab:	ba ff 07 00 00       	mov    edx,0x7ff
c001a3b0:	39 fa                	cmp    edx,edi
c001a3b2:	ba 00 00 00 00       	mov    edx,0x0
c001a3b7:	19 ea                	sbb    edx,ebp
c001a3b9:	0f 92 c2             	setb   dl
c001a3bc:	09 c2                	or     edx,eax
c001a3be:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a3c2:	0f 94 c0             	sete   al
c001a3c5:	08 d0                	or     al,dl
c001a3c7:	75 16                	jne    c001a3df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3c9:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a3cd:	74 10                	je     c001a3df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3cf:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a3d2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a3d6:	41                   	inc    ecx
c001a3d7:	83 c7 01             	add    edi,0x1
c001a3da:	83 d5 00             	adc    ebp,0x0
c001a3dd:	eb ba                	jmp    c001a399 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a3df:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a3ee:	57                   	push   edi
c001a3ef:	e8 0d 63 fe ff       	call   c0000701 <strlen>
c001a3f4:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a3fc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a400:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a407:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a40a:	5a                   	pop    edx
c001a40b:	25 ff 07 00 00       	and    eax,0x7ff
c001a410:	01 c8                	add    eax,ecx
c001a412:	59                   	pop    ecx
c001a413:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a419:	83 e0 02             	and    eax,0x2
c001a41c:	3c 01                	cmp    al,0x1
c001a41e:	19 c0                	sbb    eax,eax
c001a420:	83 c0 02             	add    eax,0x2
c001a423:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a427:	57                   	push   edi
c001a428:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a42c:	50                   	push   eax
c001a42d:	e8 c2 63 fe ff       	call   c00007f4 <strcpy>
c001a432:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	84 c0                	test   al,al
c001a43b:	75 21                	jne    c001a45e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a43d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a445:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a44d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a455:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a45c:	eb 28                	jmp    c001a486 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a45e:	fe c8                	dec    al
c001a460:	75 24                	jne    c001a486 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a462:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a46a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a472:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a47a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a481:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a486:	0f b6 fb             	movzx  edi,bl
c001a489:	31 db                	xor    ebx,ebx
c001a48b:	50                   	push   eax
c001a48c:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a493:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a497:	50                   	push   eax
c001a498:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a49f:	e8 bd 61 fe ff       	call   c0000661 <memcpy>
c001a4a4:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a4ab:	89 f9                	mov    ecx,edi
c001a4ad:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a4b3:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a4b6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a4b9:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a4bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a4bf:	83 c4 10             	add    esp,0x10
c001a4c2:	39 c7                	cmp    edi,eax
c001a4c4:	89 df                	mov    edi,ebx
c001a4c6:	19 d7                	sbb    edi,edx
c001a4c8:	72 10                	jb     c001a4da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a4ca:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a4d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a4d8:	eb 0a                	jmp    c001a4e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a4da:	29 c8                	sub    eax,ecx
c001a4dc:	19 da                	sbb    edx,ebx
c001a4de:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4e1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4e4:	31 c0                	xor    eax,eax
c001a4e6:	eb 05                	jmp    c001a4ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a4e8:	b8 04 00 00 00       	mov    eax,0x4
c001a4ed:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a4f3:	5b                   	pop    ebx
c001a4f4:	5e                   	pop    esi
c001a4f5:	5f                   	pop    edi
c001a4f6:	5d                   	pop    ebp
c001a4f7:	c3                   	ret    

c001a4f8 <readRoot(unsigned int*, unsigned int*, char)>:
c001a4f8:	81 ec 40 08 00 00    	sub    esp,0x840
c001a4fe:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a506:	50                   	push   eax
c001a507:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a50b:	50                   	push   eax
c001a50c:	6a 10                	push   0x10
c001a50e:	e8 5c fa ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a513:	83 c4 0c             	add    esp,0xc
c001a516:	6a 22                	push   0x22
c001a518:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a51f:	50                   	push   eax
c001a520:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a524:	50                   	push   eax
c001a525:	e8 37 61 fe ff       	call   c0000661 <memcpy>
c001a52a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a531:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a535:	89 10                	mov    DWORD PTR [eax],edx
c001a537:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a53e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a542:	89 10                	mov    DWORD PTR [eax],edx
c001a544:	b0 01                	mov    al,0x1
c001a546:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a54c:	c3                   	ret    

c001a54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a54d:	55                   	push   ebp
c001a54e:	57                   	push   edi
c001a54f:	56                   	push   esi
c001a550:	53                   	push   ebx
c001a551:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a557:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a55e:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a569:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a56d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a571:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a575:	75 03                	jne    c001a57a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a577:	83 c3 02             	add    ebx,0x2
c001a57a:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a57d:	75 03                	jne    c001a582 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a57f:	43                   	inc    ebx
c001a580:	eb f8                	jmp    c001a57a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a582:	51                   	push   ecx
c001a583:	68 00 01 00 00       	push   0x100
c001a588:	6a 00                	push   0x0
c001a58a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a58e:	50                   	push   eax
c001a58f:	e8 44 61 fe ff       	call   c00006d8 <memset>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	31 d2                	xor    edx,edx
c001a599:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a59c:	84 c0                	test   al,al
c001a59e:	74 21                	je     c001a5c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a5a0:	3c 2f                	cmp    al,0x2f
c001a5a2:	75 0b                	jne    c001a5af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a5a4:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a5a8:	bd 01 00 00 00       	mov    ebp,0x1
c001a5ad:	eb 14                	jmp    c001a5c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a5af:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a5b2:	80 f9 19             	cmp    cl,0x19
c001a5b5:	77 03                	ja     c001a5ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a5b7:	83 e8 20             	sub    eax,0x20
c001a5ba:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a5be:	42                   	inc    edx
c001a5bf:	eb d8                	jmp    c001a599 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a5c1:	31 ed                	xor    ebp,ebp
c001a5c3:	83 ec 0c             	sub    esp,0xc
c001a5c6:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a5cd:	e8 c7 2e ff ff       	call   c000d499 <malloc>
c001a5d2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5d9:	89 c6                	mov    esi,eax
c001a5db:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a5e1:	c1 ef 0b             	shr    edi,0xb
c001a5e4:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a5eb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a5ef:	83 c4 10             	add    esp,0x10
c001a5f2:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a5f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a5fb:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a602:	74 28                	je     c001a62c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a604:	52                   	push   edx
c001a605:	57                   	push   edi
c001a606:	50                   	push   eax
c001a607:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a60b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a612:	e8 58 f9 ff ff       	call   c0019f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a617:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a61b:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a622:	05 00 08 00 00       	add    eax,0x800
c001a627:	83 c4 10             	add    esp,0x10
c001a62a:	eb cb                	jmp    c001a5f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a62c:	83 ec 0c             	sub    esp,0xc
c001a62f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a633:	57                   	push   edi
c001a634:	e8 c8 60 fe ff       	call   c0000701 <strlen>
c001a639:	50                   	push   eax
c001a63a:	57                   	push   edi
c001a63b:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a642:	56                   	push   esi
c001a643:	e8 e5 f8 ff ff       	call   c0019f2d <__memmem(unsigned char*, int, unsigned char*, int)>
c001a648:	83 c4 20             	add    esp,0x20
c001a64b:	85 c0                	test   eax,eax
c001a64d:	75 13                	jne    c001a662 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a64f:	83 ec 0c             	sub    esp,0xc
c001a652:	56                   	push   esi
c001a653:	e8 51 2e ff ff       	call   c000d4a9 <free>
c001a658:	83 c4 10             	add    esp,0x10
c001a65b:	31 c0                	xor    eax,eax
c001a65d:	e9 b3 00 00 00       	jmp    c001a715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a662:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a666:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a66a:	c1 e7 08             	shl    edi,0x8
c001a66d:	c1 e2 10             	shl    edx,0x10
c001a670:	09 d7                	or     edi,edx
c001a672:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a676:	09 d7                	or     edi,edx
c001a678:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a67c:	c1 e2 18             	shl    edx,0x18
c001a67f:	09 d7                	or     edi,edx
c001a681:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a685:	89 d1                	mov    ecx,edx
c001a687:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a68b:	c1 e1 08             	shl    ecx,0x8
c001a68e:	c1 e2 10             	shl    edx,0x10
c001a691:	09 ca                	or     edx,ecx
c001a693:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a697:	09 ca                	or     edx,ecx
c001a699:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a69d:	c1 e1 18             	shl    ecx,0x18
c001a6a0:	09 ca                	or     edx,ecx
c001a6a2:	89 e9                	mov    ecx,ebp
c001a6a4:	84 c9                	test   cl,cl
c001a6a6:	74 3c                	je     c001a6e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a6a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a6ac:	83 ec 0c             	sub    esp,0xc
c001a6af:	56                   	push   esi
c001a6b0:	e8 f4 2d ff ff       	call   c000d4a9 <free>
c001a6b5:	83 c4 0c             	add    esp,0xc
c001a6b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6bf:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a6c4:	50                   	push   eax
c001a6c5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6cc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6d7:	52                   	push   edx
c001a6d8:	57                   	push   edi
c001a6d9:	53                   	push   ebx
c001a6da:	e8 6e fe ff ff       	call   c001a54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a6df:	83 c4 20             	add    esp,0x20
c001a6e2:	eb 31                	jmp    c001a715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6e4:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a6e7:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a6ee:	d0 e8                	shr    al,1
c001a6f0:	89 3b                	mov    DWORD PTR [ebx],edi
c001a6f2:	83 e0 01             	and    eax,0x1
c001a6f5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6fc:	83 ec 0c             	sub    esp,0xc
c001a6ff:	89 13                	mov    DWORD PTR [ebx],edx
c001a701:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a708:	89 03                	mov    DWORD PTR [ebx],eax
c001a70a:	56                   	push   esi
c001a70b:	e8 99 2d ff ff       	call   c000d4a9 <free>
c001a710:	83 c4 10             	add    esp,0x10
c001a713:	b0 01                	mov    al,0x1
c001a715:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a71b:	5b                   	pop    ebx
c001a71c:	5e                   	pop    esi
c001a71d:	5f                   	pop    edi
c001a71e:	5d                   	pop    ebp
c001a71f:	c3                   	ret    

c001a720 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a720:	55                   	push   ebp
c001a721:	57                   	push   edi
c001a722:	56                   	push   esi
c001a723:	53                   	push   ebx
c001a724:	83 ec 20             	sub    esp,0x20
c001a727:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a72b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a72f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a733:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a73b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a743:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a748:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a74e:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a754:	57                   	push   edi
c001a755:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a759:	50                   	push   eax
c001a75a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a75e:	50                   	push   eax
c001a75f:	e8 94 fd ff ff       	call   c001a4f8 <readRoot(unsigned int*, unsigned int*, char)>
c001a764:	5a                   	pop    edx
c001a765:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a769:	e8 93 5f fe ff       	call   c0000701 <strlen>
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	83 f8 03             	cmp    eax,0x3
c001a774:	77 17                	ja     c001a78d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77a:	89 03                	mov    DWORD PTR [ebx],eax
c001a77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a780:	89 06                	mov    DWORD PTR [esi],eax
c001a782:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a789:	b0 01                	mov    al,0x1
c001a78b:	eb 19                	jmp    c001a7a6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a78d:	50                   	push   eax
c001a78e:	55                   	push   ebp
c001a78f:	57                   	push   edi
c001a790:	56                   	push   esi
c001a791:	53                   	push   ebx
c001a792:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a796:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a79a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a79e:	e8 aa fd ff ff       	call   c001a54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a7a3:	83 c4 20             	add    esp,0x20
c001a7a6:	83 c4 1c             	add    esp,0x1c
c001a7a9:	5b                   	pop    ebx
c001a7aa:	5e                   	pop    esi
c001a7ab:	5f                   	pop    edi
c001a7ac:	5d                   	pop    ebp
c001a7ad:	c3                   	ret    

c001a7ae <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a7ae:	57                   	push   edi
c001a7af:	56                   	push   esi
c001a7b0:	53                   	push   ebx
c001a7b1:	83 ec 10             	sub    esp,0x10
c001a7b4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7bc:	85 ff                	test   edi,edi
c001a7be:	74 7b                	je     c001a83b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7c0:	85 f6                	test   esi,esi
c001a7c2:	74 77                	je     c001a83b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	6a 1c                	push   0x1c
c001a7c9:	e8 cb 2c ff ff       	call   c000d499 <malloc>
c001a7ce:	89 07                	mov    DWORD PTR [edi],eax
c001a7d0:	89 c3                	mov    ebx,eax
c001a7d2:	58                   	pop    eax
c001a7d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7d7:	50                   	push   eax
c001a7d8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a7db:	50                   	push   eax
c001a7dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7e0:	50                   	push   eax
c001a7e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7e5:	50                   	push   eax
c001a7e6:	56                   	push   esi
c001a7e7:	e8 34 ff ff ff       	call   c001a720 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a7ec:	83 c4 20             	add    esp,0x20
c001a7ef:	84 c0                	test   al,al
c001a7f1:	74 07                	je     c001a7fa <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a7f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a7f8:	74 0b                	je     c001a805 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a7fa:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a7fe:	b8 01 00 00 00       	mov    eax,0x1
c001a803:	eb 3b                	jmp    c001a840 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a809:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a80d:	89 03                	mov    DWORD PTR [ebx],eax
c001a80f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a81a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a828:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a82b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a832:	8a 06                	mov    al,BYTE PTR [esi]
c001a834:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a837:	31 c0                	xor    eax,eax
c001a839:	eb 05                	jmp    c001a840 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a83b:	b8 04 00 00 00       	mov    eax,0x4
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	5b                   	pop    ebx
c001a844:	5e                   	pop    esi
c001a845:	5f                   	pop    edi
c001a846:	c3                   	ret    
c001a847:	90                   	nop

c001a848 <ISO9660::exists(char const*)>:
c001a848:	83 ec 28             	sub    esp,0x28
c001a84b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a84f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a853:	52                   	push   edx
c001a854:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a857:	52                   	push   edx
c001a858:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a85c:	52                   	push   edx
c001a85d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a861:	52                   	push   edx
c001a862:	50                   	push   eax
c001a863:	e8 b8 fe ff ff       	call   c001a720 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a868:	83 c4 3c             	add    esp,0x3c
c001a86b:	c3                   	ret    

c001a86c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a86c:	56                   	push   esi
c001a86d:	53                   	push   ebx
c001a86e:	83 ec 14             	sub    esp,0x14
c001a871:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a875:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a879:	85 db                	test   ebx,ebx
c001a87b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a87f:	0f 94 c2             	sete   dl
c001a882:	85 f6                	test   esi,esi
c001a884:	0f 94 c0             	sete   al
c001a887:	08 c2                	or     dl,al
c001a889:	75 68                	jne    c001a8f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a88b:	85 c9                	test   ecx,ecx
c001a88d:	74 64                	je     c001a8f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a88f:	83 ec 0c             	sub    esp,0xc
c001a892:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a895:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a899:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a89f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8a6:	50                   	push   eax
c001a8a7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a8aa:	50                   	push   eax
c001a8ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8af:	50                   	push   eax
c001a8b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8b4:	50                   	push   eax
c001a8b5:	51                   	push   ecx
c001a8b6:	e8 65 fe ff ff       	call   c001a720 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8bb:	83 c4 20             	add    esp,0x20
c001a8be:	ba 01 00 00 00       	mov    edx,0x1
c001a8c3:	84 c0                	test   al,al
c001a8c5:	74 31                	je     c001a8f8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8d2:	89 03                	mov    DWORD PTR [ebx],eax
c001a8d4:	ba 00 00 00 00       	mov    edx,0x0
c001a8d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8dd:	85 c0                	test   eax,eax
c001a8df:	0f 95 06             	setne  BYTE PTR [esi]
c001a8e2:	74 14                	je     c001a8f8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8ea:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8f1:	eb 05                	jmp    c001a8f8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8f3:	ba 04 00 00 00       	mov    edx,0x4
c001a8f8:	83 c4 14             	add    esp,0x14
c001a8fb:	89 d0                	mov    eax,edx
c001a8fd:	5b                   	pop    ebx
c001a8fe:	5e                   	pop    esi
c001a8ff:	c3                   	ret    

c001a900 <ISO9660::openDir(char const*, void**)>:
c001a900:	57                   	push   edi
c001a901:	56                   	push   esi
c001a902:	53                   	push   ebx
c001a903:	83 ec 10             	sub    esp,0x10
c001a906:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a90a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a90e:	85 ff                	test   edi,edi
c001a910:	0f 84 95 00 00 00    	je     c001a9ab <ISO9660::openDir(char const*, void**)+0xab>
c001a916:	85 f6                	test   esi,esi
c001a918:	0f 84 8d 00 00 00    	je     c001a9ab <ISO9660::openDir(char const*, void**)+0xab>
c001a91e:	83 ec 0c             	sub    esp,0xc
c001a921:	6a 1c                	push   0x1c
c001a923:	e8 71 2b ff ff       	call   c000d499 <malloc>
c001a928:	89 07                	mov    DWORD PTR [edi],eax
c001a92a:	89 c3                	mov    ebx,eax
c001a92c:	59                   	pop    ecx
c001a92d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a931:	50                   	push   eax
c001a932:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a935:	50                   	push   eax
c001a936:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a93a:	50                   	push   eax
c001a93b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a93f:	50                   	push   eax
c001a940:	56                   	push   esi
c001a941:	e8 da fd ff ff       	call   c001a720 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a946:	83 c4 20             	add    esp,0x20
c001a949:	84 c0                	test   al,al
c001a94b:	74 07                	je     c001a954 <ISO9660::openDir(char const*, void**)+0x54>
c001a94d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a952:	75 21                	jne    c001a975 <ISO9660::openDir(char const*, void**)+0x75>
c001a954:	0f b6 c0             	movzx  eax,al
c001a957:	52                   	push   edx
c001a958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a95c:	50                   	push   eax
c001a95d:	68 5a a5 03 c0       	push   0xc003a55a
c001a962:	e8 37 25 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001a967:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a96b:	83 c4 10             	add    esp,0x10
c001a96e:	b8 01 00 00 00       	mov    eax,0x1
c001a973:	eb 3b                	jmp    c001a9b0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a979:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a97d:	89 03                	mov    DWORD PTR [ebx],eax
c001a97f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a98a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a991:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a998:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a99b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a9a2:	8a 06                	mov    al,BYTE PTR [esi]
c001a9a4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a9a7:	31 c0                	xor    eax,eax
c001a9a9:	eb 05                	jmp    c001a9b0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9ab:	b8 04 00 00 00       	mov    eax,0x4
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	5b                   	pop    ebx
c001a9b4:	5e                   	pop    esi
c001a9b5:	5f                   	pop    edi
c001a9b6:	c3                   	ret    
c001a9b7:	90                   	nop

c001a9b8 <ISO9660::ISO9660()>:
c001a9b8:	83 ec 0c             	sub    esp,0xc
c001a9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9bf:	83 ec 0c             	sub    esp,0xc
c001a9c2:	50                   	push   eax
c001a9c3:	e8 8a 7c ff ff       	call   c0012652 <Filesystem::Filesystem()>
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	ba 80 a5 03 c0       	mov    edx,0xc003a580
c001a9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d4:	89 10                	mov    DWORD PTR [eax],edx
c001a9d6:	90                   	nop
c001a9d7:	83 c4 0c             	add    esp,0xc
c001a9da:	c3                   	ret    
c001a9db:	90                   	nop

c001a9dc <SoundChannel::~SoundChannel()>:
c001a9dc:	83 ec 0c             	sub    esp,0xc
c001a9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9e6:	83 ec 0c             	sub    esp,0xc
c001a9e9:	50                   	push   eax
c001a9ea:	e8 ba 2a ff ff       	call   c000d4a9 <free>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	90                   	nop
c001a9f3:	83 c4 0c             	add    esp,0xc
c001a9f6:	c3                   	ret    
c001a9f7:	90                   	nop

c001a9f8 <SoundChannel::setSpeed(float)>:
c001a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fc:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aa00:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aa03:	c3                   	ret    

c001aa04 <SoundChannel::getSpeed()>:
c001aa04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa08:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa0b:	c3                   	ret    

c001aa0c <SoundChannel::setVolume(int)>:
c001aa0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa10:	83 f8 64             	cmp    eax,0x64
c001aa13:	7e 05                	jle    c001aa1a <SoundChannel::setVolume(int)+0xe>
c001aa15:	b8 64 00 00 00       	mov    eax,0x64
c001aa1a:	85 c0                	test   eax,eax
c001aa1c:	79 02                	jns    c001aa20 <SoundChannel::setVolume(int)+0x14>
c001aa1e:	31 c0                	xor    eax,eax
c001aa20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa24:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aa27:	c3                   	ret    

c001aa28 <SoundChannel::getVolume()>:
c001aa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa2f:	c3                   	ret    

c001aa30 <SoundChannel::pause()>:
c001aa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa34:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aa38:	c3                   	ret    
c001aa39:	90                   	nop

c001aa3a <SoundChannel::SoundChannel(int, int, int, int)>:
c001aa3a:	83 ec 1c             	sub    esp,0x1c
c001aa3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa41:	e8 ea ff ff ff       	call   c001aa30 <SoundChannel::pause()>
c001aa46:	83 c4 04             	add    esp,0x4
c001aa49:	6a 50                	push   0x50
c001aa4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa4f:	e8 b8 ff ff ff       	call   c001aa0c <SoundChannel::setVolume(int)>
c001aa54:	83 c4 08             	add    esp,0x8
c001aa57:	d9 e8                	fld1   
c001aa59:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aa5d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aa60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa64:	e8 8f ff ff ff       	call   c001a9f8 <SoundChannel::setSpeed(float)>
c001aa69:	83 c4 08             	add    esp,0x8
c001aa6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa74:	89 10                	mov    DWORD PTR [eax],edx
c001aa76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa85:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa89:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa8c:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aa91:	75 23                	jne    c001aab6 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa97:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aaa0:	0f af c2             	imul   eax,edx
c001aaa3:	85 c0                	test   eax,eax
c001aaa5:	79 03                	jns    c001aaaa <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aaa7:	83 c0 03             	add    eax,0x3
c001aaaa:	c1 f8 02             	sar    eax,0x2
c001aaad:	05 a0 0f 00 00       	add    eax,0xfa0
c001aab2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aabe:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001aac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001aacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad0:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aadb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aade:	c1 e0 02             	shl    eax,0x2
c001aae1:	83 ec 0c             	sub    esp,0xc
c001aae4:	50                   	push   eax
c001aae5:	e8 af 29 ff ff       	call   c000d499 <malloc>
c001aaea:	83 c4 10             	add    esp,0x10
c001aaed:	89 c2                	mov    edx,eax
c001aaef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaf3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aaf6:	83 ec 04             	sub    esp,0x4
c001aaf9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aafd:	50                   	push   eax
c001aafe:	6a 01                	push   0x1
c001ab00:	6a 04                	push   0x4
c001ab02:	e8 61 e0 fe ff       	call   c0008b68 <src_new>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	89 c2                	mov    edx,eax
c001ab0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab17:	85 c0                	test   eax,eax
c001ab19:	74 10                	je     c001ab2b <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab1b:	83 ec 0c             	sub    esp,0xc
c001ab1e:	68 dc a5 03 c0       	push   0xc003a5dc
c001ab23:	e8 94 24 ff ff       	call   c000cfbc <panic(char const*)>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	90                   	nop
c001ab2c:	83 c4 1c             	add    esp,0x1c
c001ab2f:	c3                   	ret    

c001ab30 <SoundChannel::play()>:
c001ab30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab34:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ab38:	c3                   	ret    
c001ab39:	90                   	nop

c001ab3a <SoundChannel::paused()>:
c001ab3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab3e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ab41:	c3                   	ret    

c001ab42 <SoundChannel::getSampleRate()>:
c001ab42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab46:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab48:	c3                   	ret    
c001ab49:	90                   	nop

c001ab4a <SoundChannel::getBits()>:
c001ab4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab51:	c3                   	ret    

c001ab52 <SoundChannel::getBufferUsed()>:
c001ab52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab59:	c3                   	ret    

c001ab5a <SoundChannel::getBufferSize()>:
c001ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab5e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab61:	c3                   	ret    

c001ab62 <SoundChannel::unbuffer(float*, int, int)>:
c001ab62:	53                   	push   ebx
c001ab63:	83 ec 40             	sub    esp,0x40
c001ab66:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ab6a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ab72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab75:	db 03                	fild   DWORD PTR [ebx]
c001ab77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab7b:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ab7f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab82:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ab85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab89:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ab8d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aba1:	50                   	push   eax
c001aba2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001aba5:	e8 78 dc fe ff       	call   c0008822 <src_process>
c001abaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001abae:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001abb1:	83 c4 0c             	add    esp,0xc
c001abb4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abb7:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001abba:	29 d0                	sub    eax,edx
c001abbc:	c1 e0 02             	shl    eax,0x2
c001abbf:	50                   	push   eax
c001abc0:	8d 04 91             	lea    eax,[ecx+edx*4]
c001abc3:	50                   	push   eax
c001abc4:	51                   	push   ecx
c001abc5:	e8 2a 5a fe ff       	call   c00005f4 <memmove>
c001abca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abce:	83 c4 48             	add    esp,0x48
c001abd1:	5b                   	pop    ebx
c001abd2:	c3                   	ret    
c001abd3:	90                   	nop

c001abd4 <SoundChannel::buffer8(unsigned char*, int)>:
c001abd4:	53                   	push   ebx
c001abd5:	31 c0                	xor    eax,eax
c001abd7:	83 ec 08             	sub    esp,0x8
c001abda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abde:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001abe1:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001abe4:	74 35                	je     c001ac1b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abe6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001abea:	7d 2f                	jge    c001ac1b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001abf0:	d9 05 f8 a5 03 c0    	fld    DWORD PTR ds:0xc003a5f8
c001abf6:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001abfa:	40                   	inc    eax
c001abfb:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ac00:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ac03:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ac07:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac0a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac0d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac10:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac13:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac16:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac19:	eb c9                	jmp    c001abe4 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac1b:	83 c4 08             	add    esp,0x8
c001ac1e:	5b                   	pop    ebx
c001ac1f:	c3                   	ret    

c001ac20 <SoundDevice::SoundDevice(char const*)>:
c001ac20:	83 ec 1c             	sub    esp,0x1c
c001ac23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac27:	83 ec 08             	sub    esp,0x8
c001ac2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac2e:	50                   	push   eax
c001ac2f:	e8 14 8d ff ff       	call   c0013948 <Device::Device(char const*)>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	ba 04 a6 03 c0       	mov    edx,0xc003a604
c001ac3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac40:	89 10                	mov    DWORD PTR [eax],edx
c001ac42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac46:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac54:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ac5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac66:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac6b:	7f 19                	jg     c001ac86 <SoundDevice::SoundDevice(char const*)+0x66>
c001ac6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac75:	83 c2 54             	add    edx,0x54
c001ac78:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ac80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac84:	eb e0                	jmp    c001ac66 <SoundDevice::SoundDevice(char const*)+0x46>
c001ac86:	90                   	nop
c001ac87:	83 c4 1c             	add    esp,0x1c
c001ac8a:	c3                   	ret    
c001ac8b:	90                   	nop

c001ac8c <SoundDevice::~SoundDevice()>:
c001ac8c:	53                   	push   ebx
c001ac8d:	83 ec 18             	sub    esp,0x18
c001ac90:	ba 04 a6 03 c0       	mov    edx,0xc003a604
c001ac95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac99:	89 10                	mov    DWORD PTR [eax],edx
c001ac9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aca3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001aca8:	7f 46                	jg     c001acf0 <SoundDevice::~SoundDevice()+0x64>
c001acaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acb2:	83 c2 54             	add    edx,0x54
c001acb5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001acb9:	85 c0                	test   eax,eax
c001acbb:	74 2d                	je     c001acea <SoundDevice::~SoundDevice()+0x5e>
c001acbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acc5:	83 c2 54             	add    edx,0x54
c001acc8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001accc:	85 db                	test   ebx,ebx
c001acce:	74 1a                	je     c001acea <SoundDevice::~SoundDevice()+0x5e>
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	53                   	push   ebx
c001acd4:	e8 03 fd ff ff       	call   c001a9dc <SoundChannel::~SoundChannel()>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	83 ec 08             	sub    esp,0x8
c001acdf:	6a 2c                	push   0x2c
c001ace1:	53                   	push   ebx
c001ace2:	e8 76 77 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acee:	eb b3                	jmp    c001aca3 <SoundDevice::~SoundDevice()+0x17>
c001acf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	50                   	push   eax
c001acf8:	e8 fd 88 ff ff       	call   c00135fa <Device::~Device()>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	90                   	nop
c001ad01:	83 c4 18             	add    esp,0x18
c001ad04:	5b                   	pop    ebx
c001ad05:	c3                   	ret    

c001ad06 <SoundDevice::~SoundDevice()>:
c001ad06:	83 ec 0c             	sub    esp,0xc
c001ad09:	83 ec 0c             	sub    esp,0xc
c001ad0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad10:	e8 77 ff ff ff       	call   c001ac8c <SoundDevice::~SoundDevice()>
c001ad15:	83 c4 10             	add    esp,0x10
c001ad18:	83 ec 08             	sub    esp,0x8
c001ad1b:	68 e4 01 00 00       	push   0x1e4
c001ad20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad24:	e8 34 77 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	83 c4 0c             	add    esp,0xc
c001ad2f:	c3                   	ret    

c001ad30 <SoundDevice::getFreeChannelNum()>:
c001ad30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad34:	31 c0                	xor    eax,eax
c001ad36:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ad3e:	74 09                	je     c001ad49 <SoundDevice::getFreeChannelNum()+0x19>
c001ad40:	40                   	inc    eax
c001ad41:	83 f8 20             	cmp    eax,0x20
c001ad44:	75 f0                	jne    c001ad36 <SoundDevice::getFreeChannelNum()+0x6>
c001ad46:	83 c8 ff             	or     eax,0xffffffff
c001ad49:	c3                   	ret    

c001ad4a <SoundDevice::addChannel(SoundChannel*)>:
c001ad4a:	56                   	push   esi
c001ad4b:	53                   	push   ebx
c001ad4c:	51                   	push   ecx
c001ad4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad55:	53                   	push   ebx
c001ad56:	e8 d5 ff ff ff       	call   c001ad30 <SoundDevice::getFreeChannelNum()>
c001ad5b:	5a                   	pop    edx
c001ad5c:	83 f8 ff             	cmp    eax,0xffffffff
c001ad5f:	74 51                	je     c001adb2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad61:	85 f6                	test   esi,esi
c001ad63:	74 4d                	je     c001adb2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad65:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ad6c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ad73:	75 30                	jne    c001ada5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ad75:	83 ec 0c             	sub    esp,0xc
c001ad78:	56                   	push   esi
c001ad79:	e8 c4 fd ff ff       	call   c001ab42 <SoundChannel::getSampleRate()>
c001ad7e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ad84:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad87:	e8 be fd ff ff       	call   c001ab4a <SoundChannel::getBits()>
c001ad8c:	83 c4 0c             	add    esp,0xc
c001ad8f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ad95:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad97:	50                   	push   eax
c001ad98:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ad9e:	53                   	push   ebx
c001ad9f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001adab:	b8 01 00 00 00       	mov    eax,0x1
c001adb0:	eb 03                	jmp    c001adb5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001adb2:	83 c8 ff             	or     eax,0xffffffff
c001adb5:	5a                   	pop    edx
c001adb6:	5b                   	pop    ebx
c001adb7:	5e                   	pop    esi
c001adb8:	c3                   	ret    
c001adb9:	90                   	nop

c001adba <SoundDevice::removeChannel(int)>:
c001adba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adc2:	83 fa 1f             	cmp    edx,0x1f
c001adc5:	77 23                	ja     c001adea <SoundDevice::removeChannel(int)+0x30>
c001adc7:	8d 14 90             	lea    edx,[eax+edx*4]
c001adca:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001add1:	74 17                	je     c001adea <SoundDevice::removeChannel(int)+0x30>
c001add3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001addd:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ade3:	75 05                	jne    c001adea <SoundDevice::removeChannel(int)+0x30>
c001ade5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ade7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001adea:	c3                   	ret    
c001adeb:	90                   	nop

c001adec <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001adec:	56                   	push   esi
c001aded:	53                   	push   ebx
c001adee:	31 db                	xor    ebx,ebx
c001adf0:	83 ec 14             	sub    esp,0x14
c001adf3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001adf7:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001adfb:	7d 55                	jge    c001ae52 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001adfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae01:	d9 e8                	fld1   
c001ae03:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ae06:	d8 0d 34 a6 03 c0    	fmul   DWORD PTR ds:0xc003a634
c001ae0c:	d8 0d 38 a6 03 c0    	fmul   DWORD PTR ds:0xc003a638
c001ae12:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae16:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae1a:	d8 15 3c a6 03 c0    	fcom   DWORD PTR ds:0xc003a63c
c001ae20:	df e0                	fnstsw ax
c001ae22:	9e                   	sahf   
c001ae23:	72 08                	jb     c001ae2d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ae25:	dd d8                	fstp   st(0)
c001ae27:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ae2b:	eb 22                	jmp    c001ae4f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae2d:	d9 ee                	fldz   
c001ae2f:	d8 d9                	fcomp  st(1)
c001ae31:	df e0                	fnstsw ax
c001ae33:	9e                   	sahf   
c001ae34:	72 08                	jb     c001ae3e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ae36:	dd d8                	fstp   st(0)
c001ae38:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ae3c:	eb 11                	jmp    c001ae4f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae3e:	83 ec 10             	sub    esp,0x10
c001ae41:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae44:	e8 c3 3a 00 00       	call   c001e90c <lrintf>
c001ae49:	83 c4 10             	add    esp,0x10
c001ae4c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ae4f:	43                   	inc    ebx
c001ae50:	eb a5                	jmp    c001adf7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ae52:	83 c4 14             	add    esp,0x14
c001ae55:	5b                   	pop    ebx
c001ae56:	5e                   	pop    esi
c001ae57:	c3                   	ret    

c001ae58 <SoundDevice::getAudio(int, float*, float*)>:
c001ae58:	55                   	push   ebp
c001ae59:	57                   	push   edi
c001ae5a:	56                   	push   esi
c001ae5b:	53                   	push   ebx
c001ae5c:	31 db                	xor    ebx,ebx
c001ae5e:	83 ec 20             	sub    esp,0x20
c001ae61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae65:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae69:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ae6d:	c1 e0 02             	shl    eax,0x2
c001ae70:	50                   	push   eax
c001ae71:	6a 00                	push   0x0
c001ae73:	55                   	push   ebp
c001ae74:	e8 5f 58 fe ff       	call   c00006d8 <memset>
c001ae79:	83 c4 10             	add    esp,0x10
c001ae7c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae80:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ae87:	85 c0                	test   eax,eax
c001ae89:	0f 84 94 00 00 00    	je     c001af23 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae8f:	83 ec 0c             	sub    esp,0xc
c001ae92:	50                   	push   eax
c001ae93:	e8 a2 fc ff ff       	call   c001ab3a <SoundChannel::paused()>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	84 c0                	test   al,al
c001ae9d:	0f 85 80 00 00 00    	jne    c001af23 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aea3:	83 ec 0c             	sub    esp,0xc
c001aea6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aead:	e8 76 fb ff ff       	call   c001aa28 <SoundChannel::getVolume()>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	85 c0                	test   eax,eax
c001aeb7:	74 6a                	je     c001af23 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aeb9:	83 ec 0c             	sub    esp,0xc
c001aebc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aec3:	e8 60 fb ff ff       	call   c001aa28 <SoundChannel::getVolume()>
c001aec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aecc:	d9 05 40 a6 03 c0    	fld    DWORD PTR ds:0xc003a640
c001aed2:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001aed6:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001aeda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aede:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001aee4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001aee8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aeef:	e8 6e fc ff ff       	call   c001ab62 <SoundChannel::unbuffer(float*, int, int)>
c001aef4:	83 c4 20             	add    esp,0x20
c001aef7:	31 d2                	xor    edx,edx
c001aef9:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001aefd:	39 c2                	cmp    edx,eax
c001aeff:	7d 1a                	jge    c001af1b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001af01:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001af05:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001af08:	d8 c9                	fmul   st,st(1)
c001af0a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af10:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af14:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af18:	42                   	inc    edx
c001af19:	eb e2                	jmp    c001aefd <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af1b:	dd d8                	fstp   st(0)
c001af1d:	39 c7                	cmp    edi,eax
c001af1f:	7e 02                	jle    c001af23 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af21:	89 c7                	mov    edi,eax
c001af23:	43                   	inc    ebx
c001af24:	83 fb 20             	cmp    ebx,0x20
c001af27:	0f 85 53 ff ff ff    	jne    c001ae80 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001af2d:	83 c4 1c             	add    esp,0x1c
c001af30:	89 f8                	mov    eax,edi
c001af32:	5b                   	pop    ebx
c001af33:	5e                   	pop    esi
c001af34:	5f                   	pop    edi
c001af35:	5d                   	pop    ebp
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <PCI::open(int, int, void*)>:
c001af38:	83 ec 18             	sub    esp,0x18
c001af3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af3f:	8b 10                	mov    edx,DWORD PTR [eax]
c001af41:	50                   	push   eax
c001af42:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af45:	31 c0                	xor    eax,eax
c001af47:	83 c4 1c             	add    esp,0x1c
c001af4a:	c3                   	ret    
c001af4b:	90                   	nop

c001af4c <PCI::close(int, int, void*)>:
c001af4c:	31 c0                	xor    eax,eax
c001af4e:	c3                   	ret    
c001af4f:	90                   	nop

c001af50 <PCI::PCI()>:
c001af50:	83 ec 0c             	sub    esp,0xc
c001af53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af57:	83 ec 08             	sub    esp,0x8
c001af5a:	68 44 a6 03 c0       	push   0xc003a644
c001af5f:	50                   	push   eax
c001af60:	e8 6f 80 ff ff       	call   c0012fd4 <Bus::Bus(char const*)>
c001af65:	83 c4 10             	add    esp,0x10
c001af68:	ba f0 a6 03 c0       	mov    edx,0xc003a6f0
c001af6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af71:	89 10                	mov    DWORD PTR [eax],edx
c001af73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af7d:	0f b6 d0             	movzx  edx,al
c001af80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af84:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af95:	0f b6 d0             	movzx  edx,al
c001af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001afa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afab:	8d 50 01             	lea    edx,[eax+0x1]
c001afae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afb2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001afb8:	0f b6 d0             	movzx  edx,al
c001afbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001afc3:	83 c9 c0             	or     ecx,0xffffffc0
c001afc6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001afca:	90                   	nop
c001afcb:	83 c4 0c             	add    esp,0xc
c001afce:	c3                   	ret    
c001afcf:	90                   	nop

c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001afd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afd9:	89 ca                	mov    edx,ecx
c001afdb:	c1 e0 10             	shl    eax,0x10
c001afde:	81 e2 fc 00 00 00    	and    edx,0xfc
c001afe4:	09 d0                	or     eax,edx
c001afe6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001afeb:	c1 e2 08             	shl    edx,0x8
c001afee:	09 d0                	or     eax,edx
c001aff0:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001aff5:	c1 e2 0b             	shl    edx,0xb
c001aff8:	09 d0                	or     eax,edx
c001affa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afff:	0d 00 00 00 80       	or     eax,0x80000000
c001b004:	ef                   	out    dx,eax
c001b005:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b00a:	ed                   	in     eax,dx
c001b00b:	83 e1 02             	and    ecx,0x2
c001b00e:	0f b6 c9             	movzx  ecx,cl
c001b011:	c1 e1 03             	shl    ecx,0x3
c001b014:	d3 e8                	shr    eax,cl
c001b016:	c3                   	ret    
c001b017:	90                   	nop

c001b018 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b018:	6a 00                	push   0x0
c001b01a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b01f:	50                   	push   eax
c001b020:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b025:	50                   	push   eax
c001b026:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b02b:	50                   	push   eax
c001b02c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b030:	e8 9b ff ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b035:	83 c4 14             	add    esp,0x14
c001b038:	c3                   	ret    
c001b039:	90                   	nop

c001b03a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b03a:	6a 0e                	push   0xe
c001b03c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b041:	50                   	push   eax
c001b042:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b047:	50                   	push   eax
c001b048:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b04d:	50                   	push   eax
c001b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b052:	e8 79 ff ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b057:	83 c4 14             	add    esp,0x14
c001b05a:	0f b6 c0             	movzx  eax,al
c001b05d:	c3                   	ret    

c001b05e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b05e:	55                   	push   ebp
c001b05f:	57                   	push   edi
c001b060:	56                   	push   esi
c001b061:	53                   	push   ebx
c001b062:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b067:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b06c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b071:	6a 0a                	push   0xa
c001b073:	56                   	push   esi
c001b074:	55                   	push   ebp
c001b075:	57                   	push   edi
c001b076:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b07a:	e8 51 ff ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b07f:	6a 0a                	push   0xa
c001b081:	89 c3                	mov    ebx,eax
c001b083:	56                   	push   esi
c001b084:	0f b6 db             	movzx  ebx,bl
c001b087:	55                   	push   ebp
c001b088:	57                   	push   edi
c001b089:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b08d:	e8 3e ff ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b092:	83 c4 28             	add    esp,0x28
c001b095:	25 00 ff 00 00       	and    eax,0xff00
c001b09a:	09 d8                	or     eax,ebx
c001b09c:	5b                   	pop    ebx
c001b09d:	5e                   	pop    esi
c001b09e:	5f                   	pop    edi
c001b09f:	5d                   	pop    ebp
c001b0a0:	c3                   	ret    
c001b0a1:	90                   	nop

c001b0a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b0a2:	6a 08                	push   0x8
c001b0a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0a9:	50                   	push   eax
c001b0aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0af:	50                   	push   eax
c001b0b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0b5:	50                   	push   eax
c001b0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0ba:	e8 11 ff ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0bf:	83 c4 14             	add    esp,0x14
c001b0c2:	0f b6 c4             	movzx  eax,ah
c001b0c5:	c3                   	ret    

c001b0c6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b0c6:	6a 08                	push   0x8
c001b0c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0cd:	50                   	push   eax
c001b0ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0d3:	50                   	push   eax
c001b0d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0d9:	50                   	push   eax
c001b0da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0de:	e8 ed fe ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e3:	83 c4 14             	add    esp,0x14
c001b0e6:	c3                   	ret    
c001b0e7:	90                   	nop

c001b0e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0e8:	6a 3c                	push   0x3c
c001b0ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0ef:	50                   	push   eax
c001b0f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0f5:	50                   	push   eax
c001b0f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0fb:	50                   	push   eax
c001b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b100:	e8 cb fe ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b105:	83 c4 14             	add    esp,0x14
c001b108:	c3                   	ret    
c001b109:	90                   	nop

c001b10a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b10a:	6a 18                	push   0x18
c001b10c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b111:	50                   	push   eax
c001b112:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b117:	50                   	push   eax
c001b118:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b11d:	50                   	push   eax
c001b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b122:	e8 a9 fe ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b127:	83 c4 14             	add    esp,0x14
c001b12a:	0f b6 c4             	movzx  eax,ah
c001b12d:	c3                   	ret    

c001b12e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b12e:	55                   	push   ebp
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	50                   	push   eax
c001b133:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b137:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b13c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b141:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b146:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b14d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b150:	83 c3 10             	add    ebx,0x10
c001b153:	0f b6 c0             	movzx  eax,al
c001b156:	0f b6 db             	movzx  ebx,bl
c001b159:	50                   	push   eax
c001b15a:	51                   	push   ecx
c001b15b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b15f:	57                   	push   edi
c001b160:	55                   	push   ebp
c001b161:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b165:	e8 66 fe ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b16a:	53                   	push   ebx
c001b16b:	89 c6                	mov    esi,eax
c001b16d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b171:	c1 e6 10             	shl    esi,0x10
c001b174:	51                   	push   ecx
c001b175:	57                   	push   edi
c001b176:	55                   	push   ebp
c001b177:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b17b:	e8 50 fe ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b180:	83 c4 2c             	add    esp,0x2c
c001b183:	0f b7 c0             	movzx  eax,ax
c001b186:	5b                   	pop    ebx
c001b187:	09 f0                	or     eax,esi
c001b189:	5e                   	pop    esi
c001b18a:	5f                   	pop    edi
c001b18b:	5d                   	pop    ebp
c001b18c:	c3                   	ret    
c001b18d:	90                   	nop

c001b18e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b18e:	53                   	push   ebx
c001b18f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b194:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b199:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b19d:	c1 e1 10             	shl    ecx,0x10
c001b1a0:	25 fc 00 00 00       	and    eax,0xfc
c001b1a5:	09 c1                	or     ecx,eax
c001b1a7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1ac:	c1 e0 08             	shl    eax,0x8
c001b1af:	09 c1                	or     ecx,eax
c001b1b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b1b6:	c1 e0 0b             	shl    eax,0xb
c001b1b9:	09 c1                	or     ecx,eax
c001b1bb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b1c1:	89 c8                	mov    eax,ecx
c001b1c3:	ef                   	out    dx,eax
c001b1c4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1c9:	ed                   	in     eax,dx
c001b1ca:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b1cf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b1d4:	74 0a                	je     c001b1e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b1d6:	0f b7 d8             	movzx  ebx,ax
c001b1d9:	89 d0                	mov    eax,edx
c001b1db:	c1 e0 10             	shl    eax,0x10
c001b1de:	eb 05                	jmp    c001b1e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b1e0:	66 31 c0             	xor    ax,ax
c001b1e3:	89 d3                	mov    ebx,edx
c001b1e5:	09 c3                	or     ebx,eax
c001b1e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1ec:	89 c8                	mov    eax,ecx
c001b1ee:	ef                   	out    dx,eax
c001b1ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1f4:	89 d8                	mov    eax,ebx
c001b1f6:	ef                   	out    dx,eax
c001b1f7:	5b                   	pop    ebx
c001b1f8:	c3                   	ret    
c001b1f9:	90                   	nop

c001b1fa <PCI::checkBus(unsigned char)>:
c001b1fa:	56                   	push   esi
c001b1fb:	53                   	push   ebx
c001b1fc:	31 db                	xor    ebx,ebx
c001b1fe:	51                   	push   ecx
c001b1ff:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b204:	52                   	push   edx
c001b205:	53                   	push   ebx
c001b206:	43                   	inc    ebx
c001b207:	56                   	push   esi
c001b208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b20c:	e8 4d 03 00 00       	call   c001b55e <PCI::checkDevice(unsigned char, unsigned char)>
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	83 fb 20             	cmp    ebx,0x20
c001b217:	75 eb                	jne    c001b204 <PCI::checkBus(unsigned char)+0xa>
c001b219:	58                   	pop    eax
c001b21a:	5b                   	pop    ebx
c001b21b:	5e                   	pop    esi
c001b21c:	c3                   	ret    
c001b21d:	90                   	nop

c001b21e <PCI::foundDevice(PCIDeviceInfo)>:
c001b21e:	55                   	push   ebp
c001b21f:	57                   	push   edi
c001b220:	56                   	push   esi
c001b221:	53                   	push   ebx
c001b222:	83 ec 1c             	sub    esp,0x1c
c001b225:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b229:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b22f:	0f 84 51 01 00 00    	je     c001b386 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b235:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b239:	66 81 f9 06 04       	cmp    cx,0x406
c001b23e:	75 2c                	jne    c001b26c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b240:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b245:	50                   	push   eax
c001b246:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b24b:	50                   	push   eax
c001b24c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b251:	50                   	push   eax
c001b252:	56                   	push   esi
c001b253:	e8 b2 fe ff ff       	call   c001b10a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b258:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b25c:	0f b6 c0             	movzx  eax,al
c001b25f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b263:	83 c4 2c             	add    esp,0x2c
c001b266:	5b                   	pop    ebx
c001b267:	5e                   	pop    esi
c001b268:	5f                   	pop    edi
c001b269:	5d                   	pop    ebp
c001b26a:	eb 8e                	jmp    c001b1fa <PCI::checkBus(unsigned char)>
c001b26c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b270:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b276:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b27a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b27e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b282:	88 d3                	mov    bl,dl
c001b284:	85 c0                	test   eax,eax
c001b286:	74 33                	je     c001b2bb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b288:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b28b:	85 d2                	test   edx,edx
c001b28d:	74 28                	je     c001b2b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b28f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b295:	31 ef                	xor    edi,ebp
c001b297:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b29d:	75 18                	jne    c001b2b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b29f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b2a3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b2a9:	75 0c                	jne    c001b2b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2ab:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b2b1:	0f 84 cf 00 00 00    	je     c001b386 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b2b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2b9:	eb c9                	jmp    c001b284 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b2bb:	66 81 f9 01 06       	cmp    cx,0x601
c001b2c0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b2c4:	75 18                	jne    c001b2de <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b2c6:	83 ec 0c             	sub    esp,0xc
c001b2c9:	68 58 01 00 00       	push   0x158
c001b2ce:	e8 7b 71 ff ff       	call   c001244e <operator new(unsigned long)>
c001b2d3:	59                   	pop    ecx
c001b2d4:	89 c5                	mov    ebp,eax
c001b2d6:	5f                   	pop    edi
c001b2d7:	68 4c a6 03 c0       	push   0xc003a64c
c001b2dc:	eb 7d                	jmp    c001b35b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b2de:	66 81 f9 01 01       	cmp    cx,0x101
c001b2e3:	75 60                	jne    c001b345 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	68 70 02 00 00       	push   0x270
c001b2ed:	e8 5c 71 ff ff       	call   c001244e <operator new(unsigned long)>
c001b2f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2f5:	89 c5                	mov    ebp,eax
c001b2f7:	e8 e0 07 00 00       	call   c001badc <IDE::IDE()>
c001b2fc:	58                   	pop    eax
c001b2fd:	5a                   	pop    edx
c001b2fe:	55                   	push   ebp
c001b2ff:	56                   	push   esi
c001b300:	e8 53 84 ff ff       	call   c0013758 <Device::addChild(Device*)>
c001b305:	83 ec 1c             	sub    esp,0x1c
c001b308:	b9 09 00 00 00       	mov    ecx,0x9
c001b30d:	fc                   	cld    
c001b30e:	89 e7                	mov    edi,esp
c001b310:	89 de                	mov    esi,ebx
c001b312:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b314:	55                   	push   ebp
c001b315:	e8 18 83 ff ff       	call   c0013632 <Device::preOpenPCI(PCIDeviceInfo)>
c001b31a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b31d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b321:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b329:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b331:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b339:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b33c:	83 c4 4c             	add    esp,0x4c
c001b33f:	5b                   	pop    ebx
c001b340:	5e                   	pop    esi
c001b341:	5f                   	pop    edi
c001b342:	5d                   	pop    ebp
c001b343:	ff e0                	jmp    eax
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	68 58 01 00 00       	push   0x158
c001b34d:	e8 fc 70 ff ff       	call   c001244e <operator new(unsigned long)>
c001b352:	59                   	pop    ecx
c001b353:	89 c5                	mov    ebp,eax
c001b355:	5f                   	pop    edi
c001b356:	68 6b a6 03 c0       	push   0xc003a66b
c001b35b:	55                   	push   ebp
c001b35c:	e8 e3 86 ff ff       	call   c0013a44 <DriverlessDevice::DriverlessDevice(char const*)>
c001b361:	58                   	pop    eax
c001b362:	5a                   	pop    edx
c001b363:	55                   	push   ebp
c001b364:	56                   	push   esi
c001b365:	e8 ee 83 ff ff       	call   c0013758 <Device::addChild(Device*)>
c001b36a:	b9 09 00 00 00       	mov    ecx,0x9
c001b36f:	fc                   	cld    
c001b370:	89 df                	mov    edi,ebx
c001b372:	89 de                	mov    esi,ebx
c001b374:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b376:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b37a:	83 c4 2c             	add    esp,0x2c
c001b37d:	5b                   	pop    ebx
c001b37e:	5e                   	pop    esi
c001b37f:	5f                   	pop    edi
c001b380:	5d                   	pop    ebp
c001b381:	e9 ac 82 ff ff       	jmp    c0013632 <Device::preOpenPCI(PCIDeviceInfo)>
c001b386:	83 c4 1c             	add    esp,0x1c
c001b389:	5b                   	pop    ebx
c001b38a:	5e                   	pop    esi
c001b38b:	5f                   	pop    edi
c001b38c:	5d                   	pop    ebp
c001b38d:	c3                   	ret    

c001b38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b38e:	55                   	push   ebp
c001b38f:	57                   	push   edi
c001b390:	56                   	push   esi
c001b391:	53                   	push   ebx
c001b392:	83 ec 5c             	sub    esp,0x5c
c001b395:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b399:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b39d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b3a1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b3a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3aa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b3ae:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b3b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3b7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b3bc:	6a 0c                	push   0xc
c001b3be:	55                   	push   ebp
c001b3bf:	53                   	push   ebx
c001b3c0:	57                   	push   edi
c001b3c1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b3c8:	e8 03 fc ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 00                	push   0x0
c001b3d2:	68 85 a6 03 c0       	push   0xc003a685
c001b3d7:	e8 c2 1a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001b3dc:	55                   	push   ebp
c001b3dd:	53                   	push   ebx
c001b3de:	57                   	push   edi
c001b3df:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3e6:	e8 73 fc ff ff       	call   c001b05e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b3eb:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b3f0:	83 c4 20             	add    esp,0x20
c001b3f3:	55                   	push   ebp
c001b3f4:	53                   	push   ebx
c001b3f5:	57                   	push   edi
c001b3f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3fa:	e8 e9 fc ff ff       	call   c001b0e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b3ff:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b406:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b40a:	55                   	push   ebp
c001b40b:	53                   	push   ebx
c001b40c:	57                   	push   edi
c001b40d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b414:	e8 b7 fb ff ff       	call   c001afd0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b419:	0f b6 c4             	movzx  eax,ah
c001b41c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b420:	83 c4 18             	add    esp,0x18
c001b423:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b427:	68 99 a6 03 c0       	push   0xc003a699
c001b42c:	e8 6d 1a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001b431:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b435:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b439:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001b43e:	83 c4 10             	add    esp,0x10
c001b441:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b447:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b44e:	74 6c                	je     c001b4bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b450:	31 f6                	xor    esi,esi
c001b452:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001b458:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b45e:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b464:	7e 56                	jle    c001b4bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b466:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b469:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b470:	39 cb                	cmp    ebx,ecx
c001b472:	75 45                	jne    c001b4b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b474:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b47b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b47f:	75 38                	jne    c001b4b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b481:	83 ec 0c             	sub    esp,0xc
c001b484:	68 a8 a6 03 c0       	push   0xc003a6a8
c001b489:	e8 10 1a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001b48e:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001b494:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b49a:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b4a2:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b4a6:	52                   	push   edx
c001b4a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4ab:	53                   	push   ebx
c001b4ac:	68 cd a6 03 c0       	push   0xc003a6cd
c001b4b1:	e8 e8 19 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001b4b6:	83 c4 20             	add    esp,0x20
c001b4b9:	46                   	inc    esi
c001b4ba:	eb 96                	jmp    c001b452 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b4bc:	31 d2                	xor    edx,edx
c001b4be:	83 ec 0c             	sub    esp,0xc
c001b4c1:	55                   	push   ebp
c001b4c2:	53                   	push   ebx
c001b4c3:	57                   	push   edi
c001b4c4:	52                   	push   edx
c001b4c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4c9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4d0:	e8 59 fc ff ff       	call   c001b12e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d5:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b4d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4dd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b4e1:	42                   	inc    edx
c001b4e2:	83 c4 20             	add    esp,0x20
c001b4e5:	83 fa 06             	cmp    edx,0x6
c001b4e8:	75 d4                	jne    c001b4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b4ea:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4ee:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b4f2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b4f6:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b4fa:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b4fe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b502:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b507:	86 e0                	xchg   al,ah
c001b509:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b50e:	55                   	push   ebp
c001b50f:	53                   	push   ebx
c001b510:	57                   	push   edi
c001b511:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b515:	e8 88 fb ff ff       	call   c001b0a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b51a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b51e:	55                   	push   ebp
c001b51f:	53                   	push   ebx
c001b520:	57                   	push   edi
c001b521:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b528:	e8 eb fa ff ff       	call   c001b018 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b52d:	83 ec 0c             	sub    esp,0xc
c001b530:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b535:	b9 09 00 00 00       	mov    ecx,0x9
c001b53a:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b53e:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b542:	fc                   	cld    
c001b543:	89 e7                	mov    edi,esp
c001b545:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b547:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b54e:	e8 cb fc ff ff       	call   c001b21e <PCI::foundDevice(PCIDeviceInfo)>
c001b553:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b559:	5b                   	pop    ebx
c001b55a:	5e                   	pop    esi
c001b55b:	5f                   	pop    edi
c001b55c:	5d                   	pop    ebp
c001b55d:	c3                   	ret    

c001b55e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b55e:	55                   	push   ebp
c001b55f:	57                   	push   edi
c001b560:	56                   	push   esi
c001b561:	53                   	push   ebx
c001b562:	83 ec 0c             	sub    esp,0xc
c001b565:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b569:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b56e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b573:	6a 00                	push   0x0
c001b575:	56                   	push   esi
c001b576:	57                   	push   edi
c001b577:	55                   	push   ebp
c001b578:	e8 9b fa ff ff       	call   c001b018 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b57d:	6a 00                	push   0x0
c001b57f:	56                   	push   esi
c001b580:	57                   	push   edi
c001b581:	55                   	push   ebp
c001b582:	e8 07 fe ff ff       	call   c001b38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b587:	83 c4 20             	add    esp,0x20
c001b58a:	6a 00                	push   0x0
c001b58c:	56                   	push   esi
c001b58d:	57                   	push   edi
c001b58e:	55                   	push   ebp
c001b58f:	e8 a6 fa ff ff       	call   c001b03a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b594:	83 c4 10             	add    esp,0x10
c001b597:	84 c0                	test   al,al
c001b599:	79 27                	jns    c001b5c2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b59b:	bb 01 00 00 00       	mov    ebx,0x1
c001b5a0:	53                   	push   ebx
c001b5a1:	56                   	push   esi
c001b5a2:	57                   	push   edi
c001b5a3:	55                   	push   ebp
c001b5a4:	e8 6f fa ff ff       	call   c001b018 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5a9:	83 c4 10             	add    esp,0x10
c001b5ac:	66 40                	inc    ax
c001b5ae:	74 0c                	je     c001b5bc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b5b0:	53                   	push   ebx
c001b5b1:	56                   	push   esi
c001b5b2:	57                   	push   edi
c001b5b3:	55                   	push   ebp
c001b5b4:	e8 d5 fd ff ff       	call   c001b38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b5b9:	83 c4 10             	add    esp,0x10
c001b5bc:	43                   	inc    ebx
c001b5bd:	83 fb 08             	cmp    ebx,0x8
c001b5c0:	75 de                	jne    c001b5a0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b5c2:	83 c4 0c             	add    esp,0xc
c001b5c5:	5b                   	pop    ebx
c001b5c6:	5e                   	pop    esi
c001b5c7:	5f                   	pop    edi
c001b5c8:	5d                   	pop    ebp
c001b5c9:	c3                   	ret    

c001b5ca <PCI::detect()>:
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	53                   	push   ebx
c001b5cd:	31 db                	xor    ebx,ebx
c001b5cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5d3:	6a 00                	push   0x0
c001b5d5:	6a 00                	push   0x0
c001b5d7:	6a 00                	push   0x0
c001b5d9:	56                   	push   esi
c001b5da:	e8 5b fa ff ff       	call   c001b03a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	a8 80                	test   al,0x80
c001b5e4:	75 21                	jne    c001b607 <PCI::detect()+0x3d>
c001b5e6:	51                   	push   ecx
c001b5e7:	51                   	push   ecx
c001b5e8:	6a 00                	push   0x0
c001b5ea:	56                   	push   esi
c001b5eb:	e8 0a fc ff ff       	call   c001b1fa <PCI::checkBus(unsigned char)>
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	eb 24                	jmp    c001b619 <PCI::detect()+0x4f>
c001b5f5:	52                   	push   edx
c001b5f6:	52                   	push   edx
c001b5f7:	53                   	push   ebx
c001b5f8:	43                   	inc    ebx
c001b5f9:	56                   	push   esi
c001b5fa:	e8 fb fb ff ff       	call   c001b1fa <PCI::checkBus(unsigned char)>
c001b5ff:	83 c4 10             	add    esp,0x10
c001b602:	83 fb 08             	cmp    ebx,0x8
c001b605:	74 12                	je     c001b619 <PCI::detect()+0x4f>
c001b607:	53                   	push   ebx
c001b608:	6a 00                	push   0x0
c001b60a:	6a 00                	push   0x0
c001b60c:	56                   	push   esi
c001b60d:	e8 06 fa ff ff       	call   c001b018 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b612:	83 c4 10             	add    esp,0x10
c001b615:	66 40                	inc    ax
c001b617:	74 dc                	je     c001b5f5 <PCI::detect()+0x2b>
c001b619:	58                   	pop    eax
c001b61a:	5b                   	pop    ebx
c001b61b:	5e                   	pop    esi
c001b61c:	c3                   	ret    
c001b61d:	90                   	nop

c001b61e <RTC::open(int, int, void*)>:
c001b61e:	31 c0                	xor    eax,eax
c001b620:	c3                   	ret    
c001b621:	90                   	nop

c001b622 <RTC::close(int, int, void*)>:
c001b622:	31 c0                	xor    eax,eax
c001b624:	c3                   	ret    
c001b625:	90                   	nop

c001b626 <RTC::timeInSecondsUTC()>:
c001b626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b62a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b630:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b636:	c3                   	ret    
c001b637:	90                   	nop

c001b638 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b638:	31 c0                	xor    eax,eax
c001b63a:	c3                   	ret    
c001b63b:	90                   	nop

c001b63c <RTC::timeInDatetimeUTC()>:
c001b63c:	53                   	push   ebx
c001b63d:	83 ec 14             	sub    esp,0x14
c001b640:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b648:	8b 10                	mov    edx,DWORD PTR [eax]
c001b64a:	50                   	push   eax
c001b64b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b64e:	83 c4 0c             	add    esp,0xc
c001b651:	52                   	push   edx
c001b652:	50                   	push   eax
c001b653:	53                   	push   ebx
c001b654:	e8 13 7e ff ff       	call   c001346c <secondsToDatetime(unsigned long long)>
c001b659:	89 d8                	mov    eax,ebx
c001b65b:	83 c4 14             	add    esp,0x14
c001b65e:	5b                   	pop    ebx
c001b65f:	c2 04 00             	ret    0x4

c001b662 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 14             	sub    esp,0x14
c001b667:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b66b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b66d:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b670:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b674:	52                   	push   edx
c001b675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b67d:	50                   	push   eax
c001b67e:	e8 e9 7d ff ff       	call   c001346c <secondsToDatetime(unsigned long long)>
c001b683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b687:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b68b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b68f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b693:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b697:	89 f0                	mov    eax,esi
c001b699:	83 c4 20             	add    esp,0x20
c001b69c:	5b                   	pop    ebx
c001b69d:	5e                   	pop    esi
c001b69e:	ff e0                	jmp    eax

c001b6a0 <RTC::~RTC()>:
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	ba 48 a7 03 c0       	mov    edx,0xc003a748
c001b6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ac:	89 10                	mov    DWORD PTR [eax],edx
c001b6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	50                   	push   eax
c001b6b6:	e8 3b 7b ff ff       	call   c00131f6 <Clock::~Clock()>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	90                   	nop
c001b6bf:	83 c4 0c             	add    esp,0xc
c001b6c2:	c3                   	ret    
c001b6c3:	90                   	nop

c001b6c4 <RTC::~RTC()>:
c001b6c4:	83 ec 0c             	sub    esp,0xc
c001b6c7:	83 ec 0c             	sub    esp,0xc
c001b6ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6ce:	e8 cd ff ff ff       	call   c001b6a0 <RTC::~RTC()>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	83 ec 08             	sub    esp,0x8
c001b6d9:	68 60 01 00 00       	push   0x160
c001b6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6e2:	e8 76 6d ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	83 c4 0c             	add    esp,0xc
c001b6ed:	c3                   	ret    

c001b6ee <RTC::get_update_in_progress_flag()>:
c001b6ee:	83 ec 14             	sub    esp,0x14
c001b6f1:	6a 0a                	push   0xa
c001b6f3:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b6f9:	e8 5a ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b6fe:	83 c4 1c             	add    esp,0x1c
c001b701:	c0 e8 07             	shr    al,0x7
c001b704:	c3                   	ret    
c001b705:	90                   	nop

c001b706 <RTC::completeRTCRefresh()>:
c001b706:	55                   	push   ebp
c001b707:	57                   	push   edi
c001b708:	56                   	push   esi
c001b709:	53                   	push   ebx
c001b70a:	83 ec 2c             	sub    esp,0x2c
c001b70d:	8b 35 90 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c390
c001b713:	8b 3d 94 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c394
c001b719:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b71f:	83 d7 00             	adc    edi,0x0
c001b722:	83 ec 0c             	sub    esp,0xc
c001b725:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b729:	e8 c0 ff ff ff       	call   c001b6ee <RTC::get_update_in_progress_flag()>
c001b72e:	83 c4 10             	add    esp,0x10
c001b731:	84 c0                	test   al,al
c001b733:	74 10                	je     c001b745 <RTC::completeRTCRefresh()+0x3f>
c001b735:	3b 35 90 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c390
c001b73b:	89 f8                	mov    eax,edi
c001b73d:	1b 05 94 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c394
c001b743:	73 dd                	jae    c001b722 <RTC::completeRTCRefresh()+0x1c>
c001b745:	55                   	push   ebp
c001b746:	55                   	push   ebp
c001b747:	6a 00                	push   0x0
c001b749:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b74f:	e8 04 ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b754:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b758:	58                   	pop    eax
c001b759:	5a                   	pop    edx
c001b75a:	6a 02                	push   0x2
c001b75c:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b762:	e8 f1 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b767:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b76b:	59                   	pop    ecx
c001b76c:	5b                   	pop    ebx
c001b76d:	6a 04                	push   0x4
c001b76f:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b775:	e8 de fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b77a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b77e:	5e                   	pop    esi
c001b77f:	5f                   	pop    edi
c001b780:	6a 07                	push   0x7
c001b782:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b788:	e8 cb fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b78d:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b791:	5d                   	pop    ebp
c001b792:	58                   	pop    eax
c001b793:	6a 08                	push   0x8
c001b795:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b79b:	e8 b8 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7a0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b7a4:	58                   	pop    eax
c001b7a5:	5a                   	pop    edx
c001b7a6:	6a 09                	push   0x9
c001b7a8:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b7ae:	e8 a5 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	0f b6 e8             	movzx  ebp,al
c001b7b9:	8b 35 90 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c390
c001b7bf:	8b 3d 94 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c394
c001b7c5:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b7cb:	83 d7 00             	adc    edi,0x0
c001b7ce:	83 ec 0c             	sub    esp,0xc
c001b7d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b7d5:	e8 14 ff ff ff       	call   c001b6ee <RTC::get_update_in_progress_flag()>
c001b7da:	83 c4 10             	add    esp,0x10
c001b7dd:	84 c0                	test   al,al
c001b7df:	74 10                	je     c001b7f1 <RTC::completeRTCRefresh()+0xeb>
c001b7e1:	3b 35 90 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c390
c001b7e7:	89 f8                	mov    eax,edi
c001b7e9:	1b 05 94 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c394
c001b7ef:	73 dd                	jae    c001b7ce <RTC::completeRTCRefresh()+0xc8>
c001b7f1:	50                   	push   eax
c001b7f2:	50                   	push   eax
c001b7f3:	6a 00                	push   0x0
c001b7f5:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b7fb:	e8 58 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b800:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b804:	58                   	pop    eax
c001b805:	5a                   	pop    edx
c001b806:	6a 02                	push   0x2
c001b808:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b80e:	e8 45 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b813:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b817:	59                   	pop    ecx
c001b818:	5b                   	pop    ebx
c001b819:	6a 04                	push   0x4
c001b81b:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b821:	e8 32 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b826:	5e                   	pop    esi
c001b827:	88 c3                	mov    bl,al
c001b829:	5f                   	pop    edi
c001b82a:	6a 07                	push   0x7
c001b82c:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b832:	e8 21 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b837:	89 c6                	mov    esi,eax
c001b839:	58                   	pop    eax
c001b83a:	5a                   	pop    edx
c001b83b:	6a 08                	push   0x8
c001b83d:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b843:	e8 10 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b848:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b84c:	59                   	pop    ecx
c001b84d:	5f                   	pop    edi
c001b84e:	6a 09                	push   0x9
c001b850:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b856:	e8 fd fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b85b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b85f:	0f b6 f8             	movzx  edi,al
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b868:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b86c:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b870:	89 f1                	mov    ecx,esi
c001b872:	0f 94 c0             	sete   al
c001b875:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b879:	0f 94 c2             	sete   dl
c001b87c:	21 d0                	and    eax,edx
c001b87e:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b882:	0f 94 c2             	sete   dl
c001b885:	21 c2                	and    edx,eax
c001b887:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b88b:	0f 94 c0             	sete   al
c001b88e:	21 d0                	and    eax,edx
c001b890:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b894:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b898:	0f 94 c1             	sete   cl
c001b89b:	84 c8                	test   al,cl
c001b89d:	75 28                	jne    c001b8c7 <RTC::completeRTCRefresh()+0x1c1>
c001b89f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b8a3:	89 fd                	mov    ebp,edi
c001b8a5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b8a9:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b8ad:	89 f0                	mov    eax,esi
c001b8af:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b8b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8bb:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8be:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b8c2:	e9 f2 fe ff ff       	jmp    c001b7b9 <RTC::completeRTCRefresh()+0xb3>
c001b8c7:	39 fd                	cmp    ebp,edi
c001b8c9:	75 d4                	jne    c001b89f <RTC::completeRTCRefresh()+0x199>
c001b8cb:	55                   	push   ebp
c001b8cc:	55                   	push   ebp
c001b8cd:	6a 0b                	push   0xb
c001b8cf:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b8d5:	e8 7e fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8da:	83 c4 10             	add    esp,0x10
c001b8dd:	89 c5                	mov    ebp,eax
c001b8df:	a8 04                	test   al,0x4
c001b8e1:	75 75                	jne    c001b958 <RTC::completeRTCRefresh()+0x252>
c001b8e3:	b1 0a                	mov    cl,0xa
c001b8e5:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b8e8:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8eb:	83 e2 0f             	and    edx,0xf
c001b8ee:	c0 e8 04             	shr    al,0x4
c001b8f1:	c1 ef 04             	shr    edi,0x4
c001b8f4:	f6 e1                	mul    cl
c001b8f6:	6b ff 0a             	imul   edi,edi,0xa
c001b8f9:	01 d0                	add    eax,edx
c001b8fb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8ff:	88 04 24             	mov    BYTE PTR [esp],al
c001b902:	83 e2 0f             	and    edx,0xf
c001b905:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b909:	c0 e8 04             	shr    al,0x4
c001b90c:	f6 e1                	mul    cl
c001b90e:	01 d0                	add    eax,edx
c001b910:	88 da                	mov    dl,bl
c001b912:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b916:	83 e2 0f             	and    edx,0xf
c001b919:	88 d8                	mov    al,bl
c001b91b:	83 e3 80             	and    ebx,0xffffff80
c001b91e:	c0 e8 04             	shr    al,0x4
c001b921:	83 e0 07             	and    eax,0x7
c001b924:	f6 e1                	mul    cl
c001b926:	01 d0                	add    eax,edx
c001b928:	89 f2                	mov    edx,esi
c001b92a:	09 c3                	or     ebx,eax
c001b92c:	83 e2 0f             	and    edx,0xf
c001b92f:	89 f0                	mov    eax,esi
c001b931:	c0 e8 04             	shr    al,0x4
c001b934:	f6 e1                	mul    cl
c001b936:	8d 34 02             	lea    esi,[edx+eax*1]
c001b939:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b93d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b941:	83 e2 0f             	and    edx,0xf
c001b944:	c0 e8 04             	shr    al,0x4
c001b947:	f6 e1                	mul    cl
c001b949:	01 d0                	add    eax,edx
c001b94b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b94f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b953:	83 e0 0f             	and    eax,0xf
c001b956:	01 c7                	add    edi,eax
c001b958:	83 e5 02             	and    ebp,0x2
c001b95b:	75 14                	jne    c001b971 <RTC::completeRTCRefresh()+0x26b>
c001b95d:	84 db                	test   bl,bl
c001b95f:	79 10                	jns    c001b971 <RTC::completeRTCRefresh()+0x26b>
c001b961:	83 e3 7f             	and    ebx,0x7f
c001b964:	b9 18 00 00 00       	mov    ecx,0x18
c001b969:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b96c:	99                   	cdq    
c001b96d:	f7 f9                	idiv   ecx
c001b96f:	88 d3                	mov    bl,dl
c001b971:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b977:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b97d:	77 06                	ja     c001b985 <RTC::completeRTCRefresh()+0x27f>
c001b97f:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b985:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b989:	31 d2                	xor    edx,edx
c001b98b:	c1 e1 10             	shl    ecx,0x10
c001b98e:	89 d7                	mov    edi,edx
c001b990:	c1 e5 10             	shl    ebp,0x10
c001b993:	31 c0                	xor    eax,eax
c001b995:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b99b:	09 cf                	or     edi,ecx
c001b99d:	89 f1                	mov    ecx,esi
c001b99f:	89 fa                	mov    edx,edi
c001b9a1:	88 c8                	mov    al,cl
c001b9a3:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b9a7:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b9ab:	88 da                	mov    dl,bl
c001b9ad:	0f b7 c8             	movzx  ecx,ax
c001b9b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9b4:	09 e9                	or     ecx,ebp
c001b9b6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9b9:	0f b6 db             	movzx  ebx,bl
c001b9bc:	50                   	push   eax
c001b9bd:	50                   	push   eax
c001b9be:	53                   	push   ebx
c001b9bf:	68 14 a7 03 c0       	push   0xc003a714
c001b9c4:	e8 d5 14 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001b9c9:	5a                   	pop    edx
c001b9ca:	59                   	pop    ecx
c001b9cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9d3:	52                   	push   edx
c001b9d4:	50                   	push   eax
c001b9d5:	e8 0b 79 ff ff       	call   c00132e5 <datetimeToSeconds(datetime_t)>
c001b9da:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b9de:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b9e4:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b9ea:	83 c4 3c             	add    esp,0x3c
c001b9ed:	5b                   	pop    ebx
c001b9ee:	5e                   	pop    esi
c001b9ef:	5f                   	pop    edi
c001b9f0:	5d                   	pop    ebp
c001b9f1:	c3                   	ret    

c001b9f2 <rtcIRQHandler(regs*, void*)>:
c001b9f2:	53                   	push   ebx
c001b9f3:	83 ec 10             	sub    esp,0x10
c001b9f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9fa:	6a 0c                	push   0xc
c001b9fc:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001ba02:	e8 51 fc fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	84 c0                	test   al,al
c001ba0c:	79 24                	jns    c001ba32 <rtcIRQHandler(regs*, void*)+0x40>
c001ba0e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ba15:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ba1c:	66 ff 05 a0 d0 03 c0 	inc    WORD PTR ds:0xc003d0a0
c001ba23:	75 0d                	jne    c001ba32 <rtcIRQHandler(regs*, void*)+0x40>
c001ba25:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba29:	83 c4 08             	add    esp,0x8
c001ba2c:	5b                   	pop    ebx
c001ba2d:	e9 d4 fc ff ff       	jmp    c001b706 <RTC::completeRTCRefresh()>
c001ba32:	83 c4 08             	add    esp,0x8
c001ba35:	5b                   	pop    ebx
c001ba36:	c3                   	ret    
c001ba37:	90                   	nop

c001ba38 <RTC::RTC()>:
c001ba38:	83 ec 1c             	sub    esp,0x1c
c001ba3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba3f:	83 ec 08             	sub    esp,0x8
c001ba42:	68 2a a7 03 c0       	push   0xc003a72a
c001ba47:	50                   	push   eax
c001ba48:	e8 73 77 ff ff       	call   c00131c0 <Clock::Clock(char const*)>
c001ba4d:	83 c4 10             	add    esp,0x10
c001ba50:	ba 48 a7 03 c0       	mov    edx,0xc003a748
c001ba55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba59:	89 10                	mov    DWORD PTR [eax],edx
c001ba5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba5f:	83 ec 0c             	sub    esp,0xc
c001ba62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba66:	6a 01                	push   0x1
c001ba68:	68 f2 b9 01 c0       	push   0xc001b9f2
c001ba6d:	6a 08                	push   0x8
c001ba6f:	50                   	push   eax
c001ba70:	e8 37 7c ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba75:	83 c4 20             	add    esp,0x20
c001ba78:	89 c2                	mov    edx,eax
c001ba7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba7e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba84:	e8 9a 28 ff ff       	call   c000e323 <disableIRQs()>
c001ba89:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001ba8e:	83 ec 08             	sub    esp,0x8
c001ba91:	6a 0b                	push   0xb
c001ba93:	50                   	push   eax
c001ba94:	e8 bf fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001baa0:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001baa5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001baa9:	83 ca 10             	or     edx,0x10
c001baac:	0f b6 d2             	movzx  edx,dl
c001baaf:	83 ec 04             	sub    esp,0x4
c001bab2:	52                   	push   edx
c001bab3:	6a 0b                	push   0xb
c001bab5:	50                   	push   eax
c001bab6:	e8 a5 fc fe ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	83 ec 0c             	sub    esp,0xc
c001bac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bac5:	e8 3c fc ff ff       	call   c001b706 <RTC::completeRTCRefresh()>
c001baca:	83 c4 10             	add    esp,0x10
c001bacd:	e8 5f 28 ff ff       	call   c000e331 <enableIRQs()>
c001bad2:	90                   	nop
c001bad3:	83 c4 1c             	add    esp,0x1c
c001bad6:	c3                   	ret    
c001bad7:	90                   	nop

c001bad8 <IDE::close(int, int, void*)>:
c001bad8:	83 c8 ff             	or     eax,0xffffffff
c001badb:	c3                   	ret    

c001badc <IDE::IDE()>:
c001badc:	83 ec 0c             	sub    esp,0xc
c001badf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae3:	83 ec 08             	sub    esp,0x8
c001bae6:	68 7c a7 03 c0       	push   0xc003a77c
c001baeb:	50                   	push   eax
c001baec:	e8 e9 7f ff ff       	call   c0013ada <HardDiskController::HardDiskController(char const*)>
c001baf1:	83 c4 10             	add    esp,0x10
c001baf4:	ba bc a9 03 c0       	mov    edx,0xc003a9bc
c001baf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafd:	89 10                	mov    DWORD PTR [eax],edx
c001baff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb03:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb0a:	90                   	nop
c001bb0b:	83 c4 0c             	add    esp,0xc
c001bb0e:	c3                   	ret    
c001bb0f:	90                   	nop

c001bb10 <IDE::prepareInterrupt(unsigned char)>:
c001bb10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb19:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb21:	c3                   	ret    

c001bb22 <selectDrive(unsigned char, unsigned char)>:
c001bb22:	c3                   	ret    
c001bb23:	90                   	nop

c001bb24 <IDE::getBase(unsigned char)>:
c001bb24:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb35:	c3                   	ret    

c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb36:	55                   	push   ebp
c001bb37:	57                   	push   edi
c001bb38:	56                   	push   esi
c001bb39:	53                   	push   ebx
c001bb3a:	83 ec 1c             	sub    esp,0x1c
c001bb3d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb45:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bb48:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb50:	80 f9 03             	cmp    cl,0x3
c001bb53:	77 51                	ja     c001bba6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bb55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb59:	0f b6 f2             	movzx  esi,dl
c001bb5c:	0f b6 db             	movzx  ebx,bl
c001bb5f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb62:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bb66:	83 ca 80             	or     edx,0xffffff80
c001bb69:	0f b6 d2             	movzx  edx,dl
c001bb6c:	52                   	push   edx
c001bb6d:	6a 0c                	push   0xc
c001bb6f:	56                   	push   esi
c001bb70:	57                   	push   edi
c001bb71:	e8 c0 ff ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb76:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bb7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb7f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bb83:	ee                   	out    dx,al
c001bb84:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bb89:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bb8d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bb91:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bb95:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bb9d:	83 c4 2c             	add    esp,0x2c
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	5f                   	pop    edi
c001bba3:	5d                   	pop    ebp
c001bba4:	eb 90                	jmp    c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bba6:	80 fb 07             	cmp    bl,0x7
c001bba9:	77 12                	ja     c001bbbd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bbab:	0f b6 d2             	movzx  edx,dl
c001bbae:	0f b6 db             	movzx  ebx,bl
c001bbb1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bbb9:	89 da                	mov    edx,ebx
c001bbbb:	eb 2f                	jmp    c001bbec <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bbbd:	80 fb 0d             	cmp    bl,0xd
c001bbc0:	77 13                	ja     c001bbd5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bbc2:	0f b6 d2             	movzx  edx,dl
c001bbc5:	0f b6 db             	movzx  ebx,bl
c001bbc8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bbcf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bbd3:	eb 17                	jmp    c001bbec <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bbd5:	80 fb 15             	cmp    bl,0x15
c001bbd8:	77 13                	ja     c001bbed <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bbda:	0f b6 d2             	movzx  edx,dl
c001bbdd:	0f b6 db             	movzx  ebx,bl
c001bbe0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bbe8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bbec:	ee                   	out    dx,al
c001bbed:	83 c4 1c             	add    esp,0x1c
c001bbf0:	5b                   	pop    ebx
c001bbf1:	5e                   	pop    esi
c001bbf2:	5f                   	pop    edi
c001bbf3:	5d                   	pop    ebp
c001bbf4:	c3                   	ret    
c001bbf5:	90                   	nop

c001bbf6 <IDE::read(unsigned char, unsigned char)>:
c001bbf6:	55                   	push   ebp
c001bbf7:	57                   	push   edi
c001bbf8:	56                   	push   esi
c001bbf9:	53                   	push   ebx
c001bbfa:	83 ec 1c             	sub    esp,0x1c
c001bbfd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc05:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc08:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc0c:	3c 03                	cmp    al,0x3
c001bc0e:	77 43                	ja     c001bc53 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc10:	0f b6 f2             	movzx  esi,dl
c001bc13:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc16:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc1a:	83 c8 80             	or     eax,0xffffff80
c001bc1d:	0f b6 c0             	movzx  eax,al
c001bc20:	50                   	push   eax
c001bc21:	6a 0c                	push   0xc
c001bc23:	56                   	push   esi
c001bc24:	57                   	push   edi
c001bc25:	e8 0c ff ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc2a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bc2f:	0f b6 c3             	movzx  eax,bl
c001bc32:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bc36:	ec                   	in     al,dx
c001bc37:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc3b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bc40:	52                   	push   edx
c001bc41:	6a 0c                	push   0xc
c001bc43:	56                   	push   esi
c001bc44:	57                   	push   edi
c001bc45:	e8 ec fe ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc4a:	83 c4 20             	add    esp,0x20
c001bc4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc51:	eb 49                	jmp    c001bc9c <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc53:	80 fb 07             	cmp    bl,0x7
c001bc56:	77 12                	ja     c001bc6a <IDE::read(unsigned char, unsigned char)+0x74>
c001bc58:	0f b6 d2             	movzx  edx,dl
c001bc5b:	0f b6 c3             	movzx  eax,bl
c001bc5e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bc66:	89 c2                	mov    edx,eax
c001bc68:	eb 31                	jmp    c001bc9b <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc6a:	80 fb 0d             	cmp    bl,0xd
c001bc6d:	77 13                	ja     c001bc82 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bc6f:	0f b6 d2             	movzx  edx,dl
c001bc72:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bc79:	0f b6 d3             	movzx  edx,bl
c001bc7c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bc80:	eb 19                	jmp    c001bc9b <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc82:	31 c0                	xor    eax,eax
c001bc84:	80 fb 15             	cmp    bl,0x15
c001bc87:	77 13                	ja     c001bc9c <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc89:	0f b6 d2             	movzx  edx,dl
c001bc8c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bc94:	0f b6 d3             	movzx  edx,bl
c001bc97:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bc9b:	ec                   	in     al,dx
c001bc9c:	83 c4 1c             	add    esp,0x1c
c001bc9f:	5b                   	pop    ebx
c001bca0:	5e                   	pop    esi
c001bca1:	5f                   	pop    edi
c001bca2:	5d                   	pop    ebp
c001bca3:	c3                   	ret    

c001bca4 <IDE::waitInterrupt(unsigned char)>:
c001bca4:	55                   	push   ebp
c001bca5:	57                   	push   edi
c001bca6:	56                   	push   esi
c001bca7:	53                   	push   ebx
c001bca8:	31 db                	xor    ebx,ebx
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bcb1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bcb6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bcbe:	89 e8                	mov    eax,ebp
c001bcc0:	84 c0                	test   al,al
c001bcc2:	75 34                	jne    c001bcf8 <IDE::waitInterrupt(unsigned char)+0x54>
c001bcc4:	52                   	push   edx
c001bcc5:	6a 0c                	push   0xc
c001bcc7:	56                   	push   esi
c001bcc8:	57                   	push   edi
c001bcc9:	e8 28 ff ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	a8 01                	test   al,0x1
c001bcd3:	75 2b                	jne    c001bd00 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bcd5:	f6 c3 04             	test   bl,0x4
c001bcd8:	75 16                	jne    c001bcf0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bcda:	83 fb 32             	cmp    ebx,0x32
c001bcdd:	7e 11                	jle    c001bcf0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bcdf:	50                   	push   eax
c001bce0:	50                   	push   eax
c001bce1:	6a 00                	push   0x0
c001bce3:	68 80 96 98 00       	push   0x989680
c001bce8:	e8 0c 2d ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	83 fb 3c             	cmp    ebx,0x3c
c001bcf3:	74 0b                	je     c001bd00 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bcf5:	43                   	inc    ebx
c001bcf6:	eb be                	jmp    c001bcb6 <IDE::waitInterrupt(unsigned char)+0x12>
c001bcf8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd00:	83 c4 0c             	add    esp,0xc
c001bd03:	89 e8                	mov    eax,ebp
c001bd05:	5b                   	pop    ebx
c001bd06:	5e                   	pop    esi
c001bd07:	5f                   	pop    edi
c001bd08:	5d                   	pop    ebp
c001bd09:	c3                   	ret    

c001bd0a <ideChannel0IRQHandler(regs*, void*)>:
c001bd0a:	83 ec 10             	sub    esp,0x10
c001bd0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd11:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd18:	6a 07                	push   0x7
c001bd1a:	6a 00                	push   0x0
c001bd1c:	50                   	push   eax
c001bd1d:	e8 d4 fe ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001bd22:	83 c4 1c             	add    esp,0x1c
c001bd25:	c3                   	ret    

c001bd26 <ideChannel1IRQHandler(regs*, void*)>:
c001bd26:	83 ec 10             	sub    esp,0x10
c001bd29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd2d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd34:	6a 07                	push   0x7
c001bd36:	6a 01                	push   0x1
c001bd38:	50                   	push   eax
c001bd39:	e8 b8 fe ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001bd3e:	83 c4 1c             	add    esp,0x1c
c001bd41:	c3                   	ret    

c001bd42 <IDE::enableIRQs(unsigned char, bool)>:
c001bd42:	57                   	push   edi
c001bd43:	56                   	push   esi
c001bd44:	be 04 00 00 00       	mov    esi,0x4
c001bd49:	53                   	push   ebx
c001bd4a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd53:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bd58:	0f 94 c0             	sete   al
c001bd5b:	d1 e0                	shl    eax,1
c001bd5d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bd64:	0f b6 c0             	movzx  eax,al
c001bd67:	50                   	push   eax
c001bd68:	6a 0c                	push   0xc
c001bd6a:	57                   	push   edi
c001bd6b:	53                   	push   ebx
c001bd6c:	e8 c5 fd ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	50                   	push   eax
c001bd75:	6a 0c                	push   0xc
c001bd77:	57                   	push   edi
c001bd78:	53                   	push   ebx
c001bd79:	e8 78 fe ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	4e                   	dec    esi
c001bd82:	75 f0                	jne    c001bd74 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bd84:	5b                   	pop    ebx
c001bd85:	5e                   	pop    esi
c001bd86:	5f                   	pop    edi
c001bd87:	c3                   	ret    

c001bd88 <IDE::open(int, int, void*)>:
c001bd88:	55                   	push   ebp
c001bd89:	57                   	push   edi
c001bd8a:	56                   	push   esi
c001bd8b:	53                   	push   ebx
c001bd8c:	83 ec 1c             	sub    esp,0x1c
c001bd8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd93:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bd9c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bda5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bdac:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bdb3:	0f 85 b0 02 00 00    	jne    c001c069 <IDE::open(int, int, void*)+0x2e1>
c001bdb9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bdbf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bdc3:	83 e0 7f             	and    eax,0x7f
c001bdc6:	3c 05                	cmp    al,0x5
c001bdc8:	74 04                	je     c001bdce <IDE::open(int, int, void*)+0x46>
c001bdca:	3c 0f                	cmp    al,0xf
c001bdcc:	75 32                	jne    c001be00 <IDE::open(int, int, void*)+0x78>
c001bdce:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bdd4:	83 e0 fc             	and    eax,0xfffffffc
c001bdd7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bdde:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bde4:	83 e0 fc             	and    eax,0xfffffffc
c001bde7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bdee:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bdf4:	83 e0 fc             	and    eax,0xfffffffc
c001bdf7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdfe:	eb 14                	jmp    c001be14 <IDE::open(int, int, void*)+0x8c>
c001be00:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be0a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be14:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be1b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be26:	89 c6                	mov    esi,eax
c001be28:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be2d:	c1 e6 10             	shl    esi,0x10
c001be30:	89 e8                	mov    eax,ebp
c001be32:	89 fa                	mov    edx,edi
c001be34:	c1 e0 0b             	shl    eax,0xb
c001be37:	09 f0                	or     eax,esi
c001be39:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001be40:	c1 e6 08             	shl    esi,0x8
c001be43:	09 c6                	or     esi,eax
c001be45:	89 f0                	mov    eax,esi
c001be47:	0d 08 00 00 80       	or     eax,0x80000008
c001be4c:	ef                   	out    dx,eax
c001be4d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001be52:	89 ca                	mov    edx,ecx
c001be54:	ed                   	in     eax,dx
c001be55:	c1 e8 10             	shr    eax,0x10
c001be58:	3d ff ff 00 00       	cmp    eax,0xffff
c001be5d:	0f 84 f5 00 00 00    	je     c001bf58 <IDE::open(int, int, void*)+0x1d0>
c001be63:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001be69:	89 fa                	mov    edx,edi
c001be6b:	89 f0                	mov    eax,esi
c001be6d:	ef                   	out    dx,eax
c001be6e:	b0 fe                	mov    al,0xfe
c001be70:	89 ca                	mov    edx,ecx
c001be72:	ee                   	out    dx,al
c001be73:	89 f0                	mov    eax,esi
c001be75:	89 fa                	mov    edx,edi
c001be77:	ef                   	out    dx,eax
c001be78:	89 ca                	mov    edx,ecx
c001be7a:	ed                   	in     eax,dx
c001be7b:	3c fe                	cmp    al,0xfe
c001be7d:	0f 85 a9 00 00 00    	jne    c001bf2c <IDE::open(int, int, void*)+0x1a4>
c001be83:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001be89:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001be90:	74 33                	je     c001bec5 <IDE::open(int, int, void*)+0x13d>
c001be92:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001be98:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001be9c:	40                   	inc    eax
c001be9d:	83 ec 0c             	sub    esp,0xc
c001bea0:	0f b6 c0             	movzx  eax,al
c001bea3:	50                   	push   eax
c001bea4:	55                   	push   ebp
c001bea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bea9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001beaf:	51                   	push   ecx
c001beb0:	e8 37 a9 ff ff       	call   c00167ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001beb5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001beba:	83 c4 1c             	add    esp,0x1c
c001bebd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bec3:	eb 0a                	jmp    c001becf <IDE::open(int, int, void*)+0x147>
c001bec5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001becf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bed6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bedd:	c1 e1 10             	shl    ecx,0x10
c001bee0:	c1 e0 08             	shl    eax,0x8
c001bee3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bee8:	09 c1                	or     ecx,eax
c001beea:	89 fa                	mov    edx,edi
c001beec:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bef3:	c1 e0 0b             	shl    eax,0xb
c001bef6:	09 c1                	or     ecx,eax
c001bef8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001befe:	89 c8                	mov    eax,ecx
c001bf00:	ef                   	out    dx,eax
c001bf01:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf06:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf0c:	89 f2                	mov    edx,esi
c001bf0e:	ee                   	out    dx,al
c001bf0f:	89 c8                	mov    eax,ecx
c001bf11:	89 fa                	mov    edx,edi
c001bf13:	ef                   	out    dx,eax
c001bf14:	89 f2                	mov    edx,esi
c001bf16:	ed                   	in     eax,dx
c001bf17:	0f b6 c0             	movzx  eax,al
c001bf1a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf20:	74 46                	je     c001bf68 <IDE::open(int, int, void*)+0x1e0>
c001bf22:	83 ec 0c             	sub    esp,0xc
c001bf25:	68 94 a7 03 c0       	push   0xc003a794
c001bf2a:	eb 34                	jmp    c001bf60 <IDE::open(int, int, void*)+0x1d8>
c001bf2c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf35:	75 17                	jne    c001bf4e <IDE::open(int, int, void*)+0x1c6>
c001bf37:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bf3c:	74 07                	je     c001bf45 <IDE::open(int, int, void*)+0x1bd>
c001bf3e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bf43:	75 09                	jne    c001bf4e <IDE::open(int, int, void*)+0x1c6>
c001bf45:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf4c:	eb 1a                	jmp    c001bf68 <IDE::open(int, int, void*)+0x1e0>
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	68 9c a7 03 c0       	push   0xc003a79c
c001bf56:	eb 08                	jmp    c001bf60 <IDE::open(int, int, void*)+0x1d8>
c001bf58:	83 ec 0c             	sub    esp,0xc
c001bf5b:	68 cd a7 03 c0       	push   0xc003a7cd
c001bf60:	e8 57 10 ff ff       	call   c000cfbc <panic(char const*)>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bf6f:	79 1a                	jns    c001bf8b <IDE::open(int, int, void*)+0x203>
c001bf71:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bf77:	83 e0 fc             	and    eax,0xfffffffc
c001bf7a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bf81:	83 c0 08             	add    eax,0x8
c001bf84:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bf8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bf91:	89 c2                	mov    edx,eax
c001bf93:	83 e2 0f             	and    edx,0xf
c001bf96:	66 83 fa 08          	cmp    dx,0x8
c001bf9a:	75 0a                	jne    c001bfa6 <IDE::open(int, int, void*)+0x21e>
c001bf9c:	83 e8 02             	sub    eax,0x2
c001bf9f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfa6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bfac:	89 c2                	mov    edx,eax
c001bfae:	83 e2 0f             	and    edx,0xf
c001bfb1:	66 83 fa 08          	cmp    dx,0x8
c001bfb5:	75 0a                	jne    c001bfc1 <IDE::open(int, int, void*)+0x239>
c001bfb7:	83 e8 02             	sub    eax,0x2
c001bfba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bfc1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bfc8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bfcf:	89 d0                	mov    eax,edx
c001bfd1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bfd4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfd8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bfdc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bfdf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bfe4:	0f b6 c9             	movzx  ecx,cl
c001bfe7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bfee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bff1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bff5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bff9:	8d 50 02             	lea    edx,[eax+0x2]
c001bffc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c001:	0f b6 d2             	movzx  edx,dl
c001c004:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c00a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c00d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c011:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c015:	8d 48 03             	lea    ecx,[eax+0x3]
c001c018:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c01d:	0f b6 c9             	movzx  ecx,cl
c001c020:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c026:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c029:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c02d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c031:	8d 50 04             	lea    edx,[eax+0x4]
c001c034:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c03a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c03f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c046:	66 85 f6             	test   si,si
c001c049:	74 3e                	je     c001c089 <IDE::open(int, int, void*)+0x301>
c001c04b:	0f b6 d2             	movzx  edx,dl
c001c04e:	83 c0 05             	add    eax,0x5
c001c051:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c054:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c058:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c05c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c062:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c067:	eb 20                	jmp    c001c089 <IDE::open(int, int, void*)+0x301>
c001c069:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c073:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c07d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c084:	e9 02 ff ff ff       	jmp    c001bf8b <IDE::open(int, int, void*)+0x203>
c001c089:	52                   	push   edx
c001c08a:	52                   	push   edx
c001c08b:	6a 00                	push   0x0
c001c08d:	53                   	push   ebx
c001c08e:	e8 7d fa ff ff       	call   c001bb10 <IDE::prepareInterrupt(unsigned char)>
c001c093:	59                   	pop    ecx
c001c094:	5e                   	pop    esi
c001c095:	6a 01                	push   0x1
c001c097:	53                   	push   ebx
c001c098:	e8 73 fa ff ff       	call   c001bb10 <IDE::prepareInterrupt(unsigned char)>
c001c09d:	83 c4 0c             	add    esp,0xc
c001c0a0:	6a 00                	push   0x0
c001c0a2:	6a 00                	push   0x0
c001c0a4:	53                   	push   ebx
c001c0a5:	e8 98 fc ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001c0aa:	83 c4 0c             	add    esp,0xc
c001c0ad:	6a 00                	push   0x0
c001c0af:	6a 01                	push   0x1
c001c0b1:	53                   	push   ebx
c001c0b2:	e8 8b fc ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c0c1:	74 40                	je     c001c103 <IDE::open(int, int, void*)+0x37b>
c001c0c3:	83 ec 0c             	sub    esp,0xc
c001c0c6:	68 f7 a7 03 c0       	push   0xc003a7f7
c001c0cb:	e8 ce 0d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c0d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0d3:	6a 01                	push   0x1
c001c0d5:	68 0a bd 01 c0       	push   0xc001bd0a
c001c0da:	6a 0e                	push   0xe
c001c0dc:	53                   	push   ebx
c001c0dd:	e8 ca 75 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0e2:	83 c4 14             	add    esp,0x14
c001c0e5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0eb:	53                   	push   ebx
c001c0ec:	6a 01                	push   0x1
c001c0ee:	68 26 bd 01 c0       	push   0xc001bd26
c001c0f3:	6a 0f                	push   0xf
c001c0f5:	53                   	push   ebx
c001c0f6:	e8 b1 75 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0fb:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c101:	eb 4a                	jmp    c001c14d <IDE::open(int, int, void*)+0x3c5>
c001c103:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c10d:	50                   	push   eax
c001c10e:	6a 0f                	push   0xf
c001c110:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c116:	68 13 a8 03 c0       	push   0xc003a813
c001c11b:	e8 7e 0d ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c123:	6a 00                	push   0x0
c001c125:	68 0a bd 01 c0       	push   0xc001bd0a
c001c12a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c130:	53                   	push   ebx
c001c131:	e8 76 75 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c136:	83 c4 14             	add    esp,0x14
c001c139:	53                   	push   ebx
c001c13a:	6a 00                	push   0x0
c001c13c:	68 26 bd 01 c0       	push   0xc001bd26
c001c141:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c147:	53                   	push   ebx
c001c148:	e8 5f 75 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c14d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c14f:	83 c4 20             	add    esp,0x20
c001c152:	83 ec 0c             	sub    esp,0xc
c001c155:	53                   	push   ebx
c001c156:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c159:	83 c4 0c             	add    esp,0xc
c001c15c:	6a 07                	push   0x7
c001c15e:	6a 00                	push   0x0
c001c160:	53                   	push   ebx
c001c161:	e8 90 fa ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c166:	83 c4 0c             	add    esp,0xc
c001c169:	6a 07                	push   0x7
c001c16b:	6a 01                	push   0x1
c001c16d:	53                   	push   ebx
c001c16e:	e8 83 fa ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c173:	83 c4 0c             	add    esp,0xc
c001c176:	6a 01                	push   0x1
c001c178:	6a 00                	push   0x0
c001c17a:	53                   	push   ebx
c001c17b:	e8 c2 fb ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001c180:	83 c4 0c             	add    esp,0xc
c001c183:	6a 01                	push   0x1
c001c185:	6a 01                	push   0x1
c001c187:	53                   	push   ebx
c001c188:	e8 b5 fb ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001c18d:	83 c4 2c             	add    esp,0x2c
c001c190:	31 c0                	xor    eax,eax
c001c192:	5b                   	pop    ebx
c001c193:	5e                   	pop    esi
c001c194:	5f                   	pop    edi
c001c195:	5d                   	pop    ebp
c001c196:	c3                   	ret    
c001c197:	90                   	nop

c001c198 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c198:	55                   	push   ebp
c001c199:	57                   	push   edi
c001c19a:	56                   	push   esi
c001c19b:	53                   	push   ebx
c001c19c:	83 ec 1c             	sub    esp,0x1c
c001c19f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1a7:	8d 50 f8             	lea    edx,[eax-0x8]
c001c1aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1ae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c1b2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c1b6:	80 fa 03             	cmp    dl,0x3
c001c1b9:	77 5d                	ja     c001c218 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c1bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1c3:	0f b6 db             	movzx  ebx,bl
c001c1c6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c1c9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c1cd:	83 ca 80             	or     edx,0xffffff80
c001c1d0:	0f b6 d2             	movzx  edx,dl
c001c1d3:	52                   	push   edx
c001c1d4:	6a 0c                	push   0xc
c001c1d6:	53                   	push   ebx
c001c1d7:	56                   	push   esi
c001c1d8:	e8 59 f9 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1dd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c1e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1ea:	0f b6 c0             	movzx  eax,al
c001c1ed:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c1f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c1f3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c1f8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c1fc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c200:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c204:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c20c:	83 c4 2c             	add    esp,0x2c
c001c20f:	5b                   	pop    ebx
c001c210:	5e                   	pop    esi
c001c211:	5f                   	pop    edi
c001c212:	5d                   	pop    ebp
c001c213:	e9 1e f9 ff ff       	jmp    c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c218:	3c 07                	cmp    al,0x7
c001c21a:	77 10                	ja     c001c22c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c21c:	0f b6 db             	movzx  ebx,bl
c001c21f:	0f b6 d0             	movzx  edx,al
c001c222:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c22a:	eb 2d                	jmp    c001c259 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c22c:	3c 0d                	cmp    al,0xd
c001c22e:	77 13                	ja     c001c243 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c230:	0f b6 db             	movzx  ebx,bl
c001c233:	0f b6 c0             	movzx  eax,al
c001c236:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c23d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c241:	eb 16                	jmp    c001c259 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c243:	3c 15                	cmp    al,0x15
c001c245:	77 14                	ja     c001c25b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c247:	0f b6 db             	movzx  ebx,bl
c001c24a:	0f b6 c0             	movzx  eax,al
c001c24d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c255:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c259:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c25b:	83 c4 1c             	add    esp,0x1c
c001c25e:	5b                   	pop    ebx
c001c25f:	5e                   	pop    esi
c001c260:	5f                   	pop    edi
c001c261:	5d                   	pop    ebp
c001c262:	c3                   	ret    
c001c263:	90                   	nop

c001c264 <IDE::detect()>:
c001c264:	55                   	push   ebp
c001c265:	57                   	push   edi
c001c266:	56                   	push   esi
c001c267:	53                   	push   ebx
c001c268:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c26e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c275:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c27c:	0f 85 be 02 00 00    	jne    c001c540 <IDE::detect()+0x2dc>
c001c282:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c289:	31 f6                	xor    esi,esi
c001c28b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c293:	31 ed                	xor    ebp,ebp
c001c295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c299:	c1 e0 06             	shl    eax,0x6
c001c29c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c2a4:	89 e8                	mov    eax,ebp
c001c2a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c2aa:	c1 e0 04             	shl    eax,0x4
c001c2ad:	83 c8 a0             	or     eax,0xffffffa0
c001c2b0:	0f b6 c0             	movzx  eax,al
c001c2b3:	50                   	push   eax
c001c2b4:	6a 06                	push   0x6
c001c2b6:	56                   	push   esi
c001c2b7:	53                   	push   ebx
c001c2b8:	e8 79 f8 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2bd:	83 c4 0c             	add    esp,0xc
c001c2c0:	6a 0c                	push   0xc
c001c2c2:	56                   	push   esi
c001c2c3:	53                   	push   ebx
c001c2c4:	e8 2d f9 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c2c9:	83 c4 0c             	add    esp,0xc
c001c2cc:	6a 0c                	push   0xc
c001c2ce:	56                   	push   esi
c001c2cf:	53                   	push   ebx
c001c2d0:	e8 21 f9 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c2d5:	83 c4 0c             	add    esp,0xc
c001c2d8:	6a 0c                	push   0xc
c001c2da:	56                   	push   esi
c001c2db:	53                   	push   ebx
c001c2dc:	e8 15 f9 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c2e1:	83 c4 0c             	add    esp,0xc
c001c2e4:	6a 0c                	push   0xc
c001c2e6:	56                   	push   esi
c001c2e7:	53                   	push   ebx
c001c2e8:	e8 09 f9 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c2ed:	68 ec 00 00 00       	push   0xec
c001c2f2:	6a 07                	push   0x7
c001c2f4:	56                   	push   esi
c001c2f5:	53                   	push   ebx
c001c2f6:	e8 3b f8 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2fb:	83 c4 1c             	add    esp,0x1c
c001c2fe:	6a 0c                	push   0xc
c001c300:	56                   	push   esi
c001c301:	53                   	push   ebx
c001c302:	e8 ef f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c307:	83 c4 0c             	add    esp,0xc
c001c30a:	6a 0c                	push   0xc
c001c30c:	56                   	push   esi
c001c30d:	53                   	push   ebx
c001c30e:	e8 e3 f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c313:	83 c4 0c             	add    esp,0xc
c001c316:	6a 0c                	push   0xc
c001c318:	56                   	push   esi
c001c319:	53                   	push   ebx
c001c31a:	e8 d7 f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c31f:	83 c4 0c             	add    esp,0xc
c001c322:	6a 0c                	push   0xc
c001c324:	56                   	push   esi
c001c325:	53                   	push   ebx
c001c326:	e8 cb f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c32b:	83 c4 0c             	add    esp,0xc
c001c32e:	6a 0c                	push   0xc
c001c330:	56                   	push   esi
c001c331:	53                   	push   ebx
c001c332:	e8 bf f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	84 c0                	test   al,al
c001c33c:	0f 84 8b 01 00 00    	je     c001c4cd <IDE::detect()+0x269>
c001c342:	31 ff                	xor    edi,edi
c001c344:	50                   	push   eax
c001c345:	6a 0c                	push   0xc
c001c347:	56                   	push   esi
c001c348:	53                   	push   ebx
c001c349:	e8 a8 f8 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c34e:	83 c4 10             	add    esp,0x10
c001c351:	a8 01                	test   al,0x1
c001c353:	0f 85 8e 01 00 00    	jne    c001c4e7 <IDE::detect()+0x283>
c001c359:	84 c0                	test   al,al
c001c35b:	78 04                	js     c001c361 <IDE::detect()+0xfd>
c001c35d:	a8 08                	test   al,0x8
c001c35f:	75 27                	jne    c001c388 <IDE::detect()+0x124>
c001c361:	47                   	inc    edi
c001c362:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c368:	7e da                	jle    c001c344 <IDE::detect()+0xe0>
c001c36a:	50                   	push   eax
c001c36b:	50                   	push   eax
c001c36c:	6a 00                	push   0x0
c001c36e:	68 40 4b 4c 00       	push   0x4c4b40
c001c373:	e8 81 26 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c381:	75 c1                	jne    c001c344 <IDE::detect()+0xe0>
c001c383:	e9 5f 01 00 00       	jmp    c001c4e7 <IDE::detect()+0x283>
c001c388:	31 c9                	xor    ecx,ecx
c001c38a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c38e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	68 80 00 00 00       	push   0x80
c001c39a:	57                   	push   edi
c001c39b:	6a 00                	push   0x0
c001c39d:	56                   	push   esi
c001c39e:	53                   	push   ebx
c001c39f:	e8 f4 fd ff ff       	call   c001c198 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c3a4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c3a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3ad:	89 d1                	mov    ecx,edx
c001c3af:	c1 e0 06             	shl    eax,0x6
c001c3b2:	01 d8                	add    eax,ebx
c001c3b4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c3bb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c3c2:	89 f2                	mov    edx,esi
c001c3c4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c3ca:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c3ce:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c3d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c3d8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c3df:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c3e7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c3ee:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c3f6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c3fc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c403:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c409:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c40d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c411:	83 c4 20             	add    esp,0x20
c001c414:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c417:	83 c0 02             	add    eax,0x2
c001c41a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c420:	83 c7 02             	add    edi,0x2
c001c423:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c426:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c42c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c430:	75 e2                	jne    c001c414 <IDE::detect()+0x1b0>
c001c432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c436:	c1 e0 06             	shl    eax,0x6
c001c439:	01 d8                	add    eax,ebx
c001c43b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c441:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c448:	66 c1 ea 09          	shr    dx,0x9
c001c44c:	83 e2 01             	and    edx,0x1
c001c44f:	84 c9                	test   cl,cl
c001c451:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c457:	75 2f                	jne    c001c488 <IDE::detect()+0x224>
c001c459:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c45f:	85 c0                	test   eax,eax
c001c461:	74 66                	je     c001c4c9 <IDE::detect()+0x265>
c001c463:	50                   	push   eax
c001c464:	55                   	push   ebp
c001c465:	56                   	push   esi
c001c466:	68 2f a8 03 c0       	push   0xc003a82f
c001c46b:	e8 2e 0a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c470:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c477:	e8 d2 5f ff ff       	call   c001244e <operator new(unsigned long)>
c001c47c:	89 c7                	mov    edi,eax
c001c47e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c481:	e8 e8 02 00 00       	call   c001c76e <ATA::ATA()>
c001c486:	eb 28                	jmp    c001c4b0 <IDE::detect()+0x24c>
c001c488:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c48e:	55                   	push   ebp
c001c48f:	56                   	push   esi
c001c490:	68 5e a8 03 c0       	push   0xc003a85e
c001c495:	e8 04 0a ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c49a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c4a1:	e8 a8 5f ff ff       	call   c001244e <operator new(unsigned long)>
c001c4a6:	89 c7                	mov    edi,eax
c001c4a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4ab:	e8 ee 08 00 00       	call   c001cd9e <ATAPI::ATAPI()>
c001c4b0:	5a                   	pop    edx
c001c4b1:	59                   	pop    ecx
c001c4b2:	57                   	push   edi
c001c4b3:	53                   	push   ebx
c001c4b4:	e8 9f 72 ff ff       	call   c0013758 <Device::addChild(Device*)>
c001c4b9:	8b 07                	mov    eax,DWORD PTR [edi]
c001c4bb:	53                   	push   ebx
c001c4bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4c0:	6a 00                	push   0x0
c001c4c2:	57                   	push   edi
c001c4c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4c6:	83 c4 20             	add    esp,0x20
c001c4c9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c4cd:	4d                   	dec    ebp
c001c4ce:	74 0a                	je     c001c4da <IDE::detect()+0x276>
c001c4d0:	bd 01 00 00 00       	mov    ebp,0x1
c001c4d5:	e9 bb fd ff ff       	jmp    c001c295 <IDE::detect()+0x31>
c001c4da:	4e                   	dec    esi
c001c4db:	74 63                	je     c001c540 <IDE::detect()+0x2dc>
c001c4dd:	be 01 00 00 00       	mov    esi,0x1
c001c4e2:	e9 ac fd ff ff       	jmp    c001c293 <IDE::detect()+0x2f>
c001c4e7:	50                   	push   eax
c001c4e8:	6a 04                	push   0x4
c001c4ea:	56                   	push   esi
c001c4eb:	53                   	push   ebx
c001c4ec:	e8 05 f7 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c4f1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c4f5:	83 c4 0c             	add    esp,0xc
c001c4f8:	6a 05                	push   0x5
c001c4fa:	56                   	push   esi
c001c4fb:	53                   	push   ebx
c001c4fc:	e8 f5 f6 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c501:	83 c4 10             	add    esp,0x10
c001c504:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c508:	80 fa 14             	cmp    dl,0x14
c001c50b:	75 04                	jne    c001c511 <IDE::detect()+0x2ad>
c001c50d:	3c eb                	cmp    al,0xeb
c001c50f:	eb 07                	jmp    c001c518 <IDE::detect()+0x2b4>
c001c511:	3c 96                	cmp    al,0x96
c001c513:	75 b8                	jne    c001c4cd <IDE::detect()+0x269>
c001c515:	80 fa 69             	cmp    dl,0x69
c001c518:	75 b3                	jne    c001c4cd <IDE::detect()+0x269>
c001c51a:	68 a1 00 00 00       	push   0xa1
c001c51f:	6a 07                	push   0x7
c001c521:	56                   	push   esi
c001c522:	53                   	push   ebx
c001c523:	e8 0e f6 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c528:	5f                   	pop    edi
c001c529:	58                   	pop    eax
c001c52a:	6a 00                	push   0x0
c001c52c:	68 40 42 0f 00       	push   0xf4240
c001c531:	e8 c3 24 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	b1 01                	mov    cl,0x1
c001c53b:	e9 4a fe ff ff       	jmp    c001c38a <IDE::detect()+0x126>
c001c540:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c546:	5b                   	pop    ebx
c001c547:	5e                   	pop    esi
c001c548:	5f                   	pop    edi
c001c549:	5d                   	pop    ebp
c001c54a:	c3                   	ret    
c001c54b:	90                   	nop

c001c54c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c54c:	55                   	push   ebp
c001c54d:	57                   	push   edi
c001c54e:	56                   	push   esi
c001c54f:	53                   	push   ebx
c001c550:	83 ec 1c             	sub    esp,0x1c
c001c553:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c557:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c55b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c55f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c563:	88 c3                	mov    bl,al
c001c565:	84 c0                	test   al,al
c001c567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c56b:	0f 84 67 01 00 00    	je     c001c6d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c571:	83 ec 0c             	sub    esp,0xc
c001c574:	68 8f a8 03 c0       	push   0xc003a88f
c001c579:	e8 20 09 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c585:	3c 01                	cmp    al,0x1
c001c587:	75 17                	jne    c001c5a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c589:	83 ec 0c             	sub    esp,0xc
c001c58c:	b3 13                	mov    bl,0x13
c001c58e:	68 9b a8 03 c0       	push   0xc003a89b
c001c593:	e8 06 09 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c598:	83 c4 10             	add    esp,0x10
c001c59b:	e9 25 01 00 00       	jmp    c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5a0:	3c 02                	cmp    al,0x2
c001c5a2:	0f 85 ef 00 00 00    	jne    c001c697 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c5a8:	d1 e6                	shl    esi,1
c001c5aa:	09 ee                	or     esi,ebp
c001c5ac:	52                   	push   edx
c001c5ad:	89 f0                	mov    eax,esi
c001c5af:	6a 01                	push   0x1
c001c5b1:	0f b6 f0             	movzx  esi,al
c001c5b4:	c1 e6 06             	shl    esi,0x6
c001c5b7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c5bf:	50                   	push   eax
c001c5c0:	57                   	push   edi
c001c5c1:	e8 30 f6 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c5c6:	83 c4 10             	add    esp,0x10
c001c5c9:	89 c6                	mov    esi,eax
c001c5cb:	a8 01                	test   al,0x1
c001c5cd:	74 12                	je     c001c5e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c5cf:	83 ec 0c             	sub    esp,0xc
c001c5d2:	b3 07                	mov    bl,0x7
c001c5d4:	68 b0 a8 03 c0       	push   0xc003a8b0
c001c5d9:	e8 c0 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	f7 c6 02 00 00 00    	test   esi,0x2
c001c5e7:	74 12                	je     c001c5fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c5e9:	83 ec 0c             	sub    esp,0xc
c001c5ec:	b3 03                	mov    bl,0x3
c001c5ee:	68 ce a8 03 c0       	push   0xc003a8ce
c001c5f3:	e8 a6 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	f7 c6 04 00 00 00    	test   esi,0x4
c001c601:	74 12                	je     c001c615 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c603:	83 ec 0c             	sub    esp,0xc
c001c606:	b3 14                	mov    bl,0x14
c001c608:	68 ee a8 03 c0       	push   0xc003a8ee
c001c60d:	e8 8c 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c612:	83 c4 10             	add    esp,0x10
c001c615:	f7 c6 08 00 00 00    	test   esi,0x8
c001c61b:	74 12                	je     c001c62f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c61d:	83 ec 0c             	sub    esp,0xc
c001c620:	b3 03                	mov    bl,0x3
c001c622:	68 ce a8 03 c0       	push   0xc003a8ce
c001c627:	e8 72 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c62c:	83 c4 10             	add    esp,0x10
c001c62f:	f7 c6 10 00 00 00    	test   esi,0x10
c001c635:	74 12                	je     c001c649 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	b3 15                	mov    bl,0x15
c001c63c:	68 06 a9 03 c0       	push   0xc003a906
c001c641:	e8 58 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c646:	83 c4 10             	add    esp,0x10
c001c649:	f7 c6 20 00 00 00    	test   esi,0x20
c001c64f:	74 12                	je     c001c663 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c651:	83 ec 0c             	sub    esp,0xc
c001c654:	b3 03                	mov    bl,0x3
c001c656:	68 ce a8 03 c0       	push   0xc003a8ce
c001c65b:	e8 3e 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c660:	83 c4 10             	add    esp,0x10
c001c663:	f7 c6 40 00 00 00    	test   esi,0x40
c001c669:	74 12                	je     c001c67d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c66b:	83 ec 0c             	sub    esp,0xc
c001c66e:	b3 16                	mov    bl,0x16
c001c670:	68 20 a9 03 c0       	push   0xc003a920
c001c675:	e8 24 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	89 f0                	mov    eax,esi
c001c67f:	84 c0                	test   al,al
c001c681:	79 42                	jns    c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c683:	83 ec 0c             	sub    esp,0xc
c001c686:	b3 0d                	mov    bl,0xd
c001c688:	68 41 a9 03 c0       	push   0xc003a941
c001c68d:	e8 0c 08 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c692:	83 c4 10             	add    esp,0x10
c001c695:	eb 2e                	jmp    c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c697:	3c 03                	cmp    al,0x3
c001c699:	75 14                	jne    c001c6af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	b3 17                	mov    bl,0x17
c001c6a0:	68 55 a9 03 c0       	push   0xc003a955
c001c6a5:	e8 f4 07 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	eb 16                	jmp    c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6af:	3c 04                	cmp    al,0x4
c001c6b1:	75 12                	jne    c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6b3:	83 ec 0c             	sub    esp,0xc
c001c6b6:	b3 08                	mov    bl,0x8
c001c6b8:	68 6b a9 03 c0       	push   0xc003a96b
c001c6bd:	e8 dc 07 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	50                   	push   eax
c001c6c6:	50                   	push   eax
c001c6c7:	0f b6 c3             	movzx  eax,bl
c001c6ca:	50                   	push   eax
c001c6cb:	68 83 a9 03 c0       	push   0xc003a983
c001c6d0:	e8 c9 07 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	83 c4 1c             	add    esp,0x1c
c001c6db:	88 d8                	mov    al,bl
c001c6dd:	5b                   	pop    ebx
c001c6de:	5e                   	pop    esi
c001c6df:	5f                   	pop    edi
c001c6e0:	5d                   	pop    ebp
c001c6e1:	c3                   	ret    

c001c6e2 <IDE::polling(unsigned char, unsigned int)>:
c001c6e2:	57                   	push   edi
c001c6e3:	56                   	push   esi
c001c6e4:	53                   	push   ebx
c001c6e5:	bb 04 00 00 00       	mov    ebx,0x4
c001c6ea:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c6ee:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c6f3:	52                   	push   edx
c001c6f4:	6a 0c                	push   0xc
c001c6f6:	56                   	push   esi
c001c6f7:	57                   	push   edi
c001c6f8:	e8 f9 f4 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c6fd:	83 c4 10             	add    esp,0x10
c001c700:	4b                   	dec    ebx
c001c701:	75 f0                	jne    c001c6f3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c703:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c708:	50                   	push   eax
c001c709:	6a 0c                	push   0xc
c001c70b:	56                   	push   esi
c001c70c:	57                   	push   edi
c001c70d:	e8 e4 f4 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c712:	83 c4 10             	add    esp,0x10
c001c715:	a8 01                	test   al,0x1
c001c717:	74 12                	je     c001c72b <IDE::polling(unsigned char, unsigned int)+0x49>
c001c719:	83 ec 0c             	sub    esp,0xc
c001c71c:	68 9d a9 03 c0       	push   0xc003a99d
c001c721:	e8 78 07 ff ff       	call   c000ce9e <kprintf(char const*, ...)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	eb 17                	jmp    c001c742 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c72b:	a8 20                	test   al,0x20
c001c72d:	75 0f                	jne    c001c73e <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c72f:	4b                   	dec    ebx
c001c730:	74 10                	je     c001c742 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c732:	84 c0                	test   al,al
c001c734:	78 d2                	js     c001c708 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c736:	a8 08                	test   al,0x8
c001c738:	74 ce                	je     c001c708 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c73a:	31 c0                	xor    eax,eax
c001c73c:	eb 06                	jmp    c001c744 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c73e:	b0 01                	mov    al,0x1
c001c740:	eb 02                	jmp    c001c744 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c742:	b0 02                	mov    al,0x2
c001c744:	5b                   	pop    ebx
c001c745:	5e                   	pop    esi
c001c746:	5f                   	pop    edi
c001c747:	c3                   	ret    

c001c748 <ATA::close(int, int, void*)>:
c001c748:	83 ec 0c             	sub    esp,0xc
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c755:	85 c0                	test   eax,eax
c001c757:	74 0c                	je     c001c765 <ATA::close(int, int, void*)+0x1d>
c001c759:	83 ec 0c             	sub    esp,0xc
c001c75c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c75e:	50                   	push   eax
c001c75f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c762:	83 c4 10             	add    esp,0x10
c001c765:	31 c0                	xor    eax,eax
c001c767:	83 c4 0c             	add    esp,0xc
c001c76a:	c3                   	ret    
c001c76b:	90                   	nop

c001c76c <ATA::powerSaving(PowerSavingLevel)>:
c001c76c:	c3                   	ret    
c001c76d:	90                   	nop

c001c76e <ATA::ATA()>:
c001c76e:	83 ec 0c             	sub    esp,0xc
c001c771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c775:	83 ec 04             	sub    esp,0x4
c001c778:	68 00 02 00 00       	push   0x200
c001c77d:	68 e0 a9 03 c0       	push   0xc003a9e0
c001c782:	50                   	push   eax
c001c783:	e8 d6 73 ff ff       	call   c0013b5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	ba 0c aa 03 c0       	mov    edx,0xc003aa0c
c001c790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c794:	89 10                	mov    DWORD PTR [eax],edx
c001c796:	90                   	nop
c001c797:	83 c4 0c             	add    esp,0xc
c001c79a:	c3                   	ret    
c001c79b:	90                   	nop

c001c79c <ATA::flush(bool)>:
c001c79c:	53                   	push   ebx
c001c79d:	83 ec 08             	sub    esp,0x8
c001c7a0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c7a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7a9:	19 c0                	sbb    eax,eax
c001c7ab:	83 e0 fd             	and    eax,0xfffffffd
c001c7ae:	05 ea 00 00 00       	add    eax,0xea
c001c7b3:	50                   	push   eax
c001c7b4:	6a 07                	push   0x7
c001c7b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7bd:	50                   	push   eax
c001c7be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7c4:	e8 6d f3 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7c9:	83 c4 0c             	add    esp,0xc
c001c7cc:	6a 00                	push   0x0
c001c7ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7d5:	50                   	push   eax
c001c7d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7dc:	e8 01 ff ff ff       	call   c001c6e2 <IDE::polling(unsigned char, unsigned int)>
c001c7e1:	83 c4 18             	add    esp,0x18
c001c7e4:	5b                   	pop    ebx
c001c7e5:	c3                   	ret    

c001c7e6 <ATA::readyForCommand()>:
c001c7e6:	56                   	push   esi
c001c7e7:	53                   	push   ebx
c001c7e8:	31 db                	xor    ebx,ebx
c001c7ea:	50                   	push   eax
c001c7eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7ef:	50                   	push   eax
c001c7f0:	6a 0c                	push   0xc
c001c7f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7f9:	50                   	push   eax
c001c7fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c800:	e8 f1 f3 ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001c805:	83 c4 10             	add    esp,0x10
c001c808:	a8 88                	test   al,0x88
c001c80a:	74 23                	je     c001c82f <ATA::readyForCommand()+0x49>
c001c80c:	43                   	inc    ebx
c001c80d:	83 fb 63             	cmp    ebx,0x63
c001c810:	7e dd                	jle    c001c7ef <ATA::readyForCommand()+0x9>
c001c812:	51                   	push   ecx
c001c813:	51                   	push   ecx
c001c814:	6a 00                	push   0x0
c001c816:	68 40 42 0f 00       	push   0xf4240
c001c81b:	e8 d9 21 ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001c820:	83 c4 10             	add    esp,0x10
c001c823:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c829:	75 c4                	jne    c001c7ef <ATA::readyForCommand()+0x9>
c001c82b:	31 c0                	xor    eax,eax
c001c82d:	eb 02                	jmp    c001c831 <ATA::readyForCommand()+0x4b>
c001c82f:	b0 01                	mov    al,0x1
c001c831:	5a                   	pop    edx
c001c832:	5b                   	pop    ebx
c001c833:	5e                   	pop    esi
c001c834:	c3                   	ret    
c001c835:	90                   	nop

c001c836 <ATA::access(unsigned long long, int, void*, bool)>:
c001c836:	55                   	push   ebp
c001c837:	57                   	push   edi
c001c838:	56                   	push   esi
c001c839:	53                   	push   ebx
c001c83a:	83 ec 2c             	sub    esp,0x2c
c001c83d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c841:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c845:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c849:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c84d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c851:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c855:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c859:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c85f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c863:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c869:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c86d:	c1 e0 06             	shl    eax,0x6
c001c870:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c878:	74 5d                	je     c001c8d7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c87a:	89 fa                	mov    edx,edi
c001c87c:	89 f0                	mov    eax,esi
c001c87e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c882:	c1 ea 1c             	shr    edx,0x1c
c001c885:	89 d1                	mov    ecx,edx
c001c887:	09 c1                	or     ecx,eax
c001c889:	74 25                	je     c001c8b0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c88b:	31 ed                	xor    ebp,ebp
c001c88d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c894:	89 fa                	mov    edx,edi
c001c896:	89 f0                	mov    eax,esi
c001c898:	0f ad d0             	shrd   eax,edx,cl
c001c89b:	d3 ea                	shr    edx,cl
c001c89d:	f6 c1 20             	test   cl,0x20
c001c8a0:	74 02                	je     c001c8a4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8a2:	89 d0                	mov    eax,edx
c001c8a4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8a8:	45                   	inc    ebp
c001c8a9:	83 fd 06             	cmp    ebp,0x6
c001c8ac:	75 df                	jne    c001c88d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8ae:	eb 76                	jmp    c001c926 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c8b0:	89 f0                	mov    eax,esi
c001c8b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8b7:	89 fa                	mov    edx,edi
c001c8b9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8c0:	0f ac d0 10          	shrd   eax,edx,0x10
c001c8c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8c9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8cd:	c1 ee 18             	shr    esi,0x18
c001c8d0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c8d5:	eb 56                	jmp    c001c92d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8d7:	6a 00                	push   0x0
c001c8d9:	6a 3f                	push   0x3f
c001c8db:	57                   	push   edi
c001c8dc:	56                   	push   esi
c001c8dd:	e8 da 1e 00 00       	call   c001e7bc <__umoddi3>
c001c8e2:	83 c4 10             	add    esp,0x10
c001c8e5:	40                   	inc    eax
c001c8e6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8ea:	6a 00                	push   0x0
c001c8ec:	68 f0 03 00 00       	push   0x3f0
c001c8f1:	57                   	push   edi
c001c8f2:	56                   	push   esi
c001c8f3:	e8 c4 1d 00 00       	call   c001e6bc <__udivdi3>
c001c8f8:	83 c4 10             	add    esp,0x10
c001c8fb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c900:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c907:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c90c:	6a 00                	push   0x0
c001c90e:	6a 3f                	push   0x3f
c001c910:	57                   	push   edi
c001c911:	56                   	push   esi
c001c912:	e8 a5 1d 00 00       	call   c001e6bc <__udivdi3>
c001c917:	83 c4 10             	add    esp,0x10
c001c91a:	89 c6                	mov    esi,eax
c001c91c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c921:	83 e6 0f             	and    esi,0xf
c001c924:	eb 07                	jmp    c001c92d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c926:	31 f6                	xor    esi,esi
c001c928:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c92d:	bf 01 00 00 00       	mov    edi,0x1
c001c932:	50                   	push   eax
c001c933:	6a 00                	push   0x0
c001c935:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c93c:	50                   	push   eax
c001c93d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c941:	e8 fc f3 ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001c946:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c949:	e8 98 fe ff ff       	call   c001c7e6 <ATA::readyForCommand()>
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	84 c0                	test   al,al
c001c953:	0f 84 50 02 00 00    	je     c001cba9 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c959:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c95f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c965:	c1 e0 04             	shl    eax,0x4
c001c968:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c96f:	09 c6                	or     esi,eax
c001c971:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c976:	75 05                	jne    c001c97d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c978:	83 ce a0             	or     esi,0xffffffa0
c001c97b:	eb 03                	jmp    c001c980 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c97d:	83 ce e0             	or     esi,0xffffffe0
c001c980:	89 f0                	mov    eax,esi
c001c982:	0f b6 f0             	movzx  esi,al
c001c985:	56                   	push   esi
c001c986:	6a 06                	push   0x6
c001c988:	51                   	push   ecx
c001c989:	52                   	push   edx
c001c98a:	e8 a7 f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	6a 00                	push   0x0
c001c994:	6a 01                	push   0x1
c001c996:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c99d:	50                   	push   eax
c001c99e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9a4:	e8 8d f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a9:	83 c4 10             	add    esp,0x10
c001c9ac:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c9b1:	75 6e                	jne    c001ca21 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c9b3:	6a 00                	push   0x0
c001c9b5:	6a 08                	push   0x8
c001c9b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9be:	50                   	push   eax
c001c9bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9c5:	e8 6c f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ca:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9cf:	50                   	push   eax
c001c9d0:	6a 09                	push   0x9
c001c9d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d9:	50                   	push   eax
c001c9da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e0:	e8 51 f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e5:	83 c4 20             	add    esp,0x20
c001c9e8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9ed:	50                   	push   eax
c001c9ee:	6a 0a                	push   0xa
c001c9f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f7:	50                   	push   eax
c001c9f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9fe:	e8 33 f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca03:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca08:	50                   	push   eax
c001ca09:	6a 0b                	push   0xb
c001ca0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca12:	50                   	push   eax
c001ca13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca19:	e8 18 f1 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca1e:	83 c4 20             	add    esp,0x20
c001ca21:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca26:	50                   	push   eax
c001ca27:	6a 02                	push   0x2
c001ca29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca30:	50                   	push   eax
c001ca31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca37:	e8 fa f0 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca3c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca41:	50                   	push   eax
c001ca42:	6a 03                	push   0x3
c001ca44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca4b:	50                   	push   eax
c001ca4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca52:	e8 df f0 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca57:	83 c4 20             	add    esp,0x20
c001ca5a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca5f:	50                   	push   eax
c001ca60:	6a 04                	push   0x4
c001ca62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca69:	50                   	push   eax
c001ca6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca70:	e8 c1 f0 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca7a:	50                   	push   eax
c001ca7b:	6a 05                	push   0x5
c001ca7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca84:	50                   	push   eax
c001ca85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca8b:	e8 a6 f0 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca90:	83 c4 20             	add    esp,0x20
c001ca93:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca98:	0f 94 c0             	sete   al
c001ca9b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001caa0:	74 09                	je     c001caab <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001caa2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001caa9:	eb 07                	jmp    c001cab2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001caab:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cab2:	0f b6 c0             	movzx  eax,al
c001cab5:	50                   	push   eax
c001cab6:	6a 07                	push   0x7
c001cab8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cabf:	50                   	push   eax
c001cac0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cac6:	e8 6b f0 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cacb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cacf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	85 f6                	test   esi,esi
c001cad8:	0f 84 ac 00 00 00    	je     c001cb8a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cade:	50                   	push   eax
c001cadf:	6a 01                	push   0x1
c001cae1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae8:	50                   	push   eax
c001cae9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caef:	e8 ee fb ff ff       	call   c001c6e2 <IDE::polling(unsigned char, unsigned int)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cafd:	84 c0                	test   al,al
c001caff:	74 20                	je     c001cb21 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb01:	0f b6 f8             	movzx  edi,al
c001cb04:	0f b6 d2             	movzx  edx,dl
c001cb07:	57                   	push   edi
c001cb08:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb0f:	50                   	push   eax
c001cb10:	52                   	push   edx
c001cb11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb17:	e8 30 fa ff ff       	call   c001c54c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb1c:	e9 85 00 00 00       	jmp    c001cba6 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb21:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cb26:	74 41                	je     c001cb69 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cb28:	31 c9                	xor    ecx,ecx
c001cb2a:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cb2e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb32:	50                   	push   eax
c001cb33:	50                   	push   eax
c001cb34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb3b:	50                   	push   eax
c001cb3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb42:	e8 dd ef ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001cb47:	89 c2                	mov    edx,eax
c001cb49:	89 e8                	mov    eax,ebp
c001cb4b:	66 ef                	out    dx,ax
c001cb4d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb51:	83 c4 10             	add    esp,0x10
c001cb54:	41                   	inc    ecx
c001cb55:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb5b:	75 cd                	jne    c001cb2a <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cb5d:	4e                   	dec    esi
c001cb5e:	81 c7 00 02 00 00    	add    edi,0x200
c001cb64:	e9 6d ff ff ff       	jmp    c001cad6 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cb69:	0f b6 d2             	movzx  edx,dl
c001cb6c:	51                   	push   ecx
c001cb6d:	51                   	push   ecx
c001cb6e:	52                   	push   edx
c001cb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb75:	e8 aa ef ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001cb7a:	b9 00 01 00 00       	mov    ecx,0x100
c001cb7f:	89 c2                	mov    edx,eax
c001cb81:	fc                   	cld    
c001cb82:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	eb d3                	jmp    c001cb5d <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cb8a:	31 ff                	xor    edi,edi
c001cb8c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb91:	74 16                	je     c001cba9 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cb93:	50                   	push   eax
c001cb94:	50                   	push   eax
c001cb95:	31 c0                	xor    eax,eax
c001cb97:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cb9c:	0f 94 c0             	sete   al
c001cb9f:	50                   	push   eax
c001cba0:	53                   	push   ebx
c001cba1:	e8 f6 fb ff ff       	call   c001c79c <ATA::flush(bool)>
c001cba6:	83 c4 10             	add    esp,0x10
c001cba9:	83 c4 2c             	add    esp,0x2c
c001cbac:	89 f8                	mov    eax,edi
c001cbae:	5b                   	pop    ebx
c001cbaf:	5e                   	pop    esi
c001cbb0:	5f                   	pop    edi
c001cbb1:	5d                   	pop    ebp
c001cbb2:	c3                   	ret    
c001cbb3:	90                   	nop

c001cbb4 <ATA::read(unsigned long long, int, void*)>:
c001cbb4:	57                   	push   edi
c001cbb5:	b8 04 00 00 00       	mov    eax,0x4
c001cbba:	56                   	push   esi
c001cbbb:	53                   	push   ebx
c001cbbc:	83 ec 10             	sub    esp,0x10
c001cbbf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbc3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbc7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cbca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbd2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cbd8:	77 3b                	ja     c001cc15 <ATA::read(unsigned long long, int, void*)+0x61>
c001cbda:	b8 06 00 00 00       	mov    eax,0x6
c001cbdf:	85 d2                	test   edx,edx
c001cbe1:	74 32                	je     c001cc15 <ATA::read(unsigned long long, int, void*)+0x61>
c001cbe3:	50                   	push   eax
c001cbe4:	50                   	push   eax
c001cbe5:	6a 00                	push   0x0
c001cbe7:	52                   	push   edx
c001cbe8:	53                   	push   ebx
c001cbe9:	57                   	push   edi
c001cbea:	56                   	push   esi
c001cbeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbef:	e8 42 fc ff ff       	call   c001c836 <ATA::access(unsigned long long, int, void*, bool)>
c001cbf4:	83 c4 20             	add    esp,0x20
c001cbf7:	85 c0                	test   eax,eax
c001cbf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbfd:	75 11                	jne    c001cc10 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cbff:	01 1d a8 d0 03 c0    	add    DWORD PTR ds:0xc003d0a8,ebx
c001cc05:	e8 c2 36 ff ff       	call   c00102cc <VgaText::updateDiskUsage()>
c001cc0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc0e:	eb 05                	jmp    c001cc15 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc10:	b8 01 00 00 00       	mov    eax,0x1
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	5b                   	pop    ebx
c001cc19:	5e                   	pop    esi
c001cc1a:	5f                   	pop    edi
c001cc1b:	c3                   	ret    

c001cc1c <ATA::write(unsigned long long, int, void*)>:
c001cc1c:	57                   	push   edi
c001cc1d:	b8 04 00 00 00       	mov    eax,0x4
c001cc22:	56                   	push   esi
c001cc23:	53                   	push   ebx
c001cc24:	83 ec 10             	sub    esp,0x10
c001cc27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc2f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc32:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc3a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc40:	77 3b                	ja     c001cc7d <ATA::write(unsigned long long, int, void*)+0x61>
c001cc42:	b8 06 00 00 00       	mov    eax,0x6
c001cc47:	85 d2                	test   edx,edx
c001cc49:	74 32                	je     c001cc7d <ATA::write(unsigned long long, int, void*)+0x61>
c001cc4b:	50                   	push   eax
c001cc4c:	50                   	push   eax
c001cc4d:	6a 01                	push   0x1
c001cc4f:	52                   	push   edx
c001cc50:	53                   	push   ebx
c001cc51:	57                   	push   edi
c001cc52:	56                   	push   esi
c001cc53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc57:	e8 da fb ff ff       	call   c001c836 <ATA::access(unsigned long long, int, void*, bool)>
c001cc5c:	83 c4 20             	add    esp,0x20
c001cc5f:	85 c0                	test   eax,eax
c001cc61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc65:	75 11                	jne    c001cc78 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cc67:	01 1d a4 d0 03 c0    	add    DWORD PTR ds:0xc003d0a4,ebx
c001cc6d:	e8 5a 36 ff ff       	call   c00102cc <VgaText::updateDiskUsage()>
c001cc72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc76:	eb 05                	jmp    c001cc7d <ATA::write(unsigned long long, int, void*)+0x61>
c001cc78:	b8 01 00 00 00       	mov    eax,0x1
c001cc7d:	83 c4 10             	add    esp,0x10
c001cc80:	5b                   	pop    ebx
c001cc81:	5e                   	pop    esi
c001cc82:	5f                   	pop    edi
c001cc83:	c3                   	ret    

c001cc84 <ATA::detectCHS()>:
c001cc84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc88:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc8e:	c1 e0 06             	shl    eax,0x6
c001cc91:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc97:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cca1:	c7 44 24 04 ef a9 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a9ef
c001cca9:	e9 0e 03 ff ff       	jmp    c000cfbc <panic(char const*)>

c001ccae <ATA::open(int, int, void*)>:
c001ccae:	53                   	push   ebx
c001ccaf:	83 ec 08             	sub    esp,0x8
c001ccb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccbe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ccc4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ccca:	c1 e0 06             	shl    eax,0x6
c001cccd:	01 d0                	add    eax,edx
c001cccf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ccd6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ccdc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cce3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cced:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ccf3:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ccfa:	75 0c                	jne    c001cd08 <ATA::open(int, int, void*)+0x5a>
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	53                   	push   ebx
c001cd00:	e8 7f ff ff ff       	call   c001cc84 <ATA::detectCHS()>
c001cd05:	83 c4 10             	add    esp,0x10
c001cd08:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd0e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd14:	c1 e0 06             	shl    eax,0x6
c001cd17:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd1e:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd28:	d1 e8                	shr    eax,1
c001cd2a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd30:	6a 04                	push   0x4
c001cd32:	6a 0c                	push   0xc
c001cd34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd3b:	50                   	push   eax
c001cd3c:	52                   	push   edx
c001cd3d:	e8 f4 ed ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd42:	90                   	nop
c001cd43:	90                   	nop
c001cd44:	6a 00                	push   0x0
c001cd46:	6a 0c                	push   0xc
c001cd48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd4f:	50                   	push   eax
c001cd50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd56:	e8 db ed ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5b:	83 c4 14             	add    esp,0x14
c001cd5e:	53                   	push   ebx
c001cd5f:	e8 62 6e ff ff       	call   c0013bc6 <PhysicalDisk::startCache()>
c001cd64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd67:	e8 b2 86 ff ff       	call   c001541e <createPartitionsForDisk(PhysicalDisk*)>
c001cd6c:	31 c0                	xor    eax,eax
c001cd6e:	83 c4 18             	add    esp,0x18
c001cd71:	5b                   	pop    ebx
c001cd72:	c3                   	ret    
c001cd73:	90                   	nop

c001cd74 <ATAPI::write(unsigned long long, int, void*)>:
c001cd74:	b8 03 00 00 00       	mov    eax,0x3
c001cd79:	c3                   	ret    

c001cd7a <ATAPI::close(int, int, void*)>:
c001cd7a:	83 ec 0c             	sub    esp,0xc
c001cd7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd81:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd87:	85 c0                	test   eax,eax
c001cd89:	74 0c                	je     c001cd97 <ATAPI::close(int, int, void*)+0x1d>
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd90:	50                   	push   eax
c001cd91:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd94:	83 c4 10             	add    esp,0x10
c001cd97:	31 c0                	xor    eax,eax
c001cd99:	83 c4 0c             	add    esp,0xc
c001cd9c:	c3                   	ret    
c001cd9d:	90                   	nop

c001cd9e <ATAPI::ATAPI()>:
c001cd9e:	83 ec 0c             	sub    esp,0xc
c001cda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda5:	83 ec 04             	sub    esp,0x4
c001cda8:	68 00 08 00 00       	push   0x800
c001cdad:	68 38 aa 03 c0       	push   0xc003aa38
c001cdb2:	50                   	push   eax
c001cdb3:	e8 a6 6d ff ff       	call   c0013b5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	ba 78 aa 03 c0       	mov    edx,0xc003aa78
c001cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc4:	89 10                	mov    DWORD PTR [eax],edx
c001cdc6:	90                   	nop
c001cdc7:	83 c4 0c             	add    esp,0xc
c001cdca:	c3                   	ret    
c001cdcb:	90                   	nop

c001cdcc <ATAPI::readyForCommand()>:
c001cdcc:	56                   	push   esi
c001cdcd:	53                   	push   ebx
c001cdce:	31 db                	xor    ebx,ebx
c001cdd0:	50                   	push   eax
c001cdd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdd5:	50                   	push   eax
c001cdd6:	6a 0c                	push   0xc
c001cdd8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cddf:	50                   	push   eax
c001cde0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cde6:	e8 0b ee ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	a8 88                	test   al,0x88
c001cdf0:	74 23                	je     c001ce15 <ATAPI::readyForCommand()+0x49>
c001cdf2:	43                   	inc    ebx
c001cdf3:	83 fb 63             	cmp    ebx,0x63
c001cdf6:	7e dd                	jle    c001cdd5 <ATAPI::readyForCommand()+0x9>
c001cdf8:	51                   	push   ecx
c001cdf9:	51                   	push   ecx
c001cdfa:	6a 00                	push   0x0
c001cdfc:	68 40 42 0f 00       	push   0xf4240
c001ce01:	e8 f3 1b ff ff       	call   c000e9f9 <nanoSleep(unsigned long long)>
c001ce06:	83 c4 10             	add    esp,0x10
c001ce09:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce0f:	75 c4                	jne    c001cdd5 <ATAPI::readyForCommand()+0x9>
c001ce11:	31 c0                	xor    eax,eax
c001ce13:	eb 02                	jmp    c001ce17 <ATAPI::readyForCommand()+0x4b>
c001ce15:	b0 01                	mov    al,0x1
c001ce17:	5a                   	pop    edx
c001ce18:	5b                   	pop    ebx
c001ce19:	5e                   	pop    esi
c001ce1a:	c3                   	ret    
c001ce1b:	90                   	nop

c001ce1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce1c:	55                   	push   ebp
c001ce1d:	57                   	push   edi
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	83 ec 20             	sub    esp,0x20
c001ce23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce27:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce2b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ce2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce33:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ce37:	6a 01                	push   0x1
c001ce39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce40:	50                   	push   eax
c001ce41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce47:	e8 f6 ee ff ff       	call   c001bd42 <IDE::enableIRQs(unsigned char, bool)>
c001ce4c:	5e                   	pop    esi
c001ce4d:	58                   	pop    eax
c001ce4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce55:	50                   	push   eax
c001ce56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce5c:	e8 af ec ff ff       	call   c001bb10 <IDE::prepareInterrupt(unsigned char)>
c001ce61:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce64:	e8 63 ff ff ff       	call   c001cdcc <ATAPI::readyForCommand()>
c001ce69:	83 c4 10             	add    esp,0x10
c001ce6c:	84 c0                	test   al,al
c001ce6e:	75 0a                	jne    c001ce7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ce70:	bb 01 00 00 00       	mov    ebx,0x1
c001ce75:	e9 57 02 00 00       	jmp    c001d0d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ce7a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ce80:	c1 e0 04             	shl    eax,0x4
c001ce83:	0f b6 c0             	movzx  eax,al
c001ce86:	50                   	push   eax
c001ce87:	6a 06                	push   0x6
c001ce89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce90:	50                   	push   eax
c001ce91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce97:	e8 9a ec ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce9c:	6a 00                	push   0x0
c001ce9e:	6a 01                	push   0x1
c001cea0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cea7:	50                   	push   eax
c001cea8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceae:	e8 83 ec ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb3:	83 c4 20             	add    esp,0x20
c001ceb6:	0f b6 c3             	movzx  eax,bl
c001ceb9:	0f b6 df             	movzx  ebx,bh
c001cebc:	50                   	push   eax
c001cebd:	6a 04                	push   0x4
c001cebf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cec6:	50                   	push   eax
c001cec7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cecd:	e8 64 ec ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced2:	53                   	push   ebx
c001ced3:	6a 05                	push   0x5
c001ced5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cedc:	50                   	push   eax
c001cedd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cee3:	e8 4e ec ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee8:	83 c4 20             	add    esp,0x20
c001ceeb:	68 a0 00 00 00       	push   0xa0
c001cef0:	6a 07                	push   0x7
c001cef2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cef9:	50                   	push   eax
c001cefa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf00:	e8 31 ec ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf05:	83 c4 0c             	add    esp,0xc
c001cf08:	6a 01                	push   0x1
c001cf0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf11:	50                   	push   eax
c001cf12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf18:	e8 c5 f7 ff ff       	call   c001c6e2 <IDE::polling(unsigned char, unsigned int)>
c001cf1d:	83 c4 10             	add    esp,0x10
c001cf20:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cf26:	84 c0                	test   al,al
c001cf28:	74 23                	je     c001cf4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cf2a:	0f b6 d8             	movzx  ebx,al
c001cf2d:	0f b6 d2             	movzx  edx,dl
c001cf30:	53                   	push   ebx
c001cf31:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cf38:	50                   	push   eax
c001cf39:	52                   	push   edx
c001cf3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf40:	e8 07 f6 ff ff       	call   c001c54c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	e9 84 01 00 00       	jmp    c001d0d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf4d:	0f b6 d2             	movzx  edx,dl
c001cf50:	53                   	push   ebx
c001cf51:	53                   	push   ebx
c001cf52:	52                   	push   edx
c001cf53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf59:	e8 c6 eb ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001cf5e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cf62:	b9 06 00 00 00       	mov    ecx,0x6
c001cf67:	89 c2                	mov    edx,eax
c001cf69:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cf6c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf79:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf80:	85 db                	test   ebx,ebx
c001cf82:	0f 84 ec 00 00 00    	je     c001d074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cf88:	51                   	push   ecx
c001cf89:	51                   	push   ecx
c001cf8a:	52                   	push   edx
c001cf8b:	50                   	push   eax
c001cf8c:	e8 13 ed ff ff       	call   c001bca4 <IDE::waitInterrupt(unsigned char)>
c001cf91:	83 c4 10             	add    esp,0x10
c001cf94:	84 c0                	test   al,al
c001cf96:	0f 84 d4 fe ff ff    	je     c001ce70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cf9c:	56                   	push   esi
c001cf9d:	56                   	push   esi
c001cf9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfa5:	50                   	push   eax
c001cfa6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfac:	e8 5f eb ff ff       	call   c001bb10 <IDE::prepareInterrupt(unsigned char)>
c001cfb1:	83 c4 0c             	add    esp,0xc
c001cfb4:	6a 04                	push   0x4
c001cfb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfbd:	50                   	push   eax
c001cfbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfc4:	e8 2d ec ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001cfc9:	83 c4 0c             	add    esp,0xc
c001cfcc:	89 c6                	mov    esi,eax
c001cfce:	6a 05                	push   0x5
c001cfd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfd7:	50                   	push   eax
c001cfd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfde:	e8 13 ec ff ff       	call   c001bbf6 <IDE::read(unsigned char, unsigned char)>
c001cfe3:	89 f1                	mov    ecx,esi
c001cfe5:	0f b6 c0             	movzx  eax,al
c001cfe8:	0f b6 f1             	movzx  esi,cl
c001cfeb:	c1 e0 08             	shl    eax,0x8
c001cfee:	09 c6                	or     esi,eax
c001cff0:	d1 fe                	sar    esi,1
c001cff2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cffe:	74 41                	je     c001d041 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d000:	31 c9                	xor    ecx,ecx
c001d002:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d008:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d00f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d013:	75 0a                	jne    c001d01f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d015:	01 c9                	add    ecx,ecx
c001d017:	01 cd                	add    ebp,ecx
c001d019:	4b                   	dec    ebx
c001d01a:	e9 54 ff ff ff       	jmp    c001cf73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d01f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d024:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d028:	51                   	push   ecx
c001d029:	51                   	push   ecx
c001d02a:	52                   	push   edx
c001d02b:	50                   	push   eax
c001d02c:	e8 f3 ea ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001d031:	89 c2                	mov    edx,eax
c001d033:	89 f0                	mov    eax,esi
c001d035:	66 ef                	out    dx,ax
c001d037:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	41                   	inc    ecx
c001d03f:	eb c1                	jmp    c001d002 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d041:	31 f6                	xor    esi,esi
c001d043:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d049:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d050:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d054:	75 06                	jne    c001d05c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d056:	01 f6                	add    esi,esi
c001d058:	01 f5                	add    ebp,esi
c001d05a:	eb bd                	jmp    c001d019 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d05c:	51                   	push   ecx
c001d05d:	51                   	push   ecx
c001d05e:	52                   	push   edx
c001d05f:	50                   	push   eax
c001d060:	e8 bf ea ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001d065:	89 c2                	mov    edx,eax
c001d067:	66 ed                	in     ax,dx
c001d069:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	46                   	inc    esi
c001d072:	eb cf                	jmp    c001d043 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d074:	51                   	push   ecx
c001d075:	51                   	push   ecx
c001d076:	52                   	push   edx
c001d077:	50                   	push   eax
c001d078:	e8 27 ec ff ff       	call   c001bca4 <IDE::waitInterrupt(unsigned char)>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	84 c0                	test   al,al
c001d082:	0f 84 e8 fd ff ff    	je     c001ce70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d088:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d08d:	52                   	push   edx
c001d08e:	52                   	push   edx
c001d08f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d096:	50                   	push   eax
c001d097:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d09d:	e8 6e ea ff ff       	call   c001bb10 <IDE::prepareInterrupt(unsigned char)>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	50                   	push   eax
c001d0a6:	50                   	push   eax
c001d0a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0ae:	50                   	push   eax
c001d0af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0b5:	e8 6a ea ff ff       	call   c001bb24 <IDE::getBase(unsigned char)>
c001d0ba:	8d 50 07             	lea    edx,[eax+0x7]
c001d0bd:	ec                   	in     al,dx
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	a8 88                	test   al,0x88
c001d0c3:	74 0a                	je     c001d0cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d0c5:	4b                   	dec    ebx
c001d0c6:	75 dd                	jne    c001d0a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d0c8:	bb 02 00 00 00       	mov    ebx,0x2
c001d0cd:	eb 02                	jmp    c001d0d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d0cf:	31 db                	xor    ebx,ebx
c001d0d1:	83 c4 1c             	add    esp,0x1c
c001d0d4:	89 d8                	mov    eax,ebx
c001d0d6:	5b                   	pop    ebx
c001d0d7:	5e                   	pop    esi
c001d0d8:	5f                   	pop    edi
c001d0d9:	5d                   	pop    ebp
c001d0da:	c3                   	ret    
c001d0db:	90                   	nop

c001d0dc <ATAPI::diskRemoved()>:
c001d0dc:	83 ec 18             	sub    esp,0x18
c001d0df:	68 43 aa 03 c0       	push   0xc003aa43
c001d0e4:	e8 b5 fd fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001d0e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ed:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d0f4:	83 c4 1c             	add    esp,0x1c
c001d0f7:	c3                   	ret    

c001d0f8 <ATAPI::eject()>:
c001d0f8:	57                   	push   edi
c001d0f9:	b9 03 00 00 00       	mov    ecx,0x3
c001d0fe:	53                   	push   ebx
c001d0ff:	83 ec 14             	sub    esp,0x14
c001d102:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d106:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d10a:	fc                   	cld    
c001d10b:	31 c0                	xor    eax,eax
c001d10d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d10f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d114:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d119:	50                   	push   eax
c001d11a:	50                   	push   eax
c001d11b:	6a 00                	push   0x0
c001d11d:	6a 00                	push   0x0
c001d11f:	6a 00                	push   0x0
c001d121:	6a 02                	push   0x2
c001d123:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d127:	50                   	push   eax
c001d128:	53                   	push   ebx
c001d129:	e8 ee fc ff ff       	call   c001ce1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d12e:	83 c4 14             	add    esp,0x14
c001d131:	53                   	push   ebx
c001d132:	e8 a5 ff ff ff       	call   c001d0dc <ATAPI::diskRemoved()>
c001d137:	83 c4 24             	add    esp,0x24
c001d13a:	5b                   	pop    ebx
c001d13b:	5f                   	pop    edi
c001d13c:	c3                   	ret    
c001d13d:	90                   	nop

c001d13e <ATAPI::diskInserted()>:
c001d13e:	53                   	push   ebx
c001d13f:	83 ec 14             	sub    esp,0x14
c001d142:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d146:	68 59 aa 03 c0       	push   0xc003aa59
c001d14b:	e8 4e fd fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001d150:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d157:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d15a:	e8 67 6a ff ff       	call   c0013bc6 <PhysicalDisk::startCache()>
c001d15f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d163:	83 c4 18             	add    esp,0x18
c001d166:	5b                   	pop    ebx
c001d167:	e9 b2 82 ff ff       	jmp    c001541e <createPartitionsForDisk(PhysicalDisk*)>

c001d16c <ATAPI::detectMedia()>:
c001d16c:	56                   	push   esi
c001d16d:	53                   	push   ebx
c001d16e:	83 ec 28             	sub    esp,0x28
c001d171:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d175:	6a 0c                	push   0xc
c001d177:	6a 00                	push   0x0
c001d179:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d17d:	56                   	push   esi
c001d17e:	e8 55 35 fe ff       	call   c00006d8 <memset>
c001d183:	58                   	pop    eax
c001d184:	5a                   	pop    edx
c001d185:	6a 00                	push   0x0
c001d187:	6a 00                	push   0x0
c001d189:	6a 00                	push   0x0
c001d18b:	6a 00                	push   0x0
c001d18d:	56                   	push   esi
c001d18e:	53                   	push   ebx
c001d18f:	e8 88 fc ff ff       	call   c001ce1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d194:	83 c4 1c             	add    esp,0x1c
c001d197:	6a 0c                	push   0xc
c001d199:	6a 00                	push   0x0
c001d19b:	56                   	push   esi
c001d19c:	e8 37 35 fe ff       	call   c00006d8 <memset>
c001d1a1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d1a6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d1ab:	59                   	pop    ecx
c001d1ac:	58                   	pop    eax
c001d1ad:	6a 01                	push   0x1
c001d1af:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d1b3:	50                   	push   eax
c001d1b4:	6a 00                	push   0x0
c001d1b6:	6a 12                	push   0x12
c001d1b8:	56                   	push   esi
c001d1b9:	53                   	push   ebx
c001d1ba:	e8 5d fc ff ff       	call   c001ce1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1bf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d1c3:	83 c4 20             	add    esp,0x20
c001d1c6:	83 e0 7f             	and    eax,0x7f
c001d1c9:	3c 70                	cmp    al,0x70
c001d1cb:	74 15                	je     c001d1e2 <ATAPI::detectMedia()+0x76>
c001d1cd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1d4:	75 0c                	jne    c001d1e2 <ATAPI::detectMedia()+0x76>
c001d1d6:	83 ec 0c             	sub    esp,0xc
c001d1d9:	53                   	push   ebx
c001d1da:	e8 5f ff ff ff       	call   c001d13e <ATAPI::diskInserted()>
c001d1df:	83 c4 10             	add    esp,0x10
c001d1e2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d1e6:	83 e0 0f             	and    eax,0xf
c001d1e9:	3c 02                	cmp    al,0x2
c001d1eb:	75 1b                	jne    c001d208 <ATAPI::detectMedia()+0x9c>
c001d1ed:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d1f2:	75 2d                	jne    c001d221 <ATAPI::detectMedia()+0xb5>
c001d1f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1fb:	74 24                	je     c001d221 <ATAPI::detectMedia()+0xb5>
c001d1fd:	83 ec 0c             	sub    esp,0xc
c001d200:	53                   	push   ebx
c001d201:	e8 d6 fe ff ff       	call   c001d0dc <ATAPI::diskRemoved()>
c001d206:	eb 16                	jmp    c001d21e <ATAPI::detectMedia()+0xb2>
c001d208:	84 c0                	test   al,al
c001d20a:	75 15                	jne    c001d221 <ATAPI::detectMedia()+0xb5>
c001d20c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d213:	75 0c                	jne    c001d221 <ATAPI::detectMedia()+0xb5>
c001d215:	83 ec 0c             	sub    esp,0xc
c001d218:	53                   	push   ebx
c001d219:	e8 20 ff ff ff       	call   c001d13e <ATAPI::diskInserted()>
c001d21e:	83 c4 10             	add    esp,0x10
c001d221:	83 c4 24             	add    esp,0x24
c001d224:	5b                   	pop    ebx
c001d225:	5e                   	pop    esi
c001d226:	c3                   	ret    
c001d227:	90                   	nop

c001d228 <ATAPI::open(int, int, void*)>:
c001d228:	53                   	push   ebx
c001d229:	83 ec 08             	sub    esp,0x8
c001d22c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d230:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d238:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d23e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d244:	c1 e0 06             	shl    eax,0x6
c001d247:	01 d0                	add    eax,edx
c001d249:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d250:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d256:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d25d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d267:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d26d:	6a 04                	push   0x4
c001d26f:	6a 0c                	push   0xc
c001d271:	51                   	push   ecx
c001d272:	52                   	push   edx
c001d273:	e8 be e8 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d278:	90                   	nop
c001d279:	90                   	nop
c001d27a:	6a 00                	push   0x0
c001d27c:	6a 0c                	push   0xc
c001d27e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d285:	50                   	push   eax
c001d286:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d28c:	e8 a5 e8 ff ff       	call   c001bb36 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d291:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d298:	83 c4 14             	add    esp,0x14
c001d29b:	53                   	push   ebx
c001d29c:	e8 cb fe ff ff       	call   c001d16c <ATAPI::detectMedia()>
c001d2a1:	31 c0                	xor    eax,eax
c001d2a3:	83 c4 18             	add    esp,0x18
c001d2a6:	5b                   	pop    ebx
c001d2a7:	c3                   	ret    

c001d2a8 <ATAPI::read(unsigned long long, int, void*)>:
c001d2a8:	55                   	push   ebp
c001d2a9:	57                   	push   edi
c001d2aa:	56                   	push   esi
c001d2ab:	53                   	push   ebx
c001d2ac:	83 ec 1c             	sub    esp,0x1c
c001d2af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d2b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d2bb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d2c2:	74 41                	je     c001d305 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d2c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2c8:	b9 03 00 00 00       	mov    ecx,0x3
c001d2cd:	fc                   	cld    
c001d2ce:	31 c0                	xor    eax,eax
c001d2d0:	86 fb                	xchg   bl,bh
c001d2d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2d4:	c1 c3 10             	rol    ebx,0x10
c001d2d7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d2dc:	89 e8                	mov    eax,ebp
c001d2de:	86 fb                	xchg   bl,bh
c001d2e0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d2e4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d2e8:	50                   	push   eax
c001d2e9:	50                   	push   eax
c001d2ea:	55                   	push   ebp
c001d2eb:	c1 e5 0b             	shl    ebp,0xb
c001d2ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2f2:	6a 00                	push   0x0
c001d2f4:	55                   	push   ebp
c001d2f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2f9:	50                   	push   eax
c001d2fa:	56                   	push   esi
c001d2fb:	e8 1c fb ff ff       	call   c001ce1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d300:	83 c4 20             	add    esp,0x20
c001d303:	eb 1a                	jmp    c001d31f <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d305:	83 ec 0c             	sub    esp,0xc
c001d308:	56                   	push   esi
c001d309:	e8 5e fe ff ff       	call   c001d16c <ATAPI::detectMedia()>
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d318:	75 aa                	jne    c001d2c4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d31a:	b8 02 00 00 00       	mov    eax,0x2
c001d31f:	83 c4 1c             	add    esp,0x1c
c001d322:	5b                   	pop    ebx
c001d323:	5e                   	pop    esi
c001d324:	5f                   	pop    edi
c001d325:	5d                   	pop    ebp
c001d326:	c3                   	ret    
c001d327:	90                   	nop

c001d328 <AVX::open(int, int, void*)>:
c001d328:	83 ec 0c             	sub    esp,0xc
c001d32b:	e8 08 10 00 00       	call   c001e338 <avxInit>
c001d330:	b8 00 00 00 00       	mov    eax,0x0
c001d335:	83 c4 0c             	add    esp,0xc
c001d338:	c3                   	ret    
c001d339:	90                   	nop

c001d33a <AVX::close(int, int, void*)>:
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	e8 f7 0f 00 00       	call   c001e339 <avxClose>
c001d342:	b8 00 00 00 00       	mov    eax,0x0
c001d347:	83 c4 0c             	add    esp,0xc
c001d34a:	c3                   	ret    
c001d34b:	90                   	nop

c001d34c <AVX::available()>:
c001d34c:	83 ec 0c             	sub    esp,0xc
c001d34f:	e8 dc 0f 00 00       	call   c001e330 <avxDetect>
c001d354:	85 c0                	test   eax,eax
c001d356:	0f 95 c0             	setne  al
c001d359:	83 c4 0c             	add    esp,0xc
c001d35c:	c3                   	ret    
c001d35d:	90                   	nop

c001d35e <AVX::save(void*)>:
c001d35e:	83 ec 0c             	sub    esp,0xc
c001d361:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d365:	83 ec 0c             	sub    esp,0xc
c001d368:	50                   	push   eax
c001d369:	e8 c8 0f 00 00       	call   c001e336 <avxSave>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	90                   	nop
c001d372:	83 c4 0c             	add    esp,0xc
c001d375:	c3                   	ret    

c001d376 <AVX::load(void*)>:
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	50                   	push   eax
c001d381:	e8 b1 0f 00 00       	call   c001e337 <avxLoad>
c001d386:	83 c4 10             	add    esp,0x10
c001d389:	90                   	nop
c001d38a:	83 c4 0c             	add    esp,0xc
c001d38d:	c3                   	ret    

c001d38e <AVX::AVX()>:
c001d38e:	83 ec 0c             	sub    esp,0xc
c001d391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d395:	83 ec 08             	sub    esp,0x8
c001d398:	68 a4 aa 03 c0       	push   0xc003aaa4
c001d39d:	50                   	push   eax
c001d39e:	e8 99 68 ff ff       	call   c0013c3c <FPU::FPU(char const*)>
c001d3a3:	83 c4 10             	add    esp,0x10
c001d3a6:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3af:	89 10                	mov    DWORD PTR [eax],edx
c001d3b1:	90                   	nop
c001d3b2:	83 c4 0c             	add    esp,0xc
c001d3b5:	c3                   	ret    

c001d3b6 <MMX::available()>:
c001d3b6:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d3bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d3c1:	83 e0 20             	and    eax,0x20
c001d3c4:	84 c0                	test   al,al
c001d3c6:	0f 95 c0             	setne  al
c001d3c9:	c3                   	ret    

c001d3ca <MMX::open(int, int, void*)>:
c001d3ca:	83 ec 0c             	sub    esp,0xc
c001d3cd:	e8 da 0f 00 00       	call   c001e3ac <x87Init>
c001d3d2:	b8 00 00 00 00       	mov    eax,0x0
c001d3d7:	83 c4 0c             	add    esp,0xc
c001d3da:	c3                   	ret    
c001d3db:	90                   	nop

c001d3dc <MMX::close(int, int, void*)>:
c001d3dc:	83 ec 0c             	sub    esp,0xc
c001d3df:	e8 e2 0f 00 00       	call   c001e3c6 <x87Close>
c001d3e4:	b8 00 00 00 00       	mov    eax,0x0
c001d3e9:	83 c4 0c             	add    esp,0xc
c001d3ec:	c3                   	ret    
c001d3ed:	90                   	nop

c001d3ee <MMX::save(void*)>:
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3f5:	83 ec 0c             	sub    esp,0xc
c001d3f8:	50                   	push   eax
c001d3f9:	e8 a3 0f 00 00       	call   c001e3a1 <x87Save>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	90                   	nop
c001d402:	83 c4 0c             	add    esp,0xc
c001d405:	c3                   	ret    

c001d406 <MMX::load(void*)>:
c001d406:	83 ec 0c             	sub    esp,0xc
c001d409:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d40d:	83 ec 0c             	sub    esp,0xc
c001d410:	50                   	push   eax
c001d411:	e8 91 0f 00 00       	call   c001e3a7 <x87Load>
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	90                   	nop
c001d41a:	83 c4 0c             	add    esp,0xc
c001d41d:	c3                   	ret    

c001d41e <MMX::MMX()>:
c001d41e:	83 ec 0c             	sub    esp,0xc
c001d421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d425:	83 ec 08             	sub    esp,0x8
c001d428:	68 e4 aa 03 c0       	push   0xc003aae4
c001d42d:	50                   	push   eax
c001d42e:	e8 09 68 ff ff       	call   c0013c3c <FPU::FPU(char const*)>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	ba f4 aa 03 c0       	mov    edx,0xc003aaf4
c001d43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43f:	89 10                	mov    DWORD PTR [eax],edx
c001d441:	90                   	nop
c001d442:	83 c4 0c             	add    esp,0xc
c001d445:	c3                   	ret    

c001d446 <SSE::open(int, int, void*)>:
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	e8 19 0f 00 00       	call   c001e367 <sseInit>
c001d44e:	b8 00 00 00 00       	mov    eax,0x0
c001d453:	83 c4 0c             	add    esp,0xc
c001d456:	c3                   	ret    
c001d457:	90                   	nop

c001d458 <SSE::close(int, int, void*)>:
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	e8 17 0f 00 00       	call   c001e377 <sseClose>
c001d460:	b8 00 00 00 00       	mov    eax,0x0
c001d465:	83 c4 0c             	add    esp,0xc
c001d468:	c3                   	ret    
c001d469:	90                   	nop

c001d46a <SSE::available()>:
c001d46a:	83 ec 1c             	sub    esp,0x1c
c001d46d:	e8 ce 0e 00 00       	call   c001e340 <sseDetect>
c001d472:	85 c0                	test   eax,eax
c001d474:	0f 95 c0             	setne  al
c001d477:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d47b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d47f:	83 c4 1c             	add    esp,0x1c
c001d482:	c3                   	ret    
c001d483:	90                   	nop

c001d484 <SSE::save(void*)>:
c001d484:	83 ec 0c             	sub    esp,0xc
c001d487:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d48b:	83 ec 0c             	sub    esp,0xc
c001d48e:	50                   	push   eax
c001d48f:	e8 c7 0e 00 00       	call   c001e35b <sseSave>
c001d494:	83 c4 10             	add    esp,0x10
c001d497:	90                   	nop
c001d498:	83 c4 0c             	add    esp,0xc
c001d49b:	c3                   	ret    

c001d49c <SSE::load(void*)>:
c001d49c:	83 ec 0c             	sub    esp,0xc
c001d49f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4a3:	83 ec 0c             	sub    esp,0xc
c001d4a6:	50                   	push   eax
c001d4a7:	e8 b5 0e 00 00       	call   c001e361 <sseLoad>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	90                   	nop
c001d4b0:	83 c4 0c             	add    esp,0xc
c001d4b3:	c3                   	ret    

c001d4b4 <SSE::SSE()>:
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bb:	83 ec 08             	sub    esp,0x8
c001d4be:	68 24 ab 03 c0       	push   0xc003ab24
c001d4c3:	50                   	push   eax
c001d4c4:	e8 73 67 ff ff       	call   c0013c3c <FPU::FPU(char const*)>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	ba 34 ab 03 c0       	mov    edx,0xc003ab34
c001d4d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d5:	89 10                	mov    DWORD PTR [eax],edx
c001d4d7:	90                   	nop
c001d4d8:	83 c4 0c             	add    esp,0xc
c001d4db:	c3                   	ret    

c001d4dc <x87::open(int, int, void*)>:
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	e8 c8 0e 00 00       	call   c001e3ac <x87Init>
c001d4e4:	b8 00 00 00 00       	mov    eax,0x0
c001d4e9:	83 c4 0c             	add    esp,0xc
c001d4ec:	c3                   	ret    
c001d4ed:	90                   	nop

c001d4ee <x87::close(int, int, void*)>:
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	e8 d0 0e 00 00       	call   c001e3c6 <x87Close>
c001d4f6:	b8 00 00 00 00       	mov    eax,0x0
c001d4fb:	83 c4 0c             	add    esp,0xc
c001d4fe:	c3                   	ret    
c001d4ff:	90                   	nop

c001d500 <x87::available()>:
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	e8 7e 0e 00 00       	call   c001e386 <x87Detect>
c001d508:	85 c0                	test   eax,eax
c001d50a:	0f 95 c0             	setne  al
c001d50d:	83 c4 0c             	add    esp,0xc
c001d510:	c3                   	ret    
c001d511:	90                   	nop

c001d512 <x87::save(void*)>:
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d519:	83 ec 0c             	sub    esp,0xc
c001d51c:	50                   	push   eax
c001d51d:	e8 7f 0e 00 00       	call   c001e3a1 <x87Save>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	90                   	nop
c001d526:	83 c4 0c             	add    esp,0xc
c001d529:	c3                   	ret    

c001d52a <x87::load(void*)>:
c001d52a:	83 ec 0c             	sub    esp,0xc
c001d52d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d531:	83 ec 0c             	sub    esp,0xc
c001d534:	50                   	push   eax
c001d535:	e8 6d 0e 00 00       	call   c001e3a7 <x87Load>
c001d53a:	83 c4 10             	add    esp,0x10
c001d53d:	90                   	nop
c001d53e:	83 c4 0c             	add    esp,0xc
c001d541:	c3                   	ret    

c001d542 <x87::x87()>:
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d549:	83 ec 08             	sub    esp,0x8
c001d54c:	68 64 ab 03 c0       	push   0xc003ab64
c001d551:	50                   	push   eax
c001d552:	e8 e5 66 ff ff       	call   c0013c3c <FPU::FPU(char const*)>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	ba 74 ab 03 c0       	mov    edx,0xc003ab74
c001d55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d563:	89 10                	mov    DWORD PTR [eax],edx
c001d565:	90                   	nop
c001d566:	83 c4 0c             	add    esp,0xc
c001d569:	c3                   	ret    

c001d56a <APIC::disable()>:
c001d56a:	90                   	nop
c001d56b:	c3                   	ret    

c001d56c <APIC::close(int, int, void*)>:
c001d56c:	55                   	push   ebp
c001d56d:	89 e5                	mov    ebp,esp
c001d56f:	83 ec 08             	sub    esp,0x8
c001d572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d575:	8b 00                	mov    eax,DWORD PTR [eax]
c001d577:	83 c0 3c             	add    eax,0x3c
c001d57a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d582:	ff d0                	call   eax
c001d584:	83 c4 10             	add    esp,0x10
c001d587:	b8 00 00 00 00       	mov    eax,0x0
c001d58c:	c9                   	leave  
c001d58d:	c3                   	ret    

c001d58e <IOAPIC::close(int, int, void*)>:
c001d58e:	b8 00 00 00 00       	mov    eax,0x0
c001d593:	c3                   	ret    

c001d594 <APIC::io_wait()>:
c001d594:	eb 00                	jmp    c001d596 <APIC::io_wait()+0x2>
c001d596:	eb 00                	jmp    c001d598 <APIC::io_wait()+0x4>
c001d598:	90                   	nop
c001d599:	c3                   	ret    

c001d59a <APIC::getBase()>:
c001d59a:	55                   	push   ebp
c001d59b:	89 e5                	mov    ebp,esp
c001d59d:	83 ec 18             	sub    esp,0x18
c001d5a0:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d5a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d5ab:	83 e0 08             	and    eax,0x8
c001d5ae:	84 c0                	test   al,al
c001d5b0:	75 07                	jne    c001d5b9 <APIC::getBase()+0x1f>
c001d5b2:	b8 00 00 00 00       	mov    eax,0x0
c001d5b7:	eb 21                	jmp    c001d5da <APIC::getBase()+0x40>
c001d5b9:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d5be:	83 ec 08             	sub    esp,0x8
c001d5c1:	6a 1b                	push   0x1b
c001d5c3:	50                   	push   eax
c001d5c4:	e8 1f e0 fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001d5c9:	83 c4 10             	add    esp,0x10
c001d5cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d5cf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d5da:	c9                   	leave  
c001d5db:	c3                   	ret    

c001d5dc <APIC::eoi(unsigned char)>:
c001d5dc:	55                   	push   ebp
c001d5dd:	89 e5                	mov    ebp,esp
c001d5df:	83 ec 28             	sub    esp,0x28
c001d5e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5ee:	e8 a7 ff ff ff       	call   c001d59a <APIC::getBase()>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	05 b0 00 00 00       	add    eax,0xb0
c001d5fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d5fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d601:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d607:	90                   	nop
c001d608:	c9                   	leave  
c001d609:	c3                   	ret    

c001d60a <APIC::open(int, int, void*)>:
c001d60a:	55                   	push   ebp
c001d60b:	89 e5                	mov    ebp,esp
c001d60d:	57                   	push   edi
c001d60e:	56                   	push   esi
c001d60f:	53                   	push   ebx
c001d610:	83 ec 1c             	sub    esp,0x1c
c001d613:	83 ec 0c             	sub    esp,0xc
c001d616:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d619:	e8 7c ff ff ff       	call   c001d59a <APIC::getBase()>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	05 f0 00 00 00       	add    eax,0xf0
c001d626:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d62f:	e8 66 ff ff ff       	call   c001d59a <APIC::getBase()>
c001d634:	83 c4 10             	add    esp,0x10
c001d637:	89 c2                	mov    edx,eax
c001d639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d63c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d642:	0f b6 f8             	movzx  edi,al
c001d645:	89 d0                	mov    eax,edx
c001d647:	ba 00 00 00 00       	mov    edx,0x0
c001d64c:	89 c1                	mov    ecx,eax
c001d64e:	80 e5 ff             	and    ch,0xff
c001d651:	89 cb                	mov    ebx,ecx
c001d653:	0f b6 f2             	movzx  esi,dl
c001d656:	89 d8                	mov    eax,ebx
c001d658:	89 f2                	mov    edx,esi
c001d65a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d65d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d660:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d664:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d668:	83 e0 00             	and    eax,0x0
c001d66b:	09 d0                	or     eax,edx
c001d66d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d674:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d67a:	8d 50 01             	lea    edx,[eax+0x1]
c001d67d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d680:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d686:	0f b6 d0             	movzx  edx,al
c001d689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d68c:	83 c2 08             	add    edx,0x8
c001d68f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d693:	0f b6 c9             	movzx  ecx,cl
c001d696:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d69c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d6a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6a5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d6a8:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d6af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6b2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d6b5:	89 10                	mov    DWORD PTR [eax],edx
c001d6b7:	b8 00 00 00 00       	mov    eax,0x0
c001d6bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d6bf:	5b                   	pop    ebx
c001d6c0:	5e                   	pop    esi
c001d6c1:	5f                   	pop    edi
c001d6c2:	5d                   	pop    ebp
c001d6c3:	c3                   	ret    

c001d6c4 <IOAPIC::IOAPIC()>:
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6cb:	83 ec 08             	sub    esp,0x8
c001d6ce:	68 a4 ab 03 c0       	push   0xc003aba4
c001d6d3:	50                   	push   eax
c001d6d4:	e8 6f 62 ff ff       	call   c0013948 <Device::Device(char const*)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	ba cc ac 03 c0       	mov    edx,0xc003accc
c001d6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e5:	89 10                	mov    DWORD PTR [eax],edx
c001d6e7:	90                   	nop
c001d6e8:	83 c4 0c             	add    esp,0xc
c001d6eb:	c3                   	ret    

c001d6ec <APIC::APIC()>:
c001d6ec:	53                   	push   ebx
c001d6ed:	83 ec 18             	sub    esp,0x18
c001d6f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f4:	83 ec 08             	sub    esp,0x8
c001d6f7:	68 ac ab 03 c0       	push   0xc003abac
c001d6fc:	50                   	push   eax
c001d6fd:	e8 6e 69 ff ff       	call   c0014070 <InterruptController::InterruptController(char const*)>
c001d702:	83 c4 10             	add    esp,0x10
c001d705:	ba 84 ac 03 c0       	mov    edx,0xc003ac84
c001d70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d70e:	89 10                	mov    DWORD PTR [eax],edx
c001d710:	a0 00 d1 03 c0       	mov    al,ds:0xc003d100
c001d715:	83 f0 01             	xor    eax,0x1
c001d718:	84 c0                	test   al,al
c001d71a:	0f 84 96 00 00 00    	je     c001d7b6 <APIC::APIC()+0xca>
c001d720:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d725:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c001d72a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d72e:	73 7f                	jae    c001d7af <APIC::APIC()+0xc3>
c001d730:	83 ec 0c             	sub    esp,0xc
c001d733:	68 68 01 00 00       	push   0x168
c001d738:	e8 11 4d ff ff       	call   c001244e <operator new(unsigned long)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	89 c3                	mov    ebx,eax
c001d742:	83 ec 0c             	sub    esp,0xc
c001d745:	53                   	push   ebx
c001d746:	e8 79 ff ff ff       	call   c001d6c4 <IOAPIC::IOAPIC()>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d752:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d757:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d75b:	89 14 85 e0 d0 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2f20],edx
c001d762:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001d767:	40                   	inc    eax
c001d768:	a3 c0 d0 03 c0       	mov    ds:0xc003d0c0,eax
c001d76d:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d772:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d778:	83 ec 08             	sub    esp,0x8
c001d77b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d77f:	50                   	push   eax
c001d780:	e8 d3 5f ff ff       	call   c0013758 <Device::addChild(Device*)>
c001d785:	83 c4 10             	add    esp,0x10
c001d788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d78c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d78e:	83 c0 08             	add    eax,0x8
c001d791:	8b 00                	mov    eax,DWORD PTR [eax]
c001d793:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d798:	6a 00                	push   0x0
c001d79a:	6a 00                	push   0x0
c001d79c:	52                   	push   edx
c001d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7a1:	ff d0                	call   eax
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d7aa:	e9 76 ff ff ff       	jmp    c001d725 <APIC::APIC()+0x39>
c001d7af:	c6 05 00 d1 03 c0 01 	mov    BYTE PTR ds:0xc003d100,0x1
c001d7b6:	90                   	nop
c001d7b7:	83 c4 18             	add    esp,0x18
c001d7ba:	5b                   	pop    ebx
c001d7bb:	c3                   	ret    

c001d7bc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d7bc:	55                   	push   ebp
c001d7bd:	89 e5                	mov    ebp,esp
c001d7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7c8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7cb:	72 1d                	jb     c001d7ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d7df:	01 d0                	add    eax,edx
c001d7e1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7e4:	73 04                	jae    c001d7ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7e6:	b0 01                	mov    al,0x1
c001d7e8:	eb 02                	jmp    c001d7ec <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d7ea:	b0 00                	mov    al,0x0
c001d7ec:	5d                   	pop    ebp
c001d7ed:	c3                   	ret    

c001d7ee <IOAPIC::read(int)>:
c001d7ee:	55                   	push   ebp
c001d7ef:	89 e5                	mov    ebp,esp
c001d7f1:	83 ec 10             	sub    esp,0x10
c001d7f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d7fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d803:	0f b6 d0             	movzx  edx,al
c001d806:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d809:	89 10                	mov    DWORD PTR [eax],edx
c001d80b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d80e:	83 c0 10             	add    eax,0x10
c001d811:	8b 00                	mov    eax,DWORD PTR [eax]
c001d813:	c9                   	leave  
c001d814:	c3                   	ret    
c001d815:	90                   	nop

c001d816 <IOAPIC::open(int, int, void*)>:
c001d816:	55                   	push   ebp
c001d817:	89 e5                	mov    ebp,esp
c001d819:	57                   	push   edi
c001d81a:	56                   	push   esi
c001d81b:	53                   	push   ebx
c001d81c:	83 ec 0c             	sub    esp,0xc
c001d81f:	83 ec 0c             	sub    esp,0xc
c001d822:	68 d7 ab 03 c0       	push   0xc003abd7
c001d827:	e8 72 f6 fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d832:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d835:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d83e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d844:	8b 14 85 00 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3a00]
c001d84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d84e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d857:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d85d:	8b 14 85 80 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3980]
c001d864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d867:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d870:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d879:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d87f:	0f b6 f8             	movzx  edi,al
c001d882:	89 d0                	mov    eax,edx
c001d884:	ba 00 00 00 00       	mov    edx,0x0
c001d889:	89 c1                	mov    ecx,eax
c001d88b:	80 e5 ff             	and    ch,0xff
c001d88e:	89 cb                	mov    ebx,ecx
c001d890:	0f b6 f2             	movzx  esi,dl
c001d893:	89 d8                	mov    eax,ebx
c001d895:	89 f2                	mov    edx,esi
c001d897:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d89a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d89d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d8a1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d8a5:	83 e0 00             	and    eax,0x0
c001d8a8:	09 d0                	or     eax,edx
c001d8aa:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d8ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8b7:	8d 50 01             	lea    edx,[eax+0x1]
c001d8ba:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8bd:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d8c3:	0f b6 d0             	movzx  edx,al
c001d8c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8c9:	83 c2 08             	add    edx,0x8
c001d8cc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d8d0:	0f b6 c9             	movzx  ecx,cl
c001d8d3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d8d9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d8dd:	83 ec 08             	sub    esp,0x8
c001d8e0:	6a 01                	push   0x1
c001d8e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8e5:	e8 04 ff ff ff       	call   c001d7ee <IOAPIC::read(int)>
c001d8ea:	83 c4 10             	add    esp,0x10
c001d8ed:	c1 f8 10             	sar    eax,0x10
c001d8f0:	0f b6 c0             	movzx  eax,al
c001d8f3:	8d 50 01             	lea    edx,[eax+0x1]
c001d8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d8ff:	b8 00 00 00 00       	mov    eax,0x0
c001d904:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d907:	5b                   	pop    ebx
c001d908:	5e                   	pop    esi
c001d909:	5f                   	pop    edi
c001d90a:	5d                   	pop    ebp
c001d90b:	c3                   	ret    

c001d90c <IOAPIC::write(int, int)>:
c001d90c:	55                   	push   ebp
c001d90d:	89 e5                	mov    ebp,esp
c001d90f:	83 ec 10             	sub    esp,0x10
c001d912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d915:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d91b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d91e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d921:	0f b6 d0             	movzx  edx,al
c001d924:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d927:	89 10                	mov    DWORD PTR [eax],edx
c001d929:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d92c:	8d 50 10             	lea    edx,[eax+0x10]
c001d92f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d932:	89 02                	mov    DWORD PTR [edx],eax
c001d934:	90                   	nop
c001d935:	c9                   	leave  
c001d936:	c3                   	ret    
c001d937:	90                   	nop

c001d938 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d938:	55                   	push   ebp
c001d939:	89 e5                	mov    ebp,esp
c001d93b:	83 ec 20             	sub    esp,0x20
c001d93e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d941:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d944:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d947:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d94a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d94d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d950:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d953:	88 d0                	mov    al,dl
c001d955:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d958:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d95c:	83 c0 08             	add    eax,0x8
c001d95f:	01 c0                	add    eax,eax
c001d961:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d964:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d968:	83 c0 08             	add    eax,0x8
c001d96b:	01 c0                	add    eax,eax
c001d96d:	40                   	inc    eax
c001d96e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d971:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d974:	50                   	push   eax
c001d975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d978:	e8 71 fe ff ff       	call   c001d7ee <IOAPIC::read(int)>
c001d97d:	83 c4 08             	add    esp,0x8
c001d980:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d983:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d98a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d98d:	c1 e0 18             	shl    eax,0x18
c001d990:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d993:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d996:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d999:	52                   	push   edx
c001d99a:	50                   	push   eax
c001d99b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d99e:	e8 69 ff ff ff       	call   c001d90c <IOAPIC::write(int, int)>
c001d9a3:	83 c4 0c             	add    esp,0xc
c001d9a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9a9:	50                   	push   eax
c001d9aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ad:	e8 3c fe ff ff       	call   c001d7ee <IOAPIC::read(int)>
c001d9b2:	83 c4 08             	add    esp,0x8
c001d9b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d9b8:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d9bf:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d9c6:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d9cd:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d9d4:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d9d8:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d9db:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d9de:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9e1:	52                   	push   edx
c001d9e2:	50                   	push   eax
c001d9e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9e6:	e8 21 ff ff ff       	call   c001d90c <IOAPIC::write(int, int)>
c001d9eb:	83 c4 0c             	add    esp,0xc
c001d9ee:	90                   	nop
c001d9ef:	c9                   	leave  
c001d9f0:	c3                   	ret    
c001d9f1:	90                   	nop

c001d9f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d9f2:	55                   	push   ebp
c001d9f3:	89 e5                	mov    ebp,esp
c001d9f5:	56                   	push   esi
c001d9f6:	53                   	push   ebx
c001d9f7:	83 ec 20             	sub    esp,0x20
c001d9fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da00:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da04:	74 28                	je     c001da2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da06:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da0a:	7f 12                	jg     c001da1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da0f:	05 20 b1 03 c0       	add    eax,0xc003b120
c001da14:	8a 00                	mov    al,BYTE PTR [eax]
c001da16:	0f b6 c0             	movzx  eax,al
c001da19:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da1c:	eb 10                	jmp    c001da2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da1e:	83 ec 0c             	sub    esp,0xc
c001da21:	68 e8 ab 03 c0       	push   0xc003abe8
c001da26:	e8 91 f5 fe ff       	call   c000cfbc <panic(char const*)>
c001da2b:	83 c4 10             	add    esp,0x10
c001da2e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001da32:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001da37:	83 ec 08             	sub    esp,0x8
c001da3a:	50                   	push   eax
c001da3b:	68 20 ac 03 c0       	push   0xc003ac20
c001da40:	e8 59 f4 fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001da45:	83 c4 10             	add    esp,0x10
c001da48:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001da4f:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001da54:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001da57:	7d 58                	jge    c001dab1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da5c:	8b 04 85 e0 d0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2f20]
c001da63:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da66:	83 ec 08             	sub    esp,0x8
c001da69:	52                   	push   edx
c001da6a:	50                   	push   eax
c001da6b:	e8 4c fd ff ff       	call   c001d7bc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001da70:	83 c4 10             	add    esp,0x10
c001da73:	84 c0                	test   al,al
c001da75:	74 35                	je     c001daac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001da77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da7a:	8b 1c 85 e0 d0 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2f20]
c001da81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da84:	83 c0 20             	add    eax,0x20
c001da87:	0f b6 f0             	movzx  esi,al
c001da8a:	e8 c2 96 ff ff       	call   c0017151 <getCPUNumber()>
c001da8f:	99                   	cdq    
c001da90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001da93:	0f b6 c9             	movzx  ecx,cl
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	56                   	push   esi
c001da9a:	52                   	push   edx
c001da9b:	50                   	push   eax
c001da9c:	51                   	push   ecx
c001da9d:	53                   	push   ebx
c001da9e:	e8 95 fe ff ff       	call   c001d938 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001daa3:	83 c4 20             	add    esp,0x20
c001daa6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001daaa:	eb 05                	jmp    c001dab1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001daac:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001daaf:	eb 9e                	jmp    c001da4f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001dab1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dab4:	83 f0 01             	xor    eax,0x1
c001dab7:	84 c0                	test   al,al
c001dab9:	74 10                	je     c001dacb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001dabb:	83 ec 0c             	sub    esp,0xc
c001dabe:	68 37 ac 03 c0       	push   0xc003ac37
c001dac3:	e8 f4 f4 fe ff       	call   c000cfbc <panic(char const*)>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001dacf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001dad6:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001dada:	7f 65                	jg     c001db41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dadf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dae2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dae9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001daec:	01 ca                	add    edx,ecx
c001daee:	83 c2 54             	add    edx,0x54
c001daf1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001daf5:	85 c0                	test   eax,eax
c001daf7:	75 43                	jne    c001db3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001daf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dafc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db06:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db09:	01 ca                	add    edx,ecx
c001db0b:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db11:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db1b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db25:	01 ca                	add    edx,ecx
c001db27:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001db2d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001db30:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db37:	83 e8 20             	sub    eax,0x20
c001db3a:	eb 1a                	jmp    c001db56 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001db3c:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001db3f:	eb 95                	jmp    c001dad6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001db41:	83 ec 0c             	sub    esp,0xc
c001db44:	68 44 ac 03 c0       	push   0xc003ac44
c001db49:	e8 6e f4 fe ff       	call   c000cfbc <panic(char const*)>
c001db4e:	83 c4 10             	add    esp,0x10
c001db51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db56:	8d 65 f8             	lea    esp,[ebp-0x8]
c001db59:	5b                   	pop    ebx
c001db5a:	5e                   	pop    esi
c001db5b:	5d                   	pop    ebp
c001db5c:	c3                   	ret    
c001db5d:	90                   	nop

c001db5e <PIC::disable()>:
c001db5e:	55                   	push   ebp
c001db5f:	89 e5                	mov    ebp,esp
c001db61:	83 ec 10             	sub    esp,0x10
c001db64:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001db6a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001db6e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001db71:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001db75:	ee                   	out    dx,al
c001db76:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001db7c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001db80:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001db83:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001db87:	ee                   	out    dx,al
c001db88:	90                   	nop
c001db89:	c9                   	leave  
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <PIC::close(int, int, void*)>:
c001db8c:	55                   	push   ebp
c001db8d:	89 e5                	mov    ebp,esp
c001db8f:	83 ec 08             	sub    esp,0x8
c001db92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db95:	8b 00                	mov    eax,DWORD PTR [eax]
c001db97:	83 c0 3c             	add    eax,0x3c
c001db9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001db9c:	83 ec 0c             	sub    esp,0xc
c001db9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dba2:	ff d0                	call   eax
c001dba4:	83 c4 10             	add    esp,0x10
c001dba7:	b8 00 00 00 00       	mov    eax,0x0
c001dbac:	c9                   	leave  
c001dbad:	c3                   	ret    

c001dbae <PIC::PIC()>:
c001dbae:	83 ec 0c             	sub    esp,0xc
c001dbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb5:	83 ec 08             	sub    esp,0x8
c001dbb8:	68 f0 ac 03 c0       	push   0xc003acf0
c001dbbd:	50                   	push   eax
c001dbbe:	e8 ad 64 ff ff       	call   c0014070 <InterruptController::InterruptController(char const*)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	ba 1c ad 03 c0       	mov    edx,0xc003ad1c
c001dbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcf:	89 10                	mov    DWORD PTR [eax],edx
c001dbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbdb:	0f b6 d0             	movzx  edx,al
c001dbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbf3:	0f b6 d0             	movzx  edx,al
c001dbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbfa:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc09:	8d 50 01             	lea    edx,[eax+0x1]
c001dc0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc10:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc16:	0f b6 d0             	movzx  edx,al
c001dc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc21:	83 e1 3f             	and    ecx,0x3f
c001dc24:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc32:	0f b6 d0             	movzx  edx,al
c001dc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc39:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc4a:	0f b6 d0             	movzx  edx,al
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc60:	8d 50 01             	lea    edx,[eax+0x1]
c001dc63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc67:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc6d:	0f b6 d0             	movzx  edx,al
c001dc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc74:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc78:	83 e1 3f             	and    ecx,0x3f
c001dc7b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc7f:	90                   	nop
c001dc80:	83 c4 0c             	add    esp,0xc
c001dc83:	c3                   	ret    

c001dc84 <PIC::ioWait()>:
c001dc84:	eb 00                	jmp    c001dc86 <PIC::ioWait()+0x2>
c001dc86:	eb 00                	jmp    c001dc88 <PIC::ioWait()+0x4>
c001dc88:	90                   	nop
c001dc89:	c3                   	ret    

c001dc8a <PIC::getIRQReg(int)>:
c001dc8a:	55                   	push   ebp
c001dc8b:	89 e5                	mov    ebp,esp
c001dc8d:	83 ec 10             	sub    esp,0x10
c001dc90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc93:	0f b6 c0             	movzx  eax,al
c001dc96:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dc9c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dc9f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dca2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dca6:	ee                   	out    dx,al
c001dca7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcaa:	0f b6 c0             	movzx  eax,al
c001dcad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dcb3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dcb6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dcb9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dcbd:	ee                   	out    dx,al
c001dcbe:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dcc4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dcc8:	89 c2                	mov    edx,eax
c001dcca:	ec                   	in     al,dx
c001dccb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dcce:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dcd1:	0f b6 c0             	movzx  eax,al
c001dcd4:	c1 e0 08             	shl    eax,0x8
c001dcd7:	89 c1                	mov    ecx,eax
c001dcd9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dcdf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dce3:	89 c2                	mov    edx,eax
c001dce5:	ec                   	in     al,dx
c001dce6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dce9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dcec:	0f b6 c0             	movzx  eax,al
c001dcef:	09 c8                	or     eax,ecx
c001dcf1:	c9                   	leave  
c001dcf2:	c3                   	ret    
c001dcf3:	90                   	nop

c001dcf4 <PIC::eoi(unsigned char)>:
c001dcf4:	55                   	push   ebp
c001dcf5:	89 e5                	mov    ebp,esp
c001dcf7:	83 ec 14             	sub    esp,0x14
c001dcfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcfd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd00:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd04:	75 1e                	jne    c001dd24 <PIC::eoi(unsigned char)+0x30>
c001dd06:	6a 0b                	push   0xb
c001dd08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd0b:	e8 7a ff ff ff       	call   c001dc8a <PIC::getIRQReg(int)>
c001dd10:	83 c4 08             	add    esp,0x8
c001dd13:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd17:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd1b:	25 80 00 00 00       	and    eax,0x80
c001dd20:	85 c0                	test   eax,eax
c001dd22:	74 5f                	je     c001dd83 <PIC::eoi(unsigned char)+0x8f>
c001dd24:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dd28:	75 2d                	jne    c001dd57 <PIC::eoi(unsigned char)+0x63>
c001dd2a:	6a 0b                	push   0xb
c001dd2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd2f:	e8 56 ff ff ff       	call   c001dc8a <PIC::getIRQReg(int)>
c001dd34:	83 c4 08             	add    esp,0x8
c001dd37:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dd3b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd3e:	66 85 c0             	test   ax,ax
c001dd41:	78 14                	js     c001dd57 <PIC::eoi(unsigned char)+0x63>
c001dd43:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dd49:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dd4d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd50:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dd54:	ee                   	out    dx,al
c001dd55:	eb 2d                	jmp    c001dd84 <PIC::eoi(unsigned char)+0x90>
c001dd57:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd5b:	76 12                	jbe    c001dd6f <PIC::eoi(unsigned char)+0x7b>
c001dd5d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd63:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dd67:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd6a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd6e:	ee                   	out    dx,al
c001dd6f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd75:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dd79:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd7c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd80:	ee                   	out    dx,al
c001dd81:	eb 01                	jmp    c001dd84 <PIC::eoi(unsigned char)+0x90>
c001dd83:	90                   	nop
c001dd84:	c9                   	leave  
c001dd85:	c3                   	ret    

c001dd86 <PIC::remap()>:
c001dd86:	55                   	push   ebp
c001dd87:	89 e5                	mov    ebp,esp
c001dd89:	83 ec 48             	sub    esp,0x48
c001dd8c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dd93:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dd9a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001dda0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001dda3:	89 c2                	mov    edx,eax
c001dda5:	ec                   	in     al,dx
c001dda6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001dda9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ddac:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ddaf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ddb5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ddb8:	89 c2                	mov    edx,eax
c001ddba:	ec                   	in     al,dx
c001ddbb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ddbe:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ddc1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ddc4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ddca:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ddce:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ddd1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ddd4:	ee                   	out    dx,al
c001ddd5:	83 ec 0c             	sub    esp,0xc
c001ddd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dddb:	e8 a4 fe ff ff       	call   c001dc84 <PIC::ioWait()>
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dde9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001dded:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ddf0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ddf3:	ee                   	out    dx,al
c001ddf4:	83 ec 0c             	sub    esp,0xc
c001ddf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddfa:	e8 85 fe ff ff       	call   c001dc84 <PIC::ioWait()>
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de05:	0f b6 c0             	movzx  eax,al
c001de08:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de0e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de11:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de14:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de17:	ee                   	out    dx,al
c001de18:	83 ec 0c             	sub    esp,0xc
c001de1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de1e:	e8 61 fe ff ff       	call   c001dc84 <PIC::ioWait()>
c001de23:	83 c4 10             	add    esp,0x10
c001de26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de29:	0f b6 c0             	movzx  eax,al
c001de2c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001de32:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001de35:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001de38:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001de3b:	ee                   	out    dx,al
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de42:	e8 3d fe ff ff       	call   c001dc84 <PIC::ioWait()>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001de50:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001de54:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001de57:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001de5a:	ee                   	out    dx,al
c001de5b:	83 ec 0c             	sub    esp,0xc
c001de5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de61:	e8 1e fe ff ff       	call   c001dc84 <PIC::ioWait()>
c001de66:	83 c4 10             	add    esp,0x10
c001de69:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001de6f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001de73:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001de76:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001de79:	ee                   	out    dx,al
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de80:	e8 ff fd ff ff       	call   c001dc84 <PIC::ioWait()>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001de8e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001de92:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001de95:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001de98:	ee                   	out    dx,al
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de9f:	e8 e0 fd ff ff       	call   c001dc84 <PIC::ioWait()>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dead:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001deb1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001deb4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001deb7:	ee                   	out    dx,al
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001debe:	e8 c1 fd ff ff       	call   c001dc84 <PIC::ioWait()>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001deca:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ded0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ded3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ded6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ded9:	ee                   	out    dx,al
c001deda:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dede:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dee4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dee7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001deea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001deed:	ee                   	out    dx,al
c001deee:	90                   	nop
c001deef:	c9                   	leave  
c001def0:	c3                   	ret    
c001def1:	90                   	nop

c001def2 <PIC::open(int, int, void*)>:
c001def2:	55                   	push   ebp
c001def3:	89 e5                	mov    ebp,esp
c001def5:	83 ec 18             	sub    esp,0x18
c001def8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001defe:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df02:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df05:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df09:	ee                   	out    dx,al
c001df0a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df10:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df14:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df17:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df1b:	ee                   	out    dx,al
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df22:	e8 5f fe ff ff       	call   c001dd86 <PIC::remap()>
c001df27:	83 c4 10             	add    esp,0x10
c001df2a:	b8 00 00 00 00       	mov    eax,0x0
c001df2f:	c9                   	leave  
c001df30:	c3                   	ret    
c001df31:	90                   	nop

c001df32 <APICTimer::close(int, int, void*)>:
c001df32:	b8 00 00 00 00       	mov    eax,0x0
c001df37:	c3                   	ret    

c001df38 <apicTimerHandler(regs*, void*)>:
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001df41:	99                   	cdq    
c001df42:	52                   	push   edx
c001df43:	50                   	push   eax
c001df44:	6a 00                	push   0x0
c001df46:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df4b:	e8 6c 07 00 00       	call   c001e6bc <__udivdi3>
c001df50:	83 c4 10             	add    esp,0x10
c001df53:	83 ec 08             	sub    esp,0x8
c001df56:	52                   	push   edx
c001df57:	50                   	push   eax
c001df58:	e8 e2 77 ff ff       	call   c001573f <timerHandler(unsigned long long)>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	90                   	nop
c001df61:	83 c4 0c             	add    esp,0xc
c001df64:	c3                   	ret    
c001df65:	90                   	nop

c001df66 <APICTimer::write(int)>:
c001df66:	53                   	push   ebx
c001df67:	83 ec 28             	sub    esp,0x28
c001df6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001df72:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df78:	e8 d7 91 ff ff       	call   c0017154 <thisCPU()>
c001df7d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	50                   	push   eax
c001df87:	e8 0e f6 ff ff       	call   c001d59a <APIC::getBase()>
c001df8c:	83 c4 10             	add    esp,0x10
c001df8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df93:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c001df98:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c001df9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dfa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dfa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfaa:	05 e0 03 00 00       	add    eax,0x3e0
c001dfaf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dfb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfb9:	05 80 03 00 00       	add    eax,0x380
c001dfbe:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dfc4:	fb                   	sti    
c001dfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfcd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dfd2:	83 d2 00             	adc    edx,0x0
c001dfd5:	89 c1                	mov    ecx,eax
c001dfd7:	89 d3                	mov    ebx,edx
c001dfd9:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c001dfde:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c001dfe4:	39 c8                	cmp    eax,ecx
c001dfe6:	89 d0                	mov    eax,edx
c001dfe8:	19 d8                	sbb    eax,ebx
c001dfea:	73 02                	jae    c001dfee <APICTimer::write(int)+0x88>
c001dfec:	eb d7                	jmp    c001dfc5 <APICTimer::write(int)+0x5f>
c001dfee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dff2:	05 20 03 00 00       	add    eax,0x320
c001dff7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e001:	05 90 03 00 00       	add    eax,0x390
c001e006:	8b 00                	mov    eax,DWORD PTR [eax]
c001e008:	f7 d0                	not    eax
c001e00a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e00e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e016:	ba 00 00 00 00       	mov    edx,0x0
c001e01b:	f7 f3                	div    ebx
c001e01d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e021:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e025:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e02b:	0d 00 00 02 00       	or     eax,0x20000
c001e030:	89 c2                	mov    edx,eax
c001e032:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e036:	05 20 03 00 00       	add    eax,0x320
c001e03b:	89 10                	mov    DWORD PTR [eax],edx
c001e03d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e041:	05 e0 03 00 00       	add    eax,0x3e0
c001e046:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e04c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e050:	05 80 03 00 00       	add    eax,0x380
c001e055:	89 c2                	mov    edx,eax
c001e057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e05b:	89 02                	mov    DWORD PTR [edx],eax
c001e05d:	90                   	nop
c001e05e:	83 c4 28             	add    esp,0x28
c001e061:	5b                   	pop    ebx
c001e062:	c3                   	ret    
c001e063:	90                   	nop

c001e064 <APICTimer::open(int, int, void*)>:
c001e064:	57                   	push   edi
c001e065:	56                   	push   esi
c001e066:	53                   	push   ebx
c001e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e06d:	83 c0 24             	add    eax,0x24
c001e070:	8b 00                	mov    eax,DWORD PTR [eax]
c001e072:	83 ec 08             	sub    esp,0x8
c001e075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e07d:	ff d0                	call   eax
c001e07f:	83 c4 10             	add    esp,0x10
c001e082:	e8 cd 90 ff ff       	call   c0017154 <thisCPU()>
c001e087:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e08d:	83 ec 0c             	sub    esp,0xc
c001e090:	50                   	push   eax
c001e091:	e8 04 f5 ff ff       	call   c001d59a <APIC::getBase()>
c001e096:	83 c4 10             	add    esp,0x10
c001e099:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0a9:	0f b6 f8             	movzx  edi,al
c001e0ac:	89 d0                	mov    eax,edx
c001e0ae:	ba 00 00 00 00       	mov    edx,0x0
c001e0b3:	89 c1                	mov    ecx,eax
c001e0b5:	80 e5 ff             	and    ch,0xff
c001e0b8:	89 cb                	mov    ebx,ecx
c001e0ba:	0f b6 f2             	movzx  esi,dl
c001e0bd:	89 d8                	mov    eax,ebx
c001e0bf:	89 f2                	mov    edx,esi
c001e0c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0c5:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e0c8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e0cc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e0d0:	83 e0 00             	and    eax,0x0
c001e0d3:	09 d0                	or     eax,edx
c001e0d5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0e3:	8d 50 01             	lea    edx,[eax+0x1]
c001e0e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0ea:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e0f0:	0f b6 d0             	movzx  edx,al
c001e0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f7:	83 c2 08             	add    edx,0x8
c001e0fa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e0fe:	0f b6 c9             	movzx  ecx,cl
c001e101:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e107:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e113:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e121:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e12b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	51                   	push   ecx
c001e135:	6a 01                	push   0x1
c001e137:	68 38 df 01 c0       	push   0xc001df38
c001e13c:	52                   	push   edx
c001e13d:	50                   	push   eax
c001e13e:	e8 69 55 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e143:	83 c4 20             	add    esp,0x20
c001e146:	89 c2                	mov    edx,eax
c001e148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e152:	b8 00 00 00 00       	mov    eax,0x0
c001e157:	5b                   	pop    ebx
c001e158:	5e                   	pop    esi
c001e159:	5f                   	pop    edi
c001e15a:	c3                   	ret    
c001e15b:	90                   	nop

c001e15c <APICTimer::APICTimer()>:
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e163:	83 ec 08             	sub    esp,0x8
c001e166:	68 5c ad 03 c0       	push   0xc003ad5c
c001e16b:	50                   	push   eax
c001e16c:	e8 3f 75 ff ff       	call   c00156b0 <Timer::Timer(char const*)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	ba 70 ad 03 c0       	mov    edx,0xc003ad70
c001e179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17d:	89 10                	mov    DWORD PTR [eax],edx
c001e17f:	90                   	nop
c001e180:	83 c4 0c             	add    esp,0xc
c001e183:	c3                   	ret    

c001e184 <PIT::write(int)>:
c001e184:	83 ec 10             	sub    esp,0x10
c001e187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e18b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e18f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e199:	a3 04 d1 03 c0       	mov    ds:0xc003d104,eax
c001e19e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e1a3:	99                   	cdq    
c001e1a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e1a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e1b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e1b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e1bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e1c1:	ee                   	out    dx,al
c001e1c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1c6:	0f b6 c0             	movzx  eax,al
c001e1c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e1d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e1d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e1d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e1dd:	ee                   	out    dx,al
c001e1de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1e2:	c1 f8 08             	sar    eax,0x8
c001e1e5:	0f b6 c0             	movzx  eax,al
c001e1e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e1ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e1f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e1fc:	ee                   	out    dx,al
c001e1fd:	90                   	nop
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	c3                   	ret    

c001e202 <pitHandler(regs*, void*)>:
c001e202:	83 ec 0c             	sub    esp,0xc
c001e205:	a1 04 d1 03 c0       	mov    eax,ds:0xc003d104
c001e20a:	99                   	cdq    
c001e20b:	52                   	push   edx
c001e20c:	50                   	push   eax
c001e20d:	6a 00                	push   0x0
c001e20f:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e214:	e8 a3 04 00 00       	call   c001e6bc <__udivdi3>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	83 ec 08             	sub    esp,0x8
c001e21f:	52                   	push   edx
c001e220:	50                   	push   eax
c001e221:	e8 19 75 ff ff       	call   c001573f <timerHandler(unsigned long long)>
c001e226:	83 c4 10             	add    esp,0x10
c001e229:	90                   	nop
c001e22a:	83 c4 0c             	add    esp,0xc
c001e22d:	c3                   	ret    

c001e22e <PIT::open(int, int, void*)>:
c001e22e:	83 ec 0c             	sub    esp,0xc
c001e231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e235:	8b 00                	mov    eax,DWORD PTR [eax]
c001e237:	83 c0 24             	add    eax,0x24
c001e23a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e23c:	83 ec 08             	sub    esp,0x8
c001e23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e247:	ff d0                	call   eax
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	6a 00                	push   0x0
c001e255:	6a 01                	push   0x1
c001e257:	68 02 e2 01 c0       	push   0xc001e202
c001e25c:	6a 00                	push   0x0
c001e25e:	50                   	push   eax
c001e25f:	e8 48 54 ff ff       	call   c00136ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e264:	83 c4 20             	add    esp,0x20
c001e267:	89 c2                	mov    edx,eax
c001e269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e273:	b8 00 00 00 00       	mov    eax,0x0
c001e278:	83 c4 0c             	add    esp,0xc
c001e27b:	c3                   	ret    

c001e27c <PIT::close(int, int, void*)>:
c001e27c:	83 ec 0c             	sub    esp,0xc
c001e27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e283:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e291:	6a 01                	push   0x1
c001e293:	68 02 e2 01 c0       	push   0xc001e202
c001e298:	6a 00                	push   0x0
c001e29a:	50                   	push   eax
c001e29b:	e8 6a 54 ff ff       	call   c001370a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e2a0:	83 c4 10             	add    esp,0x10
c001e2a3:	b8 00 00 00 00       	mov    eax,0x0
c001e2a8:	83 c4 0c             	add    esp,0xc
c001e2ab:	c3                   	ret    

c001e2ac <PIT::PIT()>:
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b3:	83 ec 08             	sub    esp,0x8
c001e2b6:	68 98 ad 03 c0       	push   0xc003ad98
c001e2bb:	50                   	push   eax
c001e2bc:	e8 ef 73 ff ff       	call   c00156b0 <Timer::Timer(char const*)>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	ba c0 ad 03 c0       	mov    edx,0xc003adc0
c001e2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cd:	89 10                	mov    DWORD PTR [eax],edx
c001e2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2d9:	0f b6 d0             	movzx  edx,al
c001e2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2f1:	0f b6 d0             	movzx  edx,al
c001e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e301:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e307:	8d 50 01             	lea    edx,[eax+0x1]
c001e30a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e30e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e314:	0f b6 d0             	movzx  edx,al
c001e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e31f:	83 e1 3f             	and    ecx,0x3f
c001e322:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e326:	90                   	nop
c001e327:	83 c4 0c             	add    esp,0xc
c001e32a:	c3                   	ret    
c001e32b:	66 90                	xchg   ax,ax
c001e32d:	66 90                	xchg   ax,ax
c001e32f:	90                   	nop

c001e330 <avxDetect>:
c001e330:	b8 00 00 00 00       	mov    eax,0x0
c001e335:	c3                   	ret    

c001e336 <avxSave>:
c001e336:	c3                   	ret    

c001e337 <avxLoad>:
c001e337:	c3                   	ret    

c001e338 <avxInit>:
c001e338:	c3                   	ret    

c001e339 <avxClose>:
c001e339:	c3                   	ret    
c001e33a:	66 90                	xchg   ax,ax
c001e33c:	66 90                	xchg   ax,ax
c001e33e:	66 90                	xchg   ax,ax

c001e340 <sseDetect>:
c001e340:	b8 01 00 00 00       	mov    eax,0x1
c001e345:	0f a2                	cpuid  
c001e347:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e34d:	74 06                	je     c001e355 <sseDetect.noSSE>
c001e34f:	b8 01 00 00 00       	mov    eax,0x1
c001e354:	c3                   	ret    

c001e355 <sseDetect.noSSE>:
c001e355:	b8 00 00 00 00       	mov    eax,0x0
c001e35a:	c3                   	ret    

c001e35b <sseSave>:
c001e35b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e360:	c3                   	ret    

c001e361 <sseLoad>:
c001e361:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e366:	c3                   	ret    

c001e367 <sseInit>:
c001e367:	e8 40 00 00 00       	call   c001e3ac <x87Init>
c001e36c:	0f 20 e0             	mov    eax,cr4
c001e36f:	66 0d 00 06          	or     ax,0x600
c001e373:	0f 22 e0             	mov    cr4,eax
c001e376:	c3                   	ret    

c001e377 <sseClose>:
c001e377:	c3                   	ret    
c001e378:	66 90                	xchg   ax,ax
c001e37a:	66 90                	xchg   ax,ax
c001e37c:	66 90                	xchg   ax,ax
c001e37e:	66 90                	xchg   ax,ax

c001e380 <value_37F>:
c001e380:	7f 03                	jg     c001e385 <value_37A+0x1>

c001e382 <value_37E>:
c001e382:	7e 03                	jle    c001e387 <x87Detect+0x1>

c001e384 <value_37A>:
c001e384:	7a 03                	jp     c001e389 <x87Detect+0x3>

c001e386 <x87Detect>:
c001e386:	b8 01 00 00 00       	mov    eax,0x1
c001e38b:	0f a2                	cpuid  
c001e38d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e393:	74 06                	je     c001e39b <x87Detect.nox87>
c001e395:	b8 01 00 00 00       	mov    eax,0x1
c001e39a:	c3                   	ret    

c001e39b <x87Detect.nox87>:
c001e39b:	b8 00 00 00 00       	mov    eax,0x0
c001e3a0:	c3                   	ret    

c001e3a1 <x87Save>:
c001e3a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e3a6:	c3                   	ret    

c001e3a7 <x87Load>:
c001e3a7:	dd 64 24 08          	frstor [esp+0x8]
c001e3ab:	c3                   	ret    

c001e3ac <x87Init>:
c001e3ac:	9b db e3             	finit  
c001e3af:	0f 20 c0             	mov    eax,cr0
c001e3b2:	66 25 fb ff          	and    ax,0xfffb
c001e3b6:	66 0d 22 00          	or     ax,0x22
c001e3ba:	0f 22 c0             	mov    cr0,eax
c001e3bd:	0f 06                	clts   
c001e3bf:	d9 2d 84 e3 01 c0    	fldcw  WORD PTR ds:0xc001e384
c001e3c5:	c3                   	ret    

c001e3c6 <x87Close>:
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop

c001e3c8 <__do_global_ctors_aux>:
c001e3c8:	a1 f8 f4 01 c0       	mov    eax,ds:0xc001f4f8
c001e3cd:	83 f8 ff             	cmp    eax,0xffffffff
c001e3d0:	74 1a                	je     c001e3ec <__do_global_ctors_aux+0x24>
c001e3d2:	55                   	push   ebp
c001e3d3:	89 e5                	mov    ebp,esp
c001e3d5:	53                   	push   ebx
c001e3d6:	52                   	push   edx
c001e3d7:	bb f8 f4 01 c0       	mov    ebx,0xc001f4f8
c001e3dc:	ff d0                	call   eax
c001e3de:	83 eb 04             	sub    ebx,0x4
c001e3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3e3:	83 f8 ff             	cmp    eax,0xffffffff
c001e3e6:	75 f4                	jne    c001e3dc <__do_global_ctors_aux+0x14>
c001e3e8:	58                   	pop    eax
c001e3e9:	5b                   	pop    ebx
c001e3ea:	5d                   	pop    ebp
c001e3eb:	c3                   	ret    
c001e3ec:	c3                   	ret    
c001e3ed:	66 90                	xchg   ax,ax
c001e3ef:	90                   	nop

c001e3f0 <__divdi3>:
c001e3f0:	55                   	push   ebp
c001e3f1:	57                   	push   edi
c001e3f2:	56                   	push   esi
c001e3f3:	53                   	push   ebx
c001e3f4:	83 ec 1c             	sub    esp,0x1c
c001e3f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e402:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e406:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e40a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e40e:	85 db                	test   ebx,ebx
c001e410:	0f 88 8e 00 00 00    	js     c001e4a4 <__divdi3+0xb4>
c001e416:	89 dd                	mov    ebp,ebx
c001e418:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e420:	89 d3                	mov    ebx,edx
c001e422:	85 d2                	test   edx,edx
c001e424:	79 0d                	jns    c001e433 <__divdi3+0x43>
c001e426:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e42a:	f7 d8                	neg    eax
c001e42c:	83 d2 00             	adc    edx,0x0
c001e42f:	f7 da                	neg    edx
c001e431:	89 d3                	mov    ebx,edx
c001e433:	89 c7                	mov    edi,eax
c001e435:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e438:	85 db                	test   ebx,ebx
c001e43a:	75 48                	jne    c001e484 <__divdi3+0x94>
c001e43c:	39 ef                	cmp    edi,ebp
c001e43e:	76 24                	jbe    c001e464 <__divdi3+0x74>
c001e440:	89 ea                	mov    edx,ebp
c001e442:	f7 f7                	div    edi
c001e444:	89 c1                	mov    ecx,eax
c001e446:	31 f6                	xor    esi,esi
c001e448:	89 c8                	mov    eax,ecx
c001e44a:	89 f2                	mov    edx,esi
c001e44c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e450:	85 c9                	test   ecx,ecx
c001e452:	74 07                	je     c001e45b <__divdi3+0x6b>
c001e454:	f7 d8                	neg    eax
c001e456:	83 d2 00             	adc    edx,0x0
c001e459:	f7 da                	neg    edx
c001e45b:	83 c4 1c             	add    esp,0x1c
c001e45e:	5b                   	pop    ebx
c001e45f:	5e                   	pop    esi
c001e460:	5f                   	pop    edi
c001e461:	5d                   	pop    ebp
c001e462:	c3                   	ret    
c001e463:	90                   	nop
c001e464:	85 ff                	test   edi,edi
c001e466:	75 0b                	jne    c001e473 <__divdi3+0x83>
c001e468:	b8 01 00 00 00       	mov    eax,0x1
c001e46d:	31 d2                	xor    edx,edx
c001e46f:	f7 f3                	div    ebx
c001e471:	89 c7                	mov    edi,eax
c001e473:	31 d2                	xor    edx,edx
c001e475:	89 e8                	mov    eax,ebp
c001e477:	f7 f7                	div    edi
c001e479:	89 c6                	mov    esi,eax
c001e47b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e47e:	f7 f7                	div    edi
c001e480:	89 c1                	mov    ecx,eax
c001e482:	eb c4                	jmp    c001e448 <__divdi3+0x58>
c001e484:	39 eb                	cmp    ebx,ebp
c001e486:	77 3c                	ja     c001e4c4 <__divdi3+0xd4>
c001e488:	0f bd f3             	bsr    esi,ebx
c001e48b:	83 f6 1f             	xor    esi,0x1f
c001e48e:	75 40                	jne    c001e4d0 <__divdi3+0xe0>
c001e490:	39 eb                	cmp    ebx,ebp
c001e492:	72 09                	jb     c001e49d <__divdi3+0xad>
c001e494:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e497:	0f 87 97 00 00 00    	ja     c001e534 <__divdi3+0x144>
c001e49d:	b9 01 00 00 00       	mov    ecx,0x1
c001e4a2:	eb a4                	jmp    c001e448 <__divdi3+0x58>
c001e4a4:	f7 d9                	neg    ecx
c001e4a6:	83 d3 00             	adc    ebx,0x0
c001e4a9:	f7 db                	neg    ebx
c001e4ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4b2:	89 dd                	mov    ebp,ebx
c001e4b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e4bc:	e9 5f ff ff ff       	jmp    c001e420 <__divdi3+0x30>
c001e4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4c4:	31 f6                	xor    esi,esi
c001e4c6:	31 c9                	xor    ecx,ecx
c001e4c8:	e9 7b ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4d0:	b8 20 00 00 00       	mov    eax,0x20
c001e4d5:	29 f0                	sub    eax,esi
c001e4d7:	89 f1                	mov    ecx,esi
c001e4d9:	d3 e3                	shl    ebx,cl
c001e4db:	89 fa                	mov    edx,edi
c001e4dd:	88 c1                	mov    cl,al
c001e4df:	d3 ea                	shr    edx,cl
c001e4e1:	09 da                	or     edx,ebx
c001e4e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4e7:	89 f1                	mov    ecx,esi
c001e4e9:	d3 e7                	shl    edi,cl
c001e4eb:	89 eb                	mov    ebx,ebp
c001e4ed:	88 c1                	mov    cl,al
c001e4ef:	d3 eb                	shr    ebx,cl
c001e4f1:	89 f1                	mov    ecx,esi
c001e4f3:	d3 e5                	shl    ebp,cl
c001e4f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e4f8:	88 c1                	mov    cl,al
c001e4fa:	d3 ea                	shr    edx,cl
c001e4fc:	09 d5                	or     ebp,edx
c001e4fe:	89 e8                	mov    eax,ebp
c001e500:	89 da                	mov    edx,ebx
c001e502:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e506:	89 d3                	mov    ebx,edx
c001e508:	89 c5                	mov    ebp,eax
c001e50a:	f7 e7                	mul    edi
c001e50c:	39 d3                	cmp    ebx,edx
c001e50e:	72 18                	jb     c001e528 <__divdi3+0x138>
c001e510:	74 0a                	je     c001e51c <__divdi3+0x12c>
c001e512:	89 e9                	mov    ecx,ebp
c001e514:	31 f6                	xor    esi,esi
c001e516:	e9 2d ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e51b:	90                   	nop
c001e51c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e51f:	89 f1                	mov    ecx,esi
c001e521:	d3 e7                	shl    edi,cl
c001e523:	39 c7                	cmp    edi,eax
c001e525:	73 eb                	jae    c001e512 <__divdi3+0x122>
c001e527:	90                   	nop
c001e528:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e52b:	31 f6                	xor    esi,esi
c001e52d:	e9 16 ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e532:	66 90                	xchg   ax,ax
c001e534:	31 c9                	xor    ecx,ecx
c001e536:	e9 0d ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e53b:	90                   	nop

c001e53c <__moddi3>:
c001e53c:	55                   	push   ebp
c001e53d:	57                   	push   edi
c001e53e:	56                   	push   esi
c001e53f:	53                   	push   ebx
c001e540:	83 ec 2c             	sub    esp,0x2c
c001e543:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e547:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e54b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e54f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e553:	85 db                	test   ebx,ebx
c001e555:	0f 88 85 00 00 00    	js     c001e5e0 <__moddi3+0xa4>
c001e55b:	89 de                	mov    esi,ebx
c001e55d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e565:	89 d7                	mov    edi,edx
c001e567:	85 d2                	test   edx,edx
c001e569:	79 09                	jns    c001e574 <__moddi3+0x38>
c001e56b:	f7 d8                	neg    eax
c001e56d:	83 d2 00             	adc    edx,0x0
c001e570:	f7 da                	neg    edx
c001e572:	89 d7                	mov    edi,edx
c001e574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e578:	89 cd                	mov    ebp,ecx
c001e57a:	85 ff                	test   edi,edi
c001e57c:	75 52                	jne    c001e5d0 <__moddi3+0x94>
c001e57e:	89 c3                	mov    ebx,eax
c001e580:	39 f0                	cmp    eax,esi
c001e582:	76 24                	jbe    c001e5a8 <__moddi3+0x6c>
c001e584:	89 c8                	mov    eax,ecx
c001e586:	89 f2                	mov    edx,esi
c001e588:	f7 f3                	div    ebx
c001e58a:	89 d6                	mov    esi,edx
c001e58c:	89 f0                	mov    eax,esi
c001e58e:	31 d2                	xor    edx,edx
c001e590:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e594:	85 c9                	test   ecx,ecx
c001e596:	74 07                	je     c001e59f <__moddi3+0x63>
c001e598:	f7 d8                	neg    eax
c001e59a:	83 d2 00             	adc    edx,0x0
c001e59d:	f7 da                	neg    edx
c001e59f:	83 c4 2c             	add    esp,0x2c
c001e5a2:	5b                   	pop    ebx
c001e5a3:	5e                   	pop    esi
c001e5a4:	5f                   	pop    edi
c001e5a5:	5d                   	pop    ebp
c001e5a6:	c3                   	ret    
c001e5a7:	90                   	nop
c001e5a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5ac:	85 db                	test   ebx,ebx
c001e5ae:	75 0d                	jne    c001e5bd <__moddi3+0x81>
c001e5b0:	b8 01 00 00 00       	mov    eax,0x1
c001e5b5:	31 d2                	xor    edx,edx
c001e5b7:	f7 f7                	div    edi
c001e5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5bd:	89 f0                	mov    eax,esi
c001e5bf:	31 d2                	xor    edx,edx
c001e5c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5c5:	f7 f7                	div    edi
c001e5c7:	89 e8                	mov    eax,ebp
c001e5c9:	f7 f7                	div    edi
c001e5cb:	89 d6                	mov    esi,edx
c001e5cd:	eb bd                	jmp    c001e58c <__moddi3+0x50>
c001e5cf:	90                   	nop
c001e5d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5d4:	39 f7                	cmp    edi,esi
c001e5d6:	76 20                	jbe    c001e5f8 <__moddi3+0xbc>
c001e5d8:	89 c8                	mov    eax,ecx
c001e5da:	89 f2                	mov    edx,esi
c001e5dc:	eb b2                	jmp    c001e590 <__moddi3+0x54>
c001e5de:	66 90                	xchg   ax,ax
c001e5e0:	f7 d9                	neg    ecx
c001e5e2:	83 d3 00             	adc    ebx,0x0
c001e5e5:	f7 db                	neg    ebx
c001e5e7:	89 de                	mov    esi,ebx
c001e5e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e5f1:	e9 6f ff ff ff       	jmp    c001e565 <__moddi3+0x29>
c001e5f6:	66 90                	xchg   ax,ax
c001e5f8:	0f bd c7             	bsr    eax,edi
c001e5fb:	83 f0 1f             	xor    eax,0x1f
c001e5fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e602:	75 24                	jne    c001e628 <__moddi3+0xec>
c001e604:	39 f7                	cmp    edi,esi
c001e606:	72 06                	jb     c001e60e <__moddi3+0xd2>
c001e608:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e60c:	77 0c                	ja     c001e61a <__moddi3+0xde>
c001e60e:	89 e9                	mov    ecx,ebp
c001e610:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e614:	19 fe                	sbb    esi,edi
c001e616:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e61a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e61e:	89 f2                	mov    edx,esi
c001e620:	e9 6b ff ff ff       	jmp    c001e590 <__moddi3+0x54>
c001e625:	8d 76 00             	lea    esi,[esi+0x0]
c001e628:	b8 20 00 00 00       	mov    eax,0x20
c001e62d:	89 c2                	mov    edx,eax
c001e62f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e633:	29 da                	sub    edx,ebx
c001e635:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e639:	88 d9                	mov    cl,bl
c001e63b:	d3 e7                	shl    edi,cl
c001e63d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e641:	88 d1                	mov    cl,dl
c001e643:	d3 e8                	shr    eax,cl
c001e645:	09 c7                	or     edi,eax
c001e647:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e64b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e64f:	89 d8                	mov    eax,ebx
c001e651:	88 d9                	mov    cl,bl
c001e653:	d3 e7                	shl    edi,cl
c001e655:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e659:	89 f3                	mov    ebx,esi
c001e65b:	88 d1                	mov    cl,dl
c001e65d:	d3 eb                	shr    ebx,cl
c001e65f:	89 c7                	mov    edi,eax
c001e661:	88 c1                	mov    cl,al
c001e663:	d3 e6                	shl    esi,cl
c001e665:	89 e8                	mov    eax,ebp
c001e667:	88 d1                	mov    cl,dl
c001e669:	d3 e8                	shr    eax,cl
c001e66b:	09 f0                	or     eax,esi
c001e66d:	89 f9                	mov    ecx,edi
c001e66f:	d3 e5                	shl    ebp,cl
c001e671:	89 da                	mov    edx,ebx
c001e673:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e677:	89 d3                	mov    ebx,edx
c001e679:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e67d:	89 c6                	mov    esi,eax
c001e67f:	89 d1                	mov    ecx,edx
c001e681:	39 d3                	cmp    ebx,edx
c001e683:	72 27                	jb     c001e6ac <__moddi3+0x170>
c001e685:	74 21                	je     c001e6a8 <__moddi3+0x16c>
c001e687:	29 f5                	sub    ebp,esi
c001e689:	19 cb                	sbb    ebx,ecx
c001e68b:	89 de                	mov    esi,ebx
c001e68d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e691:	d3 e6                	shl    esi,cl
c001e693:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e697:	89 f9                	mov    ecx,edi
c001e699:	d3 ed                	shr    ebp,cl
c001e69b:	09 ee                	or     esi,ebp
c001e69d:	89 f0                	mov    eax,esi
c001e69f:	d3 eb                	shr    ebx,cl
c001e6a1:	89 da                	mov    edx,ebx
c001e6a3:	e9 e8 fe ff ff       	jmp    c001e590 <__moddi3+0x54>
c001e6a8:	39 c5                	cmp    ebp,eax
c001e6aa:	73 db                	jae    c001e687 <__moddi3+0x14b>
c001e6ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e6b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e6b4:	89 d1                	mov    ecx,edx
c001e6b6:	89 c6                	mov    esi,eax
c001e6b8:	eb cd                	jmp    c001e687 <__moddi3+0x14b>
c001e6ba:	66 90                	xchg   ax,ax

c001e6bc <__udivdi3>:
c001e6bc:	55                   	push   ebp
c001e6bd:	57                   	push   edi
c001e6be:	56                   	push   esi
c001e6bf:	53                   	push   ebx
c001e6c0:	83 ec 1c             	sub    esp,0x1c
c001e6c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e6c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e6cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e6d3:	85 d2                	test   edx,edx
c001e6d5:	75 41                	jne    c001e718 <__udivdi3+0x5c>
c001e6d7:	39 f7                	cmp    edi,esi
c001e6d9:	76 15                	jbe    c001e6f0 <__udivdi3+0x34>
c001e6db:	89 e8                	mov    eax,ebp
c001e6dd:	89 f2                	mov    edx,esi
c001e6df:	f7 f7                	div    edi
c001e6e1:	31 db                	xor    ebx,ebx
c001e6e3:	89 da                	mov    edx,ebx
c001e6e5:	83 c4 1c             	add    esp,0x1c
c001e6e8:	5b                   	pop    ebx
c001e6e9:	5e                   	pop    esi
c001e6ea:	5f                   	pop    edi
c001e6eb:	5d                   	pop    ebp
c001e6ec:	c3                   	ret    
c001e6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e6f0:	89 f9                	mov    ecx,edi
c001e6f2:	85 ff                	test   edi,edi
c001e6f4:	75 0b                	jne    c001e701 <__udivdi3+0x45>
c001e6f6:	b8 01 00 00 00       	mov    eax,0x1
c001e6fb:	31 d2                	xor    edx,edx
c001e6fd:	f7 f7                	div    edi
c001e6ff:	89 c1                	mov    ecx,eax
c001e701:	31 d2                	xor    edx,edx
c001e703:	89 f0                	mov    eax,esi
c001e705:	f7 f1                	div    ecx
c001e707:	89 c3                	mov    ebx,eax
c001e709:	89 e8                	mov    eax,ebp
c001e70b:	f7 f1                	div    ecx
c001e70d:	89 da                	mov    edx,ebx
c001e70f:	83 c4 1c             	add    esp,0x1c
c001e712:	5b                   	pop    ebx
c001e713:	5e                   	pop    esi
c001e714:	5f                   	pop    edi
c001e715:	5d                   	pop    ebp
c001e716:	c3                   	ret    
c001e717:	90                   	nop
c001e718:	39 f2                	cmp    edx,esi
c001e71a:	77 1c                	ja     c001e738 <__udivdi3+0x7c>
c001e71c:	0f bd da             	bsr    ebx,edx
c001e71f:	83 f3 1f             	xor    ebx,0x1f
c001e722:	75 24                	jne    c001e748 <__udivdi3+0x8c>
c001e724:	39 f2                	cmp    edx,esi
c001e726:	72 08                	jb     c001e730 <__udivdi3+0x74>
c001e728:	39 ef                	cmp    edi,ebp
c001e72a:	0f 87 84 00 00 00    	ja     c001e7b4 <__udivdi3+0xf8>
c001e730:	b8 01 00 00 00       	mov    eax,0x1
c001e735:	eb ac                	jmp    c001e6e3 <__udivdi3+0x27>
c001e737:	90                   	nop
c001e738:	31 db                	xor    ebx,ebx
c001e73a:	31 c0                	xor    eax,eax
c001e73c:	89 da                	mov    edx,ebx
c001e73e:	83 c4 1c             	add    esp,0x1c
c001e741:	5b                   	pop    ebx
c001e742:	5e                   	pop    esi
c001e743:	5f                   	pop    edi
c001e744:	5d                   	pop    ebp
c001e745:	c3                   	ret    
c001e746:	66 90                	xchg   ax,ax
c001e748:	b8 20 00 00 00       	mov    eax,0x20
c001e74d:	29 d8                	sub    eax,ebx
c001e74f:	88 d9                	mov    cl,bl
c001e751:	d3 e2                	shl    edx,cl
c001e753:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e757:	89 fa                	mov    edx,edi
c001e759:	88 c1                	mov    cl,al
c001e75b:	d3 ea                	shr    edx,cl
c001e75d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e761:	09 d1                	or     ecx,edx
c001e763:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e767:	88 d9                	mov    cl,bl
c001e769:	d3 e7                	shl    edi,cl
c001e76b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e76f:	89 f7                	mov    edi,esi
c001e771:	88 c1                	mov    cl,al
c001e773:	d3 ef                	shr    edi,cl
c001e775:	88 d9                	mov    cl,bl
c001e777:	d3 e6                	shl    esi,cl
c001e779:	89 ea                	mov    edx,ebp
c001e77b:	88 c1                	mov    cl,al
c001e77d:	d3 ea                	shr    edx,cl
c001e77f:	09 d6                	or     esi,edx
c001e781:	89 f0                	mov    eax,esi
c001e783:	89 fa                	mov    edx,edi
c001e785:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e789:	89 d7                	mov    edi,edx
c001e78b:	89 c6                	mov    esi,eax
c001e78d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e791:	39 d7                	cmp    edi,edx
c001e793:	72 13                	jb     c001e7a8 <__udivdi3+0xec>
c001e795:	74 09                	je     c001e7a0 <__udivdi3+0xe4>
c001e797:	89 f0                	mov    eax,esi
c001e799:	31 db                	xor    ebx,ebx
c001e79b:	e9 43 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7a0:	88 d9                	mov    cl,bl
c001e7a2:	d3 e5                	shl    ebp,cl
c001e7a4:	39 c5                	cmp    ebp,eax
c001e7a6:	73 ef                	jae    c001e797 <__udivdi3+0xdb>
c001e7a8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e7ab:	31 db                	xor    ebx,ebx
c001e7ad:	e9 31 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7b2:	66 90                	xchg   ax,ax
c001e7b4:	31 c0                	xor    eax,eax
c001e7b6:	e9 28 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7bb:	90                   	nop

c001e7bc <__umoddi3>:
c001e7bc:	55                   	push   ebp
c001e7bd:	57                   	push   edi
c001e7be:	56                   	push   esi
c001e7bf:	53                   	push   ebx
c001e7c0:	83 ec 1c             	sub    esp,0x1c
c001e7c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e7c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e7d3:	89 da                	mov    edx,ebx
c001e7d5:	85 c0                	test   eax,eax
c001e7d7:	75 37                	jne    c001e810 <__umoddi3+0x54>
c001e7d9:	39 df                	cmp    edi,ebx
c001e7db:	76 13                	jbe    c001e7f0 <__umoddi3+0x34>
c001e7dd:	89 f0                	mov    eax,esi
c001e7df:	f7 f7                	div    edi
c001e7e1:	89 d0                	mov    eax,edx
c001e7e3:	31 d2                	xor    edx,edx
c001e7e5:	83 c4 1c             	add    esp,0x1c
c001e7e8:	5b                   	pop    ebx
c001e7e9:	5e                   	pop    esi
c001e7ea:	5f                   	pop    edi
c001e7eb:	5d                   	pop    ebp
c001e7ec:	c3                   	ret    
c001e7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f0:	89 fd                	mov    ebp,edi
c001e7f2:	85 ff                	test   edi,edi
c001e7f4:	75 0b                	jne    c001e801 <__umoddi3+0x45>
c001e7f6:	b8 01 00 00 00       	mov    eax,0x1
c001e7fb:	31 d2                	xor    edx,edx
c001e7fd:	f7 f7                	div    edi
c001e7ff:	89 c5                	mov    ebp,eax
c001e801:	89 d8                	mov    eax,ebx
c001e803:	31 d2                	xor    edx,edx
c001e805:	f7 f5                	div    ebp
c001e807:	89 f0                	mov    eax,esi
c001e809:	f7 f5                	div    ebp
c001e80b:	89 d0                	mov    eax,edx
c001e80d:	eb d4                	jmp    c001e7e3 <__umoddi3+0x27>
c001e80f:	90                   	nop
c001e810:	89 f1                	mov    ecx,esi
c001e812:	39 d8                	cmp    eax,ebx
c001e814:	76 0a                	jbe    c001e820 <__umoddi3+0x64>
c001e816:	89 f0                	mov    eax,esi
c001e818:	83 c4 1c             	add    esp,0x1c
c001e81b:	5b                   	pop    ebx
c001e81c:	5e                   	pop    esi
c001e81d:	5f                   	pop    edi
c001e81e:	5d                   	pop    ebp
c001e81f:	c3                   	ret    
c001e820:	0f bd e8             	bsr    ebp,eax
c001e823:	83 f5 1f             	xor    ebp,0x1f
c001e826:	75 1c                	jne    c001e844 <__umoddi3+0x88>
c001e828:	39 d8                	cmp    eax,ebx
c001e82a:	72 04                	jb     c001e830 <__umoddi3+0x74>
c001e82c:	39 f7                	cmp    edi,esi
c001e82e:	77 08                	ja     c001e838 <__umoddi3+0x7c>
c001e830:	89 da                	mov    edx,ebx
c001e832:	29 fe                	sub    esi,edi
c001e834:	19 c2                	sbb    edx,eax
c001e836:	89 f1                	mov    ecx,esi
c001e838:	89 c8                	mov    eax,ecx
c001e83a:	83 c4 1c             	add    esp,0x1c
c001e83d:	5b                   	pop    ebx
c001e83e:	5e                   	pop    esi
c001e83f:	5f                   	pop    edi
c001e840:	5d                   	pop    ebp
c001e841:	c3                   	ret    
c001e842:	66 90                	xchg   ax,ax
c001e844:	ba 20 00 00 00       	mov    edx,0x20
c001e849:	29 ea                	sub    edx,ebp
c001e84b:	89 e9                	mov    ecx,ebp
c001e84d:	d3 e0                	shl    eax,cl
c001e84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e853:	89 f8                	mov    eax,edi
c001e855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e859:	88 d1                	mov    cl,dl
c001e85b:	d3 e8                	shr    eax,cl
c001e85d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e861:	09 c1                	or     ecx,eax
c001e863:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e867:	89 e9                	mov    ecx,ebp
c001e869:	d3 e7                	shl    edi,cl
c001e86b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e86f:	89 d8                	mov    eax,ebx
c001e871:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e875:	88 d1                	mov    cl,dl
c001e877:	d3 e8                	shr    eax,cl
c001e879:	89 c7                	mov    edi,eax
c001e87b:	89 e9                	mov    ecx,ebp
c001e87d:	d3 e3                	shl    ebx,cl
c001e87f:	89 f0                	mov    eax,esi
c001e881:	88 d1                	mov    cl,dl
c001e883:	d3 e8                	shr    eax,cl
c001e885:	09 d8                	or     eax,ebx
c001e887:	89 e9                	mov    ecx,ebp
c001e889:	d3 e6                	shl    esi,cl
c001e88b:	89 f3                	mov    ebx,esi
c001e88d:	89 fa                	mov    edx,edi
c001e88f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e893:	89 d1                	mov    ecx,edx
c001e895:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e899:	89 c6                	mov    esi,eax
c001e89b:	89 d7                	mov    edi,edx
c001e89d:	39 d1                	cmp    ecx,edx
c001e89f:	72 27                	jb     c001e8c8 <__umoddi3+0x10c>
c001e8a1:	74 21                	je     c001e8c4 <__umoddi3+0x108>
c001e8a3:	89 ca                	mov    edx,ecx
c001e8a5:	29 f3                	sub    ebx,esi
c001e8a7:	19 fa                	sbb    edx,edi
c001e8a9:	89 d0                	mov    eax,edx
c001e8ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e8af:	d3 e0                	shl    eax,cl
c001e8b1:	89 e9                	mov    ecx,ebp
c001e8b3:	d3 eb                	shr    ebx,cl
c001e8b5:	09 d8                	or     eax,ebx
c001e8b7:	d3 ea                	shr    edx,cl
c001e8b9:	83 c4 1c             	add    esp,0x1c
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	5d                   	pop    ebp
c001e8c0:	c3                   	ret    
c001e8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8c4:	39 c3                	cmp    ebx,eax
c001e8c6:	73 db                	jae    c001e8a3 <__umoddi3+0xe7>
c001e8c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e8cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e8d0:	89 d7                	mov    edi,edx
c001e8d2:	89 c6                	mov    esi,eax
c001e8d4:	eb cd                	jmp    c001e8a3 <__umoddi3+0xe7>
c001e8d6:	66 90                	xchg   ax,ax
c001e8d8:	66 90                	xchg   ax,ax
c001e8da:	66 90                	xchg   ax,ax
c001e8dc:	66 90                	xchg   ax,ax
c001e8de:	66 90                	xchg   ax,ax

c001e8e0 <fabs>:
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e8f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8f7:	dd 04 24             	fld    QWORD PTR [esp]
c001e8fa:	83 c4 0c             	add    esp,0xc
c001e8fd:	c3                   	ret    
c001e8fe:	66 90                	xchg   ax,ax

c001e900 <lrint>:
c001e900:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e904:	83 ec 04             	sub    esp,0x4
c001e907:	db 1c 24             	fistp  DWORD PTR [esp]
c001e90a:	58                   	pop    eax
c001e90b:	c3                   	ret    

c001e90c <lrintf>:
c001e90c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e910:	83 ec 04             	sub    esp,0x4
c001e913:	db 1c 24             	fistp  DWORD PTR [esp]
c001e916:	58                   	pop    eax
c001e917:	c3                   	ret    

Disassembly of section .init:

c001e918 <_init>:
c001e918:	55                   	push   ebp
c001e919:	89 e5                	mov    ebp,esp
c001e91b:	e8 f8 17 fe ff       	call   c0000118 <frame_dummy>
c001e920:	e8 a3 fa ff ff       	call   c001e3c8 <__do_global_ctors_aux>
c001e925:	5d                   	pop    ebp
c001e926:	c3                   	ret    

Disassembly of section .fini:

c001e927 <_fini>:
c001e927:	55                   	push   ebp
c001e928:	89 e5                	mov    ebp,esp
c001e92a:	e8 79 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e92f:	5d                   	pop    ebp
c001e930:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e932 <Computer::~Computer()>:
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	ba 98 88 03 c0       	mov    edx,0xc0038898
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	89 10                	mov    DWORD PTR [eax],edx
c001e940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	50                   	push   eax
c001e948:	e8 ad 4c ff ff       	call   c00135fa <Device::~Device()>
c001e94d:	83 c4 10             	add    esp,0x10
c001e950:	90                   	nop
c001e951:	83 c4 0c             	add    esp,0xc
c001e954:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e956 <Computer::~Computer()>:
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e960:	e8 cd ff ff ff       	call   c001e932 <Computer::~Computer()>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	83 ec 08             	sub    esp,0x8
c001e96b:	68 ec 01 00 00       	push   0x1ec
c001e970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e974:	e8 e4 3a ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	83 c4 0c             	add    esp,0xc
c001e97f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e980 <idleCommon()>:
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	e8 b8 f9 fe ff       	call   c000e340 <lockScheduler()>
c001e988:	e8 e7 fc fe ff       	call   c000e674 <schedule()>
c001e98d:	83 c4 0c             	add    esp,0xc
c001e990:	e9 ad f9 fe ff       	jmp    c000e342 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e995 <CPU::readCR0()>:
c001e995:	83 ec 10             	sub    esp,0x10
c001e998:	0f 20 c0             	mov    eax,cr0
c001e99b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e9a7 <CPU::readCR2()>:
c001e9a7:	83 ec 10             	sub    esp,0x10
c001e9aa:	0f 20 d0             	mov    eax,cr2
c001e9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e9b9 <CPU::readCR3()>:
c001e9b9:	83 ec 10             	sub    esp,0x10
c001e9bc:	0f 20 d8             	mov    eax,cr3
c001e9bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e9cb <CPU::readCR4()>:
c001e9cb:	83 ec 10             	sub    esp,0x10
c001e9ce:	0f 20 e0             	mov    eax,cr4
c001e9d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e9dd <CPU::writeCR3(unsigned long)>:
c001e9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e1:	0f 22 d8             	mov    cr3,eax
c001e9e4:	90                   	nop
c001e9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e9e6 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e9e6:	90                   	nop
c001e9e7:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e9e8 <ThreadControlBlock::ThreadControlBlock()>:
c001e9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea0d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea18:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea20:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ea24:	90                   	nop
c001ea25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea69:	83 ec 0c             	sub    esp,0xc
c001ea6c:	68 24 92 03 c0       	push   0xc0039224
c001ea71:	e8 28 e4 fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	90                   	nop
c001ea7a:	83 c4 0c             	add    esp,0xc
c001ea7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ea7e:	83 ec 0c             	sub    esp,0xc
c001ea81:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea86:	75 10                	jne    c001ea98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	68 40 92 03 c0       	push   0xc0039240
c001ea90:	e8 27 e5 fe ff       	call   c000cfbc <panic(char const*)>
c001ea95:	83 c4 10             	add    esp,0x10
c001ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9e:	85 c0                	test   eax,eax
c001eaa0:	74 34                	je     c001ead6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa9:	85 c0                	test   eax,eax
c001eaab:	74 29                	je     c001ead6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eac3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eacd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ead4:	eb 65                	jmp    c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ead6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eada:	8b 00                	mov    eax,DWORD PTR [eax]
c001eadc:	85 c0                	test   eax,eax
c001eade:	75 4b                	jne    c001eb2b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae7:	85 c0                	test   eax,eax
c001eae9:	75 40                	jne    c001eb2b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaf3:	89 10                	mov    DWORD PTR [eax],edx
c001eaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eafd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb07:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb15:	85 c0                	test   eax,eax
c001eb17:	74 22                	je     c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb19:	83 ec 0c             	sub    esp,0xc
c001eb1c:	68 62 92 03 c0       	push   0xc0039262
c001eb21:	e8 96 e4 fe ff       	call   c000cfbc <panic(char const*)>
c001eb26:	83 c4 10             	add    esp,0x10
c001eb29:	eb 10                	jmp    c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb2b:	83 ec 0c             	sub    esp,0xc
c001eb2e:	68 6c 92 03 c0       	push   0xc003926c
c001eb33:	e8 84 e4 fe ff       	call   c000cfbc <panic(char const*)>
c001eb38:	83 c4 10             	add    esp,0x10
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb42:	8d 50 01             	lea    edx,[eax+0x1]
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb4c:	90                   	nop
c001eb4d:	83 c4 0c             	add    esp,0xc
c001eb50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb56:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb58:	85 c0                	test   eax,eax
c001eb5a:	75 0e                	jne    c001eb6a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb63:	85 c0                	test   eax,eax
c001eb65:	75 03                	jne    c001eb6a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb67:	b0 01                	mov    al,0x1
c001eb69:	c3                   	ret    
c001eb6a:	b0 00                	mov    al,0x0
c001eb6c:	90                   	nop
c001eb6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb77:	85 c0                	test   eax,eax
c001eb79:	75 15                	jne    c001eb90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eb7b:	83 ec 0c             	sub    esp,0xc
c001eb7e:	68 78 92 03 c0       	push   0xc0039278
c001eb83:	e8 34 e4 fe ff       	call   c000cfbc <panic(char const*)>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	e9 88 00 00 00       	jmp    c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb9a:	85 c0                	test   eax,eax
c001eb9c:	0f 95 c0             	setne  al
c001eb9f:	84 c0                	test   al,al
c001eba1:	74 10                	je     c001ebb3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	68 c3 92 03 c0       	push   0xc00392c3
c001ebab:	e8 0c e4 fe ff       	call   c000cfbc <panic(char const*)>
c001ebb0:	83 c4 10             	add    esp,0x10
c001ebb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebbc:	85 c0                	test   eax,eax
c001ebbe:	0f 94 c0             	sete   al
c001ebc1:	84 c0                	test   al,al
c001ebc3:	74 33                	je     c001ebf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebe1:	83 f8 01             	cmp    eax,0x1
c001ebe4:	74 21                	je     c001ec07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	68 9c 92 03 c0       	push   0xc003929c
c001ebee:	e8 c9 e3 fe ff       	call   c000cfbc <panic(char const*)>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 0f                	jmp    c001ec07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ebf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	89 10                	mov    DWORD PTR [eax],edx
c001ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec0e:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec18:	83 c4 0c             	add    esp,0xc
c001ec1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec2c <LinkedList<UnixFile>::~LinkedList()>:
c001ec2c:	90                   	nop
c001ec2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec2e <LinkedList<UnixFile>::LinkedList()>:
c001ec2e:	83 ec 0c             	sub    esp,0xc
c001ec31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec71:	83 ec 0c             	sub    esp,0xc
c001ec74:	68 24 92 03 c0       	push   0xc0039224
c001ec79:	e8 20 e2 fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	90                   	nop
c001ec82:	83 c4 0c             	add    esp,0xc
c001ec85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ec86 <LinkedList<UnixFile>::getFirstElement()>:
c001ec86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec8c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ec8e <LinkedList<UnixFile>::removeFirst()>:
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec97:	85 c0                	test   eax,eax
c001ec99:	75 12                	jne    c001ecad <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ec9b:	83 ec 0c             	sub    esp,0xc
c001ec9e:	68 78 92 03 c0       	push   0xc0039278
c001eca3:	e8 14 e3 fe ff       	call   c000cfbc <panic(char const*)>
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	eb 7e                	jmp    c001ed2b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ecad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb7:	85 c0                	test   eax,eax
c001ecb9:	74 10                	je     c001eccb <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	68 c3 92 03 c0       	push   0xc00392c3
c001ecc3:	e8 f4 e2 fe ff       	call   c000cfbc <panic(char const*)>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecd4:	85 c0                	test   eax,eax
c001ecd6:	75 33                	jne    c001ed0b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ece2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecf4:	83 f8 01             	cmp    eax,0x1
c001ecf7:	74 21                	je     c001ed1a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ecf9:	83 ec 0c             	sub    esp,0xc
c001ecfc:	68 9c 92 03 c0       	push   0xc003929c
c001ed01:	e8 b6 e2 fe ff       	call   c000cfbc <panic(char const*)>
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	eb 0f                	jmp    c001ed1a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed11:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed18:	89 10                	mov    DWORD PTR [eax],edx
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed21:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed2b:	83 c4 0c             	add    esp,0xc
c001ed2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ed30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ed38:	83 ec 1c             	sub    esp,0x1c
c001ed3b:	83 ec 0c             	sub    esp,0xc
c001ed3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed42:	e8 3f ff ff ff       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed4e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ed53:	74 43                	je     c001ed98 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001ed55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed59:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001ed5d:	75 20                	jne    c001ed7f <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001ed5f:	83 ec 0c             	sub    esp,0xc
c001ed62:	68 68 94 03 c0       	push   0xc0039468
c001ed67:	e8 32 e1 fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001ed6c:	83 c4 10             	add    esp,0x10
c001ed6f:	83 ec 0c             	sub    esp,0xc
c001ed72:	68 7f 94 03 c0       	push   0xc003947f
c001ed77:	e8 40 e2 fe ff       	call   c000cfbc <panic(char const*)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	83 ec 08             	sub    esp,0x8
c001ed82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed8a:	e8 a1 ff ff ff       	call   c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed96:	eb b6                	jmp    c001ed4e <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ed98:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed9d:	75 10                	jne    c001edaf <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001ed9f:	83 ec 0c             	sub    esp,0xc
c001eda2:	68 40 92 03 c0       	push   0xc0039240
c001eda7:	e8 10 e2 fe ff       	call   c000cfbc <panic(char const*)>
c001edac:	83 c4 10             	add    esp,0x10
c001edaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb5:	85 c0                	test   eax,eax
c001edb7:	74 34                	je     c001eded <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001edb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edc0:	85 c0                	test   eax,eax
c001edc2:	74 29                	je     c001eded <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001edc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ede4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edeb:	eb 65                	jmp    c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001edf3:	85 c0                	test   eax,eax
c001edf5:	75 4b                	jne    c001ee42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001edf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edfe:	85 c0                	test   eax,eax
c001ee00:	75 40                	jne    c001ee42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee0a:	89 10                	mov    DWORD PTR [eax],edx
c001ee0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee2c:	85 c0                	test   eax,eax
c001ee2e:	74 22                	je     c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	68 62 92 03 c0       	push   0xc0039262
c001ee38:	e8 7f e1 fe ff       	call   c000cfbc <panic(char const*)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	eb 10                	jmp    c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee42:	83 ec 0c             	sub    esp,0xc
c001ee45:	68 6c 92 03 c0       	push   0xc003926c
c001ee4a:	e8 6d e1 fe ff       	call   c000cfbc <panic(char const*)>
c001ee4f:	83 c4 10             	add    esp,0x10
c001ee52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee59:	8d 50 01             	lea    edx,[eax+0x1]
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee63:	90                   	nop
c001ee64:	83 c4 1c             	add    esp,0x1c
c001ee67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee68 <DriverlessDevice::~DriverlessDevice()>:
c001ee68:	ba 24 9a 03 c0       	mov    edx,0xc0039a24
c001ee6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee71:	89 10                	mov    DWORD PTR [eax],edx
c001ee73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee77:	50                   	push   eax
c001ee78:	e8 7d 47 ff ff       	call   c00135fa <Device::~Device()>
c001ee7d:	83 c4 04             	add    esp,0x4
c001ee80:	90                   	nop
c001ee81:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee82 <DriverlessDevice::~DriverlessDevice()>:
c001ee82:	83 ec 0c             	sub    esp,0xc
c001ee85:	83 ec 0c             	sub    esp,0xc
c001ee88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8c:	e8 d7 ff ff ff       	call   c001ee68 <DriverlessDevice::~DriverlessDevice()>
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	83 ec 08             	sub    esp,0x8
c001ee97:	68 58 01 00 00       	push   0x158
c001ee9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea0:	e8 b8 35 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001eea5:	83 c4 10             	add    esp,0x10
c001eea8:	83 c4 0c             	add    esp,0xc
c001eeab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eeac <LinkedList<Device>::addElement(Device*)>:
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eeb4:	75 10                	jne    c001eec6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	68 40 92 03 c0       	push   0xc0039240
c001eebe:	e8 f9 e0 fe ff       	call   c000cfbc <panic(char const*)>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeca:	8b 00                	mov    eax,DWORD PTR [eax]
c001eecc:	85 c0                	test   eax,eax
c001eece:	74 3a                	je     c001ef0a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eed7:	85 c0                	test   eax,eax
c001eed9:	74 2f                	je     c001ef0a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eee2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eee6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eeec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eefe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef08:	eb 68                	jmp    c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef10:	85 c0                	test   eax,eax
c001ef12:	75 4e                	jne    c001ef62 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef1b:	85 c0                	test   eax,eax
c001ef1d:	75 43                	jne    c001ef62 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef27:	89 10                	mov    DWORD PTR [eax],edx
c001ef29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef3b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef4c:	85 c0                	test   eax,eax
c001ef4e:	74 22                	je     c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef50:	83 ec 0c             	sub    esp,0xc
c001ef53:	68 62 92 03 c0       	push   0xc0039262
c001ef58:	e8 5f e0 fe ff       	call   c000cfbc <panic(char const*)>
c001ef5d:	83 c4 10             	add    esp,0x10
c001ef60:	eb 10                	jmp    c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	68 6c 92 03 c0       	push   0xc003926c
c001ef6a:	e8 4d e0 fe ff       	call   c000cfbc <panic(char const*)>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef79:	8d 50 01             	lea    edx,[eax+0x1]
c001ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef83:	90                   	nop
c001ef84:	83 c4 0c             	add    esp,0xc
c001ef87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef88 <LinkedList<Device>::LinkedList()>:
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	68 24 92 03 c0       	push   0xc0039224
c001efd3:	e8 c6 de fe ff       	call   c000ce9e <kprintf(char const*, ...)>
c001efd8:	83 c4 10             	add    esp,0x10
c001efdb:	90                   	nop
c001efdc:	83 c4 0c             	add    esp,0xc
c001efdf:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001efe0 <CPU::readDR0()>:
c001efe0:	83 ec 10             	sub    esp,0x10
c001efe3:	0f 21 c0             	mov    eax,db0
c001efe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001eff2 <CPU::readDR1()>:
c001eff2:	83 ec 10             	sub    esp,0x10
c001eff5:	0f 21 c8             	mov    eax,db1
c001eff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001effc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f004 <CPU::readDR2()>:
c001f004:	83 ec 10             	sub    esp,0x10
c001f007:	0f 21 d0             	mov    eax,db2
c001f00a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f00e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f012:	83 c4 10             	add    esp,0x10
c001f015:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f016 <CPU::readDR3()>:
c001f016:	83 ec 10             	sub    esp,0x10
c001f019:	0f 21 d8             	mov    eax,db3
c001f01c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f028 <CPU::readDR6()>:
c001f028:	83 ec 10             	sub    esp,0x10
c001f02b:	0f 21 f0             	mov    eax,db6
c001f02e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f036:	83 c4 10             	add    esp,0x10
c001f039:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f03a <CPU::readDR7()>:
c001f03a:	83 ec 10             	sub    esp,0x10
c001f03d:	0f 21 f8             	mov    eax,db7
c001f040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f04c <ACPI::~ACPI()>:
c001f04c:	83 ec 0c             	sub    esp,0xc
c001f04f:	ba 04 a1 03 c0       	mov    edx,0xc003a104
c001f054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f058:	89 10                	mov    DWORD PTR [eax],edx
c001f05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	50                   	push   eax
c001f062:	e8 93 45 ff ff       	call   c00135fa <Device::~Device()>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	90                   	nop
c001f06b:	83 c4 0c             	add    esp,0xc
c001f06e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f070 <ACPI::~ACPI()>:
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	83 ec 0c             	sub    esp,0xc
c001f076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07a:	e8 cd ff ff ff       	call   c001f04c <ACPI::~ACPI()>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	83 ec 08             	sub    esp,0x8
c001f085:	68 68 22 00 00       	push   0x2268
c001f08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08e:	e8 ca 33 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	83 c4 0c             	add    esp,0xc
c001f099:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f09a <CPU::~CPU()>:
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	ba 54 a3 03 c0       	mov    edx,0xc003a354
c001f0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a6:	89 10                	mov    DWORD PTR [eax],edx
c001f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	50                   	push   eax
c001f0b0:	e8 45 45 ff ff       	call   c00135fa <Device::~Device()>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	90                   	nop
c001f0b9:	83 c4 0c             	add    esp,0xc
c001f0bc:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f0be <CPU::~CPU()>:
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0c8:	e8 cd ff ff ff       	call   c001f09a <CPU::~CPU()>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	83 ec 08             	sub    esp,0x8
c001f0d3:	68 98 11 00 00       	push   0x1198
c001f0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0dc:	e8 7c 33 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	83 c4 0c             	add    esp,0xc
c001f0e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0e8 <CPU::writeDR7(unsigned long)>:
c001f0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ec:	0f 23 f8             	mov    db7,eax
c001f0ef:	90                   	nop
c001f0f0:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0f1 <CPU::writeCR4(unsigned long)>:
c001f0f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f5:	0f 22 e0             	mov    cr4,eax
c001f0f8:	90                   	nop
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f0fa <PCI::~PCI()>:
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	ba f0 a6 03 c0       	mov    edx,0xc003a6f0
c001f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f106:	89 10                	mov    DWORD PTR [eax],edx
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	50                   	push   eax
c001f110:	e8 f5 3e ff ff       	call   c001300a <Bus::~Bus()>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	90                   	nop
c001f119:	83 c4 0c             	add    esp,0xc
c001f11c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f11e <PCI::~PCI()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f128:	e8 cd ff ff ff       	call   c001f0fa <PCI::~PCI()>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	83 ec 08             	sub    esp,0x8
c001f133:	68 58 01 00 00       	push   0x158
c001f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13c:	e8 1c 33 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 c4 0c             	add    esp,0xc
c001f147:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f148 <IDE::~IDE()>:
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	ba bc a9 03 c0       	mov    edx,0xc003a9bc
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	89 10                	mov    DWORD PTR [eax],edx
c001f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	50                   	push   eax
c001f15e:	e8 ad 49 ff ff       	call   c0013b10 <HardDiskController::~HardDiskController()>
c001f163:	83 c4 10             	add    esp,0x10
c001f166:	90                   	nop
c001f167:	83 c4 0c             	add    esp,0xc
c001f16a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f16c <IDE::~IDE()>:
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f176:	e8 cd ff ff ff       	call   c001f148 <IDE::~IDE()>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	83 ec 08             	sub    esp,0x8
c001f181:	68 70 02 00 00       	push   0x270
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	e8 ce 32 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	83 c4 0c             	add    esp,0xc
c001f195:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f196 <ATA::~ATA()>:
c001f196:	83 ec 0c             	sub    esp,0xc
c001f199:	ba 0c aa 03 c0       	mov    edx,0xc003aa0c
c001f19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a2:	89 10                	mov    DWORD PTR [eax],edx
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	50                   	push   eax
c001f1ac:	e8 3d 4a ff ff       	call   c0013bee <PhysicalDisk::~PhysicalDisk()>
c001f1b1:	83 c4 10             	add    esp,0x10
c001f1b4:	90                   	nop
c001f1b5:	83 c4 0c             	add    esp,0xc
c001f1b8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f1ba <ATA::~ATA()>:
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	83 ec 0c             	sub    esp,0xc
c001f1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c4:	e8 cd ff ff ff       	call   c001f196 <ATA::~ATA()>
c001f1c9:	83 c4 10             	add    esp,0x10
c001f1cc:	83 ec 08             	sub    esp,0x8
c001f1cf:	68 7c 01 00 00       	push   0x17c
c001f1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d8:	e8 80 32 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	83 c4 0c             	add    esp,0xc
c001f1e3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f1e4 <ATAPI::~ATAPI()>:
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	ba 78 aa 03 c0       	mov    edx,0xc003aa78
c001f1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f0:	89 10                	mov    DWORD PTR [eax],edx
c001f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f6:	83 ec 0c             	sub    esp,0xc
c001f1f9:	50                   	push   eax
c001f1fa:	e8 ef 49 ff ff       	call   c0013bee <PhysicalDisk::~PhysicalDisk()>
c001f1ff:	83 c4 10             	add    esp,0x10
c001f202:	90                   	nop
c001f203:	83 c4 0c             	add    esp,0xc
c001f206:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f208 <ATAPI::~ATAPI()>:
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	83 ec 0c             	sub    esp,0xc
c001f20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f212:	e8 cd ff ff ff       	call   c001f1e4 <ATAPI::~ATAPI()>
c001f217:	83 c4 10             	add    esp,0x10
c001f21a:	83 ec 08             	sub    esp,0x8
c001f21d:	68 80 01 00 00       	push   0x180
c001f222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f226:	e8 32 32 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	83 c4 0c             	add    esp,0xc
c001f231:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f232 <AVX::~AVX()>:
c001f232:	83 ec 0c             	sub    esp,0xc
c001f235:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23e:	89 10                	mov    DWORD PTR [eax],edx
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	50                   	push   eax
c001f248:	e8 25 4a ff ff       	call   c0013c72 <FPU::~FPU()>
c001f24d:	83 c4 10             	add    esp,0x10
c001f250:	90                   	nop
c001f251:	83 c4 0c             	add    esp,0xc
c001f254:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f256 <AVX::~AVX()>:
c001f256:	83 ec 0c             	sub    esp,0xc
c001f259:	83 ec 0c             	sub    esp,0xc
c001f25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f260:	e8 cd ff ff ff       	call   c001f232 <AVX::~AVX()>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	83 ec 08             	sub    esp,0x8
c001f26b:	68 58 01 00 00       	push   0x158
c001f270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f274:	e8 e4 31 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f279:	83 c4 10             	add    esp,0x10
c001f27c:	83 c4 0c             	add    esp,0xc
c001f27f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f280 <MMX::~MMX()>:
c001f280:	83 ec 0c             	sub    esp,0xc
c001f283:	ba f4 aa 03 c0       	mov    edx,0xc003aaf4
c001f288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28c:	89 10                	mov    DWORD PTR [eax],edx
c001f28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	50                   	push   eax
c001f296:	e8 d7 49 ff ff       	call   c0013c72 <FPU::~FPU()>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	90                   	nop
c001f29f:	83 c4 0c             	add    esp,0xc
c001f2a2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f2a4 <MMX::~MMX()>:
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ae:	e8 cd ff ff ff       	call   c001f280 <MMX::~MMX()>
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	83 ec 08             	sub    esp,0x8
c001f2b9:	68 58 01 00 00       	push   0x158
c001f2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c2:	e8 96 31 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f2c7:	83 c4 10             	add    esp,0x10
c001f2ca:	83 c4 0c             	add    esp,0xc
c001f2cd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f2ce <SSE::~SSE()>:
c001f2ce:	83 ec 0c             	sub    esp,0xc
c001f2d1:	ba 34 ab 03 c0       	mov    edx,0xc003ab34
c001f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2da:	89 10                	mov    DWORD PTR [eax],edx
c001f2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	50                   	push   eax
c001f2e4:	e8 89 49 ff ff       	call   c0013c72 <FPU::~FPU()>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	90                   	nop
c001f2ed:	83 c4 0c             	add    esp,0xc
c001f2f0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f2f2 <SSE::~SSE()>:
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	83 ec 0c             	sub    esp,0xc
c001f2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fc:	e8 cd ff ff ff       	call   c001f2ce <SSE::~SSE()>
c001f301:	83 c4 10             	add    esp,0x10
c001f304:	83 ec 08             	sub    esp,0x8
c001f307:	68 58 01 00 00       	push   0x158
c001f30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f310:	e8 48 31 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f315:	83 c4 10             	add    esp,0x10
c001f318:	83 c4 0c             	add    esp,0xc
c001f31b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f31c <x87::~x87()>:
c001f31c:	83 ec 0c             	sub    esp,0xc
c001f31f:	ba 74 ab 03 c0       	mov    edx,0xc003ab74
c001f324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f328:	89 10                	mov    DWORD PTR [eax],edx
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	50                   	push   eax
c001f332:	e8 3b 49 ff ff       	call   c0013c72 <FPU::~FPU()>
c001f337:	83 c4 10             	add    esp,0x10
c001f33a:	90                   	nop
c001f33b:	83 c4 0c             	add    esp,0xc
c001f33e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f340 <x87::~x87()>:
c001f340:	83 ec 0c             	sub    esp,0xc
c001f343:	83 ec 0c             	sub    esp,0xc
c001f346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f34a:	e8 cd ff ff ff       	call   c001f31c <x87::~x87()>
c001f34f:	83 c4 10             	add    esp,0x10
c001f352:	83 ec 08             	sub    esp,0x8
c001f355:	68 58 01 00 00       	push   0x158
c001f35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35e:	e8 fa 30 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f363:	83 c4 10             	add    esp,0x10
c001f366:	83 c4 0c             	add    esp,0xc
c001f369:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f36a <IOAPIC::~IOAPIC()>:
c001f36a:	83 ec 0c             	sub    esp,0xc
c001f36d:	ba cc ac 03 c0       	mov    edx,0xc003accc
c001f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f376:	89 10                	mov    DWORD PTR [eax],edx
c001f378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37c:	83 ec 0c             	sub    esp,0xc
c001f37f:	50                   	push   eax
c001f380:	e8 75 42 ff ff       	call   c00135fa <Device::~Device()>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	90                   	nop
c001f389:	83 c4 0c             	add    esp,0xc
c001f38c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f38e <IOAPIC::~IOAPIC()>:
c001f38e:	83 ec 0c             	sub    esp,0xc
c001f391:	83 ec 0c             	sub    esp,0xc
c001f394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f398:	e8 cd ff ff ff       	call   c001f36a <IOAPIC::~IOAPIC()>
c001f39d:	83 c4 10             	add    esp,0x10
c001f3a0:	83 ec 08             	sub    esp,0x8
c001f3a3:	68 68 01 00 00       	push   0x168
c001f3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ac:	e8 ac 30 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	83 c4 0c             	add    esp,0xc
c001f3b7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f3b8 <APIC::~APIC()>:
c001f3b8:	83 ec 0c             	sub    esp,0xc
c001f3bb:	ba 84 ac 03 c0       	mov    edx,0xc003ac84
c001f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c4:	89 10                	mov    DWORD PTR [eax],edx
c001f3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ca:	83 ec 0c             	sub    esp,0xc
c001f3cd:	50                   	push   eax
c001f3ce:	e8 43 4d ff ff       	call   c0014116 <InterruptController::~InterruptController()>
c001f3d3:	83 c4 10             	add    esp,0x10
c001f3d6:	90                   	nop
c001f3d7:	83 c4 0c             	add    esp,0xc
c001f3da:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f3dc <APIC::~APIC()>:
c001f3dc:	83 ec 0c             	sub    esp,0xc
c001f3df:	83 ec 0c             	sub    esp,0xc
c001f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e6:	e8 cd ff ff ff       	call   c001f3b8 <APIC::~APIC()>
c001f3eb:	83 c4 10             	add    esp,0x10
c001f3ee:	83 ec 08             	sub    esp,0x8
c001f3f1:	68 58 21 00 00       	push   0x2158
c001f3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3fa:	e8 5e 30 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	83 c4 0c             	add    esp,0xc
c001f405:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f406 <PIC::~PIC()>:
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	ba 1c ad 03 c0       	mov    edx,0xc003ad1c
c001f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f412:	89 10                	mov    DWORD PTR [eax],edx
c001f414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	50                   	push   eax
c001f41c:	e8 f5 4c ff ff       	call   c0014116 <InterruptController::~InterruptController()>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	90                   	nop
c001f425:	83 c4 0c             	add    esp,0xc
c001f428:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f42a <PIC::~PIC()>:
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	83 ec 0c             	sub    esp,0xc
c001f430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f434:	e8 cd ff ff ff       	call   c001f406 <PIC::~PIC()>
c001f439:	83 c4 10             	add    esp,0x10
c001f43c:	83 ec 08             	sub    esp,0x8
c001f43f:	68 58 21 00 00       	push   0x2158
c001f444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f448:	e8 10 30 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f44d:	83 c4 10             	add    esp,0x10
c001f450:	83 c4 0c             	add    esp,0xc
c001f453:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f454 <APICTimer::~APICTimer()>:
c001f454:	83 ec 0c             	sub    esp,0xc
c001f457:	ba 70 ad 03 c0       	mov    edx,0xc003ad70
c001f45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f460:	89 10                	mov    DWORD PTR [eax],edx
c001f462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	50                   	push   eax
c001f46a:	e8 77 62 ff ff       	call   c00156e6 <Timer::~Timer()>
c001f46f:	83 c4 10             	add    esp,0x10
c001f472:	90                   	nop
c001f473:	83 c4 0c             	add    esp,0xc
c001f476:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f478 <APICTimer::~APICTimer()>:
c001f478:	83 ec 0c             	sub    esp,0xc
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f482:	e8 cd ff ff ff       	call   c001f454 <APICTimer::~APICTimer()>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	83 ec 08             	sub    esp,0x8
c001f48d:	68 60 01 00 00       	push   0x160
c001f492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f496:	e8 c2 2f ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	83 c4 0c             	add    esp,0xc
c001f4a1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f4a2 <PIT::~PIT()>:
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	ba c0 ad 03 c0       	mov    edx,0xc003adc0
c001f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ae:	89 10                	mov    DWORD PTR [eax],edx
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	50                   	push   eax
c001f4b8:	e8 29 62 ff ff       	call   c00156e6 <Timer::~Timer()>
c001f4bd:	83 c4 10             	add    esp,0x10
c001f4c0:	90                   	nop
c001f4c1:	83 c4 0c             	add    esp,0xc
c001f4c4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f4c6 <PIT::~PIT()>:
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	83 ec 0c             	sub    esp,0xc
c001f4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d0:	e8 cd ff ff ff       	call   c001f4a2 <PIT::~PIT()>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	83 ec 08             	sub    esp,0x8
c001f4db:	68 5c 01 00 00       	push   0x15c
c001f4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e4:	e8 74 2f ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001f4e9:	83 c4 10             	add    esp,0x10
c001f4ec:	83 c4 0c             	add    esp,0xc
c001f4ef:	c3                   	ret    
