
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 eb c2 00 00       	call   c000c30b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 f3 01 00       	call   c001f408 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 ff 01 c0       	mov    ebx,0xc001ff92
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c ff 01 c0    	cmp    ebx,0xc001ff9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 8c 3d 02 c0       	mov    eax,0xc0023d8c
c0000049:	3d 8c 3d 02 c0       	cmp    eax,0xc0023d8c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 8c 3d 02 c0       	push   0xc0023d8c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 8c 3d 02 c0       	mov    eax,0xc0023d8c
c0000075:	2d 8c 3d 02 c0       	sub    eax,0xc0023d8c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 8c 3d 02 c0       	push   0xc0023d8c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 2c 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f2c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 ff 01 c0       	mov    ebx,0xc001ffa4
c00000bb:	81 eb a0 ff 01 c0    	sub    ebx,0xc001ffa0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 ff 01 c0       	mov    esi,0xc001ffa0
c00000ca:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 30 3f 02 c0       	mov    ds:0xc0023f30,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 8c 3d 02 c0       	push   0xc0023d8c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 2c 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f2c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 34 3f 02 c0       	push   0xc0023f34
c000012c:	68 8c 3d 02 c0       	push   0xc0023d8c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 d1 eb 00 00       	call   c000eee2 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 31 81 01 00       	call   c001844c <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 1d 85 01 00       	call   c001885f <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 c3 8a 01 00       	call   c0018e0e <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 f2 80 01 00       	call   c001844c <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 70 43 02 c0 	lgdtd  ds:0xc0024370
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 bb 0d 01 c0       	mov    ecx,0xc0010dbb
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 bb 0d 01 c0       	mov    ecx,0xc0010dbb
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	89 c2                	mov    edx,eax
c00006c5:	01 c1                	add    ecx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 4c 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f4c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	5a                   	pop    edx
c000072e:	a3 4c 3f 02 c0       	mov    ds:0xc0023f4c,eax
c0000733:	59                   	pop    ecx
c0000734:	a1 4c 3f 02 c0       	mov    eax,ds:0xc0023f4c
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 4c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f4c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000878:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 c0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0040],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 c0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0040],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 c0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0040],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 b7 00 00 00    	ja     c0000a00 <simple_strtoul+0x12a>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 c0 ff 01 c0 04 	test   BYTE PTR [edi-0x3ffe0040],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	5f                   	pop    edi
c00009ab:	0f b6 d0             	movzx  edx,al
c00009ae:	f6 82 c0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0040],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 57                	jmp    c0000a17 <simple_strtoul+0x141>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 f8                	mov    eax,edi
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 1f                	jne    c0000a11 <simple_strtoul+0x13b>
c00009f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009fa:	31 db                	xor    ebx,ebx
c00009fc:	89 38                	mov    DWORD PTR [eax],edi
c00009fe:	eb 17                	jmp    c0000a17 <simple_strtoul+0x141>
c0000a00:	31 db                	xor    ebx,ebx
c0000a02:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a07:	74 14                	je     c0000a1d <simple_strtoul+0x147>
c0000a09:	31 ed                	xor    ebp,ebp
c0000a0b:	85 c9                	test   ecx,ecx
c0000a0d:	75 e3                	jne    c00009f2 <simple_strtoul+0x11c>
c0000a0f:	31 db                	xor    ebx,ebx
c0000a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a15:	89 08                	mov    DWORD PTR [eax],ecx
c0000a17:	4d                   	dec    ebp
c0000a18:	75 03                	jne    c0000a1d <simple_strtoul+0x147>
c0000a1a:	83 cb ff             	or     ebx,0xffffffff
c0000a1d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a22:	75 02                	jne    c0000a26 <simple_strtoul+0x150>
c0000a24:	f7 db                	neg    ebx
c0000a26:	83 c4 08             	add    esp,0x8
c0000a29:	89 d8                	mov    eax,ebx
c0000a2b:	5b                   	pop    ebx
c0000a2c:	5e                   	pop    esi
c0000a2d:	5f                   	pop    edi
c0000a2e:	5d                   	pop    ebp
c0000a2f:	c3                   	ret    

c0000a30 <largebin_index>:
c0000a30:	89 c2                	mov    edx,eax
c0000a32:	c1 ea 08             	shr    edx,0x8
c0000a35:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3b:	77 10                	ja     c0000a4d <largebin_index+0x1d>
c0000a3d:	0f bd d2             	bsr    edx,edx
c0000a40:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a43:	d3 e8                	shr    eax,cl
c0000a45:	83 e0 03             	and    eax,0x3
c0000a48:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4c:	c3                   	ret    
c0000a4d:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a52:	c3                   	ret    

c0000a53 <malloc_init_state>:
c0000a53:	53                   	push   ebx
c0000a54:	8d 50 34             	lea    edx,[eax+0x34]
c0000a57:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a5d:	89 d1                	mov    ecx,edx
c0000a5f:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a62:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a65:	83 c2 08             	add    edx,0x8
c0000a68:	39 da                	cmp    edx,ebx
c0000a6a:	75 f3                	jne    c0000a5f <malloc_init_state+0xc>
c0000a6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a6e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a78:	83 e2 03             	and    edx,0x3
c0000a7b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a85:	83 ca 48             	or     edx,0x48
c0000a88:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a92:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9c:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa3:	89 10                	mov    DWORD PTR [eax],edx
c0000aa5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aa8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab2:	5b                   	pop    ebx
c0000ab3:	c3                   	ret    

c0000ab4 <malloc_consolidate>:
c0000ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab6:	85 d2                	test   edx,edx
c0000ab8:	0f 84 d8 00 00 00    	je     c0000b96 <malloc_consolidate+0xe2>
c0000abe:	55                   	push   ebp
c0000abf:	83 e2 fd             	and    edx,0xfffffffd
c0000ac2:	57                   	push   edi
c0000ac3:	89 c5                	mov    ebp,eax
c0000ac5:	56                   	push   esi
c0000ac6:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac9:	53                   	push   ebx
c0000aca:	83 ec 10             	sub    esp,0x10
c0000acd:	89 10                	mov    DWORD PTR [eax],edx
c0000acf:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad3:	c1 ea 03             	shr    edx,0x3
c0000ad6:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ada:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ade:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae1:	85 d2                	test   edx,edx
c0000ae3:	0f 84 98 00 00 00    	je     c0000b81 <malloc_consolidate+0xcd>
c0000ae9:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af3:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afa:	89 f9                	mov    ecx,edi
c0000afc:	83 e1 fe             	and    ecx,0xfffffffe
c0000aff:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b02:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b05:	83 e3 fc             	and    ebx,0xfffffffc
c0000b08:	83 e7 01             	and    edi,0x1
c0000b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b0e:	75 14                	jne    c0000b24 <malloc_consolidate+0x70>
c0000b10:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b12:	29 fa                	sub    edx,edi
c0000b14:	01 f9                	add    ecx,edi
c0000b16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b19:	89 fb                	mov    ebx,edi
c0000b1b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b1e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b21:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b24:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b27:	74 40                	je     c0000b69 <malloc_consolidate+0xb5>
c0000b29:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b2f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b33:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b36:	83 e7 01             	and    edi,0x1
c0000b39:	75 0e                	jne    c0000b49 <malloc_consolidate+0x95>
c0000b3b:	01 d9                	add    ecx,ebx
c0000b3d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b40:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b43:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b46:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b49:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4c:	89 ce                	mov    esi,ecx
c0000b4e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b51:	83 ce 01             	or     esi,0x1
c0000b54:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b57:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5a:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b5d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b61:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b64:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b67:	eb 0c                	jmp    c0000b75 <malloc_consolidate+0xc1>
c0000b69:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6c:	83 c9 01             	or     ecx,0x1
c0000b6f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b72:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b79:	85 d2                	test   edx,edx
c0000b7b:	0f 85 6f ff ff ff    	jne    c0000af0 <malloc_consolidate+0x3c>
c0000b81:	83 c5 04             	add    ebp,0x4
c0000b84:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b88:	0f 85 50 ff ff ff    	jne    c0000ade <malloc_consolidate+0x2a>
c0000b8e:	83 c4 10             	add    esp,0x10
c0000b91:	5b                   	pop    ebx
c0000b92:	5e                   	pop    esi
c0000b93:	5f                   	pop    edi
c0000b94:	5d                   	pop    ebp
c0000b95:	c3                   	ret    
c0000b96:	e9 b8 fe ff ff       	jmp    c0000a53 <malloc_init_state>

c0000b9b <dlfree>:
c0000b9b:	57                   	push   edi
c0000b9c:	56                   	push   esi
c0000b9d:	53                   	push   ebx
c0000b9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba2:	85 db                	test   ebx,ebx
c0000ba4:	0f 84 e2 00 00 00    	je     c0000c8c <dlfree+0xf1>
c0000baa:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bad:	8b 0d 60 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f60
c0000bb3:	89 f0                	mov    eax,esi
c0000bb5:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bb8:	83 e0 fc             	and    eax,0xfffffffc
c0000bbb:	39 c1                	cmp    ecx,eax
c0000bbd:	72 24                	jb     c0000be3 <dlfree+0x48>
c0000bbf:	83 c9 03             	or     ecx,0x3
c0000bc2:	c1 e8 03             	shr    eax,0x3
c0000bc5:	89 0d 60 3f 02 c0    	mov    DWORD PTR ds:0xc0023f60,ecx
c0000bcb:	83 e8 02             	sub    eax,0x2
c0000bce:	8b 0c 85 64 3f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc09c]
c0000bd5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd7:	89 14 85 64 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc09c],edx
c0000bde:	e9 a9 00 00 00       	jmp    c0000c8c <dlfree+0xf1>
c0000be3:	83 e6 02             	and    esi,0x2
c0000be6:	0f 85 a0 00 00 00    	jne    c0000c8c <dlfree+0xf1>
c0000bec:	83 c9 01             	or     ecx,0x1
c0000bef:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf2:	89 0d 60 3f 02 c0    	mov    DWORD PTR ds:0xc0023f60,ecx
c0000bf8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfb:	83 e1 fc             	and    ecx,0xfffffffc
c0000bfe:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c02:	75 13                	jne    c0000c17 <dlfree+0x7c>
c0000c04:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c07:	29 da                	sub    edx,ebx
c0000c09:	01 d8                	add    eax,ebx
c0000c0b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c0e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c11:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c14:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c17:	39 35 8c 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f8c,esi
c0000c1d:	74 40                	je     c0000c5f <dlfree+0xc4>
c0000c1f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c23:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c26:	80 e3 01             	and    bl,0x1
c0000c29:	75 0e                	jne    c0000c39 <dlfree+0x9e>
c0000c2b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c2e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c31:	01 c8                	add    eax,ecx
c0000c33:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c36:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c39:	8b 0d 9c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f9c
c0000c3f:	c7 42 0c 94 3f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023f94
c0000c46:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c49:	89 15 9c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f9c,edx
c0000c4f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c52:	89 c1                	mov    ecx,eax
c0000c54:	83 c9 01             	or     ecx,0x1
c0000c57:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5a:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5d:	eb 10                	jmp    c0000c6f <dlfree+0xd4>
c0000c5f:	01 c8                	add    eax,ecx
c0000c61:	89 c1                	mov    ecx,eax
c0000c63:	83 c9 01             	or     ecx,0x1
c0000c66:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c69:	89 15 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,edx
c0000c6f:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c74:	76 16                	jbe    c0000c8c <dlfree+0xf1>
c0000c76:	f6 05 60 3f 02 c0 02 	test   BYTE PTR ds:0xc0023f60,0x2
c0000c7d:	74 0d                	je     c0000c8c <dlfree+0xf1>
c0000c7f:	5b                   	pop    ebx
c0000c80:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0000c85:	5e                   	pop    esi
c0000c86:	5f                   	pop    edi
c0000c87:	e9 28 fe ff ff       	jmp    c0000ab4 <malloc_consolidate>
c0000c8c:	5b                   	pop    ebx
c0000c8d:	5e                   	pop    esi
c0000c8e:	5f                   	pop    edi
c0000c8f:	c3                   	ret    

c0000c90 <sYSMALLOc>:
c0000c90:	55                   	push   ebp
c0000c91:	57                   	push   edi
c0000c92:	56                   	push   esi
c0000c93:	53                   	push   ebx
c0000c94:	89 d3                	mov    ebx,edx
c0000c96:	83 ec 2c             	sub    esp,0x2c
c0000c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c9d:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ca3:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ca6:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cad:	74 1f                	je     c0000cce <sYSMALLOc+0x3e>
c0000caf:	89 d8                	mov    eax,ebx
c0000cb1:	e8 fe fd ff ff       	call   c0000ab4 <malloc_consolidate>
c0000cb6:	83 ec 0c             	sub    esp,0xc
c0000cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cbd:	83 e8 07             	sub    eax,0x7
c0000cc0:	50                   	push   eax
c0000cc1:	e8 30 02 00 00       	call   c0000ef6 <dlmalloc>
c0000cc6:	83 c4 10             	add    esp,0x10
c0000cc9:	e9 20 02 00 00       	jmp    c0000eee <sYSMALLOc+0x25e>
c0000cce:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cd1:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cd7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cda:	83 e0 fc             	and    eax,0xfffffffc
c0000cdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ce5:	83 c0 10             	add    eax,0x10
c0000ce8:	01 c1                	add    ecx,eax
c0000cea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cee:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf5:	74 04                	je     c0000cfb <sYSMALLOc+0x6b>
c0000cf7:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cfb:	f7 da                	neg    edx
c0000cfd:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d05:	21 d1                	and    ecx,edx
c0000d07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d0b:	7f 07                	jg     c0000d14 <sYSMALLOc+0x84>
c0000d0d:	31 c0                	xor    eax,eax
c0000d0f:	e9 da 01 00 00       	jmp    c0000eee <sYSMALLOc+0x25e>
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d1b:	e8 49 b1 00 00       	call   c000be69 <sbrk>
c0000d20:	83 c4 10             	add    esp,0x10
c0000d23:	89 c6                	mov    esi,eax
c0000d25:	83 f8 ff             	cmp    eax,0xffffffff
c0000d28:	74 e3                	je     c0000d0d <sYSMALLOc+0x7d>
c0000d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d2e:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d32:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d35:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d3b:	39 f1                	cmp    ecx,esi
c0000d3d:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d43:	75 13                	jne    c0000d58 <sYSMALLOc+0xc8>
c0000d45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d49:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d4d:	83 c8 01             	or     eax,0x1
c0000d50:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d53:	e9 3e 01 00 00       	jmp    c0000e96 <sYSMALLOc+0x206>
c0000d58:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d5e:	88 d0                	mov    al,dl
c0000d60:	83 e0 01             	and    eax,0x1
c0000d63:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d68:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d6c:	0f 95 c0             	setne  al
c0000d6f:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d73:	39 f1                	cmp    ecx,esi
c0000d75:	76 12                	jbe    c0000d89 <sYSMALLOc+0xf9>
c0000d77:	84 c0                	test   al,al
c0000d79:	74 0e                	je     c0000d89 <sYSMALLOc+0xf9>
c0000d7b:	83 e2 fe             	and    edx,0xfffffffe
c0000d7e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d84:	e9 83 00 00 00       	jmp    c0000e0c <sYSMALLOc+0x17c>
c0000d89:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d8e:	74 7c                	je     c0000e0c <sYSMALLOc+0x17c>
c0000d90:	84 c0                	test   al,al
c0000d92:	74 0c                	je     c0000da0 <sYSMALLOc+0x110>
c0000d94:	89 f0                	mov    eax,esi
c0000d96:	29 c8                	sub    eax,ecx
c0000d98:	01 e8                	add    eax,ebp
c0000d9a:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000da0:	89 f2                	mov    edx,esi
c0000da2:	83 e2 07             	and    edx,0x7
c0000da5:	74 0c                	je     c0000db3 <sYSMALLOc+0x123>
c0000da7:	b8 08 00 00 00       	mov    eax,0x8
c0000dac:	29 d0                	sub    eax,edx
c0000dae:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000db1:	eb 04                	jmp    c0000db7 <sYSMALLOc+0x127>
c0000db3:	89 f5                	mov    ebp,esi
c0000db5:	31 c0                	xor    eax,eax
c0000db7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dc3:	01 c1                	add    ecx,eax
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	01 f1                	add    ecx,esi
c0000dca:	01 ca                	add    edx,ecx
c0000dcc:	29 c8                	sub    eax,ecx
c0000dce:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dd2:	01 c2                	add    edx,eax
c0000dd4:	52                   	push   edx
c0000dd5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000dd9:	e8 8b b0 00 00       	call   c000be69 <sbrk>
c0000dde:	83 c4 10             	add    esp,0x10
c0000de1:	83 f8 ff             	cmp    eax,0xffffffff
c0000de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000de8:	75 0f                	jne    c0000df9 <sYSMALLOc+0x169>
c0000dea:	83 ec 0c             	sub    esp,0xc
c0000ded:	6a 00                	push   0x0
c0000def:	e8 75 b0 00 00       	call   c000be69 <sbrk>
c0000df4:	83 c4 10             	add    esp,0x10
c0000df7:	eb 30                	jmp    c0000e29 <sYSMALLOc+0x199>
c0000df9:	39 c6                	cmp    esi,eax
c0000dfb:	76 33                	jbe    c0000e30 <sYSMALLOc+0x1a0>
c0000dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e01:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e08:	01 f0                	add    eax,esi
c0000e0a:	eb 1d                	jmp    c0000e29 <sYSMALLOc+0x199>
c0000e0c:	83 ec 0c             	sub    esp,0xc
c0000e0f:	89 f5                	mov    ebp,esi
c0000e11:	6a 00                	push   0x0
c0000e13:	e8 51 b0 00 00       	call   c000be69 <sbrk>
c0000e18:	89 c2                	mov    edx,eax
c0000e1a:	29 f2                	sub    edx,esi
c0000e1c:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e29:	31 d2                	xor    edx,edx
c0000e2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000e2e:	74 66                	je     c0000e96 <sYSMALLOc+0x206>
c0000e30:	29 e8                	sub    eax,ebp
c0000e32:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e35:	01 d0                	add    eax,edx
c0000e37:	83 c8 01             	or     eax,0x1
c0000e3a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e3d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e43:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e48:	74 4c                	je     c0000e96 <sYSMALLOc+0x206>
c0000e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4e:	83 e8 0c             	sub    eax,0xc
c0000e51:	83 e0 f8             	and    eax,0xfffffff8
c0000e54:	89 c2                	mov    edx,eax
c0000e56:	83 ca 01             	or     edx,0x1
c0000e59:	83 f8 0f             	cmp    eax,0xf
c0000e5c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e5f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e67:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e6f:	76 25                	jbe    c0000e96 <sYSMALLOc+0x206>
c0000e71:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e77:	83 ec 0c             	sub    esp,0xc
c0000e7a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e84:	83 c7 08             	add    edi,0x8
c0000e87:	57                   	push   edi
c0000e88:	e8 0e fd ff ff       	call   c0000b9b <dlfree>
c0000e8d:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e9c:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ea2:	73 06                	jae    c0000eaa <sYSMALLOc+0x21a>
c0000ea4:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eaa:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eb0:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000eb6:	73 06                	jae    c0000ebe <sYSMALLOc+0x22e>
c0000eb8:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ebe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ec1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ec4:	83 e2 fc             	and    edx,0xfffffffc
c0000ec7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ecb:	0f 82 3c fe ff ff    	jb     c0000d0d <sYSMALLOc+0x7d>
c0000ed1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ed5:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ed8:	29 fa                	sub    edx,edi
c0000eda:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000edd:	83 ca 01             	or     edx,0x1
c0000ee0:	89 fb                	mov    ebx,edi
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	83 cb 01             	or     ebx,0x1
c0000ee8:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eeb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eee:	83 c4 2c             	add    esp,0x2c
c0000ef1:	5b                   	pop    ebx
c0000ef2:	5e                   	pop    esi
c0000ef3:	5f                   	pop    edi
c0000ef4:	5d                   	pop    ebp
c0000ef5:	c3                   	ret    

c0000ef6 <dlmalloc>:
c0000ef6:	55                   	push   ebp
c0000ef7:	57                   	push   edi
c0000ef8:	56                   	push   esi
c0000ef9:	53                   	push   ebx
c0000efa:	83 ec 1c             	sub    esp,0x1c
c0000efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f01:	83 f8 df             	cmp    eax,0xffffffdf
c0000f04:	0f 87 70 03 00 00    	ja     c000127a <dlmalloc+0x384>
c0000f0a:	83 c0 0b             	add    eax,0xb
c0000f0d:	be 10 00 00 00       	mov    esi,0x10
c0000f12:	83 f8 0f             	cmp    eax,0xf
c0000f15:	76 05                	jbe    c0000f1c <dlmalloc+0x26>
c0000f17:	83 e0 f8             	and    eax,0xfffffff8
c0000f1a:	89 c6                	mov    esi,eax
c0000f1c:	8b 3d 60 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023f60
c0000f22:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f28:	75 17                	jne    c0000f41 <dlmalloc+0x4b>
c0000f2a:	85 ff                	test   edi,edi
c0000f2c:	0f 85 05 03 00 00    	jne    c0001237 <dlmalloc+0x341>
c0000f32:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0000f37:	e8 78 fb ff ff       	call   c0000ab4 <malloc_consolidate>
c0000f3c:	e9 f6 02 00 00       	jmp    c0001237 <dlmalloc+0x341>
c0000f41:	39 f7                	cmp    edi,esi
c0000f43:	72 1f                	jb     c0000f64 <dlmalloc+0x6e>
c0000f45:	89 f2                	mov    edx,esi
c0000f47:	c1 ea 03             	shr    edx,0x3
c0000f4a:	83 ea 02             	sub    edx,0x2
c0000f4d:	8b 04 95 64 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc09c]
c0000f54:	85 c0                	test   eax,eax
c0000f56:	74 0c                	je     c0000f64 <dlmalloc+0x6e>
c0000f58:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f5b:	89 0c 95 64 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc09c],ecx
c0000f62:	eb 30                	jmp    c0000f94 <dlmalloc+0x9e>
c0000f64:	89 f0                	mov    eax,esi
c0000f66:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f6c:	77 2e                	ja     c0000f9c <dlmalloc+0xa6>
c0000f6e:	c1 e8 03             	shr    eax,0x3
c0000f71:	8d 14 c5 94 3f 02 c0 	lea    edx,[eax*8-0x3ffdc06c]
c0000f78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7c:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f7f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f82:	39 c3                	cmp    ebx,eax
c0000f84:	74 2e                	je     c0000fb4 <dlmalloc+0xbe>
c0000f86:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f89:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f8e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f91:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f94:	83 c0 08             	add    eax,0x8
c0000f97:	e9 e0 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0000f9c:	e8 8f fa ff ff       	call   c0000a30 <largebin_index>
c0000fa1:	83 e7 02             	and    edi,0x2
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	74 0a                	je     c0000fb4 <dlmalloc+0xbe>
c0000faa:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0000faf:	e8 00 fb ff ff       	call   c0000ab4 <malloc_consolidate>
c0000fb4:	8d 46 10             	lea    eax,[esi+0x10]
c0000fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fbb:	8b 1d a0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa0
c0000fc1:	81 fb 94 3f 02 c0    	cmp    ebx,0xc0023f94
c0000fc7:	0f 84 13 01 00 00    	je     c00010e0 <dlmalloc+0x1ea>
c0000fcd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd3:	83 e7 fc             	and    edi,0xfffffffc
c0000fd6:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fdc:	77 4c                	ja     c000102a <dlmalloc+0x134>
c0000fde:	3d 94 3f 02 c0       	cmp    eax,0xc0023f94
c0000fe3:	75 45                	jne    c000102a <dlmalloc+0x134>
c0000fe5:	39 1d 90 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f90,ebx
c0000feb:	75 3d                	jne    c000102a <dlmalloc+0x134>
c0000fed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff1:	73 37                	jae    c000102a <dlmalloc+0x134>
c0000ff3:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ff6:	89 fa                	mov    edx,edi
c0000ff8:	a3 9c 3f 02 c0       	mov    ds:0xc0023f9c,eax
c0000ffd:	a3 a0 3f 02 c0       	mov    ds:0xc0023fa0,eax
c0001002:	a3 90 3f 02 c0       	mov    ds:0xc0023f90,eax
c0001007:	29 f2                	sub    edx,esi
c0001009:	c7 40 08 94 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023f94
c0001010:	c7 40 0c 94 3f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023f94
c0001017:	83 ce 01             	or     esi,0x1
c000101a:	89 d1                	mov    ecx,edx
c000101c:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000101f:	83 c9 01             	or     ecx,0x1
c0001022:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001025:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001028:	eb 15                	jmp    c000103f <dlmalloc+0x149>
c000102a:	a3 a0 3f 02 c0       	mov    ds:0xc0023fa0,eax
c000102f:	39 fe                	cmp    esi,edi
c0001031:	c7 40 08 94 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023f94
c0001038:	75 0d                	jne    c0001047 <dlmalloc+0x151>
c000103a:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000103f:	8d 43 08             	lea    eax,[ebx+0x8]
c0001042:	e9 35 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0001047:	89 f8                	mov    eax,edi
c0001049:	81 ff ff 00 00 00    	cmp    edi,0xff
c000104f:	77 19                	ja     c000106a <dlmalloc+0x174>
c0001051:	c1 e8 03             	shr    eax,0x3
c0001054:	8d 14 00             	lea    edx,[eax+eax*1]
c0001057:	83 c2 0d             	add    edx,0xd
c000105a:	8d 2c 95 58 3f 02 c0 	lea    ebp,[edx*4-0x3ffdc0a8]
c0001061:	8b 14 95 60 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc0a0]
c0001068:	eb 46                	jmp    c00010b0 <dlmalloc+0x1ba>
c000106a:	e8 c1 f9 ff ff       	call   c0000a30 <largebin_index>
c000106f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001072:	83 c2 0d             	add    edx,0xd
c0001075:	8d 0c 95 60 3f 02 c0 	lea    ecx,[edx*4-0x3ffdc0a0]
c000107c:	8b 14 95 60 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc0a0]
c0001083:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001086:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108a:	89 d5                	mov    ebp,edx
c000108c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001090:	74 1e                	je     c00010b0 <dlmalloc+0x1ba>
c0001092:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001095:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001098:	77 12                	ja     c00010ac <dlmalloc+0x1b6>
c000109a:	83 cf 01             	or     edi,0x1
c000109d:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a0:	76 05                	jbe    c00010a7 <dlmalloc+0x1b1>
c00010a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010a5:	eb f6                	jmp    c000109d <dlmalloc+0x1a7>
c00010a7:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010aa:	eb 04                	jmp    c00010b0 <dlmalloc+0x1ba>
c00010ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b0:	89 c7                	mov    edi,eax
c00010b2:	88 c1                	mov    cl,al
c00010b4:	c1 ff 05             	sar    edi,0x5
c00010b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010bb:	bf 01 00 00 00       	mov    edi,0x1
c00010c0:	d3 e7                	shl    edi,cl
c00010c2:	89 f8                	mov    eax,edi
c00010c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010c8:	09 04 bd 94 42 02 c0 	or     DWORD PTR [edi*4-0x3ffdbd6c],eax
c00010cf:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010d5:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010d8:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010db:	e9 db fe ff ff       	jmp    c0000fbb <dlmalloc+0xc5>
c00010e0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e6:	76 78                	jbe    c0001160 <dlmalloc+0x26a>
c00010e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ec:	8d 04 c5 94 3f 02 c0 	lea    eax,[eax*8-0x3ffdc06c]
c00010f3:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f9:	39 ca                	cmp    edx,ecx
c00010fb:	74 63                	je     c0001160 <dlmalloc+0x26a>
c00010fd:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001100:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001103:	83 e3 fc             	and    ebx,0xfffffffc
c0001106:	39 de                	cmp    esi,ebx
c0001108:	77 52                	ja     c000115c <dlmalloc+0x266>
c000110a:	89 df                	mov    edi,ebx
c000110c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000110f:	29 f7                	sub    edi,esi
c0001111:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001114:	01 d3                	add    ebx,edx
c0001116:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001119:	83 ff 0f             	cmp    edi,0xf
c000111c:	8d 42 08             	lea    eax,[edx+0x8]
c000111f:	77 09                	ja     c000112a <dlmalloc+0x234>
c0001121:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001125:	e9 52 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000112a:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000112d:	83 ce 01             	or     esi,0x1
c0001130:	89 0d 9c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f9c,ecx
c0001136:	89 0d a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,ecx
c000113c:	c7 41 08 94 3f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023f94
c0001143:	c7 41 0c 94 3f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023f94
c000114a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000114d:	89 fa                	mov    edx,edi
c000114f:	83 ca 01             	or     edx,0x1
c0001152:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001155:	89 3b                	mov    DWORD PTR [ebx],edi
c0001157:	e9 20 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000115c:	89 c2                	mov    edx,eax
c000115e:	eb 99                	jmp    c00010f9 <dlmalloc+0x203>
c0001160:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001164:	b8 01 00 00 00       	mov    eax,0x1
c0001169:	41                   	inc    ecx
c000116a:	89 cb                	mov    ebx,ecx
c000116c:	8d 14 cd 8c 3f 02 c0 	lea    edx,[ecx*8-0x3ffdc074]
c0001173:	c1 eb 05             	shr    ebx,0x5
c0001176:	d3 e0                	shl    eax,cl
c0001178:	8b 3c 9d 94 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd6c]
c000117f:	39 f8                	cmp    eax,edi
c0001181:	77 04                	ja     c0001187 <dlmalloc+0x291>
c0001183:	85 c0                	test   eax,eax
c0001185:	75 26                	jne    c00011ad <dlmalloc+0x2b7>
c0001187:	43                   	inc    ebx
c0001188:	83 fb 02             	cmp    ebx,0x2
c000118b:	0f 87 a6 00 00 00    	ja     c0001237 <dlmalloc+0x341>
c0001191:	8b 3c 9d 94 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd6c]
c0001198:	85 ff                	test   edi,edi
c000119a:	74 eb                	je     c0001187 <dlmalloc+0x291>
c000119c:	89 d8                	mov    eax,ebx
c000119e:	c1 e0 06             	shl    eax,0x6
c00011a1:	8d 14 85 8c 3f 02 c0 	lea    edx,[eax*4-0x3ffdc074]
c00011a8:	b8 01 00 00 00       	mov    eax,0x1
c00011ad:	85 f8                	test   eax,edi
c00011af:	75 07                	jne    c00011b8 <dlmalloc+0x2c2>
c00011b1:	83 c2 08             	add    edx,0x8
c00011b4:	01 c0                	add    eax,eax
c00011b6:	eb f5                	jmp    c00011ad <dlmalloc+0x2b7>
c00011b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011bb:	39 ca                	cmp    edx,ecx
c00011bd:	75 14                	jne    c00011d3 <dlmalloc+0x2dd>
c00011bf:	89 c1                	mov    ecx,eax
c00011c1:	83 c2 08             	add    edx,0x8
c00011c4:	f7 d1                	not    ecx
c00011c6:	01 c0                	add    eax,eax
c00011c8:	21 cf                	and    edi,ecx
c00011ca:	89 3c 9d 94 42 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbd6c],edi
c00011d1:	eb ac                	jmp    c000117f <dlmalloc+0x289>
c00011d3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011d6:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011d9:	83 e0 fc             	and    eax,0xfffffffc
c00011dc:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011df:	89 c3                	mov    ebx,eax
c00011e1:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e4:	29 f3                	sub    ebx,esi
c00011e6:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011e9:	83 fb 0f             	cmp    ebx,0xf
c00011ec:	8d 41 08             	lea    eax,[ecx+0x8]
c00011ef:	77 09                	ja     c00011fa <dlmalloc+0x304>
c00011f1:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011f5:	e9 82 00 00 00       	jmp    c000127c <dlmalloc+0x386>
c00011fa:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011fd:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001203:	89 3d 9c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f9c,edi
c0001209:	89 3d a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edi
c000120f:	c7 47 08 94 3f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023f94
c0001216:	c7 47 0c 94 3f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023f94
c000121d:	77 06                	ja     c0001225 <dlmalloc+0x32f>
c000121f:	89 3d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,edi
c0001225:	83 ce 01             	or     esi,0x1
c0001228:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000122b:	89 d9                	mov    ecx,ebx
c000122d:	83 c9 01             	or     ecx,0x1
c0001230:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001233:	89 1a                	mov    DWORD PTR [edx],ebx
c0001235:	eb 45                	jmp    c000127c <dlmalloc+0x386>
c0001237:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000123c:	8d 4e 10             	lea    ecx,[esi+0x10]
c000123f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001242:	83 e2 fc             	and    edx,0xfffffffc
c0001245:	39 d1                	cmp    ecx,edx
c0001247:	77 1e                	ja     c0001267 <dlmalloc+0x371>
c0001249:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000124c:	89 f3                	mov    ebx,esi
c000124e:	89 0d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ecx
c0001254:	83 cb 01             	or     ebx,0x1
c0001257:	29 f2                	sub    edx,esi
c0001259:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000125c:	83 ca 01             	or     edx,0x1
c000125f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001262:	e9 2d fd ff ff       	jmp    c0000f94 <dlmalloc+0x9e>
c0001267:	83 c4 1c             	add    esp,0x1c
c000126a:	89 f0                	mov    eax,esi
c000126c:	5b                   	pop    ebx
c000126d:	ba 60 3f 02 c0       	mov    edx,0xc0023f60
c0001272:	5e                   	pop    esi
c0001273:	5f                   	pop    edi
c0001274:	5d                   	pop    ebp
c0001275:	e9 16 fa ff ff       	jmp    c0000c90 <sYSMALLOc>
c000127a:	31 c0                	xor    eax,eax
c000127c:	83 c4 1c             	add    esp,0x1c
c000127f:	5b                   	pop    ebx
c0001280:	5e                   	pop    esi
c0001281:	5f                   	pop    edi
c0001282:	5d                   	pop    ebp
c0001283:	c3                   	ret    

c0001284 <iALLOc>:
c0001284:	55                   	push   ebp
c0001285:	89 c5                	mov    ebp,eax
c0001287:	57                   	push   edi
c0001288:	56                   	push   esi
c0001289:	53                   	push   ebx
c000128a:	83 ec 2c             	sub    esp,0x2c
c000128d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001291:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001299:	83 3d 60 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f60,0x0
c00012a0:	75 12                	jne    c00012b4 <iALLOc+0x30>
c00012a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012a6:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00012ab:	e8 04 f8 ff ff       	call   c0000ab4 <malloc_consolidate>
c00012b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012b9:	74 12                	je     c00012cd <iALLOc+0x49>
c00012bb:	85 ed                	test   ebp,ebp
c00012bd:	0f 84 64 01 00 00    	je     c0001427 <iALLOc+0x1a3>
c00012c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012cb:	eb 33                	jmp    c0001300 <iALLOc+0x7c>
c00012cd:	85 ed                	test   ebp,ebp
c00012cf:	75 14                	jne    c00012e5 <iALLOc+0x61>
c00012d1:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012d9:	83 c4 2c             	add    esp,0x2c
c00012dc:	5b                   	pop    ebx
c00012dd:	5e                   	pop    esi
c00012de:	5f                   	pop    edi
c00012df:	5d                   	pop    ebp
c00012e0:	e9 11 fc ff ff       	jmp    c0000ef6 <dlmalloc>
c00012e5:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ec:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f4:	83 f8 0f             	cmp    eax,0xf
c00012f7:	76 07                	jbe    c0001300 <iALLOc+0x7c>
c00012f9:	83 e0 f8             	and    eax,0xfffffff8
c00012fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001300:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001305:	75 09                	jne    c0001310 <iALLOc+0x8c>
c0001307:	89 d0                	mov    eax,edx
c0001309:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000130c:	31 f6                	xor    esi,esi
c000130e:	eb 3b                	jmp    c000134b <iALLOc+0xc7>
c0001310:	8b 02                	mov    eax,DWORD PTR [edx]
c0001312:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131a:	83 c0 0b             	add    eax,0xb
c000131d:	83 f8 0f             	cmp    eax,0xf
c0001320:	76 07                	jbe    c0001329 <iALLOc+0xa5>
c0001322:	83 e0 f8             	and    eax,0xfffffff8
c0001325:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000132d:	0f af f5             	imul   esi,ebp
c0001330:	eb 25                	jmp    c0001357 <iALLOc+0xd3>
c0001332:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001334:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001337:	bb 10 00 00 00       	mov    ebx,0x10
c000133c:	83 f9 0f             	cmp    ecx,0xf
c000133f:	76 05                	jbe    c0001346 <iALLOc+0xc2>
c0001341:	83 e1 f8             	and    ecx,0xfffffff8
c0001344:	89 cb                	mov    ebx,ecx
c0001346:	01 de                	add    esi,ebx
c0001348:	83 c0 04             	add    eax,0x4
c000134b:	39 c7                	cmp    edi,eax
c000134d:	75 e3                	jne    c0001332 <iALLOc+0xae>
c000134f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000135b:	8b 1d b4 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242b4
c0001361:	83 ec 0c             	sub    esp,0xc
c0001364:	c7 05 b4 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242b4,0x0
c000136e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001372:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001376:	50                   	push   eax
c0001377:	e8 7a fb ff ff       	call   c0000ef6 <dlmalloc>
c000137c:	83 c4 10             	add    esp,0x10
c000137f:	89 1d b4 42 02 c0    	mov    DWORD PTR ds:0xc00242b4,ebx
c0001385:	85 c0                	test   eax,eax
c0001387:	0f 84 92 00 00 00    	je     c000141f <iALLOc+0x19b>
c000138d:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001390:	8d 78 f8             	lea    edi,[eax-0x8]
c0001393:	83 e3 fc             	and    ebx,0xfffffffc
c0001396:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139a:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000139f:	74 1e                	je     c00013bf <iALLOc+0x13b>
c00013a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013a5:	89 d9                	mov    ecx,ebx
c00013a7:	52                   	push   edx
c00013a8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013ac:	83 e9 04             	sub    ecx,0x4
c00013af:	51                   	push   ecx
c00013b0:	6a 00                	push   0x0
c00013b2:	50                   	push   eax
c00013b3:	e8 02 f3 ff ff       	call   c00006ba <memset>
c00013b8:	83 c4 10             	add    esp,0x10
c00013bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c4:	75 14                	jne    c00013da <iALLOc+0x156>
c00013c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00013c9:	29 f3                	sub    ebx,esi
c00013cb:	8d 48 08             	lea    ecx,[eax+0x8]
c00013ce:	83 cb 01             	or     ebx,0x1
c00013d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013d5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d8:	89 f3                	mov    ebx,esi
c00013da:	31 c0                	xor    eax,eax
c00013dc:	4d                   	dec    ebp
c00013dd:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e4:	39 c5                	cmp    ebp,eax
c00013e6:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013e9:	74 2c                	je     c0001417 <iALLOc+0x193>
c00013eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013ef:	85 c9                	test   ecx,ecx
c00013f1:	75 15                	jne    c0001408 <iALLOc+0x184>
c00013f3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013f6:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013f9:	b9 10 00 00 00       	mov    ecx,0x10
c00013fe:	83 fe 0f             	cmp    esi,0xf
c0001401:	76 05                	jbe    c0001408 <iALLOc+0x184>
c0001403:	83 e6 f8             	and    esi,0xfffffff8
c0001406:	89 f1                	mov    ecx,esi
c0001408:	89 ce                	mov    esi,ecx
c000140a:	29 cb                	sub    ebx,ecx
c000140c:	83 ce 01             	or     esi,0x1
c000140f:	40                   	inc    eax
c0001410:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001413:	01 cf                	add    edi,ecx
c0001415:	eb c6                	jmp    c00013dd <iALLOc+0x159>
c0001417:	83 cb 01             	or     ebx,0x1
c000141a:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000141d:	eb 08                	jmp    c0001427 <iALLOc+0x1a3>
c000141f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000142b:	83 c4 2c             	add    esp,0x2c
c000142e:	5b                   	pop    ebx
c000142f:	5e                   	pop    esi
c0001430:	5f                   	pop    edi
c0001431:	5d                   	pop    ebp
c0001432:	c3                   	ret    

c0001433 <dlrealloc>:
c0001433:	55                   	push   ebp
c0001434:	57                   	push   edi
c0001435:	56                   	push   esi
c0001436:	53                   	push   ebx
c0001437:	83 ec 1c             	sub    esp,0x1c
c000143a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000143e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001442:	85 db                	test   ebx,ebx
c0001444:	75 10                	jne    c0001456 <dlrealloc+0x23>
c0001446:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144a:	83 c4 1c             	add    esp,0x1c
c000144d:	5b                   	pop    ebx
c000144e:	5e                   	pop    esi
c000144f:	5f                   	pop    edi
c0001450:	5d                   	pop    ebp
c0001451:	e9 a0 fa ff ff       	jmp    c0000ef6 <dlmalloc>
c0001456:	83 f8 df             	cmp    eax,0xffffffdf
c0001459:	76 07                	jbe    c0001462 <dlrealloc+0x2f>
c000145b:	31 db                	xor    ebx,ebx
c000145d:	e9 7c 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c0001462:	83 c0 0b             	add    eax,0xb
c0001465:	bf 10 00 00 00       	mov    edi,0x10
c000146a:	83 f8 0f             	cmp    eax,0xf
c000146d:	76 05                	jbe    c0001474 <dlrealloc+0x41>
c000146f:	83 e0 f8             	and    eax,0xfffffff8
c0001472:	89 c7                	mov    edi,eax
c0001474:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001477:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147a:	89 c6                	mov    esi,eax
c000147c:	83 e6 fc             	and    esi,0xfffffffc
c000147f:	a8 02                	test   al,0x2
c0001481:	75 d8                	jne    c000145b <dlrealloc+0x28>
c0001483:	39 f7                	cmp    edi,esi
c0001485:	0f 86 15 01 00 00    	jbe    c00015a0 <dlrealloc+0x16d>
c000148b:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000148f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001492:	39 15 8c 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f8c,edx
c0001498:	75 33                	jne    c00014cd <dlrealloc+0x9a>
c000149a:	83 e1 fc             	and    ecx,0xfffffffc
c000149d:	01 f1                	add    ecx,esi
c000149f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a3:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014a6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014aa:	77 49                	ja     c00014f5 <dlrealloc+0xc2>
c00014ac:	01 fd                	add    ebp,edi
c00014ae:	83 e0 01             	and    eax,0x1
c00014b1:	09 f8                	or     eax,edi
c00014b3:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014b6:	89 2d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebp
c00014bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c0:	29 f8                	sub    eax,edi
c00014c2:	83 c8 01             	or     eax,0x1
c00014c5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014c8:	e9 11 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c00014cd:	89 c8                	mov    eax,ecx
c00014cf:	83 e0 fe             	and    eax,0xfffffffe
c00014d2:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014d7:	75 1c                	jne    c00014f5 <dlrealloc+0xc2>
c00014d9:	83 e1 fc             	and    ecx,0xfffffffc
c00014dc:	01 f1                	add    ecx,esi
c00014de:	39 cf                	cmp    edi,ecx
c00014e0:	77 13                	ja     c00014f5 <dlrealloc+0xc2>
c00014e2:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014e5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014e8:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014eb:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014ee:	89 ce                	mov    esi,ecx
c00014f0:	e9 ab 00 00 00       	jmp    c00015a0 <dlrealloc+0x16d>
c00014f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014f9:	8d 47 f9             	lea    eax,[edi-0x7]
c00014fc:	83 ec 0c             	sub    esp,0xc
c00014ff:	50                   	push   eax
c0001500:	e8 f1 f9 ff ff       	call   c0000ef6 <dlmalloc>
c0001505:	83 c4 10             	add    esp,0x10
c0001508:	89 c1                	mov    ecx,eax
c000150a:	85 c0                	test   eax,eax
c000150c:	0f 84 49 ff ff ff    	je     c000145b <dlrealloc+0x28>
c0001512:	8d 40 f8             	lea    eax,[eax-0x8]
c0001515:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001519:	39 c2                	cmp    edx,eax
c000151b:	75 0a                	jne    c0001527 <dlrealloc+0xf4>
c000151d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001520:	83 e0 fc             	and    eax,0xfffffffc
c0001523:	01 c6                	add    esi,eax
c0001525:	eb 79                	jmp    c00015a0 <dlrealloc+0x16d>
c0001527:	83 ee 04             	sub    esi,0x4
c000152a:	83 fe 27             	cmp    esi,0x27
c000152d:	76 16                	jbe    c0001545 <dlrealloc+0x112>
c000152f:	50                   	push   eax
c0001530:	56                   	push   esi
c0001531:	53                   	push   ebx
c0001532:	51                   	push   ecx
c0001533:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001537:	e8 48 f1 ff ff       	call   c0000684 <memcpy>
c000153c:	83 c4 10             	add    esp,0x10
c000153f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001543:	eb 43                	jmp    c0001588 <dlrealloc+0x155>
c0001545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001547:	83 fe 13             	cmp    esi,0x13
c000154a:	89 01                	mov    DWORD PTR [ecx],eax
c000154c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000154f:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001552:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001555:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001558:	76 2e                	jbe    c0001588 <dlrealloc+0x155>
c000155a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000155d:	83 fe 1b             	cmp    esi,0x1b
c0001560:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001563:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001566:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001569:	76 1d                	jbe    c0001588 <dlrealloc+0x155>
c000156b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000156e:	83 fe 23             	cmp    esi,0x23
c0001571:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001574:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001577:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157a:	76 0c                	jbe    c0001588 <dlrealloc+0x155>
c000157c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000157f:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001582:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001585:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001588:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158c:	83 ec 0c             	sub    esp,0xc
c000158f:	53                   	push   ebx
c0001590:	e8 06 f6 ff ff       	call   c0000b9b <dlfree>
c0001595:	83 c4 10             	add    esp,0x10
c0001598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000159c:	89 cb                	mov    ebx,ecx
c000159e:	eb 3e                	jmp    c00015de <dlrealloc+0x1ab>
c00015a0:	89 f2                	mov    edx,esi
c00015a2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015a5:	29 fa                	sub    edx,edi
c00015a7:	83 e1 01             	and    ecx,0x1
c00015aa:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ae:	83 fa 0f             	cmp    edx,0xf
c00015b1:	77 0b                	ja     c00015be <dlrealloc+0x18b>
c00015b3:	09 ce                	or     esi,ecx
c00015b5:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015bc:	eb 20                	jmp    c00015de <dlrealloc+0x1ab>
c00015be:	01 fd                	add    ebp,edi
c00015c0:	83 ec 0c             	sub    esp,0xc
c00015c3:	09 cf                	or     edi,ecx
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015cb:	83 c5 08             	add    ebp,0x8
c00015ce:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015d1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d5:	55                   	push   ebp
c00015d6:	e8 c0 f5 ff ff       	call   c0000b9b <dlfree>
c00015db:	83 c4 10             	add    esp,0x10
c00015de:	83 c4 1c             	add    esp,0x1c
c00015e1:	89 d8                	mov    eax,ebx
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlmemalign>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015f7:	83 fa 08             	cmp    edx,0x8
c00015fa:	77 10                	ja     c000160c <dlmemalign+0x24>
c00015fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001600:	83 c4 0c             	add    esp,0xc
c0001603:	5b                   	pop    ebx
c0001604:	5e                   	pop    esi
c0001605:	5f                   	pop    edi
c0001606:	5d                   	pop    ebp
c0001607:	e9 ea f8 ff ff       	jmp    c0000ef6 <dlmalloc>
c000160c:	bf 10 00 00 00       	mov    edi,0x10
c0001611:	83 fa 0f             	cmp    edx,0xf
c0001614:	76 13                	jbe    c0001629 <dlmemalign+0x41>
c0001616:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001619:	85 d1                	test   ecx,edx
c000161b:	75 04                	jne    c0001621 <dlmemalign+0x39>
c000161d:	89 d7                	mov    edi,edx
c000161f:	eb 08                	jmp    c0001629 <dlmemalign+0x41>
c0001621:	39 d7                	cmp    edi,edx
c0001623:	73 04                	jae    c0001629 <dlmemalign+0x41>
c0001625:	01 ff                	add    edi,edi
c0001627:	eb f8                	jmp    c0001621 <dlmemalign+0x39>
c0001629:	83 f8 df             	cmp    eax,0xffffffdf
c000162c:	76 07                	jbe    c0001635 <dlmemalign+0x4d>
c000162e:	31 c0                	xor    eax,eax
c0001630:	e9 ce 00 00 00       	jmp    c0001703 <dlmemalign+0x11b>
c0001635:	83 c0 0b             	add    eax,0xb
c0001638:	bd 10 00 00 00       	mov    ebp,0x10
c000163d:	83 f8 0f             	cmp    eax,0xf
c0001640:	76 05                	jbe    c0001647 <dlmemalign+0x5f>
c0001642:	83 e0 f8             	and    eax,0xfffffff8
c0001645:	89 c5                	mov    ebp,eax
c0001647:	83 ec 0c             	sub    esp,0xc
c000164a:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000164e:	50                   	push   eax
c000164f:	e8 a2 f8 ff ff       	call   c0000ef6 <dlmalloc>
c0001654:	83 c4 10             	add    esp,0x10
c0001657:	89 c1                	mov    ecx,eax
c0001659:	85 c0                	test   eax,eax
c000165b:	74 d1                	je     c000162e <dlmemalign+0x46>
c000165d:	31 d2                	xor    edx,edx
c000165f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001662:	f7 f7                	div    edi
c0001664:	85 d2                	test   edx,edx
c0001666:	74 62                	je     c00016ca <dlmemalign+0xe2>
c0001668:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000166c:	89 f8                	mov    eax,edi
c000166e:	f7 d8                	neg    eax
c0001670:	21 c3                	and    ebx,eax
c0001672:	83 eb 08             	sub    ebx,0x8
c0001675:	89 d8                	mov    eax,ebx
c0001677:	29 f0                	sub    eax,esi
c0001679:	83 f8 0f             	cmp    eax,0xf
c000167c:	77 02                	ja     c0001680 <dlmemalign+0x98>
c000167e:	01 fb                	add    ebx,edi
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	89 c6                	mov    esi,eax
c0001686:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001689:	89 c2                	mov    edx,eax
c000168b:	83 e2 fc             	and    edx,0xfffffffc
c000168e:	29 f2                	sub    edx,esi
c0001690:	a8 02                	test   al,0x2
c0001692:	74 10                	je     c00016a4 <dlmemalign+0xbc>
c0001694:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001697:	83 ca 02             	or     edx,0x2
c000169a:	8d 43 08             	lea    eax,[ebx+0x8]
c000169d:	89 33                	mov    DWORD PTR [ebx],esi
c000169f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a2:	eb 5f                	jmp    c0001703 <dlmemalign+0x11b>
c00016a4:	83 ec 0c             	sub    esp,0xc
c00016a7:	89 d0                	mov    eax,edx
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016af:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b7:	83 e0 01             	and    eax,0x1
c00016ba:	09 f0                	or     eax,esi
c00016bc:	89 de                	mov    esi,ebx
c00016be:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c1:	51                   	push   ecx
c00016c2:	e8 d4 f4 ff ff       	call   c0000b9b <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016cd:	a8 02                	test   al,0x2
c00016cf:	75 2f                	jne    c0001700 <dlmemalign+0x118>
c00016d1:	83 e0 fc             	and    eax,0xfffffffc
c00016d4:	8d 55 10             	lea    edx,[ebp+0x10]
c00016d7:	39 c2                	cmp    edx,eax
c00016d9:	73 25                	jae    c0001700 <dlmemalign+0x118>
c00016db:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016de:	83 ec 0c             	sub    esp,0xc
c00016e1:	29 e8                	sub    eax,ebp
c00016e3:	83 c2 08             	add    edx,0x8
c00016e6:	83 c8 01             	or     eax,0x1
c00016e9:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ef:	83 e0 01             	and    eax,0x1
c00016f2:	09 c5                	or     ebp,eax
c00016f4:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016f7:	52                   	push   edx
c00016f8:	e8 9e f4 ff ff       	call   c0000b9b <dlfree>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	8d 46 08             	lea    eax,[esi+0x8]
c0001703:	83 c4 0c             	add    esp,0xc
c0001706:	5b                   	pop    ebx
c0001707:	5e                   	pop    esi
c0001708:	5f                   	pop    edi
c0001709:	5d                   	pop    ebp
c000170a:	c3                   	ret    

c000170b <dlcalloc>:
c000170b:	53                   	push   ebx
c000170c:	83 ec 14             	sub    esp,0x14
c000170f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001713:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001718:	50                   	push   eax
c0001719:	e8 d8 f7 ff ff       	call   c0000ef6 <dlmalloc>
c000171e:	83 c4 10             	add    esp,0x10
c0001721:	89 c3                	mov    ebx,eax
c0001723:	85 c0                	test   eax,eax
c0001725:	74 77                	je     c000179e <dlcalloc+0x93>
c0001727:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172a:	89 d0                	mov    eax,edx
c000172c:	83 e0 fc             	and    eax,0xfffffffc
c000172f:	80 e2 02             	and    dl,0x2
c0001732:	75 5a                	jne    c000178e <dlcalloc+0x83>
c0001734:	83 e8 04             	sub    eax,0x4
c0001737:	83 f8 27             	cmp    eax,0x27
c000173a:	76 03                	jbe    c000173f <dlcalloc+0x34>
c000173c:	51                   	push   ecx
c000173d:	eb 53                	jmp    c0001792 <dlcalloc+0x87>
c000173f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001745:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000174c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001753:	83 f8 13             	cmp    eax,0x13
c0001756:	76 46                	jbe    c000179e <dlcalloc+0x93>
c0001758:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000175f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001766:	83 f8 1b             	cmp    eax,0x1b
c0001769:	76 33                	jbe    c000179e <dlcalloc+0x93>
c000176b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001772:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001779:	83 f8 23             	cmp    eax,0x23
c000177c:	76 20                	jbe    c000179e <dlcalloc+0x93>
c000177e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001785:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000178c:	eb 10                	jmp    c000179e <dlcalloc+0x93>
c000178e:	83 e8 08             	sub    eax,0x8
c0001791:	52                   	push   edx
c0001792:	50                   	push   eax
c0001793:	6a 00                	push   0x0
c0001795:	53                   	push   ebx
c0001796:	e8 1f ef ff ff       	call   c00006ba <memset>
c000179b:	83 c4 10             	add    esp,0x10
c000179e:	89 d8                	mov    eax,ebx
c00017a0:	83 c4 08             	add    esp,0x8
c00017a3:	5b                   	pop    ebx
c00017a4:	c3                   	ret    

c00017a5 <dlcfree>:
c00017a5:	e9 f1 f3 ff ff       	jmp    c0000b9b <dlfree>

c00017aa <dlindependent_calloc>:
c00017aa:	83 ec 28             	sub    esp,0x28
c00017ad:	b9 03 00 00 00       	mov    ecx,0x3
c00017b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c6:	e8 b9 fa ff ff       	call   c0001284 <iALLOc>
c00017cb:	83 c4 2c             	add    esp,0x2c
c00017ce:	c3                   	ret    

c00017cf <dlindependent_comalloc>:
c00017cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017d7:	31 c9                	xor    ecx,ecx
c00017d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e1:	e9 9e fa ff ff       	jmp    c0001284 <iALLOc>

c00017e6 <dlvalloc>:
c00017e6:	83 ec 0c             	sub    esp,0xc
c00017e9:	83 3d 60 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f60,0x0
c00017f0:	75 0a                	jne    c00017fc <dlvalloc+0x16>
c00017f2:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00017f7:	e8 b8 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c00017fc:	50                   	push   eax
c00017fd:	50                   	push   eax
c00017fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001802:	ff 35 bc 42 02 c0    	push   DWORD PTR ds:0xc00242bc
c0001808:	e8 db fd ff ff       	call   c00015e8 <dlmemalign>
c000180d:	83 c4 1c             	add    esp,0x1c
c0001810:	c3                   	ret    

c0001811 <dlpvalloc>:
c0001811:	83 ec 0c             	sub    esp,0xc
c0001814:	83 3d 60 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f60,0x0
c000181b:	75 0a                	jne    c0001827 <dlpvalloc+0x16>
c000181d:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0001822:	e8 8d f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001827:	a1 bc 42 02 c0       	mov    eax,ds:0xc00242bc
c000182c:	89 c1                	mov    ecx,eax
c000182e:	52                   	push   edx
c000182f:	f7 d9                	neg    ecx
c0001831:	52                   	push   edx
c0001832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001836:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183a:	21 ca                	and    edx,ecx
c000183c:	52                   	push   edx
c000183d:	50                   	push   eax
c000183e:	e8 a5 fd ff ff       	call   c00015e8 <dlmemalign>
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	c3                   	ret    

c0001847 <dlmalloc_trim>:
c0001847:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c000184c:	e8 63 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001851:	31 c0                	xor    eax,eax
c0001853:	c3                   	ret    

c0001854 <dlmalloc_usable_size>:
c0001854:	53                   	push   ebx
c0001855:	31 c0                	xor    eax,eax
c0001857:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000185b:	85 c9                	test   ecx,ecx
c000185d:	74 24                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000185f:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001862:	f6 c2 02             	test   dl,0x2
c0001865:	74 08                	je     c000186f <dlmalloc_usable_size+0x1b>
c0001867:	83 e2 fc             	and    edx,0xfffffffc
c000186a:	8d 42 f8             	lea    eax,[edx-0x8]
c000186d:	eb 14                	jmp    c0001883 <dlmalloc_usable_size+0x2f>
c000186f:	89 d3                	mov    ebx,edx
c0001871:	31 c0                	xor    eax,eax
c0001873:	83 e3 fe             	and    ebx,0xfffffffe
c0001876:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000187b:	74 06                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000187d:	83 e2 fc             	and    edx,0xfffffffc
c0001880:	8d 42 fc             	lea    eax,[edx-0x4]
c0001883:	5b                   	pop    ebx
c0001884:	c3                   	ret    

c0001885 <dlmallinfo>:
c0001885:	55                   	push   ebp
c0001886:	57                   	push   edi
c0001887:	56                   	push   esi
c0001888:	53                   	push   ebx
c0001889:	83 ec 08             	sub    esp,0x8
c000188c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001890:	83 3d 8c 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f8c,0x0
c0001897:	75 0a                	jne    c00018a3 <dlmallinfo+0x1e>
c0001899:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c000189e:	e8 11 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c00018a3:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c00018a8:	31 ed                	xor    ebp,ebp
c00018aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018ad:	31 c9                	xor    ecx,ecx
c00018af:	83 e0 fc             	and    eax,0xfffffffc
c00018b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018b6:	31 c0                	xor    eax,eax
c00018b8:	8b 14 85 64 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc09c]
c00018bf:	85 d2                	test   edx,edx
c00018c1:	74 0e                	je     c00018d1 <dlmallinfo+0x4c>
c00018c3:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018c6:	45                   	inc    ebp
c00018c7:	83 e6 fc             	and    esi,0xfffffffc
c00018ca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018cd:	01 f1                	add    ecx,esi
c00018cf:	eb ee                	jmp    c00018bf <dlmallinfo+0x3a>
c00018d1:	40                   	inc    eax
c00018d2:	83 f8 0a             	cmp    eax,0xa
c00018d5:	75 e1                	jne    c00018b8 <dlmallinfo+0x33>
c00018d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018e5:	b8 94 3f 02 c0       	mov    eax,0xc0023f94
c00018ea:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ed:	39 f0                	cmp    eax,esi
c00018ef:	74 10                	je     c0001901 <dlmallinfo+0x7c>
c00018f1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f4:	ff 04 24             	inc    DWORD PTR [esp]
c00018f7:	83 e7 fc             	and    edi,0xfffffffc
c00018fa:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018fd:	01 fa                	add    edx,edi
c00018ff:	eb ec                	jmp    c00018ed <dlmallinfo+0x68>
c0001901:	83 c0 08             	add    eax,0x8
c0001904:	3d 8c 42 02 c0       	cmp    eax,0xc002428c
c0001909:	75 df                	jne    c00018ea <dlmallinfo+0x65>
c000190b:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000190e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001911:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001914:	a1 c8 42 02 c0       	mov    eax,ds:0xc00242c8
c0001919:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000191c:	89 03                	mov    DWORD PTR [ebx],eax
c000191e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001921:	8b 35 b0 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242b0
c0001927:	29 d0                	sub    eax,edx
c0001929:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000192c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192f:	8b 35 c4 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242c4
c0001935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001939:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000193c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000193f:	8b 35 d4 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242d4
c0001945:	89 d8                	mov    eax,ebx
c0001947:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000194a:	83 c4 08             	add    esp,0x8
c000194d:	5b                   	pop    ebx
c000194e:	5e                   	pop    esi
c000194f:	5f                   	pop    edi
c0001950:	5d                   	pop    ebp
c0001951:	c2 04 00             	ret    0x4

c0001954 <dlmalloc_stats>:
c0001954:	83 ec 30             	sub    esp,0x30
c0001957:	8d 44 24 08          	lea    eax,[esp+0x8]
c000195b:	50                   	push   eax
c000195c:	e8 24 ff ff ff       	call   c0001885 <dlmallinfo>
c0001961:	83 c4 30             	add    esp,0x30
c0001964:	c3                   	ret    

c0001965 <dlmallopt>:
c0001965:	56                   	push   esi
c0001966:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c000196b:	53                   	push   ebx
c000196c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001974:	e8 3b f1 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001979:	8d 46 04             	lea    eax,[esi+0x4]
c000197c:	83 f8 05             	cmp    eax,0x5
c000197f:	77 67                	ja     c00019e8 <dlmallopt+0x83>
c0001981:	ff 24 85 c4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff3c]
c0001988:	83 fb 50             	cmp    ebx,0x50
c000198b:	77 5b                	ja     c00019e8 <dlmallopt+0x83>
c000198d:	ba 08 00 00 00       	mov    edx,0x8
c0001992:	85 db                	test   ebx,ebx
c0001994:	74 12                	je     c00019a8 <dlmallopt+0x43>
c0001996:	83 c3 0b             	add    ebx,0xb
c0001999:	ba 10 00 00 00       	mov    edx,0x10
c000199e:	83 fb 0f             	cmp    ebx,0xf
c00019a1:	76 05                	jbe    c00019a8 <dlmallopt+0x43>
c00019a3:	89 da                	mov    edx,ebx
c00019a5:	83 e2 f8             	and    edx,0xfffffff8
c00019a8:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c00019ad:	83 e0 03             	and    eax,0x3
c00019b0:	09 d0                	or     eax,edx
c00019b2:	a3 60 3f 02 c0       	mov    ds:0xc0023f60,eax
c00019b7:	eb 31                	jmp    c00019ea <dlmallopt+0x85>
c00019b9:	89 1d a4 42 02 c0    	mov    DWORD PTR ds:0xc00242a4,ebx
c00019bf:	eb 06                	jmp    c00019c7 <dlmallopt+0x62>
c00019c1:	89 1d a8 42 02 c0    	mov    DWORD PTR ds:0xc00242a8,ebx
c00019c7:	be 01 00 00 00       	mov    esi,0x1
c00019cc:	eb 1c                	jmp    c00019ea <dlmallopt+0x85>
c00019ce:	89 1d ac 42 02 c0    	mov    DWORD PTR ds:0xc00242ac,ebx
c00019d4:	eb f1                	jmp    c00019c7 <dlmallopt+0x62>
c00019d6:	31 f6                	xor    esi,esi
c00019d8:	85 db                	test   ebx,ebx
c00019da:	75 0e                	jne    c00019ea <dlmallopt+0x85>
c00019dc:	c7 05 b4 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242b4,0x0
c00019e6:	eb df                	jmp    c00019c7 <dlmallopt+0x62>
c00019e8:	31 f6                	xor    esi,esi
c00019ea:	89 f0                	mov    eax,esi
c00019ec:	5b                   	pop    ebx
c00019ed:	5e                   	pop    esi
c00019ee:	c3                   	ret    

c00019ef <disk_status>:
c00019ef:	31 c0                	xor    eax,eax
c00019f1:	c3                   	ret    

c00019f2 <disk_initialize>:
c00019f2:	31 c0                	xor    eax,eax
c00019f4:	c3                   	ret    

c00019f5 <disk_read>:
c00019f5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019fa:	0f b6 04 85 80 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda780]
c0001a02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a06:	e9 71 8b 01 00       	jmp    c001a57c <fatWrapperReadDisk>

c0001a0b <disk_write>:
c0001a0b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a10:	0f b6 04 85 80 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda780]
c0001a18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1c:	e9 a2 8b 01 00       	jmp    c001a5c3 <fatWrapperWriteDisk>

c0001a21 <disk_ioctl>:
c0001a21:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2f:	0f b6 04 85 80 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda780]
c0001a37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a3b:	e9 ca 8b 01 00       	jmp    c001a60a <fatWrapperIoctl>

c0001a40 <ld_word>:
c0001a40:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a47:	c1 e2 08             	shl    edx,0x8
c0001a4a:	09 d0                	or     eax,edx
c0001a4c:	c3                   	ret    

c0001a4d <ld_dword>:
c0001a4d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a51:	89 d1                	mov    ecx,edx
c0001a53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a57:	c1 e1 08             	shl    ecx,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	09 ca                	or     edx,ecx
c0001a5f:	c1 e2 08             	shl    edx,0x8
c0001a62:	09 d0                	or     eax,edx
c0001a64:	c3                   	ret    

c0001a65 <ld_qword>:
c0001a65:	57                   	push   edi
c0001a66:	56                   	push   esi
c0001a67:	53                   	push   ebx
c0001a68:	31 db                	xor    ebx,ebx
c0001a6a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a6d:	89 df                	mov    edi,ebx
c0001a6f:	89 ce                	mov    esi,ecx
c0001a71:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a75:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a79:	c1 e6 08             	shl    esi,0x8
c0001a7c:	09 f2                	or     edx,esi
c0001a7e:	89 d6                	mov    esi,edx
c0001a80:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a84:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a88:	c1 e6 08             	shl    esi,0x8
c0001a8b:	09 f2                	or     edx,esi
c0001a8d:	89 d6                	mov    esi,edx
c0001a8f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a93:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a97:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a9a:	c1 e6 08             	shl    esi,0x8
c0001a9d:	89 fb                	mov    ebx,edi
c0001a9f:	09 f2                	or     edx,esi
c0001aa1:	89 d1                	mov    ecx,edx
c0001aa3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa7:	c1 e1 08             	shl    ecx,0x8
c0001aaa:	89 da                	mov    edx,ebx
c0001aac:	09 c8                	or     eax,ecx
c0001aae:	5b                   	pop    ebx
c0001aaf:	5e                   	pop    esi
c0001ab0:	5f                   	pop    edi
c0001ab1:	c3                   	ret    

c0001ab2 <st_word>:
c0001ab2:	66 89 10             	mov    WORD PTR [eax],dx
c0001ab5:	c3                   	ret    

c0001ab6 <st_dword>:
c0001ab6:	89 10                	mov    DWORD PTR [eax],edx
c0001ab8:	c3                   	ret    

c0001ab9 <st_qword>:
c0001ab9:	89 10                	mov    DWORD PTR [eax],edx
c0001abb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001abe:	c3                   	ret    

c0001abf <mem_cpy>:
c0001abf:	85 c9                	test   ecx,ecx
c0001ac1:	74 10                	je     c0001ad3 <mem_cpy+0x14>
c0001ac3:	57                   	push   edi
c0001ac4:	01 c1                	add    ecx,eax
c0001ac6:	56                   	push   esi
c0001ac7:	89 c7                	mov    edi,eax
c0001ac9:	89 d6                	mov    esi,edx
c0001acb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001acc:	39 f9                	cmp    ecx,edi
c0001ace:	75 fb                	jne    c0001acb <mem_cpy+0xc>
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    
c0001ad3:	c3                   	ret    

c0001ad4 <mem_set>:
c0001ad4:	01 c1                	add    ecx,eax
c0001ad6:	40                   	inc    eax
c0001ad7:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ada:	39 c8                	cmp    eax,ecx
c0001adc:	75 f8                	jne    c0001ad6 <mem_set+0x2>
c0001ade:	c3                   	ret    

c0001adf <mem_cmp>:
c0001adf:	57                   	push   edi
c0001ae0:	56                   	push   esi
c0001ae1:	89 c6                	mov    esi,eax
c0001ae3:	53                   	push   ebx
c0001ae4:	46                   	inc    esi
c0001ae5:	42                   	inc    edx
c0001ae6:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aea:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aee:	29 fb                	sub    ebx,edi
c0001af0:	89 cf                	mov    edi,ecx
c0001af2:	29 f7                	sub    edi,esi
c0001af4:	01 c7                	add    edi,eax
c0001af6:	74 04                	je     c0001afc <mem_cmp+0x1d>
c0001af8:	85 db                	test   ebx,ebx
c0001afa:	74 e8                	je     c0001ae4 <mem_cmp+0x5>
c0001afc:	89 d8                	mov    eax,ebx
c0001afe:	5b                   	pop    ebx
c0001aff:	5e                   	pop    esi
c0001b00:	5f                   	pop    edi
c0001b01:	c3                   	ret    

c0001b02 <chk_chr>:
c0001b02:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b05:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b08:	74 07                	je     c0001b11 <chk_chr+0xf>
c0001b0a:	39 d1                	cmp    ecx,edx
c0001b0c:	74 03                	je     c0001b11 <chk_chr+0xf>
c0001b0e:	40                   	inc    eax
c0001b0f:	eb f1                	jmp    c0001b02 <chk_chr>
c0001b11:	89 c8                	mov    eax,ecx
c0001b13:	c3                   	ret    

c0001b14 <dbc_1st>:
c0001b14:	31 c0                	xor    eax,eax
c0001b16:	c3                   	ret    

c0001b17 <dbc_2nd>:
c0001b17:	31 c0                	xor    eax,eax
c0001b19:	c3                   	ret    

c0001b1a <tchar2uni>:
c0001b1a:	57                   	push   edi
c0001b1b:	89 c7                	mov    edi,eax
c0001b1d:	56                   	push   esi
c0001b1e:	53                   	push   ebx
c0001b1f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b21:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b23:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b26:	84 c9                	test   cl,cl
c0001b28:	78 0a                	js     c0001b34 <tchar2uni+0x1a>
c0001b2a:	0f b6 d1             	movzx  edx,cl
c0001b2d:	89 f3                	mov    ebx,esi
c0001b2f:	e9 9f 00 00 00       	jmp    c0001bd3 <tchar2uni+0xb9>
c0001b34:	88 ca                	mov    dl,cl
c0001b36:	83 e2 e0             	and    edx,0xffffffe0
c0001b39:	80 fa c0             	cmp    dl,0xc0
c0001b3c:	75 0c                	jne    c0001b4a <tchar2uni+0x30>
c0001b3e:	89 ca                	mov    edx,ecx
c0001b40:	b9 01 00 00 00       	mov    ecx,0x1
c0001b45:	83 e2 1f             	and    edx,0x1f
c0001b48:	eb 2e                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b4a:	88 ca                	mov    dl,cl
c0001b4c:	83 e2 f0             	and    edx,0xfffffff0
c0001b4f:	80 fa e0             	cmp    dl,0xe0
c0001b52:	75 0c                	jne    c0001b60 <tchar2uni+0x46>
c0001b54:	89 ca                	mov    edx,ecx
c0001b56:	b9 02 00 00 00       	mov    ecx,0x2
c0001b5b:	83 e2 0f             	and    edx,0xf
c0001b5e:	eb 18                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 f8             	and    edx,0xfffffff8
c0001b65:	88 d0                	mov    al,dl
c0001b67:	83 ca ff             	or     edx,0xffffffff
c0001b6a:	3c f0                	cmp    al,0xf0
c0001b6c:	75 6c                	jne    c0001bda <tchar2uni+0xc0>
c0001b6e:	89 ca                	mov    edx,ecx
c0001b70:	b9 03 00 00 00       	mov    ecx,0x3
c0001b75:	83 e2 07             	and    edx,0x7
c0001b78:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b7c:	46                   	inc    esi
c0001b7d:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b80:	88 c8                	mov    al,cl
c0001b82:	83 e0 c0             	and    eax,0xffffffc0
c0001b85:	3c 80                	cmp    al,0x80
c0001b87:	75 4e                	jne    c0001bd7 <tchar2uni+0xbd>
c0001b89:	c1 e2 06             	shl    edx,0x6
c0001b8c:	83 e1 3f             	and    ecx,0x3f
c0001b8f:	09 ca                	or     edx,ecx
c0001b91:	39 de                	cmp    esi,ebx
c0001b93:	75 e7                	jne    c0001b7c <tchar2uni+0x62>
c0001b95:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b98:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b9e:	77 37                	ja     c0001bd7 <tchar2uni+0xbd>
c0001ba0:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bac:	76 29                	jbe    c0001bd7 <tchar2uni+0xbd>
c0001bae:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb4:	76 1d                	jbe    c0001bd3 <tchar2uni+0xb9>
c0001bb6:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bbc:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc2:	c1 e1 06             	shl    ecx,0x6
c0001bc5:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bcb:	09 ca                	or     edx,ecx
c0001bcd:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd3:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bd5:	eb 03                	jmp    c0001bda <tchar2uni+0xc0>
c0001bd7:	83 ca ff             	or     edx,0xffffffff
c0001bda:	5b                   	pop    ebx
c0001bdb:	89 d0                	mov    eax,edx
c0001bdd:	5e                   	pop    esi
c0001bde:	5f                   	pop    edi
c0001bdf:	c3                   	ret    

c0001be0 <put_utf>:
c0001be0:	53                   	push   ebx
c0001be1:	83 f8 7f             	cmp    eax,0x7f
c0001be4:	89 c3                	mov    ebx,eax
c0001be6:	b0 00                	mov    al,0x0
c0001be8:	77 11                	ja     c0001bfb <put_utf+0x1b>
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	0f 84 e5 00 00 00    	je     c0001cd7 <put_utf+0xf7>
c0001bf2:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf4:	b0 01                	mov    al,0x1
c0001bf6:	e9 dc 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001bfb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c01:	77 23                	ja     c0001c26 <put_utf+0x46>
c0001c03:	83 f9 01             	cmp    ecx,0x1
c0001c06:	0f 86 cb 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	83 e3 3f             	and    ebx,0x3f
c0001c11:	c1 e8 06             	shr    eax,0x6
c0001c14:	83 cb 80             	or     ebx,0xffffff80
c0001c17:	83 c8 c0             	or     eax,0xffffffc0
c0001c1a:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c1d:	88 02                	mov    BYTE PTR [edx],al
c0001c1f:	b0 02                	mov    al,0x2
c0001c21:	e9 b1 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001c26:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c2c:	77 40                	ja     c0001c6e <put_utf+0x8e>
c0001c2e:	83 f9 02             	cmp    ecx,0x2
c0001c31:	0f 86 a0 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c37:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c3d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c43:	0f 86 8e 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c49:	89 d8                	mov    eax,ebx
c0001c4b:	c1 e8 0c             	shr    eax,0xc
c0001c4e:	83 c8 e0             	or     eax,0xffffffe0
c0001c51:	88 02                	mov    BYTE PTR [edx],al
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	83 e3 3f             	and    ebx,0x3f
c0001c58:	c1 e8 06             	shr    eax,0x6
c0001c5b:	83 cb 80             	or     ebx,0xffffff80
c0001c5e:	83 e0 3f             	and    eax,0x3f
c0001c61:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c64:	83 c8 80             	or     eax,0xffffff80
c0001c67:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6a:	b0 03                	mov    al,0x3
c0001c6c:	eb 69                	jmp    c0001cd7 <put_utf+0xf7>
c0001c6e:	83 f9 03             	cmp    ecx,0x3
c0001c71:	76 64                	jbe    c0001cd7 <put_utf+0xf7>
c0001c73:	89 d9                	mov    ecx,ebx
c0001c75:	0f b7 c3             	movzx  eax,bx
c0001c78:	66 31 c9             	xor    cx,cx
c0001c7b:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c81:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c87:	c1 e9 06             	shr    ecx,0x6
c0001c8a:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c90:	77 43                	ja     c0001cd5 <put_utf+0xf5>
c0001c92:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c98:	77 3b                	ja     c0001cd5 <put_utf+0xf5>
c0001c9a:	09 cb                	or     ebx,ecx
c0001c9c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca2:	89 d8                	mov    eax,ebx
c0001ca4:	c1 e8 12             	shr    eax,0x12
c0001ca7:	83 c8 f0             	or     eax,0xfffffff0
c0001caa:	88 02                	mov    BYTE PTR [edx],al
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 0c             	shr    eax,0xc
c0001cb1:	83 e0 3f             	and    eax,0x3f
c0001cb4:	83 c8 80             	or     eax,0xffffff80
c0001cb7:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cba:	89 d8                	mov    eax,ebx
c0001cbc:	83 e3 3f             	and    ebx,0x3f
c0001cbf:	c1 e8 06             	shr    eax,0x6
c0001cc2:	83 cb 80             	or     ebx,0xffffff80
c0001cc5:	83 e0 3f             	and    eax,0x3f
c0001cc8:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ccb:	83 c8 80             	or     eax,0xffffff80
c0001cce:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd1:	b0 04                	mov    al,0x4
c0001cd3:	eb 02                	jmp    c0001cd7 <put_utf+0xf7>
c0001cd5:	31 c0                	xor    eax,eax
c0001cd7:	5b                   	pop    ebx
c0001cd8:	c3                   	ret    

c0001cd9 <clst2sect>:
c0001cd9:	89 c1                	mov    ecx,eax
c0001cdb:	83 ea 02             	sub    edx,0x2
c0001cde:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce1:	83 e8 02             	sub    eax,0x2
c0001ce4:	39 d0                	cmp    eax,edx
c0001ce6:	76 0d                	jbe    c0001cf5 <clst2sect+0x1c>
c0001ce8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cec:	f7 e2                	mul    edx
c0001cee:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf1:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf4:	c3                   	ret    
c0001cf5:	31 c0                	xor    eax,eax
c0001cf7:	31 d2                	xor    edx,edx
c0001cf9:	c3                   	ret    

c0001cfa <clmt_clust>:
c0001cfa:	57                   	push   edi
c0001cfb:	89 cf                	mov    edi,ecx
c0001cfd:	56                   	push   esi
c0001cfe:	89 d6                	mov    esi,edx
c0001d00:	53                   	push   ebx
c0001d01:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d05:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d08:	89 f2                	mov    edx,esi
c0001d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0c:	c1 ef 09             	shr    edi,0x9
c0001d0f:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d13:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d16:	89 f9                	mov    ecx,edi
c0001d18:	31 ff                	xor    edi,edi
c0001d1a:	57                   	push   edi
c0001d1b:	56                   	push   esi
c0001d1c:	51                   	push   ecx
c0001d1d:	52                   	push   edx
c0001d1e:	e8 89 d4 01 00       	call   c001f1ac <__udivdi3>
c0001d23:	83 c4 10             	add    esp,0x10
c0001d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d28:	85 d2                	test   edx,edx
c0001d2a:	74 10                	je     c0001d3c <clmt_clust+0x42>
c0001d2c:	39 d0                	cmp    eax,edx
c0001d2e:	72 07                	jb     c0001d37 <clmt_clust+0x3d>
c0001d30:	29 d0                	sub    eax,edx
c0001d32:	83 c3 08             	add    ebx,0x8
c0001d35:	eb ef                	jmp    c0001d26 <clmt_clust+0x2c>
c0001d37:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3a:	89 c2                	mov    edx,eax
c0001d3c:	5b                   	pop    ebx
c0001d3d:	89 d0                	mov    eax,edx
c0001d3f:	5e                   	pop    esi
c0001d40:	5f                   	pop    edi
c0001d41:	c3                   	ret    

c0001d42 <pick_lfn>:
c0001d42:	55                   	push   ebp
c0001d43:	57                   	push   edi
c0001d44:	56                   	push   esi
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	53                   	push   ebx
c0001d48:	89 c3                	mov    ebx,eax
c0001d4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d4d:	e8 ee fc ff ff       	call   c0001a40 <ld_word>
c0001d52:	66 85 c0             	test   ax,ax
c0001d55:	74 04                	je     c0001d5b <pick_lfn+0x19>
c0001d57:	31 c0                	xor    eax,eax
c0001d59:	eb 5c                	jmp    c0001db7 <pick_lfn+0x75>
c0001d5b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d5e:	bd 01 00 00 00       	mov    ebp,0x1
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	31 ff                	xor    edi,edi
c0001d68:	49                   	dec    ecx
c0001d69:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d6c:	0f b6 87 e0 01 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfe20]
c0001d73:	01 f0                	add    eax,esi
c0001d75:	e8 c6 fc ff ff       	call   c0001a40 <ld_word>
c0001d7a:	66 85 ed             	test   bp,bp
c0001d7d:	74 11                	je     c0001d90 <pick_lfn+0x4e>
c0001d7f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d85:	77 d0                	ja     c0001d57 <pick_lfn+0x15>
c0001d87:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d8b:	89 c5                	mov    ebp,eax
c0001d8d:	41                   	inc    ecx
c0001d8e:	eb 04                	jmp    c0001d94 <pick_lfn+0x52>
c0001d90:	66 40                	inc    ax
c0001d92:	75 c3                	jne    c0001d57 <pick_lfn+0x15>
c0001d94:	47                   	inc    edi
c0001d95:	83 ff 0d             	cmp    edi,0xd
c0001d98:	75 d2                	jne    c0001d6c <pick_lfn+0x2a>
c0001d9a:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d9d:	74 13                	je     c0001db2 <pick_lfn+0x70>
c0001d9f:	66 85 ed             	test   bp,bp
c0001da2:	74 0e                	je     c0001db2 <pick_lfn+0x70>
c0001da4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daa:	77 ab                	ja     c0001d57 <pick_lfn+0x15>
c0001dac:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	5b                   	pop    ebx
c0001db8:	5e                   	pop    esi
c0001db9:	5f                   	pop    edi
c0001dba:	5d                   	pop    ebp
c0001dbb:	c3                   	ret    

c0001dbc <put_lfn>:
c0001dbc:	55                   	push   ebp
c0001dbd:	31 ed                	xor    ebp,ebp
c0001dbf:	57                   	push   edi
c0001dc0:	89 d7                	mov    edi,edx
c0001dc2:	56                   	push   esi
c0001dc3:	31 f6                	xor    esi,esi
c0001dc5:	53                   	push   ebx
c0001dc6:	83 ec 08             	sub    esp,0x8
c0001dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dcc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd4:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dda:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddd:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de0:	31 d2                	xor    edx,edx
c0001de2:	e8 cb fc ff ff       	call   c0001ab2 <st_word>
c0001de7:	0f b6 d9             	movzx  ebx,cl
c0001dea:	4b                   	dec    ebx
c0001deb:	6b db 0d             	imul   ebx,ebx,0xd
c0001dee:	66 83 fe ff          	cmp    si,0xffff
c0001df2:	74 08                	je     c0001dfc <put_lfn+0x40>
c0001df4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df7:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dfb:	43                   	inc    ebx
c0001dfc:	0f b6 85 e0 01 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfe20]
c0001e03:	0f b7 d6             	movzx  edx,si
c0001e06:	01 f8                	add    eax,edi
c0001e08:	e8 a5 fc ff ff       	call   c0001ab2 <st_word>
c0001e0d:	66 85 f6             	test   si,si
c0001e10:	75 03                	jne    c0001e15 <put_lfn+0x59>
c0001e12:	83 ce ff             	or     esi,0xffffffff
c0001e15:	45                   	inc    ebp
c0001e16:	83 fd 0d             	cmp    ebp,0xd
c0001e19:	75 d3                	jne    c0001dee <put_lfn+0x32>
c0001e1b:	66 46                	inc    si
c0001e1d:	74 0a                	je     c0001e29 <put_lfn+0x6d>
c0001e1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e22:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e27:	75 09                	jne    c0001e32 <put_lfn+0x76>
c0001e29:	88 c8                	mov    al,cl
c0001e2b:	83 c8 40             	or     eax,0x40
c0001e2e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e32:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e36:	88 07                	mov    BYTE PTR [edi],al
c0001e38:	83 c4 08             	add    esp,0x8
c0001e3b:	5b                   	pop    ebx
c0001e3c:	5e                   	pop    esi
c0001e3d:	5f                   	pop    edi
c0001e3e:	5d                   	pop    ebp
c0001e3f:	c3                   	ret    

c0001e40 <gen_numname>:
c0001e40:	57                   	push   edi
c0001e41:	89 cf                	mov    edi,ecx
c0001e43:	56                   	push   esi
c0001e44:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e49:	53                   	push   ebx
c0001e4a:	89 c6                	mov    esi,eax
c0001e4c:	83 ec 10             	sub    esp,0x10
c0001e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e53:	e8 67 fc ff ff       	call   c0001abf <mem_cpy>
c0001e58:	83 fb 05             	cmp    ebx,0x5
c0001e5b:	76 2d                	jbe    c0001e8a <gen_numname+0x4a>
c0001e5d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e60:	66 85 c0             	test   ax,ax
c0001e63:	74 25                	je     c0001e8a <gen_numname+0x4a>
c0001e65:	83 c7 02             	add    edi,0x2
c0001e68:	ba 10 00 00 00       	mov    edx,0x10
c0001e6d:	01 db                	add    ebx,ebx
c0001e6f:	89 c1                	mov    ecx,eax
c0001e71:	66 d1 e8             	shr    ax,1
c0001e74:	83 e1 01             	and    ecx,0x1
c0001e77:	01 cb                	add    ebx,ecx
c0001e79:	0f ba e3 10          	bt     ebx,0x10
c0001e7d:	73 06                	jae    c0001e85 <gen_numname+0x45>
c0001e7f:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e85:	4a                   	dec    edx
c0001e86:	75 e5                	jne    c0001e6d <gen_numname+0x2d>
c0001e88:	eb d3                	jmp    c0001e5d <gen_numname+0x1d>
c0001e8a:	b8 07 00 00 00       	mov    eax,0x7
c0001e8f:	88 d9                	mov    cl,bl
c0001e91:	83 e1 0f             	and    ecx,0xf
c0001e94:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e97:	80 fa 39             	cmp    dl,0x39
c0001e9a:	76 03                	jbe    c0001e9f <gen_numname+0x5f>
c0001e9c:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e9f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ea6:	89 da                	mov    edx,ebx
c0001ea8:	c1 ea 04             	shr    edx,0x4
c0001eab:	83 fb 0f             	cmp    ebx,0xf
c0001eae:	76 06                	jbe    c0001eb6 <gen_numname+0x76>
c0001eb0:	89 c8                	mov    eax,ecx
c0001eb2:	89 d3                	mov    ebx,edx
c0001eb4:	eb d9                	jmp    c0001e8f <gen_numname+0x4f>
c0001eb6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ebb:	31 d2                	xor    edx,edx
c0001ebd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec0:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec3:	39 ca                	cmp    edx,ecx
c0001ec5:	73 18                	jae    c0001edf <gen_numname+0x9f>
c0001ec7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eca:	3c 20                	cmp    al,0x20
c0001ecc:	74 11                	je     c0001edf <gen_numname+0x9f>
c0001ece:	e8 41 fc ff ff       	call   c0001b14 <dbc_1st>
c0001ed3:	85 c0                	test   eax,eax
c0001ed5:	74 05                	je     c0001edc <gen_numname+0x9c>
c0001ed7:	39 d3                	cmp    ebx,edx
c0001ed9:	74 04                	je     c0001edf <gen_numname+0x9f>
c0001edb:	42                   	inc    edx
c0001edc:	42                   	inc    edx
c0001edd:	eb e1                	jmp    c0001ec0 <gen_numname+0x80>
c0001edf:	b0 20                	mov    al,0x20
c0001ee1:	83 f9 07             	cmp    ecx,0x7
c0001ee4:	77 05                	ja     c0001eeb <gen_numname+0xab>
c0001ee6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eea:	41                   	inc    ecx
c0001eeb:	42                   	inc    edx
c0001eec:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef0:	83 fa 07             	cmp    edx,0x7
c0001ef3:	76 ea                	jbe    c0001edf <gen_numname+0x9f>
c0001ef5:	83 c4 10             	add    esp,0x10
c0001ef8:	5b                   	pop    ebx
c0001ef9:	5e                   	pop    esi
c0001efa:	5f                   	pop    edi
c0001efb:	c3                   	ret    

c0001efc <sum_sfn>:
c0001efc:	31 c9                	xor    ecx,ecx
c0001efe:	31 d2                	xor    edx,edx
c0001f00:	d0 ca                	ror    dl,1
c0001f02:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f05:	41                   	inc    ecx
c0001f06:	83 f9 0b             	cmp    ecx,0xb
c0001f09:	75 f5                	jne    c0001f00 <sum_sfn+0x4>
c0001f0b:	88 d0                	mov    al,dl
c0001f0d:	c3                   	ret    

c0001f0e <xdir_sum>:
c0001f0e:	56                   	push   esi
c0001f0f:	31 c9                	xor    ecx,ecx
c0001f11:	53                   	push   ebx
c0001f12:	31 d2                	xor    edx,edx
c0001f14:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f18:	43                   	inc    ebx
c0001f19:	c1 e3 05             	shl    ebx,0x5
c0001f1c:	83 fa 02             	cmp    edx,0x2
c0001f1f:	74 0b                	je     c0001f2c <xdir_sum+0x1e>
c0001f21:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f25:	66 d1 c9             	ror    cx,1
c0001f28:	01 f1                	add    ecx,esi
c0001f2a:	eb 05                	jmp    c0001f31 <xdir_sum+0x23>
c0001f2c:	ba 03 00 00 00       	mov    edx,0x3
c0001f31:	42                   	inc    edx
c0001f32:	39 d3                	cmp    ebx,edx
c0001f34:	77 e6                	ja     c0001f1c <xdir_sum+0xe>
c0001f36:	89 c8                	mov    eax,ecx
c0001f38:	5b                   	pop    ebx
c0001f39:	5e                   	pop    esi
c0001f3a:	c3                   	ret    

c0001f3b <xsum32>:
c0001f3b:	d1 ca                	ror    edx,1
c0001f3d:	0f b6 c0             	movzx  eax,al
c0001f40:	01 d0                	add    eax,edx
c0001f42:	c3                   	ret    

c0001f43 <get_xfileinfo>:
c0001f43:	55                   	push   ebp
c0001f44:	31 c9                	xor    ecx,ecx
c0001f46:	57                   	push   edi
c0001f47:	bd 40 00 00 00       	mov    ebp,0x40
c0001f4c:	56                   	push   esi
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	53                   	push   ebx
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	83 ec 0c             	sub    esp,0xc
c0001f55:	89 d3                	mov    ebx,edx
c0001f57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f5e:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f62:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f65:	76 6d                	jbe    c0001fd4 <get_xfileinfo+0x91>
c0001f67:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f6d:	76 0b                	jbe    c0001f7a <get_xfileinfo+0x37>
c0001f6f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f73:	bf 01 00 00 00       	mov    edi,0x1
c0001f78:	eb 63                	jmp    c0001fdd <get_xfileinfo+0x9a>
c0001f7a:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f80:	75 03                	jne    c0001f85 <get_xfileinfo+0x42>
c0001f82:	83 c5 02             	add    ebp,0x2
c0001f85:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f88:	83 c5 02             	add    ebp,0x2
c0001f8b:	e8 b0 fa ff ff       	call   c0001a40 <ld_word>
c0001f90:	ff 04 24             	inc    DWORD PTR [esp]
c0001f93:	66 85 c9             	test   cx,cx
c0001f96:	75 0d                	jne    c0001fa5 <get_xfileinfo+0x62>
c0001f98:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f9e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa3:	76 2b                	jbe    c0001fd0 <get_xfileinfo+0x8d>
c0001fa5:	c1 e1 10             	shl    ecx,0x10
c0001fa8:	ba ff 00 00 00       	mov    edx,0xff
c0001fad:	0f b7 c0             	movzx  eax,ax
c0001fb0:	29 fa                	sub    edx,edi
c0001fb2:	09 c8                	or     eax,ecx
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc0:	e8 1b fc ff ff       	call   c0001be0 <put_utf>
c0001fc5:	84 c0                	test   al,al
c0001fc7:	74 a6                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fc9:	0f b6 c0             	movzx  eax,al
c0001fcc:	01 c7                	add    edi,eax
c0001fce:	31 c0                	xor    eax,eax
c0001fd0:	89 c1                	mov    ecx,eax
c0001fd2:	eb 8a                	jmp    c0001f5e <get_xfileinfo+0x1b>
c0001fd4:	85 ff                	test   edi,edi
c0001fd6:	74 97                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fd8:	66 85 c9             	test   cx,cx
c0001fdb:	75 92                	jne    c0001f6f <get_xfileinfo+0x2c>
c0001fdd:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe2:	31 c0                	xor    eax,eax
c0001fe4:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fe8:	31 d2                	xor    edx,edx
c0001fea:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fed:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff0:	80 e1 10             	and    cl,0x10
c0001ff3:	75 08                	jne    c0001ffd <get_xfileinfo+0xba>
c0001ff5:	8d 46 38             	lea    eax,[esi+0x38]
c0001ff8:	e8 68 fa ff ff       	call   c0001a65 <ld_qword>
c0001ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0001fff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002002:	8d 46 0c             	lea    eax,[esi+0xc]
c0002005:	e8 36 fa ff ff       	call   c0001a40 <ld_word>
c000200a:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000200e:	8d 46 0e             	lea    eax,[esi+0xe]
c0002011:	e8 2a fa ff ff       	call   c0001a40 <ld_word>
c0002016:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201a:	83 c4 0c             	add    esp,0xc
c000201d:	5b                   	pop    ebx
c000201e:	5e                   	pop    esi
c000201f:	5f                   	pop    edi
c0002020:	5d                   	pop    ebp
c0002021:	c3                   	ret    

c0002022 <get_ldnumber>:
c0002022:	8b 10                	mov    edx,DWORD PTR [eax]
c0002024:	85 d2                	test   edx,edx
c0002026:	74 14                	je     c000203c <get_ldnumber+0x1a>
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	89 d3                	mov    ebx,edx
c000202c:	43                   	inc    ebx
c000202d:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002030:	80 f9 1f             	cmp    cl,0x1f
c0002033:	76 0d                	jbe    c0002042 <get_ldnumber+0x20>
c0002035:	80 f9 3a             	cmp    cl,0x3a
c0002038:	75 f2                	jne    c000202c <get_ldnumber+0xa>
c000203a:	eb 0a                	jmp    c0002046 <get_ldnumber+0x24>
c000203c:	83 c9 ff             	or     ecx,0xffffffff
c000203f:	89 c8                	mov    eax,ecx
c0002041:	c3                   	ret    
c0002042:	31 c9                	xor    ecx,ecx
c0002044:	eb 24                	jmp    c000206a <get_ldnumber+0x48>
c0002046:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002049:	8d 4e d0             	lea    ecx,[esi-0x30]
c000204c:	80 f9 09             	cmp    cl,0x9
c000204f:	77 16                	ja     c0002067 <get_ldnumber+0x45>
c0002051:	83 c2 02             	add    edx,0x2
c0002054:	83 c9 ff             	or     ecx,0xffffffff
c0002057:	39 d3                	cmp    ebx,edx
c0002059:	75 0f                	jne    c000206a <get_ldnumber+0x48>
c000205b:	89 f2                	mov    edx,esi
c000205d:	89 18                	mov    DWORD PTR [eax],ebx
c000205f:	0f be ca             	movsx  ecx,dl
c0002062:	83 e9 30             	sub    ecx,0x30
c0002065:	eb 03                	jmp    c000206a <get_ldnumber+0x48>
c0002067:	83 c9 ff             	or     ecx,0xffffffff
c000206a:	89 c8                	mov    eax,ecx
c000206c:	5b                   	pop    ebx
c000206d:	5e                   	pop    esi
c000206e:	c3                   	ret    

c000206f <crc32>:
c000206f:	56                   	push   esi
c0002070:	89 d6                	mov    esi,edx
c0002072:	53                   	push   ebx
c0002073:	b2 01                	mov    dl,0x1
c0002075:	bb 08 00 00 00       	mov    ebx,0x8
c000207a:	89 f1                	mov    ecx,esi
c000207c:	84 d1                	test   cl,dl
c000207e:	0f 95 c1             	setne  cl
c0002081:	0f b6 c9             	movzx  ecx,cl
c0002084:	31 c1                	xor    ecx,eax
c0002086:	89 c8                	mov    eax,ecx
c0002088:	d1 e8                	shr    eax,1
c000208a:	80 e1 01             	and    cl,0x1
c000208d:	74 05                	je     c0002094 <crc32+0x25>
c000208f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002094:	d1 e2                	shl    edx,1
c0002096:	4b                   	dec    ebx
c0002097:	75 e1                	jne    c000207a <crc32+0xb>
c0002099:	5b                   	pop    ebx
c000209a:	5e                   	pop    esi
c000209b:	c3                   	ret    

c000209c <test_gpt_header>:
c000209c:	55                   	push   ebp
c000209d:	b9 10 00 00 00       	mov    ecx,0x10
c00020a2:	57                   	push   edi
c00020a3:	ba e0 00 02 c0       	mov    edx,0xc00200e0
c00020a8:	56                   	push   esi
c00020a9:	31 ff                	xor    edi,edi
c00020ab:	53                   	push   ebx
c00020ac:	89 c3                	mov    ebx,eax
c00020ae:	e8 2c fa ff ff       	call   c0001adf <mem_cmp>
c00020b3:	85 c0                	test   eax,eax
c00020b5:	75 55                	jne    c000210c <test_gpt_header+0x70>
c00020b7:	89 c7                	mov    edi,eax
c00020b9:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020be:	83 ce ff             	or     esi,0xffffffff
c00020c1:	31 d2                	xor    edx,edx
c00020c3:	83 fd 03             	cmp    ebp,0x3
c00020c6:	76 05                	jbe    c00020cd <test_gpt_header+0x31>
c00020c8:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cd:	89 f0                	mov    eax,esi
c00020cf:	45                   	inc    ebp
c00020d0:	e8 9a ff ff ff       	call   c000206f <crc32>
c00020d5:	83 fd 4c             	cmp    ebp,0x4c
c00020d8:	89 c6                	mov    esi,eax
c00020da:	75 e5                	jne    c00020c1 <test_gpt_header+0x25>
c00020dc:	8d 43 10             	lea    eax,[ebx+0x10]
c00020df:	f7 d6                	not    esi
c00020e1:	e8 67 f9 ff ff       	call   c0001a4d <ld_dword>
c00020e6:	39 c6                	cmp    esi,eax
c00020e8:	75 22                	jne    c000210c <test_gpt_header+0x70>
c00020ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ed:	e8 5b f9 ff ff       	call   c0001a4d <ld_dword>
c00020f2:	83 c0 80             	add    eax,0xffffff80
c00020f5:	75 15                	jne    c000210c <test_gpt_header+0x70>
c00020f7:	8d 43 50             	lea    eax,[ebx+0x50]
c00020fa:	e8 4e f9 ff ff       	call   c0001a4d <ld_dword>
c00020ff:	3d 80 00 00 00       	cmp    eax,0x80
c0002104:	0f 96 c0             	setbe  al
c0002107:	0f b6 c0             	movzx  eax,al
c000210a:	89 c7                	mov    edi,eax
c000210c:	5b                   	pop    ebx
c000210d:	89 f8                	mov    eax,edi
c000210f:	5e                   	pop    esi
c0002110:	5f                   	pop    edi
c0002111:	5d                   	pop    ebp
c0002112:	c3                   	ret    

c0002113 <make_rand>:
c0002113:	56                   	push   esi
c0002114:	85 c0                	test   eax,eax
c0002116:	53                   	push   ebx
c0002117:	75 05                	jne    c000211e <make_rand+0xb>
c0002119:	b8 01 00 00 00       	mov    eax,0x1
c000211e:	01 d1                	add    ecx,edx
c0002120:	bb 08 00 00 00       	mov    ebx,0x8
c0002125:	89 c6                	mov    esi,eax
c0002127:	d1 e8                	shr    eax,1
c0002129:	83 e6 01             	and    esi,0x1
c000212c:	85 f6                	test   esi,esi
c000212e:	74 05                	je     c0002135 <make_rand+0x22>
c0002130:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002135:	4b                   	dec    ebx
c0002136:	75 ed                	jne    c0002125 <make_rand+0x12>
c0002138:	42                   	inc    edx
c0002139:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213c:	39 ca                	cmp    edx,ecx
c000213e:	75 e0                	jne    c0002120 <make_rand+0xd>
c0002140:	5b                   	pop    ebx
c0002141:	5e                   	pop    esi
c0002142:	c3                   	ret    

c0002143 <validate>:
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d6                	mov    esi,edx
c0002147:	51                   	push   ecx
c0002148:	85 c0                	test   eax,eax
c000214a:	75 09                	jne    c0002155 <validate+0x12>
c000214c:	b8 09 00 00 00       	mov    eax,0x9
c0002151:	31 c9                	xor    ecx,ecx
c0002153:	eb 2f                	jmp    c0002184 <validate+0x41>
c0002155:	89 c3                	mov    ebx,eax
c0002157:	8b 00                	mov    eax,DWORD PTR [eax]
c0002159:	85 c0                	test   eax,eax
c000215b:	74 ef                	je     c000214c <validate+0x9>
c000215d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002160:	74 ea                	je     c000214c <validate+0x9>
c0002162:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002166:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000216a:	75 e0                	jne    c000214c <validate+0x9>
c000216c:	83 ec 0c             	sub    esp,0xc
c000216f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002173:	50                   	push   eax
c0002174:	e8 76 f8 ff ff       	call   c00019ef <disk_status>
c0002179:	83 c4 10             	add    esp,0x10
c000217c:	a8 01                	test   al,0x1
c000217e:	75 cc                	jne    c000214c <validate+0x9>
c0002180:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002182:	31 c0                	xor    eax,eax
c0002184:	89 0e                	mov    DWORD PTR [esi],ecx
c0002186:	5a                   	pop    edx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <sync_window>:
c000218a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218e:	0f 84 85 00 00 00    	je     c0002219 <sync_window+0x8f>
c0002194:	55                   	push   ebp
c0002195:	8d 68 54             	lea    ebp,[eax+0x54]
c0002198:	57                   	push   edi
c0002199:	56                   	push   esi
c000219a:	53                   	push   ebx
c000219b:	89 c3                	mov    ebx,eax
c000219d:	83 ec 28             	sub    esp,0x28
c00021a0:	6a 01                	push   0x1
c00021a2:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a5:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a8:	55                   	push   ebp
c00021a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ad:	50                   	push   eax
c00021ae:	e8 58 f8 ff ff       	call   c0001a0b <disk_write>
c00021b3:	83 c4 20             	add    esp,0x20
c00021b6:	ba 01 00 00 00       	mov    edx,0x1
c00021bb:	85 c0                	test   eax,eax
c00021bd:	75 50                	jne    c000220f <sync_window+0x85>
c00021bf:	31 ff                	xor    edi,edi
c00021c1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021c8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021cc:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021cf:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d2:	89 c6                	mov    esi,eax
c00021d4:	89 d7                	mov    edi,edx
c00021d6:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021dd:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e0:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e4:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e8:	73 23                	jae    c000220d <sync_window+0x83>
c00021ea:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ee:	75 1d                	jne    c000220d <sync_window+0x83>
c00021f0:	83 ec 0c             	sub    esp,0xc
c00021f3:	6a 01                	push   0x1
c00021f5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fd:	52                   	push   edx
c00021fe:	50                   	push   eax
c00021ff:	55                   	push   ebp
c0002200:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002204:	50                   	push   eax
c0002205:	e8 01 f8 ff ff       	call   c0001a0b <disk_write>
c000220a:	83 c4 20             	add    esp,0x20
c000220d:	31 d2                	xor    edx,edx
c000220f:	83 c4 1c             	add    esp,0x1c
c0002212:	89 d0                	mov    eax,edx
c0002214:	5b                   	pop    ebx
c0002215:	5e                   	pop    esi
c0002216:	5f                   	pop    edi
c0002217:	5d                   	pop    ebp
c0002218:	c3                   	ret    
c0002219:	31 d2                	xor    edx,edx
c000221b:	89 d0                	mov    eax,edx
c000221d:	c3                   	ret    

c000221e <move_window>:
c000221e:	56                   	push   esi
c000221f:	53                   	push   ebx
c0002220:	89 c3                	mov    ebx,eax
c0002222:	83 ec 14             	sub    esp,0x14
c0002225:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002228:	75 07                	jne    c0002231 <move_window+0x13>
c000222a:	31 f6                	xor    esi,esi
c000222c:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222f:	74 59                	je     c000228a <move_window+0x6c>
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	89 d8                	mov    eax,ebx
c000223b:	e8 4a ff ff ff       	call   c000218a <sync_window>
c0002240:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002244:	89 c6                	mov    esi,eax
c0002246:	85 c0                	test   eax,eax
c0002248:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224c:	75 3c                	jne    c000228a <move_window+0x6c>
c000224e:	83 ec 0c             	sub    esp,0xc
c0002251:	8d 43 54             	lea    eax,[ebx+0x54]
c0002254:	6a 01                	push   0x1
c0002256:	51                   	push   ecx
c0002257:	52                   	push   edx
c0002258:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002260:	50                   	push   eax
c0002261:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002265:	50                   	push   eax
c0002266:	e8 8a f7 ff ff       	call   c00019f5 <disk_read>
c000226b:	83 c4 20             	add    esp,0x20
c000226e:	85 c0                	test   eax,eax
c0002270:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002274:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002278:	74 0a                	je     c0002284 <move_window+0x66>
c000227a:	83 ca ff             	or     edx,0xffffffff
c000227d:	be 01 00 00 00       	mov    esi,0x1
c0002282:	89 d1                	mov    ecx,edx
c0002284:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002287:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000228a:	89 f0                	mov    eax,esi
c000228c:	83 c4 14             	add    esp,0x14
c000228f:	5b                   	pop    ebx
c0002290:	5e                   	pop    esi
c0002291:	c3                   	ret    

c0002292 <check_fs>:
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	83 ec 08             	sub    esp,0x8
c0002298:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229c:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a3:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022aa:	e8 6f ff ff ff       	call   c000221e <move_window>
c00022af:	ba 04 00 00 00       	mov    edx,0x4
c00022b4:	85 c0                	test   eax,eax
c00022b6:	0f 85 89 00 00 00    	jne    c0002345 <check_fs+0xb3>
c00022bc:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c2:	e8 79 f7 ff ff       	call   c0001a40 <ld_word>
c00022c7:	ba 03 00 00 00       	mov    edx,0x3
c00022cc:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d0:	75 73                	jne    c0002345 <check_fs+0xb3>
c00022d2:	ba 00 02 02 c0       	mov    edx,0xc0020200
c00022d7:	8d 43 54             	lea    eax,[ebx+0x54]
c00022da:	b9 0b 00 00 00       	mov    ecx,0xb
c00022df:	e8 fb f7 ff ff       	call   c0001adf <mem_cmp>
c00022e4:	ba 01 00 00 00       	mov    edx,0x1
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 58                	je     c0002345 <check_fs+0xb3>
c00022ed:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f0:	8d 50 18             	lea    edx,[eax+0x18]
c00022f3:	80 fa 01             	cmp    dl,0x1
c00022f6:	76 09                	jbe    c0002301 <check_fs+0x6f>
c00022f8:	ba 02 00 00 00       	mov    edx,0x2
c00022fd:	3c eb                	cmp    al,0xeb
c00022ff:	75 44                	jne    c0002345 <check_fs+0xb3>
c0002301:	ba 8c 2e 02 c0       	mov    edx,0xc0022e8c
c0002306:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230c:	b9 03 00 00 00       	mov    ecx,0x3
c0002311:	e8 c9 f7 ff ff       	call   c0001adf <mem_cmp>
c0002316:	31 d2                	xor    edx,edx
c0002318:	85 c0                	test   eax,eax
c000231a:	74 29                	je     c0002345 <check_fs+0xb3>
c000231c:	ba 0c 02 02 c0       	mov    edx,0xc002020c
c0002321:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002327:	b9 05 00 00 00       	mov    ecx,0x5
c000232c:	e8 ae f7 ff ff       	call   c0001adf <mem_cmp>
c0002331:	31 d2                	xor    edx,edx
c0002333:	85 c0                	test   eax,eax
c0002335:	74 0e                	je     c0002345 <check_fs+0xb3>
c0002337:	31 d2                	xor    edx,edx
c0002339:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002340:	0f 95 c2             	setne  dl
c0002343:	01 d2                	add    edx,edx
c0002345:	89 d0                	mov    eax,edx
c0002347:	83 c4 08             	add    esp,0x8
c000234a:	5b                   	pop    ebx
c000234b:	c3                   	ret    

c000234c <find_volume>:
c000234c:	55                   	push   ebp
c000234d:	31 c9                	xor    ecx,ecx
c000234f:	57                   	push   edi
c0002350:	56                   	push   esi
c0002351:	89 d6                	mov    esi,edx
c0002353:	53                   	push   ebx
c0002354:	31 d2                	xor    edx,edx
c0002356:	83 ec 3c             	sub    esp,0x3c
c0002359:	89 c3                	mov    ebx,eax
c000235b:	e8 32 ff ff ff       	call   c0002292 <check_fs>
c0002360:	83 f8 02             	cmp    eax,0x2
c0002363:	74 0e                	je     c0002373 <find_volume+0x27>
c0002365:	0f 87 5d 01 00 00    	ja     c00024c8 <find_volume+0x17c>
c000236b:	85 f6                	test   esi,esi
c000236d:	0f 84 55 01 00 00    	je     c00024c8 <find_volume+0x17c>
c0002373:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000237a:	0f 85 dd 00 00 00    	jne    c000245d <find_volume+0x111>
c0002380:	31 c9                	xor    ecx,ecx
c0002382:	ba 01 00 00 00       	mov    edx,0x1
c0002387:	89 d8                	mov    eax,ebx
c0002389:	e8 90 fe ff ff       	call   c000221e <move_window>
c000238e:	85 c0                	test   eax,eax
c0002390:	74 0a                	je     c000239c <find_volume+0x50>
c0002392:	b8 04 00 00 00       	mov    eax,0x4
c0002397:	e9 2c 01 00 00       	jmp    c00024c8 <find_volume+0x17c>
c000239c:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239f:	89 e8                	mov    eax,ebp
c00023a1:	e8 f6 fc ff ff       	call   c000209c <test_gpt_header>
c00023a6:	85 c0                	test   eax,eax
c00023a8:	75 0a                	jne    c00023b4 <find_volume+0x68>
c00023aa:	b8 03 00 00 00       	mov    eax,0x3
c00023af:	e9 14 01 00 00       	jmp    c00024c8 <find_volume+0x17c>
c00023b4:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023ba:	e8 8e f6 ff ff       	call   c0001a4d <ld_dword>
c00023bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c3:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c9:	e8 97 f6 ff ff       	call   c0001a65 <ld_qword>
c00023ce:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ea:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ee:	74 ba                	je     c00023aa <find_volume+0x5e>
c00023f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f4:	31 c9                	xor    ecx,ecx
c00023f6:	c1 e7 07             	shl    edi,0x7
c00023f9:	89 d8                	mov    eax,ebx
c00023fb:	89 fa                	mov    edx,edi
c00023fd:	c1 ea 09             	shr    edx,0x9
c0002400:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002404:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002408:	e8 11 fe ff ff       	call   c000221e <move_window>
c000240d:	85 c0                	test   eax,eax
c000240f:	75 81                	jne    c0002392 <find_volume+0x46>
c0002411:	81 e7 80 01 00 00    	and    edi,0x180
c0002417:	b9 10 00 00 00       	mov    ecx,0x10
c000241c:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002420:	ba f0 01 02 c0       	mov    edx,0xc00201f0
c0002425:	e8 b5 f6 ff ff       	call   c0001adf <mem_cmp>
c000242a:	85 c0                	test   eax,eax
c000242c:	75 29                	jne    c0002457 <find_volume+0x10b>
c000242e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002432:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002436:	e8 2a f6 ff ff       	call   c0001a65 <ld_qword>
c000243b:	89 d1                	mov    ecx,edx
c000243d:	89 c2                	mov    edx,eax
c000243f:	89 d8                	mov    eax,ebx
c0002441:	e8 4c fe ff ff       	call   c0002292 <check_fs>
c0002446:	85 f6                	test   esi,esi
c0002448:	75 07                	jne    c0002451 <find_volume+0x105>
c000244a:	83 f8 01             	cmp    eax,0x1
c000244d:	77 08                	ja     c0002457 <find_volume+0x10b>
c000244f:	eb 77                	jmp    c00024c8 <find_volume+0x17c>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 71                	je     c00024c8 <find_volume+0x17c>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 89                	jmp    c00023e6 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002477:	89 f8                	mov    eax,edi
c0002479:	83 c7 10             	add    edi,0x10
c000247c:	e8 cc f5 ff ff       	call   c0001a4d <ld_dword>
c0002481:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002485:	89 01                	mov    DWORD PTR [ecx],eax
c0002487:	83 c1 04             	add    ecx,0x4
c000248a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248e:	75 e3                	jne    c0002473 <find_volume+0x127>
c0002490:	31 ff                	xor    edi,edi
c0002492:	85 f6                	test   esi,esi
c0002494:	74 03                	je     c0002499 <find_volume+0x14d>
c0002496:	8d 7e ff             	lea    edi,[esi-0x1]
c0002499:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249d:	85 d2                	test   edx,edx
c000249f:	74 14                	je     c00024b5 <find_volume+0x169>
c00024a1:	31 c9                	xor    ecx,ecx
c00024a3:	89 d8                	mov    eax,ebx
c00024a5:	e8 e8 fd ff ff       	call   c0002292 <check_fs>
c00024aa:	83 f8 01             	cmp    eax,0x1
c00024ad:	76 19                	jbe    c00024c8 <find_volume+0x17c>
c00024af:	85 f6                	test   esi,esi
c00024b1:	74 0f                	je     c00024c2 <find_volume+0x176>
c00024b3:	eb 13                	jmp    c00024c8 <find_volume+0x17c>
c00024b5:	85 f6                	test   esi,esi
c00024b7:	0f 85 ed fe ff ff    	jne    c00023aa <find_volume+0x5e>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	47                   	inc    edi
c00024c3:	83 ff 03             	cmp    edi,0x3
c00024c6:	76 d1                	jbe    c0002499 <find_volume+0x14d>
c00024c8:	83 c4 3c             	add    esp,0x3c
c00024cb:	5b                   	pop    ebx
c00024cc:	5e                   	pop    esi
c00024cd:	5f                   	pop    edi
c00024ce:	5d                   	pop    ebp
c00024cf:	c3                   	ret    

c00024d0 <mount_volume>:
c00024d0:	55                   	push   ebp
c00024d1:	57                   	push   edi
c00024d2:	89 cf                	mov    edi,ecx
c00024d4:	56                   	push   esi
c00024d5:	53                   	push   ebx
c00024d6:	bb 0b 00 00 00       	mov    ebx,0xb
c00024db:	83 ec 3c             	sub    esp,0x3c
c00024de:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e8:	e8 35 fb ff ff       	call   c0002022 <get_ldnumber>
c00024ed:	85 c0                	test   eax,eax
c00024ef:	0f 88 3a 05 00 00    	js     c0002a2f <mount_volume+0x55f>
c00024f5:	8b 2c 85 00 43 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbd00]
c00024fc:	89 c6                	mov    esi,eax
c00024fe:	bb 0c 00 00 00       	mov    ebx,0xc
c0002503:	85 ed                	test   ebp,ebp
c0002505:	0f 84 24 05 00 00    	je     c0002a2f <mount_volume+0x55f>
c000250b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250f:	83 e7 fe             	and    edi,0xfffffffe
c0002512:	89 2a                	mov    DWORD PTR [edx],ebp
c0002514:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002518:	74 32                	je     c000254c <mount_volume+0x7c>
c000251a:	83 ec 0c             	sub    esp,0xc
c000251d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002521:	50                   	push   eax
c0002522:	e8 c8 f4 ff ff       	call   c00019ef <disk_status>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	a8 01                	test   al,0x1
c000252c:	75 1e                	jne    c000254c <mount_volume+0x7c>
c000252e:	31 db                	xor    ebx,ebx
c0002530:	89 f9                	mov    ecx,edi
c0002532:	84 c9                	test   cl,cl
c0002534:	0f 84 f5 04 00 00    	je     c0002a2f <mount_volume+0x55f>
c000253a:	a8 04                	test   al,0x4
c000253c:	0f 84 ed 04 00 00    	je     c0002a2f <mount_volume+0x55f>
c0002542:	bb 0a 00 00 00       	mov    ebx,0xa
c0002547:	e9 e3 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c000254c:	83 ec 0c             	sub    esp,0xc
c000254f:	89 f0                	mov    eax,esi
c0002551:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002555:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002558:	0f b6 f0             	movzx  esi,al
c000255b:	bb 03 00 00 00       	mov    ebx,0x3
c0002560:	56                   	push   esi
c0002561:	e8 8c f4 ff ff       	call   c00019f2 <disk_initialize>
c0002566:	83 c4 10             	add    esp,0x10
c0002569:	a8 01                	test   al,0x1
c000256b:	0f 85 be 04 00 00    	jne    c0002a2f <mount_volume+0x55f>
c0002571:	89 f9                	mov    ecx,edi
c0002573:	84 c9                	test   cl,cl
c0002575:	74 04                	je     c000257b <mount_volume+0xab>
c0002577:	a8 04                	test   al,0x4
c0002579:	75 c7                	jne    c0002542 <mount_volume+0x72>
c000257b:	31 d2                	xor    edx,edx
c000257d:	89 e8                	mov    eax,ebp
c000257f:	e8 c8 fd ff ff       	call   c000234c <find_volume>
c0002584:	83 f8 04             	cmp    eax,0x4
c0002587:	75 0a                	jne    c0002593 <mount_volume+0xc3>
c0002589:	bb 01 00 00 00       	mov    ebx,0x1
c000258e:	e9 9c 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c0002593:	83 f8 01             	cmp    eax,0x1
c0002596:	76 0a                	jbe    c00025a2 <mount_volume+0xd2>
c0002598:	bb 0d 00 00 00       	mov    ebx,0xd
c000259d:	e9 8d 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c00025a2:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a5:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b0:	75 17                	jne    c00025c9 <mount_volume+0xf9>
c00025b2:	b8 0b 00 00 00       	mov    eax,0xb
c00025b7:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025bc:	75 da                	jne    c0002598 <mount_volume+0xc8>
c00025be:	40                   	inc    eax
c00025bf:	83 f8 40             	cmp    eax,0x40
c00025c2:	75 f3                	jne    c00025b7 <mount_volume+0xe7>
c00025c4:	e9 5a 02 00 00       	jmp    c0002823 <mount_volume+0x353>
c00025c9:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025cc:	e8 6f f4 ff ff       	call   c0001a40 <ld_word>
c00025d1:	66 3d 00 02          	cmp    ax,0x200
c00025d5:	75 c1                	jne    c0002598 <mount_volume+0xc8>
c00025d7:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025da:	e8 61 f4 ff ff       	call   c0001a40 <ld_word>
c00025df:	0f b7 c0             	movzx  eax,ax
c00025e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 0c                	jne    c00025f6 <mount_volume+0x126>
c00025ea:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ed:	e8 5b f4 ff ff       	call   c0001a4d <ld_dword>
c00025f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025fa:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fd:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002600:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002604:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002607:	48                   	dec    eax
c0002608:	3c 01                	cmp    al,0x1
c000260a:	77 8c                	ja     c0002598 <mount_volume+0xc8>
c000260c:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002610:	89 c3                	mov    ebx,eax
c0002612:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002616:	66 85 c0             	test   ax,ax
c0002619:	0f 84 79 ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000261f:	8d 40 ff             	lea    eax,[eax-0x1]
c0002622:	85 d8                	test   eax,ebx
c0002624:	0f 85 6e ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c000262a:	8d 45 65             	lea    eax,[ebp+0x65]
c000262d:	e8 0e f4 ff ff       	call   c0001a40 <ld_word>
c0002632:	89 c7                	mov    edi,eax
c0002634:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002638:	a8 0f                	test   al,0xf
c000263a:	0f 85 58 ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002640:	8d 45 67             	lea    eax,[ebp+0x67]
c0002643:	e8 f8 f3 ff ff       	call   c0001a40 <ld_word>
c0002648:	0f b7 f0             	movzx  esi,ax
c000264b:	85 f6                	test   esi,esi
c000264d:	75 0a                	jne    c0002659 <mount_volume+0x189>
c000264f:	8d 45 74             	lea    eax,[ebp+0x74]
c0002652:	e8 f6 f3 ff ff       	call   c0001a4d <ld_dword>
c0002657:	89 c6                	mov    esi,eax
c0002659:	8d 45 62             	lea    eax,[ebp+0x62]
c000265c:	e8 df f3 ff ff       	call   c0001a40 <ld_word>
c0002661:	66 85 c0             	test   ax,ax
c0002664:	0f 84 2e ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000266a:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266f:	0f b7 c8             	movzx  ecx,ax
c0002672:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002677:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000267b:	89 fa                	mov    edx,edi
c000267d:	66 c1 ea 04          	shr    dx,0x4
c0002681:	0f b7 d2             	movzx  edx,dx
c0002684:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002688:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000268b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268f:	39 c6                	cmp    esi,eax
c0002691:	0f 82 01 ff ff ff    	jb     c0002598 <mount_volume+0xc8>
c0002697:	29 c6                	sub    esi,eax
c0002699:	31 d2                	xor    edx,edx
c000269b:	89 f0                	mov    eax,esi
c000269d:	f7 f3                	div    ebx
c000269f:	39 de                	cmp    esi,ebx
c00026a1:	0f 82 f1 fe ff ff    	jb     c0002598 <mount_volume+0xc8>
c00026a7:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ac:	0f 87 e6 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c00026b2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b7:	0f 86 63 03 00 00    	jbe    c0002a20 <mount_volume+0x550>
c00026bd:	bb 03 00 00 00       	mov    ebx,0x3
c00026c2:	8d 70 02             	lea    esi,[eax+0x2]
c00026c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026cd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	89 c8                	mov    eax,ecx
c00026d7:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026de:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ea:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ed:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f4:	31 d2                	xor    edx,edx
c00026f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fe:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002701:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002704:	83 fb 03             	cmp    ebx,0x3
c0002707:	75 2b                	jne    c0002734 <mount_volume+0x264>
c0002709:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270c:	e8 2f f3 ff ff       	call   c0001a40 <ld_word>
c0002711:	66 09 c7             	or     di,ax
c0002714:	0f 85 7e fe ff ff    	jne    c0002598 <mount_volume+0xc8>
c000271a:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002720:	c1 e6 02             	shl    esi,0x2
c0002723:	e8 25 f3 ff ff       	call   c0001a4d <ld_dword>
c0002728:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002732:	eb 30                	jmp    c0002764 <mount_volume+0x294>
c0002734:	66 85 ff             	test   di,di
c0002737:	0f 84 5b fe ff ff    	je     c0002598 <mount_volume+0xc8>
c000273d:	31 d2                	xor    edx,edx
c000273f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002743:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002747:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000274b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274e:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002751:	83 fb 02             	cmp    ebx,0x2
c0002754:	75 04                	jne    c000275a <mount_volume+0x28a>
c0002756:	01 f6                	add    esi,esi
c0002758:	eb 0a                	jmp    c0002764 <mount_volume+0x294>
c000275a:	8d 04 76             	lea    eax,[esi+esi*2]
c000275d:	83 e6 01             	and    esi,0x1
c0002760:	d1 e8                	shr    eax,1
c0002762:	01 c6                	add    esi,eax
c0002764:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000276a:	c1 ee 09             	shr    esi,0x9
c000276d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002771:	0f 87 21 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c0002777:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002785:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002789:	83 fb 03             	cmp    ebx,0x3
c000278c:	75 7a                	jne    c0002808 <mount_volume+0x338>
c000278e:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002794:	e8 a7 f2 ff ff       	call   c0001a40 <ld_word>
c0002799:	66 48                	dec    ax
c000279b:	75 6b                	jne    c0002808 <mount_volume+0x338>
c000279d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a5:	83 c2 01             	add    edx,0x1
c00027a8:	89 e8                	mov    eax,ebp
c00027aa:	83 d1 00             	adc    ecx,0x0
c00027ad:	e8 6c fa ff ff       	call   c000221e <move_window>
c00027b2:	85 c0                	test   eax,eax
c00027b4:	75 52                	jne    c0002808 <mount_volume+0x338>
c00027b6:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ba:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c0:	e8 7b f2 ff ff       	call   c0001a40 <ld_word>
c00027c5:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c9:	75 3d                	jne    c0002808 <mount_volume+0x338>
c00027cb:	8d 45 54             	lea    eax,[ebp+0x54]
c00027ce:	e8 7a f2 ff ff       	call   c0001a4d <ld_dword>
c00027d3:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d8:	75 2e                	jne    c0002808 <mount_volume+0x338>
c00027da:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e0:	e8 68 f2 ff ff       	call   c0001a4d <ld_dword>
c00027e5:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ea:	75 1c                	jne    c0002808 <mount_volume+0x338>
c00027ec:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f2:	e8 56 f2 ff ff       	call   c0001a4d <ld_dword>
c00027f7:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027fa:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002800:	e8 48 f2 ff ff       	call   c0001a4d <ld_dword>
c0002805:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002808:	66 a1 e0 42 02 c0    	mov    ax,ds:0xc00242e0
c000280e:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002811:	40                   	inc    eax
c0002812:	31 db                	xor    ebx,ebx
c0002814:	66 a3 e0 42 02 c0    	mov    ds:0xc00242e0,ax
c000281a:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281e:	e9 0c 02 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c0002823:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002829:	e8 12 f2 ff ff       	call   c0001a40 <ld_word>
c000282e:	66 3d 00 01          	cmp    ax,0x100
c0002832:	0f 85 60 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002838:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283f:	0f 85 53 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002845:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000284b:	e8 15 f2 ff ff       	call   c0001a65 <ld_qword>
c0002850:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002854:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002858:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000285e:	e8 ea f1 ff ff       	call   c0001a4d <ld_dword>
c0002863:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002866:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286c:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286f:	fe c8                	dec    al
c0002871:	0f 85 21 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002877:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287e:	bb 01 00 00 00       	mov    ebx,0x1
c0002883:	d3 e3                	shl    ebx,cl
c0002885:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002889:	66 85 db             	test   bx,bx
c000288c:	0f 84 06 fd ff ff    	je     c0002598 <mount_volume+0xc8>
c0002892:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002898:	e8 b0 f1 ff ff       	call   c0001a4d <ld_dword>
c000289d:	89 c6                	mov    esi,eax
c000289f:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a4:	0f 87 ee fc ff ff    	ja     c0002598 <mount_volume+0xc8>
c00028aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ae:	8d 40 02             	lea    eax,[eax+0x2]
c00028b1:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b4:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028bb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028be:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c4:	e8 84 f1 ff ff       	call   c0001a4d <ld_dword>
c00028c9:	31 d2                	xor    edx,edx
c00028cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028db:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028de:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028e1:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e7:	e8 61 f1 ff ff       	call   c0001a4d <ld_dword>
c00028ec:	31 d2                	xor    edx,edx
c00028ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028fa:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fd:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002900:	0f b7 c3             	movzx  eax,bx
c0002903:	31 d2                	xor    edx,edx
c0002905:	0f af f0             	imul   esi,eax
c0002908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000290c:	89 f0                	mov    eax,esi
c000290e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002912:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002916:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000291a:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291e:	39 c1                	cmp    ecx,eax
c0002920:	89 df                	mov    edi,ebx
c0002922:	19 d7                	sbb    edi,edx
c0002924:	0f 82 6e fc ff ff    	jb     c0002598 <mount_volume+0xc8>
c000292a:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002930:	31 db                	xor    ebx,ebx
c0002932:	e8 16 f1 ff ff       	call   c0001a4d <ld_dword>
c0002937:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002941:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002949:	85 db                	test   ebx,ebx
c000294b:	75 39                	jne    c0002986 <mount_volume+0x4b6>
c000294d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002951:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002955:	0f 86 3d fc ff ff    	jbe    c0002598 <mount_volume+0xc8>
c000295b:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295e:	31 ff                	xor    edi,edi
c0002960:	89 e8                	mov    eax,ebp
c0002962:	e8 72 f3 ff ff       	call   c0001cd9 <clst2sect>
c0002967:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000296b:	01 c6                	add    esi,eax
c000296d:	89 e8                	mov    eax,ebp
c000296f:	11 d7                	adc    edi,edx
c0002971:	89 f2                	mov    edx,esi
c0002973:	89 f9                	mov    ecx,edi
c0002975:	e8 a4 f8 ff ff       	call   c000221e <move_window>
c000297a:	85 c0                	test   eax,eax
c000297c:	0f 85 07 fc ff ff    	jne    c0002589 <mount_volume+0xb9>
c0002982:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002986:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000298b:	74 0b                	je     c0002998 <mount_volume+0x4c8>
c000298d:	83 c3 20             	add    ebx,0x20
c0002990:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002996:	eb b1                	jmp    c0002949 <mount_volume+0x479>
c0002998:	8d 75 54             	lea    esi,[ebp+0x54]
c000299b:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299f:	e8 a9 f0 ff ff       	call   c0001a4d <ld_dword>
c00029a4:	89 c3                	mov    ebx,eax
c00029a6:	83 f8 01             	cmp    eax,0x1
c00029a9:	0f 86 e9 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029af:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b2:	0f 86 e0 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029b8:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bb:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029bf:	0f af c2             	imul   eax,edx
c00029c2:	31 d2                	xor    edx,edx
c00029c4:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c7:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029ca:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cd:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d0:	31 c9                	xor    ecx,ecx
c00029d2:	89 da                	mov    edx,ebx
c00029d4:	89 e8                	mov    eax,ebp
c00029d6:	c1 ea 07             	shr    edx,0x7
c00029d9:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029dc:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029df:	e8 3a f8 ff ff       	call   c000221e <move_window>
c00029e4:	85 c0                	test   eax,eax
c00029e6:	0f 85 9d fb ff ff    	jne    c0002589 <mount_volume+0xb9>
c00029ec:	89 d8                	mov    eax,ebx
c00029ee:	83 e0 7f             	and    eax,0x7f
c00029f1:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f4:	e8 54 f0 ff ff       	call   c0001a4d <ld_dword>
c00029f9:	83 f8 ff             	cmp    eax,0xffffffff
c00029fc:	74 0a                	je     c0002a08 <mount_volume+0x538>
c00029fe:	43                   	inc    ebx
c00029ff:	39 d8                	cmp    eax,ebx
c0002a01:	74 cd                	je     c00029d0 <mount_volume+0x500>
c0002a03:	e9 90 fb ff ff       	jmp    c0002598 <mount_volume+0xc8>
c0002a08:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a16:	bb 04 00 00 00       	mov    ebx,0x4
c0002a1b:	e9 e8 fd ff ff       	jmp    c0002808 <mount_volume+0x338>
c0002a20:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a25:	19 db                	sbb    ebx,ebx
c0002a27:	83 c3 02             	add    ebx,0x2
c0002a2a:	e9 93 fc ff ff       	jmp    c00026c2 <mount_volume+0x1f2>
c0002a2f:	83 c4 3c             	add    esp,0x3c
c0002a32:	89 d8                	mov    eax,ebx
c0002a34:	5b                   	pop    ebx
c0002a35:	5e                   	pop    esi
c0002a36:	5f                   	pop    edi
c0002a37:	5d                   	pop    ebp
c0002a38:	c3                   	ret    

c0002a39 <find_bitmap>:
c0002a39:	55                   	push   ebp
c0002a3a:	57                   	push   edi
c0002a3b:	89 c7                	mov    edi,eax
c0002a3d:	56                   	push   esi
c0002a3e:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a41:	53                   	push   ebx
c0002a42:	83 ec 1c             	sub    esp,0x1c
c0002a45:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4c:	83 e8 02             	sub    eax,0x2
c0002a4f:	39 f0                	cmp    eax,esi
c0002a51:	77 02                	ja     c0002a55 <find_bitmap+0x1c>
c0002a53:	31 f6                	xor    esi,esi
c0002a55:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a59:	89 f3                	mov    ebx,esi
c0002a5b:	31 ed                	xor    ebp,ebp
c0002a5d:	31 c9                	xor    ecx,ecx
c0002a5f:	89 da                	mov    edx,ebx
c0002a61:	89 f8                	mov    eax,edi
c0002a63:	c1 ea 0c             	shr    edx,0xc
c0002a66:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a69:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6c:	e8 ad f7 ff ff       	call   c000221e <move_window>
c0002a71:	85 c0                	test   eax,eax
c0002a73:	75 68                	jne    c0002add <find_bitmap+0xa4>
c0002a75:	89 da                	mov    edx,ebx
c0002a77:	89 d9                	mov    ecx,ebx
c0002a79:	c1 ea 03             	shr    edx,0x3
c0002a7c:	83 e1 07             	and    ecx,0x7
c0002a7f:	b8 01 00 00 00       	mov    eax,0x1
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	d3 e0                	shl    eax,cl
c0002a8c:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a8f:	83 e9 02             	sub    ecx,0x2
c0002a92:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a96:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a9a:	43                   	inc    ebx
c0002a9b:	21 c1                	and    ecx,eax
c0002a9d:	d1 e0                	shl    eax,1
c0002a9f:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa3:	77 09                	ja     c0002aae <find_bitmap+0x75>
c0002aa5:	31 db                	xor    ebx,ebx
c0002aa7:	ba 00 02 00 00       	mov    edx,0x200
c0002aac:	31 c0                	xor    eax,eax
c0002aae:	84 c9                	test   cl,cl
c0002ab0:	75 10                	jne    c0002ac2 <find_bitmap+0x89>
c0002ab2:	45                   	inc    ebp
c0002ab3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab7:	75 0f                	jne    c0002ac8 <find_bitmap+0x8f>
c0002ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abd:	83 c0 02             	add    eax,0x2
c0002ac0:	eb 22                	jmp    c0002ae4 <find_bitmap+0xab>
c0002ac2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac6:	31 ed                	xor    ebp,ebp
c0002ac8:	39 de                	cmp    esi,ebx
c0002aca:	74 16                	je     c0002ae2 <find_bitmap+0xa9>
c0002acc:	84 c0                	test   al,al
c0002ace:	75 c6                	jne    c0002a96 <find_bitmap+0x5d>
c0002ad0:	42                   	inc    edx
c0002ad1:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad7:	77 84                	ja     c0002a5d <find_bitmap+0x24>
c0002ad9:	b0 01                	mov    al,0x1
c0002adb:	eb b9                	jmp    c0002a96 <find_bitmap+0x5d>
c0002add:	83 c8 ff             	or     eax,0xffffffff
c0002ae0:	eb 02                	jmp    c0002ae4 <find_bitmap+0xab>
c0002ae2:	31 c0                	xor    eax,eax
c0002ae4:	83 c4 1c             	add    esp,0x1c
c0002ae7:	5b                   	pop    ebx
c0002ae8:	5e                   	pop    esi
c0002ae9:	5f                   	pop    edi
c0002aea:	5d                   	pop    ebp
c0002aeb:	c3                   	ret    

c0002aec <change_bitmap>:
c0002aec:	55                   	push   ebp
c0002aed:	89 cd                	mov    ebp,ecx
c0002aef:	57                   	push   edi
c0002af0:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af3:	56                   	push   esi
c0002af4:	89 c7                	mov    edi,eax
c0002af6:	53                   	push   ebx
c0002af7:	89 c8                	mov    eax,ecx
c0002af9:	83 ec 1c             	sub    esp,0x1c
c0002afc:	31 d2                	xor    edx,edx
c0002afe:	89 ce                	mov    esi,ecx
c0002b00:	c1 e8 0c             	shr    eax,0xc
c0002b03:	bb 01 00 00 00       	mov    ebx,0x1
c0002b08:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b0b:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0e:	c1 ee 03             	shr    esi,0x3
c0002b11:	83 e1 07             	and    ecx,0x7
c0002b14:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1a:	d3 e3                	shl    ebx,cl
c0002b1c:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b20:	89 c1                	mov    ecx,eax
c0002b22:	89 d3                	mov    ebx,edx
c0002b24:	83 c1 01             	add    ecx,0x1
c0002b27:	83 d3 00             	adc    ebx,0x0
c0002b2a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b32:	89 d1                	mov    ecx,edx
c0002b34:	89 c2                	mov    edx,eax
c0002b36:	89 f8                	mov    eax,edi
c0002b38:	e8 e1 f6 ff ff       	call   c000221e <move_window>
c0002b3d:	89 c1                	mov    ecx,eax
c0002b3f:	85 c0                	test   eax,eax
c0002b41:	75 48                	jne    c0002b8b <change_bitmap+0x9f>
c0002b43:	31 d2                	xor    edx,edx
c0002b45:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b49:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4d:	0f 95 c2             	setne  dl
c0002b50:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b54:	74 3c                	je     c0002b92 <change_bitmap+0xa6>
c0002b56:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b5a:	4d                   	dec    ebp
c0002b5b:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b5f:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b63:	74 32                	je     c0002b97 <change_bitmap+0xab>
c0002b65:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b69:	75 d8                	jne    c0002b43 <change_bitmap+0x57>
c0002b6b:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6e:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b73:	89 c3                	mov    ebx,eax
c0002b75:	31 f6                	xor    esi,esi
c0002b77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b7f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b85:	74 99                	je     c0002b20 <change_bitmap+0x34>
c0002b87:	89 de                	mov    esi,ebx
c0002b89:	eb b8                	jmp    c0002b43 <change_bitmap+0x57>
c0002b8b:	b9 01 00 00 00       	mov    ecx,0x1
c0002b90:	eb 05                	jmp    c0002b97 <change_bitmap+0xab>
c0002b92:	b9 02 00 00 00       	mov    ecx,0x2
c0002b97:	83 c4 1c             	add    esp,0x1c
c0002b9a:	89 c8                	mov    eax,ecx
c0002b9c:	5b                   	pop    ebx
c0002b9d:	5e                   	pop    esi
c0002b9e:	5f                   	pop    edi
c0002b9f:	5d                   	pop    ebp
c0002ba0:	c3                   	ret    

c0002ba1 <put_fat>:
c0002ba1:	83 fa 01             	cmp    edx,0x1
c0002ba4:	0f 86 7b 01 00 00    	jbe    c0002d25 <put_fat+0x184>
c0002baa:	55                   	push   ebp
c0002bab:	57                   	push   edi
c0002bac:	89 cf                	mov    edi,ecx
c0002bae:	56                   	push   esi
c0002baf:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb4:	53                   	push   ebx
c0002bb5:	89 c6                	mov    esi,eax
c0002bb7:	83 ec 1c             	sub    esp,0x1c
c0002bba:	89 d3                	mov    ebx,edx
c0002bbc:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bbf:	0f 86 68 01 00 00    	jbe    c0002d2d <put_fat+0x18c>
c0002bc5:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc7:	3c 02                	cmp    al,0x2
c0002bc9:	0f 84 c7 00 00 00    	je     c0002c96 <put_fat+0xf5>
c0002bcf:	77 09                	ja     c0002bda <put_fat+0x39>
c0002bd1:	fe c8                	dec    al
c0002bd3:	74 17                	je     c0002bec <put_fat+0x4b>
c0002bd5:	e9 53 01 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002bda:	b9 02 00 00 00       	mov    ecx,0x2
c0002bdf:	3c 04                	cmp    al,0x4
c0002be1:	0f 86 e1 00 00 00    	jbe    c0002cc8 <put_fat+0x127>
c0002be7:	e9 41 01 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002bec:	89 d5                	mov    ebp,edx
c0002bee:	31 c9                	xor    ecx,ecx
c0002bf0:	d1 ed                	shr    ebp,1
c0002bf2:	89 f0                	mov    eax,esi
c0002bf4:	01 d5                	add    ebp,edx
c0002bf6:	89 ea                	mov    edx,ebp
c0002bf8:	c1 ea 09             	shr    edx,0x9
c0002bfb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfe:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c01:	e8 18 f6 ff ff       	call   c000221e <move_window>
c0002c06:	89 c1                	mov    ecx,eax
c0002c08:	85 c0                	test   eax,eax
c0002c0a:	0f 85 1d 01 00 00    	jne    c0002d2d <put_fat+0x18c>
c0002c10:	8d 46 54             	lea    eax,[esi+0x54]
c0002c13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c17:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c1a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c24:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c28:	89 f8                	mov    eax,edi
c0002c2a:	83 e3 01             	and    ebx,0x1
c0002c2d:	74 0d                	je     c0002c3c <put_fat+0x9b>
c0002c2f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c32:	89 fa                	mov    edx,edi
c0002c34:	83 e0 0f             	and    eax,0xf
c0002c37:	c1 e2 04             	shl    edx,0x4
c0002c3a:	09 d0                	or     eax,edx
c0002c3c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	31 c9                	xor    ecx,ecx
c0002c45:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c49:	c1 ea 09             	shr    edx,0x9
c0002c4c:	89 f0                	mov    eax,esi
c0002c4e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c51:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c54:	e8 c5 f5 ff ff       	call   c000221e <move_window>
c0002c59:	89 c1                	mov    ecx,eax
c0002c5b:	85 c0                	test   eax,eax
c0002c5d:	0f 85 ca 00 00 00    	jne    c0002d2d <put_fat+0x18c>
c0002c63:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c71:	85 db                	test   ebx,ebx
c0002c73:	74 07                	je     c0002c7c <put_fat+0xdb>
c0002c75:	c1 ef 04             	shr    edi,0x4
c0002c78:	89 fa                	mov    edx,edi
c0002c7a:	eb 0e                	jmp    c0002c8a <put_fat+0xe9>
c0002c7c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7f:	c1 ef 08             	shr    edi,0x8
c0002c82:	83 e2 f0             	and    edx,0xfffffff0
c0002c85:	83 e7 0f             	and    edi,0xf
c0002c88:	09 fa                	or     edx,edi
c0002c8a:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c91:	e9 97 00 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002c96:	31 c9                	xor    ecx,ecx
c0002c98:	c1 ea 08             	shr    edx,0x8
c0002c9b:	89 f0                	mov    eax,esi
c0002c9d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca0:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca3:	e8 76 f5 ff ff       	call   c000221e <move_window>
c0002ca8:	89 c1                	mov    ecx,eax
c0002caa:	85 c0                	test   eax,eax
c0002cac:	75 7f                	jne    c0002d2d <put_fat+0x18c>
c0002cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb2:	01 db                	add    ebx,ebx
c0002cb4:	0f b7 d7             	movzx  edx,di
c0002cb7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbd:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc1:	e8 ec ed ff ff       	call   c0001ab2 <st_word>
c0002cc6:	eb 53                	jmp    c0002d1b <put_fat+0x17a>
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	c1 ea 07             	shr    edx,0x7
c0002ccd:	89 f0                	mov    eax,esi
c0002ccf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd5:	e8 44 f5 ff ff       	call   c000221e <move_window>
c0002cda:	89 c1                	mov    ecx,eax
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 4d                	jne    c0002d2d <put_fat+0x18c>
c0002ce0:	c1 e3 02             	shl    ebx,0x2
c0002ce3:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cec:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf0:	74 1c                	je     c0002d0e <put_fat+0x16d>
c0002cf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf6:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfc:	89 d8                	mov    eax,ebx
c0002cfe:	e8 4a ed ff ff       	call   c0001a4d <ld_dword>
c0002d03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d07:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d0c:	09 c7                	or     edi,eax
c0002d0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d12:	89 fa                	mov    edx,edi
c0002d14:	89 d8                	mov    eax,ebx
c0002d16:	e8 9b ed ff ff       	call   c0001ab6 <st_dword>
c0002d1b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d23:	eb 08                	jmp    c0002d2d <put_fat+0x18c>
c0002d25:	b9 02 00 00 00       	mov    ecx,0x2
c0002d2a:	89 c8                	mov    eax,ecx
c0002d2c:	c3                   	ret    
c0002d2d:	83 c4 1c             	add    esp,0x1c
c0002d30:	89 c8                	mov    eax,ecx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	5f                   	pop    edi
c0002d35:	5d                   	pop    ebp
c0002d36:	c3                   	ret    

c0002d37 <fill_last_frag>:
c0002d37:	57                   	push   edi
c0002d38:	89 cf                	mov    edi,ecx
c0002d3a:	56                   	push   esi
c0002d3b:	89 d6                	mov    esi,edx
c0002d3d:	53                   	push   ebx
c0002d3e:	89 c3                	mov    ebx,eax
c0002d40:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d43:	85 c0                	test   eax,eax
c0002d45:	74 21                	je     c0002d68 <fill_last_frag+0x31>
c0002d47:	89 f9                	mov    ecx,edi
c0002d49:	83 f8 01             	cmp    eax,0x1
c0002d4c:	76 05                	jbe    c0002d53 <fill_last_frag+0x1c>
c0002d4e:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d51:	29 c1                	sub    ecx,eax
c0002d53:	8d 56 01             	lea    edx,[esi+0x1]
c0002d56:	29 c2                	sub    edx,eax
c0002d58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d5a:	e8 42 fe ff ff       	call   c0002ba1 <put_fat>
c0002d5f:	85 c0                	test   eax,eax
c0002d61:	75 05                	jne    c0002d68 <fill_last_frag+0x31>
c0002d63:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d66:	eb d8                	jmp    c0002d40 <fill_last_frag+0x9>
c0002d68:	5b                   	pop    ebx
c0002d69:	5e                   	pop    esi
c0002d6a:	5f                   	pop    edi
c0002d6b:	c3                   	ret    

c0002d6c <fill_first_frag>:
c0002d6c:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d70:	75 2d                	jne    c0002d9f <fill_first_frag+0x33>
c0002d72:	57                   	push   edi
c0002d73:	56                   	push   esi
c0002d74:	53                   	push   ebx
c0002d75:	89 c3                	mov    ebx,eax
c0002d77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d7a:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7d:	01 d7                	add    edi,edx
c0002d7f:	39 fa                	cmp    edx,edi
c0002d81:	74 14                	je     c0002d97 <fill_first_frag+0x2b>
c0002d83:	8d 72 01             	lea    esi,[edx+0x1]
c0002d86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d88:	89 f1                	mov    ecx,esi
c0002d8a:	e8 12 fe ff ff       	call   c0002ba1 <put_fat>
c0002d8f:	89 f2                	mov    edx,esi
c0002d91:	85 c0                	test   eax,eax
c0002d93:	74 ea                	je     c0002d7f <fill_first_frag+0x13>
c0002d95:	eb 0b                	jmp    c0002da2 <fill_first_frag+0x36>
c0002d97:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9b:	31 c0                	xor    eax,eax
c0002d9d:	eb 03                	jmp    c0002da2 <fill_first_frag+0x36>
c0002d9f:	31 c0                	xor    eax,eax
c0002da1:	c3                   	ret    
c0002da2:	5b                   	pop    ebx
c0002da3:	5e                   	pop    esi
c0002da4:	5f                   	pop    edi
c0002da5:	c3                   	ret    

c0002da6 <get_fat>:
c0002da6:	83 fa 01             	cmp    edx,0x1
c0002da9:	0f 86 db 01 00 00    	jbe    c0002f8a <get_fat+0x1e4>
c0002daf:	55                   	push   ebp
c0002db0:	b9 01 00 00 00       	mov    ecx,0x1
c0002db5:	57                   	push   edi
c0002db6:	56                   	push   esi
c0002db7:	53                   	push   ebx
c0002db8:	83 ec 1c             	sub    esp,0x1c
c0002dbb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbd:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc0:	0f 86 cc 01 00 00    	jbe    c0002f92 <get_fat+0x1ec>
c0002dc6:	89 c3                	mov    ebx,eax
c0002dc8:	89 d6                	mov    esi,edx
c0002dca:	8a 07                	mov    al,BYTE PTR [edi]
c0002dcc:	3c 02                	cmp    al,0x2
c0002dce:	0f 84 99 00 00 00    	je     c0002e6d <get_fat+0xc7>
c0002dd4:	77 09                	ja     c0002ddf <get_fat+0x39>
c0002dd6:	fe c8                	dec    al
c0002dd8:	74 1a                	je     c0002df4 <get_fat+0x4e>
c0002dda:	e9 b3 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002ddf:	3c 03                	cmp    al,0x3
c0002de1:	0f 84 b5 00 00 00    	je     c0002e9c <get_fat+0xf6>
c0002de7:	3c 04                	cmp    al,0x4
c0002de9:	0f 84 e3 00 00 00    	je     c0002ed2 <get_fat+0x12c>
c0002def:	e9 9e 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002df4:	89 d3                	mov    ebx,edx
c0002df6:	31 c9                	xor    ecx,ecx
c0002df8:	d1 eb                	shr    ebx,1
c0002dfa:	89 f8                	mov    eax,edi
c0002dfc:	01 d3                	add    ebx,edx
c0002dfe:	89 da                	mov    edx,ebx
c0002e00:	c1 ea 09             	shr    edx,0x9
c0002e03:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e06:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e09:	e8 10 f4 ff ff       	call   c000221e <move_window>
c0002e0e:	85 c0                	test   eax,eax
c0002e10:	74 08                	je     c0002e1a <get_fat+0x74>
c0002e12:	83 c9 ff             	or     ecx,0xffffffff
c0002e15:	e9 78 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e1a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1d:	31 c9                	xor    ecx,ecx
c0002e1f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e25:	89 ea                	mov    edx,ebp
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	c1 ea 09             	shr    edx,0x9
c0002e2e:	89 f8                	mov    eax,edi
c0002e30:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e33:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e36:	e8 e3 f3 ff ff       	call   c000221e <move_window>
c0002e3b:	85 c0                	test   eax,eax
c0002e3d:	75 d3                	jne    c0002e12 <get_fat+0x6c>
c0002e3f:	0f b6 c3             	movzx  eax,bl
c0002e42:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e48:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4d:	c1 e3 08             	shl    ebx,0x8
c0002e50:	09 c3                	or     ebx,eax
c0002e52:	89 d9                	mov    ecx,ebx
c0002e54:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e5a:	83 e6 01             	and    esi,0x1
c0002e5d:	0f 84 2f 01 00 00    	je     c0002f92 <get_fat+0x1ec>
c0002e63:	89 d9                	mov    ecx,ebx
c0002e65:	c1 e9 04             	shr    ecx,0x4
c0002e68:	e9 25 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 08             	shr    edx,0x8
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 9f f3 ff ff       	call   c000221e <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	75 8f                	jne    c0002e12 <get_fat+0x6c>
c0002e83:	01 f6                	add    esi,esi
c0002e85:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e8f:	e8 ac eb ff ff       	call   c0001a40 <ld_word>
c0002e94:	0f b7 c8             	movzx  ecx,ax
c0002e97:	e9 f6 00 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e9c:	31 c9                	xor    ecx,ecx
c0002e9e:	c1 ea 07             	shr    edx,0x7
c0002ea1:	89 f8                	mov    eax,edi
c0002ea3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea9:	e8 70 f3 ff ff       	call   c000221e <move_window>
c0002eae:	85 c0                	test   eax,eax
c0002eb0:	0f 85 5c ff ff ff    	jne    c0002e12 <get_fat+0x6c>
c0002eb6:	c1 e6 02             	shl    esi,0x2
c0002eb9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec3:	e8 85 eb ff ff       	call   c0001a4d <ld_dword>
c0002ec8:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecd:	e9 b4 00 00 00       	jmp    c0002f86 <get_fat+0x1e0>
c0002ed2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed8:	89 d1                	mov    ecx,edx
c0002eda:	09 c1                	or     ecx,eax
c0002edc:	74 06                	je     c0002ee4 <get_fat+0x13e>
c0002ede:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee2:	75 0f                	jne    c0002ef3 <get_fat+0x14d>
c0002ee4:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee9:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eed:	0f 85 9f 00 00 00    	jne    c0002f92 <get_fat+0x1ec>
c0002ef3:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef7:	89 f5                	mov    ebp,esi
c0002ef9:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002efe:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f01:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f04:	80 f9 02             	cmp    cl,0x2
c0002f07:	75 35                	jne    c0002f3e <get_fat+0x198>
c0002f09:	83 c0 ff             	add    eax,0xffffffff
c0002f0c:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f11:	83 d2 ff             	adc    edx,0xffffffff
c0002f14:	31 db                	xor    ebx,ebx
c0002f16:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1a:	53                   	push   ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	51                   	push   ecx
c0002f1f:	52                   	push   edx
c0002f20:	50                   	push   eax
c0002f21:	e8 86 c2 01 00       	call   c001f1ac <__udivdi3>
c0002f26:	83 c4 10             	add    esp,0x10
c0002f29:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2e:	39 c5                	cmp    ebp,eax
c0002f30:	77 60                	ja     c0002f92 <get_fat+0x1ec>
c0002f32:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f37:	74 59                	je     c0002f92 <get_fat+0x1ec>
c0002f39:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3c:	eb 54                	jmp    c0002f92 <get_fat+0x1ec>
c0002f3e:	80 f9 03             	cmp    cl,0x3
c0002f41:	75 05                	jne    c0002f48 <get_fat+0x1a2>
c0002f43:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f46:	77 f1                	ja     c0002f39 <get_fat+0x193>
c0002f48:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4d:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f51:	75 3f                	jne    c0002f92 <get_fat+0x1ec>
c0002f53:	31 c9                	xor    ecx,ecx
c0002f55:	89 f2                	mov    edx,esi
c0002f57:	89 f8                	mov    eax,edi
c0002f59:	c1 ea 07             	shr    edx,0x7
c0002f5c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f62:	e8 b7 f2 ff ff       	call   c000221e <move_window>
c0002f67:	85 c0                	test   eax,eax
c0002f69:	0f 85 a3 fe ff ff    	jne    c0002e12 <get_fat+0x6c>
c0002f6f:	c1 e6 02             	shl    esi,0x2
c0002f72:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f78:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7c:	e8 cc ea ff ff       	call   c0001a4d <ld_dword>
c0002f81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f86:	89 c1                	mov    ecx,eax
c0002f88:	eb 08                	jmp    c0002f92 <get_fat+0x1ec>
c0002f8a:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8f:	89 c8                	mov    eax,ecx
c0002f91:	c3                   	ret    
c0002f92:	83 c4 1c             	add    esp,0x1c
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	5b                   	pop    ebx
c0002f98:	5e                   	pop    esi
c0002f99:	5f                   	pop    edi
c0002f9a:	5d                   	pop    ebp
c0002f9b:	c3                   	ret    

c0002f9c <dir_sdi>:
c0002f9c:	55                   	push   ebp
c0002f9d:	57                   	push   edi
c0002f9e:	56                   	push   esi
c0002f9f:	53                   	push   ebx
c0002fa0:	89 c3                	mov    ebx,eax
c0002fa2:	83 ec 1c             	sub    esp,0x1c
c0002fa5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa7:	31 c0                	xor    eax,eax
c0002fa9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fac:	0f 94 c0             	sete   al
c0002faf:	48                   	dec    eax
c0002fb0:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb5:	05 00 00 00 10       	add    eax,0x10000000
c0002fba:	39 d0                	cmp    eax,edx
c0002fbc:	77 0a                	ja     c0002fc8 <dir_sdi+0x2c>
c0002fbe:	b8 02 00 00 00       	mov    eax,0x2
c0002fc3:	e9 c4 00 00 00       	jmp    c000308c <dir_sdi+0xf0>
c0002fc8:	89 d6                	mov    esi,edx
c0002fca:	f6 c2 1f             	test   dl,0x1f
c0002fcd:	75 ef                	jne    c0002fbe <dir_sdi+0x22>
c0002fcf:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd2:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd5:	85 c9                	test   ecx,ecx
c0002fd7:	75 2d                	jne    c0003006 <dir_sdi+0x6a>
c0002fd9:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fdc:	77 1b                	ja     c0002ff9 <dir_sdi+0x5d>
c0002fde:	89 f2                	mov    edx,esi
c0002fe0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe4:	c1 ea 05             	shr    edx,0x5
c0002fe7:	39 c2                	cmp    edx,eax
c0002fe9:	73 d3                	jae    c0002fbe <dir_sdi+0x22>
c0002feb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fee:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff7:	eb 4b                	jmp    c0003044 <dir_sdi+0xa8>
c0002ff9:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffc:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003000:	85 c0                	test   eax,eax
c0003002:	74 da                	je     c0002fde <dir_sdi+0x42>
c0003004:	89 c1                	mov    ecx,eax
c0003006:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000300a:	c1 e5 09             	shl    ebp,0x9
c000300d:	89 ca                	mov    edx,ecx
c000300f:	39 ee                	cmp    esi,ebp
c0003011:	72 1c                	jb     c000302f <dir_sdi+0x93>
c0003013:	89 d8                	mov    eax,ebx
c0003015:	e8 8c fd ff ff       	call   c0002da6 <get_fat>
c000301a:	89 c1                	mov    ecx,eax
c000301c:	83 f8 ff             	cmp    eax,0xffffffff
c000301f:	74 66                	je     c0003087 <dir_sdi+0xeb>
c0003021:	83 f8 01             	cmp    eax,0x1
c0003024:	76 98                	jbe    c0002fbe <dir_sdi+0x22>
c0003026:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003029:	76 93                	jbe    c0002fbe <dir_sdi+0x22>
c000302b:	29 ee                	sub    esi,ebp
c000302d:	eb de                	jmp    c000300d <dir_sdi+0x71>
c000302f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003033:	89 f8                	mov    eax,edi
c0003035:	e8 9f ec ff ff       	call   c0001cd9 <clst2sect>
c000303a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003041:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003044:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003047:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000304d:	89 d1                	mov    ecx,edx
c000304f:	09 c1                	or     ecx,eax
c0003051:	0f 84 67 ff ff ff    	je     c0002fbe <dir_sdi+0x22>
c0003057:	89 f1                	mov    ecx,esi
c0003059:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003061:	c1 e9 09             	shr    ecx,0x9
c0003064:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003068:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003070:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003073:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003079:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003080:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003083:	31 c0                	xor    eax,eax
c0003085:	eb 05                	jmp    c000308c <dir_sdi+0xf0>
c0003087:	b8 01 00 00 00       	mov    eax,0x1
c000308c:	83 c4 1c             	add    esp,0x1c
c000308f:	5b                   	pop    ebx
c0003090:	5e                   	pop    esi
c0003091:	5f                   	pop    edi
c0003092:	5d                   	pop    ebp
c0003093:	c3                   	ret    

c0003094 <create_chain>:
c0003094:	55                   	push   ebp
c0003095:	89 c5                	mov    ebp,eax
c0003097:	57                   	push   edi
c0003098:	56                   	push   esi
c0003099:	53                   	push   ebx
c000309a:	83 ec 1c             	sub    esp,0x1c
c000309d:	85 d2                	test   edx,edx
c000309f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a3:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a5:	75 0e                	jne    c00030b5 <create_chain+0x21>
c00030a7:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030aa:	85 ff                	test   edi,edi
c00030ac:	74 39                	je     c00030e7 <create_chain+0x53>
c00030ae:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b1:	77 39                	ja     c00030ec <create_chain+0x58>
c00030b3:	eb 32                	jmp    c00030e7 <create_chain+0x53>
c00030b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b9:	e8 e8 fc ff ff       	call   c0002da6 <get_fat>
c00030be:	89 c3                	mov    ebx,eax
c00030c0:	83 f8 01             	cmp    eax,0x1
c00030c3:	77 0a                	ja     c00030cf <create_chain+0x3b>
c00030c5:	bb 01 00 00 00       	mov    ebx,0x1
c00030ca:	e9 ba 01 00 00       	jmp    c0003289 <create_chain+0x1f5>
c00030cf:	83 f8 ff             	cmp    eax,0xffffffff
c00030d2:	0f 84 62 01 00 00    	je     c000323a <create_chain+0x1a6>
c00030d8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030db:	0f 87 a8 01 00 00    	ja     c0003289 <create_chain+0x1f5>
c00030e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e5:	eb 05                	jmp    c00030ec <create_chain+0x58>
c00030e7:	bf 01 00 00 00       	mov    edi,0x1
c00030ec:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f0:	75 07                	jne    c00030f9 <create_chain+0x65>
c00030f2:	31 db                	xor    ebx,ebx
c00030f4:	e9 90 01 00 00       	jmp    c0003289 <create_chain+0x1f5>
c00030f9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fc:	75 74                	jne    c0003172 <create_chain+0xde>
c00030fe:	b9 01 00 00 00       	mov    ecx,0x1
c0003103:	89 fa                	mov    edx,edi
c0003105:	89 f0                	mov    eax,esi
c0003107:	e8 2d f9 ff ff       	call   c0002a39 <find_bitmap>
c000310c:	89 c3                	mov    ebx,eax
c000310e:	8d 40 ff             	lea    eax,[eax-0x1]
c0003111:	83 f8 fd             	cmp    eax,0xfffffffd
c0003114:	0f 87 6f 01 00 00    	ja     c0003289 <create_chain+0x1f5>
c000311a:	83 ec 0c             	sub    esp,0xc
c000311d:	b9 01 00 00 00       	mov    ecx,0x1
c0003122:	6a 01                	push   0x1
c0003124:	89 da                	mov    edx,ebx
c0003126:	89 f0                	mov    eax,esi
c0003128:	e8 bf f9 ff ff       	call   c0002aec <change_bitmap>
c000312d:	83 c4 10             	add    esp,0x10
c0003130:	83 f8 02             	cmp    eax,0x2
c0003133:	74 90                	je     c00030c5 <create_chain+0x31>
c0003135:	83 f8 01             	cmp    eax,0x1
c0003138:	0f 84 fc 00 00 00    	je     c000323a <create_chain+0x1a6>
c000313e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003143:	75 09                	jne    c000314e <create_chain+0xba>
c0003145:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003149:	e9 0c 01 00 00       	jmp    c000325a <create_chain+0x1c6>
c000314e:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003152:	0f 85 e7 00 00 00    	jne    c000323f <create_chain+0x1ab>
c0003158:	8d 57 01             	lea    edx,[edi+0x1]
c000315b:	39 da                	cmp    edx,ebx
c000315d:	0f 84 f7 00 00 00    	je     c000325a <create_chain+0x1c6>
c0003163:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003166:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000316a:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316d:	e9 cd 00 00 00       	jmp    c000323f <create_chain+0x1ab>
c0003172:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003176:	75 41                	jne    c00031b9 <create_chain+0x125>
c0003178:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317b:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317e:	77 05                	ja     c0003185 <create_chain+0xf1>
c0003180:	bb 02 00 00 00       	mov    ebx,0x2
c0003185:	89 da                	mov    edx,ebx
c0003187:	89 e8                	mov    eax,ebp
c0003189:	e8 18 fc ff ff       	call   c0002da6 <get_fat>
c000318e:	83 f8 01             	cmp    eax,0x1
c0003191:	0f 84 2e ff ff ff    	je     c00030c5 <create_chain+0x31>
c0003197:	83 f8 ff             	cmp    eax,0xffffffff
c000319a:	0f 84 9a 00 00 00    	je     c000323a <create_chain+0x1a6>
c00031a0:	85 c0                	test   eax,eax
c00031a2:	74 11                	je     c00031b5 <create_chain+0x121>
c00031a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a7:	83 f8 01             	cmp    eax,0x1
c00031aa:	76 0d                	jbe    c00031b9 <create_chain+0x125>
c00031ac:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031af:	76 08                	jbe    c00031b9 <create_chain+0x125>
c00031b1:	89 c7                	mov    edi,eax
c00031b3:	eb 04                	jmp    c00031b9 <create_chain+0x125>
c00031b5:	85 db                	test   ebx,ebx
c00031b7:	75 38                	jne    c00031f1 <create_chain+0x15d>
c00031b9:	89 fb                	mov    ebx,edi
c00031bb:	43                   	inc    ebx
c00031bc:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031bf:	77 0e                	ja     c00031cf <create_chain+0x13b>
c00031c1:	83 ff 01             	cmp    edi,0x1
c00031c4:	0f 86 28 ff ff ff    	jbe    c00030f2 <create_chain+0x5e>
c00031ca:	bb 02 00 00 00       	mov    ebx,0x2
c00031cf:	89 da                	mov    edx,ebx
c00031d1:	89 e8                	mov    eax,ebp
c00031d3:	e8 ce fb ff ff       	call   c0002da6 <get_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	74 15                	je     c00031f1 <create_chain+0x15d>
c00031dc:	83 f8 01             	cmp    eax,0x1
c00031df:	0f 84 e0 fe ff ff    	je     c00030c5 <create_chain+0x31>
c00031e5:	40                   	inc    eax
c00031e6:	74 52                	je     c000323a <create_chain+0x1a6>
c00031e8:	39 fb                	cmp    ebx,edi
c00031ea:	75 cf                	jne    c00031bb <create_chain+0x127>
c00031ec:	e9 01 ff ff ff       	jmp    c00030f2 <create_chain+0x5e>
c00031f1:	83 c9 ff             	or     ecx,0xffffffff
c00031f4:	89 da                	mov    edx,ebx
c00031f6:	89 f0                	mov    eax,esi
c00031f8:	e8 a4 f9 ff ff       	call   c0002ba1 <put_fat>
c00031fd:	85 c0                	test   eax,eax
c00031ff:	75 32                	jne    c0003233 <create_chain+0x19f>
c0003201:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003206:	74 11                	je     c0003219 <create_chain+0x185>
c0003208:	89 d9                	mov    ecx,ebx
c000320a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320e:	89 f0                	mov    eax,esi
c0003210:	e8 8c f9 ff ff       	call   c0002ba1 <put_fat>
c0003215:	85 c0                	test   eax,eax
c0003217:	75 1a                	jne    c0003233 <create_chain+0x19f>
c0003219:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321c:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000321f:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003222:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 04                	ja     c000322d <create_chain+0x199>
c0003229:	48                   	dec    eax
c000322a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322d:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003231:	eb 56                	jmp    c0003289 <create_chain+0x1f5>
c0003233:	48                   	dec    eax
c0003234:	0f 85 8b fe ff ff    	jne    c00030c5 <create_chain+0x31>
c000323a:	83 cb ff             	or     ebx,0xffffffff
c000323d:	eb 4a                	jmp    c0003289 <create_chain+0x1f5>
c000323f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003243:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003246:	41                   	inc    ecx
c0003247:	39 d9                	cmp    ecx,ebx
c0003249:	75 19                	jne    c0003264 <create_chain+0x1d0>
c000324b:	b9 02 00 00 00       	mov    ecx,0x2
c0003250:	85 d2                	test   edx,edx
c0003252:	74 03                	je     c0003257 <create_chain+0x1c3>
c0003254:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003257:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325a:	85 c0                	test   eax,eax
c000325c:	0f 85 63 fe ff ff    	jne    c00030c5 <create_chain+0x31>
c0003262:	eb b5                	jmp    c0003219 <create_chain+0x185>
c0003264:	85 d2                	test   edx,edx
c0003266:	75 07                	jne    c000326f <create_chain+0x1db>
c0003268:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000326f:	89 d9                	mov    ecx,ebx
c0003271:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003275:	89 e8                	mov    eax,ebp
c0003277:	e8 bb fa ff ff       	call   c0002d37 <fill_last_frag>
c000327c:	85 c0                	test   eax,eax
c000327e:	75 b3                	jne    c0003233 <create_chain+0x19f>
c0003280:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003287:	eb 90                	jmp    c0003219 <create_chain+0x185>
c0003289:	83 c4 1c             	add    esp,0x1c
c000328c:	89 d8                	mov    eax,ebx
c000328e:	5b                   	pop    ebx
c000328f:	5e                   	pop    esi
c0003290:	5f                   	pop    edi
c0003291:	5d                   	pop    ebp
c0003292:	c3                   	ret    

c0003293 <remove_chain>:
c0003293:	55                   	push   ebp
c0003294:	57                   	push   edi
c0003295:	56                   	push   esi
c0003296:	53                   	push   ebx
c0003297:	83 ec 1c             	sub    esp,0x1c
c000329a:	83 fa 01             	cmp    edx,0x1
c000329d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a1:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a3:	77 0a                	ja     c00032af <remove_chain+0x1c>
c00032a5:	b8 02 00 00 00       	mov    eax,0x2
c00032aa:	e9 24 01 00 00       	jmp    c00033d3 <remove_chain+0x140>
c00032af:	89 d6                	mov    esi,edx
c00032b1:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b4:	76 ef                	jbe    c00032a5 <remove_chain+0x12>
c00032b6:	89 c7                	mov    edi,eax
c00032b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032bd:	75 06                	jne    c00032c5 <remove_chain+0x32>
c00032bf:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c3:	eb 54                	jmp    c0003319 <remove_chain+0x86>
c00032c5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c8:	75 06                	jne    c00032d0 <remove_chain+0x3d>
c00032ca:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032ce:	74 ef                	je     c00032bf <remove_chain+0x2c>
c00032d0:	83 c9 ff             	or     ecx,0xffffffff
c00032d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d7:	89 d8                	mov    eax,ebx
c00032d9:	e8 c3 f8 ff ff       	call   c0002ba1 <put_fat>
c00032de:	85 c0                	test   eax,eax
c00032e0:	74 dd                	je     c00032bf <remove_chain+0x2c>
c00032e2:	e9 ec 00 00 00       	jmp    c00033d3 <remove_chain+0x140>
c00032e7:	83 f8 01             	cmp    eax,0x1
c00032ea:	74 b9                	je     c00032a5 <remove_chain+0x12>
c00032ec:	83 f8 ff             	cmp    eax,0xffffffff
c00032ef:	74 6d                	je     c000335e <remove_chain+0xcb>
c00032f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f4:	75 6f                	jne    c0003365 <remove_chain+0xd2>
c00032f6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f9:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fc:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032ff:	39 d0                	cmp    eax,edx
c0003301:	73 08                	jae    c000330b <remove_chain+0x78>
c0003303:	40                   	inc    eax
c0003304:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003308:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330b:	8d 4e 01             	lea    ecx,[esi+0x1]
c000330e:	39 e9                	cmp    ecx,ebp
c0003310:	75 64                	jne    c0003376 <remove_chain+0xe3>
c0003312:	89 ee                	mov    esi,ebp
c0003314:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003317:	76 0f                	jbe    c0003328 <remove_chain+0x95>
c0003319:	89 f2                	mov    edx,esi
c000331b:	89 f8                	mov    eax,edi
c000331d:	e8 84 fa ff ff       	call   c0002da6 <get_fat>
c0003322:	89 c5                	mov    ebp,eax
c0003324:	85 c0                	test   eax,eax
c0003326:	75 bf                	jne    c00032e7 <remove_chain+0x54>
c0003328:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332b:	0f 85 a0 00 00 00    	jne    c00033d1 <remove_chain+0x13e>
c0003331:	eb 6c                	jmp    c000339f <remove_chain+0x10c>
c0003333:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003336:	84 c0                	test   al,al
c0003338:	75 7d                	jne    c00033b7 <remove_chain+0x124>
c000333a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333d:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003341:	0f 84 86 00 00 00    	je     c00033cd <remove_chain+0x13a>
c0003347:	89 da                	mov    edx,ebx
c0003349:	89 f8                	mov    eax,edi
c000334b:	e8 56 fa ff ff       	call   c0002da6 <get_fat>
c0003350:	83 f8 01             	cmp    eax,0x1
c0003353:	0f 86 4c ff ff ff    	jbe    c00032a5 <remove_chain+0x12>
c0003359:	83 f8 ff             	cmp    eax,0xffffffff
c000335c:	75 4e                	jne    c00033ac <remove_chain+0x119>
c000335e:	b8 01 00 00 00       	mov    eax,0x1
c0003363:	eb 6e                	jmp    c00033d3 <remove_chain+0x140>
c0003365:	31 c9                	xor    ecx,ecx
c0003367:	89 f2                	mov    edx,esi
c0003369:	89 d8                	mov    eax,ebx
c000336b:	e8 31 f8 ff ff       	call   c0002ba1 <put_fat>
c0003370:	85 c0                	test   eax,eax
c0003372:	74 82                	je     c00032f6 <remove_chain+0x63>
c0003374:	eb 5d                	jmp    c00033d3 <remove_chain+0x140>
c0003376:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003379:	75 1b                	jne    c0003396 <remove_chain+0x103>
c000337b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000337f:	89 d8                	mov    eax,ebx
c0003381:	83 ec 0c             	sub    esp,0xc
c0003384:	6a 00                	push   0x0
c0003386:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338a:	e8 5d f7 ff ff       	call   c0002aec <change_bitmap>
c000338f:	83 c4 10             	add    esp,0x10
c0003392:	85 c0                	test   eax,eax
c0003394:	75 3d                	jne    c00033d3 <remove_chain+0x140>
c0003396:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339a:	e9 73 ff ff ff       	jmp    c0003312 <remove_chain+0x7f>
c000339f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a4:	75 8d                	jne    c0003333 <remove_chain+0xa0>
c00033a6:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033aa:	eb 25                	jmp    c00033d1 <remove_chain+0x13e>
c00033ac:	8d 53 01             	lea    edx,[ebx+0x1]
c00033af:	89 c3                	mov    ebx,eax
c00033b1:	39 c2                	cmp    edx,eax
c00033b3:	74 88                	je     c000333d <remove_chain+0xaa>
c00033b5:	eb 1a                	jmp    c00033d1 <remove_chain+0x13e>
c00033b7:	3c 03                	cmp    al,0x3
c00033b9:	75 16                	jne    c00033d1 <remove_chain+0x13e>
c00033bb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033be:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c2:	77 0d                	ja     c00033d1 <remove_chain+0x13e>
c00033c4:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cb:	72 04                	jb     c00033d1 <remove_chain+0x13e>
c00033cd:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d1:	31 c0                	xor    eax,eax
c00033d3:	83 c4 1c             	add    esp,0x1c
c00033d6:	5b                   	pop    ebx
c00033d7:	5e                   	pop    esi
c00033d8:	5f                   	pop    edi
c00033d9:	5d                   	pop    ebp
c00033da:	c3                   	ret    

c00033db <dir_clear>:
c00033db:	55                   	push   ebp
c00033dc:	57                   	push   edi
c00033dd:	56                   	push   esi
c00033de:	89 c6                	mov    esi,eax
c00033e0:	53                   	push   ebx
c00033e1:	83 ec 1c             	sub    esp,0x1c
c00033e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e8:	e8 9d ed ff ff       	call   c000218a <sync_window>
c00033ed:	85 c0                	test   eax,eax
c00033ef:	0f 85 de 00 00 00    	jne    c00034d3 <dir_clear+0xf8>
c00033f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fe:	e8 d6 e8 ff ff       	call   c0001cd9 <clst2sect>
c0003403:	b9 00 02 00 00       	mov    ecx,0x200
c0003408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003410:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003413:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003416:	89 e8                	mov    eax,ebp
c0003418:	31 d2                	xor    edx,edx
c000341a:	e8 b5 e6 ff ff       	call   c0001ad4 <mem_set>
c000341f:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003423:	c1 e3 09             	shl    ebx,0x9
c0003426:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342c:	76 1f                	jbe    c000344d <dir_clear+0x72>
c000342e:	bb 00 80 00 00       	mov    ebx,0x8000
c0003433:	eb 18                	jmp    c000344d <dir_clear+0x72>
c0003435:	83 ec 0c             	sub    esp,0xc
c0003438:	53                   	push   ebx
c0003439:	e8 35 4e 00 00       	call   c0008273 <ff_memalloc>
c000343e:	83 c4 10             	add    esp,0x10
c0003441:	89 c7                	mov    edi,eax
c0003443:	85 c0                	test   eax,eax
c0003445:	0f 85 8f 00 00 00    	jne    c00034da <dir_clear+0xff>
c000344b:	d1 eb                	shr    ebx,1
c000344d:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003453:	77 e0                	ja     c0003435 <dir_clear+0x5a>
c0003455:	31 db                	xor    ebx,ebx
c0003457:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345b:	39 d8                	cmp    eax,ebx
c000345d:	76 66                	jbe    c00034c5 <dir_clear+0xea>
c000345f:	83 ec 0c             	sub    esp,0xc
c0003462:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003466:	6a 01                	push   0x1
c0003468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003470:	55                   	push   ebp
c0003471:	50                   	push   eax
c0003472:	e8 94 e5 ff ff       	call   c0001a0b <disk_write>
c0003477:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347c:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003481:	83 c4 20             	add    esp,0x20
c0003484:	85 c0                	test   eax,eax
c0003486:	75 3d                	jne    c00034c5 <dir_clear+0xea>
c0003488:	43                   	inc    ebx
c0003489:	eb cc                	jmp    c0003457 <dir_clear+0x7c>
c000348b:	83 ec 0c             	sub    esp,0xc
c000348e:	31 d2                	xor    edx,edx
c0003490:	55                   	push   ebp
c0003491:	89 d8                	mov    eax,ebx
c0003493:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003497:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349b:	52                   	push   edx
c000349c:	50                   	push   eax
c000349d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a1:	57                   	push   edi
c00034a2:	50                   	push   eax
c00034a3:	e8 63 e5 ff ff       	call   c0001a0b <disk_write>
c00034a8:	83 c4 20             	add    esp,0x20
c00034ab:	85 c0                	test   eax,eax
c00034ad:	75 0a                	jne    c00034b9 <dir_clear+0xde>
c00034af:	01 eb                	add    ebx,ebp
c00034b1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b5:	39 d8                	cmp    eax,ebx
c00034b7:	77 d2                	ja     c000348b <dir_clear+0xb0>
c00034b9:	83 ec 0c             	sub    esp,0xc
c00034bc:	57                   	push   edi
c00034bd:	e8 c7 4d 00 00       	call   c0008289 <ff_memfree>
c00034c2:	83 c4 10             	add    esp,0x10
c00034c5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c9:	39 d8                	cmp    eax,ebx
c00034cb:	0f 95 c0             	setne  al
c00034ce:	0f b6 c0             	movzx  eax,al
c00034d1:	eb 19                	jmp    c00034ec <dir_clear+0x111>
c00034d3:	b8 01 00 00 00       	mov    eax,0x1
c00034d8:	eb 12                	jmp    c00034ec <dir_clear+0x111>
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	31 d2                	xor    edx,edx
c00034de:	c1 eb 09             	shr    ebx,0x9
c00034e1:	e8 ee e5 ff ff       	call   c0001ad4 <mem_set>
c00034e6:	89 dd                	mov    ebp,ebx
c00034e8:	31 db                	xor    ebx,ebx
c00034ea:	eb c5                	jmp    c00034b1 <dir_clear+0xd6>
c00034ec:	83 c4 1c             	add    esp,0x1c
c00034ef:	5b                   	pop    ebx
c00034f0:	5e                   	pop    esi
c00034f1:	5f                   	pop    edi
c00034f2:	5d                   	pop    ebp
c00034f3:	c3                   	ret    

c00034f4 <dir_next>:
c00034f4:	55                   	push   ebp
c00034f5:	57                   	push   edi
c00034f6:	56                   	push   esi
c00034f7:	53                   	push   ebx
c00034f8:	89 c3                	mov    ebx,eax
c00034fa:	83 ec 1c             	sub    esp,0x1c
c00034fd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003503:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003506:	8d 78 20             	lea    edi,[eax+0x20]
c0003509:	31 c0                	xor    eax,eax
c000350b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000350f:	0f 94 c0             	sete   al
c0003512:	48                   	dec    eax
c0003513:	25 00 00 20 f0       	and    eax,0xf0200000
c0003518:	05 00 00 00 10       	add    eax,0x10000000
c000351d:	39 f8                	cmp    eax,edi
c000351f:	77 0e                	ja     c000352f <dir_next+0x3b>
c0003521:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003528:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000352f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003532:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003535:	b8 04 00 00 00       	mov    eax,0x4
c000353a:	89 ce                	mov    esi,ecx
c000353c:	09 d6                	or     esi,edx
c000353e:	0f 84 da 00 00 00    	je     c000361e <dir_next+0x12a>
c0003544:	89 f8                	mov    eax,edi
c0003546:	25 ff 01 00 00       	and    eax,0x1ff
c000354b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000354f:	0f 85 b9 00 00 00    	jne    c000360e <dir_next+0x11a>
c0003555:	83 c2 01             	add    edx,0x1
c0003558:	83 d1 00             	adc    ecx,0x0
c000355b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000355e:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003561:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003564:	85 d2                	test   edx,edx
c0003566:	75 29                	jne    c0003591 <dir_next+0x9d>
c0003568:	89 fa                	mov    edx,edi
c000356a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000356e:	c1 ea 05             	shr    edx,0x5
c0003571:	39 c2                	cmp    edx,eax
c0003573:	0f 82 95 00 00 00    	jb     c000360e <dir_next+0x11a>
c0003579:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003580:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003587:	b8 04 00 00 00       	mov    eax,0x4
c000358c:	e9 8d 00 00 00       	jmp    c000361e <dir_next+0x12a>
c0003591:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003595:	89 f9                	mov    ecx,edi
c0003597:	48                   	dec    eax
c0003598:	c1 e9 09             	shr    ecx,0x9
c000359b:	85 c8                	test   eax,ecx
c000359d:	75 6f                	jne    c000360e <dir_next+0x11a>
c000359f:	89 d8                	mov    eax,ebx
c00035a1:	e8 00 f8 ff ff       	call   c0002da6 <get_fat>
c00035a6:	89 c6                	mov    esi,eax
c00035a8:	83 f8 01             	cmp    eax,0x1
c00035ab:	77 07                	ja     c00035b4 <dir_next+0xc0>
c00035ad:	b8 02 00 00 00       	mov    eax,0x2
c00035b2:	eb 6a                	jmp    c000361e <dir_next+0x12a>
c00035b4:	83 f8 ff             	cmp    eax,0xffffffff
c00035b7:	75 07                	jne    c00035c0 <dir_next+0xcc>
c00035b9:	b8 01 00 00 00       	mov    eax,0x1
c00035be:	eb 5e                	jmp    c000361e <dir_next+0x12a>
c00035c0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c3:	77 37                	ja     c00035fc <dir_next+0x108>
c00035c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035ca:	74 ad                	je     c0003579 <dir_next+0x85>
c00035cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035cf:	89 d8                	mov    eax,ebx
c00035d1:	e8 be fa ff ff       	call   c0003094 <create_chain>
c00035d6:	89 c6                	mov    esi,eax
c00035d8:	b8 07 00 00 00       	mov    eax,0x7
c00035dd:	85 f6                	test   esi,esi
c00035df:	74 3d                	je     c000361e <dir_next+0x12a>
c00035e1:	83 fe 01             	cmp    esi,0x1
c00035e4:	74 c7                	je     c00035ad <dir_next+0xb9>
c00035e6:	83 fe ff             	cmp    esi,0xffffffff
c00035e9:	74 ce                	je     c00035b9 <dir_next+0xc5>
c00035eb:	89 f2                	mov    edx,esi
c00035ed:	89 e8                	mov    eax,ebp
c00035ef:	e8 e7 fd ff ff       	call   c00033db <dir_clear>
c00035f4:	85 c0                	test   eax,eax
c00035f6:	75 c1                	jne    c00035b9 <dir_next+0xc5>
c00035f8:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035ff:	89 f2                	mov    edx,esi
c0003601:	89 e8                	mov    eax,ebp
c0003603:	e8 d1 e6 ff ff       	call   c0001cd9 <clst2sect>
c0003608:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000360e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003612:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003615:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003619:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361c:	31 c0                	xor    eax,eax
c000361e:	83 c4 1c             	add    esp,0x1c
c0003621:	5b                   	pop    ebx
c0003622:	5e                   	pop    esi
c0003623:	5f                   	pop    edi
c0003624:	5d                   	pop    ebp
c0003625:	c3                   	ret    

c0003626 <load_xdir>:
c0003626:	55                   	push   ebp
c0003627:	57                   	push   edi
c0003628:	56                   	push   esi
c0003629:	89 c6                	mov    esi,eax
c000362b:	53                   	push   ebx
c000362c:	83 ec 1c             	sub    esp,0x1c
c000362f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003631:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003634:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003637:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363a:	e8 df eb ff ff       	call   c000221e <move_window>
c000363f:	89 c3                	mov    ebx,eax
c0003641:	85 c0                	test   eax,eax
c0003643:	0f 85 0c 01 00 00    	jne    c0003755 <load_xdir+0x12f>
c0003649:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364c:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000364f:	0f 85 fb 00 00 00    	jne    c0003750 <load_xdir+0x12a>
c0003655:	89 f8                	mov    eax,edi
c0003657:	b9 20 00 00 00       	mov    ecx,0x20
c000365c:	e8 5e e4 ff ff       	call   c0001abf <mem_cpy>
c0003661:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003665:	40                   	inc    eax
c0003666:	c1 e0 05             	shl    eax,0x5
c0003669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366d:	83 e8 60             	sub    eax,0x60
c0003670:	3d 00 02 00 00       	cmp    eax,0x200
c0003675:	0f 87 d5 00 00 00    	ja     c0003750 <load_xdir+0x12a>
c000367b:	31 d2                	xor    edx,edx
c000367d:	89 f0                	mov    eax,esi
c000367f:	e8 70 fe ff ff       	call   c00034f4 <dir_next>
c0003684:	89 c3                	mov    ebx,eax
c0003686:	83 f8 04             	cmp    eax,0x4
c0003689:	0f 84 c1 00 00 00    	je     c0003750 <load_xdir+0x12a>
c000368f:	85 c0                	test   eax,eax
c0003691:	0f 85 be 00 00 00    	jne    c0003755 <load_xdir+0x12f>
c0003697:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369d:	8b 06                	mov    eax,DWORD PTR [esi]
c000369f:	e8 7a eb ff ff       	call   c000221e <move_window>
c00036a4:	89 c3                	mov    ebx,eax
c00036a6:	85 c0                	test   eax,eax
c00036a8:	0f 85 a7 00 00 00    	jne    c0003755 <load_xdir+0x12f>
c00036ae:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b1:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b4:	0f 85 96 00 00 00    	jne    c0003750 <load_xdir+0x12a>
c00036ba:	8d 47 20             	lea    eax,[edi+0x20]
c00036bd:	b9 20 00 00 00       	mov    ecx,0x20
c00036c2:	e8 f8 e3 ff ff       	call   c0001abf <mem_cpy>
c00036c7:	31 d2                	xor    edx,edx
c00036c9:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036cd:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d2:	83 c0 2c             	add    eax,0x2c
c00036d5:	f7 f1                	div    ecx
c00036d7:	c1 e0 05             	shl    eax,0x5
c00036da:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036de:	77 70                	ja     c0003750 <load_xdir+0x12a>
c00036e0:	bd 40 00 00 00       	mov    ebp,0x40
c00036e5:	31 d2                	xor    edx,edx
c00036e7:	89 f0                	mov    eax,esi
c00036e9:	e8 06 fe ff ff       	call   c00034f4 <dir_next>
c00036ee:	89 c3                	mov    ebx,eax
c00036f0:	83 f8 04             	cmp    eax,0x4
c00036f3:	74 5b                	je     c0003750 <load_xdir+0x12a>
c00036f5:	85 c0                	test   eax,eax
c00036f7:	75 5c                	jne    c0003755 <load_xdir+0x12f>
c00036f9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fc:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0003701:	e8 18 eb ff ff       	call   c000221e <move_window>
c0003706:	89 c3                	mov    ebx,eax
c0003708:	85 c0                	test   eax,eax
c000370a:	75 49                	jne    c0003755 <load_xdir+0x12f>
c000370c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000370f:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003712:	75 3c                	jne    c0003750 <load_xdir+0x12a>
c0003714:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371a:	77 0d                	ja     c0003729 <load_xdir+0x103>
c000371c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000371f:	b9 20 00 00 00       	mov    ecx,0x20
c0003724:	e8 96 e3 ff ff       	call   c0001abf <mem_cpy>
c0003729:	83 c5 20             	add    ebp,0x20
c000372c:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003730:	77 b3                	ja     c00036e5 <load_xdir+0xbf>
c0003732:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003738:	77 1b                	ja     c0003755 <load_xdir+0x12f>
c000373a:	89 f8                	mov    eax,edi
c000373c:	e8 cd e7 ff ff       	call   c0001f0e <xdir_sum>
c0003741:	89 c1                	mov    ecx,eax
c0003743:	8d 47 02             	lea    eax,[edi+0x2]
c0003746:	e8 f5 e2 ff ff       	call   c0001a40 <ld_word>
c000374b:	66 39 c1             	cmp    cx,ax
c000374e:	74 05                	je     c0003755 <load_xdir+0x12f>
c0003750:	bb 02 00 00 00       	mov    ebx,0x2
c0003755:	83 c4 1c             	add    esp,0x1c
c0003758:	89 d8                	mov    eax,ebx
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <load_obj_xdir>:
c000375f:	53                   	push   ebx
c0003760:	89 c3                	mov    ebx,eax
c0003762:	83 ec 08             	sub    esp,0x8
c0003765:	8b 02                	mov    eax,DWORD PTR [edx]
c0003767:	89 03                	mov    DWORD PTR [ebx],eax
c0003769:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003775:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003778:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000377f:	30 c0                	xor    al,al
c0003781:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003788:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378b:	89 d8                	mov    eax,ebx
c000378d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003790:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003793:	e8 04 f8 ff ff       	call   c0002f9c <dir_sdi>
c0003798:	85 c0                	test   eax,eax
c000379a:	75 0b                	jne    c00037a7 <load_obj_xdir+0x48>
c000379c:	89 d8                	mov    eax,ebx
c000379e:	83 c4 08             	add    esp,0x8
c00037a1:	5b                   	pop    ebx
c00037a2:	e9 7f fe ff ff       	jmp    c0003626 <load_xdir>
c00037a7:	83 c4 08             	add    esp,0x8
c00037aa:	5b                   	pop    ebx
c00037ab:	c3                   	ret    

c00037ac <dir_read>:
c00037ac:	55                   	push   ebp
c00037ad:	bd 04 00 00 00       	mov    ebp,0x4
c00037b2:	57                   	push   edi
c00037b3:	56                   	push   esi
c00037b4:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b9:	53                   	push   ebx
c00037ba:	89 c3                	mov    ebx,eax
c00037bc:	83 ec 1c             	sub    esp,0x1c
c00037bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c3:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c5:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037ca:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037cd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d0:	89 c8                	mov    eax,ecx
c00037d2:	09 d0                	or     eax,edx
c00037d4:	0f 84 25 01 00 00    	je     c00038ff <dir_read+0x153>
c00037da:	89 f8                	mov    eax,edi
c00037dc:	e8 3d ea ff ff       	call   c000221e <move_window>
c00037e1:	89 c5                	mov    ebp,eax
c00037e3:	85 c0                	test   eax,eax
c00037e5:	0f 85 23 01 00 00    	jne    c000390e <dir_read+0x162>
c00037eb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037ee:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f0:	84 c9                	test   cl,cl
c00037f2:	0f 84 11 01 00 00    	je     c0003909 <dir_read+0x15d>
c00037f8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fb:	75 48                	jne    c0003845 <dir_read+0x99>
c00037fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003802:	74 10                	je     c0003814 <dir_read+0x68>
c0003804:	80 f9 83             	cmp    cl,0x83
c0003807:	0f 85 dd 00 00 00    	jne    c00038ea <dir_read+0x13e>
c000380d:	31 ed                	xor    ebp,ebp
c000380f:	e9 08 01 00 00       	jmp    c000391c <dir_read+0x170>
c0003814:	80 f9 85             	cmp    cl,0x85
c0003817:	0f 85 cd 00 00 00    	jne    c00038ea <dir_read+0x13e>
c000381d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003820:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003823:	89 d8                	mov    eax,ebx
c0003825:	e8 fc fd ff ff       	call   c0003626 <load_xdir>
c000382a:	89 c5                	mov    ebp,eax
c000382c:	85 c0                	test   eax,eax
c000382e:	0f 85 da 00 00 00    	jne    c000390e <dir_read+0x162>
c0003834:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003837:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383a:	83 e0 3f             	and    eax,0x3f
c000383d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003840:	e9 d7 00 00 00       	jmp    c000391c <dir_read+0x170>
c0003845:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003848:	83 e0 3f             	and    eax,0x3f
c000384b:	80 f9 2e             	cmp    cl,0x2e
c000384e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003852:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003855:	0f 84 8a 00 00 00    	je     c00038e5 <dir_read+0x139>
c000385b:	80 f9 e5             	cmp    cl,0xe5
c000385e:	0f 84 81 00 00 00    	je     c00038e5 <dir_read+0x139>
c0003864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003868:	83 e0 1f             	and    eax,0x1f
c000386b:	83 f8 08             	cmp    eax,0x8
c000386e:	0f 94 c0             	sete   al
c0003871:	0f b6 c0             	movzx  eax,al
c0003874:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003878:	75 6b                	jne    c00038e5 <dir_read+0x139>
c000387a:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000387f:	75 44                	jne    c00038c5 <dir_read+0x119>
c0003881:	f6 c1 40             	test   cl,0x40
c0003884:	74 12                	je     c0003898 <dir_read+0xec>
c0003886:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003889:	83 e1 bf             	and    ecx,0xffffffbf
c000388c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003890:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003893:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003896:	eb 06                	jmp    c000389e <dir_read+0xf2>
c0003898:	89 f0                	mov    eax,esi
c000389a:	38 c8                	cmp    al,cl
c000389c:	75 47                	jne    c00038e5 <dir_read+0x139>
c000389e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a2:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a7:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038aa:	75 3e                	jne    c00038ea <dir_read+0x13e>
c00038ac:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b3:	e8 8a e4 ff ff       	call   c0001d42 <pick_lfn>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	74 2e                	je     c00038ea <dir_read+0x13e>
c00038bc:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c0:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c3:	eb 25                	jmp    c00038ea <dir_read+0x13e>
c00038c5:	89 f0                	mov    eax,esi
c00038c7:	84 c0                	test   al,al
c00038c9:	75 11                	jne    c00038dc <dir_read+0x130>
c00038cb:	89 d0                	mov    eax,edx
c00038cd:	e8 2a e6 ff ff       	call   c0001efc <sum_sfn>
c00038d2:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d6:	0f 84 31 ff ff ff    	je     c000380d <dir_read+0x61>
c00038dc:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e3:	eb 37                	jmp    c000391c <dir_read+0x170>
c00038e5:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ea:	31 d2                	xor    edx,edx
c00038ec:	89 d8                	mov    eax,ebx
c00038ee:	e8 01 fc ff ff       	call   c00034f4 <dir_next>
c00038f3:	89 c5                	mov    ebp,eax
c00038f5:	85 c0                	test   eax,eax
c00038f7:	0f 84 cd fe ff ff    	je     c00037ca <dir_read+0x1e>
c00038fd:	eb 0f                	jmp    c000390e <dir_read+0x162>
c00038ff:	85 ed                	test   ebp,ebp
c0003901:	0f 84 06 ff ff ff    	je     c000380d <dir_read+0x61>
c0003907:	eb 05                	jmp    c000390e <dir_read+0x162>
c0003909:	bd 04 00 00 00       	mov    ebp,0x4
c000390e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003915:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391c:	83 c4 1c             	add    esp,0x1c
c000391f:	89 e8                	mov    eax,ebp
c0003921:	5b                   	pop    ebx
c0003922:	5e                   	pop    esi
c0003923:	5f                   	pop    edi
c0003924:	5d                   	pop    ebp
c0003925:	c3                   	ret    

c0003926 <dir_alloc>:
c0003926:	55                   	push   ebp
c0003927:	89 d5                	mov    ebp,edx
c0003929:	57                   	push   edi
c000392a:	31 d2                	xor    edx,edx
c000392c:	56                   	push   esi
c000392d:	53                   	push   ebx
c000392e:	89 c3                	mov    ebx,eax
c0003930:	83 ec 0c             	sub    esp,0xc
c0003933:	8b 38                	mov    edi,DWORD PTR [eax]
c0003935:	e8 62 f6 ff ff       	call   c0002f9c <dir_sdi>
c000393a:	85 c0                	test   eax,eax
c000393c:	75 4e                	jne    c000398c <dir_alloc+0x66>
c000393e:	31 f6                	xor    esi,esi
c0003940:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003943:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003946:	89 f8                	mov    eax,edi
c0003948:	e8 d1 e8 ff ff       	call   c000221e <move_window>
c000394d:	85 c0                	test   eax,eax
c000394f:	75 3b                	jne    c000398c <dir_alloc+0x66>
c0003951:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003954:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003957:	8a 12                	mov    dl,BYTE PTR [edx]
c0003959:	75 07                	jne    c0003962 <dir_alloc+0x3c>
c000395b:	f7 d2                	not    edx
c000395d:	c0 ea 07             	shr    dl,0x7
c0003960:	eb 0d                	jmp    c000396f <dir_alloc+0x49>
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c1             	sete   cl
c0003967:	80 fa e5             	cmp    dl,0xe5
c000396a:	0f 94 c2             	sete   dl
c000396d:	09 ca                	or     edx,ecx
c000396f:	84 d2                	test   dl,dl
c0003971:	74 07                	je     c000397a <dir_alloc+0x54>
c0003973:	46                   	inc    esi
c0003974:	39 ee                	cmp    esi,ebp
c0003976:	75 04                	jne    c000397c <dir_alloc+0x56>
c0003978:	eb 1c                	jmp    c0003996 <dir_alloc+0x70>
c000397a:	31 f6                	xor    esi,esi
c000397c:	ba 01 00 00 00       	mov    edx,0x1
c0003981:	89 d8                	mov    eax,ebx
c0003983:	e8 6c fb ff ff       	call   c00034f4 <dir_next>
c0003988:	85 c0                	test   eax,eax
c000398a:	74 b4                	je     c0003940 <dir_alloc+0x1a>
c000398c:	83 f8 04             	cmp    eax,0x4
c000398f:	75 05                	jne    c0003996 <dir_alloc+0x70>
c0003991:	b8 07 00 00 00       	mov    eax,0x7
c0003996:	83 c4 0c             	add    esp,0xc
c0003999:	5b                   	pop    ebx
c000399a:	5e                   	pop    esi
c000399b:	5f                   	pop    edi
c000399c:	5d                   	pop    ebp
c000399d:	c3                   	ret    

c000399e <store_xdir>:
c000399e:	55                   	push   ebp
c000399f:	57                   	push   edi
c00039a0:	89 c7                	mov    edi,eax
c00039a2:	56                   	push   esi
c00039a3:	53                   	push   ebx
c00039a4:	83 ec 0c             	sub    esp,0xc
c00039a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a9:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039ac:	89 e8                	mov    eax,ebp
c00039ae:	e8 5b e5 ff ff       	call   c0001f0e <xdir_sum>
c00039b3:	0f b7 d0             	movzx  edx,ax
c00039b6:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b9:	e8 f4 e0 ff ff       	call   c0001ab2 <st_word>
c00039be:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c2:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c5:	89 f8                	mov    eax,edi
c00039c7:	e8 d0 f5 ff ff       	call   c0002f9c <dir_sdi>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 f6                	test   esi,esi
c00039d0:	75 3d                	jne    c0003a0f <store_xdir+0x71>
c00039d2:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d5:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d8:	8b 07                	mov    eax,DWORD PTR [edi]
c00039da:	e8 3f e8 ff ff       	call   c000221e <move_window>
c00039df:	89 c6                	mov    esi,eax
c00039e1:	85 c0                	test   eax,eax
c00039e3:	75 2a                	jne    c0003a0f <store_xdir+0x71>
c00039e5:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e8:	b9 20 00 00 00       	mov    ecx,0x20
c00039ed:	89 ea                	mov    edx,ebp
c00039ef:	e8 cb e0 ff ff       	call   c0001abf <mem_cpy>
c00039f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f6:	85 db                	test   ebx,ebx
c00039f8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fc:	74 11                	je     c0003a0f <store_xdir+0x71>
c00039fe:	31 d2                	xor    edx,edx
c0003a00:	89 f8                	mov    eax,edi
c0003a02:	83 c5 20             	add    ebp,0x20
c0003a05:	e8 ea fa ff ff       	call   c00034f4 <dir_next>
c0003a0a:	4b                   	dec    ebx
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	eb bf                	jmp    c00039ce <store_xdir+0x30>
c0003a0f:	89 f0                	mov    eax,esi
c0003a11:	83 fe 02             	cmp    esi,0x2
c0003a14:	76 05                	jbe    c0003a1b <store_xdir+0x7d>
c0003a16:	b8 02 00 00 00       	mov    eax,0x2
c0003a1b:	83 c4 0c             	add    esp,0xc
c0003a1e:	5b                   	pop    ebx
c0003a1f:	5e                   	pop    esi
c0003a20:	5f                   	pop    edi
c0003a21:	5d                   	pop    ebp
c0003a22:	c3                   	ret    

c0003a23 <dir_remove>:
c0003a23:	57                   	push   edi
c0003a24:	56                   	push   esi
c0003a25:	53                   	push   ebx
c0003a26:	89 c3                	mov    ebx,eax
c0003a28:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2d:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a30:	83 fa ff             	cmp    edx,0xffffffff
c0003a33:	74 09                	je     c0003a3e <dir_remove+0x1b>
c0003a35:	e8 62 f5 ff ff       	call   c0002f9c <dir_sdi>
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	75 41                	jne    c0003a7f <dir_remove+0x5c>
c0003a3e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a41:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a44:	89 f0                	mov    eax,esi
c0003a46:	e8 d3 e7 ff ff       	call   c000221e <move_window>
c0003a4b:	85 c0                	test   eax,eax
c0003a4d:	75 26                	jne    c0003a75 <dir_remove+0x52>
c0003a4f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a52:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a55:	75 05                	jne    c0003a5c <dir_remove+0x39>
c0003a57:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5a:	eb 03                	jmp    c0003a5f <dir_remove+0x3c>
c0003a5c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a63:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a66:	73 17                	jae    c0003a7f <dir_remove+0x5c>
c0003a68:	31 d2                	xor    edx,edx
c0003a6a:	89 d8                	mov    eax,ebx
c0003a6c:	e8 83 fa ff ff       	call   c00034f4 <dir_next>
c0003a71:	85 c0                	test   eax,eax
c0003a73:	74 c9                	je     c0003a3e <dir_remove+0x1b>
c0003a75:	83 f8 04             	cmp    eax,0x4
c0003a78:	75 05                	jne    c0003a7f <dir_remove+0x5c>
c0003a7a:	b8 02 00 00 00       	mov    eax,0x2
c0003a7f:	5b                   	pop    ebx
c0003a80:	5e                   	pop    esi
c0003a81:	5f                   	pop    edi
c0003a82:	c3                   	ret    

c0003a83 <create_name>:
c0003a83:	55                   	push   ebp
c0003a84:	89 d5                	mov    ebp,edx
c0003a86:	57                   	push   edi
c0003a87:	89 c7                	mov    edi,eax
c0003a89:	56                   	push   esi
c0003a8a:	31 f6                	xor    esi,esi
c0003a8c:	53                   	push   ebx
c0003a8d:	83 ec 3c             	sub    esp,0x3c
c0003a90:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a96:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a9f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa3:	e8 72 e0 ff ff       	call   c0001b1a <tchar2uni>
c0003aa8:	89 c3                	mov    ebx,eax
c0003aaa:	83 f8 ff             	cmp    eax,0xffffffff
c0003aad:	75 0a                	jne    c0003ab9 <create_name+0x36>
c0003aaf:	b8 06 00 00 00       	mov    eax,0x6
c0003ab4:	e9 9e 02 00 00       	jmp    c0003d57 <create_name+0x2d4>
c0003ab9:	3d ff ff 00 00       	cmp    eax,0xffff
c0003abe:	76 0c                	jbe    c0003acc <create_name+0x49>
c0003ac0:	c1 e8 10             	shr    eax,0x10
c0003ac3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ac7:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003acb:	46                   	inc    esi
c0003acc:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad0:	76 4f                	jbe    c0003b21 <create_name+0x9e>
c0003ad2:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad6:	74 35                	je     c0003b0d <create_name+0x8a>
c0003ad8:	66 83 fb 2f          	cmp    bx,0x2f
c0003adc:	74 2f                	je     c0003b0d <create_name+0x8a>
c0003ade:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae2:	77 11                	ja     c0003af5 <create_name+0x72>
c0003ae4:	0f b7 d3             	movzx  edx,bx
c0003ae7:	b8 12 02 02 c0       	mov    eax,0xc0020212
c0003aec:	e8 11 e0 ff ff       	call   c0001b02 <chk_chr>
c0003af1:	85 c0                	test   eax,eax
c0003af3:	75 ba                	jne    c0003aaf <create_name+0x2c>
c0003af5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003afb:	77 b2                	ja     c0003aaf <create_name+0x2c>
c0003afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b01:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b05:	46                   	inc    esi
c0003b06:	eb 97                	jmp    c0003a9f <create_name+0x1c>
c0003b08:	40                   	inc    eax
c0003b09:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b11:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b13:	80 fa 2f             	cmp    dl,0x2f
c0003b16:	74 f0                	je     c0003b08 <create_name+0x85>
c0003b18:	80 fa 5c             	cmp    dl,0x5c
c0003b1b:	74 eb                	je     c0003b08 <create_name+0x85>
c0003b1d:	31 db                	xor    ebx,ebx
c0003b1f:	eb 02                	jmp    c0003b23 <create_name+0xa0>
c0003b21:	b3 04                	mov    bl,0x4
c0003b23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2a:	85 f6                	test   esi,esi
c0003b2c:	74 18                	je     c0003b46 <create_name+0xc3>
c0003b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b32:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b37:	66 83 f8 20          	cmp    ax,0x20
c0003b3b:	74 06                	je     c0003b43 <create_name+0xc0>
c0003b3d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b41:	75 03                	jne    c0003b46 <create_name+0xc3>
c0003b43:	4e                   	dec    esi
c0003b44:	eb e4                	jmp    c0003b2a <create_name+0xa7>
c0003b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b4a:	31 ed                	xor    ebp,ebp
c0003b4c:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b52:	85 f6                	test   esi,esi
c0003b54:	0f 84 55 ff ff ff    	je     c0003aaf <create_name+0x2c>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b61:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b65:	66 83 f8 20          	cmp    ax,0x20
c0003b69:	75 04                	jne    c0003b6f <create_name+0xec>
c0003b6b:	89 d5                	mov    ebp,edx
c0003b6d:	eb eb                	jmp    c0003b5a <create_name+0xd7>
c0003b6f:	85 ed                	test   ebp,ebp
c0003b71:	75 06                	jne    c0003b79 <create_name+0xf6>
c0003b73:	66 83 f8 2e          	cmp    ax,0x2e
c0003b77:	75 08                	jne    c0003b81 <create_name+0xfe>
c0003b79:	83 cb 03             	or     ebx,0x3
c0003b7c:	eb 03                	jmp    c0003b81 <create_name+0xfe>
c0003b7e:	4e                   	dec    esi
c0003b7f:	74 0c                	je     c0003b8d <create_name+0x10a>
c0003b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b85:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8b:	75 f1                	jne    c0003b7e <create_name+0xfb>
c0003b8d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b92:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b95:	ba 20 00 00 00       	mov    edx,0x20
c0003b9a:	e8 35 df ff ff       	call   c0001ad4 <mem_set>
c0003b9f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ba7:	31 c9                	xor    ecx,ecx
c0003ba9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bae:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb9:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbd:	66 85 ed             	test   bp,bp
c0003bc0:	0f 84 30 01 00 00    	je     c0003cf6 <create_name+0x273>
c0003bc6:	66 83 fd 20          	cmp    bp,0x20
c0003bca:	74 10                	je     c0003bdc <create_name+0x159>
c0003bcc:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd0:	75 13                	jne    c0003be5 <create_name+0x162>
c0003bd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd6:	0f 84 6b 01 00 00    	je     c0003d47 <create_name+0x2c4>
c0003bdc:	83 cb 03             	or     ebx,0x3
c0003bdf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003be3:	eb c9                	jmp    c0003bae <create_name+0x12b>
c0003be5:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003be9:	73 0b                	jae    c0003bf6 <create_name+0x173>
c0003beb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bef:	75 47                	jne    c0003c38 <create_name+0x1b5>
c0003bf1:	e9 51 01 00 00       	jmp    c0003d47 <create_name+0x2c4>
c0003bf6:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bfb:	75 10                	jne    c0003c0d <create_name+0x18a>
c0003bfd:	83 cb 03             	or     ebx,0x3
c0003c00:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c08:	e9 e9 00 00 00       	jmp    c0003cf6 <create_name+0x273>
c0003c0d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c11:	74 0d                	je     c0003c20 <create_name+0x19d>
c0003c13:	83 cb 03             	or     ebx,0x3
c0003c16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1a:	0f 87 d6 00 00 00    	ja     c0003cf6 <create_name+0x273>
c0003c20:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c25:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c31:	b9 08 00 00 00       	mov    ecx,0x8
c0003c36:	eb a7                	jmp    c0003bdf <create_name+0x15c>
c0003c38:	66 83 fd 7f          	cmp    bp,0x7f
c0003c3c:	76 68                	jbe    c0003ca6 <create_name+0x223>
c0003c3e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c42:	88 da                	mov    dl,bl
c0003c44:	83 ca 02             	or     edx,0x2
c0003c47:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c4b:	50                   	push   eax
c0003c4c:	50                   	push   eax
c0003c4d:	68 b5 01 00 00       	push   0x1b5
c0003c52:	55                   	push   ebp
c0003c53:	e8 48 46 00 00       	call   c00082a0 <ff_uni2oem>
c0003c58:	83 c4 10             	add    esp,0x10
c0003c5b:	89 c5                	mov    ebp,eax
c0003c5d:	a8 80                	test   al,0x80
c0003c5f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c67:	74 0c                	je     c0003c75 <create_name+0x1f2>
c0003c69:	83 e5 7f             	and    ebp,0x7f
c0003c6c:	0f b6 ad 60 01 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfea0]
c0003c73:	eb 2a                	jmp    c0003c9f <create_name+0x21c>
c0003c75:	66 3d ff 00          	cmp    ax,0xff
c0003c79:	76 24                	jbe    c0003c9f <create_name+0x21c>
c0003c7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c7f:	48                   	dec    eax
c0003c80:	39 c8                	cmp    eax,ecx
c0003c82:	77 0c                	ja     c0003c90 <create_name+0x20d>
c0003c84:	83 cb 03             	or     ebx,0x3
c0003c87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c8b:	e9 4f ff ff ff       	jmp    c0003bdf <create_name+0x15c>
c0003c90:	89 e8                	mov    eax,ebp
c0003c92:	88 d3                	mov    bl,dl
c0003c94:	66 c1 e8 08          	shr    ax,0x8
c0003c98:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c9c:	41                   	inc    ecx
c0003c9d:	eb 4b                	jmp    c0003cea <create_name+0x267>
c0003c9f:	88 d3                	mov    bl,dl
c0003ca1:	66 85 ed             	test   bp,bp
c0003ca4:	74 19                	je     c0003cbf <create_name+0x23c>
c0003ca6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003caa:	0f b7 d5             	movzx  edx,bp
c0003cad:	b8 1b 02 02 c0       	mov    eax,0xc002021b
c0003cb2:	e8 4b de ff ff       	call   c0001b02 <chk_chr>
c0003cb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cbb:	85 c0                	test   eax,eax
c0003cbd:	74 0a                	je     c0003cc9 <create_name+0x246>
c0003cbf:	83 cb 03             	or     ebx,0x3
c0003cc2:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc7:	eb 21                	jmp    c0003cea <create_name+0x267>
c0003cc9:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ccc:	66 83 f8 19          	cmp    ax,0x19
c0003cd0:	77 07                	ja     c0003cd9 <create_name+0x256>
c0003cd2:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cd7:	eb 11                	jmp    c0003cea <create_name+0x267>
c0003cd9:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cdc:	66 83 f8 19          	cmp    ax,0x19
c0003ce0:	77 08                	ja     c0003cea <create_name+0x267>
c0003ce2:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ce7:	83 ed 20             	sub    ebp,0x20
c0003cea:	89 e8                	mov    eax,ebp
c0003cec:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf0:	41                   	inc    ecx
c0003cf1:	e9 e9 fe ff ff       	jmp    c0003bdf <create_name+0x15c>
c0003cf6:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cfa:	75 04                	jne    c0003d00 <create_name+0x27d>
c0003cfc:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d00:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d05:	75 05                	jne    c0003d0c <create_name+0x289>
c0003d07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d10:	83 e0 0c             	and    eax,0xc
c0003d13:	3c 0c                	cmp    al,0xc
c0003d15:	74 0b                	je     c0003d22 <create_name+0x29f>
c0003d17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1b:	83 e0 03             	and    eax,0x3
c0003d1e:	3c 03                	cmp    al,0x3
c0003d20:	75 05                	jne    c0003d27 <create_name+0x2a4>
c0003d22:	83 cb 02             	or     ebx,0x2
c0003d25:	eb 19                	jmp    c0003d40 <create_name+0x2bd>
c0003d27:	f6 c3 02             	test   bl,0x2
c0003d2a:	75 14                	jne    c0003d40 <create_name+0x2bd>
c0003d2c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d31:	74 03                	je     c0003d36 <create_name+0x2b3>
c0003d33:	83 cb 10             	or     ebx,0x10
c0003d36:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2bd>
c0003d3d:	83 cb 08             	or     ebx,0x8
c0003d40:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d43:	31 c0                	xor    eax,eax
c0003d45:	eb 10                	jmp    c0003d57 <create_name+0x2d4>
c0003d47:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d4c:	0f 85 ce fe ff ff    	jne    c0003c20 <create_name+0x19d>
c0003d52:	e9 a6 fe ff ff       	jmp    c0003bfd <create_name+0x17a>
c0003d57:	83 c4 3c             	add    esp,0x3c
c0003d5a:	5b                   	pop    ebx
c0003d5b:	5e                   	pop    esi
c0003d5c:	5f                   	pop    edi
c0003d5d:	5d                   	pop    ebp
c0003d5e:	c3                   	ret    

c0003d5f <xname_sum>:
c0003d5f:	56                   	push   esi
c0003d60:	53                   	push   ebx
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	51                   	push   ecx
c0003d64:	31 db                	xor    ebx,ebx
c0003d66:	83 c6 02             	add    esi,0x2
c0003d69:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d6d:	66 85 c0             	test   ax,ax
c0003d70:	74 1f                	je     c0003d91 <xname_sum+0x32>
c0003d72:	83 ec 0c             	sub    esp,0xc
c0003d75:	66 d1 cb             	ror    bx,1
c0003d78:	50                   	push   eax
c0003d79:	e8 1e 46 00 00       	call   c000839c <ff_wtoupper>
c0003d7e:	83 c4 10             	add    esp,0x10
c0003d81:	0f b6 d0             	movzx  edx,al
c0003d84:	66 c1 e8 08          	shr    ax,0x8
c0003d88:	01 d3                	add    ebx,edx
c0003d8a:	66 d1 cb             	ror    bx,1
c0003d8d:	01 c3                	add    ebx,eax
c0003d8f:	eb d5                	jmp    c0003d66 <xname_sum+0x7>
c0003d91:	89 d8                	mov    eax,ebx
c0003d93:	5a                   	pop    edx
c0003d94:	5b                   	pop    ebx
c0003d95:	5e                   	pop    esi
c0003d96:	c3                   	ret    

c0003d97 <create_xdir>:
c0003d97:	55                   	push   ebp
c0003d98:	b9 40 00 00 00       	mov    ecx,0x40
c0003d9d:	57                   	push   edi
c0003d9e:	bd 01 00 00 00       	mov    ebp,0x1
c0003da3:	56                   	push   esi
c0003da4:	31 ff                	xor    edi,edi
c0003da6:	53                   	push   ebx
c0003da7:	be 40 00 00 00       	mov    esi,0x40
c0003dac:	89 c3                	mov    ebx,eax
c0003dae:	83 ec 1c             	sub    esp,0x1c
c0003db1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003db5:	31 d2                	xor    edx,edx
c0003db7:	e8 18 dd ff ff       	call   c0001ad4 <mem_set>
c0003dbc:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dbf:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dc3:	31 c9                	xor    ecx,ecx
c0003dc5:	8d 46 01             	lea    eax,[esi+0x1]
c0003dc8:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dd3:	66 85 ed             	test   bp,bp
c0003dd6:	74 12                	je     c0003dea <create_xdir+0x53>
c0003dd8:	0f b6 c1             	movzx  eax,cl
c0003ddb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ddf:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003de3:	66 83 fd 01          	cmp    bp,0x1
c0003de7:	80 d9 ff             	sbb    cl,0xff
c0003dea:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ded:	0f b7 d5             	movzx  edx,bp
c0003df0:	83 c6 02             	add    esi,0x2
c0003df3:	e8 ba dc ff ff       	call   c0001ab2 <st_word>
c0003df8:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dfe:	75 d3                	jne    c0003dd3 <create_xdir+0x3c>
c0003e00:	8d 47 01             	lea    eax,[edi+0x1]
c0003e03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e0b:	0f b6 c1             	movzx  eax,cl
c0003e0e:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e13:	74 07                	je     c0003e1c <create_xdir+0x85>
c0003e15:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e1a:	eb a9                	jmp    c0003dc5 <create_xdir+0x2e>
c0003e1c:	8d 47 02             	lea    eax,[edi+0x2]
c0003e1f:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e22:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e25:	89 d0                	mov    eax,edx
c0003e27:	e8 33 ff ff ff       	call   c0003d5f <xname_sum>
c0003e2c:	83 c4 1c             	add    esp,0x1c
c0003e2f:	0f b7 d0             	movzx  edx,ax
c0003e32:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e35:	5b                   	pop    ebx
c0003e36:	5e                   	pop    esi
c0003e37:	5f                   	pop    edi
c0003e38:	5d                   	pop    ebp
c0003e39:	e9 74 dc ff ff       	jmp    c0001ab2 <st_word>

c0003e3e <cmp_lfn>:
c0003e3e:	55                   	push   ebp
c0003e3f:	57                   	push   edi
c0003e40:	89 d7                	mov    edi,edx
c0003e42:	56                   	push   esi
c0003e43:	53                   	push   ebx
c0003e44:	83 ec 1c             	sub    esp,0x1c
c0003e47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e4b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e4e:	e8 ed db ff ff       	call   c0001a40 <ld_word>
c0003e53:	66 85 c0             	test   ax,ax
c0003e56:	74 07                	je     c0003e5f <cmp_lfn+0x21>
c0003e58:	31 c0                	xor    eax,eax
c0003e5a:	e9 9a 00 00 00       	jmp    c0003ef9 <cmp_lfn+0xbb>
c0003e5f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e61:	bd 01 00 00 00       	mov    ebp,0x1
c0003e66:	83 e3 3f             	and    ebx,0x3f
c0003e69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e71:	4b                   	dec    ebx
c0003e72:	6b db 0d             	imul   ebx,ebx,0xd
c0003e75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e79:	0f b6 80 e0 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe20]
c0003e80:	01 f8                	add    eax,edi
c0003e82:	e8 b9 db ff ff       	call   c0001a40 <ld_word>
c0003e87:	66 85 ed             	test   bp,bp
c0003e8a:	89 c6                	mov    esi,eax
c0003e8c:	74 3c                	je     c0003eca <cmp_lfn+0x8c>
c0003e8e:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e94:	77 c2                	ja     c0003e58 <cmp_lfn+0x1a>
c0003e96:	83 ec 0c             	sub    esp,0xc
c0003e99:	0f b7 c0             	movzx  eax,ax
c0003e9c:	50                   	push   eax
c0003e9d:	e8 fa 44 00 00       	call   c000839c <ff_wtoupper>
c0003ea2:	89 c5                	mov    ebp,eax
c0003ea4:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eaf:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eb6:	e8 e1 44 00 00       	call   c000839c <ff_wtoupper>
c0003ebb:	83 c4 10             	add    esp,0x10
c0003ebe:	39 c5                	cmp    ebp,eax
c0003ec0:	75 96                	jne    c0003e58 <cmp_lfn+0x1a>
c0003ec2:	89 f5                	mov    ebp,esi
c0003ec4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ec8:	eb 04                	jmp    c0003ece <cmp_lfn+0x90>
c0003eca:	66 46                	inc    si
c0003ecc:	75 8a                	jne    c0003e58 <cmp_lfn+0x1a>
c0003ece:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ed2:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ed7:	75 9c                	jne    c0003e75 <cmp_lfn+0x37>
c0003ed9:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003edc:	74 16                	je     c0003ef4 <cmp_lfn+0xb6>
c0003ede:	66 85 ed             	test   bp,bp
c0003ee1:	74 11                	je     c0003ef4 <cmp_lfn+0xb6>
c0003ee3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ee7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eec:	0f 94 c0             	sete   al
c0003eef:	0f b6 c0             	movzx  eax,al
c0003ef2:	eb 05                	jmp    c0003ef9 <cmp_lfn+0xbb>
c0003ef4:	b8 01 00 00 00       	mov    eax,0x1
c0003ef9:	83 c4 1c             	add    esp,0x1c
c0003efc:	5b                   	pop    ebx
c0003efd:	5e                   	pop    esi
c0003efe:	5f                   	pop    edi
c0003eff:	5d                   	pop    ebp
c0003f00:	c3                   	ret    

c0003f01 <dir_find>:
c0003f01:	55                   	push   ebp
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	57                   	push   edi
c0003f05:	56                   	push   esi
c0003f06:	53                   	push   ebx
c0003f07:	89 c3                	mov    ebx,eax
c0003f09:	83 ec 1c             	sub    esp,0x1c
c0003f0c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f0e:	e8 89 f0 ff ff       	call   c0002f9c <dir_sdi>
c0003f13:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f16:	85 c0                	test   eax,eax
c0003f18:	0f 85 9e 01 00 00    	jne    c00040bc <dir_find+0x1bb>
c0003f1e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f21:	0f 85 8d 00 00 00    	jne    c0003fb4 <dir_find+0xb3>
c0003f27:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f2a:	e8 30 fe ff ff       	call   c0003d5f <xname_sum>
c0003f2f:	89 c7                	mov    edi,eax
c0003f31:	31 d2                	xor    edx,edx
c0003f33:	89 d8                	mov    eax,ebx
c0003f35:	e8 72 f8 ff ff       	call   c00037ac <dir_read>
c0003f3a:	85 c0                	test   eax,eax
c0003f3c:	0f 85 5e 01 00 00    	jne    c00040a0 <dir_find+0x19f>
c0003f42:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f45:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f48:	e8 f3 da ff ff       	call   c0001a40 <ld_word>
c0003f4d:	66 39 f8             	cmp    ax,di
c0003f50:	75 df                	jne    c0003f31 <dir_find+0x30>
c0003f52:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f55:	31 ed                	xor    ebp,ebp
c0003f57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f5b:	ba 40 00 00 00       	mov    edx,0x40
c0003f60:	89 e9                	mov    ecx,ebp
c0003f62:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f66:	0f 84 42 01 00 00    	je     c00040ae <dir_find+0x1ad>
c0003f6c:	f6 c2 1f             	test   dl,0x1f
c0003f6f:	75 03                	jne    c0003f74 <dir_find+0x73>
c0003f71:	83 c2 02             	add    edx,0x2
c0003f74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f78:	89 d0                	mov    eax,edx
c0003f7a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f7d:	e8 be da ff ff       	call   c0001a40 <ld_word>
c0003f82:	83 ec 0c             	sub    esp,0xc
c0003f85:	0f b7 c0             	movzx  eax,ax
c0003f88:	50                   	push   eax
c0003f89:	e8 0e 44 00 00       	call   c000839c <ff_wtoupper>
c0003f8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f92:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f95:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f99:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f9c:	e8 fb 43 00 00       	call   c000839c <ff_wtoupper>
c0003fa1:	83 c4 10             	add    esp,0x10
c0003fa4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fa8:	75 87                	jne    c0003f31 <dir_find+0x30>
c0003faa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fae:	45                   	inc    ebp
c0003faf:	83 c2 02             	add    edx,0x2
c0003fb2:	eb ac                	jmp    c0003f60 <dir_find+0x5f>
c0003fb4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fbb:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fc0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fc5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fc8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fcb:	89 f0                	mov    eax,esi
c0003fcd:	e8 4c e2 ff ff       	call   c000221e <move_window>
c0003fd2:	85 c0                	test   eax,eax
c0003fd4:	0f 85 c6 00 00 00    	jne    c00040a0 <dir_find+0x19f>
c0003fda:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fdd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fe0:	84 c9                	test   cl,cl
c0003fe2:	0f 84 bd 00 00 00    	je     c00040a5 <dir_find+0x1a4>
c0003fe8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003feb:	88 d0                	mov    al,dl
c0003fed:	83 e0 3f             	and    eax,0x3f
c0003ff0:	80 f9 e5             	cmp    cl,0xe5
c0003ff3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ff6:	0f 84 87 00 00 00    	je     c0004083 <dir_find+0x182>
c0003ffc:	80 e2 08             	and    dl,0x8
c0003fff:	74 06                	je     c0004007 <dir_find+0x106>
c0004001:	3c 0f                	cmp    al,0xf
c0004003:	75 7e                	jne    c0004083 <dir_find+0x182>
c0004005:	eb 04                	jmp    c000400b <dir_find+0x10a>
c0004007:	3c 0f                	cmp    al,0xf
c0004009:	75 4c                	jne    c0004057 <dir_find+0x156>
c000400b:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000400f:	75 7e                	jne    c000408f <dir_find+0x18e>
c0004011:	f6 c1 40             	test   cl,0x40
c0004014:	74 12                	je     c0004028 <dir_find+0x127>
c0004016:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004019:	83 e1 bf             	and    ecx,0xffffffbf
c000401c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004020:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004023:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004026:	eb 06                	jmp    c000402e <dir_find+0x12d>
c0004028:	89 f8                	mov    eax,edi
c000402a:	38 c8                	cmp    al,cl
c000402c:	75 5c                	jne    c000408a <dir_find+0x189>
c000402e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004032:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004037:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000403a:	75 53                	jne    c000408f <dir_find+0x18e>
c000403c:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004040:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004043:	89 ea                	mov    edx,ebp
c0004045:	e8 f4 fd ff ff       	call   c0003e3e <cmp_lfn>
c000404a:	85 c0                	test   eax,eax
c000404c:	74 41                	je     c000408f <dir_find+0x18e>
c000404e:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004052:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004055:	eb 38                	jmp    c000408f <dir_find+0x18e>
c0004057:	89 f8                	mov    eax,edi
c0004059:	84 c0                	test   al,al
c000405b:	75 0d                	jne    c000406a <dir_find+0x169>
c000405d:	89 e8                	mov    eax,ebp
c000405f:	e8 98 de ff ff       	call   c0001efc <sum_sfn>
c0004064:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004068:	74 52                	je     c00040bc <dir_find+0x1bb>
c000406a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000406e:	75 13                	jne    c0004083 <dir_find+0x182>
c0004070:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004073:	b9 0b 00 00 00       	mov    ecx,0xb
c0004078:	89 e8                	mov    eax,ebp
c000407a:	e8 60 da ff ff       	call   c0001adf <mem_cmp>
c000407f:	85 c0                	test   eax,eax
c0004081:	74 39                	je     c00040bc <dir_find+0x1bb>
c0004083:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000408a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000408f:	31 d2                	xor    edx,edx
c0004091:	89 d8                	mov    eax,ebx
c0004093:	e8 5c f4 ff ff       	call   c00034f4 <dir_next>
c0004098:	85 c0                	test   eax,eax
c000409a:	0f 84 25 ff ff ff    	je     c0003fc5 <dir_find+0xc4>
c00040a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00040a3:	eb 17                	jmp    c00040bc <dir_find+0x1bb>
c00040a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040ac:	eb 0e                	jmp    c00040bc <dir_find+0x1bb>
c00040ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b1:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040b6:	0f 85 75 fe ff ff    	jne    c0003f31 <dir_find+0x30>
c00040bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040bf:	83 c4 1c             	add    esp,0x1c
c00040c2:	5b                   	pop    ebx
c00040c3:	5e                   	pop    esi
c00040c4:	5f                   	pop    edi
c00040c5:	5d                   	pop    ebp
c00040c6:	c3                   	ret    

c00040c7 <dir_register>:
c00040c7:	55                   	push   ebp
c00040c8:	57                   	push   edi
c00040c9:	56                   	push   esi
c00040ca:	be 06 00 00 00       	mov    esi,0x6
c00040cf:	53                   	push   ebx
c00040d0:	83 ec 6c             	sub    esp,0x6c
c00040d3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040d7:	0f 85 62 02 00 00    	jne    c000433f <dir_register+0x278>
c00040dd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040df:	31 ff                	xor    edi,edi
c00040e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040e4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040e9:	74 03                	je     c00040ee <dir_register+0x27>
c00040eb:	47                   	inc    edi
c00040ec:	eb f6                	jmp    c00040e4 <dir_register+0x1d>
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040f4:	0f 85 e1 00 00 00    	jne    c00041db <dir_register+0x114>
c00040fa:	83 c7 0e             	add    edi,0xe
c00040fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0004102:	89 f8                	mov    eax,edi
c0004104:	31 d2                	xor    edx,edx
c0004106:	f7 f1                	div    ecx
c0004108:	8d 50 02             	lea    edx,[eax+0x2]
c000410b:	89 c7                	mov    edi,eax
c000410d:	89 d8                	mov    eax,ebx
c000410f:	e8 12 f8 ff ff       	call   c0003926 <dir_alloc>
c0004114:	89 c6                	mov    esi,eax
c0004116:	85 c0                	test   eax,eax
c0004118:	0f 85 21 02 00 00    	jne    c000433f <dir_register+0x278>
c000411e:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004124:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004127:	c1 e7 05             	shl    edi,0x5
c000412a:	29 f8                	sub    eax,edi
c000412c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000412f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004132:	a8 04                	test   al,0x4
c0004134:	0f 84 91 00 00 00    	je     c00041cb <dir_register+0x104>
c000413a:	83 e0 fb             	and    eax,0xfffffffb
c000413d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004140:	89 d8                	mov    eax,ebx
c0004142:	e8 25 ec ff ff       	call   c0002d6c <fill_first_frag>
c0004147:	85 c0                	test   eax,eax
c0004149:	0f 85 ee 01 00 00    	jne    c000433d <dir_register+0x276>
c000414f:	83 c9 ff             	or     ecx,0xffffffff
c0004152:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004155:	89 d8                	mov    eax,ebx
c0004157:	e8 db eb ff ff       	call   c0002d37 <fill_last_frag>
c000415c:	85 c0                	test   eax,eax
c000415e:	0f 85 d9 01 00 00    	jne    c000433d <dir_register+0x276>
c0004164:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004168:	74 61                	je     c00041cb <dir_register+0x104>
c000416a:	89 da                	mov    edx,ebx
c000416c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004170:	e8 ea f5 ff ff       	call   c000375f <load_obj_xdir>
c0004175:	85 c0                	test   eax,eax
c0004177:	0f 85 c0 01 00 00    	jne    c000433d <dir_register+0x276>
c000417d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004181:	31 c9                	xor    ecx,ecx
c0004183:	c1 e2 09             	shl    edx,0x9
c0004186:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004189:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000418c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000418f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004192:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004195:	83 c0 38             	add    eax,0x38
c0004198:	e8 1c d9 ff ff       	call   c0001ab9 <st_qword>
c000419d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041a3:	83 c0 28             	add    eax,0x28
c00041a6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041a9:	e8 0b d9 ff ff       	call   c0001ab9 <st_qword>
c00041ae:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041b4:	83 c8 01             	or     eax,0x1
c00041b7:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 db f7 ff ff       	call   c000399e <store_xdir>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 85 72 01 00 00    	jne    c000433d <dir_register+0x276>
c00041cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d1:	e8 c1 fb ff ff       	call   c0003d97 <create_xdir>
c00041d6:	e9 64 01 00 00       	jmp    c000433f <dir_register+0x278>
c00041db:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041de:	b9 0c 00 00 00       	mov    ecx,0xc
c00041e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041e7:	89 c2                	mov    edx,eax
c00041e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ed:	e8 cd d8 ff ff       	call   c0001abf <mem_cpy>
c00041f2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041f7:	74 58                	je     c0004251 <dir_register+0x18a>
c00041f9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041fd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004205:	83 ec 0c             	sub    esp,0xc
c0004208:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000420b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000420f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004213:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004217:	e8 24 dc ff ff       	call   c0001e40 <gen_numname>
c000421c:	89 d8                	mov    eax,ebx
c000421e:	e8 de fc ff ff       	call   c0003f01 <dir_find>
c0004223:	83 c4 10             	add    esp,0x10
c0004226:	89 c6                	mov    esi,eax
c0004228:	85 c0                	test   eax,eax
c000422a:	75 15                	jne    c0004241 <dir_register+0x17a>
c000422c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004230:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004235:	75 ce                	jne    c0004205 <dir_register+0x13e>
c0004237:	be 07 00 00 00       	mov    esi,0x7
c000423c:	e9 fe 00 00 00       	jmp    c000433f <dir_register+0x278>
c0004241:	83 f8 04             	cmp    eax,0x4
c0004244:	0f 85 f5 00 00 00    	jne    c000433f <dir_register+0x278>
c000424a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000424e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004251:	b9 01 00 00 00       	mov    ecx,0x1
c0004256:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000425b:	74 0f                	je     c000426c <dir_register+0x1a5>
c000425d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004262:	8d 47 0c             	lea    eax,[edi+0xc]
c0004265:	31 d2                	xor    edx,edx
c0004267:	f7 f1                	div    ecx
c0004269:	8d 48 01             	lea    ecx,[eax+0x1]
c000426c:	89 ca                	mov    edx,ecx
c000426e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004272:	89 d8                	mov    eax,ebx
c0004274:	e8 ad f6 ff ff       	call   c0003926 <dir_alloc>
c0004279:	89 c6                	mov    esi,eax
c000427b:	85 c0                	test   eax,eax
c000427d:	0f 85 bc 00 00 00    	jne    c000433f <dir_register+0x278>
c0004283:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004287:	49                   	dec    ecx
c0004288:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428c:	74 6a                	je     c00042f8 <dir_register+0x231>
c000428e:	89 c8                	mov    eax,ecx
c0004290:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004293:	c1 e0 05             	shl    eax,0x5
c0004296:	29 c2                	sub    edx,eax
c0004298:	89 d8                	mov    eax,ebx
c000429a:	e8 fd ec ff ff       	call   c0002f9c <dir_sdi>
c000429f:	89 c6                	mov    esi,eax
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 96 00 00 00    	jne    c000433f <dir_register+0x278>
c00042a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042ad:	e8 4a dc ff ff       	call   c0001efc <sum_sfn>
c00042b2:	0f b6 f8             	movzx  edi,al
c00042b5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042bb:	89 e8                	mov    eax,ebp
c00042bd:	e8 5c df ff ff       	call   c000221e <move_window>
c00042c2:	89 c6                	mov    esi,eax
c00042c4:	85 c0                	test   eax,eax
c00042c6:	75 77                	jne    c000433f <dir_register+0x278>
c00042c8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042cd:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d0:	83 ec 0c             	sub    esp,0xc
c00042d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042d6:	57                   	push   edi
c00042d7:	e8 e0 da ff ff       	call   c0001dbc <put_lfn>
c00042dc:	31 d2                	xor    edx,edx
c00042de:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042e2:	89 d8                	mov    eax,ebx
c00042e4:	e8 0b f2 ff ff       	call   c00034f4 <dir_next>
c00042e9:	83 c4 10             	add    esp,0x10
c00042ec:	89 c6                	mov    esi,eax
c00042ee:	85 c0                	test   eax,eax
c00042f0:	75 4d                	jne    c000433f <dir_register+0x278>
c00042f2:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042f6:	75 bd                	jne    c00042b5 <dir_register+0x1ee>
c00042f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042fb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	e8 19 df ff ff       	call   c000221e <move_window>
c0004305:	89 c6                	mov    esi,eax
c0004307:	85 c0                	test   eax,eax
c0004309:	75 34                	jne    c000433f <dir_register+0x278>
c000430b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000430e:	b9 20 00 00 00       	mov    ecx,0x20
c0004313:	31 d2                	xor    edx,edx
c0004315:	e8 ba d7 ff ff       	call   c0001ad4 <mem_set>
c000431a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000431d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004321:	b9 0b 00 00 00       	mov    ecx,0xb
c0004326:	e8 94 d7 ff ff       	call   c0001abf <mem_cpy>
c000432b:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000432e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004331:	83 e0 18             	and    eax,0x18
c0004334:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004337:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000433b:	eb 02                	jmp    c000433f <dir_register+0x278>
c000433d:	89 c6                	mov    esi,eax
c000433f:	83 c4 6c             	add    esp,0x6c
c0004342:	89 f0                	mov    eax,esi
c0004344:	5b                   	pop    ebx
c0004345:	5e                   	pop    esi
c0004346:	5f                   	pop    edi
c0004347:	5d                   	pop    ebp
c0004348:	c3                   	ret    

c0004349 <sync_fs>:
c0004349:	56                   	push   esi
c000434a:	53                   	push   ebx
c000434b:	53                   	push   ebx
c000434c:	89 c3                	mov    ebx,eax
c000434e:	e8 37 de ff ff       	call   c000218a <sync_window>
c0004353:	85 c0                	test   eax,eax
c0004355:	0f 85 b1 00 00 00    	jne    c000440c <sync_fs+0xc3>
c000435b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000435e:	0f 85 8e 00 00 00    	jne    c00043f2 <sync_fs+0xa9>
c0004364:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004368:	0f 85 84 00 00 00    	jne    c00043f2 <sync_fs+0xa9>
c000436e:	b9 00 02 00 00       	mov    ecx,0x200
c0004373:	8d 73 54             	lea    esi,[ebx+0x54]
c0004376:	31 d2                	xor    edx,edx
c0004378:	89 f0                	mov    eax,esi
c000437a:	e8 55 d7 ff ff       	call   c0001ad4 <mem_set>
c000437f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004385:	ba 55 aa 00 00       	mov    edx,0xaa55
c000438a:	e8 23 d7 ff ff       	call   c0001ab2 <st_word>
c000438f:	ba 52 52 61 41       	mov    edx,0x41615252
c0004394:	89 f0                	mov    eax,esi
c0004396:	e8 1b d7 ff ff       	call   c0001ab6 <st_dword>
c000439b:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043a1:	ba 72 72 41 61       	mov    edx,0x61417272
c00043a6:	e8 0b d7 ff ff       	call   c0001ab6 <st_dword>
c00043ab:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043ae:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043b4:	e8 fd d6 ff ff       	call   c0001ab6 <st_dword>
c00043b9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bc:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043c2:	e8 ef d6 ff ff       	call   c0001ab6 <st_dword>
c00043c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043cd:	83 c0 01             	add    eax,0x1
c00043d0:	83 d2 00             	adc    edx,0x0
c00043d3:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d6:	83 ec 0c             	sub    esp,0xc
c00043d9:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043dc:	6a 01                	push   0x1
c00043de:	52                   	push   edx
c00043df:	50                   	push   eax
c00043e0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e4:	56                   	push   esi
c00043e5:	50                   	push   eax
c00043e6:	e8 20 d6 ff ff       	call   c0001a0b <disk_write>
c00043eb:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043ef:	83 c4 20             	add    esp,0x20
c00043f2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f6:	51                   	push   ecx
c00043f7:	6a 00                	push   0x0
c00043f9:	6a 00                	push   0x0
c00043fb:	50                   	push   eax
c00043fc:	e8 20 d6 ff ff       	call   c0001a21 <disk_ioctl>
c0004401:	83 c4 10             	add    esp,0x10
c0004404:	85 c0                	test   eax,eax
c0004406:	0f 95 c0             	setne  al
c0004409:	0f b6 c0             	movzx  eax,al
c000440c:	5a                   	pop    edx
c000440d:	5b                   	pop    ebx
c000440e:	5e                   	pop    esi
c000440f:	c3                   	ret    

c0004410 <create_partition>:
c0004410:	55                   	push   ebp
c0004411:	0f b6 c0             	movzx  eax,al
c0004414:	57                   	push   edi
c0004415:	56                   	push   esi
c0004416:	53                   	push   ebx
c0004417:	83 ec 60             	sub    esp,0x60
c000441a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000441e:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004422:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004426:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000442a:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000442e:	50                   	push   eax
c000442f:	6a 01                	push   0x1
c0004431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004435:	e8 e7 d5 ff ff       	call   c0001a21 <disk_ioctl>
c000443a:	83 c4 10             	add    esp,0x10
c000443d:	85 c0                	test   eax,eax
c000443f:	74 0a                	je     c000444b <create_partition+0x3b>
c0004441:	b8 01 00 00 00       	mov    eax,0x1
c0004446:	e9 67 05 00 00       	jmp    c00049b2 <create_partition+0x5a2>
c000444b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000444f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004457:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000445b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004460:	0f 86 ed 03 00 00    	jbe    c0004853 <create_partition+0x443>
c0004466:	83 c0 df             	add    eax,0xffffffdf
c0004469:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004471:	83 d2 ff             	adc    edx,0xffffffff
c0004474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004478:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000447c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004480:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004484:	83 c0 bd             	add    eax,0xffffffbd
c0004487:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000448e:	83 d2 ff             	adc    edx,0xffffffff
c0004491:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004495:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004499:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044a1:	be 22 00 00 00       	mov    esi,0x22
c00044a6:	31 ff                	xor    edi,edi
c00044a8:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044b0:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044b8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044c0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ca:	75 0e                	jne    c00044da <create_partition+0xca>
c00044cc:	b9 00 02 00 00       	mov    ecx,0x200
c00044d1:	31 d2                	xor    edx,edx
c00044d3:	89 d8                	mov    eax,ebx
c00044d5:	e8 fa d5 ff ff       	call   c0001ad4 <mem_set>
c00044da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044e6:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044e9:	0f 84 23 01 00 00    	je     c0004612 <create_partition+0x202>
c00044ef:	89 f0                	mov    eax,esi
c00044f1:	89 fa                	mov    edx,edi
c00044f3:	05 ff 07 00 00       	add    eax,0x7ff
c00044f8:	83 d2 00             	adc    edx,0x0
c00044fb:	89 c1                	mov    ecx,eax
c00044fd:	89 d7                	mov    edi,edx
c00044ff:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004505:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004509:	89 ce                	mov    esi,ecx
c000450b:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000450f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004513:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004517:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000451a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000451e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004521:	b8 64 00 00 00       	mov    eax,0x64
c0004526:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004529:	b8 00 00 00 00       	mov    eax,0x0
c000452e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004532:	72 41                	jb     c0004575 <create_partition+0x165>
c0004534:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000453c:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004540:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004545:	01 c1                	add    ecx,eax
c0004547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000454b:	f7 24 24             	mul    DWORD PTR [esp]
c000454e:	6a 00                	push   0x0
c0004550:	01 ca                	add    edx,ecx
c0004552:	6a 64                	push   0x64
c0004554:	52                   	push   edx
c0004555:	50                   	push   eax
c0004556:	e8 51 ac 01 00       	call   c001f1ac <__udivdi3>
c000455b:	83 c4 10             	add    esp,0x10
c000455e:	05 ff 07 00 00       	add    eax,0x7ff
c0004563:	83 d2 00             	adc    edx,0x0
c0004566:	89 c1                	mov    ecx,eax
c0004568:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000456c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004572:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004575:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004578:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000457c:	01 f0                	add    eax,esi
c000457e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004582:	11 fa                	adc    edx,edi
c0004584:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004588:	19 d1                	sbb    ecx,edx
c000458a:	73 2e                	jae    c00045ba <create_partition+0x1aa>
c000458c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004590:	89 f8                	mov    eax,edi
c0004592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004599:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000459d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045a5:	73 6b                	jae    c0004612 <create_partition+0x202>
c00045a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045af:	29 f0                	sub    eax,esi
c00045b1:	19 fa                	sbb    edx,edi
c00045b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00045b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045be:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045c1:	74 4f                	je     c0004612 <create_partition+0x202>
c00045c3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045c6:	b9 10 00 00 00       	mov    ecx,0x10
c00045cb:	ba f0 01 02 c0       	mov    edx,0xc00201f0
c00045d0:	e8 ea d4 ff ff       	call   c0001abf <mem_cpy>
c00045d5:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045d9:	b9 10 00 00 00       	mov    ecx,0x10
c00045de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045e2:	e8 2c db ff ff       	call   c0002113 <make_rand>
c00045e7:	89 f2                	mov    edx,esi
c00045e9:	89 f9                	mov    ecx,edi
c00045eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045ef:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045f3:	e8 c1 d4 ff ff       	call   c0001ab9 <st_qword>
c00045f8:	03 34 24             	add    esi,DWORD PTR [esp]
c00045fb:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ff:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004603:	89 f2                	mov    edx,esi
c0004605:	89 f9                	mov    ecx,edi
c0004607:	83 c2 ff             	add    edx,0xffffffff
c000460a:	83 d1 ff             	adc    ecx,0xffffffff
c000460d:	e8 a7 d4 ff ff       	call   c0001ab9 <st_qword>
c0004612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004616:	83 e8 80             	sub    eax,0xffffff80
c0004619:	89 c5                	mov    ebp,eax
c000461b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000461f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004625:	75 6b                	jne    c0004692 <create_partition+0x282>
c0004627:	45                   	inc    ebp
c0004628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000462c:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004631:	e8 39 da ff ff       	call   c000206f <crc32>
c0004636:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000463c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004640:	75 e5                	jne    c0004627 <create_partition+0x217>
c0004642:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004646:	31 d2                	xor    edx,edx
c0004648:	83 ec 0c             	sub    esp,0xc
c000464b:	c1 ed 09             	shr    ebp,0x9
c000464e:	6a 01                	push   0x1
c0004650:	8d 45 02             	lea    eax,[ebp+0x2]
c0004653:	52                   	push   edx
c0004654:	50                   	push   eax
c0004655:	53                   	push   ebx
c0004656:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000465a:	e8 ac d3 ff ff       	call   c0001a0b <disk_write>
c000465f:	83 c4 20             	add    esp,0x20
c0004662:	85 c0                	test   eax,eax
c0004664:	0f 85 d7 fd ff ff    	jne    c0004441 <create_partition+0x31>
c000466a:	83 ec 0c             	sub    esp,0xc
c000466d:	31 d2                	xor    edx,edx
c000466f:	6a 01                	push   0x1
c0004671:	89 e8                	mov    eax,ebp
c0004673:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004677:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000467b:	52                   	push   edx
c000467c:	50                   	push   eax
c000467d:	53                   	push   ebx
c000467e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004682:	e8 84 d3 ff ff       	call   c0001a0b <disk_write>
c0004687:	83 c4 20             	add    esp,0x20
c000468a:	85 c0                	test   eax,eax
c000468c:	0f 85 af fd ff ff    	jne    c0004441 <create_partition+0x31>
c0004692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000469a:	3d 00 40 00 00       	cmp    eax,0x4000
c000469f:	74 0d                	je     c00046ae <create_partition+0x29e>
c00046a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046a9:	e9 12 fe ff ff       	jmp    c00044c0 <create_partition+0xb0>
c00046ae:	31 d2                	xor    edx,edx
c00046b0:	b9 00 02 00 00       	mov    ecx,0x200
c00046b5:	89 d8                	mov    eax,ebx
c00046b7:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ba:	e8 15 d4 ff ff       	call   c0001ad4 <mem_set>
c00046bf:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c2:	b9 10 00 00 00       	mov    ecx,0x10
c00046c7:	ba e0 00 02 c0       	mov    edx,0xc00200e0
c00046cc:	89 d8                	mov    eax,ebx
c00046ce:	e8 ec d3 ff ff       	call   c0001abf <mem_cpy>
c00046d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046d7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046da:	f7 d2                	not    edx
c00046dc:	e8 d5 d3 ff ff       	call   c0001ab6 <st_dword>
c00046e1:	8d 43 18             	lea    eax,[ebx+0x18]
c00046e4:	31 c9                	xor    ecx,ecx
c00046e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e9:	ba 01 00 00 00       	mov    edx,0x1
c00046ee:	e8 c6 d3 ff ff       	call   c0001ab9 <st_qword>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	89 e8                	mov    eax,ebp
c0004700:	83 d1 ff             	adc    ecx,0xffffffff
c0004703:	e8 b1 d3 ff ff       	call   c0001ab9 <st_qword>
c0004708:	31 c9                	xor    ecx,ecx
c000470a:	8d 43 28             	lea    eax,[ebx+0x28]
c000470d:	ba 22 00 00 00       	mov    edx,0x22
c0004712:	e8 a2 d3 ff ff       	call   c0001ab9 <st_qword>
c0004717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000471b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000471f:	83 c2 de             	add    edx,0xffffffde
c0004722:	8d 43 30             	lea    eax,[ebx+0x30]
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	31 f6                	xor    esi,esi
c000472a:	e8 8a d3 ff ff       	call   c0001ab9 <st_qword>
c000472f:	8d 43 54             	lea    eax,[ebx+0x54]
c0004732:	ba 80 00 00 00       	mov    edx,0x80
c0004737:	e8 7a d3 ff ff       	call   c0001ab6 <st_dword>
c000473c:	8d 43 50             	lea    eax,[ebx+0x50]
c000473f:	ba 80 00 00 00       	mov    edx,0x80
c0004744:	e8 6d d3 ff ff       	call   c0001ab6 <st_dword>
c0004749:	ba 02 00 00 00       	mov    edx,0x2
c000474e:	89 f8                	mov    eax,edi
c0004750:	e8 61 d3 ff ff       	call   c0001ab6 <st_dword>
c0004755:	8d 53 38             	lea    edx,[ebx+0x38]
c0004758:	b9 10 00 00 00       	mov    ecx,0x10
c000475d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004761:	e8 ad d9 ff ff       	call   c0002113 <make_rand>
c0004766:	83 c8 ff             	or     eax,0xffffffff
c0004769:	46                   	inc    esi
c000476a:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000476f:	e8 fb d8 ff ff       	call   c000206f <crc32>
c0004774:	83 fe 5c             	cmp    esi,0x5c
c0004777:	75 f0                	jne    c0004769 <create_partition+0x359>
c0004779:	f7 d0                	not    eax
c000477b:	8d 73 10             	lea    esi,[ebx+0x10]
c000477e:	89 c2                	mov    edx,eax
c0004780:	89 f0                	mov    eax,esi
c0004782:	e8 2f d3 ff ff       	call   c0001ab6 <st_dword>
c0004787:	83 ec 0c             	sub    esp,0xc
c000478a:	6a 01                	push   0x1
c000478c:	6a 00                	push   0x0
c000478e:	6a 01                	push   0x1
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 71 d2 ff ff       	call   c0001a0b <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 9c fc ff ff    	jne    c0004441 <create_partition+0x31>
c00047a5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047ad:	83 c2 ff             	add    edx,0xffffffff
c00047b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b3:	83 d1 ff             	adc    ecx,0xffffffff
c00047b6:	e8 fe d2 ff ff       	call   c0001ab9 <st_qword>
c00047bb:	ba 01 00 00 00       	mov    edx,0x1
c00047c0:	31 c9                	xor    ecx,ecx
c00047c2:	89 e8                	mov    eax,ebp
c00047c4:	e8 f0 d2 ff ff       	call   c0001ab9 <st_qword>
c00047c9:	89 f8                	mov    eax,edi
c00047cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047d3:	31 ff                	xor    edi,edi
c00047d5:	e8 df d2 ff ff       	call   c0001ab9 <st_qword>
c00047da:	89 f0                	mov    eax,esi
c00047dc:	31 d2                	xor    edx,edx
c00047de:	e8 d3 d2 ff ff       	call   c0001ab6 <st_dword>
c00047e3:	83 c8 ff             	or     eax,0xffffffff
c00047e6:	47                   	inc    edi
c00047e7:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ec:	e8 7e d8 ff ff       	call   c000206f <crc32>
c00047f1:	83 ff 5c             	cmp    edi,0x5c
c00047f4:	75 f0                	jne    c00047e6 <create_partition+0x3d6>
c00047f6:	f7 d0                	not    eax
c00047f8:	89 c2                	mov    edx,eax
c00047fa:	89 f0                	mov    eax,esi
c00047fc:	e8 b5 d2 ff ff       	call   c0001ab6 <st_dword>
c0004801:	83 ec 0c             	sub    esp,0xc
c0004804:	6a 01                	push   0x1
c0004806:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000480a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000480e:	83 c0 ff             	add    eax,0xffffffff
c0004811:	83 d2 ff             	adc    edx,0xffffffff
c0004814:	52                   	push   edx
c0004815:	50                   	push   eax
c0004816:	53                   	push   ebx
c0004817:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000481b:	e8 eb d1 ff ff       	call   c0001a0b <disk_write>
c0004820:	83 c4 20             	add    esp,0x20
c0004823:	85 c0                	test   eax,eax
c0004825:	0f 85 16 fc ff ff    	jne    c0004441 <create_partition+0x31>
c000482b:	31 d2                	xor    edx,edx
c000482d:	89 d8                	mov    eax,ebx
c000482f:	b9 00 02 00 00       	mov    ecx,0x200
c0004834:	e8 9b d2 ff ff       	call   c0001ad4 <mem_set>
c0004839:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000483f:	b9 10 00 00 00       	mov    ecx,0x10
c0004844:	ba f0 00 02 c0       	mov    edx,0xc00200f0
c0004849:	e8 71 d2 ff ff       	call   c0001abf <mem_cpy>
c000484e:	e9 21 01 00 00       	jmp    c0004974 <create_partition+0x564>
c0004853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004857:	b9 05 00 00 00       	mov    ecx,0x5
c000485c:	89 04 24             	mov    DWORD PTR [esp],eax
c000485f:	bf 08 00 00 00       	mov    edi,0x8
c0004864:	89 f8                	mov    eax,edi
c0004866:	31 d2                	xor    edx,edx
c0004868:	0f b6 f0             	movzx  esi,al
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	f7 f6                	div    esi
c0004870:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004875:	76 0a                	jbe    c0004881 <create_partition+0x471>
c0004877:	d1 e7                	shl    edi,1
c0004879:	49                   	dec    ecx
c000487a:	75 e8                	jne    c0004864 <create_partition+0x454>
c000487c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004881:	b9 00 02 00 00       	mov    ecx,0x200
c0004886:	31 d2                	xor    edx,edx
c0004888:	89 d8                	mov    eax,ebx
c000488a:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004890:	e8 3f d2 ff ff       	call   c0001ad4 <mem_set>
c0004895:	b9 64 00 00 00       	mov    ecx,0x64
c000489a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489d:	31 d2                	xor    edx,edx
c000489f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048a7:	f7 f1                	div    ecx
c00048a9:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b2:	89 f8                	mov    eax,edi
c00048b4:	0f b6 c0             	movzx  eax,al
c00048b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048bb:	e9 80 00 00 00       	jmp    c0004940 <create_partition+0x530>
c00048c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048c3:	29 cf                	sub    edi,ecx
c00048c5:	89 ca                	mov    edx,ecx
c00048c7:	89 f0                	mov    eax,esi
c00048c9:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048ce:	e8 e3 d1 ff ff       	call   c0001ab6 <st_dword>
c00048d3:	8d 46 04             	lea    eax,[esi+0x4]
c00048d6:	89 fa                	mov    edx,edi
c00048d8:	83 c6 10             	add    esi,0x10
c00048db:	e8 d6 d1 ff ff       	call   c0001ab6 <st_dword>
c00048e0:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048e4:	31 d2                	xor    edx,edx
c00048e6:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048e9:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ed:	89 c8                	mov    eax,ecx
c00048ef:	01 f9                	add    ecx,edi
c00048f1:	f7 f5                	div    ebp
c00048f3:	89 d5                	mov    ebp,edx
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	45                   	inc    ebp
c00048f8:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048fc:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048ff:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004902:	89 c2                	mov    edx,eax
c0004904:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004907:	c1 ea 02             	shr    edx,0x2
c000490a:	83 e2 c0             	and    edx,0xffffffc0
c000490d:	09 ea                	or     edx,ebp
c000490f:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004914:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004917:	31 d2                	xor    edx,edx
c0004919:	f7 f5                	div    ebp
c000491b:	89 d7                	mov    edi,edx
c000491d:	31 d2                	xor    edx,edx
c000491f:	47                   	inc    edi
c0004920:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004924:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004927:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000492a:	89 c5                	mov    ebp,eax
c000492c:	c1 ed 02             	shr    ebp,0x2
c000492f:	83 e5 c0             	and    ebp,0xffffffc0
c0004932:	09 ef                	or     edi,ebp
c0004934:	89 fa                	mov    edx,edi
c0004936:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004939:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000493e:	74 34                	je     c0004974 <create_partition+0x564>
c0004940:	85 c9                	test   ecx,ecx
c0004942:	74 30                	je     c0004974 <create_partition+0x564>
c0004944:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004947:	76 2b                	jbe    c0004974 <create_partition+0x564>
c0004949:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004951:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004954:	83 ff 64             	cmp    edi,0x64
c0004957:	76 4b                	jbe    c00049a4 <create_partition+0x594>
c0004959:	89 f8                	mov    eax,edi
c000495b:	01 c8                	add    eax,ecx
c000495d:	0f 82 5d ff ff ff    	jb     c00048c0 <create_partition+0x4b0>
c0004963:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004966:	0f 87 54 ff ff ff    	ja     c00048c0 <create_partition+0x4b0>
c000496c:	85 ff                	test   edi,edi
c000496e:	0f 85 51 ff ff ff    	jne    c00048c5 <create_partition+0x4b5>
c0004974:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000497a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497f:	e8 2e d1 ff ff       	call   c0001ab2 <st_word>
c0004984:	83 ec 0c             	sub    esp,0xc
c0004987:	6a 01                	push   0x1
c0004989:	6a 00                	push   0x0
c000498b:	6a 00                	push   0x0
c000498d:	53                   	push   ebx
c000498e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004992:	e8 74 d0 ff ff       	call   c0001a0b <disk_write>
c0004997:	83 c4 20             	add    esp,0x20
c000499a:	85 c0                	test   eax,eax
c000499c:	0f 95 c0             	setne  al
c000499f:	0f b6 c0             	movzx  eax,al
c00049a2:	eb 0e                	jmp    c00049b2 <create_partition+0x5a2>
c00049a4:	74 07                	je     c00049ad <create_partition+0x59d>
c00049a6:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049ab:	eb ac                	jmp    c0004959 <create_partition+0x549>
c00049ad:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049b0:	eb a7                	jmp    c0004959 <create_partition+0x549>
c00049b2:	83 c4 5c             	add    esp,0x5c
c00049b5:	5b                   	pop    ebx
c00049b6:	5e                   	pop    esi
c00049b7:	5f                   	pop    edi
c00049b8:	5d                   	pop    ebp
c00049b9:	c3                   	ret    

c00049ba <get_fileinfo>:
c00049ba:	55                   	push   ebp
c00049bb:	57                   	push   edi
c00049bc:	56                   	push   esi
c00049bd:	53                   	push   ebx
c00049be:	83 ec 1c             	sub    esp,0x1c
c00049c1:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c3:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049c7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049cb:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049ce:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d1:	0f 84 dc 01 00 00    	je     c0004bb3 <get_fileinfo+0x1f9>
c00049d7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049da:	75 0f                	jne    c00049eb <get_fileinfo+0x31>
c00049dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049df:	83 c4 1c             	add    esp,0x1c
c00049e2:	5b                   	pop    ebx
c00049e3:	5e                   	pop    esi
c00049e4:	5f                   	pop    edi
c00049e5:	5d                   	pop    ebp
c00049e6:	e9 58 d5 ff ff       	jmp    c0001f43 <get_xfileinfo>
c00049eb:	89 d3                	mov    ebx,edx
c00049ed:	89 c6                	mov    esi,eax
c00049ef:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f3:	74 6a                	je     c0004a5f <get_fileinfo+0xa5>
c00049f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049fd:	31 ed                	xor    ebp,ebp
c00049ff:	31 ff                	xor    edi,edi
c0004a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a0c:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a10:	66 85 d2             	test   dx,dx
c0004a13:	74 3e                	je     c0004a53 <get_fileinfo+0x99>
c0004a15:	66 85 ed             	test   bp,bp
c0004a18:	75 0c                	jne    c0004a26 <get_fileinfo+0x6c>
c0004a1a:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a20:	66 3d ff 07          	cmp    ax,0x7ff
c0004a24:	76 22                	jbe    c0004a48 <get_fileinfo+0x8e>
c0004a26:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a2b:	89 e8                	mov    eax,ebp
c0004a2d:	29 f9                	sub    ecx,edi
c0004a2f:	c1 e0 10             	shl    eax,0x10
c0004a32:	09 d0                	or     eax,edx
c0004a34:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a38:	e8 a3 d1 ff ff       	call   c0001be0 <put_utf>
c0004a3d:	84 c0                	test   al,al
c0004a3f:	74 10                	je     c0004a51 <get_fileinfo+0x97>
c0004a41:	0f b6 c0             	movzx  eax,al
c0004a44:	31 d2                	xor    edx,edx
c0004a46:	01 c7                	add    edi,eax
c0004a48:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a4d:	89 d5                	mov    ebp,edx
c0004a4f:	eb b0                	jmp    c0004a01 <get_fileinfo+0x47>
c0004a51:	31 ff                	xor    edi,edi
c0004a53:	66 85 ed             	test   bp,bp
c0004a56:	74 02                	je     c0004a5a <get_fileinfo+0xa0>
c0004a58:	31 ff                	xor    edi,edi
c0004a5a:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a5f:	31 ff                	xor    edi,edi
c0004a61:	31 c9                	xor    ecx,ecx
c0004a63:	83 f9 0a             	cmp    ecx,0xa
c0004a66:	0f 87 ad 00 00 00    	ja     c0004b19 <get_fileinfo+0x15f>
c0004a6c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a6f:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a72:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a76:	66 83 fa 20          	cmp    dx,0x20
c0004a7a:	0f 84 92 00 00 00    	je     c0004b12 <get_fileinfo+0x158>
c0004a80:	66 83 fa 05          	cmp    dx,0x5
c0004a84:	75 05                	jne    c0004a8b <get_fileinfo+0xd1>
c0004a86:	ba e5 00 00 00       	mov    edx,0xe5
c0004a8b:	83 ff 0b             	cmp    edi,0xb
c0004a8e:	77 0b                	ja     c0004a9b <get_fileinfo+0xe1>
c0004a90:	83 fd 09             	cmp    ebp,0x9
c0004a93:	75 06                	jne    c0004a9b <get_fileinfo+0xe1>
c0004a95:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a9a:	47                   	inc    edi
c0004a9b:	0f b7 c2             	movzx  eax,dx
c0004a9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa2:	e8 6d d0 ff ff       	call   c0001b14 <dbc_1st>
c0004aa7:	85 c0                	test   eax,eax
c0004aa9:	74 2f                	je     c0004ada <get_fileinfo+0x120>
c0004aab:	83 fd 08             	cmp    ebp,0x8
c0004aae:	74 2a                	je     c0004ada <get_fileinfo+0x120>
c0004ab0:	83 fd 0b             	cmp    ebp,0xb
c0004ab3:	74 25                	je     c0004ada <get_fileinfo+0x120>
c0004ab5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab8:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004abc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac0:	e8 52 d0 ff ff       	call   c0001b17 <dbc_2nd>
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	74 11                	je     c0004ada <get_fileinfo+0x120>
c0004ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004acd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ad2:	c1 e2 08             	shl    edx,0x8
c0004ad5:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ad8:	09 c2                	or     edx,eax
c0004ada:	0f b7 d2             	movzx  edx,dx
c0004add:	50                   	push   eax
c0004ade:	50                   	push   eax
c0004adf:	68 b5 01 00 00       	push   0x1b5
c0004ae4:	52                   	push   edx
c0004ae5:	e8 46 38 00 00       	call   c0008330 <ff_oem2uni>
c0004aea:	83 c4 10             	add    esp,0x10
c0004aed:	66 85 c0             	test   ax,ax
c0004af0:	75 04                	jne    c0004af6 <get_fileinfo+0x13c>
c0004af2:	31 ff                	xor    edi,edi
c0004af4:	eb 23                	jmp    c0004b19 <get_fileinfo+0x15f>
c0004af6:	b9 0c 00 00 00       	mov    ecx,0xc
c0004afb:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aff:	29 f9                	sub    ecx,edi
c0004b01:	0f b7 c0             	movzx  eax,ax
c0004b04:	e8 d7 d0 ff ff       	call   c0001be0 <put_utf>
c0004b09:	84 c0                	test   al,al
c0004b0b:	74 e5                	je     c0004af2 <get_fileinfo+0x138>
c0004b0d:	0f b6 c0             	movzx  eax,al
c0004b10:	01 c7                	add    edi,eax
c0004b12:	89 e9                	mov    ecx,ebp
c0004b14:	e9 4a ff ff ff       	jmp    c0004a63 <get_fileinfo+0xa9>
c0004b19:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b1e:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b22:	75 54                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b24:	85 ff                	test   edi,edi
c0004b26:	75 0b                	jne    c0004b33 <get_fileinfo+0x179>
c0004b28:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b2c:	ba 01 00 00 00       	mov    edx,0x1
c0004b31:	eb 33                	jmp    c0004b66 <get_fileinfo+0x1ac>
c0004b33:	b1 08                	mov    cl,0x8
c0004b35:	31 d2                	xor    edx,edx
c0004b37:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b3d:	84 c0                	test   al,al
c0004b3f:	74 25                	je     c0004b66 <get_fileinfo+0x1ac>
c0004b41:	66 83 f8 2e          	cmp    ax,0x2e
c0004b45:	74 16                	je     c0004b5d <get_fileinfo+0x1a3>
c0004b47:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b4a:	66 83 ff 19          	cmp    di,0x19
c0004b4e:	77 0f                	ja     c0004b5f <get_fileinfo+0x1a5>
c0004b50:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b53:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b56:	74 07                	je     c0004b5f <get_fileinfo+0x1a5>
c0004b58:	83 c0 20             	add    eax,0x20
c0004b5b:	eb 02                	jmp    c0004b5f <get_fileinfo+0x1a5>
c0004b5d:	b1 10                	mov    cl,0x10
c0004b5f:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b63:	42                   	inc    edx
c0004b64:	eb d1                	jmp    c0004b37 <get_fileinfo+0x17d>
c0004b66:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b6b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6e:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b72:	75 04                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b74:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b7e:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b81:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b84:	83 c0 1c             	add    eax,0x1c
c0004b87:	e8 c1 ce ff ff       	call   c0001a4d <ld_dword>
c0004b8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b93:	89 03                	mov    DWORD PTR [ebx],eax
c0004b95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b98:	83 c0 16             	add    eax,0x16
c0004b9b:	e8 a0 ce ff ff       	call   c0001a40 <ld_word>
c0004ba0:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	83 c0 18             	add    eax,0x18
c0004baa:	e8 91 ce ff ff       	call   c0001a40 <ld_word>
c0004baf:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb3:	83 c4 1c             	add    esp,0x1c
c0004bb6:	5b                   	pop    ebx
c0004bb7:	5e                   	pop    esi
c0004bb8:	5f                   	pop    edi
c0004bb9:	5d                   	pop    ebp
c0004bba:	c3                   	ret    

c0004bbb <ld_clust.isra.0>:
c0004bbb:	56                   	push   esi
c0004bbc:	89 c6                	mov    esi,eax
c0004bbe:	53                   	push   ebx
c0004bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc2:	89 d3                	mov    ebx,edx
c0004bc4:	e8 77 ce ff ff       	call   c0001a40 <ld_word>
c0004bc9:	0f b7 c8             	movzx  ecx,ax
c0004bcc:	89 f0                	mov    eax,esi
c0004bce:	3c 03                	cmp    al,0x3
c0004bd0:	75 0d                	jne    c0004bdf <ld_clust.isra.0+0x24>
c0004bd2:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd5:	e8 66 ce ff ff       	call   c0001a40 <ld_word>
c0004bda:	c1 e0 10             	shl    eax,0x10
c0004bdd:	09 c1                	or     ecx,eax
c0004bdf:	89 c8                	mov    eax,ecx
c0004be1:	5b                   	pop    ebx
c0004be2:	5e                   	pop    esi
c0004be3:	c3                   	ret    

c0004be4 <st_clust.isra.1>:
c0004be4:	56                   	push   esi
c0004be5:	89 c6                	mov    esi,eax
c0004be7:	53                   	push   ebx
c0004be8:	89 d3                	mov    ebx,edx
c0004bea:	0f b7 d1             	movzx  edx,cx
c0004bed:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf0:	e8 bd ce ff ff       	call   c0001ab2 <st_word>
c0004bf5:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bf8:	75 0f                	jne    c0004c09 <st_clust.isra.1+0x25>
c0004bfa:	c1 e9 10             	shr    ecx,0x10
c0004bfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c00:	89 ca                	mov    edx,ecx
c0004c02:	5b                   	pop    ebx
c0004c03:	5e                   	pop    esi
c0004c04:	e9 a9 ce ff ff       	jmp    c0001ab2 <st_word>
c0004c09:	5b                   	pop    ebx
c0004c0a:	5e                   	pop    esi
c0004c0b:	c3                   	ret    

c0004c0c <init_alloc_info.isra.2>:
c0004c0c:	56                   	push   esi
c0004c0d:	53                   	push   ebx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	89 d3                	mov    ebx,edx
c0004c12:	51                   	push   ecx
c0004c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c15:	83 c0 34             	add    eax,0x34
c0004c18:	e8 30 ce ff ff       	call   c0001a4d <ld_dword>
c0004c1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c20:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c22:	83 c0 38             	add    eax,0x38
c0004c25:	e8 3b ce ff ff       	call   c0001a65 <ld_qword>
c0004c2a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c2d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c30:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c35:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3c:	83 e0 02             	and    eax,0x2
c0004c3f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c42:	5b                   	pop    ebx
c0004c43:	5b                   	pop    ebx
c0004c44:	5e                   	pop    esi
c0004c45:	c3                   	ret    

c0004c46 <follow_path>:
c0004c46:	56                   	push   esi
c0004c47:	53                   	push   ebx
c0004c48:	89 c3                	mov    ebx,eax
c0004c4a:	83 ec 14             	sub    esp,0x14
c0004c4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c51:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c59:	80 fa 5c             	cmp    dl,0x5c
c0004c5c:	75 07                	jne    c0004c65 <follow_path+0x1f>
c0004c5e:	40                   	inc    eax
c0004c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c63:	eb ee                	jmp    c0004c53 <follow_path+0xd>
c0004c65:	80 fa 2f             	cmp    dl,0x2f
c0004c68:	74 f4                	je     c0004c5e <follow_path+0x18>
c0004c6a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c71:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c7b:	77 52                	ja     c0004ccf <follow_path+0x89>
c0004c7d:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c81:	31 d2                	xor    edx,edx
c0004c83:	89 d8                	mov    eax,ebx
c0004c85:	e8 12 e3 ff ff       	call   c0002f9c <dir_sdi>
c0004c8a:	eb 7c                	jmp    c0004d08 <follow_path+0xc2>
c0004c8c:	89 d8                	mov    eax,ebx
c0004c8e:	e8 6e f2 ff ff       	call   c0003f01 <dir_find>
c0004c93:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c96:	85 c0                	test   eax,eax
c0004c98:	75 46                	jne    c0004ce0 <follow_path+0x9a>
c0004c9a:	80 e2 04             	and    dl,0x4
c0004c9d:	75 69                	jne    c0004d08 <follow_path+0xc2>
c0004c9f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca3:	74 5e                	je     c0004d03 <follow_path+0xbd>
c0004ca5:	8a 06                	mov    al,BYTE PTR [esi]
c0004ca7:	3c 04                	cmp    al,0x4
c0004ca9:	75 41                	jne    c0004cec <follow_path+0xa6>
c0004cab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cae:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cb5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cb8:	30 c0                	xor    al,al
c0004cba:	09 d0                	or     eax,edx
c0004cbc:	89 da                	mov    edx,ebx
c0004cbe:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc1:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cc7:	8d 46 10             	lea    eax,[esi+0x10]
c0004cca:	e8 3d ff ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004ccf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd3:	89 d8                	mov    eax,ebx
c0004cd5:	e8 a9 ed ff ff       	call   c0003a83 <create_name>
c0004cda:	85 c0                	test   eax,eax
c0004cdc:	74 ae                	je     c0004c8c <follow_path+0x46>
c0004cde:	eb 28                	jmp    c0004d08 <follow_path+0xc2>
c0004ce0:	83 f8 04             	cmp    eax,0x4
c0004ce3:	75 23                	jne    c0004d08 <follow_path+0xc2>
c0004ce5:	80 e2 04             	and    dl,0x4
c0004ce8:	74 19                	je     c0004d03 <follow_path+0xbd>
c0004cea:	eb 1c                	jmp    c0004d08 <follow_path+0xc2>
c0004cec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cf5:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cf9:	e8 bd fe ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004cfe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d01:	eb cc                	jmp    c0004ccf <follow_path+0x89>
c0004d03:	b8 05 00 00 00       	mov    eax,0x5
c0004d08:	83 c4 14             	add    esp,0x14
c0004d0b:	5b                   	pop    ebx
c0004d0c:	5e                   	pop    esi
c0004d0d:	c3                   	ret    

c0004d0e <f_mount>:
c0004d0e:	53                   	push   ebx
c0004d0f:	83 ec 18             	sub    esp,0x18
c0004d12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d22:	e8 fb d2 ff ff       	call   c0002022 <get_ldnumber>
c0004d27:	89 c2                	mov    edx,eax
c0004d29:	b8 0b 00 00 00       	mov    eax,0xb
c0004d2e:	85 d2                	test   edx,edx
c0004d30:	78 39                	js     c0004d6b <f_mount+0x5d>
c0004d32:	8b 04 95 00 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbd00]
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	74 03                	je     c0004d40 <f_mount+0x32>
c0004d3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x3d>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	89 04 95 00 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbd00],eax
c0004d56:	31 c0                	xor    eax,eax
c0004d58:	84 db                	test   bl,bl
c0004d5a:	74 0f                	je     c0004d6b <f_mount+0x5d>
c0004d5c:	31 c9                	xor    ecx,ecx
c0004d5e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d66:	e8 65 d7 ff ff       	call   c00024d0 <mount_volume>
c0004d6b:	83 c4 18             	add    esp,0x18
c0004d6e:	5b                   	pop    ebx
c0004d6f:	c3                   	ret    

c0004d70 <f_open>:
c0004d70:	55                   	push   ebp
c0004d71:	bd 09 00 00 00       	mov    ebp,0x9
c0004d76:	57                   	push   edi
c0004d77:	56                   	push   esi
c0004d78:	53                   	push   ebx
c0004d79:	83 ec 7c             	sub    esp,0x7c
c0004d7c:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d83:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d8a:	85 db                	test   ebx,ebx
c0004d8c:	0f 84 10 04 00 00    	je     c00051a2 <f_open+0x432>
c0004d92:	89 fe                	mov    esi,edi
c0004d94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d98:	83 e6 3f             	and    esi,0x3f
c0004d9b:	89 f0                	mov    eax,esi
c0004d9d:	0f b6 c8             	movzx  ecx,al
c0004da0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004da7:	e8 24 d7 ff ff       	call   c00024d0 <mount_volume>
c0004dac:	89 c5                	mov    ebp,eax
c0004dae:	85 c0                	test   eax,eax
c0004db0:	0f 85 e6 03 00 00    	jne    c000519c <f_open+0x42c>
c0004db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dba:	bd 11 00 00 00       	mov    ebp,0x11
c0004dbf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc3:	83 ec 0c             	sub    esp,0xc
c0004dc6:	68 60 04 00 00       	push   0x460
c0004dcb:	e8 a3 34 00 00       	call   c0008273 <ff_memalloc>
c0004dd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd4:	83 c4 10             	add    esp,0x10
c0004dd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ddc:	0f 84 c0 03 00 00    	je     c00051a2 <f_open+0x432>
c0004de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dea:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df0:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004df6:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e01:	e8 40 fe ff ff       	call   c0004c46 <follow_path>
c0004e06:	89 c5                	mov    ebp,eax
c0004e08:	85 c0                	test   eax,eax
c0004e0a:	75 0c                	jne    c0004e18 <f_open+0xa8>
c0004e0c:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e11:	79 05                	jns    c0004e18 <f_open+0xa8>
c0004e13:	bd 06 00 00 00       	mov    ebp,0x6
c0004e18:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e1e:	0f 84 84 01 00 00    	je     c0004fa8 <f_open+0x238>
c0004e24:	85 ed                	test   ebp,ebp
c0004e26:	74 20                	je     c0004e48 <f_open+0xd8>
c0004e28:	83 fd 04             	cmp    ebp,0x4
c0004e2b:	0f 85 58 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e31:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e35:	83 ce 08             	or     esi,0x8
c0004e38:	e8 8a f2 ff ff       	call   c00040c7 <dir_register>
c0004e3d:	89 c5                	mov    ebp,eax
c0004e3f:	85 c0                	test   eax,eax
c0004e41:	74 2f                	je     c0004e72 <f_open+0x102>
c0004e43:	e9 41 03 00 00       	jmp    c0005189 <f_open+0x419>
c0004e48:	bd 07 00 00 00       	mov    ebp,0x7
c0004e4d:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e52:	0f 85 31 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e58:	bd 08 00 00 00       	mov    ebp,0x8
c0004e5d:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e63:	0f 85 20 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e69:	83 e7 08             	and    edi,0x8
c0004e6c:	0f 84 65 01 00 00    	je     c0004fd7 <f_open+0x267>
c0004e72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e76:	8a 02                	mov    al,BYTE PTR [edx]
c0004e78:	3c 04                	cmp    al,0x4
c0004e7a:	0f 85 97 00 00 00    	jne    c0004f17 <f_open+0x1a7>
c0004e80:	8d 42 10             	lea    eax,[edx+0x10]
c0004e83:	89 13                	mov    DWORD PTR [ebx],edx
c0004e85:	89 da                	mov    edx,ebx
c0004e87:	e8 80 fd ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004e8c:	31 d2                	xor    edx,edx
c0004e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e92:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9a:	83 c0 02             	add    eax,0x2
c0004e9d:	e8 32 cc ff ff       	call   c0001ad4 <mem_set>
c0004ea2:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea7:	31 d2                	xor    edx,edx
c0004ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ead:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb0:	83 c0 26             	add    eax,0x26
c0004eb3:	e8 1c cc ff ff       	call   c0001ad4 <mem_set>
c0004eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ebf:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecb:	83 c0 08             	add    eax,0x8
c0004ece:	e8 e3 cb ff ff       	call   c0001ab6 <st_dword>
c0004ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eda:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ede:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee2:	e8 b7 ea ff ff       	call   c000399e <store_xdir>
c0004ee7:	89 c5                	mov    ebp,eax
c0004ee9:	85 c0                	test   eax,eax
c0004eeb:	0f 85 98 02 00 00    	jne    c0005189 <f_open+0x419>
c0004ef1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef4:	85 d2                	test   edx,edx
c0004ef6:	0f 84 db 00 00 00    	je     c0004fd7 <f_open+0x267>
c0004efc:	31 c9                	xor    ecx,ecx
c0004efe:	89 d8                	mov    eax,ebx
c0004f00:	e8 8e e3 ff ff       	call   c0003293 <remove_chain>
c0004f05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f09:	89 c5                	mov    ebp,eax
c0004f0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f0e:	48                   	dec    eax
c0004f0f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f12:	e9 b8 00 00 00       	jmp    c0004fcf <f_open+0x25f>
c0004f17:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f1b:	89 ea                	mov    edx,ebp
c0004f1d:	e8 99 fc ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004f22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f27:	89 c7                	mov    edi,eax
c0004f29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f2c:	e8 85 cb ff ff       	call   c0001ab6 <st_dword>
c0004f31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f35:	31 c9                	xor    ecx,ecx
c0004f37:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f3f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f43:	e8 9c fc ff ff       	call   c0004be4 <st_clust.isra.1>
c0004f48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4c:	31 d2                	xor    edx,edx
c0004f4e:	83 c0 1c             	add    eax,0x1c
c0004f51:	e8 60 cb ff ff       	call   c0001ab6 <st_dword>
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	85 ff                	test   edi,edi
c0004f5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f60:	74 75                	je     c0004fd7 <f_open+0x267>
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	31 c9                	xor    ecx,ecx
c0004f68:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f6b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f76:	89 fa                	mov    edx,edi
c0004f78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7c:	e8 12 e3 ff ff       	call   c0003293 <remove_chain>
c0004f81:	89 c5                	mov    ebp,eax
c0004f83:	85 c0                	test   eax,eax
c0004f85:	0f 85 fe 01 00 00    	jne    c0005189 <f_open+0x419>
c0004f8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	4f                   	dec    edi
c0004f98:	e8 81 d2 ff ff       	call   c000221e <move_window>
c0004f9d:	89 c5                	mov    ebp,eax
c0004f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fa6:	eb 27                	jmp    c0004fcf <f_open+0x25f>
c0004fa8:	85 ed                	test   ebp,ebp
c0004faa:	0f 85 d9 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fb0:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb4:	bd 04 00 00 00       	mov    ebp,0x4
c0004fb9:	a8 10                	test   al,0x10
c0004fbb:	0f 85 c8 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fc1:	83 e7 02             	and    edi,0x2
c0004fc4:	74 11                	je     c0004fd7 <f_open+0x267>
c0004fc6:	bd 07 00 00 00       	mov    ebp,0x7
c0004fcb:	a8 01                	test   al,0x1
c0004fcd:	eb 02                	jmp    c0004fd1 <f_open+0x261>
c0004fcf:	85 ed                	test   ebp,ebp
c0004fd1:	0f 85 b2 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fd7:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fdd:	74 03                	je     c0004fe2 <f_open+0x272>
c0004fdf:	83 ce 40             	or     esi,0x40
c0004fe2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fe6:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fe9:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fec:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fef:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ff2:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff6:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ff9:	8a 02                	mov    al,BYTE PTR [edx]
c0004ffb:	3c 04                	cmp    al,0x4
c0004ffd:	75 2a                	jne    c0005029 <f_open+0x2b9>
c0004fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005003:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005008:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000500b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000500f:	30 c0                	xor    al,al
c0005011:	09 c8                	or     eax,ecx
c0005013:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005016:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000501a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000501d:	8d 42 10             	lea    eax,[edx+0x10]
c0005020:	89 da                	mov    edx,ebx
c0005022:	e8 e5 fb ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005027:	eb 1c                	jmp    c0005045 <f_open+0x2d5>
c0005029:	89 fa                	mov    edx,edi
c000502b:	e8 8b fb ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005030:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005033:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005036:	e8 12 ca ff ff       	call   c0001a4d <ld_dword>
c000503b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005042:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005049:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005050:	89 03                	mov    DWORD PTR [ebx],eax
c0005052:	31 d2                	xor    edx,edx
c0005054:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005058:	b9 00 02 00 00       	mov    ecx,0x200
c000505d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005061:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005065:	89 f0                	mov    eax,esi
c0005067:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000506e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005071:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005078:	8d 43 50             	lea    eax,[ebx+0x50]
c000507b:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005082:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000508d:	e8 42 ca ff ff       	call   c0001ad4 <mem_set>
c0005092:	83 e6 20             	and    esi,0x20
c0005095:	75 07                	jne    c000509e <f_open+0x32e>
c0005097:	31 ed                	xor    ebp,ebp
c0005099:	e9 eb 00 00 00       	jmp    c0005189 <f_open+0x419>
c000509e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b4:	74 e1                	je     c0005097 <f_open+0x327>
c00050b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c1:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050cb:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050cf:	31 ff                	xor    edi,edi
c00050d1:	c1 e5 09             	shl    ebp,0x9
c00050d4:	89 ee                	mov    esi,ebp
c00050d6:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050da:	89 f8                	mov    eax,edi
c00050dc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e0:	73 22                	jae    c0005104 <f_open+0x394>
c00050e2:	89 d8                	mov    eax,ebx
c00050e4:	e8 bd dc ff ff       	call   c0002da6 <get_fat>
c00050e9:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ed:	89 c2                	mov    edx,eax
c00050ef:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f3:	83 f8 01             	cmp    eax,0x1
c00050f6:	76 10                	jbe    c0005108 <f_open+0x398>
c00050f8:	83 f8 ff             	cmp    eax,0xffffffff
c00050fb:	75 d9                	jne    c00050d6 <f_open+0x366>
c00050fd:	bd 01 00 00 00       	mov    ebp,0x1
c0005102:	eb 09                	jmp    c000510d <f_open+0x39d>
c0005104:	31 ed                	xor    ebp,ebp
c0005106:	eb 05                	jmp    c000510d <f_open+0x39d>
c0005108:	bd 02 00 00 00       	mov    ebp,0x2
c000510d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005110:	85 ed                	test   ebp,ebp
c0005112:	75 75                	jne    c0005189 <f_open+0x419>
c0005114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005118:	25 ff 01 00 00       	and    eax,0x1ff
c000511d:	0f 84 74 ff ff ff    	je     c0005097 <f_open+0x327>
c0005123:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005127:	bd 02 00 00 00       	mov    ebp,0x2
c000512c:	89 c8                	mov    eax,ecx
c000512e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005132:	e8 a2 cb ff ff       	call   c0001cd9 <clst2sect>
c0005137:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000513b:	89 d7                	mov    edi,edx
c000513d:	09 c7                	or     edi,eax
c000513f:	74 48                	je     c0005189 <f_open+0x419>
c0005141:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005149:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005151:	0f ac fe 09          	shrd   esi,edi,0x9
c0005155:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005159:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000515d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005160:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005164:	83 ec 0c             	sub    esp,0xc
c0005167:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000516a:	6a 01                	push   0x1
c000516c:	52                   	push   edx
c000516d:	50                   	push   eax
c000516e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005172:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005176:	50                   	push   eax
c0005177:	e8 79 c8 ff ff       	call   c00019f5 <disk_read>
c000517c:	83 c4 20             	add    esp,0x20
c000517f:	85 c0                	test   eax,eax
c0005181:	0f 95 c0             	setne  al
c0005184:	0f b6 c0             	movzx  eax,al
c0005187:	89 c5                	mov    ebp,eax
c0005189:	83 ec 0c             	sub    esp,0xc
c000518c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005190:	e8 f4 30 00 00       	call   c0008289 <ff_memfree>
c0005195:	83 c4 10             	add    esp,0x10
c0005198:	85 ed                	test   ebp,ebp
c000519a:	74 06                	je     c00051a2 <f_open+0x432>
c000519c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a2:	83 c4 7c             	add    esp,0x7c
c00051a5:	89 e8                	mov    eax,ebp
c00051a7:	5b                   	pop    ebx
c00051a8:	5e                   	pop    esi
c00051a9:	5f                   	pop    edi
c00051aa:	5d                   	pop    ebp
c00051ab:	c3                   	ret    

c00051ac <f_read>:
c00051ac:	55                   	push   ebp
c00051ad:	57                   	push   edi
c00051ae:	56                   	push   esi
c00051af:	53                   	push   ebx
c00051b0:	83 ec 2c             	sub    esp,0x2c
c00051b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	89 d8                	mov    eax,ebx
c00051c7:	e8 77 cf ff ff       	call   c0002143 <validate>
c00051cc:	89 c5                	mov    ebp,eax
c00051ce:	85 c0                	test   eax,eax
c00051d0:	0f 85 4c 02 00 00    	jne    c0005422 <f_read+0x276>
c00051d6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051da:	85 ed                	test   ebp,ebp
c00051dc:	0f 85 40 02 00 00    	jne    c0005422 <f_read+0x276>
c00051e2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051e6:	0f 84 31 02 00 00    	je     c000541d <f_read+0x271>
c00051ec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051ef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051f5:	bf 00 00 00 00       	mov    edi,0x0
c00051fa:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051fd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005201:	89 d1                	mov    ecx,edx
c0005203:	19 f9                	sbb    ecx,edi
c0005205:	0f 83 cf 00 00 00    	jae    c00052da <f_read+0x12e>
c000520b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000520f:	e9 c6 00 00 00       	jmp    c00052da <f_read+0x12e>
c0005214:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005217:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000521a:	89 d0                	mov    eax,edx
c000521c:	25 ff 01 00 00       	and    eax,0x1ff
c0005221:	0f 85 c9 01 00 00    	jne    c00053f0 <f_read+0x244>
c0005227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522b:	89 d6                	mov    esi,edx
c000522d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005231:	89 cf                	mov    edi,ecx
c0005233:	48                   	dec    eax
c0005234:	0f ac fe 09          	shrd   esi,edi,0x9
c0005238:	21 f0                	and    eax,esi
c000523a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000523e:	0f 84 a6 00 00 00    	je     c00052ea <f_read+0x13e>
c0005244:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005248:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000524b:	89 c8                	mov    eax,ecx
c000524d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005250:	e8 84 ca ff ff       	call   c0001cd9 <clst2sect>
c0005255:	89 d7                	mov    edi,edx
c0005257:	09 c7                	or     edi,eax
c0005259:	0f 84 b4 00 00 00    	je     c0005313 <f_read+0x167>
c000525f:	31 ff                	xor    edi,edi
c0005261:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005265:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005268:	01 c6                	add    esi,eax
c000526a:	11 d7                	adc    edi,edx
c000526c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005274:	0f 86 fd 00 00 00    	jbe    c0005377 <f_read+0x1cb>
c000527a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000527e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005282:	c1 e8 09             	shr    eax,0x9
c0005285:	89 04 24             	mov    DWORD PTR [esp],eax
c0005288:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000528c:	03 14 24             	add    edx,DWORD PTR [esp]
c000528f:	39 c2                	cmp    edx,eax
c0005291:	76 07                	jbe    c000529a <f_read+0xee>
c0005293:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005297:	89 04 24             	mov    DWORD PTR [esp],eax
c000529a:	83 ec 0c             	sub    esp,0xc
c000529d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a1:	57                   	push   edi
c00052a2:	56                   	push   esi
c00052a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ab:	50                   	push   eax
c00052ac:	e8 44 c7 ff ff       	call   c00019f5 <disk_read>
c00052b1:	83 c4 20             	add    esp,0x20
c00052b4:	85 c0                	test   eax,eax
c00052b6:	75 6e                	jne    c0005326 <f_read+0x17a>
c00052b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052bc:	78 7e                	js     c000533c <f_read+0x190>
c00052be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c1:	c1 e6 09             	shl    esi,0x9
c00052c4:	31 ff                	xor    edi,edi
c00052c6:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ce:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d2:	01 30                	add    DWORD PTR [eax],esi
c00052d4:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052d7:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052da:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052df:	0f 85 2f ff ff ff    	jne    c0005214 <f_read+0x68>
c00052e5:	e9 38 01 00 00       	jmp    c0005422 <f_read+0x276>
c00052ea:	89 c8                	mov    eax,ecx
c00052ec:	09 d0                	or     eax,edx
c00052ee:	75 05                	jne    c00052f5 <f_read+0x149>
c00052f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f3:	eb 19                	jmp    c000530e <f_read+0x162>
c00052f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052f9:	74 09                	je     c0005304 <f_read+0x158>
c00052fb:	89 d8                	mov    eax,ebx
c00052fd:	e8 f8 c9 ff ff       	call   c0001cfa <clmt_clust>
c0005302:	eb 0a                	jmp    c000530e <f_read+0x162>
c0005304:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005307:	89 d8                	mov    eax,ebx
c0005309:	e8 98 da ff ff       	call   c0002da6 <get_fat>
c000530e:	83 f8 01             	cmp    eax,0x1
c0005311:	77 0e                	ja     c0005321 <f_read+0x175>
c0005313:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005317:	bd 02 00 00 00       	mov    ebp,0x2
c000531c:	e9 01 01 00 00       	jmp    c0005422 <f_read+0x276>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 0e                	jne    c0005334 <f_read+0x188>
c0005326:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000532a:	bd 01 00 00 00       	mov    ebp,0x1
c000532f:	e9 ee 00 00 00       	jmp    c0005422 <f_read+0x276>
c0005334:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005337:	e9 08 ff ff ff       	jmp    c0005244 <f_read+0x98>
c000533c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005342:	29 f0                	sub    eax,esi
c0005344:	19 fa                	sbb    edx,edi
c0005346:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005349:	89 d7                	mov    edi,edx
c000534b:	ba 00 00 00 00       	mov    edx,0x0
c0005350:	89 f9                	mov    ecx,edi
c0005352:	19 d1                	sbb    ecx,edx
c0005354:	0f 83 64 ff ff ff    	jae    c00052be <f_read+0x112>
c000535a:	89 c7                	mov    edi,eax
c000535c:	8d 53 50             	lea    edx,[ebx+0x50]
c000535f:	c1 e7 09             	shl    edi,0x9
c0005362:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005366:	b9 00 02 00 00       	mov    ecx,0x200
c000536b:	01 f8                	add    eax,edi
c000536d:	e8 4d c7 ff ff       	call   c0001abf <mem_cpy>
c0005372:	e9 47 ff ff ff       	jmp    c00052be <f_read+0x112>
c0005377:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000537a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005380:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005384:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005388:	75 05                	jne    c000538f <f_read+0x1e3>
c000538a:	39 34 24             	cmp    DWORD PTR [esp],esi
c000538d:	74 5b                	je     c00053ea <f_read+0x23e>
c000538f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005392:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005396:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000539a:	79 2a                	jns    c00053c6 <f_read+0x21a>
c000539c:	83 ec 0c             	sub    esp,0xc
c000539f:	6a 01                	push   0x1
c00053a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b1:	50                   	push   eax
c00053b2:	e8 54 c6 ff ff       	call   c0001a0b <disk_write>
c00053b7:	83 c4 20             	add    esp,0x20
c00053ba:	85 c0                	test   eax,eax
c00053bc:	0f 85 64 ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053c6:	83 ec 0c             	sub    esp,0xc
c00053c9:	6a 01                	push   0x1
c00053cb:	57                   	push   edi
c00053cc:	56                   	push   esi
c00053cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053d9:	50                   	push   eax
c00053da:	e8 16 c6 ff ff       	call   c00019f5 <disk_read>
c00053df:	83 c4 20             	add    esp,0x20
c00053e2:	85 c0                	test   eax,eax
c00053e4:	0f 85 3c ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053ea:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ed:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f3:	ba 00 02 00 00       	mov    edx,0x200
c00053f8:	25 ff 01 00 00       	and    eax,0x1ff
c00053fd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005401:	29 c2                	sub    edx,eax
c0005403:	39 d6                	cmp    esi,edx
c0005405:	76 02                	jbe    c0005409 <f_read+0x25d>
c0005407:	89 d6                	mov    esi,edx
c0005409:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000540d:	89 f1                	mov    ecx,esi
c000540f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005413:	e8 a7 c6 ff ff       	call   c0001abf <mem_cpy>
c0005418:	e9 a7 fe ff ff       	jmp    c00052c4 <f_read+0x118>
c000541d:	bd 07 00 00 00       	mov    ebp,0x7
c0005422:	83 c4 2c             	add    esp,0x2c
c0005425:	89 e8                	mov    eax,ebp
c0005427:	5b                   	pop    ebx
c0005428:	5e                   	pop    esi
c0005429:	5f                   	pop    edi
c000542a:	5d                   	pop    ebp
c000542b:	c3                   	ret    

c000542c <f_write>:
c000542c:	55                   	push   ebp
c000542d:	57                   	push   edi
c000542e:	56                   	push   esi
c000542f:	53                   	push   ebx
c0005430:	83 ec 2c             	sub    esp,0x2c
c0005433:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005437:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000543b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005441:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005445:	89 d8                	mov    eax,ebx
c0005447:	e8 f7 cc ff ff       	call   c0002143 <validate>
c000544c:	89 c5                	mov    ebp,eax
c000544e:	85 c0                	test   eax,eax
c0005450:	0f 85 86 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005456:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000545a:	85 ed                	test   ebp,ebp
c000545c:	0f 85 7a 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005462:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005466:	0f 84 6b 02 00 00    	je     c00056d7 <f_write+0x2ab>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005473:	0f 84 43 01 00 00    	je     c00055bc <f_write+0x190>
c0005479:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000547c:	89 c1                	mov    ecx,eax
c000547e:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005482:	0f 83 34 01 00 00    	jae    c00055bc <f_write+0x190>
c0005488:	f7 d0                	not    eax
c000548a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000548e:	e9 29 01 00 00       	jmp    c00055bc <f_write+0x190>
c0005493:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005496:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005499:	89 d0                	mov    eax,edx
c000549b:	25 ff 01 00 00       	and    eax,0x1ff
c00054a0:	0f 85 00 02 00 00    	jne    c00056a6 <f_write+0x27a>
c00054a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054aa:	89 d6                	mov    esi,edx
c00054ac:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b0:	89 cf                	mov    edi,ecx
c00054b2:	48                   	dec    eax
c00054b3:	0f ac fe 09          	shrd   esi,edi,0x9
c00054b7:	21 f0                	and    eax,esi
c00054b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054bd:	0f 84 06 01 00 00    	je     c00055c9 <f_write+0x19d>
c00054c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c7:	0f 88 6e 01 00 00    	js     c000563b <f_write+0x20f>
c00054cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d4:	89 c8                	mov    eax,ecx
c00054d6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054da:	e8 fa c7 ff ff       	call   c0001cd9 <clst2sect>
c00054df:	89 d1                	mov    ecx,edx
c00054e1:	09 c1                	or     ecx,eax
c00054e3:	0f 84 1c 01 00 00    	je     c0005605 <f_write+0x1d9>
c00054e9:	31 ff                	xor    edi,edi
c00054eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054f3:	01 c6                	add    esi,eax
c00054f5:	11 d7                	adc    edi,edx
c00054f7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ff:	0f 86 63 01 00 00    	jbe    c0005668 <f_write+0x23c>
c0005505:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005509:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000550d:	c1 e8 09             	shr    eax,0x9
c0005510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005514:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005518:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000551c:	39 c2                	cmp    edx,eax
c000551e:	76 08                	jbe    c0005528 <f_write+0xfc>
c0005520:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005528:	83 ec 0c             	sub    esp,0xc
c000552b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000552f:	57                   	push   edi
c0005530:	56                   	push   esi
c0005531:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005535:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005539:	50                   	push   eax
c000553a:	e8 cc c4 ff ff       	call   c0001a0b <disk_write>
c000553f:	83 c4 20             	add    esp,0x20
c0005542:	85 c0                	test   eax,eax
c0005544:	0f 85 ce 00 00 00    	jne    c0005618 <f_write+0x1ec>
c000554a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005550:	29 f0                	sub    eax,esi
c0005552:	19 fa                	sbb    edx,edi
c0005554:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005558:	89 d7                	mov    edi,edx
c000555a:	ba 00 00 00 00       	mov    edx,0x0
c000555f:	89 f9                	mov    ecx,edi
c0005561:	19 d1                	sbb    ecx,edx
c0005563:	73 1c                	jae    c0005581 <f_write+0x155>
c0005565:	89 c7                	mov    edi,eax
c0005567:	b9 00 02 00 00       	mov    ecx,0x200
c000556c:	c1 e7 09             	shl    edi,0x9
c000556f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005572:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005576:	89 fa                	mov    edx,edi
c0005578:	e8 42 c5 ff ff       	call   c0001abf <mem_cpy>
c000557d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005581:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005585:	c1 e6 09             	shl    esi,0x9
c0005588:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000558c:	31 ff                	xor    edi,edi
c000558e:	01 30                	add    DWORD PTR [eax],esi
c0005590:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005594:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005598:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000559b:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000559e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a1:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a4:	89 c1                	mov    ecx,eax
c00055a6:	39 f2                	cmp    edx,esi
c00055a8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055ae:	19 f9                	sbb    ecx,edi
c00055b0:	73 04                	jae    c00055b6 <f_write+0x18a>
c00055b2:	89 f2                	mov    edx,esi
c00055b4:	89 f8                	mov    eax,edi
c00055b6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055b9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055bc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c1:	0f 85 cc fe ff ff    	jne    c0005493 <f_write+0x67>
c00055c7:	eb 2e                	jmp    c00055f7 <f_write+0x1cb>
c00055c9:	89 c8                	mov    eax,ecx
c00055cb:	09 d0                	or     eax,edx
c00055cd:	75 0b                	jne    c00055da <f_write+0x1ae>
c00055cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d2:	31 d2                	xor    edx,edx
c00055d4:	85 c0                	test   eax,eax
c00055d6:	75 28                	jne    c0005600 <f_write+0x1d4>
c00055d8:	eb 12                	jmp    c00055ec <f_write+0x1c0>
c00055da:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055de:	74 09                	je     c00055e9 <f_write+0x1bd>
c00055e0:	89 d8                	mov    eax,ebx
c00055e2:	e8 13 c7 ff ff       	call   c0001cfa <clmt_clust>
c00055e7:	eb 0a                	jmp    c00055f3 <f_write+0x1c7>
c00055e9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ec:	89 d8                	mov    eax,ebx
c00055ee:	e8 a1 da ff ff       	call   c0003094 <create_chain>
c00055f3:	85 c0                	test   eax,eax
c00055f5:	75 09                	jne    c0005600 <f_write+0x1d4>
c00055f7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055fb:	e9 dc 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005600:	83 f8 01             	cmp    eax,0x1
c0005603:	75 0e                	jne    c0005613 <f_write+0x1e7>
c0005605:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005609:	bd 02 00 00 00       	mov    ebp,0x2
c000560e:	e9 c9 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005613:	83 f8 ff             	cmp    eax,0xffffffff
c0005616:	75 0e                	jne    c0005626 <f_write+0x1fa>
c0005618:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000561c:	bd 01 00 00 00       	mov    ebp,0x1
c0005621:	e9 b6 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005626:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005629:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000562d:	0f 85 90 fe ff ff    	jne    c00054c3 <f_write+0x97>
c0005633:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005636:	e9 88 fe ff ff       	jmp    c00054c3 <f_write+0x97>
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005641:	6a 01                	push   0x1
c0005643:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005646:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005649:	50                   	push   eax
c000564a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000564e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 b3 c3 ff ff       	call   c0001a0b <disk_write>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	75 b9                	jne    c0005618 <f_write+0x1ec>
c000565f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005663:	e9 65 fe ff ff       	jmp    c00054cd <f_write+0xa1>
c0005668:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000566b:	75 05                	jne    c0005672 <f_write+0x246>
c000566d:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005670:	74 2e                	je     c00056a0 <f_write+0x274>
c0005672:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005675:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005678:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000567b:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000567e:	73 20                	jae    c00056a0 <f_write+0x274>
c0005680:	83 ec 0c             	sub    esp,0xc
c0005683:	8d 43 50             	lea    eax,[ebx+0x50]
c0005686:	6a 01                	push   0x1
c0005688:	57                   	push   edi
c0005689:	56                   	push   esi
c000568a:	50                   	push   eax
c000568b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000568f:	50                   	push   eax
c0005690:	e8 60 c3 ff ff       	call   c00019f5 <disk_read>
c0005695:	83 c4 20             	add    esp,0x20
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 78 ff ff ff    	jne    c0005618 <f_write+0x1ec>
c00056a0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056a6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a9:	ba 00 02 00 00       	mov    edx,0x200
c00056ae:	25 ff 01 00 00       	and    eax,0x1ff
c00056b3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056b7:	29 c2                	sub    edx,eax
c00056b9:	39 d6                	cmp    esi,edx
c00056bb:	76 02                	jbe    c00056bf <f_write+0x293>
c00056bd:	89 d6                	mov    esi,edx
c00056bf:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c3:	89 f1                	mov    ecx,esi
c00056c5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056c9:	e8 f1 c3 ff ff       	call   c0001abf <mem_cpy>
c00056ce:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d2:	e9 b1 fe ff ff       	jmp    c0005588 <f_write+0x15c>
c00056d7:	bd 07 00 00 00       	mov    ebp,0x7
c00056dc:	83 c4 2c             	add    esp,0x2c
c00056df:	89 e8                	mov    eax,ebp
c00056e1:	5b                   	pop    ebx
c00056e2:	5e                   	pop    esi
c00056e3:	5f                   	pop    edi
c00056e4:	5d                   	pop    ebp
c00056e5:	c3                   	ret    

c00056e6 <f_sync>:
c00056e6:	56                   	push   esi
c00056e7:	53                   	push   ebx
c00056e8:	83 ec 64             	sub    esp,0x64
c00056eb:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056ef:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 49 ca ff ff       	call   c0002143 <validate>
c00056fa:	85 c0                	test   eax,eax
c00056fc:	0f 85 ba 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005702:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005705:	f6 c2 40             	test   dl,0x40
c0005708:	0f 84 ae 01 00 00    	je     c00058bc <f_sync+0x1d6>
c000570e:	84 d2                	test   dl,dl
c0005710:	79 33                	jns    c0005745 <f_sync+0x5f>
c0005712:	83 ec 0c             	sub    esp,0xc
c0005715:	8d 43 50             	lea    eax,[ebx+0x50]
c0005718:	6a 01                	push   0x1
c000571a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000571d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005720:	50                   	push   eax
c0005721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005725:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005729:	50                   	push   eax
c000572a:	e8 dc c2 ff ff       	call   c0001a0b <disk_write>
c000572f:	83 c4 20             	add    esp,0x20
c0005732:	89 c2                	mov    edx,eax
c0005734:	b8 01 00 00 00       	mov    eax,0x1
c0005739:	85 d2                	test   edx,edx
c000573b:	0f 85 7b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005741:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005749:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000574c:	0f 85 11 01 00 00    	jne    c0005863 <f_sync+0x17d>
c0005752:	89 d8                	mov    eax,ebx
c0005754:	e8 13 d6 ff ff       	call   c0002d6c <fill_first_frag>
c0005759:	85 c0                	test   eax,eax
c000575b:	0f 85 5b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005761:	83 c9 ff             	or     ecx,0xffffffff
c0005764:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005767:	89 d8                	mov    eax,ebx
c0005769:	e8 c9 d5 ff ff       	call   c0002d37 <fill_last_frag>
c000576e:	85 c0                	test   eax,eax
c0005770:	0f 85 46 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005776:	83 ec 0c             	sub    esp,0xc
c0005779:	68 60 04 00 00       	push   0x460
c000577e:	e8 f0 2a 00 00       	call   c0008273 <ff_memalloc>
c0005783:	83 c4 10             	add    esp,0x10
c0005786:	89 c6                	mov    esi,eax
c0005788:	b8 11 00 00 00       	mov    eax,0x11
c000578d:	85 f6                	test   esi,esi
c000578f:	0f 84 27 01 00 00    	je     c00058bc <f_sync+0x1d6>
c0005795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005799:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000579f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a5:	89 da                	mov    edx,ebx
c00057a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057ab:	e8 af df ff ff       	call   c000375f <load_obj_xdir>
c00057b0:	85 c0                	test   eax,eax
c00057b2:	0f 85 95 00 00 00    	jne    c000584d <f_sync+0x167>
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057bf:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c3:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057c6:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057c9:	83 ca 01             	or     edx,0x1
c00057cc:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057cf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d5:	83 c0 34             	add    eax,0x34
c00057d8:	e8 d9 c2 ff ff       	call   c0001ab6 <st_dword>
c00057dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ea:	83 c0 38             	add    eax,0x38
c00057ed:	e8 c7 c2 ff ff       	call   c0001ab9 <st_qword>
c00057f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ff:	83 c0 28             	add    eax,0x28
c0005802:	e8 b2 c2 ff ff       	call   c0001ab9 <st_qword>
c0005807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	83 c0 0c             	add    eax,0xc
c0005816:	e8 9b c2 ff ff       	call   c0001ab6 <st_dword>
c000581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005822:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005826:	31 d2                	xor    edx,edx
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 10             	add    eax,0x10
c000582e:	e8 83 c2 ff ff       	call   c0001ab6 <st_dword>
c0005833:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005837:	e8 62 e1 ff ff       	call   c000399e <store_xdir>
c000583c:	85 c0                	test   eax,eax
c000583e:	75 0d                	jne    c000584d <f_sync+0x167>
c0005840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005844:	e8 00 eb ff ff       	call   c0004349 <sync_fs>
c0005849:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000584d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 2f 2a 00 00       	call   c0008289 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005861:	eb 59                	jmp    c00058bc <f_sync+0x1d6>
c0005863:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005866:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005869:	e8 b0 c9 ff ff       	call   c000221e <move_window>
c000586e:	85 c0                	test   eax,eax
c0005870:	75 4a                	jne    c00058bc <f_sync+0x1d6>
c0005872:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005875:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005879:	89 f2                	mov    edx,esi
c000587b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000587e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005880:	e8 5f f3 ff ff       	call   c0004be4 <st_clust.isra.1>
c0005885:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005888:	8d 46 1c             	lea    eax,[esi+0x1c]
c000588b:	e8 26 c2 ff ff       	call   c0001ab6 <st_dword>
c0005890:	8d 46 16             	lea    eax,[esi+0x16]
c0005893:	ba 00 00 21 50       	mov    edx,0x50210000
c0005898:	e8 19 c2 ff ff       	call   c0001ab6 <st_dword>
c000589d:	8d 46 12             	lea    eax,[esi+0x12]
c00058a0:	31 d2                	xor    edx,edx
c00058a2:	e8 0b c2 ff ff       	call   c0001ab2 <st_word>
c00058a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b3:	e8 91 ea ff ff       	call   c0004349 <sync_fs>
c00058b8:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058bc:	83 c4 64             	add    esp,0x64
c00058bf:	5b                   	pop    ebx
c00058c0:	5e                   	pop    esi
c00058c1:	c3                   	ret    

c00058c2 <f_close>:
c00058c2:	53                   	push   ebx
c00058c3:	83 ec 24             	sub    esp,0x24
c00058c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058ca:	53                   	push   ebx
c00058cb:	e8 16 fe ff ff       	call   c00056e6 <f_sync>
c00058d0:	83 c4 10             	add    esp,0x10
c00058d3:	85 c0                	test   eax,eax
c00058d5:	75 15                	jne    c00058ec <f_close+0x2a>
c00058d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058db:	89 d8                	mov    eax,ebx
c00058dd:	e8 61 c8 ff ff       	call   c0002143 <validate>
c00058e2:	85 c0                	test   eax,eax
c00058e4:	75 06                	jne    c00058ec <f_close+0x2a>
c00058e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ec:	83 c4 18             	add    esp,0x18
c00058ef:	5b                   	pop    ebx
c00058f0:	c3                   	ret    

c00058f1 <f_lseek>:
c00058f1:	55                   	push   ebp
c00058f2:	57                   	push   edi
c00058f3:	56                   	push   esi
c00058f4:	53                   	push   ebx
c00058f5:	83 ec 3c             	sub    esp,0x3c
c00058f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058fc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005900:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005904:	89 04 24             	mov    DWORD PTR [esp],eax
c0005907:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000590b:	89 d8                	mov    eax,ebx
c000590d:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005911:	e8 2d c8 ff ff       	call   c0002143 <validate>
c0005916:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591a:	85 c0                	test   eax,eax
c000591c:	0f 85 7a 04 00 00    	jne    c0005d9c <f_lseek+0x4ab>
c0005922:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005926:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592a:	85 c0                	test   eax,eax
c000592c:	0f 85 6a 04 00 00    	jne    c0005d9c <f_lseek+0x4ab>
c0005932:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005936:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005939:	74 0c                	je     c0005947 <f_lseek+0x56>
c000593b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593e:	85 c0                	test   eax,eax
c0005940:	75 1f                	jne    c0005961 <f_lseek+0x70>
c0005942:	e9 b5 01 00 00       	jmp    c0005afc <f_lseek+0x20b>
c0005947:	83 c9 ff             	or     ecx,0xffffffff
c000594a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594d:	89 d8                	mov    eax,ebx
c000594f:	e8 e3 d3 ff ff       	call   c0002d37 <fill_last_frag>
c0005954:	85 c0                	test   eax,eax
c0005956:	74 e3                	je     c000593b <f_lseek+0x4a>
c0005958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595c:	e9 3b 04 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c0005961:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005966:	0f 85 ac 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c000596c:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005970:	0f 85 a2 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c0005976:	8d 78 04             	lea    edi,[eax+0x4]
c0005979:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000597c:	8b 00                	mov    eax,DWORD PTR [eax]
c000597e:	be 02 00 00 00       	mov    esi,0x2
c0005983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005987:	85 ed                	test   ebp,ebp
c0005989:	74 73                	je     c00059fe <f_lseek+0x10d>
c000598b:	89 e9                	mov    ecx,ebp
c000598d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005994:	ff 04 24             	inc    DWORD PTR [esp]
c0005997:	89 ca                	mov    edx,ecx
c0005999:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000599d:	89 d8                	mov    eax,ebx
c000599f:	e8 02 d4 ff ff       	call   c0002da6 <get_fat>
c00059a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059a8:	83 f8 01             	cmp    eax,0x1
c00059ab:	77 11                	ja     c00059be <f_lseek+0xcd>
c00059ad:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b1:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059b9:	e9 de 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c00059be:	83 f8 ff             	cmp    eax,0xffffffff
c00059c1:	75 11                	jne    c00059d4 <f_lseek+0xe3>
c00059c3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059c7:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059cf:	e9 c8 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c00059d4:	8d 51 01             	lea    edx,[ecx+0x1]
c00059d7:	89 c1                	mov    ecx,eax
c00059d9:	39 c2                	cmp    edx,eax
c00059db:	74 b7                	je     c0005994 <f_lseek+0xa3>
c00059dd:	83 c6 02             	add    esi,0x2
c00059e0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059e4:	72 0b                	jb     c00059f1 <f_lseek+0x100>
c00059e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059e9:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ec:	89 0f                	mov    DWORD PTR [edi],ecx
c00059ee:	83 c7 08             	add    edi,0x8
c00059f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059f5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059f8:	76 04                	jbe    c00059fe <f_lseek+0x10d>
c00059fa:	89 c5                	mov    ebp,eax
c00059fc:	eb 8d                	jmp    c000598b <f_lseek+0x9a>
c00059fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a01:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a05:	89 30                	mov    DWORD PTR [eax],esi
c0005a07:	0f 87 87 03 00 00    	ja     c0005d94 <f_lseek+0x4a3>
c0005a0d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a13:	e9 84 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c0005a18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a1b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a2a:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a31:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a35:	73 0f                	jae    c0005a46 <f_lseek+0x155>
c0005a37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a4e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a51:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a58:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a5c:	0f 84 3a 03 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005a62:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a66:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a6a:	83 c6 ff             	add    esi,0xffffffff
c0005a6d:	89 d8                	mov    eax,ebx
c0005a6f:	83 d7 ff             	adc    edi,0xffffffff
c0005a72:	89 f2                	mov    edx,esi
c0005a74:	89 f9                	mov    ecx,edi
c0005a76:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a7d:	e8 78 c2 ff ff       	call   c0001cfa <clmt_clust>
c0005a82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a86:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a89:	89 c2                	mov    edx,eax
c0005a8b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a8f:	89 c8                	mov    eax,ecx
c0005a91:	e8 43 c2 ff ff       	call   c0001cd9 <clst2sect>
c0005a96:	89 d7                	mov    edi,edx
c0005a98:	09 c7                	or     edi,eax
c0005a9a:	0f 84 0d ff ff ff    	je     c00059ad <f_lseek+0xbc>
c0005aa0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aa4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005aaa:	0f 84 ec 02 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005ab0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ab4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005abb:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005abf:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ac3:	4d                   	dec    ebp
c0005ac4:	31 ff                	xor    edi,edi
c0005ac6:	21 ee                	and    esi,ebp
c0005ac8:	01 c6                	add    esi,eax
c0005aca:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005acd:	11 d7                	adc    edi,edx
c0005acf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ad2:	39 fa                	cmp    edx,edi
c0005ad4:	75 08                	jne    c0005ade <f_lseek+0x1ed>
c0005ad6:	39 f0                	cmp    eax,esi
c0005ad8:	0f 84 be 02 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005ade:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ae1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ae5:	0f 89 80 02 00 00    	jns    c0005d6b <f_lseek+0x47a>
c0005aeb:	83 ec 0c             	sub    esp,0xc
c0005aee:	6a 01                	push   0x1
c0005af0:	52                   	push   edx
c0005af1:	50                   	push   eax
c0005af2:	55                   	push   ebp
c0005af3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005af7:	e9 5a 02 00 00       	jmp    c0005d56 <f_lseek+0x465>
c0005afc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b00:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b03:	74 16                	je     c0005b1b <f_lseek+0x22a>
c0005b05:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b0a:	76 0f                	jbe    c0005b1b <f_lseek+0x22a>
c0005b0c:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b1b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b21:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b24:	89 c7                	mov    edi,eax
c0005b26:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b2a:	73 0d                	jae    c0005b39 <f_lseek+0x248>
c0005b2c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b30:	75 07                	jne    c0005b39 <f_lseek+0x248>
c0005b32:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b43:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b4a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b51:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b54:	75 09                	jne    c0005b5f <f_lseek+0x26e>
c0005b56:	31 f6                	xor    esi,esi
c0005b58:	31 ff                	xor    edi,edi
c0005b5a:	e9 af 01 00 00       	jmp    c0005d0e <f_lseek+0x41d>
c0005b5f:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b63:	89 d7                	mov    edi,edx
c0005b65:	c1 e1 09             	shl    ecx,0x9
c0005b68:	09 c7                	or     edi,eax
c0005b6a:	89 cd                	mov    ebp,ecx
c0005b6c:	74 6d                	je     c0005bdb <f_lseek+0x2ea>
c0005b6e:	83 c0 ff             	add    eax,0xffffffff
c0005b71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b75:	83 d2 ff             	adc    edx,0xffffffff
c0005b78:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b7f:	83 c0 ff             	add    eax,0xffffffff
c0005b82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b86:	83 d2 ff             	adc    edx,0xffffffff
c0005b89:	31 ff                	xor    edi,edi
c0005b8b:	57                   	push   edi
c0005b8c:	51                   	push   ecx
c0005b8d:	52                   	push   edx
c0005b8e:	50                   	push   eax
c0005b8f:	e8 18 96 01 00       	call   c001f1ac <__udivdi3>
c0005b94:	83 c4 10             	add    esp,0x10
c0005b97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b9f:	57                   	push   edi
c0005ba0:	55                   	push   ebp
c0005ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba9:	e8 fe 95 01 00       	call   c001f1ac <__udivdi3>
c0005bae:	83 c4 10             	add    esp,0x10
c0005bb1:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bb9:	19 d1                	sbb    ecx,edx
c0005bbb:	72 1e                	jb     c0005bdb <f_lseek+0x2ea>
c0005bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bc1:	89 e9                	mov    ecx,ebp
c0005bc3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bc6:	f7 d9                	neg    ecx
c0005bc8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bcb:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bcf:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bd2:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bd5:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bd9:	eb 28                	jmp    c0005c03 <f_lseek+0x312>
c0005bdb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bde:	85 c0                	test   eax,eax
c0005be0:	75 1e                	jne    c0005c00 <f_lseek+0x30f>
c0005be2:	31 d2                	xor    edx,edx
c0005be4:	89 d8                	mov    eax,ebx
c0005be6:	e8 a9 d4 ff ff       	call   c0003094 <create_chain>
c0005beb:	83 f8 01             	cmp    eax,0x1
c0005bee:	0f 84 b9 fd ff ff    	je     c00059ad <f_lseek+0xbc>
c0005bf4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf7:	0f 84 c6 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005bfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c00:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c03:	85 c0                	test   eax,eax
c0005c05:	0f 84 4b ff ff ff    	je     c0005b56 <f_lseek+0x265>
c0005c0b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c17:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c1e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c21:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c24:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c28:	0f 83 9d 00 00 00    	jae    c0005ccb <f_lseek+0x3da>
c0005c2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c36:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c39:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c3d:	01 f2                	add    edx,esi
c0005c3f:	11 f9                	adc    ecx,edi
c0005c41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c49:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c4c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c4f:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c52:	f6 c1 02             	test   cl,0x2
c0005c55:	74 35                	je     c0005c8c <f_lseek+0x39b>
c0005c57:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c5b:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c5e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c61:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c65:	73 16                	jae    c0005c7d <f_lseek+0x38c>
c0005c67:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6f:	88 ca                	mov    dl,cl
c0005c71:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c74:	83 ca 40             	or     edx,0x40
c0005c77:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c7a:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c7d:	89 c2                	mov    edx,eax
c0005c7f:	89 d8                	mov    eax,ebx
c0005c81:	e8 0e d4 ff ff       	call   c0003094 <create_chain>
c0005c86:	85 c0                	test   eax,eax
c0005c88:	75 0b                	jne    c0005c95 <f_lseek+0x3a4>
c0005c8a:	eb 30                	jmp    c0005cbc <f_lseek+0x3cb>
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	e8 11 d1 ff ff       	call   c0002da6 <get_fat>
c0005c95:	83 f8 ff             	cmp    eax,0xffffffff
c0005c98:	0f 84 25 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005c9e:	83 f8 01             	cmp    eax,0x1
c0005ca1:	0f 86 06 fd ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005ca7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cab:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cae:	0f 86 f9 fc ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005cb4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb7:	e9 5b ff ff ff       	jmp    c0005c17 <f_lseek+0x326>
c0005cbc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ccb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cce:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cd2:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cd5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cd8:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cdb:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ce1:	0f 84 6f fe ff ff    	je     c0005b56 <f_lseek+0x265>
c0005ce7:	89 c2                	mov    edx,eax
c0005ce9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ced:	e8 e7 bf ff ff       	call   c0001cd9 <clst2sect>
c0005cf2:	89 d7                	mov    edi,edx
c0005cf4:	09 c7                	or     edi,eax
c0005cf6:	0f 84 b1 fc ff ff    	je     c00059ad <f_lseek+0xbc>
c0005cfc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d00:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d03:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d07:	c1 ef 09             	shr    edi,0x9
c0005d0a:	01 c6                	add    esi,eax
c0005d0c:	11 d7                	adc    edi,edx
c0005d0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d11:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d14:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d17:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d1a:	19 d1                	sbb    ecx,edx
c0005d1c:	73 0a                	jae    c0005d28 <f_lseek+0x437>
c0005d1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d21:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d24:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d28:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d2d:	74 6d                	je     c0005d9c <f_lseek+0x4ab>
c0005d2f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d35:	39 fa                	cmp    edx,edi
c0005d37:	75 04                	jne    c0005d3d <f_lseek+0x44c>
c0005d39:	39 f0                	cmp    eax,esi
c0005d3b:	74 5f                	je     c0005d9c <f_lseek+0x4ab>
c0005d3d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d40:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d44:	79 25                	jns    c0005d6b <f_lseek+0x47a>
c0005d46:	83 ec 0c             	sub    esp,0xc
c0005d49:	6a 01                	push   0x1
c0005d4b:	52                   	push   edx
c0005d4c:	50                   	push   eax
c0005d4d:	55                   	push   ebp
c0005d4e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d52:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d56:	50                   	push   eax
c0005d57:	e8 af bc ff ff       	call   c0001a0b <disk_write>
c0005d5c:	83 c4 20             	add    esp,0x20
c0005d5f:	85 c0                	test   eax,eax
c0005d61:	0f 85 5c fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d67:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d6b:	83 ec 0c             	sub    esp,0xc
c0005d6e:	6a 01                	push   0x1
c0005d70:	57                   	push   edi
c0005d71:	56                   	push   esi
c0005d72:	55                   	push   ebp
c0005d73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d7b:	50                   	push   eax
c0005d7c:	e8 74 bc ff ff       	call   c00019f5 <disk_read>
c0005d81:	83 c4 20             	add    esp,0x20
c0005d84:	85 c0                	test   eax,eax
c0005d86:	0f 85 37 fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d8c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d8f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d92:	eb 08                	jmp    c0005d9c <f_lseek+0x4ab>
c0005d94:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da0:	83 c4 3c             	add    esp,0x3c
c0005da3:	5b                   	pop    ebx
c0005da4:	5e                   	pop    esi
c0005da5:	5f                   	pop    edi
c0005da6:	5d                   	pop    ebp
c0005da7:	c3                   	ret    

c0005da8 <f_opendir>:
c0005da8:	56                   	push   esi
c0005da9:	b8 09 00 00 00       	mov    eax,0x9
c0005dae:	53                   	push   ebx
c0005daf:	83 ec 24             	sub    esp,0x24
c0005db2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005db6:	85 db                	test   ebx,ebx
c0005db8:	0f 84 e6 00 00 00    	je     c0005ea4 <f_opendir+0xfc>
c0005dbe:	31 c9                	xor    ecx,ecx
c0005dc0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc4:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dc8:	e8 03 c7 ff ff       	call   c00024d0 <mount_volume>
c0005dcd:	85 c0                	test   eax,eax
c0005dcf:	0f 85 c9 00 00 00    	jne    c0005e9e <f_opendir+0xf6>
c0005dd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dd9:	83 ec 0c             	sub    esp,0xc
c0005ddc:	89 03                	mov    DWORD PTR [ebx],eax
c0005dde:	68 60 04 00 00       	push   0x460
c0005de3:	e8 8b 24 00 00       	call   c0008273 <ff_memalloc>
c0005de8:	83 c4 10             	add    esp,0x10
c0005deb:	89 c6                	mov    esi,eax
c0005ded:	b8 11 00 00 00       	mov    eax,0x11
c0005df2:	85 f6                	test   esi,esi
c0005df4:	0f 84 aa 00 00 00    	je     c0005ea4 <f_opendir+0xfc>
c0005dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dfe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e07:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 31 ee ff ff       	call   c0004c46 <follow_path>
c0005e15:	85 c0                	test   eax,eax
c0005e17:	75 61                	jne    c0005e7a <f_opendir+0xd2>
c0005e19:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e1d:	78 46                	js     c0005e65 <f_opendir+0xbd>
c0005e1f:	b8 05 00 00 00       	mov    eax,0x5
c0005e24:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e28:	74 50                	je     c0005e7a <f_opendir+0xd2>
c0005e2a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e2e:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e30:	3c 04                	cmp    al,0x4
c0005e32:	75 26                	jne    c0005e5a <f_opendir+0xb2>
c0005e34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e37:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e3a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e3d:	30 d2                	xor    dl,dl
c0005e3f:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e43:	09 c2                	or     edx,eax
c0005e45:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e48:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e4b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e4e:	89 da                	mov    edx,ebx
c0005e50:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e53:	e8 b4 ed ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005e58:	eb 0b                	jmp    c0005e65 <f_opendir+0xbd>
c0005e5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e5d:	e8 59 ed ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005e62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e69:	31 d2                	xor    edx,edx
c0005e6b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e6f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 22 d1 ff ff       	call   c0002f9c <dir_sdi>
c0005e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	56                   	push   esi
c0005e82:	e8 02 24 00 00       	call   c0008289 <ff_memfree>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8e:	83 f8 04             	cmp    eax,0x4
c0005e91:	74 06                	je     c0005e99 <f_opendir+0xf1>
c0005e93:	85 c0                	test   eax,eax
c0005e95:	74 0d                	je     c0005ea4 <f_opendir+0xfc>
c0005e97:	eb 05                	jmp    c0005e9e <f_opendir+0xf6>
c0005e99:	b8 05 00 00 00       	mov    eax,0x5
c0005e9e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ea4:	83 c4 24             	add    esp,0x24
c0005ea7:	5b                   	pop    ebx
c0005ea8:	5e                   	pop    esi
c0005ea9:	c3                   	ret    

c0005eaa <f_closedir>:
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 18             	sub    esp,0x18
c0005eae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005eb2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005eb6:	89 d8                	mov    eax,ebx
c0005eb8:	e8 86 c2 ff ff       	call   c0002143 <validate>
c0005ebd:	85 c0                	test   eax,eax
c0005ebf:	75 06                	jne    c0005ec7 <f_closedir+0x1d>
c0005ec1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ec7:	83 c4 18             	add    esp,0x18
c0005eca:	5b                   	pop    ebx
c0005ecb:	c3                   	ret    

c0005ecc <f_readdir>:
c0005ecc:	57                   	push   edi
c0005ecd:	56                   	push   esi
c0005ece:	53                   	push   ebx
c0005ecf:	83 ec 20             	sub    esp,0x20
c0005ed2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eda:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ede:	89 d8                	mov    eax,ebx
c0005ee0:	e8 5e c2 ff ff       	call   c0002143 <validate>
c0005ee5:	85 c0                	test   eax,eax
c0005ee7:	75 77                	jne    c0005f60 <f_readdir+0x94>
c0005ee9:	85 ff                	test   edi,edi
c0005eeb:	75 0b                	jne    c0005ef8 <f_readdir+0x2c>
c0005eed:	31 d2                	xor    edx,edx
c0005eef:	89 d8                	mov    eax,ebx
c0005ef1:	e8 a6 d0 ff ff       	call   c0002f9c <dir_sdi>
c0005ef6:	eb 68                	jmp    c0005f60 <f_readdir+0x94>
c0005ef8:	83 ec 0c             	sub    esp,0xc
c0005efb:	68 60 04 00 00       	push   0x460
c0005f00:	e8 6e 23 00 00       	call   c0008273 <ff_memalloc>
c0005f05:	83 c4 10             	add    esp,0x10
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	b8 11 00 00 00       	mov    eax,0x11
c0005f0f:	85 f6                	test   esi,esi
c0005f11:	74 4d                	je     c0005f60 <f_readdir+0x94>
c0005f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f17:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f23:	31 d2                	xor    edx,edx
c0005f25:	89 d8                	mov    eax,ebx
c0005f27:	e8 80 d8 ff ff       	call   c00037ac <dir_read>
c0005f2c:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f31:	75 19                	jne    c0005f4c <f_readdir+0x80>
c0005f33:	89 fa                	mov    edx,edi
c0005f35:	89 d8                	mov    eax,ebx
c0005f37:	e8 7e ea ff ff       	call   c00049ba <get_fileinfo>
c0005f3c:	31 d2                	xor    edx,edx
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	e8 af d5 ff ff       	call   c00034f4 <dir_next>
c0005f45:	83 f8 04             	cmp    eax,0x4
c0005f48:	75 02                	jne    c0005f4c <f_readdir+0x80>
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f50:	83 ec 0c             	sub    esp,0xc
c0005f53:	56                   	push   esi
c0005f54:	e8 30 23 00 00       	call   c0008289 <ff_memfree>
c0005f59:	83 c4 10             	add    esp,0x10
c0005f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f60:	83 c4 20             	add    esp,0x20
c0005f63:	5b                   	pop    ebx
c0005f64:	5e                   	pop    esi
c0005f65:	5f                   	pop    edi
c0005f66:	c3                   	ret    

c0005f67 <f_stat>:
c0005f67:	57                   	push   edi
c0005f68:	31 c9                	xor    ecx,ecx
c0005f6a:	56                   	push   esi
c0005f6b:	53                   	push   ebx
c0005f6c:	83 ec 50             	sub    esp,0x50
c0005f6f:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f73:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f7b:	e8 50 c5 ff ff       	call   c00024d0 <mount_volume>
c0005f80:	89 c3                	mov    ebx,eax
c0005f82:	85 c0                	test   eax,eax
c0005f84:	75 67                	jne    c0005fed <f_stat+0x86>
c0005f86:	83 ec 0c             	sub    esp,0xc
c0005f89:	bb 11 00 00 00       	mov    ebx,0x11
c0005f8e:	68 60 04 00 00       	push   0x460
c0005f93:	e8 db 22 00 00       	call   c0008273 <ff_memalloc>
c0005f98:	83 c4 10             	add    esp,0x10
c0005f9b:	89 c6                	mov    esi,eax
c0005f9d:	85 c0                	test   eax,eax
c0005f9f:	74 4c                	je     c0005fed <f_stat+0x86>
c0005fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fa5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fb1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fb5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fb9:	e8 88 ec ff ff       	call   c0004c46 <follow_path>
c0005fbe:	89 c3                	mov    ebx,eax
c0005fc0:	85 c0                	test   eax,eax
c0005fc2:	75 1d                	jne    c0005fe1 <f_stat+0x7a>
c0005fc4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fc9:	78 11                	js     c0005fdc <f_stat+0x75>
c0005fcb:	85 ff                	test   edi,edi
c0005fcd:	74 12                	je     c0005fe1 <f_stat+0x7a>
c0005fcf:	89 fa                	mov    edx,edi
c0005fd1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd5:	e8 e0 e9 ff ff       	call   c00049ba <get_fileinfo>
c0005fda:	eb 05                	jmp    c0005fe1 <f_stat+0x7a>
c0005fdc:	bb 06 00 00 00       	mov    ebx,0x6
c0005fe1:	83 ec 0c             	sub    esp,0xc
c0005fe4:	56                   	push   esi
c0005fe5:	e8 9f 22 00 00       	call   c0008289 <ff_memfree>
c0005fea:	83 c4 10             	add    esp,0x10
c0005fed:	83 c4 50             	add    esp,0x50
c0005ff0:	89 d8                	mov    eax,ebx
c0005ff2:	5b                   	pop    ebx
c0005ff3:	5e                   	pop    esi
c0005ff4:	5f                   	pop    edi
c0005ff5:	c3                   	ret    

c0005ff6 <f_getfree>:
c0005ff6:	55                   	push   ebp
c0005ff7:	31 c9                	xor    ecx,ecx
c0005ff9:	57                   	push   edi
c0005ffa:	56                   	push   esi
c0005ffb:	53                   	push   ebx
c0005ffc:	83 ec 5c             	sub    esp,0x5c
c0005fff:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006003:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006007:	e8 c4 c4 ff ff       	call   c00024d0 <mount_volume>
c000600c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006010:	85 c0                	test   eax,eax
c0006012:	0f 85 9d 01 00 00    	jne    c00061b5 <f_getfree+0x1bf>
c0006018:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000601c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006020:	89 02                	mov    DWORD PTR [edx],eax
c0006022:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006025:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006028:	8d 71 fe             	lea    esi,[ecx-0x2]
c000602b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000602f:	39 f2                	cmp    edx,esi
c0006031:	77 0b                	ja     c000603e <f_getfree+0x48>
c0006033:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006037:	89 10                	mov    DWORD PTR [eax],edx
c0006039:	e9 77 01 00 00       	jmp    c00061b5 <f_getfree+0x1bf>
c000603e:	8a 10                	mov    dl,BYTE PTR [eax]
c0006040:	80 fa 01             	cmp    dl,0x1
c0006043:	75 3a                	jne    c000607f <f_getfree+0x89>
c0006045:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006049:	be 02 00 00 00       	mov    esi,0x2
c000604e:	31 db                	xor    ebx,ebx
c0006050:	89 f2                	mov    edx,esi
c0006052:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006056:	e8 4b cd ff ff       	call   c0002da6 <get_fat>
c000605b:	83 f8 ff             	cmp    eax,0xffffffff
c000605e:	0f 84 28 01 00 00    	je     c000618c <f_getfree+0x196>
c0006064:	83 f8 01             	cmp    eax,0x1
c0006067:	0f 84 29 01 00 00    	je     c0006196 <f_getfree+0x1a0>
c000606d:	83 d3 00             	adc    ebx,0x0
c0006070:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006074:	46                   	inc    esi
c0006075:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006078:	77 d6                	ja     c0006050 <f_getfree+0x5a>
c000607a:	e9 25 01 00 00       	jmp    c00061a4 <f_getfree+0x1ae>
c000607f:	80 fa 04             	cmp    dl,0x4
c0006082:	0f 85 88 00 00 00    	jne    c0006110 <f_getfree+0x11a>
c0006088:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000608b:	31 ed                	xor    ebp,ebp
c000608d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006090:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006098:	31 db                	xor    ebx,ebx
c000609a:	85 ed                	test   ebp,ebp
c000609c:	75 3f                	jne    c00060dd <f_getfree+0xe7>
c000609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060a6:	83 c0 01             	add    eax,0x1
c00060a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060ad:	83 d2 00             	adc    edx,0x0
c00060b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060c0:	e8 59 c1 ff ff       	call   c000221e <move_window>
c00060c5:	85 c0                	test   eax,eax
c00060c7:	0f 85 d3 00 00 00    	jne    c00061a0 <f_getfree+0x1aa>
c00060cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e1:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060e4:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060e8:	89 cf                	mov    edi,ecx
c00060ea:	85 f6                	test   esi,esi
c00060ec:	74 12                	je     c0006100 <f_getfree+0x10a>
c00060ee:	88 c1                	mov    cl,al
c00060f0:	83 e1 01             	and    ecx,0x1
c00060f3:	80 f9 01             	cmp    cl,0x1
c00060f6:	83 d3 00             	adc    ebx,0x0
c00060f9:	d0 e8                	shr    al,1
c00060fb:	4e                   	dec    esi
c00060fc:	39 fe                	cmp    esi,edi
c00060fe:	75 ea                	jne    c00060ea <f_getfree+0xf4>
c0006100:	45                   	inc    ebp
c0006101:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006107:	85 f6                	test   esi,esi
c0006109:	75 8f                	jne    c000609a <f_getfree+0xa4>
c000610b:	e9 94 00 00 00       	jmp    c00061a4 <f_getfree+0x1ae>
c0006110:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006113:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006116:	31 f6                	xor    esi,esi
c0006118:	31 db                	xor    ebx,ebx
c000611a:	85 f6                	test   esi,esi
c000611c:	75 1b                	jne    c0006139 <f_getfree+0x143>
c000611e:	89 d7                	mov    edi,edx
c0006120:	89 cd                	mov    ebp,ecx
c0006122:	83 c7 01             	add    edi,0x1
c0006125:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006129:	83 d5 00             	adc    ebp,0x0
c000612c:	e8 ed c0 ff ff       	call   c000221e <move_window>
c0006131:	85 c0                	test   eax,eax
c0006133:	75 6b                	jne    c00061a0 <f_getfree+0x1aa>
c0006135:	89 fa                	mov    edx,edi
c0006137:	89 e9                	mov    ecx,ebp
c0006139:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006141:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006145:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006148:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000614c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006150:	75 11                	jne    c0006163 <f_getfree+0x16d>
c0006152:	e8 e9 b8 ff ff       	call   c0001a40 <ld_word>
c0006157:	66 83 f8 01          	cmp    ax,0x1
c000615b:	83 d3 00             	adc    ebx,0x0
c000615e:	83 c6 02             	add    esi,0x2
c0006161:	eb 13                	jmp    c0006176 <f_getfree+0x180>
c0006163:	e8 e5 b8 ff ff       	call   c0001a4d <ld_dword>
c0006168:	25 ff ff ff 0f       	and    eax,0xfffffff
c000616d:	83 f8 01             	cmp    eax,0x1
c0006170:	83 d3 00             	adc    ebx,0x0
c0006173:	83 c6 04             	add    esi,0x4
c0006176:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000617c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006180:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006184:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006188:	75 90                	jne    c000611a <f_getfree+0x124>
c000618a:	eb 18                	jmp    c00061a4 <f_getfree+0x1ae>
c000618c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006194:	eb 0e                	jmp    c00061a4 <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000619e:	eb 04                	jmp    c00061a4 <f_getfree+0x1ae>
c00061a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061a4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061a8:	89 18                	mov    DWORD PTR [eax],ebx
c00061aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061ae:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061b1:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061b9:	83 c4 5c             	add    esp,0x5c
c00061bc:	5b                   	pop    ebx
c00061bd:	5e                   	pop    esi
c00061be:	5f                   	pop    edi
c00061bf:	5d                   	pop    ebp
c00061c0:	c3                   	ret    

c00061c1 <f_truncate>:
c00061c1:	56                   	push   esi
c00061c2:	53                   	push   ebx
c00061c3:	83 ec 14             	sub    esp,0x14
c00061c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061ca:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061ce:	89 d8                	mov    eax,ebx
c00061d0:	e8 6e bf ff ff       	call   c0002143 <validate>
c00061d5:	89 c6                	mov    esi,eax
c00061d7:	85 c0                	test   eax,eax
c00061d9:	0f 85 d2 00 00 00    	jne    c00062b1 <f_truncate+0xf0>
c00061df:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061e3:	85 f6                	test   esi,esi
c00061e5:	0f 85 c6 00 00 00    	jne    c00062b1 <f_truncate+0xf0>
c00061eb:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ef:	0f 84 b7 00 00 00    	je     c00062ac <f_truncate+0xeb>
c00061f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061fb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061fe:	89 d1                	mov    ecx,edx
c0006200:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006203:	0f 83 a8 00 00 00    	jae    c00062b1 <f_truncate+0xf0>
c0006209:	09 c2                	or     edx,eax
c000620b:	75 15                	jne    c0006222 <f_truncate+0x61>
c000620d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006210:	31 c9                	xor    ecx,ecx
c0006212:	89 d8                	mov    eax,ebx
c0006214:	e8 7a d0 ff ff       	call   c0003293 <remove_chain>
c0006219:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006220:	eb 35                	jmp    c0006257 <f_truncate+0x96>
c0006222:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006225:	89 d8                	mov    eax,ebx
c0006227:	e8 7a cb ff ff       	call   c0002da6 <get_fat>
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 01 00 00 00       	mov    eax,0x1
c0006233:	83 fa ff             	cmp    edx,0xffffffff
c0006236:	74 1f                	je     c0006257 <f_truncate+0x96>
c0006238:	b8 02 00 00 00       	mov    eax,0x2
c000623d:	83 fa 01             	cmp    edx,0x1
c0006240:	74 15                	je     c0006257 <f_truncate+0x96>
c0006242:	31 c0                	xor    eax,eax
c0006244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006248:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000624b:	76 0a                	jbe    c0006257 <f_truncate+0x96>
c000624d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006250:	89 d8                	mov    eax,ebx
c0006252:	e8 3c d0 ff ff       	call   c0003293 <remove_chain>
c0006257:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000625a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000625d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006260:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006263:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006266:	83 ca 40             	or     edx,0x40
c0006269:	85 c0                	test   eax,eax
c000626b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000626e:	75 35                	jne    c00062a5 <f_truncate+0xe4>
c0006270:	84 d2                	test   dl,dl
c0006272:	79 3d                	jns    c00062b1 <f_truncate+0xf0>
c0006274:	83 ec 0c             	sub    esp,0xc
c0006277:	8d 43 50             	lea    eax,[ebx+0x50]
c000627a:	6a 01                	push   0x1
c000627c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000627f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006282:	50                   	push   eax
c0006283:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006287:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000628b:	50                   	push   eax
c000628c:	e8 7a b7 ff ff       	call   c0001a0b <disk_write>
c0006291:	83 c4 20             	add    esp,0x20
c0006294:	85 c0                	test   eax,eax
c0006296:	75 08                	jne    c00062a0 <f_truncate+0xdf>
c0006298:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000629c:	31 f6                	xor    esi,esi
c000629e:	eb 11                	jmp    c00062b1 <f_truncate+0xf0>
c00062a0:	b8 01 00 00 00       	mov    eax,0x1
c00062a5:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062a8:	89 c6                	mov    esi,eax
c00062aa:	eb 05                	jmp    c00062b1 <f_truncate+0xf0>
c00062ac:	be 07 00 00 00       	mov    esi,0x7
c00062b1:	89 f0                	mov    eax,esi
c00062b3:	83 c4 14             	add    esp,0x14
c00062b6:	5b                   	pop    ebx
c00062b7:	5e                   	pop    esi
c00062b8:	c3                   	ret    

c00062b9 <f_unlink>:
c00062b9:	56                   	push   esi
c00062ba:	b9 02 00 00 00       	mov    ecx,0x2
c00062bf:	53                   	push   ebx
c00062c0:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062ca:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062d1:	e8 fa c1 ff ff       	call   c00024d0 <mount_volume>
c00062d6:	85 c0                	test   eax,eax
c00062d8:	0f 85 55 01 00 00    	jne    c0006433 <f_unlink+0x17a>
c00062de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e2:	83 ec 0c             	sub    esp,0xc
c00062e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062e9:	68 60 04 00 00       	push   0x460
c00062ee:	e8 80 1f 00 00       	call   c0008273 <ff_memalloc>
c00062f3:	83 c4 10             	add    esp,0x10
c00062f6:	89 c3                	mov    ebx,eax
c00062f8:	b8 11 00 00 00       	mov    eax,0x11
c00062fd:	85 db                	test   ebx,ebx
c00062ff:	0f 84 2e 01 00 00    	je     c0006433 <f_unlink+0x17a>
c0006305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006309:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000630f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006312:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006315:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000631c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006320:	e8 21 e9 ff ff       	call   c0004c46 <follow_path>
c0006325:	85 c0                	test   eax,eax
c0006327:	0f 85 f2 00 00 00    	jne    c000641f <f_unlink+0x166>
c000632d:	b8 06 00 00 00       	mov    eax,0x6
c0006332:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000633a:	0f 88 df 00 00 00    	js     c000641f <f_unlink+0x166>
c0006340:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006345:	74 0a                	je     c0006351 <f_unlink+0x98>
c0006347:	b8 07 00 00 00       	mov    eax,0x7
c000634c:	e9 ce 00 00 00       	jmp    c000641f <f_unlink+0x166>
c0006351:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006355:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006359:	8a 02                	mov    al,BYTE PTR [edx]
c000635b:	3c 04                	cmp    al,0x4
c000635d:	75 12                	jne    c0006371 <f_unlink+0xb8>
c000635f:	8d 42 10             	lea    eax,[edx+0x10]
c0006362:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006366:	e8 a1 e8 ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c000636b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000636f:	eb 0e                	jmp    c000637f <f_unlink+0xc6>
c0006371:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006378:	e8 3e e8 ff ff       	call   c0004bbb <ld_clust.isra.0>
c000637d:	89 c6                	mov    esi,eax
c000637f:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006384:	75 12                	jne    c0006398 <f_unlink+0xdf>
c0006386:	8d 44 24 48          	lea    eax,[esp+0x48]
c000638a:	e8 94 d6 ff ff       	call   c0003a23 <dir_remove>
c000638f:	85 c0                	test   eax,eax
c0006391:	74 6c                	je     c00063ff <f_unlink+0x146>
c0006393:	e9 87 00 00 00       	jmp    c000641f <f_unlink+0x166>
c0006398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000639c:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063a3:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063aa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063ad:	75 21                	jne    c00063d0 <f_unlink+0x117>
c00063af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063b7:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063be:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063c5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063c9:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063d0:	31 d2                	xor    edx,edx
c00063d2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063d9:	e8 be cb ff ff       	call   c0002f9c <dir_sdi>
c00063de:	85 c0                	test   eax,eax
c00063e0:	75 3d                	jne    c000641f <f_unlink+0x166>
c00063e2:	31 d2                	xor    edx,edx
c00063e4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063eb:	e8 bc d3 ff ff       	call   c00037ac <dir_read>
c00063f0:	85 c0                	test   eax,eax
c00063f2:	0f 84 4f ff ff ff    	je     c0006347 <f_unlink+0x8e>
c00063f8:	83 f8 04             	cmp    eax,0x4
c00063fb:	75 22                	jne    c000641f <f_unlink+0x166>
c00063fd:	eb 87                	jmp    c0006386 <f_unlink+0xcd>
c00063ff:	85 f6                	test   esi,esi
c0006401:	75 0b                	jne    c000640e <f_unlink+0x155>
c0006403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006407:	e8 3d df ff ff       	call   c0004349 <sync_fs>
c000640c:	eb 11                	jmp    c000641f <f_unlink+0x166>
c000640e:	31 c9                	xor    ecx,ecx
c0006410:	89 f2                	mov    edx,esi
c0006412:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006416:	e8 78 ce ff ff       	call   c0003293 <remove_chain>
c000641b:	85 c0                	test   eax,eax
c000641d:	74 e4                	je     c0006403 <f_unlink+0x14a>
c000641f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006423:	83 ec 0c             	sub    esp,0xc
c0006426:	53                   	push   ebx
c0006427:	e8 5d 1e 00 00       	call   c0008289 <ff_memfree>
c000642c:	83 c4 10             	add    esp,0x10
c000642f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006433:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006439:	5b                   	pop    ebx
c000643a:	5e                   	pop    esi
c000643b:	c3                   	ret    

c000643c <f_mkdir>:
c000643c:	57                   	push   edi
c000643d:	b9 02 00 00 00       	mov    ecx,0x2
c0006442:	56                   	push   esi
c0006443:	53                   	push   ebx
c0006444:	83 c4 80             	add    esp,0xffffff80
c0006447:	8d 54 24 08          	lea    edx,[esp+0x8]
c000644b:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006452:	e8 79 c0 ff ff       	call   c00024d0 <mount_volume>
c0006457:	89 c3                	mov    ebx,eax
c0006459:	85 c0                	test   eax,eax
c000645b:	0f 85 fe 01 00 00    	jne    c000665f <f_mkdir+0x223>
c0006461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006465:	bb 11 00 00 00       	mov    ebx,0x11
c000646a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000646e:	83 ec 0c             	sub    esp,0xc
c0006471:	68 60 04 00 00       	push   0x460
c0006476:	e8 f8 1d 00 00       	call   c0008273 <ff_memalloc>
c000647b:	83 c4 10             	add    esp,0x10
c000647e:	89 c7                	mov    edi,eax
c0006480:	85 c0                	test   eax,eax
c0006482:	0f 84 d7 01 00 00    	je     c000665f <f_mkdir+0x223>
c0006488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648c:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006492:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006495:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006498:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000649f:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064a3:	e8 9e e7 ff ff       	call   c0004c46 <follow_path>
c00064a8:	89 c3                	mov    ebx,eax
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 3e                	je     c00064ec <f_mkdir+0xb0>
c00064ae:	83 f8 04             	cmp    eax,0x4
c00064b1:	75 3e                	jne    c00064f1 <f_mkdir+0xb5>
c00064b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b7:	31 d2                	xor    edx,edx
c00064b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064c1:	e8 ce cb ff ff       	call   c0003094 <create_chain>
c00064c6:	89 c6                	mov    esi,eax
c00064c8:	85 c0                	test   eax,eax
c00064ca:	74 0c                	je     c00064d8 <f_mkdir+0x9c>
c00064cc:	bb 02 00 00 00       	mov    ebx,0x2
c00064d1:	83 f8 01             	cmp    eax,0x1
c00064d4:	74 07                	je     c00064dd <f_mkdir+0xa1>
c00064d6:	eb 2a                	jmp    c0006502 <f_mkdir+0xc6>
c00064d8:	bb 07 00 00 00       	mov    ebx,0x7
c00064dd:	31 c9                	xor    ecx,ecx
c00064df:	89 f2                	mov    edx,esi
c00064e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064e5:	e8 a9 cd ff ff       	call   c0003293 <remove_chain>
c00064ea:	eb 05                	jmp    c00064f1 <f_mkdir+0xb5>
c00064ec:	bb 08 00 00 00       	mov    ebx,0x8
c00064f1:	83 ec 0c             	sub    esp,0xc
c00064f4:	57                   	push   edi
c00064f5:	e8 8f 1d 00 00       	call   c0008289 <ff_memfree>
c00064fa:	83 c4 10             	add    esp,0x10
c00064fd:	e9 5d 01 00 00       	jmp    c000665f <f_mkdir+0x223>
c0006502:	bb 01 00 00 00       	mov    ebx,0x1
c0006507:	83 f8 ff             	cmp    eax,0xffffffff
c000650a:	74 d1                	je     c00064dd <f_mkdir+0xa1>
c000650c:	89 f2                	mov    edx,esi
c000650e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006512:	e8 c4 ce ff ff       	call   c00033db <dir_clear>
c0006517:	89 c3                	mov    ebx,eax
c0006519:	85 c0                	test   eax,eax
c000651b:	75 c0                	jne    c00064dd <f_mkdir+0xa1>
c000651d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006521:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006524:	74 69                	je     c000658f <f_mkdir+0x153>
c0006526:	b9 0b 00 00 00       	mov    ecx,0xb
c000652b:	83 c0 54             	add    eax,0x54
c000652e:	ba 20 00 00 00       	mov    edx,0x20
c0006533:	e8 9c b5 ff ff       	call   c0001ad4 <mem_set>
c0006538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006541:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006545:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006549:	83 c0 6a             	add    eax,0x6a
c000654c:	e8 65 b5 ff ff       	call   c0001ab6 <st_dword>
c0006551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006555:	89 f1                	mov    ecx,esi
c0006557:	8d 50 54             	lea    edx,[eax+0x54]
c000655a:	e8 85 e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c000655f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006563:	b9 20 00 00 00       	mov    ecx,0x20
c0006568:	8d 50 54             	lea    edx,[eax+0x54]
c000656b:	83 c0 74             	add    eax,0x74
c000656e:	e8 4c b5 ff ff       	call   c0001abf <mem_cpy>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000657b:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000657f:	8d 50 74             	lea    edx,[eax+0x74]
c0006582:	e8 5d e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c0006587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006593:	e8 2f db ff ff       	call   c00040c7 <dir_register>
c0006598:	89 c3                	mov    ebx,eax
c000659a:	85 c0                	test   eax,eax
c000659c:	0f 85 3b ff ff ff    	jne    c00064dd <f_mkdir+0xa1>
c00065a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065a9:	75 74                	jne    c000661f <f_mkdir+0x1e3>
c00065ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00065b3:	83 c0 0c             	add    eax,0xc
c00065b6:	e8 fb b4 ff ff       	call   c0001ab6 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	89 f2                	mov    edx,esi
c00065c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c4:	83 c0 34             	add    eax,0x34
c00065c7:	e8 ea b4 ff ff       	call   c0001ab6 <st_dword>
c00065cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c1 e2 09             	shl    edx,0x9
c00065da:	83 c0 38             	add    eax,0x38
c00065dd:	e8 d4 b4 ff ff       	call   c0001ab6 <st_dword>
c00065e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ed:	c1 e2 09             	shl    edx,0x9
c00065f0:	83 c0 28             	add    eax,0x28
c00065f3:	e8 be b4 ff ff       	call   c0001ab6 <st_dword>
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065ff:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006603:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006606:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000660a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000660e:	e8 8b d3 ff ff       	call   c000399e <store_xdir>
c0006613:	89 c3                	mov    ebx,eax
c0006615:	85 c0                	test   eax,eax
c0006617:	0f 85 d4 fe ff ff    	jne    c00064f1 <f_mkdir+0xb5>
c000661d:	eb 30                	jmp    c000664f <f_mkdir+0x213>
c000661f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006623:	ba 00 00 21 50       	mov    edx,0x50210000
c0006628:	83 c0 16             	add    eax,0x16
c000662b:	e8 86 b4 ff ff       	call   c0001ab6 <st_dword>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	89 f1                	mov    ecx,esi
c0006636:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000663a:	e8 a5 e5 ff ff       	call   c0004be4 <st_clust.isra.1>
c000663f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006643:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006647:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000664f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006653:	e8 f1 dc ff ff       	call   c0004349 <sync_fs>
c0006658:	89 c3                	mov    ebx,eax
c000665a:	e9 92 fe ff ff       	jmp    c00064f1 <f_mkdir+0xb5>
c000665f:	83 ec 80             	sub    esp,0xffffff80
c0006662:	89 d8                	mov    eax,ebx
c0006664:	5b                   	pop    ebx
c0006665:	5e                   	pop    esi
c0006666:	5f                   	pop    edi
c0006667:	c3                   	ret    

c0006668 <f_rename>:
c0006668:	55                   	push   ebp
c0006669:	57                   	push   edi
c000666a:	56                   	push   esi
c000666b:	53                   	push   ebx
c000666c:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006672:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006679:	e8 a4 b9 ff ff       	call   c0002022 <get_ldnumber>
c000667e:	b9 02 00 00 00       	mov    ecx,0x2
c0006683:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006687:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000668e:	e8 3d be ff ff       	call   c00024d0 <mount_volume>
c0006693:	85 c0                	test   eax,eax
c0006695:	0f 85 b5 02 00 00    	jne    c0006950 <f_rename+0x2e8>
c000669b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669f:	83 ec 0c             	sub    esp,0xc
c00066a2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066a6:	68 60 04 00 00       	push   0x460
c00066ab:	e8 c3 1b 00 00       	call   c0008273 <ff_memalloc>
c00066b0:	83 c4 10             	add    esp,0x10
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	b8 11 00 00 00       	mov    eax,0x11
c00066ba:	85 db                	test   ebx,ebx
c00066bc:	0f 84 8e 02 00 00    	je     c0006950 <f_rename+0x2e8>
c00066c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066d2:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066d9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066dd:	e8 64 e5 ff ff       	call   c0004c46 <follow_path>
c00066e2:	85 c0                	test   eax,eax
c00066e4:	0f 85 52 02 00 00    	jne    c000693c <f_rename+0x2d4>
c00066ea:	b8 06 00 00 00       	mov    eax,0x6
c00066ef:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066f7:	0f 85 3f 02 00 00    	jne    c000693c <f_rename+0x2d4>
c00066fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006701:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006704:	0f 85 05 01 00 00    	jne    c000680f <f_rename+0x1a7>
c000670a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000670d:	b9 40 00 00 00       	mov    ecx,0x40
c0006712:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006716:	e8 a4 b3 ff ff       	call   c0001abf <mem_cpy>
c000671b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006720:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006724:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000672b:	e8 8f b3 ff ff       	call   c0001abf <mem_cpy>
c0006730:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006737:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673e:	e8 03 e5 ff ff       	call   c0004c46 <follow_path>
c0006743:	85 c0                	test   eax,eax
c0006745:	75 29                	jne    c0006770 <f_rename+0x108>
c0006747:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000674b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006752:	74 0a                	je     c000675e <f_rename+0xf6>
c0006754:	b8 08 00 00 00       	mov    eax,0x8
c0006759:	e9 de 01 00 00       	jmp    c000693c <f_rename+0x2d4>
c000675e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006765:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000676c:	75 e6                	jne    c0006754 <f_rename+0xec>
c000676e:	eb 09                	jmp    c0006779 <f_rename+0x111>
c0006770:	83 f8 04             	cmp    eax,0x4
c0006773:	0f 85 c3 01 00 00    	jne    c000693c <f_rename+0x2d4>
c0006779:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006780:	e8 42 d9 ff ff       	call   c00040c7 <dir_register>
c0006785:	85 c0                	test   eax,eax
c0006787:	0f 85 af 01 00 00    	jne    c000693c <f_rename+0x2d4>
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006794:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006797:	89 c5                	mov    ebp,eax
c0006799:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000679c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067a0:	8d 46 24             	lea    eax,[esi+0x24]
c00067a3:	e8 98 b2 ff ff       	call   c0001a40 <ld_word>
c00067a8:	b9 40 00 00 00       	mov    ecx,0x40
c00067ad:	89 c7                	mov    edi,eax
c00067af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067b3:	89 f0                	mov    eax,esi
c00067b5:	e8 05 b3 ff ff       	call   c0001abf <mem_cpy>
c00067ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067be:	89 e9                	mov    ecx,ebp
c00067c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c3:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067c6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067d1:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067d4:	0f b7 d7             	movzx  edx,di
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	83 c0 24             	add    eax,0x24
c00067dd:	e8 d0 b2 ff ff       	call   c0001ab2 <st_word>
c00067e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e9:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ec:	a8 10                	test   al,0x10
c00067ee:	75 06                	jne    c00067f6 <f_rename+0x18e>
c00067f0:	83 c8 20             	or     eax,0x20
c00067f3:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 9c d1 ff ff       	call   c000399e <store_xdir>
c0006802:	85 c0                	test   eax,eax
c0006804:	0f 84 1c 01 00 00    	je     c0006926 <f_rename+0x2be>
c000680a:	e9 2d 01 00 00       	jmp    c000693c <f_rename+0x2d4>
c000680f:	b9 20 00 00 00       	mov    ecx,0x20
c0006814:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000681b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000681f:	e8 9b b2 ff ff       	call   c0001abf <mem_cpy>
c0006824:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006829:	8d 54 24 58          	lea    edx,[esp+0x58]
c000682d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006834:	e8 86 b2 ff ff       	call   c0001abf <mem_cpy>
c0006839:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006840:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006847:	e8 fa e3 ff ff       	call   c0004c46 <follow_path>
c000684c:	85 c0                	test   eax,eax
c000684e:	75 27                	jne    c0006877 <f_rename+0x20f>
c0006850:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006854:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000685b:	0f 85 f3 fe ff ff    	jne    c0006754 <f_rename+0xec>
c0006861:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006868:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000686f:	0f 85 df fe ff ff    	jne    c0006754 <f_rename+0xec>
c0006875:	eb 09                	jmp    c0006880 <f_rename+0x218>
c0006877:	83 f8 04             	cmp    eax,0x4
c000687a:	0f 85 bc 00 00 00    	jne    c000693c <f_rename+0x2d4>
c0006880:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006887:	e8 3b d8 ff ff       	call   c00040c7 <dir_register>
c000688c:	85 c0                	test   eax,eax
c000688e:	0f 85 a8 00 00 00    	jne    c000693c <f_rename+0x2d4>
c0006894:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000689b:	b9 13 00 00 00       	mov    ecx,0x13
c00068a0:	8d 46 0d             	lea    eax,[esi+0xd]
c00068a3:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068a7:	e8 13 b2 ff ff       	call   c0001abf <mem_cpy>
c00068ac:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068b0:	a8 10                	test   al,0x10
c00068b2:	75 03                	jne    c00068b7 <f_rename+0x24f>
c00068b4:	83 c8 20             	or     eax,0x20
c00068b7:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068c2:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068c6:	74 5e                	je     c0006926 <f_rename+0x2be>
c00068c8:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068cf:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068d3:	74 51                	je     c0006926 <f_rename+0x2be>
c00068d5:	89 f2                	mov    edx,esi
c00068d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068db:	8a 07                	mov    al,BYTE PTR [edi]
c00068dd:	e8 d9 e2 ff ff       	call   c0004bbb <ld_clust.isra.0>
c00068e2:	89 c2                	mov    edx,eax
c00068e4:	89 f8                	mov    eax,edi
c00068e6:	e8 ee b3 ff ff       	call   c0001cd9 <clst2sect>
c00068eb:	89 c6                	mov    esi,eax
c00068ed:	89 d1                	mov    ecx,edx
c00068ef:	b8 02 00 00 00       	mov    eax,0x2
c00068f4:	09 f2                	or     edx,esi
c00068f6:	74 44                	je     c000693c <f_rename+0x2d4>
c00068f8:	89 f2                	mov    edx,esi
c00068fa:	89 f8                	mov    eax,edi
c00068fc:	e8 1d b9 ff ff       	call   c000221e <move_window>
c0006901:	85 c0                	test   eax,eax
c0006903:	75 37                	jne    c000693c <f_rename+0x2d4>
c0006905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006909:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000690d:	75 17                	jne    c0006926 <f_rename+0x2be>
c000690f:	8d 50 74             	lea    edx,[eax+0x74]
c0006912:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006919:	e8 c6 e2 ff ff       	call   c0004be4 <st_clust.isra.1>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006926:	8d 44 24 58          	lea    eax,[esp+0x58]
c000692a:	e8 f4 d0 ff ff       	call   c0003a23 <dir_remove>
c000692f:	85 c0                	test   eax,eax
c0006931:	75 09                	jne    c000693c <f_rename+0x2d4>
c0006933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006937:	e8 0d da ff ff       	call   c0004349 <sync_fs>
c000693c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006940:	83 ec 0c             	sub    esp,0xc
c0006943:	53                   	push   ebx
c0006944:	e8 40 19 00 00       	call   c0008289 <ff_memfree>
c0006949:	83 c4 10             	add    esp,0x10
c000694c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006950:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006956:	5b                   	pop    ebx
c0006957:	5e                   	pop    esi
c0006958:	5f                   	pop    edi
c0006959:	5d                   	pop    ebp
c000695a:	c3                   	ret    

c000695b <f_chmod>:
c000695b:	57                   	push   edi
c000695c:	b9 02 00 00 00       	mov    ecx,0x2
c0006961:	56                   	push   esi
c0006962:	53                   	push   ebx
c0006963:	83 ec 60             	sub    esp,0x60
c0006966:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000696a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000696e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006972:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006976:	e8 55 bb ff ff       	call   c00024d0 <mount_volume>
c000697b:	85 c0                	test   eax,eax
c000697d:	0f 85 af 00 00 00    	jne    c0006a32 <f_chmod+0xd7>
c0006983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006987:	83 ec 0c             	sub    esp,0xc
c000698a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000698e:	68 60 04 00 00       	push   0x460
c0006993:	e8 db 18 00 00       	call   c0008273 <ff_memalloc>
c0006998:	83 c4 10             	add    esp,0x10
c000699b:	89 c6                	mov    esi,eax
c000699d:	b8 11 00 00 00       	mov    eax,0x11
c00069a2:	85 f6                	test   esi,esi
c00069a4:	0f 84 88 00 00 00    	je     c0006a32 <f_chmod+0xd7>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069b4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069b7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ba:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c2:	e8 7f e2 ff ff       	call   c0004c46 <follow_path>
c00069c7:	85 c0                	test   eax,eax
c00069c9:	75 53                	jne    c0006a1e <f_chmod+0xc3>
c00069cb:	b8 06 00 00 00       	mov    eax,0x6
c00069d0:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069d5:	75 47                	jne    c0006a1e <f_chmod+0xc3>
c00069d7:	89 f9                	mov    ecx,edi
c00069d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dd:	83 e1 27             	and    ecx,0x27
c00069e0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069e3:	75 1d                	jne    c0006a02 <f_chmod+0xa7>
c00069e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069eb:	21 cb                	and    ebx,ecx
c00069ed:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f0:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f7:	e8 a2 cf ff ff       	call   c000399e <store_xdir>
c00069fc:	85 c0                	test   eax,eax
c00069fe:	75 1e                	jne    c0006a1e <f_chmod+0xc3>
c0006a00:	eb 13                	jmp    c0006a15 <f_chmod+0xba>
c0006a02:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a06:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a09:	21 cb                	and    ebx,ecx
c0006a0b:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a0e:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a19:	e8 2b d9 ff ff       	call   c0004349 <sync_fs>
c0006a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a22:	83 ec 0c             	sub    esp,0xc
c0006a25:	56                   	push   esi
c0006a26:	e8 5e 18 00 00       	call   c0008289 <ff_memfree>
c0006a2b:	83 c4 10             	add    esp,0x10
c0006a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a32:	83 c4 60             	add    esp,0x60
c0006a35:	5b                   	pop    ebx
c0006a36:	5e                   	pop    esi
c0006a37:	5f                   	pop    edi
c0006a38:	c3                   	ret    

c0006a39 <f_utime>:
c0006a39:	56                   	push   esi
c0006a3a:	b9 02 00 00 00       	mov    ecx,0x2
c0006a3f:	53                   	push   ebx
c0006a40:	83 ec 64             	sub    esp,0x64
c0006a43:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a47:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a4b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a4f:	e8 7c ba ff ff       	call   c00024d0 <mount_volume>
c0006a54:	85 c0                	test   eax,eax
c0006a56:	0f 85 b5 00 00 00    	jne    c0006b11 <f_utime+0xd8>
c0006a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a60:	83 ec 0c             	sub    esp,0xc
c0006a63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a67:	68 60 04 00 00       	push   0x460
c0006a6c:	e8 02 18 00 00       	call   c0008273 <ff_memalloc>
c0006a71:	83 c4 10             	add    esp,0x10
c0006a74:	89 c3                	mov    ebx,eax
c0006a76:	b8 11 00 00 00       	mov    eax,0x11
c0006a7b:	85 db                	test   ebx,ebx
c0006a7d:	0f 84 8e 00 00 00    	je     c0006b11 <f_utime+0xd8>
c0006a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a87:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a8d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a90:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a93:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9b:	e8 a6 e1 ff ff       	call   c0004c46 <follow_path>
c0006aa0:	85 c0                	test   eax,eax
c0006aa2:	75 59                	jne    c0006afd <f_utime+0xc4>
c0006aa4:	b8 06 00 00 00       	mov    eax,0x6
c0006aa9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006aae:	75 4d                	jne    c0006afd <f_utime+0xc4>
c0006ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab4:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ab8:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006abc:	c1 e2 10             	shl    edx,0x10
c0006abf:	09 ca                	or     edx,ecx
c0006ac1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac4:	75 1a                	jne    c0006ae0 <f_utime+0xa7>
c0006ac6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ac9:	83 c0 0c             	add    eax,0xc
c0006acc:	e8 e5 af ff ff       	call   c0001ab6 <st_dword>
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 c4 ce ff ff       	call   c000399e <store_xdir>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 1f                	jne    c0006afd <f_utime+0xc4>
c0006ade:	eb 14                	jmp    c0006af4 <f_utime+0xbb>
c0006ae0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ae4:	83 c0 16             	add    eax,0x16
c0006ae7:	e8 ca af ff ff       	call   c0001ab6 <st_dword>
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	e8 4c d8 ff ff       	call   c0004349 <sync_fs>
c0006afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b01:	83 ec 0c             	sub    esp,0xc
c0006b04:	53                   	push   ebx
c0006b05:	e8 7f 17 00 00       	call   c0008289 <ff_memfree>
c0006b0a:	83 c4 10             	add    esp,0x10
c0006b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b11:	83 c4 64             	add    esp,0x64
c0006b14:	5b                   	pop    ebx
c0006b15:	5e                   	pop    esi
c0006b16:	c3                   	ret    

c0006b17 <f_getlabel>:
c0006b17:	55                   	push   ebp
c0006b18:	31 c9                	xor    ecx,ecx
c0006b1a:	57                   	push   edi
c0006b1b:	56                   	push   esi
c0006b1c:	53                   	push   ebx
c0006b1d:	83 ec 6c             	sub    esp,0x6c
c0006b20:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b2b:	e8 a0 b9 ff ff       	call   c00024d0 <mount_volume>
c0006b30:	89 c6                	mov    esi,eax
c0006b32:	85 c0                	test   eax,eax
c0006b34:	0f 85 c1 01 00 00    	jne    c0006cfb <f_getlabel+0x1e4>
c0006b3a:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b42:	0f 84 5f 01 00 00    	je     c0006ca7 <f_getlabel+0x190>
c0006b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b4c:	31 d2                	xor    edx,edx
c0006b4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b52:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b5e:	e8 39 c4 ff ff       	call   c0002f9c <dir_sdi>
c0006b63:	85 c0                	test   eax,eax
c0006b65:	0f 85 2d 01 00 00    	jne    c0006c98 <f_getlabel+0x181>
c0006b6b:	ba 01 00 00 00       	mov    edx,0x1
c0006b70:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b74:	e8 33 cc ff ff       	call   c00037ac <dir_read>
c0006b79:	85 c0                	test   eax,eax
c0006b7b:	0f 85 17 01 00 00    	jne    c0006c98 <f_getlabel+0x181>
c0006b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b85:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b88:	74 09                	je     c0006b93 <f_getlabel+0x7c>
c0006b8a:	31 db                	xor    ebx,ebx
c0006b8c:	31 c9                	xor    ecx,ecx
c0006b8e:	e9 c8 00 00 00       	jmp    c0006c5b <f_getlabel+0x144>
c0006b93:	31 ed                	xor    ebp,ebp
c0006b95:	31 db                	xor    ebx,ebx
c0006b97:	31 ff                	xor    edi,edi
c0006b99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b9d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ba1:	39 fa                	cmp    edx,edi
c0006ba3:	76 4b                	jbe    c0006bf0 <f_getlabel+0xd9>
c0006ba5:	47                   	inc    edi
c0006ba6:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ba9:	01 d0                	add    eax,edx
c0006bab:	e8 90 ae ff ff       	call   c0001a40 <ld_word>
c0006bb0:	66 85 ed             	test   bp,bp
c0006bb3:	75 0d                	jne    c0006bc2 <f_getlabel+0xab>
c0006bb5:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bbb:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bc0:	76 28                	jbe    c0006bea <f_getlabel+0xd3>
c0006bc2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bc9:	89 e9                	mov    ecx,ebp
c0006bcb:	01 da                	add    edx,ebx
c0006bcd:	c1 e1 10             	shl    ecx,0x10
c0006bd0:	0f b7 c0             	movzx  eax,ax
c0006bd3:	09 c8                	or     eax,ecx
c0006bd5:	b9 04 00 00 00       	mov    ecx,0x4
c0006bda:	e8 01 b0 ff ff       	call   c0001be0 <put_utf>
c0006bdf:	84 c0                	test   al,al
c0006be1:	74 0b                	je     c0006bee <f_getlabel+0xd7>
c0006be3:	0f b6 c0             	movzx  eax,al
c0006be6:	01 c3                	add    ebx,eax
c0006be8:	31 c0                	xor    eax,eax
c0006bea:	89 c5                	mov    ebp,eax
c0006bec:	eb ab                	jmp    c0006b99 <f_getlabel+0x82>
c0006bee:	31 db                	xor    ebx,ebx
c0006bf0:	66 85 ed             	test   bp,bp
c0006bf3:	74 02                	je     c0006bf7 <f_getlabel+0xe0>
c0006bf5:	31 db                	xor    ebx,ebx
c0006bf7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bfe:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c02:	e9 a0 00 00 00       	jmp    c0006ca7 <f_getlabel+0x190>
c0006c07:	83 ff 0b             	cmp    edi,0xb
c0006c0a:	74 11                	je     c0006c1d <f_getlabel+0x106>
c0006c0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c15:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c18:	c1 e0 08             	shl    eax,0x8
c0006c1b:	09 c2                	or     edx,eax
c0006c1d:	0f b7 d2             	movzx  edx,dx
c0006c20:	50                   	push   eax
c0006c21:	50                   	push   eax
c0006c22:	68 b5 01 00 00       	push   0x1b5
c0006c27:	52                   	push   edx
c0006c28:	e8 03 17 00 00       	call   c0008330 <ff_oem2uni>
c0006c2d:	83 c4 10             	add    esp,0x10
c0006c30:	66 85 c0             	test   ax,ax
c0006c33:	74 46                	je     c0006c7b <f_getlabel+0x164>
c0006c35:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c3c:	0f b7 c0             	movzx  eax,ax
c0006c3f:	01 da                	add    edx,ebx
c0006c41:	b9 04 00 00 00       	mov    ecx,0x4
c0006c46:	e8 95 af ff ff       	call   c0001be0 <put_utf>
c0006c4b:	84 c0                	test   al,al
c0006c4d:	74 2c                	je     c0006c7b <f_getlabel+0x164>
c0006c4f:	0f b6 c0             	movzx  eax,al
c0006c52:	01 c3                	add    ebx,eax
c0006c54:	83 ff 0b             	cmp    edi,0xb
c0006c57:	74 24                	je     c0006c7d <f_getlabel+0x166>
c0006c59:	89 f9                	mov    ecx,edi
c0006c5b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c5f:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c62:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c67:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c70:	e8 9f ae ff ff       	call   c0001b14 <dbc_1st>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	74 a4                	je     c0006c1d <f_getlabel+0x106>
c0006c79:	eb 8c                	jmp    c0006c07 <f_getlabel+0xf0>
c0006c7b:	31 db                	xor    ebx,ebx
c0006c7d:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c84:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c87:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c8e:	74 17                	je     c0006ca7 <f_getlabel+0x190>
c0006c90:	4b                   	dec    ebx
c0006c91:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c94:	74 ee                	je     c0006c84 <f_getlabel+0x16d>
c0006c96:	eb 0f                	jmp    c0006ca7 <f_getlabel+0x190>
c0006c98:	83 f8 04             	cmp    eax,0x4
c0006c9b:	75 5c                	jne    c0006cf9 <f_getlabel+0x1e2>
c0006c9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ca4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ca7:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006caf:	74 4a                	je     c0006cfb <f_getlabel+0x1e4>
c0006cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb5:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cb8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cbb:	e8 5e b5 ff ff       	call   c000221e <move_window>
c0006cc0:	89 c6                	mov    esi,eax
c0006cc2:	85 c0                	test   eax,eax
c0006cc4:	75 35                	jne    c0006cfb <f_getlabel+0x1e4>
c0006cc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cca:	b8 43 00 00 00       	mov    eax,0x43
c0006ccf:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cd1:	80 f9 03             	cmp    cl,0x3
c0006cd4:	74 0f                	je     c0006ce5 <f_getlabel+0x1ce>
c0006cd6:	31 c0                	xor    eax,eax
c0006cd8:	80 f9 04             	cmp    cl,0x4
c0006cdb:	0f 94 c0             	sete   al
c0006cde:	48                   	dec    eax
c0006cdf:	83 e0 c3             	and    eax,0xffffffc3
c0006ce2:	83 c0 64             	add    eax,0x64
c0006ce5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ce9:	e8 5f ad ff ff       	call   c0001a4d <ld_dword>
c0006cee:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cf5:	89 07                	mov    DWORD PTR [edi],eax
c0006cf7:	eb 02                	jmp    c0006cfb <f_getlabel+0x1e4>
c0006cf9:	89 c6                	mov    esi,eax
c0006cfb:	83 c4 6c             	add    esp,0x6c
c0006cfe:	89 f0                	mov    eax,esi
c0006d00:	5b                   	pop    ebx
c0006d01:	5e                   	pop    esi
c0006d02:	5f                   	pop    edi
c0006d03:	5d                   	pop    ebp
c0006d04:	c3                   	ret    

c0006d05 <f_setlabel>:
c0006d05:	56                   	push   esi
c0006d06:	b9 02 00 00 00       	mov    ecx,0x2
c0006d0b:	53                   	push   ebx
c0006d0c:	83 ec 74             	sub    esp,0x74
c0006d0f:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d13:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1a:	e8 b1 b7 ff ff       	call   c00024d0 <mount_volume>
c0006d1f:	89 c6                	mov    esi,eax
c0006d21:	85 c0                	test   eax,eax
c0006d23:	0f 85 41 02 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006d29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d2d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d30:	0f 85 8e 00 00 00    	jne    c0006dc4 <f_setlabel+0xbf>
c0006d36:	b9 16 00 00 00       	mov    ecx,0x16
c0006d3b:	31 d2                	xor    edx,edx
c0006d3d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	e8 8c ad ff ff       	call   c0001ad4 <mem_set>
c0006d48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d4f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d52:	0f 86 0a 01 00 00    	jbe    c0006e62 <f_setlabel+0x15d>
c0006d58:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d5f:	e8 b6 ad ff ff       	call   c0001b1a <tchar2uni>
c0006d64:	89 c6                	mov    esi,eax
c0006d66:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d6b:	76 2a                	jbe    c0006d97 <f_setlabel+0x92>
c0006d6d:	83 f8 ff             	cmp    eax,0xffffffff
c0006d70:	74 05                	je     c0006d77 <f_setlabel+0x72>
c0006d72:	83 fb 09             	cmp    ebx,0x9
c0006d75:	76 0a                	jbe    c0006d81 <f_setlabel+0x7c>
c0006d77:	be 06 00 00 00       	mov    esi,0x6
c0006d7c:	e9 e9 01 00 00       	jmp    c0006f6a <f_setlabel+0x265>
c0006d81:	89 c2                	mov    edx,eax
c0006d83:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d87:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d8a:	c1 ea 10             	shr    edx,0x10
c0006d8d:	01 c8                	add    eax,ecx
c0006d8f:	43                   	inc    ebx
c0006d90:	e8 1d ad ff ff       	call   c0001ab2 <st_word>
c0006d95:	eb 04                	jmp    c0006d9b <f_setlabel+0x96>
c0006d97:	85 c0                	test   eax,eax
c0006d99:	74 dc                	je     c0006d77 <f_setlabel+0x72>
c0006d9b:	89 f2                	mov    edx,esi
c0006d9d:	b8 37 01 02 c0       	mov    eax,0xc0020137
c0006da2:	e8 5b ad ff ff       	call   c0001b02 <chk_chr>
c0006da7:	85 c0                	test   eax,eax
c0006da9:	75 cc                	jne    c0006d77 <f_setlabel+0x72>
c0006dab:	83 fb 0a             	cmp    ebx,0xa
c0006dae:	77 c7                	ja     c0006d77 <f_setlabel+0x72>
c0006db0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db3:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db7:	0f b7 d6             	movzx  edx,si
c0006dba:	01 c8                	add    eax,ecx
c0006dbc:	43                   	inc    ebx
c0006dbd:	e8 f0 ac ff ff       	call   c0001ab2 <st_word>
c0006dc2:	eb 84                	jmp    c0006d48 <f_setlabel+0x43>
c0006dc4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dc9:	ba 20 00 00 00       	mov    edx,0x20
c0006dce:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dd2:	31 db                	xor    ebx,ebx
c0006dd4:	e8 fb ac ff ff       	call   c0001ad4 <mem_set>
c0006dd9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006de0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006de3:	76 60                	jbe    c0006e45 <f_setlabel+0x140>
c0006de5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dec:	e8 29 ad ff ff       	call   c0001b1a <tchar2uni>
c0006df1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006df6:	0f 87 7b ff ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006dfc:	83 ec 0c             	sub    esp,0xc
c0006dff:	50                   	push   eax
c0006e00:	e8 97 15 00 00       	call   c000839c <ff_wtoupper>
c0006e05:	5a                   	pop    edx
c0006e06:	59                   	pop    ecx
c0006e07:	68 b5 01 00 00       	push   0x1b5
c0006e0c:	50                   	push   eax
c0006e0d:	e8 8e 14 00 00       	call   c00082a0 <ff_uni2oem>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	89 c6                	mov    esi,eax
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	0f 84 57 ff ff ff    	je     c0006d77 <f_setlabel+0x72>
c0006e20:	0f b7 d0             	movzx  edx,ax
c0006e23:	b8 30 01 02 c0       	mov    eax,0xc0020130
c0006e28:	e8 d5 ac ff ff       	call   c0001b02 <chk_chr>
c0006e2d:	85 c0                	test   eax,eax
c0006e2f:	0f 85 42 ff ff ff    	jne    c0006d77 <f_setlabel+0x72>
c0006e35:	66 81 fe ff 00       	cmp    si,0xff
c0006e3a:	0f 87 14 01 00 00    	ja     c0006f54 <f_setlabel+0x24f>
c0006e40:	e9 fa 00 00 00       	jmp    c0006f3f <f_setlabel+0x23a>
c0006e45:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e4a:	0f 84 27 ff ff ff    	je     c0006d77 <f_setlabel+0x72>
c0006e50:	85 db                	test   ebx,ebx
c0006e52:	74 0e                	je     c0006e62 <f_setlabel+0x15d>
c0006e54:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e57:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e5c:	75 04                	jne    c0006e62 <f_setlabel+0x15d>
c0006e5e:	89 c3                	mov    ebx,eax
c0006e60:	eb ee                	jmp    c0006e50 <f_setlabel+0x14b>
c0006e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e6c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e74:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e78:	e8 1f c1 ff ff       	call   c0002f9c <dir_sdi>
c0006e7d:	89 c6                	mov    esi,eax
c0006e7f:	85 c0                	test   eax,eax
c0006e81:	0f 85 e3 00 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006e87:	ba 01 00 00 00       	mov    edx,0x1
c0006e8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e90:	e8 17 c9 ff ff       	call   c00037ac <dir_read>
c0006e95:	85 c0                	test   eax,eax
c0006e97:	75 21                	jne    c0006eba <f_setlabel+0x1b5>
c0006e99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ea4:	74 5d                	je     c0006f03 <f_setlabel+0x1fe>
c0006ea6:	85 db                	test   ebx,ebx
c0006ea8:	74 0b                	je     c0006eb5 <f_setlabel+0x1b0>
c0006eaa:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eaf:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006eb3:	eb 70                	jmp    c0006f25 <f_setlabel+0x220>
c0006eb5:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eb8:	eb 70                	jmp    c0006f2a <f_setlabel+0x225>
c0006eba:	83 f8 04             	cmp    eax,0x4
c0006ebd:	75 7c                	jne    c0006f3b <f_setlabel+0x236>
c0006ebf:	85 db                	test   ebx,ebx
c0006ec1:	0f 84 a3 00 00 00    	je     c0006f6a <f_setlabel+0x265>
c0006ec7:	ba 01 00 00 00       	mov    edx,0x1
c0006ecc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ed0:	e8 51 ca ff ff       	call   c0003926 <dir_alloc>
c0006ed5:	89 c6                	mov    esi,eax
c0006ed7:	85 c0                	test   eax,eax
c0006ed9:	0f 85 8b 00 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006edf:	31 d2                	xor    edx,edx
c0006ee1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee5:	b9 20 00 00 00       	mov    ecx,0x20
c0006eea:	e8 e5 ab ff ff       	call   c0001ad4 <mem_set>
c0006eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ef6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006efa:	75 18                	jne    c0006f14 <f_setlabel+0x20f>
c0006efc:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006eff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f03:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f06:	b9 16 00 00 00       	mov    ecx,0x16
c0006f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0f:	83 c0 02             	add    eax,0x2
c0006f12:	eb 9b                	jmp    c0006eaf <f_setlabel+0x1aa>
c0006f14:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f18:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f1d:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f21:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f25:	e8 95 ab ff ff       	call   c0001abf <mem_cpy>
c0006f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f36:	e8 0e d4 ff ff       	call   c0004349 <sync_fs>
c0006f3b:	89 c6                	mov    esi,eax
c0006f3d:	eb 2b                	jmp    c0006f6a <f_setlabel+0x265>
c0006f3f:	83 fb 0a             	cmp    ebx,0xa
c0006f42:	0f 87 2f fe ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006f48:	89 f0                	mov    eax,esi
c0006f4a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f4e:	43                   	inc    ebx
c0006f4f:	e9 85 fe ff ff       	jmp    c0006dd9 <f_setlabel+0xd4>
c0006f54:	83 fb 09             	cmp    ebx,0x9
c0006f57:	0f 87 1a fe ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006f5d:	89 f0                	mov    eax,esi
c0006f5f:	66 c1 e8 08          	shr    ax,0x8
c0006f63:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f67:	43                   	inc    ebx
c0006f68:	eb de                	jmp    c0006f48 <f_setlabel+0x243>
c0006f6a:	89 f0                	mov    eax,esi
c0006f6c:	83 c4 74             	add    esp,0x74
c0006f6f:	5b                   	pop    ebx
c0006f70:	5e                   	pop    esi
c0006f71:	c3                   	ret    

c0006f72 <f_forward>:
c0006f72:	55                   	push   ebp
c0006f73:	57                   	push   edi
c0006f74:	56                   	push   esi
c0006f75:	53                   	push   ebx
c0006f76:	83 ec 2c             	sub    esp,0x2c
c0006f79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f87:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f8b:	89 d8                	mov    eax,ebx
c0006f8d:	e8 b1 b1 ff ff       	call   c0002143 <validate>
c0006f92:	89 c5                	mov    ebp,eax
c0006f94:	85 c0                	test   eax,eax
c0006f96:	0f 85 aa 01 00 00    	jne    c0007146 <f_forward+0x1d4>
c0006f9c:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fa0:	85 ed                	test   ebp,ebp
c0006fa2:	0f 85 9e 01 00 00    	jne    c0007146 <f_forward+0x1d4>
c0006fa8:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fac:	0f 84 8f 01 00 00    	je     c0007141 <f_forward+0x1cf>
c0006fb2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fb5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fb8:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fbb:	bf 00 00 00 00       	mov    edi,0x0
c0006fc0:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fc3:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fc7:	89 d1                	mov    ecx,edx
c0006fc9:	19 f9                	sbb    ecx,edi
c0006fcb:	0f 83 cf 00 00 00    	jae    c00070a0 <f_forward+0x12e>
c0006fd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fd5:	e9 c6 00 00 00       	jmp    c00070a0 <f_forward+0x12e>
c0006fda:	50                   	push   eax
c0006fdb:	50                   	push   eax
c0006fdc:	6a 00                	push   0x0
c0006fde:	6a 00                	push   0x0
c0006fe0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe4:	83 c4 10             	add    esp,0x10
c0006fe7:	85 c0                	test   eax,eax
c0006fe9:	0f 84 57 01 00 00    	je     c0007146 <f_forward+0x1d4>
c0006fef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ff2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006ff9:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006ffd:	89 d7                	mov    edi,edx
c0006fff:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007002:	89 c6                	mov    esi,eax
c0007004:	0f ac fe 09          	shrd   esi,edi,0x9
c0007008:	21 ce                	and    esi,ecx
c000700a:	89 c1                	mov    ecx,eax
c000700c:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007012:	0f 84 98 00 00 00    	je     c00070b0 <f_forward+0x13e>
c0007018:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000701c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000701f:	89 c8                	mov    eax,ecx
c0007021:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007025:	e8 af ac ff ff       	call   c0001cd9 <clst2sect>
c000702a:	89 d7                	mov    edi,edx
c000702c:	09 c7                	or     edi,eax
c000702e:	0f 84 9e 00 00 00    	je     c00070d2 <f_forward+0x160>
c0007034:	31 ff                	xor    edi,edi
c0007036:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007039:	01 c6                	add    esi,eax
c000703b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000703f:	11 d7                	adc    edi,edx
c0007041:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007044:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007047:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000704b:	39 fa                	cmp    edx,edi
c000704d:	0f 85 a2 00 00 00    	jne    c00070f5 <f_forward+0x183>
c0007053:	39 f0                	cmp    eax,esi
c0007055:	0f 85 9a 00 00 00    	jne    c00070f5 <f_forward+0x183>
c000705b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000705e:	ba 00 02 00 00       	mov    edx,0x200
c0007063:	25 ff 01 00 00       	and    eax,0x1ff
c0007068:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000706c:	29 c2                	sub    edx,eax
c000706e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007071:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007074:	39 d1                	cmp    ecx,edx
c0007076:	76 02                	jbe    c000707a <f_forward+0x108>
c0007078:	89 d1                	mov    ecx,edx
c000707a:	8d 73 50             	lea    esi,[ebx+0x50]
c000707d:	52                   	push   edx
c000707e:	01 c6                	add    esi,eax
c0007080:	52                   	push   edx
c0007081:	51                   	push   ecx
c0007082:	56                   	push   esi
c0007083:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007087:	83 c4 10             	add    esp,0x10
c000708a:	85 c0                	test   eax,eax
c000708c:	74 44                	je     c00070d2 <f_forward+0x160>
c000708e:	31 ff                	xor    edi,edi
c0007090:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007093:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007096:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000709a:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000709e:	01 07                	add    DWORD PTR [edi],eax
c00070a0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070a5:	0f 85 2f ff ff ff    	jne    c0006fda <f_forward+0x68>
c00070ab:	e9 96 00 00 00       	jmp    c0007146 <f_forward+0x1d4>
c00070b0:	85 f6                	test   esi,esi
c00070b2:	0f 85 60 ff ff ff    	jne    c0007018 <f_forward+0xa6>
c00070b8:	89 d7                	mov    edi,edx
c00070ba:	09 c7                	or     edi,eax
c00070bc:	75 05                	jne    c00070c3 <f_forward+0x151>
c00070be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070c1:	eb 0a                	jmp    c00070cd <f_forward+0x15b>
c00070c3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070c6:	89 d8                	mov    eax,ebx
c00070c8:	e8 d9 bc ff ff       	call   c0002da6 <get_fat>
c00070cd:	83 f8 01             	cmp    eax,0x1
c00070d0:	77 0b                	ja     c00070dd <f_forward+0x16b>
c00070d2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070d6:	bd 02 00 00 00       	mov    ebp,0x2
c00070db:	eb 69                	jmp    c0007146 <f_forward+0x1d4>
c00070dd:	83 f8 ff             	cmp    eax,0xffffffff
c00070e0:	75 0b                	jne    c00070ed <f_forward+0x17b>
c00070e2:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070e6:	bd 01 00 00 00       	mov    ebp,0x1
c00070eb:	eb 59                	jmp    c0007146 <f_forward+0x1d4>
c00070ed:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070f0:	e9 23 ff ff ff       	jmp    c0007018 <f_forward+0xa6>
c00070f5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070f9:	79 20                	jns    c000711b <f_forward+0x1a9>
c00070fb:	83 ec 0c             	sub    esp,0xc
c00070fe:	6a 01                	push   0x1
c0007100:	52                   	push   edx
c0007101:	50                   	push   eax
c0007102:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007106:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000710a:	50                   	push   eax
c000710b:	e8 fb a8 ff ff       	call   c0001a0b <disk_write>
c0007110:	83 c4 20             	add    esp,0x20
c0007113:	85 c0                	test   eax,eax
c0007115:	75 cb                	jne    c00070e2 <f_forward+0x170>
c0007117:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000711b:	83 ec 0c             	sub    esp,0xc
c000711e:	6a 01                	push   0x1
c0007120:	57                   	push   edi
c0007121:	56                   	push   esi
c0007122:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007126:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000712a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000712e:	50                   	push   eax
c000712f:	e8 c1 a8 ff ff       	call   c00019f5 <disk_read>
c0007134:	83 c4 20             	add    esp,0x20
c0007137:	85 c0                	test   eax,eax
c0007139:	0f 84 1c ff ff ff    	je     c000705b <f_forward+0xe9>
c000713f:	eb a1                	jmp    c00070e2 <f_forward+0x170>
c0007141:	bd 07 00 00 00       	mov    ebp,0x7
c0007146:	83 c4 2c             	add    esp,0x2c
c0007149:	89 e8                	mov    eax,ebp
c000714b:	5b                   	pop    ebx
c000714c:	5e                   	pop    esi
c000714d:	5f                   	pop    edi
c000714e:	5d                   	pop    ebp
c000714f:	c3                   	ret    

c0007150 <f_mkfs>:
c0007150:	55                   	push   ebp
c0007151:	57                   	push   edi
c0007152:	56                   	push   esi
c0007153:	53                   	push   ebx
c0007154:	bb 0b 00 00 00       	mov    ebx,0xb
c0007159:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000715f:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007166:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000716d:	e8 b0 ae ff ff       	call   c0002022 <get_ldnumber>
c0007172:	85 c0                	test   eax,eax
c0007174:	0f 88 ec 10 00 00    	js     c0008266 <f_mkfs+0x1116>
c000717a:	8b 14 85 00 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbd00]
c0007181:	85 d2                	test   edx,edx
c0007183:	74 03                	je     c0007188 <f_mkfs+0x38>
c0007185:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007188:	85 f6                	test   esi,esi
c000718a:	75 05                	jne    c0007191 <f_mkfs+0x41>
c000718c:	be 20 01 02 c0       	mov    esi,0xc0020120
c0007191:	83 ec 0c             	sub    esp,0xc
c0007194:	0f b6 c0             	movzx  eax,al
c0007197:	bb 03 00 00 00       	mov    ebx,0x3
c000719c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a4:	e8 49 a8 ff ff       	call   c00019f2 <disk_initialize>
c00071a9:	83 c4 10             	add    esp,0x10
c00071ac:	a8 01                	test   al,0x1
c00071ae:	0f 85 b2 10 00 00    	jne    c0008266 <f_mkfs+0x1116>
c00071b4:	bb 0a 00 00 00       	mov    ebx,0xa
c00071b9:	a8 04                	test   al,0x4
c00071bb:	0f 85 a5 10 00 00    	jne    c0008266 <f_mkfs+0x1116>
c00071c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071c4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071c8:	85 c0                	test   eax,eax
c00071ca:	75 20                	jne    c00071ec <f_mkfs+0x9c>
c00071cc:	51                   	push   ecx
c00071cd:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071d1:	50                   	push   eax
c00071d2:	6a 03                	push   0x3
c00071d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d8:	e8 44 a8 ff ff       	call   c0001a21 <disk_ioctl>
c00071dd:	83 c4 10             	add    esp,0x10
c00071e0:	85 c0                	test   eax,eax
c00071e2:	74 08                	je     c00071ec <f_mkfs+0x9c>
c00071e4:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ec:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071f0:	8d 42 ff             	lea    eax,[edx-0x1]
c00071f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f8:	77 04                	ja     c00071fe <f_mkfs+0xae>
c00071fa:	85 c2                	test   edx,eax
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xb6>
c00071fe:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007206:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007209:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000720d:	48                   	dec    eax
c000720e:	3c 01                	cmp    al,0x1
c0007210:	76 05                	jbe    c0007217 <f_mkfs+0xc7>
c0007212:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007217:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000721a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000721e:	48                   	dec    eax
c000721f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007224:	77 07                	ja     c000722d <f_mkfs+0xdd>
c0007226:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000722b:	74 08                	je     c0007235 <f_mkfs+0xe5>
c000722d:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007235:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007238:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000723e:	77 07                	ja     c0007247 <f_mkfs+0xf7>
c0007240:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007243:	85 d8                	test   eax,ebx
c0007245:	74 02                	je     c0007249 <f_mkfs+0xf9>
c0007247:	31 db                	xor    ebx,ebx
c0007249:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007254:	77 0a                	ja     c0007260 <f_mkfs+0x110>
c0007256:	bb 11 00 00 00       	mov    ebx,0x11
c000725b:	e9 06 10 00 00       	jmp    c0008266 <f_mkfs+0x1116>
c0007260:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007267:	8b 36                	mov    esi,DWORD PTR [esi]
c0007269:	85 ed                	test   ebp,ebp
c000726b:	75 1e                	jne    c000728b <f_mkfs+0x13b>
c000726d:	83 ec 0c             	sub    esp,0xc
c0007270:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007277:	25 00 fe ff ff       	and    eax,0xfffffe00
c000727c:	50                   	push   eax
c000727d:	e8 f1 0f 00 00       	call   c0008273 <ff_memalloc>
c0007282:	83 c4 10             	add    esp,0x10
c0007285:	89 c5                	mov    ebp,eax
c0007287:	85 c0                	test   eax,eax
c0007289:	74 cb                	je     c0007256 <f_mkfs+0x106>
c000728b:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007293:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000729b:	52                   	push   edx
c000729c:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072a0:	50                   	push   eax
c00072a1:	6a 01                	push   0x1
c00072a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072a7:	e8 75 a7 ff ff       	call   c0001a21 <disk_ioctl>
c00072ac:	83 c4 10             	add    esp,0x10
c00072af:	85 c0                	test   eax,eax
c00072b1:	0f 85 4a 0f 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00072b7:	89 f1                	mov    ecx,esi
c00072b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072c1:	83 e1 0f             	and    ecx,0xf
c00072c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072cc:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072d0:	83 e6 08             	and    esi,0x8
c00072d3:	75 56                	jne    c000732b <f_mkfs+0x1db>
c00072d5:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072d9:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072dd:	83 ff 00             	cmp    edi,0x0
c00072e0:	76 20                	jbe    c0007302 <f_mkfs+0x1b2>
c00072e2:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072e7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072ef:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072f5:	83 d7 ff             	adc    edi,0xffffffff
c00072f8:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072fc:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007300:	eb 21                	jmp    c0007323 <f_mkfs+0x1d3>
c0007302:	ba 3f 00 00 00       	mov    edx,0x3f
c0007307:	39 f2                	cmp    edx,esi
c0007309:	19 f8                	sbb    eax,edi
c000730b:	73 1e                	jae    c000732b <f_mkfs+0x1db>
c000730d:	83 c6 c1             	add    esi,0xffffffc1
c0007310:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007318:	83 d7 ff             	adc    edi,0xffffffff
c000731b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000731f:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007323:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000732b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000732f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007333:	89 04 24             	mov    DWORD PTR [esp],eax
c0007336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000733a:	31 c0                	xor    eax,eax
c000733c:	ba 7f 00 00 00       	mov    edx,0x7f
c0007341:	89 c7                	mov    edi,eax
c0007343:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007346:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000734a:	0f 83 c5 0a 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c0007350:	89 df                	mov    edi,ebx
c0007352:	c1 ef 09             	shr    edi,0x9
c0007355:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007359:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007360:	c1 ef 09             	shr    edi,0x9
c0007363:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007368:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000736c:	74 29                	je     c0007397 <f_mkfs+0x247>
c000736e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007374:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007379:	0f 97 c2             	seta   dl
c000737c:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000737f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007383:	0f 92 c0             	setb   al
c0007386:	08 c2                	or     dl,al
c0007388:	75 5b                	jne    c00073e5 <f_mkfs+0x295>
c000738a:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000738e:	83 e0 07             	and    eax,0x7
c0007391:	3c 04                	cmp    al,0x4
c0007393:	74 50                	je     c00073e5 <f_mkfs+0x295>
c0007395:	eb 1b                	jmp    c00073b2 <f_mkfs+0x262>
c0007397:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000739c:	0f 87 73 0a 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c00073a2:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a8:	76 08                	jbe    c00073b2 <f_mkfs+0x262>
c00073aa:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073b2:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073b6:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073ba:	83 e0 01             	and    eax,0x1
c00073bd:	80 e1 02             	and    cl,0x2
c00073c0:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073c4:	74 0d                	je     c00073d3 <f_mkfs+0x283>
c00073c6:	84 c0                	test   al,al
c00073c8:	0f 84 53 09 00 00    	je     c0007d21 <f_mkfs+0xbd1>
c00073ce:	e9 12 08 00 00       	jmp    c0007be5 <f_mkfs+0xa95>
c00073d3:	bb 13 00 00 00       	mov    ebx,0x13
c00073d8:	84 c0                	test   al,al
c00073da:	0f 85 05 08 00 00    	jne    c0007be5 <f_mkfs+0xa95>
c00073e0:	e9 39 0e 00 00       	jmp    c000821e <f_mkfs+0x10ce>
c00073e5:	31 c0                	xor    eax,eax
c00073e7:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ec:	89 c7                	mov    edi,eax
c00073ee:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073f1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073f5:	0f 83 1a 0a 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c00073fb:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007401:	77 39                	ja     c000743c <f_mkfs+0x2ec>
c0007403:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007408:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007410:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007413:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007417:	73 08                	jae    c0007421 <f_mkfs+0x2d1>
c0007419:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007421:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007426:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007429:	b8 00 00 00 00       	mov    eax,0x0
c000742e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007432:	73 08                	jae    c000743c <f_mkfs+0x2ec>
c0007434:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000743c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007444:	83 c0 20             	add    eax,0x20
c0007447:	83 d2 00             	adc    edx,0x0
c000744a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000744e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007456:	31 d2                	xor    edx,edx
c0007458:	31 ff                	xor    edi,edi
c000745a:	52                   	push   edx
c000745b:	89 fb                	mov    ebx,edi
c000745d:	50                   	push   eax
c000745e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007462:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007466:	e8 41 7d 01 00       	call   c001f1ac <__udivdi3>
c000746b:	83 c4 10             	add    esp,0x10
c000746e:	c1 e0 02             	shl    eax,0x2
c0007471:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007475:	05 07 02 00 00       	add    eax,0x207
c000747a:	89 f1                	mov    ecx,esi
c000747c:	c1 e8 09             	shr    eax,0x9
c000747f:	83 c1 ff             	add    ecx,0xffffffff
c0007482:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007486:	83 d3 ff             	adc    ebx,0xffffffff
c0007489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000748d:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007491:	31 d2                	xor    edx,edx
c0007493:	01 c8                	add    eax,ecx
c0007495:	11 da                	adc    edx,ebx
c0007497:	89 c1                	mov    ecx,eax
c0007499:	f7 de                	neg    esi
c000749b:	89 d0                	mov    eax,edx
c000749d:	83 d7 00             	adc    edi,0x0
c00074a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074a4:	f7 df                	neg    edi
c00074a6:	21 f1                	and    ecx,esi
c00074a8:	21 f8                	and    eax,edi
c00074aa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074ba:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c1:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074c5:	0f ac d0 01          	shrd   eax,edx,0x1
c00074c9:	89 df                	mov    edi,ebx
c00074cb:	d1 ea                	shr    edx,1
c00074cd:	39 c1                	cmp    ecx,eax
c00074cf:	19 d7                	sbb    edi,edx
c00074d1:	0f 83 3e 09 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c00074d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074db:	31 d2                	xor    edx,edx
c00074dd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ec:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074f0:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074f4:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074fc:	83 f8 0f             	cmp    eax,0xf
c00074ff:	0f 86 10 09 00 00    	jbe    c0007e15 <f_mkfs+0xcc5>
c0007505:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000750d:	0f 87 02 09 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c0007513:	31 d2                	xor    edx,edx
c0007515:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007521:	83 c0 07             	add    eax,0x7
c0007524:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000752c:	c1 e8 03             	shr    eax,0x3
c000752f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007536:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000753a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000753e:	c1 e0 09             	shl    eax,0x9
c0007541:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007545:	48                   	dec    eax
c0007546:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000754a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000754e:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007552:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007556:	31 d2                	xor    edx,edx
c0007558:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000755c:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007567:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000756c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007570:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007574:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007578:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000757c:	31 ff                	xor    edi,edi
c000757e:	31 f6                	xor    esi,esi
c0007580:	31 db                	xor    ebx,ebx
c0007582:	85 ff                	test   edi,edi
c0007584:	74 05                	je     c000758b <f_mkfs+0x43b>
c0007586:	4f                   	dec    edi
c0007587:	74 44                	je     c00075cd <f_mkfs+0x47d>
c0007589:	eb 4f                	jmp    c00075da <f_mkfs+0x48a>
c000758b:	83 ec 0c             	sub    esp,0xc
c000758e:	0f b7 c3             	movzx  eax,bx
c0007591:	50                   	push   eax
c0007592:	e8 05 0e 00 00       	call   c000839c <ff_wtoupper>
c0007597:	83 c4 10             	add    esp,0x10
c000759a:	89 c1                	mov    ecx,eax
c000759c:	8d 53 01             	lea    edx,[ebx+0x1]
c000759f:	66 39 c3             	cmp    bx,ax
c00075a2:	75 3e                	jne    c00075e2 <f_mkfs+0x492>
c00075a4:	be 01 00 00 00       	mov    esi,0x1
c00075a9:	89 df                	mov    edi,ebx
c00075ab:	66 01 f7             	add    di,si
c00075ae:	75 07                	jne    c00075b7 <f_mkfs+0x467>
c00075b0:	83 fe 7f             	cmp    esi,0x7f
c00075b3:	77 31                	ja     c00075e6 <f_mkfs+0x496>
c00075b5:	eb 16                	jmp    c00075cd <f_mkfs+0x47d>
c00075b7:	83 ec 0c             	sub    esp,0xc
c00075ba:	0f b7 ff             	movzx  edi,di
c00075bd:	57                   	push   edi
c00075be:	e8 d9 0d 00 00       	call   c000839c <ff_wtoupper>
c00075c3:	83 c4 10             	add    esp,0x10
c00075c6:	39 c7                	cmp    edi,eax
c00075c8:	75 e6                	jne    c00075b0 <f_mkfs+0x460>
c00075ca:	46                   	inc    esi
c00075cb:	eb dc                	jmp    c00075a9 <f_mkfs+0x459>
c00075cd:	31 c0                	xor    eax,eax
c00075cf:	89 d9                	mov    ecx,ebx
c00075d1:	4e                   	dec    esi
c00075d2:	0f 95 c0             	setne  al
c00075d5:	43                   	inc    ebx
c00075d6:	89 c7                	mov    edi,eax
c00075d8:	eb 14                	jmp    c00075ee <f_mkfs+0x49e>
c00075da:	89 f1                	mov    ecx,esi
c00075dc:	01 f3                	add    ebx,esi
c00075de:	31 ff                	xor    edi,edi
c00075e0:	eb 0c                	jmp    c00075ee <f_mkfs+0x49e>
c00075e2:	89 d3                	mov    ebx,edx
c00075e4:	eb 08                	jmp    c00075ee <f_mkfs+0x49e>
c00075e6:	bf 02 00 00 00       	mov    edi,0x2
c00075eb:	83 c9 ff             	or     ecx,0xffffffff
c00075ee:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f5:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075f9:	0f b6 c1             	movzx  eax,cl
c00075fc:	e8 3a a9 ff ff       	call   c0001f3b <xsum32>
c0007601:	66 c1 e9 08          	shr    cx,0x8
c0007605:	89 c2                	mov    edx,eax
c0007607:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000760a:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000760e:	0f b7 c1             	movzx  eax,cx
c0007611:	e8 25 a9 ff ff       	call   c0001f3b <xsum32>
c0007616:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000761b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000761f:	66 85 db             	test   bx,bx
c0007622:	74 1f                	je     c0007643 <f_mkfs+0x4f3>
c0007624:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007627:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000762e:	83 c0 02             	add    eax,0x2
c0007631:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007637:	39 c2                	cmp    edx,eax
c0007639:	74 08                	je     c0007643 <f_mkfs+0x4f3>
c000763b:	89 04 24             	mov    DWORD PTR [esp],eax
c000763e:	e9 3f ff ff ff       	jmp    c0007582 <f_mkfs+0x432>
c0007643:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007646:	83 ec 0c             	sub    esp,0xc
c0007649:	05 01 02 00 00       	add    eax,0x201
c000764e:	c1 e8 09             	shr    eax,0x9
c0007651:	50                   	push   eax
c0007652:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007656:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765e:	55                   	push   ebp
c000765f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007663:	e8 a3 a3 ff ff       	call   c0001a0b <disk_write>
c0007668:	83 c4 20             	add    esp,0x20
c000766b:	85 c0                	test   eax,eax
c000766d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007670:	0f 85 8b 0b 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007676:	89 d0                	mov    eax,edx
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000767e:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007682:	66 85 db             	test   bx,bx
c0007685:	74 04                	je     c000768b <f_mkfs+0x53b>
c0007687:	31 c0                	xor    eax,eax
c0007689:	eb b0                	jmp    c000763b <f_mkfs+0x4eb>
c000768b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000768f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007693:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007697:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000769d:	31 d2                	xor    edx,edx
c000769f:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076aa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076ae:	c1 eb 09             	shr    ebx,0x9
c00076b1:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076bc:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076c4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076c8:	8d 70 01             	lea    esi,[eax+0x1]
c00076cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076d3:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076da:	31 d2                	xor    edx,edx
c00076dc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e4:	89 c1                	mov    ecx,eax
c00076e6:	89 e8                	mov    eax,ebp
c00076e8:	e8 e7 a3 ff ff       	call   c0001ad4 <mem_set>
c00076ed:	31 c0                	xor    eax,eax
c00076ef:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076f2:	76 10                	jbe    c0007704 <f_mkfs+0x5b4>
c00076f4:	83 fe 07             	cmp    esi,0x7
c00076f7:	76 0b                	jbe    c0007704 <f_mkfs+0x5b4>
c00076f9:	40                   	inc    eax
c00076fa:	83 ee 08             	sub    esi,0x8
c00076fd:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007702:	eb eb                	jmp    c00076ef <f_mkfs+0x59f>
c0007704:	b2 01                	mov    dl,0x1
c0007706:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000770a:	85 f6                	test   esi,esi
c000770c:	74 0c                	je     c000771a <f_mkfs+0x5ca>
c000770e:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007711:	76 07                	jbe    c000771a <f_mkfs+0x5ca>
c0007713:	08 11                	or     BYTE PTR [ecx],dl
c0007715:	4e                   	dec    esi
c0007716:	d1 e2                	shl    edx,1
c0007718:	eb f0                	jmp    c000770a <f_mkfs+0x5ba>
c000771a:	89 df                	mov    edi,ebx
c000771c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007720:	76 04                	jbe    c0007726 <f_mkfs+0x5d6>
c0007722:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007726:	83 ec 0c             	sub    esp,0xc
c0007729:	57                   	push   edi
c000772a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000772e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007732:	55                   	push   ebp
c0007733:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007737:	e8 cf a2 ff ff       	call   c0001a0b <disk_write>
c000773c:	83 c4 20             	add    esp,0x20
c000773f:	85 c0                	test   eax,eax
c0007741:	0f 85 ba 0a 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007747:	31 d2                	xor    edx,edx
c0007749:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000774d:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007751:	29 fb                	sub    ebx,edi
c0007753:	0f 85 7a ff ff ff    	jne    c00076d3 <f_mkfs+0x583>
c0007759:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000775d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007765:	31 f6                	xor    esi,esi
c0007767:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000776b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000776e:	31 d2                	xor    edx,edx
c0007770:	89 e8                	mov    eax,ebp
c0007772:	e8 5d a3 ff ff       	call   c0001ad4 <mem_set>
c0007777:	31 c9                	xor    ecx,ecx
c0007779:	85 db                	test   ebx,ebx
c000777b:	75 40                	jne    c00077bd <f_mkfs+0x66d>
c000777d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007782:	89 e8                	mov    eax,ebp
c0007784:	bb 02 00 00 00       	mov    ebx,0x2
c0007789:	e8 28 a3 ff ff       	call   c0001ab6 <st_dword>
c000778e:	8d 45 04             	lea    eax,[ebp+0x4]
c0007791:	83 ca ff             	or     edx,0xffffffff
c0007794:	e8 1d a3 ff ff       	call   c0001ab6 <st_dword>
c0007799:	b9 08 00 00 00       	mov    ecx,0x8
c000779e:	eb 1d                	jmp    c00077bd <f_mkfs+0x66d>
c00077a0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a3:	76 3b                	jbe    c00077e0 <f_mkfs+0x690>
c00077a5:	43                   	inc    ebx
c00077a6:	83 fe 01             	cmp    esi,0x1
c00077a9:	89 da                	mov    edx,ebx
c00077ab:	77 03                	ja     c00077b0 <f_mkfs+0x660>
c00077ad:	83 ca ff             	or     edx,0xffffffff
c00077b0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077b4:	4e                   	dec    esi
c00077b5:	e8 fc a2 ff ff       	call   c0001ab6 <st_dword>
c00077ba:	83 c1 04             	add    ecx,0x4
c00077bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077c1:	85 f6                	test   esi,esi
c00077c3:	75 db                	jne    c00077a0 <f_mkfs+0x650>
c00077c5:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077ca:	77 14                	ja     c00077e0 <f_mkfs+0x690>
c00077cc:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077d0:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077d7:	85 f6                	test   esi,esi
c00077d9:	74 05                	je     c00077e0 <f_mkfs+0x690>
c00077db:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077de:	77 dd                	ja     c00077bd <f_mkfs+0x66d>
c00077e0:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077e8:	39 cf                	cmp    edi,ecx
c00077ea:	76 02                	jbe    c00077ee <f_mkfs+0x69e>
c00077ec:	89 cf                	mov    edi,ecx
c00077ee:	83 ec 0c             	sub    esp,0xc
c00077f1:	57                   	push   edi
c00077f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077fa:	55                   	push   ebp
c00077fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077ff:	e8 07 a2 ff ff       	call   c0001a0b <disk_write>
c0007804:	83 c4 20             	add    esp,0x20
c0007807:	85 c0                	test   eax,eax
c0007809:	0f 85 f2 09 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c000780f:	31 d2                	xor    edx,edx
c0007811:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007815:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007819:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000781d:	0f 85 48 ff ff ff    	jne    c000776b <f_mkfs+0x61b>
c0007823:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007826:	31 d2                	xor    edx,edx
c0007828:	89 e8                	mov    eax,ebp
c000782a:	31 ff                	xor    edi,edi
c000782c:	e8 a3 a2 ff ff       	call   c0001ad4 <mem_set>
c0007831:	8d 45 34             	lea    eax,[ebp+0x34]
c0007834:	ba 02 00 00 00       	mov    edx,0x2
c0007839:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000783d:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007841:	e8 70 a2 ff ff       	call   c0001ab6 <st_dword>
c0007846:	8d 45 38             	lea    eax,[ebp+0x38]
c0007849:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000784d:	e8 64 a2 ff ff       	call   c0001ab6 <st_dword>
c0007852:	8d 45 44             	lea    eax,[ebp+0x44]
c0007855:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007859:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000785d:	e8 54 a2 ff ff       	call   c0001ab6 <st_dword>
c0007862:	8d 45 54             	lea    eax,[ebp+0x54]
c0007865:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007869:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000786d:	83 c2 02             	add    edx,0x2
c0007870:	e8 41 a2 ff ff       	call   c0001ab6 <st_dword>
c0007875:	8d 45 58             	lea    eax,[ebp+0x58]
c0007878:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000787c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007880:	e8 31 a2 ff ff       	call   c0001ab6 <st_dword>
c0007885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007889:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000788e:	89 c6                	mov    esi,eax
c0007890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007894:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007898:	89 04 24             	mov    DWORD PTR [esp],eax
c000789b:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000789f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078a6:	39 cb                	cmp    ebx,ecx
c00078a8:	76 02                	jbe    c00078ac <f_mkfs+0x75c>
c00078aa:	89 cb                	mov    ebx,ecx
c00078ac:	83 ec 0c             	sub    esp,0xc
c00078af:	53                   	push   ebx
c00078b0:	57                   	push   edi
c00078b1:	56                   	push   esi
c00078b2:	55                   	push   ebp
c00078b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b7:	e8 4f a1 ff ff       	call   c0001a0b <disk_write>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	85 c0                	test   eax,eax
c00078c1:	0f 85 3a 09 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00078c7:	31 d2                	xor    edx,edx
c00078c9:	b9 00 02 00 00       	mov    ecx,0x200
c00078ce:	89 e8                	mov    eax,ebp
c00078d0:	e8 ff a1 ff ff       	call   c0001ad4 <mem_set>
c00078d5:	31 d2                	xor    edx,edx
c00078d7:	01 de                	add    esi,ebx
c00078d9:	11 d7                	adc    edi,edx
c00078db:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078de:	75 bf                	jne    c000789f <f_mkfs+0x74f>
c00078e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078e8:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078f0:	b9 00 02 00 00       	mov    ecx,0x200
c00078f5:	31 d2                	xor    edx,edx
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	e8 d6 a1 ff ff       	call   c0001ad4 <mem_set>
c00078fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0007903:	ba 00 02 02 c0       	mov    edx,0xc0020200
c0007908:	89 e8                	mov    eax,ebp
c000790a:	e8 b0 a1 ff ff       	call   c0001abf <mem_cpy>
c000790f:	8d 45 40             	lea    eax,[ebp+0x40]
c0007912:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007916:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000791a:	e8 9a a1 ff ff       	call   c0001ab9 <st_qword>
c000791f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007923:	8d 45 48             	lea    eax,[ebp+0x48]
c0007926:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000792a:	e8 8a a1 ff ff       	call   c0001ab9 <st_qword>
c000792f:	8d 45 50             	lea    eax,[ebp+0x50]
c0007932:	ba 20 00 00 00       	mov    edx,0x20
c0007937:	e8 7a a1 ff ff       	call   c0001ab6 <st_dword>
c000793c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007940:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007944:	e8 6d a1 ff ff       	call   c0001ab6 <st_dword>
c0007949:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000794d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007951:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007955:	e8 5c a1 ff ff       	call   c0001ab6 <st_dword>
c000795a:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000795d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007961:	e8 50 a1 ff ff       	call   c0001ab6 <st_dword>
c0007966:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000796a:	8d 50 02             	lea    edx,[eax+0x2]
c000796d:	8d 45 60             	lea    eax,[ebp+0x60]
c0007970:	e8 41 a1 ff ff       	call   c0001ab6 <st_dword>
c0007975:	8d 45 64             	lea    eax,[ebp+0x64]
c0007978:	ba 00 00 21 50       	mov    edx,0x50210000
c000797d:	e8 34 a1 ff ff       	call   c0001ab6 <st_dword>
c0007982:	8d 45 68             	lea    eax,[ebp+0x68]
c0007985:	ba 00 01 00 00       	mov    edx,0x100
c000798a:	e8 23 a1 ff ff       	call   c0001ab2 <st_word>
c000798f:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007993:	b8 0a 00 00 00       	mov    eax,0xa
c0007998:	48                   	dec    eax
c0007999:	74 05                	je     c00079a0 <f_mkfs+0x850>
c000799b:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000799e:	eb f8                	jmp    c0007998 <f_mkfs+0x848>
c00079a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079a4:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079ac:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079b0:	74 05                	je     c00079b7 <f_mkfs+0x867>
c00079b2:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079b5:	eb f5                	jmp    c00079ac <f_mkfs+0x85c>
c00079b7:	8d 45 78             	lea    eax,[ebp+0x78]
c00079ba:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079bf:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079c5:	31 db                	xor    ebx,ebx
c00079c7:	e8 e6 a0 ff ff       	call   c0001ab2 <st_word>
c00079cc:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079d2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00079da:	e8 d3 a0 ff ff       	call   c0001ab2 <st_word>
c00079df:	31 c9                	xor    ecx,ecx
c00079e1:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079e4:	83 f8 01             	cmp    eax,0x1
c00079e7:	76 13                	jbe    c00079fc <f_mkfs+0x8ac>
c00079e9:	83 f9 70             	cmp    ecx,0x70
c00079ec:	74 0e                	je     c00079fc <f_mkfs+0x8ac>
c00079ee:	89 da                	mov    edx,ebx
c00079f0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079f5:	e8 41 a5 ff ff       	call   c0001f3b <xsum32>
c00079fa:	89 c3                	mov    ebx,eax
c00079fc:	41                   	inc    ecx
c00079fd:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a03:	75 dc                	jne    c00079e1 <f_mkfs+0x891>
c0007a05:	89 f0                	mov    eax,esi
c0007a07:	89 fa                	mov    edx,edi
c0007a09:	83 c0 01             	add    eax,0x1
c0007a0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a10:	83 d2 00             	adc    edx,0x0
c0007a13:	83 ec 0c             	sub    esp,0xc
c0007a16:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a1a:	6a 01                	push   0x1
c0007a1c:	57                   	push   edi
c0007a1d:	56                   	push   esi
c0007a1e:	55                   	push   ebp
c0007a1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a23:	e8 e3 9f ff ff       	call   c0001a0b <disk_write>
c0007a28:	83 c4 20             	add    esp,0x20
c0007a2b:	85 c0                	test   eax,eax
c0007a2d:	0f 85 ce 07 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007a33:	31 d2                	xor    edx,edx
c0007a35:	b9 00 02 00 00       	mov    ecx,0x200
c0007a3a:	89 e8                	mov    eax,ebp
c0007a3c:	e8 93 a0 ff ff       	call   c0001ad4 <mem_set>
c0007a41:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a46:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a49:	e8 64 a0 ff ff       	call   c0001ab2 <st_word>
c0007a4e:	89 f0                	mov    eax,esi
c0007a50:	89 fa                	mov    edx,edi
c0007a52:	83 c0 09             	add    eax,0x9
c0007a55:	83 d2 00             	adc    edx,0x0
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a5f:	31 c9                	xor    ecx,ecx
c0007a61:	41                   	inc    ecx
c0007a62:	89 da                	mov    edx,ebx
c0007a64:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a69:	e8 cd a4 ff ff       	call   c0001f3b <xsum32>
c0007a6e:	89 c3                	mov    ebx,eax
c0007a70:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a76:	75 e9                	jne    c0007a61 <f_mkfs+0x911>
c0007a78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a80:	83 c0 01             	add    eax,0x1
c0007a83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a87:	83 d2 00             	adc    edx,0x0
c0007a8a:	83 ec 0c             	sub    esp,0xc
c0007a8d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a91:	6a 01                	push   0x1
c0007a93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a9b:	55                   	push   ebp
c0007a9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aa0:	e8 66 9f ff ff       	call   c0001a0b <disk_write>
c0007aa5:	83 c4 20             	add    esp,0x20
c0007aa8:	85 c0                	test   eax,eax
c0007aaa:	0f 85 51 07 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ab4:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ab8:	75 09                	jne    c0007ac3 <f_mkfs+0x973>
c0007aba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007abd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ac1:	74 12                	je     c0007ad5 <f_mkfs+0x985>
c0007ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007acb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007acf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ad3:	eb 8a                	jmp    c0007a5f <f_mkfs+0x90f>
c0007ad5:	31 d2                	xor    edx,edx
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	89 e8                	mov    eax,ebp
c0007ade:	e8 f1 9f ff ff       	call   c0001ad4 <mem_set>
c0007ae3:	83 c6 0b             	add    esi,0xb
c0007ae6:	83 d7 00             	adc    edi,0x0
c0007ae9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aed:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007af1:	31 c9                	xor    ecx,ecx
c0007af3:	41                   	inc    ecx
c0007af4:	89 da                	mov    edx,ebx
c0007af6:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007afb:	e8 3b a4 ff ff       	call   c0001f3b <xsum32>
c0007b00:	89 c3                	mov    ebx,eax
c0007b02:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b08:	75 e9                	jne    c0007af3 <f_mkfs+0x9a3>
c0007b0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b0d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b11:	83 c6 01             	add    esi,0x1
c0007b14:	83 d7 00             	adc    edi,0x0
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	6a 01                	push   0x1
c0007b1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b24:	55                   	push   ebp
c0007b25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b29:	e8 dd 9e ff ff       	call   c0001a0b <disk_write>
c0007b2e:	83 c4 20             	add    esp,0x20
c0007b31:	85 c0                	test   eax,eax
c0007b33:	0f 85 c8 06 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007b39:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b3d:	75 06                	jne    c0007b45 <f_mkfs+0x9f5>
c0007b3f:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b43:	74 09                	je     c0007b4e <f_mkfs+0x9fe>
c0007b45:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b48:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b4c:	eb a3                	jmp    c0007af1 <f_mkfs+0x9a1>
c0007b4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b52:	89 da                	mov    edx,ebx
c0007b54:	01 e8                	add    eax,ebp
c0007b56:	e8 5b 9f ff ff       	call   c0001ab6 <st_dword>
c0007b5b:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b60:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b68:	75 e4                	jne    c0007b4e <f_mkfs+0x9fe>
c0007b6a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b6d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b71:	83 c6 02             	add    esi,0x2
c0007b74:	83 d7 00             	adc    edi,0x0
c0007b77:	83 ec 0c             	sub    esp,0xc
c0007b7a:	6a 01                	push   0x1
c0007b7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b84:	55                   	push   ebp
c0007b85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b89:	e8 7d 9e ff ff       	call   c0001a0b <disk_write>
c0007b8e:	83 c4 20             	add    esp,0x20
c0007b91:	85 c0                	test   eax,eax
c0007b93:	0f 85 68 06 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007b99:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b9e:	74 0d                	je     c0007bad <f_mkfs+0xa5d>
c0007ba0:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ba8:	e9 43 fd ff ff       	jmp    c00078f0 <f_mkfs+0x7a0>
c0007bad:	b1 07                	mov    cl,0x7
c0007baf:	e9 e3 05 00 00       	jmp    c0008197 <f_mkfs+0x1047>
c0007bb4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bb9:	0f 85 4f 02 00 00    	jne    c0007e0e <f_mkfs+0xcbe>
c0007bbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bc4:	0f 86 22 02 00 00    	jbe    c0007dec <f_mkfs+0xc9c>
c0007bca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bcf:	0f 85 81 06 00 00    	jne    c0008256 <f_mkfs+0x1106>
c0007bd5:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bdc:	83 f8 40             	cmp    eax,0x40
c0007bdf:	0f 87 51 06 00 00    	ja     c0008236 <f_mkfs+0x10e6>
c0007be5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007be9:	85 ff                	test   edi,edi
c0007beb:	75 1c                	jne    c0007c09 <f_mkfs+0xab9>
c0007bed:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bf0:	ba 00 01 02 c0       	mov    edx,0xc0020100
c0007bf5:	c1 e9 0c             	shr    ecx,0xc
c0007bf8:	bf 01 00 00 00       	mov    edi,0x1
c0007bfd:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c00:	66 85 c0             	test   ax,ax
c0007c03:	0f 85 95 01 00 00    	jne    c0007d9e <f_mkfs+0xc4e>
c0007c09:	31 d2                	xor    edx,edx
c0007c0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c0e:	f7 f7                	div    edi
c0007c10:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c15:	0f 86 95 01 00 00    	jbe    c0007db0 <f_mkfs+0xc60>
c0007c1b:	83 c0 02             	add    eax,0x2
c0007c1e:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c23:	01 c0                	add    eax,eax
c0007c25:	05 ff 01 00 00       	add    eax,0x1ff
c0007c2a:	be 01 00 00 00       	mov    esi,0x1
c0007c2f:	c1 e8 09             	shr    eax,0x9
c0007c32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c3a:	c1 e0 05             	shl    eax,0x5
c0007c3d:	c1 e8 09             	shr    eax,0x9
c0007c40:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c44:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c49:	31 d2                	xor    edx,edx
c0007c4b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c4f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c53:	89 f0                	mov    eax,esi
c0007c55:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c59:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c70:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c74:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c78:	31 db                	xor    ebx,ebx
c0007c7a:	01 c8                	add    eax,ecx
c0007c7c:	11 da                	adc    edx,ebx
c0007c7e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c82:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c86:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c8a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c8e:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c92:	f7 da                	neg    edx
c0007c94:	21 d1                	and    ecx,edx
c0007c96:	29 d9                	sub    ecx,ebx
c0007c98:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c9d:	0f 85 20 01 00 00    	jne    c0007dc3 <f_mkfs+0xc73>
c0007ca3:	31 db                	xor    ebx,ebx
c0007ca5:	01 ce                	add    esi,ecx
c0007ca7:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cab:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007caf:	31 d2                	xor    edx,edx
c0007cb1:	89 f8                	mov    eax,edi
c0007cb3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cb7:	c1 e0 04             	shl    eax,0x4
c0007cba:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cbe:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cc2:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cc6:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cca:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ccd:	19 d3                	sbb    ebx,edx
c0007ccf:	0f 82 40 01 00 00    	jb     c0007e15 <f_mkfs+0xcc5>
c0007cd5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cdc:	89 c8                	mov    eax,ecx
c0007cde:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ce3:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ce7:	29 f0                	sub    eax,esi
c0007ce9:	29 d0                	sub    eax,edx
c0007ceb:	31 d2                	xor    edx,edx
c0007ced:	f7 f7                	div    edi
c0007cef:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cf4:	89 c3                	mov    ebx,eax
c0007cf6:	0f 85 b8 fe ff ff    	jne    c0007bb4 <f_mkfs+0xa64>
c0007cfc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d01:	0f 87 1d 01 00 00    	ja     c0007e24 <f_mkfs+0xcd4>
c0007d07:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d0c:	0f 85 03 01 00 00    	jne    c0007e15 <f_mkfs+0xcc5>
c0007d12:	83 ff 01             	cmp    edi,0x1
c0007d15:	0f 86 fa 00 00 00    	jbe    c0007e15 <f_mkfs+0xcc5>
c0007d1b:	d1 ef                	shr    edi,1
c0007d1d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d21:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d25:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d28:	85 db                	test   ebx,ebx
c0007d2a:	75 2d                	jne    c0007d59 <f_mkfs+0xc09>
c0007d2c:	89 cb                	mov    ebx,ecx
c0007d2e:	ba 10 01 02 c0       	mov    edx,0xc0020110
c0007d33:	c1 eb 11             	shr    ebx,0x11
c0007d36:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d3e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d41:	66 85 c0             	test   ax,ax
c0007d44:	74 11                	je     c0007d57 <f_mkfs+0xc07>
c0007d46:	83 c2 02             	add    edx,0x2
c0007d49:	39 d8                	cmp    eax,ebx
c0007d4b:	77 0a                	ja     c0007d57 <f_mkfs+0xc07>
c0007d4d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d51:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d55:	eb e7                	jmp    c0007d3e <f_mkfs+0xbee>
c0007d57:	31 db                	xor    ebx,ebx
c0007d59:	31 d2                	xor    edx,edx
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d61:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d68:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d6d:	c1 ea 09             	shr    edx,0x9
c0007d70:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d79:	0f 87 96 00 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c0007d7f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d83:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d8b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d8f:	be 20 00 00 00       	mov    esi,0x20
c0007d94:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d99:	e9 a6 fe ff ff       	jmp    c0007c44 <f_mkfs+0xaf4>
c0007d9e:	83 c2 02             	add    edx,0x2
c0007da1:	39 c8                	cmp    eax,ecx
c0007da3:	0f 87 60 fe ff ff    	ja     c0007c09 <f_mkfs+0xab9>
c0007da9:	01 ff                	add    edi,edi
c0007dab:	e9 4d fe ff ff       	jmp    c0007bfd <f_mkfs+0xaad>
c0007db0:	8d 04 40             	lea    eax,[eax+eax*2]
c0007db3:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007db8:	40                   	inc    eax
c0007db9:	d1 e8                	shr    eax,1
c0007dbb:	83 c0 03             	add    eax,0x3
c0007dbe:	e9 62 fe ff ff       	jmp    c0007c25 <f_mkfs+0xad5>
c0007dc3:	31 d2                	xor    edx,edx
c0007dc5:	89 c8                	mov    eax,ecx
c0007dc7:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dcb:	85 d2                	test   edx,edx
c0007dcd:	74 0c                	je     c0007ddb <f_mkfs+0xc8b>
c0007dcf:	49                   	dec    ecx
c0007dd0:	46                   	inc    esi
c0007dd1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dd6:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ddb:	89 c8                	mov    eax,ecx
c0007ddd:	31 d2                	xor    edx,edx
c0007ddf:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007de7:	e9 c3 fe ff ff       	jmp    c0007caf <f_mkfs+0xb5f>
c0007dec:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007df1:	77 31                	ja     c0007e24 <f_mkfs+0xcd4>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	75 1b                	jne    c0007e15 <f_mkfs+0xcc5>
c0007dfa:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e01:	3d 80 00 00 00       	cmp    eax,0x80
c0007e06:	0f 86 d9 fd ff ff    	jbe    c0007be5 <f_mkfs+0xa95>
c0007e0c:	eb 07                	jmp    c0007e15 <f_mkfs+0xcc5>
c0007e0e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e13:	76 0a                	jbe    c0007e1f <f_mkfs+0xccf>
c0007e15:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e1a:	e9 ff 03 00 00       	jmp    c000821e <f_mkfs+0x10ce>
c0007e1f:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2b:	89 e8                	mov    eax,ebp
c0007e2d:	e8 a2 9c ff ff       	call   c0001ad4 <mem_set>
c0007e32:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e37:	ba 22 02 02 c0       	mov    edx,0xc0020222
c0007e3c:	89 e8                	mov    eax,ebp
c0007e3e:	e8 7c 9c ff ff       	call   c0001abf <mem_cpy>
c0007e43:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e46:	ba 00 02 00 00       	mov    edx,0x200
c0007e4b:	e8 62 9c ff ff       	call   c0001ab2 <st_word>
c0007e50:	89 f8                	mov    eax,edi
c0007e52:	0f b7 d6             	movzx  edx,si
c0007e55:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e58:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e5b:	e8 52 9c ff ff       	call   c0001ab2 <st_word>
c0007e60:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e6c:	75 08                	jne    c0007e76 <f_mkfs+0xd26>
c0007e6e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e76:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e7d:	e8 30 9c ff ff       	call   c0001ab2 <st_word>
c0007e82:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e8b:	39 d0                	cmp    eax,edx
c0007e8d:	b8 00 00 00 00       	mov    eax,0x0
c0007e92:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e96:	72 0a                	jb     c0007ea2 <f_mkfs+0xd52>
c0007e98:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e9b:	e8 12 9c ff ff       	call   c0001ab2 <st_word>
c0007ea0:	eb 08                	jmp    c0007eaa <f_mkfs+0xd5a>
c0007ea2:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ea5:	e8 0c 9c ff ff       	call   c0001ab6 <st_dword>
c0007eaa:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ead:	ba 3f 00 00 00       	mov    edx,0x3f
c0007eb2:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007eb6:	e8 f7 9b ff ff       	call   c0001ab2 <st_word>
c0007ebb:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ebe:	ba ff 00 00 00       	mov    edx,0xff
c0007ec3:	e8 ea 9b ff ff       	call   c0001ab2 <st_word>
c0007ec8:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ecb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ecf:	e8 e2 9b ff ff       	call   c0001ab6 <st_dword>
c0007ed4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ed9:	75 57                	jne    c0007f32 <f_mkfs+0xde2>
c0007edb:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ede:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ee3:	e8 ce 9b ff ff       	call   c0001ab6 <st_dword>
c0007ee8:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eeb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eef:	e8 c2 9b ff ff       	call   c0001ab6 <st_dword>
c0007ef4:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ef7:	ba 02 00 00 00       	mov    edx,0x2
c0007efc:	e8 b5 9b ff ff       	call   c0001ab6 <st_dword>
c0007f01:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f04:	ba 01 00 00 00       	mov    edx,0x1
c0007f09:	e8 a4 9b ff ff       	call   c0001ab2 <st_word>
c0007f0e:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f11:	ba 06 00 00 00       	mov    edx,0x6
c0007f16:	e8 97 9b ff ff       	call   c0001ab2 <st_word>
c0007f1b:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f1f:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f23:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f26:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2b:	ba 2e 02 02 c0       	mov    edx,0xc002022e
c0007f30:	eb 2f                	jmp    c0007f61 <f_mkfs+0xe11>
c0007f32:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f35:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f3a:	e8 77 9b ff ff       	call   c0001ab6 <st_dword>
c0007f3f:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f44:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f47:	e8 66 9b ff ff       	call   c0001ab2 <st_word>
c0007f4c:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f50:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f54:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f57:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5c:	ba 42 02 02 c0       	mov    edx,0xc0020242
c0007f61:	e8 59 9b ff ff       	call   c0001abf <mem_cpy>
c0007f66:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f6c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f71:	89 f0                	mov    eax,esi
c0007f73:	e8 3a 9b ff ff       	call   c0001ab2 <st_word>
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	6a 01                	push   0x1
c0007f7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f85:	55                   	push   ebp
c0007f86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f8a:	e8 7c 9a ff ff       	call   c0001a0b <disk_write>
c0007f8f:	83 c4 20             	add    esp,0x20
c0007f92:	85 c0                	test   eax,eax
c0007f94:	0f 85 67 02 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007f9a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9f:	0f 85 b7 00 00 00    	jne    c000805c <f_mkfs+0xf0c>
c0007fa5:	83 ec 0c             	sub    esp,0xc
c0007fa8:	6a 01                	push   0x1
c0007faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fb2:	83 c0 06             	add    eax,0x6
c0007fb5:	83 d2 00             	adc    edx,0x0
c0007fb8:	52                   	push   edx
c0007fb9:	50                   	push   eax
c0007fba:	55                   	push   ebp
c0007fbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fbf:	e8 47 9a ff ff       	call   c0001a0b <disk_write>
c0007fc4:	83 c4 20             	add    esp,0x20
c0007fc7:	b9 00 02 00 00       	mov    ecx,0x200
c0007fcc:	31 d2                	xor    edx,edx
c0007fce:	89 e8                	mov    eax,ebp
c0007fd0:	e8 ff 9a ff ff       	call   c0001ad4 <mem_set>
c0007fd5:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fda:	89 e8                	mov    eax,ebp
c0007fdc:	e8 d5 9a ff ff       	call   c0001ab6 <st_dword>
c0007fe1:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fe7:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fec:	e8 c5 9a ff ff       	call   c0001ab6 <st_dword>
c0007ff1:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ff4:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007ffa:	e8 b7 9a ff ff       	call   c0001ab6 <st_dword>
c0007fff:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008005:	ba 02 00 00 00       	mov    edx,0x2
c000800a:	e8 a7 9a ff ff       	call   c0001ab6 <st_dword>
c000800f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008014:	89 f0                	mov    eax,esi
c0008016:	e8 97 9a ff ff       	call   c0001ab2 <st_word>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	6a 01                	push   0x1
c0008020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008024:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008028:	83 c0 07             	add    eax,0x7
c000802b:	83 d2 00             	adc    edx,0x0
c000802e:	52                   	push   edx
c000802f:	50                   	push   eax
c0008030:	55                   	push   ebp
c0008031:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008035:	e8 d1 99 ff ff       	call   c0001a0b <disk_write>
c000803a:	83 c4 14             	add    esp,0x14
c000803d:	6a 01                	push   0x1
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008047:	83 c0 01             	add    eax,0x1
c000804a:	83 d2 00             	adc    edx,0x0
c000804d:	52                   	push   edx
c000804e:	50                   	push   eax
c000804f:	55                   	push   ebp
c0008050:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008054:	e8 b2 99 ff ff       	call   c0001a0b <disk_write>
c0008059:	83 c4 20             	add    esp,0x20
c000805c:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008063:	31 d2                	xor    edx,edx
c0008065:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000806b:	31 db                	xor    ebx,ebx
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 60 9a ff ff       	call   c0001ad4 <mem_set>
c0008074:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008079:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008080:	0f 94 c3             	sete   bl
c0008083:	4b                   	dec    ebx
c0008084:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000808a:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008090:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008095:	75 21                	jne    c00080b8 <f_mkfs+0xf68>
c0008097:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000809c:	89 e8                	mov    eax,ebp
c000809e:	e8 13 9a ff ff       	call   c0001ab6 <st_dword>
c00080a3:	8d 45 04             	lea    eax,[ebp+0x4]
c00080a6:	83 ca ff             	or     edx,0xffffffff
c00080a9:	e8 08 9a ff ff       	call   c0001ab6 <st_dword>
c00080ae:	8d 45 08             	lea    eax,[ebp+0x8]
c00080b1:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080b6:	eb 04                	jmp    c00080bc <f_mkfs+0xf6c>
c00080b8:	89 da                	mov    edx,ebx
c00080ba:	89 e8                	mov    eax,ebp
c00080bc:	e8 f5 99 ff ff       	call   c0001ab6 <st_dword>
c00080c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080c9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080d1:	39 ce                	cmp    esi,ecx
c00080d3:	76 02                	jbe    c00080d7 <f_mkfs+0xf87>
c00080d5:	89 ce                	mov    esi,ecx
c00080d7:	83 ec 0c             	sub    esp,0xc
c00080da:	56                   	push   esi
c00080db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e3:	55                   	push   ebp
c00080e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080e8:	e8 1e 99 ff ff       	call   c0001a0b <disk_write>
c00080ed:	83 c4 20             	add    esp,0x20
c00080f0:	85 c0                	test   eax,eax
c00080f2:	0f 85 09 01 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00080f8:	31 d2                	xor    edx,edx
c00080fa:	b9 00 02 00 00       	mov    ecx,0x200
c00080ff:	89 e8                	mov    eax,ebp
c0008101:	e8 ce 99 ff ff       	call   c0001ad4 <mem_set>
c0008106:	31 d2                	xor    edx,edx
c0008108:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000810c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008110:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008114:	75 b3                	jne    c00080c9 <f_mkfs+0xf79>
c0008116:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008119:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008120:	40                   	inc    eax
c0008121:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008125:	0f 87 65 ff ff ff    	ja     c0008090 <f_mkfs+0xf40>
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 04                	je     c0008136 <f_mkfs+0xfe6>
c0008132:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008136:	89 fb                	mov    ebx,edi
c0008138:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000813c:	76 04                	jbe    c0008142 <f_mkfs+0xff2>
c000813e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008142:	83 ec 0c             	sub    esp,0xc
c0008145:	53                   	push   ebx
c0008146:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814e:	55                   	push   ebp
c000814f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008153:	e8 b3 98 ff ff       	call   c0001a0b <disk_write>
c0008158:	83 c4 20             	add    esp,0x20
c000815b:	85 c0                	test   eax,eax
c000815d:	0f 85 9e 00 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0008163:	31 d2                	xor    edx,edx
c0008165:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008169:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000816d:	29 df                	sub    edi,ebx
c000816f:	75 c5                	jne    c0008136 <f_mkfs+0xfe6>
c0008171:	b1 0c                	mov    cl,0xc
c0008173:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008178:	74 1d                	je     c0008197 <f_mkfs+0x1047>
c000817a:	b8 ff ff 00 00       	mov    eax,0xffff
c000817f:	b1 06                	mov    cl,0x6
c0008181:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008185:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008189:	72 0c                	jb     c0008197 <f_mkfs+0x1047>
c000818b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008190:	0f 94 c1             	sete   cl
c0008193:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008197:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000819c:	75 4c                	jne    c00081ea <f_mkfs+0x109a>
c000819e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081a2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081a6:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081b4:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081bf:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081ca:	0f b6 c9             	movzx  ecx,cl
c00081cd:	83 ec 0c             	sub    esp,0xc
c00081d0:	55                   	push   ebp
c00081d1:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081dc:	e8 2f c2 ff ff       	call   c0004410 <create_partition>
c00081e1:	83 c4 10             	add    esp,0x10
c00081e4:	89 c3                	mov    ebx,eax
c00081e6:	85 c0                	test   eax,eax
c00081e8:	75 34                	jne    c000821e <f_mkfs+0x10ce>
c00081ea:	31 db                	xor    ebx,ebx
c00081ec:	50                   	push   eax
c00081ed:	6a 00                	push   0x0
c00081ef:	6a 00                	push   0x0
c00081f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081f5:	e8 27 98 ff ff       	call   c0001a21 <disk_ioctl>
c00081fa:	83 c4 10             	add    esp,0x10
c00081fd:	85 c0                	test   eax,eax
c00081ff:	74 1d                	je     c000821e <f_mkfs+0x10ce>
c0008201:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008209:	75 0c                	jne    c0008217 <f_mkfs+0x10c7>
c000820b:	83 ec 0c             	sub    esp,0xc
c000820e:	55                   	push   ebp
c000820f:	e8 75 00 00 00       	call   c0008289 <ff_memfree>
c0008214:	83 c4 10             	add    esp,0x10
c0008217:	bb 01 00 00 00       	mov    ebx,0x1
c000821c:	eb 48                	jmp    c0008266 <f_mkfs+0x1116>
c000821e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008226:	75 3e                	jne    c0008266 <f_mkfs+0x1116>
c0008228:	83 ec 0c             	sub    esp,0xc
c000822b:	55                   	push   ebp
c000822c:	e8 58 00 00 00       	call   c0008289 <ff_memfree>
c0008231:	83 c4 10             	add    esp,0x10
c0008234:	eb 30                	jmp    c0008266 <f_mkfs+0x1116>
c0008236:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000823b:	0f 85 eb fa ff ff    	jne    c0007d2c <f_mkfs+0xbdc>
c0008241:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008245:	81 ff 80 00 00 00    	cmp    edi,0x80
c000824b:	0f 86 b8 f9 ff ff    	jbe    c0007c09 <f_mkfs+0xab9>
c0008251:	e9 bf fb ff ff       	jmp    c0007e15 <f_mkfs+0xcc5>
c0008256:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000825b:	0f 85 c0 fa ff ff    	jne    c0007d21 <f_mkfs+0xbd1>
c0008261:	e9 af fb ff ff       	jmp    c0007e15 <f_mkfs+0xcc5>
c0008266:	81 c4 9c 00 00 00    	add    esp,0x9c
c000826c:	89 d8                	mov    eax,ebx
c000826e:	5b                   	pop    ebx
c000826f:	5e                   	pop    esi
c0008270:	5f                   	pop    edi
c0008271:	5d                   	pop    ebp
c0008272:	c3                   	ret    

c0008273 <ff_memalloc>:
c0008273:	83 ec 0c             	sub    esp,0xc
c0008276:	83 ec 0c             	sub    esp,0xc
c0008279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827d:	e8 9a 3d 00 00       	call   c000c01c <malloc>
c0008282:	83 c4 10             	add    esp,0x10
c0008285:	83 c4 0c             	add    esp,0xc
c0008288:	c3                   	ret    

c0008289 <ff_memfree>:
c0008289:	83 ec 0c             	sub    esp,0xc
c000828c:	83 ec 0c             	sub    esp,0xc
c000828f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008293:	e8 94 3d 00 00       	call   c000c02c <free>
c0008298:	83 c4 10             	add    esp,0x10
c000829b:	90                   	nop
c000829c:	83 c4 0c             	add    esp,0xc
c000829f:	c3                   	ret    

c00082a0 <ff_uni2oem>:
c00082a0:	83 ec 14             	sub    esp,0x14
c00082a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082a7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082ab:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b2:	c7 44 24 0c 60 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020560
c00082ba:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082bf:	77 0b                	ja     c00082cc <ff_uni2oem+0x2c>
c00082c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082c5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ca:	eb 5b                	jmp    c0008327 <ff_uni2oem+0x87>
c00082cc:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082d4:	77 51                	ja     c0008327 <ff_uni2oem+0x87>
c00082d6:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082dc:	75 49                	jne    c0008327 <ff_uni2oem+0x87>
c00082de:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e5:	eb 0b                	jmp    c00082f2 <ff_uni2oem+0x52>
c00082e7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ec:	40                   	inc    eax
c00082ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f2:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082f8:	77 1b                	ja     c0008315 <ff_uni2oem+0x75>
c00082fa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082ff:	01 c0                	add    eax,eax
c0008301:	89 c2                	mov    edx,eax
c0008303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008307:	01 d0                	add    eax,edx
c0008309:	66 8b 00             	mov    ax,WORD PTR [eax]
c000830c:	0f b7 c0             	movzx  eax,ax
c000830f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008313:	75 d2                	jne    c00082e7 <ff_uni2oem+0x47>
c0008315:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000831a:	83 e8 80             	sub    eax,0xffffff80
c000831d:	25 ff 00 00 00       	and    eax,0xff
c0008322:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008327:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832c:	83 c4 14             	add    esp,0x14
c000832f:	c3                   	ret    

c0008330 <ff_oem2uni>:
c0008330:	83 ec 18             	sub    esp,0x18
c0008333:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000833b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008340:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008344:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000834b:	c7 44 24 10 60 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020560
c0008353:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008359:	77 0b                	ja     c0008366 <ff_oem2uni+0x36>
c000835b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	eb 2d                	jmp    c0008393 <ff_oem2uni+0x63>
c0008366:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000836c:	75 25                	jne    c0008393 <ff_oem2uni+0x63>
c000836e:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008375:	77 1c                	ja     c0008393 <ff_oem2uni+0x63>
c0008377:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000837c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008381:	01 c0                	add    eax,eax
c0008383:	89 c2                	mov    edx,eax
c0008385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008389:	01 d0                	add    eax,edx
c000838b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000838e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008393:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008398:	83 c4 18             	add    esp,0x18
c000839b:	c3                   	ret    

c000839c <ff_wtoupper>:
c000839c:	83 ec 10             	sub    esp,0x10
c000839f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083a7:	0f 87 3e 01 00 00    	ja     c00084eb <ff_wtoupper+0x14f>
c00083ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083b1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083b6:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083bd:	77 07                	ja     c00083c6 <ff_wtoupper+0x2a>
c00083bf:	b8 60 03 02 c0       	mov    eax,0xc0020360
c00083c4:	eb 05                	jmp    c00083cb <ff_wtoupper+0x2f>
c00083c6:	b8 a0 02 02 c0       	mov    eax,0xc00202a0
c00083cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083e2:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083e8:	0f 84 f4 00 00 00    	je     c00084e2 <ff_wtoupper+0x146>
c00083ee:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f3:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083f8:	0f 82 e4 00 00 00    	jb     c00084e2 <ff_wtoupper+0x146>
c00083fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008402:	8d 50 02             	lea    edx,[eax+0x2]
c0008405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008409:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008411:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008416:	66 c1 e8 08          	shr    ax,0x8
c000841a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000841f:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008426:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000842b:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008430:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008435:	01 ca                	add    edx,ecx
c0008437:	39 d0                	cmp    eax,edx
c0008439:	0f 8d 86 00 00 00    	jge    c00084c5 <ff_wtoupper+0x129>
c000843f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008444:	83 f8 08             	cmp    eax,0x8
c0008447:	0f 87 94 00 00 00    	ja     c00084e1 <ff_wtoupper+0x145>
c000844d:	8b 04 85 60 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfda0]
c0008454:	ff e0                	jmp    eax
c0008456:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000845b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008460:	29 c2                	sub    edx,eax
c0008462:	89 d0                	mov    eax,edx
c0008464:	01 c0                	add    eax,eax
c0008466:	89 c2                	mov    edx,eax
c0008468:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000846c:	01 d0                	add    eax,edx
c000846e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008471:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008476:	eb 4b                	jmp    c00084c3 <ff_wtoupper+0x127>
c0008478:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000847d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008481:	83 e0 01             	and    eax,0x1
c0008484:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008489:	eb 38                	jmp    c00084c3 <ff_wtoupper+0x127>
c000848b:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008491:	eb 30                	jmp    c00084c3 <ff_wtoupper+0x127>
c0008493:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008499:	eb 28                	jmp    c00084c3 <ff_wtoupper+0x127>
c000849b:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084a1:	eb 20                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084a3:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084a9:	eb 18                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084ab:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084b1:	eb 10                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084b3:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084b9:	eb 08                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084bb:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084c2:	90                   	nop
c00084c3:	eb 1c                	jmp    c00084e1 <ff_wtoupper+0x145>
c00084c5:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084cb:	0f 85 fe fe ff ff    	jne    c00083cf <ff_wtoupper+0x33>
c00084d1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d6:	01 c0                	add    eax,eax
c00084d8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084dc:	e9 ee fe ff ff       	jmp    c00083cf <ff_wtoupper+0x33>
c00084e1:	90                   	nop
c00084e2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ef:	83 c4 10             	add    esp,0x10
c00084f2:	c3                   	ret    

c00084f3 <is_bad_src_ratio>:
c00084f3:	83 ec 0c             	sub    esp,0xc
c00084f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00084fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008501:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008505:	dd 04 24             	fld    QWORD PTR [esp]
c0008508:	dd 05 20 0b 02 c0    	fld    QWORD PTR ds:0xc0020b20
c000850e:	de d9                	fcompp 
c0008510:	df e0                	fnstsw ax
c0008512:	f6 c4 45             	test   ah,0x45
c0008515:	74 10                	je     c0008527 <is_bad_src_ratio+0x34>
c0008517:	dd 04 24             	fld    QWORD PTR [esp]
c000851a:	dc 1d 28 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b28
c0008520:	df e0                	fnstsw ax
c0008522:	f6 c4 45             	test   ah,0x45
c0008525:	75 07                	jne    c000852e <is_bad_src_ratio+0x3b>
c0008527:	b8 01 00 00 00       	mov    eax,0x1
c000852c:	eb 05                	jmp    c0008533 <is_bad_src_ratio+0x40>
c000852e:	b8 00 00 00 00       	mov    eax,0x0
c0008533:	83 c4 0c             	add    esp,0xc
c0008536:	c3                   	ret    

c0008537 <psrc_set_converter>:
c0008537:	56                   	push   esi
c0008538:	89 d6                	mov    esi,edx
c000853a:	53                   	push   ebx
c000853b:	89 c3                	mov    ebx,eax
c000853d:	83 ec 0c             	sub    esp,0xc
c0008540:	52                   	push   edx
c0008541:	50                   	push   eax
c0008542:	e8 33 24 00 00       	call   c000a97a <sinc_set_converter>
c0008547:	83 c4 10             	add    esp,0x10
c000854a:	85 c0                	test   eax,eax
c000854c:	74 25                	je     c0008573 <psrc_set_converter+0x3c>
c000854e:	50                   	push   eax
c000854f:	50                   	push   eax
c0008550:	56                   	push   esi
c0008551:	53                   	push   ebx
c0008552:	e8 32 28 00 00       	call   c000ad89 <zoh_set_converter>
c0008557:	83 c4 10             	add    esp,0x10
c000855a:	85 c0                	test   eax,eax
c000855c:	74 15                	je     c0008573 <psrc_set_converter+0x3c>
c000855e:	51                   	push   ecx
c000855f:	51                   	push   ecx
c0008560:	56                   	push   esi
c0008561:	53                   	push   ebx
c0008562:	e8 10 0a 00 00       	call   c0008f77 <linear_set_converter>
c0008567:	83 c4 10             	add    esp,0x10
c000856a:	ba 0a 00 00 00       	mov    edx,0xa
c000856f:	85 c0                	test   eax,eax
c0008571:	75 02                	jne    c0008575 <psrc_set_converter+0x3e>
c0008573:	31 d2                	xor    edx,edx
c0008575:	89 d0                	mov    eax,edx
c0008577:	5a                   	pop    edx
c0008578:	5b                   	pop    ebx
c0008579:	5e                   	pop    esi
c000857a:	c3                   	ret    

c000857b <src_delete>:
c000857b:	53                   	push   ebx
c000857c:	83 ec 08             	sub    esp,0x8
c000857f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008583:	85 db                	test   ebx,ebx
c0008585:	74 29                	je     c00085b0 <src_delete+0x35>
c0008587:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858a:	85 c0                	test   eax,eax
c000858c:	74 0c                	je     c000859a <src_delete+0x1f>
c000858e:	83 ec 0c             	sub    esp,0xc
c0008591:	50                   	push   eax
c0008592:	e8 95 3a 00 00       	call   c000c02c <free>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	50                   	push   eax
c000859b:	6a 3c                	push   0x3c
c000859d:	6a 00                	push   0x0
c000859f:	53                   	push   ebx
c00085a0:	e8 15 81 ff ff       	call   c00006ba <memset>
c00085a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085a8:	e8 7f 3a 00 00       	call   c000c02c <free>
c00085ad:	83 c4 10             	add    esp,0x10
c00085b0:	31 c0                	xor    eax,eax
c00085b2:	83 c4 08             	add    esp,0x8
c00085b5:	5b                   	pop    ebx
c00085b6:	c3                   	ret    

c00085b7 <src_process>:
c00085b7:	56                   	push   esi
c00085b8:	53                   	push   ebx
c00085b9:	53                   	push   ebx
c00085ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085c2:	85 f6                	test   esi,esi
c00085c4:	0f 84 e2 00 00 00    	je     c00086ac <src_process+0xf5>
c00085ca:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085ce:	0f 84 df 00 00 00    	je     c00086b3 <src_process+0xfc>
c00085d4:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085d8:	0f 84 d5 00 00 00    	je     c00086b3 <src_process+0xfc>
c00085de:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085e5:	0f 85 cf 00 00 00    	jne    c00086ba <src_process+0x103>
c00085eb:	85 db                	test   ebx,ebx
c00085ed:	0f 84 ce 00 00 00    	je     c00086c1 <src_process+0x10a>
c00085f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085f6:	0f 84 cc 00 00 00    	je     c00086c8 <src_process+0x111>
c00085fc:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008600:	0f 84 c2 00 00 00    	je     c00086c8 <src_process+0x111>
c0008606:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008609:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000860c:	e8 e2 fe ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008611:	5a                   	pop    edx
c0008612:	85 c0                	test   eax,eax
c0008614:	59                   	pop    ecx
c0008615:	0f 85 b4 00 00 00    	jne    c00086cf <src_process+0x118>
c000861b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000861f:	79 07                	jns    c0008628 <src_process+0x71>
c0008621:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008628:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000862c:	79 07                	jns    c0008635 <src_process+0x7e>
c000862e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008635:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008637:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000863a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000863d:	39 ca                	cmp    edx,ecx
c000863f:	73 0b                	jae    c000864c <src_process+0x95>
c0008641:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008645:	8d 04 82             	lea    eax,[edx+eax*4]
c0008648:	39 c1                	cmp    ecx,eax
c000864a:	eb 09                	jmp    c0008655 <src_process+0x9e>
c000864c:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008650:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008653:	39 c2                	cmp    edx,eax
c0008655:	72 7f                	jb     c00086d6 <src_process+0x11f>
c0008657:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000865e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008665:	d9 05 40 0b 02 c0    	fld    DWORD PTR ds:0xc0020b40
c000866b:	dc 1e                	fcomp  QWORD PTR [esi]
c000866d:	df e0                	fnstsw ax
c000866f:	9e                   	sahf   
c0008670:	76 05                	jbe    c0008677 <src_process+0xc0>
c0008672:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008675:	dd 1e                	fstp   QWORD PTR [esi]
c0008677:	83 ec 10             	sub    esp,0x10
c000867a:	dd 06                	fld    QWORD PTR [esi]
c000867c:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000867f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008682:	e8 49 6d 01 00       	call   c001f3d0 <fabs>
c0008687:	83 c4 10             	add    esp,0x10
c000868a:	dd 05 30 0b 02 c0    	fld    QWORD PTR ds:0xc0020b30
c0008690:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008694:	de d9                	fcompp 
c0008696:	df e0                	fnstsw ax
c0008698:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000869c:	9e                   	sahf   
c000869d:	76 05                	jbe    c00086a4 <src_process+0xed>
c000869f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086a2:	eb 03                	jmp    c00086a7 <src_process+0xf0>
c00086a4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086a7:	59                   	pop    ecx
c00086a8:	5b                   	pop    ebx
c00086a9:	5e                   	pop    esi
c00086aa:	ff e0                	jmp    eax
c00086ac:	b8 02 00 00 00       	mov    eax,0x2
c00086b1:	eb 28                	jmp    c00086db <src_process+0x124>
c00086b3:	b8 07 00 00 00       	mov    eax,0x7
c00086b8:	eb 21                	jmp    c00086db <src_process+0x124>
c00086ba:	b8 12 00 00 00       	mov    eax,0x12
c00086bf:	eb 1a                	jmp    c00086db <src_process+0x124>
c00086c1:	b8 03 00 00 00       	mov    eax,0x3
c00086c6:	eb 13                	jmp    c00086db <src_process+0x124>
c00086c8:	b8 04 00 00 00       	mov    eax,0x4
c00086cd:	eb 0c                	jmp    c00086db <src_process+0x124>
c00086cf:	b8 06 00 00 00       	mov    eax,0x6
c00086d4:	eb 05                	jmp    c00086db <src_process+0x124>
c00086d6:	b8 10 00 00 00       	mov    eax,0x10
c00086db:	5a                   	pop    edx
c00086dc:	5b                   	pop    ebx
c00086dd:	5e                   	pop    esi
c00086de:	c3                   	ret    

c00086df <src_callback_read>:
c00086df:	55                   	push   ebp
c00086e0:	57                   	push   edi
c00086e1:	56                   	push   esi
c00086e2:	53                   	push   ebx
c00086e3:	83 ec 4c             	sub    esp,0x4c
c00086e6:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086ea:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086ee:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086f2:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086f6:	85 ff                	test   edi,edi
c00086f8:	0f 8e 36 01 00 00    	jle    c0008834 <src_callback_read+0x155>
c00086fe:	85 db                	test   ebx,ebx
c0008700:	0f 84 2e 01 00 00    	je     c0008834 <src_callback_read+0x155>
c0008706:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000870d:	74 0c                	je     c000871b <src_callback_read+0x3c>
c000870f:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008716:	e9 19 01 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000871b:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000871f:	75 0c                	jne    c000872d <src_callback_read+0x4e>
c0008721:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008728:	e9 07 01 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000872d:	51                   	push   ecx
c000872e:	6a 24                	push   0x24
c0008730:	6a 00                	push   0x0
c0008732:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008736:	50                   	push   eax
c0008737:	e8 7e 7f ff ff       	call   c00006ba <memset>
c000873c:	5e                   	pop    esi
c000873d:	5d                   	pop    ebp
c000873e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008746:	e8 a8 fd ff ff       	call   c00084f3 <is_bad_src_ratio>
c000874b:	83 c4 10             	add    esp,0x10
c000874e:	85 c0                	test   eax,eax
c0008750:	74 0c                	je     c000875e <src_callback_read+0x7f>
c0008752:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008759:	e9 d6 00 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000875e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008762:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008766:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000876a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000876e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008771:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008779:	31 f6                	xor    esi,esi
c000877b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000877e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008782:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008787:	75 30                	jne    c00087b9 <src_callback_read+0xda>
c0008789:	8d 44 24 14          	lea    eax,[esp+0x14]
c000878d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008791:	52                   	push   edx
c0008792:	52                   	push   edx
c0008793:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008797:	50                   	push   eax
c0008798:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000879b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000879e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00087a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087aa:	83 c4 10             	add    esp,0x10
c00087ad:	85 c0                	test   eax,eax
c00087af:	75 08                	jne    c00087b9 <src_callback_read+0xda>
c00087b1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087b9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087c0:	50                   	push   eax
c00087c1:	50                   	push   eax
c00087c2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087c6:	50                   	push   eax
c00087c7:	53                   	push   ebx
c00087c8:	e8 ea fd ff ff       	call   c00085b7 <src_process>
c00087cd:	83 c4 10             	add    esp,0x10
c00087d0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087d7:	85 c0                	test   eax,eax
c00087d9:	75 42                	jne    c000881d <src_callback_read+0x13e>
c00087db:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087df:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087e2:	89 e9                	mov    ecx,ebp
c00087e4:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087e8:	0f af ca             	imul   ecx,edx
c00087eb:	c1 e1 02             	shl    ecx,0x2
c00087ee:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087f2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087f6:	0f af d1             	imul   edx,ecx
c00087f9:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087fd:	c1 e2 02             	shl    edx,0x2
c0008800:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008804:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008807:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000880c:	75 04                	jne    c0008812 <src_callback_read+0x133>
c000880e:	85 c9                	test   ecx,ecx
c0008810:	74 0b                	je     c000881d <src_callback_read+0x13e>
c0008812:	39 d7                	cmp    edi,edx
c0008814:	7e 09                	jle    c000881f <src_callback_read+0x140>
c0008816:	89 d6                	mov    esi,edx
c0008818:	e9 65 ff ff ff       	jmp    c0008782 <src_callback_read+0xa3>
c000881d:	89 f2                	mov    edx,esi
c000881f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008823:	85 c0                	test   eax,eax
c0008825:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008828:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000882c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000882f:	74 05                	je     c0008836 <src_callback_read+0x157>
c0008831:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008834:	31 d2                	xor    edx,edx
c0008836:	83 c4 4c             	add    esp,0x4c
c0008839:	89 d0                	mov    eax,edx
c000883b:	5b                   	pop    ebx
c000883c:	5e                   	pop    esi
c000883d:	5f                   	pop    edi
c000883e:	5d                   	pop    ebp
c000883f:	c3                   	ret    

c0008840 <src_set_ratio>:
c0008840:	53                   	push   ebx
c0008841:	b8 02 00 00 00       	mov    eax,0x2
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000884d:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008851:	85 db                	test   ebx,ebx
c0008853:	74 33                	je     c0008888 <src_set_ratio+0x48>
c0008855:	b8 07 00 00 00       	mov    eax,0x7
c000885a:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000885e:	74 2c                	je     c000888c <src_set_ratio+0x4c>
c0008860:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008864:	74 2a                	je     c0008890 <src_set_ratio+0x50>
c0008866:	50                   	push   eax
c0008867:	50                   	push   eax
c0008868:	dd 14 24             	fst    QWORD PTR [esp]
c000886b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000886f:	e8 7f fc ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008874:	5a                   	pop    edx
c0008875:	85 c0                	test   eax,eax
c0008877:	59                   	pop    ecx
c0008878:	75 07                	jne    c0008881 <src_set_ratio+0x41>
c000887a:	dd 04 24             	fld    QWORD PTR [esp]
c000887d:	dd 1b                	fstp   QWORD PTR [ebx]
c000887f:	eb 11                	jmp    c0008892 <src_set_ratio+0x52>
c0008881:	b8 06 00 00 00       	mov    eax,0x6
c0008886:	eb 0a                	jmp    c0008892 <src_set_ratio+0x52>
c0008888:	dd d8                	fstp   st(0)
c000888a:	eb 06                	jmp    c0008892 <src_set_ratio+0x52>
c000888c:	dd d8                	fstp   st(0)
c000888e:	eb 02                	jmp    c0008892 <src_set_ratio+0x52>
c0008890:	dd d8                	fstp   st(0)
c0008892:	83 c4 08             	add    esp,0x8
c0008895:	5b                   	pop    ebx
c0008896:	c3                   	ret    

c0008897 <src_get_channels>:
c0008897:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000889b:	b8 02 00 00 00       	mov    eax,0x2
c00088a0:	85 d2                	test   edx,edx
c00088a2:	74 14                	je     c00088b8 <src_get_channels+0x21>
c00088a4:	b8 07 00 00 00       	mov    eax,0x7
c00088a9:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088ad:	74 09                	je     c00088b8 <src_get_channels+0x21>
c00088af:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088b3:	74 03                	je     c00088b8 <src_get_channels+0x21>
c00088b5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b8:	c3                   	ret    

c00088b9 <src_reset>:
c00088b9:	53                   	push   ebx
c00088ba:	b8 02 00 00 00       	mov    eax,0x2
c00088bf:	83 ec 08             	sub    esp,0x8
c00088c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c6:	85 db                	test   ebx,ebx
c00088c8:	74 2e                	je     c00088f8 <src_reset+0x3f>
c00088ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088cd:	85 c0                	test   eax,eax
c00088cf:	74 09                	je     c00088da <src_reset+0x21>
c00088d1:	83 ec 0c             	sub    esp,0xc
c00088d4:	53                   	push   ebx
c00088d5:	ff d0                	call   eax
c00088d7:	83 c4 10             	add    esp,0x10
c00088da:	d9 ee                	fldz   
c00088dc:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088e3:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088ed:	dd 1b                	fstp   QWORD PTR [ebx]
c00088ef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088f6:	31 c0                	xor    eax,eax
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	c3                   	ret    

c00088fd <src_new>:
c00088fd:	57                   	push   edi
c00088fe:	56                   	push   esi
c00088ff:	53                   	push   ebx
c0008900:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008904:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008908:	85 f6                	test   esi,esi
c000890a:	74 73                	je     c000897f <src_new+0x82>
c000890c:	85 ff                	test   edi,edi
c000890e:	7f 08                	jg     c0008918 <src_new+0x1b>
c0008910:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008916:	eb 1e                	jmp    c0008936 <src_new+0x39>
c0008918:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000891e:	50                   	push   eax
c000891f:	50                   	push   eax
c0008920:	6a 3c                	push   0x3c
c0008922:	6a 01                	push   0x1
c0008924:	e8 23 37 00 00       	call   c000c04c <calloc>
c0008929:	83 c4 10             	add    esp,0x10
c000892c:	89 c3                	mov    ebx,eax
c000892e:	85 c0                	test   eax,eax
c0008930:	75 10                	jne    c0008942 <src_new+0x45>
c0008932:	85 f6                	test   esi,esi
c0008934:	75 04                	jne    c000893a <src_new+0x3d>
c0008936:	31 db                	xor    ebx,ebx
c0008938:	eb 4b                	jmp    c0008985 <src_new+0x88>
c000893a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008940:	eb 43                	jmp    c0008985 <src_new+0x88>
c0008942:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008945:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000894c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008950:	e8 e2 fb ff ff       	call   c0008537 <psrc_set_converter>
c0008955:	85 c0                	test   eax,eax
c0008957:	74 18                	je     c0008971 <src_new+0x74>
c0008959:	85 f6                	test   esi,esi
c000895b:	74 06                	je     c0008963 <src_new+0x66>
c000895d:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008963:	83 ec 0c             	sub    esp,0xc
c0008966:	53                   	push   ebx
c0008967:	31 db                	xor    ebx,ebx
c0008969:	e8 be 36 00 00       	call   c000c02c <free>
c000896e:	83 c4 10             	add    esp,0x10
c0008971:	83 ec 0c             	sub    esp,0xc
c0008974:	53                   	push   ebx
c0008975:	e8 3f ff ff ff       	call   c00088b9 <src_reset>
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	eb 06                	jmp    c0008985 <src_new+0x88>
c000897f:	85 ff                	test   edi,edi
c0008981:	7f 9b                	jg     c000891e <src_new+0x21>
c0008983:	eb b1                	jmp    c0008936 <src_new+0x39>
c0008985:	89 d8                	mov    eax,ebx
c0008987:	5b                   	pop    ebx
c0008988:	5e                   	pop    esi
c0008989:	5f                   	pop    edi
c000898a:	c3                   	ret    

c000898b <src_callback_new>:
c000898b:	56                   	push   esi
c000898c:	53                   	push   ebx
c000898d:	53                   	push   ebx
c000898e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008996:	85 f6                	test   esi,esi
c0008998:	75 0e                	jne    c00089a8 <src_callback_new+0x1d>
c000899a:	31 db                	xor    ebx,ebx
c000899c:	85 c0                	test   eax,eax
c000899e:	74 47                	je     c00089e7 <src_callback_new+0x5c>
c00089a0:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089a6:	eb 3f                	jmp    c00089e7 <src_callback_new+0x5c>
c00089a8:	85 c0                	test   eax,eax
c00089aa:	74 06                	je     c00089b2 <src_callback_new+0x27>
c00089ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089b2:	51                   	push   ecx
c00089b3:	50                   	push   eax
c00089b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089bc:	e8 3c ff ff ff       	call   c00088fd <src_new>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	89 c3                	mov    ebx,eax
c00089c6:	85 c0                	test   eax,eax
c00089c8:	74 1d                	je     c00089e7 <src_callback_new+0x5c>
c00089ca:	83 ec 0c             	sub    esp,0xc
c00089cd:	50                   	push   eax
c00089ce:	e8 e6 fe ff ff       	call   c00088b9 <src_reset>
c00089d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089d7:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089de:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089e1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089e4:	83 c4 10             	add    esp,0x10
c00089e7:	89 d8                	mov    eax,ebx
c00089e9:	5a                   	pop    edx
c00089ea:	5b                   	pop    ebx
c00089eb:	5e                   	pop    esi
c00089ec:	c3                   	ret    

c00089ed <src_get_name>:
c00089ed:	53                   	push   ebx
c00089ee:	83 ec 14             	sub    esp,0x14
c00089f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089f5:	53                   	push   ebx
c00089f6:	e8 59 1f 00 00       	call   c000a954 <sinc_get_name>
c00089fb:	83 c4 10             	add    esp,0x10
c00089fe:	85 c0                	test   eax,eax
c0008a00:	75 1d                	jne    c0008a1f <src_get_name+0x32>
c0008a02:	83 ec 0c             	sub    esp,0xc
c0008a05:	53                   	push   ebx
c0008a06:	e8 60 23 00 00       	call   c000ad6b <zoh_get_name>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	85 c0                	test   eax,eax
c0008a10:	75 0d                	jne    c0008a1f <src_get_name+0x32>
c0008a12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a16:	83 c4 08             	add    esp,0x8
c0008a19:	5b                   	pop    ebx
c0008a1a:	e9 3a 05 00 00       	jmp    c0008f59 <linear_get_name>
c0008a1f:	83 c4 08             	add    esp,0x8
c0008a22:	5b                   	pop    ebx
c0008a23:	c3                   	ret    

c0008a24 <src_get_description>:
c0008a24:	53                   	push   ebx
c0008a25:	83 ec 14             	sub    esp,0x14
c0008a28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 35 1f 00 00       	call   c000a967 <sinc_get_description>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 1d                	jne    c0008a56 <src_get_description+0x32>
c0008a39:	83 ec 0c             	sub    esp,0xc
c0008a3c:	53                   	push   ebx
c0008a3d:	e8 38 23 00 00       	call   c000ad7a <zoh_get_description>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	85 c0                	test   eax,eax
c0008a47:	75 0d                	jne    c0008a56 <src_get_description+0x32>
c0008a49:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a4d:	83 c4 08             	add    esp,0x8
c0008a50:	5b                   	pop    ebx
c0008a51:	e9 12 05 00 00       	jmp    c0008f68 <linear_get_description>
c0008a56:	83 c4 08             	add    esp,0x8
c0008a59:	5b                   	pop    ebx
c0008a5a:	c3                   	ret    

c0008a5b <src_get_version>:
c0008a5b:	b8 60 06 02 c0       	mov    eax,0xc0020660
c0008a60:	c3                   	ret    

c0008a61 <src_is_valid_ratio>:
c0008a61:	50                   	push   eax
c0008a62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a6a:	e8 84 fa ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008a6f:	85 c0                	test   eax,eax
c0008a71:	0f 94 c0             	sete   al
c0008a74:	83 c4 0c             	add    esp,0xc
c0008a77:	0f b6 c0             	movzx  eax,al
c0008a7a:	c3                   	ret    

c0008a7b <src_error>:
c0008a7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a7f:	31 c0                	xor    eax,eax
c0008a81:	85 d2                	test   edx,edx
c0008a83:	74 03                	je     c0008a88 <src_error+0xd>
c0008a85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a88:	c3                   	ret    

c0008a89 <src_strerror>:
c0008a89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a8d:	31 c0                	xor    eax,eax
c0008a8f:	83 fa 17             	cmp    edx,0x17
c0008a92:	77 07                	ja     c0008a9b <src_strerror+0x12>
c0008a94:	8b 04 95 c0 0a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf540]
c0008a9b:	c3                   	ret    

c0008a9c <src_simple>:
c0008a9c:	56                   	push   esi
c0008a9d:	53                   	push   ebx
c0008a9e:	83 ec 18             	sub    esp,0x18
c0008aa1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008aa5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008aa9:	50                   	push   eax
c0008aaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ab2:	e8 46 fe ff ff       	call   c00088fd <src_new>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	85 c0                	test   eax,eax
c0008abc:	75 06                	jne    c0008ac4 <src_simple+0x28>
c0008abe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ac2:	eb 25                	jmp    c0008ae9 <src_simple+0x4d>
c0008ac4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008acb:	89 c3                	mov    ebx,eax
c0008acd:	50                   	push   eax
c0008ace:	50                   	push   eax
c0008acf:	56                   	push   esi
c0008ad0:	53                   	push   ebx
c0008ad1:	e8 e1 fa ff ff       	call   c00085b7 <src_process>
c0008ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ad9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008add:	e8 99 fa ff ff       	call   c000857b <src_delete>
c0008ae2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ae6:	83 c4 10             	add    esp,0x10
c0008ae9:	83 c4 14             	add    esp,0x14
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    

c0008aef <src_short_to_float_array>:
c0008aef:	83 ec 0c             	sub    esp,0xc
c0008af2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008af6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008afe:	85 c0                	test   eax,eax
c0008b00:	74 0f                	je     c0008b11 <src_short_to_float_array+0x22>
c0008b02:	48                   	dec    eax
c0008b03:	d9 05 44 0b 02 c0    	fld    DWORD PTR ds:0xc0020b44
c0008b09:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b0c:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b0f:	eb ed                	jmp    c0008afe <src_short_to_float_array+0xf>
c0008b11:	83 c4 0c             	add    esp,0xc
c0008b14:	c3                   	ret    

c0008b15 <src_float_to_short_array>:
c0008b15:	56                   	push   esi
c0008b16:	53                   	push   ebx
c0008b17:	52                   	push   edx
c0008b18:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b20:	85 db                	test   ebx,ebx
c0008b22:	74 51                	je     c0008b75 <src_float_to_short_array+0x60>
c0008b24:	4b                   	dec    ebx
c0008b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b29:	d9 05 48 0b 02 c0    	fld    DWORD PTR ds:0xc0020b48
c0008b2f:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b32:	dc 15 38 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b38
c0008b38:	df e0                	fnstsw ax
c0008b3a:	9e                   	sahf   
c0008b3b:	72 0a                	jb     c0008b47 <src_float_to_short_array+0x32>
c0008b3d:	dd d8                	fstp   st(0)
c0008b3f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b45:	eb d9                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b47:	d9 05 4c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b4c
c0008b4d:	d8 d9                	fcomp  st(1)
c0008b4f:	df e0                	fnstsw ax
c0008b51:	9e                   	sahf   
c0008b52:	72 0a                	jb     c0008b5e <src_float_to_short_array+0x49>
c0008b54:	dd d8                	fstp   st(0)
c0008b56:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b5c:	eb c2                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b5e:	83 ec 10             	sub    esp,0x10
c0008b61:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b64:	e8 87 68 01 00       	call   c001f3f0 <lrint>
c0008b69:	83 c4 10             	add    esp,0x10
c0008b6c:	c1 f8 10             	sar    eax,0x10
c0008b6f:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b73:	eb ab                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b75:	58                   	pop    eax
c0008b76:	5b                   	pop    ebx
c0008b77:	5e                   	pop    esi
c0008b78:	c3                   	ret    

c0008b79 <src_int_to_float_array>:
c0008b79:	83 ec 0c             	sub    esp,0xc
c0008b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b88:	85 c0                	test   eax,eax
c0008b8a:	74 0f                	je     c0008b9b <src_int_to_float_array+0x22>
c0008b8c:	48                   	dec    eax
c0008b8d:	d9 05 50 0b 02 c0    	fld    DWORD PTR ds:0xc0020b50
c0008b93:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b96:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b99:	eb ed                	jmp    c0008b88 <src_int_to_float_array+0xf>
c0008b9b:	83 c4 0c             	add    esp,0xc
c0008b9e:	c3                   	ret    

c0008b9f <src_float_to_int_array>:
c0008b9f:	56                   	push   esi
c0008ba0:	53                   	push   ebx
c0008ba1:	52                   	push   edx
c0008ba2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ba6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008baa:	85 db                	test   ebx,ebx
c0008bac:	74 4f                	je     c0008bfd <src_float_to_int_array+0x5e>
c0008bae:	4b                   	dec    ebx
c0008baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb3:	d9 05 48 0b 02 c0    	fld    DWORD PTR ds:0xc0020b48
c0008bb9:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bbc:	dc 15 38 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b38
c0008bc2:	df e0                	fnstsw ax
c0008bc4:	9e                   	sahf   
c0008bc5:	72 0b                	jb     c0008bd2 <src_float_to_int_array+0x33>
c0008bc7:	dd d8                	fstp   st(0)
c0008bc9:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bd0:	eb d8                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bd2:	d9 05 4c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b4c
c0008bd8:	d8 d9                	fcomp  st(1)
c0008bda:	df e0                	fnstsw ax
c0008bdc:	9e                   	sahf   
c0008bdd:	72 0b                	jb     c0008bea <src_float_to_int_array+0x4b>
c0008bdf:	dd d8                	fstp   st(0)
c0008be1:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008be8:	eb c0                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bea:	83 ec 10             	sub    esp,0x10
c0008bed:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bf0:	e8 fb 67 01 00       	call   c001f3f0 <lrint>
c0008bf5:	83 c4 10             	add    esp,0x10
c0008bf8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bfb:	eb ad                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bfd:	58                   	pop    eax
c0008bfe:	5b                   	pop    ebx
c0008bff:	5e                   	pop    esi
c0008c00:	c3                   	ret    

c0008c01 <is_bad_src_ratio>:
c0008c01:	83 ec 0c             	sub    esp,0xc
c0008c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c13:	dd 04 24             	fld    QWORD PTR [esp]
c0008c16:	dd 05 20 0b 02 c0    	fld    QWORD PTR ds:0xc0020b20
c0008c1c:	de d9                	fcompp 
c0008c1e:	df e0                	fnstsw ax
c0008c20:	f6 c4 45             	test   ah,0x45
c0008c23:	74 10                	je     c0008c35 <is_bad_src_ratio+0x34>
c0008c25:	dd 04 24             	fld    QWORD PTR [esp]
c0008c28:	dc 1d 28 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b28
c0008c2e:	df e0                	fnstsw ax
c0008c30:	f6 c4 45             	test   ah,0x45
c0008c33:	75 07                	jne    c0008c3c <is_bad_src_ratio+0x3b>
c0008c35:	b8 01 00 00 00       	mov    eax,0x1
c0008c3a:	eb 05                	jmp    c0008c41 <is_bad_src_ratio+0x40>
c0008c3c:	b8 00 00 00 00       	mov    eax,0x0
c0008c41:	83 c4 0c             	add    esp,0xc
c0008c44:	c3                   	ret    

c0008c45 <fmod_one>:
c0008c45:	83 ec 2c             	sub    esp,0x2c
c0008c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c58:	83 ec 08             	sub    esp,0x8
c0008c5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c63:	e8 88 67 01 00       	call   c001f3f0 <lrint>
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c6f:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c73:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c77:	de e1                	fsubrp st(1),st
c0008c79:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c7d:	d9 ee                	fldz   
c0008c7f:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c83:	df e0                	fnstsw ax
c0008c85:	f6 c4 45             	test   ah,0x45
c0008c88:	75 0a                	jne    c0008c94 <fmod_one+0x4f>
c0008c8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c8e:	d9 e8                	fld1   
c0008c90:	de c1                	faddp  st(1),st
c0008c92:	eb 04                	jmp    c0008c98 <fmod_one+0x53>
c0008c94:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c98:	83 c4 2c             	add    esp,0x2c
c0008c9b:	c3                   	ret    

c0008c9c <linear_vari_process>:
c0008c9c:	55                   	push   ebp
c0008c9d:	57                   	push   edi
c0008c9e:	56                   	push   esi
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 2c             	sub    esp,0x2c
c0008ca3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008ca7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008cab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cb3:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008cb7:	0f 8e 5e 02 00 00    	jle    c0008f1b <linear_vari_process+0x27f>
c0008cbd:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cc0:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cc8:	85 db                	test   ebx,ebx
c0008cca:	0f 84 4b 02 00 00    	je     c0008f1b <linear_vari_process+0x27f>
c0008cd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cd3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cd7:	74 19                	je     c0008cf2 <linear_vari_process+0x56>
c0008cd9:	31 d2                	xor    edx,edx
c0008cdb:	39 c2                	cmp    edx,eax
c0008cdd:	7d 0c                	jge    c0008ceb <linear_vari_process+0x4f>
c0008cdf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ce1:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ce4:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ce8:	42                   	inc    edx
c0008ce9:	eb f0                	jmp    c0008cdb <linear_vari_process+0x3f>
c0008ceb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cf2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cf5:	0f af d0             	imul   edx,eax
c0008cf8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cfb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cff:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d06:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d09:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d10:	dd 07                	fld    QWORD PTR [edi]
c0008d12:	dd 14 24             	fst    QWORD PTR [esp]
c0008d15:	50                   	push   eax
c0008d16:	50                   	push   eax
c0008d17:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d1a:	e8 e2 fe ff ff       	call   c0008c01 <is_bad_src_ratio>
c0008d1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d23:	5a                   	pop    edx
c0008d24:	59                   	pop    ecx
c0008d25:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d2a:	0f 85 e3 01 00 00    	jne    c0008f13 <linear_vari_process+0x277>
c0008d30:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d33:	d9 e8                	fld1   
c0008d35:	d8 d1                	fcom   st(1)
c0008d37:	df e0                	fnstsw ax
c0008d39:	9e                   	sahf   
c0008d3a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d3e:	0f 86 99 00 00 00    	jbe    c0008ddd <linear_vari_process+0x141>
c0008d44:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d47:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d4a:	0f 8d 8d 00 00 00    	jge    c0008ddd <linear_vari_process+0x141>
c0008d50:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d54:	d8 c1                	fadd   st,st(1)
c0008d56:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d59:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d5c:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d5f:	df e0                	fnstsw ax
c0008d61:	9e                   	sahf   
c0008d62:	73 79                	jae    c0008ddd <linear_vari_process+0x141>
c0008d64:	85 d2                	test   edx,edx
c0008d66:	7e 38                	jle    c0008da0 <linear_vari_process+0x104>
c0008d68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d6c:	83 ec 10             	sub    esp,0x10
c0008d6f:	dd 07                	fld    QWORD PTR [edi]
c0008d71:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d77:	e8 54 66 01 00       	call   c001f3d0 <fabs>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	dc 1d 98 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b98
c0008d85:	df e0                	fnstsw ax
c0008d87:	9e                   	sahf   
c0008d88:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d8c:	76 12                	jbe    c0008da0 <linear_vari_process+0x104>
c0008d8e:	dd 07                	fld    QWORD PTR [edi]
c0008d90:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d93:	d8 e1                	fsub   st,st(1)
c0008d95:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d98:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d9b:	de c1                	faddp  st(1),st
c0008d9d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da0:	31 c0                	xor    eax,eax
c0008da2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008da5:	7e 1f                	jle    c0008dc6 <linear_vari_process+0x12a>
c0008da7:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008dab:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008dad:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008db0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008db4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008db7:	d8 e1                	fsub   st,st(1)
c0008db9:	40                   	inc    eax
c0008dba:	d8 ca                	fmul   st,st(2)
c0008dbc:	de c1                	faddp  st(1),st
c0008dbe:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dc1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dc4:	eb dc                	jmp    c0008da2 <linear_vari_process+0x106>
c0008dc6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dca:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dcd:	de c1                	faddp  st(1),st
c0008dcf:	e9 5f ff ff ff       	jmp    c0008d33 <linear_vari_process+0x97>
c0008dd4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dd8:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008ddb:	de c1                	faddp  st(1),st
c0008ddd:	83 ec 10             	sub    esp,0x10
c0008de0:	dd 14 24             	fst    QWORD PTR [esp]
c0008de3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de7:	e8 59 fe ff ff       	call   c0008c45 <fmod_one>
c0008dec:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008def:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008df3:	d8 e1                	fsub   st,st(1)
c0008df5:	d9 c9                	fxch   st(1)
c0008df7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dfb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dfe:	e8 ed 65 01 00       	call   c001f3f0 <lrint>
c0008e03:	83 c4 10             	add    esp,0x10
c0008e06:	0f af e8             	imul   ebp,eax
c0008e09:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e0d:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e10:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e13:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e16:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e19:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e1c:	0f 8d 97 00 00 00    	jge    c0008eb9 <linear_vari_process+0x21d>
c0008e22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e26:	d9 c0                	fld    st(0)
c0008e28:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e2b:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e2f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e33:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e37:	de d9                	fcompp 
c0008e39:	df e0                	fnstsw ax
c0008e3b:	9e                   	sahf   
c0008e3c:	76 7b                	jbe    c0008eb9 <linear_vari_process+0x21d>
c0008e3e:	85 ed                	test   ebp,ebp
c0008e40:	7e 38                	jle    c0008e7a <linear_vari_process+0x1de>
c0008e42:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e46:	83 ec 10             	sub    esp,0x10
c0008e49:	dd 07                	fld    QWORD PTR [edi]
c0008e4b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e4e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e51:	e8 7a 65 01 00       	call   c001f3d0 <fabs>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	dc 1d 98 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b98
c0008e5f:	df e0                	fnstsw ax
c0008e61:	9e                   	sahf   
c0008e62:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e66:	76 12                	jbe    c0008e7a <linear_vari_process+0x1de>
c0008e68:	dd 07                	fld    QWORD PTR [edi]
c0008e6a:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e6d:	d8 e1                	fsub   st,st(1)
c0008e6f:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e72:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e75:	de c1                	faddp  st(1),st
c0008e77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e7a:	31 c0                	xor    eax,eax
c0008e7c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e7f:	39 c2                	cmp    edx,eax
c0008e81:	0f 8e 4d ff ff ff    	jle    c0008dd4 <linear_vari_process+0x138>
c0008e87:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e8c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e90:	89 e9                	mov    ecx,ebp
c0008e92:	01 c5                	add    ebp,eax
c0008e94:	29 d1                	sub    ecx,edx
c0008e96:	89 ca                	mov    edx,ecx
c0008e98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e9c:	01 c2                	add    edx,eax
c0008e9e:	40                   	inc    eax
c0008e9f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ea2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ea5:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008ea8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008eab:	d8 e1                	fsub   st,st(1)
c0008ead:	d8 ca                	fmul   st,st(2)
c0008eaf:	de c1                	faddp  st(1),st
c0008eb1:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008eb4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008eb7:	eb c3                	jmp    c0008e7c <linear_vari_process+0x1e0>
c0008eb9:	39 d1                	cmp    ecx,edx
c0008ebb:	7d 13                	jge    c0008ed0 <linear_vari_process+0x234>
c0008ebd:	89 d0                	mov    eax,edx
c0008ebf:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ec2:	29 c8                	sub    eax,ecx
c0008ec4:	99                   	cdq    
c0008ec5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ecc:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ed0:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ed3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ed6:	85 c0                	test   eax,eax
c0008ed8:	7f 1b                	jg     c0008ef5 <linear_vari_process+0x259>
c0008eda:	dd 04 24             	fld    QWORD PTR [esp]
c0008edd:	dd 1f                	fstp   QWORD PTR [edi]
c0008edf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ee2:	99                   	cdq    
c0008ee3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ee9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008eec:	99                   	cdq    
c0008eed:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ef0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ef3:	eb 26                	jmp    c0008f1b <linear_vari_process+0x27f>
c0008ef5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ef8:	31 d2                	xor    edx,edx
c0008efa:	29 c8                	sub    eax,ecx
c0008efc:	c1 e0 02             	shl    eax,0x2
c0008eff:	39 d1                	cmp    ecx,edx
c0008f01:	7e d7                	jle    c0008eda <linear_vari_process+0x23e>
c0008f03:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f05:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f09:	83 c0 04             	add    eax,0x4
c0008f0c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f10:	42                   	inc    edx
c0008f11:	eb ec                	jmp    c0008eff <linear_vari_process+0x263>
c0008f13:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f1f:	83 c4 2c             	add    esp,0x2c
c0008f22:	5b                   	pop    ebx
c0008f23:	5e                   	pop    esi
c0008f24:	5f                   	pop    edi
c0008f25:	5d                   	pop    ebp
c0008f26:	c3                   	ret    

c0008f27 <linear_reset>:
c0008f27:	83 ec 0c             	sub    esp,0xc
c0008f2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f2e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f31:	85 c0                	test   eax,eax
c0008f33:	74 20                	je     c0008f55 <linear_reset+0x2e>
c0008f35:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f38:	83 c0 1c             	add    eax,0x1c
c0008f3b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008f3e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008f45:	c1 e2 02             	shl    edx,0x2
c0008f48:	51                   	push   ecx
c0008f49:	52                   	push   edx
c0008f4a:	6a 00                	push   0x0
c0008f4c:	50                   	push   eax
c0008f4d:	e8 68 77 ff ff       	call   c00006ba <memset>
c0008f52:	83 c4 10             	add    esp,0x10
c0008f55:	83 c4 0c             	add    esp,0xc
c0008f58:	c3                   	ret    

c0008f59 <linear_get_name>:
c0008f59:	31 c0                	xor    eax,eax
c0008f5b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f60:	75 05                	jne    c0008f67 <linear_get_name+0xe>
c0008f62:	b8 54 0b 02 c0       	mov    eax,0xc0020b54
c0008f67:	c3                   	ret    

c0008f68 <linear_get_description>:
c0008f68:	31 c0                	xor    eax,eax
c0008f6a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f6f:	75 05                	jne    c0008f76 <linear_get_description+0xe>
c0008f71:	b8 68 0b 02 c0       	mov    eax,0xc0020b68
c0008f76:	c3                   	ret    

c0008f77 <linear_set_converter>:
c0008f77:	53                   	push   ebx
c0008f78:	b8 0a 00 00 00       	mov    eax,0xa
c0008f7d:	83 ec 08             	sub    esp,0x8
c0008f80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f84:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f89:	75 6e                	jne    c0008ff9 <linear_set_converter+0x82>
c0008f8b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f8e:	85 c0                	test   eax,eax
c0008f90:	74 13                	je     c0008fa5 <linear_set_converter+0x2e>
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	50                   	push   eax
c0008f96:	e8 91 30 00 00       	call   c000c02c <free>
c0008f9b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008faa:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fb1:	50                   	push   eax
c0008fb2:	6a 01                	push   0x1
c0008fb4:	e8 93 30 00 00       	call   c000c04c <calloc>
c0008fb9:	83 c4 10             	add    esp,0x10
c0008fbc:	89 c2                	mov    edx,eax
c0008fbe:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fc1:	85 d2                	test   edx,edx
c0008fc3:	b8 01 00 00 00       	mov    eax,0x1
c0008fc8:	74 2f                	je     c0008ff9 <linear_set_converter+0x82>
c0008fca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fcd:	83 ec 0c             	sub    esp,0xc
c0008fd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fd3:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fd9:	c7 43 24 9c 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c9c
c0008fe0:	c7 43 20 9c 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c9c
c0008fe7:	c7 43 28 27 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f27
c0008fee:	53                   	push   ebx
c0008fef:	e8 33 ff ff ff       	call   c0008f27 <linear_reset>
c0008ff4:	83 c4 10             	add    esp,0x10
c0008ff7:	31 c0                	xor    eax,eax
c0008ff9:	83 c4 08             	add    esp,0x8
c0008ffc:	5b                   	pop    ebx
c0008ffd:	c3                   	ret    

c0008ffe <is_bad_src_ratio>:
c0008ffe:	83 ec 0c             	sub    esp,0xc
c0009001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009005:	89 04 24             	mov    DWORD PTR [esp],eax
c0009008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000900c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009010:	dd 04 24             	fld    QWORD PTR [esp]
c0009013:	dd 05 20 0b 02 c0    	fld    QWORD PTR ds:0xc0020b20
c0009019:	de d9                	fcompp 
c000901b:	df e0                	fnstsw ax
c000901d:	f6 c4 45             	test   ah,0x45
c0009020:	74 10                	je     c0009032 <is_bad_src_ratio+0x34>
c0009022:	dd 04 24             	fld    QWORD PTR [esp]
c0009025:	dc 1d 28 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b28
c000902b:	df e0                	fnstsw ax
c000902d:	f6 c4 45             	test   ah,0x45
c0009030:	75 07                	jne    c0009039 <is_bad_src_ratio+0x3b>
c0009032:	b8 01 00 00 00       	mov    eax,0x1
c0009037:	eb 05                	jmp    c000903e <is_bad_src_ratio+0x40>
c0009039:	b8 00 00 00 00       	mov    eax,0x0
c000903e:	83 c4 0c             	add    esp,0xc
c0009041:	c3                   	ret    

c0009042 <int_to_fp>:
c0009042:	c1 e0 0c             	shl    eax,0xc
c0009045:	c3                   	ret    

c0009046 <fp_to_int>:
c0009046:	c1 f8 0c             	sar    eax,0xc
c0009049:	c3                   	ret    

c000904a <fp_fraction_part>:
c000904a:	25 ff 0f 00 00       	and    eax,0xfff
c000904f:	c3                   	ret    

c0009050 <fp_to_double>:
c0009050:	83 ec 0c             	sub    esp,0xc
c0009053:	e8 f2 ff ff ff       	call   c000904a <fp_fraction_part>
c0009058:	d9 05 28 0d 02 c0    	fld    DWORD PTR ds:0xc0020d28
c000905e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009062:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009066:	83 c4 0c             	add    esp,0xc
c0009069:	c3                   	ret    

c000906a <calc_output_single>:
c000906a:	55                   	push   ebp
c000906b:	57                   	push   edi
c000906c:	89 c7                	mov    edi,eax
c000906e:	56                   	push   esi
c000906f:	53                   	push   ebx
c0009070:	89 d3                	mov    ebx,edx
c0009072:	83 ec 24             	sub    esp,0x24
c0009075:	89 de                	mov    esi,ebx
c0009077:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000907a:	e8 c3 ff ff ff       	call   c0009042 <int_to_fp>
c000907f:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009082:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009086:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000908d:	29 c8                	sub    eax,ecx
c000908f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009097:	99                   	cdq    
c0009098:	f7 fb                	idiv   ebx
c000909a:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000909d:	0f af f0             	imul   esi,eax
c00090a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090a4:	01 ce                	add    esi,ecx
c00090a6:	29 c2                	sub    edx,eax
c00090a8:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ab:	89 f0                	mov    eax,esi
c00090ad:	e8 9e ff ff ff       	call   c0009050 <fp_to_double>
c00090b2:	89 f0                	mov    eax,esi
c00090b4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090b8:	e8 89 ff ff ff       	call   c0009046 <fp_to_int>
c00090bd:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090c1:	83 c2 04             	add    edx,0x4
c00090c4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090c8:	d8 e1                	fsub   st,st(1)
c00090ca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090ce:	de c9                	fmulp  st(1),st
c00090d0:	de c1                	faddp  st(1),st
c00090d2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090d8:	29 de                	sub    esi,ebx
c00090da:	dc 04 24             	fadd   QWORD PTR [esp]
c00090dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e0:	79 c9                	jns    c00090ab <calc_output_single+0x41>
c00090e2:	89 d8                	mov    eax,ebx
c00090e4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090e8:	29 c8                	sub    eax,ecx
c00090ea:	d9 ee                	fldz   
c00090ec:	89 c1                	mov    ecx,eax
c00090ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f2:	29 c8                	sub    eax,ecx
c00090f4:	99                   	cdq    
c00090f5:	f7 fb                	idiv   ebx
c00090f7:	89 da                	mov    edx,ebx
c00090f9:	0f af d0             	imul   edx,eax
c00090fc:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c0009100:	01 d1                	add    ecx,edx
c0009102:	8d 14 87             	lea    edx,[edi+eax*4]
c0009105:	89 c8                	mov    eax,ecx
c0009107:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000910b:	e8 40 ff ff ff       	call   c0009050 <fp_to_double>
c0009110:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009114:	89 c8                	mov    eax,ecx
c0009116:	e8 2b ff ff ff       	call   c0009046 <fp_to_int>
c000911b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000911f:	29 d9                	sub    ecx,ebx
c0009121:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009125:	83 ea 04             	sub    edx,0x4
c0009128:	d8 e1                	fsub   st,st(1)
c000912a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000912e:	de c9                	fmulp  st(1),st
c0009130:	de c1                	faddp  st(1),st
c0009132:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009138:	85 c9                	test   ecx,ecx
c000913a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000913e:	de c1                	faddp  st(1),st
c0009140:	7f c3                	jg     c0009105 <calc_output_single+0x9b>
c0009142:	dd 04 24             	fld    QWORD PTR [esp]
c0009145:	83 c4 24             	add    esp,0x24
c0009148:	de c1                	faddp  st(1),st
c000914a:	5b                   	pop    ebx
c000914b:	5e                   	pop    esi
c000914c:	5f                   	pop    edi
c000914d:	5d                   	pop    ebp
c000914e:	c3                   	ret    

c000914f <calc_output_stereo>:
c000914f:	55                   	push   ebp
c0009150:	57                   	push   edi
c0009151:	89 c7                	mov    edi,eax
c0009153:	56                   	push   esi
c0009154:	53                   	push   ebx
c0009155:	89 d3                	mov    ebx,edx
c0009157:	83 ec 44             	sub    esp,0x44
c000915a:	89 de                	mov    esi,ebx
c000915c:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009160:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009163:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009167:	e8 d6 fe ff ff       	call   c0009042 <int_to_fp>
c000916c:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	d9 ee                	fldz   
c0009175:	29 c8                	sub    eax,ecx
c0009177:	dd 14 24             	fst    QWORD PTR [esp]
c000917a:	99                   	cdq    
c000917b:	f7 fb                	idiv   ebx
c000917d:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009180:	0f af f0             	imul   esi,eax
c0009183:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009187:	01 ce                	add    esi,ecx
c0009189:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000918c:	0f af c2             	imul   eax,edx
c000918f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009193:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009197:	29 c2                	sub    edx,eax
c0009199:	8d 14 97             	lea    edx,[edi+edx*4]
c000919c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091a0:	89 f0                	mov    eax,esi
c00091a2:	e8 a9 fe ff ff       	call   c0009050 <fp_to_double>
c00091a7:	89 f0                	mov    eax,esi
c00091a9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00091ad:	e8 94 fe ff ff       	call   c0009046 <fp_to_int>
c00091b2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091b6:	83 c2 08             	add    edx,0x8
c00091b9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091bd:	d8 e1                	fsub   st,st(1)
c00091bf:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091c3:	de c9                	fmulp  st(1),st
c00091c5:	de c1                	faddp  st(1),st
c00091c7:	d9 c0                	fld    st(0)
c00091c9:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091cf:	dc 04 24             	fadd   QWORD PTR [esp]
c00091d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d5:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091db:	29 de                	sub    esi,ebx
c00091dd:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091e1:	de c1                	faddp  st(1),st
c00091e3:	79 b7                	jns    c000919c <calc_output_stereo+0x4d>
c00091e5:	89 d8                	mov    eax,ebx
c00091e7:	d9 ee                	fldz   
c00091e9:	d9 ee                	fldz   
c00091eb:	29 c8                	sub    eax,ecx
c00091ed:	89 c1                	mov    ecx,eax
c00091ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091f3:	29 c8                	sub    eax,ecx
c00091f5:	99                   	cdq    
c00091f6:	f7 fb                	idiv   ebx
c00091f8:	89 da                	mov    edx,ebx
c00091fa:	0f af d0             	imul   edx,eax
c00091fd:	40                   	inc    eax
c00091fe:	01 d1                	add    ecx,edx
c0009200:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009205:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009209:	8d 14 87             	lea    edx,[edi+eax*4]
c000920c:	eb 04                	jmp    c0009212 <calc_output_stereo+0xc3>
c000920e:	d9 ca                	fxch   st(2)
c0009210:	d9 c9                	fxch   st(1)
c0009212:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009216:	d9 c9                	fxch   st(1)
c0009218:	89 c8                	mov    eax,ecx
c000921a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000921e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009222:	e8 29 fe ff ff       	call   c0009050 <fp_to_double>
c0009227:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000922b:	89 c8                	mov    eax,ecx
c000922d:	e8 14 fe ff ff       	call   c0009046 <fp_to_int>
c0009232:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009236:	29 d9                	sub    ecx,ebx
c0009238:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000923c:	83 ea 08             	sub    edx,0x8
c000923f:	d8 e1                	fsub   st,st(1)
c0009241:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009245:	de c9                	fmulp  st(1),st
c0009247:	de c1                	faddp  st(1),st
c0009249:	d9 c0                	fld    st(0)
c000924b:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009251:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009255:	de c1                	faddp  st(1),st
c0009257:	d9 c9                	fxch   st(1)
c0009259:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000925f:	85 c9                	test   ecx,ecx
c0009261:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009265:	de c1                	faddp  st(1),st
c0009267:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000926b:	7f a1                	jg     c000920e <calc_output_stereo+0xbf>
c000926d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009271:	dd 04 24             	fld    QWORD PTR [esp]
c0009274:	de c3                	faddp  st(3),st
c0009276:	d9 ca                	fxch   st(2)
c0009278:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000927c:	d9 18                	fstp   DWORD PTR [eax]
c000927e:	de c1                	faddp  st(1),st
c0009280:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c0009284:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009287:	83 c4 44             	add    esp,0x44
c000928a:	5b                   	pop    ebx
c000928b:	5e                   	pop    esi
c000928c:	5f                   	pop    edi
c000928d:	5d                   	pop    ebp
c000928e:	c3                   	ret    

c000928f <calc_output_quad>:
c000928f:	55                   	push   ebp
c0009290:	57                   	push   edi
c0009291:	56                   	push   esi
c0009292:	89 c6                	mov    esi,eax
c0009294:	53                   	push   ebx
c0009295:	89 d3                	mov    ebx,edx
c0009297:	83 ec 5c             	sub    esp,0x5c
c000929a:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000929e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092a4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092a8:	e8 95 fd ff ff       	call   c0009042 <int_to_fp>
c00092ad:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092b0:	d9 ee                	fldz   
c00092b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092b6:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092ba:	29 c8                	sub    eax,ecx
c00092bc:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c0:	99                   	cdq    
c00092c1:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092c5:	f7 fb                	idiv   ebx
c00092c7:	89 da                	mov    edx,ebx
c00092c9:	0f af d0             	imul   edx,eax
c00092cc:	01 ca                	add    edx,ecx
c00092ce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092d2:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092d9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092dc:	0f af c2             	imul   eax,edx
c00092df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092e7:	29 c2                	sub    edx,eax
c00092e9:	8d 14 96             	lea    edx,[esi+edx*4]
c00092ec:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f4:	e8 57 fd ff ff       	call   c0009050 <fp_to_double>
c00092f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092fd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009301:	e8 40 fd ff ff       	call   c0009046 <fp_to_int>
c0009306:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000930a:	83 c2 10             	add    edx,0x10
c000930d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009311:	d8 e1                	fsub   st,st(1)
c0009313:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009317:	de c9                	fmulp  st(1),st
c0009319:	de c1                	faddp  st(1),st
c000931b:	d9 c0                	fld    st(0)
c000931d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009323:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009327:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000932b:	d9 c0                	fld    st(0)
c000932d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009333:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009337:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000933b:	d9 c0                	fld    st(0)
c000933d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009343:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009347:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000934b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009351:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009355:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009359:	de c1                	faddp  st(1),st
c000935b:	79 8f                	jns    c00092ec <calc_output_quad+0x5d>
c000935d:	89 d8                	mov    eax,ebx
c000935f:	d9 ee                	fldz   
c0009361:	29 c8                	sub    eax,ecx
c0009363:	d9 ee                	fldz   
c0009365:	89 c1                	mov    ecx,eax
c0009367:	d9 ee                	fldz   
c0009369:	d9 ee                	fldz   
c000936b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000936f:	29 c8                	sub    eax,ecx
c0009371:	99                   	cdq    
c0009372:	f7 fb                	idiv   ebx
c0009374:	89 da                	mov    edx,ebx
c0009376:	0f af d0             	imul   edx,eax
c0009379:	40                   	inc    eax
c000937a:	01 d1                	add    ecx,edx
c000937c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009381:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009385:	8d 14 86             	lea    edx,[esi+eax*4]
c0009388:	eb 0a                	jmp    c0009394 <calc_output_quad+0x105>
c000938a:	d9 cc                	fxch   st(4)
c000938c:	d9 ca                	fxch   st(2)
c000938e:	d9 c9                	fxch   st(1)
c0009390:	d9 cb                	fxch   st(3)
c0009392:	d9 c9                	fxch   st(1)
c0009394:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009398:	d9 c9                	fxch   st(1)
c000939a:	89 c8                	mov    eax,ecx
c000939c:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00093a0:	d9 c9                	fxch   st(1)
c00093a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093a6:	d9 c9                	fxch   st(1)
c00093a8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093ac:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093b0:	e8 9b fc ff ff       	call   c0009050 <fp_to_double>
c00093b5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093b9:	89 c8                	mov    eax,ecx
c00093bb:	e8 86 fc ff ff       	call   c0009046 <fp_to_int>
c00093c0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093c4:	29 d9                	sub    ecx,ebx
c00093c6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093ca:	83 ea 10             	sub    edx,0x10
c00093cd:	d8 e1                	fsub   st,st(1)
c00093cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093d3:	de c9                	fmulp  st(1),st
c00093d5:	de c1                	faddp  st(1),st
c00093d7:	d9 c0                	fld    st(0)
c00093d9:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093df:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093e3:	de c1                	faddp  st(1),st
c00093e5:	d9 c1                	fld    st(1)
c00093e7:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093ed:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093f1:	de c1                	faddp  st(1),st
c00093f3:	d9 c2                	fld    st(2)
c00093f5:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093fb:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093ff:	de c1                	faddp  st(1),st
c0009401:	d9 cb                	fxch   st(3)
c0009403:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009409:	85 c9                	test   ecx,ecx
c000940b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000940f:	de c1                	faddp  st(1),st
c0009411:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009415:	0f 8f 6f ff ff ff    	jg     c000938a <calc_output_quad+0xfb>
c000941b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000941f:	de c4                	faddp  st(4),st
c0009421:	d9 cb                	fxch   st(3)
c0009423:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009426:	d9 1f                	fstp   DWORD PTR [edi]
c0009428:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000942c:	de c2                	faddp  st(2),st
c000942e:	d9 c9                	fxch   st(1)
c0009430:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009433:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009436:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000943a:	de c3                	faddp  st(3),st
c000943c:	d9 ca                	fxch   st(2)
c000943e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009441:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009444:	de c1                	faddp  st(1),st
c0009446:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009449:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000944c:	83 c4 5c             	add    esp,0x5c
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <calc_output_hex>:
c0009454:	55                   	push   ebp
c0009455:	57                   	push   edi
c0009456:	89 c7                	mov    edi,eax
c0009458:	56                   	push   esi
c0009459:	53                   	push   ebx
c000945a:	89 d3                	mov    ebx,edx
c000945c:	83 ec 7c             	sub    esp,0x7c
c000945f:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009466:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009469:	dd 1c 24             	fstp   QWORD PTR [esp]
c000946c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009473:	e8 ca fb ff ff       	call   c0009042 <int_to_fp>
c0009478:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000947b:	d9 ee                	fldz   
c000947d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009481:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009485:	29 c8                	sub    eax,ecx
c0009487:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000948b:	99                   	cdq    
c000948c:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0009490:	f7 fb                	idiv   ebx
c0009492:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009496:	89 da                	mov    edx,ebx
c0009498:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000949c:	0f af d0             	imul   edx,eax
c000949f:	01 ca                	add    edx,ecx
c00094a1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00094a5:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00094a8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00094ac:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094af:	0f af c2             	imul   eax,edx
c00094b2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00094ba:	29 c2                	sub    edx,eax
c00094bc:	8d 14 97             	lea    edx,[edi+edx*4]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c7:	e8 84 fb ff ff       	call   c0009050 <fp_to_double>
c00094cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094d0:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094d4:	e8 6d fb ff ff       	call   c0009046 <fp_to_int>
c00094d9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094dd:	83 c2 18             	add    edx,0x18
c00094e0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094e4:	d8 e1                	fsub   st,st(1)
c00094e6:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00094ea:	de c9                	fmulp  st(1),st
c00094ec:	de c1                	faddp  st(1),st
c00094ee:	d9 c0                	fld    st(0)
c00094f0:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094f6:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094fe:	d9 c0                	fld    st(0)
c0009500:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009506:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000950a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000950e:	d9 c0                	fld    st(0)
c0009510:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009516:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000951a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000951e:	d9 c0                	fld    st(0)
c0009520:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009526:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000952a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000952e:	d9 c0                	fld    st(0)
c0009530:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009536:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000953a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000953e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009544:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009548:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000954c:	de c1                	faddp  st(1),st
c000954e:	0f 89 6b ff ff ff    	jns    c00094bf <calc_output_hex+0x6b>
c0009554:	d9 ee                	fldz   
c0009556:	d9 ee                	fldz   
c0009558:	89 d8                	mov    eax,ebx
c000955a:	29 c8                	sub    eax,ecx
c000955c:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009560:	89 c1                	mov    ecx,eax
c0009562:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009566:	29 c8                	sub    eax,ecx
c0009568:	99                   	cdq    
c0009569:	f7 fb                	idiv   ebx
c000956b:	89 da                	mov    edx,ebx
c000956d:	0f af d0             	imul   edx,eax
c0009570:	40                   	inc    eax
c0009571:	01 d1                	add    ecx,edx
c0009573:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0009578:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000957c:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c0009580:	8d 14 87             	lea    edx,[edi+eax*4]
c0009583:	d9 ee                	fldz   
c0009585:	d9 ee                	fldz   
c0009587:	d9 ca                	fxch   st(2)
c0009589:	eb 08                	jmp    c0009593 <calc_output_hex+0x13f>
c000958b:	d9 cc                	fxch   st(4)
c000958d:	d9 cb                	fxch   st(3)
c000958f:	d9 ca                	fxch   st(2)
c0009591:	d9 c9                	fxch   st(1)
c0009593:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009597:	89 c8                	mov    eax,ecx
c0009599:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c000959d:	d9 ca                	fxch   st(2)
c000959f:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095a3:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095a7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095ab:	e8 a0 fa ff ff       	call   c0009050 <fp_to_double>
c00095b0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095b4:	89 c8                	mov    eax,ecx
c00095b6:	e8 8b fa ff ff       	call   c0009046 <fp_to_int>
c00095bb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095bf:	29 d9                	sub    ecx,ebx
c00095c1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c5:	83 ea 18             	sub    edx,0x18
c00095c8:	d8 e1                	fsub   st,st(1)
c00095ca:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095ce:	de c9                	fmulp  st(1),st
c00095d0:	de c1                	faddp  st(1),st
c00095d2:	d9 c0                	fld    st(0)
c00095d4:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095de:	de c1                	faddp  st(1),st
c00095e0:	d9 c1                	fld    st(1)
c00095e2:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e8:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095ec:	de c1                	faddp  st(1),st
c00095ee:	d9 c2                	fld    st(2)
c00095f0:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095f6:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095fa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00095fe:	d9 c2                	fld    st(2)
c0009600:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009606:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000960a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000960e:	d9 c2                	fld    st(2)
c0009610:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009616:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000961a:	de c1                	faddp  st(1),st
c000961c:	d9 cb                	fxch   st(3)
c000961e:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009624:	85 c9                	test   ecx,ecx
c0009626:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000962a:	de c1                	faddp  st(1),st
c000962c:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009630:	0f 8f 55 ff ff ff    	jg     c000958b <calc_output_hex+0x137>
c0009636:	d9 cb                	fxch   st(3)
c0009638:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000963c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000963f:	d9 1e                	fstp   DWORD PTR [esi]
c0009641:	d9 c9                	fxch   st(1)
c0009643:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000964d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009651:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009655:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009658:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c000965b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000965f:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009663:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009666:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009669:	d9 ca                	fxch   st(2)
c000966b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000966f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009672:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009675:	de c1                	faddp  st(1),st
c0009677:	dc 0c 24             	fmul   QWORD PTR [esp]
c000967a:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c000967d:	83 c4 7c             	add    esp,0x7c
c0009680:	5b                   	pop    ebx
c0009681:	5e                   	pop    esi
c0009682:	5f                   	pop    edi
c0009683:	5d                   	pop    ebp
c0009684:	c3                   	ret    

c0009685 <sinc_reset>:
c0009685:	56                   	push   esi
c0009686:	53                   	push   ebx
c0009687:	51                   	push   ecx
c0009688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000968c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000968f:	85 db                	test   ebx,ebx
c0009691:	74 51                	je     c00096e4 <sinc_reset+0x5f>
c0009693:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000969a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096a1:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096a8:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096ae:	d9 ee                	fldz   
c00096b0:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096b3:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096b6:	52                   	push   edx
c00096b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096ba:	c1 e0 02             	shl    eax,0x2
c00096bd:	50                   	push   eax
c00096be:	6a 00                	push   0x0
c00096c0:	56                   	push   esi
c00096c1:	e8 f4 6f ff ff       	call   c00006ba <memset>
c00096c6:	83 c4 0c             	add    esp,0xc
c00096c9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096cc:	c1 e0 02             	shl    eax,0x2
c00096cf:	50                   	push   eax
c00096d0:	68 aa 00 00 00       	push   0xaa
c00096d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096d8:	8d 04 86             	lea    eax,[esi+eax*4]
c00096db:	50                   	push   eax
c00096dc:	e8 d9 6f ff ff       	call   c00006ba <memset>
c00096e1:	83 c4 10             	add    esp,0x10
c00096e4:	58                   	pop    eax
c00096e5:	5b                   	pop    ebx
c00096e6:	5e                   	pop    esi
c00096e7:	c3                   	ret    

c00096e8 <calc_output_multi>:
c00096e8:	55                   	push   ebp
c00096e9:	57                   	push   edi
c00096ea:	8d 78 44             	lea    edi,[eax+0x44]
c00096ed:	56                   	push   esi
c00096ee:	89 c6                	mov    esi,eax
c00096f0:	53                   	push   ebx
c00096f1:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096f7:	83 ec 4c             	sub    esp,0x4c
c00096fa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00096fe:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009702:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009706:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000970a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000970e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009712:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009715:	e8 28 f9 ff ff       	call   c0009042 <int_to_fp>
c000971a:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000971d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009721:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009725:	99                   	cdq    
c0009726:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c000972a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000972e:	0f af d0             	imul   edx,eax
c0009731:	0f af c3             	imul   eax,ebx
c0009734:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009738:	29 c5                	sub    ebp,eax
c000973a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000973e:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009742:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009749:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000974d:	52                   	push   edx
c000974e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009752:	6a 00                	push   0x0
c0009754:	57                   	push   edi
c0009755:	e8 60 6f ff ff       	call   c00006ba <memset>
c000975a:	83 c4 10             	add    esp,0x10
c000975d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009761:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009765:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009769:	e8 e2 f8 ff ff       	call   c0009050 <fp_to_double>
c000976e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009772:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009776:	e8 cb f8 ff ff       	call   c0009046 <fp_to_int>
c000977b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000977e:	89 d9                	mov    ecx,ebx
c0009780:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009783:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009787:	d8 e1                	fsub   st,st(1)
c0009789:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000978d:	de c9                	fmulp  st(1),st
c000978f:	de c1                	faddp  st(1),st
c0009791:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009795:	89 c8                	mov    eax,ecx
c0009797:	bd 08 00 00 00       	mov    ebp,0x8
c000979c:	99                   	cdq    
c000979d:	f7 fd                	idiv   ebp
c000979f:	4a                   	dec    edx
c00097a0:	83 fa 06             	cmp    edx,0x6
c00097a3:	77 07                	ja     c00097ac <calc_output_multi+0xc4>
c00097a5:	ff 24 95 a0 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf460]
c00097ac:	49                   	dec    ecx
c00097ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097b1:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097bb:	d9 c1                	fld    st(1)
c00097bd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c1:	dc 00                	fadd   QWORD PTR [eax]
c00097c3:	dd 18                	fstp   QWORD PTR [eax]
c00097c5:	49                   	dec    ecx
c00097c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ca:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097cd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d4:	d9 c1                	fld    st(1)
c00097d6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097da:	dc 00                	fadd   QWORD PTR [eax]
c00097dc:	dd 18                	fstp   QWORD PTR [eax]
c00097de:	49                   	dec    ecx
c00097df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e3:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ed:	d9 c1                	fld    st(1)
c00097ef:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f3:	dc 00                	fadd   QWORD PTR [eax]
c00097f5:	dd 18                	fstp   QWORD PTR [eax]
c00097f7:	49                   	dec    ecx
c00097f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097fc:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ff:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009806:	d9 c1                	fld    st(1)
c0009808:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980c:	dc 00                	fadd   QWORD PTR [eax]
c000980e:	dd 18                	fstp   QWORD PTR [eax]
c0009810:	49                   	dec    ecx
c0009811:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009815:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009818:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981f:	d9 c1                	fld    st(1)
c0009821:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009825:	dc 00                	fadd   QWORD PTR [eax]
c0009827:	dd 18                	fstp   QWORD PTR [eax]
c0009829:	49                   	dec    ecx
c000982a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000982e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009831:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009838:	d9 c1                	fld    st(1)
c000983a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983e:	dc 00                	fadd   QWORD PTR [eax]
c0009840:	dd 18                	fstp   QWORD PTR [eax]
c0009842:	49                   	dec    ecx
c0009843:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009847:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009851:	d9 c1                	fld    st(1)
c0009853:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009857:	dc 00                	fadd   QWORD PTR [eax]
c0009859:	dd 18                	fstp   QWORD PTR [eax]
c000985b:	49                   	dec    ecx
c000985c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009860:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009863:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000986a:	d9 c1                	fld    st(1)
c000986c:	85 c9                	test   ecx,ecx
c000986e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009872:	dc 00                	fadd   QWORD PTR [eax]
c0009874:	dd 18                	fstp   QWORD PTR [eax]
c0009876:	0f 8f 19 ff ff ff    	jg     c0009795 <calc_output_multi+0xad>
c000987c:	dd d9                	fstp   st(1)
c000987e:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009886:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000988a:	0f 89 d1 fe ff ff    	jns    c0009761 <calc_output_multi+0x79>
c0009890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009894:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009898:	89 d1                	mov    ecx,edx
c000989a:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000989e:	29 c8                	sub    eax,ecx
c00098a0:	99                   	cdq    
c00098a1:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00098a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00098a9:	0f af d0             	imul   edx,eax
c00098ac:	40                   	inc    eax
c00098ad:	01 d1                	add    ecx,edx
c00098af:	0f af c3             	imul   eax,ebx
c00098b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00098b6:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098bd:	50                   	push   eax
c00098be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098c2:	6a 00                	push   0x0
c00098c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098c8:	e8 ed 6d ff ff       	call   c00006ba <memset>
c00098cd:	83 c4 10             	add    esp,0x10
c00098d0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00098d4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098dc:	e8 6f f7 ff ff       	call   c0009050 <fp_to_double>
c00098e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098e5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00098e9:	e8 58 f7 ff ff       	call   c0009046 <fp_to_int>
c00098ee:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098f1:	89 d9                	mov    ecx,ebx
c00098f3:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098f6:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098fa:	d8 e1                	fsub   st,st(1)
c00098fc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009900:	de c9                	fmulp  st(1),st
c0009902:	de c1                	faddp  st(1),st
c0009904:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009908:	89 c8                	mov    eax,ecx
c000990a:	bd 08 00 00 00       	mov    ebp,0x8
c000990f:	99                   	cdq    
c0009910:	f7 fd                	idiv   ebp
c0009912:	4a                   	dec    edx
c0009913:	83 fa 06             	cmp    edx,0x6
c0009916:	77 07                	ja     c000991f <calc_output_multi+0x237>
c0009918:	ff 24 95 bc 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf444]
c000991f:	49                   	dec    ecx
c0009920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009928:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000992b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009932:	d9 c1                	fld    st(1)
c0009934:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009938:	dc 00                	fadd   QWORD PTR [eax]
c000993a:	dd 18                	fstp   QWORD PTR [eax]
c000993c:	49                   	dec    ecx
c000993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009945:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009948:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994f:	d9 c1                	fld    st(1)
c0009951:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009955:	dc 00                	fadd   QWORD PTR [eax]
c0009957:	dd 18                	fstp   QWORD PTR [eax]
c0009959:	49                   	dec    ecx
c000995a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009962:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009965:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000996c:	d9 c1                	fld    st(1)
c000996e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009972:	dc 00                	fadd   QWORD PTR [eax]
c0009974:	dd 18                	fstp   QWORD PTR [eax]
c0009976:	49                   	dec    ecx
c0009977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009982:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009989:	d9 c1                	fld    st(1)
c000998b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000998f:	dc 00                	fadd   QWORD PTR [eax]
c0009991:	dd 18                	fstp   QWORD PTR [eax]
c0009993:	49                   	dec    ecx
c0009994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000999c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000999f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a6:	d9 c1                	fld    st(1)
c00099a8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ac:	dc 00                	fadd   QWORD PTR [eax]
c00099ae:	dd 18                	fstp   QWORD PTR [eax]
c00099b0:	49                   	dec    ecx
c00099b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099e0:	d9 c1                	fld    st(1)
c00099e2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e6:	dc 00                	fadd   QWORD PTR [eax]
c00099e8:	dd 18                	fstp   QWORD PTR [eax]
c00099ea:	49                   	dec    ecx
c00099eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099f3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099fd:	d9 c1                	fld    st(1)
c00099ff:	85 c9                	test   ecx,ecx
c0009a01:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a05:	dc 00                	fadd   QWORD PTR [eax]
c0009a07:	dd 18                	fstp   QWORD PTR [eax]
c0009a09:	0f 8f f9 fe ff ff    	jg     c0009908 <calc_output_multi+0x220>
c0009a0f:	dd d9                	fstp   st(1)
c0009a11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a15:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009a19:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a1d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009a22:	0f 8f ac fe ff ff    	jg     c00098d4 <calc_output_multi+0x1ec>
c0009a28:	b9 08 00 00 00       	mov    ecx,0x8
c0009a2d:	89 d8                	mov    eax,ebx
c0009a2f:	99                   	cdq    
c0009a30:	f7 f9                	idiv   ecx
c0009a32:	4a                   	dec    edx
c0009a33:	83 fa 06             	cmp    edx,0x6
c0009a36:	77 07                	ja     c0009a3f <calc_output_multi+0x357>
c0009a38:	ff 24 95 d8 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf428]
c0009a3f:	4b                   	dec    ebx
c0009a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a44:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a47:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a4e:	d8 c9                	fmul   st,st(1)
c0009a50:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a53:	4b                   	dec    ebx
c0009a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a58:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a5b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a62:	d8 c9                	fmul   st,st(1)
c0009a64:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a67:	4b                   	dec    ebx
c0009a68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a72:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a76:	d8 c9                	fmul   st,st(1)
c0009a78:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7b:	4b                   	dec    ebx
c0009a7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a80:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a83:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a86:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8a:	d8 c9                	fmul   st,st(1)
c0009a8c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a8f:	4b                   	dec    ebx
c0009a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a94:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a97:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a9e:	d8 c9                	fmul   st,st(1)
c0009aa0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa3:	4b                   	dec    ebx
c0009aa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009aa8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aab:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aae:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab2:	d8 c9                	fmul   st,st(1)
c0009ab4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ab7:	4b                   	dec    ebx
c0009ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009abc:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009abf:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ac2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ac6:	d8 c9                	fmul   st,st(1)
c0009ac8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009acb:	4b                   	dec    ebx
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ad3:	85 db                	test   ebx,ebx
c0009ad5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ad8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009adc:	d8 c9                	fmul   st,st(1)
c0009ade:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ae1:	0f 8f 46 ff ff ff    	jg     c0009a2d <calc_output_multi+0x345>
c0009ae7:	dd d8                	fstp   st(0)
c0009ae9:	83 c4 4c             	add    esp,0x4c
c0009aec:	5b                   	pop    ebx
c0009aed:	5e                   	pop    esi
c0009aee:	5f                   	pop    edi
c0009aef:	5d                   	pop    ebp
c0009af0:	c3                   	ret    

c0009af1 <double_to_fp>:
c0009af1:	d9 05 2c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d2c
c0009af7:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009afb:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009aff:	e9 ec 58 01 00       	jmp    c001f3f0 <lrint>

c0009b04 <fmod_one>:
c0009b04:	83 ec 2c             	sub    esp,0x2c
c0009b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b17:	83 ec 08             	sub    esp,0x8
c0009b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b22:	e8 c9 58 01 00       	call   c001f3f0 <lrint>
c0009b27:	83 c4 10             	add    esp,0x10
c0009b2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b2e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b32:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b36:	de e1                	fsubrp st(1),st
c0009b38:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b3c:	d9 ee                	fldz   
c0009b3e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b42:	df e0                	fnstsw ax
c0009b44:	f6 c4 45             	test   ah,0x45
c0009b47:	75 0a                	jne    c0009b53 <fmod_one+0x4f>
c0009b49:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b4d:	d9 e8                	fld1   
c0009b4f:	de c1                	faddp  st(1),st
c0009b51:	eb 04                	jmp    c0009b57 <fmod_one+0x53>
c0009b53:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b57:	83 c4 2c             	add    esp,0x2c
c0009b5a:	c3                   	ret    

c0009b5b <prepare_data>:
c0009b5b:	55                   	push   ebp
c0009b5c:	57                   	push   edi
c0009b5d:	56                   	push   esi
c0009b5e:	53                   	push   ebx
c0009b5f:	83 ec 1c             	sub    esp,0x1c
c0009b62:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b6a:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b6e:	0f 89 57 01 00 00    	jns    c0009ccb <prepare_data+0x170>
c0009b74:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b7a:	85 d2                	test   edx,edx
c0009b7c:	75 0d                	jne    c0009b8b <prepare_data+0x30>
c0009b7e:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b81:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b84:	29 d0                	sub    eax,edx
c0009b86:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b89:	eb 44                	jmp    c0009bcf <prepare_data+0x74>
c0009b8b:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b8e:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b91:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b94:	39 c1                	cmp    ecx,eax
c0009b96:	7d 04                	jge    c0009b9c <prepare_data+0x41>
c0009b98:	29 d0                	sub    eax,edx
c0009b9a:	eb 2d                	jmp    c0009bc9 <prepare_data+0x6e>
c0009b9c:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009ba2:	29 d7                	sub    edi,edx
c0009ba4:	01 f7                	add    edi,esi
c0009ba6:	51                   	push   ecx
c0009ba7:	29 f2                	sub    edx,esi
c0009ba9:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009bb0:	8d 14 90             	lea    edx,[eax+edx*4]
c0009bb3:	51                   	push   ecx
c0009bb4:	52                   	push   edx
c0009bb5:	50                   	push   eax
c0009bb6:	e8 91 6a ff ff       	call   c000064c <memmove>
c0009bbb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bbe:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bc1:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bc4:	29 f0                	sub    eax,esi
c0009bc6:	83 c4 10             	add    esp,0x10
c0009bc9:	29 f0                	sub    eax,esi
c0009bcb:	79 02                	jns    c0009bcf <prepare_data+0x74>
c0009bcd:	31 c0                	xor    eax,eax
c0009bcf:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bd2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bd5:	29 ef                	sub    edi,ebp
c0009bd7:	39 c7                	cmp    edi,eax
c0009bd9:	7e 02                	jle    c0009bdd <prepare_data+0x82>
c0009bdb:	89 c7                	mov    edi,eax
c0009bdd:	89 f8                	mov    eax,edi
c0009bdf:	99                   	cdq    
c0009be0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009be3:	b8 15 00 00 00       	mov    eax,0x15
c0009be8:	29 d7                	sub    edi,edx
c0009bea:	0f 88 dd 00 00 00    	js     c0009ccd <prepare_data+0x172>
c0009bf0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bf3:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bf6:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bf9:	0f 8f ce 00 00 00    	jg     c0009ccd <prepare_data+0x172>
c0009bff:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c05:	50                   	push   eax
c0009c06:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c0d:	50                   	push   eax
c0009c0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c14:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c17:	50                   	push   eax
c0009c18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c1b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c1f:	50                   	push   eax
c0009c20:	e8 5f 6a ff ff       	call   c0000684 <memcpy>
c0009c25:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c28:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c2b:	01 fd                	add    ebp,edi
c0009c2d:	01 f9                	add    ecx,edi
c0009c2f:	83 c4 10             	add    esp,0x10
c0009c32:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c35:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c38:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c3f:	0f 85 86 00 00 00    	jne    c0009ccb <prepare_data+0x170>
c0009c45:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c48:	89 e8                	mov    eax,ebp
c0009c4a:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c4d:	29 c8                	sub    eax,ecx
c0009c4f:	39 f8                	cmp    eax,edi
c0009c51:	7d 78                	jge    c0009ccb <prepare_data+0x170>
c0009c53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c57:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c5b:	74 6e                	je     c0009ccb <prepare_data+0x170>
c0009c5d:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c60:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c64:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c67:	29 ef                	sub    edi,ebp
c0009c69:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c6d:	7c 29                	jl     c0009c98 <prepare_data+0x13d>
c0009c6f:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c72:	29 f1                	sub    ecx,esi
c0009c74:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c7b:	55                   	push   ebp
c0009c7c:	50                   	push   eax
c0009c7d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c80:	50                   	push   eax
c0009c81:	52                   	push   edx
c0009c82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c86:	e8 c1 69 ff ff       	call   c000064c <memmove>
c0009c8b:	83 c4 10             	add    esp,0x10
c0009c8e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c91:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c98:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c9e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009ca1:	83 c6 05             	add    esi,0x5
c0009ca4:	78 07                	js     c0009cad <prepare_data+0x152>
c0009ca6:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009ca9:	39 cf                	cmp    edi,ecx
c0009cab:	7e 04                	jle    c0009cb1 <prepare_data+0x156>
c0009cad:	89 ce                	mov    esi,ecx
c0009caf:	29 c6                	sub    esi,eax
c0009cb1:	8d 04 82             	lea    eax,[edx+eax*4]
c0009cb4:	51                   	push   ecx
c0009cb5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009cbc:	51                   	push   ecx
c0009cbd:	6a 00                	push   0x0
c0009cbf:	50                   	push   eax
c0009cc0:	e8 f5 69 ff ff       	call   c00006ba <memset>
c0009cc5:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	31 c0                	xor    eax,eax
c0009ccd:	83 c4 1c             	add    esp,0x1c
c0009cd0:	5b                   	pop    ebx
c0009cd1:	5e                   	pop    esi
c0009cd2:	5f                   	pop    edi
c0009cd3:	5d                   	pop    ebp
c0009cd4:	c3                   	ret    

c0009cd5 <sinc_multichan_vari_process>:
c0009cd5:	55                   	push   ebp
c0009cd6:	b8 05 00 00 00       	mov    eax,0x5
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 3c             	sub    esp,0x3c
c0009ce1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ce5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ce9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cec:	85 db                	test   ebx,ebx
c0009cee:	0f 84 5d 02 00 00    	je     c0009f51 <sinc_multichan_vari_process+0x27c>
c0009cf4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cf7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cfa:	0f af d0             	imul   edx,eax
c0009cfd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009d00:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009d04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d0b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d0e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d15:	dd 06                	fld    QWORD PTR [esi]
c0009d17:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d1b:	55                   	push   ebp
c0009d1c:	55                   	push   ebp
c0009d1d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d20:	e8 d9 f2 ff ff       	call   c0008ffe <is_bad_src_ratio>
c0009d25:	89 c2                	mov    edx,eax
c0009d27:	58                   	pop    eax
c0009d28:	85 d2                	test   edx,edx
c0009d2a:	59                   	pop    ecx
c0009d2b:	b8 16 00 00 00       	mov    eax,0x16
c0009d30:	0f 85 1b 02 00 00    	jne    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009d36:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c0009d3c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d3f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d42:	dd 06                	fld    QWORD PTR [esi]
c0009d44:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d47:	d8 d1                	fcom   st(1)
c0009d49:	df e0                	fnstsw ax
c0009d4b:	9e                   	sahf   
c0009d4c:	76 0f                	jbe    c0009d5d <sinc_multichan_vari_process+0x88>
c0009d4e:	dd d8                	fstp   st(0)
c0009d50:	d9 e8                	fld1   
c0009d52:	d8 d9                	fcomp  st(1)
c0009d54:	df e0                	fnstsw ax
c0009d56:	9e                   	sahf   
c0009d57:	77 0f                	ja     c0009d68 <sinc_multichan_vari_process+0x93>
c0009d59:	dd d8                	fstp   st(0)
c0009d5b:	eb 11                	jmp    c0009d6e <sinc_multichan_vari_process+0x99>
c0009d5d:	dd d9                	fstp   st(1)
c0009d5f:	d9 e8                	fld1   
c0009d61:	d8 d9                	fcomp  st(1)
c0009d63:	df e0                	fnstsw ax
c0009d65:	9e                   	sahf   
c0009d66:	76 04                	jbe    c0009d6c <sinc_multichan_vari_process+0x97>
c0009d68:	de f9                	fdivp  st(1),st
c0009d6a:	eb 02                	jmp    c0009d6e <sinc_multichan_vari_process+0x99>
c0009d6c:	dd d8                	fstp   st(0)
c0009d6e:	83 ec 10             	sub    esp,0x10
c0009d71:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d77:	e8 74 56 01 00       	call   c001f3f0 <lrint>
c0009d7c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d7f:	40                   	inc    eax
c0009d80:	dd 14 24             	fst    QWORD PTR [esp]
c0009d83:	0f af c5             	imul   eax,ebp
c0009d86:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d8a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d8e:	e8 71 fd ff ff       	call   c0009b04 <fmod_one>
c0009d93:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d96:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d9d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009da1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009da5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009da9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dac:	e8 3f 56 01 00       	call   c001f3f0 <lrint>
c0009db1:	0f af e8             	imul   ebp,eax
c0009db4:	d9 e8                	fld1   
c0009db6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009dba:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009dbe:	01 e8                	add    eax,ebp
c0009dc0:	dc 05 98 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b98
c0009dc6:	99                   	cdq    
c0009dc7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dcb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009dce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dd1:	83 c4 10             	add    esp,0x10
c0009dd4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dd7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dda:	7d 4b                	jge    c0009e27 <sinc_multichan_vari_process+0x152>
c0009ddc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009ddf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009de2:	01 c8                	add    eax,ecx
c0009de4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009de7:	99                   	cdq    
c0009de8:	f7 f9                	idiv   ecx
c0009dea:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dee:	7d 09                	jge    c0009df9 <sinc_multichan_vari_process+0x124>
c0009df0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009df3:	85 c0                	test   eax,eax
c0009df5:	79 57                	jns    c0009e4e <sinc_multichan_vari_process+0x179>
c0009df7:	eb 70                	jmp    c0009e69 <sinc_multichan_vari_process+0x194>
c0009df9:	51                   	push   ecx
c0009dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dfe:	57                   	push   edi
c0009dff:	53                   	push   ebx
c0009e00:	e8 56 fd ff ff       	call   c0009b5b <prepare_data>
c0009e05:	83 c4 10             	add    esp,0x10
c0009e08:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e0b:	85 c0                	test   eax,eax
c0009e0d:	0f 85 3e 01 00 00    	jne    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009e13:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e16:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e19:	01 c8                	add    eax,ecx
c0009e1b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e1e:	99                   	cdq    
c0009e1f:	f7 f9                	idiv   ecx
c0009e21:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e25:	7c c9                	jl     c0009df0 <sinc_multichan_vari_process+0x11b>
c0009e27:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2a:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e2d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e31:	dd 1e                	fstp   QWORD PTR [esi]
c0009e33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e36:	99                   	cdq    
c0009e37:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e3a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e3d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e40:	99                   	cdq    
c0009e41:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e44:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e47:	31 c0                	xor    eax,eax
c0009e49:	e9 03 01 00 00       	jmp    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e52:	dd 04 24             	fld    QWORD PTR [esp]
c0009e55:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e58:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e60:	d9 c9                	fxch   st(1)
c0009e62:	de d9                	fcompp 
c0009e64:	df e0                	fnstsw ax
c0009e66:	9e                   	sahf   
c0009e67:	73 be                	jae    c0009e27 <sinc_multichan_vari_process+0x152>
c0009e69:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e6d:	7e 31                	jle    c0009ea0 <sinc_multichan_vari_process+0x1cb>
c0009e6f:	83 ec 10             	sub    esp,0x10
c0009e72:	dd 06                	fld    QWORD PTR [esi]
c0009e74:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e7a:	e8 51 55 01 00       	call   c001f3d0 <fabs>
c0009e7f:	83 c4 10             	add    esp,0x10
c0009e82:	dc 1d 20 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d20
c0009e88:	df e0                	fnstsw ax
c0009e8a:	9e                   	sahf   
c0009e8b:	76 13                	jbe    c0009ea0 <sinc_multichan_vari_process+0x1cb>
c0009e8d:	dd 06                	fld    QWORD PTR [esi]
c0009e8f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e92:	d8 e1                	fsub   st,st(1)
c0009e94:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e97:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e9a:	de c1                	faddp  st(1),st
c0009e9c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009ea0:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009ea3:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009ea7:	d9 e8                	fld1   
c0009ea9:	d8 d9                	fcomp  st(1)
c0009eab:	df e0                	fnstsw ax
c0009ead:	9e                   	sahf   
c0009eae:	77 04                	ja     c0009eb4 <sinc_multichan_vari_process+0x1df>
c0009eb0:	dd d8                	fstp   st(0)
c0009eb2:	d9 e8                	fld1   
c0009eb4:	de c9                	fmulp  st(1),st
c0009eb6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009eba:	50                   	push   eax
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ec4:	e8 28 fc ff ff       	call   c0009af1 <double_to_fp>
c0009ec9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ecd:	89 c5                	mov    ebp,eax
c0009ecf:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009ed3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed6:	e8 16 fc ff ff       	call   c0009af1 <double_to_fp>
c0009edb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ede:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ee1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ee4:	89 c1                	mov    ecx,eax
c0009ee6:	52                   	push   edx
c0009ee7:	89 d8                	mov    eax,ebx
c0009ee9:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009eed:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ef0:	52                   	push   edx
c0009ef1:	52                   	push   edx
c0009ef2:	89 ea                	mov    edx,ebp
c0009ef4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009efa:	e8 e9 f7 ff ff       	call   c00096e8 <calc_output_multi>
c0009eff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009f02:	d9 e8                	fld1   
c0009f04:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009f07:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009f0b:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	dd 14 24             	fst    QWORD PTR [esp]
c0009f15:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f19:	e8 e6 fb ff ff       	call   c0009b04 <fmod_one>
c0009f1e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f21:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f25:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f28:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f30:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f37:	e8 b4 54 01 00       	call   c001f3f0 <lrint>
c0009f3c:	0f af e8             	imul   ebp,eax
c0009f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f43:	01 e8                	add    eax,ebp
c0009f45:	99                   	cdq    
c0009f46:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f49:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f4c:	e9 80 fe ff ff       	jmp    c0009dd1 <sinc_multichan_vari_process+0xfc>
c0009f51:	83 c4 3c             	add    esp,0x3c
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    

c0009f59 <sinc_hex_vari_process>:
c0009f59:	55                   	push   ebp
c0009f5a:	b8 05 00 00 00       	mov    eax,0x5
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	53                   	push   ebx
c0009f62:	83 ec 3c             	sub    esp,0x3c
c0009f65:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f69:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f6d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f70:	85 db                	test   ebx,ebx
c0009f72:	0f 84 58 02 00 00    	je     c000a1d0 <sinc_hex_vari_process+0x277>
c0009f78:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f7b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f7e:	0f af d0             	imul   edx,eax
c0009f81:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f84:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f88:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f8f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f92:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f99:	dd 06                	fld    QWORD PTR [esi]
c0009f9b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f9f:	55                   	push   ebp
c0009fa0:	55                   	push   ebp
c0009fa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fa4:	e8 55 f0 ff ff       	call   c0008ffe <is_bad_src_ratio>
c0009fa9:	89 c2                	mov    edx,eax
c0009fab:	58                   	pop    eax
c0009fac:	85 d2                	test   edx,edx
c0009fae:	59                   	pop    ecx
c0009faf:	b8 16 00 00 00       	mov    eax,0x16
c0009fb4:	0f 85 16 02 00 00    	jne    c000a1d0 <sinc_hex_vari_process+0x277>
c0009fba:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c0009fc0:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fc3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fc6:	dd 06                	fld    QWORD PTR [esi]
c0009fc8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fcb:	d8 d1                	fcom   st(1)
c0009fcd:	df e0                	fnstsw ax
c0009fcf:	9e                   	sahf   
c0009fd0:	76 0f                	jbe    c0009fe1 <sinc_hex_vari_process+0x88>
c0009fd2:	dd d8                	fstp   st(0)
c0009fd4:	d9 e8                	fld1   
c0009fd6:	d8 d9                	fcomp  st(1)
c0009fd8:	df e0                	fnstsw ax
c0009fda:	9e                   	sahf   
c0009fdb:	77 0f                	ja     c0009fec <sinc_hex_vari_process+0x93>
c0009fdd:	dd d8                	fstp   st(0)
c0009fdf:	eb 11                	jmp    c0009ff2 <sinc_hex_vari_process+0x99>
c0009fe1:	dd d9                	fstp   st(1)
c0009fe3:	d9 e8                	fld1   
c0009fe5:	d8 d9                	fcomp  st(1)
c0009fe7:	df e0                	fnstsw ax
c0009fe9:	9e                   	sahf   
c0009fea:	76 04                	jbe    c0009ff0 <sinc_hex_vari_process+0x97>
c0009fec:	de f9                	fdivp  st(1),st
c0009fee:	eb 02                	jmp    c0009ff2 <sinc_hex_vari_process+0x99>
c0009ff0:	dd d8                	fstp   st(0)
c0009ff2:	83 ec 10             	sub    esp,0x10
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ffb:	e8 f0 53 01 00       	call   c001f3f0 <lrint>
c000a000:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a003:	40                   	inc    eax
c000a004:	dd 14 24             	fst    QWORD PTR [esp]
c000a007:	0f af c5             	imul   eax,ebp
c000a00a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a00e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a012:	e8 ed fa ff ff       	call   c0009b04 <fmod_one>
c000a017:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a01a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a01e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a021:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a025:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a029:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a02d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a030:	e8 bb 53 01 00       	call   c001f3f0 <lrint>
c000a035:	0f af e8             	imul   ebp,eax
c000a038:	d9 e8                	fld1   
c000a03a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a03e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a042:	01 e8                	add    eax,ebp
c000a044:	dc 05 98 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b98
c000a04a:	99                   	cdq    
c000a04b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a04f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a052:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a05b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a05e:	7d 4b                	jge    c000a0ab <sinc_hex_vari_process+0x152>
c000a060:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a063:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a066:	01 c8                	add    eax,ecx
c000a068:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a06b:	99                   	cdq    
c000a06c:	f7 f9                	idiv   ecx
c000a06e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a072:	7d 09                	jge    c000a07d <sinc_hex_vari_process+0x124>
c000a074:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a077:	85 c0                	test   eax,eax
c000a079:	79 57                	jns    c000a0d2 <sinc_hex_vari_process+0x179>
c000a07b:	eb 70                	jmp    c000a0ed <sinc_hex_vari_process+0x194>
c000a07d:	51                   	push   ecx
c000a07e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a082:	57                   	push   edi
c000a083:	53                   	push   ebx
c000a084:	e8 d2 fa ff ff       	call   c0009b5b <prepare_data>
c000a089:	83 c4 10             	add    esp,0x10
c000a08c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a08f:	85 c0                	test   eax,eax
c000a091:	0f 85 39 01 00 00    	jne    c000a1d0 <sinc_hex_vari_process+0x277>
c000a097:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a09a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a09d:	01 c8                	add    eax,ecx
c000a09f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a0a2:	99                   	cdq    
c000a0a3:	f7 f9                	idiv   ecx
c000a0a5:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a0a9:	7c c9                	jl     c000a074 <sinc_hex_vari_process+0x11b>
c000a0ab:	dd 04 24             	fld    QWORD PTR [esp]
c000a0ae:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0b1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0b5:	dd 1e                	fstp   QWORD PTR [esi]
c000a0b7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0ba:	99                   	cdq    
c000a0bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0be:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0c4:	99                   	cdq    
c000a0c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0c8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0cb:	31 c0                	xor    eax,eax
c000a0cd:	e9 fe 00 00 00       	jmp    c000a1d0 <sinc_hex_vari_process+0x277>
c000a0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0d6:	dd 04 24             	fld    QWORD PTR [esp]
c000a0d9:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0dc:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0e0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0e4:	d9 c9                	fxch   st(1)
c000a0e6:	de d9                	fcompp 
c000a0e8:	df e0                	fnstsw ax
c000a0ea:	9e                   	sahf   
c000a0eb:	73 be                	jae    c000a0ab <sinc_hex_vari_process+0x152>
c000a0ed:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0f1:	7e 31                	jle    c000a124 <sinc_hex_vari_process+0x1cb>
c000a0f3:	83 ec 10             	sub    esp,0x10
c000a0f6:	dd 06                	fld    QWORD PTR [esi]
c000a0f8:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0fe:	e8 cd 52 01 00       	call   c001f3d0 <fabs>
c000a103:	83 c4 10             	add    esp,0x10
c000a106:	dc 1d 20 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d20
c000a10c:	df e0                	fnstsw ax
c000a10e:	9e                   	sahf   
c000a10f:	76 13                	jbe    c000a124 <sinc_hex_vari_process+0x1cb>
c000a111:	dd 06                	fld    QWORD PTR [esi]
c000a113:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a116:	d8 e1                	fsub   st,st(1)
c000a118:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a11b:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a11e:	de c1                	faddp  st(1),st
c000a120:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a124:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a127:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a12b:	d9 e8                	fld1   
c000a12d:	d8 d9                	fcomp  st(1)
c000a12f:	df e0                	fnstsw ax
c000a131:	9e                   	sahf   
c000a132:	77 04                	ja     c000a138 <sinc_hex_vari_process+0x1df>
c000a134:	dd d8                	fstp   st(0)
c000a136:	d9 e8                	fld1   
c000a138:	de c9                	fmulp  st(1),st
c000a13a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a13e:	50                   	push   eax
c000a13f:	50                   	push   eax
c000a140:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a144:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a148:	e8 a4 f9 ff ff       	call   c0009af1 <double_to_fp>
c000a14d:	89 c5                	mov    ebp,eax
c000a14f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a153:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a157:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a15a:	e8 92 f9 ff ff       	call   c0009af1 <double_to_fp>
c000a15f:	83 c4 0c             	add    esp,0xc
c000a162:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a165:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a168:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a16b:	89 c1                	mov    ecx,eax
c000a16d:	52                   	push   edx
c000a16e:	89 d8                	mov    eax,ebx
c000a170:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a174:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a177:	52                   	push   edx
c000a178:	52                   	push   edx
c000a179:	89 ea                	mov    edx,ebp
c000a17b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a17e:	e8 d1 f2 ff ff       	call   c0009454 <calc_output_hex>
c000a183:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a187:	d9 e8                	fld1   
c000a189:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a18d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a191:	dd 14 24             	fst    QWORD PTR [esp]
c000a194:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a198:	e8 67 f9 ff ff       	call   c0009b04 <fmod_one>
c000a19d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1a0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1a4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1a7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1af:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1b3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1b6:	e8 35 52 01 00       	call   c001f3f0 <lrint>
c000a1bb:	0f af e8             	imul   ebp,eax
c000a1be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1c2:	01 e8                	add    eax,ebp
c000a1c4:	99                   	cdq    
c000a1c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1cb:	e9 85 fe ff ff       	jmp    c000a055 <sinc_hex_vari_process+0xfc>
c000a1d0:	83 c4 3c             	add    esp,0x3c
c000a1d3:	5b                   	pop    ebx
c000a1d4:	5e                   	pop    esi
c000a1d5:	5f                   	pop    edi
c000a1d6:	5d                   	pop    ebp
c000a1d7:	c3                   	ret    

c000a1d8 <sinc_quad_vari_process>:
c000a1d8:	55                   	push   ebp
c000a1d9:	b8 05 00 00 00       	mov    eax,0x5
c000a1de:	57                   	push   edi
c000a1df:	56                   	push   esi
c000a1e0:	53                   	push   ebx
c000a1e1:	83 ec 3c             	sub    esp,0x3c
c000a1e4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1e8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1ec:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1ef:	85 db                	test   ebx,ebx
c000a1f1:	0f 84 58 02 00 00    	je     c000a44f <sinc_quad_vari_process+0x277>
c000a1f7:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1fd:	0f af d0             	imul   edx,eax
c000a200:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a203:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a207:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a20e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a211:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a218:	dd 06                	fld    QWORD PTR [esi]
c000a21a:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a21e:	55                   	push   ebp
c000a21f:	55                   	push   ebp
c000a220:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a223:	e8 d6 ed ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a228:	89 c2                	mov    edx,eax
c000a22a:	58                   	pop    eax
c000a22b:	85 d2                	test   edx,edx
c000a22d:	59                   	pop    ecx
c000a22e:	b8 16 00 00 00       	mov    eax,0x16
c000a233:	0f 85 16 02 00 00    	jne    c000a44f <sinc_quad_vari_process+0x277>
c000a239:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c000a23f:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a242:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a245:	dd 06                	fld    QWORD PTR [esi]
c000a247:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a24a:	d8 d1                	fcom   st(1)
c000a24c:	df e0                	fnstsw ax
c000a24e:	9e                   	sahf   
c000a24f:	76 0f                	jbe    c000a260 <sinc_quad_vari_process+0x88>
c000a251:	dd d8                	fstp   st(0)
c000a253:	d9 e8                	fld1   
c000a255:	d8 d9                	fcomp  st(1)
c000a257:	df e0                	fnstsw ax
c000a259:	9e                   	sahf   
c000a25a:	77 0f                	ja     c000a26b <sinc_quad_vari_process+0x93>
c000a25c:	dd d8                	fstp   st(0)
c000a25e:	eb 11                	jmp    c000a271 <sinc_quad_vari_process+0x99>
c000a260:	dd d9                	fstp   st(1)
c000a262:	d9 e8                	fld1   
c000a264:	d8 d9                	fcomp  st(1)
c000a266:	df e0                	fnstsw ax
c000a268:	9e                   	sahf   
c000a269:	76 04                	jbe    c000a26f <sinc_quad_vari_process+0x97>
c000a26b:	de f9                	fdivp  st(1),st
c000a26d:	eb 02                	jmp    c000a271 <sinc_quad_vari_process+0x99>
c000a26f:	dd d8                	fstp   st(0)
c000a271:	83 ec 10             	sub    esp,0x10
c000a274:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a277:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a27a:	e8 71 51 01 00       	call   c001f3f0 <lrint>
c000a27f:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a282:	40                   	inc    eax
c000a283:	dd 14 24             	fst    QWORD PTR [esp]
c000a286:	0f af c5             	imul   eax,ebp
c000a289:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a28d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a291:	e8 6e f8 ff ff       	call   c0009b04 <fmod_one>
c000a296:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a299:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a29d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a2a0:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2a8:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a2ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2af:	e8 3c 51 01 00       	call   c001f3f0 <lrint>
c000a2b4:	0f af e8             	imul   ebp,eax
c000a2b7:	d9 e8                	fld1   
c000a2b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2bd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2c1:	01 e8                	add    eax,ebp
c000a2c3:	dc 05 98 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b98
c000a2c9:	99                   	cdq    
c000a2ca:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ce:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2d1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2d4:	83 c4 10             	add    esp,0x10
c000a2d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2dd:	7d 4b                	jge    c000a32a <sinc_quad_vari_process+0x152>
c000a2df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2e5:	01 c8                	add    eax,ecx
c000a2e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2ea:	99                   	cdq    
c000a2eb:	f7 f9                	idiv   ecx
c000a2ed:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2f1:	7d 09                	jge    c000a2fc <sinc_quad_vari_process+0x124>
c000a2f3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2f6:	85 c0                	test   eax,eax
c000a2f8:	79 57                	jns    c000a351 <sinc_quad_vari_process+0x179>
c000a2fa:	eb 70                	jmp    c000a36c <sinc_quad_vari_process+0x194>
c000a2fc:	51                   	push   ecx
c000a2fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a301:	57                   	push   edi
c000a302:	53                   	push   ebx
c000a303:	e8 53 f8 ff ff       	call   c0009b5b <prepare_data>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a30e:	85 c0                	test   eax,eax
c000a310:	0f 85 39 01 00 00    	jne    c000a44f <sinc_quad_vari_process+0x277>
c000a316:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a319:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a31c:	01 c8                	add    eax,ecx
c000a31e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a321:	99                   	cdq    
c000a322:	f7 f9                	idiv   ecx
c000a324:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a328:	7c c9                	jl     c000a2f3 <sinc_quad_vari_process+0x11b>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a330:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a334:	dd 1e                	fstp   QWORD PTR [esi]
c000a336:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a339:	99                   	cdq    
c000a33a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a33d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a340:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a343:	99                   	cdq    
c000a344:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a347:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a34a:	31 c0                	xor    eax,eax
c000a34c:	e9 fe 00 00 00       	jmp    c000a44f <sinc_quad_vari_process+0x277>
c000a351:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a355:	dd 04 24             	fld    QWORD PTR [esp]
c000a358:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a35b:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a35f:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a363:	d9 c9                	fxch   st(1)
c000a365:	de d9                	fcompp 
c000a367:	df e0                	fnstsw ax
c000a369:	9e                   	sahf   
c000a36a:	73 be                	jae    c000a32a <sinc_quad_vari_process+0x152>
c000a36c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a370:	7e 31                	jle    c000a3a3 <sinc_quad_vari_process+0x1cb>
c000a372:	83 ec 10             	sub    esp,0x10
c000a375:	dd 06                	fld    QWORD PTR [esi]
c000a377:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a37a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a37d:	e8 4e 50 01 00       	call   c001f3d0 <fabs>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	dc 1d 20 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d20
c000a38b:	df e0                	fnstsw ax
c000a38d:	9e                   	sahf   
c000a38e:	76 13                	jbe    c000a3a3 <sinc_quad_vari_process+0x1cb>
c000a390:	dd 06                	fld    QWORD PTR [esi]
c000a392:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a395:	d8 e1                	fsub   st,st(1)
c000a397:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a39a:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a39d:	de c1                	faddp  st(1),st
c000a39f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a3a3:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a3a6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a3aa:	d9 e8                	fld1   
c000a3ac:	d8 d9                	fcomp  st(1)
c000a3ae:	df e0                	fnstsw ax
c000a3b0:	9e                   	sahf   
c000a3b1:	77 04                	ja     c000a3b7 <sinc_quad_vari_process+0x1df>
c000a3b3:	dd d8                	fstp   st(0)
c000a3b5:	d9 e8                	fld1   
c000a3b7:	de c9                	fmulp  st(1),st
c000a3b9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3bd:	50                   	push   eax
c000a3be:	50                   	push   eax
c000a3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3c7:	e8 25 f7 ff ff       	call   c0009af1 <double_to_fp>
c000a3cc:	89 c5                	mov    ebp,eax
c000a3ce:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3d2:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d9:	e8 13 f7 ff ff       	call   c0009af1 <double_to_fp>
c000a3de:	83 c4 0c             	add    esp,0xc
c000a3e1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3e4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3e7:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3ea:	89 c1                	mov    ecx,eax
c000a3ec:	52                   	push   edx
c000a3ed:	89 d8                	mov    eax,ebx
c000a3ef:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3f3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3f6:	52                   	push   edx
c000a3f7:	52                   	push   edx
c000a3f8:	89 ea                	mov    edx,ebp
c000a3fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3fd:	e8 8d ee ff ff       	call   c000928f <calc_output_quad>
c000a402:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a406:	d9 e8                	fld1   
c000a408:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a40c:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a410:	dd 14 24             	fst    QWORD PTR [esp]
c000a413:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a417:	e8 e8 f6 ff ff       	call   c0009b04 <fmod_one>
c000a41c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a41f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a423:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a426:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a42a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a42e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a432:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a435:	e8 b6 4f 01 00       	call   c001f3f0 <lrint>
c000a43a:	0f af e8             	imul   ebp,eax
c000a43d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a441:	01 e8                	add    eax,ebp
c000a443:	99                   	cdq    
c000a444:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a447:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a44a:	e9 85 fe ff ff       	jmp    c000a2d4 <sinc_quad_vari_process+0xfc>
c000a44f:	83 c4 3c             	add    esp,0x3c
c000a452:	5b                   	pop    ebx
c000a453:	5e                   	pop    esi
c000a454:	5f                   	pop    edi
c000a455:	5d                   	pop    ebp
c000a456:	c3                   	ret    

c000a457 <sinc_stereo_vari_process>:
c000a457:	55                   	push   ebp
c000a458:	b8 05 00 00 00       	mov    eax,0x5
c000a45d:	57                   	push   edi
c000a45e:	56                   	push   esi
c000a45f:	53                   	push   ebx
c000a460:	83 ec 3c             	sub    esp,0x3c
c000a463:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a467:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a46b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a46e:	85 db                	test   ebx,ebx
c000a470:	0f 84 58 02 00 00    	je     c000a6ce <sinc_stereo_vari_process+0x277>
c000a476:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a479:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a47c:	0f af d0             	imul   edx,eax
c000a47f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a482:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a486:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a48d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a490:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a497:	dd 06                	fld    QWORD PTR [esi]
c000a499:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a49d:	55                   	push   ebp
c000a49e:	55                   	push   ebp
c000a49f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4a2:	e8 57 eb ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a4a7:	89 c2                	mov    edx,eax
c000a4a9:	58                   	pop    eax
c000a4aa:	85 d2                	test   edx,edx
c000a4ac:	59                   	pop    ecx
c000a4ad:	b8 16 00 00 00       	mov    eax,0x16
c000a4b2:	0f 85 16 02 00 00    	jne    c000a6ce <sinc_stereo_vari_process+0x277>
c000a4b8:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c000a4be:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4c1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4c4:	dd 06                	fld    QWORD PTR [esi]
c000a4c6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4c9:	d8 d1                	fcom   st(1)
c000a4cb:	df e0                	fnstsw ax
c000a4cd:	9e                   	sahf   
c000a4ce:	76 0f                	jbe    c000a4df <sinc_stereo_vari_process+0x88>
c000a4d0:	dd d8                	fstp   st(0)
c000a4d2:	d9 e8                	fld1   
c000a4d4:	d8 d9                	fcomp  st(1)
c000a4d6:	df e0                	fnstsw ax
c000a4d8:	9e                   	sahf   
c000a4d9:	77 0f                	ja     c000a4ea <sinc_stereo_vari_process+0x93>
c000a4db:	dd d8                	fstp   st(0)
c000a4dd:	eb 11                	jmp    c000a4f0 <sinc_stereo_vari_process+0x99>
c000a4df:	dd d9                	fstp   st(1)
c000a4e1:	d9 e8                	fld1   
c000a4e3:	d8 d9                	fcomp  st(1)
c000a4e5:	df e0                	fnstsw ax
c000a4e7:	9e                   	sahf   
c000a4e8:	76 04                	jbe    c000a4ee <sinc_stereo_vari_process+0x97>
c000a4ea:	de f9                	fdivp  st(1),st
c000a4ec:	eb 02                	jmp    c000a4f0 <sinc_stereo_vari_process+0x99>
c000a4ee:	dd d8                	fstp   st(0)
c000a4f0:	83 ec 10             	sub    esp,0x10
c000a4f3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4f9:	e8 f2 4e 01 00       	call   c001f3f0 <lrint>
c000a4fe:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a501:	40                   	inc    eax
c000a502:	dd 14 24             	fst    QWORD PTR [esp]
c000a505:	0f af c5             	imul   eax,ebp
c000a508:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a50c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a510:	e8 ef f5 ff ff       	call   c0009b04 <fmod_one>
c000a515:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a518:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a51c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a51f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a527:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a52b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a52e:	e8 bd 4e 01 00       	call   c001f3f0 <lrint>
c000a533:	0f af e8             	imul   ebp,eax
c000a536:	d9 e8                	fld1   
c000a538:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a53c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a540:	01 e8                	add    eax,ebp
c000a542:	dc 05 98 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b98
c000a548:	99                   	cdq    
c000a549:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a54d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a550:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a553:	83 c4 10             	add    esp,0x10
c000a556:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a559:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a55c:	7d 4b                	jge    c000a5a9 <sinc_stereo_vari_process+0x152>
c000a55e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a561:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a564:	01 c8                	add    eax,ecx
c000a566:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a569:	99                   	cdq    
c000a56a:	f7 f9                	idiv   ecx
c000a56c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a570:	7d 09                	jge    c000a57b <sinc_stereo_vari_process+0x124>
c000a572:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a575:	85 c0                	test   eax,eax
c000a577:	79 57                	jns    c000a5d0 <sinc_stereo_vari_process+0x179>
c000a579:	eb 70                	jmp    c000a5eb <sinc_stereo_vari_process+0x194>
c000a57b:	51                   	push   ecx
c000a57c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a580:	57                   	push   edi
c000a581:	53                   	push   ebx
c000a582:	e8 d4 f5 ff ff       	call   c0009b5b <prepare_data>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a58d:	85 c0                	test   eax,eax
c000a58f:	0f 85 39 01 00 00    	jne    c000a6ce <sinc_stereo_vari_process+0x277>
c000a595:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a59b:	01 c8                	add    eax,ecx
c000a59d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a5a0:	99                   	cdq    
c000a5a1:	f7 f9                	idiv   ecx
c000a5a3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a5a7:	7c c9                	jl     c000a572 <sinc_stereo_vari_process+0x11b>
c000a5a9:	dd 04 24             	fld    QWORD PTR [esp]
c000a5ac:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a5af:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5b3:	dd 1e                	fstp   QWORD PTR [esi]
c000a5b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5b8:	99                   	cdq    
c000a5b9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5bc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5c2:	99                   	cdq    
c000a5c3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5c6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5c9:	31 c0                	xor    eax,eax
c000a5cb:	e9 fe 00 00 00       	jmp    c000a6ce <sinc_stereo_vari_process+0x277>
c000a5d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d4:	dd 04 24             	fld    QWORD PTR [esp]
c000a5d7:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5da:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5de:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5e2:	d9 c9                	fxch   st(1)
c000a5e4:	de d9                	fcompp 
c000a5e6:	df e0                	fnstsw ax
c000a5e8:	9e                   	sahf   
c000a5e9:	73 be                	jae    c000a5a9 <sinc_stereo_vari_process+0x152>
c000a5eb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5ef:	7e 31                	jle    c000a622 <sinc_stereo_vari_process+0x1cb>
c000a5f1:	83 ec 10             	sub    esp,0x10
c000a5f4:	dd 06                	fld    QWORD PTR [esi]
c000a5f6:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5fc:	e8 cf 4d 01 00       	call   c001f3d0 <fabs>
c000a601:	83 c4 10             	add    esp,0x10
c000a604:	dc 1d 20 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d20
c000a60a:	df e0                	fnstsw ax
c000a60c:	9e                   	sahf   
c000a60d:	76 13                	jbe    c000a622 <sinc_stereo_vari_process+0x1cb>
c000a60f:	dd 06                	fld    QWORD PTR [esi]
c000a611:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a614:	d8 e1                	fsub   st,st(1)
c000a616:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a619:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a61c:	de c1                	faddp  st(1),st
c000a61e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a622:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a625:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a629:	d9 e8                	fld1   
c000a62b:	d8 d9                	fcomp  st(1)
c000a62d:	df e0                	fnstsw ax
c000a62f:	9e                   	sahf   
c000a630:	77 04                	ja     c000a636 <sinc_stereo_vari_process+0x1df>
c000a632:	dd d8                	fstp   st(0)
c000a634:	d9 e8                	fld1   
c000a636:	de c9                	fmulp  st(1),st
c000a638:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a63c:	50                   	push   eax
c000a63d:	50                   	push   eax
c000a63e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a646:	e8 a6 f4 ff ff       	call   c0009af1 <double_to_fp>
c000a64b:	89 c5                	mov    ebp,eax
c000a64d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a651:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a655:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a658:	e8 94 f4 ff ff       	call   c0009af1 <double_to_fp>
c000a65d:	83 c4 0c             	add    esp,0xc
c000a660:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a663:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a666:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a669:	89 c1                	mov    ecx,eax
c000a66b:	52                   	push   edx
c000a66c:	89 d8                	mov    eax,ebx
c000a66e:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a672:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a675:	52                   	push   edx
c000a676:	52                   	push   edx
c000a677:	89 ea                	mov    edx,ebp
c000a679:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a67c:	e8 ce ea ff ff       	call   c000914f <calc_output_stereo>
c000a681:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a685:	d9 e8                	fld1   
c000a687:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a68b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a68f:	dd 14 24             	fst    QWORD PTR [esp]
c000a692:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a696:	e8 69 f4 ff ff       	call   c0009b04 <fmod_one>
c000a69b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a69e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6a2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6a5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a6ad:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6b1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6b4:	e8 37 4d 01 00       	call   c001f3f0 <lrint>
c000a6b9:	0f af e8             	imul   ebp,eax
c000a6bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6c0:	01 e8                	add    eax,ebp
c000a6c2:	99                   	cdq    
c000a6c3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6c6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6c9:	e9 85 fe ff ff       	jmp    c000a553 <sinc_stereo_vari_process+0xfc>
c000a6ce:	83 c4 3c             	add    esp,0x3c
c000a6d1:	5b                   	pop    ebx
c000a6d2:	5e                   	pop    esi
c000a6d3:	5f                   	pop    edi
c000a6d4:	5d                   	pop    ebp
c000a6d5:	c3                   	ret    

c000a6d6 <sinc_mono_vari_process>:
c000a6d6:	55                   	push   ebp
c000a6d7:	b8 05 00 00 00       	mov    eax,0x5
c000a6dc:	57                   	push   edi
c000a6dd:	56                   	push   esi
c000a6de:	53                   	push   ebx
c000a6df:	83 ec 3c             	sub    esp,0x3c
c000a6e2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6e6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6ea:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6ed:	85 db                	test   ebx,ebx
c000a6ef:	0f 84 57 02 00 00    	je     c000a94c <sinc_mono_vari_process+0x276>
c000a6f5:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6fb:	0f af d0             	imul   edx,eax
c000a6fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a701:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a705:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a70c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a70f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a716:	dd 06                	fld    QWORD PTR [esi]
c000a718:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a71c:	51                   	push   ecx
c000a71d:	51                   	push   ecx
c000a71e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a721:	e8 d8 e8 ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a726:	5d                   	pop    ebp
c000a727:	89 c2                	mov    edx,eax
c000a729:	58                   	pop    eax
c000a72a:	85 d2                	test   edx,edx
c000a72c:	b8 16 00 00 00       	mov    eax,0x16
c000a731:	0f 85 15 02 00 00    	jne    c000a94c <sinc_mono_vari_process+0x276>
c000a737:	d9 05 30 0d 02 c0    	fld    DWORD PTR ds:0xc0020d30
c000a73d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a740:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a743:	dd 06                	fld    QWORD PTR [esi]
c000a745:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a748:	d8 d1                	fcom   st(1)
c000a74a:	df e0                	fnstsw ax
c000a74c:	9e                   	sahf   
c000a74d:	76 0f                	jbe    c000a75e <sinc_mono_vari_process+0x88>
c000a74f:	dd d8                	fstp   st(0)
c000a751:	d9 e8                	fld1   
c000a753:	d8 d9                	fcomp  st(1)
c000a755:	df e0                	fnstsw ax
c000a757:	9e                   	sahf   
c000a758:	77 0f                	ja     c000a769 <sinc_mono_vari_process+0x93>
c000a75a:	dd d8                	fstp   st(0)
c000a75c:	eb 11                	jmp    c000a76f <sinc_mono_vari_process+0x99>
c000a75e:	dd d9                	fstp   st(1)
c000a760:	d9 e8                	fld1   
c000a762:	d8 d9                	fcomp  st(1)
c000a764:	df e0                	fnstsw ax
c000a766:	9e                   	sahf   
c000a767:	76 04                	jbe    c000a76d <sinc_mono_vari_process+0x97>
c000a769:	de f9                	fdivp  st(1),st
c000a76b:	eb 02                	jmp    c000a76f <sinc_mono_vari_process+0x99>
c000a76d:	dd d8                	fstp   st(0)
c000a76f:	83 ec 10             	sub    esp,0x10
c000a772:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a775:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a778:	e8 73 4c 01 00       	call   c001f3f0 <lrint>
c000a77d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a780:	40                   	inc    eax
c000a781:	dd 14 24             	fst    QWORD PTR [esp]
c000a784:	0f af e8             	imul   ebp,eax
c000a787:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a78b:	e8 74 f3 ff ff       	call   c0009b04 <fmod_one>
c000a790:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a793:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a797:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a79b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a79f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7a2:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a7a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7aa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7ad:	e8 3e 4c 01 00       	call   c001f3f0 <lrint>
c000a7b2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7b7:	d9 e8                	fld1   
c000a7b9:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7bd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7c1:	99                   	cdq    
c000a7c2:	dc 05 98 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b98
c000a7c8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7cb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7db:	7d 44                	jge    c000a821 <sinc_mono_vari_process+0x14b>
c000a7dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7e3:	01 c8                	add    eax,ecx
c000a7e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7e8:	99                   	cdq    
c000a7e9:	f7 f9                	idiv   ecx
c000a7eb:	39 d5                	cmp    ebp,edx
c000a7ed:	7d 09                	jge    c000a7f8 <sinc_mono_vari_process+0x122>
c000a7ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7f2:	85 c0                	test   eax,eax
c000a7f4:	79 52                	jns    c000a848 <sinc_mono_vari_process+0x172>
c000a7f6:	eb 6b                	jmp    c000a863 <sinc_mono_vari_process+0x18d>
c000a7f8:	52                   	push   edx
c000a7f9:	55                   	push   ebp
c000a7fa:	57                   	push   edi
c000a7fb:	53                   	push   ebx
c000a7fc:	e8 5a f3 ff ff       	call   c0009b5b <prepare_data>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a807:	85 c0                	test   eax,eax
c000a809:	0f 85 3d 01 00 00    	jne    c000a94c <sinc_mono_vari_process+0x276>
c000a80f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a812:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a815:	01 c8                	add    eax,ecx
c000a817:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a81a:	99                   	cdq    
c000a81b:	f7 f9                	idiv   ecx
c000a81d:	39 d5                	cmp    ebp,edx
c000a81f:	7c ce                	jl     c000a7ef <sinc_mono_vari_process+0x119>
c000a821:	dd 04 24             	fld    QWORD PTR [esp]
c000a824:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a827:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a82b:	dd 1e                	fstp   QWORD PTR [esi]
c000a82d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a830:	99                   	cdq    
c000a831:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a834:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a837:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a83a:	99                   	cdq    
c000a83b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a83e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a841:	31 c0                	xor    eax,eax
c000a843:	e9 04 01 00 00       	jmp    c000a94c <sinc_mono_vari_process+0x276>
c000a848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a84c:	dd 04 24             	fld    QWORD PTR [esp]
c000a84f:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a852:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a856:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a85a:	d9 c9                	fxch   st(1)
c000a85c:	de d9                	fcompp 
c000a85e:	df e0                	fnstsw ax
c000a860:	9e                   	sahf   
c000a861:	77 be                	ja     c000a821 <sinc_mono_vari_process+0x14b>
c000a863:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a867:	7e 31                	jle    c000a89a <sinc_mono_vari_process+0x1c4>
c000a869:	83 ec 10             	sub    esp,0x10
c000a86c:	dd 06                	fld    QWORD PTR [esi]
c000a86e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a871:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a874:	e8 57 4b 01 00       	call   c001f3d0 <fabs>
c000a879:	83 c4 10             	add    esp,0x10
c000a87c:	dc 1d 20 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d20
c000a882:	df e0                	fnstsw ax
c000a884:	9e                   	sahf   
c000a885:	76 13                	jbe    c000a89a <sinc_mono_vari_process+0x1c4>
c000a887:	dd 06                	fld    QWORD PTR [esi]
c000a889:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a88c:	d8 e1                	fsub   st,st(1)
c000a88e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a891:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a894:	de c1                	faddp  st(1),st
c000a896:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a89a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a89d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a8a1:	d9 e8                	fld1   
c000a8a3:	d8 d9                	fcomp  st(1)
c000a8a5:	df e0                	fnstsw ax
c000a8a7:	9e                   	sahf   
c000a8a8:	77 04                	ja     c000a8ae <sinc_mono_vari_process+0x1d8>
c000a8aa:	dd d8                	fstp   st(0)
c000a8ac:	d9 e8                	fld1   
c000a8ae:	de c9                	fmulp  st(1),st
c000a8b0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8b4:	50                   	push   eax
c000a8b5:	50                   	push   eax
c000a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 2e f2 ff ff       	call   c0009af1 <double_to_fp>
c000a8c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8c7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8cb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8cf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8d2:	e8 1a f2 ff ff       	call   c0009af1 <double_to_fp>
c000a8d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8db:	89 c1                	mov    ecx,eax
c000a8dd:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8e1:	89 d8                	mov    eax,ebx
c000a8e3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8ea:	e8 7b e7 ff ff       	call   c000906a <calc_output_single>
c000a8ef:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8f2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8f5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8f9:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8fc:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8ff:	d9 e8                	fld1   
c000a901:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a905:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a909:	dd 14 24             	fst    QWORD PTR [esp]
c000a90c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a910:	e8 ef f1 ff ff       	call   c0009b04 <fmod_one>
c000a915:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a918:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a91c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a920:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a924:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a927:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a92b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a92f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a932:	e8 b9 4a 01 00       	call   c001f3f0 <lrint>
c000a937:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a93c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a940:	99                   	cdq    
c000a941:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a944:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a947:	e9 86 fe ff ff       	jmp    c000a7d2 <sinc_mono_vari_process+0xfc>
c000a94c:	83 c4 3c             	add    esp,0x3c
c000a94f:	5b                   	pop    ebx
c000a950:	5e                   	pop    esi
c000a951:	5f                   	pop    edi
c000a952:	5d                   	pop    ebp
c000a953:	c3                   	ret    

c000a954 <sinc_get_name>:
c000a954:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a958:	31 c0                	xor    eax,eax
c000a95a:	83 fa 02             	cmp    edx,0x2
c000a95d:	77 07                	ja     c000a966 <sinc_get_name+0x12>
c000a95f:	8b 04 95 00 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf400]
c000a966:	c3                   	ret    

c000a967 <sinc_get_description>:
c000a967:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a96b:	31 c0                	xor    eax,eax
c000a96d:	83 fa 02             	cmp    edx,0x2
c000a970:	77 07                	ja     c000a979 <sinc_get_description+0x12>
c000a972:	8b 04 95 f4 0b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf40c]
c000a979:	c3                   	ret    

c000a97a <sinc_set_converter>:
c000a97a:	53                   	push   ebx
c000a97b:	81 ec 58 08 00 00    	sub    esp,0x858
c000a981:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a988:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a98b:	85 c0                	test   eax,eax
c000a98d:	74 13                	je     c000a9a2 <sinc_set_converter+0x28>
c000a98f:	83 ec 0c             	sub    esp,0xc
c000a992:	50                   	push   eax
c000a993:	e8 94 16 00 00       	call   c000c02c <free>
c000a998:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	50                   	push   eax
c000a9a3:	68 44 08 00 00       	push   0x844
c000a9a8:	6a 00                	push   0x0
c000a9aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a9ae:	50                   	push   eax
c000a9af:	e8 06 5d ff ff       	call   c00006ba <memset>
c000a9b4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	b8 0b 00 00 00       	mov    eax,0xb
c000a9bf:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9c5:	7f 6e                	jg     c000aa35 <sinc_set_converter+0xbb>
c000a9c7:	83 fa 01             	cmp    edx,0x1
c000a9ca:	75 10                	jne    c000a9dc <sinc_set_converter+0x62>
c000a9cc:	c7 43 24 d6 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6d6
c000a9d3:	c7 43 20 d6 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6d6
c000a9da:	eb 4d                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000a9dc:	83 fa 02             	cmp    edx,0x2
c000a9df:	75 10                	jne    c000a9f1 <sinc_set_converter+0x77>
c000a9e1:	c7 43 24 57 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a457
c000a9e8:	c7 43 20 57 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a457
c000a9ef:	eb 38                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000a9f1:	83 fa 04             	cmp    edx,0x4
c000a9f4:	75 10                	jne    c000aa06 <sinc_set_converter+0x8c>
c000a9f6:	c7 43 24 d8 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1d8
c000a9fd:	c7 43 20 d8 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1d8
c000aa04:	eb 23                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000aa06:	83 fa 06             	cmp    edx,0x6
c000aa09:	75 10                	jne    c000aa1b <sinc_set_converter+0xa1>
c000aa0b:	c7 43 24 59 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f59
c000aa12:	c7 43 20 59 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f59
c000aa19:	eb 0e                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000aa1b:	c7 43 24 d5 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cd5
c000aa22:	c7 43 20 d5 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cd5
c000aa29:	c7 43 28 85 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009685
c000aa30:	b8 0a 00 00 00       	mov    eax,0xa
c000aa35:	81 c4 58 08 00 00    	add    esp,0x858
c000aa3b:	5b                   	pop    ebx
c000aa3c:	c3                   	ret    

c000aa3d <is_bad_src_ratio>:
c000aa3d:	83 ec 0c             	sub    esp,0xc
c000aa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa44:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4f:	dd 04 24             	fld    QWORD PTR [esp]
c000aa52:	dd 05 20 0b 02 c0    	fld    QWORD PTR ds:0xc0020b20
c000aa58:	de d9                	fcompp 
c000aa5a:	df e0                	fnstsw ax
c000aa5c:	f6 c4 45             	test   ah,0x45
c000aa5f:	74 10                	je     c000aa71 <is_bad_src_ratio+0x34>
c000aa61:	dd 04 24             	fld    QWORD PTR [esp]
c000aa64:	dc 1d 28 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b28
c000aa6a:	df e0                	fnstsw ax
c000aa6c:	f6 c4 45             	test   ah,0x45
c000aa6f:	75 07                	jne    c000aa78 <is_bad_src_ratio+0x3b>
c000aa71:	b8 01 00 00 00       	mov    eax,0x1
c000aa76:	eb 05                	jmp    c000aa7d <is_bad_src_ratio+0x40>
c000aa78:	b8 00 00 00 00       	mov    eax,0x0
c000aa7d:	83 c4 0c             	add    esp,0xc
c000aa80:	c3                   	ret    

c000aa81 <fmod_one>:
c000aa81:	83 ec 2c             	sub    esp,0x2c
c000aa84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa94:	83 ec 08             	sub    esp,0x8
c000aa97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9f:	e8 4c 49 01 00       	call   c001f3f0 <lrint>
c000aaa4:	83 c4 10             	add    esp,0x10
c000aaa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aaab:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aaaf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aab3:	de e1                	fsubrp st(1),st
c000aab5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aab9:	d9 ee                	fldz   
c000aabb:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aabf:	df e0                	fnstsw ax
c000aac1:	f6 c4 45             	test   ah,0x45
c000aac4:	75 0a                	jne    c000aad0 <fmod_one+0x4f>
c000aac6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaca:	d9 e8                	fld1   
c000aacc:	de c1                	faddp  st(1),st
c000aace:	eb 04                	jmp    c000aad4 <fmod_one+0x53>
c000aad0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aad4:	83 c4 2c             	add    esp,0x2c
c000aad7:	c3                   	ret    

c000aad8 <zoh_vari_process>:
c000aad8:	55                   	push   ebp
c000aad9:	57                   	push   edi
c000aada:	56                   	push   esi
c000aadb:	53                   	push   ebx
c000aadc:	83 ec 2c             	sub    esp,0x2c
c000aadf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aae3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aae7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aaef:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aaf3:	0f 8e 34 02 00 00    	jle    c000ad2d <zoh_vari_process+0x255>
c000aaf9:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aafc:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ab04:	85 db                	test   ebx,ebx
c000ab06:	0f 84 21 02 00 00    	je     c000ad2d <zoh_vari_process+0x255>
c000ab0c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab0f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab13:	74 19                	je     c000ab2e <zoh_vari_process+0x56>
c000ab15:	31 d2                	xor    edx,edx
c000ab17:	39 c2                	cmp    edx,eax
c000ab19:	7d 0c                	jge    c000ab27 <zoh_vari_process+0x4f>
c000ab1b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab1d:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab20:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab24:	42                   	inc    edx
c000ab25:	eb f0                	jmp    c000ab17 <zoh_vari_process+0x3f>
c000ab27:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab2e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab31:	0f af d0             	imul   edx,eax
c000ab34:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab37:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab3b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab42:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab45:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab4c:	dd 07                	fld    QWORD PTR [edi]
c000ab4e:	dd 14 24             	fst    QWORD PTR [esp]
c000ab51:	50                   	push   eax
c000ab52:	50                   	push   eax
c000ab53:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab56:	e8 e2 fe ff ff       	call   c000aa3d <is_bad_src_ratio>
c000ab5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab5f:	5a                   	pop    edx
c000ab60:	59                   	pop    ecx
c000ab61:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab66:	0f 85 b9 01 00 00    	jne    c000ad25 <zoh_vari_process+0x24d>
c000ab6c:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab6f:	d9 e8                	fld1   
c000ab71:	d8 d1                	fcom   st(1)
c000ab73:	df e0                	fnstsw ax
c000ab75:	9e                   	sahf   
c000ab76:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab7a:	0f 86 85 00 00 00    	jbe    c000ac05 <zoh_vari_process+0x12d>
c000ab80:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab83:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab86:	7d 7d                	jge    c000ac05 <zoh_vari_process+0x12d>
c000ab88:	d9 c0                	fld    st(0)
c000ab8a:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab8d:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab90:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab93:	df e0                	fnstsw ax
c000ab95:	9e                   	sahf   
c000ab96:	73 6d                	jae    c000ac05 <zoh_vari_process+0x12d>
c000ab98:	85 d2                	test   edx,edx
c000ab9a:	7e 38                	jle    c000abd4 <zoh_vari_process+0xfc>
c000ab9c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aba0:	83 ec 10             	sub    esp,0x10
c000aba3:	dd 07                	fld    QWORD PTR [edi]
c000aba5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aba8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abab:	e8 20 48 01 00       	call   c001f3d0 <fabs>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	dc 1d 98 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b98
c000abb9:	df e0                	fnstsw ax
c000abbb:	9e                   	sahf   
c000abbc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abc0:	76 12                	jbe    c000abd4 <zoh_vari_process+0xfc>
c000abc2:	dd 07                	fld    QWORD PTR [edi]
c000abc4:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abc7:	d8 e1                	fsub   st,st(1)
c000abc9:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abcc:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abcf:	de c1                	faddp  st(1),st
c000abd1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abd4:	31 c0                	xor    eax,eax
c000abd6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abd9:	7e 13                	jle    c000abee <zoh_vari_process+0x116>
c000abdb:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abdf:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abe2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abe5:	40                   	inc    eax
c000abe6:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abe9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abec:	eb e8                	jmp    c000abd6 <zoh_vari_process+0xfe>
c000abee:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abf2:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abf5:	de c1                	faddp  st(1),st
c000abf7:	e9 73 ff ff ff       	jmp    c000ab6f <zoh_vari_process+0x97>
c000abfc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac00:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac03:	de c1                	faddp  st(1),st
c000ac05:	83 ec 10             	sub    esp,0x10
c000ac08:	dd 14 24             	fst    QWORD PTR [esp]
c000ac0b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac0f:	e8 6d fe ff ff       	call   c000aa81 <fmod_one>
c000ac14:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac17:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac1b:	d8 e1                	fsub   st,st(1)
c000ac1d:	d9 c9                	fxch   st(1)
c000ac1f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac23:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac26:	e8 c5 47 01 00       	call   c001f3f0 <lrint>
c000ac2b:	83 c4 10             	add    esp,0x10
c000ac2e:	0f af e8             	imul   ebp,eax
c000ac31:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac34:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac37:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac3b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac3e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac41:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac44:	0f 8d 82 00 00 00    	jge    c000accc <zoh_vari_process+0x1f4>
c000ac4a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac4e:	d9 c0                	fld    st(0)
c000ac50:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac53:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac57:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac5b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac5f:	de d9                	fcompp 
c000ac61:	df e0                	fnstsw ax
c000ac63:	9e                   	sahf   
c000ac64:	72 66                	jb     c000accc <zoh_vari_process+0x1f4>
c000ac66:	85 d2                	test   edx,edx
c000ac68:	7e 38                	jle    c000aca2 <zoh_vari_process+0x1ca>
c000ac6a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac6e:	83 ec 10             	sub    esp,0x10
c000ac71:	dd 07                	fld    QWORD PTR [edi]
c000ac73:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac76:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac79:	e8 52 47 01 00       	call   c001f3d0 <fabs>
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	dc 1d 98 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b98
c000ac87:	df e0                	fnstsw ax
c000ac89:	9e                   	sahf   
c000ac8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac8e:	76 12                	jbe    c000aca2 <zoh_vari_process+0x1ca>
c000ac90:	dd 07                	fld    QWORD PTR [edi]
c000ac92:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac95:	d8 e1                	fsub   st,st(1)
c000ac97:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac9a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac9d:	de c1                	faddp  st(1),st
c000ac9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aca2:	31 d2                	xor    edx,edx
c000aca4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aca7:	39 d0                	cmp    eax,edx
c000aca9:	0f 8e 4d ff ff ff    	jle    c000abfc <zoh_vari_process+0x124>
c000acaf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000acb2:	29 c1                	sub    ecx,eax
c000acb4:	89 c8                	mov    eax,ecx
c000acb6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acb8:	01 d0                	add    eax,edx
c000acba:	42                   	inc    edx
c000acbb:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000acbe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000acc1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acc4:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000acc7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acca:	eb d8                	jmp    c000aca4 <zoh_vari_process+0x1cc>
c000accc:	39 e9                	cmp    ecx,ebp
c000acce:	7d 13                	jge    c000ace3 <zoh_vari_process+0x20b>
c000acd0:	89 e8                	mov    eax,ebp
c000acd2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acd5:	29 c8                	sub    eax,ecx
c000acd7:	99                   	cdq    
c000acd8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acdf:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ace3:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ace6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ace9:	85 c0                	test   eax,eax
c000aceb:	7f 1b                	jg     c000ad08 <zoh_vari_process+0x230>
c000aced:	dd 04 24             	fld    QWORD PTR [esp]
c000acf0:	dd 1f                	fstp   QWORD PTR [edi]
c000acf2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acf5:	99                   	cdq    
c000acf6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acf9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acfc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acff:	99                   	cdq    
c000ad00:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad03:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ad06:	eb 25                	jmp    c000ad2d <zoh_vari_process+0x255>
c000ad08:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ad0b:	31 d2                	xor    edx,edx
c000ad0d:	29 e8                	sub    eax,ebp
c000ad0f:	c1 e0 02             	shl    eax,0x2
c000ad12:	39 d5                	cmp    ebp,edx
c000ad14:	7e d7                	jle    c000aced <zoh_vari_process+0x215>
c000ad16:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad18:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad1b:	83 c0 04             	add    eax,0x4
c000ad1e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad22:	42                   	inc    edx
c000ad23:	eb ed                	jmp    c000ad12 <zoh_vari_process+0x23a>
c000ad25:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad31:	83 c4 2c             	add    esp,0x2c
c000ad34:	5b                   	pop    ebx
c000ad35:	5e                   	pop    esi
c000ad36:	5f                   	pop    edi
c000ad37:	5d                   	pop    ebp
c000ad38:	c3                   	ret    

c000ad39 <zoh_reset>:
c000ad39:	83 ec 0c             	sub    esp,0xc
c000ad3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad40:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 20                	je     c000ad67 <zoh_reset+0x2e>
c000ad47:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad4a:	83 c0 1c             	add    eax,0x1c
c000ad4d:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ad50:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000ad57:	c1 e2 02             	shl    edx,0x2
c000ad5a:	51                   	push   ecx
c000ad5b:	52                   	push   edx
c000ad5c:	6a 00                	push   0x0
c000ad5e:	50                   	push   eax
c000ad5f:	e8 56 59 ff ff       	call   c00006ba <memset>
c000ad64:	83 c4 10             	add    esp,0x10
c000ad67:	83 c4 0c             	add    esp,0xc
c000ad6a:	c3                   	ret    

c000ad6b <zoh_get_name>:
c000ad6b:	31 c0                	xor    eax,eax
c000ad6d:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad72:	75 05                	jne    c000ad79 <zoh_get_name+0xe>
c000ad74:	b8 34 0d 02 c0       	mov    eax,0xc0020d34
c000ad79:	c3                   	ret    

c000ad7a <zoh_get_description>:
c000ad7a:	31 c0                	xor    eax,eax
c000ad7c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad81:	75 05                	jne    c000ad88 <zoh_get_description+0xe>
c000ad83:	b8 45 0d 02 c0       	mov    eax,0xc0020d45
c000ad88:	c3                   	ret    

c000ad89 <zoh_set_converter>:
c000ad89:	53                   	push   ebx
c000ad8a:	b8 0a 00 00 00       	mov    eax,0xa
c000ad8f:	83 ec 08             	sub    esp,0x8
c000ad92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad96:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad9b:	75 6e                	jne    c000ae0b <zoh_set_converter+0x82>
c000ad9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ada0:	85 c0                	test   eax,eax
c000ada2:	74 13                	je     c000adb7 <zoh_set_converter+0x2e>
c000ada4:	83 ec 0c             	sub    esp,0xc
c000ada7:	50                   	push   eax
c000ada8:	e8 7f 12 00 00       	call   c000c02c <free>
c000adad:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	50                   	push   eax
c000adb8:	50                   	push   eax
c000adb9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adbc:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000adc3:	50                   	push   eax
c000adc4:	6a 01                	push   0x1
c000adc6:	e8 81 12 00 00       	call   c000c04c <calloc>
c000adcb:	83 c4 10             	add    esp,0x10
c000adce:	89 c2                	mov    edx,eax
c000add0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000add3:	85 d2                	test   edx,edx
c000add5:	b8 01 00 00 00       	mov    eax,0x1
c000adda:	74 2f                	je     c000ae0b <zoh_set_converter+0x82>
c000addc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000addf:	83 ec 0c             	sub    esp,0xc
c000ade2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ade5:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adeb:	c7 43 24 d8 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aad8
c000adf2:	c7 43 20 d8 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aad8
c000adf9:	c7 43 28 39 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad39
c000ae00:	53                   	push   ebx
c000ae01:	e8 33 ff ff ff       	call   c000ad39 <zoh_reset>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	31 c0                	xor    eax,eax
c000ae0b:	83 c4 08             	add    esp,0x8
c000ae0e:	5b                   	pop    ebx
c000ae0f:	c3                   	ret    

c000ae10 <Computer::close(int, int, void*)>:
c000ae10:	57                   	push   edi
c000ae11:	56                   	push   esi
c000ae12:	53                   	push   ebx
c000ae13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae1f:	83 ec 0c             	sub    esp,0xc
c000ae22:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ae28:	e8 61 58 00 00       	call   c001068e <Device::closeAll()>
c000ae2d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae38:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae3c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae44:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae4c:	5b                   	pop    ebx
c000ae4d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae50:	5e                   	pop    esi
c000ae51:	5f                   	pop    edi
c000ae52:	ff e0                	jmp    eax

c000ae54 <Computer::Computer()>:
c000ae54:	83 ec 0c             	sub    esp,0xc
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	83 ec 08             	sub    esp,0x8
c000ae5e:	68 7c 0d 02 c0       	push   0xc0020d7c
c000ae63:	50                   	push   eax
c000ae64:	e8 9f 58 00 00       	call   c0010708 <Device::Device(char const*)>
c000ae69:	83 c4 10             	add    esp,0x10
c000ae6c:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c000ae71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae75:	89 10                	mov    DWORD PTR [eax],edx
c000ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae9d:	83 ca 04             	or     edx,0x4
c000aea0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000aea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb0:	0f b6 d0             	movzx  edx,al
c000aeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec8:	0f b6 d0             	movzx  edx,al
c000aecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aede:	8d 50 01             	lea    edx,[eax+0x1]
c000aee1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aeeb:	0f b6 d0             	movzx  edx,al
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef6:	83 e1 3f             	and    ecx,0x3f
c000aef9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af07:	0f b6 d0             	movzx  edx,al
c000af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af1f:	0f b6 d0             	movzx  edx,al
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af35:	8d 50 01             	lea    edx,[eax+0x1]
c000af38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af3c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af42:	0f b6 d0             	movzx  edx,al
c000af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af49:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af4d:	83 e1 3f             	and    ecx,0x3f
c000af50:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5e:	0f b6 d0             	movzx  edx,al
c000af61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af65:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af76:	0f b6 d0             	movzx  edx,al
c000af79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af8c:	8d 50 01             	lea    edx,[eax+0x1]
c000af8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af93:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af99:	0f b6 d0             	movzx  edx,al
c000af9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000afa4:	83 e1 3f             	and    ecx,0x3f
c000afa7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afab:	90                   	nop
c000afac:	83 c4 0c             	add    esp,0xc
c000afaf:	c3                   	ret    

c000afb0 <Computer::setBootMessage(char const*)>:
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop

c000afb2 <Computer::start()>:
c000afb2:	56                   	push   esi
c000afb3:	53                   	push   ebx
c000afb4:	50                   	push   eax
c000afb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afb9:	e8 6e d8 00 00       	call   c001882c <lockScheduler()>
c000afbe:	e8 9d db 00 00       	call   c0018b60 <schedule()>
c000afc3:	e8 66 d8 00 00       	call   c001882e <unlockScheduler()>
c000afc8:	fb                   	sti    
c000afc9:	83 ec 0c             	sub    esp,0xc
c000afcc:	68 3b 07 00 00       	push   0x73b
c000afd1:	e8 48 40 00 00       	call   c000f01e <operator new(unsigned long)>
c000afd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afdd:	89 c6                	mov    esi,eax
c000afdf:	ff 35 b4 57 02 c0    	push   DWORD PTR ds:0xc00257b4
c000afe5:	68 85 0d 02 c0       	push   0xc0020d85
c000afea:	6a 01                	push   0x1
c000afec:	50                   	push   eax
c000afed:	e8 9a d6 00 00       	call   c001868c <Process::Process(bool, char const*, Process*, char**)>
c000aff2:	83 c4 20             	add    esp,0x20
c000aff5:	68 ff 00 00 00       	push   0xff
c000affa:	6a 00                	push   0x0
c000affc:	68 a9 b9 00 c0       	push   0xc000b9a9
c000b001:	56                   	push   esi
c000b002:	e8 4f d9 00 00       	call   c0018956 <Process::createThread(void (*)(void*), void*, int)>
c000b007:	6a 7a                	push   0x7a
c000b009:	6a 00                	push   0x0
c000b00b:	68 8f 91 01 c0       	push   0xc001918f
c000b010:	ff 35 b4 57 02 c0    	push   DWORD PTR ds:0xc00257b4
c000b016:	e8 3b d9 00 00       	call   c0018956 <Process::createThread(void (*)(void*), void*, int)>
c000b01b:	83 c4 20             	add    esp,0x20
c000b01e:	a3 68 57 02 c0       	mov    ds:0xc0025768,eax
c000b023:	c6 05 6d 43 02 c0 01 	mov    BYTE PTR ds:0xc002436d,0x1
c000b02a:	e8 39 44 00 00       	call   c000f468 <initVFS()>
c000b02f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b035:	8b 10                	mov    edx,DWORD PTR [eax]
c000b037:	6a 00                	push   0x0
c000b039:	6a 00                	push   0x0
c000b03b:	6a 00                	push   0x0
c000b03d:	50                   	push   eax
c000b03e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b041:	e8 43 c0 00 00       	call   c0017089 <setupSystemCalls()>
c000b046:	e8 1b 4f 00 00       	call   c000ff66 <loadClockSettings()>
c000b04b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b04e:	e8 0f 56 00 00       	call   c0010662 <Device::loadDriversForAll()>
c000b053:	5a                   	pop    edx
c000b054:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c000b05a:	59                   	pop    ecx
c000b05b:	6a 01                	push   0x1
c000b05d:	68 92 0d 02 c0       	push   0xc0020d92
c000b062:	e8 f4 d1 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c000b067:	5e                   	pop    esi
c000b068:	5a                   	pop    edx
c000b069:	53                   	push   ebx
c000b06a:	50                   	push   eax
c000b06b:	e8 b1 d3 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c000b070:	c7 04 24 08 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f08
c000b077:	e8 91 40 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	83 ec 0c             	sub    esp,0xc
c000b082:	6a 02                	push   0x2
c000b084:	e8 31 dc 00 00       	call   c0018cba <blockTask(TaskState)>
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	eb f1                	jmp    c000b07f <Computer::start()+0xcd>

c000b08e <firstTask()>:
c000b08e:	83 ec 18             	sub    esp,0x18
c000b091:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c000b097:	e8 16 ff ff ff       	call   c000afb2 <Computer::start()>

c000b09c <Computer::detectFeatures()>:
c000b09c:	55                   	push   ebp
c000b09d:	57                   	push   edi
c000b09e:	56                   	push   esi
c000b09f:	53                   	push   ebx
c000b0a0:	83 ec 1c             	sub    esp,0x1c
c000b0a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0a7:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b0b1:	e8 bb 52 ff ff       	call   c0000371 <detectCPUID>
c000b0b6:	85 c0                	test   eax,eax
c000b0b8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0be:	0f 95 c2             	setne  dl
c000b0c1:	83 e0 fd             	and    eax,0xfffffffd
c000b0c4:	d1 e2                	shl    edx,1
c000b0c6:	09 d0                	or     eax,edx
c000b0c8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ce:	a8 02                	test   al,0x2
c000b0d0:	75 46                	jne    c000b118 <Computer::detectFeatures()+0x7c>
c000b0d2:	f6 05 81 43 02 c0 04 	test   BYTE PTR ds:0xc0024381,0x4
c000b0d9:	74 07                	je     c000b0e2 <Computer::detectFeatures()+0x46>
c000b0db:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0e2:	e8 8f 3d 01 00       	call   c001ee76 <x87Detect>
c000b0e7:	83 e0 01             	and    eax,0x1
c000b0ea:	c1 e0 04             	shl    eax,0x4
c000b0ed:	88 c2                	mov    dl,al
c000b0ef:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0f5:	83 e0 ef             	and    eax,0xffffffef
c000b0f8:	09 d0                	or     eax,edx
c000b0fa:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b100:	a8 10                	test   al,0x10
c000b102:	0f 85 10 01 00 00    	jne    c000b218 <Computer::detectFeatures()+0x17c>
c000b108:	84 c0                	test   al,al
c000b10a:	0f 88 2b 01 00 00    	js     c000b23b <Computer::detectFeatures()+0x19f>
c000b110:	83 c4 1c             	add    esp,0x1c
c000b113:	5b                   	pop    ebx
c000b114:	5e                   	pop    esi
c000b115:	5f                   	pop    edi
c000b116:	5d                   	pop    ebp
c000b117:	c3                   	ret    
c000b118:	83 ec 0c             	sub    esp,0xc
c000b11b:	6a 20                	push   0x20
c000b11d:	e8 7d 95 00 00       	call   c001469f <cpuidCheckEDX(unsigned int)>
c000b122:	83 e0 01             	and    eax,0x1
c000b125:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b12c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b132:	83 e0 f7             	and    eax,0xfffffff7
c000b135:	09 d0                	or     eax,edx
c000b137:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b13d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b144:	e8 56 95 00 00       	call   c001469f <cpuidCheckEDX(unsigned int)>
c000b149:	83 e0 01             	and    eax,0x1
c000b14c:	88 c2                	mov    dl,al
c000b14e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b154:	83 e0 fe             	and    eax,0xfffffffe
c000b157:	09 d0                	or     eax,edx
c000b159:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b15f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b166:	e8 34 95 00 00       	call   c001469f <cpuidCheckEDX(unsigned int)>
c000b16b:	c1 e0 07             	shl    eax,0x7
c000b16e:	88 c2                	mov    dl,al
c000b170:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b181:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b188:	e8 12 95 00 00       	call   c001469f <cpuidCheckEDX(unsigned int)>
c000b18d:	83 c4 10             	add    esp,0x10
c000b190:	83 e0 01             	and    eax,0x1
c000b193:	c1 e0 05             	shl    eax,0x5
c000b196:	88 c2                	mov    dl,al
c000b198:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b19e:	83 e0 df             	and    eax,0xffffffdf
c000b1a1:	09 d0                	or     eax,edx
c000b1a3:	f7 05 80 43 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024380,0x401
c000b1ad:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1b3:	0f 84 a8 00 00 00    	je     c000b261 <Computer::detectFeatures()+0x1c5>
c000b1b9:	83 ec 0c             	sub    esp,0xc
c000b1bc:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b1c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1c7:	50                   	push   eax
c000b1c8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1cc:	55                   	push   ebp
c000b1cd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1d1:	57                   	push   edi
c000b1d2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1d6:	56                   	push   esi
c000b1d7:	68 00 00 00 80       	push   0x80000000
c000b1dc:	e8 3b 94 00 00       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1e1:	83 c4 20             	add    esp,0x20
c000b1e4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1ef:	0f 86 dd fe ff ff    	jbe    c000b0d2 <Computer::detectFeatures()+0x36>
c000b1f5:	83 ec 0c             	sub    esp,0xc
c000b1f8:	50                   	push   eax
c000b1f9:	55                   	push   ebp
c000b1fa:	57                   	push   edi
c000b1fb:	56                   	push   esi
c000b1fc:	68 01 00 00 80       	push   0x80000001
c000b201:	e8 16 94 00 00       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b206:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b210:	83 c4 20             	add    esp,0x20
c000b213:	e9 ba fe ff ff       	jmp    c000b0d2 <Computer::detectFeatures()+0x36>
c000b218:	e8 13 3c 01 00       	call   c001ee30 <sseDetect>
c000b21d:	88 c2                	mov    dl,al
c000b21f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b225:	c1 e2 07             	shl    edx,0x7
c000b228:	83 e0 7f             	and    eax,0x7f
c000b22b:	09 d0                	or     eax,edx
c000b22d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b233:	84 c0                	test   al,al
c000b235:	0f 89 d5 fe ff ff    	jns    c000b110 <Computer::detectFeatures()+0x74>
c000b23b:	e8 e0 3b 01 00       	call   c001ee20 <avxDetect>
c000b240:	83 e0 01             	and    eax,0x1
c000b243:	c1 e0 05             	shl    eax,0x5
c000b246:	88 c2                	mov    dl,al
c000b248:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b24e:	83 e0 df             	and    eax,0xffffffdf
c000b251:	09 d0                	or     eax,edx
c000b253:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b259:	83 c4 1c             	add    esp,0x1c
c000b25c:	5b                   	pop    ebx
c000b25d:	5e                   	pop    esi
c000b25e:	5f                   	pop    edi
c000b25f:	5d                   	pop    ebp
c000b260:	c3                   	ret    
c000b261:	83 ec 0c             	sub    esp,0xc
c000b264:	68 00 02 00 00       	push   0x200
c000b269:	e8 31 94 00 00       	call   c001469f <cpuidCheckEDX(unsigned int)>
c000b26e:	83 c4 10             	add    esp,0x10
c000b271:	e9 43 ff ff ff       	jmp    c000b1b9 <Computer::detectFeatures()+0x11d>

c000b276 <Computer::displayFeatures()>:
c000b276:	53                   	push   ebx
c000b277:	83 ec 14             	sub    esp,0x14
c000b27a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b27e:	68 b5 0d 02 c0       	push   0xc0020db5
c000b283:	e8 85 3e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b292:	0f 85 73 02 00 00    	jne    c000b50b <Computer::displayFeatures()+0x295>
c000b298:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b29d:	83 ec 08             	sub    esp,0x8
c000b2a0:	50                   	push   eax
c000b2a1:	68 c8 0d 02 c0       	push   0xc0020dc8
c000b2a6:	e8 62 3e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2b5:	0f 85 8c 02 00 00    	jne    c000b547 <Computer::displayFeatures()+0x2d1>
c000b2bb:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b2c0:	83 ec 08             	sub    esp,0x8
c000b2c3:	50                   	push   eax
c000b2c4:	68 d9 0d 02 c0       	push   0xc0020dd9
c000b2c9:	e8 3f 3e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b2ce:	83 c4 10             	add    esp,0x10
c000b2d1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2d8:	0f 85 5f 02 00 00    	jne    c000b53d <Computer::displayFeatures()+0x2c7>
c000b2de:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b2e3:	83 ec 08             	sub    esp,0x8
c000b2e6:	50                   	push   eax
c000b2e7:	68 ea 0d 02 c0       	push   0xc0020dea
c000b2ec:	e8 1c 3e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b2f1:	83 c4 10             	add    esp,0x10
c000b2f4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2fb:	0f 85 32 02 00 00    	jne    c000b533 <Computer::displayFeatures()+0x2bd>
c000b301:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b306:	83 ec 08             	sub    esp,0x8
c000b309:	50                   	push   eax
c000b30a:	68 fb 0d 02 c0       	push   0xc0020dfb
c000b30f:	e8 f9 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b314:	83 c4 10             	add    esp,0x10
c000b317:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b31e:	0f 85 05 02 00 00    	jne    c000b529 <Computer::displayFeatures()+0x2b3>
c000b324:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b329:	83 ec 08             	sub    esp,0x8
c000b32c:	50                   	push   eax
c000b32d:	68 0c 0e 02 c0       	push   0xc0020e0c
c000b332:	e8 d6 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b337:	83 c4 10             	add    esp,0x10
c000b33a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b341:	0f 85 d8 01 00 00    	jne    c000b51f <Computer::displayFeatures()+0x2a9>
c000b347:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b34c:	83 ec 08             	sub    esp,0x8
c000b34f:	50                   	push   eax
c000b350:	68 1d 0e 02 c0       	push   0xc0020e1d
c000b355:	e8 b3 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b35a:	83 c4 10             	add    esp,0x10
c000b35d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b364:	0f 85 ab 01 00 00    	jne    c000b515 <Computer::displayFeatures()+0x29f>
c000b36a:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b36f:	83 ec 08             	sub    esp,0x8
c000b372:	50                   	push   eax
c000b373:	68 2e 0e 02 c0       	push   0xc0020e2e
c000b378:	e8 90 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b37d:	83 c4 10             	add    esp,0x10
c000b380:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b387:	0f 88 1b 02 00 00    	js     c000b5a8 <Computer::displayFeatures()+0x332>
c000b38d:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b392:	83 ec 08             	sub    esp,0x8
c000b395:	50                   	push   eax
c000b396:	68 3f 0e 02 c0       	push   0xc0020e3f
c000b39b:	e8 6d 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3aa:	0f 85 a1 01 00 00    	jne    c000b551 <Computer::displayFeatures()+0x2db>
c000b3b0:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b3b5:	83 ec 08             	sub    esp,0x8
c000b3b8:	50                   	push   eax
c000b3b9:	68 50 0e 02 c0       	push   0xc0020e50
c000b3be:	e8 4a 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b3c3:	83 c4 10             	add    esp,0x10
c000b3c6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3cd:	0f 85 cb 01 00 00    	jne    c000b59e <Computer::displayFeatures()+0x328>
c000b3d3:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b3d8:	83 ec 08             	sub    esp,0x8
c000b3db:	50                   	push   eax
c000b3dc:	68 61 0e 02 c0       	push   0xc0020e61
c000b3e1:	e8 27 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3f0:	0f 85 9e 01 00 00    	jne    c000b594 <Computer::displayFeatures()+0x31e>
c000b3f6:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b3fb:	83 ec 08             	sub    esp,0x8
c000b3fe:	50                   	push   eax
c000b3ff:	68 72 0e 02 c0       	push   0xc0020e72
c000b404:	e8 04 3d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b409:	83 c4 10             	add    esp,0x10
c000b40c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b413:	0f 85 71 01 00 00    	jne    c000b58a <Computer::displayFeatures()+0x314>
c000b419:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b41e:	83 ec 08             	sub    esp,0x8
c000b421:	50                   	push   eax
c000b422:	68 83 0e 02 c0       	push   0xc0020e83
c000b427:	e8 e1 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b42c:	83 c4 10             	add    esp,0x10
c000b42f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b436:	0f 85 44 01 00 00    	jne    c000b580 <Computer::displayFeatures()+0x30a>
c000b43c:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b441:	83 ec 08             	sub    esp,0x8
c000b444:	50                   	push   eax
c000b445:	68 94 0e 02 c0       	push   0xc0020e94
c000b44a:	e8 be 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b459:	0f 85 17 01 00 00    	jne    c000b576 <Computer::displayFeatures()+0x300>
c000b45f:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b464:	83 ec 08             	sub    esp,0x8
c000b467:	50                   	push   eax
c000b468:	68 a5 0e 02 c0       	push   0xc0020ea5
c000b46d:	e8 9b 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b472:	83 c4 10             	add    esp,0x10
c000b475:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b47c:	0f 85 ea 00 00 00    	jne    c000b56c <Computer::displayFeatures()+0x2f6>
c000b482:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b487:	83 ec 08             	sub    esp,0x8
c000b48a:	50                   	push   eax
c000b48b:	68 b6 0e 02 c0       	push   0xc0020eb6
c000b490:	e8 78 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b495:	83 c4 10             	add    esp,0x10
c000b498:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b49f:	0f 88 0d 01 00 00    	js     c000b5b2 <Computer::displayFeatures()+0x33c>
c000b4a5:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b4aa:	83 ec 08             	sub    esp,0x8
c000b4ad:	50                   	push   eax
c000b4ae:	68 c7 0e 02 c0       	push   0xc0020ec7
c000b4b3:	e8 55 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b4b8:	83 c4 10             	add    esp,0x10
c000b4bb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4c2:	0f 85 9a 00 00 00    	jne    c000b562 <Computer::displayFeatures()+0x2ec>
c000b4c8:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b4cd:	83 ec 08             	sub    esp,0x8
c000b4d0:	50                   	push   eax
c000b4d1:	68 d8 0e 02 c0       	push   0xc0020ed8
c000b4d6:	e8 32 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4e5:	75 74                	jne    c000b55b <Computer::displayFeatures()+0x2e5>
c000b4e7:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c000b4ec:	83 ec 08             	sub    esp,0x8
c000b4ef:	50                   	push   eax
c000b4f0:	68 e9 0e 02 c0       	push   0xc0020ee9
c000b4f5:	e8 13 3c 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b4fa:	c7 44 24 20 e6 24 02 c0 	mov    DWORD PTR [esp+0x20],0xc00224e6
c000b502:	83 c4 18             	add    esp,0x18
c000b505:	5b                   	pop    ebx
c000b506:	e9 02 3c 00 00       	jmp    c000f10d <Dbg::kprintf(char const*, ...)>
c000b50b:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b510:	e9 88 fd ff ff       	jmp    c000b29d <Computer::displayFeatures()+0x27>
c000b515:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b51a:	e9 50 fe ff ff       	jmp    c000b36f <Computer::displayFeatures()+0xf9>
c000b51f:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b524:	e9 23 fe ff ff       	jmp    c000b34c <Computer::displayFeatures()+0xd6>
c000b529:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b52e:	e9 f6 fd ff ff       	jmp    c000b329 <Computer::displayFeatures()+0xb3>
c000b533:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b538:	e9 c9 fd ff ff       	jmp    c000b306 <Computer::displayFeatures()+0x90>
c000b53d:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b542:	e9 9c fd ff ff       	jmp    c000b2e3 <Computer::displayFeatures()+0x6d>
c000b547:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b54c:	e9 6f fd ff ff       	jmp    c000b2c0 <Computer::displayFeatures()+0x4a>
c000b551:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b556:	e9 5a fe ff ff       	jmp    c000b3b5 <Computer::displayFeatures()+0x13f>
c000b55b:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b560:	eb 8a                	jmp    c000b4ec <Computer::displayFeatures()+0x276>
c000b562:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b567:	e9 61 ff ff ff       	jmp    c000b4cd <Computer::displayFeatures()+0x257>
c000b56c:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b571:	e9 11 ff ff ff       	jmp    c000b487 <Computer::displayFeatures()+0x211>
c000b576:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b57b:	e9 e4 fe ff ff       	jmp    c000b464 <Computer::displayFeatures()+0x1ee>
c000b580:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b585:	e9 b7 fe ff ff       	jmp    c000b441 <Computer::displayFeatures()+0x1cb>
c000b58a:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b58f:	e9 8a fe ff ff       	jmp    c000b41e <Computer::displayFeatures()+0x1a8>
c000b594:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b599:	e9 5d fe ff ff       	jmp    c000b3fb <Computer::displayFeatures()+0x185>
c000b59e:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b5a3:	e9 30 fe ff ff       	jmp    c000b3d8 <Computer::displayFeatures()+0x162>
c000b5a8:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b5ad:	e9 e0 fd ff ff       	jmp    c000b392 <Computer::displayFeatures()+0x11c>
c000b5b2:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c000b5b7:	e9 ee fe ff ff       	jmp    c000b4aa <Computer::displayFeatures()+0x234>

c000b5bc <Computer::rdmsr(unsigned int)>:
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ca:	74 0a                	je     c000b5d6 <Computer::rdmsr(unsigned int)+0x1a>
c000b5cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d0:	0f 32                	rdmsr  
c000b5d2:	83 c4 0c             	add    esp,0xc
c000b5d5:	c3                   	ret    
c000b5d6:	83 ec 0c             	sub    esp,0xc
c000b5d9:	68 fa 0e 02 c0       	push   0xc0020efa
c000b5de:	e8 f5 a2 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000b5e3:	83 c4 10             	add    esp,0x10
c000b5e6:	eb e4                	jmp    c000b5cc <Computer::rdmsr(unsigned int)+0x10>

c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5e8:	57                   	push   edi
c000b5e9:	56                   	push   esi
c000b5ea:	52                   	push   edx
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5f7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5fe:	74 0e                	je     c000b60e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b600:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b604:	89 f0                	mov    eax,esi
c000b606:	89 fa                	mov    edx,edi
c000b608:	0f 30                	wrmsr  
c000b60a:	58                   	pop    eax
c000b60b:	5e                   	pop    esi
c000b60c:	5f                   	pop    edi
c000b60d:	c3                   	ret    
c000b60e:	83 ec 0c             	sub    esp,0xc
c000b611:	68 00 0f 02 c0       	push   0xc0020f00
c000b616:	e8 bd a2 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	eb e0                	jmp    c000b600 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b620 <Computer::nmiEnabled()>:
c000b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b624:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Computer::readCMOS(unsigned char)>:
c000b62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b630:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b637:	19 c0                	sbb    eax,eax
c000b639:	83 e0 80             	and    eax,0xffffff80
c000b63c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b640:	e6 70                	out    0x70,al
c000b642:	e4 71                	in     al,0x71
c000b644:	c3                   	ret    
c000b645:	90                   	nop

c000b646 <Computer::enableNMI(bool)>:
c000b646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b64a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b654:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b65c:	eb ce                	jmp    c000b62c <Computer::readCMOS(unsigned char)>

c000b65e <Computer::open(int, int, void*)>:
c000b65e:	56                   	push   esi
c000b65f:	53                   	push   ebx
c000b660:	83 ec 10             	sub    esp,0x10
c000b663:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b667:	f6 05 80 43 02 c0 04 	test   BYTE PTR ds:0xc0024380,0x4
c000b66e:	68 68 22 00 00       	push   0x2268
c000b673:	0f 94 05 a0 37 02 c0 	sete   BYTE PTR ds:0xc00237a0
c000b67a:	e8 9f 39 00 00       	call   c000f01e <operator new(unsigned long)>
c000b67f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b682:	89 c6                	mov    esi,eax
c000b684:	e8 33 86 00 00       	call   c0013cbc <ACPI::ACPI()>
c000b689:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b68f:	58                   	pop    eax
c000b690:	5a                   	pop    edx
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	e8 80 4e 00 00       	call   c0010518 <Device::addChild(Device*)>
c000b698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b69b:	e8 fc f9 ff ff       	call   c000b09c <Computer::detectFeatures()>
c000b6a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6a3:	e8 ce fb ff ff       	call   c000b276 <Computer::displayFeatures()>
c000b6a8:	59                   	pop    ecx
c000b6a9:	5e                   	pop    esi
c000b6aa:	6a 01                	push   0x1
c000b6ac:	53                   	push   ebx
c000b6ad:	e8 94 ff ff ff       	call   c000b646 <Computer::enableNMI(bool)>
c000b6b2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6b9:	e8 60 39 00 00       	call   c000f01e <operator new(unsigned long)>
c000b6be:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6c1:	89 c6                	mov    esi,eax
c000b6c3:	e8 a2 90 00 00       	call   c001476a <CPU::CPU()>
c000b6c8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6ce:	58                   	pop    eax
c000b6cf:	5a                   	pop    edx
c000b6d0:	56                   	push   esi
c000b6d1:	53                   	push   ebx
c000b6d2:	e8 41 4e 00 00       	call   c0010518 <Device::addChild(Device*)>
c000b6d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6e3:	6a 00                	push   0x0
c000b6e5:	6a 00                	push   0x0
c000b6e7:	50                   	push   eax
c000b6e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6eb:	83 c4 20             	add    esp,0x20
c000b6ee:	e8 8d 53 00 00       	call   c0010a80 <setupFPU()>
c000b6f3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6f9:	85 c0                	test   eax,eax
c000b6fb:	74 1f                	je     c000b71c <Computer::open(int, int, void*)+0xbe>
c000b6fd:	83 ec 08             	sub    esp,0x8
c000b700:	50                   	push   eax
c000b701:	53                   	push   ebx
c000b702:	e8 11 4e 00 00       	call   c0010518 <Device::addChild(Device*)>
c000b707:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b70d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b70f:	6a 00                	push   0x0
c000b711:	6a 00                	push   0x0
c000b713:	6a 00                	push   0x0
c000b715:	50                   	push   eax
c000b716:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b719:	83 c4 20             	add    esp,0x20
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	68 8e b0 00 c0       	push   0xc000b08e
c000b724:	e8 2d d3 00 00       	call   c0018a56 <setupMultitasking(void (*)())>
c000b729:	83 c4 14             	add    esp,0x14
c000b72c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b731:	5b                   	pop    ebx
c000b732:	5e                   	pop    esi
c000b733:	c3                   	ret    

c000b734 <Computer::disableNMI()>:
c000b734:	6a 00                	push   0x0
c000b736:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b73a:	e8 07 ff ff ff       	call   c000b646 <Computer::enableNMI(bool)>
c000b73f:	58                   	pop    eax
c000b740:	5a                   	pop    edx
c000b741:	c3                   	ret    

c000b742 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b746:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b74d:	19 c0                	sbb    eax,eax
c000b74f:	83 e0 80             	and    eax,0xffffff80
c000b752:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b756:	e6 70                	out    0x70,al
c000b758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b75c:	e6 71                	out    0x71,al
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Computer::handleNMI()>:
c000b760:	56                   	push   esi
c000b761:	53                   	push   ebx
c000b762:	83 ec 10             	sub    esp,0x10
c000b765:	e4 92                	in     al,0x92
c000b767:	89 c6                	mov    esi,eax
c000b769:	e4 61                	in     al,0x61
c000b76b:	68 06 0f 02 c0       	push   0xc0020f06
c000b770:	88 c3                	mov    bl,al
c000b772:	e8 96 39 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b777:	83 c4 10             	add    esp,0x10
c000b77a:	83 e6 10             	and    esi,0x10
c000b77d:	75 0d                	jne    c000b78c <Computer::handleNMI()+0x2c>
c000b77f:	f6 c3 40             	test   bl,0x40
c000b782:	75 1d                	jne    c000b7a1 <Computer::handleNMI()+0x41>
c000b784:	84 db                	test   bl,bl
c000b786:	78 2d                	js     c000b7b5 <Computer::handleNMI()+0x55>
c000b788:	58                   	pop    eax
c000b789:	5b                   	pop    ebx
c000b78a:	5e                   	pop    esi
c000b78b:	c3                   	ret    
c000b78c:	83 ec 0c             	sub    esp,0xc
c000b78f:	68 17 0f 02 c0       	push   0xc0020f17
c000b794:	e8 3f a1 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000b799:	83 c4 10             	add    esp,0x10
c000b79c:	f6 c3 40             	test   bl,0x40
c000b79f:	74 e3                	je     c000b784 <Computer::handleNMI()+0x24>
c000b7a1:	83 ec 0c             	sub    esp,0xc
c000b7a4:	68 24 0f 02 c0       	push   0xc0020f24
c000b7a9:	e8 2a a1 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000b7ae:	83 c4 10             	add    esp,0x10
c000b7b1:	84 db                	test   bl,bl
c000b7b3:	79 d3                	jns    c000b788 <Computer::handleNMI()+0x28>
c000b7b5:	c7 44 24 10 2e 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f2e
c000b7bd:	5a                   	pop    edx
c000b7be:	5b                   	pop    ebx
c000b7bf:	5e                   	pop    esi
c000b7c0:	e9 13 a1 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>
c000b7c5:	90                   	nop

c000b7c6 <Computer::setDiskActivityLight(int, bool)>:
c000b7c6:	56                   	push   esi
c000b7c7:	53                   	push   ebx
c000b7c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7d1:	77 1b                	ja     c000b7ee <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7d3:	e4 92                	in     al,0x92
c000b7d5:	bb 40 00 00 00       	mov    ebx,0x40
c000b7da:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7de:	89 da                	mov    edx,ebx
c000b7e0:	d3 e2                	shl    edx,cl
c000b7e2:	89 f1                	mov    ecx,esi
c000b7e4:	f7 d2                	not    edx
c000b7e6:	d3 e3                	shl    ebx,cl
c000b7e8:	21 d0                	and    eax,edx
c000b7ea:	09 d8                	or     eax,ebx
c000b7ec:	e6 92                	out    0x92,al
c000b7ee:	5b                   	pop    ebx
c000b7ef:	5e                   	pop    esi
c000b7f0:	c3                   	ret    
c000b7f1:	90                   	nop

c000b7f2 <GDTEntry::setBase(unsigned int)>:
c000b7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7fa:	89 c1                	mov    ecx,eax
c000b7fc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b800:	c1 e9 10             	shr    ecx,0x10
c000b803:	c1 e8 18             	shr    eax,0x18
c000b806:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b809:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <GDTEntry::setLimit(unsigned int)>:
c000b80e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b816:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b819:	66 89 01             	mov    WORD PTR [ecx],ax
c000b81c:	83 e2 f0             	and    edx,0xfffffff0
c000b81f:	c1 e8 10             	shr    eax,0x10
c000b822:	83 e0 0f             	and    eax,0xf
c000b825:	09 d0                	or     eax,edx
c000b827:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b82a:	c3                   	ret    
c000b82b:	90                   	nop

c000b82c <GDT::GDT()>:
c000b82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b83a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b840:	90                   	nop
c000b841:	c3                   	ret    

c000b842 <GDT::addEntry(GDTEntry)>:
c000b842:	53                   	push   ebx
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b84a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b84c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b853:	52                   	push   edx
c000b854:	50                   	push   eax
c000b855:	68 68 0f 02 c0       	push   0xc0020f68
c000b85a:	e8 ae 38 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000b85f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b861:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b865:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b869:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b86d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b871:	8d 50 01             	lea    edx,[eax+0x1]
c000b874:	c1 e0 03             	shl    eax,0x3
c000b877:	89 13                	mov    DWORD PTR [ebx],edx
c000b879:	83 c4 18             	add    esp,0x18
c000b87c:	5b                   	pop    ebx
c000b87d:	c3                   	ret    

c000b87e <GDT::getNumberOfEntries()>:
c000b87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b882:	8b 00                	mov    eax,DWORD PTR [eax]
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <GDT::flush()>:
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b88c:	83 c0 04             	add    eax,0x4
c000b88f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b896:	a3 72 43 02 c0       	mov    ds:0xc0024372,eax
c000b89b:	66 89 15 70 43 02 c0 	mov    WORD PTR ds:0xc0024370,dx
c000b8a2:	e9 3e 4b ff ff       	jmp    c00003e5 <loadGDT>
c000b8a7:	90                   	nop

c000b8a8 <GDT::setup()>:
c000b8a8:	55                   	push   ebp
c000b8a9:	57                   	push   edi
c000b8aa:	56                   	push   esi
c000b8ab:	53                   	push   ebx
c000b8ac:	83 ec 3c             	sub    esp,0x3c
c000b8af:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b8b3:	6a 00                	push   0x0
c000b8b5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b8b9:	53                   	push   ebx
c000b8ba:	e8 33 ff ff ff       	call   c000b7f2 <GDTEntry::setBase(unsigned int)>
c000b8bf:	6a 00                	push   0x0
c000b8c1:	53                   	push   ebx
c000b8c2:	e8 47 ff ff ff       	call   c000b80e <GDTEntry::setLimit(unsigned int)>
c000b8c7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8cf:	6a 00                	push   0x0
c000b8d1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8d5:	53                   	push   ebx
c000b8d6:	e8 17 ff ff ff       	call   c000b7f2 <GDTEntry::setBase(unsigned int)>
c000b8db:	68 ff ff ff 00       	push   0xffffff
c000b8e0:	53                   	push   ebx
c000b8e1:	e8 28 ff ff ff       	call   c000b80e <GDTEntry::setLimit(unsigned int)>
c000b8e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ea:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ef:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8f8:	83 c4 20             	add    esp,0x20
c000b8fb:	6a 00                	push   0x0
c000b8fd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b901:	53                   	push   ebx
c000b902:	e8 eb fe ff ff       	call   c000b7f2 <GDTEntry::setBase(unsigned int)>
c000b907:	68 ff ff ff 00       	push   0xffffff
c000b90c:	53                   	push   ebx
c000b90d:	e8 fc fe ff ff       	call   c000b80e <GDTEntry::setLimit(unsigned int)>
c000b912:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b916:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b91a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b91e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b922:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b926:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b92b:	0d 00 92 c0 00       	or     eax,0xc09200
c000b930:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b934:	89 d8                	mov    eax,ebx
c000b936:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b93a:	80 cc 60             	or     ah,0x60
c000b93d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b941:	83 c4 0c             	add    esp,0xc
c000b944:	89 f8                	mov    eax,edi
c000b946:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b94a:	80 cc 60             	or     ah,0x60
c000b94d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b951:	89 c7                	mov    edi,eax
c000b953:	55                   	push   ebp
c000b954:	e8 e9 fe ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000b959:	83 c4 0c             	add    esp,0xc
c000b95c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b960:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b964:	55                   	push   ebp
c000b965:	e8 d8 fe ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000b96a:	83 c4 0c             	add    esp,0xc
c000b96d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b971:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b975:	55                   	push   ebp
c000b976:	e8 c7 fe ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000b97b:	83 c4 0c             	add    esp,0xc
c000b97e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b982:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b986:	53                   	push   ebx
c000b987:	51                   	push   ecx
c000b988:	55                   	push   ebp
c000b989:	e8 b4 fe ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000b98e:	83 c4 0c             	add    esp,0xc
c000b991:	57                   	push   edi
c000b992:	56                   	push   esi
c000b993:	55                   	push   ebp
c000b994:	e8 a9 fe ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000b999:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b99c:	e8 e5 fe ff ff       	call   c000b886 <GDT::flush()>
c000b9a1:	83 c4 4c             	add    esp,0x4c
c000b9a4:	5b                   	pop    ebx
c000b9a5:	5e                   	pop    esi
c000b9a6:	5f                   	pop    edi
c000b9a7:	5d                   	pop    ebp
c000b9a8:	c3                   	ret    

c000b9a9 <idleFunction(void*)>:
c000b9a9:	53                   	push   ebx
c000b9aa:	83 ec 08             	sub    esp,0x8
c000b9ad:	e8 7c ce 00 00       	call   c001882e <unlockScheduler()>
c000b9b2:	e8 9f 8d 00 00       	call   c0014756 <thisCPU()>
c000b9b7:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b9be:	74 41                	je     c000ba01 <idleFunction(void*)+0x58>
c000b9c0:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c000b9c5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9cc:	74 33                	je     c000ba01 <idleFunction(void*)+0x58>
c000b9ce:	31 db                	xor    ebx,ebx
c000b9d0:	52                   	push   edx
c000b9d1:	52                   	push   edx
c000b9d2:	68 e1 00 00 00       	push   0xe1
c000b9d7:	50                   	push   eax
c000b9d8:	e8 df fb ff ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c000b9dd:	53                   	push   ebx
c000b9de:	83 e0 02             	and    eax,0x2
c000b9e1:	50                   	push   eax
c000b9e2:	68 e1 00 00 00       	push   0xe1
c000b9e7:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c000b9ed:	e8 f6 fb ff ff       	call   c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9f2:	83 c4 20             	add    esp,0x20
c000b9f5:	e8 08 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9fa:	e8 71 3a 01 00       	call   c001f470 <idleCommon()>
c000b9ff:	eb f4                	jmp    c000b9f5 <idleFunction(void*)+0x4c>
c000ba01:	fb                   	sti    
c000ba02:	f4                   	hlt    
c000ba03:	e8 68 3a 01 00       	call   c001f470 <idleCommon()>
c000ba08:	eb f7                	jmp    c000ba01 <idleFunction(void*)+0x58>

c000ba0a <IDTEntry::IDTEntry(bool)>:
c000ba0a:	83 ec 04             	sub    esp,0x4
c000ba0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba11:	88 04 24             	mov    BYTE PTR [esp],al
c000ba14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba18:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ba1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba22:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2d:	83 e2 f0             	and    edx,0xfffffff0
c000ba30:	83 ca 0e             	or     edx,0xe
c000ba33:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba3d:	83 e2 ef             	and    edx,0xffffffef
c000ba40:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba43:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba47:	74 04                	je     c000ba4d <IDTEntry::IDTEntry(bool)+0x43>
c000ba49:	b2 03                	mov    dl,0x3
c000ba4b:	eb 02                	jmp    c000ba4f <IDTEntry::IDTEntry(bool)+0x45>
c000ba4d:	b2 00                	mov    dl,0x0
c000ba4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba53:	83 e2 03             	and    edx,0x3
c000ba56:	88 d1                	mov    cl,dl
c000ba58:	c1 e1 05             	shl    ecx,0x5
c000ba5b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba5e:	83 e2 9f             	and    edx,0xffffff9f
c000ba61:	09 ca                	or     edx,ecx
c000ba63:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba6d:	83 ca 80             	or     edx,0xffffff80
c000ba70:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba73:	90                   	nop
c000ba74:	83 c4 04             	add    esp,0x4
c000ba77:	c3                   	ret    

c000ba78 <IDTEntry::setOffset(unsigned int)>:
c000ba78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba80:	66 89 02             	mov    WORD PTR [edx],ax
c000ba83:	c1 e8 10             	shr    eax,0x10
c000ba86:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <IDT::IDT()>:
c000ba8c:	90                   	nop
c000ba8d:	c3                   	ret    

c000ba8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba92:	83 c0 30             	add    eax,0x30
c000ba95:	c3                   	ret    

c000ba96 <IDT::addEntry(IDTEntry, int)>:
c000ba96:	53                   	push   ebx
c000ba97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000baa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000baa7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000baaa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000baae:	5b                   	pop    ebx
c000baaf:	c3                   	ret    

c000bab0 <IDT::addEntry(int, void (*)(), bool)>:
c000bab0:	53                   	push   ebx
c000bab1:	83 ec 10             	sub    esp,0x10
c000bab4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000bab9:	50                   	push   eax
c000baba:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000babe:	53                   	push   ebx
c000babf:	e8 46 ff ff ff       	call   c000ba0a <IDTEntry::IDTEntry(bool)>
c000bac4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bac8:	53                   	push   ebx
c000bac9:	e8 aa ff ff ff       	call   c000ba78 <IDTEntry::setOffset(unsigned int)>
c000bace:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bad2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bad6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bada:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bade:	e8 b3 ff ff ff       	call   c000ba96 <IDT::addEntry(IDTEntry, int)>
c000bae3:	83 c4 30             	add    esp,0x30
c000bae6:	5b                   	pop    ebx
c000bae7:	c3                   	ret    

c000bae8 <IDT::flush()>:
c000bae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baec:	66 c7 05 78 43 02 c0 ff 07 	mov    WORD PTR ds:0xc0024378,0x7ff
c000baf5:	a3 7a 43 02 c0       	mov    ds:0xc002437a,eax
c000bafa:	0f 01 1d 78 43 02 c0 	lidtd  ds:0xc0024378
c000bb01:	c3                   	ret    

c000bb02 <IDT::setup()>:
c000bb02:	57                   	push   edi
c000bb03:	56                   	push   esi
c000bb04:	53                   	push   ebx
c000bb05:	83 ec 10             	sub    esp,0x10
c000bb08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 05 04 00 c0       	push   0xc0000405
c000bb13:	6a 00                	push   0x0
c000bb15:	53                   	push   ebx
c000bb16:	e8 95 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	6a 00                	push   0x0
c000bb1d:	68 15 04 00 c0       	push   0xc0000415
c000bb22:	6a 01                	push   0x1
c000bb24:	53                   	push   ebx
c000bb25:	e8 86 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb2a:	83 c4 20             	add    esp,0x20
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 1f 04 00 c0       	push   0xc000041f
c000bb34:	6a 02                	push   0x2
c000bb36:	53                   	push   ebx
c000bb37:	e8 74 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	6a 00                	push   0x0
c000bb3e:	68 29 04 00 c0       	push   0xc0000429
c000bb43:	6a 03                	push   0x3
c000bb45:	53                   	push   ebx
c000bb46:	e8 65 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb4b:	83 c4 20             	add    esp,0x20
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 33 04 00 c0       	push   0xc0000433
c000bb55:	6a 04                	push   0x4
c000bb57:	53                   	push   ebx
c000bb58:	e8 53 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	6a 00                	push   0x0
c000bb5f:	68 3d 04 00 c0       	push   0xc000043d
c000bb64:	6a 05                	push   0x5
c000bb66:	53                   	push   ebx
c000bb67:	e8 44 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb6c:	83 c4 20             	add    esp,0x20
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 47 04 00 c0       	push   0xc0000447
c000bb76:	6a 06                	push   0x6
c000bb78:	53                   	push   ebx
c000bb79:	e8 32 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	6a 00                	push   0x0
c000bb80:	68 51 04 00 c0       	push   0xc0000451
c000bb85:	6a 07                	push   0x7
c000bb87:	53                   	push   ebx
c000bb88:	e8 23 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb8d:	83 c4 20             	add    esp,0x20
c000bb90:	6a 00                	push   0x0
c000bb92:	68 5b 04 00 c0       	push   0xc000045b
c000bb97:	6a 08                	push   0x8
c000bb99:	53                   	push   ebx
c000bb9a:	e8 11 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	6a 00                	push   0x0
c000bba1:	68 63 04 00 c0       	push   0xc0000463
c000bba6:	6a 09                	push   0x9
c000bba8:	53                   	push   ebx
c000bba9:	e8 02 ff ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bbae:	83 c4 20             	add    esp,0x20
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 6d 04 00 c0       	push   0xc000046d
c000bbb8:	6a 0a                	push   0xa
c000bbba:	53                   	push   ebx
c000bbbb:	e8 f0 fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 75 04 00 c0       	push   0xc0000475
c000bbc7:	6a 0b                	push   0xb
c000bbc9:	53                   	push   ebx
c000bbca:	e8 e1 fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bbcf:	83 c4 20             	add    esp,0x20
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 7d 04 00 c0       	push   0xc000047d
c000bbd9:	6a 0c                	push   0xc
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 cf fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	6a 00                	push   0x0
c000bbe3:	68 85 04 00 c0       	push   0xc0000485
c000bbe8:	6a 0d                	push   0xd
c000bbea:	53                   	push   ebx
c000bbeb:	e8 c0 fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bbf0:	83 c4 20             	add    esp,0x20
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 8d 04 00 c0       	push   0xc000048d
c000bbfa:	6a 0e                	push   0xe
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 ae fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	6a 00                	push   0x0
c000bc04:	68 95 04 00 c0       	push   0xc0000495
c000bc09:	6a 0f                	push   0xf
c000bc0b:	53                   	push   ebx
c000bc0c:	e8 9f fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc11:	83 c4 20             	add    esp,0x20
c000bc14:	6a 00                	push   0x0
c000bc16:	68 9f 04 00 c0       	push   0xc000049f
c000bc1b:	6a 10                	push   0x10
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 8d fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	6a 00                	push   0x0
c000bc25:	68 a9 04 00 c0       	push   0xc00004a9
c000bc2a:	6a 11                	push   0x11
c000bc2c:	53                   	push   ebx
c000bc2d:	e8 7e fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc32:	83 c4 20             	add    esp,0x20
c000bc35:	6a 00                	push   0x0
c000bc37:	68 b3 04 00 c0       	push   0xc00004b3
c000bc3c:	6a 12                	push   0x12
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 6c fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	6a 01                	push   0x1
c000bc46:	68 bd 04 00 c0       	push   0xc00004bd
c000bc4b:	6a 60                	push   0x60
c000bc4d:	53                   	push   ebx
c000bc4e:	e8 5d fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc53:	83 c4 20             	add    esp,0x20
c000bc56:	6a 00                	push   0x0
c000bc58:	68 c7 04 00 c0       	push   0xc00004c7
c000bc5d:	6a 20                	push   0x20
c000bc5f:	53                   	push   ebx
c000bc60:	e8 4b fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	6a 00                	push   0x0
c000bc67:	68 d1 04 00 c0       	push   0xc00004d1
c000bc6c:	6a 21                	push   0x21
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 3c fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc74:	83 c4 20             	add    esp,0x20
c000bc77:	6a 00                	push   0x0
c000bc79:	68 db 04 00 c0       	push   0xc00004db
c000bc7e:	6a 22                	push   0x22
c000bc80:	53                   	push   ebx
c000bc81:	e8 2a fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	6a 00                	push   0x0
c000bc88:	68 e5 04 00 c0       	push   0xc00004e5
c000bc8d:	6a 23                	push   0x23
c000bc8f:	53                   	push   ebx
c000bc90:	e8 1b fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bc95:	83 c4 20             	add    esp,0x20
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 ef 04 00 c0       	push   0xc00004ef
c000bc9f:	6a 24                	push   0x24
c000bca1:	53                   	push   ebx
c000bca2:	e8 09 fe ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	6a 00                	push   0x0
c000bca9:	68 f9 04 00 c0       	push   0xc00004f9
c000bcae:	6a 25                	push   0x25
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 fa fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bcb6:	83 c4 20             	add    esp,0x20
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 03 05 00 c0       	push   0xc0000503
c000bcc0:	6a 26                	push   0x26
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 e8 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	6a 00                	push   0x0
c000bcca:	68 0d 05 00 c0       	push   0xc000050d
c000bccf:	6a 27                	push   0x27
c000bcd1:	53                   	push   ebx
c000bcd2:	e8 d9 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bcd7:	83 c4 20             	add    esp,0x20
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 17 05 00 c0       	push   0xc0000517
c000bce1:	6a 28                	push   0x28
c000bce3:	53                   	push   ebx
c000bce4:	e8 c7 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	6a 00                	push   0x0
c000bceb:	68 21 05 00 c0       	push   0xc0000521
c000bcf0:	6a 29                	push   0x29
c000bcf2:	53                   	push   ebx
c000bcf3:	e8 b8 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bcf8:	83 c4 20             	add    esp,0x20
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 2b 05 00 c0       	push   0xc000052b
c000bd02:	6a 2a                	push   0x2a
c000bd04:	53                   	push   ebx
c000bd05:	e8 a6 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	6a 00                	push   0x0
c000bd0c:	68 35 05 00 c0       	push   0xc0000535
c000bd11:	6a 2b                	push   0x2b
c000bd13:	53                   	push   ebx
c000bd14:	e8 97 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd19:	83 c4 20             	add    esp,0x20
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 3f 05 00 c0       	push   0xc000053f
c000bd23:	6a 2c                	push   0x2c
c000bd25:	53                   	push   ebx
c000bd26:	e8 85 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	6a 00                	push   0x0
c000bd2d:	68 49 05 00 c0       	push   0xc0000549
c000bd32:	6a 2d                	push   0x2d
c000bd34:	53                   	push   ebx
c000bd35:	e8 76 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd3a:	83 c4 20             	add    esp,0x20
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 53 05 00 c0       	push   0xc0000553
c000bd44:	6a 2e                	push   0x2e
c000bd46:	53                   	push   ebx
c000bd47:	e8 64 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	6a 00                	push   0x0
c000bd4e:	68 5d 05 00 c0       	push   0xc000055d
c000bd53:	6a 2f                	push   0x2f
c000bd55:	53                   	push   ebx
c000bd56:	e8 55 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd5b:	83 c4 20             	add    esp,0x20
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 67 05 00 c0       	push   0xc0000567
c000bd65:	6a 30                	push   0x30
c000bd67:	53                   	push   ebx
c000bd68:	e8 43 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	6a 00                	push   0x0
c000bd6f:	68 71 05 00 c0       	push   0xc0000571
c000bd74:	6a 31                	push   0x31
c000bd76:	53                   	push   ebx
c000bd77:	e8 34 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd7c:	83 c4 20             	add    esp,0x20
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 7b 05 00 c0       	push   0xc000057b
c000bd86:	6a 32                	push   0x32
c000bd88:	53                   	push   ebx
c000bd89:	e8 22 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	6a 00                	push   0x0
c000bd90:	68 85 05 00 c0       	push   0xc0000585
c000bd95:	6a 33                	push   0x33
c000bd97:	53                   	push   ebx
c000bd98:	e8 13 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bd9d:	83 c4 20             	add    esp,0x20
c000bda0:	6a 00                	push   0x0
c000bda2:	68 8f 05 00 c0       	push   0xc000058f
c000bda7:	6a 34                	push   0x34
c000bda9:	53                   	push   ebx
c000bdaa:	e8 01 fd ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bdaf:	6a 00                	push   0x0
c000bdb1:	68 99 05 00 c0       	push   0xc0000599
c000bdb6:	6a 35                	push   0x35
c000bdb8:	53                   	push   ebx
c000bdb9:	e8 f2 fc ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bdbe:	83 c4 20             	add    esp,0x20
c000bdc1:	6a 00                	push   0x0
c000bdc3:	68 a3 05 00 c0       	push   0xc00005a3
c000bdc8:	6a 36                	push   0x36
c000bdca:	53                   	push   ebx
c000bdcb:	e8 e0 fc ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bdd0:	6a 00                	push   0x0
c000bdd2:	68 ad 05 00 c0       	push   0xc00005ad
c000bdd7:	6a 37                	push   0x37
c000bdd9:	53                   	push   ebx
c000bdda:	e8 d1 fc ff ff       	call   c000bab0 <IDT::addEntry(int, void (*)(), bool)>
c000bddf:	83 c4 20             	add    esp,0x20
c000bde2:	e8 e4 24 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bde7:	52                   	push   edx
c000bde8:	6a 03                	push   0x3
c000bdea:	6a 02                	push   0x2
c000bdec:	50                   	push   eax
c000bded:	e8 1c 2b 00 00       	call   c000e90e <VAS::allocatePages(int, int)>
c000bdf2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdf9:	89 c6                	mov    esi,eax
c000bdfb:	e8 1e 32 00 00       	call   c000f01e <operator new(unsigned long)>
c000be00:	81 c6 00 20 00 00    	add    esi,0x2000
c000be06:	89 04 24             	mov    DWORD PTR [esp],eax
c000be09:	89 c7                	mov    edi,eax
c000be0b:	e8 c0 1c 00 00       	call   c000dad0 <TSS::TSS()>
c000be10:	83 c4 0c             	add    esp,0xc
c000be13:	68 5b 04 00 c0       	push   0xc000045b
c000be18:	56                   	push   esi
c000be19:	57                   	push   edi
c000be1a:	e8 f1 1c 00 00       	call   c000db10 <TSS::setup(unsigned long, unsigned long)>
c000be1f:	59                   	pop    ecx
c000be20:	89 c6                	mov    esi,eax
c000be22:	5f                   	pop    edi
c000be23:	6a 00                	push   0x0
c000be25:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be29:	50                   	push   eax
c000be2a:	e8 db fb ff ff       	call   c000ba0a <IDTEntry::IDTEntry(bool)>
c000be2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be33:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be38:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be3f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be49:	80 ce 05             	or     dh,0x5
c000be4c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be57:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be5d:	e8 86 fc ff ff       	call   c000bae8 <IDT::flush()>
c000be62:	83 c4 20             	add    esp,0x20
c000be65:	5b                   	pop    ebx
c000be66:	5e                   	pop    esi
c000be67:	5f                   	pop    edi
c000be68:	c3                   	ret    

c000be69 <sbrk>:
c000be69:	55                   	push   ebp
c000be6a:	57                   	push   edi
c000be6b:	56                   	push   esi
c000be6c:	53                   	push   ebx
c000be6d:	83 ec 1c             	sub    esp,0x1c
c000be70:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be74:	85 db                	test   ebx,ebx
c000be76:	74 37                	je     c000beaf <sbrk+0x46>
c000be78:	78 3f                	js     c000beb9 <sbrk+0x50>
c000be7a:	e8 d7 88 00 00       	call   c0014756 <thisCPU()>
c000be7f:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be85:	83 e0 01             	and    eax,0x1
c000be88:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be8c:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000be91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be95:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be9b:	89 d8                	mov    eax,ebx
c000be9d:	78 35                	js     c000bed4 <sbrk+0x6b>
c000be9f:	c1 f8 0c             	sar    eax,0xc
c000bea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bea6:	89 c7                	mov    edi,eax
c000bea8:	be 00 00 00 00       	mov    esi,0x0
c000bead:	eb 3c                	jmp    c000beeb <sbrk+0x82>
c000beaf:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000beb4:	e9 ad 00 00 00       	jmp    c000bf66 <sbrk+0xfd>
c000beb9:	83 ec 08             	sub    esp,0x8
c000bebc:	53                   	push   ebx
c000bebd:	68 84 0f 02 c0       	push   0xc0020f84
c000bec2:	e8 46 32 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000becf:	e9 92 00 00 00       	jmp    c000bf66 <sbrk+0xfd>
c000bed4:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000beda:	eb c3                	jmp    c000be9f <sbrk+0x36>
c000bedc:	81 05 80 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023780,0x1000
c000bee6:	46                   	inc    esi
c000bee7:	39 f7                	cmp    edi,esi
c000bee9:	74 34                	je     c000bf1f <sbrk+0xb6>
c000beeb:	e8 db 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bef0:	89 c3                	mov    ebx,eax
c000bef2:	8b 2d 80 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023780
c000bef8:	e8 c9 06 00 00       	call   c000c5c6 <Phys::allocatePage()>
c000befd:	68 01 04 00 00       	push   0x401
c000bf02:	55                   	push   ebp
c000bf03:	50                   	push   eax
c000bf04:	53                   	push   ebx
c000bf05:	e8 04 29 00 00       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf12:	74 c8                	je     c000bedc <sbrk+0x73>
c000bf14:	8b 1d 80 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023780
c000bf1a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf1d:	eb bd                	jmp    c000bedc <sbrk+0x73>
c000bf1f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf24:	74 48                	je     c000bf6e <sbrk+0x105>
c000bf26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf2a:	89 d3                	mov    ebx,edx
c000bf2c:	c1 eb 0a             	shr    ebx,0xa
c000bf2f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf35:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf3f:	c1 e0 0c             	shl    eax,0xc
c000bf42:	01 d0                	add    eax,edx
c000bf44:	c1 e8 0a             	shr    eax,0xa
c000bf47:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf4c:	2d 00 00 40 00       	sub    eax,0x400000
c000bf51:	39 c3                	cmp    ebx,eax
c000bf53:	77 0d                	ja     c000bf62 <sbrk+0xf9>
c000bf55:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf58:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf5e:	39 d8                	cmp    eax,ebx
c000bf60:	73 f3                	jae    c000bf55 <sbrk+0xec>
c000bf62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf66:	83 c4 1c             	add    esp,0x1c
c000bf69:	5b                   	pop    ebx
c000bf6a:	5e                   	pop    esi
c000bf6b:	5f                   	pop    edi
c000bf6c:	5d                   	pop    ebp
c000bf6d:	c3                   	ret    
c000bf6e:	e8 12 35 01 00       	call   c001f485 <CPU::readCR3()>
c000bf73:	83 ec 0c             	sub    esp,0xc
c000bf76:	50                   	push   eax
c000bf77:	e8 1b 35 01 00       	call   c001f497 <CPU::writeCR3(unsigned long)>
c000bf7c:	83 c4 10             	add    esp,0x10
c000bf7f:	eb e1                	jmp    c000bf62 <sbrk+0xf9>

c000bf81 <mmap>:
c000bf81:	83 ec 18             	sub    esp,0x18
c000bf84:	68 b4 0f 02 c0       	push   0xc0020fb4
c000bf89:	e8 4a 99 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000bf8e:	b8 00 00 00 00       	mov    eax,0x0
c000bf93:	83 c4 1c             	add    esp,0x1c
c000bf96:	c3                   	ret    

c000bf97 <munmap>:
c000bf97:	83 ec 18             	sub    esp,0x18
c000bf9a:	68 b9 0f 02 c0       	push   0xc0020fb9
c000bf9f:	e8 34 99 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000bfa4:	b8 00 00 00 00       	mov    eax,0x0
c000bfa9:	83 c4 1c             	add    esp,0x1c
c000bfac:	c3                   	ret    

c000bfad <liballoc_lock()>:
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	e8 77 c8 00 00       	call   c001882c <lockScheduler()>
c000bfb5:	b8 00 00 00 00       	mov    eax,0x0
c000bfba:	83 c4 0c             	add    esp,0xc
c000bfbd:	c3                   	ret    

c000bfbe <liballoc_unlock()>:
c000bfbe:	83 ec 0c             	sub    esp,0xc
c000bfc1:	e8 68 c8 00 00       	call   c001882e <unlockScheduler()>
c000bfc6:	b8 00 00 00 00       	mov    eax,0x0
c000bfcb:	83 c4 0c             	add    esp,0xc
c000bfce:	c3                   	ret    

c000bfcf <liballoc_alloc(int)>:
c000bfcf:	83 ec 0c             	sub    esp,0xc
c000bfd2:	e8 f4 22 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bfd7:	83 ec 04             	sub    esp,0x4
c000bfda:	6a 01                	push   0x1
c000bfdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe0:	50                   	push   eax
c000bfe1:	e8 28 29 00 00       	call   c000e90e <VAS::allocatePages(int, int)>
c000bfe6:	83 c4 1c             	add    esp,0x1c
c000bfe9:	c3                   	ret    

c000bfea <liballoc_free(void*, int)>:
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	e8 d9 22 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bff2:	83 ec 08             	sub    esp,0x8
c000bff5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bff9:	50                   	push   eax
c000bffa:	e8 b9 25 00 00       	call   c000e5b8 <VAS::freeAllocatedPages(unsigned long)>
c000bfff:	b8 00 00 00 00       	mov    eax,0x0
c000c004:	83 c4 1c             	add    esp,0x1c
c000c007:	c3                   	ret    

c000c008 <realloc>:
c000c008:	83 ec 14             	sub    esp,0x14
c000c00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c013:	e8 1b 54 ff ff       	call   c0001433 <dlrealloc>
c000c018:	83 c4 1c             	add    esp,0x1c
c000c01b:	c3                   	ret    

c000c01c <malloc>:
c000c01c:	83 ec 18             	sub    esp,0x18
c000c01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c023:	e8 ce 4e ff ff       	call   c0000ef6 <dlmalloc>
c000c028:	83 c4 1c             	add    esp,0x1c
c000c02b:	c3                   	ret    

c000c02c <free>:
c000c02c:	83 ec 18             	sub    esp,0x18
c000c02f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c033:	e8 63 4b ff ff       	call   c0000b9b <dlfree>
c000c038:	83 c4 1c             	add    esp,0x1c
c000c03b:	c3                   	ret    

c000c03c <rfree>:
c000c03c:	83 ec 18             	sub    esp,0x18
c000c03f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c043:	e8 e4 ff ff ff       	call   c000c02c <free>
c000c048:	83 c4 1c             	add    esp,0x1c
c000c04b:	c3                   	ret    

c000c04c <calloc>:
c000c04c:	56                   	push   esi
c000c04d:	53                   	push   ebx
c000c04e:	83 ec 10             	sub    esp,0x10
c000c051:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c055:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c05a:	53                   	push   ebx
c000c05b:	e8 bc ff ff ff       	call   c000c01c <malloc>
c000c060:	89 c6                	mov    esi,eax
c000c062:	83 c4 0c             	add    esp,0xc
c000c065:	53                   	push   ebx
c000c066:	6a 00                	push   0x0
c000c068:	50                   	push   eax
c000c069:	e8 4c 46 ff ff       	call   c00006ba <memset>
c000c06e:	89 f0                	mov    eax,esi
c000c070:	83 c4 14             	add    esp,0x14
c000c073:	5b                   	pop    ebx
c000c074:	5e                   	pop    esi
c000c075:	c3                   	ret    

c000c076 <hwTextMode_loadInData(VgaText*)>:
c000c076:	57                   	push   edi
c000c077:	56                   	push   esi
c000c078:	53                   	push   ebx
c000c079:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c07d:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c083:	85 c0                	test   eax,eax
c000c085:	7e 30                	jle    c000c0b7 <hwTextMode_loadInData(VgaText*)+0x41>
c000c087:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c08a:	31 f6                	xor    esi,esi
c000c08c:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c08f:	31 c0                	xor    eax,eax
c000c091:	c1 e1 05             	shl    ecx,0x5
c000c094:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c09a:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c09e:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c0a2:	40                   	inc    eax
c000c0a3:	83 f8 50             	cmp    eax,0x50
c000c0a6:	75 f2                	jne    c000c09a <hwTextMode_loadInData(VgaText*)+0x24>
c000c0a8:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c0ae:	46                   	inc    esi
c000c0af:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c0b5:	7f d5                	jg     c000c08c <hwTextMode_loadInData(VgaText*)+0x16>
c000c0b7:	5b                   	pop    ebx
c000c0b8:	5e                   	pop    esi
c000c0b9:	5f                   	pop    edi
c000c0ba:	c3                   	ret    

c000c0bb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c0bb:	56                   	push   esi
c000c0bc:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c0c1:	53                   	push   ebx
c000c0c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0ca:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0d0:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0d6:	c1 e0 04             	shl    eax,0x4
c000c0d9:	83 e6 0f             	and    esi,0xf
c000c0dc:	0f b6 c0             	movzx  eax,al
c000c0df:	41                   	inc    ecx
c000c0e0:	09 f0                	or     eax,esi
c000c0e2:	83 c2 02             	add    edx,0x2
c000c0e5:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0e9:	c1 e0 08             	shl    eax,0x8
c000c0ec:	09 f0                	or     eax,esi
c000c0ee:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0f2:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0f8:	75 d0                	jne    c000c0ca <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0fa:	5b                   	pop    ebx
c000c0fb:	5e                   	pop    esi
c000c0fc:	c3                   	ret    

c000c0fd <hwTextMode_showCursor(VgaText*, bool)>:
c000c0fd:	56                   	push   esi
c000c0fe:	53                   	push   ebx
c000c0ff:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c104:	74 38                	je     c000c13e <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c106:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c10b:	b0 0a                	mov    al,0xa
c000c10d:	89 da                	mov    edx,ebx
c000c10f:	ee                   	out    dx,al
c000c110:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c115:	89 ca                	mov    edx,ecx
c000c117:	ec                   	in     al,dx
c000c118:	b2 0f                	mov    dl,0xf
c000c11a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c11e:	83 e0 c0             	and    eax,0xffffffc0
c000c121:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c127:	09 d0                	or     eax,edx
c000c129:	89 ca                	mov    edx,ecx
c000c12b:	ee                   	out    dx,al
c000c12c:	b0 0b                	mov    al,0xb
c000c12e:	89 da                	mov    edx,ebx
c000c130:	ee                   	out    dx,al
c000c131:	89 ca                	mov    edx,ecx
c000c133:	ec                   	in     al,dx
c000c134:	83 e0 e0             	and    eax,0xffffffe0
c000c137:	83 c8 0f             	or     eax,0xf
c000c13a:	ee                   	out    dx,al
c000c13b:	5b                   	pop    ebx
c000c13c:	5e                   	pop    esi
c000c13d:	c3                   	ret    
c000c13e:	b0 0a                	mov    al,0xa
c000c140:	ba d4 03 00 00       	mov    edx,0x3d4
c000c145:	ee                   	out    dx,al
c000c146:	b0 20                	mov    al,0x20
c000c148:	ba d5 03 00 00       	mov    edx,0x3d5
c000c14d:	ee                   	out    dx,al
c000c14e:	5b                   	pop    ebx
c000c14f:	5e                   	pop    esi
c000c150:	c3                   	ret    

c000c151 <hwTextMode_update(VgaText*)>:
c000c151:	c3                   	ret    

c000c152 <hwTextMode_updateCursor(VgaText*)>:
c000c152:	56                   	push   esi
c000c153:	b9 19 00 00 00       	mov    ecx,0x19
c000c158:	53                   	push   ebx
c000c159:	be d4 03 00 00       	mov    esi,0x3d4
c000c15e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c162:	89 f2                	mov    edx,esi
c000c164:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c16a:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c170:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c173:	c1 e1 04             	shl    ecx,0x4
c000c176:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c17c:	b0 0f                	mov    al,0xf
c000c17e:	ee                   	out    dx,al
c000c17f:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c184:	88 c8                	mov    al,cl
c000c186:	89 da                	mov    edx,ebx
c000c188:	ee                   	out    dx,al
c000c189:	b0 0e                	mov    al,0xe
c000c18b:	89 f2                	mov    edx,esi
c000c18d:	ee                   	out    dx,al
c000c18e:	89 c8                	mov    eax,ecx
c000c190:	89 da                	mov    edx,ebx
c000c192:	66 c1 e8 08          	shr    ax,0x8
c000c196:	ee                   	out    dx,al
c000c197:	5b                   	pop    ebx
c000c198:	5e                   	pop    esi
c000c199:	c3                   	ret    

c000c19a <hwTextMode_disableBlink(VgaText*, bool)>:
c000c19a:	ba da 03 00 00       	mov    edx,0x3da
c000c19f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c1a4:	75 18                	jne    c000c1be <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c1a6:	ec                   	in     al,dx
c000c1a7:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1ac:	b0 30                	mov    al,0x30
c000c1ae:	89 ca                	mov    edx,ecx
c000c1b0:	ee                   	out    dx,al
c000c1b1:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1b6:	ec                   	in     al,dx
c000c1b7:	83 c8 08             	or     eax,0x8
c000c1ba:	89 ca                	mov    edx,ecx
c000c1bc:	ee                   	out    dx,al
c000c1bd:	c3                   	ret    
c000c1be:	ec                   	in     al,dx
c000c1bf:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1c4:	b0 30                	mov    al,0x30
c000c1c6:	89 ca                	mov    edx,ecx
c000c1c8:	ee                   	out    dx,al
c000c1c9:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1ce:	ec                   	in     al,dx
c000c1cf:	83 e0 f7             	and    eax,0xfffffff7
c000c1d2:	89 ca                	mov    edx,ecx
c000c1d4:	ee                   	out    dx,al
c000c1d5:	c3                   	ret    

c000c1d6 <hwTextMode_scrollScreen(VgaText*)>:
c000c1d6:	55                   	push   ebp
c000c1d7:	bd 02 00 00 00       	mov    ebp,0x2
c000c1dc:	57                   	push   edi
c000c1dd:	56                   	push   esi
c000c1de:	53                   	push   ebx
c000c1df:	83 ec 1c             	sub    esp,0x1c
c000c1e2:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1ee:	31 c0                	xor    eax,eax
c000c1f0:	eb 0b                	jmp    c000c1fd <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1f2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1f8:	74 57                	je     c000c251 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c1fa:	43                   	inc    ebx
c000c1fb:	89 f0                	mov    eax,esi
c000c1fd:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c203:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c209:	88 13                	mov    BYTE PTR [ebx],dl
c000c20b:	8d 70 01             	lea    esi,[eax+0x1]
c000c20e:	83 fd 18             	cmp    ebp,0x18
c000c211:	75 df                	jne    c000c1f2 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c213:	a8 01                	test   al,0x1
c000c215:	75 13                	jne    c000c22a <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c217:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c21a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c220:	75 d8                	jne    c000c1fa <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c222:	83 c4 1c             	add    esp,0x1c
c000c225:	5b                   	pop    ebx
c000c226:	5e                   	pop    esi
c000c227:	5f                   	pop    edi
c000c228:	5d                   	pop    ebp
c000c229:	c3                   	ret    
c000c22a:	83 ec 08             	sub    esp,0x8
c000c22d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c231:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c238:	50                   	push   eax
c000c239:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c23d:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c244:	50                   	push   eax
c000c245:	e8 66 0b 00 00       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	88 07                	mov    BYTE PTR [edi],al
c000c24f:	eb c9                	jmp    c000c21a <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c251:	45                   	inc    ebp
c000c252:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c25a:	eb 8e                	jmp    c000c1ea <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c25c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c25c:	56                   	push   esi
c000c25d:	53                   	push   ebx
c000c25e:	83 ec 0c             	sub    esp,0xc
c000c261:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c265:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c269:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c26e:	50                   	push   eax
c000c26f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c274:	50                   	push   eax
c000c275:	e8 36 0b 00 00       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000c27a:	5a                   	pop    edx
c000c27b:	0f b6 c0             	movzx  eax,al
c000c27e:	59                   	pop    ecx
c000c27f:	50                   	push   eax
c000c280:	89 f0                	mov    eax,esi
c000c282:	0f be f0             	movsx  esi,al
c000c285:	56                   	push   esi
c000c286:	e8 cb 0b 00 00       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000c28b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c28f:	ba 19 00 00 00       	mov    edx,0x19
c000c294:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c29a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c29d:	8d 14 92             	lea    edx,[edx+edx*4]
c000c2a0:	c1 e1 04             	shl    ecx,0x4
c000c2a3:	c1 e2 04             	shl    edx,0x4
c000c2a6:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c2aa:	01 ca                	add    edx,ecx
c000c2ac:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2b4:	83 c4 14             	add    esp,0x14
c000c2b7:	5b                   	pop    ebx
c000c2b8:	5e                   	pop    esi
c000c2b9:	c3                   	ret    

c000c2ba <setupTextMode()>:
c000c2ba:	c7 05 18 44 02 c0 9a c1 00 c0 	mov    DWORD PTR ds:0xc0024418,0xc000c19a
c000c2c4:	c7 05 04 44 02 c0 76 c0 00 c0 	mov    DWORD PTR ds:0xc0024404,0xc000c076
c000c2ce:	c7 05 00 44 02 c0 bb c0 00 c0 	mov    DWORD PTR ds:0xc0024400,0xc000c0bb
c000c2d8:	c7 05 0c 44 02 c0 d6 c1 00 c0 	mov    DWORD PTR ds:0xc002440c,0xc000c1d6
c000c2e2:	c7 05 14 44 02 c0 fd c0 00 c0 	mov    DWORD PTR ds:0xc0024414,0xc000c0fd
c000c2ec:	c7 05 08 44 02 c0 51 c1 00 c0 	mov    DWORD PTR ds:0xc0024408,0xc000c151
c000c2f6:	c7 05 10 44 02 c0 52 c1 00 c0 	mov    DWORD PTR ds:0xc0024410,0xc000c152
c000c300:	c7 05 1c 44 02 c0 5c c2 00 c0 	mov    DWORD PTR ds:0xc002441c,0xc000c25c
c000c30a:	c3                   	ret    

c000c30b <kernel_main>:
c000c30b:	57                   	push   edi
c000c30c:	bf f9 03 00 00       	mov    edi,0x3f9
c000c311:	56                   	push   esi
c000c312:	31 f6                	xor    esi,esi
c000c314:	53                   	push   ebx
c000c315:	83 ec 10             	sub    esp,0x10
c000c318:	e8 ed 08 00 00       	call   c000cc0a <installVgaTextImplementation()>
c000c31d:	e8 98 ff ff ff       	call   c000c2ba <setupTextMode()>
c000c322:	89 f0                	mov    eax,esi
c000c324:	89 fa                	mov    edx,edi
c000c326:	ee                   	out    dx,al
c000c327:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c32c:	b0 80                	mov    al,0x80
c000c32e:	89 da                	mov    edx,ebx
c000c330:	ee                   	out    dx,al
c000c331:	b1 03                	mov    cl,0x3
c000c333:	ba f8 03 00 00       	mov    edx,0x3f8
c000c338:	88 c8                	mov    al,cl
c000c33a:	ee                   	out    dx,al
c000c33b:	89 f0                	mov    eax,esi
c000c33d:	89 fa                	mov    edx,edi
c000c33f:	ee                   	out    dx,al
c000c340:	88 c8                	mov    al,cl
c000c342:	89 da                	mov    edx,ebx
c000c344:	ee                   	out    dx,al
c000c345:	b0 c7                	mov    al,0xc7
c000c347:	ba fa 03 00 00       	mov    edx,0x3fa
c000c34c:	ee                   	out    dx,al
c000c34d:	b0 0b                	mov    al,0xb
c000c34f:	ba fc 03 00 00       	mov    edx,0x3fc
c000c354:	ee                   	out    dx,al
c000c355:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	05 ff 0f 00 00       	add    eax,0xfff
c000c362:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c367:	50                   	push   eax
c000c368:	e8 59 03 00 00       	call   c000c6c6 <Phys::physicalMemorySetup(unsigned int)>
c000c36d:	e8 da 1e 00 00       	call   c000e24c <Virt::virtualMemorySetup()>
c000c372:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c378:	83 c4 10             	add    esp,0x10
c000c37b:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c381:	75 0e                	jne    c000c391 <kernel_main+0x86>
c000c383:	89 d8                	mov    eax,ebx
c000c385:	25 48 03 00 00       	and    eax,0x348
c000c38a:	3d 00 03 00 00       	cmp    eax,0x300
c000c38f:	74 10                	je     c000c3a1 <kernel_main+0x96>
c000c391:	83 ec 0c             	sub    esp,0xc
c000c394:	68 e7 24 02 c0       	push   0xc00224e7
c000c399:	e8 3a 95 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000c39e:	83 c4 10             	add    esp,0x10
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	89 1d 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,ebx
c000c3aa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c3ae:	53                   	push   ebx
c000c3af:	e8 42 20 00 00       	call   c000e3f6 <VAS::VAS()>
c000c3b4:	89 1d c4 44 02 c0    	mov    DWORD PTR ds:0xc00244c4,ebx
c000c3ba:	e8 61 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3bf:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3c6:	e8 53 2c 00 00       	call   c000f01e <operator new(unsigned long)>
c000c3cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3ce:	89 c6                	mov    esi,eax
c000c3d0:	e8 7f ea ff ff       	call   c000ae54 <Computer::Computer()>
c000c3d5:	6a 00                	push   0x0
c000c3d7:	89 35 68 43 02 c0    	mov    DWORD PTR ds:0xc0024368,esi
c000c3dd:	6a 00                	push   0x0
c000c3df:	6a 00                	push   0x0
c000c3e1:	56                   	push   esi
c000c3e2:	e8 77 f2 ff ff       	call   c000b65e <Computer::open(int, int, void*)>
c000c3e7:	83 c4 14             	add    esp,0x14
c000c3ea:	53                   	push   ebx
c000c3eb:	e8 b2 22 00 00       	call   c000e6a2 <VAS::~VAS()>
c000c3f0:	c7 04 24 c0 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fc0
c000c3f7:	e8 dc 94 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000c3fc:	83 c4 20             	add    esp,0x20
c000c3ff:	5b                   	pop    ebx
c000c400:	5e                   	pop    esi
c000c401:	5f                   	pop    edi
c000c402:	c3                   	ret    

c000c403 <Phys::allocateDMA(unsigned long)>:
c000c403:	55                   	push   ebp
c000c404:	31 d2                	xor    edx,edx
c000c406:	57                   	push   edi
c000c407:	31 ed                	xor    ebp,ebp
c000c409:	56                   	push   esi
c000c40a:	31 c9                	xor    ecx,ecx
c000c40c:	53                   	push   ebx
c000c40d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c411:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c417:	31 c0                	xor    eax,eax
c000c419:	c1 ee 0c             	shr    esi,0xc
c000c41c:	eb 17                	jmp    c000c435 <Phys::allocateDMA(unsigned long)+0x32>
c000c41e:	85 c9                	test   ecx,ecx
c000c420:	75 04                	jne    c000c426 <Phys::allocateDMA(unsigned long)+0x23>
c000c422:	89 d5                	mov    ebp,edx
c000c424:	89 d0                	mov    eax,edx
c000c426:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c429:	39 de                	cmp    esi,ebx
c000c42b:	74 20                	je     c000c44d <Phys::allocateDMA(unsigned long)+0x4a>
c000c42d:	42                   	inc    edx
c000c42e:	89 d9                	mov    ecx,ebx
c000c430:	83 fa 2f             	cmp    edx,0x2f
c000c433:	7f 11                	jg     c000c446 <Phys::allocateDMA(unsigned long)+0x43>
c000c435:	80 ba c0 43 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbc40],0x0
c000c43c:	74 e0                	je     c000c41e <Phys::allocateDMA(unsigned long)+0x1b>
c000c43e:	31 c9                	xor    ecx,ecx
c000c440:	42                   	inc    edx
c000c441:	83 fa 2f             	cmp    edx,0x2f
c000c444:	7e ef                	jle    c000c435 <Phys::allocateDMA(unsigned long)+0x32>
c000c446:	5b                   	pop    ebx
c000c447:	31 c0                	xor    eax,eax
c000c449:	5e                   	pop    esi
c000c44a:	5f                   	pop    edi
c000c44b:	5d                   	pop    ebp
c000c44c:	c3                   	ret    
c000c44d:	8d 14 30             	lea    edx,[eax+esi*1]
c000c450:	89 d7                	mov    edi,edx
c000c452:	4f                   	dec    edi
c000c453:	79 03                	jns    c000c458 <Phys::allocateDMA(unsigned long)+0x55>
c000c455:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c458:	c1 ff 04             	sar    edi,0x4
c000c45b:	89 c2                	mov    edx,eax
c000c45d:	c1 fa 04             	sar    edx,0x4
c000c460:	39 fa                	cmp    edx,edi
c000c462:	75 2f                	jne    c000c493 <Phys::allocateDMA(unsigned long)+0x90>
c000c464:	85 db                	test   ebx,ebx
c000c466:	74 1a                	je     c000c482 <Phys::allocateDMA(unsigned long)+0x7f>
c000c468:	be c0 43 02 c0       	mov    esi,0xc00243c0
c000c46d:	8d 90 c0 43 02 c0    	lea    edx,[eax-0x3ffdbc40]
c000c473:	f7 d6                	not    esi
c000c475:	29 c6                	sub    esi,eax
c000c477:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c47a:	42                   	inc    edx
c000c47b:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c47e:	39 d9                	cmp    ecx,ebx
c000c480:	7f f5                	jg     c000c477 <Phys::allocateDMA(unsigned long)+0x74>
c000c482:	85 ff                	test   edi,edi
c000c484:	74 13                	je     c000c499 <Phys::allocateDMA(unsigned long)+0x96>
c000c486:	5b                   	pop    ebx
c000c487:	05 50 20 0c 00       	add    eax,0xc2050
c000c48c:	5e                   	pop    esi
c000c48d:	c1 e0 0c             	shl    eax,0xc
c000c490:	5f                   	pop    edi
c000c491:	5d                   	pop    ebp
c000c492:	c3                   	ret    
c000c493:	89 ea                	mov    edx,ebp
c000c495:	31 c9                	xor    ecx,ecx
c000c497:	eb a7                	jmp    c000c440 <Phys::allocateDMA(unsigned long)+0x3d>
c000c499:	5b                   	pop    ebx
c000c49a:	c1 e0 0c             	shl    eax,0xc
c000c49d:	5e                   	pop    esi
c000c49e:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c4a3:	5f                   	pop    edi
c000c4a4:	5d                   	pop    ebp
c000c4a5:	c3                   	ret    

c000c4a6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4ae:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4b4:	c1 e9 0c             	shr    ecx,0xc
c000c4b7:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4bc:	76 25                	jbe    c000c4e3 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4be:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4c3:	c1 e8 0c             	shr    eax,0xc
c000c4c6:	8d 50 10             	lea    edx,[eax+0x10]
c000c4c9:	85 c9                	test   ecx,ecx
c000c4cb:	74 15                	je     c000c4e2 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4cd:	8d 82 c0 43 02 c0    	lea    eax,[edx-0x3ffdbc40]
c000c4d3:	8d 94 11 c0 43 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbc40]
c000c4da:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4dd:	40                   	inc    eax
c000c4de:	39 d0                	cmp    eax,edx
c000c4e0:	75 f8                	jne    c000c4da <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4e2:	c3                   	ret    
c000c4e3:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4e9:	c1 ea 0c             	shr    edx,0xc
c000c4ec:	eb db                	jmp    c000c4c9 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4ee <Phys::setPageState(unsigned long, bool)>:
c000c4ee:	56                   	push   esi
c000c4ef:	ba 01 00 00 00       	mov    edx,0x1
c000c4f4:	53                   	push   ebx
c000c4f5:	8b 35 84 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023784
c000c4fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c503:	89 c8                	mov    eax,ecx
c000c505:	83 e1 07             	and    ecx,0x7
c000c508:	c1 e8 03             	shr    eax,0x3
c000c50b:	d3 e3                	shl    ebx,cl
c000c50d:	01 c6                	add    esi,eax
c000c50f:	d3 e2                	shl    edx,cl
c000c511:	f7 d2                	not    edx
c000c513:	20 16                	and    BYTE PTR [esi],dl
c000c515:	03 05 84 37 02 c0    	add    eax,DWORD PTR ds:0xc0023784
c000c51b:	08 18                	or     BYTE PTR [eax],bl
c000c51d:	5b                   	pop    ebx
c000c51e:	5e                   	pop    esi
c000c51f:	c3                   	ret    

c000c520 <Phys::getPageState(unsigned long)>:
c000c520:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c524:	8b 15 84 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023784
c000c52a:	89 c8                	mov    eax,ecx
c000c52c:	83 e1 07             	and    ecx,0x7
c000c52f:	c1 e8 03             	shr    eax,0x3
c000c532:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c536:	d3 f8                	sar    eax,cl
c000c538:	83 e0 01             	and    eax,0x1
c000c53b:	c3                   	ret    

c000c53c <Phys::freePage(unsigned long)>:
c000c53c:	53                   	push   ebx
c000c53d:	83 ec 08             	sub    esp,0x8
c000c540:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c544:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c54a:	76 57                	jbe    c000c5a3 <Phys::freePage(unsigned long)+0x67>
c000c54c:	c1 eb 0c             	shr    ebx,0xc
c000c54f:	53                   	push   ebx
c000c550:	e8 cb ff ff ff       	call   c000c520 <Phys::getPageState(unsigned long)>
c000c555:	5a                   	pop    edx
c000c556:	84 c0                	test   al,al
c000c558:	74 5b                	je     c000c5b5 <Phys::freePage(unsigned long)+0x79>
c000c55a:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c000c55f:	48                   	dec    eax
c000c560:	a3 ac 43 02 c0       	mov    ds:0xc00243ac,eax
c000c565:	8d 04 80             	lea    eax,[eax+eax*4]
c000c568:	8d 04 80             	lea    eax,[eax+eax*4]
c000c56b:	c1 e0 02             	shl    eax,0x2
c000c56e:	99                   	cdq    
c000c56f:	f7 3d b0 43 02 c0    	idiv   DWORD PTR ds:0xc00243b0
c000c575:	39 05 a8 43 02 c0    	cmp    DWORD PTR ds:0xc00243a8,eax
c000c57b:	75 13                	jne    c000c590 <Phys::freePage(unsigned long)+0x54>
c000c57d:	83 ec 08             	sub    esp,0x8
c000c580:	6a 00                	push   0x0
c000c582:	53                   	push   ebx
c000c583:	e8 66 ff ff ff       	call   c000c4ee <Phys::setPageState(unsigned long, bool)>
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	83 c4 08             	add    esp,0x8
c000c58e:	5b                   	pop    ebx
c000c58f:	c3                   	ret    
c000c590:	83 ec 0c             	sub    esp,0xc
c000c593:	a3 a8 43 02 c0       	mov    ds:0xc00243a8,eax
c000c598:	50                   	push   eax
c000c599:	e8 00 0a 00 00       	call   c000cf9e <VgaText::updateRAMUsageDisplay(int)>
c000c59e:	83 c4 10             	add    esp,0x10
c000c5a1:	eb da                	jmp    c000c57d <Phys::freePage(unsigned long)+0x41>
c000c5a3:	68 00 10 00 00       	push   0x1000
c000c5a8:	53                   	push   ebx
c000c5a9:	e8 f8 fe ff ff       	call   c000c4a6 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5ae:	59                   	pop    ecx
c000c5af:	5b                   	pop    ebx
c000c5b0:	83 c4 08             	add    esp,0x8
c000c5b3:	5b                   	pop    ebx
c000c5b4:	c3                   	ret    
c000c5b5:	c7 44 24 10 db 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fdb
c000c5bd:	83 c4 08             	add    esp,0x8
c000c5c0:	5b                   	pop    ebx
c000c5c1:	e9 12 93 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>

c000c5c6 <Phys::allocatePage()>:
c000c5c6:	56                   	push   esi
c000c5c7:	53                   	push   ebx
c000c5c8:	51                   	push   ecx
c000c5c9:	8b 35 a0 43 02 c0    	mov    esi,DWORD PTR ds:0xc00243a0
c000c5cf:	89 f3                	mov    ebx,esi
c000c5d1:	eb 0a                	jmp    c000c5dd <Phys::allocatePage()+0x17>
c000c5d3:	89 1d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ebx
c000c5d9:	39 de                	cmp    esi,ebx
c000c5db:	74 24                	je     c000c601 <Phys::allocatePage()+0x3b>
c000c5dd:	53                   	push   ebx
c000c5de:	e8 3d ff ff ff       	call   c000c520 <Phys::getPageState(unsigned long)>
c000c5e3:	5a                   	pop    edx
c000c5e4:	84 c0                	test   al,al
c000c5e6:	74 5a                	je     c000c642 <Phys::allocatePage()+0x7c>
c000c5e8:	43                   	inc    ebx
c000c5e9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5ef:	75 e2                	jne    c000c5d3 <Phys::allocatePage()+0xd>
c000c5f1:	31 db                	xor    ebx,ebx
c000c5f3:	c7 05 a0 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243a0,0x0
c000c5fd:	39 de                	cmp    esi,ebx
c000c5ff:	75 dc                	jne    c000c5dd <Phys::allocatePage()+0x17>
c000c601:	83 ec 0c             	sub    esp,0xc
c000c604:	68 f1 0f 02 c0       	push   0xc0020ff1
c000c609:	e8 ff 2a 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000c60e:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c615:	e8 e9 fd ff ff       	call   c000c403 <Phys::allocateDMA(unsigned long)>
c000c61a:	83 c4 10             	add    esp,0x10
c000c61d:	85 c0                	test   eax,eax
c000c61f:	75 56                	jne    c000c677 <Phys::allocatePage()+0xb1>
c000c621:	83 ec 0c             	sub    esp,0xc
c000c624:	68 02 10 02 c0       	push   0xc0021002
c000c629:	e8 aa 92 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000c62e:	83 c4 10             	add    esp,0x10
c000c631:	8b 1d a0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243a0
c000c637:	53                   	push   ebx
c000c638:	e8 e3 fe ff ff       	call   c000c520 <Phys::getPageState(unsigned long)>
c000c63d:	5a                   	pop    edx
c000c63e:	84 c0                	test   al,al
c000c640:	75 a6                	jne    c000c5e8 <Phys::allocatePage()+0x22>
c000c642:	6a 01                	push   0x1
c000c644:	53                   	push   ebx
c000c645:	e8 a4 fe ff ff       	call   c000c4ee <Phys::setPageState(unsigned long, bool)>
c000c64a:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c000c64f:	59                   	pop    ecx
c000c650:	40                   	inc    eax
c000c651:	5b                   	pop    ebx
c000c652:	a3 ac 43 02 c0       	mov    ds:0xc00243ac,eax
c000c657:	8d 04 80             	lea    eax,[eax+eax*4]
c000c65a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c65d:	c1 e0 02             	shl    eax,0x2
c000c660:	99                   	cdq    
c000c661:	f7 3d b0 43 02 c0    	idiv   DWORD PTR ds:0xc00243b0
c000c667:	39 05 a8 43 02 c0    	cmp    DWORD PTR ds:0xc00243a8,eax
c000c66d:	75 0c                	jne    c000c67b <Phys::allocatePage()+0xb5>
c000c66f:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c000c674:	c1 e0 0c             	shl    eax,0xc
c000c677:	5a                   	pop    edx
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	c3                   	ret    
c000c67b:	83 ec 0c             	sub    esp,0xc
c000c67e:	a3 a8 43 02 c0       	mov    ds:0xc00243a8,eax
c000c683:	50                   	push   eax
c000c684:	e8 15 09 00 00       	call   c000cf9e <VgaText::updateRAMUsageDisplay(int)>
c000c689:	83 c4 10             	add    esp,0x10
c000c68c:	eb e1                	jmp    c000c66f <Phys::allocatePage()+0xa9>

c000c68e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c68e:	56                   	push   esi
c000c68f:	53                   	push   ebx
c000c690:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c694:	39 1d a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,ebx
c000c69a:	73 06                	jae    c000c6a2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c69c:	89 1d a4 43 02 c0    	mov    DWORD PTR ds:0xc00243a4,ebx
c000c6a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a6:	c1 eb 0c             	shr    ebx,0xc
c000c6a9:	c1 e8 0c             	shr    eax,0xc
c000c6ac:	39 d8                	cmp    eax,ebx
c000c6ae:	73 13                	jae    c000c6c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6b0:	6a 00                	push   0x0
c000c6b2:	8d 70 01             	lea    esi,[eax+0x1]
c000c6b5:	50                   	push   eax
c000c6b6:	e8 33 fe ff ff       	call   c000c4ee <Phys::setPageState(unsigned long, bool)>
c000c6bb:	5a                   	pop    edx
c000c6bc:	89 f0                	mov    eax,esi
c000c6be:	59                   	pop    ecx
c000c6bf:	39 f3                	cmp    ebx,esi
c000c6c1:	75 ed                	jne    c000c6b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6c3:	5b                   	pop    ebx
c000c6c4:	5e                   	pop    esi
c000c6c5:	c3                   	ret    

c000c6c6 <Phys::physicalMemorySetup(unsigned int)>:
c000c6c6:	55                   	push   ebp
c000c6c7:	57                   	push   edi
c000c6c8:	56                   	push   esi
c000c6c9:	53                   	push   ebx
c000c6ca:	31 db                	xor    ebx,ebx
c000c6cc:	83 ec 40             	sub    esp,0x40
c000c6cf:	6a 30                	push   0x30
c000c6d1:	6a 00                	push   0x0
c000c6d3:	68 c0 43 02 c0       	push   0xc00243c0
c000c6d8:	e8 dd 3f ff ff       	call   c00006ba <memset>
c000c6dd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6e6:	05 00 10 00 00       	add    eax,0x1000
c000c6eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c6ef:	83 c4 10             	add    esp,0x10
c000c6f2:	83 ec 08             	sub    esp,0x8
c000c6f5:	6a 01                	push   0x1
c000c6f7:	53                   	push   ebx
c000c6f8:	43                   	inc    ebx
c000c6f9:	e8 f0 fd ff ff       	call   c000c4ee <Phys::setPageState(unsigned long, bool)>
c000c6fe:	83 c4 10             	add    esp,0x10
c000c701:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c707:	75 e9                	jne    c000c6f2 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c709:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c710:	66 85 c0             	test   ax,ax
c000c713:	0f 84 8e 01 00 00    	je     c000c8a7 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c719:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c71d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c729:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c72e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c732:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c73a:	eb 15                	jmp    c000c751 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c73c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c740:	83 c3 18             	add    ebx,0x18
c000c743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c747:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c74b:	0f 84 66 01 00 00    	je     c000c8b7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c751:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c754:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c757:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c75a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c762:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c764:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c767:	01 f0                	add    eax,esi
c000c769:	55                   	push   ebp
c000c76a:	11 fa                	adc    edx,edi
c000c76c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c770:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c774:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c778:	56                   	push   esi
c000c779:	68 3c 10 02 c0       	push   0xc002103c
c000c77e:	e8 8a 29 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000c783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	09 f8                	or     eax,edi
c000c78c:	0f 85 25 01 00 00    	jne    c000c8b7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c792:	4d                   	dec    ebp
c000c793:	75 a7                	jne    c000c73c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c795:	ba 00 00 08 00       	mov    edx,0x80000
c000c79a:	89 c1                	mov    ecx,eax
c000c79c:	39 f2                	cmp    edx,esi
c000c79e:	19 f9                	sbb    ecx,edi
c000c7a0:	0f 82 a7 00 00 00    	jb     c000c84d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7a6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c7aa:	89 c1                	mov    ecx,eax
c000c7ac:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c7b0:	0f 83 97 00 00 00    	jae    c000c84d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7b6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c7bb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7bf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7c3:	39 fa                	cmp    edx,edi
c000c7c5:	19 e8                	sbb    eax,ebp
c000c7c7:	0f 82 14 01 00 00    	jb     c000c8e1 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c7cd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7d1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7d5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c7db:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c7e0:	83 d5 ff             	adc    ebp,0xffffffff
c000c7e3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c7e7:	31 c0                	xor    eax,eax
c000c7e9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c7ed:	39 fa                	cmp    edx,edi
c000c7ef:	89 c1                	mov    ecx,eax
c000c7f1:	19 e9                	sbb    ecx,ebp
c000c7f3:	0f 83 43 ff ff ff    	jae    c000c73c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7f9:	be 00 00 08 00       	mov    esi,0x80000
c000c7fe:	50                   	push   eax
c000c7ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c803:	57                   	push   edi
c000c804:	56                   	push   esi
c000c805:	68 60 10 02 c0       	push   0xc0021060
c000c80a:	e8 fe 28 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000c80f:	5a                   	pop    edx
c000c810:	59                   	pop    ecx
c000c811:	57                   	push   edi
c000c812:	56                   	push   esi
c000c813:	e8 76 fe ff ff       	call   c000c68e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c818:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c81c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c820:	83 c4 0c             	add    esp,0xc
c000c823:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c827:	03 05 b0 43 02 c0    	add    eax,DWORD PTR ds:0xc00243b0
c000c82d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c834:	a3 b0 43 02 c0       	mov    ds:0xc00243b0,eax
c000c839:	52                   	push   edx
c000c83a:	50                   	push   eax
c000c83b:	68 1e 10 02 c0       	push   0xc002101e
c000c840:	e8 c8 28 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000c845:	83 c4 10             	add    esp,0x10
c000c848:	e9 ef fe ff ff       	jmp    c000c73c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c84d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c851:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c855:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c859:	39 ea                	cmp    edx,ebp
c000c85b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c85f:	0f 82 d7 fe ff ff    	jb     c000c73c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c865:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c86a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c86e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c872:	0f 83 c4 fe ff ff    	jae    c000c73c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c878:	39 ee                	cmp    esi,ebp
c000c87a:	89 f8                	mov    eax,edi
c000c87c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c880:	0f 83 78 ff ff ff    	jae    c000c7fe <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c88a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c88e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c892:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c896:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c89a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c89e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8a2:	e9 57 ff ff ff       	jmp    c000c7fe <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c8a7:	83 ec 0c             	sub    esp,0xc
c000c8aa:	68 10 10 02 c0       	push   0xc0021010
c000c8af:	e8 24 90 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000c8b4:	83 c4 10             	add    esp,0x10
c000c8b7:	bb 40 01 00 00       	mov    ebx,0x140
c000c8bc:	83 ec 08             	sub    esp,0x8
c000c8bf:	6a 00                	push   0x0
c000c8c1:	53                   	push   ebx
c000c8c2:	43                   	inc    ebx
c000c8c3:	e8 26 fc ff ff       	call   c000c4ee <Phys::setPageState(unsigned long, bool)>
c000c8c8:	ff 05 b0 43 02 c0    	inc    DWORD PTR ds:0xc00243b0
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c8d7:	75 e3                	jne    c000c8bc <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c8d9:	83 c4 3c             	add    esp,0x3c
c000c8dc:	5b                   	pop    ebx
c000c8dd:	5e                   	pop    esi
c000c8de:	5f                   	pop    edi
c000c8df:	5d                   	pop    ebp
c000c8e0:	c3                   	ret    
c000c8e1:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c8e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c8f1:	e9 d7 fe ff ff       	jmp    c000c7cd <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c8f6 <Pipe::isAtty()>:
c000c8f6:	31 c0                	xor    eax,eax
c000c8f8:	c3                   	ret    
c000c8f9:	90                   	nop

c000c8fa <Pipe::~Pipe()>:
c000c8fa:	83 ec 0c             	sub    esp,0xc
c000c8fd:	ba cc 10 02 c0       	mov    edx,0xc00210cc
c000c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c906:	89 10                	mov    DWORD PTR [eax],edx
c000c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90c:	83 ec 0c             	sub    esp,0xc
c000c90f:	50                   	push   eax
c000c910:	e8 c5 15 00 00       	call   c000deda <UnixFile::~UnixFile()>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	90                   	nop
c000c919:	83 c4 0c             	add    esp,0xc
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <Pipe::~Pipe()>:
c000c91e:	83 ec 0c             	sub    esp,0xc
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c928:	e8 cd ff ff ff       	call   c000c8fa <Pipe::~Pipe()>
c000c92d:	83 c4 10             	add    esp,0x10
c000c930:	83 ec 08             	sub    esp,0x8
c000c933:	6a 20                	push   0x20
c000c935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c939:	e8 ef 26 00 00       	call   c000f02d <operator delete(void*, unsigned long)>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	83 c4 0c             	add    esp,0xc
c000c944:	c3                   	ret    
c000c945:	90                   	nop

c000c946 <Pipe::read(unsigned long long, void*, int*)>:
c000c946:	55                   	push   ebp
c000c947:	57                   	push   edi
c000c948:	56                   	push   esi
c000c949:	53                   	push   ebx
c000c94a:	83 ec 1c             	sub    esp,0x1c
c000c94d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c951:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c955:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c959:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c95c:	89 c8                	mov    eax,ecx
c000c95e:	99                   	cdq    
c000c95f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c963:	74 19                	je     c000c97e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c965:	39 f9                	cmp    ecx,edi
c000c967:	89 d1                	mov    ecx,edx
c000c969:	19 f1                	sbb    ecx,esi
c000c96b:	73 11                	jae    c000c97e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c96d:	e8 ba be 00 00       	call   c001882c <lockScheduler()>
c000c972:	e8 e9 c1 00 00       	call   c0018b60 <schedule()>
c000c977:	e8 b2 be 00 00       	call   c001882e <unlockScheduler()>
c000c97c:	eb db                	jmp    c000c959 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c97e:	39 f8                	cmp    eax,edi
c000c980:	89 d1                	mov    ecx,edx
c000c982:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c986:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c98a:	19 f1                	sbb    ecx,esi
c000c98c:	73 08                	jae    c000c996 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c98e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c992:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c996:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c999:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c99c:	29 c6                	sub    esi,eax
c000c99e:	89 f1                	mov    ecx,esi
c000c9a0:	c1 f9 1f             	sar    ecx,0x1f
c000c9a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9a7:	89 ca                	mov    edx,ecx
c000c9a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9ad:	19 d1                	sbb    ecx,edx
c000c9af:	73 04                	jae    c000c9b5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9b1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9b5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9b9:	89 fd                	mov    ebp,edi
c000c9bb:	29 f5                	sub    ebp,esi
c000c9bd:	85 f6                	test   esi,esi
c000c9bf:	74 12                	je     c000c9d3 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9c1:	52                   	push   edx
c000c9c2:	56                   	push   esi
c000c9c3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9c6:	50                   	push   eax
c000c9c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9cb:	e8 b4 3c ff ff       	call   c0000684 <memcpy>
c000c9d0:	83 c4 10             	add    esp,0x10
c000c9d3:	85 ed                	test   ebp,ebp
c000c9d5:	74 12                	je     c000c9e9 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9d7:	50                   	push   eax
c000c9d8:	55                   	push   ebp
c000c9d9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9dc:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9e0:	56                   	push   esi
c000c9e1:	e8 9e 3c ff ff       	call   c0000684 <memcpy>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9ef:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9f2:	99                   	cdq    
c000c9f3:	89 f7                	mov    edi,esi
c000c9f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9fd:	c1 ff 1f             	sar    edi,0x1f
c000ca00:	57                   	push   edi
c000ca01:	56                   	push   esi
c000ca02:	52                   	push   edx
c000ca03:	50                   	push   eax
c000ca04:	e8 a3 28 01 00       	call   c001f2ac <__umoddi3>
c000ca09:	83 c4 10             	add    esp,0x10
c000ca0c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca0f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca14:	75 10                	jne    c000ca26 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	68 89 10 02 c0       	push   0xc0021089
c000ca1e:	e8 b5 8e 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca2e:	89 10                	mov    DWORD PTR [eax],edx
c000ca30:	83 c4 1c             	add    esp,0x1c
c000ca33:	31 c0                	xor    eax,eax
c000ca35:	5b                   	pop    ebx
c000ca36:	5e                   	pop    esi
c000ca37:	5f                   	pop    edi
c000ca38:	5d                   	pop    ebp
c000ca39:	c3                   	ret    

c000ca3a <Pipe::write(unsigned long long, void*, int*)>:
c000ca3a:	55                   	push   ebp
c000ca3b:	57                   	push   edi
c000ca3c:	56                   	push   esi
c000ca3d:	53                   	push   ebx
c000ca3e:	83 ec 1c             	sub    esp,0x1c
c000ca41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca50:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca53:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca5a:	89 de                	mov    esi,ebx
c000ca5c:	89 df                	mov    edi,ebx
c000ca5e:	c1 ff 1f             	sar    edi,0x1f
c000ca61:	01 c6                	add    esi,eax
c000ca63:	89 c8                	mov    eax,ecx
c000ca65:	11 d7                	adc    edi,edx
c000ca67:	99                   	cdq    
c000ca68:	39 f1                	cmp    ecx,esi
c000ca6a:	89 d0                	mov    eax,edx
c000ca6c:	19 f8                	sbb    eax,edi
c000ca6e:	b8 01 00 00 00       	mov    eax,0x1
c000ca73:	0f 82 80 00 00 00    	jb     c000caf9 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca79:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca7c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca7f:	01 d8                	add    eax,ebx
c000ca81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca85:	99                   	cdq    
c000ca86:	f7 f9                	idiv   ecx
c000ca88:	29 d1                	sub    ecx,edx
c000ca8a:	89 d7                	mov    edi,edx
c000ca8c:	89 c8                	mov    eax,ecx
c000ca8e:	99                   	cdq    
c000ca8f:	39 ce                	cmp    esi,ecx
c000ca91:	19 d3                	sbb    ebx,edx
c000ca93:	bb 00 00 00 00       	mov    ebx,0x0
c000ca98:	72 04                	jb     c000ca9e <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca9a:	89 f3                	mov    ebx,esi
c000ca9c:	29 cb                	sub    ebx,ecx
c000ca9e:	89 f1                	mov    ecx,esi
c000caa0:	29 d9                	sub    ecx,ebx
c000caa2:	74 1a                	je     c000cabe <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caa4:	52                   	push   edx
c000caa5:	51                   	push   ecx
c000caa6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000caaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caae:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cab1:	57                   	push   edi
c000cab2:	e8 cd 3b ff ff       	call   c0000684 <memcpy>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cabe:	85 db                	test   ebx,ebx
c000cac0:	74 12                	je     c000cad4 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cac2:	50                   	push   eax
c000cac3:	53                   	push   ebx
c000cac4:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cac8:	51                   	push   ecx
c000cac9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cacc:	e8 b3 3b ff ff       	call   c0000684 <memcpy>
c000cad1:	83 c4 10             	add    esp,0x10
c000cad4:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cad7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cadc:	75 10                	jne    c000caee <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cade:	83 ec 0c             	sub    esp,0xc
c000cae1:	68 a5 10 02 c0       	push   0xc00210a5
c000cae6:	e8 ed 8d 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000caeb:	83 c4 10             	add    esp,0x10
c000caee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caf2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000caf5:	89 38                	mov    DWORD PTR [eax],edi
c000caf7:	31 c0                	xor    eax,eax
c000caf9:	83 c4 1c             	add    esp,0x1c
c000cafc:	5b                   	pop    ebx
c000cafd:	5e                   	pop    esi
c000cafe:	5f                   	pop    edi
c000caff:	5d                   	pop    ebp
c000cb00:	c3                   	ret    
c000cb01:	90                   	nop

c000cb02 <Pipe::Pipe(int)>:
c000cb02:	83 ec 0c             	sub    esp,0xc
c000cb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb09:	83 ec 08             	sub    esp,0x8
c000cb0c:	6a 00                	push   0x0
c000cb0e:	50                   	push   eax
c000cb0f:	e8 24 12 00 00       	call   c000dd38 <UnixFile::UnixFile(int)>
c000cb14:	83 c4 10             	add    esp,0x10
c000cb17:	ba cc 10 02 c0       	mov    edx,0xc00210cc
c000cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb20:	89 10                	mov    DWORD PTR [eax],edx
c000cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb31:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb47:	83 ec 0c             	sub    esp,0xc
c000cb4a:	50                   	push   eax
c000cb4b:	e8 cc f4 ff ff       	call   c000c01c <malloc>
c000cb50:	83 c4 10             	add    esp,0x10
c000cb53:	89 c2                	mov    edx,eax
c000cb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb60:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb64:	90                   	nop
c000cb65:	83 c4 0c             	add    esp,0xc
c000cb68:	c3                   	ret    
c000cb69:	90                   	nop

c000cb6a <VgaText::isAtty()>:
c000cb6a:	b0 01                	mov    al,0x1
c000cb6c:	c3                   	ret    
c000cb6d:	90                   	nop

c000cb6e <VgaText::~VgaText()>:
c000cb6e:	83 ec 0c             	sub    esp,0xc
c000cb71:	ba 88 11 02 c0       	mov    edx,0xc0021188
c000cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7a:	89 10                	mov    DWORD PTR [eax],edx
c000cb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	50                   	push   eax
c000cb84:	e8 51 13 00 00       	call   c000deda <UnixFile::~UnixFile()>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	90                   	nop
c000cb8d:	83 c4 0c             	add    esp,0xc
c000cb90:	c3                   	ret    
c000cb91:	90                   	nop

c000cb92 <VgaText::~VgaText()>:
c000cb92:	83 ec 0c             	sub    esp,0xc
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb9c:	e8 cd ff ff ff       	call   c000cb6e <VgaText::~VgaText()>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	83 ec 08             	sub    esp,0x8
c000cba7:	68 60 12 00 00       	push   0x1260
c000cbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb0:	e8 78 24 00 00       	call   c000f02d <operator delete(void*, unsigned long)>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	83 c4 0c             	add    esp,0xc
c000cbbb:	c3                   	ret    

c000cbbc <VgaText::read(unsigned long long, void*, int*)>:
c000cbbc:	83 ec 10             	sub    esp,0x10
c000cbbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbcb:	e8 38 57 00 00       	call   c0012308 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbd4:	89 02                	mov    DWORD PTR [edx],eax
c000cbd6:	31 c0                	xor    eax,eax
c000cbd8:	83 c4 1c             	add    esp,0x1c
c000cbdb:	c3                   	ret    

c000cbdc <setTerminalScrollLock(bool)>:
c000cbdc:	c3                   	ret    

c000cbdd <addToTerminalCycle(VgaText*)>:
c000cbdd:	8b 15 20 44 02 c0    	mov    edx,DWORD PTR ds:0xc0024420
c000cbe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe7:	85 d2                	test   edx,edx
c000cbe9:	75 0c                	jne    c000cbf7 <addToTerminalCycle(VgaText*)+0x1a>
c000cbeb:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbf1:	a3 20 44 02 c0       	mov    ds:0xc0024420,eax
c000cbf6:	c3                   	ret    
c000cbf7:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbfd:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc03:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc09:	c3                   	ret    

c000cc0a <installVgaTextImplementation()>:
c000cc0a:	83 ec 10             	sub    esp,0x10
c000cc0d:	6a 20                	push   0x20
c000cc0f:	6a 00                	push   0x0
c000cc11:	68 00 44 02 c0       	push   0xc0024400
c000cc16:	e8 9f 3a ff ff       	call   c00006ba <memset>
c000cc1b:	83 c4 1c             	add    esp,0x1c
c000cc1e:	c3                   	ret    

c000cc1f <scrollTerminalScrollLock(int)>:
c000cc1f:	c3                   	ret    

c000cc20 <VgaText::load()>:
c000cc20:	53                   	push   ebx
c000cc21:	31 c0                	xor    eax,eax
c000cc23:	83 ec 58             	sub    esp,0x58
c000cc26:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc2a:	89 e2                	mov    edx,esp
c000cc2c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc30:	40                   	inc    eax
c000cc31:	83 f8 50             	cmp    eax,0x50
c000cc34:	75 f6                	jne    c000cc2c <VgaText::load()+0xc>
c000cc36:	31 c0                	xor    eax,eax
c000cc38:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc3f:	84 c9                	test   cl,cl
c000cc41:	74 06                	je     c000cc49 <VgaText::load()+0x29>
c000cc43:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc46:	40                   	inc    eax
c000cc47:	eb ef                	jmp    c000cc38 <VgaText::load()+0x18>
c000cc49:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc4f:	85 c0                	test   eax,eax
c000cc51:	74 09                	je     c000cc5c <VgaText::load()+0x3c>
c000cc53:	51                   	push   ecx
c000cc54:	51                   	push   ecx
c000cc55:	52                   	push   edx
c000cc56:	53                   	push   ebx
c000cc57:	ff d0                	call   eax
c000cc59:	83 c4 10             	add    esp,0x10
c000cc5c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc62:	85 c0                	test   eax,eax
c000cc64:	74 09                	je     c000cc6f <VgaText::load()+0x4f>
c000cc66:	83 ec 0c             	sub    esp,0xc
c000cc69:	53                   	push   ebx
c000cc6a:	ff d0                	call   eax
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	83 c4 58             	add    esp,0x58
c000cc72:	5b                   	pop    ebx
c000cc73:	c3                   	ret    

c000cc74 <VgaText::updateCursor()>:
c000cc74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc78:	39 05 24 44 02 c0    	cmp    DWORD PTR ds:0xc0024424,eax
c000cc7e:	75 0c                	jne    c000cc8c <VgaText::updateCursor()+0x18>
c000cc80:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc86:	85 c0                	test   eax,eax
c000cc88:	74 02                	je     c000cc8c <VgaText::updateCursor()+0x18>
c000cc8a:	ff e0                	jmp    eax
c000cc8c:	c3                   	ret    
c000cc8d:	90                   	nop

c000cc8e <VgaText::showCursor(bool)>:
c000cc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc96:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc9c:	c3                   	ret    
c000cc9d:	90                   	nop

c000cc9e <VgaText::disableBlink(bool)>:
c000cc9e:	56                   	push   esi
c000cc9f:	53                   	push   ebx
c000cca0:	51                   	push   ecx
c000cca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca9:	39 1d 24 44 02 c0    	cmp    DWORD PTR ds:0xc0024424,ebx
c000ccaf:	75 18                	jne    c000ccc9 <VgaText::disableBlink(bool)+0x2b>
c000ccb1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccb7:	85 c0                	test   eax,eax
c000ccb9:	74 0e                	je     c000ccc9 <VgaText::disableBlink(bool)+0x2b>
c000ccbb:	89 f1                	mov    ecx,esi
c000ccbd:	52                   	push   edx
c000ccbe:	52                   	push   edx
c000ccbf:	0f b6 d1             	movzx  edx,cl
c000ccc2:	52                   	push   edx
c000ccc3:	53                   	push   ebx
c000ccc4:	ff d0                	call   eax
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	89 f0                	mov    eax,esi
c000cccb:	83 f0 01             	xor    eax,0x1
c000ccce:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccd4:	58                   	pop    eax
c000ccd5:	5b                   	pop    ebx
c000ccd6:	5e                   	pop    esi
c000ccd7:	c3                   	ret    

c000ccd8 <VgaText::doANSI_SGR(int)>:
c000ccd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce0:	85 d2                	test   edx,edx
c000cce2:	75 14                	jne    c000ccf8 <VgaText::doANSI_SGR(int)+0x20>
c000cce4:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccea:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccf0:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccf6:	eb 65                	jmp    c000cd5d <VgaText::doANSI_SGR(int)+0x85>
c000ccf8:	83 fa 07             	cmp    edx,0x7
c000ccfb:	75 14                	jne    c000cd11 <VgaText::doANSI_SGR(int)+0x39>
c000ccfd:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd03:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd09:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd0f:	eb 4c                	jmp    c000cd5d <VgaText::doANSI_SGR(int)+0x85>
c000cd11:	83 fa 1b             	cmp    edx,0x1b
c000cd14:	74 ce                	je     c000cce4 <VgaText::doANSI_SGR(int)+0xc>
c000cd16:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd19:	83 f9 07             	cmp    ecx,0x7
c000cd1c:	77 09                	ja     c000cd27 <VgaText::doANSI_SGR(int)+0x4f>
c000cd1e:	8b 14 8d c0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc840]
c000cd25:	eb 20                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x6f>
c000cd27:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd2a:	83 f9 07             	cmp    ecx,0x7
c000cd2d:	77 09                	ja     c000cd38 <VgaText::doANSI_SGR(int)+0x60>
c000cd2f:	8b 14 8d c0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc840]
c000cd36:	eb 25                	jmp    c000cd5d <VgaText::doANSI_SGR(int)+0x85>
c000cd38:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd3b:	83 f9 07             	cmp    ecx,0x7
c000cd3e:	77 0e                	ja     c000cd4e <VgaText::doANSI_SGR(int)+0x76>
c000cd40:	8b 14 95 78 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc988]
c000cd47:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd4d:	c3                   	ret    
c000cd4e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd51:	83 f9 07             	cmp    ecx,0x7
c000cd54:	77 0d                	ja     c000cd63 <VgaText::doANSI_SGR(int)+0x8b>
c000cd56:	8b 14 95 50 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9b0]
c000cd5d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd63:	c3                   	ret    

c000cd64 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd72:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd78:	c3                   	ret    
c000cd79:	90                   	nop

c000cd7a <VgaText::setDefaultFgColour(VgaColour)>:
c000cd7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd82:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd88:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd8e:	c3                   	ret    
c000cd8f:	90                   	nop

c000cd90 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd90:	53                   	push   ebx
c000cd91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd9d:	51                   	push   ecx
c000cd9e:	e8 c1 ff ff ff       	call   c000cd64 <VgaText::setDefaultBgColour(VgaColour)>
c000cda3:	58                   	pop    eax
c000cda4:	5a                   	pop    edx
c000cda5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cda9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdad:	5b                   	pop    ebx
c000cdae:	eb ca                	jmp    c000cd7a <VgaText::setDefaultFgColour(VgaColour)>

c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdb0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdb4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdb9:	83 e0 0f             	and    eax,0xf
c000cdbc:	c1 e2 04             	shl    edx,0x4
c000cdbf:	09 d0                	or     eax,edx
c000cdc1:	c3                   	ret    

c000cdc2 <VgaText::scrollScreen()>:
c000cdc2:	57                   	push   edi
c000cdc3:	56                   	push   esi
c000cdc4:	be 01 00 00 00       	mov    esi,0x1
c000cdc9:	53                   	push   ebx
c000cdca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdce:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdd4:	31 ff                	xor    edi,edi
c000cdd6:	01 d9                	add    ecx,ebx
c000cdd8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cddb:	83 fe 17             	cmp    esi,0x17
c000cdde:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cde4:	75 28                	jne    c000ce0e <VgaText::scrollScreen()+0x4c>
c000cde6:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdec:	74 1c                	je     c000ce0a <VgaText::scrollScreen()+0x48>
c000cdee:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdf5:	50                   	push   eax
c000cdf6:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdfd:	50                   	push   eax
c000cdfe:	e8 ad ff ff ff       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce03:	5a                   	pop    edx
c000ce04:	5a                   	pop    edx
c000ce05:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce08:	eb 04                	jmp    c000ce0e <VgaText::scrollScreen()+0x4c>
c000ce0a:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce0e:	47                   	inc    edi
c000ce0f:	41                   	inc    ecx
c000ce10:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce16:	75 c0                	jne    c000cdd8 <VgaText::scrollScreen()+0x16>
c000ce18:	46                   	inc    esi
c000ce19:	83 fe 18             	cmp    esi,0x18
c000ce1c:	75 b0                	jne    c000cdce <VgaText::scrollScreen()+0xc>
c000ce1e:	39 1d 24 44 02 c0    	cmp    DWORD PTR ds:0xc0024424,ebx
c000ce24:	75 24                	jne    c000ce4a <VgaText::scrollScreen()+0x88>
c000ce26:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce2d:	74 08                	je     c000ce37 <VgaText::scrollScreen()+0x75>
c000ce2f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce35:	eb 13                	jmp    c000ce4a <VgaText::scrollScreen()+0x88>
c000ce37:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce3d:	85 c0                	test   eax,eax
c000ce3f:	74 09                	je     c000ce4a <VgaText::scrollScreen()+0x88>
c000ce41:	83 ec 0c             	sub    esp,0xc
c000ce44:	53                   	push   ebx
c000ce45:	ff d0                	call   eax
c000ce47:	83 c4 10             	add    esp,0x10
c000ce4a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce4e:	5b                   	pop    ebx
c000ce4f:	5e                   	pop    esi
c000ce50:	5f                   	pop    edi
c000ce51:	e9 1e fe ff ff       	jmp    c000cc74 <VgaText::updateCursor()>

c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce5b:	c1 e0 08             	shl    eax,0x8
c000ce5e:	89 c2                	mov    edx,eax
c000ce60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce65:	09 d0                	or     eax,edx
c000ce67:	c3                   	ret    

c000ce68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce68:	53                   	push   ebx
c000ce69:	83 ec 08             	sub    esp,0x8
c000ce6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce70:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce75:	50                   	push   eax
c000ce76:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce7b:	50                   	push   eax
c000ce7c:	e8 2f ff ff ff       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce81:	5a                   	pop    edx
c000ce82:	0f b6 c0             	movzx  eax,al
c000ce85:	5b                   	pop    ebx
c000ce86:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce8b:	50                   	push   eax
c000ce8c:	53                   	push   ebx
c000ce8d:	e8 c4 ff ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce92:	5a                   	pop    edx
c000ce93:	5a                   	pop    edx
c000ce94:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce9a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce9e:	0f b7 d2             	movzx  edx,dx
c000cea1:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cea6:	39 0d 24 44 02 c0    	cmp    DWORD PTR ds:0xc0024424,ecx
c000ceac:	75 14                	jne    c000cec2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceae:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ceb4:	85 c0                	test   eax,eax
c000ceb6:	74 0a                	je     c000cec2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cebc:	83 c4 08             	add    esp,0x8
c000cebf:	5b                   	pop    ebx
c000cec0:	ff e0                	jmp    eax
c000cec2:	83 c4 08             	add    esp,0x8
c000cec5:	5b                   	pop    ebx
c000cec6:	c3                   	ret    
c000cec7:	90                   	nop

c000cec8 <VgaText::getCursorX()>:
c000cec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cecc:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ced2:	c3                   	ret    
c000ced3:	90                   	nop

c000ced4 <VgaText::getCursorY()>:
c000ced4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cede:	c3                   	ret    
c000cedf:	90                   	nop

c000cee0 <VgaText::setCursor(int, int)>:
c000cee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cee8:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ceee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cef2:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cef8:	e9 77 fd ff ff       	jmp    c000cc74 <VgaText::updateCursor()>
c000cefd:	90                   	nop

c000cefe <VgaText::setCursorX(int)>:
c000cefe:	83 ec 10             	sub    esp,0x10
c000cf01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf05:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0f:	50                   	push   eax
c000cf10:	e8 cb ff ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000cf15:	83 c4 1c             	add    esp,0x1c
c000cf18:	c3                   	ret    
c000cf19:	90                   	nop

c000cf1a <VgaText::setCursorY(int)>:
c000cf1a:	83 ec 10             	sub    esp,0x10
c000cf1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf25:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf2b:	50                   	push   eax
c000cf2c:	e8 af ff ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000cf31:	83 c4 1c             	add    esp,0x1c
c000cf34:	c3                   	ret    
c000cf35:	90                   	nop

c000cf36 <VgaText::incrementCursor(bool)>:
c000cf36:	56                   	push   esi
c000cf37:	53                   	push   ebx
c000cf38:	51                   	push   ecx
c000cf39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf41:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf47:	40                   	inc    eax
c000cf48:	83 f8 50             	cmp    eax,0x50
c000cf4b:	74 08                	je     c000cf55 <VgaText::incrementCursor(bool)+0x1f>
c000cf4d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf53:	eb 33                	jmp    c000cf88 <VgaText::incrementCursor(bool)+0x52>
c000cf55:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf5b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf65:	8d 50 01             	lea    edx,[eax+0x1]
c000cf68:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf6e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf74:	75 12                	jne    c000cf88 <VgaText::incrementCursor(bool)+0x52>
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf7f:	53                   	push   ebx
c000cf80:	e8 3d fe ff ff       	call   c000cdc2 <VgaText::scrollScreen()>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	89 f0                	mov    eax,esi
c000cf8a:	84 c0                	test   al,al
c000cf8c:	74 0c                	je     c000cf9a <VgaText::incrementCursor(bool)+0x64>
c000cf8e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf92:	5a                   	pop    edx
c000cf93:	5b                   	pop    ebx
c000cf94:	5e                   	pop    esi
c000cf95:	e9 da fc ff ff       	jmp    c000cc74 <VgaText::updateCursor()>
c000cf9a:	58                   	pop    eax
c000cf9b:	5b                   	pop    ebx
c000cf9c:	5e                   	pop    esi
c000cf9d:	c3                   	ret    

c000cf9e <VgaText::updateRAMUsageDisplay(int)>:
c000cf9e:	53                   	push   ebx
c000cf9f:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfa4:	6a 0f                	push   0xf
c000cfa6:	6a 00                	push   0x0
c000cfa8:	e8 03 fe ff ff       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfad:	5a                   	pop    edx
c000cfae:	59                   	pop    ecx
c000cfaf:	0f b6 c8             	movzx  ecx,al
c000cfb2:	51                   	push   ecx
c000cfb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfb7:	99                   	cdq    
c000cfb8:	f7 fb                	idiv   ebx
c000cfba:	89 d3                	mov    ebx,edx
c000cfbc:	83 c0 30             	add    eax,0x30
c000cfbf:	83 c3 30             	add    ebx,0x30
c000cfc2:	0f be c0             	movsx  eax,al
c000cfc5:	0f b6 db             	movzx  ebx,bl
c000cfc8:	50                   	push   eax
c000cfc9:	e8 88 fe ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfce:	5a                   	pop    edx
c000cfcf:	5a                   	pop    edx
c000cfd0:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfd6:	51                   	push   ecx
c000cfd7:	53                   	push   ebx
c000cfd8:	e8 79 fe ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfdd:	5b                   	pop    ebx
c000cfde:	5a                   	pop    edx
c000cfdf:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfe5:	51                   	push   ecx
c000cfe6:	6a 25                	push   0x25
c000cfe8:	e8 69 fe ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfed:	59                   	pop    ecx
c000cfee:	5b                   	pop    ebx
c000cfef:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cff5:	5b                   	pop    ebx
c000cff6:	c3                   	ret    
c000cff7:	90                   	nop

c000cff8 <VgaText::updateDiskUsage()>:
c000cff8:	55                   	push   ebp
c000cff9:	bd 10 27 00 00       	mov    ebp,0x2710
c000cffe:	57                   	push   edi
c000cfff:	56                   	push   esi
c000d000:	53                   	push   ebx
c000d001:	6a 0f                	push   0xf
c000d003:	6a 00                	push   0x0
c000d005:	e8 a6 fd ff ff       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d00a:	5a                   	pop    edx
c000d00b:	0f b6 d8             	movzx  ebx,al
c000d00e:	59                   	pop    ecx
c000d00f:	a1 04 61 02 c0       	mov    eax,ds:0xc0026104
c000d014:	53                   	push   ebx
c000d015:	b9 0a 00 00 00       	mov    ecx,0xa
c000d01a:	99                   	cdq    
c000d01b:	f7 fd                	idiv   ebp
c000d01d:	99                   	cdq    
c000d01e:	f7 f9                	idiv   ecx
c000d020:	8d 42 30             	lea    eax,[edx+0x30]
c000d023:	0f b6 c0             	movzx  eax,al
c000d026:	50                   	push   eax
c000d027:	e8 2a fe ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d02c:	5e                   	pop    esi
c000d02d:	5f                   	pop    edi
c000d02e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d034:	bf e8 03 00 00       	mov    edi,0x3e8
c000d039:	53                   	push   ebx
c000d03a:	a1 04 61 02 c0       	mov    eax,ds:0xc0026104
c000d03f:	99                   	cdq    
c000d040:	f7 ff                	idiv   edi
c000d042:	99                   	cdq    
c000d043:	f7 f9                	idiv   ecx
c000d045:	8d 42 30             	lea    eax,[edx+0x30]
c000d048:	0f b6 c0             	movzx  eax,al
c000d04b:	50                   	push   eax
c000d04c:	e8 05 fe ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d051:	5a                   	pop    edx
c000d052:	5e                   	pop    esi
c000d053:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d059:	be 64 00 00 00       	mov    esi,0x64
c000d05e:	53                   	push   ebx
c000d05f:	a1 04 61 02 c0       	mov    eax,ds:0xc0026104
c000d064:	99                   	cdq    
c000d065:	f7 fe                	idiv   esi
c000d067:	99                   	cdq    
c000d068:	f7 f9                	idiv   ecx
c000d06a:	8d 42 30             	lea    eax,[edx+0x30]
c000d06d:	0f b6 c0             	movzx  eax,al
c000d070:	50                   	push   eax
c000d071:	e8 e0 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d076:	5a                   	pop    edx
c000d077:	5a                   	pop    edx
c000d078:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d07e:	53                   	push   ebx
c000d07f:	a1 04 61 02 c0       	mov    eax,ds:0xc0026104
c000d084:	99                   	cdq    
c000d085:	f7 f9                	idiv   ecx
c000d087:	99                   	cdq    
c000d088:	f7 f9                	idiv   ecx
c000d08a:	8d 42 30             	lea    eax,[edx+0x30]
c000d08d:	0f b6 c0             	movzx  eax,al
c000d090:	50                   	push   eax
c000d091:	e8 c0 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d096:	5a                   	pop    edx
c000d097:	5a                   	pop    edx
c000d098:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d09e:	53                   	push   ebx
c000d09f:	a1 04 61 02 c0       	mov    eax,ds:0xc0026104
c000d0a4:	99                   	cdq    
c000d0a5:	f7 f9                	idiv   ecx
c000d0a7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0aa:	0f b6 c0             	movzx  eax,al
c000d0ad:	50                   	push   eax
c000d0ae:	e8 a3 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b3:	5a                   	pop    edx
c000d0b4:	5a                   	pop    edx
c000d0b5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0bb:	53                   	push   ebx
c000d0bc:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c000d0c1:	99                   	cdq    
c000d0c2:	f7 fd                	idiv   ebp
c000d0c4:	99                   	cdq    
c000d0c5:	f7 f9                	idiv   ecx
c000d0c7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ca:	0f b6 c0             	movzx  eax,al
c000d0cd:	50                   	push   eax
c000d0ce:	e8 83 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	5d                   	pop    ebp
c000d0d4:	5a                   	pop    edx
c000d0d5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0db:	53                   	push   ebx
c000d0dc:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c000d0e1:	99                   	cdq    
c000d0e2:	f7 ff                	idiv   edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 f9                	idiv   ecx
c000d0e7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ea:	0f b6 c0             	movzx  eax,al
c000d0ed:	50                   	push   eax
c000d0ee:	e8 63 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0f3:	5f                   	pop    edi
c000d0f4:	5d                   	pop    ebp
c000d0f5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0fb:	53                   	push   ebx
c000d0fc:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c000d101:	99                   	cdq    
c000d102:	f7 fe                	idiv   esi
c000d104:	99                   	cdq    
c000d105:	f7 f9                	idiv   ecx
c000d107:	8d 42 30             	lea    eax,[edx+0x30]
c000d10a:	0f b6 c0             	movzx  eax,al
c000d10d:	50                   	push   eax
c000d10e:	e8 43 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d113:	5a                   	pop    edx
c000d114:	5e                   	pop    esi
c000d115:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d11b:	53                   	push   ebx
c000d11c:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c000d121:	99                   	cdq    
c000d122:	f7 f9                	idiv   ecx
c000d124:	99                   	cdq    
c000d125:	f7 f9                	idiv   ecx
c000d127:	8d 42 30             	lea    eax,[edx+0x30]
c000d12a:	0f b6 c0             	movzx  eax,al
c000d12d:	50                   	push   eax
c000d12e:	e8 23 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d133:	5f                   	pop    edi
c000d134:	5d                   	pop    ebp
c000d135:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d13b:	53                   	push   ebx
c000d13c:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c000d141:	99                   	cdq    
c000d142:	f7 f9                	idiv   ecx
c000d144:	83 c2 30             	add    edx,0x30
c000d147:	0f b6 d2             	movzx  edx,dl
c000d14a:	52                   	push   edx
c000d14b:	e8 06 fd ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d150:	5a                   	pop    edx
c000d151:	59                   	pop    ecx
c000d152:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d158:	5b                   	pop    ebx
c000d159:	5e                   	pop    esi
c000d15a:	5f                   	pop    edi
c000d15b:	5d                   	pop    ebp
c000d15c:	c3                   	ret    
c000d15d:	90                   	nop

c000d15e <VgaText::updateTitle()>:
c000d15e:	53                   	push   ebx
c000d15f:	31 c0                	xor    eax,eax
c000d161:	83 ec 58             	sub    esp,0x58
c000d164:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d168:	89 e1                	mov    ecx,esp
c000d16a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d16e:	40                   	inc    eax
c000d16f:	83 f8 50             	cmp    eax,0x50
c000d172:	75 f6                	jne    c000d16a <VgaText::updateTitle()+0xc>
c000d174:	31 c0                	xor    eax,eax
c000d176:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d17d:	84 db                	test   bl,bl
c000d17f:	74 06                	je     c000d187 <VgaText::updateTitle()+0x29>
c000d181:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d184:	40                   	inc    eax
c000d185:	eb ef                	jmp    c000d176 <VgaText::updateTitle()+0x18>
c000d187:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d18d:	85 c0                	test   eax,eax
c000d18f:	74 09                	je     c000d19a <VgaText::updateTitle()+0x3c>
c000d191:	53                   	push   ebx
c000d192:	53                   	push   ebx
c000d193:	51                   	push   ecx
c000d194:	52                   	push   edx
c000d195:	ff d0                	call   eax
c000d197:	83 c4 10             	add    esp,0x10
c000d19a:	e8 59 fe ff ff       	call   c000cff8 <VgaText::updateDiskUsage()>
c000d19f:	83 c4 58             	add    esp,0x58
c000d1a2:	5b                   	pop    ebx
c000d1a3:	c3                   	ret    

c000d1a4 <VgaText::setTitleTextColour(VgaColour)>:
c000d1a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1b2:	eb aa                	jmp    c000d15e <VgaText::updateTitle()>

c000d1b4 <VgaText::setTitleColour(VgaColour)>:
c000d1b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1bc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1c2:	eb 9a                	jmp    c000d15e <VgaText::updateTitle()>

c000d1c4 <VgaText::setTitle(char*)>:
c000d1c4:	53                   	push   ebx
c000d1c5:	83 ec 10             	sub    esp,0x10
c000d1c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1d6:	50                   	push   eax
c000d1d7:	e8 7d 35 ff ff       	call   c0000759 <strcpy>
c000d1dc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1e0:	83 c4 18             	add    esp,0x18
c000d1e3:	5b                   	pop    ebx
c000d1e4:	e9 75 ff ff ff       	jmp    c000d15e <VgaText::updateTitle()>
c000d1e9:	90                   	nop

c000d1ea <VgaText::decrementCursor(bool)>:
c000d1ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1f2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1f8:	85 c0                	test   eax,eax
c000d1fa:	74 07                	je     c000d203 <VgaText::decrementCursor(bool)+0x19>
c000d1fc:	48                   	dec    eax
c000d1fd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d203:	84 c9                	test   cl,cl
c000d205:	74 09                	je     c000d210 <VgaText::decrementCursor(bool)+0x26>
c000d207:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d20b:	e9 64 fa ff ff       	jmp    c000cc74 <VgaText::updateCursor()>
c000d210:	c3                   	ret    
c000d211:	90                   	nop

c000d212 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d212:	53                   	push   ebx
c000d213:	83 ec 08             	sub    esp,0x8
c000d216:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d21a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d21e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d222:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d226:	3c 07                	cmp    al,0x7
c000d228:	75 2a                	jne    c000d254 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d22a:	a1 cc 44 02 c0       	mov    eax,ds:0xc00244cc
c000d22f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d237:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d23f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d247:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d24b:	83 c4 08             	add    esp,0x8
c000d24e:	5b                   	pop    ebx
c000d24f:	e9 a4 2c 00 00       	jmp    c000fef8 <Buzzer::beep(int, int, bool)>
c000d254:	3c 0d                	cmp    al,0xd
c000d256:	75 0c                	jne    c000d264 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d258:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d262:	eb 3b                	jmp    c000d29f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d264:	3c 0a                	cmp    al,0xa
c000d266:	75 40                	jne    c000d2a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d268:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d26e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d278:	8d 50 01             	lea    edx,[eax+0x1]
c000d27b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d281:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d287:	75 12                	jne    c000d29b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d289:	83 ec 0c             	sub    esp,0xc
c000d28c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d292:	53                   	push   ebx
c000d293:	e8 2a fb ff ff       	call   c000cdc2 <VgaText::scrollScreen()>
c000d298:	83 c4 10             	add    esp,0x10
c000d29b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d29f:	83 c4 08             	add    esp,0x8
c000d2a2:	5b                   	pop    ebx
c000d2a3:	e9 cc f9 ff ff       	jmp    c000cc74 <VgaText::updateCursor()>
c000d2a8:	3c 08                	cmp    al,0x8
c000d2aa:	75 31                	jne    c000d2dd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2ac:	50                   	push   eax
c000d2ad:	50                   	push   eax
c000d2ae:	6a 01                	push   0x1
c000d2b0:	53                   	push   ebx
c000d2b1:	e8 34 ff ff ff       	call   c000d1ea <VgaText::decrementCursor(bool)>
c000d2b6:	5a                   	pop    edx
c000d2b7:	59                   	pop    ecx
c000d2b8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2be:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2ca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2d0:	6a 20                	push   0x20
c000d2d2:	53                   	push   ebx
c000d2d3:	e8 90 fb ff ff       	call   c000ce68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2d8:	83 c4 28             	add    esp,0x28
c000d2db:	5b                   	pop    ebx
c000d2dc:	c3                   	ret    
c000d2dd:	83 ec 08             	sub    esp,0x8
c000d2e0:	0f be c0             	movsx  eax,al
c000d2e3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ef:	51                   	push   ecx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	53                   	push   ebx
c000d2f3:	e8 70 fb ff ff       	call   c000ce68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2fc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d304:	83 c4 28             	add    esp,0x28
c000d307:	5b                   	pop    ebx
c000d308:	e9 29 fc ff ff       	jmp    c000cf36 <VgaText::incrementCursor(bool)>
c000d30d:	90                   	nop

c000d30e <VgaText::isShowingCursor()>:
c000d30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d312:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d318:	c3                   	ret    
c000d319:	90                   	nop

c000d31a <VgaText::isBlinkDisabled()>:
c000d31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d324:	83 f0 01             	xor    eax,0x1
c000d327:	c3                   	ret    

c000d328 <VgaText::setCursorHeight(int)>:
c000d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d330:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d336:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d33d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d341:	e9 48 f9 ff ff       	jmp    c000cc8e <VgaText::showCursor(bool)>

c000d346 <VgaText::getCursorHeight()>:
c000d346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d34a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d350:	c3                   	ret    

c000d351 <setActiveTerminal(VgaText*)>:
c000d351:	53                   	push   ebx
c000d352:	83 ec 08             	sub    esp,0x8
c000d355:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d359:	85 db                	test   ebx,ebx
c000d35b:	75 11                	jne    c000d36e <setActiveTerminal(VgaText*)+0x1d>
c000d35d:	c7 44 24 10 e0 10 02 c0 	mov    DWORD PTR [esp+0x10],0xc00210e0
c000d365:	83 c4 08             	add    esp,0x8
c000d368:	5b                   	pop    ebx
c000d369:	e9 6a 85 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>
c000d36e:	50                   	push   eax
c000d36f:	50                   	push   eax
c000d370:	53                   	push   ebx
c000d371:	68 ee 10 02 c0       	push   0xc00210ee
c000d376:	e8 92 1d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000d37b:	a1 24 44 02 c0       	mov    eax,ds:0xc0024424
c000d380:	83 c4 10             	add    esp,0x10
c000d383:	85 c0                	test   eax,eax
c000d385:	74 0c                	je     c000d393 <setActiveTerminal(VgaText*)+0x42>
c000d387:	83 ec 0c             	sub    esp,0xc
c000d38a:	50                   	push   eax
c000d38b:	e8 e4 f8 ff ff       	call   c000cc74 <VgaText::updateCursor()>
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	89 1d 24 44 02 c0    	mov    DWORD PTR ds:0xc0024424,ebx
c000d399:	51                   	push   ecx
c000d39a:	51                   	push   ecx
c000d39b:	53                   	push   ebx
c000d39c:	68 06 11 02 c0       	push   0xc0021106
c000d3a1:	e8 67 1d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000d3a6:	83 c4 0c             	add    esp,0xc
c000d3a9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3af:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3b5:	53                   	push   ebx
c000d3b6:	e8 25 fb ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000d3bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3be:	e8 57 ff ff ff       	call   c000d31a <VgaText::isBlinkDisabled()>
c000d3c3:	5a                   	pop    edx
c000d3c4:	0f b6 c0             	movzx  eax,al
c000d3c7:	59                   	pop    ecx
c000d3c8:	50                   	push   eax
c000d3c9:	53                   	push   ebx
c000d3ca:	e8 cf f8 ff ff       	call   c000cc9e <VgaText::disableBlink(bool)>
c000d3cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3d2:	e8 6f ff ff ff       	call   c000d346 <VgaText::getCursorHeight()>
c000d3d7:	5a                   	pop    edx
c000d3d8:	59                   	pop    ecx
c000d3d9:	50                   	push   eax
c000d3da:	53                   	push   ebx
c000d3db:	e8 48 ff ff ff       	call   c000d328 <VgaText::setCursorHeight(int)>
c000d3e0:	83 c4 10             	add    esp,0x10
c000d3e3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3ea:	75 0a                	jne    c000d3f6 <setActiveTerminal(VgaText*)+0xa5>
c000d3ec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3fa:	83 c4 08             	add    esp,0x8
c000d3fd:	5b                   	pop    ebx
c000d3fe:	e9 1d f8 ff ff       	jmp    c000cc20 <VgaText::load()>

c000d403 <doTerminalCycle()>:
c000d403:	83 ec 18             	sub    esp,0x18
c000d406:	a1 20 44 02 c0       	mov    eax,ds:0xc0024420
c000d40b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d411:	50                   	push   eax
c000d412:	a3 20 44 02 c0       	mov    ds:0xc0024420,eax
c000d417:	e8 35 ff ff ff       	call   c000d351 <setActiveTerminal(VgaText*)>
c000d41c:	83 c4 1c             	add    esp,0x1c
c000d41f:	c3                   	ret    

c000d420 <VgaText::doUpdate()>:
c000d420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d424:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d42a:	85 c0                	test   eax,eax
c000d42c:	74 02                	je     c000d430 <VgaText::doUpdate()+0x10>
c000d42e:	ff e0                	jmp    eax
c000d430:	c3                   	ret    
c000d431:	90                   	nop

c000d432 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d432:	55                   	push   ebp
c000d433:	57                   	push   edi
c000d434:	56                   	push   esi
c000d435:	53                   	push   ebx
c000d436:	83 ec 1c             	sub    esp,0x1c
c000d439:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d43d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d442:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d449:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d44c:	50                   	push   eax
c000d44d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d452:	50                   	push   eax
c000d453:	e8 58 f9 ff ff       	call   c000cdb0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d458:	59                   	pop    ecx
c000d459:	0f b6 c0             	movzx  eax,al
c000d45c:	5b                   	pop    ebx
c000d45d:	31 c9                	xor    ecx,ecx
c000d45f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d467:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d46b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d475:	0f b7 db             	movzx  ebx,bx
c000d478:	01 db                	add    ebx,ebx
c000d47a:	01 fb                	add    ebx,edi
c000d47c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d47f:	84 c0                	test   al,al
c000d481:	0f 84 38 01 00 00    	je     c000d5bf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d487:	3c 0d                	cmp    al,0xd
c000d489:	75 0f                	jne    c000d49a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d48b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d495:	e9 1f 01 00 00       	jmp    c000d5b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d49a:	3c 0a                	cmp    al,0xa
c000d49c:	75 5b                	jne    c000d4f9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d49e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4a4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4b1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4b7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4bd:	75 12                	jne    c000d4d1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d4bf:	83 ec 0c             	sub    esp,0xc
c000d4c2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4c8:	55                   	push   ebp
c000d4c9:	e8 f4 f8 ff ff       	call   c000cdc2 <VgaText::scrollScreen()>
c000d4ce:	83 c4 10             	add    esp,0x10
c000d4d1:	83 ec 0c             	sub    esp,0xc
c000d4d4:	55                   	push   ebp
c000d4d5:	e8 9a f7 ff ff       	call   c000cc74 <VgaText::updateCursor()>
c000d4da:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4eb:	31 c9                	xor    ecx,ecx
c000d4ed:	0f b7 db             	movzx  ebx,bx
c000d4f0:	01 db                	add    ebx,ebx
c000d4f2:	01 fb                	add    ebx,edi
c000d4f4:	e9 c0 00 00 00       	jmp    c000d5b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4f9:	3c 08                	cmp    al,0x8
c000d4fb:	75 4e                	jne    c000d54b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4fd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d501:	53                   	push   ebx
c000d502:	53                   	push   ebx
c000d503:	6a 01                	push   0x1
c000d505:	55                   	push   ebp
c000d506:	e8 df fc ff ff       	call   c000d1ea <VgaText::decrementCursor(bool)>
c000d50b:	58                   	pop    eax
c000d50c:	5a                   	pop    edx
c000d50d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d513:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d519:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d51f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d525:	6a 20                	push   0x20
c000d527:	55                   	push   ebp
c000d528:	e8 3b f9 ff ff       	call   c000ce68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d52d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d535:	83 c4 20             	add    esp,0x20
c000d538:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d53e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d542:	0f b7 db             	movzx  ebx,bx
c000d545:	01 db                	add    ebx,ebx
c000d547:	01 fb                	add    ebx,edi
c000d549:	eb 6e                	jmp    c000d5b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d54b:	51                   	push   ecx
c000d54c:	51                   	push   ecx
c000d54d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d551:	50                   	push   eax
c000d552:	e8 ff f8 ff ff       	call   c000ce56 <VgaText::combineCharAndColour(char, unsigned char)>
c000d557:	83 c4 10             	add    esp,0x10
c000d55a:	66 89 03             	mov    WORD PTR [ebx],ax
c000d55d:	39 2d 24 44 02 c0    	cmp    DWORD PTR ds:0xc0024424,ebp
c000d563:	75 2a                	jne    c000d58f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d565:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d56b:	85 c0                	test   eax,eax
c000d56d:	74 20                	je     c000d58f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d56f:	52                   	push   edx
c000d570:	52                   	push   edx
c000d571:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d577:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d57d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d581:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d585:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d588:	51                   	push   ecx
c000d589:	55                   	push   ebp
c000d58a:	ff d0                	call   eax
c000d58c:	83 c4 20             	add    esp,0x20
c000d58f:	83 c3 02             	add    ebx,0x2
c000d592:	50                   	push   eax
c000d593:	50                   	push   eax
c000d594:	6a 00                	push   0x0
c000d596:	55                   	push   ebp
c000d597:	e8 9a f9 ff ff       	call   c000cf36 <VgaText::incrementCursor(bool)>
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5a6:	75 0f                	jne    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d5a8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5b0:	0f b7 db             	movzx  ebx,bx
c000d5b3:	01 db                	add    ebx,ebx
c000d5b5:	01 fb                	add    ebx,edi
c000d5b7:	b1 01                	mov    cl,0x1
c000d5b9:	46                   	inc    esi
c000d5ba:	e9 bd fe ff ff       	jmp    c000d47c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d5bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	55                   	push   ebp
c000d5c7:	e8 a8 f6 ff ff       	call   c000cc74 <VgaText::updateCursor()>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d5d3:	84 c9                	test   cl,cl
c000d5d5:	74 0c                	je     c000d5e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d5d7:	83 ec 0c             	sub    esp,0xc
c000d5da:	55                   	push   ebp
c000d5db:	e8 40 fe ff ff       	call   c000d420 <VgaText::doUpdate()>
c000d5e0:	83 c4 10             	add    esp,0x10
c000d5e3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5ea:	83 c4 1c             	add    esp,0x1c
c000d5ed:	5b                   	pop    ebx
c000d5ee:	5e                   	pop    esi
c000d5ef:	5f                   	pop    edi
c000d5f0:	5d                   	pop    ebp
c000d5f1:	c3                   	ret    

c000d5f2 <VgaText::clearScreen()>:
c000d5f2:	57                   	push   edi
c000d5f3:	56                   	push   esi
c000d5f4:	31 f6                	xor    esi,esi
c000d5f6:	53                   	push   ebx
c000d5f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5fb:	52                   	push   edx
c000d5fc:	6a 00                	push   0x0
c000d5fe:	6a 00                	push   0x0
c000d600:	53                   	push   ebx
c000d601:	e8 da f8 ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000d606:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d60d:	83 c4 10             	add    esp,0x10
c000d610:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d616:	7e 26                	jle    c000d63e <VgaText::clearScreen()+0x4c>
c000d618:	31 ff                	xor    edi,edi
c000d61a:	50                   	push   eax
c000d61b:	50                   	push   eax
c000d61c:	56                   	push   esi
c000d61d:	57                   	push   edi
c000d61e:	47                   	inc    edi
c000d61f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d625:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d62b:	6a 20                	push   0x20
c000d62d:	53                   	push   ebx
c000d62e:	e8 35 f8 ff ff       	call   c000ce68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d633:	83 c4 20             	add    esp,0x20
c000d636:	83 ff 50             	cmp    edi,0x50
c000d639:	75 df                	jne    c000d61a <VgaText::clearScreen()+0x28>
c000d63b:	46                   	inc    esi
c000d63c:	eb d2                	jmp    c000d610 <VgaText::clearScreen()+0x1e>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	53                   	push   ebx
c000d642:	e8 d9 fd ff ff       	call   c000d420 <VgaText::doUpdate()>
c000d647:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d64e:	83 c4 10             	add    esp,0x10
c000d651:	5b                   	pop    ebx
c000d652:	5e                   	pop    esi
c000d653:	5f                   	pop    edi
c000d654:	c3                   	ret    
c000d655:	90                   	nop

c000d656 <VgaText::putchar(char)>:
c000d656:	56                   	push   esi
c000d657:	53                   	push   ebx
c000d658:	83 ec 14             	sub    esp,0x14
c000d65b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d65f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d663:	3c 5b                	cmp    al,0x5b
c000d665:	75 21                	jne    c000d688 <VgaText::putchar(char)+0x32>
c000d667:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d66e:	74 28                	je     c000d698 <VgaText::putchar(char)+0x42>
c000d670:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d679:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d683:	e9 e2 00 00 00       	jmp    c000d76a <VgaText::putchar(char)+0x114>
c000d688:	3c 1b                	cmp    al,0x1b
c000d68a:	75 0c                	jne    c000d698 <VgaText::putchar(char)+0x42>
c000d68c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d693:	e9 d2 00 00 00       	jmp    c000d76a <VgaText::putchar(char)+0x114>
c000d698:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d69e:	84 c9                	test   cl,cl
c000d6a0:	0f 84 ab 00 00 00    	je     c000d751 <VgaText::putchar(char)+0xfb>
c000d6a6:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6a9:	80 fa 3e             	cmp    dl,0x3e
c000d6ac:	0f 87 82 00 00 00    	ja     c000d734 <VgaText::putchar(char)+0xde>
c000d6b2:	3c 6d                	cmp    al,0x6d
c000d6b4:	75 4d                	jne    c000d703 <VgaText::putchar(char)+0xad>
c000d6b6:	31 f6                	xor    esi,esi
c000d6b8:	31 d2                	xor    edx,edx
c000d6ba:	31 c0                	xor    eax,eax
c000d6bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6c2:	7e 30                	jle    c000d6f4 <VgaText::putchar(char)+0x9e>
c000d6c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6cc:	80 fa 3b             	cmp    dl,0x3b
c000d6cf:	75 17                	jne    c000d6e8 <VgaText::putchar(char)+0x92>
c000d6d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6d5:	50                   	push   eax
c000d6d6:	53                   	push   ebx
c000d6d7:	e8 fc f5 ff ff       	call   c000ccd8 <VgaText::doANSI_SGR(int)>
c000d6dc:	59                   	pop    ecx
c000d6dd:	31 d2                	xor    edx,edx
c000d6df:	58                   	pop    eax
c000d6e0:	31 c0                	xor    eax,eax
c000d6e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6e6:	eb 09                	jmp    c000d6f1 <VgaText::putchar(char)+0x9b>
c000d6e8:	6b c0 0a             	imul   eax,eax,0xa
c000d6eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6ef:	88 ca                	mov    dl,cl
c000d6f1:	46                   	inc    esi
c000d6f2:	eb c8                	jmp    c000d6bc <VgaText::putchar(char)+0x66>
c000d6f4:	84 d2                	test   dl,dl
c000d6f6:	74 31                	je     c000d729 <VgaText::putchar(char)+0xd3>
c000d6f8:	50                   	push   eax
c000d6f9:	53                   	push   ebx
c000d6fa:	e8 d9 f5 ff ff       	call   c000ccd8 <VgaText::doANSI_SGR(int)>
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	eb 26                	jmp    c000d729 <VgaText::putchar(char)+0xd3>
c000d703:	3c 4a                	cmp    al,0x4a
c000d705:	75 22                	jne    c000d729 <VgaText::putchar(char)+0xd3>
c000d707:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d70e:	75 19                	jne    c000d729 <VgaText::putchar(char)+0xd3>
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	53                   	push   ebx
c000d714:	e8 d9 fe ff ff       	call   c000d5f2 <VgaText::clearScreen()>
c000d719:	83 c4 0c             	add    esp,0xc
c000d71c:	6a 00                	push   0x0
c000d71e:	6a 00                	push   0x0
c000d720:	53                   	push   ebx
c000d721:	e8 ba f7 ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d732:	eb 36                	jmp    c000d76a <VgaText::putchar(char)+0x114>
c000d734:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d73a:	83 fa 0e             	cmp    edx,0xe
c000d73d:	7f 2b                	jg     c000d76a <VgaText::putchar(char)+0x114>
c000d73f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d742:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d748:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d74f:	eb 19                	jmp    c000d76a <VgaText::putchar(char)+0x114>
c000d751:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d757:	0f be c0             	movsx  eax,al
c000d75a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d760:	50                   	push   eax
c000d761:	53                   	push   ebx
c000d762:	e8 ab fa ff ff       	call   c000d212 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 14             	add    esp,0x14
c000d76d:	5b                   	pop    ebx
c000d76e:	5e                   	pop    esi
c000d76f:	c3                   	ret    

c000d770 <VgaText::puts(char const*)>:
c000d770:	53                   	push   ebx
c000d771:	83 ec 08             	sub    esp,0x8
c000d774:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d778:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d77b:	84 c0                	test   al,al
c000d77d:	74 12                	je     c000d791 <VgaText::puts(char const*)+0x21>
c000d77f:	43                   	inc    ebx
c000d780:	51                   	push   ecx
c000d781:	51                   	push   ecx
c000d782:	50                   	push   eax
c000d783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d787:	e8 ca fe ff ff       	call   c000d656 <VgaText::putchar(char)>
c000d78c:	83 c4 10             	add    esp,0x10
c000d78f:	eb e7                	jmp    c000d778 <VgaText::puts(char const*)+0x8>
c000d791:	83 c4 08             	add    esp,0x8
c000d794:	5b                   	pop    ebx
c000d795:	c3                   	ret    

c000d796 <VgaText::putx(unsigned int)>:
c000d796:	57                   	push   edi
c000d797:	b9 11 00 00 00       	mov    ecx,0x11
c000d79c:	56                   	push   esi
c000d79d:	be 22 11 02 c0       	mov    esi,0xc0021122
c000d7a2:	53                   	push   ebx
c000d7a3:	83 ec 20             	sub    esp,0x20
c000d7a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7ae:	fc                   	cld    
c000d7af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b1:	be 08 00 00 00       	mov    esi,0x8
c000d7b6:	50                   	push   eax
c000d7b7:	50                   	push   eax
c000d7b8:	89 d8                	mov    eax,ebx
c000d7ba:	c1 e3 04             	shl    ebx,0x4
c000d7bd:	c1 e8 1c             	shr    eax,0x1c
c000d7c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7c5:	50                   	push   eax
c000d7c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7ca:	e8 87 fe ff ff       	call   c000d656 <VgaText::putchar(char)>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	4e                   	dec    esi
c000d7d3:	75 e1                	jne    c000d7b6 <VgaText::putx(unsigned int)+0x20>
c000d7d5:	83 c4 20             	add    esp,0x20
c000d7d8:	5b                   	pop    ebx
c000d7d9:	5e                   	pop    esi
c000d7da:	5f                   	pop    edi
c000d7db:	c3                   	ret    

c000d7dc <VgaText::VgaText(char const*)>:
c000d7dc:	57                   	push   edi
c000d7dd:	56                   	push   esi
c000d7de:	53                   	push   ebx
c000d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e3:	83 ec 08             	sub    esp,0x8
c000d7e6:	6a 00                	push   0x0
c000d7e8:	50                   	push   eax
c000d7e9:	e8 4a 05 00 00       	call   c000dd38 <UnixFile::UnixFile(int)>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	ba 88 11 02 c0       	mov    edx,0xc0021188
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	89 10                	mov    DWORD PTR [eax],edx
c000d7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d800:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d827:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d832:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d840:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d859:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d86a:	bb 00 44 02 c0       	mov    ebx,0xc0024400
c000d86f:	b8 08 00 00 00       	mov    eax,0x8
c000d874:	fc                   	cld    
c000d875:	89 d7                	mov    edi,edx
c000d877:	89 de                	mov    esi,ebx
c000d879:	89 c1                	mov    ecx,eax
c000d87b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d881:	05 1e 10 00 00       	add    eax,0x101e
c000d886:	83 ec 08             	sub    esp,0x8
c000d889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d88d:	50                   	push   eax
c000d88e:	e8 c6 2e ff ff       	call   c0000759 <strcpy>
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a8:	83 c0 0c             	add    eax,0xc
c000d8ab:	83 ec 04             	sub    esp,0x4
c000d8ae:	68 00 0f 00 00       	push   0xf00
c000d8b3:	6a 00                	push   0x0
c000d8b5:	50                   	push   eax
c000d8b6:	e8 ff 2d ff ff       	call   c00006ba <memset>
c000d8bb:	83 c4 10             	add    esp,0x10
c000d8be:	83 ec 04             	sub    esp,0x4
c000d8c1:	6a 00                	push   0x0
c000d8c3:	6a 07                	push   0x7
c000d8c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c9:	e8 c2 f4 ff ff       	call   c000cd90 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8ce:	83 c4 10             	add    esp,0x10
c000d8d1:	83 ec 08             	sub    esp,0x8
c000d8d4:	6a 02                	push   0x2
c000d8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8da:	e8 49 fa ff ff       	call   c000d328 <VgaText::setCursorHeight(int)>
c000d8df:	83 c4 10             	add    esp,0x10
c000d8e2:	83 ec 04             	sub    esp,0x4
c000d8e5:	6a 00                	push   0x0
c000d8e7:	6a 00                	push   0x0
c000d8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ed:	e8 ee f5 ff ff       	call   c000cee0 <VgaText::setCursor(int, int)>
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	83 ec 08             	sub    esp,0x8
c000d8f8:	6a 01                	push   0x1
c000d8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fe:	e8 8b f3 ff ff       	call   c000cc8e <VgaText::showCursor(bool)>
c000d903:	83 c4 10             	add    esp,0x10
c000d906:	83 ec 08             	sub    esp,0x8
c000d909:	6a 01                	push   0x1
c000d90b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90f:	e8 8a f3 ff ff       	call   c000cc9e <VgaText::disableBlink(bool)>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	83 ec 0c             	sub    esp,0xc
c000d91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91e:	e8 cf fc ff ff       	call   c000d5f2 <VgaText::clearScreen()>
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d935:	05 9e 10 00 00       	add    eax,0x109e
c000d93a:	83 ec 04             	sub    esp,0x4
c000d93d:	68 96 00 00 00       	push   0x96
c000d942:	6a 00                	push   0x0
c000d944:	50                   	push   eax
c000d945:	e8 70 2d ff ff       	call   c00006ba <memset>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d951:	05 34 11 00 00       	add    eax,0x1134
c000d956:	83 ec 04             	sub    esp,0x4
c000d959:	68 2c 01 00 00       	push   0x12c
c000d95e:	6a 00                	push   0x0
c000d960:	50                   	push   eax
c000d961:	e8 54 2d ff ff       	call   c00006ba <memset>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	90                   	nop
c000d96a:	5b                   	pop    ebx
c000d96b:	5e                   	pop    esi
c000d96c:	5f                   	pop    edi
c000d96d:	c3                   	ret    

c000d96e <VgaText::receiveKey(unsigned char)>:
c000d96e:	55                   	push   ebp
c000d96f:	57                   	push   edi
c000d970:	56                   	push   esi
c000d971:	53                   	push   ebx
c000d972:	83 ec 1c             	sub    esp,0x1c
c000d975:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d979:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d97d:	84 db                	test   bl,bl
c000d97f:	0f 84 c9 00 00 00    	je     c000da4e <VgaText::receiveKey(unsigned char)+0xe0>
c000d985:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d98b:	80 fb 08             	cmp    bl,0x8
c000d98e:	75 2c                	jne    c000d9bc <VgaText::receiveKey(unsigned char)+0x4e>
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	57                   	push   edi
c000d994:	e8 3e 2d ff ff       	call   c00006d7 <strlen>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	74 41                	je     c000d9e1 <VgaText::receiveKey(unsigned char)+0x73>
c000d9a0:	50                   	push   eax
c000d9a1:	50                   	push   eax
c000d9a2:	6a 08                	push   0x8
c000d9a4:	56                   	push   esi
c000d9a5:	e8 ac fc ff ff       	call   c000d656 <VgaText::putchar(char)>
c000d9aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ad:	e8 25 2d ff ff       	call   c00006d7 <strlen>
c000d9b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9ba:	eb 22                	jmp    c000d9de <VgaText::receiveKey(unsigned char)+0x70>
c000d9bc:	0f be c3             	movsx  eax,bl
c000d9bf:	52                   	push   edx
c000d9c0:	52                   	push   edx
c000d9c1:	50                   	push   eax
c000d9c2:	56                   	push   esi
c000d9c3:	e8 8e fc ff ff       	call   c000d656 <VgaText::putchar(char)>
c000d9c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9d1:	59                   	pop    ecx
c000d9d2:	5d                   	pop    ebp
c000d9d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9d7:	50                   	push   eax
c000d9d8:	57                   	push   edi
c000d9d9:	e8 32 2e ff ff       	call   c0000810 <strcat>
c000d9de:	83 c4 10             	add    esp,0x10
c000d9e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9e8:	75 05                	jne    c000d9ef <VgaText::receiveKey(unsigned char)+0x81>
c000d9ea:	80 fb 0a             	cmp    bl,0xa
c000d9ed:	75 53                	jne    c000da42 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9ef:	83 ec 0c             	sub    esp,0xc
c000d9f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9f8:	53                   	push   ebx
c000d9f9:	e8 d9 2c ff ff       	call   c00006d7 <strlen>
c000d9fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da01:	89 c5                	mov    ebp,eax
c000da03:	e8 cf 2c ff ff       	call   c00006d7 <strlen>
c000da08:	83 c4 10             	add    esp,0x10
c000da0b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da0f:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da14:	76 10                	jbe    c000da26 <VgaText::receiveKey(unsigned char)+0xb8>
c000da16:	83 ec 0c             	sub    esp,0xc
c000da19:	68 33 11 02 c0       	push   0xc0021133
c000da1e:	e8 b5 7e 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	50                   	push   eax
c000da27:	50                   	push   eax
c000da28:	57                   	push   edi
c000da29:	53                   	push   ebx
c000da2a:	e8 e1 2d ff ff       	call   c0000810 <strcat>
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	68 96 00 00 00       	push   0x96
c000da37:	6a 00                	push   0x0
c000da39:	57                   	push   edi
c000da3a:	e8 7b 2c ff ff       	call   c00006ba <memset>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	83 ec 0c             	sub    esp,0xc
c000da45:	56                   	push   esi
c000da46:	e8 d5 f9 ff ff       	call   c000d420 <VgaText::doUpdate()>
c000da4b:	83 c4 10             	add    esp,0x10
c000da4e:	83 c4 1c             	add    esp,0x1c
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <VgaText::write(unsigned long long, void*, int*)>:
c000da56:	55                   	push   ebp
c000da57:	57                   	push   edi
c000da58:	56                   	push   esi
c000da59:	53                   	push   ebx
c000da5a:	83 ec 0c             	sub    esp,0xc
c000da5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da61:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da69:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da70:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da73:	39 eb                	cmp    ebx,ebp
c000da75:	74 13                	je     c000da8a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da77:	43                   	inc    ebx
c000da78:	50                   	push   eax
c000da79:	50                   	push   eax
c000da7a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da7e:	50                   	push   eax
c000da7f:	56                   	push   esi
c000da80:	e8 d1 fb ff ff       	call   c000d656 <VgaText::putchar(char)>
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	eb e9                	jmp    c000da73 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da8a:	83 ec 0c             	sub    esp,0xc
c000da8d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da94:	56                   	push   esi
c000da95:	e8 86 f9 ff ff       	call   c000d420 <VgaText::doUpdate()>
c000da9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da9e:	89 38                	mov    DWORD PTR [eax],edi
c000daa0:	83 c4 1c             	add    esp,0x1c
c000daa3:	31 c0                	xor    eax,eax
c000daa5:	5b                   	pop    ebx
c000daa6:	5e                   	pop    esi
c000daa7:	5f                   	pop    edi
c000daa8:	5d                   	pop    ebp
c000daa9:	c3                   	ret    

c000daaa <newTerminal(char*)>:
c000daaa:	83 ec 28             	sub    esp,0x28
c000daad:	68 60 12 00 00       	push   0x1260
c000dab2:	e8 67 15 00 00       	call   c000f01e <operator new(unsigned long)>
c000dab7:	5a                   	pop    edx
c000dab8:	59                   	pop    ecx
c000dab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dabd:	50                   	push   eax
c000dabe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac2:	e8 15 fd ff ff       	call   c000d7dc <VgaText::VgaText(char const*)>
c000dac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dacb:	83 c4 2c             	add    esp,0x2c
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <TSS::TSS()>:
c000dad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dadb:	90                   	nop
c000dadc:	c3                   	ret    
c000dadd:	90                   	nop

c000dade <TSS::setESP(unsigned long)>:
c000dade:	55                   	push   ebp
c000dadf:	89 e5                	mov    ebp,esp
c000dae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000daea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daed:	90                   	nop
c000daee:	5d                   	pop    ebp
c000daef:	c3                   	ret    

c000daf0 <TSS::flush()>:
c000daf0:	55                   	push   ebp
c000daf1:	89 e5                	mov    ebp,esp
c000daf3:	83 ec 10             	sub    esp,0x10
c000daf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000dafb:	83 c8 03             	or     eax,0x3
c000dafe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db02:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db06:	66 89 d0             	mov    ax,dx
c000db09:	0f 00 d8             	ltr    ax
c000db0c:	90                   	nop
c000db0d:	c9                   	leave  
c000db0e:	c3                   	ret    
c000db0f:	90                   	nop

c000db10 <TSS::setup(unsigned long, unsigned long)>:
c000db10:	55                   	push   ebp
c000db11:	89 e5                	mov    ebp,esp
c000db13:	53                   	push   ebx
c000db14:	83 ec 14             	sub    esp,0x14
c000db17:	83 ec 0c             	sub    esp,0xc
c000db1a:	6a 68                	push   0x68
c000db1c:	e8 fb e4 ff ff       	call   c000c01c <malloc>
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	89 c2                	mov    edx,eax
c000db26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db32:	83 ec 04             	sub    esp,0x4
c000db35:	6a 68                	push   0x68
c000db37:	6a 00                	push   0x0
c000db39:	50                   	push   eax
c000db3a:	e8 7b 2b ff ff       	call   c00006ba <memset>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db48:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db54:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6c:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db78:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db84:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db90:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db9f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb4:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbe:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbc1:	e8 bf 18 01 00       	call   c001f485 <CPU::readCR3()>
c000dbc6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbcf:	83 ec 08             	sub    esp,0x8
c000dbd2:	50                   	push   eax
c000dbd3:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd6:	50                   	push   eax
c000dbd7:	e8 16 dc ff ff       	call   c000b7f2 <GDTEntry::setBase(unsigned int)>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	83 ec 08             	sub    esp,0x8
c000dbe2:	6a 68                	push   0x68
c000dbe4:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbe7:	50                   	push   eax
c000dbe8:	e8 21 dc ff ff       	call   c000b80e <GDTEntry::setLimit(unsigned int)>
c000dbed:	83 c4 10             	add    esp,0x10
c000dbf0:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbf4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf7:	83 e0 0f             	and    eax,0xf
c000dbfa:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc00:	83 c8 40             	or     eax,0x40
c000dc03:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc06:	e8 4b 6b 00 00       	call   c0014756 <thisCPU()>
c000dc0b:	05 78 01 00 00       	add    eax,0x178
c000dc10:	83 ec 04             	sub    esp,0x4
c000dc13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc19:	50                   	push   eax
c000dc1a:	e8 23 dc ff ff       	call   c000b842 <GDT::addEntry(GDTEntry)>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	89 c2                	mov    edx,eax
c000dc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc27:	89 10                	mov    DWORD PTR [eax],edx
c000dc29:	e8 28 6b 00 00       	call   c0014756 <thisCPU()>
c000dc2e:	05 78 01 00 00       	add    eax,0x178
c000dc33:	83 ec 0c             	sub    esp,0xc
c000dc36:	50                   	push   eax
c000dc37:	e8 4a dc ff ff       	call   c000b886 <GDT::flush()>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc42:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc44:	83 ec 08             	sub    esp,0x8
c000dc47:	50                   	push   eax
c000dc48:	68 9c 11 02 c0       	push   0xc002119c
c000dc4d:	e8 bb 14 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000dc52:	83 c4 10             	add    esp,0x10
c000dc55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc58:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc5a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc5d:	c9                   	leave  
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc6b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc70:	75 08                	jne    c000dc7a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc72:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc78:	eb 38                	jmp    c000dcb2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc7a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc7f:	75 17                	jne    c000dc98 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc89:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc8f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc95:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc98:	89 c1                	mov    ecx,eax
c000dc9a:	83 e1 fd             	and    ecx,0xfffffffd
c000dc9d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dca3:	74 cd                	je     c000dc72 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dca5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcaa:	83 e0 ef             	and    eax,0xffffffef
c000dcad:	83 f8 08             	cmp    eax,0x8
c000dcb0:	76 c0                	jbe    c000dc72 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcb2:	31 c0                	xor    eax,eax
c000dcb4:	c3                   	ret    
c000dcb5:	90                   	nop

c000dcb6 <ReservedFilename::isAtty()>:
c000dcb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcbd:	31 c0                	xor    eax,eax
c000dcbf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcc5:	74 09                	je     c000dcd0 <ReservedFilename::isAtty()+0x1a>
c000dcc7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dccd:	0f 94 c0             	sete   al
c000dcd0:	c3                   	ret    
c000dcd1:	90                   	nop

c000dcd2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dce1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dce6:	75 08                	jne    c000dcf0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dce8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcee:	eb 3d                	jmp    c000dd2d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcf0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcf5:	75 17                	jne    c000dd0e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dcf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd05:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd0b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd0e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd13:	75 04                	jne    c000dd19 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd15:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd17:	eb 14                	jmp    c000dd2d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd19:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd1e:	74 c8                	je     c000dce8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd20:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd25:	83 e0 ef             	and    eax,0xffffffef
c000dd28:	83 f8 08             	cmp    eax,0x8
c000dd2b:	76 bb                	jbe    c000dce8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd2d:	31 c0                	xor    eax,eax
c000dd2f:	c3                   	ret    

c000dd30 <UnixFile::getFileDescriptor()>:
c000dd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd37:	c3                   	ret    

c000dd38 <UnixFile::UnixFile(int)>:
c000dd38:	53                   	push   ebx
c000dd39:	83 ec 18             	sub    esp,0x18
c000dd3c:	ba 88 12 02 c0       	mov    edx,0xc0021288
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	89 10                	mov    DWORD PTR [eax],edx
c000dd47:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd4f:	0f 8f 4d 01 00 00    	jg     c000dea2 <UnixFile::UnixFile(int)+0x16a>
c000dd55:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c000dd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000dd5d:	89 15 00 38 02 c0    	mov    DWORD PTR ds:0xc0023800,edx
c000dd63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd6a:	83 ec 08             	sub    esp,0x8
c000dd6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd71:	68 b8 44 02 c0       	push   0xc00244b8
c000dd76:	e8 7f 17 01 00       	call   c001f4fa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd7b:	83 c4 10             	add    esp,0x10
c000dd7e:	a0 b4 44 02 c0       	mov    al,ds:0xc00244b4
c000dd83:	83 f0 01             	xor    eax,0x1
c000dd86:	84 c0                	test   al,al
c000dd88:	0f 84 15 01 00 00    	je     c000dea3 <UnixFile::UnixFile(int)+0x16b>
c000dd8e:	c6 05 b4 44 02 c0 01 	mov    BYTE PTR ds:0xc00244b4,0x1
c000dd95:	83 ec 0c             	sub    esp,0xc
c000dd98:	6a 0c                	push   0xc
c000dd9a:	e8 7f 12 00 00       	call   c000f01e <operator new(unsigned long)>
c000dd9f:	83 c4 10             	add    esp,0x10
c000dda2:	89 c3                	mov    ebx,eax
c000dda4:	83 ec 08             	sub    esp,0x8
c000dda7:	68 03 ff ff 0f       	push   0xfffff03
c000ddac:	53                   	push   ebx
c000ddad:	e8 f6 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000ddb2:	83 c4 10             	add    esp,0x10
c000ddb5:	89 1d ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,ebx
c000ddbb:	83 ec 0c             	sub    esp,0xc
c000ddbe:	6a 0c                	push   0xc
c000ddc0:	e8 59 12 00 00       	call   c000f01e <operator new(unsigned long)>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	89 c3                	mov    ebx,eax
c000ddca:	83 ec 08             	sub    esp,0x8
c000ddcd:	68 01 ff ff 0f       	push   0xfffff01
c000ddd2:	53                   	push   ebx
c000ddd3:	e8 d0 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000ddd8:	83 c4 10             	add    esp,0x10
c000dddb:	89 1d b0 44 02 c0    	mov    DWORD PTR ds:0xc00244b0,ebx
c000dde1:	83 ec 0c             	sub    esp,0xc
c000dde4:	6a 0c                	push   0xc
c000dde6:	e8 33 12 00 00       	call   c000f01e <operator new(unsigned long)>
c000ddeb:	83 c4 10             	add    esp,0x10
c000ddee:	89 c3                	mov    ebx,eax
c000ddf0:	83 ec 08             	sub    esp,0x8
c000ddf3:	68 00 ff ff 0f       	push   0xfffff00
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 aa 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	89 1d a4 44 02 c0    	mov    DWORD PTR ds:0xc00244a4,ebx
c000de07:	83 ec 0c             	sub    esp,0xc
c000de0a:	6a 0c                	push   0xc
c000de0c:	e8 0d 12 00 00       	call   c000f01e <operator new(unsigned long)>
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	89 c3                	mov    ebx,eax
c000de16:	83 ec 08             	sub    esp,0x8
c000de19:	68 02 ff ff 0f       	push   0xfffff02
c000de1e:	53                   	push   ebx
c000de1f:	e8 84 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000de24:	83 c4 10             	add    esp,0x10
c000de27:	89 1d a8 44 02 c0    	mov    DWORD PTR ds:0xc00244a8,ebx
c000de2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de35:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de3a:	7f 67                	jg     c000dea3 <UnixFile::UnixFile(int)+0x16b>
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	6a 0c                	push   0xc
c000de41:	e8 d8 11 00 00       	call   c000f01e <operator new(unsigned long)>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	89 c3                	mov    ebx,eax
c000de4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de54:	83 ec 08             	sub    esp,0x8
c000de57:	50                   	push   eax
c000de58:	53                   	push   ebx
c000de59:	e8 4a 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de65:	89 1c 85 80 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb80],ebx
c000de6c:	83 ec 0c             	sub    esp,0xc
c000de6f:	6a 0c                	push   0xc
c000de71:	e8 a8 11 00 00       	call   c000f01e <operator new(unsigned long)>
c000de76:	83 c4 10             	add    esp,0x10
c000de79:	89 c3                	mov    ebx,eax
c000de7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7f:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de84:	83 ec 08             	sub    esp,0x8
c000de87:	50                   	push   eax
c000de88:	53                   	push   ebx
c000de89:	e8 1a 00 00 00       	call   c000dea8 <ReservedFilename::ReservedFilename(int)>
c000de8e:	83 c4 10             	add    esp,0x10
c000de91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de95:	89 1c 85 40 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbbc0],ebx
c000de9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dea0:	eb 93                	jmp    c000de35 <UnixFile::UnixFile(int)+0xfd>
c000dea2:	90                   	nop
c000dea3:	83 c4 18             	add    esp,0x18
c000dea6:	5b                   	pop    ebx
c000dea7:	c3                   	ret    

c000dea8 <ReservedFilename::ReservedFilename(int)>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb6:	50                   	push   eax
c000deb7:	e8 7c fe ff ff       	call   c000dd38 <UnixFile::UnixFile(int)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ded2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ded5:	90                   	nop
c000ded6:	83 c4 0c             	add    esp,0xc
c000ded9:	c3                   	ret    

c000deda <UnixFile::~UnixFile()>:
c000deda:	83 ec 1c             	sub    esp,0x1c
c000dedd:	ba 88 12 02 c0       	mov    edx,0xc0021288
c000dee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee6:	89 10                	mov    DWORD PTR [eax],edx
c000dee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000def4:	7f 73                	jg     c000df69 <UnixFile::~UnixFile()+0x8f>
c000def6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	68 b8 44 02 c0       	push   0xc00244b8
c000df06:	e8 c3 16 01 00       	call   c001f5ce <LinkedList<UnixFile>::getFirstElement()>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	68 b8 44 02 c0       	push   0xc00244b8
c000df1a:	e8 b7 16 01 00       	call   c001f5d6 <LinkedList<UnixFile>::removeFirst()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df26:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df2a:	74 40                	je     c000df6c <UnixFile::~UnixFile()+0x92>
c000df2c:	83 ec 08             	sub    esp,0x8
c000df2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df33:	68 b8 44 02 c0       	push   0xc00244b8
c000df38:	e8 bd 15 01 00       	call   c001f4fa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df3d:	83 c4 10             	add    esp,0x10
c000df40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df44:	8d 50 01             	lea    edx,[eax+0x1]
c000df47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df4b:	3d 88 13 00 00       	cmp    eax,0x1388
c000df50:	0f 94 c0             	sete   al
c000df53:	84 c0                	test   al,al
c000df55:	74 a7                	je     c000defe <UnixFile::~UnixFile()+0x24>
c000df57:	83 ec 0c             	sub    esp,0xc
c000df5a:	68 60 12 02 c0       	push   0xc0021260
c000df5f:	e8 74 79 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000df64:	83 c4 10             	add    esp,0x10
c000df67:	eb 95                	jmp    c000defe <UnixFile::~UnixFile()+0x24>
c000df69:	90                   	nop
c000df6a:	eb 01                	jmp    c000df6d <UnixFile::~UnixFile()+0x93>
c000df6c:	90                   	nop
c000df6d:	90                   	nop
c000df6e:	83 c4 1c             	add    esp,0x1c
c000df71:	c3                   	ret    

c000df72 <UnixFile::~UnixFile()>:
c000df72:	83 ec 0c             	sub    esp,0xc
c000df75:	83 ec 0c             	sub    esp,0xc
c000df78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7c:	e8 59 ff ff ff       	call   c000deda <UnixFile::~UnixFile()>
c000df81:	83 c4 10             	add    esp,0x10
c000df84:	83 ec 08             	sub    esp,0x8
c000df87:	6a 0c                	push   0xc
c000df89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8d:	e8 9b 10 00 00       	call   c000f02d <operator delete(void*, unsigned long)>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	83 c4 0c             	add    esp,0xc
c000df98:	c3                   	ret    
c000df99:	90                   	nop

c000df9a <ReservedFilename::~ReservedFilename()>:
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa6:	89 10                	mov    DWORD PTR [eax],edx
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	50                   	push   eax
c000dfb0:	e8 25 ff ff ff       	call   c000deda <UnixFile::~UnixFile()>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	90                   	nop
c000dfb9:	83 c4 0c             	add    esp,0xc
c000dfbc:	c3                   	ret    
c000dfbd:	90                   	nop

c000dfbe <ReservedFilename::~ReservedFilename()>:
c000dfbe:	83 ec 0c             	sub    esp,0xc
c000dfc1:	83 ec 0c             	sub    esp,0xc
c000dfc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc8:	e8 cd ff ff ff       	call   c000df9a <ReservedFilename::~ReservedFilename()>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	83 ec 08             	sub    esp,0x8
c000dfd3:	6a 0c                	push   0xc
c000dfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd9:	e8 4f 10 00 00       	call   c000f02d <operator delete(void*, unsigned long)>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	83 c4 0c             	add    esp,0xc
c000dfe4:	c3                   	ret    

c000dfe5 <getFromFileDescriptor(int)>:
c000dfe5:	53                   	push   ebx
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dff3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dff9:	7f 2c                	jg     c000e027 <getFromFileDescriptor(int)+0x42>
c000dffb:	83 ec 0c             	sub    esp,0xc
c000dffe:	68 b8 44 02 c0       	push   0xc00244b8
c000e003:	e8 c6 15 01 00       	call   c001f5ce <LinkedList<UnixFile>::getFirstElement()>
c000e008:	83 c4 10             	add    esp,0x10
c000e00b:	85 c0                	test   eax,eax
c000e00d:	75 04                	jne    c000e013 <getFromFileDescriptor(int)+0x2e>
c000e00f:	31 c0                	xor    eax,eax
c000e011:	eb 6e                	jmp    c000e081 <getFromFileDescriptor(int)+0x9c>
c000e013:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e016:	74 69                	je     c000e081 <getFromFileDescriptor(int)+0x9c>
c000e018:	52                   	push   edx
c000e019:	52                   	push   edx
c000e01a:	50                   	push   eax
c000e01b:	68 b8 44 02 c0       	push   0xc00244b8
c000e020:	e8 53 16 01 00       	call   c001f678 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e025:	eb e1                	jmp    c000e008 <getFromFileDescriptor(int)+0x23>
c000e027:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e02c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e032:	74 4d                	je     c000e081 <getFromFileDescriptor(int)+0x9c>
c000e034:	a1 b0 44 02 c0       	mov    eax,ds:0xc00244b0
c000e039:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e03f:	74 40                	je     c000e081 <getFromFileDescriptor(int)+0x9c>
c000e041:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000e046:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e04c:	74 33                	je     c000e081 <getFromFileDescriptor(int)+0x9c>
c000e04e:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000e053:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e059:	74 26                	je     c000e081 <getFromFileDescriptor(int)+0x9c>
c000e05b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e061:	83 f8 08             	cmp    eax,0x8
c000e064:	77 09                	ja     c000e06f <getFromFileDescriptor(int)+0x8a>
c000e066:	8b 04 85 80 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb80]
c000e06d:	eb 12                	jmp    c000e081 <getFromFileDescriptor(int)+0x9c>
c000e06f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e075:	83 fb 08             	cmp    ebx,0x8
c000e078:	77 95                	ja     c000e00f <getFromFileDescriptor(int)+0x2a>
c000e07a:	8b 04 9d 40 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbc0]
c000e081:	83 c4 08             	add    esp,0x8
c000e084:	5b                   	pop    ebx
c000e085:	c3                   	ret    

c000e086 <__static_initialization_and_destruction_0(int, int)>:
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e08e:	75 34                	jne    c000e0c4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e090:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e098:	75 2a                	jne    c000e0c4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e09a:	83 ec 0c             	sub    esp,0xc
c000e09d:	68 b8 44 02 c0       	push   0xc00244b8
c000e0a2:	e8 fb 13 01 00       	call   c001f4a2 <LinkedList<UnixFile>::LinkedList()>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	83 ec 04             	sub    esp,0x4
c000e0ad:	68 7c 37 02 c0       	push   0xc002377c
c000e0b2:	68 b8 44 02 c0       	push   0xc00244b8
c000e0b7:	68 a0 f4 01 c0       	push   0xc001f4a0
c000e0bc:	e8 e8 0e 00 00       	call   c000efa9 <__cxa_atexit>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	90                   	nop
c000e0c5:	83 c4 0c             	add    esp,0xc
c000e0c8:	c3                   	ret    

c000e0c9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0c9:	83 ec 0c             	sub    esp,0xc
c000e0cc:	83 ec 08             	sub    esp,0x8
c000e0cf:	68 ff ff 00 00       	push   0xffff
c000e0d4:	6a 01                	push   0x1
c000e0d6:	e8 ab ff ff ff       	call   c000e086 <__static_initialization_and_destruction_0(int, int)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	83 c4 0c             	add    esp,0xc
c000e0e1:	c3                   	ret    

c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0e2:	53                   	push   ebx
c000e0e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0eb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0f1:	89 c8                	mov    eax,ecx
c000e0f3:	d1 e8                	shr    eax,1
c000e0f5:	03 05 08 38 02 c0    	add    eax,DWORD PTR ds:0xc0023808
c000e0fb:	83 e1 01             	and    ecx,0x1
c000e0fe:	8a 10                	mov    dl,BYTE PTR [eax]
c000e100:	75 09                	jne    c000e10b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e102:	83 e2 f0             	and    edx,0xfffffff0
c000e105:	09 da                	or     edx,ebx
c000e107:	88 10                	mov    BYTE PTR [eax],dl
c000e109:	5b                   	pop    ebx
c000e10a:	c3                   	ret    
c000e10b:	c1 e3 04             	shl    ebx,0x4
c000e10e:	83 e2 0f             	and    edx,0xf
c000e111:	09 da                	or     edx,ebx
c000e113:	88 10                	mov    BYTE PTR [eax],dl
c000e115:	5b                   	pop    ebx
c000e116:	c3                   	ret    

c000e117 <Virt::getPageState(unsigned long)>:
c000e117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11b:	8b 0d 08 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023808
c000e121:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e127:	89 d0                	mov    eax,edx
c000e129:	d1 e8                	shr    eax,1
c000e12b:	83 e2 01             	and    edx,0x1
c000e12e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e131:	75 04                	jne    c000e137 <Virt::getPageState(unsigned long)+0x20>
c000e133:	83 e0 0f             	and    eax,0xf
c000e136:	c3                   	ret    
c000e137:	c0 e8 04             	shr    al,0x4
c000e13a:	c3                   	ret    

c000e13b <Virt::allocateKernelVirtualPages(int)>:
c000e13b:	55                   	push   ebp
c000e13c:	31 ed                	xor    ebp,ebp
c000e13e:	57                   	push   edi
c000e13f:	56                   	push   esi
c000e140:	53                   	push   ebx
c000e141:	31 db                	xor    ebx,ebx
c000e143:	83 ec 1c             	sub    esp,0x1c
c000e146:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e14a:	8b 3d 04 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023804
c000e150:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e155:	57                   	push   edi
c000e156:	e8 bc ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e15b:	5a                   	pop    edx
c000e15c:	84 c0                	test   al,al
c000e15e:	75 3a                	jne    c000e19a <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e160:	85 db                	test   ebx,ebx
c000e162:	75 02                	jne    c000e166 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e164:	89 fd                	mov    ebp,edi
c000e166:	43                   	inc    ebx
c000e167:	39 f3                	cmp    ebx,esi
c000e169:	74 5a                	je     c000e1c5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e16b:	47                   	inc    edi
c000e16c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e172:	76 31                	jbe    c000e1a5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e174:	c7 05 04 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023804,0xc8000
c000e17e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e183:	75 28                	jne    c000e1ad <Virt::allocateKernelVirtualPages(int)+0x72>
c000e185:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e18a:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e18f:	57                   	push   edi
c000e190:	e8 82 ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e195:	5a                   	pop    edx
c000e196:	84 c0                	test   al,al
c000e198:	74 c6                	je     c000e160 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e19a:	31 db                	xor    ebx,ebx
c000e19c:	47                   	inc    edi
c000e19d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1a3:	77 cf                	ja     c000e174 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1a5:	89 3d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,edi
c000e1ab:	eb a8                	jmp    c000e155 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1ad:	83 ec 0c             	sub    esp,0xc
c000e1b0:	68 b8 12 02 c0       	push   0xc00212b8
c000e1b5:	e8 1e 77 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e1ba:	8b 3d 04 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023804
c000e1c0:	83 c4 10             	add    esp,0x10
c000e1c3:	eb 90                	jmp    c000e155 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c5:	89 2d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ebp
c000e1cb:	4b                   	dec    ebx
c000e1cc:	74 5f                	je     c000e22d <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1ce:	85 f6                	test   esi,esi
c000e1d0:	74 3d                	je     c000e20f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d2:	89 e8                	mov    eax,ebp
c000e1d4:	31 db                	xor    ebx,ebx
c000e1d6:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1d9:	eb 14                	jmp    c000e1ef <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1db:	6a 01                	push   0x1
c000e1dd:	43                   	inc    ebx
c000e1de:	50                   	push   eax
c000e1df:	e8 fe fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e4:	58                   	pop    eax
c000e1e5:	39 f3                	cmp    ebx,esi
c000e1e7:	5a                   	pop    edx
c000e1e8:	74 25                	je     c000e20f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ea:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000e1ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f2:	85 db                	test   ebx,ebx
c000e1f4:	89 15 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,edx
c000e1fa:	74 20                	je     c000e21c <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1fc:	39 df                	cmp    edi,ebx
c000e1fe:	75 db                	jne    c000e1db <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e200:	6a 03                	push   0x3
c000e202:	43                   	inc    ebx
c000e203:	50                   	push   eax
c000e204:	e8 d9 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e209:	59                   	pop    ecx
c000e20a:	39 f3                	cmp    ebx,esi
c000e20c:	58                   	pop    eax
c000e20d:	75 db                	jne    c000e1ea <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e20f:	83 c4 1c             	add    esp,0x1c
c000e212:	89 e8                	mov    eax,ebp
c000e214:	5b                   	pop    ebx
c000e215:	c1 e0 0c             	shl    eax,0xc
c000e218:	5e                   	pop    esi
c000e219:	5f                   	pop    edi
c000e21a:	5d                   	pop    ebp
c000e21b:	c3                   	ret    
c000e21c:	6a 02                	push   0x2
c000e21e:	bb 01 00 00 00       	mov    ebx,0x1
c000e223:	50                   	push   eax
c000e224:	e8 b9 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e229:	58                   	pop    eax
c000e22a:	5a                   	pop    edx
c000e22b:	eb bd                	jmp    c000e1ea <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e22d:	6a 04                	push   0x4
c000e22f:	8d 45 01             	lea    eax,[ebp+0x1]
c000e232:	55                   	push   ebp
c000e233:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c000e238:	e8 a5 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e23d:	59                   	pop    ecx
c000e23e:	89 e8                	mov    eax,ebp
c000e240:	5b                   	pop    ebx
c000e241:	c1 e0 0c             	shl    eax,0xc
c000e244:	83 c4 1c             	add    esp,0x1c
c000e247:	5b                   	pop    ebx
c000e248:	5e                   	pop    esi
c000e249:	5f                   	pop    edi
c000e24a:	5d                   	pop    ebp
c000e24b:	c3                   	ret    

c000e24c <Virt::virtualMemorySetup()>:
c000e24c:	53                   	push   ebx
c000e24d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e252:	83 ec 08             	sub    esp,0x8
c000e255:	6a 0f                	push   0xf
c000e257:	53                   	push   ebx
c000e258:	43                   	inc    ebx
c000e259:	e8 84 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e25e:	59                   	pop    ecx
c000e25f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e265:	58                   	pop    eax
c000e266:	75 ed                	jne    c000e255 <Virt::virtualMemorySetup()+0x9>
c000e268:	83 ec 08             	sub    esp,0x8
c000e26b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e270:	68 00 00 00 c8       	push   0xc8000000
c000e275:	68 3f 14 02 c0       	push   0xc002143f
c000e27a:	e8 8e 0e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e27f:	58                   	pop    eax
c000e280:	5a                   	pop    edx
c000e281:	68 00 f0 ff ef       	push   0xeffff000
c000e286:	68 53 14 02 c0       	push   0xc0021453
c000e28b:	e8 7d 0e 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	83 ec 08             	sub    esp,0x8
c000e296:	6a 00                	push   0x0
c000e298:	53                   	push   ebx
c000e299:	43                   	inc    ebx
c000e29a:	e8 43 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2a8:	75 e9                	jne    c000e293 <Virt::virtualMemorySetup()+0x47>
c000e2aa:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2af:	83 ec 08             	sub    esp,0x8
c000e2b2:	6a 0f                	push   0xf
c000e2b4:	53                   	push   ebx
c000e2b5:	43                   	inc    ebx
c000e2b6:	e8 27 fe ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2c4:	75 e9                	jne    c000e2af <Virt::virtualMemorySetup()+0x63>
c000e2c6:	83 c4 08             	add    esp,0x8
c000e2c9:	5b                   	pop    ebx
c000e2ca:	c3                   	ret    

c000e2cb <Virt::getAKernelVAS()>:
c000e2cb:	a1 c4 44 02 c0       	mov    eax,ds:0xc00244c4
c000e2d0:	c3                   	ret    

c000e2d1 <Virt::setupPageSwapping(int)>:
c000e2d1:	57                   	push   edi
c000e2d2:	56                   	push   esi
c000e2d3:	53                   	push   ebx
c000e2d4:	83 ec 1c             	sub    esp,0x1c
c000e2d7:	68 14 01 00 00       	push   0x114
c000e2dc:	e8 3d 0d 00 00       	call   c000f01e <operator new(unsigned long)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	89 c6                	mov    esi,eax
c000e2e6:	ff 35 b4 57 02 c0    	push   DWORD PTR ds:0xc00257b4
c000e2ec:	68 67 14 02 c0       	push   0xc0021467
c000e2f1:	50                   	push   eax
c000e2f2:	e8 45 13 00 00       	call   c000f63c <File::File(char const*, Process*)>
c000e2f7:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2fa:	e8 19 15 00 00       	call   c000f818 <File::unlink()>
c000e2ff:	58                   	pop    eax
c000e300:	5a                   	pop    edx
c000e301:	6a 12                	push   0x12
c000e303:	56                   	push   esi
c000e304:	e8 97 13 00 00       	call   c000f6a0 <File::open(FileOpenMode)>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	85 c0                	test   eax,eax
c000e30e:	0f 85 bf 00 00 00    	jne    c000e3d3 <Virt::setupPageSwapping(int)+0x102>
c000e314:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e318:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e320:	c1 e3 08             	shl    ebx,0x8
c000e323:	83 ec 0c             	sub    esp,0xc
c000e326:	68 00 00 01 00       	push   0x10000
c000e32b:	e8 ec dc ff ff       	call   c000c01c <malloc>
c000e330:	83 c4 0c             	add    esp,0xc
c000e333:	89 c7                	mov    edi,eax
c000e335:	68 00 00 01 00       	push   0x10000
c000e33a:	6a 00                	push   0x0
c000e33c:	50                   	push   eax
c000e33d:	e8 78 23 ff ff       	call   c00006ba <memset>
c000e342:	83 c4 10             	add    esp,0x10
c000e345:	85 db                	test   ebx,ebx
c000e347:	79 03                	jns    c000e34c <Virt::setupPageSwapping(int)+0x7b>
c000e349:	83 c3 0f             	add    ebx,0xf
c000e34c:	c1 fb 04             	sar    ebx,0x4
c000e34f:	4b                   	dec    ebx
c000e350:	83 fb ff             	cmp    ebx,0xffffffff
c000e353:	74 4b                	je     c000e3a0 <Virt::setupPageSwapping(int)+0xcf>
c000e355:	83 ec 0c             	sub    esp,0xc
c000e358:	8b 06                	mov    eax,DWORD PTR [esi]
c000e35a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e35e:	52                   	push   edx
c000e35f:	57                   	push   edi
c000e360:	6a 00                	push   0x0
c000e362:	68 00 00 01 00       	push   0x10000
c000e367:	56                   	push   esi
c000e368:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e36b:	83 c4 20             	add    esp,0x20
c000e36e:	85 c0                	test   eax,eax
c000e370:	75 4e                	jne    c000e3c0 <Virt::setupPageSwapping(int)+0xef>
c000e372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e376:	3d 00 00 01 00       	cmp    eax,0x10000
c000e37b:	74 d2                	je     c000e34f <Virt::setupPageSwapping(int)+0x7e>
c000e37d:	83 ec 08             	sub    esp,0x8
c000e380:	4b                   	dec    ebx
c000e381:	50                   	push   eax
c000e382:	68 ba 14 02 c0       	push   0xc00214ba
c000e387:	e8 81 0d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e38c:	c7 04 24 c3 14 02 c0 	mov    DWORD PTR [esp],0xc00214c3
c000e393:	e8 40 75 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e398:	83 c4 10             	add    esp,0x10
c000e39b:	83 fb ff             	cmp    ebx,0xffffffff
c000e39e:	75 b5                	jne    c000e355 <Virt::setupPageSwapping(int)+0x84>
c000e3a0:	83 ec 0c             	sub    esp,0xc
c000e3a3:	56                   	push   esi
c000e3a4:	e8 55 13 00 00       	call   c000f6fe <File::close()>
c000e3a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3ac:	e8 8b dc ff ff       	call   c000c03c <rfree>
c000e3b1:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b9:	83 c4 20             	add    esp,0x20
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	c3                   	ret    
c000e3c0:	83 ec 08             	sub    esp,0x8
c000e3c3:	50                   	push   eax
c000e3c4:	68 a2 14 02 c0       	push   0xc00214a2
c000e3c9:	e8 3f 0d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e3ce:	83 c4 10             	add    esp,0x10
c000e3d1:	eb 9f                	jmp    c000e372 <Virt::setupPageSwapping(int)+0xa1>
c000e3d3:	83 ec 08             	sub    esp,0x8
c000e3d6:	50                   	push   eax
c000e3d7:	68 7e 14 02 c0       	push   0xc002147e
c000e3dc:	e8 2c 0d 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e3e1:	c7 04 24 87 14 02 c0 	mov    DWORD PTR [esp],0xc0021487
c000e3e8:	e8 eb 74 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	e9 1f ff ff ff       	jmp    c000e314 <Virt::setupPageSwapping(int)+0x43>
c000e3f5:	90                   	nop

c000e3f6 <VAS::VAS()>:
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e405:	a3 c4 44 02 c0       	mov    ds:0xc00244c4,eax
c000e40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e416:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e424:	90                   	nop
c000e425:	c3                   	ret    

c000e426 <VAS::VAS(VAS*)>:
c000e426:	83 ec 0c             	sub    esp,0xc
c000e429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e434:	83 ec 0c             	sub    esp,0xc
c000e437:	68 d8 12 02 c0       	push   0xc00212d8
c000e43c:	e8 97 74 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	90                   	nop
c000e445:	83 c4 0c             	add    esp,0xc
c000e448:	c3                   	ret    
c000e449:	90                   	nop

c000e44a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e44a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44e:	89 c2                	mov    edx,eax
c000e450:	c1 e8 0a             	shr    eax,0xa
c000e453:	c1 ea 16             	shr    edx,0x16
c000e456:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e45b:	19 c9                	sbb    ecx,ecx
c000e45d:	c1 e2 0c             	shl    edx,0xc
c000e460:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e466:	25 fc 0f 00 00       	and    eax,0xffc
c000e46b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e472:	01 d0                	add    eax,edx
c000e474:	c3                   	ret    
c000e475:	90                   	nop

c000e476 <VAS::getPageTableEntry(unsigned long)>:
c000e476:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e47a:	89 ca                	mov    edx,ecx
c000e47c:	c1 e9 0a             	shr    ecx,0xa
c000e47f:	c1 ea 16             	shr    edx,0x16
c000e482:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e488:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e48e:	c1 e0 0c             	shl    eax,0xc
c000e491:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e494:	c3                   	ret    

c000e495 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e495:	57                   	push   edi
c000e496:	56                   	push   esi
c000e497:	be 01 00 00 00       	mov    esi,0x1
c000e49c:	53                   	push   ebx
c000e49d:	83 ec 10             	sub    esp,0x10
c000e4a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4a4:	c1 eb 0c             	shr    ebx,0xc
c000e4a7:	eb 3f                	jmp    c000e4e8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e4a9:	e8 1d fe ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e4ae:	83 ec 08             	sub    esp,0x8
c000e4b1:	57                   	push   edi
c000e4b2:	50                   	push   eax
c000e4b3:	e8 be ff ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c000e4b8:	83 c4 10             	add    esp,0x10
c000e4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4c1:	f6 c4 04             	test   ah,0x4
c000e4c4:	75 5f                	jne    c000e525 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e4c6:	80 fa 04             	cmp    dl,0x4
c000e4c9:	74 78                	je     c000e543 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e4cb:	80 fa 02             	cmp    dl,0x2
c000e4ce:	0f 84 88 00 00 00    	je     c000e55c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e4d4:	80 fa 03             	cmp    dl,0x3
c000e4d7:	0f 84 ad 00 00 00    	je     c000e58a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e4dd:	fe ca                	dec    dl
c000e4df:	0f 84 92 00 00 00    	je     c000e577 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e4e5:	43                   	inc    ebx
c000e4e6:	31 f6                	xor    esi,esi
c000e4e8:	53                   	push   ebx
c000e4e9:	e8 29 fc ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e4ee:	5f                   	pop    edi
c000e4ef:	89 df                	mov    edi,ebx
c000e4f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4f5:	c1 e7 0c             	shl    edi,0xc
c000e4f8:	84 c0                	test   al,al
c000e4fa:	75 ad                	jne    c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	68 c9 14 02 c0       	push   0xc00214c9
c000e504:	e8 cf 73 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e509:	e8 bd fd ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e50e:	5a                   	pop    edx
c000e50f:	59                   	pop    ecx
c000e510:	57                   	push   edi
c000e511:	50                   	push   eax
c000e512:	e8 5f ff ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c000e517:	83 c4 10             	add    esp,0x10
c000e51a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e51c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e520:	f6 c4 04             	test   ah,0x4
c000e523:	74 c0                	je     c000e4e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e525:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e529:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e52e:	83 ec 0c             	sub    esp,0xc
c000e531:	50                   	push   eax
c000e532:	e8 05 e0 ff ff       	call   c000c53c <Phys::freePage(unsigned long)>
c000e537:	83 c4 10             	add    esp,0x10
c000e53a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e53e:	80 fa 04             	cmp    dl,0x4
c000e541:	75 88                	jne    c000e4cb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e543:	89 f0                	mov    eax,esi
c000e545:	84 c0                	test   al,al
c000e547:	75 47                	jne    c000e590 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e549:	c7 44 24 20 fc 12 02 c0 	mov    DWORD PTR [esp+0x20],0xc00212fc
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	5b                   	pop    ebx
c000e555:	5e                   	pop    esi
c000e556:	5f                   	pop    edi
c000e557:	e9 7c 73 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>
c000e55c:	89 f0                	mov    eax,esi
c000e55e:	84 c0                	test   al,al
c000e560:	75 15                	jne    c000e577 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e562:	83 ec 0c             	sub    esp,0xc
c000e565:	68 e5 14 02 c0       	push   0xc00214e5
c000e56a:	e8 69 73 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	e9 6e ff ff ff       	jmp    c000e4e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e577:	83 ec 08             	sub    esp,0x8
c000e57a:	6a 00                	push   0x0
c000e57c:	53                   	push   ebx
c000e57d:	e8 60 fb ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e582:	83 c4 10             	add    esp,0x10
c000e585:	e9 5b ff ff ff       	jmp    c000e4e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e58a:	89 f0                	mov    eax,esi
c000e58c:	84 c0                	test   al,al
c000e58e:	75 15                	jne    c000e5a5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	6a 00                	push   0x0
c000e595:	53                   	push   ebx
c000e596:	e8 47 fb ff ff       	call   c000e0e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e59b:	83 c4 10             	add    esp,0x10
c000e59e:	83 c4 10             	add    esp,0x10
c000e5a1:	5b                   	pop    ebx
c000e5a2:	5e                   	pop    esi
c000e5a3:	5f                   	pop    edi
c000e5a4:	c3                   	ret    
c000e5a5:	c7 44 24 20 01 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021501
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	5b                   	pop    ebx
c000e5b1:	5e                   	pop    esi
c000e5b2:	5f                   	pop    edi
c000e5b3:	e9 20 73 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>

c000e5b8 <VAS::freeAllocatedPages(unsigned long)>:
c000e5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5c4:	74 09                	je     c000e5cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5ca:	e9 c6 fe ff ff       	jmp    c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5cf:	c7 44 24 04 20 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021320
c000e5d7:	e9 31 0b 00 00       	jmp    c000f10d <Dbg::kprintf(char const*, ...)>

c000e5dc <VAS::virtualToPhysical(unsigned long)>:
c000e5dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5e4:	e8 8d fe ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c000e5e9:	5a                   	pop    edx
c000e5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5ec:	59                   	pop    ecx
c000e5ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5f2:	c3                   	ret    
c000e5f3:	90                   	nop

c000e5f4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5f4:	55                   	push   ebp
c000e5f5:	57                   	push   edi
c000e5f6:	56                   	push   esi
c000e5f7:	53                   	push   ebx
c000e5f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e600:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e604:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e608:	85 db                	test   ebx,ebx
c000e60a:	7e 22                	jle    c000e62e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000e60c:	c1 e3 0c             	shl    ebx,0xc
c000e60f:	01 f3                	add    ebx,esi
c000e611:	56                   	push   esi
c000e612:	81 c6 00 10 00 00    	add    esi,0x1000
c000e618:	55                   	push   ebp
c000e619:	e8 58 fe ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c000e61e:	5a                   	pop    edx
c000e61f:	59                   	pop    ecx
c000e620:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e622:	21 f9                	and    ecx,edi
c000e624:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000e628:	39 f3                	cmp    ebx,esi
c000e62a:	89 08                	mov    DWORD PTR [eax],ecx
c000e62c:	75 e3                	jne    c000e611 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000e62e:	5b                   	pop    ebx
c000e62f:	5e                   	pop    esi
c000e630:	5f                   	pop    edi
c000e631:	5d                   	pop    ebp
c000e632:	c3                   	ret    
c000e633:	90                   	nop

c000e634 <VAS::setToWriteCombining(unsigned long, int)>:
c000e634:	83 ec 0c             	sub    esp,0xc
c000e637:	e8 1a 61 00 00       	call   c0014756 <thisCPU()>
c000e63c:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e643:	75 04                	jne    c000e649 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e645:	83 c4 0c             	add    esp,0xc
c000e648:	c3                   	ret    
c000e649:	83 ec 0c             	sub    esp,0xc
c000e64c:	68 80 00 00 00       	push   0x80
c000e651:	6a ff                	push   0xffffffff
c000e653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e65b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e65f:	e8 90 ff ff ff       	call   c000e5f4 <VAS::reflagRange(unsigned long, int, int, int)>
c000e664:	83 c4 20             	add    esp,0x20
c000e667:	83 c4 0c             	add    esp,0xc
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <VAS::mapOtherVASIn(bool, VAS*)>:
c000e66c:	83 ec 0c             	sub    esp,0xc
c000e66f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e674:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e678:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e682:	19 c0                	sbb    eax,eax
c000e684:	83 ca 03             	or     edx,0x3
c000e687:	83 e0 fc             	and    eax,0xfffffffc
c000e68a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e691:	e8 ef 0d 01 00       	call   c001f485 <CPU::readCR3()>
c000e696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e69a:	83 c4 0c             	add    esp,0xc
c000e69d:	e9 f5 0d 01 00       	jmp    c001f497 <CPU::writeCR3(unsigned long)>

c000e6a2 <VAS::~VAS()>:
c000e6a2:	83 ec 2c             	sub    esp,0x2c
c000e6a5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6ad:	e8 7a a1 00 00       	call   c001882c <lockScheduler()>
c000e6b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6bc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6c2:	83 ec 04             	sub    esp,0x4
c000e6c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6c9:	6a 01                	push   0x1
c000e6cb:	50                   	push   eax
c000e6cc:	e8 9b ff ff ff       	call   c000e66c <VAS::mapOtherVASIn(bool, VAS*)>
c000e6d1:	83 c4 10             	add    esp,0x10
c000e6d4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6dc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6e4:	0f 8f d7 00 00 00    	jg     c000e7c1 <VAS::~VAS()+0x11f>
c000e6ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f5:	c1 e2 02             	shl    edx,0x2
c000e6f8:	01 d0                	add    eax,edx
c000e6fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e704:	83 e0 01             	and    eax,0x1
c000e707:	0f 84 ab 00 00 00    	je     c000e7b8 <VAS::~VAS()+0x116>
c000e70d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e715:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e71d:	7f 75                	jg     c000e794 <VAS::~VAS()+0xf2>
c000e71f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e723:	c1 e0 0a             	shl    eax,0xa
c000e726:	89 c2                	mov    edx,eax
c000e728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e72c:	01 d0                	add    eax,edx
c000e72e:	c1 e0 0c             	shl    eax,0xc
c000e731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e735:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e73a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e73c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e745:	83 ec 04             	sub    esp,0x4
c000e748:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e74c:	6a 01                	push   0x1
c000e74e:	50                   	push   eax
c000e74f:	e8 f6 fc ff ff       	call   c000e44a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e754:	83 c4 10             	add    esp,0x10
c000e757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e761:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e769:	25 01 04 00 00       	and    eax,0x401
c000e76e:	3d 01 04 00 00       	cmp    eax,0x401
c000e773:	75 19                	jne    c000e78e <VAS::~VAS()+0xec>
c000e775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e779:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	50                   	push   eax
c000e782:	e8 b5 dd ff ff       	call   c000c53c <Phys::freePage(unsigned long)>
c000e787:	83 c4 10             	add    esp,0x10
c000e78a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e792:	eb 81                	jmp    c000e715 <VAS::~VAS()+0x73>
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	25 00 04 00 00       	and    eax,0x400
c000e79d:	74 19                	je     c000e7b8 <VAS::~VAS()+0x116>
c000e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	50                   	push   eax
c000e7ac:	e8 8b dd ff ff       	call   c000c53c <Phys::freePage(unsigned long)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7b8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7bc:	e9 1b ff ff ff       	jmp    c000e6dc <VAS::~VAS()+0x3a>
c000e7c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	50                   	push   eax
c000e7cc:	e8 c4 fc ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7db:	83 ec 0c             	sub    esp,0xc
c000e7de:	50                   	push   eax
c000e7df:	e8 58 dd ff ff       	call   c000c53c <Phys::freePage(unsigned long)>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7ef:	c1 e0 02             	shl    eax,0x2
c000e7f2:	83 ec 08             	sub    esp,0x8
c000e7f5:	50                   	push   eax
c000e7f6:	68 44 13 02 c0       	push   0xc0021344
c000e7fb:	e8 0d 09 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e800:	83 c4 10             	add    esp,0x10
c000e803:	e8 26 a0 00 00       	call   c001882e <unlockScheduler()>
c000e808:	90                   	nop
c000e809:	83 c4 2c             	add    esp,0x2c
c000e80c:	c3                   	ret    
c000e80d:	90                   	nop

c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e80e:	55                   	push   ebp
c000e80f:	57                   	push   edi
c000e810:	56                   	push   esi
c000e811:	53                   	push   ebx
c000e812:	83 ec 1c             	sub    esp,0x1c
c000e815:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e819:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e81d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e823:	77 08                	ja     c000e82d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e825:	0f 20 d8             	mov    eax,cr3
c000e828:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e82b:	75 47                	jne    c000e874 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e82d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e831:	09 d8                	or     eax,ebx
c000e833:	a9 ff 0f 00 00       	test   eax,0xfff
c000e838:	75 57                	jne    c000e891 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e83a:	89 de                	mov    esi,ebx
c000e83c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e83f:	c1 ee 16             	shr    esi,0x16
c000e842:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e849:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e84d:	74 54                	je     c000e8a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e84f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e853:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e859:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e85d:	c1 e6 0c             	shl    esi,0xc
c000e860:	c1 eb 0a             	shr    ebx,0xa
c000e863:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e869:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e86c:	83 c4 1c             	add    esp,0x1c
c000e86f:	5b                   	pop    ebx
c000e870:	5e                   	pop    esi
c000e871:	5f                   	pop    edi
c000e872:	5d                   	pop    ebp
c000e873:	c3                   	ret    
c000e874:	83 ec 0c             	sub    esp,0xc
c000e877:	68 64 13 02 c0       	push   0xc0021364
c000e87c:	e8 8c 08 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e888:	09 d8                	or     eax,ebx
c000e88a:	a9 ff 0f 00 00       	test   eax,0xfff
c000e88f:	74 a9                	je     c000e83a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e891:	83 ec 0c             	sub    esp,0xc
c000e894:	68 cc 13 02 c0       	push   0xc00213cc
c000e899:	e8 3a 70 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e89e:	83 c4 10             	add    esp,0x10
c000e8a1:	eb 97                	jmp    c000e83a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8a7:	e8 1a dd ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000e8ac:	89 c5                	mov    ebp,eax
c000e8ae:	e8 18 fa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e8b3:	83 ec 0c             	sub    esp,0xc
c000e8b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8ba:	6a 01                	push   0x1
c000e8bc:	e8 7a f8 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c000e8c1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8c8:	6a 01                	push   0x1
c000e8ca:	50                   	push   eax
c000e8cb:	55                   	push   ebp
c000e8cc:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8d6:	51                   	push   ecx
c000e8d7:	e8 1e 02 00 00       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	68 00 10 00 00       	push   0x1000
c000e8e4:	6a 00                	push   0x0
c000e8e6:	50                   	push   eax
c000e8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8eb:	e8 ca 1d ff ff       	call   c00006ba <memset>
c000e8f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8f4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8f7:	e8 99 fb ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e900:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e909:	e9 41 ff ff ff       	jmp    c000e84f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e90e <VAS::allocatePages(int, int)>:
c000e90e:	55                   	push   ebp
c000e90f:	57                   	push   edi
c000e910:	56                   	push   esi
c000e911:	53                   	push   ebx
c000e912:	83 ec 1c             	sub    esp,0x1c
c000e915:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e919:	e8 38 5e 00 00       	call   c0014756 <thisCPU()>
c000e91e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e924:	83 e0 01             	and    eax,0x1
c000e927:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e92b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e92f:	0f 85 d7 00 00 00    	jne    c000ea0c <VAS::allocatePages(int, int)+0xfe>
c000e935:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93c:	85 c0                	test   eax,eax
c000e93e:	0f 84 ac 00 00 00    	je     c000e9f0 <VAS::allocatePages(int, int)+0xe2>
c000e944:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e94c:	c1 e6 0c             	shl    esi,0xc
c000e94f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e953:	85 c0                	test   eax,eax
c000e955:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e958:	7e 33                	jle    c000e98d <VAS::allocatePages(int, int)+0x7f>
c000e95a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e95e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e962:	81 cd 00 04 00 00    	or     ebp,0x400
c000e968:	e8 59 dc ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000e96d:	55                   	push   ebp
c000e96e:	53                   	push   ebx
c000e96f:	50                   	push   eax
c000e970:	57                   	push   edi
c000e971:	e8 98 fe ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000e976:	83 c4 10             	add    esp,0x10
c000e979:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97e:	74 03                	je     c000e983 <VAS::allocatePages(int, int)+0x75>
c000e980:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e983:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e989:	39 de                	cmp    esi,ebx
c000e98b:	75 db                	jne    c000e968 <VAS::allocatePages(int, int)+0x5a>
c000e98d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e992:	74 3f                	je     c000e9d3 <VAS::allocatePages(int, int)+0xc5>
c000e994:	c1 ee 0a             	shr    esi,0xa
c000e997:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e99b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9a1:	c1 eb 0a             	shr    ebx,0xa
c000e9a4:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9aa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9b0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9b6:	39 f3                	cmp    ebx,esi
c000e9b8:	77 0d                	ja     c000e9c7 <VAS::allocatePages(int, int)+0xb9>
c000e9ba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9c3:	39 de                	cmp    esi,ebx
c000e9c5:	73 f3                	jae    c000e9ba <VAS::allocatePages(int, int)+0xac>
c000e9c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9cb:	83 c4 1c             	add    esp,0x1c
c000e9ce:	5b                   	pop    ebx
c000e9cf:	5e                   	pop    esi
c000e9d0:	5f                   	pop    edi
c000e9d1:	5d                   	pop    ebp
c000e9d2:	c3                   	ret    
c000e9d3:	e8 ad 0a 01 00       	call   c001f485 <CPU::readCR3()>
c000e9d8:	83 ec 0c             	sub    esp,0xc
c000e9db:	50                   	push   eax
c000e9dc:	e8 b6 0a 01 00       	call   c001f497 <CPU::writeCR3(unsigned long)>
c000e9e1:	83 c4 10             	add    esp,0x10
c000e9e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e8:	83 c4 1c             	add    esp,0x1c
c000e9eb:	5b                   	pop    ebx
c000e9ec:	5e                   	pop    esi
c000e9ed:	5f                   	pop    edi
c000e9ee:	5d                   	pop    ebp
c000e9ef:	c3                   	ret    
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	68 f0 13 02 c0       	push   0xc00213f0
c000e9f8:	e8 db 6e 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000e9fd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea04:	83 c4 10             	add    esp,0x10
c000ea07:	e9 38 ff ff ff       	jmp    c000e944 <VAS::allocatePages(int, int)+0x36>
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea13:	e8 23 f7 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c000ea18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea1c:	83 c4 10             	add    esp,0x10
c000ea1f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea24:	0f 87 94 00 00 00    	ja     c000eabe <VAS::allocatePages(int, int)+0x1b0>
c000ea2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea2e:	85 d2                	test   edx,edx
c000ea30:	7e 3c                	jle    c000ea6e <VAS::allocatePages(int, int)+0x160>
c000ea32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea36:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea3e:	c1 e5 0c             	shl    ebp,0xc
c000ea41:	81 ce 00 04 00 00    	or     esi,0x400
c000ea47:	01 dd                	add    ebp,ebx
c000ea49:	e8 78 db ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000ea4e:	56                   	push   esi
c000ea4f:	53                   	push   ebx
c000ea50:	50                   	push   eax
c000ea51:	57                   	push   edi
c000ea52:	e8 b7 fd ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea57:	83 c4 10             	add    esp,0x10
c000ea5a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5f:	74 03                	je     c000ea64 <VAS::allocatePages(int, int)+0x156>
c000ea61:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea64:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea6a:	39 dd                	cmp    ebp,ebx
c000ea6c:	75 db                	jne    c000ea49 <VAS::allocatePages(int, int)+0x13b>
c000ea6e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea73:	0f 84 5a ff ff ff    	je     c000e9d3 <VAS::allocatePages(int, int)+0xc5>
c000ea79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea81:	89 d3                	mov    ebx,edx
c000ea83:	c1 e0 0c             	shl    eax,0xc
c000ea86:	c1 eb 0a             	shr    ebx,0xa
c000ea89:	01 d0                	add    eax,edx
c000ea8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea91:	c1 e8 0a             	shr    eax,0xa
c000ea94:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea9f:	2d 00 00 40 00       	sub    eax,0x400000
c000eaa4:	39 c3                	cmp    ebx,eax
c000eaa6:	0f 87 1b ff ff ff    	ja     c000e9c7 <VAS::allocatePages(int, int)+0xb9>
c000eaac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaaf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eab5:	39 d8                	cmp    eax,ebx
c000eab7:	73 f3                	jae    c000eaac <VAS::allocatePages(int, int)+0x19e>
c000eab9:	e9 09 ff ff ff       	jmp    c000e9c7 <VAS::allocatePages(int, int)+0xb9>
c000eabe:	e8 93 5c 00 00       	call   c0014756 <thisCPU()>
c000eac3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eaca:	0f 84 5a ff ff ff    	je     c000ea2a <VAS::allocatePages(int, int)+0x11c>
c000ead0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000ead8:	e9 4d ff ff ff       	jmp    c000ea2a <VAS::allocatePages(int, int)+0x11c>
c000eadd:	90                   	nop

c000eade <VAS::setCPUSpecific(unsigned long)>:
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	6a 05                	push   0x5
c000eae3:	68 00 00 40 c2       	push   0xc2400000
c000eae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf0:	e8 19 fd ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000eaf5:	83 c4 1c             	add    esp,0x1c
c000eaf8:	c3                   	ret    
c000eaf9:	90                   	nop

c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eafa:	55                   	push   ebp
c000eafb:	57                   	push   edi
c000eafc:	56                   	push   esi
c000eafd:	53                   	push   ebx
c000eafe:	83 ec 1c             	sub    esp,0x1c
c000eb01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb05:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb09:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb0d:	e8 44 5c 00 00       	call   c0014756 <thisCPU()>
c000eb12:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb18:	83 e0 01             	and    eax,0x1
c000eb1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb23:	85 c0                	test   eax,eax
c000eb25:	7e 39                	jle    c000eb60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2b:	89 f3                	mov    ebx,esi
c000eb2d:	c1 e0 0c             	shl    eax,0xc
c000eb30:	01 f0                	add    eax,esi
c000eb32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb36:	55                   	push   ebp
c000eb37:	53                   	push   ebx
c000eb38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3c:	29 f0                	sub    eax,esi
c000eb3e:	01 d8                	add    eax,ebx
c000eb40:	50                   	push   eax
c000eb41:	57                   	push   edi
c000eb42:	e8 c7 fc ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb47:	83 c4 10             	add    esp,0x10
c000eb4a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb4f:	74 03                	je     c000eb54 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb54:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb5e:	75 d6                	jne    c000eb36 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb65:	74 42                	je     c000eba9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb67:	89 f3                	mov    ebx,esi
c000eb69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6d:	c1 eb 0a             	shr    ebx,0xa
c000eb70:	c1 e0 0c             	shl    eax,0xc
c000eb73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb79:	01 f0                	add    eax,esi
c000eb7b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb81:	c1 e8 0a             	shr    eax,0xa
c000eb84:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb89:	2d 00 00 40 00       	sub    eax,0x400000
c000eb8e:	39 c3                	cmp    ebx,eax
c000eb90:	77 0d                	ja     c000eb9f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb95:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb9b:	39 d8                	cmp    eax,ebx
c000eb9d:	73 f3                	jae    c000eb92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eb9f:	83 c4 1c             	add    esp,0x1c
c000eba2:	89 f0                	mov    eax,esi
c000eba4:	5b                   	pop    ebx
c000eba5:	5e                   	pop    esi
c000eba6:	5f                   	pop    edi
c000eba7:	5d                   	pop    ebp
c000eba8:	c3                   	ret    
c000eba9:	e8 d7 08 01 00       	call   c001f485 <CPU::readCR3()>
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	50                   	push   eax
c000ebb2:	e8 e0 08 01 00       	call   c001f497 <CPU::writeCR3(unsigned long)>
c000ebb7:	89 f0                	mov    eax,esi
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	83 c4 1c             	add    esp,0x1c
c000ebbf:	5b                   	pop    ebx
c000ebc0:	5e                   	pop    esi
c000ebc1:	5f                   	pop    edi
c000ebc2:	5d                   	pop    ebp
c000ebc3:	c3                   	ret    

c000ebc4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebc4:	55                   	push   ebp
c000ebc5:	57                   	push   edi
c000ebc6:	56                   	push   esi
c000ebc7:	53                   	push   ebx
c000ebc8:	83 ec 1c             	sub    esp,0x1c
c000ebcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebcf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebd3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ebd7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebdb:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebe0:	75 4a                	jne    c000ec2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ebe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebe6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebe9:	c1 eb 16             	shr    ebx,0x16
c000ebec:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebf3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebf7:	74 4d                	je     c000ec46 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ebf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebfd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec01:	c1 e8 0a             	shr    eax,0xa
c000ec04:	80 fa 01             	cmp    dl,0x1
c000ec07:	19 d2                	sbb    edx,edx
c000ec09:	c1 e3 0c             	shl    ebx,0xc
c000ec0c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000ec10:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec16:	25 fc 0f 00 00       	and    eax,0xffc
c000ec1b:	01 d8                	add    eax,ebx
c000ec1d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec24:	83 c4 1c             	add    esp,0x1c
c000ec27:	5b                   	pop    ebx
c000ec28:	5e                   	pop    esi
c000ec29:	5f                   	pop    edi
c000ec2a:	5d                   	pop    ebp
c000ec2b:	c3                   	ret    
c000ec2c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	68 1c 14 02 c0       	push   0xc002141c
c000ec38:	e8 9b 6c 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec44:	eb 9c                	jmp    c000ebe2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ec46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec4a:	e8 77 d9 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000ec4f:	89 c5                	mov    ebp,eax
c000ec51:	e8 75 f6 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ec56:	83 ec 0c             	sub    esp,0xc
c000ec59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec5d:	6a 01                	push   0x1
c000ec5f:	e8 d7 f4 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c000ec64:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec6b:	6a 01                	push   0x1
c000ec6d:	50                   	push   eax
c000ec6e:	55                   	push   ebp
c000ec6f:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec75:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec79:	51                   	push   ecx
c000ec7a:	e8 7b fe ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec7f:	83 c4 1c             	add    esp,0x1c
c000ec82:	68 00 10 00 00       	push   0x1000
c000ec87:	6a 00                	push   0x0
c000ec89:	50                   	push   eax
c000ec8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec8e:	e8 27 1a ff ff       	call   c00006ba <memset>
c000ec93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec97:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ec9a:	e8 f6 f7 ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c000ec9f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eca8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecac:	e9 48 ff ff ff       	jmp    c000ebf9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ecb1:	90                   	nop

c000ecb2 <VAS::VAS(bool)>:
c000ecb2:	53                   	push   ebx
c000ecb3:	83 ec 28             	sub    esp,0x28
c000ecb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eccd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecd1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecd4:	e8 ed d8 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000ecd9:	89 c2                	mov    edx,eax
c000ecdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ece2:	e8 e4 f5 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ece7:	89 c3                	mov    ebx,eax
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	6a 01                	push   0x1
c000ecee:	e8 48 f4 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c000ecf3:	83 c4 10             	add    esp,0x10
c000ecf6:	89 c2                	mov    edx,eax
c000ecf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecfc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ecff:	83 ec 0c             	sub    esp,0xc
c000ed02:	6a 03                	push   0x3
c000ed04:	6a 01                	push   0x1
c000ed06:	52                   	push   edx
c000ed07:	50                   	push   eax
c000ed08:	53                   	push   ebx
c000ed09:	e8 ec fd ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed0e:	83 c4 20             	add    esp,0x20
c000ed11:	89 c2                	mov    edx,eax
c000ed13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed17:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed1a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed22:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed2a:	7f 1c                	jg     c000ed48 <VAS::VAS(bool)+0x96>
c000ed2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed37:	c1 e2 02             	shl    edx,0x2
c000ed3a:	01 d0                	add    eax,edx
c000ed3c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed42:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed46:	eb da                	jmp    c000ed22 <VAS::VAS(bool)+0x70>
c000ed48:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed50:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed58:	7f 71                	jg     c000edcb <VAS::VAS(bool)+0x119>
c000ed5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed5e:	2d 00 02 00 00       	sub    eax,0x200
c000ed63:	c1 e0 0c             	shl    eax,0xc
c000ed66:	83 c8 03             	or     eax,0x3
c000ed69:	89 c3                	mov    ebx,eax
c000ed6b:	e8 e6 59 00 00       	call   c0014756 <thisCPU()>
c000ed70:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed76:	83 e0 10             	and    eax,0x10
c000ed79:	84 c0                	test   al,al
c000ed7b:	74 07                	je     c000ed84 <VAS::VAS(bool)+0xd2>
c000ed7d:	b8 00 01 00 00       	mov    eax,0x100
c000ed82:	eb 05                	jmp    c000ed89 <VAS::VAS(bool)+0xd7>
c000ed84:	b8 00 00 00 00       	mov    eax,0x0
c000ed89:	09 d8                	or     eax,ebx
c000ed8b:	89 c1                	mov    ecx,eax
c000ed8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed98:	c1 e2 02             	shl    edx,0x2
c000ed9b:	01 d0                	add    eax,edx
c000ed9d:	89 ca                	mov    edx,ecx
c000ed9f:	89 10                	mov    DWORD PTR [eax],edx
c000eda1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eda5:	2d 40 03 00 00       	sub    eax,0x340
c000edaa:	83 f8 7f             	cmp    eax,0x7f
c000edad:	77 16                	ja     c000edc5 <VAS::VAS(bool)+0x113>
c000edaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edba:	c1 e2 02             	shl    edx,0x2
c000edbd:	01 d0                	add    eax,edx
c000edbf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edc5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edc9:	eb 85                	jmp    c000ed50 <VAS::VAS(bool)+0x9e>
c000edcb:	e8 86 59 00 00       	call   c0014756 <thisCPU()>
c000edd0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edd6:	83 e0 10             	and    eax,0x10
c000edd9:	84 c0                	test   al,al
c000eddb:	74 07                	je     c000ede4 <VAS::VAS(bool)+0x132>
c000eddd:	b8 03 41 00 00       	mov    eax,0x4103
c000ede2:	eb 05                	jmp    c000ede9 <VAS::VAS(bool)+0x137>
c000ede4:	b8 03 40 00 00       	mov    eax,0x4003
c000ede9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eded:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edf0:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edf6:	89 02                	mov    DWORD PTR [edx],eax
c000edf8:	e8 59 59 00 00       	call   c0014756 <thisCPU()>
c000edfd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee03:	83 ec 08             	sub    esp,0x8
c000ee06:	50                   	push   eax
c000ee07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee0b:	e8 ce fc ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c000ee10:	83 c4 10             	add    esp,0x10
c000ee13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee17:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee1a:	e8 37 59 00 00       	call   c0014756 <thisCPU()>
c000ee1f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee25:	83 e0 10             	and    eax,0x10
c000ee28:	84 c0                	test   al,al
c000ee2a:	74 07                	je     c000ee33 <VAS::VAS(bool)+0x181>
c000ee2c:	b8 00 01 00 00       	mov    eax,0x100
c000ee31:	eb 05                	jmp    c000ee38 <VAS::VAS(bool)+0x186>
c000ee33:	b8 00 00 00 00       	mov    eax,0x0
c000ee38:	09 d8                	or     eax,ebx
c000ee3a:	89 c2                	mov    edx,eax
c000ee3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee43:	05 fc 0f 00 00       	add    eax,0xffc
c000ee48:	83 ca 03             	or     edx,0x3
c000ee4b:	89 10                	mov    DWORD PTR [eax],edx
c000ee4d:	e8 04 59 00 00       	call   c0014756 <thisCPU()>
c000ee52:	83 ec 0c             	sub    esp,0xc
c000ee55:	50                   	push   eax
c000ee56:	e8 9f 19 00 00       	call   c00107fa <Device::getName()>
c000ee5b:	83 c4 10             	add    esp,0x10
c000ee5e:	83 ec 08             	sub    esp,0x8
c000ee61:	68 1b 15 02 c0       	push   0xc002151b
c000ee66:	50                   	push   eax
c000ee67:	e8 3e 19 ff ff       	call   c00007aa <strcmp>
c000ee6c:	83 c4 10             	add    esp,0x10
c000ee6f:	85 c0                	test   eax,eax
c000ee71:	0f 94 c0             	sete   al
c000ee74:	84 c0                	test   al,al
c000ee76:	74 64                	je     c000eedc <VAS::VAS(bool)+0x22a>
c000ee78:	e8 92 99 00 00       	call   c001880f <disableIRQs()>
c000ee7d:	e8 d4 58 00 00       	call   c0014756 <thisCPU()>
c000ee82:	05 7c 09 00 00       	add    eax,0x97c
c000ee87:	83 ec 0c             	sub    esp,0xc
c000ee8a:	50                   	push   eax
c000ee8b:	e8 fe cb ff ff       	call   c000ba8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee98:	89 c3                	mov    ebx,eax
c000ee9a:	e8 b7 58 00 00       	call   c0014756 <thisCPU()>
c000ee9f:	05 7c 09 00 00       	add    eax,0x97c
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	50                   	push   eax
c000eea8:	e8 e1 cb ff ff       	call   c000ba8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	83 ec 08             	sub    esp,0x8
c000eeb3:	50                   	push   eax
c000eeb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eeb8:	e8 b9 f5 ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c000eebd:	83 c4 10             	add    esp,0x10
c000eec0:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eec7:	6a 11                	push   0x11
c000eec9:	53                   	push   ebx
c000eeca:	50                   	push   eax
c000eecb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eecf:	e8 3a f9 ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c000eed4:	83 c4 10             	add    esp,0x10
c000eed7:	e8 41 99 00 00       	call   c001881d <enableIRQs()>
c000eedc:	90                   	nop
c000eedd:	83 c4 28             	add    esp,0x28
c000eee0:	5b                   	pop    ebx
c000eee1:	c3                   	ret    

c000eee2 <mapVASFirstTime>:
c000eee2:	55                   	push   ebp
c000eee3:	57                   	push   edi
c000eee4:	56                   	push   esi
c000eee5:	53                   	push   ebx
c000eee6:	83 ec 0c             	sub    esp,0xc
c000eee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eeee:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eef1:	4a                   	dec    edx
c000eef2:	0f 84 99 00 00 00    	je     c000ef91 <mapVASFirstTime+0xaf>
c000eef8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eefb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eefe:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef03:	c1 e5 15             	shl    ebp,0x15
c000ef06:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef0b:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef11:	29 eb                	sub    ebx,ebp
c000ef13:	29 ee                	sub    esi,ebp
c000ef15:	e8 ac d6 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000ef1a:	83 ec 0c             	sub    esp,0xc
c000ef1d:	68 03 04 00 00       	push   0x403
c000ef22:	6a 01                	push   0x1
c000ef24:	53                   	push   ebx
c000ef25:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef2b:	50                   	push   eax
c000ef2c:	57                   	push   edi
c000ef2d:	e8 c8 fb ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef32:	83 c4 20             	add    esp,0x20
c000ef35:	39 f3                	cmp    ebx,esi
c000ef37:	75 dc                	jne    c000ef15 <mapVASFirstTime+0x33>
c000ef39:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef3e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef43:	29 ee                	sub    esi,ebp
c000ef45:	29 e8                	sub    eax,ebp
c000ef47:	89 c5                	mov    ebp,eax
c000ef49:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef4d:	19 db                	sbb    ebx,ebx
c000ef4f:	e8 72 d6 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c000ef54:	83 e3 04             	and    ebx,0x4
c000ef57:	83 ec 0c             	sub    esp,0xc
c000ef5a:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef60:	53                   	push   ebx
c000ef61:	6a 01                	push   0x1
c000ef63:	56                   	push   esi
c000ef64:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef6a:	50                   	push   eax
c000ef6b:	57                   	push   edi
c000ef6c:	e8 89 fb ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef71:	83 c4 20             	add    esp,0x20
c000ef74:	39 f5                	cmp    ebp,esi
c000ef76:	75 d1                	jne    c000ef49 <mapVASFirstTime+0x67>
c000ef78:	e8 08 05 01 00       	call   c001f485 <CPU::readCR3()>
c000ef7d:	83 ec 0c             	sub    esp,0xc
c000ef80:	50                   	push   eax
c000ef81:	e8 11 05 01 00       	call   c001f497 <CPU::writeCR3(unsigned long)>
c000ef86:	83 c4 10             	add    esp,0x10
c000ef89:	83 c4 0c             	add    esp,0xc
c000ef8c:	5b                   	pop    ebx
c000ef8d:	5e                   	pop    esi
c000ef8e:	5f                   	pop    edi
c000ef8f:	5d                   	pop    ebp
c000ef90:	c3                   	ret    
c000ef91:	83 ec 0c             	sub    esp,0xc
c000ef94:	68 29 15 02 c0       	push   0xc0021529
c000ef99:	e8 6f 01 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	83 c4 0c             	add    esp,0xc
c000efa4:	5b                   	pop    ebx
c000efa5:	5e                   	pop    esi
c000efa6:	5f                   	pop    edi
c000efa7:	5d                   	pop    ebp
c000efa8:	c3                   	ret    

c000efa9 <__cxa_atexit>:
c000efa9:	31 c0                	xor    eax,eax
c000efab:	c3                   	ret    

c000efac <__cxa_finalize>:
c000efac:	c3                   	ret    

c000efad <__stack_chk_fail>:
c000efad:	55                   	push   ebp
c000efae:	89 e5                	mov    ebp,esp
c000efb0:	83 ec 10             	sub    esp,0x10
c000efb3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efb6:	68 42 15 02 c0       	push   0xc0021542
c000efbb:	e8 4d 01 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000efc0:	58                   	pop    eax
c000efc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc4:	5a                   	pop    edx
c000efc5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efc8:	68 42 15 02 c0       	push   0xc0021542
c000efcd:	e8 3b 01 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000efd2:	59                   	pop    ecx
c000efd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efd6:	5a                   	pop    edx
c000efd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000efd9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efdc:	68 42 15 02 c0       	push   0xc0021542
c000efe1:	e8 27 01 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000efe6:	59                   	pop    ecx
c000efe7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efea:	5a                   	pop    edx
c000efeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efed:	8b 00                	mov    eax,DWORD PTR [eax]
c000efef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff2:	68 42 15 02 c0       	push   0xc0021542
c000eff7:	e8 11 01 00 00       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c000effc:	c7 04 24 4a 15 02 c0 	mov    DWORD PTR [esp],0xc002154a
c000f003:	e8 d0 68 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000f008:	83 c4 10             	add    esp,0x10
c000f00b:	c9                   	leave  
c000f00c:	c3                   	ret    

c000f00d <__cxa_pure_virtual>:
c000f00d:	83 ec 18             	sub    esp,0x18
c000f010:	68 62 15 02 c0       	push   0xc0021562
c000f015:	e8 be 68 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c000f01a:	83 c4 1c             	add    esp,0x1c
c000f01d:	c3                   	ret    

c000f01e <operator new(unsigned long)>:
c000f01e:	e9 f9 cf ff ff       	jmp    c000c01c <malloc>

c000f023 <operator new[](unsigned long)>:
c000f023:	e9 f4 cf ff ff       	jmp    c000c01c <malloc>

c000f028 <operator delete(void*)>:
c000f028:	e9 0f d0 ff ff       	jmp    c000c03c <rfree>

c000f02d <operator delete(void*, unsigned long)>:
c000f02d:	e9 0a d0 ff ff       	jmp    c000c03c <rfree>

c000f032 <operator delete[](void*)>:
c000f032:	e9 05 d0 ff ff       	jmp    c000c03c <rfree>

c000f037 <operator delete[](void*, unsigned long)>:
c000f037:	e9 00 d0 ff ff       	jmp    c000c03c <rfree>

c000f03c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f03c:	57                   	push   edi
c000f03d:	b9 3f 00 00 00       	mov    ecx,0x3f
c000f042:	56                   	push   esi
c000f043:	be 78 15 02 c0       	mov    esi,0xc0021578
c000f048:	53                   	push   ebx
c000f049:	83 ec 40             	sub    esp,0x40
c000f04c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f050:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000f054:	fc                   	cld    
c000f055:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f057:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f05b:	83 f9 3e             	cmp    ecx,0x3e
c000f05e:	7e 05                	jle    c000f065 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000f060:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f065:	89 df                	mov    edi,ebx
c000f067:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f06b:	eb 02                	jmp    c000f06f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000f06d:	89 c7                	mov    edi,eax
c000f06f:	31 d2                	xor    edx,edx
c000f071:	46                   	inc    esi
c000f072:	89 f8                	mov    eax,edi
c000f074:	f7 f1                	div    ecx
c000f076:	39 cf                	cmp    edi,ecx
c000f078:	73 f3                	jae    c000f06d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000f07a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f07d:	eb 02                	jmp    c000f081 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000f07f:	89 c3                	mov    ebx,eax
c000f081:	31 d2                	xor    edx,edx
c000f083:	4e                   	dec    esi
c000f084:	89 d8                	mov    eax,ebx
c000f086:	f7 f1                	div    ecx
c000f088:	39 cb                	cmp    ebx,ecx
c000f08a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f08e:	88 16                	mov    BYTE PTR [esi],dl
c000f090:	73 ed                	jae    c000f07f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000f092:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f096:	83 c4 40             	add    esp,0x40
c000f099:	5b                   	pop    ebx
c000f09a:	5e                   	pop    esi
c000f09b:	5f                   	pop    edi
c000f09c:	c3                   	ret    

c000f09d <Dbg::logc(char)>:
c000f09d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a1:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0a6:	ec                   	in     al,dx
c000f0a7:	a8 20                	test   al,0x20
c000f0a9:	74 fb                	je     c000f0a6 <Dbg::logc(char)+0x9>
c000f0ab:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0b0:	88 c8                	mov    al,cl
c000f0b2:	ee                   	out    dx,al
c000f0b3:	c3                   	ret    

c000f0b4 <Dbg::logs(char*)>:
c000f0b4:	53                   	push   ebx
c000f0b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0bc:	84 c0                	test   al,al
c000f0be:	74 0f                	je     c000f0cf <Dbg::logs(char*)+0x1b>
c000f0c0:	50                   	push   eax
c000f0c1:	43                   	inc    ebx
c000f0c2:	e8 d6 ff ff ff       	call   c000f09d <Dbg::logc(char)>
c000f0c7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0ca:	5a                   	pop    edx
c000f0cb:	84 c0                	test   al,al
c000f0cd:	75 f1                	jne    c000f0c0 <Dbg::logs(char*)+0xc>
c000f0cf:	5b                   	pop    ebx
c000f0d0:	c3                   	ret    

c000f0d1 <Dbg::logWriteInt(unsigned int)>:
c000f0d1:	83 ec 10             	sub    esp,0x10
c000f0d4:	6a 0a                	push   0xa
c000f0d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0da:	50                   	push   eax
c000f0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0df:	e8 58 ff ff ff       	call   c000f03c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f0e4:	50                   	push   eax
c000f0e5:	e8 ca ff ff ff       	call   c000f0b4 <Dbg::logs(char*)>
c000f0ea:	83 c4 20             	add    esp,0x20
c000f0ed:	c3                   	ret    

c000f0ee <Dbg::logWriteIntBase(unsigned int, int)>:
c000f0ee:	83 ec 10             	sub    esp,0x10
c000f0f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0f9:	50                   	push   eax
c000f0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0fe:	e8 39 ff ff ff       	call   c000f03c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f103:	50                   	push   eax
c000f104:	e8 ab ff ff ff       	call   c000f0b4 <Dbg::logs(char*)>
c000f109:	83 c4 20             	add    esp,0x20
c000f10c:	c3                   	ret    

c000f10d <Dbg::kprintf(char const*, ...)>:
c000f10d:	55                   	push   ebp
c000f10e:	57                   	push   edi
c000f10f:	56                   	push   esi
c000f110:	53                   	push   ebx
c000f111:	83 ec 0c             	sub    esp,0xc
c000f114:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f118:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f11c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f120:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f123:	84 c0                	test   al,al
c000f125:	74 4a                	je     c000f171 <Dbg::kprintf(char const*, ...)+0x64>
c000f127:	31 db                	xor    ebx,ebx
c000f129:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f12c:	3c 25                	cmp    al,0x25
c000f12e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f131:	0f 85 e4 00 00 00    	jne    c000f21b <Dbg::kprintf(char const*, ...)+0x10e>
c000f137:	83 c3 02             	add    ebx,0x2
c000f13a:	8a 07                	mov    al,BYTE PTR [edi]
c000f13c:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f13f:	83 e8 25             	sub    eax,0x25
c000f142:	3c 53                	cmp    al,0x53
c000f144:	0f 87 ba 00 00 00    	ja     c000f204 <Dbg::kprintf(char const*, ...)+0xf7>
c000f14a:	0f b6 c0             	movzx  eax,al
c000f14d:	ff 24 85 b8 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdea48]
c000f154:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f158:	89 c8                	mov    eax,ecx
c000f15a:	83 c1 04             	add    ecx,0x4
c000f15d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f161:	ff 30                	push   DWORD PTR [eax]
c000f163:	e8 4c ff ff ff       	call   c000f0b4 <Dbg::logs(char*)>
c000f168:	58                   	pop    eax
c000f169:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f16d:	84 c0                	test   al,al
c000f16f:	75 b8                	jne    c000f129 <Dbg::kprintf(char const*, ...)+0x1c>
c000f171:	83 c4 0c             	add    esp,0xc
c000f174:	5b                   	pop    ebx
c000f175:	5e                   	pop    esi
c000f176:	5f                   	pop    edi
c000f177:	5d                   	pop    ebp
c000f178:	c3                   	ret    
c000f179:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f17d:	89 d0                	mov    eax,edx
c000f17f:	83 c2 04             	add    edx,0x4
c000f182:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f186:	ff 30                	push   DWORD PTR [eax]
c000f188:	e8 44 ff ff ff       	call   c000f0d1 <Dbg::logWriteInt(unsigned int)>
c000f18d:	58                   	pop    eax
c000f18e:	eb d9                	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f190:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f194:	89 d0                	mov    eax,edx
c000f196:	83 c2 04             	add    edx,0x4
c000f199:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f19c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1a0:	50                   	push   eax
c000f1a1:	e8 f7 fe ff ff       	call   c000f09d <Dbg::logc(char)>
c000f1a6:	58                   	pop    eax
c000f1a7:	eb c0                	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1ad:	89 c8                	mov    eax,ecx
c000f1af:	83 c1 04             	add    ecx,0x4
c000f1b2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b6:	ff 30                	push   DWORD PTR [eax]
c000f1b8:	e8 14 ff ff ff       	call   c000f0d1 <Dbg::logWriteInt(unsigned int)>
c000f1bd:	5f                   	pop    edi
c000f1be:	eb a9                	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1c4:	89 c8                	mov    eax,ecx
c000f1c6:	83 c1 04             	add    ecx,0x4
c000f1c9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1cd:	6a 10                	push   0x10
c000f1cf:	ff 30                	push   DWORD PTR [eax]
c000f1d1:	e8 18 ff ff ff       	call   c000f0ee <Dbg::logWriteIntBase(unsigned int, int)>
c000f1d6:	59                   	pop    ecx
c000f1d7:	5f                   	pop    edi
c000f1d8:	eb 8f                	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1de:	89 d0                	mov    eax,edx
c000f1e0:	83 c2 08             	add    edx,0x8
c000f1e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1e7:	6a 10                	push   0x10
c000f1e9:	ff 30                	push   DWORD PTR [eax]
c000f1eb:	e8 fe fe ff ff       	call   c000f0ee <Dbg::logWriteIntBase(unsigned int, int)>
c000f1f0:	58                   	pop    eax
c000f1f1:	5a                   	pop    edx
c000f1f2:	e9 72 ff ff ff       	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1f7:	6a 25                	push   0x25
c000f1f9:	e8 9f fe ff ff       	call   c000f09d <Dbg::logc(char)>
c000f1fe:	58                   	pop    eax
c000f1ff:	e9 65 ff ff ff       	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f204:	6a 25                	push   0x25
c000f206:	e8 92 fe ff ff       	call   c000f09d <Dbg::logc(char)>
c000f20b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f20e:	50                   	push   eax
c000f20f:	e8 89 fe ff ff       	call   c000f09d <Dbg::logc(char)>
c000f214:	5a                   	pop    edx
c000f215:	59                   	pop    ecx
c000f216:	e9 4e ff ff ff       	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f21b:	50                   	push   eax
c000f21c:	89 eb                	mov    ebx,ebp
c000f21e:	e8 7a fe ff ff       	call   c000f09d <Dbg::logc(char)>
c000f223:	89 fd                	mov    ebp,edi
c000f225:	58                   	pop    eax
c000f226:	e9 3e ff ff ff       	jmp    c000f169 <Dbg::kprintf(char const*, ...)+0x5c>
c000f22b:	90                   	nop

c000f22c <File::read(unsigned long long, void*, int*)>:
c000f22c:	53                   	push   ebx
c000f22d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f235:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f23c:	3c 19                	cmp    al,0x19
c000f23e:	77 35                	ja     c000f275 <File::read(unsigned long long, void*, int*)+0x49>
c000f240:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c000f247:	85 c0                	test   eax,eax
c000f249:	74 2a                	je     c000f275 <File::read(unsigned long long, void*, int*)+0x49>
c000f24b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f251:	85 c0                	test   eax,eax
c000f253:	74 20                	je     c000f275 <File::read(unsigned long long, void*, int*)+0x49>
c000f255:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f259:	74 21                	je     c000f27c <File::read(unsigned long long, void*, int*)+0x50>
c000f25b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f25d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f261:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f26b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f26f:	5b                   	pop    ebx
c000f270:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f273:	ff e0                	jmp    eax
c000f275:	b8 0b 00 00 00       	mov    eax,0xb
c000f27a:	eb 05                	jmp    c000f281 <File::read(unsigned long long, void*, int*)+0x55>
c000f27c:	b8 05 00 00 00       	mov    eax,0x5
c000f281:	5b                   	pop    ebx
c000f282:	c3                   	ret    
c000f283:	90                   	nop

c000f284 <File::write(unsigned long long, void*, int*)>:
c000f284:	53                   	push   ebx
c000f285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f289:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f28d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f294:	3c 19                	cmp    al,0x19
c000f296:	77 35                	ja     c000f2cd <File::write(unsigned long long, void*, int*)+0x49>
c000f298:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c000f29f:	85 c0                	test   eax,eax
c000f2a1:	74 2a                	je     c000f2cd <File::write(unsigned long long, void*, int*)+0x49>
c000f2a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a9:	85 c0                	test   eax,eax
c000f2ab:	74 20                	je     c000f2cd <File::write(unsigned long long, void*, int*)+0x49>
c000f2ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2b1:	74 21                	je     c000f2d4 <File::write(unsigned long long, void*, int*)+0x50>
c000f2b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c7:	5b                   	pop    ebx
c000f2c8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2cb:	ff e0                	jmp    eax
c000f2cd:	b8 0b 00 00 00       	mov    eax,0xb
c000f2d2:	eb 05                	jmp    c000f2d9 <File::write(unsigned long long, void*, int*)+0x55>
c000f2d4:	b8 05 00 00 00       	mov    eax,0x5
c000f2d9:	5b                   	pop    ebx
c000f2da:	c3                   	ret    
c000f2db:	90                   	nop

c000f2dc <Directory::read(unsigned long long, void*, int*)>:
c000f2dc:	53                   	push   ebx
c000f2dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2e5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2ec:	3c 19                	cmp    al,0x19
c000f2ee:	77 35                	ja     c000f325 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2f0:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c000f2f7:	85 c0                	test   eax,eax
c000f2f9:	74 2a                	je     c000f325 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f301:	85 c0                	test   eax,eax
c000f303:	74 20                	je     c000f325 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f305:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f309:	74 21                	je     c000f32c <Directory::read(unsigned long long, void*, int*)+0x50>
c000f30b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f30d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f311:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f317:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f31b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f31f:	5b                   	pop    ebx
c000f320:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f323:	ff e0                	jmp    eax
c000f325:	b8 0b 00 00 00       	mov    eax,0xb
c000f32a:	eb 05                	jmp    c000f331 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f32c:	b8 05 00 00 00       	mov    eax,0x5
c000f331:	5b                   	pop    ebx
c000f332:	c3                   	ret    
c000f333:	90                   	nop

c000f334 <Directory::write(unsigned long long, void*, int*)>:
c000f334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f338:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f33f:	b8 0b 00 00 00       	mov    eax,0xb
c000f344:	80 fa 19             	cmp    dl,0x19
c000f347:	77 18                	ja     c000f361 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f349:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000f350:	85 d2                	test   edx,edx
c000f352:	74 0d                	je     c000f361 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f354:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f35b:	19 c0                	sbb    eax,eax
c000f35d:	83 e0 0a             	and    eax,0xa
c000f360:	40                   	inc    eax
c000f361:	c3                   	ret    

c000f362 <File::isAtty()>:
c000f362:	31 c0                	xor    eax,eax
c000f364:	c3                   	ret    
c000f365:	90                   	nop

c000f366 <Directory::isAtty()>:
c000f366:	31 c0                	xor    eax,eax
c000f368:	c3                   	ret    
c000f369:	90                   	nop

c000f36a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f36a:	b8 0a 00 00 00       	mov    eax,0xa
c000f36f:	c3                   	ret    

c000f370 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f370:	b8 0a 00 00 00       	mov    eax,0xa
c000f375:	c3                   	ret    

c000f376 <File::~File()>:
c000f376:	83 ec 0c             	sub    esp,0xc
c000f379:	ba 74 17 02 c0       	mov    edx,0xc0021774
c000f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f382:	89 10                	mov    DWORD PTR [eax],edx
c000f384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f388:	83 ec 0c             	sub    esp,0xc
c000f38b:	50                   	push   eax
c000f38c:	e8 49 eb ff ff       	call   c000deda <UnixFile::~UnixFile()>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	90                   	nop
c000f395:	83 c4 0c             	add    esp,0xc
c000f398:	c3                   	ret    
c000f399:	90                   	nop

c000f39a <File::~File()>:
c000f39a:	83 ec 0c             	sub    esp,0xc
c000f39d:	83 ec 0c             	sub    esp,0xc
c000f3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3a4:	e8 cd ff ff ff       	call   c000f376 <File::~File()>
c000f3a9:	83 c4 10             	add    esp,0x10
c000f3ac:	83 ec 08             	sub    esp,0x8
c000f3af:	68 14 01 00 00       	push   0x114
c000f3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3b8:	e8 70 fc ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	83 c4 0c             	add    esp,0xc
c000f3c3:	c3                   	ret    

c000f3c4 <Directory::~Directory()>:
c000f3c4:	83 ec 0c             	sub    esp,0xc
c000f3c7:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d0:	89 10                	mov    DWORD PTR [eax],edx
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	83 ec 0c             	sub    esp,0xc
c000f3d9:	50                   	push   eax
c000f3da:	e8 fb ea ff ff       	call   c000deda <UnixFile::~UnixFile()>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	90                   	nop
c000f3e3:	83 c4 0c             	add    esp,0xc
c000f3e6:	c3                   	ret    
c000f3e7:	90                   	nop

c000f3e8 <Directory::~Directory()>:
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	83 ec 0c             	sub    esp,0xc
c000f3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f2:	e8 cd ff ff ff       	call   c000f3c4 <Directory::~Directory()>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	83 ec 08             	sub    esp,0x8
c000f3fd:	68 14 01 00 00       	push   0x114
c000f402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f406:	e8 22 fc ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	83 c4 0c             	add    esp,0xc
c000f411:	c3                   	ret    

c000f412 <Filesystem::Filesystem()>:
c000f412:	ba 10 17 02 c0       	mov    edx,0xc0021710
c000f417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f41b:	89 10                	mov    DWORD PTR [eax],edx
c000f41d:	8b 15 c8 44 02 c0    	mov    edx,DWORD PTR ds:0xc00244c8
c000f423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f427:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f42e:	a3 c8 44 02 c0       	mov    ds:0xc00244c8,eax
c000f433:	90                   	nop
c000f434:	c3                   	ret    
c000f435:	90                   	nop

c000f436 <Filesystem::~Filesystem()>:
c000f436:	ba 10 17 02 c0       	mov    edx,0xc0021710
c000f43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f43f:	89 10                	mov    DWORD PTR [eax],edx
c000f441:	90                   	nop
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <Filesystem::~Filesystem()>:
c000f444:	83 ec 0c             	sub    esp,0xc
c000f447:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f44b:	e8 e6 ff ff ff       	call   c000f436 <Filesystem::~Filesystem()>
c000f450:	83 c4 04             	add    esp,0x4
c000f453:	83 ec 08             	sub    esp,0x8
c000f456:	6a 08                	push   0x8
c000f458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45c:	e8 cc fb ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	83 c4 0c             	add    esp,0xc
c000f467:	c3                   	ret    

c000f468 <initVFS()>:
c000f468:	83 ec 18             	sub    esp,0x18
c000f46b:	6a 08                	push   0x8
c000f46d:	e8 ac fb ff ff       	call   c000f01e <operator new(unsigned long)>
c000f472:	89 04 24             	mov    DWORD PTR [esp],eax
c000f475:	e8 94 b2 00 00       	call   c001a70e <FAT::FAT()>
c000f47a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f481:	e8 98 fb ff ff       	call   c000f01e <operator new(unsigned long)>
c000f486:	89 04 24             	mov    DWORD PTR [esp],eax
c000f489:	e8 f6 c4 00 00       	call   c001b984 <ISO9660::ISO9660()>
c000f48e:	83 c4 1c             	add    esp,0x1c
c000f491:	c3                   	ret    

c000f492 <standardiseFiles(char*, char const*, char const*)>:
c000f492:	55                   	push   ebp
c000f493:	57                   	push   edi
c000f494:	56                   	push   esi
c000f495:	53                   	push   ebx
c000f496:	81 ec 10 04 00 00    	sub    esp,0x410
c000f49c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4a3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4aa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4b1:	68 00 04 00 00       	push   0x400
c000f4b6:	6a 00                	push   0x0
c000f4b8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4bc:	56                   	push   esi
c000f4bd:	e8 f8 11 ff ff       	call   c00006ba <memset>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4c9:	75 0b                	jne    c000f4d6 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4cb:	50                   	push   eax
c000f4cc:	50                   	push   eax
c000f4cd:	57                   	push   edi
c000f4ce:	56                   	push   esi
c000f4cf:	e8 85 12 ff ff       	call   c0000759 <strcpy>
c000f4d4:	eb 41                	jmp    c000f517 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f4d6:	8a 07                	mov    al,BYTE PTR [edi]
c000f4d8:	3c 5c                	cmp    al,0x5c
c000f4da:	74 04                	je     c000f4e0 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f4dc:	3c 2f                	cmp    al,0x2f
c000f4de:	75 18                	jne    c000f4f8 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f4e0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f4e3:	3c 60                	cmp    al,0x60
c000f4e5:	7e 03                	jle    c000f4ea <standardiseFiles(char*, char const*, char const*)+0x58>
c000f4e7:	83 e8 20             	sub    eax,0x20
c000f4ea:	88 04 24             	mov    BYTE PTR [esp],al
c000f4ed:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f4f4:	50                   	push   eax
c000f4f5:	50                   	push   eax
c000f4f6:	eb 18                	jmp    c000f510 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f4f8:	50                   	push   eax
c000f4f9:	50                   	push   eax
c000f4fa:	55                   	push   ebp
c000f4fb:	56                   	push   esi
c000f4fc:	e8 58 12 ff ff       	call   c0000759 <strcpy>
c000f501:	5a                   	pop    edx
c000f502:	59                   	pop    ecx
c000f503:	68 34 2a 02 c0       	push   0xc0022a34
c000f508:	56                   	push   esi
c000f509:	e8 02 13 ff ff       	call   c0000810 <strcat>
c000f50e:	5d                   	pop    ebp
c000f50f:	58                   	pop    eax
c000f510:	57                   	push   edi
c000f511:	56                   	push   esi
c000f512:	e8 f9 12 ff ff       	call   c0000810 <strcat>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f51d:	3c 60                	cmp    al,0x60
c000f51f:	7e 03                	jle    c000f524 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f521:	83 e8 20             	sub    eax,0x20
c000f524:	88 04 24             	mov    BYTE PTR [esp],al
c000f527:	88 03                	mov    BYTE PTR [ebx],al
c000f529:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f530:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f536:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f53a:	bf 03 00 00 00       	mov    edi,0x3
c000f53f:	b8 03 00 00 00       	mov    eax,0x3
c000f544:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f547:	84 d2                	test   dl,dl
c000f549:	0f 84 91 00 00 00    	je     c000f5e0 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f54f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f552:	80 fa 5c             	cmp    dl,0x5c
c000f555:	74 05                	je     c000f55c <standardiseFiles(char*, char const*, char const*)+0xca>
c000f557:	80 fa 2f             	cmp    dl,0x2f
c000f55a:	75 12                	jne    c000f56e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f55c:	89 c5                	mov    ebp,eax
c000f55e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f563:	74 09                	je     c000f56e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f565:	40                   	inc    eax
c000f566:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f56a:	89 cf                	mov    edi,ecx
c000f56c:	eb d6                	jmp    c000f544 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f56e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f573:	75 5b                	jne    c000f5d0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f575:	80 fa 2e             	cmp    dl,0x2e
c000f578:	75 56                	jne    c000f5d0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f57a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f57e:	74 19                	je     c000f599 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f580:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f585:	74 53                	je     c000f5da <standardiseFiles(char*, char const*, char const*)+0x148>
c000f587:	89 f9                	mov    ecx,edi
c000f589:	41                   	inc    ecx
c000f58a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f58d:	80 fa 2f             	cmp    dl,0x2f
c000f590:	74 f7                	je     c000f589 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f592:	80 fa 5c             	cmp    dl,0x5c
c000f595:	74 f2                	je     c000f589 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f597:	eb d1                	jmp    c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f599:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f59e:	74 3a                	je     c000f5da <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5a0:	83 f8 03             	cmp    eax,0x3
c000f5a3:	74 c5                	je     c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5a5:	41                   	inc    ecx
c000f5a6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5a9:	80 fa 2f             	cmp    dl,0x2f
c000f5ac:	74 f7                	je     c000f5a5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5ae:	80 fa 5c             	cmp    dl,0x5c
c000f5b1:	74 f2                	je     c000f5a5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5b3:	48                   	dec    eax
c000f5b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5b8:	75 06                	jne    c000f5c0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5be:	eb f3                	jmp    c000f5b3 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5c0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5c4:	74 07                	je     c000f5cd <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5ca:	48                   	dec    eax
c000f5cb:	eb f3                	jmp    c000f5c0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5cd:	40                   	inc    eax
c000f5ce:	eb 9a                	jmp    c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d0:	80 fa 2f             	cmp    dl,0x2f
c000f5d3:	74 95                	je     c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d5:	80 fa 5c             	cmp    dl,0x5c
c000f5d8:	74 90                	je     c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5da:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f5dd:	40                   	inc    eax
c000f5de:	eb 8a                	jmp    c000f56a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5e4:	83 ec 0c             	sub    esp,0xc
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 ea 10 ff ff       	call   c00006d7 <strlen>
c000f5ed:	83 c4 10             	add    esp,0x10
c000f5f0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f5f5:	75 26                	jne    c000f61d <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f5f7:	83 ec 0c             	sub    esp,0xc
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 d7 10 ff ff       	call   c00006d7 <strlen>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f608:	74 26                	je     c000f630 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f60a:	83 ec 0c             	sub    esp,0xc
c000f60d:	53                   	push   ebx
c000f60e:	e8 c4 10 ff ff       	call   c00006d7 <strlen>
c000f613:	83 c4 10             	add    esp,0x10
c000f616:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f61b:	eb c7                	jmp    c000f5e4 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f61d:	83 ec 0c             	sub    esp,0xc
c000f620:	53                   	push   ebx
c000f621:	e8 b1 10 ff ff       	call   c00006d7 <strlen>
c000f626:	83 c4 10             	add    esp,0x10
c000f629:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f62e:	74 c7                	je     c000f5f7 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f630:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f636:	5b                   	pop    ebx
c000f637:	5e                   	pop    esi
c000f638:	5f                   	pop    edi
c000f639:	5d                   	pop    ebp
c000f63a:	c3                   	ret    
c000f63b:	90                   	nop

c000f63c <File::File(char const*, Process*)>:
c000f63c:	83 ec 0c             	sub    esp,0xc
c000f63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f643:	83 ec 08             	sub    esp,0x8
c000f646:	6a 00                	push   0x0
c000f648:	50                   	push   eax
c000f649:	e8 ea e6 ff ff       	call   c000dd38 <UnixFile::UnixFile(int)>
c000f64e:	83 c4 10             	add    esp,0x10
c000f651:	ba 74 17 02 c0       	mov    edx,0xc0021774
c000f656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f65a:	89 10                	mov    DWORD PTR [eax],edx
c000f65c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f660:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66a:	83 c0 0d             	add    eax,0xd
c000f66d:	83 ec 04             	sub    esp,0x4
c000f670:	52                   	push   edx
c000f671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f675:	50                   	push   eax
c000f676:	e8 17 fe ff ff       	call   c000f492 <standardiseFiles(char*, char const*, char const*)>
c000f67b:	83 c4 10             	add    esp,0x10
c000f67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f682:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f685:	8d 50 bf             	lea    edx,[eax-0x41]
c000f688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f696:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f69a:	90                   	nop
c000f69b:	83 c4 0c             	add    esp,0xc
c000f69e:	c3                   	ret    
c000f69f:	90                   	nop

c000f6a0 <File::open(FileOpenMode)>:
c000f6a0:	53                   	push   ebx
c000f6a1:	b8 0b 00 00 00       	mov    eax,0xb
c000f6a6:	83 ec 08             	sub    esp,0x8
c000f6a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6ad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6b4:	80 fa 19             	cmp    dl,0x19
c000f6b7:	77 40                	ja     c000f6f9 <File::open(FileOpenMode)+0x59>
c000f6b9:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000f6c0:	85 d2                	test   edx,edx
c000f6c2:	74 35                	je     c000f6f9 <File::open(FileOpenMode)+0x59>
c000f6c4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6ca:	85 d2                	test   edx,edx
c000f6cc:	74 2b                	je     c000f6f9 <File::open(FileOpenMode)+0x59>
c000f6ce:	b8 06 00 00 00       	mov    eax,0x6
c000f6d3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f6d7:	75 20                	jne    c000f6f9 <File::open(FileOpenMode)+0x59>
c000f6d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6db:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6e5:	51                   	push   ecx
c000f6e6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f6e9:	51                   	push   ecx
c000f6ea:	52                   	push   edx
c000f6eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f6ee:	83 c4 10             	add    esp,0x10
c000f6f1:	85 c0                	test   eax,eax
c000f6f3:	75 04                	jne    c000f6f9 <File::open(FileOpenMode)+0x59>
c000f6f5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f6f9:	83 c4 08             	add    esp,0x8
c000f6fc:	5b                   	pop    ebx
c000f6fd:	c3                   	ret    

c000f6fe <File::close()>:
c000f6fe:	53                   	push   ebx
c000f6ff:	b8 0b 00 00 00       	mov    eax,0xb
c000f704:	83 ec 08             	sub    esp,0x8
c000f707:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f70b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f712:	80 fa 19             	cmp    dl,0x19
c000f715:	77 41                	ja     c000f758 <File::close()+0x5a>
c000f717:	8b 1c 95 60 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb6a0]
c000f71e:	85 db                	test   ebx,ebx
c000f720:	74 36                	je     c000f758 <File::close()+0x5a>
c000f722:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f729:	74 2d                	je     c000f758 <File::close()+0x5a>
c000f72b:	b8 05 00 00 00       	mov    eax,0x5
c000f730:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f734:	74 22                	je     c000f758 <File::close()+0x5a>
c000f736:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f73a:	8b 04 95 60 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb6a0]
c000f741:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f747:	53                   	push   ebx
c000f748:	53                   	push   ebx
c000f749:	8b 10                	mov    edx,DWORD PTR [eax]
c000f74b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f751:	50                   	push   eax
c000f752:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f755:	83 c4 10             	add    esp,0x10
c000f758:	83 c4 08             	add    esp,0x8
c000f75b:	5b                   	pop    ebx
c000f75c:	c3                   	ret    
c000f75d:	90                   	nop

c000f75e <File::seek(unsigned long long)>:
c000f75e:	56                   	push   esi
c000f75f:	53                   	push   ebx
c000f760:	b8 0b 00 00 00       	mov    eax,0xb
c000f765:	51                   	push   ecx
c000f766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f76e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f775:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f779:	80 fa 19             	cmp    dl,0x19
c000f77c:	77 31                	ja     c000f7af <File::seek(unsigned long long)+0x51>
c000f77e:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000f785:	85 d2                	test   edx,edx
c000f787:	74 26                	je     c000f7af <File::seek(unsigned long long)+0x51>
c000f789:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f78f:	85 d2                	test   edx,edx
c000f791:	74 1c                	je     c000f7af <File::seek(unsigned long long)+0x51>
c000f793:	b8 05 00 00 00       	mov    eax,0x5
c000f798:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f79c:	74 11                	je     c000f7af <File::seek(unsigned long long)+0x51>
c000f79e:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7a0:	53                   	push   ebx
c000f7a1:	51                   	push   ecx
c000f7a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7a8:	52                   	push   edx
c000f7a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7ac:	83 c4 10             	add    esp,0x10
c000f7af:	5a                   	pop    edx
c000f7b0:	5b                   	pop    ebx
c000f7b1:	5e                   	pop    esi
c000f7b2:	c3                   	ret    
c000f7b3:	90                   	nop

c000f7b4 <File::tell(unsigned long long*)>:
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	b8 0b 00 00 00       	mov    eax,0xb
c000f7bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7c7:	80 fa 19             	cmp    dl,0x19
c000f7ca:	77 34                	ja     c000f800 <File::tell(unsigned long long*)+0x4c>
c000f7cc:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000f7d3:	85 d2                	test   edx,edx
c000f7d5:	74 29                	je     c000f800 <File::tell(unsigned long long*)+0x4c>
c000f7d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7dd:	85 d2                	test   edx,edx
c000f7df:	74 1f                	je     c000f800 <File::tell(unsigned long long*)+0x4c>
c000f7e1:	b8 05 00 00 00       	mov    eax,0x5
c000f7e6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7ea:	74 14                	je     c000f800 <File::tell(unsigned long long*)+0x4c>
c000f7ec:	50                   	push   eax
c000f7ed:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7f9:	52                   	push   edx
c000f7fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f7fd:	83 c4 10             	add    esp,0x10
c000f800:	83 c4 0c             	add    esp,0xc
c000f803:	c3                   	ret    

c000f804 <File::rewind()>:
c000f804:	83 ec 10             	sub    esp,0x10
c000f807:	6a 00                	push   0x0
c000f809:	6a 00                	push   0x0
c000f80b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f80f:	e8 4a ff ff ff       	call   c000f75e <File::seek(unsigned long long)>
c000f814:	83 c4 1c             	add    esp,0x1c
c000f817:	c3                   	ret    

c000f818 <File::unlink()>:
c000f818:	83 ec 0c             	sub    esp,0xc
c000f81b:	b8 0b 00 00 00       	mov    eax,0xb
c000f820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f824:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f82b:	80 f9 19             	cmp    cl,0x19
c000f82e:	77 2f                	ja     c000f85f <File::unlink()+0x47>
c000f830:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000f837:	85 c9                	test   ecx,ecx
c000f839:	74 24                	je     c000f85f <File::unlink()+0x47>
c000f83b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f841:	85 c9                	test   ecx,ecx
c000f843:	74 1a                	je     c000f85f <File::unlink()+0x47>
c000f845:	b8 06 00 00 00       	mov    eax,0x6
c000f84a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f84e:	75 0f                	jne    c000f85f <File::unlink()+0x47>
c000f850:	83 c2 0d             	add    edx,0xd
c000f853:	50                   	push   eax
c000f854:	50                   	push   eax
c000f855:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f857:	52                   	push   edx
c000f858:	51                   	push   ecx
c000f859:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f85c:	83 c4 10             	add    esp,0x10
c000f85f:	83 c4 0c             	add    esp,0xc
c000f862:	c3                   	ret    
c000f863:	90                   	nop

c000f864 <File::rename(char const*)>:
c000f864:	83 ec 0c             	sub    esp,0xc
c000f867:	b8 0b 00 00 00       	mov    eax,0xb
c000f86c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f870:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f877:	80 f9 19             	cmp    cl,0x19
c000f87a:	77 32                	ja     c000f8ae <File::rename(char const*)+0x4a>
c000f87c:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000f883:	85 c9                	test   ecx,ecx
c000f885:	74 27                	je     c000f8ae <File::rename(char const*)+0x4a>
c000f887:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 1d                	je     c000f8ae <File::rename(char const*)+0x4a>
c000f891:	b8 06 00 00 00       	mov    eax,0x6
c000f896:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f89a:	75 12                	jne    c000f8ae <File::rename(char const*)+0x4a>
c000f89c:	83 c2 0d             	add    edx,0xd
c000f89f:	50                   	push   eax
c000f8a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8a6:	52                   	push   edx
c000f8a7:	51                   	push   ecx
c000f8a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	83 c4 0c             	add    esp,0xc
c000f8b1:	c3                   	ret    

c000f8b2 <File::chfatattr(unsigned char, unsigned char)>:
c000f8b2:	57                   	push   edi
c000f8b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f8b8:	56                   	push   esi
c000f8b9:	53                   	push   ebx
c000f8ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8cd:	80 f9 19             	cmp    cl,0x19
c000f8d0:	77 37                	ja     c000f909 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8d2:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000f8d9:	85 c9                	test   ecx,ecx
c000f8db:	74 2c                	je     c000f909 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e3:	85 c9                	test   ecx,ecx
c000f8e5:	74 22                	je     c000f909 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8e7:	b8 06 00 00 00       	mov    eax,0x6
c000f8ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8f0:	75 17                	jne    c000f909 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8f2:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f8f4:	89 f0                	mov    eax,esi
c000f8f6:	83 c2 0d             	add    edx,0xd
c000f8f9:	0f b6 f0             	movzx  esi,al
c000f8fc:	0f b6 db             	movzx  ebx,bl
c000f8ff:	56                   	push   esi
c000f900:	53                   	push   ebx
c000f901:	52                   	push   edx
c000f902:	51                   	push   ecx
c000f903:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	5b                   	pop    ebx
c000f90a:	5e                   	pop    esi
c000f90b:	5f                   	pop    edi
c000f90c:	c3                   	ret    
c000f90d:	90                   	nop

c000f90e <File::exists()>:
c000f90e:	83 ec 0c             	sub    esp,0xc
c000f911:	31 c0                	xor    eax,eax
c000f913:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f917:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f91e:	80 f9 19             	cmp    cl,0x19
c000f921:	77 24                	ja     c000f947 <File::exists()+0x39>
c000f923:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000f92a:	85 c9                	test   ecx,ecx
c000f92c:	74 19                	je     c000f947 <File::exists()+0x39>
c000f92e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f934:	85 c9                	test   ecx,ecx
c000f936:	74 0f                	je     c000f947 <File::exists()+0x39>
c000f938:	83 c2 0d             	add    edx,0xd
c000f93b:	50                   	push   eax
c000f93c:	50                   	push   eax
c000f93d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f93f:	52                   	push   edx
c000f940:	51                   	push   ecx
c000f941:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f944:	83 c4 10             	add    esp,0x10
c000f947:	83 c4 0c             	add    esp,0xc
c000f94a:	c3                   	ret    
c000f94b:	90                   	nop

c000f94c <File::stat(unsigned long long*, bool*)>:
c000f94c:	56                   	push   esi
c000f94d:	53                   	push   ebx
c000f94e:	50                   	push   eax
c000f94f:	b8 0b 00 00 00       	mov    eax,0xb
c000f954:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f958:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f95c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f963:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f967:	80 f9 19             	cmp    cl,0x19
c000f96a:	77 3d                	ja     c000f9a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000f96c:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000f973:	85 c9                	test   ecx,ecx
c000f975:	74 32                	je     c000f9a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000f977:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f97d:	85 c9                	test   ecx,ecx
c000f97f:	74 28                	je     c000f9a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000f981:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f983:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f987:	74 13                	je     c000f99c <File::stat(unsigned long long*, bool*)+0x50>
c000f989:	83 ec 04             	sub    esp,0x4
c000f98c:	56                   	push   esi
c000f98d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f993:	51                   	push   ecx
c000f994:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f997:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f99a:	eb 0a                	jmp    c000f9a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000f99c:	53                   	push   ebx
c000f99d:	83 c2 0d             	add    edx,0xd
c000f9a0:	56                   	push   esi
c000f9a1:	52                   	push   edx
c000f9a2:	51                   	push   ecx
c000f9a3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	5a                   	pop    edx
c000f9aa:	5b                   	pop    ebx
c000f9ab:	5e                   	pop    esi
c000f9ac:	c3                   	ret    

c000f9ad <getcwd(Process*, char*, int)>:
c000f9ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9b1:	31 c0                	xor    eax,eax
c000f9b3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9b6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9ba:	7d 15                	jge    c000f9d1 <getcwd(Process*, char*, int)+0x24>
c000f9bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9c0:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9c7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9ca:	84 c9                	test   cl,cl
c000f9cc:	74 06                	je     c000f9d4 <getcwd(Process*, char*, int)+0x27>
c000f9ce:	40                   	inc    eax
c000f9cf:	eb e2                	jmp    c000f9b3 <getcwd(Process*, char*, int)+0x6>
c000f9d1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f9d4:	31 c0                	xor    eax,eax
c000f9d6:	c3                   	ret    

c000f9d7 <setcwd(Process*, char*)>:
c000f9d7:	55                   	push   ebp
c000f9d8:	57                   	push   edi
c000f9d9:	56                   	push   esi
c000f9da:	53                   	push   ebx
c000f9db:	81 ec 20 02 00 00    	sub    esp,0x220
c000f9e1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f9e8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f9ee:	57                   	push   edi
c000f9ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f9f6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f9fa:	56                   	push   esi
c000f9fb:	e8 92 fa ff ff       	call   c000f492 <standardiseFiles(char*, char const*, char const*)>
c000fa00:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa03:	e8 cf 0c ff ff       	call   c00006d7 <strlen>
c000fa08:	83 c4 10             	add    esp,0x10
c000fa0b:	83 f8 02             	cmp    eax,0x2
c000fa0e:	77 17                	ja     c000fa27 <setcwd(Process*, char*)+0x50>
c000fa10:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa15:	83 e8 41             	sub    eax,0x41
c000fa18:	83 f8 19             	cmp    eax,0x19
c000fa1b:	76 24                	jbe    c000fa41 <setcwd(Process*, char*)+0x6a>
c000fa1d:	b8 03 00 00 00       	mov    eax,0x3
c000fa22:	e9 cb 00 00 00       	jmp    c000faf2 <setcwd(Process*, char*)+0x11b>
c000fa27:	83 ec 0c             	sub    esp,0xc
c000fa2a:	56                   	push   esi
c000fa2b:	e8 a7 0c ff ff       	call   c00006d7 <strlen>
c000fa30:	83 c4 10             	add    esp,0x10
c000fa33:	83 f8 03             	cmp    eax,0x3
c000fa36:	75 33                	jne    c000fa6b <setcwd(Process*, char*)+0x94>
c000fa38:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa3d:	75 2c                	jne    c000fa6b <setcwd(Process*, char*)+0x94>
c000fa3f:	eb cf                	jmp    c000fa10 <setcwd(Process*, char*)+0x39>
c000fa41:	8b 14 85 60 49 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb6a0]
c000fa48:	b8 05 00 00 00       	mov    eax,0x5
c000fa4d:	85 d2                	test   edx,edx
c000fa4f:	0f 84 9d 00 00 00    	je     c000faf2 <setcwd(Process*, char*)+0x11b>
c000fa55:	b8 06 00 00 00       	mov    eax,0x6
c000fa5a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa61:	0f 84 8b 00 00 00    	je     c000faf2 <setcwd(Process*, char*)+0x11b>
c000fa67:	51                   	push   ecx
c000fa68:	51                   	push   ecx
c000fa69:	eb 7b                	jmp    c000fae6 <setcwd(Process*, char*)+0x10f>
c000fa6b:	83 ec 0c             	sub    esp,0xc
c000fa6e:	68 14 01 00 00       	push   0x114
c000fa73:	e8 a6 f5 ff ff       	call   c000f01e <operator new(unsigned long)>
c000fa78:	83 c4 0c             	add    esp,0xc
c000fa7b:	89 c3                	mov    ebx,eax
c000fa7d:	55                   	push   ebp
c000fa7e:	56                   	push   esi
c000fa7f:	50                   	push   eax
c000fa80:	e8 b7 fb ff ff       	call   c000f63c <File::File(char const*, Process*)>
c000fa85:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fa8a:	83 c4 0c             	add    esp,0xc
c000fa8d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fa91:	50                   	push   eax
c000fa92:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fa96:	50                   	push   eax
c000fa97:	53                   	push   ebx
c000fa98:	e8 af fe ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000faa2:	83 f8 02             	cmp    eax,0x2
c000faa5:	75 09                	jne    c000fab0 <setcwd(Process*, char*)+0xd9>
c000faa7:	83 ec 0c             	sub    esp,0xc
c000faaa:	53                   	push   ebx
c000faab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000faae:	eb 0d                	jmp    c000fabd <setcwd(Process*, char*)+0xe6>
c000fab0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fab3:	85 c0                	test   eax,eax
c000fab5:	74 10                	je     c000fac7 <setcwd(Process*, char*)+0xf0>
c000fab7:	83 ec 0c             	sub    esp,0xc
c000faba:	53                   	push   ebx
c000fabb:	ff d2                	call   edx
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	b8 01 00 00 00       	mov    eax,0x1
c000fac5:	eb 2b                	jmp    c000faf2 <setcwd(Process*, char*)+0x11b>
c000fac7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000facc:	75 10                	jne    c000fade <setcwd(Process*, char*)+0x107>
c000face:	83 ec 0c             	sub    esp,0xc
c000fad1:	53                   	push   ebx
c000fad2:	ff d2                	call   edx
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	b8 02 00 00 00       	mov    eax,0x2
c000fadc:	eb 14                	jmp    c000faf2 <setcwd(Process*, char*)+0x11b>
c000fade:	83 ec 0c             	sub    esp,0xc
c000fae1:	53                   	push   ebx
c000fae2:	ff d2                	call   edx
c000fae4:	58                   	pop    eax
c000fae5:	5a                   	pop    edx
c000fae6:	56                   	push   esi
c000fae7:	57                   	push   edi
c000fae8:	e8 6c 0c ff ff       	call   c0000759 <strcpy>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	31 c0                	xor    eax,eax
c000faf2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000faf8:	5b                   	pop    ebx
c000faf9:	5e                   	pop    esi
c000fafa:	5f                   	pop    edi
c000fafb:	5d                   	pop    ebp
c000fafc:	c3                   	ret    
c000fafd:	90                   	nop

c000fafe <Directory::Directory(char const*, Process*)>:
c000fafe:	83 ec 0c             	sub    esp,0xc
c000fb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb05:	83 ec 08             	sub    esp,0x8
c000fb08:	6a 00                	push   0x0
c000fb0a:	50                   	push   eax
c000fb0b:	e8 28 e2 ff ff       	call   c000dd38 <UnixFile::UnixFile(int)>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb1c:	89 10                	mov    DWORD PTR [eax],edx
c000fb1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2c:	83 c0 0d             	add    eax,0xd
c000fb2f:	83 ec 04             	sub    esp,0x4
c000fb32:	52                   	push   edx
c000fb33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb37:	50                   	push   eax
c000fb38:	e8 55 f9 ff ff       	call   c000f492 <standardiseFiles(char*, char const*, char const*)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb44:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb47:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb58:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb5c:	90                   	nop
c000fb5d:	83 c4 0c             	add    esp,0xc
c000fb60:	c3                   	ret    
c000fb61:	90                   	nop

c000fb62 <Directory::open()>:
c000fb62:	53                   	push   ebx
c000fb63:	b8 0b 00 00 00       	mov    eax,0xb
c000fb68:	83 ec 08             	sub    esp,0x8
c000fb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb6f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fb76:	80 fa 19             	cmp    dl,0x19
c000fb79:	77 3d                	ja     c000fbb8 <Directory::open()+0x56>
c000fb7b:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000fb82:	85 d2                	test   edx,edx
c000fb84:	74 32                	je     c000fbb8 <Directory::open()+0x56>
c000fb86:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fb8c:	85 d2                	test   edx,edx
c000fb8e:	74 28                	je     c000fbb8 <Directory::open()+0x56>
c000fb90:	b8 06 00 00 00       	mov    eax,0x6
c000fb95:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fb99:	75 1d                	jne    c000fbb8 <Directory::open()+0x56>
c000fb9b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fba1:	50                   	push   eax
c000fba2:	8b 02                	mov    eax,DWORD PTR [edx]
c000fba4:	51                   	push   ecx
c000fba5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fba8:	51                   	push   ecx
c000fba9:	52                   	push   edx
c000fbaa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	85 c0                	test   eax,eax
c000fbb2:	75 04                	jne    c000fbb8 <Directory::open()+0x56>
c000fbb4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbb8:	83 c4 08             	add    esp,0x8
c000fbbb:	5b                   	pop    ebx
c000fbbc:	c3                   	ret    
c000fbbd:	90                   	nop

c000fbbe <Directory::close()>:
c000fbbe:	53                   	push   ebx
c000fbbf:	b8 0b 00 00 00       	mov    eax,0xb
c000fbc4:	83 ec 08             	sub    esp,0x8
c000fbc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbcb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbd2:	80 fa 19             	cmp    dl,0x19
c000fbd5:	77 41                	ja     c000fc18 <Directory::close()+0x5a>
c000fbd7:	8b 1c 95 60 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb6a0]
c000fbde:	85 db                	test   ebx,ebx
c000fbe0:	74 36                	je     c000fc18 <Directory::close()+0x5a>
c000fbe2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fbe9:	74 2d                	je     c000fc18 <Directory::close()+0x5a>
c000fbeb:	b8 05 00 00 00       	mov    eax,0x5
c000fbf0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fbf4:	74 22                	je     c000fc18 <Directory::close()+0x5a>
c000fbf6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fbfa:	8b 04 95 60 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb6a0]
c000fc01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc07:	53                   	push   ebx
c000fc08:	53                   	push   ebx
c000fc09:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc11:	50                   	push   eax
c000fc12:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	83 c4 08             	add    esp,0x8
c000fc1b:	5b                   	pop    ebx
c000fc1c:	c3                   	ret    
c000fc1d:	90                   	nop

c000fc1e <Directory::unlink()>:
c000fc1e:	83 ec 0c             	sub    esp,0xc
c000fc21:	b8 0b 00 00 00       	mov    eax,0xb
c000fc26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc2a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc31:	80 f9 19             	cmp    cl,0x19
c000fc34:	77 2f                	ja     c000fc65 <Directory::unlink()+0x47>
c000fc36:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000fc3d:	85 c9                	test   ecx,ecx
c000fc3f:	74 24                	je     c000fc65 <Directory::unlink()+0x47>
c000fc41:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc47:	85 c9                	test   ecx,ecx
c000fc49:	74 1a                	je     c000fc65 <Directory::unlink()+0x47>
c000fc4b:	b8 06 00 00 00       	mov    eax,0x6
c000fc50:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc54:	75 0f                	jne    c000fc65 <Directory::unlink()+0x47>
c000fc56:	83 c2 0d             	add    edx,0xd
c000fc59:	50                   	push   eax
c000fc5a:	50                   	push   eax
c000fc5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc5d:	52                   	push   edx
c000fc5e:	51                   	push   ecx
c000fc5f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc62:	83 c4 10             	add    esp,0x10
c000fc65:	83 c4 0c             	add    esp,0xc
c000fc68:	c3                   	ret    
c000fc69:	90                   	nop

c000fc6a <Directory::rename(char const*)>:
c000fc6a:	83 ec 0c             	sub    esp,0xc
c000fc6d:	b8 0b 00 00 00       	mov    eax,0xb
c000fc72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc7d:	80 f9 19             	cmp    cl,0x19
c000fc80:	77 32                	ja     c000fcb4 <Directory::rename(char const*)+0x4a>
c000fc82:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000fc89:	85 c9                	test   ecx,ecx
c000fc8b:	74 27                	je     c000fcb4 <Directory::rename(char const*)+0x4a>
c000fc8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc93:	85 c9                	test   ecx,ecx
c000fc95:	74 1d                	je     c000fcb4 <Directory::rename(char const*)+0x4a>
c000fc97:	b8 06 00 00 00       	mov    eax,0x6
c000fc9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fca0:	75 12                	jne    c000fcb4 <Directory::rename(char const*)+0x4a>
c000fca2:	83 c2 0d             	add    edx,0xd
c000fca5:	50                   	push   eax
c000fca6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fca8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcac:	52                   	push   edx
c000fcad:	51                   	push   ecx
c000fcae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	83 c4 0c             	add    esp,0xc
c000fcb7:	c3                   	ret    

c000fcb8 <Directory::exists()>:
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	31 c0                	xor    eax,eax
c000fcbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcc1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcc8:	80 f9 19             	cmp    cl,0x19
c000fccb:	77 24                	ja     c000fcf1 <Directory::exists()+0x39>
c000fccd:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000fcd4:	85 c9                	test   ecx,ecx
c000fcd6:	74 19                	je     c000fcf1 <Directory::exists()+0x39>
c000fcd8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcde:	85 c9                	test   ecx,ecx
c000fce0:	74 0f                	je     c000fcf1 <Directory::exists()+0x39>
c000fce2:	83 c2 0d             	add    edx,0xd
c000fce5:	50                   	push   eax
c000fce6:	50                   	push   eax
c000fce7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fce9:	52                   	push   edx
c000fcea:	51                   	push   ecx
c000fceb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fcee:	83 c4 10             	add    esp,0x10
c000fcf1:	83 c4 0c             	add    esp,0xc
c000fcf4:	c3                   	ret    
c000fcf5:	90                   	nop

c000fcf6 <Directory::read(dirent*)>:
c000fcf6:	83 ec 1c             	sub    esp,0x1c
c000fcf9:	b8 0b 00 00 00       	mov    eax,0xb
c000fcfe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd02:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd09:	80 fa 19             	cmp    dl,0x19
c000fd0c:	77 30                	ja     c000fd3e <Directory::read(dirent*)+0x48>
c000fd0e:	8b 14 95 60 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb6a0]
c000fd15:	85 d2                	test   edx,edx
c000fd17:	74 25                	je     c000fd3e <Directory::read(dirent*)+0x48>
c000fd19:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd20:	74 1c                	je     c000fd3e <Directory::read(dirent*)+0x48>
c000fd22:	83 ec 0c             	sub    esp,0xc
c000fd25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd27:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd2b:	52                   	push   edx
c000fd2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd30:	6a 00                	push   0x0
c000fd32:	68 10 01 00 00       	push   0x110
c000fd37:	51                   	push   ecx
c000fd38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd3b:	83 c4 20             	add    esp,0x20
c000fd3e:	83 c4 1c             	add    esp,0x1c
c000fd41:	c3                   	ret    

c000fd42 <Directory::create()>:
c000fd42:	83 ec 0c             	sub    esp,0xc
c000fd45:	b8 0b 00 00 00       	mov    eax,0xb
c000fd4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd55:	80 f9 19             	cmp    cl,0x19
c000fd58:	77 2f                	ja     c000fd89 <Directory::create()+0x47>
c000fd5a:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000fd61:	85 c9                	test   ecx,ecx
c000fd63:	74 24                	je     c000fd89 <Directory::create()+0x47>
c000fd65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd6b:	85 c9                	test   ecx,ecx
c000fd6d:	74 1a                	je     c000fd89 <Directory::create()+0x47>
c000fd6f:	b8 06 00 00 00       	mov    eax,0x6
c000fd74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd78:	75 0f                	jne    c000fd89 <Directory::create()+0x47>
c000fd7a:	83 c2 0d             	add    edx,0xd
c000fd7d:	50                   	push   eax
c000fd7e:	50                   	push   eax
c000fd7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd81:	52                   	push   edx
c000fd82:	51                   	push   ecx
c000fd83:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	83 c4 0c             	add    esp,0xc
c000fd8c:	c3                   	ret    
c000fd8d:	90                   	nop

c000fd8e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fd8e:	b8 0a 00 00 00       	mov    eax,0xa
c000fd93:	c3                   	ret    

c000fd94 <Bus::Bus(char const*)>:
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9b:	83 ec 08             	sub    esp,0x8
c000fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda2:	50                   	push   eax
c000fda3:	e8 60 09 00 00       	call   c0010708 <Device::Device(char const*)>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c000fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb4:	89 10                	mov    DWORD PTR [eax],edx
c000fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdba:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdc4:	90                   	nop
c000fdc5:	83 c4 0c             	add    esp,0xc
c000fdc8:	c3                   	ret    
c000fdc9:	90                   	nop

c000fdca <Bus::~Bus()>:
c000fdca:	83 ec 0c             	sub    esp,0xc
c000fdcd:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c000fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd6:	89 10                	mov    DWORD PTR [eax],edx
c000fdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	50                   	push   eax
c000fde0:	e8 d5 05 00 00       	call   c00103ba <Device::~Device()>
c000fde5:	83 c4 10             	add    esp,0x10
c000fde8:	90                   	nop
c000fde9:	83 c4 0c             	add    esp,0xc
c000fdec:	c3                   	ret    
c000fded:	90                   	nop

c000fdee <Bus::~Bus()>:
c000fdee:	83 ec 0c             	sub    esp,0xc
c000fdf1:	83 ec 0c             	sub    esp,0xc
c000fdf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf8:	e8 cd ff ff ff       	call   c000fdca <Bus::~Bus()>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	83 ec 08             	sub    esp,0x8
c000fe03:	68 58 01 00 00       	push   0x158
c000fe08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe0c:	e8 1c f2 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	83 c4 0c             	add    esp,0xc
c000fe17:	c3                   	ret    

c000fe18 <Buzzer::Buzzer(char const*)>:
c000fe18:	83 ec 0c             	sub    esp,0xc
c000fe1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1f:	83 ec 08             	sub    esp,0x8
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	50                   	push   eax
c000fe27:	e8 dc 08 00 00       	call   c0010708 <Device::Device(char const*)>
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	ba d8 17 02 c0       	mov    edx,0xc00217d8
c000fe34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe38:	89 10                	mov    DWORD PTR [eax],edx
c000fe3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe56:	90                   	nop
c000fe57:	83 c4 0c             	add    esp,0xc
c000fe5a:	c3                   	ret    
c000fe5b:	90                   	nop

c000fe5c <Buzzer::~Buzzer()>:
c000fe5c:	83 ec 0c             	sub    esp,0xc
c000fe5f:	ba d8 17 02 c0       	mov    edx,0xc00217d8
c000fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe68:	89 10                	mov    DWORD PTR [eax],edx
c000fe6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6e:	83 ec 0c             	sub    esp,0xc
c000fe71:	50                   	push   eax
c000fe72:	e8 43 05 00 00       	call   c00103ba <Device::~Device()>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	90                   	nop
c000fe7b:	83 c4 0c             	add    esp,0xc
c000fe7e:	c3                   	ret    
c000fe7f:	90                   	nop

c000fe80 <Buzzer::~Buzzer()>:
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	83 ec 0c             	sub    esp,0xc
c000fe86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe8a:	e8 cd ff ff ff       	call   c000fe5c <Buzzer::~Buzzer()>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	83 ec 08             	sub    esp,0x8
c000fe95:	68 5c 01 00 00       	push   0x15c
c000fe9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe9e:	e8 8a f1 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	83 c4 0c             	add    esp,0xc
c000fea9:	c3                   	ret    

c000feaa <Buzzer::stop()>:
c000feaa:	83 ec 14             	sub    esp,0x14
c000fead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000feb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000feb3:	6a 00                	push   0x0
c000feb5:	50                   	push   eax
c000feb6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000feb9:	83 c4 1c             	add    esp,0x1c
c000febc:	c3                   	ret    

c000febd <beepThread(void*)>:
c000febd:	53                   	push   ebx
c000febe:	83 ec 08             	sub    esp,0x8
c000fec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fec5:	e8 64 89 00 00       	call   c001882e <unlockScheduler()>
c000feca:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fecf:	52                   	push   edx
c000fed0:	52                   	push   edx
c000fed1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fed7:	52                   	push   edx
c000fed8:	50                   	push   eax
c000fed9:	e8 96 8e 00 00       	call   c0018d74 <nanoSleep(unsigned long long)>
c000fede:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fee1:	e8 c4 ff ff ff       	call   c000feaa <Buzzer::stop()>
c000fee6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000feee:	83 c4 18             	add    esp,0x18
c000fef1:	5b                   	pop    ebx
c000fef2:	e9 c3 8d 00 00       	jmp    c0018cba <blockTask(TaskState)>
c000fef7:	90                   	nop

c000fef8 <Buzzer::beep(int, int, bool)>:
c000fef8:	57                   	push   edi
c000fef9:	56                   	push   esi
c000fefa:	53                   	push   ebx
c000fefb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000feff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff07:	52                   	push   edx
c000ff08:	52                   	push   edx
c000ff09:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0f:	56                   	push   esi
c000ff10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	89 f8                	mov    eax,edi
c000ff18:	84 c0                	test   al,al
c000ff1a:	74 1f                	je     c000ff3b <Buzzer::beep(int, int, bool)+0x43>
c000ff1c:	50                   	push   eax
c000ff1d:	50                   	push   eax
c000ff1e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff24:	99                   	cdq    
c000ff25:	52                   	push   edx
c000ff26:	50                   	push   eax
c000ff27:	e8 48 8e 00 00       	call   c0018d74 <nanoSleep(unsigned long long)>
c000ff2c:	83 c4 10             	add    esp,0x10
c000ff2f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff33:	5b                   	pop    ebx
c000ff34:	5e                   	pop    esi
c000ff35:	5f                   	pop    edi
c000ff36:	e9 6f ff ff ff       	jmp    c000feaa <Buzzer::stop()>
c000ff3b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff41:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c000ff46:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff4e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff52:	c7 44 24 14 bd fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000febd
c000ff5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	5f                   	pop    edi
c000ff61:	e9 f0 89 00 00       	jmp    c0018956 <Process::createThread(void (*)(void*), void*, int)>

c000ff66 <loadClockSettings()>:
c000ff66:	c7 05 d4 44 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00244d4,0xa
c000ff70:	c6 05 d1 44 02 c0 00 	mov    BYTE PTR ds:0xc00244d1,0x0
c000ff77:	c6 05 d0 44 02 c0 01 	mov    BYTE PTR ds:0xc00244d0,0x1
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <Clock::Clock(char const*)>:
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff87:	83 ec 08             	sub    esp,0x8
c000ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff8e:	50                   	push   eax
c000ff8f:	e8 74 07 00 00       	call   c0010708 <Device::Device(char const*)>
c000ff94:	83 c4 10             	add    esp,0x10
c000ff97:	ba 08 18 02 c0       	mov    edx,0xc0021808
c000ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa0:	89 10                	mov    DWORD PTR [eax],edx
c000ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffb0:	90                   	nop
c000ffb1:	83 c4 0c             	add    esp,0xc
c000ffb4:	c3                   	ret    
c000ffb5:	90                   	nop

c000ffb6 <Clock::~Clock()>:
c000ffb6:	83 ec 0c             	sub    esp,0xc
c000ffb9:	ba 08 18 02 c0       	mov    edx,0xc0021808
c000ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc2:	89 10                	mov    DWORD PTR [eax],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	50                   	push   eax
c000ffcc:	e8 e9 03 00 00       	call   c00103ba <Device::~Device()>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	90                   	nop
c000ffd5:	83 c4 0c             	add    esp,0xc
c000ffd8:	c3                   	ret    
c000ffd9:	90                   	nop

c000ffda <Clock::~Clock()>:
c000ffda:	83 ec 0c             	sub    esp,0xc
c000ffdd:	83 ec 0c             	sub    esp,0xc
c000ffe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe4:	e8 cd ff ff ff       	call   c000ffb6 <Clock::~Clock()>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	83 ec 08             	sub    esp,0x8
c000ffef:	68 58 01 00 00       	push   0x158
c000fff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff8:	e8 30 f0 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	83 c4 0c             	add    esp,0xc
c0010003:	c3                   	ret    

c0010004 <Clock::timeInSecondsLocal()>:
c0010004:	53                   	push   ebx
c0010005:	83 ec 14             	sub    esp,0x14
c0010008:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001000c:	8b 10                	mov    edx,DWORD PTR [eax]
c001000e:	50                   	push   eax
c001000f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010012:	0f b6 0d d0 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc00244d0
c0010019:	03 0d d4 44 02 c0    	add    ecx,DWORD PTR ds:0xc00244d4
c001001f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010025:	89 cb                	mov    ebx,ecx
c0010027:	c1 fb 1f             	sar    ebx,0x1f
c001002a:	01 c8                	add    eax,ecx
c001002c:	11 da                	adc    edx,ebx
c001002e:	83 c4 10             	add    esp,0x10
c0010031:	31 c9                	xor    ecx,ecx
c0010033:	80 3d d1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244d1,0x0
c001003a:	74 05                	je     c0010041 <Clock::timeInSecondsLocal()+0x3d>
c001003c:	b9 08 07 00 00       	mov    ecx,0x708
c0010041:	31 db                	xor    ebx,ebx
c0010043:	01 c8                	add    eax,ecx
c0010045:	11 da                	adc    edx,ebx
c0010047:	83 c4 08             	add    esp,0x8
c001004a:	5b                   	pop    ebx
c001004b:	c3                   	ret    

c001004c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001004c:	57                   	push   edi
c001004d:	56                   	push   esi
c001004e:	53                   	push   ebx
c001004f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010053:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010057:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010059:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001005d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010060:	0f b6 05 d0 44 02 c0 	movzx  eax,BYTE PTR ds:0xc00244d0
c0010067:	03 05 d4 44 02 c0    	add    eax,DWORD PTR ds:0xc00244d4
c001006d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010073:	99                   	cdq    
c0010074:	29 c6                	sub    esi,eax
c0010076:	19 d7                	sbb    edi,edx
c0010078:	89 f0                	mov    eax,esi
c001007a:	89 fa                	mov    edx,edi
c001007c:	31 f6                	xor    esi,esi
c001007e:	80 3d d1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244d1,0x0
c0010085:	74 05                	je     c001008c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010087:	be 08 07 00 00       	mov    esi,0x708
c001008c:	31 ff                	xor    edi,edi
c001008e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010092:	29 f0                	sub    eax,esi
c0010094:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010098:	19 fa                	sbb    edx,edi
c001009a:	89 d8                	mov    eax,ebx
c001009c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	5f                   	pop    edi
c00100a3:	ff e0                	jmp    eax

c00100a5 <datetimeToSeconds(datetime_t)>:
c00100a5:	55                   	push   ebp
c00100a6:	57                   	push   edi
c00100a7:	56                   	push   esi
c00100a8:	53                   	push   ebx
c00100a9:	83 ec 14             	sub    esp,0x14
c00100ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100b0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100b4:	89 d3                	mov    ebx,edx
c00100b6:	0f b6 c6             	movzx  eax,dh
c00100b9:	c1 eb 10             	shr    ebx,0x10
c00100bc:	48                   	dec    eax
c00100bd:	66 81 eb 6c 07       	sub    bx,0x76c
c00100c2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100c6:	0f b6 f5             	movzx  esi,ch
c00100c9:	89 cf                	mov    edi,ecx
c00100cb:	6b f6 3c             	imul   esi,esi,0x3c
c00100ce:	c1 ef 10             	shr    edi,0x10
c00100d1:	0f b6 c9             	movzx  ecx,cl
c00100d4:	89 f8                	mov    eax,edi
c00100d6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100dc:	0f b6 f8             	movzx  edi,al
c00100df:	0f b6 d2             	movzx  edx,dl
c00100e2:	01 fe                	add    esi,edi
c00100e4:	01 f1                	add    ecx,esi
c00100e6:	0f b7 f3             	movzx  esi,bx
c00100e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100ed:	c1 f9 1f             	sar    ecx,0x1f
c00100f0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00100f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00100f9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00100fe:	8b 0c 8d 40 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde7c0]
c0010105:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010109:	76 29                	jbe    c0010134 <datetimeToSeconds(datetime_t)+0x8f>
c001010b:	f6 c3 03             	test   bl,0x3
c001010e:	75 24                	jne    c0010134 <datetimeToSeconds(datetime_t)+0x8f>
c0010110:	31 d2                	xor    edx,edx
c0010112:	bf 64 00 00 00       	mov    edi,0x64
c0010117:	89 d8                	mov    eax,ebx
c0010119:	66 f7 f7             	div    di
c001011c:	66 85 d2             	test   dx,dx
c001011f:	75 12                	jne    c0010133 <datetimeToSeconds(datetime_t)+0x8e>
c0010121:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010127:	bf 90 01 00 00       	mov    edi,0x190
c001012c:	99                   	cdq    
c001012d:	f7 ff                	idiv   edi
c001012f:	85 d2                	test   edx,edx
c0010131:	75 01                	jne    c0010134 <datetimeToSeconds(datetime_t)+0x8f>
c0010133:	41                   	inc    ecx
c0010134:	66 83 fb 46          	cmp    bx,0x46
c0010138:	76 45                	jbe    c001017f <datetimeToSeconds(datetime_t)+0xda>
c001013a:	bb 46 00 00 00       	mov    ebx,0x46
c001013f:	bf 64 00 00 00       	mov    edi,0x64
c0010144:	bd 90 01 00 00       	mov    ebp,0x190
c0010149:	b8 6d 01 00 00       	mov    eax,0x16d
c001014e:	f6 c3 03             	test   bl,0x3
c0010151:	75 23                	jne    c0010176 <datetimeToSeconds(datetime_t)+0xd1>
c0010153:	89 d8                	mov    eax,ebx
c0010155:	99                   	cdq    
c0010156:	f7 ff                	idiv   edi
c0010158:	b8 6e 01 00 00       	mov    eax,0x16e
c001015d:	85 d2                	test   edx,edx
c001015f:	75 15                	jne    c0010176 <datetimeToSeconds(datetime_t)+0xd1>
c0010161:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010167:	99                   	cdq    
c0010168:	f7 fd                	idiv   ebp
c001016a:	83 fa 01             	cmp    edx,0x1
c001016d:	19 c0                	sbb    eax,eax
c001016f:	f7 d0                	not    eax
c0010171:	05 6e 01 00 00       	add    eax,0x16e
c0010176:	01 c1                	add    ecx,eax
c0010178:	43                   	inc    ebx
c0010179:	39 f3                	cmp    ebx,esi
c001017b:	7c cc                	jl     c0010149 <datetimeToSeconds(datetime_t)+0xa4>
c001017d:	eb 35                	jmp    c00101b4 <datetimeToSeconds(datetime_t)+0x10f>
c001017f:	74 33                	je     c00101b4 <datetimeToSeconds(datetime_t)+0x10f>
c0010181:	b8 45 00 00 00       	mov    eax,0x45
c0010186:	89 c2                	mov    edx,eax
c0010188:	83 e2 03             	and    edx,0x3
c001018b:	39 f0                	cmp    eax,esi
c001018d:	7e 0f                	jle    c001019e <datetimeToSeconds(datetime_t)+0xf9>
c001018f:	83 fa 01             	cmp    edx,0x1
c0010192:	19 d2                	sbb    edx,edx
c0010194:	48                   	dec    eax
c0010195:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001019c:	eb e8                	jmp    c0010186 <datetimeToSeconds(datetime_t)+0xe1>
c001019e:	b8 6d 01 00 00       	mov    eax,0x16d
c00101a3:	85 d2                	test   edx,edx
c00101a5:	75 0b                	jne    c00101b2 <datetimeToSeconds(datetime_t)+0x10d>
c00101a7:	66 83 fb 01          	cmp    bx,0x1
c00101ab:	19 c0                	sbb    eax,eax
c00101ad:	05 6e 01 00 00       	add    eax,0x16e
c00101b2:	29 c1                	sub    ecx,eax
c00101b4:	b8 80 51 01 00       	mov    eax,0x15180
c00101b9:	f7 e9                	imul   ecx
c00101bb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101bf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101c3:	83 c4 14             	add    esp,0x14
c00101c6:	5b                   	pop    ebx
c00101c7:	5e                   	pop    esi
c00101c8:	5f                   	pop    edi
c00101c9:	5d                   	pop    ebp
c00101ca:	c3                   	ret    
c00101cb:	90                   	nop

c00101cc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101cc:	57                   	push   edi
c00101cd:	56                   	push   esi
c00101ce:	53                   	push   ebx
c00101cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00101d5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00101d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101e0:	e8 c0 fe ff ff       	call   c00100a5 <datetimeToSeconds(datetime_t)>
c00101e5:	59                   	pop    ecx
c00101e6:	0f b6 0d d0 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc00244d0
c00101ed:	5b                   	pop    ebx
c00101ee:	03 0d d4 44 02 c0    	add    ecx,DWORD PTR ds:0xc00244d4
c00101f4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101fa:	89 cb                	mov    ebx,ecx
c00101fc:	c1 fb 1f             	sar    ebx,0x1f
c00101ff:	29 c8                	sub    eax,ecx
c0010201:	19 da                	sbb    edx,ebx
c0010203:	31 c9                	xor    ecx,ecx
c0010205:	80 3d d1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244d1,0x0
c001020c:	74 05                	je     c0010213 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001020e:	b9 08 07 00 00       	mov    ecx,0x708
c0010213:	31 db                	xor    ebx,ebx
c0010215:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010219:	29 c8                	sub    eax,ecx
c001021b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001021f:	19 da                	sbb    edx,ebx
c0010221:	89 f8                	mov    eax,edi
c0010223:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010227:	5b                   	pop    ebx
c0010228:	5e                   	pop    esi
c0010229:	5f                   	pop    edi
c001022a:	ff e0                	jmp    eax

c001022c <secondsToDatetime(unsigned long long)>:
c001022c:	55                   	push   ebp
c001022d:	57                   	push   edi
c001022e:	56                   	push   esi
c001022f:	53                   	push   ebx
c0010230:	83 ec 1c             	sub    esp,0x1c
c0010233:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010237:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001023b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001023f:	6a 00                	push   0x0
c0010241:	68 80 51 01 00       	push   0x15180
c0010246:	55                   	push   ebp
c0010247:	57                   	push   edi
c0010248:	e8 5f ef 00 00       	call   c001f1ac <__udivdi3>
c001024d:	83 c4 10             	add    esp,0x10
c0010250:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001025a:	6a 00                	push   0x0
c001025c:	68 80 51 01 00       	push   0x15180
c0010261:	55                   	push   ebp
c0010262:	57                   	push   edi
c0010263:	bf 10 0e 00 00       	mov    edi,0xe10
c0010268:	e8 3f f0 00 00       	call   c001f2ac <__umoddi3>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	99                   	cdq    
c0010271:	f7 ff                	idiv   edi
c0010273:	bf 3c 00 00 00       	mov    edi,0x3c
c0010278:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001027b:	89 d0                	mov    eax,edx
c001027d:	99                   	cdq    
c001027e:	f7 ff                	idiv   edi
c0010280:	85 db                	test   ebx,ebx
c0010282:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010285:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010288:	79 11                	jns    c001029b <secondsToDatetime(unsigned long long)+0x6f>
c001028a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001028e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0010294:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010299:	eb 07                	jmp    c00102a2 <secondsToDatetime(unsigned long long)+0x76>
c001029b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102a0:	89 d8                	mov    eax,ebx
c00102a2:	bf b4 05 00 00       	mov    edi,0x5b4
c00102a7:	99                   	cdq    
c00102a8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102ad:	f7 f9                	idiv   ecx
c00102af:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102b8:	31 d2                	xor    edx,edx
c00102ba:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102c2:	01 c3                	add    ebx,eax
c00102c4:	89 d8                	mov    eax,ebx
c00102c6:	f7 f1                	div    ecx
c00102c8:	31 d2                	xor    edx,edx
c00102ca:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102cd:	89 d8                	mov    eax,ebx
c00102cf:	f7 f7                	div    edi
c00102d1:	31 d2                	xor    edx,edx
c00102d3:	29 c1                	sub    ecx,eax
c00102d5:	89 d8                	mov    eax,ebx
c00102d7:	f7 f5                	div    ebp
c00102d9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00102de:	29 c1                	sub    ecx,eax
c00102e0:	31 d2                	xor    edx,edx
c00102e2:	89 c8                	mov    eax,ecx
c00102e4:	f7 f5                	div    ebp
c00102e6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00102eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102ef:	31 d2                	xor    edx,edx
c00102f1:	89 c8                	mov    eax,ecx
c00102f3:	f7 f5                	div    ebp
c00102f5:	31 d2                	xor    edx,edx
c00102f7:	01 c3                	add    ebx,eax
c00102f9:	89 c8                	mov    eax,ecx
c00102fb:	f7 f7                	div    edi
c00102fd:	bf 99 00 00 00       	mov    edi,0x99
c0010302:	29 c3                	sub    ebx,eax
c0010304:	31 d2                	xor    edx,edx
c0010306:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001030e:	29 c3                	sub    ebx,eax
c0010310:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010313:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010316:	bb 05 00 00 00       	mov    ebx,0x5
c001031b:	83 c1 02             	add    ecx,0x2
c001031e:	89 c8                	mov    eax,ecx
c0010320:	f7 f7                	div    edi
c0010322:	31 d2                	xor    edx,edx
c0010324:	89 c7                	mov    edi,eax
c0010326:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001032c:	83 c0 02             	add    eax,0x2
c001032f:	f7 f3                	div    ebx
c0010331:	89 eb                	mov    ebx,ebp
c0010333:	29 c3                	sub    ebx,eax
c0010335:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001033b:	88 1e                	mov    BYTE PTR [esi],bl
c001033d:	19 c0                	sbb    eax,eax
c001033f:	31 d2                	xor    edx,edx
c0010341:	83 e0 0c             	and    eax,0xc
c0010344:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010348:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010350:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010354:	83 f9 01             	cmp    ecx,0x1
c0010357:	0f 96 c2             	setbe  dl
c001035a:	41                   	inc    ecx
c001035b:	01 d0                	add    eax,edx
c001035d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010360:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010364:	83 c4 1c             	add    esp,0x1c
c0010367:	89 f0                	mov    eax,esi
c0010369:	5b                   	pop    ebx
c001036a:	5e                   	pop    esi
c001036b:	5f                   	pop    edi
c001036c:	5d                   	pop    ebp
c001036d:	c2 04 00             	ret    0x4

c0010370 <Clock::timeInDatetimeLocal()>:
c0010370:	53                   	push   ebx
c0010371:	83 ec 14             	sub    esp,0x14
c0010374:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010378:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001037c:	e8 83 fc ff ff       	call   c0010004 <Clock::timeInSecondsLocal()>
c0010381:	83 c4 0c             	add    esp,0xc
c0010384:	52                   	push   edx
c0010385:	50                   	push   eax
c0010386:	53                   	push   ebx
c0010387:	e8 a0 fe ff ff       	call   c001022c <secondsToDatetime(unsigned long long)>
c001038c:	89 d8                	mov    eax,ebx
c001038e:	83 c4 14             	add    esp,0x14
c0010391:	5b                   	pop    ebx
c0010392:	c2 04 00             	ret    0x4
c0010395:	90                   	nop

c0010396 <Device::hibernate()>:
c0010396:	c3                   	ret    
c0010397:	90                   	nop

c0010398 <Device::wake()>:
c0010398:	c3                   	ret    
c0010399:	90                   	nop

c001039a <Device::detect()>:
c001039a:	c3                   	ret    
c001039b:	90                   	nop

c001039c <Device::disableLegacy()>:
c001039c:	c3                   	ret    
c001039d:	90                   	nop

c001039e <Device::powerSaving(PowerSavingLevel)>:
c001039e:	c3                   	ret    
c001039f:	90                   	nop

c00103a0 <DriverlessDevice::close(int, int, void*)>:
c00103a0:	31 c0                	xor    eax,eax
c00103a2:	c3                   	ret    
c00103a3:	90                   	nop

c00103a4 <DriverlessDevice::detect()>:
c00103a4:	c3                   	ret    
c00103a5:	90                   	nop

c00103a6 <DriverlessDevice::open(int, int, void*)>:
c00103a6:	83 ec 18             	sub    esp,0x18
c00103a9:	68 70 18 02 c0       	push   0xc0021870
c00103ae:	e8 25 55 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c00103b3:	83 c8 ff             	or     eax,0xffffffff
c00103b6:	83 c4 1c             	add    esp,0x1c
c00103b9:	c3                   	ret    

c00103ba <Device::~Device()>:
c00103ba:	ba 98 18 02 c0       	mov    edx,0xc0021898
c00103bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c3:	89 10                	mov    DWORD PTR [eax],edx
c00103c5:	90                   	nop
c00103c6:	c3                   	ret    
c00103c7:	90                   	nop

c00103c8 <Device::~Device()>:
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103cf:	e8 e6 ff ff ff       	call   c00103ba <Device::~Device()>
c00103d4:	83 c4 04             	add    esp,0x4
c00103d7:	83 ec 08             	sub    esp,0x8
c00103da:	68 58 01 00 00       	push   0x158
c00103df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e3:	e8 45 ec ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	83 c4 0c             	add    esp,0xc
c00103ee:	c3                   	ret    
c00103ef:	90                   	nop

c00103f0 <Device::findAndLoadDriver()>:
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::preOpenPCI(PCIDeviceInfo)>:
c00103f2:	57                   	push   edi
c00103f3:	b9 09 00 00 00       	mov    ecx,0x9
c00103f8:	56                   	push   esi
c00103f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00103fd:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010401:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001040b:	81 c7 18 01 00 00    	add    edi,0x118
c0010411:	fc                   	cld    
c0010412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	c3                   	ret    
c0010417:	90                   	nop

c0010418 <Device::preOpenACPI(void*, char*, char*)>:
c0010418:	56                   	push   esi
c0010419:	53                   	push   ebx
c001041a:	83 ec 08             	sub    esp,0x8
c001041d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010421:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010425:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001042f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010433:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010439:	6a 1e                	push   0x1e
c001043b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010441:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010445:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001044b:	50                   	push   eax
c001044c:	e8 33 02 ff ff       	call   c0000684 <memcpy>
c0010451:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010455:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010459:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010461:	83 c4 14             	add    esp,0x14
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	e9 19 02 ff ff       	jmp    c0000684 <memcpy>
c001046b:	90                   	nop

c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001046c:	55                   	push   ebp
c001046d:	57                   	push   edi
c001046e:	56                   	push   esi
c001046f:	53                   	push   ebx
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010477:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001047b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001047f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010483:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010488:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001048f:	75 0b                	jne    c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010491:	8b 00                	mov    eax,DWORD PTR [eax]
c0010493:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010497:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001049a:	eb 24                	jmp    c00104c0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001049c:	e8 b5 42 00 00       	call   c0014756 <thisCPU()>
c00104a1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00104a9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104ad:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104b1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104b5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104bd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104c0:	83 c4 0c             	add    esp,0xc
c00104c3:	5b                   	pop    ebx
c00104c4:	5e                   	pop    esi
c00104c5:	5f                   	pop    edi
c00104c6:	5d                   	pop    ebp
c00104c7:	ff e0                	jmp    eax
c00104c9:	90                   	nop

c00104ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104ca:	57                   	push   edi
c00104cb:	56                   	push   esi
c00104cc:	53                   	push   ebx
c00104cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00104d9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00104de:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104e5:	75 0b                	jne    c00104f2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00104e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104ed:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00104f0:	eb 20                	jmp    c0010512 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00104f2:	e8 5f 42 00 00       	call   c0014756 <thisCPU()>
c00104f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ff:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010503:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010507:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001050b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001050f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010512:	5b                   	pop    ebx
c0010513:	5e                   	pop    esi
c0010514:	5f                   	pop    edi
c0010515:	ff e0                	jmp    eax
c0010517:	90                   	nop

c0010518 <Device::addChild(Device*)>:
c0010518:	53                   	push   ebx
c0010519:	83 ec 08             	sub    esp,0x8
c001051c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010524:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001052a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010530:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010532:	85 d2                	test   edx,edx
c0010534:	74 04                	je     c001053a <Device::addChild(Device*)+0x22>
c0010536:	89 d3                	mov    ebx,edx
c0010538:	eb f6                	jmp    c0010530 <Device::addChild(Device*)+0x18>
c001053a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001053d:	83 ec 0c             	sub    esp,0xc
c0010540:	6a 08                	push   0x8
c0010542:	e8 d7 ea ff ff       	call   c000f01e <operator new(unsigned long)>
c0010547:	89 03                	mov    DWORD PTR [ebx],eax
c0010549:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001054f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010556:	83 c4 18             	add    esp,0x18
c0010559:	5b                   	pop    ebx
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <Device::removeAllChildren()>:
c001055c:	56                   	push   esi
c001055d:	53                   	push   ebx
c001055e:	52                   	push   edx
c001055f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010563:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010569:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001056c:	74 17                	je     c0010585 <Device::removeAllChildren()+0x29>
c001056e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010571:	85 c0                	test   eax,eax
c0010573:	74 0c                	je     c0010581 <Device::removeAllChildren()+0x25>
c0010575:	83 ec 0c             	sub    esp,0xc
c0010578:	8b 10                	mov    edx,DWORD PTR [eax]
c001057a:	50                   	push   eax
c001057b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001057e:	83 c4 10             	add    esp,0x10
c0010581:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010583:	eb e4                	jmp    c0010569 <Device::removeAllChildren()+0xd>
c0010585:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001058b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010591:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001059e:	58                   	pop    eax
c001059f:	5b                   	pop    ebx
c00105a0:	5e                   	pop    esi
c00105a1:	c3                   	ret    

c00105a2 <Device::hibernateAll()>:
c00105a2:	53                   	push   ebx
c00105a3:	83 ec 14             	sub    esp,0x14
c00105a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ac:	53                   	push   ebx
c00105ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105bc:	74 0f                	je     c00105cd <Device::hibernateAll()+0x2b>
c00105be:	83 ec 0c             	sub    esp,0xc
c00105c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105c4:	e8 d9 ff ff ff       	call   c00105a2 <Device::hibernateAll()>
c00105c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105cb:	eb e9                	jmp    c00105b6 <Device::hibernateAll()+0x14>
c00105cd:	83 c4 08             	add    esp,0x8
c00105d0:	5b                   	pop    ebx
c00105d1:	c3                   	ret    

c00105d2 <Device::wakeAll()>:
c00105d2:	53                   	push   ebx
c00105d3:	83 ec 14             	sub    esp,0x14
c00105d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105dc:	53                   	push   ebx
c00105dd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00105e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105e6:	83 c4 10             	add    esp,0x10
c00105e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105ec:	74 0f                	je     c00105fd <Device::wakeAll()+0x2b>
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105f4:	e8 d9 ff ff ff       	call   c00105d2 <Device::wakeAll()>
c00105f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105fb:	eb e9                	jmp    c00105e6 <Device::wakeAll()+0x14>
c00105fd:	83 c4 08             	add    esp,0x8
c0010600:	5b                   	pop    ebx
c0010601:	c3                   	ret    

c0010602 <Device::detectAll()>:
c0010602:	53                   	push   ebx
c0010603:	83 ec 14             	sub    esp,0x14
c0010606:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001060a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001060c:	53                   	push   ebx
c001060d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010610:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001061c:	74 0f                	je     c001062d <Device::detectAll()+0x2b>
c001061e:	83 ec 0c             	sub    esp,0xc
c0010621:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010624:	e8 d9 ff ff ff       	call   c0010602 <Device::detectAll()>
c0010629:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001062b:	eb e9                	jmp    c0010616 <Device::detectAll()+0x14>
c001062d:	83 c4 08             	add    esp,0x8
c0010630:	5b                   	pop    ebx
c0010631:	c3                   	ret    

c0010632 <Device::disableLegacyAll()>:
c0010632:	53                   	push   ebx
c0010633:	83 ec 14             	sub    esp,0x14
c0010636:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001063a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001063c:	53                   	push   ebx
c001063d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010640:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001064c:	74 0f                	je     c001065d <Device::disableLegacyAll()+0x2b>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010654:	e8 d9 ff ff ff       	call   c0010632 <Device::disableLegacyAll()>
c0010659:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001065b:	eb e9                	jmp    c0010646 <Device::disableLegacyAll()+0x14>
c001065d:	83 c4 08             	add    esp,0x8
c0010660:	5b                   	pop    ebx
c0010661:	c3                   	ret    

c0010662 <Device::loadDriversForAll()>:
c0010662:	53                   	push   ebx
c0010663:	83 ec 08             	sub    esp,0x8
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010670:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010672:	85 db                	test   ebx,ebx
c0010674:	74 12                	je     c0010688 <Device::loadDriversForAll()+0x26>
c0010676:	83 ec 0c             	sub    esp,0xc
c0010679:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001067c:	e8 e1 ff ff ff       	call   c0010662 <Device::loadDriversForAll()>
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	89 d8                	mov    eax,ebx
c0010686:	eb e8                	jmp    c0010670 <Device::loadDriversForAll()+0xe>
c0010688:	83 c4 08             	add    esp,0x8
c001068b:	5b                   	pop    ebx
c001068c:	c3                   	ret    
c001068d:	90                   	nop

c001068e <Device::closeAll()>:
c001068e:	53                   	push   ebx
c001068f:	83 ec 08             	sub    esp,0x8
c0010692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010696:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010698:	6a 00                	push   0x0
c001069a:	6a 00                	push   0x0
c001069c:	6a 00                	push   0x0
c001069e:	53                   	push   ebx
c001069f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ae:	74 0f                	je     c00106bf <Device::closeAll()+0x31>
c00106b0:	83 ec 0c             	sub    esp,0xc
c00106b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106b6:	e8 d3 ff ff ff       	call   c001068e <Device::closeAll()>
c00106bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106bd:	eb e9                	jmp    c00106a8 <Device::closeAll()+0x1a>
c00106bf:	83 c4 08             	add    esp,0x8
c00106c2:	5b                   	pop    ebx
c00106c3:	c3                   	ret    

c00106c4 <Device::powerSavingAll(PowerSavingLevel)>:
c00106c4:	56                   	push   esi
c00106c5:	53                   	push   ebx
c00106c6:	83 ec 0c             	sub    esp,0xc
c00106c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106cd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d3:	56                   	push   esi
c00106d4:	53                   	push   ebx
c00106d5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00106d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106e4:	74 0f                	je     c00106f5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00106e6:	52                   	push   edx
c00106e7:	52                   	push   edx
c00106e8:	56                   	push   esi
c00106e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106ec:	e8 d3 ff ff ff       	call   c00106c4 <Device::powerSavingAll(PowerSavingLevel)>
c00106f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106f3:	eb e9                	jmp    c00106de <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00106f5:	58                   	pop    eax
c00106f6:	5b                   	pop    ebx
c00106f7:	5e                   	pop    esi
c00106f8:	c3                   	ret    
c00106f9:	90                   	nop

c00106fa <Device::setName(char const*)>:
c00106fa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010702:	e9 52 00 ff ff       	jmp    c0000759 <strcpy>
c0010707:	90                   	nop

c0010708 <Device::Device(char const*)>:
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	ba 98 18 02 c0       	mov    edx,0xc0021898
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	89 10                	mov    DWORD PTR [eax],edx
c0010716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010728:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010736:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010744:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001074e:	83 ec 08             	sub    esp,0x8
c0010751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010759:	e8 9c ff ff ff       	call   c00106fa <Device::setName(char const*)>
c001075e:	83 c4 10             	add    esp,0x10
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	6a 08                	push   0x8
c0010766:	e8 b3 e8 ff ff       	call   c000f01e <operator new(unsigned long)>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001077b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001077f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010789:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001078f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010799:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001079f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107aa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107dc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00107e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00107f4:	90                   	nop
c00107f5:	83 c4 0c             	add    esp,0xc
c00107f8:	c3                   	ret    
c00107f9:	90                   	nop

c00107fa <Device::getName()>:
c00107fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fe:	05 d0 00 00 00       	add    eax,0xd0
c0010803:	c3                   	ret    

c0010804 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010804:	83 ec 0c             	sub    esp,0xc
c0010807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080b:	83 ec 08             	sub    esp,0x8
c001080e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010812:	50                   	push   eax
c0010813:	e8 f0 fe ff ff       	call   c0010708 <Device::Device(char const*)>
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	ba c4 18 02 c0       	mov    edx,0xc00218c4
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	89 10                	mov    DWORD PTR [eax],edx
c0010826:	90                   	nop
c0010827:	83 c4 0c             	add    esp,0xc
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001082c:	57                   	push   edi
c001082d:	56                   	push   esi
c001082e:	53                   	push   ebx
c001082f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010837:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001083b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010841:	75 0c                	jne    c001084f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010843:	52                   	push   edx
c0010844:	52                   	push   edx
c0010845:	53                   	push   ebx
c0010846:	56                   	push   esi
c0010847:	e8 78 ee 00 00       	call   c001f6c4 <LinkedList<Device>::addElement(Device*)>
c001084c:	83 c4 10             	add    esp,0x10
c001084f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010855:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010858:	74 12                	je     c001086c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001085a:	50                   	push   eax
c001085b:	57                   	push   edi
c001085c:	56                   	push   esi
c001085d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010860:	e8 c7 ff ff ff       	call   c001082c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010865:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010867:	83 c4 10             	add    esp,0x10
c001086a:	eb e9                	jmp    c0010855 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001086c:	5b                   	pop    ebx
c001086d:	5e                   	pop    esi
c001086e:	5f                   	pop    edi
c001086f:	c3                   	ret    

c0010870 <getDevicesOfType(DeviceType)>:
c0010870:	53                   	push   ebx
c0010871:	83 ec 14             	sub    esp,0x14
c0010874:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010878:	53                   	push   ebx
c0010879:	e8 22 ef 00 00       	call   c001f7a0 <LinkedList<Device>::LinkedList()>
c001087e:	83 c4 0c             	add    esp,0xc
c0010881:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010885:	53                   	push   ebx
c0010886:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c001088c:	e8 9b ff ff ff       	call   c001082c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010891:	89 d8                	mov    eax,ebx
c0010893:	83 c4 18             	add    esp,0x18
c0010896:	5b                   	pop    ebx
c0010897:	c2 04 00             	ret    0x4

c001089a <HardDiskController::HardDiskController(char const*)>:
c001089a:	83 ec 0c             	sub    esp,0xc
c001089d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a1:	83 ec 08             	sub    esp,0x8
c00108a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a8:	50                   	push   eax
c00108a9:	e8 5a fe ff ff       	call   c0010708 <Device::Device(char const*)>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c00108b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ba:	89 10                	mov    DWORD PTR [eax],edx
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108ca:	90                   	nop
c00108cb:	83 c4 0c             	add    esp,0xc
c00108ce:	c3                   	ret    
c00108cf:	90                   	nop

c00108d0 <HardDiskController::~HardDiskController()>:
c00108d0:	83 ec 0c             	sub    esp,0xc
c00108d3:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	89 10                	mov    DWORD PTR [eax],edx
c00108de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	50                   	push   eax
c00108e6:	e8 cf fa ff ff       	call   c00103ba <Device::~Device()>
c00108eb:	83 c4 10             	add    esp,0x10
c00108ee:	90                   	nop
c00108ef:	83 c4 0c             	add    esp,0xc
c00108f2:	c3                   	ret    
c00108f3:	90                   	nop

c00108f4 <HardDiskController::~HardDiskController()>:
c00108f4:	83 ec 0c             	sub    esp,0xc
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	e8 cd ff ff ff       	call   c00108d0 <HardDiskController::~HardDiskController()>
c0010903:	83 c4 10             	add    esp,0x10
c0010906:	83 ec 08             	sub    esp,0x8
c0010909:	68 58 01 00 00       	push   0x158
c001090e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010912:	e8 16 e7 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	83 c4 0c             	add    esp,0xc
c001091d:	c3                   	ret    

c001091e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001091e:	83 ec 0c             	sub    esp,0xc
c0010921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010925:	83 ec 08             	sub    esp,0x8
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	50                   	push   eax
c001092d:	e8 d6 fd ff ff       	call   c0010708 <Device::Device(char const*)>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	89 10                	mov    DWORD PTR [eax],edx
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001094b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001096c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010976:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010980:	90                   	nop
c0010981:	83 c4 0c             	add    esp,0xc
c0010984:	c3                   	ret    
c0010985:	90                   	nop

c0010986 <PhysicalDisk::startCache()>:
c0010986:	56                   	push   esi
c0010987:	53                   	push   ebx
c0010988:	83 ec 10             	sub    esp,0x10
c001098b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001098f:	6a 30                	push   0x30
c0010991:	e8 88 e6 ff ff       	call   c000f01e <operator new(unsigned long)>
c0010996:	89 c6                	mov    esi,eax
c0010998:	58                   	pop    eax
c0010999:	5a                   	pop    edx
c001099a:	53                   	push   ebx
c001099b:	56                   	push   esi
c001099c:	e8 27 25 00 00       	call   c0012ec8 <VCache::VCache(PhysicalDisk*)>
c00109a1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109a7:	83 c4 14             	add    esp,0x14
c00109aa:	5b                   	pop    ebx
c00109ab:	5e                   	pop    esi
c00109ac:	c3                   	ret    
c00109ad:	90                   	nop

c00109ae <PhysicalDisk::~PhysicalDisk()>:
c00109ae:	83 ec 0c             	sub    esp,0xc
c00109b1:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c00109b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ba:	89 10                	mov    DWORD PTR [eax],edx
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	50                   	push   eax
c00109c4:	e8 f1 f9 ff ff       	call   c00103ba <Device::~Device()>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	90                   	nop
c00109cd:	83 c4 0c             	add    esp,0xc
c00109d0:	c3                   	ret    
c00109d1:	90                   	nop

c00109d2 <PhysicalDisk::~PhysicalDisk()>:
c00109d2:	83 ec 0c             	sub    esp,0xc
c00109d5:	83 ec 0c             	sub    esp,0xc
c00109d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109dc:	e8 cd ff ff ff       	call   c00109ae <PhysicalDisk::~PhysicalDisk()>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	83 ec 08             	sub    esp,0x8
c00109e7:	68 6c 01 00 00       	push   0x16c
c00109ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f0:	e8 38 e6 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	83 c4 0c             	add    esp,0xc
c00109fb:	c3                   	ret    

c00109fc <FPU::FPU(char const*)>:
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a03:	83 ec 08             	sub    esp,0x8
c0010a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0a:	50                   	push   eax
c0010a0b:	e8 f8 fc ff ff       	call   c0010708 <Device::Device(char const*)>
c0010a10:	83 c4 10             	add    esp,0x10
c0010a13:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c0010a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1c:	89 10                	mov    DWORD PTR [eax],edx
c0010a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a22:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a2c:	90                   	nop
c0010a2d:	83 c4 0c             	add    esp,0xc
c0010a30:	c3                   	ret    
c0010a31:	90                   	nop

c0010a32 <FPU::~FPU()>:
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c0010a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3e:	89 10                	mov    DWORD PTR [eax],edx
c0010a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	50                   	push   eax
c0010a48:	e8 6d f9 ff ff       	call   c00103ba <Device::~Device()>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	90                   	nop
c0010a51:	83 c4 0c             	add    esp,0xc
c0010a54:	c3                   	ret    
c0010a55:	90                   	nop

c0010a56 <FPU::~FPU()>:
c0010a56:	83 ec 0c             	sub    esp,0xc
c0010a59:	83 ec 0c             	sub    esp,0xc
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	e8 cd ff ff ff       	call   c0010a32 <FPU::~FPU()>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	83 ec 08             	sub    esp,0x8
c0010a6b:	68 58 01 00 00       	push   0x158
c0010a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a74:	e8 b4 e5 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	83 c4 0c             	add    esp,0xc
c0010a7f:	c3                   	ret    

c0010a80 <setupFPU()>:
c0010a80:	53                   	push   ebx
c0010a81:	83 ec 08             	sub    esp,0x8
c0010a84:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0010a89:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010a90:	74 19                	je     c0010aab <setupFPU()+0x2b>
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	68 58 01 00 00       	push   0x158
c0010a9a:	e8 7f e5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0010a9f:	89 c3                	mov    ebx,eax
c0010aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010aa4:	e8 d3 d3 00 00       	call   c001de7c <AVX::AVX()>
c0010aa9:	eb 5b                	jmp    c0010b06 <setupFPU()+0x86>
c0010aab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010ab1:	84 c0                	test   al,al
c0010ab3:	79 19                	jns    c0010ace <setupFPU()+0x4e>
c0010ab5:	83 ec 0c             	sub    esp,0xc
c0010ab8:	68 58 01 00 00       	push   0x158
c0010abd:	e8 5c e5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0010ac2:	89 c3                	mov    ebx,eax
c0010ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ac7:	e8 d6 d4 00 00       	call   c001dfa2 <SSE::SSE()>
c0010acc:	eb 38                	jmp    c0010b06 <setupFPU()+0x86>
c0010ace:	a8 20                	test   al,0x20
c0010ad0:	74 19                	je     c0010aeb <setupFPU()+0x6b>
c0010ad2:	83 ec 0c             	sub    esp,0xc
c0010ad5:	68 58 01 00 00       	push   0x158
c0010ada:	e8 3f e5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0010adf:	89 c3                	mov    ebx,eax
c0010ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ae4:	e8 23 d4 00 00       	call   c001df0c <MMX::MMX()>
c0010ae9:	eb 1b                	jmp    c0010b06 <setupFPU()+0x86>
c0010aeb:	a8 10                	test   al,0x10
c0010aed:	74 1c                	je     c0010b0b <setupFPU()+0x8b>
c0010aef:	83 ec 0c             	sub    esp,0xc
c0010af2:	68 58 01 00 00       	push   0x158
c0010af7:	e8 22 e5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0010afc:	89 c3                	mov    ebx,eax
c0010afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b01:	e8 2a d5 00 00       	call   c001e030 <x87::x87()>
c0010b06:	83 c4 10             	add    esp,0x10
c0010b09:	eb 2c                	jmp    c0010b37 <setupFPU()+0xb7>
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	31 db                	xor    ebx,ebx
c0010b10:	68 48 19 02 c0       	push   0xc0021948
c0010b15:	e8 f3 e5 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010b1a:	e8 37 3c 00 00       	call   c0014756 <thisCPU()>
c0010b1f:	e8 32 3c 00 00       	call   c0014756 <thisCPU()>
c0010b24:	e8 cf ec 00 00       	call   c001f7f8 <CPU::readCR0()>
c0010b29:	83 c8 04             	or     eax,0x4
c0010b2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b2f:	e8 d6 ec 00 00       	call   c001f80a <CPU::writeCR0(unsigned long)>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	89 d8                	mov    eax,ebx
c0010b39:	83 c4 08             	add    esp,0x8
c0010b3c:	5b                   	pop    ebx
c0010b3d:	c3                   	ret    

c0010b3e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b46:	c1 e0 04             	shl    eax,0x4
c0010b49:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b4d:	8d 50 10             	lea    edx,[eax+0x10]
c0010b50:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b56:	74 08                	je     c0010b60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b58:	83 c0 04             	add    eax,0x4
c0010b5b:	39 d0                	cmp    eax,edx
c0010b5d:	75 f1                	jne    c0010b50 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b5f:	c3                   	ret    
c0010b60:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b6a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b74:	eb e2                	jmp    c0010b58 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010b76 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010b76:	57                   	push   edi
c0010b77:	31 c0                	xor    eax,eax
c0010b79:	56                   	push   esi
c0010b7a:	53                   	push   ebx
c0010b7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010b7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010b87:	89 da                	mov    edx,ebx
c0010b89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010b8d:	c1 e2 04             	shl    edx,0x4
c0010b90:	01 ca                	add    edx,ecx
c0010b92:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010b9a:	74 16                	je     c0010bb2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010b9c:	40                   	inc    eax
c0010b9d:	83 f8 04             	cmp    eax,0x4
c0010ba0:	75 f0                	jne    c0010b92 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010ba2:	c7 44 24 10 8c 19 02 c0 	mov    DWORD PTR [esp+0x10],0xc002198c
c0010baa:	5b                   	pop    ebx
c0010bab:	5e                   	pop    esi
c0010bac:	5f                   	pop    edi
c0010bad:	e9 26 4d 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>
c0010bb2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010bb5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bb8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bbe:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bc4:	5b                   	pop    ebx
c0010bc5:	5e                   	pop    esi
c0010bc6:	5f                   	pop    edi
c0010bc7:	c3                   	ret    

c0010bc8 <doubleFault(regs*, void*)>:
c0010bc8:	55                   	push   ebp
c0010bc9:	89 e5                	mov    ebp,esp
c0010bcb:	83 ec 08             	sub    esp,0x8
c0010bce:	83 ec 0c             	sub    esp,0xc
c0010bd1:	68 c7 19 02 c0       	push   0xc00219c7
c0010bd6:	e8 fd 4c 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	90                   	nop
c0010bdf:	c9                   	leave  
c0010be0:	c3                   	ret    
c0010be1:	90                   	nop

c0010be2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010be2:	56                   	push   esi
c0010be3:	53                   	push   ebx
c0010be4:	50                   	push   eax
c0010be5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010be9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bed:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010bf2:	75 35                	jne    c0010c29 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010bf4:	8d 43 20             	lea    eax,[ebx+0x20]
c0010bf7:	31 d2                	xor    edx,edx
c0010bf9:	89 c1                	mov    ecx,eax
c0010bfb:	c1 e1 04             	shl    ecx,0x4
c0010bfe:	01 f1                	add    ecx,esi
c0010c00:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c08:	74 3e                	je     c0010c48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c0a:	42                   	inc    edx
c0010c0b:	83 fa 04             	cmp    edx,0x4
c0010c0e:	75 f0                	jne    c0010c00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c10:	83 ec 0c             	sub    esp,0xc
c0010c13:	68 0c 1a 02 c0       	push   0xc0021a0c
c0010c18:	e8 bb 4c 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c25:	5a                   	pop    edx
c0010c26:	5b                   	pop    ebx
c0010c27:	5e                   	pop    esi
c0010c28:	c3                   	ret    
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	56                   	push   esi
c0010c2d:	e8 c8 fb ff ff       	call   c00107fa <Device::getName()>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c38:	75 ba                	jne    c0010bf4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c3a:	83 fb 0f             	cmp    ebx,0xf
c0010c3d:	7f 29                	jg     c0010c68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c3f:	0f b6 9b c0 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc540]
c0010c46:	eb ac                	jmp    c0010bf4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c48:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c4f:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c52:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c58:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c5c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c62:	89 d8                	mov    eax,ebx
c0010c64:	5a                   	pop    edx
c0010c65:	5b                   	pop    ebx
c0010c66:	5e                   	pop    esi
c0010c67:	c3                   	ret    
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	68 d4 19 02 c0       	push   0xc00219d4
c0010c70:	e8 63 4c 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	e9 77 ff ff ff       	jmp    c0010bf4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c7d:	90                   	nop

c0010c7e <InterruptController::clearAllHandlers(int, bool)>:
c0010c7e:	56                   	push   esi
c0010c7f:	53                   	push   ebx
c0010c80:	52                   	push   edx
c0010c81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c89:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010c8e:	75 61                	jne    c0010cf1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010c90:	8d 46 20             	lea    eax,[esi+0x20]
c0010c93:	c1 e6 04             	shl    esi,0x4
c0010c96:	c1 e0 04             	shl    eax,0x4
c0010c99:	01 de                	add    esi,ebx
c0010c9b:	01 d8                	add    eax,ebx
c0010c9d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010ca7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cb1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010cbb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010cc5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ccf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cd9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010ce3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010ced:	58                   	pop    eax
c0010cee:	5b                   	pop    ebx
c0010cef:	5e                   	pop    esi
c0010cf0:	c3                   	ret    
c0010cf1:	83 ec 0c             	sub    esp,0xc
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 00 fb ff ff       	call   c00107fa <Device::getName()>
c0010cfa:	83 c4 10             	add    esp,0x10
c0010cfd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d00:	75 8e                	jne    c0010c90 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d02:	83 fe 0f             	cmp    esi,0xf
c0010d05:	7f 09                	jg     c0010d10 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d07:	0f b6 b6 c0 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc540]
c0010d0e:	eb 80                	jmp    c0010c90 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	68 48 1a 02 c0       	push   0xc0021a48
c0010d18:	e8 bb 4b 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	e9 6b ff ff ff       	jmp    c0010c90 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d25:	90                   	nop

c0010d26 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d26:	56                   	push   esi
c0010d27:	53                   	push   ebx
c0010d28:	52                   	push   edx
c0010d29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d31:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d36:	75 3a                	jne    c0010d72 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d3c:	8d 50 20             	lea    edx,[eax+0x20]
c0010d3f:	c1 e2 04             	shl    edx,0x4
c0010d42:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d45:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d49:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d4f:	74 0b                	je     c0010d5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d51:	83 c0 04             	add    eax,0x4
c0010d54:	39 d0                	cmp    eax,edx
c0010d56:	75 f1                	jne    c0010d49 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d58:	58                   	pop    eax
c0010d59:	5b                   	pop    ebx
c0010d5a:	5e                   	pop    esi
c0010d5b:	c3                   	ret    
c0010d5c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d66:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d70:	eb df                	jmp    c0010d51 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	56                   	push   esi
c0010d76:	e8 7f fa ff ff       	call   c00107fa <Device::getName()>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d81:	75 b5                	jne    c0010d38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d83:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010d88:	7f 11                	jg     c0010d9b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d8e:	0f b6 80 c0 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc540]
c0010d95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010d99:	eb 9d                	jmp    c0010d38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d9b:	83 ec 0c             	sub    esp,0xc
c0010d9e:	68 48 1a 02 c0       	push   0xc0021a48
c0010da3:	e8 30 4b 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0010da8:	83 c4 10             	add    esp,0x10
c0010dab:	eb 8b                	jmp    c0010d38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010dad <nmiHandler(regs*, void*)>:
c0010dad:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0010db2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010db6:	e9 a5 a9 ff ff       	jmp    c000b760 <Computer::handleNMI()>

c0010dbb <int_handler>:
c0010dbb:	55                   	push   ebp
c0010dbc:	57                   	push   edi
c0010dbd:	56                   	push   esi
c0010dbe:	53                   	push   ebx
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010dc6:	80 3d b4 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024db4,0x0
c0010dcd:	74 0b                	je     c0010dda <int_handler+0x1f>
c0010dcf:	fa                   	cli    
c0010dd0:	f4                   	hlt    
c0010dd1:	80 3d b4 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024db4,0x0
c0010dd8:	75 f5                	jne    c0010dcf <int_handler+0x14>
c0010dda:	e8 77 39 00 00       	call   c0014756 <thisCPU()>
c0010ddf:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010de2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010de8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010deb:	83 f8 17             	cmp    eax,0x17
c0010dee:	77 13                	ja     c0010e03 <int_handler+0x48>
c0010df0:	83 ec 08             	sub    esp,0x8
c0010df3:	8b 17                	mov    edx,DWORD PTR [edi]
c0010df5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010df8:	0f b6 c0             	movzx  eax,al
c0010dfb:	50                   	push   eax
c0010dfc:	57                   	push   edi
c0010dfd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	83 c3 15             	add    ebx,0x15
c0010e06:	c1 e3 04             	shl    ebx,0x4
c0010e09:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e0d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e14:	31 db                	xor    ebx,ebx
c0010e16:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e1a:	85 c0                	test   eax,eax
c0010e1c:	74 13                	je     c0010e31 <int_handler+0x76>
c0010e1e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e21:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e25:	74 1c                	je     c0010e43 <int_handler+0x88>
c0010e27:	83 ec 08             	sub    esp,0x8
c0010e2a:	52                   	push   edx
c0010e2b:	56                   	push   esi
c0010e2c:	ff d0                	call   eax
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	43                   	inc    ebx
c0010e32:	83 fb 04             	cmp    ebx,0x4
c0010e35:	75 df                	jne    c0010e16 <int_handler+0x5b>
c0010e37:	83 c4 0c             	add    esp,0xc
c0010e3a:	31 c0                	xor    eax,eax
c0010e3c:	5b                   	pop    ebx
c0010e3d:	31 d2                	xor    edx,edx
c0010e3f:	5e                   	pop    esi
c0010e40:	5f                   	pop    edi
c0010e41:	5d                   	pop    ebp
c0010e42:	c3                   	ret    
c0010e43:	83 ec 08             	sub    esp,0x8
c0010e46:	52                   	push   edx
c0010e47:	56                   	push   esi
c0010e48:	ff d0                	call   eax
c0010e4a:	83 c4 10             	add    esp,0x10
c0010e4d:	83 c4 0c             	add    esp,0xc
c0010e50:	5b                   	pop    ebx
c0010e51:	5e                   	pop    esi
c0010e52:	5f                   	pop    edi
c0010e53:	5d                   	pop    ebp
c0010e54:	c3                   	ret    
c0010e55:	90                   	nop

c0010e56 <InterruptController::InterruptController(char const*)>:
c0010e56:	83 ec 1c             	sub    esp,0x1c
c0010e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5d:	83 ec 08             	sub    esp,0x8
c0010e60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e64:	50                   	push   eax
c0010e65:	e8 9e f8 ff ff       	call   c0010708 <Device::Device(char const*)>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0010e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e76:	89 10                	mov    DWORD PTR [eax],edx
c0010e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010e86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e8e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010e96:	7f 5e                	jg     c0010ef6 <InterruptController::InterruptController(char const*)+0xa0>
c0010e98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ea0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ea5:	7f 49                	jg     c0010ef0 <InterruptController::InterruptController(char const*)+0x9a>
c0010ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eaf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010eb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eba:	01 ca                	add    edx,ecx
c0010ebc:	83 c2 54             	add    edx,0x54
c0010ebf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ecf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ed6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eda:	01 ca                	add    edx,ecx
c0010edc:	81 c2 54 04 00 00    	add    edx,0x454
c0010ee2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010eea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010eee:	eb b0                	jmp    c0010ea0 <InterruptController::InterruptController(char const*)+0x4a>
c0010ef0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010ef4:	eb 98                	jmp    c0010e8e <InterruptController::InterruptController(char const*)+0x38>
c0010ef6:	90                   	nop
c0010ef7:	83 c4 1c             	add    esp,0x1c
c0010efa:	c3                   	ret    
c0010efb:	90                   	nop

c0010efc <InterruptController::~InterruptController()>:
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0010f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f08:	89 10                	mov    DWORD PTR [eax],edx
c0010f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	50                   	push   eax
c0010f12:	e8 a3 f4 ff ff       	call   c00103ba <Device::~Device()>
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	90                   	nop
c0010f1b:	83 c4 0c             	add    esp,0xc
c0010f1e:	c3                   	ret    
c0010f1f:	90                   	nop

c0010f20 <InterruptController::~InterruptController()>:
c0010f20:	83 ec 0c             	sub    esp,0xc
c0010f23:	83 ec 0c             	sub    esp,0xc
c0010f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f2a:	e8 cd ff ff ff       	call   c0010efc <InterruptController::~InterruptController()>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	83 ec 08             	sub    esp,0x8
c0010f35:	68 58 21 00 00       	push   0x2158
c0010f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f3e:	e8 ea e0 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	83 c4 0c             	add    esp,0xc
c0010f49:	c3                   	ret    

c0010f4a <displayDebugInfo(regs*)>:
c0010f4a:	55                   	push   ebp
c0010f4b:	57                   	push   edi
c0010f4c:	56                   	push   esi
c0010f4d:	53                   	push   ebx
c0010f4e:	83 ec 24             	sub    esp,0x24
c0010f51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f55:	0f 20 c2             	mov    edx,cr0
c0010f58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f5c:	0f 20 d7             	mov    edi,cr2
c0010f5f:	0f 20 de             	mov    esi,cr3
c0010f62:	0f 20 e5             	mov    ebp,cr4
c0010f65:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f68:	68 82 1a 02 c0       	push   0xc0021a82
c0010f6d:	e8 9b e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010f72:	58                   	pop    eax
c0010f73:	5a                   	pop    edx
c0010f74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f77:	68 8d 1a 02 c0       	push   0xc0021a8d
c0010f7c:	e8 8c e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010f81:	59                   	pop    ecx
c0010f82:	58                   	pop    eax
c0010f83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f86:	68 98 1a 02 c0       	push   0xc0021a98
c0010f8b:	e8 7d e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010f90:	58                   	pop    eax
c0010f91:	5a                   	pop    edx
c0010f92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f95:	68 a3 1a 02 c0       	push   0xc0021aa3
c0010f9a:	e8 6e e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010f9f:	59                   	pop    ecx
c0010fa0:	58                   	pop    eax
c0010fa1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010fa4:	68 ae 1a 02 c0       	push   0xc0021aae
c0010fa9:	e8 5f e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010fae:	58                   	pop    eax
c0010faf:	5a                   	pop    edx
c0010fb0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010fb3:	68 b9 1a 02 c0       	push   0xc0021ab9
c0010fb8:	e8 50 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010fbd:	59                   	pop    ecx
c0010fbe:	58                   	pop    eax
c0010fbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fc2:	68 c4 1a 02 c0       	push   0xc0021ac4
c0010fc7:	e8 41 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010fcc:	58                   	pop    eax
c0010fcd:	5a                   	pop    edx
c0010fce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010fd1:	68 cf 1a 02 c0       	push   0xc0021acf
c0010fd6:	e8 32 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010fdb:	59                   	pop    ecx
c0010fdc:	58                   	pop    eax
c0010fdd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fe0:	68 da 1a 02 c0       	push   0xc0021ada
c0010fe5:	e8 23 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010fea:	58                   	pop    eax
c0010feb:	5a                   	pop    edx
c0010fec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fef:	68 e9 1a 02 c0       	push   0xc0021ae9
c0010ff4:	e8 14 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0010ff9:	59                   	pop    ecx
c0010ffa:	58                   	pop    eax
c0010ffb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ffe:	68 f4 1a 02 c0       	push   0xc0021af4
c0011003:	e8 05 e1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011008:	58                   	pop    eax
c0011009:	5a                   	pop    edx
c001100a:	57                   	push   edi
c001100b:	68 ff 1a 02 c0       	push   0xc0021aff
c0011010:	e8 f8 e0 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011015:	59                   	pop    ecx
c0011016:	58                   	pop    eax
c0011017:	56                   	push   esi
c0011018:	68 0a 1b 02 c0       	push   0xc0021b0a
c001101d:	e8 eb e0 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011022:	58                   	pop    eax
c0011023:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011028:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001102e:	e8 1e c3 ff ff       	call   c000d351 <setActiveTerminal(VgaText*)>
c0011033:	58                   	pop    eax
c0011034:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011037:	5a                   	pop    edx
c0011038:	c1 e0 05             	shl    eax,0x5
c001103b:	05 20 38 02 c0       	add    eax,0xc0023820
c0011040:	50                   	push   eax
c0011041:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011046:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001104c:	e8 1f c7 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011051:	59                   	pop    ecx
c0011052:	58                   	pop    eax
c0011053:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011058:	68 15 1b 02 c0       	push   0xc0021b15
c001105d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011063:	e8 08 c7 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011068:	58                   	pop    eax
c0011069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106e:	5a                   	pop    edx
c001106f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011072:	83 c0 0c             	add    eax,0xc
c0011075:	50                   	push   eax
c0011076:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001107b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011081:	e8 ea c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011086:	59                   	pop    ecx
c0011087:	58                   	pop    eax
c0011088:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001108d:	68 1e 1b 02 c0       	push   0xc0021b1e
c0011092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011098:	e8 d3 c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c001109d:	58                   	pop    eax
c001109e:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00110a3:	5a                   	pop    edx
c00110a4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ad:	e8 e4 c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00110b2:	59                   	pop    ecx
c00110b3:	58                   	pop    eax
c00110b4:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00110b9:	68 26 1b 02 c0       	push   0xc0021b26
c00110be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c4:	e8 a7 c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00110c9:	58                   	pop    eax
c00110ca:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00110cf:	5a                   	pop    edx
c00110d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d9:	e8 b8 c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00110de:	59                   	pop    ecx
c00110df:	58                   	pop    eax
c00110e0:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00110e5:	68 2e 1b 02 c0       	push   0xc0021b2e
c00110ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f0:	e8 7b c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00110f5:	58                   	pop    eax
c00110f6:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00110fb:	5a                   	pop    edx
c00110fc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011105:	e8 8c c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001110a:	59                   	pop    ecx
c001110b:	58                   	pop    eax
c001110c:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011111:	68 36 1b 02 c0       	push   0xc0021b36
c0011116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111c:	e8 4f c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011121:	58                   	pop    eax
c0011122:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011127:	5a                   	pop    edx
c0011128:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001112b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011131:	e8 60 c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0011136:	59                   	pop    ecx
c0011137:	58                   	pop    eax
c0011138:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001113d:	68 3e 1b 02 c0       	push   0xc0021b3e
c0011142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011148:	e8 23 c6 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c001114d:	58                   	pop    eax
c001114e:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011153:	5a                   	pop    edx
c0011154:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115d:	e8 34 c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0011162:	59                   	pop    ecx
c0011163:	58                   	pop    eax
c0011164:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011169:	68 46 1b 02 c0       	push   0xc0021b46
c001116e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011174:	e8 f7 c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011179:	58                   	pop    eax
c001117a:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001117f:	5a                   	pop    edx
c0011180:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011189:	e8 08 c6 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001118e:	59                   	pop    ecx
c001118f:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011194:	5b                   	pop    ebx
c0011195:	68 4e 1b 02 c0       	push   0xc0021b4e
c001119a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a0:	e8 cb c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00111a5:	58                   	pop    eax
c00111a6:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00111ab:	5a                   	pop    edx
c00111ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111b0:	52                   	push   edx
c00111b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b7:	e8 da c5 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00111bc:	59                   	pop    ecx
c00111bd:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00111c2:	5b                   	pop    ebx
c00111c3:	68 57 1b 02 c0       	push   0xc0021b57
c00111c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ce:	e8 9d c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00111d3:	58                   	pop    eax
c00111d4:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00111d9:	5a                   	pop    edx
c00111da:	57                   	push   edi
c00111db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e1:	e8 b0 c5 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00111e6:	59                   	pop    ecx
c00111e7:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00111ec:	5b                   	pop    ebx
c00111ed:	68 5f 1b 02 c0       	push   0xc0021b5f
c00111f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f8:	e8 73 c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00111fd:	5f                   	pop    edi
c00111fe:	58                   	pop    eax
c00111ff:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011204:	56                   	push   esi
c0011205:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120b:	e8 86 c5 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0011210:	58                   	pop    eax
c0011211:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011216:	5a                   	pop    edx
c0011217:	68 67 1b 02 c0       	push   0xc0021b67
c001121c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011222:	e8 49 c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011227:	59                   	pop    ecx
c0011228:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001122d:	5b                   	pop    ebx
c001122e:	55                   	push   ebp
c001122f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011235:	e8 5c c5 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001123a:	5e                   	pop    esi
c001123b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011240:	5f                   	pop    edi
c0011241:	68 6f 1b 02 c0       	push   0xc0021b6f
c0011246:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124c:	e8 1f c5 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011251:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011256:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001125c:	e8 b2 e5 00 00       	call   c001f813 <CPU::readDR0()>
c0011261:	5d                   	pop    ebp
c0011262:	5a                   	pop    edx
c0011263:	50                   	push   eax
c0011264:	53                   	push   ebx
c0011265:	e8 2c c5 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001126a:	59                   	pop    ecx
c001126b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011270:	5b                   	pop    ebx
c0011271:	68 78 1b 02 c0       	push   0xc0021b78
c0011276:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001127c:	e8 ef c4 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011281:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011286:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001128c:	e8 94 e5 00 00       	call   c001f825 <CPU::readDR1()>
c0011291:	5e                   	pop    esi
c0011292:	5f                   	pop    edi
c0011293:	50                   	push   eax
c0011294:	53                   	push   ebx
c0011295:	e8 fc c4 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001129a:	5d                   	pop    ebp
c001129b:	58                   	pop    eax
c001129c:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00112a1:	68 80 1b 02 c0       	push   0xc0021b80
c00112a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ac:	e8 bf c4 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00112b1:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00112b6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112bc:	e8 76 e5 00 00       	call   c001f837 <CPU::readDR2()>
c00112c1:	5a                   	pop    edx
c00112c2:	59                   	pop    ecx
c00112c3:	50                   	push   eax
c00112c4:	53                   	push   ebx
c00112c5:	e8 cc c4 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00112ca:	5b                   	pop    ebx
c00112cb:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00112d0:	5e                   	pop    esi
c00112d1:	68 88 1b 02 c0       	push   0xc0021b88
c00112d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112dc:	e8 8f c4 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00112e1:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00112e6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112ec:	e8 58 e5 00 00       	call   c001f849 <CPU::readDR3()>
c00112f1:	5f                   	pop    edi
c00112f2:	5d                   	pop    ebp
c00112f3:	50                   	push   eax
c00112f4:	53                   	push   ebx
c00112f5:	e8 9c c4 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c00112fa:	58                   	pop    eax
c00112fb:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011300:	5a                   	pop    edx
c0011301:	68 90 1b 02 c0       	push   0xc0021b90
c0011306:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001130c:	e8 5f c4 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011311:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011316:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001131c:	e8 3a e5 00 00       	call   c001f85b <CPU::readDR6()>
c0011321:	59                   	pop    ecx
c0011322:	5e                   	pop    esi
c0011323:	50                   	push   eax
c0011324:	53                   	push   ebx
c0011325:	e8 6c c4 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001132a:	5f                   	pop    edi
c001132b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011330:	5d                   	pop    ebp
c0011331:	68 98 1b 02 c0       	push   0xc0021b98
c0011336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001133c:	e8 2f c4 ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0011341:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0011346:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001134c:	e8 1c e5 00 00       	call   c001f86d <CPU::readDR7()>
c0011351:	5a                   	pop    edx
c0011352:	59                   	pop    ecx
c0011353:	50                   	push   eax
c0011354:	53                   	push   ebx
c0011355:	e8 3c c4 ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c001135a:	fa                   	cli    
c001135b:	f4                   	hlt    
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	eb fe                	jmp    c001135f <displayDebugInfo(regs*)+0x415>

c0011361 <x87EmulHandler(regs*, void*)>:
c0011361:	53                   	push   ebx
c0011362:	83 ec 08             	sub    esp,0x8
c0011365:	a1 f4 44 02 c0       	mov    eax,ds:0xc00244f4
c001136a:	85 c0                	test   eax,eax
c001136c:	74 15                	je     c0011383 <x87EmulHandler(regs*, void*)+0x22>
c001136e:	83 ec 0c             	sub    esp,0xc
c0011371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011375:	ff d0                	call   eax
c0011377:	83 c4 10             	add    esp,0x10
c001137a:	84 c0                	test   al,al
c001137c:	74 2f                	je     c00113ad <x87EmulHandler(regs*, void*)+0x4c>
c001137e:	83 c4 08             	add    esp,0x8
c0011381:	5b                   	pop    ebx
c0011382:	c3                   	ret    
c0011383:	83 ec 08             	sub    esp,0x8
c0011386:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c001138c:	6a 01                	push   0x1
c001138e:	68 a0 1b 02 c0       	push   0xc0021ba0
c0011393:	e8 c3 6e 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0011398:	5a                   	pop    edx
c0011399:	59                   	pop    ecx
c001139a:	53                   	push   ebx
c001139b:	50                   	push   eax
c001139c:	e8 80 70 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c00113a1:	a1 f4 44 02 c0       	mov    eax,ds:0xc00244f4
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	85 c0                	test   eax,eax
c00113ab:	75 c1                	jne    c001136e <x87EmulHandler(regs*, void*)+0xd>
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	68 bd 1b 02 c0       	push   0xc0021bbd
c00113b5:	e8 53 dd ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00113ba:	58                   	pop    eax
c00113bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113bf:	e8 86 fb ff ff       	call   c0010f4a <displayDebugInfo(regs*)>

c00113c4 <gpFault(regs*, void*)>:
c00113c4:	53                   	push   ebx
c00113c5:	83 ec 14             	sub    esp,0x14
c00113c8:	c7 05 f0 44 02 c0 9f 96 01 c0 	mov    DWORD PTR ds:0xc00244f0,0xc001969f
c00113d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113d6:	53                   	push   ebx
c00113d7:	e8 c3 82 00 00       	call   c001969f <Vm::faultHandler(regs*)>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	84 c0                	test   al,al
c00113e1:	74 05                	je     c00113e8 <gpFault(regs*, void*)+0x24>
c00113e3:	83 c4 08             	add    esp,0x8
c00113e6:	5b                   	pop    ebx
c00113e7:	c3                   	ret    
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	68 bd 1b 02 c0       	push   0xc0021bbd
c00113f0:	e8 18 dd ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00113f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113f8:	e8 4d fb ff ff       	call   c0010f4a <displayDebugInfo(regs*)>

c00113fd <pgFault(regs*, void*)>:
c00113fd:	83 ec 18             	sub    esp,0x18
c0011400:	68 d8 1b 02 c0       	push   0xc0021bd8
c0011405:	e8 03 dd ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001140a:	58                   	pop    eax
c001140b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001140f:	e8 36 fb ff ff       	call   c0010f4a <displayDebugInfo(regs*)>

c0011414 <otherISRHandler(regs*, void*)>:
c0011414:	53                   	push   ebx
c0011415:	83 ec 0c             	sub    esp,0xc
c0011418:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001141c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001141f:	50                   	push   eax
c0011420:	50                   	push   eax
c0011421:	68 e5 1b 02 c0       	push   0xc0021be5
c0011426:	e8 e2 dc ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001142b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001142e:	e8 17 fb ff ff       	call   c0010f4a <displayDebugInfo(regs*)>

c0011433 <opcodeFault(regs*, void*)>:
c0011433:	55                   	push   ebp
c0011434:	89 e5                	mov    ebp,esp
c0011436:	56                   	push   esi
c0011437:	53                   	push   ebx
c0011438:	83 ec 40             	sub    esp,0x40
c001143b:	e8 16 33 00 00       	call   c0014756 <thisCPU()>
c0011440:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011446:	84 c0                	test   al,al
c0011448:	74 24                	je     c001146e <opcodeFault(regs*, void*)+0x3b>
c001144a:	83 ec 0c             	sub    esp,0xc
c001144d:	68 04 1c 02 c0       	push   0xc0021c04
c0011452:	e8 b6 dc ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011460:	8d 50 19             	lea    edx,[eax+0x19]
c0011463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011466:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011469:	e9 77 05 00 00       	jmp    c00119e5 <opcodeFault(regs*, void*)+0x5b2>
c001146e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011474:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011477:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001147b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001147f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011482:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011485:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001148b:	8a 00                	mov    al,BYTE PTR [eax]
c001148d:	3c f0                	cmp    al,0xf0
c001148f:	75 17                	jne    c00114a8 <opcodeFault(regs*, void*)+0x75>
c0011491:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011497:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001149a:	8d 50 01             	lea    edx,[eax+0x1]
c001149d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114a3:	e9 da 00 00 00       	jmp    c0011582 <opcodeFault(regs*, void*)+0x14f>
c00114a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114ab:	8a 00                	mov    al,BYTE PTR [eax]
c00114ad:	3c f2                	cmp    al,0xf2
c00114af:	74 09                	je     c00114ba <opcodeFault(regs*, void*)+0x87>
c00114b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114b4:	8a 00                	mov    al,BYTE PTR [eax]
c00114b6:	3c f3                	cmp    al,0xf3
c00114b8:	75 1b                	jne    c00114d5 <opcodeFault(regs*, void*)+0xa2>
c00114ba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114c7:	8d 50 01             	lea    edx,[eax+0x1]
c00114ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114d0:	e9 ad 00 00 00       	jmp    c0011582 <opcodeFault(regs*, void*)+0x14f>
c00114d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114d8:	8a 00                	mov    al,BYTE PTR [eax]
c00114da:	3c 66                	cmp    al,0x66
c00114dc:	75 1f                	jne    c00114fd <opcodeFault(regs*, void*)+0xca>
c00114de:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114e2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00114e6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114ef:	8d 50 01             	lea    edx,[eax+0x1]
c00114f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114f8:	e9 85 00 00 00       	jmp    c0011582 <opcodeFault(regs*, void*)+0x14f>
c00114fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011500:	8a 00                	mov    al,BYTE PTR [eax]
c0011502:	3c 67                	cmp    al,0x67
c0011504:	75 18                	jne    c001151e <opcodeFault(regs*, void*)+0xeb>
c0011506:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001150a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001150d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011510:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011513:	8d 50 01             	lea    edx,[eax+0x1]
c0011516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011519:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001151c:	eb 64                	jmp    c0011582 <opcodeFault(regs*, void*)+0x14f>
c001151e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011521:	8a 00                	mov    al,BYTE PTR [eax]
c0011523:	3c 2e                	cmp    al,0x2e
c0011525:	74 09                	je     c0011530 <opcodeFault(regs*, void*)+0xfd>
c0011527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001152a:	8a 00                	mov    al,BYTE PTR [eax]
c001152c:	3c 3e                	cmp    al,0x3e
c001152e:	75 18                	jne    c0011548 <opcodeFault(regs*, void*)+0x115>
c0011530:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011534:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001153d:	8d 50 01             	lea    edx,[eax+0x1]
c0011540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011543:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011546:	eb 3a                	jmp    c0011582 <opcodeFault(regs*, void*)+0x14f>
c0011548:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001154b:	8a 00                	mov    al,BYTE PTR [eax]
c001154d:	3c 36                	cmp    al,0x36
c001154f:	74 1b                	je     c001156c <opcodeFault(regs*, void*)+0x139>
c0011551:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011554:	8a 00                	mov    al,BYTE PTR [eax]
c0011556:	3c 26                	cmp    al,0x26
c0011558:	74 12                	je     c001156c <opcodeFault(regs*, void*)+0x139>
c001155a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001155d:	8a 00                	mov    al,BYTE PTR [eax]
c001155f:	3c 64                	cmp    al,0x64
c0011561:	74 09                	je     c001156c <opcodeFault(regs*, void*)+0x139>
c0011563:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011566:	8a 00                	mov    al,BYTE PTR [eax]
c0011568:	3c 65                	cmp    al,0x65
c001156a:	75 16                	jne    c0011582 <opcodeFault(regs*, void*)+0x14f>
c001156c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011570:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011576:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011579:	8d 50 01             	lea    edx,[eax+0x1]
c001157c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011585:	8a 00                	mov    al,BYTE PTR [eax]
c0011587:	3c 0f                	cmp    al,0xf
c0011589:	0f 85 ad 00 00 00    	jne    c001163c <opcodeFault(regs*, void*)+0x209>
c001158f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011592:	40                   	inc    eax
c0011593:	8a 00                	mov    al,BYTE PTR [eax]
c0011595:	3c c2                	cmp    al,0xc2
c0011597:	74 0e                	je     c00115a7 <opcodeFault(regs*, void*)+0x174>
c0011599:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159c:	40                   	inc    eax
c001159d:	8a 00                	mov    al,BYTE PTR [eax]
c001159f:	3c c3                	cmp    al,0xc3
c00115a1:	0f 85 95 00 00 00    	jne    c001163c <opcodeFault(regs*, void*)+0x209>
c00115a7:	83 ec 0c             	sub    esp,0xc
c00115aa:	68 27 1c 02 c0       	push   0xc0021c27
c00115af:	e8 59 db ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115bd:	8d 50 01             	lea    edx,[eax+0x1]
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115cc:	8a 00                	mov    al,BYTE PTR [eax]
c00115ce:	8d 50 fe             	lea    edx,[eax-0x2]
c00115d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d4:	88 10                	mov    BYTE PTR [eax],dl
c00115d6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00115d9:	50                   	push   eax
c00115da:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00115dd:	50                   	push   eax
c00115de:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00115e1:	50                   	push   eax
c00115e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00115e5:	e8 f4 40 00 00       	call   c00156de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00115ea:	83 c4 10             	add    esp,0x10
c00115ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115f3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00115f6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00115f9:	01 d0                	add    eax,edx
c00115fb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011604:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011607:	48                   	dec    eax
c0011608:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001160b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011611:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011617:	83 ec 04             	sub    esp,0x4
c001161a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001161d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011620:	50                   	push   eax
c0011621:	e8 2a eb fe ff       	call   c0000150 <voodooXADD>
c0011626:	83 c4 10             	add    esp,0x10
c0011629:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001162c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001162f:	01 c2                	add    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011637:	e9 a9 03 00 00       	jmp    c00119e5 <opcodeFault(regs*, void*)+0x5b2>
c001163c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001163f:	8a 00                	mov    al,BYTE PTR [eax]
c0011641:	3c 0f                	cmp    al,0xf
c0011643:	0f 85 8b 01 00 00    	jne    c00117d4 <opcodeFault(regs*, void*)+0x3a1>
c0011649:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001164c:	40                   	inc    eax
c001164d:	8a 00                	mov    al,BYTE PTR [eax]
c001164f:	3c c7                	cmp    al,0xc7
c0011651:	0f 86 7d 01 00 00    	jbe    c00117d4 <opcodeFault(regs*, void*)+0x3a1>
c0011657:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001165a:	40                   	inc    eax
c001165b:	8a 00                	mov    al,BYTE PTR [eax]
c001165d:	3c cf                	cmp    al,0xcf
c001165f:	0f 87 6f 01 00 00    	ja     c00117d4 <opcodeFault(regs*, void*)+0x3a1>
c0011665:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011668:	40                   	inc    eax
c0011669:	8a 00                	mov    al,BYTE PTR [eax]
c001166b:	83 c0 38             	add    eax,0x38
c001166e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011671:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011675:	75 0b                	jne    c0011682 <opcodeFault(regs*, void*)+0x24f>
c0011677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001167d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011680:	eb 75                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c0011682:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011686:	75 0b                	jne    c0011693 <opcodeFault(regs*, void*)+0x260>
c0011688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001168e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011691:	eb 64                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c0011693:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011697:	75 0b                	jne    c00116a4 <opcodeFault(regs*, void*)+0x271>
c0011699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001169f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116a2:	eb 53                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116a4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116a8:	75 0b                	jne    c00116b5 <opcodeFault(regs*, void*)+0x282>
c00116aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116b3:	eb 42                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116b5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116b9:	75 0b                	jne    c00116c6 <opcodeFault(regs*, void*)+0x293>
c00116bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116be:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00116c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116c4:	eb 31                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116c6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00116ca:	75 0b                	jne    c00116d7 <opcodeFault(regs*, void*)+0x2a4>
c00116cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00116d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116d5:	eb 20                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116d7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00116db:	75 0b                	jne    c00116e8 <opcodeFault(regs*, void*)+0x2b5>
c00116dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00116e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116e6:	eb 0f                	jmp    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116e8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00116ec:	75 09                	jne    c00116f7 <opcodeFault(regs*, void*)+0x2c4>
c00116ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00116f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f7:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00116fb:	74 10                	je     c001170d <opcodeFault(regs*, void*)+0x2da>
c00116fd:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011704:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001170b:	eb 2d                	jmp    c001173a <opcodeFault(regs*, void*)+0x307>
c001170d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011710:	c1 e0 18             	shl    eax,0x18
c0011713:	89 c2                	mov    edx,eax
c0011715:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011718:	c1 e0 08             	shl    eax,0x8
c001171b:	25 00 00 ff 00       	and    eax,0xff0000
c0011720:	09 c2                	or     edx,eax
c0011722:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011725:	c1 e8 08             	shr    eax,0x8
c0011728:	25 00 ff 00 00       	and    eax,0xff00
c001172d:	09 c2                	or     edx,eax
c001172f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011732:	c1 e8 18             	shr    eax,0x18
c0011735:	09 d0                	or     eax,edx
c0011737:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001173a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001173e:	75 0b                	jne    c001174b <opcodeFault(regs*, void*)+0x318>
c0011740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011743:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011746:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011749:	eb 75                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c001174b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001174f:	75 0b                	jne    c001175c <opcodeFault(regs*, void*)+0x329>
c0011751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011754:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011757:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001175a:	eb 64                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c001175c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011760:	75 0b                	jne    c001176d <opcodeFault(regs*, void*)+0x33a>
c0011762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011765:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011768:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001176b:	eb 53                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c001176d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011771:	75 0b                	jne    c001177e <opcodeFault(regs*, void*)+0x34b>
c0011773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011776:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011779:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001177c:	eb 42                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c001177e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0011782:	75 0b                	jne    c001178f <opcodeFault(regs*, void*)+0x35c>
c0011784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011787:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001178a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001178d:	eb 31                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c001178f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011793:	75 0b                	jne    c00117a0 <opcodeFault(regs*, void*)+0x36d>
c0011795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011798:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001179b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001179e:	eb 20                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c00117a0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117a4:	75 0b                	jne    c00117b1 <opcodeFault(regs*, void*)+0x37e>
c00117a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00117af:	eb 0f                	jmp    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c00117b1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117b5:	75 09                	jne    c00117c0 <opcodeFault(regs*, void*)+0x38d>
c00117b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00117c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117c6:	8d 50 02             	lea    edx,[eax+0x2]
c00117c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117cf:	e9 11 02 00 00       	jmp    c00119e5 <opcodeFault(regs*, void*)+0x5b2>
c00117d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117d7:	8a 00                	mov    al,BYTE PTR [eax]
c00117d9:	3c 0f                	cmp    al,0xf
c00117db:	0f 85 76 01 00 00    	jne    c0011957 <opcodeFault(regs*, void*)+0x524>
c00117e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117e4:	40                   	inc    eax
c00117e5:	8a 00                	mov    al,BYTE PTR [eax]
c00117e7:	3c c7                	cmp    al,0xc7
c00117e9:	0f 85 68 01 00 00    	jne    c0011957 <opcodeFault(regs*, void*)+0x524>
c00117ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00117f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117f8:	8d 50 01             	lea    edx,[eax+0x1]
c00117fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011801:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011804:	50                   	push   eax
c0011805:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011808:	50                   	push   eax
c0011809:	8d 45 bc             	lea    eax,[ebp-0x44]
c001180c:	50                   	push   eax
c001180d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011810:	e8 c9 3e 00 00       	call   c00156de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001181b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001181e:	83 f0 01             	xor    eax,0x1
c0011821:	84 c0                	test   al,al
c0011823:	0f 84 2e 01 00 00    	je     c0011957 <opcodeFault(regs*, void*)+0x524>
c0011829:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001182c:	3c 01                	cmp    al,0x1
c001182e:	0f 85 23 01 00 00    	jne    c0011957 <opcodeFault(regs*, void*)+0x524>
c0011834:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011837:	83 f0 01             	xor    eax,0x1
c001183a:	84 c0                	test   al,al
c001183c:	0f 84 15 01 00 00    	je     c0011957 <opcodeFault(regs*, void*)+0x524>
c0011842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011845:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011848:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001184b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011852:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011855:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011858:	89 c2                	mov    edx,eax
c001185a:	b8 00 00 00 00       	mov    eax,0x0
c001185f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011862:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011868:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001186b:	ba 00 00 00 00       	mov    edx,0x0
c0011870:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011873:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011879:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001187c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001187f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0011886:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011889:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001188c:	89 c2                	mov    edx,eax
c001188e:	b8 00 00 00 00       	mov    eax,0x0
c0011893:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011896:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0011899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001189f:	ba 00 00 00 00       	mov    edx,0x0
c00118a4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118a7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00118aa:	e8 7d 6f 00 00       	call   c001882c <lockScheduler()>
c00118af:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b7:	89 c1                	mov    ecx,eax
c00118b9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00118bc:	89 cb                	mov    ebx,ecx
c00118be:	89 d0                	mov    eax,edx
c00118c0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00118c3:	89 c6                	mov    esi,eax
c00118c5:	89 f0                	mov    eax,esi
c00118c7:	09 d8                	or     eax,ebx
c00118c9:	85 c0                	test   eax,eax
c00118cb:	75 21                	jne    c00118ee <opcodeFault(regs*, void*)+0x4bb>
c00118cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00118d0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118d3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118d6:	89 01                	mov    DWORD PTR [ecx],eax
c00118d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00118db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e1:	83 c8 40             	or     eax,0x40
c00118e4:	89 c2                	mov    edx,eax
c00118e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00118ec:	eb 3e                	jmp    c001192c <opcodeFault(regs*, void*)+0x4f9>
c00118ee:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118f9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118fc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00118ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011902:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011905:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011908:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001190b:	89 d0                	mov    eax,edx
c001190d:	31 d2                	xor    edx,edx
c001190f:	89 c3                	mov    ebx,eax
c0011911:	89 d6                	mov    esi,edx
c0011913:	89 da                	mov    edx,ebx
c0011915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011918:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011921:	83 e0 bf             	and    eax,0xffffffbf
c0011924:	89 c2                	mov    edx,eax
c0011926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011929:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001192c:	e8 fd 6e 00 00       	call   c001882e <unlockScheduler()>
c0011931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011934:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011937:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001193a:	01 c2                	add    edx,eax
c001193c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011942:	83 ec 0c             	sub    esp,0xc
c0011945:	68 36 1c 02 c0       	push   0xc0021c36
c001194a:	e8 be d7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001194f:	83 c4 10             	add    esp,0x10
c0011952:	e9 8e 00 00 00       	jmp    c00119e5 <opcodeFault(regs*, void*)+0x5b2>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 49 1c 02 c0       	push   0xc0021c49
c001195f:	e8 a9 d7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011970:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011973:	c1 e0 04             	shl    eax,0x4
c0011976:	01 d0                	add    eax,edx
c0011978:	83 c0 03             	add    eax,0x3
c001197b:	8a 00                	mov    al,BYTE PTR [eax]
c001197d:	0f b6 d8             	movzx  ebx,al
c0011980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011983:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011989:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001198c:	c1 e0 04             	shl    eax,0x4
c001198f:	01 d0                	add    eax,edx
c0011991:	83 c0 02             	add    eax,0x2
c0011994:	8a 00                	mov    al,BYTE PTR [eax]
c0011996:	0f b6 c8             	movzx  ecx,al
c0011999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001199f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a5:	c1 e0 04             	shl    eax,0x4
c00119a8:	01 d0                	add    eax,edx
c00119aa:	40                   	inc    eax
c00119ab:	8a 00                	mov    al,BYTE PTR [eax]
c00119ad:	0f b6 d0             	movzx  edx,al
c00119b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00119b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119bc:	c1 e0 04             	shl    eax,0x4
c00119bf:	01 f0                	add    eax,esi
c00119c1:	8a 00                	mov    al,BYTE PTR [eax]
c00119c3:	0f b6 c0             	movzx  eax,al
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	53                   	push   ebx
c00119ca:	51                   	push   ecx
c00119cb:	52                   	push   edx
c00119cc:	50                   	push   eax
c00119cd:	68 5c 1c 02 c0       	push   0xc0021c5c
c00119d2:	e8 36 d7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00119d7:	83 c4 20             	add    esp,0x20
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00119e0:	e8 65 f5 ff ff       	call   c0010f4a <displayDebugInfo(regs*)>
c00119e5:	8d 65 f8             	lea    esp,[ebp-0x8]
c00119e8:	5b                   	pop    ebx
c00119e9:	5e                   	pop    esi
c00119ea:	5d                   	pop    ebp
c00119eb:	c3                   	ret    

c00119ec <displayProgramFault(char const*)>:
c00119ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00119fa:	85 c0                	test   eax,eax
c00119fc:	74 15                	je     c0011a13 <displayProgramFault(char const*)+0x27>
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	6a 04                	push   0x4
c0011a03:	6a 0f                	push   0xf
c0011a05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a09:	50                   	push   eax
c0011a0a:	e8 23 ba ff ff       	call   c000d432 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a0f:	83 c4 1c             	add    esp,0x1c
c0011a12:	c3                   	ret    
c0011a13:	c3                   	ret    

c0011a14 <setupInterruptController()>:
c0011a14:	55                   	push   ebp
c0011a15:	89 e5                	mov    ebp,esp
c0011a17:	53                   	push   ebx
c0011a18:	83 ec 14             	sub    esp,0x14
c0011a1b:	e8 33 2d 00 00       	call   c0014753 <getCPUNumber()>
c0011a20:	85 c0                	test   eax,eax
c0011a22:	0f 95 c0             	setne  al
c0011a25:	84 c0                	test   al,al
c0011a27:	74 56                	je     c0011a7f <setupInterruptController()+0x6b>
c0011a29:	83 ec 0c             	sub    esp,0xc
c0011a2c:	68 58 21 00 00       	push   0x2158
c0011a31:	e8 e8 d5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	89 c3                	mov    ebx,eax
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	53                   	push   ebx
c0011a3f:	e8 96 c7 00 00       	call   c001e1da <APIC::APIC()>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a4a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a52:	83 c0 08             	add    eax,0x8
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	6a 00                	push   0x0
c0011a59:	6a 00                	push   0x0
c0011a5b:	6a 00                	push   0x0
c0011a5d:	52                   	push   edx
c0011a5e:	ff d0                	call   eax
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0011a68:	83 ec 08             	sub    esp,0x8
c0011a6b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a6e:	50                   	push   eax
c0011a6f:	e8 a4 ea ff ff       	call   c0010518 <Device::addChild(Device*)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a7a:	e9 48 03 00 00       	jmp    c0011dc7 <setupInterruptController()+0x3b3>
c0011a7f:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0011a84:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a8a:	83 e0 01             	and    eax,0x1
c0011a8d:	84 c0                	test   al,al
c0011a8f:	0f 95 c0             	setne  al
c0011a92:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011a95:	83 ec 0c             	sub    esp,0xc
c0011a98:	68 58 21 00 00       	push   0x2158
c0011a9d:	e8 7c d5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	89 c3                	mov    ebx,eax
c0011aa7:	83 ec 0c             	sub    esp,0xc
c0011aaa:	53                   	push   ebx
c0011aab:	e8 ec cb 00 00       	call   c001e69c <PIC::PIC()>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011ab6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ab9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011abe:	83 c0 08             	add    eax,0x8
c0011ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac3:	6a 00                	push   0x0
c0011ac5:	6a 00                	push   0x0
c0011ac7:	6a 00                	push   0x0
c0011ac9:	52                   	push   edx
c0011aca:	ff d0                	call   eax
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011ad3:	74 6e                	je     c0011b43 <setupInterruptController()+0x12f>
c0011ad5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011add:	83 c0 0c             	add    eax,0xc
c0011ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae2:	6a 00                	push   0x0
c0011ae4:	6a 00                	push   0x0
c0011ae6:	6a 00                	push   0x0
c0011ae8:	52                   	push   edx
c0011ae9:	ff d0                	call   eax
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011af2:	74 15                	je     c0011b09 <setupInterruptController()+0xf5>
c0011af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af9:	83 c0 04             	add    eax,0x4
c0011afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b04:	ff d0                	call   eax
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	68 58 21 00 00       	push   0x2158
c0011b11:	e8 08 d5 ff ff       	call   c000f01e <operator new(unsigned long)>
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	89 c3                	mov    ebx,eax
c0011b1b:	83 ec 0c             	sub    esp,0xc
c0011b1e:	53                   	push   ebx
c0011b1f:	e8 b6 c6 00 00       	call   c001e1da <APIC::APIC()>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b32:	83 c0 08             	add    eax,0x8
c0011b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b37:	6a 00                	push   0x0
c0011b39:	6a 00                	push   0x0
c0011b3b:	6a 00                	push   0x0
c0011b3d:	52                   	push   edx
c0011b3e:	ff d0                	call   eax
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0011b48:	83 ec 08             	sub    esp,0x8
c0011b4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b4e:	50                   	push   eax
c0011b4f:	e8 c4 e9 ff ff       	call   c0010518 <Device::addChild(Device*)>
c0011b54:	83 c4 10             	add    esp,0x10
c0011b57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5c:	83 c0 24             	add    eax,0x24
c0011b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b61:	6a 00                	push   0x0
c0011b63:	68 14 14 01 c0       	push   0xc0011414
c0011b68:	6a 00                	push   0x0
c0011b6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b6d:	ff d0                	call   eax
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b77:	83 c0 24             	add    eax,0x24
c0011b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7c:	6a 00                	push   0x0
c0011b7e:	68 14 14 01 c0       	push   0xc0011414
c0011b83:	6a 01                	push   0x1
c0011b85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b88:	ff d0                	call   eax
c0011b8a:	83 c4 10             	add    esp,0x10
c0011b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b92:	83 c0 24             	add    eax,0x24
c0011b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b97:	6a 00                	push   0x0
c0011b99:	68 ad 0d 01 c0       	push   0xc0010dad
c0011b9e:	6a 02                	push   0x2
c0011ba0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ba3:	ff d0                	call   eax
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bad:	83 c0 24             	add    eax,0x24
c0011bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb2:	6a 00                	push   0x0
c0011bb4:	68 14 14 01 c0       	push   0xc0011414
c0011bb9:	6a 03                	push   0x3
c0011bbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bbe:	ff d0                	call   eax
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc8:	83 c0 24             	add    eax,0x24
c0011bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcd:	6a 00                	push   0x0
c0011bcf:	68 14 14 01 c0       	push   0xc0011414
c0011bd4:	6a 04                	push   0x4
c0011bd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bd9:	ff d0                	call   eax
c0011bdb:	83 c4 10             	add    esp,0x10
c0011bde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be3:	83 c0 24             	add    eax,0x24
c0011be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be8:	6a 00                	push   0x0
c0011bea:	68 14 14 01 c0       	push   0xc0011414
c0011bef:	6a 05                	push   0x5
c0011bf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bf4:	ff d0                	call   eax
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfe:	83 c0 24             	add    eax,0x24
c0011c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c03:	6a 00                	push   0x0
c0011c05:	68 33 14 01 c0       	push   0xc0011433
c0011c0a:	6a 06                	push   0x6
c0011c0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c0f:	ff d0                	call   eax
c0011c11:	83 c4 10             	add    esp,0x10
c0011c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c19:	83 c0 24             	add    eax,0x24
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	6a 00                	push   0x0
c0011c20:	68 61 13 01 c0       	push   0xc0011361
c0011c25:	6a 07                	push   0x7
c0011c27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c2a:	ff d0                	call   eax
c0011c2c:	83 c4 10             	add    esp,0x10
c0011c2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c34:	83 c0 24             	add    eax,0x24
c0011c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c39:	6a 00                	push   0x0
c0011c3b:	68 c8 0b 01 c0       	push   0xc0010bc8
c0011c40:	6a 08                	push   0x8
c0011c42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c45:	ff d0                	call   eax
c0011c47:	83 c4 10             	add    esp,0x10
c0011c4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4f:	83 c0 24             	add    eax,0x24
c0011c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c54:	6a 00                	push   0x0
c0011c56:	68 14 14 01 c0       	push   0xc0011414
c0011c5b:	6a 09                	push   0x9
c0011c5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c60:	ff d0                	call   eax
c0011c62:	83 c4 10             	add    esp,0x10
c0011c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6a:	83 c0 24             	add    eax,0x24
c0011c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6f:	6a 00                	push   0x0
c0011c71:	68 14 14 01 c0       	push   0xc0011414
c0011c76:	6a 0a                	push   0xa
c0011c78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7b:	ff d0                	call   eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c85:	83 c0 24             	add    eax,0x24
c0011c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8a:	6a 00                	push   0x0
c0011c8c:	68 14 14 01 c0       	push   0xc0011414
c0011c91:	6a 0b                	push   0xb
c0011c93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c96:	ff d0                	call   eax
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca0:	83 c0 24             	add    eax,0x24
c0011ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca5:	6a 00                	push   0x0
c0011ca7:	68 14 14 01 c0       	push   0xc0011414
c0011cac:	6a 0c                	push   0xc
c0011cae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb1:	ff d0                	call   eax
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbb:	83 c0 24             	add    eax,0x24
c0011cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc0:	6a 00                	push   0x0
c0011cc2:	68 c4 13 01 c0       	push   0xc00113c4
c0011cc7:	6a 0d                	push   0xd
c0011cc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ccc:	ff d0                	call   eax
c0011cce:	83 c4 10             	add    esp,0x10
c0011cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd6:	83 c0 24             	add    eax,0x24
c0011cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cdb:	6a 00                	push   0x0
c0011cdd:	68 fd 13 01 c0       	push   0xc00113fd
c0011ce2:	6a 0e                	push   0xe
c0011ce4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ce7:	ff d0                	call   eax
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf1:	83 c0 24             	add    eax,0x24
c0011cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf6:	6a 00                	push   0x0
c0011cf8:	68 14 14 01 c0       	push   0xc0011414
c0011cfd:	6a 0f                	push   0xf
c0011cff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d02:	ff d0                	call   eax
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0c:	83 c0 24             	add    eax,0x24
c0011d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d11:	6a 00                	push   0x0
c0011d13:	68 14 14 01 c0       	push   0xc0011414
c0011d18:	6a 10                	push   0x10
c0011d1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d1d:	ff d0                	call   eax
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d27:	83 c0 24             	add    eax,0x24
c0011d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2c:	6a 00                	push   0x0
c0011d2e:	68 14 14 01 c0       	push   0xc0011414
c0011d33:	6a 11                	push   0x11
c0011d35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d38:	ff d0                	call   eax
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d42:	83 c0 24             	add    eax,0x24
c0011d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d47:	6a 00                	push   0x0
c0011d49:	68 14 14 01 c0       	push   0xc0011414
c0011d4e:	6a 12                	push   0x12
c0011d50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d53:	ff d0                	call   eax
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5d:	83 c0 24             	add    eax,0x24
c0011d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d62:	6a 00                	push   0x0
c0011d64:	68 14 14 01 c0       	push   0xc0011414
c0011d69:	6a 13                	push   0x13
c0011d6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d6e:	ff d0                	call   eax
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d78:	83 c0 24             	add    eax,0x24
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	6a 00                	push   0x0
c0011d7f:	68 14 14 01 c0       	push   0xc0011414
c0011d84:	6a 14                	push   0x14
c0011d86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d89:	ff d0                	call   eax
c0011d8b:	83 c4 10             	add    esp,0x10
c0011d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d93:	83 c0 24             	add    eax,0x24
c0011d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d98:	6a 00                	push   0x0
c0011d9a:	68 14 14 01 c0       	push   0xc0011414
c0011d9f:	6a 1e                	push   0x1e
c0011da1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da4:	ff d0                	call   eax
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dae:	83 c0 24             	add    eax,0x24
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	6a 00                	push   0x0
c0011db5:	68 42 72 01 c0       	push   0xc0017242
c0011dba:	6a 60                	push   0x60
c0011dbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dbf:	ff d0                	call   eax
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dc7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011dca:	c9                   	leave  
c0011dcb:	c3                   	ret    

c0011dcc <InterruptController::convertLegacyIRQNumber(int)>:
c0011dcc:	55                   	push   ebp
c0011dcd:	89 e5                	mov    ebp,esp
c0011dcf:	83 ec 08             	sub    esp,0x8
c0011dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011dd5:	83 ec 0c             	sub    esp,0xc
c0011dd8:	50                   	push   eax
c0011dd9:	e8 1c ea ff ff       	call   c00107fa <Device::getName()>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	8a 00                	mov    al,BYTE PTR [eax]
c0011de3:	3c 41                	cmp    al,0x41
c0011de5:	0f 94 c0             	sete   al
c0011de8:	84 c0                	test   al,al
c0011dea:	74 28                	je     c0011e14 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011dec:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011df0:	7f 12                	jg     c0011e04 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011df2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011df5:	05 c0 3a 02 c0       	add    eax,0xc0023ac0
c0011dfa:	8a 00                	mov    al,BYTE PTR [eax]
c0011dfc:	0f b6 c0             	movzx  eax,al
c0011dff:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e02:	eb 10                	jmp    c0011e14 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	68 d4 19 02 c0       	push   0xc00219d4
c0011e0c:	e8 c7 3a 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e17:	c9                   	leave  
c0011e18:	c3                   	ret    
c0011e19:	90                   	nop

c0011e1a <startGUI(void*)>:
c0011e1a:	55                   	push   ebp
c0011e1b:	89 e5                	mov    ebp,esp
c0011e1d:	53                   	push   ebx
c0011e1e:	83 ec 04             	sub    esp,0x4
c0011e21:	e8 08 6a 00 00       	call   c001882e <unlockScheduler()>
c0011e26:	e8 ec 69 00 00       	call   c0018817 <getIRQNestingLevel()>
c0011e2b:	83 ec 08             	sub    esp,0x8
c0011e2e:	50                   	push   eax
c0011e2f:	68 c4 1c 02 c0       	push   0xc0021cc4
c0011e34:	e8 d4 d2 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	6a 01                	push   0x1
c0011e47:	68 de 1c 02 c0       	push   0xc0021cde
c0011e4c:	e8 0a 64 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0011e51:	83 c4 10             	add    esp,0x10
c0011e54:	83 ec 08             	sub    esp,0x8
c0011e57:	53                   	push   ebx
c0011e58:	50                   	push   eax
c0011e59:	e8 c3 65 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c0011e5e:	83 c4 10             	add    esp,0x10
c0011e61:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c0011e67:	83 ec 08             	sub    esp,0x8
c0011e6a:	6a 01                	push   0x1
c0011e6c:	68 f8 1c 02 c0       	push   0xc0021cf8
c0011e71:	e8 e5 63 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0011e76:	83 c4 10             	add    esp,0x10
c0011e79:	83 ec 08             	sub    esp,0x8
c0011e7c:	53                   	push   ebx
c0011e7d:	50                   	push   eax
c0011e7e:	e8 9e 65 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c0011e83:	83 c4 10             	add    esp,0x10
c0011e86:	90                   	nop
c0011e87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e8a:	c9                   	leave  
c0011e8b:	c3                   	ret    

c0011e8c <sendKeyToTerminal(unsigned char)>:
c0011e8c:	55                   	push   ebp
c0011e8d:	89 e5                	mov    ebp,esp
c0011e8f:	83 ec 28             	sub    esp,0x28
c0011e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e95:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011e98:	a1 24 44 02 c0       	mov    eax,ds:0xc0024424
c0011e9d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011ea1:	83 ec 08             	sub    esp,0x8
c0011ea4:	52                   	push   edx
c0011ea5:	50                   	push   eax
c0011ea6:	e8 c3 ba ff ff       	call   c000d96e <VgaText::receiveKey(unsigned char)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011eb2:	75 41                	jne    c0011ef5 <sendKeyToTerminal(unsigned char)+0x69>
c0011eb4:	e8 9a 69 00 00       	call   c0018853 <lockStuff()>
c0011eb9:	a1 00 45 02 c0       	mov    eax,ds:0xc0024500
c0011ebe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ec1:	c7 05 00 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024500,0x0
c0011ecb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011ecf:	74 1f                	je     c0011ef0 <sendKeyToTerminal(unsigned char)+0x64>
c0011ed1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ed4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ed7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011eda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011edd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ee6:	e8 51 6f 00 00       	call   c0018e3c <unblockTask(ThreadControlBlock*)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	eb db                	jmp    c0011ecb <sendKeyToTerminal(unsigned char)+0x3f>
c0011ef0:	e8 f0 6c 00 00       	call   c0018be5 <unlockStuff()>
c0011ef5:	90                   	nop
c0011ef6:	c9                   	leave  
c0011ef7:	c3                   	ret    

c0011ef8 <sendKeyboardToken(KeyboardToken)>:
c0011ef8:	55                   	push   ebp
c0011ef9:	89 e5                	mov    ebp,esp
c0011efb:	83 ec 18             	sub    esp,0x18
c0011efe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f04:	0f b7 c0             	movzx  eax,ax
c0011f07:	83 f2 01             	xor    edx,0x1
c0011f0a:	88 90 20 45 02 c0    	mov    BYTE PTR [eax-0x3ffdbae0],dl
c0011f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f13:	66 3d 03 02          	cmp    ax,0x203
c0011f17:	75 07                	jne    c0011f20 <sendKeyboardToken(KeyboardToken)+0x28>
c0011f19:	a0 20 46 02 c0       	mov    al,ds:0xc0024620
c0011f1e:	84 c0                	test   al,al
c0011f20:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f24:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f27:	a0 28 49 02 c0       	mov    al,ds:0xc0024928
c0011f2c:	38 c2                	cmp    dl,al
c0011f2e:	74 1c                	je     c0011f4c <sendKeyboardToken(KeyboardToken)+0x54>
c0011f30:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f33:	a2 28 49 02 c0       	mov    ds:0xc0024928,al
c0011f38:	a0 28 49 02 c0       	mov    al,ds:0xc0024928
c0011f3d:	0f b6 c0             	movzx  eax,al
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	50                   	push   eax
c0011f44:	e8 93 ac ff ff       	call   c000cbdc <setTerminalScrollLock(bool)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f4f:	84 c0                	test   al,al
c0011f51:	0f 84 ae 00 00 00    	je     c0012005 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f5a:	66 3d 10 03          	cmp    ax,0x310
c0011f5e:	75 06                	jne    c0011f66 <sendKeyboardToken(KeyboardToken)+0x6e>
c0011f60:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f69:	66 3d 11 03          	cmp    ax,0x311
c0011f6d:	75 06                	jne    c0011f75 <sendKeyboardToken(KeyboardToken)+0x7d>
c0011f6f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f78:	66 3d 12 03          	cmp    ax,0x312
c0011f7c:	75 06                	jne    c0011f84 <sendKeyboardToken(KeyboardToken)+0x8c>
c0011f7e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f87:	66 3d 13 03          	cmp    ax,0x313
c0011f8b:	75 06                	jne    c0011f93 <sendKeyboardToken(KeyboardToken)+0x9b>
c0011f8d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f96:	66 3d 14 03          	cmp    ax,0x314
c0011f9a:	75 06                	jne    c0011fa2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0011f9c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa5:	66 3d 15 03          	cmp    ax,0x315
c0011fa9:	75 06                	jne    c0011fb1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0011fab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb4:	66 3d 16 03          	cmp    ax,0x316
c0011fb8:	75 06                	jne    c0011fc0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0011fba:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc3:	66 3d 17 03          	cmp    ax,0x317
c0011fc7:	75 06                	jne    c0011fcf <sendKeyboardToken(KeyboardToken)+0xd7>
c0011fc9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd2:	66 3d 18 03          	cmp    ax,0x318
c0011fd6:	75 06                	jne    c0011fde <sendKeyboardToken(KeyboardToken)+0xe6>
c0011fd8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe1:	66 3d 19 03          	cmp    ax,0x319
c0011fe5:	75 06                	jne    c0011fed <sendKeyboardToken(KeyboardToken)+0xf5>
c0011fe7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff0:	66 3d 1a 03          	cmp    ax,0x31a
c0011ff4:	0f 85 c9 00 00 00    	jne    c00120c3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011ffa:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012000:	e9 be 00 00 00       	jmp    c00120c3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0012005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012008:	66 3d 10 03          	cmp    ax,0x310
c001200c:	75 0a                	jne    c0012018 <sendKeyboardToken(KeyboardToken)+0x120>
c001200e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012014:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001201b:	66 3d 11 03          	cmp    ax,0x311
c001201f:	75 0a                	jne    c001202b <sendKeyboardToken(KeyboardToken)+0x133>
c0012021:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012027:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001202b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001202e:	66 3d 12 03          	cmp    ax,0x312
c0012032:	75 0a                	jne    c001203e <sendKeyboardToken(KeyboardToken)+0x146>
c0012034:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001203a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001203e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012041:	66 3d 13 03          	cmp    ax,0x313
c0012045:	75 0a                	jne    c0012051 <sendKeyboardToken(KeyboardToken)+0x159>
c0012047:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001204d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012054:	66 3d 14 03          	cmp    ax,0x314
c0012058:	75 0a                	jne    c0012064 <sendKeyboardToken(KeyboardToken)+0x16c>
c001205a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012060:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012067:	66 3d 15 03          	cmp    ax,0x315
c001206b:	75 0a                	jne    c0012077 <sendKeyboardToken(KeyboardToken)+0x17f>
c001206d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012073:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207a:	66 3d 16 03          	cmp    ax,0x316
c001207e:	75 0a                	jne    c001208a <sendKeyboardToken(KeyboardToken)+0x192>
c0012080:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0012086:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208d:	66 3d 17 03          	cmp    ax,0x317
c0012091:	75 0a                	jne    c001209d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0012093:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0012099:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001209d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a0:	66 3d 18 03          	cmp    ax,0x318
c00120a4:	75 0a                	jne    c00120b0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00120a6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00120ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b3:	66 3d 19 03          	cmp    ax,0x319
c00120b7:	75 0a                	jne    c00120c3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00120b9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00120bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c6:	66 3d 00 02          	cmp    ax,0x200
c00120ca:	75 2a                	jne    c00120f6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120cc:	a0 20 49 02 c0       	mov    al,ds:0xc0024920
c00120d1:	83 f0 01             	xor    eax,0x1
c00120d4:	84 c0                	test   al,al
c00120d6:	74 1e                	je     c00120f6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120d8:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00120dd:	6a 01                	push   0x1
c00120df:	6a 00                	push   0x0
c00120e1:	68 1a 1e 01 c0       	push   0xc0011e1a
c00120e6:	50                   	push   eax
c00120e7:	e8 6a 68 00 00       	call   c0018956 <Process::createThread(void (*)(void*), void*, int)>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	c6 05 20 49 02 c0 01 	mov    BYTE PTR ds:0xc0024920,0x1
c00120f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f9:	66 3d 1d 03          	cmp    ax,0x31d
c00120fd:	75 06                	jne    c0012105 <sendKeyboardToken(KeyboardToken)+0x20d>
c00120ff:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012108:	66 3d 1c 03          	cmp    ax,0x31c
c001210c:	75 06                	jne    c0012114 <sendKeyboardToken(KeyboardToken)+0x21c>
c001210e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012117:	66 3d 1b 03          	cmp    ax,0x31b
c001211b:	75 06                	jne    c0012123 <sendKeyboardToken(KeyboardToken)+0x22b>
c001211d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012126:	66 3d 1e 03          	cmp    ax,0x31e
c001212a:	75 06                	jne    c0012132 <sendKeyboardToken(KeyboardToken)+0x23a>
c001212c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012135:	66 3d 1f 03          	cmp    ax,0x31f
c0012139:	75 06                	jne    c0012141 <sendKeyboardToken(KeyboardToken)+0x249>
c001213b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012144:	66 3d 1a 03          	cmp    ax,0x31a
c0012148:	75 06                	jne    c0012150 <sendKeyboardToken(KeyboardToken)+0x258>
c001214a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012150:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012154:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012157:	83 f0 01             	xor    eax,0x1
c001215a:	84 c0                	test   al,al
c001215c:	74 77                	je     c00121d5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001215e:	a0 21 46 02 c0       	mov    al,ds:0xc0024621
c0012163:	84 c0                	test   al,al
c0012165:	74 41                	je     c00121a8 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0012167:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001216b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001216f:	74 2b                	je     c001219c <sendKeyboardToken(KeyboardToken)+0x2a4>
c0012171:	8b 15 24 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024924
c0012177:	89 d0                	mov    eax,edx
c0012179:	c1 e0 02             	shl    eax,0x2
c001217c:	01 d0                	add    eax,edx
c001217e:	01 c0                	add    eax,eax
c0012180:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c0012185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012188:	0f b7 c0             	movzx  eax,ax
c001218b:	8d 50 d0             	lea    edx,[eax-0x30]
c001218e:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c0012193:	01 d0                	add    eax,edx
c0012195:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c001219a:	eb 6d                	jmp    c0012209 <sendKeyboardToken(KeyboardToken)+0x311>
c001219c:	c7 05 24 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024924,0x0
c00121a6:	eb 61                	jmp    c0012209 <sendKeyboardToken(KeyboardToken)+0x311>
c00121a8:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c00121ad:	85 c0                	test   eax,eax
c00121af:	74 18                	je     c00121c9 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00121b1:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c00121b6:	0f b6 c0             	movzx  eax,al
c00121b9:	83 ec 0c             	sub    esp,0xc
c00121bc:	50                   	push   eax
c00121bd:	e8 ca fc ff ff       	call   c0011e8c <sendKeyToTerminal(unsigned char)>
c00121c2:	83 c4 10             	add    esp,0x10
c00121c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121c9:	c7 05 24 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024924,0x0
c00121d3:	eb 34                	jmp    c0012209 <sendKeyboardToken(KeyboardToken)+0x311>
c00121d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121d8:	66 3d 01 01          	cmp    ax,0x101
c00121dc:	75 2b                	jne    c0012209 <sendKeyboardToken(KeyboardToken)+0x311>
c00121de:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c00121e3:	85 c0                	test   eax,eax
c00121e5:	74 18                	je     c00121ff <sendKeyboardToken(KeyboardToken)+0x307>
c00121e7:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c00121ec:	0f b6 c0             	movzx  eax,al
c00121ef:	83 ec 0c             	sub    esp,0xc
c00121f2:	50                   	push   eax
c00121f3:	e8 94 fc ff ff       	call   c0011e8c <sendKeyToTerminal(unsigned char)>
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121ff:	c7 05 24 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024924,0x0
c0012209:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001220c:	83 f0 01             	xor    eax,0x1
c001220f:	84 c0                	test   al,al
c0012211:	74 4c                	je     c001225f <sendKeyboardToken(KeyboardToken)+0x367>
c0012213:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012216:	83 f0 01             	xor    eax,0x1
c0012219:	84 c0                	test   al,al
c001221b:	74 42                	je     c001225f <sendKeyboardToken(KeyboardToken)+0x367>
c001221d:	a0 20 46 02 c0       	mov    al,ds:0xc0024620
c0012222:	83 f0 01             	xor    eax,0x1
c0012225:	84 c0                	test   al,al
c0012227:	74 36                	je     c001225f <sendKeyboardToken(KeyboardToken)+0x367>
c0012229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222c:	66 83 f8 1f          	cmp    ax,0x1f
c0012230:	76 09                	jbe    c001223b <sendKeyboardToken(KeyboardToken)+0x343>
c0012232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012235:	66 83 f8 7e          	cmp    ax,0x7e
c0012239:	76 12                	jbe    c001224d <sendKeyboardToken(KeyboardToken)+0x355>
c001223b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223e:	66 83 f8 0a          	cmp    ax,0xa
c0012242:	74 09                	je     c001224d <sendKeyboardToken(KeyboardToken)+0x355>
c0012244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012247:	66 83 f8 08          	cmp    ax,0x8
c001224b:	75 12                	jne    c001225f <sendKeyboardToken(KeyboardToken)+0x367>
c001224d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012250:	0f b6 c0             	movzx  eax,al
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	50                   	push   eax
c0012257:	e8 30 fc ff ff       	call   c0011e8c <sendKeyToTerminal(unsigned char)>
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012262:	83 f0 01             	xor    eax,0x1
c0012265:	84 c0                	test   al,al
c0012267:	74 4f                	je     c00122b8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012269:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001226c:	83 f0 01             	xor    eax,0x1
c001226f:	84 c0                	test   al,al
c0012271:	74 45                	je     c00122b8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012273:	a0 20 46 02 c0       	mov    al,ds:0xc0024620
c0012278:	84 c0                	test   al,al
c001227a:	74 3c                	je     c00122b8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001227c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001227f:	66 83 f8 3f          	cmp    ax,0x3f
c0012283:	76 33                	jbe    c00122b8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012288:	66 83 f8 7f          	cmp    ax,0x7f
c001228c:	77 2a                	ja     c00122b8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001228e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012291:	88 c2                	mov    dl,al
c0012293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012296:	66 83 f8 5f          	cmp    ax,0x5f
c001229a:	76 04                	jbe    c00122a0 <sendKeyboardToken(KeyboardToken)+0x3a8>
c001229c:	b0 20                	mov    al,0x20
c001229e:	eb 02                	jmp    c00122a2 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00122a0:	b0 00                	mov    al,0x0
c00122a2:	29 c2                	sub    edx,eax
c00122a4:	88 d0                	mov    al,dl
c00122a6:	83 e8 40             	sub    eax,0x40
c00122a9:	0f b6 c0             	movzx  eax,al
c00122ac:	83 ec 0c             	sub    esp,0xc
c00122af:	50                   	push   eax
c00122b0:	e8 d7 fb ff ff       	call   c0011e8c <sendKeyToTerminal(unsigned char)>
c00122b5:	83 c4 10             	add    esp,0x10
c00122b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122bb:	66 3d 00 03          	cmp    ax,0x300
c00122bf:	75 0f                	jne    c00122d0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122c1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122c4:	83 f0 01             	xor    eax,0x1
c00122c7:	84 c0                	test   al,al
c00122c9:	74 05                	je     c00122d0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122cb:	e8 33 b1 ff ff       	call   c000d403 <doTerminalCycle()>
c00122d0:	90                   	nop
c00122d1:	c9                   	leave  
c00122d2:	c3                   	ret    

c00122d3 <clearInternalKeybuffer(VgaText*)>:
c00122d3:	55                   	push   ebp
c00122d4:	89 e5                	mov    ebp,esp
c00122d6:	83 ec 08             	sub    esp,0x8
c00122d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122dc:	05 34 11 00 00       	add    eax,0x1134
c00122e1:	83 ec 0c             	sub    esp,0xc
c00122e4:	50                   	push   eax
c00122e5:	e8 ed e3 fe ff       	call   c00006d7 <strlen>
c00122ea:	83 c4 10             	add    esp,0x10
c00122ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00122f0:	81 c2 34 11 00 00    	add    edx,0x1134
c00122f6:	83 ec 04             	sub    esp,0x4
c00122f9:	50                   	push   eax
c00122fa:	6a 00                	push   0x0
c00122fc:	52                   	push   edx
c00122fd:	e8 b8 e3 fe ff       	call   c00006ba <memset>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	90                   	nop
c0012306:	c9                   	leave  
c0012307:	c3                   	ret    

c0012308 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012308:	55                   	push   ebp
c0012309:	89 e5                	mov    ebp,esp
c001230b:	83 ec 18             	sub    esp,0x18
c001230e:	fb                   	sti    
c001230f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012316:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001231a:	74 77                	je     c0012393 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001231c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001231f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012325:	84 c0                	test   al,al
c0012327:	75 02                	jne    c001232b <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012329:	eb f1                	jmp    c001231c <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001232b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001232e:	8d 50 01             	lea    edx,[eax+0x1]
c0012331:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012334:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012337:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001233d:	88 10                	mov    BYTE PTR [eax],dl
c001233f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012342:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012348:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001234b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234e:	05 34 11 00 00       	add    eax,0x1134
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	50                   	push   eax
c0012357:	e8 7b e3 fe ff       	call   c00006d7 <strlen>
c001235c:	83 c4 10             	add    esp,0x10
c001235f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012362:	81 c2 34 11 00 00    	add    edx,0x1134
c0012368:	8d 4a 01             	lea    ecx,[edx+0x1]
c001236b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001236e:	81 c2 34 11 00 00    	add    edx,0x1134
c0012374:	83 ec 04             	sub    esp,0x4
c0012377:	50                   	push   eax
c0012378:	51                   	push   ecx
c0012379:	52                   	push   edx
c001237a:	e8 cd e2 fe ff       	call   c000064c <memmove>
c001237f:	83 c4 10             	add    esp,0x10
c0012382:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0012385:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0012388:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001238c:	75 88                	jne    c0012316 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001238e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0012391:	eb 03                	jmp    c0012396 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0012393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0012396:	c9                   	leave  
c0012397:	c3                   	ret    

c0012398 <Keyboard::Keyboard(char const*)>:
c0012398:	83 ec 0c             	sub    esp,0xc
c001239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001239f:	83 ec 08             	sub    esp,0x8
c00123a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123a6:	50                   	push   eax
c00123a7:	e8 5c e3 ff ff       	call   c0010708 <Device::Device(char const*)>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c00123b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b8:	89 10                	mov    DWORD PTR [eax],edx
c00123ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123be:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00123c8:	c6 05 04 45 02 c0 01 	mov    BYTE PTR ds:0xc0024504,0x1
c00123cf:	90                   	nop
c00123d0:	83 c4 0c             	add    esp,0xc
c00123d3:	c3                   	ret    

c00123d4 <Keyboard::~Keyboard()>:
c00123d4:	83 ec 0c             	sub    esp,0xc
c00123d7:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c00123dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e0:	89 10                	mov    DWORD PTR [eax],edx
c00123e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e6:	83 ec 0c             	sub    esp,0xc
c00123e9:	50                   	push   eax
c00123ea:	e8 cb df ff ff       	call   c00103ba <Device::~Device()>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	90                   	nop
c00123f3:	83 c4 0c             	add    esp,0xc
c00123f6:	c3                   	ret    
c00123f7:	90                   	nop

c00123f8 <Keyboard::~Keyboard()>:
c00123f8:	83 ec 0c             	sub    esp,0xc
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012402:	e8 cd ff ff ff       	call   c00123d4 <Keyboard::~Keyboard()>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	83 ec 08             	sub    esp,0x8
c001240d:	68 5c 01 00 00       	push   0x15c
c0012412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012416:	e8 12 cc ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	83 c4 0c             	add    esp,0xc
c0012421:	c3                   	ret    

c0012422 <LogicalDisk::close(int, int, void*)>:
c0012422:	83 c8 ff             	or     eax,0xffffffff
c0012425:	c3                   	ret    

c0012426 <LogicalDisk::~LogicalDisk()>:
c0012426:	83 ec 0c             	sub    esp,0xc
c0012429:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c001242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012432:	89 10                	mov    DWORD PTR [eax],edx
c0012434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	50                   	push   eax
c001243c:	e8 79 df ff ff       	call   c00103ba <Device::~Device()>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	90                   	nop
c0012445:	83 c4 0c             	add    esp,0xc
c0012448:	c3                   	ret    
c0012449:	90                   	nop

c001244a <LogicalDisk::~LogicalDisk()>:
c001244a:	83 ec 0c             	sub    esp,0xc
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012454:	e8 cd ff ff ff       	call   c0012426 <LogicalDisk::~LogicalDisk()>
c0012459:	83 c4 10             	add    esp,0x10
c001245c:	83 ec 08             	sub    esp,0x8
c001245f:	68 74 01 00 00       	push   0x174
c0012464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012468:	e8 c0 cb ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	83 c4 0c             	add    esp,0xc
c0012473:	c3                   	ret    

c0012474 <LogicalDisk::open(int, int, void*)>:
c0012474:	83 ec 18             	sub    esp,0x18
c0012477:	68 48 1d 02 c0       	push   0xc0021d48
c001247c:	e8 57 34 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0012481:	83 c8 ff             	or     eax,0xffffffff
c0012484:	83 c4 1c             	add    esp,0x1c
c0012487:	c3                   	ret    

c0012488 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0012488:	53                   	push   ebx
c0012489:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001248d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012495:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001249b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00124a1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00124a7:	77 10                	ja     c00124b9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00124a9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00124af:	89 d3                	mov    ebx,edx
c00124b1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00124b7:	72 05                	jb     c00124be <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00124b9:	83 c8 ff             	or     eax,0xffffffff
c00124bc:	89 c2                	mov    edx,eax
c00124be:	5b                   	pop    ebx
c00124bf:	c3                   	ret    

c00124c0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00124c0:	56                   	push   esi
c00124c1:	83 c8 ff             	or     eax,0xffffffff
c00124c4:	53                   	push   ebx
c00124c5:	89 c2                	mov    edx,eax
c00124c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00124cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00124cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00124d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00124d9:	77 27                	ja     c0012502 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00124db:	89 d8                	mov    eax,ebx
c00124dd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00124e3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00124e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ee:	89 c2                	mov    edx,eax
c00124f0:	73 10                	jae    c0012502 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00124f2:	89 c8                	mov    eax,ecx
c00124f4:	89 da                	mov    edx,ebx
c00124f6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00124fc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012502:	5b                   	pop    ebx
c0012503:	5e                   	pop    esi
c0012504:	c3                   	ret    
c0012505:	90                   	nop

c0012506 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012506:	83 ec 1c             	sub    esp,0x1c
c0012509:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001250d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012519:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001251d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012520:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012524:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001252c:	83 ec 08             	sub    esp,0x8
c001252f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012533:	50                   	push   eax
c0012534:	e8 cf e1 ff ff       	call   c0010708 <Device::Device(char const*)>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c0012541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012545:	89 10                	mov    DWORD PTR [eax],edx
c0012547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001254b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012556:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001255d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012561:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001256b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001256f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012573:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012577:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001257d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0012583:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012587:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001258a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001258e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0012594:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001259a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001259e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125a2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00125a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125ac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00125b6:	90                   	nop
c00125b7:	83 c4 1c             	add    esp,0x1c
c00125ba:	c3                   	ret    
c00125bb:	90                   	nop

c00125bc <LogicalDisk::assignDriveLetter()>:
c00125bc:	55                   	push   ebp
c00125bd:	57                   	push   edi
c00125be:	56                   	push   esi
c00125bf:	53                   	push   ebx
c00125c0:	83 ec 14             	sub    esp,0x14
c00125c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125c7:	8b 3d 40 49 02 c0    	mov    edi,DWORD PTR ds:0xc0024940
c00125cd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00125d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00125d7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00125dd:	8b 3d 44 49 02 c0    	mov    edi,DWORD PTR ds:0xc0024944
c00125e3:	3c 01                	cmp    al,0x1
c00125e5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00125e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00125ed:	19 c0                	sbb    eax,eax
c00125ef:	83 e0 02             	and    eax,0x2
c00125f2:	83 c0 41             	add    eax,0x41
c00125f5:	0f be e8             	movsx  ebp,al
c00125f8:	3c 43                	cmp    al,0x43
c00125fa:	75 10                	jne    c001260c <LogicalDisk::assignDriveLetter()+0x50>
c00125fc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012603:	75 5d                	jne    c0012662 <LogicalDisk::assignDriveLetter()+0xa6>
c0012605:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001260a:	75 56                	jne    c0012662 <LogicalDisk::assignDriveLetter()+0xa6>
c001260c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001260f:	ba 01 00 00 00       	mov    edx,0x1
c0012614:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012618:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001261c:	d3 e2                	shl    edx,cl
c001261e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012622:	89 d7                	mov    edi,edx
c0012624:	89 d6                	mov    esi,edx
c0012626:	c1 ff 1f             	sar    edi,0x1f
c0012629:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001262d:	21 f9                	and    ecx,edi
c001262f:	09 d1                	or     ecx,edx
c0012631:	75 2f                	jne    c0012662 <LogicalDisk::assignDriveLetter()+0xa6>
c0012633:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012637:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001263b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012641:	09 f2                	or     edx,esi
c0012643:	89 15 40 49 02 c0    	mov    DWORD PTR ds:0xc0024940,edx
c0012649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001264d:	09 fa                	or     edx,edi
c001264f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012653:	89 15 44 49 02 c0    	mov    DWORD PTR ds:0xc0024944,edx
c0012659:	89 1c bd 60 49 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb6a0],ebx
c0012660:	eb 08                	jmp    c001266a <LogicalDisk::assignDriveLetter()+0xae>
c0012662:	45                   	inc    ebp
c0012663:	40                   	inc    eax
c0012664:	3c 5b                	cmp    al,0x5b
c0012666:	75 90                	jne    c00125f8 <LogicalDisk::assignDriveLetter()+0x3c>
c0012668:	31 c0                	xor    eax,eax
c001266a:	83 c4 14             	add    esp,0x14
c001266d:	5b                   	pop    ebx
c001266e:	5e                   	pop    esi
c001266f:	5f                   	pop    edi
c0012670:	5d                   	pop    ebp
c0012671:	c3                   	ret    

c0012672 <LogicalDisk::mount()>:
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	51                   	push   ecx
c0012675:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012679:	8b 1d c8 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244c8
c001267f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0012689:	85 db                	test   ebx,ebx
c001268b:	74 50                	je     c00126dd <LogicalDisk::mount()+0x6b>
c001268d:	e8 85 61 00 00       	call   c0018817 <getIRQNestingLevel()>
c0012692:	52                   	push   edx
c0012693:	52                   	push   edx
c0012694:	50                   	push   eax
c0012695:	68 6c 1d 02 c0       	push   0xc0021d6c
c001269a:	e8 6e ca ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001269f:	83 c4 0c             	add    esp,0xc
c00126a2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00126a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126ab:	83 e8 41             	sub    eax,0x41
c00126ae:	50                   	push   eax
c00126af:	56                   	push   esi
c00126b0:	53                   	push   ebx
c00126b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	84 c0                	test   al,al
c00126b9:	74 08                	je     c00126c3 <LogicalDisk::mount()+0x51>
c00126bb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00126c1:	eb 1c                	jmp    c00126df <LogicalDisk::mount()+0x6d>
c00126c3:	e8 4f 61 00 00       	call   c0018817 <getIRQNestingLevel()>
c00126c8:	51                   	push   ecx
c00126c9:	51                   	push   ecx
c00126ca:	50                   	push   eax
c00126cb:	68 87 1d 02 c0       	push   0xc0021d87
c00126d0:	e8 38 ca ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00126d5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	eb ac                	jmp    c0012689 <LogicalDisk::mount()+0x17>
c00126dd:	31 c0                	xor    eax,eax
c00126df:	5a                   	pop    edx
c00126e0:	5b                   	pop    ebx
c00126e1:	5e                   	pop    esi
c00126e2:	c3                   	ret    
c00126e3:	90                   	nop

c00126e4 <LogicalDisk::unmount()>:
c00126e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126f2:	c3                   	ret    
c00126f3:	90                   	nop

c00126f4 <LogicalDisk::unassignDriveLetter()>:
c00126f4:	57                   	push   edi
c00126f5:	56                   	push   esi
c00126f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126fa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012701:	84 c9                	test   cl,cl
c0012703:	75 0f                	jne    c0012714 <LogicalDisk::unassignDriveLetter()+0x20>
c0012705:	c7 44 24 0c a2 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021da2
c001270d:	5e                   	pop    esi
c001270e:	5f                   	pop    edi
c001270f:	e9 c4 31 00 00       	jmp    c00158d8 <Krnl::panic(char const*)>
c0012714:	83 e9 41             	sub    ecx,0x41
c0012717:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001271e:	b8 01 00 00 00       	mov    eax,0x1
c0012723:	c7 04 8d 60 49 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb6a0],0x0
c001272e:	d3 e0                	shl    eax,cl
c0012730:	89 c7                	mov    edi,eax
c0012732:	f7 d0                	not    eax
c0012734:	c1 ff 1f             	sar    edi,0x1f
c0012737:	21 05 40 49 02 c0    	and    DWORD PTR ds:0xc0024940,eax
c001273d:	89 fe                	mov    esi,edi
c001273f:	f7 d6                	not    esi
c0012741:	21 35 44 49 02 c0    	and    DWORD PTR ds:0xc0024944,esi
c0012747:	5e                   	pop    esi
c0012748:	5f                   	pop    edi
c0012749:	c3                   	ret    

c001274a <LogicalDisk::read(unsigned long long, int, void*)>:
c001274a:	57                   	push   edi
c001274b:	56                   	push   esi
c001274c:	53                   	push   ebx
c001274d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012751:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012755:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001275d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012763:	77 41                	ja     c00127a6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012765:	99                   	cdq    
c0012766:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001276c:	01 c8                	add    eax,ecx
c001276e:	11 da                	adc    edx,ebx
c0012770:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012776:	19 d7                	sbb    edi,edx
c0012778:	72 33                	jb     c00127ad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001277a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012780:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012786:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001278a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001278e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012794:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001279a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001279e:	5b                   	pop    ebx
c001279f:	5e                   	pop    esi
c00127a0:	5f                   	pop    edi
c00127a1:	e9 9a 09 00 00       	jmp    c0013140 <VCache::read(unsigned long long, int, void*)>
c00127a6:	b8 05 00 00 00       	mov    eax,0x5
c00127ab:	eb 05                	jmp    c00127b2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00127ad:	b8 07 00 00 00       	mov    eax,0x7
c00127b2:	5b                   	pop    ebx
c00127b3:	5e                   	pop    esi
c00127b4:	5f                   	pop    edi
c00127b5:	c3                   	ret    

c00127b6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00127b6:	57                   	push   edi
c00127b7:	56                   	push   esi
c00127b8:	53                   	push   ebx
c00127b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127c1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127c9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127cf:	77 41                	ja     c0012812 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00127d1:	99                   	cdq    
c00127d2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127d8:	01 c8                	add    eax,ecx
c00127da:	11 da                	adc    edx,ebx
c00127dc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127e2:	19 d7                	sbb    edi,edx
c00127e4:	72 33                	jb     c0012819 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00127e6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127ec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127f6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127fa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012800:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012806:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001280a:	5b                   	pop    ebx
c001280b:	5e                   	pop    esi
c001280c:	5f                   	pop    edi
c001280d:	e9 4a 08 00 00       	jmp    c001305c <VCache::write(unsigned long long, int, void*)>
c0012812:	b8 05 00 00 00       	mov    eax,0x5
c0012817:	eb 05                	jmp    c001281e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012819:	b8 07 00 00 00       	mov    eax,0x7
c001281e:	5b                   	pop    ebx
c001281f:	5e                   	pop    esi
c0012820:	5f                   	pop    edi
c0012821:	c3                   	ret    

c0012822 <Mouse::Mouse(char const*)>:
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012829:	83 ec 08             	sub    esp,0x8
c001282c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012830:	50                   	push   eax
c0012831:	e8 d2 de ff ff       	call   c0010708 <Device::Device(char const*)>
c0012836:	83 c4 10             	add    esp,0x10
c0012839:	ba f8 1d 02 c0       	mov    edx,0xc0021df8
c001283e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012842:	89 10                	mov    DWORD PTR [eax],edx
c0012844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012848:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012852:	90                   	nop
c0012853:	83 c4 0c             	add    esp,0xc
c0012856:	c3                   	ret    
c0012857:	90                   	nop

c0012858 <Mouse::~Mouse()>:
c0012858:	83 ec 0c             	sub    esp,0xc
c001285b:	ba f8 1d 02 c0       	mov    edx,0xc0021df8
c0012860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012864:	89 10                	mov    DWORD PTR [eax],edx
c0012866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286a:	83 ec 0c             	sub    esp,0xc
c001286d:	50                   	push   eax
c001286e:	e8 47 db ff ff       	call   c00103ba <Device::~Device()>
c0012873:	83 c4 10             	add    esp,0x10
c0012876:	90                   	nop
c0012877:	83 c4 0c             	add    esp,0xc
c001287a:	c3                   	ret    
c001287b:	90                   	nop

c001287c <Mouse::~Mouse()>:
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012886:	e8 cd ff ff ff       	call   c0012858 <Mouse::~Mouse()>
c001288b:	83 c4 10             	add    esp,0x10
c001288e:	83 ec 08             	sub    esp,0x8
c0012891:	68 58 01 00 00       	push   0x158
c0012896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289a:	e8 8e c7 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	83 c4 0c             	add    esp,0xc
c00128a5:	c3                   	ret    

c00128a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00128a6:	55                   	push   ebp
c00128a7:	57                   	push   edi
c00128a8:	56                   	push   esi
c00128a9:	53                   	push   ebx
c00128aa:	81 ec 28 01 00 00    	sub    esp,0x128
c00128b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00128b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00128be:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00128c5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00128cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00128d4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00128db:	e8 1a df ff ff       	call   c00107fa <Device::getName()>
c00128e0:	5a                   	pop    edx
c00128e1:	59                   	pop    ecx
c00128e2:	50                   	push   eax
c00128e3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00128e7:	55                   	push   ebp
c00128e8:	e8 6c de fe ff       	call   c0000759 <strcpy>
c00128ed:	5b                   	pop    ebx
c00128ee:	58                   	pop    eax
c00128ef:	68 1c 1e 02 c0       	push   0xc0021e1c
c00128f4:	55                   	push   ebp
c00128f5:	e8 16 df fe ff       	call   c0000810 <strcat>
c00128fa:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012901:	e8 18 c7 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012906:	83 c4 0c             	add    esp,0xc
c0012909:	89 c3                	mov    ebx,eax
c001290b:	57                   	push   edi
c001290c:	56                   	push   esi
c001290d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012915:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001291c:	55                   	push   ebp
c001291d:	50                   	push   eax
c001291e:	e8 e3 fb ff ff       	call   c0012506 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012923:	83 c4 14             	add    esp,0x14
c0012926:	53                   	push   ebx
c0012927:	e8 90 fc ff ff       	call   c00125bc <LogicalDisk::assignDriveLetter()>
c001292c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001292f:	e8 3e fd ff ff       	call   c0012672 <LogicalDisk::mount()>
c0012934:	58                   	pop    eax
c0012935:	5a                   	pop    edx
c0012936:	53                   	push   ebx
c0012937:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001293e:	e8 d5 db ff ff       	call   c0010518 <Device::addChild(Device*)>
c0012943:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012949:	5b                   	pop    ebx
c001294a:	5e                   	pop    esi
c001294b:	5f                   	pop    edi
c001294c:	5d                   	pop    ebp
c001294d:	c3                   	ret    

c001294e <createPartitionsForDisk(PhysicalDisk*)>:
c001294e:	55                   	push   ebp
c001294f:	57                   	push   edi
c0012950:	56                   	push   esi
c0012951:	53                   	push   ebx
c0012952:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012958:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001295f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012965:	3d 00 02 00 00       	cmp    eax,0x200
c001296a:	74 27                	je     c0012993 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001296c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012972:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012978:	83 ec 10             	sub    esp,0x10
c001297b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001297f:	99                   	cdq    
c0012980:	c1 e6 0a             	shl    esi,0xa
c0012983:	52                   	push   edx
c0012984:	89 fd                	mov    ebp,edi
c0012986:	50                   	push   eax
c0012987:	55                   	push   ebp
c0012988:	56                   	push   esi
c0012989:	e8 1e c8 00 00       	call   c001f1ac <__udivdi3>
c001298e:	e9 b1 00 00 00       	jmp    c0012a44 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012993:	83 ec 0c             	sub    esp,0xc
c0012996:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012998:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001299c:	56                   	push   esi
c001299d:	6a 01                	push   0x1
c001299f:	6a 00                	push   0x0
c00129a1:	6a 00                	push   0x0
c00129a3:	53                   	push   ebx
c00129a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129a7:	83 c4 20             	add    esp,0x20
c00129aa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00129b2:	75 0a                	jne    c00129be <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00129b4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00129bc:	74 2c                	je     c00129ea <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00129be:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00129c4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00129ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00129d0:	83 ec 10             	sub    esp,0x10
c00129d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00129d7:	89 f7                	mov    edi,esi
c00129d9:	c1 e0 0a             	shl    eax,0xa
c00129dc:	c1 ff 1f             	sar    edi,0x1f
c00129df:	57                   	push   edi
c00129e0:	56                   	push   esi
c00129e1:	52                   	push   edx
c00129e2:	50                   	push   eax
c00129e3:	e8 c4 c7 00 00       	call   c001f1ac <__udivdi3>
c00129e8:	eb 5a                	jmp    c0012a44 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129ea:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00129f1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00129f8:	83 e1 7f             	and    ecx,0x7f
c00129fb:	83 e0 7f             	and    eax,0x7f
c00129fe:	01 c1                	add    ecx,eax
c0012a00:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a07:	83 e0 7f             	and    eax,0x7f
c0012a0a:	01 c1                	add    ecx,eax
c0012a0c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a13:	83 e0 7f             	and    eax,0x7f
c0012a16:	00 c1                	add    cl,al
c0012a18:	74 41                	je     c0012a5b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a1a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a20:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a2c:	83 ec 10             	sub    esp,0x10
c0012a2f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a33:	89 f7                	mov    edi,esi
c0012a35:	c1 e0 0a             	shl    eax,0xa
c0012a38:	c1 ff 1f             	sar    edi,0x1f
c0012a3b:	57                   	push   edi
c0012a3c:	56                   	push   esi
c0012a3d:	52                   	push   edx
c0012a3e:	50                   	push   eax
c0012a3f:	e8 68 c7 00 00       	call   c001f1ac <__udivdi3>
c0012a44:	83 c4 14             	add    esp,0x14
c0012a47:	52                   	push   edx
c0012a48:	50                   	push   eax
c0012a49:	6a 00                	push   0x0
c0012a4b:	6a 00                	push   0x0
c0012a4d:	53                   	push   ebx
c0012a4e:	e8 53 fe ff ff       	call   c00128a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a53:	83 c4 20             	add    esp,0x20
c0012a56:	e9 79 01 00 00       	jmp    c0012bd4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012a5b:	89 f0                	mov    eax,esi
c0012a5d:	31 f6                	xor    esi,esi
c0012a5f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012a66:	75 02                	jne    c0012a6a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012a68:	89 f1                	mov    ecx,esi
c0012a6a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012a71:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012a78:	c1 e2 08             	shl    edx,0x8
c0012a7b:	c1 e7 10             	shl    edi,0x10
c0012a7e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012a86:	09 fa                	or     edx,edi
c0012a88:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012a90:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012a97:	83 c0 10             	add    eax,0x10
c0012a9a:	09 fa                	or     edx,edi
c0012a9c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012aa3:	c1 e7 18             	shl    edi,0x18
c0012aa6:	09 fa                	or     edx,edi
c0012aa8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012aaf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012ab3:	c1 e7 10             	shl    edi,0x10
c0012ab6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012abd:	c1 e2 08             	shl    edx,0x8
c0012ac0:	09 fa                	or     edx,edi
c0012ac2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012ac9:	09 fa                	or     edx,edi
c0012acb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012ad2:	c1 e7 18             	shl    edi,0x18
c0012ad5:	09 fa                	or     edx,edi
c0012ad7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012adb:	46                   	inc    esi
c0012adc:	83 fe 04             	cmp    esi,0x4
c0012adf:	0f 85 7a ff ff ff    	jne    c0012a5f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae9:	83 f0 01             	xor    eax,0x1
c0012aec:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012af0:	75 57                	jne    c0012b49 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012af2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012af6:	83 f0 01             	xor    eax,0x1
c0012af9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012afd:	75 4a                	jne    c0012b49 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012aff:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b03:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b25:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b29:	89 f7                	mov    edi,esi
c0012b2b:	c1 e0 0a             	shl    eax,0xa
c0012b2e:	c1 ff 1f             	sar    edi,0x1f
c0012b31:	57                   	push   edi
c0012b32:	56                   	push   esi
c0012b33:	52                   	push   edx
c0012b34:	50                   	push   eax
c0012b35:	e8 72 c6 00 00       	call   c001f1ac <__udivdi3>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b45:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012b49:	84 c9                	test   cl,cl
c0012b4b:	74 53                	je     c0012ba0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012b4d:	0f b6 c9             	movzx  ecx,cl
c0012b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b58:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b5c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b68:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012b6c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012b70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b74:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012b78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b80:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012b84:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012b88:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012b8c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012b90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b98:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012b9c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012ba0:	31 ed                	xor    ebp,ebp
c0012ba2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012ba6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012baa:	89 f8                	mov    eax,edi
c0012bac:	09 f0                	or     eax,esi
c0012bae:	74 1e                	je     c0012bce <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012bb0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012bb4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012bb8:	89 d1                	mov    ecx,edx
c0012bba:	09 c1                	or     ecx,eax
c0012bbc:	74 10                	je     c0012bce <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012bbe:	83 ec 0c             	sub    esp,0xc
c0012bc1:	57                   	push   edi
c0012bc2:	56                   	push   esi
c0012bc3:	52                   	push   edx
c0012bc4:	50                   	push   eax
c0012bc5:	53                   	push   ebx
c0012bc6:	e8 db fc ff ff       	call   c00128a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012bcb:	83 c4 20             	add    esp,0x20
c0012bce:	45                   	inc    ebp
c0012bcf:	83 fd 04             	cmp    ebp,0x4
c0012bd2:	75 ce                	jne    c0012ba2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012bd4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012bda:	5b                   	pop    ebx
c0012bdb:	5e                   	pop    esi
c0012bdc:	5f                   	pop    edi
c0012bdd:	5d                   	pop    ebp
c0012bde:	c3                   	ret    
c0012bdf:	90                   	nop

c0012be0 <Timer::Timer(char const*)>:
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be7:	83 ec 08             	sub    esp,0x8
c0012bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bee:	50                   	push   eax
c0012bef:	e8 14 db ff ff       	call   c0010708 <Device::Device(char const*)>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c0012bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c00:	89 10                	mov    DWORD PTR [eax],edx
c0012c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c06:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c10:	90                   	nop
c0012c11:	83 c4 0c             	add    esp,0xc
c0012c14:	c3                   	ret    
c0012c15:	90                   	nop

c0012c16 <Timer::~Timer()>:
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c0012c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c22:	89 10                	mov    DWORD PTR [eax],edx
c0012c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	50                   	push   eax
c0012c2c:	e8 89 d7 ff ff       	call   c00103ba <Device::~Device()>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	90                   	nop
c0012c35:	83 c4 0c             	add    esp,0xc
c0012c38:	c3                   	ret    
c0012c39:	90                   	nop

c0012c3a <Timer::~Timer()>:
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	83 ec 0c             	sub    esp,0xc
c0012c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c44:	e8 cd ff ff ff       	call   c0012c16 <Timer::~Timer()>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	83 ec 08             	sub    esp,0x8
c0012c4f:	68 5c 01 00 00       	push   0x15c
c0012c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c58:	e8 d0 c3 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0012c5d:	83 c4 10             	add    esp,0x10
c0012c60:	83 c4 0c             	add    esp,0xc
c0012c63:	c3                   	ret    

c0012c64 <Timer::read()>:
c0012c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c68:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012c6e:	c3                   	ret    

c0012c6f <timerHandler(unsigned long long)>:
c0012c6f:	55                   	push   ebp
c0012c70:	57                   	push   edi
c0012c71:	56                   	push   esi
c0012c72:	53                   	push   ebx
c0012c73:	83 ec 0c             	sub    esp,0xc
c0012c76:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c7a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012c7e:	01 35 d0 49 02 c0    	add    DWORD PTR ds:0xc00249d0,esi
c0012c84:	11 3d d4 49 02 c0    	adc    DWORD PTR ds:0xc00249d4,edi
c0012c8a:	80 3d 6d 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436d,0x0
c0012c91:	0f 84 07 01 00 00    	je     c0012d9e <timerHandler(unsigned long long)+0x12f>
c0012c97:	e8 b7 5b 00 00       	call   c0018853 <lockStuff()>
c0012c9c:	83 ec 0c             	sub    esp,0xc
c0012c9f:	68 9c 57 02 c0       	push   0xc002579c
c0012ca4:	e8 d7 cb 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ca9:	c7 04 24 9c 57 02 c0 	mov    DWORD PTR [esp],0xc002579c
c0012cb0:	89 c3                	mov    ebx,eax
c0012cb2:	e8 d1 cb 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012cb7:	83 c4 10             	add    esp,0x10
c0012cba:	84 c0                	test   al,al
c0012cbc:	74 60                	je     c0012d1e <timerHandler(unsigned long long)+0xaf>
c0012cbe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012cc4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012cc7:	85 c0                	test   eax,eax
c0012cc9:	0f 85 91 00 00 00    	jne    c0012d60 <timerHandler(unsigned long long)+0xf1>
c0012ccf:	e9 be 00 00 00       	jmp    c0012d92 <timerHandler(unsigned long long)+0x123>
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	55                   	push   ebp
c0012cd8:	e8 5f 61 00 00       	call   c0018e3c <unblockTask(ThreadControlBlock*)>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	39 eb                	cmp    ebx,ebp
c0012ce2:	75 12                	jne    c0012cf6 <timerHandler(unsigned long long)+0x87>
c0012ce4:	83 ec 0c             	sub    esp,0xc
c0012ce7:	68 9c 57 02 c0       	push   0xc002579c
c0012cec:	e8 8f cb 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cf1:	89 c3                	mov    ebx,eax
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	83 ec 0c             	sub    esp,0xc
c0012cf9:	68 9c 57 02 c0       	push   0xc002579c
c0012cfe:	e8 85 cb 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	84 c0                	test   al,al
c0012d08:	75 b4                	jne    c0012cbe <timerHandler(unsigned long long)+0x4f>
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	68 9c 57 02 c0       	push   0xc002579c
c0012d12:	e8 69 cb 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	39 d8                	cmp    eax,ebx
c0012d1c:	74 a0                	je     c0012cbe <timerHandler(unsigned long long)+0x4f>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	68 9c 57 02 c0       	push   0xc002579c
c0012d26:	e8 55 cb 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d2b:	c7 04 24 9c 57 02 c0 	mov    DWORD PTR [esp],0xc002579c
c0012d32:	89 c5                	mov    ebp,eax
c0012d34:	e8 6b cb 00 00       	call   c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d39:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012d42:	39 15 d0 49 02 c0    	cmp    DWORD PTR ds:0xc00249d0,edx
c0012d48:	a1 d4 49 02 c0       	mov    eax,ds:0xc00249d4
c0012d4d:	19 c8                	sbb    eax,ecx
c0012d4f:	73 83                	jae    c0012cd4 <timerHandler(unsigned long long)+0x65>
c0012d51:	50                   	push   eax
c0012d52:	50                   	push   eax
c0012d53:	55                   	push   ebp
c0012d54:	68 9c 57 02 c0       	push   0xc002579c
c0012d59:	e8 f4 cb 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d5e:	eb 93                	jmp    c0012cf3 <timerHandler(unsigned long long)+0x84>
c0012d60:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c0012d67:	74 29                	je     c0012d92 <timerHandler(unsigned long long)+0x123>
c0012d69:	39 c6                	cmp    esi,eax
c0012d6b:	bb 00 00 00 00       	mov    ebx,0x0
c0012d70:	19 df                	sbb    edi,ebx
c0012d72:	72 19                	jb     c0012d8d <timerHandler(unsigned long long)+0x11e>
c0012d74:	e8 b3 5a 00 00       	call   c001882c <lockScheduler()>
c0012d79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d7e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012d81:	e8 da 5d 00 00       	call   c0018b60 <schedule()>
c0012d86:	e8 a3 5a 00 00       	call   c001882e <unlockScheduler()>
c0012d8b:	eb 05                	jmp    c0012d92 <timerHandler(unsigned long long)+0x123>
c0012d8d:	29 f0                	sub    eax,esi
c0012d8f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012d92:	83 c4 0c             	add    esp,0xc
c0012d95:	5b                   	pop    ebx
c0012d96:	5e                   	pop    esi
c0012d97:	5f                   	pop    edi
c0012d98:	5d                   	pop    ebp
c0012d99:	e9 47 5e 00 00       	jmp    c0018be5 <unlockStuff()>
c0012d9e:	83 c4 0c             	add    esp,0xc
c0012da1:	5b                   	pop    ebx
c0012da2:	5e                   	pop    esi
c0012da3:	5f                   	pop    edi
c0012da4:	5d                   	pop    ebp
c0012da5:	c3                   	ret    

c0012da6 <setupTimer(int)>:
c0012da6:	57                   	push   edi
c0012da7:	56                   	push   esi
c0012da8:	53                   	push   ebx
c0012da9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dad:	e8 a1 19 00 00       	call   c0014753 <getCPUNumber()>
c0012db2:	85 c0                	test   eax,eax
c0012db4:	74 32                	je     c0012de8 <setupTimer(int)+0x42>
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	68 60 01 00 00       	push   0x160
c0012dbe:	e8 5b c2 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012dc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0012dc6:	89 c3                	mov    ebx,eax
c0012dc8:	e8 7d be 00 00       	call   c001ec4a <APICTimer::APICTimer()>
c0012dcd:	6a 00                	push   0x0
c0012dcf:	6a 00                	push   0x0
c0012dd1:	56                   	push   esi
c0012dd2:	53                   	push   ebx
c0012dd3:	e8 7a bd 00 00       	call   c001eb52 <APICTimer::open(int, int, void*)>
c0012dd8:	83 c4 20             	add    esp,0x20
c0012ddb:	e8 76 19 00 00       	call   c0014756 <thisCPU()>
c0012de0:	56                   	push   esi
c0012de1:	56                   	push   esi
c0012de2:	53                   	push   ebx
c0012de3:	e9 96 00 00 00       	jmp    c0012e7e <setupTimer(int)+0xd8>
c0012de8:	e8 69 19 00 00       	call   c0014756 <thisCPU()>
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012df6:	e8 ff d9 ff ff       	call   c00107fa <Device::getName()>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e01:	0f 85 87 00 00 00    	jne    c0012e8e <setupTimer(int)+0xe8>
c0012e07:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0012e0c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e13:	74 79                	je     c0012e8e <setupTimer(int)+0xe8>
c0012e15:	83 ec 0c             	sub    esp,0xc
c0012e18:	68 5c 01 00 00       	push   0x15c
c0012e1d:	e8 fc c1 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012e22:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e25:	89 c3                	mov    ebx,eax
c0012e27:	e8 6e bf 00 00       	call   c001ed9a <PIT::PIT()>
c0012e2c:	59                   	pop    ecx
c0012e2d:	5f                   	pop    edi
c0012e2e:	53                   	push   ebx
c0012e2f:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c0012e35:	e8 de d6 ff ff       	call   c0010518 <Device::addChild(Device*)>
c0012e3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e3c:	6a 00                	push   0x0
c0012e3e:	6a 00                	push   0x0
c0012e40:	56                   	push   esi
c0012e41:	53                   	push   ebx
c0012e42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e45:	83 c4 14             	add    esp,0x14
c0012e48:	68 60 01 00 00       	push   0x160
c0012e4d:	e8 cc c1 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e55:	89 c7                	mov    edi,eax
c0012e57:	e8 ee bd 00 00       	call   c001ec4a <APICTimer::APICTimer()>
c0012e5c:	6a 00                	push   0x0
c0012e5e:	6a 00                	push   0x0
c0012e60:	56                   	push   esi
c0012e61:	57                   	push   edi
c0012e62:	e8 eb bc 00 00       	call   c001eb52 <APICTimer::open(int, int, void*)>
c0012e67:	83 c4 20             	add    esp,0x20
c0012e6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e6c:	6a 00                	push   0x0
c0012e6e:	6a 00                	push   0x0
c0012e70:	6a 00                	push   0x0
c0012e72:	53                   	push   ebx
c0012e73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e76:	e8 db 18 00 00       	call   c0014756 <thisCPU()>
c0012e7b:	5a                   	pop    edx
c0012e7c:	59                   	pop    ecx
c0012e7d:	57                   	push   edi
c0012e7e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e84:	e8 8f d6 ff ff       	call   c0010518 <Device::addChild(Device*)>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	eb 33                	jmp    c0012ec1 <setupTimer(int)+0x11b>
c0012e8e:	83 ec 0c             	sub    esp,0xc
c0012e91:	68 5c 01 00 00       	push   0x15c
c0012e96:	e8 83 c1 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012e9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e9e:	89 c3                	mov    ebx,eax
c0012ea0:	e8 f5 be 00 00       	call   c001ed9a <PIT::PIT()>
c0012ea5:	58                   	pop    eax
c0012ea6:	5a                   	pop    edx
c0012ea7:	53                   	push   ebx
c0012ea8:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c0012eae:	e8 65 d6 ff ff       	call   c0010518 <Device::addChild(Device*)>
c0012eb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eb5:	6a 00                	push   0x0
c0012eb7:	6a 00                	push   0x0
c0012eb9:	56                   	push   esi
c0012eba:	53                   	push   ebx
c0012ebb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ebe:	83 c4 20             	add    esp,0x20
c0012ec1:	89 d8                	mov    eax,ebx
c0012ec3:	5b                   	pop    ebx
c0012ec4:	5e                   	pop    esi
c0012ec5:	5f                   	pop    edi
c0012ec6:	c3                   	ret    
c0012ec7:	90                   	nop

c0012ec8 <VCache::VCache(PhysicalDisk*)>:
c0012ec8:	53                   	push   ebx
c0012ec9:	83 ec 08             	sub    esp,0x8
c0012ecc:	ba 60 1e 02 c0       	mov    edx,0xc0021e60
c0012ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed5:	89 10                	mov    DWORD PTR [eax],edx
c0012ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012ef8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f03:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f0a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f15:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f24:	83 ec 0c             	sub    esp,0xc
c0012f27:	6a 10                	push   0x10
c0012f29:	e8 f0 c0 ff ff       	call   c000f01e <operator new(unsigned long)>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	89 c3                	mov    ebx,eax
c0012f33:	83 ec 0c             	sub    esp,0xc
c0012f36:	53                   	push   ebx
c0012f37:	e8 08 5a 00 00       	call   c0018944 <Mutex::Mutex()>
c0012f3c:	83 c4 10             	add    esp,0x10
c0012f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f43:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f55:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012f5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f71:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012f77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f81:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012f84:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012f99:	c1 e0 06             	shl    eax,0x6
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	50                   	push   eax
c0012fa0:	e8 77 90 ff ff       	call   c000c01c <malloc>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	89 c2                	mov    edx,eax
c0012faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012fb1:	90                   	nop
c0012fb2:	83 c4 08             	add    esp,0x8
c0012fb5:	5b                   	pop    ebx
c0012fb6:	c3                   	ret    
c0012fb7:	90                   	nop

c0012fb8 <VCache::writeWriteBuffer()>:
c0012fb8:	53                   	push   ebx
c0012fb9:	83 ec 14             	sub    esp,0x14
c0012fbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012fc0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012fc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fc8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012fcb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012fce:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012fd1:	50                   	push   eax
c0012fd2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012fd5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012fdc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012fe3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012fe7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012fee:	83 c4 28             	add    esp,0x28
c0012ff1:	5b                   	pop    ebx
c0012ff2:	c3                   	ret    
c0012ff3:	90                   	nop

c0012ff4 <VCache::~VCache()>:
c0012ff4:	83 ec 0c             	sub    esp,0xc
c0012ff7:	ba 60 1e 02 c0       	mov    edx,0xc0021e60
c0012ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013000:	89 10                	mov    DWORD PTR [eax],edx
c0013002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013006:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013009:	84 c0                	test   al,al
c001300b:	74 0f                	je     c001301c <VCache::~VCache()+0x28>
c001300d:	83 ec 0c             	sub    esp,0xc
c0013010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013014:	e8 9f ff ff ff       	call   c0012fb8 <VCache::writeWriteBuffer()>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013020:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	50                   	push   eax
c0013027:	e8 00 90 ff ff       	call   c000c02c <free>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	90                   	nop
c0013030:	83 c4 0c             	add    esp,0xc
c0013033:	c3                   	ret    

c0013034 <VCache::~VCache()>:
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	83 ec 0c             	sub    esp,0xc
c001303a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001303e:	e8 b1 ff ff ff       	call   c0012ff4 <VCache::~VCache()>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	83 ec 08             	sub    esp,0x8
c0013049:	6a 30                	push   0x30
c001304b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001304f:	e8 d9 bf ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	83 c4 0c             	add    esp,0xc
c001305a:	c3                   	ret    
c001305b:	90                   	nop

c001305c <VCache::write(unsigned long long, int, void*)>:
c001305c:	55                   	push   ebp
c001305d:	57                   	push   edi
c001305e:	56                   	push   esi
c001305f:	53                   	push   ebx
c0013060:	83 ec 28             	sub    esp,0x28
c0013063:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013067:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001306b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001306f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0013073:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013076:	e8 2b 5d 00 00       	call   c0018da6 <Semaphore::acquire()>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013082:	74 66                	je     c00130ea <VCache::write(unsigned long long, int, void*)+0x8e>
c0013084:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013087:	99                   	cdq    
c0013088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001308c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001308f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0013092:	89 c1                	mov    ecx,eax
c0013094:	89 d0                	mov    eax,edx
c0013096:	31 f1                	xor    ecx,esi
c0013098:	31 f8                	xor    eax,edi
c001309a:	89 ca                	mov    edx,ecx
c001309c:	09 c2                	or     edx,eax
c001309e:	75 3e                	jne    c00130de <VCache::write(unsigned long long, int, void*)+0x82>
c00130a0:	83 fd 01             	cmp    ebp,0x1
c00130a3:	75 39                	jne    c00130de <VCache::write(unsigned long long, int, void*)+0x82>
c00130a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130ae:	51                   	push   ecx
c00130af:	50                   	push   eax
c00130b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00130b8:	0f af c8             	imul   ecx,eax
c00130bb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00130be:	51                   	push   ecx
c00130bf:	e8 c0 d5 fe ff       	call   c0000684 <memcpy>
c00130c4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	40                   	inc    eax
c00130cb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00130ce:	83 f8 40             	cmp    eax,0x40
c00130d1:	75 57                	jne    c001312a <VCache::write(unsigned long long, int, void*)+0xce>
c00130d3:	83 ec 0c             	sub    esp,0xc
c00130d6:	53                   	push   ebx
c00130d7:	e8 dc fe ff ff       	call   c0012fb8 <VCache::writeWriteBuffer()>
c00130dc:	eb 34                	jmp    c0013112 <VCache::write(unsigned long long, int, void*)+0xb6>
c00130de:	83 ec 0c             	sub    esp,0xc
c00130e1:	53                   	push   ebx
c00130e2:	e8 d1 fe ff ff       	call   c0012fb8 <VCache::writeWriteBuffer()>
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130ed:	83 fd 3f             	cmp    ebp,0x3f
c00130f0:	7f 25                	jg     c0013117 <VCache::write(unsigned long long, int, void*)+0xbb>
c00130f2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00130f5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00130f8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00130fb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00130ff:	52                   	push   edx
c0013100:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013106:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001310a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001310d:	e8 72 d5 fe ff       	call   c0000684 <memcpy>
c0013112:	83 c4 10             	add    esp,0x10
c0013115:	eb 13                	jmp    c001312a <VCache::write(unsigned long long, int, void*)+0xce>
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	8b 10                	mov    edx,DWORD PTR [eax]
c001311c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013120:	55                   	push   ebp
c0013121:	57                   	push   edi
c0013122:	56                   	push   esi
c0013123:	50                   	push   eax
c0013124:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013127:	83 c4 20             	add    esp,0x20
c001312a:	83 ec 0c             	sub    esp,0xc
c001312d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013130:	e8 f9 61 00 00       	call   c001932e <Semaphore::release()>
c0013135:	83 c4 2c             	add    esp,0x2c
c0013138:	31 c0                	xor    eax,eax
c001313a:	5b                   	pop    ebx
c001313b:	5e                   	pop    esi
c001313c:	5f                   	pop    edi
c001313d:	5d                   	pop    ebp
c001313e:	c3                   	ret    
c001313f:	90                   	nop

c0013140 <VCache::read(unsigned long long, int, void*)>:
c0013140:	57                   	push   edi
c0013141:	56                   	push   esi
c0013142:	53                   	push   ebx
c0013143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013147:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001314b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001314f:	83 ec 0c             	sub    esp,0xc
c0013152:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013155:	e8 4c 5c 00 00       	call   c0018da6 <Semaphore::acquire()>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013161:	74 0c                	je     c001316f <VCache::read(unsigned long long, int, void*)+0x2f>
c0013163:	83 ec 0c             	sub    esp,0xc
c0013166:	53                   	push   ebx
c0013167:	e8 4c fe ff ff       	call   c0012fb8 <VCache::writeWriteBuffer()>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013172:	83 ec 0c             	sub    esp,0xc
c0013175:	8b 10                	mov    edx,DWORD PTR [eax]
c0013177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001317b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001317f:	57                   	push   edi
c0013180:	56                   	push   esi
c0013181:	50                   	push   eax
c0013182:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013185:	83 c4 14             	add    esp,0x14
c0013188:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001318b:	e8 9e 61 00 00       	call   c001932e <Semaphore::release()>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	31 c0                	xor    eax,eax
c0013195:	5b                   	pop    ebx
c0013196:	5e                   	pop    esi
c0013197:	5f                   	pop    edi
c0013198:	c3                   	ret    
c0013199:	90                   	nop

c001319a <Video::putrect(int, int, int, int, unsigned int)>:
c001319a:	55                   	push   ebp
c001319b:	57                   	push   edi
c001319c:	56                   	push   esi
c001319d:	53                   	push   ebx
c001319e:	83 ec 1c             	sub    esp,0x1c
c00131a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00131a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00131a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00131b1:	01 e8                	add    eax,ebp
c00131b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00131b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131bb:	01 df                	add    edi,ebx
c00131bd:	39 fb                	cmp    ebx,edi
c00131bf:	7d 1b                	jge    c00131dc <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00131c1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00131c5:	7d 12                	jge    c00131d9 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00131c7:	8b 16                	mov    edx,DWORD PTR [esi]
c00131c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00131cd:	53                   	push   ebx
c00131ce:	55                   	push   ebp
c00131cf:	45                   	inc    ebp
c00131d0:	56                   	push   esi
c00131d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	eb e8                	jmp    c00131c1 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00131d9:	43                   	inc    ebx
c00131da:	eb e1                	jmp    c00131bd <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00131dc:	83 c4 1c             	add    esp,0x1c
c00131df:	5b                   	pop    ebx
c00131e0:	5e                   	pop    esi
c00131e1:	5f                   	pop    edi
c00131e2:	5d                   	pop    ebp
c00131e3:	c3                   	ret    

c00131e4 <Video::blit(unsigned int*, int, int, int, int)>:
c00131e4:	55                   	push   ebp
c00131e5:	57                   	push   edi
c00131e6:	56                   	push   esi
c00131e7:	53                   	push   ebx
c00131e8:	83 ec 1c             	sub    esp,0x1c
c00131eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00131ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00131f3:	85 c0                	test   eax,eax
c00131f5:	79 02                	jns    c00131f9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00131f7:	31 c0                	xor    eax,eax
c00131f9:	c1 e0 02             	shl    eax,0x2
c00131fc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013200:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013204:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013208:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001320c:	39 d8                	cmp    eax,ebx
c001320e:	7e 49                	jle    c0013259 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013210:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013216:	7c 41                	jl     c0013259 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013218:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001321c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013220:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013224:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013228:	39 f9                	cmp    ecx,edi
c001322a:	7e 22                	jle    c001324e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001322c:	83 c5 04             	add    ebp,0x4
c001322f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013235:	7c 14                	jl     c001324b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013237:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013239:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001323c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013240:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013244:	56                   	push   esi
c0013245:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	47                   	inc    edi
c001324c:	eb d2                	jmp    c0013220 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001324e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013252:	43                   	inc    ebx
c0013253:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013257:	eb ab                	jmp    c0013204 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013259:	83 c4 1c             	add    esp,0x1c
c001325c:	5b                   	pop    ebx
c001325d:	5e                   	pop    esi
c001325e:	5f                   	pop    edi
c001325f:	5d                   	pop    ebp
c0013260:	c3                   	ret    
c0013261:	90                   	nop

c0013262 <Video::clearScreen(unsigned int)>:
c0013262:	57                   	push   edi
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	31 db                	xor    ebx,ebx
c0013267:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001326b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013271:	7e 1f                	jle    c0013292 <Video::clearScreen(unsigned int)+0x30>
c0013273:	31 ff                	xor    edi,edi
c0013275:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001327b:	7e 12                	jle    c001328f <Video::clearScreen(unsigned int)+0x2d>
c001327d:	8b 06                	mov    eax,DWORD PTR [esi]
c001327f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013283:	53                   	push   ebx
c0013284:	57                   	push   edi
c0013285:	47                   	inc    edi
c0013286:	56                   	push   esi
c0013287:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	eb e6                	jmp    c0013275 <Video::clearScreen(unsigned int)+0x13>
c001328f:	43                   	inc    ebx
c0013290:	eb d9                	jmp    c001326b <Video::clearScreen(unsigned int)+0x9>
c0013292:	5b                   	pop    ebx
c0013293:	5e                   	pop    esi
c0013294:	5f                   	pop    edi
c0013295:	c3                   	ret    

c0013296 <Video::putpixel(int, int, unsigned int)>:
c0013296:	c7 44 24 04 68 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e68
c001329e:	e9 6a be ff ff       	jmp    c000f10d <Dbg::kprintf(char const*, ...)>
c00132a3:	90                   	nop

c00132a4 <Video::Video(char const*)>:
c00132a4:	83 ec 0c             	sub    esp,0xc
c00132a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ab:	83 ec 08             	sub    esp,0x8
c00132ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b2:	50                   	push   eax
c00132b3:	e8 50 d4 ff ff       	call   c0010708 <Device::Device(char const*)>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c00132c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c4:	89 10                	mov    DWORD PTR [eax],edx
c00132c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ca:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00132d4:	90                   	nop
c00132d5:	83 c4 0c             	add    esp,0xc
c00132d8:	c3                   	ret    
c00132d9:	90                   	nop

c00132da <Video::~Video()>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c00132e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e6:	89 10                	mov    DWORD PTR [eax],edx
c00132e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	50                   	push   eax
c00132f0:	e8 c5 d0 ff ff       	call   c00103ba <Device::~Device()>
c00132f5:	83 c4 10             	add    esp,0x10
c00132f8:	90                   	nop
c00132f9:	83 c4 0c             	add    esp,0xc
c00132fc:	c3                   	ret    
c00132fd:	90                   	nop

c00132fe <Video::~Video()>:
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013308:	e8 cd ff ff ff       	call   c00132da <Video::~Video()>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	83 ec 08             	sub    esp,0x8
c0013313:	68 64 01 00 00       	push   0x164
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	e8 0c bd ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	83 c4 0c             	add    esp,0xc
c0013327:	c3                   	ret    

c0013328 <Video::isMonochrome()>:
c0013328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001332c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013332:	c3                   	ret    
c0013333:	90                   	nop

c0013334 <Video::getWidth()>:
c0013334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013338:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001333e:	c3                   	ret    
c001333f:	90                   	nop

c0013340 <Video::getHeight()>:
c0013340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013344:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001334a:	c3                   	ret    
c001334b:	90                   	nop

c001334c <Video::drawCursor(int, int, unsigned char*, int)>:
c001334c:	55                   	push   ebp
c001334d:	57                   	push   edi
c001334e:	56                   	push   esi
c001334f:	53                   	push   ebx
c0013350:	83 ec 2c             	sub    esp,0x2c
c0013353:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001335b:	83 f8 01             	cmp    eax,0x1
c001335e:	19 c9                	sbb    ecx,ecx
c0013360:	31 db                	xor    ebx,ebx
c0013362:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013366:	89 cd                	mov    ebp,ecx
c0013368:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013370:	f7 d5                	not    ebp
c0013372:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013378:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001337c:	01 d8                	add    eax,ebx
c001337e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013382:	56                   	push   esi
c0013383:	e8 b8 ff ff ff       	call   c0013340 <Video::getHeight()>
c0013388:	59                   	pop    ecx
c0013389:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001338d:	7e 70                	jle    c00133ff <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001338f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013393:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013397:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001339a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001339e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133a2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00133a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133ad:	89 f8                	mov    eax,edi
c00133af:	83 c0 20             	add    eax,0x20
c00133b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b6:	56                   	push   esi
c00133b7:	e8 78 ff ff ff       	call   c0013334 <Video::getWidth()>
c00133bc:	5a                   	pop    edx
c00133bd:	39 c7                	cmp    edi,eax
c00133bf:	7d 34                	jge    c00133f5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00133c1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00133c6:	74 05                	je     c00133cd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00133c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00133ca:	55                   	push   ebp
c00133cb:	eb 0d                	jmp    c00133da <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00133cd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00133d2:	74 12                	je     c00133e6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00133d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00133d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00133de:	57                   	push   edi
c00133df:	56                   	push   esi
c00133e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00133ea:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00133ee:	47                   	inc    edi
c00133ef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00133f3:	75 c1                	jne    c00133b6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00133f5:	43                   	inc    ebx
c00133f6:	83 fb 20             	cmp    ebx,0x20
c00133f9:	0f 85 79 ff ff ff    	jne    c0013378 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00133ff:	83 c4 2c             	add    esp,0x2c
c0013402:	5b                   	pop    ebx
c0013403:	5e                   	pop    esi
c0013404:	5f                   	pop    edi
c0013405:	5d                   	pop    ebp
c0013406:	c3                   	ret    
c0013407:	90                   	nop

c0013408 <ACPI::close(int, int, void*)>:
c0013408:	83 ec 1c             	sub    esp,0x1c
c001340b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013413:	74 0a                	je     c001341f <ACPI::close(int, int, void*)+0x17>
c0013415:	b8 00 00 00 00       	mov    eax,0x0
c001341a:	e9 9a 00 00 00       	jmp    c00134b9 <ACPI::close(int, int, void*)+0xb1>
c001341f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013424:	75 37                	jne    c001345d <ACPI::close(int, int, void*)+0x55>
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	68 b8 1e 02 c0       	push   0xc0021eb8
c001342e:	e8 da bc ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	a1 e8 49 02 c0       	mov    eax,ds:0xc00249e8
c001343b:	85 c0                	test   eax,eax
c001343d:	74 07                	je     c0013446 <ACPI::close(int, int, void*)+0x3e>
c001343f:	a1 e8 49 02 c0       	mov    eax,ds:0xc00249e8
c0013444:	ff d0                	call   eax
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	68 8c 1f 02 c0       	push   0xc0021f8c
c001344e:	e8 85 24 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001345b:	eb 5c                	jmp    c00134b9 <ACPI::close(int, int, void*)+0xb1>
c001345d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013462:	75 50                	jne    c00134b4 <ACPI::close(int, int, void*)+0xac>
c0013464:	a1 e4 49 02 c0       	mov    eax,ds:0xc00249e4
c0013469:	85 c0                	test   eax,eax
c001346b:	74 07                	je     c0013474 <ACPI::close(int, int, void*)+0x6c>
c001346d:	a1 e4 49 02 c0       	mov    eax,ds:0xc00249e4
c0013472:	ff d0                	call   eax
c0013474:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013479:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001347e:	83 e0 02             	and    eax,0x2
c0013481:	74 1c                	je     c001349f <ACPI::close(int, int, void*)+0x97>
c0013483:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001348a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001348e:	89 c2                	mov    edx,eax
c0013490:	ec                   	in     al,dx
c0013491:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013495:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013499:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001349d:	eb da                	jmp    c0013479 <ACPI::close(int, int, void*)+0x71>
c001349f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00134a6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00134ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00134af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00134b3:	ee                   	out    dx,al
c00134b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134b9:	83 c4 1c             	add    esp,0x1c
c00134bc:	c3                   	ret    

c00134bd <findRSDP()>:
c00134bd:	83 ec 1c             	sub    esp,0x1c
c00134c0:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c00134c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00134cb:	83 e0 04             	and    eax,0x4
c00134ce:	84 c0                	test   al,al
c00134d0:	75 07                	jne    c00134d9 <findRSDP()+0x1c>
c00134d2:	b8 00 00 00 00       	mov    eax,0x0
c00134d7:	eb 6a                	jmp    c0013543 <findRSDP()+0x86>
c00134d9:	a1 b0 43 02 c0       	mov    eax,ds:0xc00243b0
c00134de:	3d ff 07 00 00       	cmp    eax,0x7ff
c00134e3:	7f 1b                	jg     c0013500 <findRSDP()+0x43>
c00134e5:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c00134ea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00134f0:	83 e2 fb             	and    edx,0xfffffffb
c00134f3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00134f9:	b8 00 00 00 00       	mov    eax,0x0
c00134fe:	eb 43                	jmp    c0013543 <findRSDP()+0x86>
c0013500:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013508:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013510:	77 2c                	ja     c001353e <findRSDP()+0x81>
c0013512:	83 ec 04             	sub    esp,0x4
c0013515:	6a 08                	push   0x8
c0013517:	68 c5 1e 02 c0       	push   0xc0021ec5
c001351c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013520:	e8 fc d0 fe ff       	call   c0000621 <memcmp>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	85 c0                	test   eax,eax
c001352a:	0f 94 c0             	sete   al
c001352d:	84 c0                	test   al,al
c001352f:	74 06                	je     c0013537 <findRSDP()+0x7a>
c0013531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013535:	eb 0c                	jmp    c0013543 <findRSDP()+0x86>
c0013537:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001353c:	eb ca                	jmp    c0013508 <findRSDP()+0x4b>
c001353e:	b8 00 00 00 00       	mov    eax,0x0
c0013543:	83 c4 1c             	add    esp,0x1c
c0013546:	c3                   	ret    

c0013547 <loadACPITables(unsigned char*)>:
c0013547:	56                   	push   esi
c0013548:	53                   	push   ebx
c0013549:	83 ec 44             	sub    esp,0x44
c001354c:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013551:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013557:	83 e0 04             	and    eax,0x4
c001355a:	84 c0                	test   al,al
c001355c:	0f 84 05 02 00 00    	je     c0013767 <loadACPITables(unsigned char*)+0x220>
c0013562:	a0 00 4c 02 c0       	mov    al,ds:0xc0024c00
c0013567:	84 c0                	test   al,al
c0013569:	74 75                	je     c00135e0 <loadACPITables(unsigned char*)+0x99>
c001356b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001356f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013577:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001357a:	83 e8 24             	sub    eax,0x24
c001357d:	c1 e8 03             	shr    eax,0x3
c0013580:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013584:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001358c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013590:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0013594:	0f 8d b2 00 00 00    	jge    c001364c <loadACPITables(unsigned char*)+0x105>
c001359a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001359e:	83 c0 24             	add    eax,0x24
c00135a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00135a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00135ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135b1:	c1 e0 03             	shl    eax,0x3
c00135b4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00135b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00135bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c1:	89 c1                	mov    ecx,eax
c00135c3:	a1 ec 49 02 c0       	mov    eax,ds:0xc00249ec
c00135c8:	8d 50 01             	lea    edx,[eax+0x1]
c00135cb:	89 15 ec 49 02 c0    	mov    DWORD PTR ds:0xc00249ec,edx
c00135d1:	89 ca                	mov    edx,ecx
c00135d3:	89 14 c5 04 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5fc],edx
c00135da:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00135de:	eb ac                	jmp    c001358c <loadACPITables(unsigned char*)+0x45>
c00135e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00135e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135ef:	83 e8 24             	sub    eax,0x24
c00135f2:	c1 e8 02             	shr    eax,0x2
c00135f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135f9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013601:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013605:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013609:	7d 41                	jge    c001364c <loadACPITables(unsigned char*)+0x105>
c001360b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001360f:	83 c0 24             	add    eax,0x24
c0013612:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001361a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001361e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013622:	c1 e0 02             	shl    eax,0x2
c0013625:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001362d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001362f:	a1 ec 49 02 c0       	mov    eax,ds:0xc00249ec
c0013634:	8d 50 01             	lea    edx,[eax+0x1]
c0013637:	89 15 ec 49 02 c0    	mov    DWORD PTR ds:0xc00249ec,edx
c001363d:	89 ca                	mov    edx,ecx
c001363f:	89 14 c5 04 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5fc],edx
c0013646:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001364a:	eb b5                	jmp    c0013601 <loadACPITables(unsigned char*)+0xba>
c001364c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013654:	a1 ec 49 02 c0       	mov    eax,ds:0xc00249ec
c0013659:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001365d:	0f 8d 05 01 00 00    	jge    c0013768 <loadACPITables(unsigned char*)+0x221>
c0013663:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013667:	8b 04 c5 04 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb5fc]
c001366e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013676:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001367a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001367e:	25 ff 0f 00 00       	and    eax,0xfff
c0013683:	89 c6                	mov    esi,eax
c0013685:	e8 41 ac ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001368a:	89 c3                	mov    ebx,eax
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	6a 01                	push   0x1
c0013691:	e8 a5 aa ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001369d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136a3:	83 ec 0c             	sub    esp,0xc
c00136a6:	6a 01                	push   0x1
c00136a8:	6a 01                	push   0x1
c00136aa:	50                   	push   eax
c00136ab:	52                   	push   edx
c00136ac:	53                   	push   ebx
c00136ad:	e8 48 b4 ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00136b2:	83 c4 20             	add    esp,0x20
c00136b5:	09 f0                	or     eax,esi
c00136b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136bf:	c1 e0 03             	shl    eax,0x3
c00136c2:	05 00 4a 02 c0       	add    eax,0xc0024a00
c00136c7:	83 ec 04             	sub    esp,0x4
c00136ca:	6a 04                	push   0x4
c00136cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d0:	50                   	push   eax
c00136d1:	e8 ae cf fe ff       	call   c0000684 <memcpy>
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e8:	05 00 10 00 00       	add    eax,0x1000
c00136ed:	c1 e8 0c             	shr    eax,0xc
c00136f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00136fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ff:	25 ff 0f 00 00       	and    eax,0xfff
c0013704:	89 c6                	mov    esi,eax
c0013706:	e8 c0 ab ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001370b:	89 c3                	mov    ebx,eax
c001370d:	83 ec 0c             	sub    esp,0xc
c0013710:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013714:	e8 22 aa ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013720:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013726:	83 ec 0c             	sub    esp,0xc
c0013729:	6a 01                	push   0x1
c001372b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001372f:	50                   	push   eax
c0013730:	52                   	push   edx
c0013731:	53                   	push   ebx
c0013732:	e8 c3 b3 ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013737:	83 c4 20             	add    esp,0x20
c001373a:	09 f0                	or     eax,esi
c001373c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013740:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013743:	83 ec 0c             	sub    esp,0xc
c0013746:	50                   	push   eax
c0013747:	e8 49 ad ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c001374c:	83 c4 10             	add    esp,0x10
c001374f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013753:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013757:	89 14 c5 04 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5fc],edx
c001375e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013762:	e9 ed fe ff ff       	jmp    c0013654 <loadACPITables(unsigned char*)+0x10d>
c0013767:	90                   	nop
c0013768:	83 c4 44             	add    esp,0x44
c001376b:	5b                   	pop    ebx
c001376c:	5e                   	pop    esi
c001376d:	c3                   	ret    

c001376e <findRSDT(unsigned char*)>:
c001376e:	56                   	push   esi
c001376f:	53                   	push   ebx
c0013770:	83 ec 44             	sub    esp,0x44
c0013773:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013778:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001377e:	83 e0 04             	and    eax,0x4
c0013781:	84 c0                	test   al,al
c0013783:	75 0a                	jne    c001378f <findRSDT(unsigned char*)+0x21>
c0013785:	b8 00 00 00 00       	mov    eax,0x0
c001378a:	e9 f7 00 00 00       	jmp    c0013886 <findRSDT(unsigned char*)+0x118>
c001378f:	83 ec 04             	sub    esp,0x4
c0013792:	6a 24                	push   0x24
c0013794:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013798:	8d 44 24 18          	lea    eax,[esp+0x18]
c001379c:	50                   	push   eax
c001379d:	e8 e2 ce fe ff       	call   c0000684 <memcpy>
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00137a9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137ad:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00137b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00137bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00137c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00137c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137cd:	25 ff 0f 00 00       	and    eax,0xfff
c00137d2:	89 c6                	mov    esi,eax
c00137d4:	e8 f2 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00137d9:	89 c3                	mov    ebx,eax
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	6a 02                	push   0x2
c00137e0:	e8 56 a9 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00137ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	6a 01                	push   0x1
c00137f7:	6a 02                	push   0x2
c00137f9:	50                   	push   eax
c00137fa:	52                   	push   edx
c00137fb:	53                   	push   ebx
c00137fc:	e8 f9 b2 ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013801:	83 c4 20             	add    esp,0x20
c0013804:	09 f0                	or     eax,esi
c0013806:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001380a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001380e:	25 ff 0f 00 00       	and    eax,0xfff
c0013813:	89 c6                	mov    esi,eax
c0013815:	e8 b1 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001381a:	89 c3                	mov    ebx,eax
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	6a 02                	push   0x2
c0013821:	e8 15 a9 ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001382d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013833:	83 ec 0c             	sub    esp,0xc
c0013836:	6a 01                	push   0x1
c0013838:	6a 02                	push   0x2
c001383a:	50                   	push   eax
c001383b:	52                   	push   edx
c001383c:	53                   	push   ebx
c001383d:	e8 b8 b2 ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013842:	83 c4 20             	add    esp,0x20
c0013845:	09 f0                	or     eax,esi
c0013847:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001384b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013850:	75 11                	jne    c0013863 <findRSDT(unsigned char*)+0xf5>
c0013852:	c6 05 00 4c 02 c0 00 	mov    BYTE PTR ds:0xc0024c00,0x0
c0013859:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001385d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013861:	eb 1f                	jmp    c0013882 <findRSDT(unsigned char*)+0x114>
c0013863:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013868:	75 11                	jne    c001387b <findRSDT(unsigned char*)+0x10d>
c001386a:	c6 05 00 4c 02 c0 01 	mov    BYTE PTR ds:0xc0024c00,0x1
c0013871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013875:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013879:	eb 07                	jmp    c0013882 <findRSDT(unsigned char*)+0x114>
c001387b:	b8 00 00 00 00       	mov    eax,0x0
c0013880:	eb 04                	jmp    c0013886 <findRSDT(unsigned char*)+0x118>
c0013882:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013886:	83 c4 44             	add    esp,0x44
c0013889:	5b                   	pop    ebx
c001388a:	5e                   	pop    esi
c001388b:	c3                   	ret    

c001388c <findDataTable(unsigned char*, char*)>:
c001388c:	83 ec 1c             	sub    esp,0x1c
c001388f:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013894:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001389a:	83 e0 04             	and    eax,0x4
c001389d:	84 c0                	test   al,al
c001389f:	75 07                	jne    c00138a8 <findDataTable(unsigned char*, char*)+0x1c>
c00138a1:	b8 00 00 00 00       	mov    eax,0x0
c00138a6:	eb 7c                	jmp    c0013924 <findDataTable(unsigned char*, char*)+0x98>
c00138a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138b0:	a1 ec 49 02 c0       	mov    eax,ds:0xc00249ec
c00138b5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00138b9:	7d 3a                	jge    c00138f5 <findDataTable(unsigned char*, char*)+0x69>
c00138bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138bf:	c1 e0 03             	shl    eax,0x3
c00138c2:	05 00 4a 02 c0       	add    eax,0xc0024a00
c00138c7:	83 ec 04             	sub    esp,0x4
c00138ca:	6a 04                	push   0x4
c00138cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138d0:	50                   	push   eax
c00138d1:	e8 4b cd fe ff       	call   c0000621 <memcmp>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	85 c0                	test   eax,eax
c00138db:	0f 94 c0             	sete   al
c00138de:	84 c0                	test   al,al
c00138e0:	74 0d                	je     c00138ef <findDataTable(unsigned char*, char*)+0x63>
c00138e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138e6:	8b 04 c5 04 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb5fc]
c00138ed:	eb 35                	jmp    c0013924 <findDataTable(unsigned char*, char*)+0x98>
c00138ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00138f3:	eb bb                	jmp    c00138b0 <findDataTable(unsigned char*, char*)+0x24>
c00138f5:	a0 00 4c 02 c0       	mov    al,ds:0xc0024c00
c00138fa:	84 c0                	test   al,al
c00138fc:	74 07                	je     c0013905 <findDataTable(unsigned char*, char*)+0x79>
c00138fe:	b8 58 00 00 00       	mov    eax,0x58
c0013903:	eb 05                	jmp    c001390a <findDataTable(unsigned char*, char*)+0x7e>
c0013905:	b8 52 00 00 00       	mov    eax,0x52
c001390a:	83 ec 04             	sub    esp,0x4
c001390d:	50                   	push   eax
c001390e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013912:	68 b0 1f 02 c0       	push   0xc0021fb0
c0013917:	e8 f1 b7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	b8 00 00 00 00       	mov    eax,0x0
c0013924:	83 c4 1c             	add    esp,0x1c
c0013927:	c3                   	ret    

c0013928 <scanMADT()>:
c0013928:	83 ec 2c             	sub    esp,0x2c
c001392b:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013930:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013936:	83 e0 04             	and    eax,0x4
c0013939:	84 c0                	test   al,al
c001393b:	0f 84 73 03 00 00    	je     c0013cb4 <scanMADT()+0x38c>
c0013941:	e8 77 fb ff ff       	call   c00134bd <findRSDP()>
c0013946:	a3 0c 4c 02 c0       	mov    ds:0xc0024c0c,eax
c001394b:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c0013950:	85 c0                	test   eax,eax
c0013952:	75 19                	jne    c001396d <scanMADT()+0x45>
c0013954:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013959:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001395f:	83 e2 fb             	and    edx,0xfffffffb
c0013962:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013968:	e9 4b 03 00 00       	jmp    c0013cb8 <scanMADT()+0x390>
c001396d:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	50                   	push   eax
c0013976:	e8 f3 fd ff ff       	call   c001376e <findRSDT(unsigned char*)>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	a3 08 4c 02 c0       	mov    ds:0xc0024c08,eax
c0013983:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c0013988:	85 c0                	test   eax,eax
c001398a:	75 19                	jne    c00139a5 <scanMADT()+0x7d>
c001398c:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013991:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013997:	83 e2 fb             	and    edx,0xfffffffb
c001399a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139a0:	e9 13 03 00 00       	jmp    c0013cb8 <scanMADT()+0x390>
c00139a5:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00139aa:	83 ec 0c             	sub    esp,0xc
c00139ad:	50                   	push   eax
c00139ae:	e8 94 fb ff ff       	call   c0013547 <loadACPITables(unsigned char*)>
c00139b3:	83 c4 10             	add    esp,0x10
c00139b6:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00139bb:	83 ec 08             	sub    esp,0x8
c00139be:	68 ce 1e 02 c0       	push   0xc0021ece
c00139c3:	50                   	push   eax
c00139c4:	e8 c3 fe ff ff       	call   c001388c <findDataTable(unsigned char*, char*)>
c00139c9:	83 c4 10             	add    esp,0x10
c00139cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139d0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00139d5:	75 19                	jne    c00139f0 <scanMADT()+0xc8>
c00139d7:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c00139dc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139e2:	83 e2 fe             	and    edx,0xfffffffe
c00139e5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139eb:	e9 c8 02 00 00       	jmp    c0013cb8 <scanMADT()+0x390>
c00139f0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00139f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a03:	0f 87 af 02 00 00    	ja     c0013cb8 <scanMADT()+0x390>
c0013a09:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a11:	0f 87 a1 02 00 00    	ja     c0013cb8 <scanMADT()+0x390>
c0013a17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a23:	8d 50 01             	lea    edx,[eax+0x1]
c0013a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a32:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a3a:	8d 50 01             	lea    edx,[eax+0x1]
c0013a3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a49:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013a4d:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013a52:	0f 86 5f 02 00 00    	jbe    c0013cb7 <scanMADT()+0x38f>
c0013a58:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013a5d:	75 57                	jne    c0013ab6 <scanMADT()+0x18e>
c0013a5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a63:	8d 50 01             	lea    edx,[eax+0x1]
c0013a66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a6a:	8a 15 40 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024d40
c0013a70:	0f b6 d2             	movzx  edx,dl
c0013a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a77:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013a7b:	88 82 80 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb280],al
c0013a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a85:	8d 50 01             	lea    edx,[eax+0x1]
c0013a88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a8c:	8a 15 40 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024d40
c0013a92:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013a95:	88 0d 40 4d 02 c0    	mov    BYTE PTR ds:0xc0024d40,cl
c0013a9b:	0f b6 d2             	movzx  edx,dl
c0013a9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013aa2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013aa6:	88 82 60 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb2a0],al
c0013aac:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013ab1:	e9 ea 01 00 00       	jmp    c0013ca0 <scanMADT()+0x378>
c0013ab6:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013abb:	0f 85 14 01 00 00    	jne    c0013bd5 <scanMADT()+0x2ad>
c0013ac1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0013ac8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013acc:	8a 15 10 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024c10
c0013ad2:	0f b6 d2             	movzx  edx,dl
c0013ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ad9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013add:	88 82 20 4c 02 c0    	mov    BYTE PTR [edx-0x3ffdb3e0],al
c0013ae3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013ae7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aef:	01 d0                	add    eax,edx
c0013af1:	83 c0 2c             	add    eax,0x2c
c0013af4:	8a 00                	mov    al,BYTE PTR [eax]
c0013af6:	0f b6 d0             	movzx  edx,al
c0013af9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013afd:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b04:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b08:	0f b6 c0             	movzx  eax,al
c0013b0b:	c1 e0 08             	shl    eax,0x8
c0013b0e:	89 d1                	mov    ecx,edx
c0013b10:	09 c1                	or     ecx,eax
c0013b12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b16:	8d 50 02             	lea    edx,[eax+0x2]
c0013b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b1d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b21:	0f b6 c0             	movzx  eax,al
c0013b24:	c1 e0 10             	shl    eax,0x10
c0013b27:	09 c1                	or     ecx,eax
c0013b29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b2d:	8d 50 03             	lea    edx,[eax+0x3]
c0013b30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b34:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b38:	0f b6 c0             	movzx  eax,al
c0013b3b:	c1 e0 18             	shl    eax,0x18
c0013b3e:	09 c1                	or     ecx,eax
c0013b40:	89 ca                	mov    edx,ecx
c0013b42:	a0 10 4c 02 c0       	mov    al,ds:0xc0024c10
c0013b47:	0f b6 c0             	movzx  eax,al
c0013b4a:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0013b51:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b5e:	01 d0                	add    eax,edx
c0013b60:	83 c0 2c             	add    eax,0x2c
c0013b63:	8a 00                	mov    al,BYTE PTR [eax]
c0013b65:	0f b6 d0             	movzx  edx,al
c0013b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b6c:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b73:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b77:	0f b6 c0             	movzx  eax,al
c0013b7a:	c1 e0 08             	shl    eax,0x8
c0013b7d:	89 d1                	mov    ecx,edx
c0013b7f:	09 c1                	or     ecx,eax
c0013b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b85:	8d 50 02             	lea    edx,[eax+0x2]
c0013b88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b90:	0f b6 c0             	movzx  eax,al
c0013b93:	c1 e0 10             	shl    eax,0x10
c0013b96:	09 c1                	or     ecx,eax
c0013b98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b9c:	8d 50 03             	lea    edx,[eax+0x3]
c0013b9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ba3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ba7:	0f b6 c0             	movzx  eax,al
c0013baa:	c1 e0 18             	shl    eax,0x18
c0013bad:	09 c1                	or     ecx,eax
c0013baf:	89 ca                	mov    edx,ecx
c0013bb1:	a0 10 4c 02 c0       	mov    al,ds:0xc0024c10
c0013bb6:	0f b6 c0             	movzx  eax,al
c0013bb9:	89 14 85 c0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb340],edx
c0013bc0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bc5:	a0 10 4c 02 c0       	mov    al,ds:0xc0024c10
c0013bca:	40                   	inc    eax
c0013bcb:	a2 10 4c 02 c0       	mov    ds:0xc0024c10,al
c0013bd0:	e9 cb 00 00 00       	jmp    c0013ca0 <scanMADT()+0x378>
c0013bd5:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013bda:	0f 85 a6 00 00 00    	jne    c0013c86 <scanMADT()+0x35e>
c0013be0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be4:	8d 50 01             	lea    edx,[eax+0x1]
c0013be7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013bf3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bfb:	8d 50 01             	lea    edx,[eax+0x1]
c0013bfe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c02:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c0a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c16:	01 d0                	add    eax,edx
c0013c18:	83 c0 2c             	add    eax,0x2c
c0013c1b:	8a 00                	mov    al,BYTE PTR [eax]
c0013c1d:	0f b6 d0             	movzx  edx,al
c0013c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c24:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c2b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c2f:	0f b6 c0             	movzx  eax,al
c0013c32:	c1 e0 08             	shl    eax,0x8
c0013c35:	89 d1                	mov    ecx,edx
c0013c37:	09 c1                	or     ecx,eax
c0013c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3d:	8d 50 02             	lea    edx,[eax+0x2]
c0013c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c44:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c48:	0f b6 c0             	movzx  eax,al
c0013c4b:	c1 e0 10             	shl    eax,0x10
c0013c4e:	09 c1                	or     ecx,eax
c0013c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c54:	8d 50 03             	lea    edx,[eax+0x3]
c0013c57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c5f:	0f b6 c0             	movzx  eax,al
c0013c62:	c1 e0 18             	shl    eax,0x18
c0013c65:	09 c8                	or     eax,ecx
c0013c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c6b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c70:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013c75:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c7e:	88 90 c0 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc540],dl
c0013c84:	eb 1a                	jmp    c0013ca0 <scanMADT()+0x378>
c0013c86:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013c8b:	75 07                	jne    c0013c94 <scanMADT()+0x36c>
c0013c8d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c92:	eb 0c                	jmp    c0013ca0 <scanMADT()+0x378>
c0013c94:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013c99:	75 05                	jne    c0013ca0 <scanMADT()+0x378>
c0013c9b:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013ca0:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013ca5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ca9:	01 d0                	add    eax,edx
c0013cab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013caf:	e9 44 fd ff ff       	jmp    c00139f8 <scanMADT()+0xd0>
c0013cb4:	90                   	nop
c0013cb5:	eb 01                	jmp    c0013cb8 <scanMADT()+0x390>
c0013cb7:	90                   	nop
c0013cb8:	83 c4 2c             	add    esp,0x2c
c0013cbb:	c3                   	ret    

c0013cbc <ACPI::ACPI()>:
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc3:	83 ec 08             	sub    esp,0x8
c0013cc6:	68 d3 1e 02 c0       	push   0xc0021ed3
c0013ccb:	50                   	push   eax
c0013ccc:	e8 37 ca ff ff       	call   c0010708 <Device::Device(char const*)>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	ba 7c 20 02 c0       	mov    edx,0xc002207c
c0013cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdd:	89 10                	mov    DWORD PTR [eax],edx
c0013cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cee:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfc:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d11:	e8 12 fc ff ff       	call   c0013928 <scanMADT()>
c0013d16:	90                   	nop
c0013d17:	83 c4 0c             	add    esp,0xc
c0013d1a:	c3                   	ret    
c0013d1b:	90                   	nop

c0013d1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d1c:	83 ec 2c             	sub    esp,0x2c
c0013d1f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d27:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d2b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d2f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d34:	88 d0                	mov    al,dl
c0013d36:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d3a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013d3f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013d47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d4b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013d51:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013d55:	0f 8d 97 00 00 00    	jge    c0013df2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013d5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d63:	83 c2 2a             	add    edx,0x2a
c0013d66:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013d6a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013d6f:	75 78                	jne    c0013de9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013d71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d79:	83 c2 2a             	add    edx,0x2a
c0013d7c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013d80:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013d84:	75 63                	jne    c0013de9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013d86:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013d8b:	74 3a                	je     c0013dc7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013d8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d95:	83 c2 2a             	add    edx,0x2a
c0013d98:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013da0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013da3:	39 c2                	cmp    edx,eax
c0013da5:	74 10                	je     c0013db7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013da7:	83 ec 0c             	sub    esp,0xc
c0013daa:	68 e0 1f 02 c0       	push   0xc0021fe0
c0013daf:	e8 24 1b 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	83 ec 0c             	sub    esp,0xc
c0013dba:	68 d8 1e 02 c0       	push   0xc0021ed8
c0013dbf:	e8 14 1b 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dd3:	83 c2 2a             	add    edx,0x2a
c0013dd6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013dda:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ddc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013ddf:	89 01                	mov    DWORD PTR [ecx],eax
c0013de1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013de4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013de9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013ded:	e9 55 ff ff ff       	jmp    c0013d47 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013df2:	90                   	nop
c0013df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df7:	83 c4 2c             	add    esp,0x2c
c0013dfa:	c2 04 00             	ret    0x4
c0013dfd:	90                   	nop

c0013dfe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013dfe:	56                   	push   esi
c0013dff:	53                   	push   ebx
c0013e00:	83 ec 14             	sub    esp,0x14
c0013e03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e0f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e14:	88 c8                	mov    al,cl
c0013e16:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e1a:	88 d0                	mov    al,dl
c0013e1c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e24:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e34:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e39:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e3e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013e43:	83 ec 04             	sub    esp,0x4
c0013e46:	56                   	push   esi
c0013e47:	53                   	push   ebx
c0013e48:	51                   	push   ecx
c0013e49:	52                   	push   edx
c0013e4a:	50                   	push   eax
c0013e4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e4f:	68 10 20 02 c0       	push   0xc0022010
c0013e54:	e8 b4 b2 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0013e59:	83 c4 20             	add    esp,0x20
c0013e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e60:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e6a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013e6d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e71:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013e75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e79:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e83:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e8a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e93:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e99:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013e9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea4:	83 c2 2a             	add    edx,0x2a
c0013ea7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eaf:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ebc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ec0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec8:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ece:	8d 50 01             	lea    edx,[eax+0x1]
c0013ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed5:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013edf:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ee5:	3d 00 08 00 00       	cmp    eax,0x800
c0013eea:	75 10                	jne    c0013efc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	68 e7 1e 02 c0       	push   0xc0021ee7
c0013ef4:	e8 df 19 00 00       	call   c00158d8 <Krnl::panic(char const*)>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	90                   	nop
c0013efd:	83 c4 14             	add    esp,0x14
c0013f00:	5b                   	pop    ebx
c0013f01:	5e                   	pop    esi
c0013f02:	c3                   	ret    
c0013f03:	90                   	nop

c0013f04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f04:	b8 00 00 00 00       	mov    eax,0x0
c0013f09:	c3                   	ret    

c0013f0a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f0a:	83 ec 1c             	sub    esp,0x1c
c0013f0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f11:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f18:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013f1d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f22:	83 ec 08             	sub    esp,0x8
c0013f25:	52                   	push   edx
c0013f26:	50                   	push   eax
c0013f27:	e8 00 77 ff ff       	call   c000b62c <Computer::readCMOS(unsigned char)>
c0013f2c:	83 c4 10             	add    esp,0x10
c0013f2f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f33:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0013f38:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f3d:	83 ec 04             	sub    esp,0x4
c0013f40:	6a 01                	push   0x1
c0013f42:	52                   	push   edx
c0013f43:	50                   	push   eax
c0013f44:	e8 f9 77 ff ff       	call   c000b742 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013f49:	83 c4 10             	add    esp,0x10
c0013f4c:	90                   	nop
c0013f4d:	83 c4 1c             	add    esp,0x1c
c0013f50:	c3                   	ret    
c0013f51:	90                   	nop

c0013f52 <ACPI::open(int, int, void*)>:
c0013f52:	53                   	push   ebx
c0013f53:	83 ec 18             	sub    esp,0x18
c0013f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5a:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f65:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013f6b:	84 c0                	test   al,al
c0013f6d:	74 60                	je     c0013fcf <ACPI::open(int, int, void*)+0x7d>
c0013f6f:	83 ec 0c             	sub    esp,0xc
c0013f72:	68 58 01 00 00       	push   0x158
c0013f77:	e8 a2 b0 ff ff       	call   c000f01e <operator new(unsigned long)>
c0013f7c:	83 c4 10             	add    esp,0x10
c0013f7f:	89 c3                	mov    ebx,eax
c0013f81:	83 ec 0c             	sub    esp,0xc
c0013f84:	53                   	push   ebx
c0013f85:	e8 92 7f 00 00       	call   c001bf1c <PCI::PCI()>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f95:	83 ec 08             	sub    esp,0x8
c0013f98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f9c:	50                   	push   eax
c0013f9d:	e8 76 c5 ff ff       	call   c0010518 <Device::addChild(Device*)>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fab:	83 c0 08             	add    eax,0x8
c0013fae:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fb0:	6a 00                	push   0x0
c0013fb2:	6a 00                	push   0x0
c0013fb4:	6a 00                	push   0x0
c0013fb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fba:	ff d0                	call   eax
c0013fbc:	83 c4 10             	add    esp,0x10
c0013fbf:	83 ec 0c             	sub    esp,0xc
c0013fc2:	68 04 1f 02 c0       	push   0xc0021f04
c0013fc7:	e8 41 b1 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	68 0f 1f 02 c0       	push   0xc0021f0f
c0013fd7:	e8 9d 37 00 00       	call   c0017779 <Thr::loadKernelSymbolTable(char const*)>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c0013fe5:	83 ec 08             	sub    esp,0x8
c0013fe8:	6a 01                	push   0x1
c0013fea:	68 2d 1f 02 c0       	push   0xc0021f2d
c0013fef:	e8 67 42 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	83 ec 08             	sub    esp,0x8
c0013ffa:	53                   	push   ebx
c0013ffb:	50                   	push   eax
c0013ffc:	e8 20 44 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c001400a:	83 ec 08             	sub    esp,0x8
c001400d:	6a 01                	push   0x1
c001400f:	68 4a 1f 02 c0       	push   0xc0021f4a
c0014014:	e8 42 42 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	83 ec 08             	sub    esp,0x8
c001401f:	53                   	push   ebx
c0014020:	50                   	push   eax
c0014021:	e8 fb 43 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001402e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014034:	83 e0 04             	and    eax,0x4
c0014037:	84 c0                	test   al,al
c0014039:	0f 84 cf 00 00 00    	je     c001410e <ACPI::open(int, int, void*)+0x1bc>
c001403f:	83 ec 0c             	sub    esp,0xc
c0014042:	68 14 01 00 00       	push   0x114
c0014047:	e8 d2 af ff ff       	call   c000f01e <operator new(unsigned long)>
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	89 c3                	mov    ebx,eax
c0014051:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0014056:	83 ec 04             	sub    esp,0x4
c0014059:	50                   	push   eax
c001405a:	68 67 1f 02 c0       	push   0xc0021f67
c001405f:	53                   	push   ebx
c0014060:	e8 d7 b5 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001406c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014071:	74 17                	je     c001408a <ACPI::open(int, int, void*)+0x138>
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001407a:	e8 8f b8 ff ff       	call   c000f90e <File::exists()>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	84 c0                	test   al,al
c0014084:	74 04                	je     c001408a <ACPI::open(int, int, void*)+0x138>
c0014086:	b0 01                	mov    al,0x1
c0014088:	eb 02                	jmp    c001408c <ACPI::open(int, int, void*)+0x13a>
c001408a:	b0 00                	mov    al,0x0
c001408c:	84 c0                	test   al,al
c001408e:	74 25                	je     c00140b5 <ACPI::open(int, int, void*)+0x163>
c0014090:	8b 1d 68 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024368
c0014096:	83 ec 08             	sub    esp,0x8
c0014099:	6a 01                	push   0x1
c001409b:	68 67 1f 02 c0       	push   0xc0021f67
c00140a0:	e8 b6 41 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	83 ec 08             	sub    esp,0x8
c00140ab:	53                   	push   ebx
c00140ac:	50                   	push   eax
c00140ad:	e8 6f 43 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140ba:	74 1e                	je     c00140da <ACPI::open(int, int, void*)+0x188>
c00140bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140c1:	74 17                	je     c00140da <ACPI::open(int, int, void*)+0x188>
c00140c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00140c9:	83 c0 08             	add    eax,0x8
c00140cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140d5:	ff d0                	call   eax
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	68 84 1f 02 c0       	push   0xc0021f84
c00140e7:	50                   	push   eax
c00140e8:	e8 9f f7 ff ff       	call   c001388c <findDataTable(unsigned char*, char*)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140f4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00140f9:	74 13                	je     c001410e <ACPI::open(int, int, void*)+0x1bc>
c00140fb:	83 ec 08             	sub    esp,0x8
c00140fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014102:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014106:	e8 ff fd ff ff       	call   c0013f0a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001410b:	83 c4 10             	add    esp,0x10
c001410e:	b8 00 00 00 00       	mov    eax,0x0
c0014113:	83 c4 18             	add    esp,0x18
c0014116:	5b                   	pop    ebx
c0014117:	c3                   	ret    

c0014118 <ACPI::sleep()>:
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0014120:	85 c0                	test   eax,eax
c0014122:	74 07                	je     c001412b <ACPI::sleep()+0x13>
c0014124:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0014129:	ff d0                	call   eax
c001412b:	90                   	nop
c001412c:	83 c4 0c             	add    esp,0xc
c001412f:	c3                   	ret    

c0014130 <CPU::close(int, int, void*)>:
c0014130:	31 c0                	xor    eax,eax
c0014132:	c3                   	ret    

c0014133 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014133:	55                   	push   ebp
c0014134:	57                   	push   edi
c0014135:	56                   	push   esi
c0014136:	53                   	push   ebx
c0014137:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001413b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001413f:	89 ce                	mov    esi,ecx
c0014141:	89 d5                	mov    ebp,edx
c0014143:	80 f9 04             	cmp    cl,0x4
c0014146:	75 28                	jne    c0014170 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0014148:	8d 42 f9             	lea    eax,[edx-0x7]
c001414b:	3c 03                	cmp    al,0x3
c001414d:	0f 86 63 01 00 00    	jbe    c00142b6 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0014153:	80 fa 03             	cmp    dl,0x3
c0014156:	0f 84 5a 01 00 00    	je     c00142b6 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001415c:	8d 7a f2             	lea    edi,[edx-0xe]
c001415f:	b8 90 3c 02 c0       	mov    eax,0xc0023c90
c0014164:	89 fb                	mov    ebx,edi
c0014166:	80 fb 01             	cmp    bl,0x1
c0014169:	77 4e                	ja     c00141b9 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001416b:	e9 52 01 00 00       	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014170:	80 f9 05             	cmp    cl,0x5
c0014173:	75 4d                	jne    c00141c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0014175:	b8 a0 3c 02 c0       	mov    eax,0xc0023ca0
c001417a:	80 fa 03             	cmp    dl,0x3
c001417d:	0f 86 3f 01 00 00    	jbe    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014183:	8d 7a fa             	lea    edi,[edx-0x6]
c0014186:	b8 b0 3c 02 c0       	mov    eax,0xc0023cb0
c001418b:	89 fb                	mov    ebx,edi
c001418d:	80 fb 01             	cmp    bl,0x1
c0014190:	0f 86 2c 01 00 00    	jbe    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014196:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c001419b:	80 fa 08             	cmp    dl,0x8
c001419e:	0f 84 1e 01 00 00    	je     c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141a4:	89 d7                	mov    edi,edx
c00141a6:	b8 d0 3c 02 c0       	mov    eax,0xc0023cd0
c00141ab:	83 e7 fb             	and    edi,0xfffffffb
c00141ae:	89 fb                	mov    ebx,edi
c00141b0:	80 fb 09             	cmp    bl,0x9
c00141b3:	0f 84 09 01 00 00    	je     c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141b9:	31 c0                	xor    eax,eax
c00141bb:	89 eb                	mov    ebx,ebp
c00141bd:	0f b6 fb             	movzx  edi,bl
c00141c0:	eb 30                	jmp    c00141f2 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00141c2:	31 c0                	xor    eax,eax
c00141c4:	80 f9 06             	cmp    cl,0x6
c00141c7:	75 f2                	jne    c00141bb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141c9:	80 fa 0a             	cmp    dl,0xa
c00141cc:	77 ed                	ja     c00141bb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141ce:	bf de 05 00 00       	mov    edi,0x5de
c00141d3:	0f a3 d7             	bt     edi,edx
c00141d6:	73 e3                	jae    c00141bb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141d8:	b8 e0 3c 02 c0       	mov    eax,0xc0023ce0
c00141dd:	e9 e0 00 00 00       	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141e2:	39 c7                	cmp    edi,eax
c00141e4:	0f 84 d3 00 00 00    	je     c00142bd <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00141ea:	40                   	inc    eax
c00141eb:	3d d0 00 00 00       	cmp    eax,0xd0
c00141f0:	74 09                	je     c00141fb <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00141f2:	89 f3                	mov    ebx,esi
c00141f4:	80 fb 0f             	cmp    bl,0xf
c00141f7:	75 f1                	jne    c00141ea <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00141f9:	eb e7                	jmp    c00141e2 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00141fb:	80 f9 10             	cmp    cl,0x10
c00141fe:	75 14                	jne    c0014214 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0014200:	8d 42 fc             	lea    eax,[edx-0x4]
c0014203:	83 e0 fb             	and    eax,0xfffffffb
c0014206:	3c 02                	cmp    al,0x2
c0014208:	76 34                	jbe    c001423e <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c001420a:	b8 92 23 02 c0       	mov    eax,0xc0022392
c001420f:	80 fa 02             	cmp    dl,0x2
c0014212:	eb 24                	jmp    c0014238 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0014214:	80 f9 11             	cmp    cl,0x11
c0014217:	75 13                	jne    c001422c <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0014219:	b8 92 23 02 c0       	mov    eax,0xc0022392
c001421e:	80 fa 03             	cmp    dl,0x3
c0014221:	0f 85 9b 00 00 00    	jne    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014227:	e9 91 00 00 00       	jmp    c00142bd <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001422c:	80 f9 12             	cmp    cl,0x12
c001422f:	75 14                	jne    c0014245 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0014231:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014236:	fe ca                	dec    dl
c0014238:	0f 85 84 00 00 00    	jne    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001423e:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c0014243:	eb 7d                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014245:	80 f9 14             	cmp    cl,0x14
c0014248:	75 12                	jne    c001425c <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001424a:	4a                   	dec    edx
c001424b:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014250:	80 fa 01             	cmp    dl,0x1
c0014253:	77 6d                	ja     c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014255:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c001425a:	eb 66                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001425c:	80 f9 15             	cmp    cl,0x15
c001425f:	75 31                	jne    c0014292 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0014261:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0014266:	80 fa 01             	cmp    dl,0x1
c0014269:	74 57                	je     c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001426b:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014270:	80 fa 13             	cmp    dl,0x13
c0014273:	76 0c                	jbe    c0014281 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0014275:	80 fa 30             	cmp    dl,0x30
c0014278:	75 48                	jne    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001427a:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c001427f:	eb 41                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014281:	b9 04 00 09 00       	mov    ecx,0x90004
c0014286:	0f a3 d1             	bt     ecx,edx
c0014289:	73 37                	jae    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001428b:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c0014290:	eb 30                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014292:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014297:	80 f9 16             	cmp    cl,0x16
c001429a:	75 26                	jne    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001429c:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00142a1:	84 d2                	test   dl,dl
c00142a3:	74 1d                	je     c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142a5:	b8 92 23 02 c0       	mov    eax,0xc0022392
c00142aa:	80 fa 30             	cmp    dl,0x30
c00142ad:	75 13                	jne    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142af:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00142b4:	eb 0c                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142b6:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c00142bb:	eb 05                	jmp    c00142c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142bd:	b8 f0 3c 02 c0       	mov    eax,0xc0023cf0
c00142c2:	5b                   	pop    ebx
c00142c3:	5e                   	pop    esi
c00142c4:	5f                   	pop    edi
c00142c5:	5d                   	pop    ebp
c00142c6:	c3                   	ret    

c00142c7 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00142c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00142cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00142cf:	80 f9 04             	cmp    cl,0x4
c00142d2:	75 6b                	jne    c001433f <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00142d4:	b8 e0 3a 02 c0       	mov    eax,0xc0023ae0
c00142d9:	80 fa 01             	cmp    dl,0x1
c00142dc:	0f 86 92 02 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142e2:	b8 f0 3a 02 c0       	mov    eax,0xc0023af0
c00142e7:	80 fa 02             	cmp    dl,0x2
c00142ea:	0f 84 84 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142f0:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c00142f5:	80 fa 03             	cmp    dl,0x3
c00142f8:	0f 84 76 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142fe:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c0014303:	80 fa 04             	cmp    dl,0x4
c0014306:	0f 84 68 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001430c:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c0014311:	80 fa 05             	cmp    dl,0x5
c0014314:	0f 84 5a 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001431a:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c001431f:	80 fa 07             	cmp    dl,0x7
c0014322:	0f 84 4c 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014328:	83 ea 08             	sub    edx,0x8
c001432b:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014330:	80 fa 01             	cmp    dl,0x1
c0014333:	0f 87 3b 02 00 00    	ja     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014339:	b8 30 3b 02 c0       	mov    eax,0xc0023b30
c001433e:	c3                   	ret    
c001433f:	80 f9 05             	cmp    cl,0x5
c0014342:	75 45                	jne    c0014389 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0014344:	8d 4a ff             	lea    ecx,[edx-0x1]
c0014347:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c001434c:	80 f9 02             	cmp    cl,0x2
c001434f:	0f 86 1f 02 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014355:	80 fa 04             	cmp    dl,0x4
c0014358:	0f 84 f3 01 00 00    	je     c0014551 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c001435e:	80 fa 07             	cmp    dl,0x7
c0014361:	0f 84 0d 02 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014367:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c001436c:	80 fa 08             	cmp    dl,0x8
c001436f:	0f 84 ff 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014375:	b8 92 23 02 c0       	mov    eax,0xc0022392
c001437a:	80 fa 09             	cmp    dl,0x9
c001437d:	0f 85 f1 01 00 00    	jne    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014383:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c0014388:	c3                   	ret    
c0014389:	80 f9 06             	cmp    cl,0x6
c001438c:	0f 85 85 01 00 00    	jne    c0014517 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0014392:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014397:	80 fa 01             	cmp    dl,0x1
c001439a:	0f 84 d4 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143a0:	8d 42 fb             	lea    eax,[edx-0x5]
c00143a3:	3c 01                	cmp    al,0x1
c00143a5:	0f 86 ac 01 00 00    	jbe    c0014557 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143ab:	80 fa 03             	cmp    dl,0x3
c00143ae:	0f 84 a3 01 00 00    	je     c0014557 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143b4:	8d 4a f9             	lea    ecx,[edx-0x7]
c00143b7:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c00143bc:	80 f9 01             	cmp    cl,0x1
c00143bf:	0f 86 af 01 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143c5:	80 fa 09             	cmp    dl,0x9
c00143c8:	0f 84 8f 01 00 00    	je     c001455d <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00143ce:	8d 4a f6             	lea    ecx,[edx-0xa]
c00143d1:	80 f9 01             	cmp    cl,0x1
c00143d4:	0f 86 9a 01 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143da:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c00143df:	80 fa 0d             	cmp    dl,0xd
c00143e2:	0f 84 8c 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143e8:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c00143ed:	80 fa 0e             	cmp    dl,0xe
c00143f0:	0f 84 7e 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143f6:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c00143fb:	80 fa 0f             	cmp    dl,0xf
c00143fe:	0f 84 70 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014404:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0014409:	80 fa 15             	cmp    dl,0x15
c001440c:	0f 84 62 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014412:	8d 4a ea             	lea    ecx,[edx-0x16]
c0014415:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c001441a:	80 f9 01             	cmp    cl,0x1
c001441d:	0f 86 51 01 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014423:	80 fa 1a             	cmp    dl,0x1a
c0014426:	0f 84 37 01 00 00    	je     c0014563 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c001442c:	80 fa 1c             	cmp    dl,0x1c
c001442f:	0f 84 34 01 00 00    	je     c0014569 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0014435:	80 fa 1d             	cmp    dl,0x1d
c0014438:	0f 84 36 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001443e:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0014443:	80 fa 25             	cmp    dl,0x25
c0014446:	0f 84 28 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001444c:	8d 4a da             	lea    ecx,[edx-0x26]
c001444f:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c0014454:	80 f9 01             	cmp    cl,0x1
c0014457:	0f 86 17 01 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001445d:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0014462:	80 fa 2a             	cmp    dl,0x2a
c0014465:	0f 84 09 01 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001446b:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0014470:	80 fa 2c             	cmp    dl,0x2c
c0014473:	0f 84 fb 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014479:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c001447e:	80 fa 2d             	cmp    dl,0x2d
c0014481:	0f 84 ed 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014487:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c001448c:	80 fa 2e             	cmp    dl,0x2e
c001448f:	0f 84 df 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014495:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c001449a:	80 fa 2f             	cmp    dl,0x2f
c001449d:	0f 84 d1 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144a3:	8d 4a cb             	lea    ecx,[edx-0x35]
c00144a6:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c00144ab:	80 f9 01             	cmp    cl,0x1
c00144ae:	0f 86 c0 00 00 00    	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144b4:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c00144b9:	80 fa 37             	cmp    dl,0x37
c00144bc:	0f 84 b2 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144c2:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c00144c7:	80 fa 3a             	cmp    dl,0x3a
c00144ca:	0f 84 a4 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144d0:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c00144d5:	80 fa 3c             	cmp    dl,0x3c
c00144d8:	0f 84 96 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144de:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c00144e3:	80 fa 3d             	cmp    dl,0x3d
c00144e6:	0f 84 88 00 00 00    	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144ec:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c00144f1:	80 fa 3e             	cmp    dl,0x3e
c00144f4:	74 7e                	je     c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144f6:	8d 42 bb             	lea    eax,[edx-0x45]
c00144f9:	3c 01                	cmp    al,0x1
c00144fb:	76 72                	jbe    c001456f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00144fd:	80 fa 3f             	cmp    dl,0x3f
c0014500:	74 6d                	je     c001456f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0014502:	80 fa 4a             	cmp    dl,0x4a
c0014505:	74 0a                	je     c0014511 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0014507:	b8 92 23 02 c0       	mov    eax,0xc0022392
c001450c:	80 fa 4d             	cmp    dl,0x4d
c001450f:	75 63                	jne    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014511:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c0014516:	c3                   	ret    
c0014517:	b8 92 23 02 c0       	mov    eax,0xc0022392
c001451c:	80 f9 0b             	cmp    cl,0xb
c001451f:	75 0a                	jne    c001452b <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0014521:	fe ca                	dec    dl
c0014523:	75 4f                	jne    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014525:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c001452a:	c3                   	ret    
c001452b:	80 f9 0f             	cmp    cl,0xf
c001452e:	75 44                	jne    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014530:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c0014535:	80 fa 02             	cmp    dl,0x2
c0014538:	76 3a                	jbe    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001453a:	8d 42 fd             	lea    eax,[edx-0x3]
c001453d:	3c 01                	cmp    al,0x1
c001453f:	76 0a                	jbe    c001454b <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0014541:	b8 92 23 02 c0       	mov    eax,0xc0022392
c0014546:	80 fa 06             	cmp    dl,0x6
c0014549:	75 29                	jne    c0014574 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001454b:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0014550:	c3                   	ret    
c0014551:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c0014556:	c3                   	ret    
c0014557:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c001455c:	c3                   	ret    
c001455d:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0014562:	c3                   	ret    
c0014563:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c0014568:	c3                   	ret    
c0014569:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c001456e:	c3                   	ret    
c001456f:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c0014574:	c3                   	ret    

c0014575 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014575:	60                   	pusha  
c0014576:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001457a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001457e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014582:	9c                   	pushf  
c0014583:	fa                   	cli    
c0014584:	0f 09                	wbinvd 
c0014586:	0f 30                	wrmsr  
c0014588:	9d                   	popf   
c0014589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001458d:	89 02                	mov    DWORD PTR [edx],eax
c001458f:	61                   	popa   
c0014590:	c3                   	ret    

c0014591 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014591:	60                   	pusha  
c0014592:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014596:	9c                   	pushf  
c0014597:	fa                   	cli    
c0014598:	0f 09                	wbinvd 
c001459a:	31 c0                	xor    eax,eax
c001459c:	31 d2                	xor    edx,edx
c001459e:	0f 32                	rdmsr  
c00145a0:	9d                   	popf   
c00145a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145a5:	89 02                	mov    DWORD PTR [edx],eax
c00145a7:	61                   	popa   
c00145a8:	c3                   	ret    

c00145a9 <AMD_K6_writeback(int, int, int)>:
c00145a9:	56                   	push   esi
c00145aa:	53                   	push   ebx
c00145ab:	83 ec 10             	sub    esp,0x10
c00145ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b2:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00145b7:	75 5d                	jne    c0014616 <AMD_K6_writeback(int, int, int)+0x6d>
c00145b9:	83 f8 08             	cmp    eax,0x8
c00145bc:	75 09                	jne    c00145c7 <AMD_K6_writeback(int, int, int)+0x1e>
c00145be:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00145c3:	7e 13                	jle    c00145d8 <AMD_K6_writeback(int, int, int)+0x2f>
c00145c5:	eb 30                	jmp    c00145f7 <AMD_K6_writeback(int, int, int)+0x4e>
c00145c7:	83 f8 06             	cmp    eax,0x6
c00145ca:	7c 4a                	jl     c0014616 <AMD_K6_writeback(int, int, int)+0x6d>
c00145cc:	83 f8 07             	cmp    eax,0x7
c00145cf:	7e 07                	jle    c00145d8 <AMD_K6_writeback(int, int, int)+0x2f>
c00145d1:	83 f8 09             	cmp    eax,0x9
c00145d4:	74 21                	je     c00145f7 <AMD_K6_writeback(int, int, int)+0x4e>
c00145d6:	eb 3e                	jmp    c0014616 <AMD_K6_writeback(int, int, int)+0x6d>
c00145d8:	89 e6                	mov    esi,esp
c00145da:	8b 1d a4 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243a4
c00145e0:	56                   	push   esi
c00145e1:	c1 eb 15             	shr    ebx,0x15
c00145e4:	68 82 00 00 c0       	push   0xc0000082
c00145e9:	83 e3 7e             	and    ebx,0x7e
c00145ec:	e8 a0 ff ff ff       	call   c0014591 <AMD_K6_read_msr(unsigned int, REGS*)>
c00145f1:	56                   	push   esi
c00145f2:	6a 00                	push   0x0
c00145f4:	53                   	push   ebx
c00145f5:	eb 12                	jmp    c0014609 <AMD_K6_writeback(int, int, int)+0x60>
c00145f7:	89 e3                	mov    ebx,esp
c00145f9:	53                   	push   ebx
c00145fa:	68 82 00 00 c0       	push   0xc0000082
c00145ff:	e8 8d ff ff ff       	call   c0014591 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014604:	53                   	push   ebx
c0014605:	6a 00                	push   0x0
c0014607:	6a 00                	push   0x0
c0014609:	68 82 00 00 c0       	push   0xc0000082
c001460e:	e8 62 ff ff ff       	call   c0014575 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014613:	83 c4 18             	add    esp,0x18
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	5b                   	pop    ebx
c001461a:	5e                   	pop    esi
c001461b:	c3                   	ret    

c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001461c:	55                   	push   ebp
c001461d:	57                   	push   edi
c001461e:	56                   	push   esi
c001461f:	53                   	push   ebx
c0014620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014624:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014628:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001462c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014630:	39 05 80 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d80,eax
c0014636:	75 23                	jne    c001465b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014638:	a1 ac 4d 02 c0       	mov    eax,ds:0xc0024dac
c001463d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014641:	89 06                	mov    DWORD PTR [esi],eax
c0014643:	a1 a8 4d 02 c0       	mov    eax,ds:0xc0024da8
c0014648:	89 07                	mov    DWORD PTR [edi],eax
c001464a:	a1 a4 4d 02 c0       	mov    eax,ds:0xc0024da4
c001464f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014652:	a1 a0 4d 02 c0       	mov    eax,ds:0xc0024da0
c0014657:	89 02                	mov    DWORD PTR [edx],eax
c0014659:	eb 3f                	jmp    c001469a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001465b:	31 c9                	xor    ecx,ecx
c001465d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014661:	0f a2                	cpuid  
c0014663:	89 06                	mov    DWORD PTR [esi],eax
c0014665:	89 1f                	mov    DWORD PTR [edi],ebx
c0014667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001466b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001466e:	89 10                	mov    DWORD PTR [eax],edx
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	a3 80 3d 02 c0       	mov    ds:0xc0023d80,eax
c0014679:	8b 06                	mov    eax,DWORD PTR [esi]
c001467b:	a3 ac 4d 02 c0       	mov    ds:0xc0024dac,eax
c0014680:	8b 07                	mov    eax,DWORD PTR [edi]
c0014682:	a3 a8 4d 02 c0       	mov    ds:0xc0024da8,eax
c0014687:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001468a:	a3 a4 4d 02 c0       	mov    ds:0xc0024da4,eax
c001468f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014693:	8b 00                	mov    eax,DWORD PTR [eax]
c0014695:	a3 a0 4d 02 c0       	mov    ds:0xc0024da0,eax
c001469a:	5b                   	pop    ebx
c001469b:	5e                   	pop    esi
c001469c:	5f                   	pop    edi
c001469d:	5d                   	pop    ebp
c001469e:	c3                   	ret    

c001469f <cpuidCheckEDX(unsigned int)>:
c001469f:	83 ec 10             	sub    esp,0x10
c00146a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146a6:	50                   	push   eax
c00146a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ab:	50                   	push   eax
c00146ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146b0:	50                   	push   eax
c00146b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146b5:	50                   	push   eax
c00146b6:	6a 01                	push   0x1
c00146b8:	e8 5f ff ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146c1:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00146c5:	0f 95 c0             	setne  al
c00146c8:	83 c4 24             	add    esp,0x24
c00146cb:	c3                   	ret    

c00146cc <cpuidCheckECX(unsigned int)>:
c00146cc:	83 ec 10             	sub    esp,0x10
c00146cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146d3:	50                   	push   eax
c00146d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146d8:	50                   	push   eax
c00146d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146dd:	50                   	push   eax
c00146de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146e2:	50                   	push   eax
c00146e3:	6a 01                	push   0x1
c00146e5:	e8 32 ff ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146ee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00146f2:	0f 95 c0             	setne  al
c00146f5:	83 c4 24             	add    esp,0x24
c00146f8:	c3                   	ret    

c00146f9 <cpuidCheckExtendedEBX(unsigned int)>:
c00146f9:	83 ec 10             	sub    esp,0x10
c00146fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014700:	50                   	push   eax
c0014701:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014705:	50                   	push   eax
c0014706:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001470a:	50                   	push   eax
c001470b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001470f:	50                   	push   eax
c0014710:	6a 07                	push   0x7
c0014712:	e8 05 ff ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014717:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001471b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001471f:	0f 95 c0             	setne  al
c0014722:	83 c4 24             	add    esp,0x24
c0014725:	c3                   	ret    

c0014726 <cpuidCheckExtendedECX(unsigned int)>:
c0014726:	83 ec 10             	sub    esp,0x10
c0014729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001472d:	50                   	push   eax
c001472e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014732:	50                   	push   eax
c0014733:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014737:	50                   	push   eax
c0014738:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001473c:	50                   	push   eax
c001473d:	6a 07                	push   0x7
c001473f:	e8 d8 fe ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014744:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014748:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001474c:	0f 95 c0             	setne  al
c001474f:	83 c4 24             	add    esp,0x24
c0014752:	c3                   	ret    

c0014753 <getCPUNumber()>:
c0014753:	31 c0                	xor    eax,eax
c0014755:	c3                   	ret    

c0014756 <thisCPU()>:
c0014756:	e8 f8 ff ff ff       	call   c0014753 <getCPUNumber()>
c001475b:	8b 15 68 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024368
c0014761:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0014768:	c3                   	ret    
c0014769:	90                   	nop

c001476a <CPU::CPU()>:
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014771:	83 ec 08             	sub    esp,0x8
c0014774:	68 92 23 02 c0       	push   0xc0022392
c0014779:	50                   	push   eax
c001477a:	e8 89 bf ff ff       	call   c0010708 <Device::Device(char const*)>
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c0014787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478b:	89 10                	mov    DWORD PTR [eax],edx
c001478d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014791:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001479b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479f:	05 78 01 00 00       	add    eax,0x178
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	50                   	push   eax
c00147a8:	e8 7f 70 ff ff       	call   c000b82c <GDT::GDT()>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b4:	05 7c 09 00 00       	add    eax,0x97c
c00147b9:	83 ec 0c             	sub    esp,0xc
c00147bc:	50                   	push   eax
c00147bd:	e8 ca 72 ff ff       	call   c000ba8c <IDT::IDT()>
c00147c2:	83 c4 10             	add    esp,0x10
c00147c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c9:	05 7c 11 00 00       	add    eax,0x117c
c00147ce:	83 ec 0c             	sub    esp,0xc
c00147d1:	50                   	push   eax
c00147d2:	e8 f9 92 ff ff       	call   c000dad0 <TSS::TSS()>
c00147d7:	83 c4 10             	add    esp,0x10
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00147e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00147f3:	90                   	nop
c00147f4:	83 c4 0c             	add    esp,0xc
c00147f7:	c3                   	ret    

c00147f8 <CPU::displayFeatures()>:
c00147f8:	53                   	push   ebx
c00147f9:	83 ec 10             	sub    esp,0x10
c00147fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014800:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014806:	68 a0 20 02 c0       	push   0xc00220a0
c001480b:	e8 fd a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014810:	59                   	pop    ecx
c0014811:	58                   	pop    eax
c0014812:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014818:	50                   	push   eax
c0014819:	68 b1 20 02 c0       	push   0xc00220b1
c001481e:	e8 ea a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014823:	58                   	pop    eax
c0014824:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001482a:	5a                   	pop    edx
c001482b:	c1 e8 0e             	shr    eax,0xe
c001482e:	0f b6 c0             	movzx  eax,al
c0014831:	50                   	push   eax
c0014832:	68 c2 20 02 c0       	push   0xc00220c2
c0014837:	e8 d1 a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001483c:	59                   	pop    ecx
c001483d:	58                   	pop    eax
c001483e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014844:	66 c1 e8 06          	shr    ax,0x6
c0014848:	0f b6 c0             	movzx  eax,al
c001484b:	50                   	push   eax
c001484c:	68 d3 20 02 c0       	push   0xc00220d3
c0014851:	e8 b7 a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014856:	c7 04 24 e6 24 02 c0 	mov    DWORD PTR [esp],0xc00224e6
c001485d:	e8 ab a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c001486a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014871:	74 05                	je     c0014878 <CPU::displayFeatures()+0x80>
c0014873:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014878:	52                   	push   edx
c0014879:	52                   	push   edx
c001487a:	50                   	push   eax
c001487b:	68 e4 20 02 c0       	push   0xc00220e4
c0014880:	e8 88 a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c001488d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014894:	78 05                	js     c001489b <CPU::displayFeatures()+0xa3>
c0014896:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c001489b:	51                   	push   ecx
c001489c:	51                   	push   ecx
c001489d:	50                   	push   eax
c001489e:	68 fb 20 02 c0       	push   0xc00220fb
c00148a3:	e8 65 a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00148a8:	83 c4 10             	add    esp,0x10
c00148ab:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00148b0:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00148b7:	75 05                	jne    c00148be <CPU::displayFeatures()+0xc6>
c00148b9:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c00148be:	52                   	push   edx
c00148bf:	52                   	push   edx
c00148c0:	50                   	push   eax
c00148c1:	68 12 21 02 c0       	push   0xc0022112
c00148c6:	e8 42 a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00148d3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00148da:	75 05                	jne    c00148e1 <CPU::displayFeatures()+0xe9>
c00148dc:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c00148e1:	51                   	push   ecx
c00148e2:	51                   	push   ecx
c00148e3:	50                   	push   eax
c00148e4:	68 29 21 02 c0       	push   0xc0022129
c00148e9:	e8 1f a8 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00148f6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00148fd:	75 05                	jne    c0014904 <CPU::displayFeatures()+0x10c>
c00148ff:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014904:	52                   	push   edx
c0014905:	52                   	push   edx
c0014906:	50                   	push   eax
c0014907:	68 40 21 02 c0       	push   0xc0022140
c001490c:	e8 fc a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014911:	83 c4 10             	add    esp,0x10
c0014914:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014919:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014920:	75 05                	jne    c0014927 <CPU::displayFeatures()+0x12f>
c0014922:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014927:	51                   	push   ecx
c0014928:	51                   	push   ecx
c0014929:	50                   	push   eax
c001492a:	68 57 21 02 c0       	push   0xc0022157
c001492f:	e8 d9 a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014934:	83 c4 10             	add    esp,0x10
c0014937:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c001493c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014943:	75 05                	jne    c001494a <CPU::displayFeatures()+0x152>
c0014945:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c001494a:	52                   	push   edx
c001494b:	52                   	push   edx
c001494c:	50                   	push   eax
c001494d:	68 6e 21 02 c0       	push   0xc002216e
c0014952:	e8 b6 a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014957:	83 c4 10             	add    esp,0x10
c001495a:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c001495f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014966:	75 05                	jne    c001496d <CPU::displayFeatures()+0x175>
c0014968:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c001496d:	51                   	push   ecx
c001496e:	51                   	push   ecx
c001496f:	50                   	push   eax
c0014970:	68 85 21 02 c0       	push   0xc0022185
c0014975:	e8 93 a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001497a:	83 c4 10             	add    esp,0x10
c001497d:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014982:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014989:	75 05                	jne    c0014990 <CPU::displayFeatures()+0x198>
c001498b:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014990:	52                   	push   edx
c0014991:	52                   	push   edx
c0014992:	50                   	push   eax
c0014993:	68 9c 21 02 c0       	push   0xc002219c
c0014998:	e8 70 a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001499d:	83 c4 10             	add    esp,0x10
c00149a0:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00149a5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00149ac:	75 05                	jne    c00149b3 <CPU::displayFeatures()+0x1bb>
c00149ae:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c00149b3:	51                   	push   ecx
c00149b4:	51                   	push   ecx
c00149b5:	50                   	push   eax
c00149b6:	68 b3 21 02 c0       	push   0xc00221b3
c00149bb:	e8 4d a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00149c8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00149cf:	75 05                	jne    c00149d6 <CPU::displayFeatures()+0x1de>
c00149d1:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c00149d6:	52                   	push   edx
c00149d7:	52                   	push   edx
c00149d8:	50                   	push   eax
c00149d9:	68 ca 21 02 c0       	push   0xc00221ca
c00149de:	e8 2a a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00149e3:	83 c4 10             	add    esp,0x10
c00149e6:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c00149eb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00149f2:	75 05                	jne    c00149f9 <CPU::displayFeatures()+0x201>
c00149f4:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c00149f9:	51                   	push   ecx
c00149fa:	51                   	push   ecx
c00149fb:	50                   	push   eax
c00149fc:	68 e1 21 02 c0       	push   0xc00221e1
c0014a01:	e8 07 a7 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014a0e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a15:	75 05                	jne    c0014a1c <CPU::displayFeatures()+0x224>
c0014a17:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014a1c:	52                   	push   edx
c0014a1d:	52                   	push   edx
c0014a1e:	50                   	push   eax
c0014a1f:	68 f8 21 02 c0       	push   0xc00221f8
c0014a24:	e8 e4 a6 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014a29:	83 c4 10             	add    esp,0x10
c0014a2c:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014a31:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014a38:	78 05                	js     c0014a3f <CPU::displayFeatures()+0x247>
c0014a3a:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014a3f:	51                   	push   ecx
c0014a40:	51                   	push   ecx
c0014a41:	50                   	push   eax
c0014a42:	68 0f 22 02 c0       	push   0xc002220f
c0014a47:	e8 c1 a6 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014a4c:	83 c4 10             	add    esp,0x10
c0014a4f:	b8 ae 0d 02 c0       	mov    eax,0xc0020dae
c0014a54:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014a5b:	75 05                	jne    c0014a62 <CPU::displayFeatures()+0x26a>
c0014a5d:	b8 b2 0d 02 c0       	mov    eax,0xc0020db2
c0014a62:	52                   	push   edx
c0014a63:	52                   	push   edx
c0014a64:	50                   	push   eax
c0014a65:	68 26 22 02 c0       	push   0xc0022226
c0014a6a:	e8 9e a6 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0014a6f:	83 c4 18             	add    esp,0x18
c0014a72:	5b                   	pop    ebx
c0014a73:	c3                   	ret    

c0014a74 <CPU::detectFeatures()>:
c0014a74:	55                   	push   ebp
c0014a75:	57                   	push   edi
c0014a76:	56                   	push   esi
c0014a77:	53                   	push   ebx
c0014a78:	83 ec 50             	sub    esp,0x50
c0014a7b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014a7f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014a89:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014a90:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014a96:	6a 0d                	push   0xd
c0014a98:	6a 00                	push   0x0
c0014a9a:	57                   	push   edi
c0014a9b:	e8 1a bc fe ff       	call   c00006ba <memset>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0014aa8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014aaf:	0f 84 20 09 00 00    	je     c00153d5 <CPU::detectFeatures()+0x961>
c0014ab5:	83 ec 0c             	sub    esp,0xc
c0014ab8:	6a 10                	push   0x10
c0014aba:	e8 e0 fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014abf:	83 e0 01             	and    eax,0x1
c0014ac2:	8d 14 00             	lea    edx,[eax+eax*1]
c0014ac5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014acb:	83 e0 fd             	and    eax,0xfffffffd
c0014ace:	09 d0                	or     eax,edx
c0014ad0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ad6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014add:	e8 bd fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014ae2:	83 e0 01             	and    eax,0x1
c0014ae5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014aec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014af2:	83 e0 fb             	and    eax,0xfffffffb
c0014af5:	09 d0                	or     eax,edx
c0014af7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014afd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b04:	e8 96 fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014b09:	83 e0 01             	and    eax,0x1
c0014b0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b13:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b19:	83 e0 f7             	and    eax,0xfffffff7
c0014b1c:	09 d0                	or     eax,edx
c0014b1e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b24:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014b2b:	e8 6f fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014b30:	83 e0 01             	and    eax,0x1
c0014b33:	c1 e0 04             	shl    eax,0x4
c0014b36:	88 c2                	mov    dl,al
c0014b38:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b3e:	83 e0 ef             	and    eax,0xffffffef
c0014b41:	09 d0                	or     eax,edx
c0014b43:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b49:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014b50:	e8 4a fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014b55:	83 e0 01             	and    eax,0x1
c0014b58:	c1 e0 05             	shl    eax,0x5
c0014b5b:	88 c2                	mov    dl,al
c0014b5d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b63:	83 e0 df             	and    eax,0xffffffdf
c0014b66:	09 d0                	or     eax,edx
c0014b68:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b6e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014b75:	e8 25 fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014b7a:	83 e0 01             	and    eax,0x1
c0014b7d:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b80:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014b86:	83 e0 fd             	and    eax,0xfffffffd
c0014b89:	09 d0                	or     eax,edx
c0014b8b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014b91:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014b98:	e8 02 fb ff ff       	call   c001469f <cpuidCheckEDX(unsigned int)>
c0014b9d:	83 e0 01             	and    eax,0x1
c0014ba0:	c1 e0 06             	shl    eax,0x6
c0014ba3:	88 c2                	mov    dl,al
c0014ba5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014bab:	83 e0 bf             	and    eax,0xffffffbf
c0014bae:	09 d0                	or     eax,edx
c0014bb0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014bb6:	58                   	pop    eax
c0014bb7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014bbb:	56                   	push   esi
c0014bbc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014bc0:	55                   	push   ebp
c0014bc1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014bc5:	50                   	push   eax
c0014bc6:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014bca:	52                   	push   edx
c0014bcb:	6a 00                	push   0x0
c0014bcd:	e8 4a fa ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014bd2:	83 c4 1c             	add    esp,0x1c
c0014bd5:	6a 04                	push   0x4
c0014bd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014bdb:	50                   	push   eax
c0014bdc:	57                   	push   edi
c0014bdd:	e8 a2 ba fe ff       	call   c0000684 <memcpy>
c0014be2:	83 c4 0c             	add    esp,0xc
c0014be5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014beb:	6a 04                	push   0x4
c0014bed:	56                   	push   esi
c0014bee:	50                   	push   eax
c0014bef:	e8 90 ba fe ff       	call   c0000684 <memcpy>
c0014bf4:	83 c4 0c             	add    esp,0xc
c0014bf7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014bfd:	6a 04                	push   0x4
c0014bff:	55                   	push   ebp
c0014c00:	50                   	push   eax
c0014c01:	e8 7e ba fe ff       	call   c0000684 <memcpy>
c0014c06:	58                   	pop    eax
c0014c07:	5a                   	pop    edx
c0014c08:	68 3d 22 02 c0       	push   0xc002223d
c0014c0d:	57                   	push   edi
c0014c0e:	e8 97 bb fe ff       	call   c00007aa <strcmp>
c0014c13:	83 c4 10             	add    esp,0x10
c0014c16:	85 c0                	test   eax,eax
c0014c18:	75 0f                	jne    c0014c29 <CPU::detectFeatures()+0x1b5>
c0014c1a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014c24:	e9 22 02 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014c29:	50                   	push   eax
c0014c2a:	50                   	push   eax
c0014c2b:	68 4a 22 02 c0       	push   0xc002224a
c0014c30:	57                   	push   edi
c0014c31:	e8 74 bb fe ff       	call   c00007aa <strcmp>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	85 c0                	test   eax,eax
c0014c3b:	74 dd                	je     c0014c1a <CPU::detectFeatures()+0x1a6>
c0014c3d:	51                   	push   ecx
c0014c3e:	51                   	push   ecx
c0014c3f:	68 57 22 02 c0       	push   0xc0022257
c0014c44:	57                   	push   edi
c0014c45:	e8 60 bb fe ff       	call   c00007aa <strcmp>
c0014c4a:	83 c4 10             	add    esp,0x10
c0014c4d:	85 c0                	test   eax,eax
c0014c4f:	74 2a                	je     c0014c7b <CPU::detectFeatures()+0x207>
c0014c51:	52                   	push   edx
c0014c52:	52                   	push   edx
c0014c53:	68 64 22 02 c0       	push   0xc0022264
c0014c58:	57                   	push   edi
c0014c59:	e8 4c bb fe ff       	call   c00007aa <strcmp>
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	85 c0                	test   eax,eax
c0014c63:	74 16                	je     c0014c7b <CPU::detectFeatures()+0x207>
c0014c65:	50                   	push   eax
c0014c66:	50                   	push   eax
c0014c67:	68 71 22 02 c0       	push   0xc0022271
c0014c6c:	57                   	push   edi
c0014c6d:	e8 38 bb fe ff       	call   c00007aa <strcmp>
c0014c72:	83 c4 10             	add    esp,0x10
c0014c75:	85 c0                	test   eax,eax
c0014c77:	74 48                	je     c0014cc1 <CPU::detectFeatures()+0x24d>
c0014c79:	eb 0f                	jmp    c0014c8a <CPU::detectFeatures()+0x216>
c0014c7b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014c85:	e9 c1 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014c8a:	50                   	push   eax
c0014c8b:	50                   	push   eax
c0014c8c:	68 7e 22 02 c0       	push   0xc002227e
c0014c91:	57                   	push   edi
c0014c92:	e8 13 bb fe ff       	call   c00007aa <strcmp>
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	85 c0                	test   eax,eax
c0014c9c:	74 23                	je     c0014cc1 <CPU::detectFeatures()+0x24d>
c0014c9e:	50                   	push   eax
c0014c9f:	50                   	push   eax
c0014ca0:	68 8b 22 02 c0       	push   0xc002228b
c0014ca5:	57                   	push   edi
c0014ca6:	e8 ff ba fe ff       	call   c00007aa <strcmp>
c0014cab:	83 c4 10             	add    esp,0x10
c0014cae:	85 c0                	test   eax,eax
c0014cb0:	75 1e                	jne    c0014cd0 <CPU::detectFeatures()+0x25c>
c0014cb2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014cbc:	e9 8a 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014cc1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014ccb:	e9 7b 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014cd0:	50                   	push   eax
c0014cd1:	50                   	push   eax
c0014cd2:	68 98 22 02 c0       	push   0xc0022298
c0014cd7:	57                   	push   edi
c0014cd8:	e8 cd ba fe ff       	call   c00007aa <strcmp>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	85 c0                	test   eax,eax
c0014ce2:	75 0f                	jne    c0014cf3 <CPU::detectFeatures()+0x27f>
c0014ce4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014cee:	e9 58 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014cf3:	50                   	push   eax
c0014cf4:	50                   	push   eax
c0014cf5:	68 57 22 02 c0       	push   0xc0022257
c0014cfa:	57                   	push   edi
c0014cfb:	e8 aa ba fe ff       	call   c00007aa <strcmp>
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	85 c0                	test   eax,eax
c0014d05:	75 0f                	jne    c0014d16 <CPU::detectFeatures()+0x2a2>
c0014d07:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d11:	e9 35 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014d16:	50                   	push   eax
c0014d17:	50                   	push   eax
c0014d18:	68 a5 22 02 c0       	push   0xc00222a5
c0014d1d:	57                   	push   edi
c0014d1e:	e8 87 ba fe ff       	call   c00007aa <strcmp>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	85 c0                	test   eax,eax
c0014d28:	75 0f                	jne    c0014d39 <CPU::detectFeatures()+0x2c5>
c0014d2a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014d34:	e9 12 01 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014d39:	51                   	push   ecx
c0014d3a:	51                   	push   ecx
c0014d3b:	68 b2 22 02 c0       	push   0xc00222b2
c0014d40:	57                   	push   edi
c0014d41:	e8 64 ba fe ff       	call   c00007aa <strcmp>
c0014d46:	83 c4 10             	add    esp,0x10
c0014d49:	85 c0                	test   eax,eax
c0014d4b:	75 0f                	jne    c0014d5c <CPU::detectFeatures()+0x2e8>
c0014d4d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014d57:	e9 ef 00 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014d5c:	52                   	push   edx
c0014d5d:	52                   	push   edx
c0014d5e:	68 bf 22 02 c0       	push   0xc00222bf
c0014d63:	57                   	push   edi
c0014d64:	e8 41 ba fe ff       	call   c00007aa <strcmp>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	85 c0                	test   eax,eax
c0014d6e:	75 0f                	jne    c0014d7f <CPU::detectFeatures()+0x30b>
c0014d70:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014d7a:	e9 cc 00 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014d7f:	50                   	push   eax
c0014d80:	50                   	push   eax
c0014d81:	68 cc 22 02 c0       	push   0xc00222cc
c0014d86:	57                   	push   edi
c0014d87:	e8 1e ba fe ff       	call   c00007aa <strcmp>
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	85 c0                	test   eax,eax
c0014d91:	75 0f                	jne    c0014da2 <CPU::detectFeatures()+0x32e>
c0014d93:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014d9d:	e9 a9 00 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014da2:	50                   	push   eax
c0014da3:	50                   	push   eax
c0014da4:	68 d9 22 02 c0       	push   0xc00222d9
c0014da9:	57                   	push   edi
c0014daa:	e8 fb b9 fe ff       	call   c00007aa <strcmp>
c0014daf:	83 c4 10             	add    esp,0x10
c0014db2:	85 c0                	test   eax,eax
c0014db4:	75 0f                	jne    c0014dc5 <CPU::detectFeatures()+0x351>
c0014db6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014dc0:	e9 86 00 00 00       	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014dc5:	50                   	push   eax
c0014dc6:	50                   	push   eax
c0014dc7:	68 e6 22 02 c0       	push   0xc00222e6
c0014dcc:	57                   	push   edi
c0014dcd:	e8 d8 b9 fe ff       	call   c00007aa <strcmp>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	85 c0                	test   eax,eax
c0014dd7:	75 0c                	jne    c0014de5 <CPU::detectFeatures()+0x371>
c0014dd9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014de3:	eb 66                	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014de5:	50                   	push   eax
c0014de6:	50                   	push   eax
c0014de7:	68 f3 22 02 c0       	push   0xc00222f3
c0014dec:	57                   	push   edi
c0014ded:	e8 b8 b9 fe ff       	call   c00007aa <strcmp>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	85 c0                	test   eax,eax
c0014df7:	75 0c                	jne    c0014e05 <CPU::detectFeatures()+0x391>
c0014df9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e03:	eb 46                	jmp    c0014e4b <CPU::detectFeatures()+0x3d7>
c0014e05:	50                   	push   eax
c0014e06:	50                   	push   eax
c0014e07:	68 00 23 02 c0       	push   0xc0022300
c0014e0c:	57                   	push   edi
c0014e0d:	e8 98 b9 fe ff       	call   c00007aa <strcmp>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	85 c0                	test   eax,eax
c0014e17:	74 e0                	je     c0014df9 <CPU::detectFeatures()+0x385>
c0014e19:	50                   	push   eax
c0014e1a:	50                   	push   eax
c0014e1b:	68 0d 23 02 c0       	push   0xc002230d
c0014e20:	57                   	push   edi
c0014e21:	e8 84 b9 fe ff       	call   c00007aa <strcmp>
c0014e26:	83 c4 10             	add    esp,0x10
c0014e29:	85 c0                	test   eax,eax
c0014e2b:	74 cc                	je     c0014df9 <CPU::detectFeatures()+0x385>
c0014e2d:	51                   	push   ecx
c0014e2e:	51                   	push   ecx
c0014e2f:	68 1a 23 02 c0       	push   0xc002231a
c0014e34:	57                   	push   edi
c0014e35:	e8 70 b9 fe ff       	call   c00007aa <strcmp>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	85 c0                	test   eax,eax
c0014e3f:	74 b8                	je     c0014df9 <CPU::detectFeatures()+0x385>
c0014e41:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014e4b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014e50:	0f 86 be 00 00 00    	jbe    c0014f14 <CPU::detectFeatures()+0x4a0>
c0014e56:	83 ec 0c             	sub    esp,0xc
c0014e59:	68 80 00 00 00       	push   0x80
c0014e5e:	e8 96 f8 ff ff       	call   c00146f9 <cpuidCheckExtendedEBX(unsigned int)>
c0014e63:	83 e0 01             	and    eax,0x1
c0014e66:	c1 e0 06             	shl    eax,0x6
c0014e69:	88 c2                	mov    dl,al
c0014e6b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014e71:	83 e0 bf             	and    eax,0xffffffbf
c0014e74:	09 d0                	or     eax,edx
c0014e76:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014e7c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014e83:	e8 71 f8 ff ff       	call   c00146f9 <cpuidCheckExtendedEBX(unsigned int)>
c0014e88:	83 e0 01             	and    eax,0x1
c0014e8b:	c1 e0 04             	shl    eax,0x4
c0014e8e:	88 c2                	mov    dl,al
c0014e90:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014e96:	83 e0 ef             	and    eax,0xffffffef
c0014e99:	09 d0                	or     eax,edx
c0014e9b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014ea1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014ea8:	e8 4c f8 ff ff       	call   c00146f9 <cpuidCheckExtendedEBX(unsigned int)>
c0014ead:	c1 e0 07             	shl    eax,0x7
c0014eb0:	88 c2                	mov    dl,al
c0014eb2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014eb8:	83 e0 7f             	and    eax,0x7f
c0014ebb:	09 d0                	or     eax,edx
c0014ebd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ec3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014eca:	e8 57 f8 ff ff       	call   c0014726 <cpuidCheckExtendedECX(unsigned int)>
c0014ecf:	83 e0 01             	and    eax,0x1
c0014ed2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014ed9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014edf:	83 e0 f7             	and    eax,0xfffffff7
c0014ee2:	09 d0                	or     eax,edx
c0014ee4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014eea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014ef1:	e8 30 f8 ff ff       	call   c0014726 <cpuidCheckExtendedECX(unsigned int)>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	83 e0 01             	and    eax,0x1
c0014efc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f03:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f09:	83 e0 fb             	and    eax,0xfffffffb
c0014f0c:	09 d0                	or     eax,edx
c0014f0e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	56                   	push   esi
c0014f18:	55                   	push   ebp
c0014f19:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014f1d:	57                   	push   edi
c0014f1e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014f22:	50                   	push   eax
c0014f23:	6a 01                	push   0x1
c0014f25:	e8 f2 f6 ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014f2a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f2e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014f34:	88 ca                	mov    dl,cl
c0014f36:	83 e0 f0             	and    eax,0xfffffff0
c0014f39:	83 e2 0f             	and    edx,0xf
c0014f3c:	09 d0                	or     eax,edx
c0014f3e:	88 ca                	mov    dl,cl
c0014f40:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014f46:	c0 ea 04             	shr    dl,0x4
c0014f49:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014f4d:	0f b6 c2             	movzx  eax,dl
c0014f50:	83 c4 20             	add    esp,0x20
c0014f53:	c1 e0 06             	shl    eax,0x6
c0014f56:	89 c5                	mov    ebp,eax
c0014f58:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014f5e:	66 25 3f c0          	and    ax,0xc03f
c0014f62:	09 e8                	or     eax,ebp
c0014f64:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014f6b:	89 c8                	mov    eax,ecx
c0014f6d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014f73:	c1 e8 08             	shr    eax,0x8
c0014f76:	83 e2 3f             	and    edx,0x3f
c0014f79:	83 e0 0f             	and    eax,0xf
c0014f7c:	89 c5                	mov    ebp,eax
c0014f7e:	c1 e5 06             	shl    ebp,0x6
c0014f81:	09 d5                	or     ebp,edx
c0014f83:	89 ea                	mov    edx,ebp
c0014f85:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014f8b:	88 c2                	mov    dl,al
c0014f8d:	c0 ea 02             	shr    dl,0x2
c0014f90:	89 d5                	mov    ebp,edx
c0014f92:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014f98:	83 e2 c0             	and    edx,0xffffffc0
c0014f9b:	09 d5                	or     ebp,edx
c0014f9d:	89 ea                	mov    edx,ebp
c0014f9f:	89 cd                	mov    ebp,ecx
c0014fa1:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014fa7:	c1 ed 0c             	shr    ebp,0xc
c0014faa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014fb0:	83 e5 03             	and    ebp,0x3
c0014fb3:	83 e2 cf             	and    edx,0xffffffcf
c0014fb6:	c1 e5 04             	shl    ebp,0x4
c0014fb9:	09 d5                	or     ebp,edx
c0014fbb:	3c 06                	cmp    al,0x6
c0014fbd:	89 ea                	mov    edx,ebp
c0014fbf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014fc5:	74 04                	je     c0014fcb <CPU::detectFeatures()+0x557>
c0014fc7:	3c 0f                	cmp    al,0xf
c0014fc9:	75 5c                	jne    c0015027 <CPU::detectFeatures()+0x5b3>
c0014fcb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014fcf:	89 cd                	mov    ebp,ecx
c0014fd1:	c1 ed 10             	shr    ebp,0x10
c0014fd4:	c1 e5 04             	shl    ebp,0x4
c0014fd7:	09 ea                	or     edx,ebp
c0014fd9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014fdf:	0f b6 d2             	movzx  edx,dl
c0014fe2:	66 81 e5 3f c0       	and    bp,0xc03f
c0014fe7:	c1 e2 06             	shl    edx,0x6
c0014fea:	09 ea                	or     edx,ebp
c0014fec:	3c 0f                	cmp    al,0xf
c0014fee:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014ff5:	75 30                	jne    c0015027 <CPU::detectFeatures()+0x5b3>
c0014ff7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014ffd:	c1 e9 14             	shr    ecx,0x14
c0015000:	83 e0 3f             	and    eax,0x3f
c0015003:	83 c1 0f             	add    ecx,0xf
c0015006:	88 ca                	mov    dl,cl
c0015008:	c0 e9 02             	shr    cl,0x2
c001500b:	c1 e2 06             	shl    edx,0x6
c001500e:	09 d0                	or     eax,edx
c0015010:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0015016:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001501c:	83 e0 c0             	and    eax,0xffffffc0
c001501f:	09 c1                	or     ecx,eax
c0015021:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015027:	83 ec 0c             	sub    esp,0xc
c001502a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015031:	56                   	push   esi
c0015032:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015036:	50                   	push   eax
c0015037:	57                   	push   edi
c0015038:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001503c:	55                   	push   ebp
c001503d:	68 00 00 00 80       	push   0x80000000
c0015042:	e8 d5 f5 ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015047:	83 c4 20             	add    esp,0x20
c001504a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0015052:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015056:	76 1e                	jbe    c0015076 <CPU::detectFeatures()+0x602>
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	56                   	push   esi
c001505c:	50                   	push   eax
c001505d:	57                   	push   edi
c001505e:	55                   	push   ebp
c001505f:	68 01 00 00 80       	push   0x80000001
c0015064:	e8 b3 f5 ff ff       	call   c001461c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015069:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0015073:	83 c4 20             	add    esp,0x20
c0015076:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001507c:	83 f8 01             	cmp    eax,0x1
c001507f:	75 6f                	jne    c00150f0 <CPU::detectFeatures()+0x67c>
c0015081:	51                   	push   ecx
c0015082:	51                   	push   ecx
c0015083:	68 26 23 02 c0       	push   0xc0022326
c0015088:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001508c:	56                   	push   esi
c001508d:	e8 c7 b6 fe ff       	call   c0000759 <strcpy>
c0015092:	5f                   	pop    edi
c0015093:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015099:	5d                   	pop    ebp
c001509a:	66 c1 e8 06          	shr    ax,0x6
c001509e:	0f b6 c0             	movzx  eax,al
c00150a1:	50                   	push   eax
c00150a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150a8:	c1 e8 0e             	shr    eax,0xe
c00150ab:	0f b6 c0             	movzx  eax,al
c00150ae:	50                   	push   eax
c00150af:	e8 13 f2 ff ff       	call   c00142c7 <lookupIntelCPUName(unsigned char, unsigned char)>
c00150b4:	5a                   	pop    edx
c00150b5:	59                   	pop    ecx
c00150b6:	50                   	push   eax
c00150b7:	56                   	push   esi
c00150b8:	e8 53 b7 fe ff       	call   c0000810 <strcat>
c00150bd:	5f                   	pop    edi
c00150be:	5d                   	pop    ebp
c00150bf:	56                   	push   esi
c00150c0:	53                   	push   ebx
c00150c1:	e8 34 b6 ff ff       	call   c00106fa <Device::setName(char const*)>
c00150c6:	58                   	pop    eax
c00150c7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00150cd:	5a                   	pop    edx
c00150ce:	68 2d 23 02 c0       	push   0xc002232d
c00150d3:	50                   	push   eax
c00150d4:	e8 d1 b6 fe ff       	call   c00007aa <strcmp>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	85 c0                	test   eax,eax
c00150de:	0f 85 73 03 00 00    	jne    c0015457 <CPU::detectFeatures()+0x9e3>
c00150e4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00150eb:	e9 67 03 00 00       	jmp    c0015457 <CPU::detectFeatures()+0x9e3>
c00150f0:	83 f8 02             	cmp    eax,0x2
c00150f3:	0f 85 b5 00 00 00    	jne    c00151ae <CPU::detectFeatures()+0x73a>
c00150f9:	57                   	push   edi
c00150fa:	57                   	push   edi
c00150fb:	68 3f 23 02 c0       	push   0xc002233f
c0015100:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015104:	56                   	push   esi
c0015105:	e8 4f b6 fe ff       	call   c0000759 <strcpy>
c001510a:	5d                   	pop    ebp
c001510b:	58                   	pop    eax
c001510c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015112:	66 c1 e8 06          	shr    ax,0x6
c0015116:	0f b6 c0             	movzx  eax,al
c0015119:	50                   	push   eax
c001511a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015120:	c1 e8 0e             	shr    eax,0xe
c0015123:	0f b6 c0             	movzx  eax,al
c0015126:	50                   	push   eax
c0015127:	e8 07 f0 ff ff       	call   c0014133 <lookupAMDCPUName(unsigned char, unsigned char)>
c001512c:	5a                   	pop    edx
c001512d:	59                   	pop    ecx
c001512e:	50                   	push   eax
c001512f:	56                   	push   esi
c0015130:	e8 db b6 fe ff       	call   c0000810 <strcat>
c0015135:	5f                   	pop    edi
c0015136:	5d                   	pop    ebp
c0015137:	56                   	push   esi
c0015138:	53                   	push   ebx
c0015139:	e8 bc b5 ff ff       	call   c00106fa <Device::setName(char const*)>
c001513e:	58                   	pop    eax
c001513f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015145:	5a                   	pop    edx
c0015146:	68 44 23 02 c0       	push   0xc0022344
c001514b:	50                   	push   eax
c001514c:	e8 59 b6 fe ff       	call   c00007aa <strcmp>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	85 c0                	test   eax,eax
c0015156:	75 20                	jne    c0015178 <CPU::detectFeatures()+0x704>
c0015158:	8b 15 68 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024368
c001515e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0015164:	a8 01                	test   al,0x1
c0015166:	74 10                	je     c0015178 <CPU::detectFeatures()+0x704>
c0015168:	83 e0 fe             	and    eax,0xfffffffe
c001516b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0015171:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015178:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001517e:	c1 e8 0e             	shr    eax,0xe
c0015181:	3c 05                	cmp    al,0x5
c0015183:	0f 85 ce 02 00 00    	jne    c0015457 <CPU::detectFeatures()+0x9e3>
c0015189:	56                   	push   esi
c001518a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015190:	83 e0 0f             	and    eax,0xf
c0015193:	50                   	push   eax
c0015194:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001519a:	66 c1 e8 06          	shr    ax,0x6
c001519e:	0f b6 c0             	movzx  eax,al
c00151a1:	50                   	push   eax
c00151a2:	6a 05                	push   0x5
c00151a4:	e8 00 f4 ff ff       	call   c00145a9 <AMD_K6_writeback(int, int, int)>
c00151a9:	e9 1f 02 00 00       	jmp    c00153cd <CPU::detectFeatures()+0x959>
c00151ae:	8d 50 fd             	lea    edx,[eax-0x3]
c00151b1:	83 fa 01             	cmp    edx,0x1
c00151b4:	76 09                	jbe    c00151bf <CPU::detectFeatures()+0x74b>
c00151b6:	83 f8 06             	cmp    eax,0x6
c00151b9:	0f 85 91 01 00 00    	jne    c0015350 <CPU::detectFeatures()+0x8dc>
c00151bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00151c5:	c1 ea 0e             	shr    edx,0xe
c00151c8:	80 fa 05             	cmp    dl,0x5
c00151cb:	75 7b                	jne    c0015248 <CPU::detectFeatures()+0x7d4>
c00151cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00151d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00151d8:	66 81 fa 00 01       	cmp    dx,0x100
c00151dd:	75 0c                	jne    c00151eb <CPU::detectFeatures()+0x777>
c00151df:	51                   	push   ecx
c00151e0:	51                   	push   ecx
c00151e1:	68 4b 23 02 c0       	push   0xc002234b
c00151e6:	e9 dc 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00151eb:	66 81 fa 00 02       	cmp    dx,0x200
c00151f0:	75 0c                	jne    c00151fe <CPU::detectFeatures()+0x78a>
c00151f2:	52                   	push   edx
c00151f3:	52                   	push   edx
c00151f4:	68 5e 23 02 c0       	push   0xc002235e
c00151f9:	e9 c9 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00151fe:	66 81 fa 40 02       	cmp    dx,0x240
c0015203:	75 0c                	jne    c0015211 <CPU::detectFeatures()+0x79d>
c0015205:	50                   	push   eax
c0015206:	50                   	push   eax
c0015207:	68 70 23 02 c0       	push   0xc0022370
c001520c:	e9 b6 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015211:	83 f8 06             	cmp    eax,0x6
c0015214:	75 0c                	jne    c0015222 <CPU::detectFeatures()+0x7ae>
c0015216:	50                   	push   eax
c0015217:	50                   	push   eax
c0015218:	68 82 23 02 c0       	push   0xc0022382
c001521d:	e9 a5 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015222:	83 f8 04             	cmp    eax,0x4
c0015225:	75 0c                	jne    c0015233 <CPU::detectFeatures()+0x7bf>
c0015227:	50                   	push   eax
c0015228:	50                   	push   eax
c0015229:	68 8e 23 02 c0       	push   0xc002238e
c001522e:	e9 94 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015233:	83 f8 03             	cmp    eax,0x3
c0015236:	0f 85 1b 02 00 00    	jne    c0015457 <CPU::detectFeatures()+0x9e3>
c001523c:	50                   	push   eax
c001523d:	50                   	push   eax
c001523e:	68 96 23 02 c0       	push   0xc0022396
c0015243:	e9 7f 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015248:	80 fa 06             	cmp    dl,0x6
c001524b:	0f 85 db 00 00 00    	jne    c001532c <CPU::detectFeatures()+0x8b8>
c0015251:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015257:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001525c:	66 81 fa 80 01       	cmp    dx,0x180
c0015261:	75 0c                	jne    c001526f <CPU::detectFeatures()+0x7fb>
c0015263:	50                   	push   eax
c0015264:	50                   	push   eax
c0015265:	68 a1 23 02 c0       	push   0xc00223a1
c001526a:	e9 58 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c001526f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0015275:	66 f7 c1 80 ff       	test   cx,0xff80
c001527a:	75 0c                	jne    c0015288 <CPU::detectFeatures()+0x814>
c001527c:	50                   	push   eax
c001527d:	50                   	push   eax
c001527e:	68 b1 23 02 c0       	push   0xc00223b1
c0015283:	e9 3f 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015288:	66 81 fa 40 02       	cmp    dx,0x240
c001528d:	75 0c                	jne    c001529b <CPU::detectFeatures()+0x827>
c001528f:	55                   	push   ebp
c0015290:	55                   	push   ebp
c0015291:	68 b8 23 02 c0       	push   0xc00223b8
c0015296:	e9 2c 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c001529b:	66 81 fa 80 02       	cmp    dx,0x280
c00152a0:	75 0c                	jne    c00152ae <CPU::detectFeatures()+0x83a>
c00152a2:	57                   	push   edi
c00152a3:	57                   	push   edi
c00152a4:	68 c1 23 02 c0       	push   0xc00223c1
c00152a9:	e9 19 01 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00152ae:	66 81 fa 40 03       	cmp    dx,0x340
c00152b3:	74 ed                	je     c00152a2 <CPU::detectFeatures()+0x82e>
c00152b5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00152ba:	75 0c                	jne    c00152c8 <CPU::detectFeatures()+0x854>
c00152bc:	56                   	push   esi
c00152bd:	56                   	push   esi
c00152be:	68 c8 23 02 c0       	push   0xc00223c8
c00152c3:	e9 ff 00 00 00       	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00152c8:	83 f8 06             	cmp    eax,0x6
c00152cb:	0f 84 45 ff ff ff    	je     c0015216 <CPU::detectFeatures()+0x7a2>
c00152d1:	83 f8 04             	cmp    eax,0x4
c00152d4:	0f 84 4d ff ff ff    	je     c0015227 <CPU::detectFeatures()+0x7b3>
c00152da:	83 f8 03             	cmp    eax,0x3
c00152dd:	0f 85 74 01 00 00    	jne    c0015457 <CPU::detectFeatures()+0x9e3>
c00152e3:	51                   	push   ecx
c00152e4:	51                   	push   ecx
c00152e5:	68 d1 23 02 c0       	push   0xc00223d1
c00152ea:	53                   	push   ebx
c00152eb:	e8 0a b4 ff ff       	call   c00106fa <Device::setName(char const*)>
c00152f0:	b1 c1                	mov    cl,0xc1
c00152f2:	88 c8                	mov    al,cl
c00152f4:	e6 22                	out    0x22,al
c00152f6:	e4 23                	in     al,0x23
c00152f8:	88 c2                	mov    dl,al
c00152fa:	88 c8                	mov    al,cl
c00152fc:	e6 22                	out    0x22,al
c00152fe:	88 d0                	mov    al,dl
c0015300:	83 c8 10             	or     eax,0x10
c0015303:	e6 23                	out    0x23,al
c0015305:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001530c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001530f:	89 d0                	mov    eax,edx
c0015311:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015317:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001531b:	40                   	inc    eax
c001531c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015322:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015327:	e9 a1 00 00 00       	jmp    c00153cd <CPU::detectFeatures()+0x959>
c001532c:	83 f8 06             	cmp    eax,0x6
c001532f:	0f 84 e1 fe ff ff    	je     c0015216 <CPU::detectFeatures()+0x7a2>
c0015335:	83 f8 04             	cmp    eax,0x4
c0015338:	0f 84 e9 fe ff ff    	je     c0015227 <CPU::detectFeatures()+0x7b3>
c001533e:	83 f8 03             	cmp    eax,0x3
c0015341:	0f 85 10 01 00 00    	jne    c0015457 <CPU::detectFeatures()+0x9e3>
c0015347:	52                   	push   edx
c0015348:	52                   	push   edx
c0015349:	68 dc 23 02 c0       	push   0xc00223dc
c001534e:	eb 77                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015350:	83 f8 07             	cmp    eax,0x7
c0015353:	75 09                	jne    c001535e <CPU::detectFeatures()+0x8ea>
c0015355:	50                   	push   eax
c0015356:	50                   	push   eax
c0015357:	68 e6 23 02 c0       	push   0xc00223e6
c001535c:	eb 69                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c001535e:	83 f8 0a             	cmp    eax,0xa
c0015361:	75 09                	jne    c001536c <CPU::detectFeatures()+0x8f8>
c0015363:	50                   	push   eax
c0015364:	50                   	push   eax
c0015365:	68 f1 23 02 c0       	push   0xc00223f1
c001536a:	eb 5b                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c001536c:	83 f8 0b             	cmp    eax,0xb
c001536f:	75 09                	jne    c001537a <CPU::detectFeatures()+0x906>
c0015371:	50                   	push   eax
c0015372:	50                   	push   eax
c0015373:	68 f9 23 02 c0       	push   0xc00223f9
c0015378:	eb 4d                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c001537a:	83 f8 08             	cmp    eax,0x8
c001537d:	75 09                	jne    c0015388 <CPU::detectFeatures()+0x914>
c001537f:	50                   	push   eax
c0015380:	50                   	push   eax
c0015381:	68 02 24 02 c0       	push   0xc0022402
c0015386:	eb 3f                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015388:	83 f8 09             	cmp    eax,0x9
c001538b:	75 09                	jne    c0015396 <CPU::detectFeatures()+0x922>
c001538d:	50                   	push   eax
c001538e:	50                   	push   eax
c001538f:	68 0a 24 02 c0       	push   0xc002240a
c0015394:	eb 31                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c0015396:	83 f8 05             	cmp    eax,0x5
c0015399:	75 09                	jne    c00153a4 <CPU::detectFeatures()+0x930>
c001539b:	50                   	push   eax
c001539c:	50                   	push   eax
c001539d:	68 12 24 02 c0       	push   0xc0022412
c00153a2:	eb 23                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00153a4:	83 f8 0c             	cmp    eax,0xc
c00153a7:	75 09                	jne    c00153b2 <CPU::detectFeatures()+0x93e>
c00153a9:	55                   	push   ebp
c00153aa:	55                   	push   ebp
c00153ab:	68 20 24 02 c0       	push   0xc0022420
c00153b0:	eb 15                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00153b2:	83 f8 0d             	cmp    eax,0xd
c00153b5:	75 09                	jne    c00153c0 <CPU::detectFeatures()+0x94c>
c00153b7:	57                   	push   edi
c00153b8:	57                   	push   edi
c00153b9:	68 2b 24 02 c0       	push   0xc002242b
c00153be:	eb 07                	jmp    c00153c7 <CPU::detectFeatures()+0x953>
c00153c0:	56                   	push   esi
c00153c1:	56                   	push   esi
c00153c2:	68 3f 24 02 c0       	push   0xc002243f
c00153c7:	53                   	push   ebx
c00153c8:	e8 2d b3 ff ff       	call   c00106fa <Device::setName(char const*)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	e9 82 00 00 00       	jmp    c0015457 <CPU::detectFeatures()+0x9e3>
c00153d5:	51                   	push   ecx
c00153d6:	51                   	push   ecx
c00153d7:	68 8b 22 02 c0       	push   0xc002228b
c00153dc:	57                   	push   edi
c00153dd:	e8 77 b3 fe ff       	call   c0000759 <strcpy>
c00153e2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00153ec:	e8 40 ae fe ff       	call   c0000231 <is486>
c00153f1:	83 c4 10             	add    esp,0x10
c00153f4:	85 c0                	test   eax,eax
c00153f6:	74 2d                	je     c0015425 <CPU::detectFeatures()+0x9b1>
c00153f8:	52                   	push   edx
c00153f9:	52                   	push   edx
c00153fa:	68 4b 24 02 c0       	push   0xc002244b
c00153ff:	53                   	push   ebx
c0015400:	e8 f5 b2 ff ff       	call   c00106fa <Device::setName(char const*)>
c0015405:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001540c:	e8 e7 a3 00 00       	call   c001f7f8 <CPU::readCR0()>
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	83 e0 14             	and    eax,0x14
c0015417:	83 f8 04             	cmp    eax,0x4
c001541a:	75 1f                	jne    c001543b <CPU::detectFeatures()+0x9c7>
c001541c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015423:	eb 32                	jmp    c0015457 <CPU::detectFeatures()+0x9e3>
c0015425:	50                   	push   eax
c0015426:	50                   	push   eax
c0015427:	68 56 24 02 c0       	push   0xc0022456
c001542c:	53                   	push   ebx
c001542d:	e8 c8 b2 ff ff       	call   c00106fa <Device::setName(char const*)>
c0015432:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015439:	eb d1                	jmp    c001540c <CPU::detectFeatures()+0x998>
c001543b:	e8 cc ad fe ff       	call   c000020c <hasLegacyFPU>
c0015440:	83 e0 01             	and    eax,0x1
c0015443:	8d 14 00             	lea    edx,[eax+eax*1]
c0015446:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001544c:	83 e0 fd             	and    eax,0xfffffffd
c001544f:	09 d0                	or     eax,edx
c0015451:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015457:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001545e:	83 c4 4c             	add    esp,0x4c
c0015461:	5b                   	pop    ebx
c0015462:	5e                   	pop    esi
c0015463:	5f                   	pop    edi
c0015464:	5d                   	pop    ebp
c0015465:	c3                   	ret    

c0015466 <CPU::setupSMEP()>:
c0015466:	83 ec 0c             	sub    esp,0xc
c0015469:	e8 54 a6 00 00       	call   c001fac2 <CPU::readCR4()>
c001546e:	0d 00 00 10 00       	or     eax,0x100000
c0015473:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015477:	83 c4 0c             	add    esp,0xc
c001547a:	e9 5e a6 00 00       	jmp    c001fadd <CPU::writeCR4(unsigned long)>
c001547f:	90                   	nop

c0015480 <CPU::setupUMIP()>:
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	e8 3a a6 00 00       	call   c001fac2 <CPU::readCR4()>
c0015488:	80 cc 08             	or     ah,0x8
c001548b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001548f:	83 c4 0c             	add    esp,0xc
c0015492:	e9 46 a6 00 00       	jmp    c001fadd <CPU::writeCR4(unsigned long)>
c0015497:	90                   	nop

c0015498 <CPU::setupTSC()>:
c0015498:	83 ec 0c             	sub    esp,0xc
c001549b:	e8 22 a6 00 00       	call   c001fac2 <CPU::readCR4()>
c00154a0:	83 c8 04             	or     eax,0x4
c00154a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154a7:	83 c4 0c             	add    esp,0xc
c00154aa:	e9 2e a6 00 00       	jmp    c001fadd <CPU::writeCR4(unsigned long)>
c00154af:	90                   	nop

c00154b0 <CPU::setupLargePages()>:
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	e8 0a a6 00 00       	call   c001fac2 <CPU::readCR4()>
c00154b8:	83 c8 10             	or     eax,0x10
c00154bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154bf:	83 c4 0c             	add    esp,0xc
c00154c2:	e9 16 a6 00 00       	jmp    c001fadd <CPU::writeCR4(unsigned long)>
c00154c7:	90                   	nop

c00154c8 <CPU::setupPAT()>:
c00154c8:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c00154cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00154d4:	74 2c                	je     c0015502 <CPU::setupPAT()+0x3a>
c00154d6:	53                   	push   ebx
c00154d7:	83 ec 10             	sub    esp,0x10
c00154da:	68 77 02 00 00       	push   0x277
c00154df:	50                   	push   eax
c00154e0:	e8 d7 60 ff ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c00154e5:	83 e2 f8             	and    edx,0xfffffff8
c00154e8:	83 ca 01             	or     edx,0x1
c00154eb:	52                   	push   edx
c00154ec:	50                   	push   eax
c00154ed:	68 77 02 00 00       	push   0x277
c00154f2:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c00154f8:	e8 eb 60 ff ff       	call   c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00154fd:	83 c4 28             	add    esp,0x28
c0015500:	5b                   	pop    ebx
c0015501:	c3                   	ret    
c0015502:	c3                   	ret    
c0015503:	90                   	nop

c0015504 <CPU::setupMTRR()>:
c0015504:	c3                   	ret    
c0015505:	90                   	nop

c0015506 <CPU::setupGlobalPages()>:
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	e8 b4 a5 00 00       	call   c001fac2 <CPU::readCR4()>
c001550e:	0c 80                	or     al,0x80
c0015510:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015514:	83 c4 0c             	add    esp,0xc
c0015517:	e9 c1 a5 00 00       	jmp    c001fadd <CPU::writeCR4(unsigned long)>

c001551c <CPU::allowUsermodeDataAccess()>:
c001551c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015520:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015527:	74 03                	je     c001552c <CPU::allowUsermodeDataAccess()+0x10>
c0015529:	0f 01 cb             	stac   
c001552c:	c3                   	ret    
c001552d:	90                   	nop

c001552e <CPU::prohibitUsermodeDataAccess()>:
c001552e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015532:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015539:	74 03                	je     c001553e <CPU::prohibitUsermodeDataAccess()+0x10>
c001553b:	0f 01 ca             	clac   
c001553e:	c3                   	ret    
c001553f:	90                   	nop

c0015540 <CPU::setupSMAP()>:
c0015540:	53                   	push   ebx
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015548:	e8 75 a5 00 00       	call   c001fac2 <CPU::readCR4()>
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	0d 00 00 20 00       	or     eax,0x200000
c0015555:	50                   	push   eax
c0015556:	e8 82 a5 00 00       	call   c001fadd <CPU::writeCR4(unsigned long)>
c001555b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001555f:	83 c4 18             	add    esp,0x18
c0015562:	5b                   	pop    ebx
c0015563:	eb c9                	jmp    c001552e <CPU::prohibitUsermodeDataAccess()>
c0015565:	90                   	nop

c0015566 <CPU::setupFeatures()>:
c0015566:	53                   	push   ebx
c0015567:	83 ec 08             	sub    esp,0x8
c001556a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001556e:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0015575:	74 0c                	je     c0015583 <CPU::setupFeatures()+0x1d>
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	53                   	push   ebx
c001557b:	e8 e6 fe ff ff       	call   c0015466 <CPU::setupSMEP()>
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001558a:	74 0c                	je     c0015598 <CPU::setupFeatures()+0x32>
c001558c:	83 ec 0c             	sub    esp,0xc
c001558f:	53                   	push   ebx
c0015590:	e8 ab ff ff ff       	call   c0015540 <CPU::setupSMAP()>
c0015595:	83 c4 10             	add    esp,0x10
c0015598:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001559f:	74 0c                	je     c00155ad <CPU::setupFeatures()+0x47>
c00155a1:	83 ec 0c             	sub    esp,0xc
c00155a4:	53                   	push   ebx
c00155a5:	e8 d6 fe ff ff       	call   c0015480 <CPU::setupUMIP()>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00155b4:	74 0c                	je     c00155c2 <CPU::setupFeatures()+0x5c>
c00155b6:	83 ec 0c             	sub    esp,0xc
c00155b9:	53                   	push   ebx
c00155ba:	e8 d9 fe ff ff       	call   c0015498 <CPU::setupTSC()>
c00155bf:	83 c4 10             	add    esp,0x10
c00155c2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00155c9:	74 0c                	je     c00155d7 <CPU::setupFeatures()+0x71>
c00155cb:	83 ec 0c             	sub    esp,0xc
c00155ce:	53                   	push   ebx
c00155cf:	e8 dc fe ff ff       	call   c00154b0 <CPU::setupLargePages()>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00155de:	74 0c                	je     c00155ec <CPU::setupFeatures()+0x86>
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	53                   	push   ebx
c00155e4:	e8 1d ff ff ff       	call   c0015506 <CPU::setupGlobalPages()>
c00155e9:	83 c4 10             	add    esp,0x10
c00155ec:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00155f3:	74 0d                	je     c0015602 <CPU::setupFeatures()+0x9c>
c00155f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00155f9:	83 c4 08             	add    esp,0x8
c00155fc:	5b                   	pop    ebx
c00155fd:	e9 c6 fe ff ff       	jmp    c00154c8 <CPU::setupPAT()>
c0015602:	83 c4 08             	add    esp,0x8
c0015605:	5b                   	pop    ebx
c0015606:	c3                   	ret    
c0015607:	90                   	nop

c0015608 <CPU::open(int, int, void*)>:
c0015608:	57                   	push   edi
c0015609:	56                   	push   esi
c001560a:	53                   	push   ebx
c001560b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001560f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015613:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015619:	83 ec 0c             	sub    esp,0xc
c001561c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015622:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015628:	50                   	push   eax
c0015629:	e8 7a 62 ff ff       	call   c000b8a8 <GDT::setup()>
c001562e:	83 c4 0c             	add    esp,0xc
c0015631:	6a 00                	push   0x0
c0015633:	68 ef be ad de       	push   0xdeadbeef
c0015638:	57                   	push   edi
c0015639:	e8 d2 84 ff ff       	call   c000db10 <TSS::setup(unsigned long, unsigned long)>
c001563e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015641:	e8 aa 84 ff ff       	call   c000daf0 <TSS::flush()>
c0015646:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001564c:	89 04 24             	mov    DWORD PTR [esp],eax
c001564f:	e8 ae 64 ff ff       	call   c000bb02 <IDT::setup()>
c0015654:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c001565b:	e8 74 a4 00 00       	call   c001fad4 <CPU::writeDR7(unsigned long)>
c0015660:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001566a:	e8 57 6f ff ff       	call   c000c5c6 <Phys::allocatePage()>
c001566f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015675:	89 30                	mov    DWORD PTR [eax],esi
c0015677:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001567d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015680:	58                   	pop    eax
c0015681:	5a                   	pop    edx
c0015682:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0015688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001568c:	e8 4d 94 ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c0015691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015694:	e8 db f3 ff ff       	call   c0014a74 <CPU::detectFeatures()>
c0015699:	e8 76 c3 ff ff       	call   c0011a14 <setupInterruptController()>
c001569e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00156a4:	a1 80 43 02 c0       	mov    eax,ds:0xc0024380
c00156a9:	83 e0 10             	and    eax,0x10
c00156ac:	83 f8 01             	cmp    eax,0x1
c00156af:	19 c0                	sbb    eax,eax
c00156b1:	83 e0 46             	and    eax,0x46
c00156b4:	83 c0 1e             	add    eax,0x1e
c00156b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00156ba:	e8 e7 d6 ff ff       	call   c0012da6 <setupTimer(int)>
c00156bf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00156c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156c8:	e8 99 fe ff ff       	call   c0015566 <CPU::setupFeatures()>
c00156cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156d0:	e8 23 f1 ff ff       	call   c00147f8 <CPU::displayFeatures()>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	31 c0                	xor    eax,eax
c00156da:	5b                   	pop    ebx
c00156db:	5e                   	pop    esi
c00156dc:	5f                   	pop    edi
c00156dd:	c3                   	ret    

c00156de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00156de:	57                   	push   edi
c00156df:	56                   	push   esi
c00156e0:	53                   	push   ebx
c00156e1:	51                   	push   ecx
c00156e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156e6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00156e9:	66 0f 02 c0          	lar    ax,ax
c00156ed:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00156f0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00156f4:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00156f7:	88 ca                	mov    dl,cl
c00156f9:	c0 ea 06             	shr    dl,0x6
c00156fc:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0015700:	89 ca                	mov    edx,ecx
c0015702:	66 c1 ea 03          	shr    dx,0x3
c0015706:	83 e2 07             	and    edx,0x7
c0015709:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001570e:	88 17                	mov    BYTE PTR [edi],dl
c0015710:	0f 84 a4 01 00 00    	je     c00158ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dc>
c0015716:	83 e1 07             	and    ecx,0x7
c0015719:	80 f9 04             	cmp    cl,0x4
c001571c:	0f 84 98 00 00 00    	je     c00157ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdc>
c0015722:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0015727:	0f 95 c0             	setne  al
c001572a:	80 f9 05             	cmp    cl,0x5
c001572d:	0f 95 c2             	setne  dl
c0015730:	08 c2                	or     dl,al
c0015732:	74 79                	je     c00157ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xcf>
c0015734:	84 c9                	test   cl,cl
c0015736:	75 05                	jne    c001573d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5f>
c0015738:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001573b:	eb 3c                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c001573d:	80 f9 01             	cmp    cl,0x1
c0015740:	75 05                	jne    c0015747 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x69>
c0015742:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015745:	eb 32                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c0015747:	80 f9 02             	cmp    cl,0x2
c001574a:	75 05                	jne    c0015751 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x73>
c001574c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001574f:	eb 28                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c0015751:	31 c0                	xor    eax,eax
c0015753:	80 f9 03             	cmp    cl,0x3
c0015756:	75 05                	jne    c001575d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7f>
c0015758:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001575b:	eb 1c                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c001575d:	80 f9 05             	cmp    cl,0x5
c0015760:	75 05                	jne    c0015767 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x89>
c0015762:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0015765:	eb 12                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c0015767:	80 f9 06             	cmp    cl,0x6
c001576a:	75 05                	jne    c0015771 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x93>
c001576c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001576f:	eb 08                	jmp    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c0015771:	80 f9 07             	cmp    cl,0x7
c0015774:	75 03                	jne    c0015779 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9b>
c0015776:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015779:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001577e:	75 10                	jne    c0015790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb2>
c0015780:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015784:	b9 03 00 00 00       	mov    ecx,0x3
c0015789:	01 d0                	add    eax,edx
c001578b:	e9 35 01 00 00       	jmp    c00158c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015790:	b9 02 00 00 00       	mov    ecx,0x2
c0015795:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001579a:	0f 85 25 01 00 00    	jne    c00158c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00157a0:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157a3:	b9 06 00 00 00       	mov    ecx,0x6
c00157a8:	e9 18 01 00 00       	jmp    c00158c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00157ad:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00157b0:	b9 06 00 00 00       	mov    ecx,0x6
c00157b5:	e9 0d 01 00 00       	jmp    c00158c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e9>
c00157ba:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00157bd:	88 ca                	mov    dl,cl
c00157bf:	c0 ea 06             	shr    dl,0x6
c00157c2:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00157c6:	89 ca                	mov    edx,ecx
c00157c8:	66 c1 ea 03          	shr    dx,0x3
c00157cc:	83 e2 07             	and    edx,0x7
c00157cf:	80 e1 07             	and    cl,0x7
c00157d2:	75 05                	jne    c00157d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfb>
c00157d4:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00157d7:	eb 4a                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c00157d9:	80 f9 01             	cmp    cl,0x1
c00157dc:	75 05                	jne    c00157e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c00157de:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00157e1:	eb 40                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c00157e3:	80 f9 02             	cmp    cl,0x2
c00157e6:	75 05                	jne    c00157ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10f>
c00157e8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00157eb:	eb 36                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c00157ed:	80 f9 03             	cmp    cl,0x3
c00157f0:	75 05                	jne    c00157f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x119>
c00157f2:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00157f5:	eb 2c                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c00157f7:	80 f9 04             	cmp    cl,0x4
c00157fa:	75 10                	jne    c001580c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12e>
c00157fc:	66 a9 00 e0          	test   ax,0xe000
c0015800:	75 05                	jne    c0015807 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015802:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0015805:	eb 1c                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c0015807:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001580a:	eb 17                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c001580c:	80 f9 05             	cmp    cl,0x5
c001580f:	75 05                	jne    c0015816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x138>
c0015811:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0015814:	eb 0d                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c0015816:	80 f9 06             	cmp    cl,0x6
c0015819:	75 05                	jne    c0015820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x142>
c001581b:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001581e:	eb 03                	jmp    c0015823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x145>
c0015820:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0015823:	84 d2                	test   dl,dl
c0015825:	75 05                	jne    c001582c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14e>
c0015827:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001582a:	eb 3c                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c001582c:	80 fa 01             	cmp    dl,0x1
c001582f:	75 05                	jne    c0015836 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x158>
c0015831:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015834:	eb 32                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c0015836:	80 fa 02             	cmp    dl,0x2
c0015839:	75 05                	jne    c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x162>
c001583b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001583e:	eb 28                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c0015840:	80 fa 03             	cmp    dl,0x3
c0015843:	75 05                	jne    c001584a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16c>
c0015845:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015848:	eb 1e                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c001584a:	31 c0                	xor    eax,eax
c001584c:	80 fa 04             	cmp    dl,0x4
c001584f:	74 17                	je     c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c0015851:	80 fa 05             	cmp    dl,0x5
c0015854:	75 05                	jne    c001585b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17d>
c0015856:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0015859:	eb 0d                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c001585b:	80 fa 06             	cmp    dl,0x6
c001585e:	75 05                	jne    c0015865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x187>
c0015860:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015863:	eb 03                	jmp    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18a>
c0015865:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015868:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001586d:	0f 94 c2             	sete   dl
c0015870:	80 f9 05             	cmp    cl,0x5
c0015873:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0015877:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001587c:	d3 e0                	shl    eax,cl
c001587e:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0015882:	74 0a                	je     c001588e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c0015884:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015887:	b9 07 00 00 00       	mov    ecx,0x7
c001588c:	eb 37                	jmp    c00158c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001588e:	01 f8                	add    eax,edi
c0015890:	b9 03 00 00 00       	mov    ecx,0x3
c0015895:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001589a:	74 2b                	je     c00158c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e9>
c001589c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00158a1:	75 0d                	jne    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d2>
c00158a3:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00158a7:	01 c8                	add    eax,ecx
c00158a9:	b9 04 00 00 00       	mov    ecx,0x4
c00158ae:	eb 17                	jmp    c00158c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e9>
c00158b0:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158b3:	b9 07 00 00 00       	mov    ecx,0x7
c00158b8:	eb 0d                	jmp    c00158c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e9>
c00158ba:	b9 02 00 00 00       	mov    ecx,0x2
c00158bf:	b2 01                	mov    dl,0x1
c00158c1:	31 c0                	xor    eax,eax
c00158c3:	eb 02                	jmp    c00158c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e9>
c00158c5:	31 d2                	xor    edx,edx
c00158c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158cb:	89 0b                	mov    DWORD PTR [ebx],ecx
c00158cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158d1:	88 11                	mov    BYTE PTR [ecx],dl
c00158d3:	5a                   	pop    edx
c00158d4:	5b                   	pop    ebx
c00158d5:	5e                   	pop    esi
c00158d6:	5f                   	pop    edi
c00158d7:	c3                   	ret    

c00158d8 <Krnl::panic(char const*)>:
c00158d8:	55                   	push   ebp
c00158d9:	89 e5                	mov    ebp,esp
c00158db:	53                   	push   ebx
c00158dc:	50                   	push   eax
c00158dd:	a1 b0 4d 02 c0       	mov    eax,ds:0xc0024db0
c00158e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00158e5:	85 c0                	test   eax,eax
c00158e7:	74 02                	je     c00158eb <Krnl::panic(char const*)+0x13>
c00158e9:	ff d0                	call   eax
c00158eb:	fa                   	cli    
c00158ec:	c6 05 b4 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024db4,0x1
c00158f3:	83 ec 08             	sub    esp,0x8
c00158f6:	c6 05 a0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a0,0x0
c00158fd:	53                   	push   ebx
c00158fe:	68 90 24 02 c0       	push   0xc0022490
c0015903:	e8 05 98 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0015908:	58                   	pop    eax
c0015909:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001590e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015914:	e8 38 7a ff ff       	call   c000d351 <setActiveTerminal(VgaText*)>
c0015919:	83 c4 0c             	add    esp,0xc
c001591c:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015921:	6a 01                	push   0x1
c0015923:	6a 0f                	push   0xf
c0015925:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001592b:	e8 60 74 ff ff       	call   c000cd90 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015930:	5a                   	pop    edx
c0015931:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001593c:	e8 b1 7c ff ff       	call   c000d5f2 <VgaText::clearScreen()>
c0015941:	59                   	pop    ecx
c0015942:	58                   	pop    eax
c0015943:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015948:	68 a9 24 02 c0       	push   0xc00224a9
c001594d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015953:	e8 18 7e ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015958:	58                   	pop    eax
c0015959:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001595e:	5a                   	pop    edx
c001595f:	68 50 25 02 c0       	push   0xc0022550
c0015964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001596a:	e8 01 7e ff ff       	call   c000d770 <VgaText::puts(char const*)>
c001596f:	59                   	pop    ecx
c0015970:	58                   	pop    eax
c0015971:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015976:	68 c5 24 02 c0       	push   0xc00224c5
c001597b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015981:	e8 ea 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015986:	58                   	pop    eax
c0015987:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001598c:	5a                   	pop    edx
c001598d:	53                   	push   ebx
c001598e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015994:	e8 d7 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015999:	59                   	pop    ecx
c001599a:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c001599f:	5b                   	pop    ebx
c00159a0:	68 e5 24 02 c0       	push   0xc00224e5
c00159a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159ab:	e8 c0 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00159b0:	58                   	pop    eax
c00159b1:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00159b6:	5a                   	pop    edx
c00159b7:	68 8c 25 02 c0       	push   0xc002258c
c00159bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159c2:	e8 a9 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00159c7:	59                   	pop    ecx
c00159c8:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00159cd:	5b                   	pop    ebx
c00159ce:	68 c5 24 02 c0       	push   0xc00224c5
c00159d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159d9:	e8 92 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00159de:	58                   	pop    eax
c00159df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e4:	5a                   	pop    edx
c00159e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159e8:	83 c0 0c             	add    eax,0xc
c00159eb:	50                   	push   eax
c00159ec:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c00159f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159f7:	e8 74 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c00159fc:	59                   	pop    ecx
c00159fd:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015a02:	5b                   	pop    ebx
c0015a03:	68 e4 24 02 c0       	push   0xc00224e4
c0015a08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a0e:	e8 5d 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015a13:	58                   	pop    eax
c0015a14:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015a19:	5a                   	pop    edx
c0015a1a:	68 b8 25 02 c0       	push   0xc00225b8
c0015a1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a25:	e8 46 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015a2a:	59                   	pop    ecx
c0015a2b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015a30:	5b                   	pop    ebx
c0015a31:	68 f8 25 02 c0       	push   0xc00225f8
c0015a36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a3c:	e8 2f 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015a41:	58                   	pop    eax
c0015a42:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015a47:	5a                   	pop    edx
c0015a48:	68 d0 24 02 c0       	push   0xc00224d0
c0015a4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a53:	e8 18 7d ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015a58:	59                   	pop    ecx
c0015a59:	5b                   	pop    ebx
c0015a5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015a5d:	68 e8 24 02 c0       	push   0xc00224e8
c0015a62:	e8 a6 96 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0015a67:	58                   	pop    eax
c0015a68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a6b:	5a                   	pop    edx
c0015a6c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a6f:	68 f1 24 02 c0       	push   0xc00224f1
c0015a74:	e8 94 96 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0015a79:	59                   	pop    ecx
c0015a7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a7d:	5b                   	pop    ebx
c0015a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a80:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a83:	68 fa 24 02 c0       	push   0xc00224fa
c0015a88:	e8 80 96 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0015a8d:	58                   	pop    eax
c0015a8e:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015a93:	5a                   	pop    edx
c0015a94:	68 3c 26 02 c0       	push   0xc002263c
c0015a99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a9f:	e8 cc 7c ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015aa4:	59                   	pop    ecx
c0015aa5:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015aaa:	5b                   	pop    ebx
c0015aab:	68 03 25 02 c0       	push   0xc0022503
c0015ab0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ab6:	e8 b5 7c ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015abb:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015ac0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ac6:	e8 2d 9d 00 00       	call   c001f7f8 <CPU::readCR0()>
c0015acb:	5a                   	pop    edx
c0015acc:	59                   	pop    ecx
c0015acd:	50                   	push   eax
c0015ace:	53                   	push   ebx
c0015acf:	e8 c2 7c ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015ad4:	5b                   	pop    ebx
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015adb:	68 0d 25 02 c0       	push   0xc002250d
c0015ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ae6:	e8 85 7c ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015aeb:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015af0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015af6:	e8 eb 9f 00 00       	call   c001fae6 <CPU::readCR2()>
c0015afb:	5a                   	pop    edx
c0015afc:	59                   	pop    ecx
c0015afd:	50                   	push   eax
c0015afe:	53                   	push   ebx
c0015aff:	e8 92 7c ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015b04:	5b                   	pop    ebx
c0015b05:	58                   	pop    eax
c0015b06:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b0b:	68 17 25 02 c0       	push   0xc0022517
c0015b10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b16:	e8 55 7c ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015b1b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b20:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b26:	e8 5a 99 00 00       	call   c001f485 <CPU::readCR3()>
c0015b2b:	5a                   	pop    edx
c0015b2c:	59                   	pop    ecx
c0015b2d:	50                   	push   eax
c0015b2e:	53                   	push   ebx
c0015b2f:	e8 62 7c ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015b34:	5b                   	pop    ebx
c0015b35:	58                   	pop    eax
c0015b36:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b3b:	68 2a 25 02 c0       	push   0xc002252a
c0015b40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b46:	e8 25 7c ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015b4b:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b50:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b56:	e8 67 9f 00 00       	call   c001fac2 <CPU::readCR4()>
c0015b5b:	5a                   	pop    edx
c0015b5c:	59                   	pop    ecx
c0015b5d:	50                   	push   eax
c0015b5e:	53                   	push   ebx
c0015b5f:	e8 32 7c ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015b64:	5b                   	pop    ebx
c0015b65:	58                   	pop    eax
c0015b66:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b6b:	68 34 25 02 c0       	push   0xc0022534
c0015b70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b76:	e8 f5 7b ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015b7b:	5a                   	pop    edx
c0015b7c:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b81:	59                   	pop    ecx
c0015b82:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b88:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015b8b:	50                   	push   eax
c0015b8c:	e8 05 7c ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015b91:	5b                   	pop    ebx
c0015b92:	58                   	pop    eax
c0015b93:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015b98:	68 4b 25 02 c0       	push   0xc002254b
c0015b9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ba3:	e8 c8 7b ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015ba8:	5a                   	pop    edx
c0015ba9:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015bae:	59                   	pop    ecx
c0015baf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bb5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015bb8:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015bbb:	50                   	push   eax
c0015bbc:	e8 d5 7b ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015bc1:	5b                   	pop    ebx
c0015bc2:	58                   	pop    eax
c0015bc3:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015bc8:	68 4b 25 02 c0       	push   0xc002254b
c0015bcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015bd3:	e8 98 7b ff ff       	call   c000d770 <VgaText::puts(char const*)>
c0015bd8:	59                   	pop    ecx
c0015bd9:	a1 b4 57 02 c0       	mov    eax,ds:0xc00257b4
c0015bde:	5b                   	pop    ebx
c0015bdf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015be5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015be8:	8b 12                	mov    edx,DWORD PTR [edx]
c0015bea:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015bed:	50                   	push   eax
c0015bee:	e8 a3 7b ff ff       	call   c000d796 <VgaText::putx(unsigned int)>
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	b2 fe                	mov    dl,0xfe
c0015bf8:	e4 60                	in     al,0x60
c0015bfa:	3c 1c                	cmp    al,0x1c
c0015bfc:	74 04                	je     c0015c02 <Krnl::panic(char const*)+0x32a>
c0015bfe:	3c 5a                	cmp    al,0x5a
c0015c00:	75 f6                	jne    c0015bf8 <Krnl::panic(char const*)+0x320>
c0015c02:	e4 64                	in     al,0x64
c0015c04:	a8 02                	test   al,0x2
c0015c06:	75 fa                	jne    c0015c02 <Krnl::panic(char const*)+0x32a>
c0015c08:	88 d0                	mov    al,dl
c0015c0a:	e6 64                	out    0x64,al
c0015c0c:	fa                   	cli    
c0015c0d:	f4                   	hlt    
c0015c0e:	eb e8                	jmp    c0015bf8 <Krnl::panic(char const*)+0x320>

c0015c10 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c10:	55                   	push   ebp
c0015c11:	57                   	push   edi
c0015c12:	56                   	push   esi
c0015c13:	53                   	push   ebx
c0015c14:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c1a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c21:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c23:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015c26:	80 fb 40             	cmp    bl,0x40
c0015c29:	75 1b                	jne    c0015c46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015c2b:	8a 16                	mov    dl,BYTE PTR [esi]
c0015c2d:	84 d2                	test   dl,dl
c0015c2f:	0f 84 f1 00 00 00    	je     c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c35:	8d 46 01             	lea    eax,[esi+0x1]
c0015c38:	80 fa 3a             	cmp    dl,0x3a
c0015c3b:	74 04                	je     c0015c41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015c3d:	89 c6                	mov    esi,eax
c0015c3f:	eb ea                	jmp    c0015c2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015c41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c44:	89 c6                	mov    esi,eax
c0015c46:	50                   	push   eax
c0015c47:	6a 40                	push   0x40
c0015c49:	6a 00                	push   0x0
c0015c4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c4f:	50                   	push   eax
c0015c50:	e8 65 aa fe ff       	call   c00006ba <memset>
c0015c55:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015c5c:	31 c0                	xor    eax,eax
c0015c5e:	83 c4 10             	add    esp,0x10
c0015c61:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015c63:	84 c9                	test   cl,cl
c0015c65:	0f 84 bb 00 00 00    	je     c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c6b:	3d c7 00 00 00       	cmp    eax,0xc7
c0015c70:	0f 8f b0 00 00 00    	jg     c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c76:	80 f9 0a             	cmp    cl,0xa
c0015c79:	0f 85 98 00 00 00    	jne    c0015d17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015c7f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015c84:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015c88:	a8 df                	test   al,0xdf
c0015c8a:	0f 94 c1             	sete   cl
c0015c8d:	3c 23                	cmp    al,0x23
c0015c8f:	0f 94 c2             	sete   dl
c0015c92:	08 d1                	or     cl,dl
c0015c94:	75 4a                	jne    c0015ce0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015c96:	8d 50 f7             	lea    edx,[eax-0x9]
c0015c99:	80 fa 01             	cmp    dl,0x1
c0015c9c:	76 42                	jbe    c0015ce0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015c9e:	3c 5b                	cmp    al,0x5b
c0015ca0:	75 42                	jne    c0015ce4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015ca2:	80 fb 40             	cmp    bl,0x40
c0015ca5:	75 39                	jne    c0015ce0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015ca7:	83 ec 0c             	sub    esp,0xc
c0015caa:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015cae:	52                   	push   edx
c0015caf:	e8 23 aa fe ff       	call   c00006d7 <strlen>
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	83 f8 3f             	cmp    eax,0x3f
c0015cba:	77 6a                	ja     c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cbc:	50                   	push   eax
c0015cbd:	50                   	push   eax
c0015cbe:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015cc2:	52                   	push   edx
c0015cc3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015cc7:	52                   	push   edx
c0015cc8:	e8 8c aa fe ff       	call   c0000759 <strcpy>
c0015ccd:	58                   	pop    eax
c0015cce:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015cd2:	52                   	push   edx
c0015cd3:	e8 ff a9 fe ff       	call   c00006d7 <strlen>
c0015cd8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	31 d2                	xor    edx,edx
c0015ce2:	eb 3a                	jmp    c0015d1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015ce4:	80 fb 40             	cmp    bl,0x40
c0015ce7:	74 06                	je     c0015cef <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015ce9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015ced:	eb 20                	jmp    c0015d0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015cef:	50                   	push   eax
c0015cf0:	50                   	push   eax
c0015cf1:	55                   	push   ebp
c0015cf2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015cf6:	50                   	push   eax
c0015cf7:	e8 ae aa fe ff       	call   c00007aa <strcmp>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	85 c0                	test   eax,eax
c0015d01:	75 dd                	jne    c0015ce0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d03:	eb e4                	jmp    c0015ce9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d05:	8d 50 01             	lea    edx,[eax+0x1]
c0015d08:	80 f9 3d             	cmp    cl,0x3d
c0015d0b:	74 1d                	je     c0015d2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015d0d:	89 d0                	mov    eax,edx
c0015d0f:	8a 08                	mov    cl,BYTE PTR [eax]
c0015d11:	84 c9                	test   cl,cl
c0015d13:	75 f0                	jne    c0015d05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015d15:	eb 0f                	jmp    c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d17:	8d 50 01             	lea    edx,[eax+0x1]
c0015d1a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015d1e:	47                   	inc    edi
c0015d1f:	89 d0                	mov    eax,edx
c0015d21:	e9 3b ff ff ff       	jmp    c0015c61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015d26:	31 c0                	xor    eax,eax
c0015d28:	eb 33                	jmp    c0015d5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015d2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015d2e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d31:	50                   	push   eax
c0015d32:	50                   	push   eax
c0015d33:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015d37:	50                   	push   eax
c0015d38:	56                   	push   esi
c0015d39:	e8 6c aa fe ff       	call   c00007aa <strcmp>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	85 c0                	test   eax,eax
c0015d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d47:	75 97                	jne    c0015ce0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d49:	51                   	push   ecx
c0015d4a:	51                   	push   ecx
c0015d4b:	52                   	push   edx
c0015d4c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015d53:	e8 01 aa fe ff       	call   c0000759 <strcpy>
c0015d58:	83 c4 10             	add    esp,0x10
c0015d5b:	b0 01                	mov    al,0x1
c0015d5d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015d63:	5b                   	pop    ebx
c0015d64:	5e                   	pop    esi
c0015d65:	5f                   	pop    edi
c0015d66:	5d                   	pop    ebp
c0015d67:	c3                   	ret    

c0015d68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015d68:	57                   	push   edi
c0015d69:	56                   	push   esi
c0015d6a:	53                   	push   ebx
c0015d6b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015d71:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015d78:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015d7f:	53                   	push   ebx
c0015d80:	e8 52 a9 fe ff       	call   c00006d7 <strlen>
c0015d85:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d88:	89 c7                	mov    edi,eax
c0015d8a:	e8 48 a9 fe ff       	call   c00006d7 <strlen>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015d96:	31 ff                	xor    edi,edi
c0015d98:	3d ff 00 00 00       	cmp    eax,0xff
c0015d9d:	0f 87 18 01 00 00    	ja     c0015ebb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015da3:	51                   	push   ecx
c0015da4:	51                   	push   ecx
c0015da5:	56                   	push   esi
c0015da6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015daa:	56                   	push   esi
c0015dab:	e8 a9 a9 fe ff       	call   c0000759 <strcpy>
c0015db0:	58                   	pop    eax
c0015db1:	5a                   	pop    edx
c0015db2:	68 34 2a 02 c0       	push   0xc0022a34
c0015db7:	56                   	push   esi
c0015db8:	e8 53 aa fe ff       	call   c0000810 <strcat>
c0015dbd:	59                   	pop    ecx
c0015dbe:	58                   	pop    eax
c0015dbf:	53                   	push   ebx
c0015dc0:	56                   	push   esi
c0015dc1:	e8 4a aa fe ff       	call   c0000810 <strcat>
c0015dc6:	58                   	pop    eax
c0015dc7:	5a                   	pop    edx
c0015dc8:	68 62 26 02 c0       	push   0xc0022662
c0015dcd:	56                   	push   esi
c0015dce:	e8 3d aa fe ff       	call   c0000810 <strcat>
c0015dd3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015dda:	e8 3f 92 ff ff       	call   c000f01e <operator new(unsigned long)>
c0015ddf:	83 c4 0c             	add    esp,0xc
c0015de2:	89 c3                	mov    ebx,eax
c0015de4:	ff 35 b4 57 02 c0    	push   DWORD PTR ds:0xc00257b4
c0015dea:	56                   	push   esi
c0015deb:	50                   	push   eax
c0015dec:	e8 4b 98 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0015df1:	59                   	pop    ecx
c0015df2:	5e                   	pop    esi
c0015df3:	6a 01                	push   0x1
c0015df5:	53                   	push   ebx
c0015df6:	e8 a5 98 ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	85 c0                	test   eax,eax
c0015e00:	74 08                	je     c0015e0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e02:	83 ec 0c             	sub    esp,0xc
c0015e05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e07:	53                   	push   ebx
c0015e08:	eb 2e                	jmp    c0015e38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015e0a:	52                   	push   edx
c0015e0b:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015e0f:	50                   	push   eax
c0015e10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e14:	50                   	push   eax
c0015e15:	53                   	push   ebx
c0015e16:	e8 31 9b ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c0015e1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e1f:	83 c4 10             	add    esp,0x10
c0015e22:	89 c1                	mov    ecx,eax
c0015e24:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015e28:	75 13                	jne    c0015e3d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015e2a:	83 ec 0c             	sub    esp,0xc
c0015e2d:	53                   	push   ebx
c0015e2e:	e8 cb 98 ff ff       	call   c000f6fe <File::close()>
c0015e33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e3b:	eb 7b                	jmp    c0015eb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015e3d:	83 ec 0c             	sub    esp,0xc
c0015e40:	50                   	push   eax
c0015e41:	e8 d6 61 ff ff       	call   c000c01c <malloc>
c0015e46:	89 c6                	mov    esi,eax
c0015e48:	58                   	pop    eax
c0015e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015e4f:	52                   	push   edx
c0015e50:	56                   	push   esi
c0015e51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e59:	53                   	push   ebx
c0015e5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e5d:	83 c4 20             	add    esp,0x20
c0015e60:	85 c0                	test   eax,eax
c0015e62:	75 0a                	jne    c0015e6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e68:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015e6c:	74 18                	je     c0015e86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015e6e:	83 ec 0c             	sub    esp,0xc
c0015e71:	31 ff                	xor    edi,edi
c0015e73:	53                   	push   ebx
c0015e74:	e8 85 98 ff ff       	call   c000f6fe <File::close()>
c0015e79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e81:	83 c4 10             	add    esp,0x10
c0015e84:	eb 35                	jmp    c0015ebb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	53                   	push   ebx
c0015e8a:	e8 6f 98 ff ff       	call   c000f6fe <File::close()>
c0015e8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e97:	83 c4 0c             	add    esp,0xc
c0015e9a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015ea1:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015ea8:	56                   	push   esi
c0015ea9:	e8 62 fd ff ff       	call   c0015c10 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015eae:	89 34 24             	mov    DWORD PTR [esp],esi
c0015eb1:	89 c7                	mov    edi,eax
c0015eb3:	e8 74 61 ff ff       	call   c000c02c <free>
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	81 c4 10 01 00 00    	add    esp,0x110
c0015ec1:	89 f8                	mov    eax,edi
c0015ec3:	5b                   	pop    ebx
c0015ec4:	5e                   	pop    esi
c0015ec5:	5f                   	pop    edi
c0015ec6:	c3                   	ret    

c0015ec7 <Reg::getLine(char*, char*, char*)>:
c0015ec7:	57                   	push   edi
c0015ec8:	56                   	push   esi
c0015ec9:	53                   	push   ebx
c0015eca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ece:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015ed2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ed6:	57                   	push   edi
c0015ed7:	56                   	push   esi
c0015ed8:	53                   	push   ebx
c0015ed9:	68 67 26 02 c0       	push   0xc0022667
c0015ede:	e8 85 fe ff ff       	call   c0015d68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015ee3:	83 c4 10             	add    esp,0x10
c0015ee6:	84 c0                	test   al,al
c0015ee8:	75 10                	jne    c0015efa <Reg::getLine(char*, char*, char*)+0x33>
c0015eea:	57                   	push   edi
c0015eeb:	56                   	push   esi
c0015eec:	53                   	push   ebx
c0015eed:	68 8c 26 02 c0       	push   0xc002268c
c0015ef2:	e8 71 fe ff ff       	call   c0015d68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	5b                   	pop    ebx
c0015efb:	5e                   	pop    esi
c0015efc:	5f                   	pop    edi
c0015efd:	c3                   	ret    

c0015efe <Reg::readInt(char*, char*, int*)>:
c0015efe:	55                   	push   ebp
c0015eff:	57                   	push   edi
c0015f00:	56                   	push   esi
c0015f01:	53                   	push   ebx
c0015f02:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f08:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f0c:	57                   	push   edi
c0015f0d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f14:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f1b:	e8 a7 ff ff ff       	call   c0015ec7 <Reg::getLine(char*, char*, char*)>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	84 c0                	test   al,al
c0015f25:	0f 84 b3 00 00 00    	je     c0015fde <Reg::readInt(char*, char*, int*)+0xe0>
c0015f2b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f2f:	80 fa 2b             	cmp    dl,0x2b
c0015f32:	74 0c                	je     c0015f40 <Reg::readInt(char*, char*, int*)+0x42>
c0015f34:	80 fa 2d             	cmp    dl,0x2d
c0015f37:	75 0e                	jne    c0015f47 <Reg::readInt(char*, char*, int*)+0x49>
c0015f39:	ba 01 00 00 00       	mov    edx,0x1
c0015f3e:	eb 0b                	jmp    c0015f4b <Reg::readInt(char*, char*, int*)+0x4d>
c0015f40:	ba 01 00 00 00       	mov    edx,0x1
c0015f45:	eb 02                	jmp    c0015f49 <Reg::readInt(char*, char*, int*)+0x4b>
c0015f47:	31 d2                	xor    edx,edx
c0015f49:	31 c0                	xor    eax,eax
c0015f4b:	be 0a 00 00 00       	mov    esi,0xa
c0015f50:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015f55:	75 20                	jne    c0015f77 <Reg::readInt(char*, char*, int*)+0x79>
c0015f57:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015f5b:	80 f9 78             	cmp    cl,0x78
c0015f5e:	75 0a                	jne    c0015f6a <Reg::readInt(char*, char*, int*)+0x6c>
c0015f60:	83 c2 02             	add    edx,0x2
c0015f63:	be 10 00 00 00       	mov    esi,0x10
c0015f68:	eb 0d                	jmp    c0015f77 <Reg::readInt(char*, char*, int*)+0x79>
c0015f6a:	80 f9 62             	cmp    cl,0x62
c0015f6d:	75 08                	jne    c0015f77 <Reg::readInt(char*, char*, int*)+0x79>
c0015f6f:	83 c2 02             	add    edx,0x2
c0015f72:	be 02 00 00 00       	mov    esi,0x2
c0015f77:	01 d7                	add    edi,edx
c0015f79:	31 d2                	xor    edx,edx
c0015f7b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015f7d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015f81:	80 fb 0d             	cmp    bl,0xd
c0015f84:	0f 94 c3             	sete   bl
c0015f87:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015f8c:	0f 94 c1             	sete   cl
c0015f8f:	08 cb                	or     bl,cl
c0015f91:	75 3a                	jne    c0015fcd <Reg::readInt(char*, char*, int*)+0xcf>
c0015f93:	0f af d6             	imul   edx,esi
c0015f96:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015f9b:	83 fe 10             	cmp    esi,0x10
c0015f9e:	75 26                	jne    c0015fc6 <Reg::readInt(char*, char*, int*)+0xc8>
c0015fa0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015fa4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015fa7:	89 e9                	mov    ecx,ebp
c0015fa9:	80 f9 05             	cmp    cl,0x5
c0015fac:	77 06                	ja     c0015fb4 <Reg::readInt(char*, char*, int*)+0xb6>
c0015fae:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015fb2:	eb 16                	jmp    c0015fca <Reg::readInt(char*, char*, int*)+0xcc>
c0015fb4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015fb8:	83 e9 61             	sub    ecx,0x61
c0015fbb:	80 f9 05             	cmp    cl,0x5
c0015fbe:	77 06                	ja     c0015fc6 <Reg::readInt(char*, char*, int*)+0xc8>
c0015fc0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015fc4:	eb 04                	jmp    c0015fca <Reg::readInt(char*, char*, int*)+0xcc>
c0015fc6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015fca:	47                   	inc    edi
c0015fcb:	eb ae                	jmp    c0015f7b <Reg::readInt(char*, char*, int*)+0x7d>
c0015fcd:	84 c0                	test   al,al
c0015fcf:	74 02                	je     c0015fd3 <Reg::readInt(char*, char*, int*)+0xd5>
c0015fd1:	f7 da                	neg    edx
c0015fd3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015fda:	89 10                	mov    DWORD PTR [eax],edx
c0015fdc:	88 d8                	mov    al,bl
c0015fde:	81 c4 ec 00 00 00    	add    esp,0xec
c0015fe4:	5b                   	pop    ebx
c0015fe5:	5e                   	pop    esi
c0015fe6:	5f                   	pop    edi
c0015fe7:	5d                   	pop    ebp
c0015fe8:	c3                   	ret    

c0015fe9 <Reg::readString(char*, char*, char*, int)>:
c0015fe9:	57                   	push   edi
c0015fea:	56                   	push   esi
c0015feb:	53                   	push   ebx
c0015fec:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015ff2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015ff9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015ffd:	57                   	push   edi
c0015ffe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016005:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001600c:	e8 b6 fe ff ff       	call   c0015ec7 <Reg::getLine(char*, char*, char*)>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	89 c6                	mov    esi,eax
c0016016:	84 c0                	test   al,al
c0016018:	74 44                	je     c001605e <Reg::readString(char*, char*, char*, int)+0x75>
c001601a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0016021:	31 c0                	xor    eax,eax
c0016023:	4a                   	dec    edx
c0016024:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016027:	84 c9                	test   cl,cl
c0016029:	74 0f                	je     c001603a <Reg::readString(char*, char*, char*, int)+0x51>
c001602b:	39 c2                	cmp    edx,eax
c001602d:	7e 0b                	jle    c001603a <Reg::readString(char*, char*, char*, int)+0x51>
c001602f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016032:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016037:	40                   	inc    eax
c0016038:	eb ea                	jmp    c0016024 <Reg::readString(char*, char*, char*, int)+0x3b>
c001603a:	83 ec 0c             	sub    esp,0xc
c001603d:	53                   	push   ebx
c001603e:	e8 94 a6 fe ff       	call   c00006d7 <strlen>
c0016043:	83 c4 10             	add    esp,0x10
c0016046:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001604b:	75 11                	jne    c001605e <Reg::readString(char*, char*, char*, int)+0x75>
c001604d:	83 ec 0c             	sub    esp,0xc
c0016050:	53                   	push   ebx
c0016051:	e8 81 a6 fe ff       	call   c00006d7 <strlen>
c0016056:	83 c4 10             	add    esp,0x10
c0016059:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001605e:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016064:	89 f0                	mov    eax,esi
c0016066:	5b                   	pop    ebx
c0016067:	5e                   	pop    esi
c0016068:	5f                   	pop    edi
c0016069:	c3                   	ret    

c001606a <Reg::readBool(char*, char*, bool*)>:
c001606a:	83 ec 20             	sub    esp,0x20
c001606d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016071:	50                   	push   eax
c0016072:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001607a:	e8 7f fe ff ff       	call   c0015efe <Reg::readInt(char*, char*, int*)>
c001607f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016084:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016088:	0f 95 02             	setne  BYTE PTR [edx]
c001608b:	83 c4 2c             	add    esp,0x2c
c001608e:	c3                   	ret    

c001608f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001608f:	53                   	push   ebx
c0016090:	83 ec 1c             	sub    esp,0x1c
c0016093:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016097:	8d 44 24 13          	lea    eax,[esp+0x13]
c001609b:	50                   	push   eax
c001609c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a4:	e8 c1 ff ff ff       	call   c001606a <Reg::readBool(char*, char*, bool*)>
c00160a9:	83 c4 10             	add    esp,0x10
c00160ac:	84 c0                	test   al,al
c00160ae:	74 04                	je     c00160b4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00160b0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00160b4:	88 d8                	mov    al,bl
c00160b6:	83 c4 18             	add    esp,0x18
c00160b9:	5b                   	pop    ebx
c00160ba:	c3                   	ret    

c00160bb <Reg::readIntWithDefault(char*, char*, int)>:
c00160bb:	53                   	push   ebx
c00160bc:	83 ec 1c             	sub    esp,0x1c
c00160bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00160c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160c7:	50                   	push   eax
c00160c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d0:	e8 29 fe ff ff       	call   c0015efe <Reg::readInt(char*, char*, int*)>
c00160d5:	83 c4 10             	add    esp,0x10
c00160d8:	84 c0                	test   al,al
c00160da:	74 04                	je     c00160e0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00160dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00160e0:	89 d8                	mov    eax,ebx
c00160e2:	83 c4 18             	add    esp,0x18
c00160e5:	5b                   	pop    ebx
c00160e6:	c3                   	ret    

c00160e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00160e7:	56                   	push   esi
c00160e8:	53                   	push   ebx
c00160e9:	51                   	push   ecx
c00160ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00160ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160f6:	56                   	push   esi
c00160f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ff:	e8 e5 fe ff ff       	call   c0015fe9 <Reg::readString(char*, char*, char*, int)>
c0016104:	83 c4 10             	add    esp,0x10
c0016107:	84 c0                	test   al,al
c0016109:	74 02                	je     c001610d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001610b:	89 f3                	mov    ebx,esi
c001610d:	89 d8                	mov    eax,ebx
c001610f:	5a                   	pop    edx
c0016110:	5b                   	pop    ebx
c0016111:	5e                   	pop    esi
c0016112:	c3                   	ret    

c0016113 <Sys::exit(regs*)>:
c0016113:	83 ec 18             	sub    esp,0x18
c0016116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001611a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001611d:	e8 20 31 00 00       	call   c0019242 <terminateTask(int)>
c0016122:	83 c8 ff             	or     eax,0xffffffff
c0016125:	83 c4 1c             	add    esp,0x1c
c0016128:	89 c2                	mov    edx,eax
c001612a:	c3                   	ret    

c001612b <Sys::loadDLL(regs*)>:
c001612b:	56                   	push   esi
c001612c:	53                   	push   ebx
c001612d:	31 d2                	xor    edx,edx
c001612f:	51                   	push   ecx
c0016130:	b8 01 00 00 00       	mov    eax,0x1
c0016135:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016139:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001613d:	74 7d                	je     c00161bc <Sys::loadDLL(regs*)+0x91>
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	68 14 01 00 00       	push   0x114
c0016147:	e8 d2 8e ff ff       	call   c000f01e <operator new(unsigned long)>
c001614c:	83 c4 0c             	add    esp,0xc
c001614f:	89 c3                	mov    ebx,eax
c0016151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016156:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016159:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001615c:	53                   	push   ebx
c001615d:	e8 da 94 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0016162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016165:	e8 a4 97 ff ff       	call   c000f90e <File::exists()>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	84 c0                	test   al,al
c001616f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016171:	75 11                	jne    c0016184 <Sys::loadDLL(regs*)+0x59>
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	53                   	push   ebx
c0016177:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	b8 03 00 00 00       	mov    eax,0x3
c0016182:	eb 36                	jmp    c00161ba <Sys::loadDLL(regs*)+0x8f>
c0016184:	83 ec 0c             	sub    esp,0xc
c0016187:	53                   	push   ebx
c0016188:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001618b:	58                   	pop    eax
c001618c:	5a                   	pop    edx
c001618d:	6a 00                	push   0x0
c001618f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016192:	e8 c4 20 00 00       	call   c001825b <Thr::loadDLL(char const*, bool)>
c0016197:	83 c4 10             	add    esp,0x10
c001619a:	89 c1                	mov    ecx,eax
c001619c:	31 d2                	xor    edx,edx
c001619e:	b8 04 00 00 00       	mov    eax,0x4
c00161a3:	85 c9                	test   ecx,ecx
c00161a5:	74 15                	je     c00161bc <Sys::loadDLL(regs*)+0x91>
c00161a7:	53                   	push   ebx
c00161a8:	53                   	push   ebx
c00161a9:	ff 35 68 43 02 c0    	push   DWORD PTR ds:0xc0024368
c00161af:	51                   	push   ecx
c00161b0:	e8 6c 22 00 00       	call   c0018421 <Thr::executeDLL(unsigned long, void*)>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	31 c0                	xor    eax,eax
c00161ba:	31 d2                	xor    edx,edx
c00161bc:	59                   	pop    ecx
c00161bd:	5b                   	pop    ebx
c00161be:	5e                   	pop    esi
c00161bf:	c3                   	ret    

c00161c0 <Sys::read(regs*)>:
c00161c0:	57                   	push   edi
c00161c1:	56                   	push   esi
c00161c2:	53                   	push   ebx
c00161c3:	83 ec 10             	sub    esp,0x10
c00161c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161cd:	83 f8 02             	cmp    eax,0x2
c00161d0:	77 10                	ja     c00161e2 <Sys::read(regs*)+0x22>
c00161d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00161da:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00161e0:	eb 0e                	jmp    c00161f0 <Sys::read(regs*)+0x30>
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	50                   	push   eax
c00161e6:	e8 fa 7d ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c00161eb:	83 c4 10             	add    esp,0x10
c00161ee:	89 c1                	mov    ecx,eax
c00161f0:	83 c8 ff             	or     eax,0xffffffff
c00161f3:	85 c9                	test   ecx,ecx
c00161f5:	89 c2                	mov    edx,eax
c00161f7:	74 28                	je     c0016221 <Sys::read(regs*)+0x61>
c00161f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016201:	31 ff                	xor    edi,edi
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016208:	8d 54 24 18          	lea    edx,[esp+0x18]
c001620c:	52                   	push   edx
c001620d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016210:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016213:	57                   	push   edi
c0016214:	56                   	push   esi
c0016215:	51                   	push   ecx
c0016216:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016219:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001621d:	83 c4 20             	add    esp,0x20
c0016220:	99                   	cdq    
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	5b                   	pop    ebx
c0016225:	5e                   	pop    esi
c0016226:	5f                   	pop    edi
c0016227:	c3                   	ret    

c0016228 <Sys::sbrk(regs*)>:
c0016228:	56                   	push   esi
c0016229:	53                   	push   ebx
c001622a:	50                   	push   eax
c001622b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016234:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016237:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001623a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0016240:	85 db                	test   ebx,ebx
c0016242:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0016245:	74 02                	je     c0016249 <Sys::sbrk(regs*)+0x21>
c0016247:	79 06                	jns    c001624f <Sys::sbrk(regs*)+0x27>
c0016249:	89 f0                	mov    eax,esi
c001624b:	31 d2                	xor    edx,edx
c001624d:	eb 2a                	jmp    c0016279 <Sys::sbrk(regs*)+0x51>
c001624f:	83 c8 ff             	or     eax,0xffffffff
c0016252:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016258:	89 c2                	mov    edx,eax
c001625a:	77 1d                	ja     c0016279 <Sys::sbrk(regs*)+0x51>
c001625c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016262:	50                   	push   eax
c0016263:	c1 ea 0c             	shr    edx,0xc
c0016266:	68 07 04 00 00       	push   0x407
c001626b:	52                   	push   edx
c001626c:	51                   	push   ecx
c001626d:	e8 9c 86 ff ff       	call   c000e90e <VAS::allocatePages(int, int)>
c0016272:	89 f0                	mov    eax,esi
c0016274:	31 d2                	xor    edx,edx
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	59                   	pop    ecx
c001627a:	5b                   	pop    ebx
c001627b:	5e                   	pop    esi
c001627c:	c3                   	ret    

c001627d <Sys::write(regs*)>:
c001627d:	57                   	push   edi
c001627e:	56                   	push   esi
c001627f:	53                   	push   ebx
c0016280:	83 ec 10             	sub    esp,0x10
c0016283:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016287:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001628a:	83 f8 02             	cmp    eax,0x2
c001628d:	77 10                	ja     c001629f <Sys::write(regs*)+0x22>
c001628f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016294:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016297:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001629d:	eb 0e                	jmp    c00162ad <Sys::write(regs*)+0x30>
c001629f:	83 ec 0c             	sub    esp,0xc
c00162a2:	50                   	push   eax
c00162a3:	e8 3d 7d ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	89 c1                	mov    ecx,eax
c00162ad:	83 c8 ff             	or     eax,0xffffffff
c00162b0:	85 c9                	test   ecx,ecx
c00162b2:	89 c2                	mov    edx,eax
c00162b4:	74 28                	je     c00162de <Sys::write(regs*)+0x61>
c00162b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162be:	31 ff                	xor    edi,edi
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00162c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162c9:	52                   	push   edx
c00162ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162cd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162d0:	57                   	push   edi
c00162d1:	56                   	push   esi
c00162d2:	51                   	push   ecx
c00162d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00162d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162da:	83 c4 20             	add    esp,0x20
c00162dd:	99                   	cdq    
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	5b                   	pop    ebx
c00162e2:	5e                   	pop    esi
c00162e3:	5f                   	pop    edi
c00162e4:	c3                   	ret    

c00162e5 <Sys::yield(regs*)>:
c00162e5:	83 ec 0c             	sub    esp,0xc
c00162e8:	e8 3f 25 00 00       	call   c001882c <lockScheduler()>
c00162ed:	e8 6e 28 00 00       	call   c0018b60 <schedule()>
c00162f2:	e8 37 25 00 00       	call   c001882e <unlockScheduler()>
c00162f7:	31 c0                	xor    eax,eax
c00162f9:	31 d2                	xor    edx,edx
c00162fb:	83 c4 0c             	add    esp,0xc
c00162fe:	c3                   	ret    

c00162ff <sysCallGetPID(regs*)>:
c00162ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016304:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016307:	8b 00                	mov    eax,DWORD PTR [eax]
c0016309:	99                   	cdq    
c001630a:	c3                   	ret    

c001630b <sysCallSeekDir(regs*)>:
c001630b:	31 c0                	xor    eax,eax
c001630d:	31 d2                	xor    edx,edx
c001630f:	c3                   	ret    

c0016310 <sysCallTellDir(regs*)>:
c0016310:	31 c0                	xor    eax,eax
c0016312:	31 d2                	xor    edx,edx
c0016314:	c3                   	ret    

c0016315 <sysCallVerify(regs*)>:
c0016315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016319:	31 d2                	xor    edx,edx
c001631b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001631e:	c3                   	ret    

c001631f <sysCallFork(regs*)>:
c001631f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016324:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016329:	c3                   	ret    

c001632a <sysCallExecve(regs*)>:
c001632a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001632f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016334:	c3                   	ret    

c0016335 <sysCallGetArgc(regs*)>:
c0016335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001633a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001633d:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0016343:	99                   	cdq    
c0016344:	c3                   	ret    

c0016345 <sysFormatDisk(regs*)>:
c0016345:	56                   	push   esi
c0016346:	53                   	push   ebx
c0016347:	53                   	push   ebx
c0016348:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001634c:	8b 1d c8 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244c8
c0016352:	eb 25                	jmp    c0016379 <sysFormatDisk(regs*)+0x34>
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001635a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001635c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001635f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016362:	50                   	push   eax
c0016363:	ff 34 85 60 49 02 c0 	push   DWORD PTR [eax*4-0x3ffdb6a0]
c001636a:	53                   	push   ebx
c001636b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001636e:	83 c4 20             	add    esp,0x20
c0016371:	83 f8 08             	cmp    eax,0x8
c0016374:	75 12                	jne    c0016388 <sysFormatDisk(regs*)+0x43>
c0016376:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016379:	85 db                	test   ebx,ebx
c001637b:	75 d7                	jne    c0016354 <sysFormatDisk(regs*)+0xf>
c001637d:	59                   	pop    ecx
c001637e:	b8 03 00 00 00       	mov    eax,0x3
c0016383:	31 d2                	xor    edx,edx
c0016385:	5b                   	pop    ebx
c0016386:	5e                   	pop    esi
c0016387:	c3                   	ret    
c0016388:	85 c0                	test   eax,eax
c001638a:	74 1b                	je     c00163a7 <sysFormatDisk(regs*)+0x62>
c001638c:	83 f8 09             	cmp    eax,0x9
c001638f:	74 0b                	je     c001639c <sysFormatDisk(regs*)+0x57>
c0016391:	59                   	pop    ecx
c0016392:	b8 02 00 00 00       	mov    eax,0x2
c0016397:	31 d2                	xor    edx,edx
c0016399:	5b                   	pop    ebx
c001639a:	5e                   	pop    esi
c001639b:	c3                   	ret    
c001639c:	59                   	pop    ecx
c001639d:	b8 01 00 00 00       	mov    eax,0x1
c00163a2:	31 d2                	xor    edx,edx
c00163a4:	5b                   	pop    ebx
c00163a5:	5e                   	pop    esi
c00163a6:	c3                   	ret    
c00163a7:	59                   	pop    ecx
c00163a8:	31 c0                	xor    eax,eax
c00163aa:	31 d2                	xor    edx,edx
c00163ac:	5b                   	pop    ebx
c00163ad:	5e                   	pop    esi
c00163ae:	c3                   	ret    

c00163af <sysSetDiskVolumeLabel(regs*)>:
c00163af:	56                   	push   esi
c00163b0:	53                   	push   ebx
c00163b1:	53                   	push   ebx
c00163b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163b6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00163b9:	83 f8 19             	cmp    eax,0x19
c00163bc:	77 29                	ja     c00163e7 <sysSetDiskVolumeLabel(regs*)+0x38>
c00163be:	8b 0c 85 60 49 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb6a0]
c00163c5:	85 c9                	test   ecx,ecx
c00163c7:	74 1e                	je     c00163e7 <sysSetDiskVolumeLabel(regs*)+0x38>
c00163c9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00163cc:	85 d2                	test   edx,edx
c00163ce:	74 17                	je     c00163e7 <sysSetDiskVolumeLabel(regs*)+0x38>
c00163d0:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00163d6:	8b 33                	mov    esi,DWORD PTR [ebx]
c00163d8:	52                   	push   edx
c00163d9:	50                   	push   eax
c00163da:	51                   	push   ecx
c00163db:	53                   	push   ebx
c00163dc:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	99                   	cdq    
c00163e3:	59                   	pop    ecx
c00163e4:	5b                   	pop    ebx
c00163e5:	5e                   	pop    esi
c00163e6:	c3                   	ret    
c00163e7:	59                   	pop    ecx
c00163e8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163f2:	5b                   	pop    ebx
c00163f3:	5e                   	pop    esi
c00163f4:	c3                   	ret    

c00163f5 <sysGetDiskVolumeLabel(regs*)>:
c00163f5:	57                   	push   edi
c00163f6:	56                   	push   esi
c00163f7:	53                   	push   ebx
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00163ff:	83 fa 19             	cmp    edx,0x19
c0016402:	77 34                	ja     c0016438 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016404:	8b 0c 95 60 49 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb6a0]
c001640b:	85 c9                	test   ecx,ecx
c001640d:	74 29                	je     c0016438 <sysGetDiskVolumeLabel(regs*)+0x43>
c001640f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016412:	85 db                	test   ebx,ebx
c0016414:	74 22                	je     c0016438 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016416:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016419:	85 c0                	test   eax,eax
c001641b:	74 1b                	je     c0016438 <sysGetDiskVolumeLabel(regs*)+0x43>
c001641d:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0016423:	83 ec 0c             	sub    esp,0xc
c0016426:	8b 3e                	mov    edi,DWORD PTR [esi]
c0016428:	50                   	push   eax
c0016429:	53                   	push   ebx
c001642a:	52                   	push   edx
c001642b:	51                   	push   ecx
c001642c:	56                   	push   esi
c001642d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016430:	83 c4 20             	add    esp,0x20
c0016433:	99                   	cdq    
c0016434:	5b                   	pop    ebx
c0016435:	5e                   	pop    esi
c0016436:	5f                   	pop    edi
c0016437:	c3                   	ret    
c0016438:	5b                   	pop    ebx
c0016439:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001643e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016443:	5e                   	pop    esi
c0016444:	5f                   	pop    edi
c0016445:	c3                   	ret    

c0016446 <sysShutdown(regs*)>:
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016450:	85 c0                	test   eax,eax
c0016452:	74 18                	je     c001646c <sysShutdown(regs*)+0x26>
c0016454:	83 f8 01             	cmp    eax,0x1
c0016457:	74 38                	je     c0016491 <sysShutdown(regs*)+0x4b>
c0016459:	83 f8 02             	cmp    eax,0x2
c001645c:	74 24                	je     c0016482 <sysShutdown(regs*)+0x3c>
c001645e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016463:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	c3                   	ret    
c001646c:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0016471:	8b 10                	mov    edx,DWORD PTR [eax]
c0016473:	6a 00                	push   0x0
c0016475:	6a 00                	push   0x0
c0016477:	6a 00                	push   0x0
c0016479:	50                   	push   eax
c001647a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	eb dc                	jmp    c001645e <sysShutdown(regs*)+0x18>
c0016482:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0016487:	8b 10                	mov    edx,DWORD PTR [eax]
c0016489:	6a 00                	push   0x0
c001648b:	6a 00                	push   0x0
c001648d:	6a 01                	push   0x1
c001648f:	eb e8                	jmp    c0016479 <sysShutdown(regs*)+0x33>
c0016491:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0016496:	85 c0                	test   eax,eax
c0016498:	74 02                	je     c001649c <sysShutdown(regs*)+0x56>
c001649a:	ff d0                	call   eax
c001649c:	31 c0                	xor    eax,eax
c001649e:	31 d2                	xor    edx,edx
c00164a0:	83 c4 0c             	add    esp,0xc
c00164a3:	c3                   	ret    

c00164a4 <sysCallGetCwd(regs*)>:
c00164a4:	83 ec 10             	sub    esp,0x10
c00164a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00164ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00164ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00164b9:	e8 ef 94 ff ff       	call   c000f9ad <getcwd(Process*, char*, int)>
c00164be:	83 c4 1c             	add    esp,0x1c
c00164c1:	99                   	cdq    
c00164c2:	c3                   	ret    

c00164c3 <sysCallSetCwd(regs*)>:
c00164c3:	83 ec 14             	sub    esp,0x14
c00164c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00164d5:	e8 fd 94 ff ff       	call   c000f9d7 <setcwd(Process*, char*)>
c00164da:	83 c4 1c             	add    esp,0x1c
c00164dd:	99                   	cdq    
c00164de:	c3                   	ret    

c00164df <sysCallRealpath(regs*)>:
c00164df:	83 ec 0c             	sub    esp,0xc
c00164e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00164e9:	85 d2                	test   edx,edx
c00164eb:	74 07                	je     c00164f4 <sysCallRealpath(regs*)+0x15>
c00164ed:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00164f0:	85 c0                	test   eax,eax
c00164f2:	75 0b                	jne    c00164ff <sysCallRealpath(regs*)+0x20>
c00164f4:	b8 01 00 00 00       	mov    eax,0x1
c00164f9:	31 d2                	xor    edx,edx
c00164fb:	83 c4 0c             	add    esp,0xc
c00164fe:	c3                   	ret    
c00164ff:	51                   	push   ecx
c0016500:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016506:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016509:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001650f:	51                   	push   ecx
c0016510:	52                   	push   edx
c0016511:	50                   	push   eax
c0016512:	e8 7b 8f ff ff       	call   c000f492 <standardiseFiles(char*, char const*, char const*)>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	31 c0                	xor    eax,eax
c001651c:	31 d2                	xor    edx,edx
c001651e:	83 c4 0c             	add    esp,0xc
c0016521:	c3                   	ret    

c0016522 <sysCallReadDir(regs*)>:
c0016522:	53                   	push   ebx
c0016523:	83 ec 18             	sub    esp,0x18
c0016526:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001652a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001652d:	83 f8 02             	cmp    eax,0x2
c0016530:	76 53                	jbe    c0016585 <sysCallReadDir(regs*)+0x63>
c0016532:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016535:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001653b:	77 4f                	ja     c001658c <sysCallReadDir(regs*)+0x6a>
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	50                   	push   eax
c0016541:	e8 9f 7a ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c0016546:	83 c4 10             	add    esp,0x10
c0016549:	85 c0                	test   eax,eax
c001654b:	74 50                	je     c001659d <sysCallReadDir(regs*)+0x7b>
c001654d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016555:	83 ec 0c             	sub    esp,0xc
c0016558:	8b 10                	mov    edx,DWORD PTR [eax]
c001655a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001655e:	51                   	push   ecx
c001655f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016562:	6a 00                	push   0x0
c0016564:	68 10 01 00 00       	push   0x110
c0016569:	50                   	push   eax
c001656a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001656d:	83 c4 20             	add    esp,0x20
c0016570:	85 c0                	test   eax,eax
c0016572:	74 38                	je     c00165ac <sysCallReadDir(regs*)+0x8a>
c0016574:	83 f8 07             	cmp    eax,0x7
c0016577:	74 0c                	je     c0016585 <sysCallReadDir(regs*)+0x63>
c0016579:	b8 02 00 00 00       	mov    eax,0x2
c001657e:	31 d2                	xor    edx,edx
c0016580:	83 c4 18             	add    esp,0x18
c0016583:	5b                   	pop    ebx
c0016584:	c3                   	ret    
c0016585:	b8 01 00 00 00       	mov    eax,0x1
c001658a:	eb f2                	jmp    c001657e <sysCallReadDir(regs*)+0x5c>
c001658c:	83 ec 08             	sub    esp,0x8
c001658f:	52                   	push   edx
c0016590:	68 a8 26 02 c0       	push   0xc00226a8
c0016595:	e8 73 8b ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001659a:	83 c4 10             	add    esp,0x10
c001659d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165a7:	83 c4 18             	add    esp,0x18
c00165aa:	5b                   	pop    ebx
c00165ab:	c3                   	ret    
c00165ac:	31 c0                	xor    eax,eax
c00165ae:	eb ce                	jmp    c001657e <sysCallReadDir(regs*)+0x5c>

c00165b0 <sysCallIsATTY(regs*)>:
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165ba:	83 f8 02             	cmp    eax,0x2
c00165bd:	76 07                	jbe    c00165c6 <sysCallIsATTY(regs*)+0x16>
c00165bf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165c4:	75 26                	jne    c00165ec <sysCallIsATTY(regs*)+0x3c>
c00165c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00165d4:	85 c0                	test   eax,eax
c00165d6:	74 24                	je     c00165fc <sysCallIsATTY(regs*)+0x4c>
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	8b 10                	mov    edx,DWORD PTR [eax]
c00165dd:	50                   	push   eax
c00165de:	ff 12                	call   DWORD PTR [edx]
c00165e0:	31 d2                	xor    edx,edx
c00165e2:	0f b6 c0             	movzx  eax,al
c00165e5:	83 c4 10             	add    esp,0x10
c00165e8:	83 c4 0c             	add    esp,0xc
c00165eb:	c3                   	ret    
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	50                   	push   eax
c00165f0:	e8 f0 79 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c00165f5:	83 c4 10             	add    esp,0x10
c00165f8:	85 c0                	test   eax,eax
c00165fa:	75 dc                	jne    c00165d8 <sysCallIsATTY(regs*)+0x28>
c00165fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016601:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016606:	83 c4 0c             	add    esp,0xc
c0016609:	c3                   	ret    

c001660a <sysCallSeek(regs*)>:
c001660a:	53                   	push   ebx
c001660b:	83 ec 08             	sub    esp,0x8
c001660e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016612:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016615:	83 f8 02             	cmp    eax,0x2
c0016618:	76 4a                	jbe    c0016664 <sysCallSeek(regs*)+0x5a>
c001661a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001661f:	77 32                	ja     c0016653 <sysCallSeek(regs*)+0x49>
c0016621:	83 ec 0c             	sub    esp,0xc
c0016624:	50                   	push   eax
c0016625:	e8 bb 79 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c001662a:	83 c4 0c             	add    esp,0xc
c001662d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016630:	31 db                	xor    ebx,ebx
c0016632:	53                   	push   ebx
c0016633:	51                   	push   ecx
c0016634:	50                   	push   eax
c0016635:	e8 24 91 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c001663a:	83 c4 10             	add    esp,0x10
c001663d:	85 c0                	test   eax,eax
c001663f:	0f 95 c0             	setne  al
c0016642:	31 d2                	xor    edx,edx
c0016644:	0f b6 c0             	movzx  eax,al
c0016647:	f7 d8                	neg    eax
c0016649:	83 d2 00             	adc    edx,0x0
c001664c:	83 c4 08             	add    esp,0x8
c001664f:	f7 da                	neg    edx
c0016651:	5b                   	pop    ebx
c0016652:	c3                   	ret    
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	50                   	push   eax
c0016657:	68 64 27 02 c0       	push   0xc0022764
c001665c:	e8 ac 8a ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016669:	ba ff ff ff ff       	mov    edx,0xffffffff
c001666e:	83 c4 08             	add    esp,0x8
c0016671:	5b                   	pop    ebx
c0016672:	c3                   	ret    

c0016673 <sysCallTell(regs*)>:
c0016673:	53                   	push   ebx
c0016674:	83 ec 08             	sub    esp,0x8
c0016677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001667b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001667e:	83 f8 02             	cmp    eax,0x2
c0016681:	76 5e                	jbe    c00166e1 <sysCallTell(regs*)+0x6e>
c0016683:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016688:	77 2d                	ja     c00166b7 <sysCallTell(regs*)+0x44>
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	50                   	push   eax
c001668e:	e8 52 79 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c0016693:	5a                   	pop    edx
c0016694:	59                   	pop    ecx
c0016695:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016698:	50                   	push   eax
c0016699:	e8 16 91 ff ff       	call   c000f7b4 <File::tell(unsigned long long*)>
c001669e:	83 c4 10             	add    esp,0x10
c00166a1:	85 c0                	test   eax,eax
c00166a3:	0f 95 c0             	setne  al
c00166a6:	31 d2                	xor    edx,edx
c00166a8:	0f b6 c0             	movzx  eax,al
c00166ab:	f7 d8                	neg    eax
c00166ad:	83 d2 00             	adc    edx,0x0
c00166b0:	83 c4 08             	add    esp,0x8
c00166b3:	f7 da                	neg    edx
c00166b5:	5b                   	pop    ebx
c00166b6:	c3                   	ret    
c00166b7:	83 ec 08             	sub    esp,0x8
c00166ba:	50                   	push   eax
c00166bb:	68 7e 27 02 c0       	push   0xc002277e
c00166c0:	e8 48 8a ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00166c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166c8:	83 c4 10             	add    esp,0x10
c00166cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00166d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166d8:	31 d2                	xor    edx,edx
c00166da:	31 c0                	xor    eax,eax
c00166dc:	83 c4 08             	add    esp,0x8
c00166df:	5b                   	pop    ebx
c00166e0:	c3                   	ret    
c00166e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166eb:	83 c4 08             	add    esp,0x8
c00166ee:	5b                   	pop    ebx
c00166ef:	c3                   	ret    

c00166f0 <sysCallSizeFromFilename(regs*)>:
c00166f0:	57                   	push   edi
c00166f1:	56                   	push   esi
c00166f2:	53                   	push   ebx
c00166f3:	83 ec 10             	sub    esp,0x10
c00166f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00166fa:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00166fd:	83 fb 02             	cmp    ebx,0x2
c0016700:	0f 86 8a 00 00 00    	jbe    c0016790 <sysCallSizeFromFilename(regs*)+0xa0>
c0016706:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001670c:	77 56                	ja     c0016764 <sysCallSizeFromFilename(regs*)+0x74>
c001670e:	83 ec 0c             	sub    esp,0xc
c0016711:	68 14 01 00 00       	push   0x114
c0016716:	e8 03 89 ff ff       	call   c000f01e <operator new(unsigned long)>
c001671b:	83 c4 0c             	add    esp,0xc
c001671e:	89 c7                	mov    edi,eax
c0016720:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016725:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016728:	53                   	push   ebx
c0016729:	57                   	push   edi
c001672a:	e8 0d 8f ff ff       	call   c000f63c <File::File(char const*, Process*)>
c001672f:	83 c4 0c             	add    esp,0xc
c0016732:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016736:	50                   	push   eax
c0016737:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001673a:	57                   	push   edi
c001673b:	e8 0c 92 ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c0016740:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016743:	89 c3                	mov    ebx,eax
c0016745:	8b 07                	mov    eax,DWORD PTR [edi]
c0016747:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	31 c0                	xor    eax,eax
c001674f:	85 db                	test   ebx,ebx
c0016751:	0f 95 c0             	setne  al
c0016754:	31 d2                	xor    edx,edx
c0016756:	f7 d8                	neg    eax
c0016758:	83 d2 00             	adc    edx,0x0
c001675b:	83 c4 10             	add    esp,0x10
c001675e:	f7 da                	neg    edx
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	c3                   	ret    
c0016764:	83 ec 08             	sub    esp,0x8
c0016767:	53                   	push   ebx
c0016768:	68 98 27 02 c0       	push   0xc0022798
c001676d:	e8 9b 89 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0016772:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001677e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016785:	31 d2                	xor    edx,edx
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	31 c0                	xor    eax,eax
c001678c:	5b                   	pop    ebx
c001678d:	5e                   	pop    esi
c001678e:	5f                   	pop    edi
c001678f:	c3                   	ret    
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016798:	5b                   	pop    ebx
c0016799:	ba ff ff ff ff       	mov    edx,0xffffffff
c001679e:	5e                   	pop    esi
c001679f:	5f                   	pop    edi
c00167a0:	c3                   	ret    

c00167a1 <sysCallSize(regs*)>:
c00167a1:	53                   	push   ebx
c00167a2:	83 ec 18             	sub    esp,0x18
c00167a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00167a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167ac:	83 f8 02             	cmp    eax,0x2
c00167af:	76 64                	jbe    c0016815 <sysCallSize(regs*)+0x74>
c00167b1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167b6:	77 33                	ja     c00167eb <sysCallSize(regs*)+0x4a>
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	50                   	push   eax
c00167bc:	e8 24 78 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c00167c1:	83 c4 0c             	add    esp,0xc
c00167c4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00167c8:	52                   	push   edx
c00167c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167cc:	50                   	push   eax
c00167cd:	e8 7a 91 ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	85 c0                	test   eax,eax
c00167d7:	0f 95 c0             	setne  al
c00167da:	31 d2                	xor    edx,edx
c00167dc:	0f b6 c0             	movzx  eax,al
c00167df:	f7 d8                	neg    eax
c00167e1:	83 d2 00             	adc    edx,0x0
c00167e4:	83 c4 18             	add    esp,0x18
c00167e7:	f7 da                	neg    edx
c00167e9:	5b                   	pop    ebx
c00167ea:	c3                   	ret    
c00167eb:	83 ec 08             	sub    esp,0x8
c00167ee:	50                   	push   eax
c00167ef:	68 98 27 02 c0       	push   0xc0022798
c00167f4:	e8 14 89 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00167f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167fc:	83 c4 10             	add    esp,0x10
c00167ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016805:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001680c:	31 d2                	xor    edx,edx
c001680e:	31 c0                	xor    eax,eax
c0016810:	83 c4 18             	add    esp,0x18
c0016813:	5b                   	pop    ebx
c0016814:	c3                   	ret    
c0016815:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001681a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001681f:	83 c4 18             	add    esp,0x18
c0016822:	5b                   	pop    ebx
c0016823:	c3                   	ret    

c0016824 <sysCallClose(regs*)>:
c0016824:	53                   	push   ebx
c0016825:	83 ec 08             	sub    esp,0x8
c0016828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001682f:	83 f8 02             	cmp    eax,0x2
c0016832:	76 50                	jbe    c0016884 <sysCallClose(regs*)+0x60>
c0016834:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016839:	74 58                	je     c0016893 <sysCallClose(regs*)+0x6f>
c001683b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016840:	74 60                	je     c00168a2 <sysCallClose(regs*)+0x7e>
c0016842:	77 2f                	ja     c0016873 <sysCallClose(regs*)+0x4f>
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	50                   	push   eax
c0016848:	e8 98 77 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c001684d:	89 c3                	mov    ebx,eax
c001684f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016852:	e8 a7 8e ff ff       	call   c000f6fe <File::close()>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	85 db                	test   ebx,ebx
c001685c:	74 0c                	je     c001686a <sysCallClose(regs*)+0x46>
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016863:	53                   	push   ebx
c0016864:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016867:	83 c4 10             	add    esp,0x10
c001686a:	31 c0                	xor    eax,eax
c001686c:	31 d2                	xor    edx,edx
c001686e:	83 c4 08             	add    esp,0x8
c0016871:	5b                   	pop    ebx
c0016872:	c3                   	ret    
c0016873:	83 ec 08             	sub    esp,0x8
c0016876:	50                   	push   eax
c0016877:	68 cc 26 02 c0       	push   0xc00226cc
c001687c:	e8 8c 88 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016889:	ba ff ff ff ff       	mov    edx,0xffffffff
c001688e:	83 c4 08             	add    esp,0x8
c0016891:	5b                   	pop    ebx
c0016892:	c3                   	ret    
c0016893:	83 ec 0c             	sub    esp,0xc
c0016896:	68 b3 27 02 c0       	push   0xc00227b3
c001689b:	e8 6d 88 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00168a0:	eb c5                	jmp    c0016867 <sysCallClose(regs*)+0x43>
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	68 c1 27 02 c0       	push   0xc00227c1
c00168aa:	eb ef                	jmp    c001689b <sysCallClose(regs*)+0x77>

c00168ac <sysCallOpenDir(regs*)>:
c00168ac:	56                   	push   esi
c00168ad:	53                   	push   ebx
c00168ae:	53                   	push   ebx
c00168af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168b3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00168b6:	85 f6                	test   esi,esi
c00168b8:	74 51                	je     c001690b <sysCallOpenDir(regs*)+0x5f>
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	68 14 01 00 00       	push   0x114
c00168c2:	e8 57 87 ff ff       	call   c000f01e <operator new(unsigned long)>
c00168c7:	83 c4 0c             	add    esp,0xc
c00168ca:	89 c6                	mov    esi,eax
c00168cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00168d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168d7:	56                   	push   esi
c00168d8:	e8 21 92 ff ff       	call   c000fafe <Directory::Directory(char const*, Process*)>
c00168dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00168e0:	e8 7d 92 ff ff       	call   c000fb62 <Directory::open()>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	85 c0                	test   eax,eax
c00168ea:	75 1f                	jne    c001690b <sysCallOpenDir(regs*)+0x5f>
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	56                   	push   esi
c00168f0:	e8 3b 74 ff ff       	call   c000dd30 <UnixFile::getFileDescriptor()>
c00168f5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00168f8:	83 c4 10             	add    esp,0x10
c00168fb:	89 02                	mov    DWORD PTR [edx],eax
c00168fd:	c1 f8 1f             	sar    eax,0x1f
c0016900:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016903:	31 c0                	xor    eax,eax
c0016905:	59                   	pop    ecx
c0016906:	31 d2                	xor    edx,edx
c0016908:	5b                   	pop    ebx
c0016909:	5e                   	pop    esi
c001690a:	c3                   	ret    
c001690b:	59                   	pop    ecx
c001690c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016911:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016916:	5b                   	pop    ebx
c0016917:	5e                   	pop    esi
c0016918:	c3                   	ret    

c0016919 <sysCallMakeDir(regs*)>:
c0016919:	56                   	push   esi
c001691a:	53                   	push   ebx
c001691b:	83 ec 10             	sub    esp,0x10
c001691e:	68 14 01 00 00       	push   0x114
c0016923:	e8 f6 86 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016928:	83 c4 0c             	add    esp,0xc
c001692b:	89 c3                	mov    ebx,eax
c001692d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016932:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016939:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001693c:	53                   	push   ebx
c001693d:	e8 bc 91 ff ff       	call   c000fafe <Directory::Directory(char const*, Process*)>
c0016942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016945:	e8 f8 93 ff ff       	call   c000fd42 <Directory::create()>
c001694a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001694d:	89 c6                	mov    esi,eax
c001694f:	e8 6a 92 ff ff       	call   c000fbbe <Directory::close()>
c0016954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016956:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001695c:	31 c0                	xor    eax,eax
c001695e:	85 f6                	test   esi,esi
c0016960:	0f 95 c0             	setne  al
c0016963:	31 d2                	xor    edx,edx
c0016965:	f7 d8                	neg    eax
c0016967:	83 d2 00             	adc    edx,0x0
c001696a:	83 c4 14             	add    esp,0x14
c001696d:	f7 da                	neg    edx
c001696f:	5b                   	pop    ebx
c0016970:	5e                   	pop    esi
c0016971:	c3                   	ret    

c0016972 <sysCallCloseDir(regs*)>:
c0016972:	53                   	push   ebx
c0016973:	83 ec 08             	sub    esp,0x8
c0016976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001697d:	83 f8 02             	cmp    eax,0x2
c0016980:	76 47                	jbe    c00169c9 <sysCallCloseDir(regs*)+0x57>
c0016982:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016987:	77 2f                	ja     c00169b8 <sysCallCloseDir(regs*)+0x46>
c0016989:	83 ec 0c             	sub    esp,0xc
c001698c:	50                   	push   eax
c001698d:	e8 53 76 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c0016992:	89 c3                	mov    ebx,eax
c0016994:	89 04 24             	mov    DWORD PTR [esp],eax
c0016997:	e8 22 92 ff ff       	call   c000fbbe <Directory::close()>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	85 db                	test   ebx,ebx
c00169a1:	74 0c                	je     c00169af <sysCallCloseDir(regs*)+0x3d>
c00169a3:	83 ec 0c             	sub    esp,0xc
c00169a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169a8:	53                   	push   ebx
c00169a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	31 c0                	xor    eax,eax
c00169b1:	31 d2                	xor    edx,edx
c00169b3:	83 c4 08             	add    esp,0x8
c00169b6:	5b                   	pop    ebx
c00169b7:	c3                   	ret    
c00169b8:	83 ec 08             	sub    esp,0x8
c00169bb:	50                   	push   eax
c00169bc:	68 f4 26 02 c0       	push   0xc00226f4
c00169c1:	e8 47 87 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169d3:	83 c4 08             	add    esp,0x8
c00169d6:	5b                   	pop    ebx
c00169d7:	c3                   	ret    

c00169d8 <sysCallWait(regs*)>:
c00169d8:	83 ec 10             	sub    esp,0x10
c00169db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00169df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00169e2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00169e5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00169e8:	e8 ee 22 00 00       	call   c0018cdb <waitTask(int, int*, int)>
c00169ed:	83 c4 1c             	add    esp,0x1c
c00169f0:	99                   	cdq    
c00169f1:	c3                   	ret    

c00169f2 <sysCallRmdir(regs*)>:
c00169f2:	56                   	push   esi
c00169f3:	53                   	push   ebx
c00169f4:	83 ec 10             	sub    esp,0x10
c00169f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169fb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00169fe:	68 14 01 00 00       	push   0x114
c0016a03:	e8 16 86 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016a08:	83 c4 0c             	add    esp,0xc
c0016a0b:	89 c3                	mov    ebx,eax
c0016a0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a15:	56                   	push   esi
c0016a16:	53                   	push   ebx
c0016a17:	e8 20 8c ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0016a1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a1f:	e8 f4 8d ff ff       	call   c000f818 <File::unlink()>
c0016a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a27:	89 c6                	mov    esi,eax
c0016a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a2e:	31 c0                	xor    eax,eax
c0016a30:	85 f6                	test   esi,esi
c0016a32:	0f 95 c0             	setne  al
c0016a35:	31 d2                	xor    edx,edx
c0016a37:	f7 d8                	neg    eax
c0016a39:	83 d2 00             	adc    edx,0x0
c0016a3c:	83 c4 14             	add    esp,0x14
c0016a3f:	f7 da                	neg    edx
c0016a41:	5b                   	pop    ebx
c0016a42:	5e                   	pop    esi
c0016a43:	c3                   	ret    

c0016a44 <sysCallUnlink(regs*)>:
c0016a44:	56                   	push   esi
c0016a45:	53                   	push   ebx
c0016a46:	83 ec 10             	sub    esp,0x10
c0016a49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a4d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a50:	68 14 01 00 00       	push   0x114
c0016a55:	e8 c4 85 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016a5a:	83 c4 0c             	add    esp,0xc
c0016a5d:	89 c3                	mov    ebx,eax
c0016a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a64:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a67:	56                   	push   esi
c0016a68:	53                   	push   ebx
c0016a69:	e8 ce 8b ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0016a6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a71:	e8 a2 8d ff ff       	call   c000f818 <File::unlink()>
c0016a76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a79:	89 c6                	mov    esi,eax
c0016a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a80:	31 c0                	xor    eax,eax
c0016a82:	85 f6                	test   esi,esi
c0016a84:	0f 95 c0             	setne  al
c0016a87:	31 d2                	xor    edx,edx
c0016a89:	f7 d8                	neg    eax
c0016a8b:	83 d2 00             	adc    edx,0x0
c0016a8e:	83 c4 14             	add    esp,0x14
c0016a91:	f7 da                	neg    edx
c0016a93:	5b                   	pop    ebx
c0016a94:	5e                   	pop    esi
c0016a95:	c3                   	ret    

c0016a96 <sysCallGetArgv(regs*)>:
c0016a96:	83 ec 0c             	sub    esp,0xc
c0016a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a9d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016aa0:	85 c0                	test   eax,eax
c0016aa2:	78 2b                	js     c0016acf <sysCallGetArgv(regs*)+0x39>
c0016aa4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016aaa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016aad:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016ab3:	7d 1a                	jge    c0016acf <sysCallGetArgv(regs*)+0x39>
c0016ab5:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016abc:	85 c0                	test   eax,eax
c0016abe:	74 17                	je     c0016ad7 <sysCallGetArgv(regs*)+0x41>
c0016ac0:	83 ec 08             	sub    esp,0x8
c0016ac3:	50                   	push   eax
c0016ac4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016ac7:	e8 8d 9c fe ff       	call   c0000759 <strcpy>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	31 c0                	xor    eax,eax
c0016ad1:	31 d2                	xor    edx,edx
c0016ad3:	83 c4 0c             	add    esp,0xc
c0016ad6:	c3                   	ret    
c0016ad7:	b8 01 00 00 00       	mov    eax,0x1
c0016adc:	31 d2                	xor    edx,edx
c0016ade:	83 c4 0c             	add    esp,0xc
c0016ae1:	c3                   	ret    

c0016ae2 <sysCallTTYName(regs*)>:
c0016ae2:	56                   	push   esi
c0016ae3:	53                   	push   ebx
c0016ae4:	53                   	push   ebx
c0016ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ae9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016aec:	85 c0                	test   eax,eax
c0016aee:	74 5f                	je     c0016b4f <sysCallTTYName(regs*)+0x6d>
c0016af0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016af3:	83 f8 02             	cmp    eax,0x2
c0016af6:	77 3e                	ja     c0016b36 <sysCallTTYName(regs*)+0x54>
c0016af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016afd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b00:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016b06:	85 db                	test   ebx,ebx
c0016b08:	74 45                	je     c0016b4f <sysCallTTYName(regs*)+0x6d>
c0016b0a:	83 ec 0c             	sub    esp,0xc
c0016b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b0f:	53                   	push   ebx
c0016b10:	ff 10                	call   DWORD PTR [eax]
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	84 c0                	test   al,al
c0016b17:	74 41                	je     c0016b5a <sysCallTTYName(regs*)+0x78>
c0016b19:	83 ec 08             	sub    esp,0x8
c0016b1c:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016b22:	53                   	push   ebx
c0016b23:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016b26:	e8 2e 9c fe ff       	call   c0000759 <strcpy>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	31 c0                	xor    eax,eax
c0016b30:	59                   	pop    ecx
c0016b31:	31 d2                	xor    edx,edx
c0016b33:	5b                   	pop    ebx
c0016b34:	5e                   	pop    esi
c0016b35:	c3                   	ret    
c0016b36:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016b3b:	74 bb                	je     c0016af8 <sysCallTTYName(regs*)+0x16>
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	50                   	push   eax
c0016b41:	e8 9f 74 ff ff       	call   c000dfe5 <getFromFileDescriptor(int)>
c0016b46:	83 c4 10             	add    esp,0x10
c0016b49:	89 c3                	mov    ebx,eax
c0016b4b:	85 db                	test   ebx,ebx
c0016b4d:	75 bb                	jne    c0016b0a <sysCallTTYName(regs*)+0x28>
c0016b4f:	59                   	pop    ecx
c0016b50:	b8 01 00 00 00       	mov    eax,0x1
c0016b55:	31 d2                	xor    edx,edx
c0016b57:	5b                   	pop    ebx
c0016b58:	5e                   	pop    esi
c0016b59:	c3                   	ret    
c0016b5a:	59                   	pop    ecx
c0016b5b:	b8 02 00 00 00       	mov    eax,0x2
c0016b60:	31 d2                	xor    edx,edx
c0016b62:	5b                   	pop    ebx
c0016b63:	5e                   	pop    esi
c0016b64:	c3                   	ret    

c0016b65 <sysCallGetEnv(regs*)>:
c0016b65:	83 ec 0c             	sub    esp,0xc
c0016b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b6c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0016b6f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b72:	85 c9                	test   ecx,ecx
c0016b74:	75 22                	jne    c0016b98 <sysCallGetEnv(regs*)+0x33>
c0016b76:	85 d2                	test   edx,edx
c0016b78:	74 08                	je     c0016b82 <sysCallGetEnv(regs*)+0x1d>
c0016b7a:	31 c0                	xor    eax,eax
c0016b7c:	31 d2                	xor    edx,edx
c0016b7e:	83 c4 0c             	add    esp,0xc
c0016b81:	c3                   	ret    
c0016b82:	83 ec 0c             	sub    esp,0xc
c0016b85:	68 18 27 02 c0       	push   0xc0022718
c0016b8a:	e8 48 9b fe ff       	call   c00006d7 <strlen>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	31 d2                	xor    edx,edx
c0016b94:	83 c4 0c             	add    esp,0xc
c0016b97:	c3                   	ret    
c0016b98:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016b9b:	85 d2                	test   edx,edx
c0016b9d:	74 05                	je     c0016ba4 <sysCallGetEnv(regs*)+0x3f>
c0016b9f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016ba2:	eb d6                	jmp    c0016b7a <sysCallGetEnv(regs*)+0x15>
c0016ba4:	83 ec 08             	sub    esp,0x8
c0016ba7:	68 18 27 02 c0       	push   0xc0022718
c0016bac:	50                   	push   eax
c0016bad:	e8 a7 9b fe ff       	call   c0000759 <strcpy>
c0016bb2:	83 c4 10             	add    esp,0x10
c0016bb5:	eb c3                	jmp    c0016b7a <sysCallGetEnv(regs*)+0x15>

c0016bb7 <sysCallUSleep(regs*)>:
c0016bb7:	83 ec 14             	sub    esp,0x14
c0016bba:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016bbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016bc3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0016bca:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0016bcd:	01 ca                	add    edx,ecx
c0016bcf:	52                   	push   edx
c0016bd0:	50                   	push   eax
c0016bd1:	e8 9e 21 00 00       	call   c0018d74 <nanoSleep(unsigned long long)>
c0016bd6:	31 c0                	xor    eax,eax
c0016bd8:	31 d2                	xor    edx,edx
c0016bda:	83 c4 1c             	add    esp,0x1c
c0016bdd:	c3                   	ret    

c0016bde <sysCallSpawn(regs*)>:
c0016bde:	56                   	push   esi
c0016bdf:	53                   	push   ebx
c0016be0:	53                   	push   ebx
c0016be1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016be5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016be8:	85 f6                	test   esi,esi
c0016bea:	75 08                	jne    c0016bf4 <sysCallSpawn(regs*)+0x16>
c0016bec:	59                   	pop    ecx
c0016bed:	31 c0                	xor    eax,eax
c0016bef:	31 d2                	xor    edx,edx
c0016bf1:	5b                   	pop    ebx
c0016bf2:	5e                   	pop    esi
c0016bf3:	c3                   	ret    
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	68 3b 07 00 00       	push   0x73b
c0016bfc:	e8 1d 84 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016c01:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c04:	89 c6                	mov    esi,eax
c0016c06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016c0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c11:	56                   	push   esi
c0016c12:	e8 bd 18 00 00       	call   c00184d4 <Process::Process(char const*, Process*, char**)>
c0016c17:	83 c4 20             	add    esp,0x20
c0016c1a:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016c21:	75 c9                	jne    c0016bec <sysCallSpawn(regs*)+0xe>
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	56                   	push   esi
c0016c27:	e8 0e 1e 00 00       	call   c0018a3a <Process::createUserThread()>
c0016c2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	99                   	cdq    
c0016c32:	59                   	pop    ecx
c0016c33:	5b                   	pop    ebx
c0016c34:	5e                   	pop    esi
c0016c35:	c3                   	ret    

c0016c36 <sysAppSettings(regs*)>:
c0016c36:	53                   	push   ebx
c0016c37:	83 ec 08             	sub    esp,0x8
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016c41:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016c47:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c4c:	66 3d c0 09          	cmp    ax,0x9c0
c0016c50:	75 2f                	jne    c0016c81 <sysAppSettings(regs*)+0x4b>
c0016c52:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016c58:	83 e0 1f             	and    eax,0x1f
c0016c5b:	3c 01                	cmp    al,0x1
c0016c5d:	74 2e                	je     c0016c8d <sysAppSettings(regs*)+0x57>
c0016c5f:	3c 07                	cmp    al,0x7
c0016c61:	0f 84 bd 00 00 00    	je     c0016d24 <sysAppSettings(regs*)+0xee>
c0016c67:	84 c0                	test   al,al
c0016c69:	0f 84 dc 00 00 00    	je     c0016d4b <sysAppSettings(regs*)+0x115>
c0016c6f:	3c 08                	cmp    al,0x8
c0016c71:	74 6d                	je     c0016ce0 <sysAppSettings(regs*)+0xaa>
c0016c73:	0f b6 c0             	movzx  eax,al
c0016c76:	83 c4 08             	add    esp,0x8
c0016c79:	05 e8 03 00 00       	add    eax,0x3e8
c0016c7e:	5b                   	pop    ebx
c0016c7f:	99                   	cdq    
c0016c80:	c3                   	ret    
c0016c81:	b8 01 00 00 00       	mov    eax,0x1
c0016c86:	31 d2                	xor    edx,edx
c0016c88:	83 c4 08             	add    esp,0x8
c0016c8b:	5b                   	pop    ebx
c0016c8c:	c3                   	ret    
c0016c8d:	51                   	push   ecx
c0016c8e:	68 00 01 00 00       	push   0x100
c0016c93:	6a 00                	push   0x0
c0016c95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c9d:	83 c0 0c             	add    eax,0xc
c0016ca0:	50                   	push   eax
c0016ca1:	e8 14 9a fe ff       	call   c00006ba <memset>
c0016ca6:	83 c4 0c             	add    esp,0xc
c0016ca9:	68 ff 00 00 00       	push   0xff
c0016cae:	53                   	push   ebx
c0016caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cb7:	83 c0 0c             	add    eax,0xc
c0016cba:	50                   	push   eax
c0016cbb:	e8 c4 99 fe ff       	call   c0000684 <memcpy>
c0016cc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc5:	5b                   	pop    ebx
c0016cc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cc9:	5a                   	pop    edx
c0016cca:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ccd:	52                   	push   edx
c0016cce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016cd4:	e8 eb 64 ff ff       	call   c000d1c4 <VgaText::setTitle(char*)>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	31 c0                	xor    eax,eax
c0016cde:	eb a6                	jmp    c0016c86 <sysAppSettings(regs*)+0x50>
c0016ce0:	83 ec 08             	sub    esp,0x8
c0016ce3:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ce9:	83 e0 0f             	and    eax,0xf
c0016cec:	50                   	push   eax
c0016ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016cfb:	e8 b4 64 ff ff       	call   c000d1b4 <VgaText::setTitleColour(VgaColour)>
c0016d00:	58                   	pop    eax
c0016d01:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d07:	5a                   	pop    edx
c0016d08:	c1 e8 04             	shr    eax,0x4
c0016d0b:	83 e0 0f             	and    eax,0xf
c0016d0e:	50                   	push   eax
c0016d0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d1d:	e8 82 64 ff ff       	call   c000d1a4 <VgaText::setTitleTextColour(VgaColour)>
c0016d22:	eb b5                	jmp    c0016cd9 <sysAppSettings(regs*)+0xa3>
c0016d24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d2c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016d32:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016d38:	c0 e8 06             	shr    al,0x6
c0016d3b:	83 e0 01             	and    eax,0x1
c0016d3e:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016d44:	31 c0                	xor    eax,eax
c0016d46:	e9 3b ff ff ff       	jmp    c0016c86 <sysAppSettings(regs*)+0x50>
c0016d4b:	b8 02 00 00 00       	mov    eax,0x2
c0016d50:	e9 31 ff ff ff       	jmp    c0016c86 <sysAppSettings(regs*)+0x50>

c0016d55 <sysSetFatAttrib(regs*)>:
c0016d55:	57                   	push   edi
c0016d56:	56                   	push   esi
c0016d57:	53                   	push   ebx
c0016d58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d62:	68 14 01 00 00       	push   0x114
c0016d67:	e8 b2 82 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016d6c:	83 c4 0c             	add    esp,0xc
c0016d6f:	89 c3                	mov    ebx,eax
c0016d71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d76:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016d79:	57                   	push   edi
c0016d7a:	53                   	push   ebx
c0016d7b:	e8 bc 88 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0016d80:	83 c4 0c             	add    esp,0xc
c0016d83:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d86:	0f b6 d4             	movzx  edx,ah
c0016d89:	0f b6 c0             	movzx  eax,al
c0016d8c:	52                   	push   edx
c0016d8d:	50                   	push   eax
c0016d8e:	53                   	push   ebx
c0016d8f:	e8 1e 8b ff ff       	call   c000f8b2 <File::chfatattr(unsigned char, unsigned char)>
c0016d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d97:	89 c6                	mov    esi,eax
c0016d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	31 c0                	xor    eax,eax
c0016da3:	5b                   	pop    ebx
c0016da4:	85 f6                	test   esi,esi
c0016da6:	5e                   	pop    esi
c0016da7:	0f 95 c0             	setne  al
c0016daa:	5f                   	pop    edi
c0016dab:	31 d2                	xor    edx,edx
c0016dad:	f7 d8                	neg    eax
c0016daf:	83 d2 00             	adc    edx,0x0
c0016db2:	f7 da                	neg    edx
c0016db4:	c3                   	ret    

c0016db5 <sysPanic(regs*)>:
c0016db5:	83 ec 18             	sub    esp,0x18
c0016db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dbc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016dbf:	e8 14 eb ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0016dc4:	c7 04 24 cf 27 02 c0 	mov    DWORD PTR [esp],0xc00227cf
c0016dcb:	e8 08 eb ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0016dd0:	b8 01 00 00 00       	mov    eax,0x1
c0016dd5:	31 d2                	xor    edx,edx
c0016dd7:	83 c4 1c             	add    esp,0x1c
c0016dda:	c3                   	ret    

c0016ddb <sysPipe(regs*)>:
c0016ddb:	57                   	push   edi
c0016ddc:	56                   	push   esi
c0016ddd:	53                   	push   ebx
c0016dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016de8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016deb:	6a 20                	push   0x20
c0016ded:	e8 2c 82 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016df2:	89 c3                	mov    ebx,eax
c0016df4:	58                   	pop    eax
c0016df5:	5a                   	pop    edx
c0016df6:	68 00 50 00 00       	push   0x5000
c0016dfb:	53                   	push   ebx
c0016dfc:	e8 01 5d ff ff       	call   c000cb02 <Pipe::Pipe(int)>
c0016e01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e04:	e8 27 6f ff ff       	call   c000dd30 <UnixFile::getFileDescriptor()>
c0016e09:	89 07                	mov    DWORD PTR [edi],eax
c0016e0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e0e:	e8 1d 6f ff ff       	call   c000dd30 <UnixFile::getFileDescriptor()>
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	89 06                	mov    DWORD PTR [esi],eax
c0016e18:	31 d2                	xor    edx,edx
c0016e1a:	5b                   	pop    ebx
c0016e1b:	31 c0                	xor    eax,eax
c0016e1d:	5e                   	pop    esi
c0016e1e:	5f                   	pop    edi
c0016e1f:	c3                   	ret    

c0016e20 <sysGetUnixTime(regs*)>:
c0016e20:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c0016e25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e2f:	e9 d0 91 ff ff       	jmp    c0010004 <Clock::timeInSecondsLocal()>

c0016e34 <string_ends_with(char const*, char const*)>:
c0016e34:	57                   	push   edi
c0016e35:	56                   	push   esi
c0016e36:	53                   	push   ebx
c0016e37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e3f:	83 ec 0c             	sub    esp,0xc
c0016e42:	53                   	push   ebx
c0016e43:	e8 8f 98 fe ff       	call   c00006d7 <strlen>
c0016e48:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e4b:	89 c6                	mov    esi,eax
c0016e4d:	e8 85 98 fe ff       	call   c00006d7 <strlen>
c0016e52:	83 c4 10             	add    esp,0x10
c0016e55:	39 c6                	cmp    esi,eax
c0016e57:	7d 06                	jge    c0016e5f <string_ends_with(char const*, char const*)+0x2b>
c0016e59:	5b                   	pop    ebx
c0016e5a:	31 c0                	xor    eax,eax
c0016e5c:	5e                   	pop    esi
c0016e5d:	5f                   	pop    edi
c0016e5e:	c3                   	ret    
c0016e5f:	83 ec 08             	sub    esp,0x8
c0016e62:	29 c6                	sub    esi,eax
c0016e64:	57                   	push   edi
c0016e65:	01 f3                	add    ebx,esi
c0016e67:	53                   	push   ebx
c0016e68:	e8 3d 99 fe ff       	call   c00007aa <strcmp>
c0016e6d:	83 c4 10             	add    esp,0x10
c0016e70:	85 c0                	test   eax,eax
c0016e72:	5b                   	pop    ebx
c0016e73:	0f 94 c0             	sete   al
c0016e76:	5e                   	pop    esi
c0016e77:	0f b6 c0             	movzx  eax,al
c0016e7a:	5f                   	pop    edi
c0016e7b:	c3                   	ret    

c0016e7c <sysCallOpen(regs*)>:
c0016e7c:	56                   	push   esi
c0016e7d:	53                   	push   ebx
c0016e7e:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e84:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016e8b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016e8e:	85 c9                	test   ecx,ecx
c0016e90:	0f 84 b3 00 00 00    	je     c0016f49 <sysCallOpen(regs*)+0xcd>
c0016e96:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e99:	85 c0                	test   eax,eax
c0016e9b:	0f 84 a8 00 00 00    	je     c0016f49 <sysCallOpen(regs*)+0xcd>
c0016ea1:	52                   	push   edx
c0016ea2:	68 de 27 02 c0       	push   0xc00227de
c0016ea7:	50                   	push   eax
c0016ea8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016eac:	56                   	push   esi
c0016ead:	e8 e0 85 ff ff       	call   c000f492 <standardiseFiles(char*, char const*, char const*)>
c0016eb2:	89 34 24             	mov    DWORD PTR [esp],esi
c0016eb5:	e8 1d 98 fe ff       	call   c00006d7 <strlen>
c0016eba:	83 c4 10             	add    esp,0x10
c0016ebd:	48                   	dec    eax
c0016ebe:	74 1d                	je     c0016edd <sysCallOpen(regs*)+0x61>
c0016ec0:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016ec3:	eb 0f                	jmp    c0016ed4 <sysCallOpen(regs*)+0x58>
c0016ec5:	80 fa 3a             	cmp    dl,0x3a
c0016ec8:	74 0f                	je     c0016ed9 <sysCallOpen(regs*)+0x5d>
c0016eca:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016ece:	48                   	dec    eax
c0016ecf:	74 0c                	je     c0016edd <sysCallOpen(regs*)+0x61>
c0016ed1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016ed4:	80 fa 2e             	cmp    dl,0x2e
c0016ed7:	75 ec                	jne    c0016ec5 <sysCallOpen(regs*)+0x49>
c0016ed9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016edd:	83 ec 08             	sub    esp,0x8
c0016ee0:	68 e2 27 02 c0       	push   0xc00227e2
c0016ee5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ee8:	e8 47 ff ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	85 c0                	test   eax,eax
c0016ef2:	75 17                	jne    c0016f0b <sysCallOpen(regs*)+0x8f>
c0016ef4:	83 ec 08             	sub    esp,0x8
c0016ef7:	68 03 28 02 c0       	push   0xc0022803
c0016efc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016eff:	e8 30 ff ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016f04:	83 c4 10             	add    esp,0x10
c0016f07:	85 c0                	test   eax,eax
c0016f09:	74 51                	je     c0016f5c <sysCallOpen(regs*)+0xe0>
c0016f0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f0e:	83 ec 08             	sub    esp,0x8
c0016f11:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016f17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016f1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f21:	ff 30                	push   DWORD PTR [eax]
c0016f23:	68 e7 27 02 c0       	push   0xc00227e7
c0016f28:	e8 e0 81 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0016f2d:	c7 04 24 f6 27 02 c0 	mov    DWORD PTR [esp],0xc00227f6
c0016f34:	e8 d4 81 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	81 c4 04 01 00 00    	add    esp,0x104
c0016f42:	31 c0                	xor    eax,eax
c0016f44:	31 d2                	xor    edx,edx
c0016f46:	5b                   	pop    ebx
c0016f47:	5e                   	pop    esi
c0016f48:	c3                   	ret    
c0016f49:	81 c4 04 01 00 00    	add    esp,0x104
c0016f4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016f59:	5b                   	pop    ebx
c0016f5a:	5e                   	pop    esi
c0016f5b:	c3                   	ret    
c0016f5c:	83 ec 08             	sub    esp,0x8
c0016f5f:	68 e3 27 02 c0       	push   0xc00227e3
c0016f64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f67:	e8 3e 98 fe ff       	call   c00007aa <strcmp>
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	85 c0                	test   eax,eax
c0016f71:	74 98                	je     c0016f0b <sysCallOpen(regs*)+0x8f>
c0016f73:	83 ec 08             	sub    esp,0x8
c0016f76:	68 e2 27 02 c0       	push   0xc00227e2
c0016f7b:	56                   	push   esi
c0016f7c:	e8 b3 fe ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	85 c0                	test   eax,eax
c0016f86:	75 83                	jne    c0016f0b <sysCallOpen(regs*)+0x8f>
c0016f88:	83 ec 08             	sub    esp,0x8
c0016f8b:	68 08 28 02 c0       	push   0xc0022808
c0016f90:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f93:	e8 9c fe ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016f98:	83 c4 10             	add    esp,0x10
c0016f9b:	85 c0                	test   eax,eax
c0016f9d:	0f 85 d1 00 00 00    	jne    c0017074 <sysCallOpen(regs*)+0x1f8>
c0016fa3:	83 ec 08             	sub    esp,0x8
c0016fa6:	68 0d 28 02 c0       	push   0xc002280d
c0016fab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fae:	e8 81 fe ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016fb3:	83 c4 10             	add    esp,0x10
c0016fb6:	85 c0                	test   eax,eax
c0016fb8:	0f 85 b6 00 00 00    	jne    c0017074 <sysCallOpen(regs*)+0x1f8>
c0016fbe:	83 ec 08             	sub    esp,0x8
c0016fc1:	68 09 28 02 c0       	push   0xc0022809
c0016fc6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fc9:	e8 dc 97 fe ff       	call   c00007aa <strcmp>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	85 c0                	test   eax,eax
c0016fd3:	0f 84 9b 00 00 00    	je     c0017074 <sysCallOpen(regs*)+0x1f8>
c0016fd9:	83 ec 08             	sub    esp,0x8
c0016fdc:	68 08 28 02 c0       	push   0xc0022808
c0016fe1:	56                   	push   esi
c0016fe2:	e8 4d fe ff ff       	call   c0016e34 <string_ends_with(char const*, char const*)>
c0016fe7:	83 c4 10             	add    esp,0x10
c0016fea:	85 c0                	test   eax,eax
c0016fec:	0f 85 82 00 00 00    	jne    c0017074 <sysCallOpen(regs*)+0x1f8>
c0016ff2:	83 ec 0c             	sub    esp,0xc
c0016ff5:	68 14 01 00 00       	push   0x114
c0016ffa:	e8 1f 80 ff ff       	call   c000f01e <operator new(unsigned long)>
c0016fff:	83 c4 0c             	add    esp,0xc
c0017002:	89 c6                	mov    esi,eax
c0017004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017009:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001700c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001700f:	56                   	push   esi
c0017010:	e8 27 86 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0017015:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	0f b6 c2             	movzx  eax,dl
c001701e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017021:	89 d0                	mov    eax,edx
c0017023:	83 e0 01             	and    eax,0x1
c0017026:	f6 c2 02             	test   dl,0x2
c0017029:	74 03                	je     c001702e <sysCallOpen(regs*)+0x1b2>
c001702b:	83 c8 02             	or     eax,0x2
c001702e:	f6 c2 04             	test   dl,0x4
c0017031:	74 03                	je     c0017036 <sysCallOpen(regs*)+0x1ba>
c0017033:	83 c8 04             	or     eax,0x4
c0017036:	f6 c2 08             	test   dl,0x8
c0017039:	74 03                	je     c001703e <sysCallOpen(regs*)+0x1c2>
c001703b:	83 c8 0a             	or     eax,0xa
c001703e:	83 e2 10             	and    edx,0x10
c0017041:	74 03                	je     c0017046 <sysCallOpen(regs*)+0x1ca>
c0017043:	83 c8 12             	or     eax,0x12
c0017046:	83 ec 08             	sub    esp,0x8
c0017049:	50                   	push   eax
c001704a:	56                   	push   esi
c001704b:	e8 50 86 ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	85 c0                	test   eax,eax
c0017055:	0f 85 ee fe ff ff    	jne    c0016f49 <sysCallOpen(regs*)+0xcd>
c001705b:	83 ec 0c             	sub    esp,0xc
c001705e:	56                   	push   esi
c001705f:	e8 cc 6c ff ff       	call   c000dd30 <UnixFile::getFileDescriptor()>
c0017064:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017067:	89 02                	mov    DWORD PTR [edx],eax
c0017069:	c1 f8 1f             	sar    eax,0x1f
c001706c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001706f:	e9 c5 fe ff ff       	jmp    c0016f39 <sysCallOpen(regs*)+0xbd>
c0017074:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017077:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001707d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017084:	e9 b3 fe ff ff       	jmp    c0016f3c <sysCallOpen(regs*)+0xc0>

c0017089 <setupSystemCalls()>:
c0017089:	c7 05 c0 4d 02 c0 e5 62 01 c0 	mov    DWORD PTR ds:0xc0024dc0,0xc00162e5
c0017093:	c7 05 c4 4d 02 c0 13 61 01 c0 	mov    DWORD PTR ds:0xc0024dc4,0xc0016113
c001709d:	c7 05 c8 4d 02 c0 28 62 01 c0 	mov    DWORD PTR ds:0xc0024dc8,0xc0016228
c00170a7:	c7 05 cc 4d 02 c0 7d 62 01 c0 	mov    DWORD PTR ds:0xc0024dcc,0xc001627d
c00170b1:	c7 05 d0 4d 02 c0 c0 61 01 c0 	mov    DWORD PTR ds:0xc0024dd0,0xc00161c0
c00170bb:	c7 05 d4 4d 02 c0 ff 62 01 c0 	mov    DWORD PTR ds:0xc0024dd4,0xc00162ff
c00170c5:	c7 05 d8 4d 02 c0 a4 64 01 c0 	mov    DWORD PTR ds:0xc0024dd8,0xc00164a4
c00170cf:	c7 05 dc 4d 02 c0 c3 64 01 c0 	mov    DWORD PTR ds:0xc0024ddc,0xc00164c3
c00170d9:	c7 05 e4 4d 02 c0 24 68 01 c0 	mov    DWORD PTR ds:0xc0024de4,0xc0016824
c00170e3:	c7 05 e0 4d 02 c0 7c 6e 01 c0 	mov    DWORD PTR ds:0xc0024de0,0xc0016e7c
c00170ed:	c7 05 e8 4d 02 c0 ac 68 01 c0 	mov    DWORD PTR ds:0xc0024de8,0xc00168ac
c00170f7:	c7 05 ec 4d 02 c0 22 65 01 c0 	mov    DWORD PTR ds:0xc0024dec,0xc0016522
c0017101:	c7 05 f0 4d 02 c0 0b 63 01 c0 	mov    DWORD PTR ds:0xc0024df0,0xc001630b
c001710b:	c7 05 f4 4d 02 c0 10 63 01 c0 	mov    DWORD PTR ds:0xc0024df4,0xc0016310
c0017115:	c7 05 f8 4d 02 c0 19 69 01 c0 	mov    DWORD PTR ds:0xc0024df8,0xc0016919
c001711f:	c7 05 fc 4d 02 c0 72 69 01 c0 	mov    DWORD PTR ds:0xc0024dfc,0xc0016972
c0017129:	c7 05 00 4e 02 c0 0a 66 01 c0 	mov    DWORD PTR ds:0xc0024e00,0xc001660a
c0017133:	c7 05 04 4e 02 c0 73 66 01 c0 	mov    DWORD PTR ds:0xc0024e04,0xc0016673
c001713d:	c7 05 08 4e 02 c0 a1 67 01 c0 	mov    DWORD PTR ds:0xc0024e08,0xc00167a1
c0017147:	c7 05 0c 4e 02 c0 15 63 01 c0 	mov    DWORD PTR ds:0xc0024e0c,0xc0016315
c0017151:	c7 05 10 4e 02 c0 d8 69 01 c0 	mov    DWORD PTR ds:0xc0024e10,0xc00169d8
c001715b:	c7 05 14 4e 02 c0 1f 63 01 c0 	mov    DWORD PTR ds:0xc0024e14,0xc001631f
c0017165:	c7 05 18 4e 02 c0 2a 63 01 c0 	mov    DWORD PTR ds:0xc0024e18,0xc001632a
c001716f:	c7 05 1c 4e 02 c0 f2 69 01 c0 	mov    DWORD PTR ds:0xc0024e1c,0xc00169f2
c0017179:	c7 05 20 4e 02 c0 44 6a 01 c0 	mov    DWORD PTR ds:0xc0024e20,0xc0016a44
c0017183:	c7 05 24 4e 02 c0 35 63 01 c0 	mov    DWORD PTR ds:0xc0024e24,0xc0016335
c001718d:	c7 05 28 4e 02 c0 96 6a 01 c0 	mov    DWORD PTR ds:0xc0024e28,0xc0016a96
c0017197:	c7 05 2c 4e 02 c0 df 64 01 c0 	mov    DWORD PTR ds:0xc0024e2c,0xc00164df
c00171a1:	c7 05 30 4e 02 c0 e2 6a 01 c0 	mov    DWORD PTR ds:0xc0024e30,0xc0016ae2
c00171ab:	c7 05 34 4e 02 c0 b0 65 01 c0 	mov    DWORD PTR ds:0xc0024e34,0xc00165b0
c00171b5:	c7 05 38 4e 02 c0 b7 6b 01 c0 	mov    DWORD PTR ds:0xc0024e38,0xc0016bb7
c00171bf:	c7 05 3c 4e 02 c0 f0 66 01 c0 	mov    DWORD PTR ds:0xc0024e3c,0xc00166f0
c00171c9:	c7 05 40 4e 02 c0 de 6b 01 c0 	mov    DWORD PTR ds:0xc0024e40,0xc0016bde
c00171d3:	c7 05 44 4e 02 c0 65 6b 01 c0 	mov    DWORD PTR ds:0xc0024e44,0xc0016b65
c00171dd:	c7 05 48 4e 02 c0 36 6c 01 c0 	mov    DWORD PTR ds:0xc0024e48,0xc0016c36
c00171e7:	c7 05 4c 4e 02 c0 45 63 01 c0 	mov    DWORD PTR ds:0xc0024e4c,0xc0016345
c00171f1:	c7 05 50 4e 02 c0 af 63 01 c0 	mov    DWORD PTR ds:0xc0024e50,0xc00163af
c00171fb:	c7 05 54 4e 02 c0 f5 63 01 c0 	mov    DWORD PTR ds:0xc0024e54,0xc00163f5
c0017205:	c7 05 58 4e 02 c0 55 6d 01 c0 	mov    DWORD PTR ds:0xc0024e58,0xc0016d55
c001720f:	c7 05 5c 4e 02 c0 b5 6d 01 c0 	mov    DWORD PTR ds:0xc0024e5c,0xc0016db5
c0017219:	c7 05 60 4e 02 c0 46 64 01 c0 	mov    DWORD PTR ds:0xc0024e60,0xc0016446
c0017223:	c7 05 64 4e 02 c0 db 6d 01 c0 	mov    DWORD PTR ds:0xc0024e64,0xc0016ddb
c001722d:	c7 05 68 4e 02 c0 20 6e 01 c0 	mov    DWORD PTR ds:0xc0024e68,0xc0016e20
c0017237:	c7 05 6c 4e 02 c0 2b 61 01 c0 	mov    DWORD PTR ds:0xc0024e6c,0xc001612b
c0017241:	c3                   	ret    

c0017242 <systemCall(regs*, void*)>:
c0017242:	53                   	push   ebx
c0017243:	83 ec 08             	sub    esp,0x8
c0017246:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001724a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001724d:	83 f8 7f             	cmp    eax,0x7f
c0017250:	77 16                	ja     c0017268 <systemCall(regs*, void*)+0x26>
c0017252:	8b 14 85 c0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb240]
c0017259:	85 d2                	test   edx,edx
c001725b:	74 0b                	je     c0017268 <systemCall(regs*, void*)+0x26>
c001725d:	83 ec 0c             	sub    esp,0xc
c0017260:	53                   	push   ebx
c0017261:	ff d2                	call   edx
c0017263:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017266:	eb 0d                	jmp    c0017275 <systemCall(regs*, void*)+0x33>
c0017268:	52                   	push   edx
c0017269:	52                   	push   edx
c001726a:	50                   	push   eax
c001726b:	68 12 28 02 c0       	push   0xc0022812
c0017270:	e8 98 7e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001727d:	31 d2                	xor    edx,edx
c001727f:	83 c4 08             	add    esp,0x8
c0017282:	5b                   	pop    ebx
c0017283:	c3                   	ret    

c0017284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017284:	55                   	push   ebp
c0017285:	89 e5                	mov    ebp,esp
c0017287:	57                   	push   edi
c0017288:	56                   	push   esi
c0017289:	53                   	push   ebx
c001728a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017290:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017293:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017296:	85 c0                	test   eax,eax
c0017298:	0f 95 c1             	setne  cl
c001729b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001729f:	0f 94 c2             	sete   dl
c00172a2:	84 d1                	test   cl,dl
c00172a4:	74 26                	je     c00172cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172a6:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00172ad:	74 1d                	je     c00172cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172af:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00172b2:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c00172b8:	89 d6                	mov    esi,edx
c00172ba:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172c0:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c00172c6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00172c9:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c00172cc:	83 ec 0c             	sub    esp,0xc
c00172cf:	05 ff 0f 00 00       	add    eax,0xfff
c00172d4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00172d7:	6a 01                	push   0x1
c00172d9:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00172df:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00172e5:	e8 51 6e ff ff       	call   c000e13b <Virt::allocateKernelVirtualPages(int)>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	89 c6                	mov    esi,eax
c00172ef:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00172f5:	0f 86 21 01 00 00    	jbe    c001741c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00172fb:	c1 eb 0c             	shr    ebx,0xc
c00172fe:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017308:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001730e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017311:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017314:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001731a:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001731d:	29 d8                	sub    eax,ebx
c001731f:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017325:	0f 83 f4 00 00 00    	jae    c001741f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001732b:	83 ec 0c             	sub    esp,0xc
c001732e:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017334:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017337:	3d 00 10 00 00       	cmp    eax,0x1000
c001733c:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001733e:	52                   	push   edx
c001733f:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017345:	52                   	push   edx
c0017346:	76 05                	jbe    c001734d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0017348:	b8 00 10 00 00       	mov    eax,0x1000
c001734d:	31 d2                	xor    edx,edx
c001734f:	52                   	push   edx
c0017350:	50                   	push   eax
c0017351:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017354:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017357:	83 c4 20             	add    esp,0x20
c001735a:	85 c0                	test   eax,eax
c001735c:	74 1f                	je     c001737d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001735e:	51                   	push   ecx
c001735f:	51                   	push   ecx
c0017360:	50                   	push   eax
c0017361:	68 26 28 02 c0       	push   0xc0022826
c0017366:	e8 a2 7d ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001736b:	89 34 24             	mov    DWORD PTR [esp],esi
c001736e:	e8 22 71 ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	31 c0                	xor    eax,eax
c0017378:	e9 7c 01 00 00       	jmp    c00174f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001737d:	e8 aa 14 00 00       	call   c001882c <lockScheduler()>
c0017382:	e8 3f 52 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c0017387:	6a 07                	push   0x7
c0017389:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001738f:	56                   	push   esi
c0017390:	50                   	push   eax
c0017391:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017397:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001739a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00173a0:	e8 69 74 ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c00173a5:	83 c4 0c             	add    esp,0xc
c00173a8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173ae:	6a 00                	push   0x0
c00173b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173b6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00173b9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00173bf:	e8 a8 72 ff ff       	call   c000e66c <VAS::mapOtherVASIn(bool, VAS*)>
c00173c4:	58                   	pop    eax
c00173c5:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00173cb:	5a                   	pop    edx
c00173cc:	68 07 04 00 00       	push   0x407
c00173d1:	53                   	push   ebx
c00173d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00173d8:	50                   	push   eax
c00173d9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173df:	6a 00                	push   0x0
c00173e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00173e9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00173ef:	e8 d0 77 ff ff       	call   c000ebc4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00173f4:	83 c4 1c             	add    esp,0x1c
c00173f7:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00173fd:	68 00 10 00 00       	push   0x1000
c0017402:	50                   	push   eax
c0017403:	56                   	push   esi
c0017404:	e8 7b 92 fe ff       	call   c0000684 <memcpy>
c0017409:	e8 20 14 00 00       	call   c001882e <unlockScheduler()>
c001740e:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	e9 f5 fe ff ff       	jmp    c0017311 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001741c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001741f:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017429:	0f 86 bc 00 00 00    	jbe    c00174eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001742f:	e8 f8 13 00 00       	call   c001882c <lockScheduler()>
c0017434:	51                   	push   ecx
c0017435:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001743b:	6a 00                	push   0x0
c001743d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017442:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017445:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001744b:	e8 1c 72 ff ff       	call   c000e66c <VAS::mapOtherVASIn(bool, VAS*)>
c0017450:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	c1 e8 0c             	shr    eax,0xc
c001745c:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017466:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001746c:	e8 55 51 ff ff       	call   c000c5c6 <Phys::allocatePage()>
c0017471:	6a 07                	push   0x7
c0017473:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017479:	56                   	push   esi
c001747a:	50                   	push   eax
c001747b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017481:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017484:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001748a:	e8 7f 73 ff ff       	call   c000e80e <VAS::mapPage(unsigned long, unsigned long, int)>
c001748f:	58                   	pop    eax
c0017490:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017496:	5a                   	pop    edx
c0017497:	68 07 04 00 00       	push   0x407
c001749c:	53                   	push   ebx
c001749d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174a3:	50                   	push   eax
c00174a4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174aa:	6a 00                	push   0x0
c00174ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00174ba:	e8 05 77 ff ff       	call   c000ebc4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174bf:	83 c4 1c             	add    esp,0x1c
c00174c2:	68 00 10 00 00       	push   0x1000
c00174c7:	6a 00                	push   0x0
c00174c9:	56                   	push   esi
c00174ca:	e8 eb 91 fe ff       	call   c00006ba <memset>
c00174cf:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00174d5:	83 c4 10             	add    esp,0x10
c00174d8:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00174de:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00174e4:	77 86                	ja     c001746c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00174e6:	e8 43 13 00 00       	call   c001882e <unlockScheduler()>
c00174eb:	83 ec 0c             	sub    esp,0xc
c00174ee:	56                   	push   esi
c00174ef:	e8 a1 6f ff ff       	call   c000e495 <Virt::freeKernelVirtualPages(unsigned long)>
c00174f4:	83 c4 10             	add    esp,0x10
c00174f7:	b0 01                	mov    al,0x1
c00174f9:	8d 65 f4             	lea    esp,[ebp-0xc]
c00174fc:	5b                   	pop    ebx
c00174fd:	5e                   	pop    esi
c00174fe:	5f                   	pop    edi
c00174ff:	5d                   	pop    ebp
c0017500:	c3                   	ret    

c0017501 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017501:	55                   	push   ebp
c0017502:	57                   	push   edi
c0017503:	56                   	push   esi
c0017504:	53                   	push   ebx
c0017505:	83 ec 48             	sub    esp,0x48
c0017508:	68 14 01 00 00       	push   0x114
c001750d:	e8 0c 7b ff ff       	call   c000f01e <operator new(unsigned long)>
c0017512:	83 c4 0c             	add    esp,0xc
c0017515:	89 c6                	mov    esi,eax
c0017517:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001751b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001751f:	50                   	push   eax
c0017520:	e8 17 81 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0017525:	58                   	pop    eax
c0017526:	5a                   	pop    edx
c0017527:	6a 01                	push   0x1
c0017529:	56                   	push   esi
c001752a:	e8 71 81 ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	85 c0                	test   eax,eax
c0017534:	0f 85 47 01 00 00    	jne    c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001753a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017542:	83 ec 0c             	sub    esp,0xc
c0017545:	6a 34                	push   0x34
c0017547:	e8 d0 4a ff ff       	call   c000c01c <malloc>
c001754c:	89 c3                	mov    ebx,eax
c001754e:	58                   	pop    eax
c001754f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017551:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017555:	57                   	push   edi
c0017556:	53                   	push   ebx
c0017557:	6a 00                	push   0x0
c0017559:	6a 34                	push   0x34
c001755b:	56                   	push   esi
c001755c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001755f:	83 c4 20             	add    esp,0x20
c0017562:	85 c0                	test   eax,eax
c0017564:	0f 85 17 01 00 00    	jne    c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001756a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017570:	0f 85 0b 01 00 00    	jne    c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017576:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017579:	85 c0                	test   eax,eax
c001757b:	0f 84 00 01 00 00    	je     c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017581:	31 d2                	xor    edx,edx
c0017583:	55                   	push   ebp
c0017584:	52                   	push   edx
c0017585:	50                   	push   eax
c0017586:	56                   	push   esi
c0017587:	e8 d2 81 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	85 c0                	test   eax,eax
c0017591:	0f 85 ea 00 00 00    	jne    c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017597:	83 ec 0c             	sub    esp,0xc
c001759a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001759d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175a5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175a9:	0f af c2             	imul   eax,edx
c00175ac:	50                   	push   eax
c00175ad:	e8 6a 4a ff ff       	call   c000c01c <malloc>
c00175b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175bf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175c3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175c7:	0f af c2             	imul   eax,edx
c00175ca:	99                   	cdq    
c00175cb:	52                   	push   edx
c00175cc:	50                   	push   eax
c00175cd:	56                   	push   esi
c00175ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175d1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00175d4:	83 c4 20             	add    esp,0x20
c00175d7:	85 c0                	test   eax,eax
c00175d9:	0f 84 a2 00 00 00    	je     c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175df:	31 d2                	xor    edx,edx
c00175e1:	51                   	push   ecx
c00175e2:	52                   	push   edx
c00175e3:	50                   	push   eax
c00175e4:	56                   	push   esi
c00175e5:	e8 74 81 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	85 c0                	test   eax,eax
c00175ef:	0f 85 8c 00 00 00    	jne    c0017681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175f5:	83 ec 0c             	sub    esp,0xc
c00175f8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00175fc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017600:	31 ed                	xor    ebp,ebp
c0017602:	0f af c2             	imul   eax,edx
c0017605:	50                   	push   eax
c0017606:	e8 11 4a ff ff       	call   c000c01c <malloc>
c001760b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001760e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017612:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017618:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001761c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017620:	0f af c2             	imul   eax,edx
c0017623:	99                   	cdq    
c0017624:	52                   	push   edx
c0017625:	50                   	push   eax
c0017626:	56                   	push   esi
c0017627:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001762a:	83 c4 20             	add    esp,0x20
c001762d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017635:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017639:	0f 86 80 00 00 00    	jbe    c00176bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001763f:	0f b7 fd             	movzx  edi,bp
c0017642:	c1 e7 05             	shl    edi,0x5
c0017645:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017649:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001764c:	75 6b                	jne    c00176b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001764e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017655:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001765c:	52                   	push   edx
c001765d:	31 d2                	xor    edx,edx
c001765f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017662:	52                   	push   edx
c0017663:	50                   	push   eax
c0017664:	56                   	push   esi
c0017665:	e8 f4 80 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	85 c0                	test   eax,eax
c001766f:	74 17                	je     c0017688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017671:	83 ec 0c             	sub    esp,0xc
c0017674:	68 51 28 02 c0       	push   0xc0022851
c0017679:	e8 8f 7a ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001767e:	83 c4 10             	add    esp,0x10
c0017681:	31 c0                	xor    eax,eax
c0017683:	e9 87 00 00 00       	jmp    c001770f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017688:	83 ec 0c             	sub    esp,0xc
c001768b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001768e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017691:	50                   	push   eax
c0017692:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001769a:	56                   	push   esi
c001769b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001769f:	e8 e0 fb ff ff       	call   c0017284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176a8:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176ac:	83 c4 20             	add    esp,0x20
c00176af:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176b3:	73 04                	jae    c00176b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176b9:	45                   	inc    ebp
c00176ba:	e9 76 ff ff ff       	jmp    c0017635 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00176bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00176c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176cb:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00176da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176df:	05 00 10 00 00       	add    eax,0x1000
c00176e4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00176e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176eb:	e8 3c 49 ff ff       	call   c000c02c <free>
c00176f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176f3:	e8 34 49 ff ff       	call   c000c02c <free>
c00176f8:	58                   	pop    eax
c00176f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176fd:	e8 2a 49 ff ff       	call   c000c02c <free>
c0017702:	89 34 24             	mov    DWORD PTR [esp],esi
c0017705:	e8 f4 7f ff ff       	call   c000f6fe <File::close()>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	b0 01                	mov    al,0x1
c001770f:	83 c4 3c             	add    esp,0x3c
c0017712:	5b                   	pop    ebx
c0017713:	5e                   	pop    esi
c0017714:	5f                   	pop    edi
c0017715:	5d                   	pop    ebp
c0017716:	c3                   	ret    

c0017717 <Thr::runtimeReferenceHelper()>:
c0017717:	83 ec 18             	sub    esp,0x18
c001771a:	68 59 28 02 c0       	push   0xc0022859
c001771f:	e8 e9 79 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0017724:	fa                   	cli    
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	eb fe                	jmp    c0017728 <Thr::runtimeReferenceHelper()+0x11>

c001772a <Thr::getAddressOfKernelSymbol(char const*)>:
c001772a:	57                   	push   edi
c001772b:	56                   	push   esi
c001772c:	53                   	push   ebx
c001772d:	31 db                	xor    ebx,ebx
c001772f:	39 1d 60 57 02 c0    	cmp    DWORD PTR ds:0xc0025760,ebx
c0017735:	7e 3c                	jle    c0017773 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017737:	8b 34 9d e0 56 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda920]
c001773e:	31 ff                	xor    edi,edi
c0017740:	39 3c 9d e0 55 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdaa20],edi
c0017747:	7e 27                	jle    c0017770 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017749:	50                   	push   eax
c001774a:	50                   	push   eax
c001774b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001774f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017751:	03 04 9d 60 56 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda9a0]
c0017758:	50                   	push   eax
c0017759:	e8 4c 90 fe ff       	call   c00007aa <strcmp>
c001775e:	83 c4 10             	add    esp,0x10
c0017761:	85 c0                	test   eax,eax
c0017763:	75 05                	jne    c001776a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017765:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017768:	eb 0b                	jmp    c0017775 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001776a:	83 c6 10             	add    esi,0x10
c001776d:	47                   	inc    edi
c001776e:	eb d0                	jmp    c0017740 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017770:	43                   	inc    ebx
c0017771:	eb bc                	jmp    c001772f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017773:	31 c0                	xor    eax,eax
c0017775:	5b                   	pop    ebx
c0017776:	5e                   	pop    esi
c0017777:	5f                   	pop    edi
c0017778:	c3                   	ret    

c0017779 <Thr::loadKernelSymbolTable(char const*)>:
c0017779:	55                   	push   ebp
c001777a:	57                   	push   edi
c001777b:	56                   	push   esi
c001777c:	53                   	push   ebx
c001777d:	83 ec 68             	sub    esp,0x68
c0017780:	8b 35 b4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257b4
c0017786:	68 14 01 00 00       	push   0x114
c001778b:	e8 8e 78 ff ff       	call   c000f01e <operator new(unsigned long)>
c0017790:	83 c4 0c             	add    esp,0xc
c0017793:	89 c3                	mov    ebx,eax
c0017795:	56                   	push   esi
c0017796:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001779a:	50                   	push   eax
c001779b:	e8 9c 7e ff ff       	call   c000f63c <File::File(char const*, Process*)>
c00177a0:	5e                   	pop    esi
c00177a1:	5f                   	pop    edi
c00177a2:	6a 01                	push   0x1
c00177a4:	53                   	push   ebx
c00177a5:	e8 f6 7e ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c00177aa:	83 c4 10             	add    esp,0x10
c00177ad:	31 d2                	xor    edx,edx
c00177af:	85 c0                	test   eax,eax
c00177b1:	0f 85 79 02 00 00    	jne    c0017a30 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00177b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00177bf:	83 ec 0c             	sub    esp,0xc
c00177c2:	6a 34                	push   0x34
c00177c4:	e8 53 48 ff ff       	call   c000c01c <malloc>
c00177c9:	59                   	pop    ecx
c00177ca:	89 c7                	mov    edi,eax
c00177cc:	8d 74 24 34          	lea    esi,[esp+0x34]
c00177d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00177d2:	56                   	push   esi
c00177d3:	57                   	push   edi
c00177d4:	6a 00                	push   0x0
c00177d6:	6a 34                	push   0x34
c00177d8:	53                   	push   ebx
c00177d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177dc:	83 c4 20             	add    esp,0x20
c00177df:	85 c0                	test   eax,eax
c00177e1:	74 17                	je     c00177fa <Thr::loadKernelSymbolTable(char const*)+0x81>
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	68 7b 28 02 c0       	push   0xc002287b
c00177eb:	e8 e8 e0 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	31 d2                	xor    edx,edx
c00177f5:	e9 36 02 00 00       	jmp    c0017a30 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00177fa:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017800:	75 e1                	jne    c00177e3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017802:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017805:	85 c0                	test   eax,eax
c0017807:	74 da                	je     c00177e3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017809:	52                   	push   edx
c001780a:	31 d2                	xor    edx,edx
c001780c:	52                   	push   edx
c001780d:	50                   	push   eax
c001780e:	53                   	push   ebx
c001780f:	e8 4a 7f ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	85 c0                	test   eax,eax
c0017819:	75 c8                	jne    c00177e3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001781b:	83 ec 0c             	sub    esp,0xc
c001781e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017822:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017826:	31 ed                	xor    ebp,ebp
c0017828:	0f af c2             	imul   eax,edx
c001782b:	50                   	push   eax
c001782c:	e8 eb 47 ff ff       	call   c000c01c <malloc>
c0017831:	89 34 24             	mov    DWORD PTR [esp],esi
c0017834:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017838:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001783a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001783e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017842:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017846:	0f af c2             	imul   eax,edx
c0017849:	99                   	cdq    
c001784a:	52                   	push   edx
c001784b:	50                   	push   eax
c001784c:	53                   	push   ebx
c001784d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017850:	83 c4 20             	add    esp,0x20
c0017853:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001785b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017863:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001786b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017873:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017877:	0f 86 aa 00 00 00    	jbe    c0017927 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001787d:	0f b7 f5             	movzx  esi,bp
c0017880:	6b f6 28             	imul   esi,esi,0x28
c0017883:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017887:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001788a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001788e:	50                   	push   eax
c001788f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017893:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017897:	8b 16                	mov    edx,DWORD PTR [esi]
c0017899:	6b c0 28             	imul   eax,eax,0x28
c001789c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178a0:	89 d0                	mov    eax,edx
c00178a2:	31 d2                	xor    edx,edx
c00178a4:	52                   	push   edx
c00178a5:	50                   	push   eax
c00178a6:	53                   	push   ebx
c00178a7:	e8 b2 7e ff ff       	call   c000f75e <File::seek(unsigned long long)>
c00178ac:	83 c4 0c             	add    esp,0xc
c00178af:	6a 20                	push   0x20
c00178b1:	6a 00                	push   0x0
c00178b3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178b7:	52                   	push   edx
c00178b8:	e8 fd 8d fe ff       	call   c00006ba <memset>
c00178bd:	58                   	pop    eax
c00178be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178c0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00178c4:	51                   	push   ecx
c00178c5:	8d 54 24 40          	lea    edx,[esp+0x40]
c00178c9:	52                   	push   edx
c00178ca:	6a 00                	push   0x0
c00178cc:	6a 1f                	push   0x1f
c00178ce:	53                   	push   ebx
c00178cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178d2:	83 c4 18             	add    esp,0x18
c00178d5:	68 92 28 02 c0       	push   0xc0022892
c00178da:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178de:	52                   	push   edx
c00178df:	e8 c6 8e fe ff       	call   c00007aa <strcmp>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	85 c0                	test   eax,eax
c00178e9:	75 0f                	jne    c00178fa <Thr::loadKernelSymbolTable(char const*)+0x181>
c00178eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178fa:	50                   	push   eax
c00178fb:	50                   	push   eax
c00178fc:	68 9a 28 02 c0       	push   0xc002289a
c0017901:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017905:	50                   	push   eax
c0017906:	e8 9f 8e fe ff       	call   c00007aa <strcmp>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	85 c0                	test   eax,eax
c0017910:	75 0f                	jne    c0017921 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017912:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017915:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001791d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017921:	45                   	inc    ebp
c0017922:	e9 4c ff ff ff       	jmp    c0017873 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017927:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001792c:	75 10                	jne    c001793e <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	68 a2 28 02 c0       	push   0xc00228a2
c0017936:	e8 9d df ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001793b:	83 c4 10             	add    esp,0x10
c001793e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017943:	75 10                	jne    c0017955 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017945:	83 ec 0c             	sub    esp,0xc
c0017948:	68 a2 28 02 c0       	push   0xc00228a2
c001794d:	e8 86 df ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	31 d2                	xor    edx,edx
c0017957:	50                   	push   eax
c0017958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001795c:	52                   	push   edx
c001795d:	50                   	push   eax
c001795e:	53                   	push   ebx
c001795f:	e8 fa 7d ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017964:	5a                   	pop    edx
c0017965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017969:	e8 ae 46 ff ff       	call   c000c01c <malloc>
c001796e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017976:	89 c1                	mov    ecx,eax
c0017978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001797c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017980:	5e                   	pop    esi
c0017981:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017983:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017987:	55                   	push   ebp
c0017988:	51                   	push   ecx
c0017989:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001798d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017991:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017995:	53                   	push   ebx
c0017996:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017999:	83 c4 14             	add    esp,0x14
c001799c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179a0:	e8 77 46 ff ff       	call   c000c01c <malloc>
c00179a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179a8:	89 c6                	mov    esi,eax
c00179aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179ac:	56                   	push   esi
c00179ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179b5:	53                   	push   ebx
c00179b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179bd:	8b 15 60 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025760
c00179c3:	83 c4 1c             	add    esp,0x1c
c00179c6:	c1 e8 04             	shr    eax,0x4
c00179c9:	89 04 95 e0 55 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaa20],eax
c00179d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179d4:	31 d2                	xor    edx,edx
c00179d6:	52                   	push   edx
c00179d7:	50                   	push   eax
c00179d8:	53                   	push   ebx
c00179d9:	e8 80 7d ff ff       	call   c000f75e <File::seek(unsigned long long)>
c00179de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179e1:	31 d2                	xor    edx,edx
c00179e3:	56                   	push   esi
c00179e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e8:	52                   	push   edx
c00179e9:	50                   	push   eax
c00179ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179ec:	53                   	push   ebx
c00179ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179f0:	83 c4 14             	add    esp,0x14
c00179f3:	53                   	push   ebx
c00179f4:	e8 05 7d ff ff       	call   c000f6fe <File::close()>
c00179f9:	5d                   	pop    ebp
c00179fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179fe:	e8 29 46 ff ff       	call   c000c02c <free>
c0017a03:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a06:	e8 21 46 ff ff       	call   c000c02c <free>
c0017a0b:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0017a10:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a14:	8d 50 01             	lea    edx,[eax+0x1]
c0017a17:	89 0c 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],ecx
c0017a1e:	89 15 60 57 02 c0    	mov    DWORD PTR ds:0xc0025760,edx
c0017a24:	89 34 85 60 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9a0],esi
c0017a2b:	83 c4 10             	add    esp,0x10
c0017a2e:	b2 01                	mov    dl,0x1
c0017a30:	83 c4 5c             	add    esp,0x5c
c0017a33:	88 d0                	mov    al,dl
c0017a35:	5b                   	pop    ebx
c0017a36:	5e                   	pop    esi
c0017a37:	5f                   	pop    edi
c0017a38:	5d                   	pop    ebp
c0017a39:	c3                   	ret    

c0017a3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a3a:	55                   	push   ebp
c0017a3b:	57                   	push   edi
c0017a3c:	56                   	push   esi
c0017a3d:	53                   	push   ebx
c0017a3e:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a44:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a4b:	8b 1d b4 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257b4
c0017a51:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017a55:	68 14 01 00 00       	push   0x114
c0017a5a:	e8 bf 75 ff ff       	call   c000f01e <operator new(unsigned long)>
c0017a5f:	83 c4 0c             	add    esp,0xc
c0017a62:	89 c7                	mov    edi,eax
c0017a64:	53                   	push   ebx
c0017a65:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a6c:	50                   	push   eax
c0017a6d:	e8 ca 7b ff ff       	call   c000f63c <File::File(char const*, Process*)>
c0017a72:	5e                   	pop    esi
c0017a73:	5d                   	pop    ebp
c0017a74:	6a 01                	push   0x1
c0017a76:	57                   	push   edi
c0017a77:	e8 24 7c ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	85 c0                	test   eax,eax
c0017a81:	0f 85 10 07 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a87:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017a8f:	83 ec 0c             	sub    esp,0xc
c0017a92:	6a 34                	push   0x34
c0017a94:	e8 83 45 ff ff       	call   c000c01c <malloc>
c0017a99:	5b                   	pop    ebx
c0017a9a:	89 c5                	mov    ebp,eax
c0017a9c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0017aa2:	53                   	push   ebx
c0017aa3:	55                   	push   ebp
c0017aa4:	6a 00                	push   0x0
c0017aa6:	6a 34                	push   0x34
c0017aa8:	57                   	push   edi
c0017aa9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aac:	83 c4 20             	add    esp,0x20
c0017aaf:	85 c0                	test   eax,eax
c0017ab1:	0f 85 e0 06 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ab7:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017abe:	0f 85 d3 06 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ac4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	0f 84 c8 06 00 00    	je     c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017acf:	31 d2                	xor    edx,edx
c0017ad1:	51                   	push   ecx
c0017ad2:	52                   	push   edx
c0017ad3:	50                   	push   eax
c0017ad4:	57                   	push   edi
c0017ad5:	e8 84 7c ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	85 c0                	test   eax,eax
c0017adf:	0f 85 b2 06 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ae5:	83 ec 0c             	sub    esp,0xc
c0017ae8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017aeb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017aef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017af3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017af7:	0f af c2             	imul   eax,edx
c0017afa:	50                   	push   eax
c0017afb:	e8 1c 45 ff ff       	call   c000c01c <malloc>
c0017b00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b07:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b0d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017b11:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b15:	0f af c2             	imul   eax,edx
c0017b18:	99                   	cdq    
c0017b19:	52                   	push   edx
c0017b1a:	50                   	push   eax
c0017b1b:	57                   	push   edi
c0017b1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b1f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017b22:	83 c4 20             	add    esp,0x20
c0017b25:	85 c0                	test   eax,eax
c0017b27:	0f 84 6a 06 00 00    	je     c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b2d:	52                   	push   edx
c0017b2e:	31 d2                	xor    edx,edx
c0017b30:	52                   	push   edx
c0017b31:	50                   	push   eax
c0017b32:	57                   	push   edi
c0017b33:	e8 26 7c ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	85 c0                	test   eax,eax
c0017b3d:	0f 85 54 06 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b43:	83 ec 0c             	sub    esp,0xc
c0017b46:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b4a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b4e:	31 f6                	xor    esi,esi
c0017b50:	0f af c2             	imul   eax,edx
c0017b53:	50                   	push   eax
c0017b54:	e8 c3 44 ff ff       	call   c000c01c <malloc>
c0017b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b60:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b66:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b6a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b6e:	0f af c2             	imul   eax,edx
c0017b71:	99                   	cdq    
c0017b72:	52                   	push   edx
c0017b73:	50                   	push   eax
c0017b74:	57                   	push   edi
c0017b75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b78:	83 c4 20             	add    esp,0x20
c0017b7b:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017b7f:	0f 86 af 00 00 00    	jbe    c0017c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017b85:	0f b7 de             	movzx  ebx,si
c0017b88:	c1 e3 05             	shl    ebx,0x5
c0017b8b:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017b8f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017b92:	0f 85 96 00 00 00    	jne    c0017c2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017b98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017b9b:	31 d2                	xor    edx,edx
c0017b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ba1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ba8:	50                   	push   eax
c0017ba9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bac:	52                   	push   edx
c0017bad:	50                   	push   eax
c0017bae:	57                   	push   edi
c0017baf:	e8 aa 7b ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	85 c0                	test   eax,eax
c0017bb9:	0f 85 d8 05 00 00    	jne    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bbf:	52                   	push   edx
c0017bc0:	52                   	push   edx
c0017bc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bc5:	68 bc 28 02 c0       	push   0xc00228bc
c0017bca:	e8 3e 75 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0017bcf:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017bd6:	31 d2                	xor    edx,edx
c0017bd8:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017bdc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017be0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017be4:	59                   	pop    ecx
c0017be5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017be7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017bee:	50                   	push   eax
c0017bef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bf7:	52                   	push   edx
c0017bf8:	50                   	push   eax
c0017bf9:	57                   	push   edi
c0017bfa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bfd:	83 c4 18             	add    esp,0x18
c0017c00:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c03:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c06:	50                   	push   eax
c0017c07:	68 e0 28 02 c0       	push   0xc00228e0
c0017c0c:	e8 fc 74 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0017c11:	83 c4 0c             	add    esp,0xc
c0017c14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c17:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c1a:	50                   	push   eax
c0017c1b:	6a 00                	push   0x0
c0017c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017c25:	50                   	push   eax
c0017c26:	e8 8f 8a fe ff       	call   c00006ba <memset>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	46                   	inc    esi
c0017c2f:	e9 47 ff ff ff       	jmp    c0017b7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017c34:	31 db                	xor    ebx,ebx
c0017c36:	50                   	push   eax
c0017c37:	68 00 01 00 00       	push   0x100
c0017c3c:	6a 00                	push   0x0
c0017c3e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c42:	50                   	push   eax
c0017c43:	e8 72 8a fe ff       	call   c00006ba <memset>
c0017c48:	83 c4 0c             	add    esp,0xc
c0017c4b:	68 00 01 00 00       	push   0x100
c0017c50:	6a 00                	push   0x0
c0017c52:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c59:	50                   	push   eax
c0017c5a:	e8 5b 8a fe ff       	call   c00006ba <memset>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c7a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017c82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c8a:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017c8e:	0f 86 2f 01 00 00    	jbe    c0017dc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017c94:	0f b7 f3             	movzx  esi,bx
c0017c97:	6b f6 28             	imul   esi,esi,0x28
c0017c9a:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017c9e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ca5:	50                   	push   eax
c0017ca6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017caa:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017cae:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cb0:	6b d2 28             	imul   edx,edx,0x28
c0017cb3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017cb7:	31 d2                	xor    edx,edx
c0017cb9:	52                   	push   edx
c0017cba:	50                   	push   eax
c0017cbb:	57                   	push   edi
c0017cbc:	e8 9d 7a ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017cc1:	83 c4 0c             	add    esp,0xc
c0017cc4:	6a 20                	push   0x20
c0017cc6:	6a 00                	push   0x0
c0017cc8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ccf:	51                   	push   ecx
c0017cd0:	e8 e5 89 fe ff       	call   c00006ba <memset>
c0017cd5:	58                   	pop    eax
c0017cd6:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cd8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017cdc:	52                   	push   edx
c0017cdd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ce4:	51                   	push   ecx
c0017ce5:	6a 00                	push   0x0
c0017ce7:	6a 1f                	push   0x1f
c0017ce9:	57                   	push   edi
c0017cea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ced:	83 c4 1c             	add    esp,0x1c
c0017cf0:	6a 09                	push   0x9
c0017cf2:	68 fd 28 02 c0       	push   0xc00228fd
c0017cf7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cfe:	51                   	push   ecx
c0017cff:	e8 1d 89 fe ff       	call   c0000621 <memcmp>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	85 c0                	test   eax,eax
c0017d09:	75 21                	jne    c0017d2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017d0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d17:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d1e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d25:	89 c8                	mov    eax,ecx
c0017d27:	40                   	inc    eax
c0017d28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d2c:	50                   	push   eax
c0017d2d:	6a 09                	push   0x9
c0017d2f:	68 07 29 02 c0       	push   0xc0022907
c0017d34:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d3b:	50                   	push   eax
c0017d3c:	e8 e0 88 fe ff       	call   c0000621 <memcmp>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	85 c0                	test   eax,eax
c0017d46:	75 21                	jne    c0017d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d54:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d5b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d62:	89 c8                	mov    eax,ecx
c0017d64:	40                   	inc    eax
c0017d65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d69:	50                   	push   eax
c0017d6a:	50                   	push   eax
c0017d6b:	68 92 28 02 c0       	push   0xc0022892
c0017d70:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d77:	50                   	push   eax
c0017d78:	e8 2d 8a fe ff       	call   c00007aa <strcmp>
c0017d7d:	83 c4 10             	add    esp,0x10
c0017d80:	85 c0                	test   eax,eax
c0017d82:	75 0f                	jne    c0017d93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017d84:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d93:	50                   	push   eax
c0017d94:	50                   	push   eax
c0017d95:	68 9a 28 02 c0       	push   0xc002289a
c0017d9a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017da1:	50                   	push   eax
c0017da2:	e8 03 8a fe ff       	call   c00007aa <strcmp>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	85 c0                	test   eax,eax
c0017dac:	75 0f                	jne    c0017dbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017dae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017db1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017dbd:	43                   	inc    ebx
c0017dbe:	e9 c7 fe ff ff       	jmp    c0017c8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017dc3:	31 d2                	xor    edx,edx
c0017dc5:	50                   	push   eax
c0017dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dca:	52                   	push   edx
c0017dcb:	50                   	push   eax
c0017dcc:	57                   	push   edi
c0017dcd:	e8 8c 79 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017dd2:	5a                   	pop    edx
c0017dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dd7:	e8 40 42 ff ff       	call   c000c01c <malloc>
c0017ddc:	31 d2                	xor    edx,edx
c0017dde:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017de2:	59                   	pop    ecx
c0017de3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017de5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017de9:	53                   	push   ebx
c0017dea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017dee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017df2:	52                   	push   edx
c0017df3:	50                   	push   eax
c0017df4:	57                   	push   edi
c0017df5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017df8:	83 c4 14             	add    esp,0x14
c0017dfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017dff:	e8 18 42 ff ff       	call   c000c01c <malloc>
c0017e04:	31 d2                	xor    edx,edx
c0017e06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e0a:	83 c4 0c             	add    esp,0xc
c0017e0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e11:	52                   	push   edx
c0017e12:	50                   	push   eax
c0017e13:	57                   	push   edi
c0017e14:	e8 45 79 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017e19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e1c:	31 d2                	xor    edx,edx
c0017e1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e22:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e28:	52                   	push   edx
c0017e29:	50                   	push   eax
c0017e2a:	57                   	push   edi
c0017e2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e2e:	83 c4 20             	add    esp,0x20
c0017e31:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e3d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017e41:	0f 84 54 03 00 00    	je     c001819b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017e47:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017e4e:	31 d2                	xor    edx,edx
c0017e50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e54:	c1 e8 03             	shr    eax,0x3
c0017e57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e5b:	50                   	push   eax
c0017e5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e60:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e64:	52                   	push   edx
c0017e65:	50                   	push   eax
c0017e66:	57                   	push   edi
c0017e67:	e8 f2 78 ff ff       	call   c000f75e <File::seek(unsigned long long)>
c0017e6c:	58                   	pop    eax
c0017e6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e71:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e78:	e8 9f 41 ff ff       	call   c000c01c <malloc>
c0017e7d:	31 d2                	xor    edx,edx
c0017e7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e83:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e85:	58                   	pop    eax
c0017e86:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017e8a:	50                   	push   eax
c0017e8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e93:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017e9a:	52                   	push   edx
c0017e9b:	50                   	push   eax
c0017e9c:	57                   	push   edi
c0017e9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ea0:	83 c4 20             	add    esp,0x20
c0017ea3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017eab:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017eaf:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017eb3:	0f 8d c6 02 00 00    	jge    c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017eb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ec1:	31 db                	xor    ebx,ebx
c0017ec3:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017ec6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017eca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ece:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017ed2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ed6:	c1 e8 08             	shr    eax,0x8
c0017ed9:	89 c6                	mov    esi,eax
c0017edb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017edf:	c1 e6 04             	shl    esi,0x4
c0017ee2:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017ee6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017ee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eed:	85 c0                	test   eax,eax
c0017eef:	0f 85 17 01 00 00    	jne    c001800c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017ef5:	83 ec 0c             	sub    esp,0xc
c0017ef8:	b3 01                	mov    bl,0x1
c0017efa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017efe:	03 06                	add    eax,DWORD PTR [esi]
c0017f00:	50                   	push   eax
c0017f01:	e8 24 f8 ff ff       	call   c001772a <Thr::getAddressOfKernelSymbol(char const*)>
c0017f06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017f12:	0f 85 f4 00 00 00    	jne    c001800c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017f18:	50                   	push   eax
c0017f19:	50                   	push   eax
c0017f1a:	68 11 29 02 c0       	push   0xc0022911
c0017f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f23:	03 06                	add    eax,DWORD PTR [esi]
c0017f25:	50                   	push   eax
c0017f26:	e8 7f 88 fe ff       	call   c00007aa <strcmp>
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	85 c0                	test   eax,eax
c0017f30:	75 0a                	jne    c0017f3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017f32:	b8 ac f1 01 c0       	mov    eax,0xc001f1ac
c0017f37:	e9 ca 00 00 00       	jmp    c0018006 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f3c:	50                   	push   eax
c0017f3d:	50                   	push   eax
c0017f3e:	68 1b 29 02 c0       	push   0xc002291b
c0017f43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f47:	03 06                	add    eax,DWORD PTR [esi]
c0017f49:	50                   	push   eax
c0017f4a:	e8 5b 88 fe ff       	call   c00007aa <strcmp>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	85 c0                	test   eax,eax
c0017f54:	75 0a                	jne    c0017f60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017f56:	b8 e0 ee 01 c0       	mov    eax,0xc001eee0
c0017f5b:	e9 a6 00 00 00       	jmp    c0018006 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f60:	53                   	push   ebx
c0017f61:	53                   	push   ebx
c0017f62:	68 24 29 02 c0       	push   0xc0022924
c0017f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f6b:	03 06                	add    eax,DWORD PTR [esi]
c0017f6d:	50                   	push   eax
c0017f6e:	e8 37 88 fe ff       	call   c00007aa <strcmp>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	85 c0                	test   eax,eax
c0017f78:	75 0a                	jne    c0017f84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017f7a:	b8 ac f2 01 c0       	mov    eax,0xc001f2ac
c0017f7f:	e9 82 00 00 00       	jmp    c0018006 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f84:	51                   	push   ecx
c0017f85:	51                   	push   ecx
c0017f86:	68 2e 29 02 c0       	push   0xc002292e
c0017f8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f8f:	03 06                	add    eax,DWORD PTR [esi]
c0017f91:	50                   	push   eax
c0017f92:	e8 13 88 fe ff       	call   c00007aa <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	74 63                	je     c0018001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017f9e:	50                   	push   eax
c0017f9f:	50                   	push   eax
c0017fa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fa4:	03 06                	add    eax,DWORD PTR [esi]
c0017fa6:	50                   	push   eax
c0017fa7:	68 37 29 02 c0       	push   0xc0022937
c0017fac:	e8 5c 71 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0017fb1:	58                   	pop    eax
c0017fb2:	5a                   	pop    edx
c0017fb3:	68 51 29 02 c0       	push   0xc0022951
c0017fb8:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017fbf:	53                   	push   ebx
c0017fc0:	e8 94 87 fe ff       	call   c0000759 <strcpy>
c0017fc5:	59                   	pop    ecx
c0017fc6:	58                   	pop    eax
c0017fc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fcb:	03 06                	add    eax,DWORD PTR [esi]
c0017fcd:	50                   	push   eax
c0017fce:	53                   	push   ebx
c0017fcf:	e8 3c 88 fe ff       	call   c0000810 <strcat>
c0017fd4:	58                   	pop    eax
c0017fd5:	5a                   	pop    edx
c0017fd6:	68 e7 29 02 c0       	push   0xc00229e7
c0017fdb:	53                   	push   ebx
c0017fdc:	e8 2f 88 fe ff       	call   c0000810 <strcat>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017fe9:	0f 84 4b 01 00 00    	je     c001813a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017fef:	83 ec 0c             	sub    esp,0xc
c0017ff2:	53                   	push   ebx
c0017ff3:	e8 e0 d8 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0017ff8:	83 c4 10             	add    esp,0x10
c0017ffb:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017fff:	eb 0b                	jmp    c001800c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018001:	b8 2c f0 01 c0       	mov    eax,0xc001f02c
c0018006:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001800a:	b3 01                	mov    bl,0x1
c001800c:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018011:	0f 85 80 00 00 00    	jne    c0018097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018017:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001801e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018022:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018026:	01 ce                	add    esi,ecx
c0018028:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018030:	8b 06                	mov    eax,DWORD PTR [esi]
c0018032:	0f 94 c2             	sete   dl
c0018035:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001803d:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018042:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018046:	84 db                	test   bl,bl
c0018048:	74 31                	je     c001807b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001804a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001804e:	01 c3                	add    ebx,eax
c0018050:	84 d2                	test   dl,dl
c0018052:	75 0a                	jne    c001805e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018054:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018058:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001805c:	76 32                	jbe    c0018090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001805e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018063:	0f 84 d1 00 00 00    	je     c001813a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018069:	83 ec 0c             	sub    esp,0xc
c001806c:	68 68 29 02 c0       	push   0xc0022968
c0018071:	e8 62 d8 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0018076:	83 c4 10             	add    esp,0x10
c0018079:	eb 15                	jmp    c0018090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001807b:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001807e:	84 d2                	test   dl,dl
c0018080:	75 0e                	jne    c0018090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018082:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018086:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001808a:	77 04                	ja     c0018090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001808c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018090:	89 1e                	mov    DWORD PTR [esi],ebx
c0018092:	e9 df 00 00 00       	jmp    c0018176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018097:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001809c:	75 6e                	jne    c001810c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001809e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00180a5:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00180a9:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00180ad:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00180b5:	74 17                	je     c00180ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00180b7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00180bf:	74 0d                	je     c00180ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00180c1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00180c5:	83 e8 04             	sub    eax,0x4
c00180c8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00180cc:	76 17                	jbe    c00180e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00180ce:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180d3:	74 65                	je     c001813a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180d5:	83 ec 0c             	sub    esp,0xc
c00180d8:	68 84 29 02 c0       	push   0xc0022984
c00180dd:	e8 f6 d7 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	8b 16                	mov    edx,DWORD PTR [esi]
c00180e7:	84 db                	test   bl,bl
c00180e9:	74 13                	je     c00180fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00180eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ef:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00180f6:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00180fa:	01 d0                	add    eax,edx
c00180fc:	eb 06                	jmp    c0018104 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00180fe:	89 d0                	mov    eax,edx
c0018100:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018104:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018108:	89 06                	mov    DWORD PTR [esi],eax
c001810a:	eb 6a                	jmp    c0018176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001810c:	50                   	push   eax
c001810d:	50                   	push   eax
c001810e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018113:	50                   	push   eax
c0018114:	68 a0 29 02 c0       	push   0xc00229a0
c0018119:	e8 ef 6f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018126:	74 12                	je     c001813a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	68 ab 29 02 c0       	push   0xc00229ab
c0018130:	e8 a3 d7 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	eb 3c                	jmp    c0018176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001813a:	83 ec 0c             	sub    esp,0xc
c001813d:	57                   	push   edi
c001813e:	e8 bb 75 ff ff       	call   c000f6fe <File::close()>
c0018143:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018146:	8b 07                	mov    eax,DWORD PTR [edi]
c0018148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001814b:	59                   	pop    ecx
c001814c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018150:	e8 d7 3e ff ff       	call   c000c02c <free>
c0018155:	5b                   	pop    ebx
c0018156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001815a:	e8 cd 3e ff ff       	call   c000c02c <free>
c001815f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018162:	e8 c5 3e ff ff       	call   c000c02c <free>
c0018167:	5e                   	pop    esi
c0018168:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001816c:	e8 bb 3e ff ff       	call   c000c02c <free>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	eb 21                	jmp    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018176:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001817a:	e9 2c fd ff ff       	jmp    c0017eab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001817f:	83 ec 0c             	sub    esp,0xc
c0018182:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018186:	e8 a1 3e ff ff       	call   c000c02c <free>
c001818b:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001818f:	83 c4 10             	add    esp,0x10
c0018192:	e9 a2 fc ff ff       	jmp    c0017e39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018197:	31 c0                	xor    eax,eax
c0018199:	eb 32                	jmp    c00181cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	57                   	push   edi
c001819f:	e8 5a 75 ff ff       	call   c000f6fe <File::close()>
c00181a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00181a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00181a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181ac:	58                   	pop    eax
c00181ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181b1:	e8 76 3e ff ff       	call   c000c02c <free>
c00181b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00181b9:	e8 6e 3e ff ff       	call   c000c02c <free>
c00181be:	5a                   	pop    edx
c00181bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181c3:	e8 64 3e ff ff       	call   c000c02c <free>
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	b0 01                	mov    al,0x1
c00181cd:	81 c4 5c 03 00 00    	add    esp,0x35c
c00181d3:	5b                   	pop    ebx
c00181d4:	5e                   	pop    esi
c00181d5:	5f                   	pop    edi
c00181d6:	5d                   	pop    ebp
c00181d7:	c3                   	ret    

c00181d8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00181d8:	56                   	push   esi
c00181d9:	31 d2                	xor    edx,edx
c00181db:	53                   	push   ebx
c00181dc:	8b 1d c0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fc0
c00181e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181e6:	39 d3                	cmp    ebx,edx
c00181e8:	7e 1b                	jle    c0018205 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00181ea:	8b 04 95 e0 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdae20]
c00181f1:	39 c8                	cmp    eax,ecx
c00181f3:	77 0d                	ja     c0018202 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00181f5:	8b 34 95 e0 4f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb020]
c00181fc:	01 c6                	add    esi,eax
c00181fe:	39 ce                	cmp    esi,ecx
c0018200:	77 05                	ja     c0018207 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018202:	42                   	inc    edx
c0018203:	eb e1                	jmp    c00181e6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018205:	31 c0                	xor    eax,eax
c0018207:	5b                   	pop    ebx
c0018208:	5e                   	pop    esi
c0018209:	c3                   	ret    

c001820a <Thr::getDriverNameFromAddress(unsigned long)>:
c001820a:	53                   	push   ebx
c001820b:	31 c0                	xor    eax,eax
c001820d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018211:	8b 1d c0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fc0
c0018217:	39 c3                	cmp    ebx,eax
c0018219:	7e 22                	jle    c001823d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001821b:	8b 14 85 e0 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae20]
c0018222:	39 ca                	cmp    edx,ecx
c0018224:	77 14                	ja     c001823a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018226:	03 14 85 e0 4f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb020]
c001822d:	39 ca                	cmp    edx,ecx
c001822f:	76 09                	jbe    c001823a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018231:	8b 04 85 e0 53 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdac20]
c0018238:	eb 05                	jmp    c001823f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001823a:	40                   	inc    eax
c001823b:	eb da                	jmp    c0018217 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001823d:	31 c0                	xor    eax,eax
c001823f:	5b                   	pop    ebx
c0018240:	c3                   	ret    

c0018241 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018241:	53                   	push   ebx
c0018242:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018246:	53                   	push   ebx
c0018247:	e8 8c ff ff ff       	call   c00181d8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001824c:	5a                   	pop    edx
c001824d:	31 d2                	xor    edx,edx
c001824f:	85 c0                	test   eax,eax
c0018251:	74 04                	je     c0018257 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018253:	89 da                	mov    edx,ebx
c0018255:	29 c2                	sub    edx,eax
c0018257:	89 d0                	mov    eax,edx
c0018259:	5b                   	pop    ebx
c001825a:	c3                   	ret    

c001825b <Thr::loadDLL(char const*, bool)>:
c001825b:	55                   	push   ebp
c001825c:	57                   	push   edi
c001825d:	56                   	push   esi
c001825e:	53                   	push   ebx
c001825f:	81 ec 34 01 00 00    	sub    esp,0x134
c0018265:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001826c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018273:	56                   	push   esi
c0018274:	68 c3 29 02 c0       	push   0xc00229c3
c0018279:	e8 8f 6e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001827e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018285:	e8 94 6d ff ff       	call   c000f01e <operator new(unsigned long)>
c001828a:	83 c4 0c             	add    esp,0xc
c001828d:	89 c3                	mov    ebx,eax
c001828f:	ff 35 b4 57 02 c0    	push   DWORD PTR ds:0xc00257b4
c0018295:	56                   	push   esi
c0018296:	50                   	push   eax
c0018297:	e8 a0 73 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c001829c:	83 c4 0c             	add    esp,0xc
c001829f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00182a3:	50                   	push   eax
c00182a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182a8:	50                   	push   eax
c00182a9:	53                   	push   ebx
c00182aa:	e8 9d 76 ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c00182af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00182bf:	75 0a                	jne    c00182cb <Thr::loadDLL(char const*, bool)+0x70>
c00182c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182c5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00182c9:	75 3c                	jne    c0018307 <Thr::loadDLL(char const*, bool)+0xac>
c00182cb:	89 e8                	mov    eax,ebp
c00182cd:	84 c0                	test   al,al
c00182cf:	0f 84 3d 01 00 00    	je     c0018412 <Thr::loadDLL(char const*, bool)+0x1b7>
c00182d5:	50                   	push   eax
c00182d6:	50                   	push   eax
c00182d7:	68 d4 29 02 c0       	push   0xc00229d4
c00182dc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00182e0:	53                   	push   ebx
c00182e1:	e8 73 84 fe ff       	call   c0000759 <strcpy>
c00182e6:	58                   	pop    eax
c00182e7:	5a                   	pop    edx
c00182e8:	56                   	push   esi
c00182e9:	53                   	push   ebx
c00182ea:	e8 21 85 fe ff       	call   c0000810 <strcat>
c00182ef:	59                   	pop    ecx
c00182f0:	5f                   	pop    edi
c00182f1:	68 e7 29 02 c0       	push   0xc00229e7
c00182f6:	53                   	push   ebx
c00182f7:	e8 14 85 fe ff       	call   c0000810 <strcat>
c00182fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182ff:	e8 d4 d5 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	e8 bf 5f ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001830c:	51                   	push   ecx
c001830d:	6a 03                	push   0x3
c001830f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018313:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018317:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001831d:	83 d3 00             	adc    ebx,0x0
c0018320:	89 ca                	mov    edx,ecx
c0018322:	89 d1                	mov    ecx,edx
c0018324:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018328:	51                   	push   ecx
c0018329:	50                   	push   eax
c001832a:	e8 df 65 ff ff       	call   c000e90e <VAS::allocatePages(int, int)>
c001832f:	89 34 24             	mov    DWORD PTR [esp],esi
c0018332:	89 c3                	mov    ebx,eax
c0018334:	e8 9e 83 fe ff       	call   c00006d7 <strlen>
c0018339:	8b 3d c0 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024fc0
c001833f:	40                   	inc    eax
c0018340:	89 04 24             	mov    DWORD PTR [esp],eax
c0018343:	e8 d4 3c ff ff       	call   c000c01c <malloc>
c0018348:	89 04 bd e0 53 02 c0 	mov    DWORD PTR [edi*4-0x3ffdac20],eax
c001834f:	5f                   	pop    edi
c0018350:	58                   	pop    eax
c0018351:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c0018356:	56                   	push   esi
c0018357:	ff 34 85 e0 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdac20]
c001835e:	e8 f6 83 fe ff       	call   c0000759 <strcpy>
c0018363:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c0018368:	8d 50 01             	lea    edx,[eax+0x1]
c001836b:	89 1c 85 e0 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae20],ebx
c0018372:	89 15 c0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fc0,edx
c0018378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001837c:	83 c4 0c             	add    esp,0xc
c001837f:	89 14 85 e0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb020],edx
c0018386:	6a 01                	push   0x1
c0018388:	53                   	push   ebx
c0018389:	56                   	push   esi
c001838a:	e8 ab f6 ff ff       	call   c0017a3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	89 c7                	mov    edi,eax
c0018394:	fe c8                	dec    al
c0018396:	74 16                	je     c00183ae <Thr::loadDLL(char const*, bool)+0x153>
c0018398:	89 e8                	mov    eax,ebp
c001839a:	84 c0                	test   al,al
c001839c:	74 10                	je     c00183ae <Thr::loadDLL(char const*, bool)+0x153>
c001839e:	83 ec 0c             	sub    esp,0xc
c00183a1:	68 e9 29 02 c0       	push   0xc00229e9
c00183a6:	e8 2d d5 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	31 f6                	xor    esi,esi
c00183b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183b8:	05 ff 0f 00 00       	add    eax,0xfff
c00183bd:	83 d2 00             	adc    edx,0x0
c00183c0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00183c4:	c1 ea 0c             	shr    edx,0xc
c00183c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183cf:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00183d3:	ba 00 00 00 00       	mov    edx,0x0
c00183d8:	89 d0                	mov    eax,edx
c00183da:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00183de:	73 2c                	jae    c001840c <Thr::loadDLL(char const*, bool)+0x1b1>
c00183e0:	e8 e6 5e ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00183e5:	89 f5                	mov    ebp,esi
c00183e7:	c1 e5 0c             	shl    ebp,0xc
c00183ea:	52                   	push   edx
c00183eb:	01 dd                	add    ebp,ebx
c00183ed:	52                   	push   edx
c00183ee:	55                   	push   ebp
c00183ef:	50                   	push   eax
c00183f0:	e8 81 60 ff ff       	call   c000e476 <VAS::getPageTableEntry(unsigned long)>
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	f6 00 60             	test   BYTE PTR [eax],0x60
c00183fb:	75 0c                	jne    c0018409 <Thr::loadDLL(char const*, bool)+0x1ae>
c00183fd:	83 ec 0c             	sub    esp,0xc
c0018400:	55                   	push   ebp
c0018401:	e8 36 41 ff ff       	call   c000c53c <Phys::freePage(unsigned long)>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	46                   	inc    esi
c001840a:	eb a4                	jmp    c00183b0 <Thr::loadDLL(char const*, bool)+0x155>
c001840c:	89 f8                	mov    eax,edi
c001840e:	84 c0                	test   al,al
c0018410:	75 02                	jne    c0018414 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018412:	31 db                	xor    ebx,ebx
c0018414:	81 c4 2c 01 00 00    	add    esp,0x12c
c001841a:	89 d8                	mov    eax,ebx
c001841c:	5b                   	pop    ebx
c001841d:	5e                   	pop    esi
c001841e:	5f                   	pop    edi
c001841f:	5d                   	pop    ebp
c0018420:	c3                   	ret    

c0018421 <Thr::executeDLL(unsigned long, void*)>:
c0018421:	56                   	push   esi
c0018422:	53                   	push   ebx
c0018423:	51                   	push   ecx
c0018424:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018428:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001842c:	85 db                	test   ebx,ebx
c001842e:	75 10                	jne    c0018440 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018430:	83 ec 0c             	sub    esp,0xc
c0018433:	68 08 2a 02 c0       	push   0xc0022a08
c0018438:	e8 9b d4 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018444:	89 d8                	mov    eax,ebx
c0018446:	5a                   	pop    edx
c0018447:	5b                   	pop    ebx
c0018448:	5e                   	pop    esi
c0018449:	ff e0                	jmp    eax
c001844b:	90                   	nop

c001844c <changeTSS>:
c001844c:	83 ec 0c             	sub    esp,0xc
c001844f:	e8 02 c3 ff ff       	call   c0014756 <thisCPU()>
c0018454:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001845a:	83 ec 08             	sub    esp,0x8
c001845d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018460:	05 7c 11 00 00       	add    eax,0x117c
c0018465:	c1 e1 15             	shl    ecx,0x15
c0018468:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001846d:	29 ca                	sub    edx,ecx
c001846f:	52                   	push   edx
c0018470:	50                   	push   eax
c0018471:	e8 68 56 ff ff       	call   c000dade <TSS::setESP(unsigned long)>
c0018476:	83 c4 1c             	add    esp,0x1c
c0018479:	c3                   	ret    

c001847a <Process::addArgs(char**)>:
c001847a:	57                   	push   edi
c001847b:	56                   	push   esi
c001847c:	53                   	push   ebx
c001847d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018481:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018485:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001848f:	85 ff                	test   edi,edi
c0018491:	74 3d                	je     c00184d0 <Process::addArgs(char**)+0x56>
c0018493:	8b 07                	mov    eax,DWORD PTR [edi]
c0018495:	85 c0                	test   eax,eax
c0018497:	74 37                	je     c00184d0 <Process::addArgs(char**)+0x56>
c0018499:	31 db                	xor    ebx,ebx
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	50                   	push   eax
c001849f:	e8 33 82 fe ff       	call   c00006d7 <strlen>
c00184a4:	40                   	inc    eax
c00184a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00184a8:	e8 6f 3b ff ff       	call   c000c01c <malloc>
c00184ad:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00184b4:	5a                   	pop    edx
c00184b5:	59                   	pop    ecx
c00184b6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00184b9:	43                   	inc    ebx
c00184ba:	50                   	push   eax
c00184bb:	e8 99 82 fe ff       	call   c0000759 <strcpy>
c00184c0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00184cc:	85 c0                	test   eax,eax
c00184ce:	75 cb                	jne    c001849b <Process::addArgs(char**)+0x21>
c00184d0:	5b                   	pop    ebx
c00184d1:	5e                   	pop    esi
c00184d2:	5f                   	pop    edi
c00184d3:	c3                   	ret    

c00184d4 <Process::Process(char const*, Process*, char**)>:
c00184d4:	56                   	push   esi
c00184d5:	53                   	push   ebx
c00184d6:	83 ec 14             	sub    esp,0x14
c00184d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184dd:	05 0c 02 00 00       	add    eax,0x20c
c00184e2:	bb 07 00 00 00       	mov    ebx,0x7
c00184e7:	89 c6                	mov    esi,eax
c00184e9:	85 db                	test   ebx,ebx
c00184eb:	78 12                	js     c00184ff <Process::Process(char const*, Process*, char**)+0x2b>
c00184ed:	83 ec 0c             	sub    esp,0xc
c00184f0:	56                   	push   esi
c00184f1:	e8 04 76 00 00       	call   c001fafa <ThreadControlBlock::ThreadControlBlock()>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	83 c6 63             	add    esi,0x63
c00184fc:	4b                   	dec    ebx
c00184fd:	eb ea                	jmp    c00184e9 <Process::Process(char const*, Process*, char**)+0x15>
c00184ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018503:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001850a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018517:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c001851c:	8d 50 01             	lea    edx,[eax+0x1]
c001851f:	89 15 84 3d 02 c0    	mov    DWORD PTR ds:0xc0023d84,edx
c0018525:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018529:	89 02                	mov    DWORD PTR [edx],eax
c001852b:	83 ec 0c             	sub    esp,0xc
c001852e:	6a 10                	push   0x10
c0018530:	e8 e9 6a ff ff       	call   c000f01e <operator new(unsigned long)>
c0018535:	83 c4 10             	add    esp,0x10
c0018538:	89 c3                	mov    ebx,eax
c001853a:	83 ec 08             	sub    esp,0x8
c001853d:	6a 00                	push   0x0
c001853f:	53                   	push   ebx
c0018540:	e8 6d 67 ff ff       	call   c000ecb2 <VAS::VAS(bool)>
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001854c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018556:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018564:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018568:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001856e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018572:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018578:	85 c0                	test   eax,eax
c001857a:	74 42                	je     c00185be <Process::Process(char const*, Process*, char**)+0xea>
c001857c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018580:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018586:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001858c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018590:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001859a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185a0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00185a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185aa:	05 0c 01 00 00       	add    eax,0x10c
c00185af:	83 ec 08             	sub    esp,0x8
c00185b2:	52                   	push   edx
c00185b3:	50                   	push   eax
c00185b4:	e8 a0 81 fe ff       	call   c0000759 <strcpy>
c00185b9:	83 c4 10             	add    esp,0x10
c00185bc:	eb 5c                	jmp    c001861a <Process::Process(char const*, Process*, char**)+0x146>
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	68 60 12 00 00       	push   0x1260
c00185c6:	e8 53 6a ff ff       	call   c000f01e <operator new(unsigned long)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	89 c3                	mov    ebx,eax
c00185d0:	83 ec 08             	sub    esp,0x8
c00185d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185d7:	53                   	push   ebx
c00185d8:	e8 ff 51 ff ff       	call   c000d7dc <VgaText::VgaText(char const*)>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00185ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00185f4:	83 ec 0c             	sub    esp,0xc
c00185f7:	50                   	push   eax
c00185f8:	e8 e0 45 ff ff       	call   c000cbdd <addToTerminalCycle(VgaText*)>
c00185fd:	83 c4 10             	add    esp,0x10
c0018600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018604:	05 0c 01 00 00       	add    eax,0x10c
c0018609:	83 ec 08             	sub    esp,0x8
c001860c:	68 32 2a 02 c0       	push   0xc0022a32
c0018611:	50                   	push   eax
c0018612:	e8 42 81 fe ff       	call   c0000759 <strcpy>
c0018617:	83 c4 10             	add    esp,0x10
c001861a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001861e:	83 c0 0c             	add    eax,0xc
c0018621:	83 ec 08             	sub    esp,0x8
c0018624:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018628:	50                   	push   eax
c0018629:	e8 2b 81 fe ff       	call   c0000759 <strcpy>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	83 ec 08             	sub    esp,0x8
c0018634:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018638:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001863c:	e8 39 fe ff ff       	call   c001847a <Process::addArgs(char**)>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	83 ec 08             	sub    esp,0x8
c0018647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001864b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001864f:	e8 ad ee ff ff       	call   c0017501 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001865b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001865f:	83 f0 01             	xor    eax,0x1
c0018662:	88 c2                	mov    dl,al
c0018664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018668:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001866e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018673:	83 ec 08             	sub    esp,0x8
c0018676:	50                   	push   eax
c0018677:	68 30 2b 02 c0       	push   0xc0022b30
c001867c:	e8 8c 6a ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	90                   	nop
c0018685:	83 c4 14             	add    esp,0x14
c0018688:	5b                   	pop    ebx
c0018689:	5e                   	pop    esi
c001868a:	c3                   	ret    
c001868b:	90                   	nop

c001868c <Process::Process(bool, char const*, Process*, char**)>:
c001868c:	56                   	push   esi
c001868d:	53                   	push   ebx
c001868e:	83 ec 14             	sub    esp,0x14
c0018691:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018695:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001869d:	05 0c 02 00 00       	add    eax,0x20c
c00186a2:	bb 07 00 00 00       	mov    ebx,0x7
c00186a7:	89 c6                	mov    esi,eax
c00186a9:	85 db                	test   ebx,ebx
c00186ab:	78 12                	js     c00186bf <Process::Process(bool, char const*, Process*, char**)+0x33>
c00186ad:	83 ec 0c             	sub    esp,0xc
c00186b0:	56                   	push   esi
c00186b1:	e8 44 74 00 00       	call   c001fafa <ThreadControlBlock::ThreadControlBlock()>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	83 c6 63             	add    esi,0x63
c00186bc:	4b                   	dec    ebx
c00186bd:	eb ea                	jmp    c00186a9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00186bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00186ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ce:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00186d7:	a1 84 3d 02 c0       	mov    eax,ds:0xc0023d84
c00186dc:	8d 50 01             	lea    edx,[eax+0x1]
c00186df:	89 15 84 3d 02 c0    	mov    DWORD PTR ds:0xc0023d84,edx
c00186e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00186e9:	89 02                	mov    DWORD PTR [edx],eax
c00186eb:	83 ec 0c             	sub    esp,0xc
c00186ee:	6a 10                	push   0x10
c00186f0:	e8 29 69 ff ff       	call   c000f01e <operator new(unsigned long)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	89 c3                	mov    ebx,eax
c00186fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00186ff:	83 ec 08             	sub    esp,0x8
c0018702:	50                   	push   eax
c0018703:	53                   	push   ebx
c0018704:	e8 a9 65 ff ff       	call   c000ecb2 <VAS::VAS(bool)>
c0018709:	83 c4 10             	add    esp,0x10
c001870c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018710:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018728:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001872c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018736:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001873c:	85 c0                	test   eax,eax
c001873e:	74 42                	je     c0018782 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0018740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018744:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001874a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018754:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001875a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018764:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001876a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876e:	05 0c 01 00 00       	add    eax,0x10c
c0018773:	83 ec 08             	sub    esp,0x8
c0018776:	52                   	push   edx
c0018777:	50                   	push   eax
c0018778:	e8 dc 7f fe ff       	call   c0000759 <strcpy>
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	eb 5c                	jmp    c00187de <Process::Process(bool, char const*, Process*, char**)+0x152>
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	68 60 12 00 00       	push   0x1260
c001878a:	e8 8f 68 ff ff       	call   c000f01e <operator new(unsigned long)>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	89 c3                	mov    ebx,eax
c0018794:	83 ec 08             	sub    esp,0x8
c0018797:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001879b:	53                   	push   ebx
c001879c:	e8 3b 50 ff ff       	call   c000d7dc <VgaText::VgaText(char const*)>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	50                   	push   eax
c00187bc:	e8 1c 44 ff ff       	call   c000cbdd <addToTerminalCycle(VgaText*)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c8:	05 0c 01 00 00       	add    eax,0x10c
c00187cd:	83 ec 08             	sub    esp,0x8
c00187d0:	68 32 2a 02 c0       	push   0xc0022a32
c00187d5:	50                   	push   eax
c00187d6:	e8 7e 7f fe ff       	call   c0000759 <strcpy>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187e2:	83 c0 0c             	add    eax,0xc
c00187e5:	83 ec 08             	sub    esp,0x8
c00187e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187ec:	50                   	push   eax
c00187ed:	e8 67 7f fe ff       	call   c0000759 <strcpy>
c00187f2:	83 c4 10             	add    esp,0x10
c00187f5:	83 ec 08             	sub    esp,0x8
c00187f8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018800:	e8 75 fc ff ff       	call   c001847a <Process::addArgs(char**)>
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	90                   	nop
c0018809:	83 c4 14             	add    esp,0x14
c001880c:	5b                   	pop    ebx
c001880d:	5e                   	pop    esi
c001880e:	c3                   	ret    

c001880f <disableIRQs()>:
c001880f:	fa                   	cli    
c0018810:	ff 05 8c 57 02 c0    	inc    DWORD PTR ds:0xc002578c
c0018816:	c3                   	ret    

c0018817 <getIRQNestingLevel()>:
c0018817:	a1 8c 57 02 c0       	mov    eax,ds:0xc002578c
c001881c:	c3                   	ret    

c001881d <enableIRQs()>:
c001881d:	a1 8c 57 02 c0       	mov    eax,ds:0xc002578c
c0018822:	48                   	dec    eax
c0018823:	a3 8c 57 02 c0       	mov    ds:0xc002578c,eax
c0018828:	75 01                	jne    c001882b <enableIRQs()+0xe>
c001882a:	fb                   	sti    
c001882b:	c3                   	ret    

c001882c <lockScheduler()>:
c001882c:	eb e1                	jmp    c001880f <disableIRQs()>

c001882e <unlockScheduler()>:
c001882e:	eb ed                	jmp    c001881d <enableIRQs()>

c0018830 <userModeEntryPoint(void*)>:
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	e8 f6 ff ff ff       	call   c001882e <unlockScheduler()>
c0018838:	fb                   	sti    
c0018839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001883e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018841:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001884b:	83 c4 0c             	add    esp,0xc
c001884e:	e9 45 7a fe ff       	jmp    c0000298 <goToUsermode>

c0018853 <lockStuff()>:
c0018853:	e8 b7 ff ff ff       	call   c001880f <disableIRQs()>
c0018858:	ff 05 88 57 02 c0    	inc    DWORD PTR ds:0xc0025788
c001885e:	c3                   	ret    

c001885f <taskStartupFunction>:
c001885f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018864:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018867:	c3                   	ret    

c0018868 <updateTimeUsed()>:
c0018868:	57                   	push   edi
c0018869:	56                   	push   esi
c001886a:	53                   	push   ebx
c001886b:	e8 e6 be ff ff       	call   c0014756 <thisCPU()>
c0018870:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018877:	74 49                	je     c00188c2 <updateTimeUsed()+0x5a>
c0018879:	0f 31                	rdtsc  
c001887b:	89 c1                	mov    ecx,eax
c001887d:	a3 c8 57 02 c0       	mov    ds:0xc00257c8,eax
c0018882:	2b 0d b8 57 02 c0    	sub    ecx,DWORD PTR ds:0xc00257b8
c0018888:	89 d3                	mov    ebx,edx
c001888a:	89 0d c0 57 02 c0    	mov    DWORD PTR ds:0xc00257c0,ecx
c0018890:	1b 1d bc 57 02 c0    	sbb    ebx,DWORD PTR ds:0xc00257bc
c0018896:	a3 b8 57 02 c0       	mov    ds:0xc00257b8,eax
c001889b:	89 1d c4 57 02 c0    	mov    DWORD PTR ds:0xc00257c4,ebx
c00188a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188a6:	89 15 cc 57 02 c0    	mov    DWORD PTR ds:0xc00257cc,edx
c00188ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00188af:	89 15 bc 57 02 c0    	mov    DWORD PTR ds:0xc00257bc,edx
c00188b5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00188b8:	01 f1                	add    ecx,esi
c00188ba:	11 fb                	adc    ebx,edi
c00188bc:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00188bf:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00188c2:	5b                   	pop    ebx
c00188c3:	5e                   	pop    esi
c00188c4:	5f                   	pop    edi
c00188c5:	c3                   	ret    

c00188c6 <switchToThread(ThreadControlBlock*)>:
c00188c6:	53                   	push   ebx
c00188c7:	83 ec 08             	sub    esp,0x8
c00188ca:	a1 88 57 02 c0       	mov    eax,ds:0xc0025788
c00188cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188d3:	85 c0                	test   eax,eax
c00188d5:	75 30                	jne    c0018907 <switchToThread(ThreadControlBlock*)+0x41>
c00188d7:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c00188da:	3c ff                	cmp    al,0xff
c00188dc:	74 25                	je     c0018903 <switchToThread(ThreadControlBlock*)+0x3d>
c00188de:	0f b6 d0             	movzx  edx,al
c00188e1:	b8 84 03 00 00       	mov    eax,0x384
c00188e6:	29 d0                	sub    eax,edx
c00188e8:	c1 e0 10             	shl    eax,0x10
c00188eb:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00188ee:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00188f1:	e8 72 ff ff ff       	call   c0018868 <updateTimeUsed()>
c00188f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00188fa:	83 c4 08             	add    esp,0x8
c00188fd:	5b                   	pop    ebx
c00188fe:	e9 ce 79 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018903:	31 c0                	xor    eax,eax
c0018905:	eb e7                	jmp    c00188ee <switchToThread(ThreadControlBlock*)+0x28>
c0018907:	c7 05 84 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025784,0x1
c0018911:	83 c4 08             	add    esp,0x8
c0018914:	5b                   	pop    ebx
c0018915:	c3                   	ret    

c0018916 <Semaphore::Semaphore(int)>:
c0018916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001891e:	89 10                	mov    DWORD PTR [eax],edx
c0018920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018924:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001892b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001892f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001893a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018941:	90                   	nop
c0018942:	c3                   	ret    
c0018943:	90                   	nop

c0018944 <Mutex::Mutex()>:
c0018944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018948:	6a 01                	push   0x1
c001894a:	50                   	push   eax
c001894b:	e8 c6 ff ff ff       	call   c0018916 <Semaphore::Semaphore(int)>
c0018950:	83 c4 08             	add    esp,0x8
c0018953:	90                   	nop
c0018954:	c3                   	ret    
c0018955:	90                   	nop

c0018956 <Process::createThread(void (*)(void*), void*, int)>:
c0018956:	55                   	push   ebp
c0018957:	31 c9                	xor    ecx,ecx
c0018959:	57                   	push   edi
c001895a:	56                   	push   esi
c001895b:	53                   	push   ebx
c001895c:	83 ec 1c             	sub    esp,0x1c
c001895f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018963:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001896a:	89 f2                	mov    edx,esi
c001896c:	0f b7 c2             	movzx  eax,dx
c001896f:	83 e2 01             	and    edx,0x1
c0018972:	74 14                	je     c0018988 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0018974:	d1 f8                	sar    eax,1
c0018976:	41                   	inc    ecx
c0018977:	89 c2                	mov    edx,eax
c0018979:	83 f9 10             	cmp    ecx,0x10
c001897c:	75 ee                	jne    c001896c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001897e:	83 c4 1c             	add    esp,0x1c
c0018981:	31 c0                	xor    eax,eax
c0018983:	5b                   	pop    ebx
c0018984:	5e                   	pop    esi
c0018985:	5f                   	pop    edi
c0018986:	5d                   	pop    ebp
c0018987:	c3                   	ret    
c0018988:	83 ec 08             	sub    esp,0x8
c001898b:	b8 01 00 00 00       	mov    eax,0x1
c0018990:	d3 e0                	shl    eax,cl
c0018992:	09 c6                	or     esi,eax
c0018994:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001899a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c00189a1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c00189a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00189a7:	01 ce                	add    esi,ecx
c00189a9:	89 f0                	mov    eax,esi
c00189ab:	c1 e0 05             	shl    eax,0x5
c00189ae:	01 c6                	add    esi,eax
c00189b0:	8d 04 33             	lea    eax,[ebx+esi*1]
c00189b3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00189b9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00189bf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00189c3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00189c9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00189cf:	89 ca                	mov    edx,ecx
c00189d1:	f7 da                	neg    edx
c00189d3:	c1 e2 15             	shl    edx,0x15
c00189d6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00189dc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00189e2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00189e6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00189f0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00189f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00189fa:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018a00:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018a0a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018a14:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018a1b:	50                   	push   eax
c0018a1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a20:	68 a8 57 02 c0       	push   0xc00257a8
c0018a25:	e8 28 6f 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a2a:	83 c4 10             	add    esp,0x10
c0018a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a31:	83 c4 1c             	add    esp,0x1c
c0018a34:	5b                   	pop    ebx
c0018a35:	5e                   	pop    esi
c0018a36:	5f                   	pop    edi
c0018a37:	5d                   	pop    ebp
c0018a38:	c3                   	ret    
c0018a39:	90                   	nop

c0018a3a <Process::createUserThread()>:
c0018a3a:	83 ec 0c             	sub    esp,0xc
c0018a3d:	68 80 00 00 00       	push   0x80
c0018a42:	6a 00                	push   0x0
c0018a44:	68 30 88 01 c0       	push   0xc0018830
c0018a49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a4d:	e8 04 ff ff ff       	call   c0018956 <Process::createThread(void (*)(void*), void*, int)>
c0018a52:	83 c4 1c             	add    esp,0x1c
c0018a55:	c3                   	ret    

c0018a56 <setupMultitasking(void (*)())>:
c0018a56:	56                   	push   esi
c0018a57:	53                   	push   ebx
c0018a58:	53                   	push   ebx
c0018a59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a5d:	eb 10                	jmp    c0018a6f <setupMultitasking(void (*)())+0x19>
c0018a5f:	83 ec 0c             	sub    esp,0xc
c0018a62:	68 a8 57 02 c0       	push   0xc00257a8
c0018a67:	e8 38 6e 00 00       	call   c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	83 ec 0c             	sub    esp,0xc
c0018a72:	68 a8 57 02 c0       	push   0xc00257a8
c0018a77:	e8 0c 6e 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	84 c0                	test   al,al
c0018a81:	74 dc                	je     c0018a5f <setupMultitasking(void (*)())+0x9>
c0018a83:	83 ec 0c             	sub    esp,0xc
c0018a86:	68 3b 07 00 00       	push   0x73b
c0018a8b:	e8 8e 65 ff ff       	call   c000f01e <operator new(unsigned long)>
c0018a90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018a97:	89 c3                	mov    ebx,eax
c0018a99:	6a 00                	push   0x0
c0018a9b:	68 36 2a 02 c0       	push   0xc0022a36
c0018aa0:	6a 01                	push   0x1
c0018aa2:	50                   	push   eax
c0018aa3:	e8 e4 fb ff ff       	call   c001868c <Process::Process(bool, char const*, Process*, char**)>
c0018aa8:	83 c4 18             	add    esp,0x18
c0018aab:	89 1d b4 57 02 c0    	mov    DWORD PTR ds:0xc00257b4,ebx
c0018ab1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018ab7:	68 58 2b 02 c0       	push   0xc0022b58
c0018abc:	e8 4c 66 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018ac1:	58                   	pop    eax
c0018ac2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018ac8:	e8 84 48 ff ff       	call   c000d351 <setActiveTerminal(VgaText*)>
c0018acd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0018ad5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018adb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ade:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018ae8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018aee:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018af4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018afe:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018b08:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018b12:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018b18:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018b1e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018b28:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018b2e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018b38:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018b3e:	5a                   	pop    edx
c0018b3f:	59                   	pop    ecx
c0018b40:	68 32 2a 02 c0       	push   0xc0022a32
c0018b45:	50                   	push   eax
c0018b46:	e8 0e 7c fe ff       	call   c0000759 <strcpy>
c0018b4b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018b52:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018b56:	83 c4 14             	add    esp,0x14
c0018b59:	5b                   	pop    ebx
c0018b5a:	5e                   	pop    esi
c0018b5b:	e9 63 77 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018b60 <schedule()>:
c0018b60:	a1 88 57 02 c0       	mov    eax,ds:0xc0025788
c0018b65:	85 c0                	test   eax,eax
c0018b67:	74 0b                	je     c0018b74 <schedule()+0x14>
c0018b69:	c7 05 84 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025784,0x1
c0018b73:	c3                   	ret    
c0018b74:	53                   	push   ebx
c0018b75:	83 ec 14             	sub    esp,0x14
c0018b78:	68 a8 57 02 c0       	push   0xc00257a8
c0018b7d:	e8 06 6d 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b82:	83 c4 10             	add    esp,0x10
c0018b85:	84 c0                	test   al,al
c0018b87:	75 38                	jne    c0018bc1 <schedule()+0x61>
c0018b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018b91:	4a                   	dec    edx
c0018b92:	74 32                	je     c0018bc6 <schedule()+0x66>
c0018b94:	83 ec 0c             	sub    esp,0xc
c0018b97:	68 a8 57 02 c0       	push   0xc00257a8
c0018b9c:	e8 df 6c 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ba1:	c7 04 24 a8 57 02 c0 	mov    DWORD PTR [esp],0xc00257a8
c0018ba8:	89 c3                	mov    ebx,eax
c0018baa:	e8 f5 6c 00 00       	call   c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018baf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018bb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bb9:	e8 08 fd ff ff       	call   c00188c6 <switchToThread(ThreadControlBlock*)>
c0018bbe:	83 c4 10             	add    esp,0x10
c0018bc1:	83 c4 08             	add    esp,0x8
c0018bc4:	5b                   	pop    ebx
c0018bc5:	c3                   	ret    
c0018bc6:	83 ec 08             	sub    esp,0x8
c0018bc9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018bd0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018bd6:	68 a8 57 02 c0       	push   0xc00257a8
c0018bdb:	e8 72 6d 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018be0:	83 c4 10             	add    esp,0x10
c0018be3:	eb af                	jmp    c0018b94 <schedule()+0x34>

c0018be5 <unlockStuff()>:
c0018be5:	a1 88 57 02 c0       	mov    eax,ds:0xc0025788
c0018bea:	48                   	dec    eax
c0018beb:	a3 88 57 02 c0       	mov    ds:0xc0025788,eax
c0018bf0:	75 09                	jne    c0018bfb <unlockStuff()+0x16>
c0018bf2:	a1 84 57 02 c0       	mov    eax,ds:0xc0025784
c0018bf7:	85 c0                	test   eax,eax
c0018bf9:	75 05                	jne    c0018c00 <unlockStuff()+0x1b>
c0018bfb:	e9 1d fc ff ff       	jmp    c001881d <enableIRQs()>
c0018c00:	83 ec 0c             	sub    esp,0xc
c0018c03:	c7 05 84 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025784,0x0
c0018c0d:	e8 4e ff ff ff       	call   c0018b60 <schedule()>
c0018c12:	83 c4 0c             	add    esp,0xc
c0018c15:	e9 03 fc ff ff       	jmp    c001881d <enableIRQs()>

c0018c1a <Semaphore::tryAcquire()>:
c0018c1a:	83 ec 0c             	sub    esp,0xc
c0018c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c21:	e8 2d fc ff ff       	call   c0018853 <lockStuff()>
c0018c26:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018c29:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018c2b:	7c 0b                	jl     c0018c38 <Semaphore::tryAcquire()+0x1e>
c0018c2d:	e8 b3 ff ff ff       	call   c0018be5 <unlockStuff()>
c0018c32:	31 c0                	xor    eax,eax
c0018c34:	83 c4 0c             	add    esp,0xc
c0018c37:	c3                   	ret    
c0018c38:	42                   	inc    edx
c0018c39:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c3c:	e8 a4 ff ff ff       	call   c0018be5 <unlockStuff()>
c0018c41:	b0 01                	mov    al,0x1
c0018c43:	83 c4 0c             	add    esp,0xc
c0018c46:	c3                   	ret    
c0018c47:	90                   	nop

c0018c48 <Semaphore::assertLocked(char const*)>:
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c53:	e8 fb fb ff ff       	call   c0018853 <lockStuff()>
c0018c58:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018c5a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018c5d:	7c 05                	jl     c0018c64 <Semaphore::assertLocked(char const*)+0x1c>
c0018c5f:	83 c4 0c             	add    esp,0xc
c0018c62:	eb 81                	jmp    c0018be5 <unlockStuff()>
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	52                   	push   edx
c0018c68:	e8 6b cc ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	83 c4 0c             	add    esp,0xc
c0018c73:	e9 6d ff ff ff       	jmp    c0018be5 <unlockStuff()>

c0018c78 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	e8 97 fb ff ff       	call   c0018817 <getIRQNestingLevel()>
c0018c80:	83 ec 08             	sub    esp,0x8
c0018c83:	50                   	push   eax
c0018c84:	68 8c 2b 02 c0       	push   0xc0022b8c
c0018c89:	e8 7f 64 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018c8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c97:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018c9a:	e8 c1 fe ff ff       	call   c0018b60 <schedule()>
c0018c9f:	e8 8a fb ff ff       	call   c001882e <unlockScheduler()>
c0018ca4:	e8 6e fb ff ff       	call   c0018817 <getIRQNestingLevel()>
c0018ca9:	5a                   	pop    edx
c0018caa:	59                   	pop    ecx
c0018cab:	50                   	push   eax
c0018cac:	68 c0 2b 02 c0       	push   0xc0022bc0
c0018cb1:	e8 57 64 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018cb6:	83 c4 1c             	add    esp,0x1c
c0018cb9:	c3                   	ret    

c0018cba <blockTask(TaskState)>:
c0018cba:	83 ec 0c             	sub    esp,0xc
c0018cbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cc1:	e8 66 fb ff ff       	call   c001882c <lockScheduler()>
c0018cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ccb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018cce:	e8 8d fe ff ff       	call   c0018b60 <schedule()>
c0018cd3:	83 c4 0c             	add    esp,0xc
c0018cd6:	e9 53 fb ff ff       	jmp    c001882e <unlockScheduler()>

c0018cdb <waitTask(int, int*, int)>:
c0018cdb:	83 ec 18             	sub    esp,0x18
c0018cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ce3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ce7:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018cea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018cee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cf3:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018cf6:	6a 07                	push   0x7
c0018cf8:	e8 bd ff ff ff       	call   c0018cba <blockTask(TaskState)>
c0018cfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d02:	83 c4 10             	add    esp,0x10
c0018d05:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018d08:	85 d2                	test   edx,edx
c0018d0a:	74 0a                	je     c0018d16 <waitTask(int, int*, int)+0x3b>
c0018d0c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018d0f:	89 02                	mov    DWORD PTR [edx],eax
c0018d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d16:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018d19:	83 c4 0c             	add    esp,0xc
c0018d1c:	c3                   	ret    

c0018d1d <nanoSleepUntil(unsigned long long)>:
c0018d1d:	83 ec 0c             	sub    esp,0xc
c0018d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d28:	3b 05 d0 49 02 c0    	cmp    eax,DWORD PTR ds:0xc00249d0
c0018d2e:	89 d1                	mov    ecx,edx
c0018d30:	1b 0d d4 49 02 c0    	sbb    ecx,DWORD PTR ds:0xc00249d4
c0018d36:	73 04                	jae    c0018d3c <nanoSleepUntil(unsigned long long)+0x1f>
c0018d38:	83 c4 0c             	add    esp,0xc
c0018d3b:	c3                   	ret    
c0018d3c:	e8 12 fb ff ff       	call   c0018853 <lockStuff()>
c0018d41:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018d47:	83 ec 08             	sub    esp,0x8
c0018d4a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018d4d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018d50:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018d56:	68 9c 57 02 c0       	push   0xc002579c
c0018d5b:	e8 f2 6b 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d60:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018d67:	e8 4e ff ff ff       	call   c0018cba <blockTask(TaskState)>
c0018d6c:	83 c4 1c             	add    esp,0x1c
c0018d6f:	e9 71 fe ff ff       	jmp    c0018be5 <unlockStuff()>

c0018d74 <nanoSleep(unsigned long long)>:
c0018d74:	a1 d0 49 02 c0       	mov    eax,ds:0xc00249d0
c0018d79:	8b 15 d4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249d4
c0018d7f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018d83:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018d87:	eb 94                	jmp    c0018d1d <nanoSleepUntil(unsigned long long)>

c0018d89 <sleep(unsigned long long)>:
c0018d89:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018d91:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018d96:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018d9a:	01 ca                	add    edx,ecx
c0018d9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018da0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018da4:	eb ce                	jmp    c0018d74 <nanoSleep(unsigned long long)>

c0018da6 <Semaphore::acquire()>:
c0018da6:	83 ec 0c             	sub    esp,0xc
c0018da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dad:	e8 a1 fa ff ff       	call   c0018853 <lockStuff()>
c0018db2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018db5:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018db7:	7d 0c                	jge    c0018dc5 <Semaphore::acquire()+0x1f>
c0018db9:	42                   	inc    edx
c0018dba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018dbd:	83 c4 0c             	add    esp,0xc
c0018dc0:	e9 20 fe ff ff       	jmp    c0018be5 <unlockStuff()>
c0018dc5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018dcb:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018dd2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018dd5:	85 d2                	test   edx,edx
c0018dd7:	74 2a                	je     c0018e03 <Semaphore::acquire()+0x5d>
c0018dd9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018ddc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018de2:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018de5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018deb:	83 ec 0c             	sub    esp,0xc
c0018dee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018df1:	6a 05                	push   0x5
c0018df3:	e8 c2 fe ff ff       	call   c0018cba <blockTask(TaskState)>
c0018df8:	83 c4 10             	add    esp,0x10
c0018dfb:	83 c4 0c             	add    esp,0xc
c0018dfe:	e9 e2 fd ff ff       	jmp    c0018be5 <unlockStuff()>
c0018e03:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e09:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018e0c:	eb d7                	jmp    c0018de5 <Semaphore::acquire()+0x3f>

c0018e0e <taskReturned>:
c0018e0e:	83 ec 18             	sub    esp,0x18
c0018e11:	68 f4 2b 02 c0       	push   0xc0022bf4
c0018e16:	e8 bd ca ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0018e1b:	83 c4 10             	add    esp,0x10
c0018e1e:	83 ec 0c             	sub    esp,0xc
c0018e21:	6a 02                	push   0x2
c0018e23:	e8 92 fe ff ff       	call   c0018cba <blockTask(TaskState)>
c0018e28:	e8 ff f9 ff ff       	call   c001882c <lockScheduler()>
c0018e2d:	e8 2e fd ff ff       	call   c0018b60 <schedule()>
c0018e32:	e8 f7 f9 ff ff       	call   c001882e <unlockScheduler()>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	eb e2                	jmp    c0018e1e <taskReturned+0x10>

c0018e3c <unblockTask(ThreadControlBlock*)>:
c0018e3c:	53                   	push   ebx
c0018e3d:	83 ec 08             	sub    esp,0x8
c0018e40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e44:	e8 e3 f9 ff ff       	call   c001882c <lockScheduler()>
c0018e49:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e4c:	85 c0                	test   eax,eax
c0018e4e:	74 5c                	je     c0018eac <unblockTask(ThreadControlBlock*)+0x70>
c0018e50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e53:	48                   	dec    eax
c0018e54:	74 31                	je     c0018e87 <unblockTask(ThreadControlBlock*)+0x4b>
c0018e56:	83 ec 0c             	sub    esp,0xc
c0018e59:	68 a8 57 02 c0       	push   0xc00257a8
c0018e5e:	e8 1d 6a 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	85 c0                	test   eax,eax
c0018e68:	75 17                	jne    c0018e81 <unblockTask(ThreadControlBlock*)+0x45>
c0018e6a:	eb 65                	jmp    c0018ed1 <unblockTask(ThreadControlBlock*)+0x95>
c0018e6c:	83 ec 08             	sub    esp,0x8
c0018e6f:	50                   	push   eax
c0018e70:	68 a8 57 02 c0       	push   0xc00257a8
c0018e75:	e8 16 6d 00 00       	call   c001fb90 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018e7a:	83 c4 10             	add    esp,0x10
c0018e7d:	85 c0                	test   eax,eax
c0018e7f:	74 50                	je     c0018ed1 <unblockTask(ThreadControlBlock*)+0x95>
c0018e81:	39 c3                	cmp    ebx,eax
c0018e83:	75 e7                	jne    c0018e6c <unblockTask(ThreadControlBlock*)+0x30>
c0018e85:	eb 1c                	jmp    c0018ea3 <unblockTask(ThreadControlBlock*)+0x67>
c0018e87:	83 ec 0c             	sub    esp,0xc
c0018e8a:	68 e4 2c 02 c0       	push   0xc0022ce4
c0018e8f:	e8 79 62 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018e94:	c7 04 24 70 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c70
c0018e9b:	e8 6d 62 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018ea0:	83 c4 10             	add    esp,0x10
c0018ea3:	83 c4 08             	add    esp,0x8
c0018ea6:	5b                   	pop    ebx
c0018ea7:	e9 82 f9 ff ff       	jmp    c001882e <unlockScheduler()>
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	68 28 2c 02 c0       	push   0xc0022c28
c0018eb4:	e8 54 62 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018eb9:	c7 04 24 70 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c70
c0018ec0:	e8 48 62 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	83 c4 08             	add    esp,0x8
c0018ecb:	5b                   	pop    ebx
c0018ecc:	e9 5d f9 ff ff       	jmp    c001882e <unlockScheduler()>
c0018ed1:	83 ec 08             	sub    esp,0x8
c0018ed4:	53                   	push   ebx
c0018ed5:	68 a8 57 02 c0       	push   0xc00257a8
c0018eda:	e8 73 6a 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	83 c4 08             	add    esp,0x8
c0018ee5:	5b                   	pop    ebx
c0018ee6:	e9 43 f9 ff ff       	jmp    c001882e <unlockScheduler()>

c0018eeb <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018eeb:	55                   	push   ebp
c0018eec:	57                   	push   edi
c0018eed:	56                   	push   esi
c0018eee:	53                   	push   ebx
c0018eef:	83 ec 1c             	sub    esp,0x1c
c0018ef2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ef6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ef9:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018eff:	85 c9                	test   ecx,ecx
c0018f01:	7e 20                	jle    c0018f23 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018f03:	31 f6                	xor    esi,esi
c0018f05:	83 ec 0c             	sub    esp,0xc
c0018f08:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018f0f:	46                   	inc    esi
c0018f10:	e8 17 31 ff ff       	call   c000c02c <free>
c0018f15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018f21:	7f e2                	jg     c0018f05 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018f23:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018f2d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018f32:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018f35:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018f38:	d3 c0                	rol    eax,cl
c0018f3a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018f41:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018f44:	89 f7                	mov    edi,esi
c0018f46:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018f4e:	0f 85 4f 01 00 00    	jne    c00190a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018f54:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f5a:	85 c0                	test   eax,eax
c0018f5c:	0f 84 aa 00 00 00    	je     c001900c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f62:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018f65:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018f69:	31 c9                	xor    ecx,ecx
c0018f6b:	eb 10                	jmp    c0018f7d <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018f6d:	41                   	inc    ecx
c0018f6e:	83 f9 10             	cmp    ecx,0x10
c0018f71:	0f 84 95 00 00 00    	je     c001900c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f77:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f7d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018f84:	d3 fa                	sar    edx,cl
c0018f86:	83 e2 01             	and    edx,0x1
c0018f89:	74 e2                	je     c0018f6d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018f8b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018f8e:	01 ca                	add    edx,ecx
c0018f90:	89 d5                	mov    ebp,edx
c0018f92:	c1 e5 05             	shl    ebp,0x5
c0018f95:	01 ea                	add    edx,ebp
c0018f97:	01 d0                	add    eax,edx
c0018f99:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018f9f:	83 fd 07             	cmp    ebp,0x7
c0018fa2:	75 c9                	jne    c0018f6d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fa4:	05 40 02 00 00       	add    eax,0x240
c0018fa9:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018fac:	83 fd ff             	cmp    ebp,0xffffffff
c0018faf:	0f 8c 08 01 00 00    	jl     c00190bd <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018fb5:	0f 84 b9 01 00 00    	je     c0019174 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018fbb:	85 ed                	test   ebp,ebp
c0018fbd:	0f 84 a0 01 00 00    	je     c0019163 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018fc3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018fc5:	75 a6                	jne    c0018f6d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fc7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018fcd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018fd1:	01 d0                	add    eax,edx
c0018fd3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018fd7:	83 ec 0c             	sub    esp,0xc
c0018fda:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018fe0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018fe3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018fe9:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018ff0:	50                   	push   eax
c0018ff1:	e8 46 fe ff ff       	call   c0018e3c <unblockTask(ThreadControlBlock*)>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018ffc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019000:	89 f7                	mov    edi,esi
c0019002:	41                   	inc    ecx
c0019003:	83 f9 10             	cmp    ecx,0x10
c0019006:	0f 85 6b ff ff ff    	jne    c0018f77 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001900c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019012:	85 c0                	test   eax,eax
c0019014:	74 5d                	je     c0019073 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0019016:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001901c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019022:	74 4f                	je     c0019073 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	68 a8 57 02 c0       	push   0xc00257a8
c001902c:	e8 4f 68 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019031:	c7 04 24 a8 57 02 c0 	mov    DWORD PTR [esp],0xc00257a8
c0019038:	89 c7                	mov    edi,eax
c001903a:	e8 49 68 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	84 c0                	test   al,al
c0019044:	0f 84 e4 00 00 00    	je     c001912e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001904a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001904d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019053:	85 d2                	test   edx,edx
c0019055:	74 0f                	je     c0019066 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0019057:	83 ec 0c             	sub    esp,0xc
c001905a:	8b 02                	mov    eax,DWORD PTR [edx]
c001905c:	52                   	push   edx
c001905d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019060:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019070:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019073:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0019079:	85 db                	test   ebx,ebx
c001907b:	74 16                	je     c0019093 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001907d:	83 ec 0c             	sub    esp,0xc
c0019080:	53                   	push   ebx
c0019081:	e8 1c 56 ff ff       	call   c000e6a2 <VAS::~VAS()>
c0019086:	58                   	pop    eax
c0019087:	5a                   	pop    edx
c0019088:	6a 10                	push   0x10
c001908a:	53                   	push   ebx
c001908b:	e8 9d 5f ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0019090:	83 c4 10             	add    esp,0x10
c0019093:	83 ec 0c             	sub    esp,0xc
c0019096:	68 3d 2a 02 c0       	push   0xc0022a3d
c001909b:	e8 6d 60 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	83 ec 08             	sub    esp,0x8
c00190a6:	68 3b 07 00 00       	push   0x73b
c00190ab:	68 4b 2a 02 c0       	push   0xc0022a4b
c00190b0:	e8 58 60 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00190b5:	83 c4 2c             	add    esp,0x2c
c00190b8:	5b                   	pop    ebx
c00190b9:	5e                   	pop    esi
c00190ba:	5f                   	pop    edi
c00190bb:	5d                   	pop    ebp
c00190bc:	c3                   	ret    
c00190bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00190c1:	83 ec 0c             	sub    esp,0xc
c00190c4:	68 28 2d 02 c0       	push   0xc0022d28
c00190c9:	e8 0a c8 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c00190ce:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00190d1:	83 c4 10             	add    esp,0x10
c00190d4:	89 f7                	mov    edi,esi
c00190d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190da:	e9 8e fe ff ff       	jmp    c0018f6d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00190df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190e5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00190eb:	75 1c                	jne    c0019109 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00190ed:	83 ec 0c             	sub    esp,0xc
c00190f0:	68 90 2d 02 c0       	push   0xc0022d90
c00190f5:	e8 13 60 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00190fa:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019101:	e8 b4 fb ff ff       	call   c0018cba <blockTask(TaskState)>
c0019106:	83 c4 10             	add    esp,0x10
c0019109:	83 ec 08             	sub    esp,0x8
c001910c:	56                   	push   esi
c001910d:	68 a8 57 02 c0       	push   0xc00257a8
c0019112:	e8 3b 68 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019117:	c7 04 24 a8 57 02 c0 	mov    DWORD PTR [esp],0xc00257a8
c001911e:	e8 5d 67 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	39 f8                	cmp    eax,edi
c0019128:	0f 84 1c ff ff ff    	je     c001904a <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	68 a8 57 02 c0       	push   0xc00257a8
c0019136:	e8 45 67 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001913b:	c7 04 24 a8 57 02 c0 	mov    DWORD PTR [esp],0xc00257a8
c0019142:	89 c6                	mov    esi,eax
c0019144:	e8 5b 67 00 00       	call   c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019149:	83 c4 10             	add    esp,0x10
c001914c:	39 f3                	cmp    ebx,esi
c001914e:	74 b9                	je     c0019109 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019150:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019153:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019156:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001915c:	75 ab                	jne    c0019109 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001915e:	e9 7c ff ff ff       	jmp    c00190df <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019163:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019167:	83 ec 0c             	sub    esp,0xc
c001916a:	68 5c 2d 02 c0       	push   0xc0022d5c
c001916f:	e9 55 ff ff ff       	jmp    c00190c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0019174:	8b 36                	mov    esi,DWORD PTR [esi]
c0019176:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001917a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001917d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019180:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0019186:	01 d7                	add    edi,edx
c0019188:	89 f8                	mov    eax,edi
c001918a:	e9 44 fe ff ff       	jmp    c0018fd3 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001918f <cleanerTaskFunction(void*)>:
c001918f:	53                   	push   ebx
c0019190:	83 ec 08             	sub    esp,0x8
c0019193:	e8 96 f6 ff ff       	call   c001882e <unlockScheduler()>
c0019198:	e8 8f f6 ff ff       	call   c001882c <lockScheduler()>
c001919d:	80 3d 6c 57 02 c0 00 	cmp    BYTE PTR ds:0xc002576c,0x0
c00191a4:	0f 85 8e 00 00 00    	jne    c0019238 <cleanerTaskFunction(void*)+0xa9>
c00191aa:	83 ec 0c             	sub    esp,0xc
c00191ad:	6a 02                	push   0x2
c00191af:	e8 c4 fa ff ff       	call   c0018c78 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191b4:	83 c4 10             	add    esp,0x10
c00191b7:	c6 05 6c 57 02 c0 00 	mov    BYTE PTR ds:0xc002576c,0x0
c00191be:	e8 90 f6 ff ff       	call   c0018853 <lockStuff()>
c00191c3:	e8 64 f6 ff ff       	call   c001882c <lockScheduler()>
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	68 90 57 02 c0       	push   0xc0025790
c00191d0:	e8 b3 66 00 00       	call   c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	84 c0                	test   al,al
c00191da:	75 40                	jne    c001921c <cleanerTaskFunction(void*)+0x8d>
c00191dc:	83 ec 0c             	sub    esp,0xc
c00191df:	68 90 57 02 c0       	push   0xc0025790
c00191e4:	e8 97 66 00 00       	call   c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00191e9:	c7 04 24 90 57 02 c0 	mov    DWORD PTR [esp],0xc0025790
c00191f0:	89 c3                	mov    ebx,eax
c00191f2:	e8 ad 66 00 00       	call   c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00191f7:	c7 04 24 61 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a61
c00191fe:	e8 0a 5f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0019203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019206:	e8 e0 fc ff ff       	call   c0018eeb <cleanupTerminatedTask(ThreadControlBlock*)>
c001920b:	c7 04 24 7a 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a7a
c0019212:	e8 f6 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0019217:	83 c4 10             	add    esp,0x10
c001921a:	eb ac                	jmp    c00191c8 <cleanerTaskFunction(void*)+0x39>
c001921c:	e8 0d f6 ff ff       	call   c001882e <unlockScheduler()>
c0019221:	e8 bf f9 ff ff       	call   c0018be5 <unlockStuff()>
c0019226:	e8 01 f6 ff ff       	call   c001882c <lockScheduler()>
c001922b:	80 3d 6c 57 02 c0 00 	cmp    BYTE PTR ds:0xc002576c,0x0
c0019232:	0f 84 72 ff ff ff    	je     c00191aa <cleanerTaskFunction(void*)+0x1b>
c0019238:	e8 f1 f5 ff ff       	call   c001882e <unlockScheduler()>
c001923d:	e9 75 ff ff ff       	jmp    c00191b7 <cleanerTaskFunction(void*)+0x28>

c0019242 <terminateTask(int)>:
c0019242:	83 ec 14             	sub    esp,0x14
c0019245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001924a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001924d:	83 c0 0c             	add    eax,0xc
c0019250:	50                   	push   eax
c0019251:	68 b8 2d 02 c0       	push   0xc0022db8
c0019256:	e8 b2 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001925b:	e8 f3 f5 ff ff       	call   c0018853 <lockStuff()>
c0019260:	e8 c7 f5 ff ff       	call   c001882c <lockScheduler()>
c0019265:	c7 04 24 8d 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a8d
c001926c:	e8 9c 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0019271:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001927a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001927d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019282:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019285:	5a                   	pop    edx
c0019286:	59                   	pop    ecx
c0019287:	50                   	push   eax
c0019288:	68 90 57 02 c0       	push   0xc0025790
c001928d:	e8 c0 66 00 00       	call   c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019297:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001929e:	c7 04 24 a7 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aa7
c00192a5:	e8 63 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	a1 68 57 02 c0       	mov    eax,ds:0xc0025768
c00192b2:	85 c0                	test   eax,eax
c00192b4:	74 5a                	je     c0019310 <terminateTask(int)+0xce>
c00192b6:	83 ec 0c             	sub    esp,0xc
c00192b9:	68 c1 2a 02 c0       	push   0xc0022ac1
c00192be:	e8 4a 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00192c3:	58                   	pop    eax
c00192c4:	c6 05 6c 57 02 c0 01 	mov    BYTE PTR ds:0xc002576c,0x1
c00192cb:	ff 35 68 57 02 c0    	push   DWORD PTR ds:0xc0025768
c00192d1:	e8 66 fb ff ff       	call   c0018e3c <unblockTask(ThreadControlBlock*)>
c00192d6:	c7 04 24 db 2a 02 c0 	mov    DWORD PTR [esp],0xc0022adb
c00192dd:	e8 2b 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	e8 44 f5 ff ff       	call   c001882e <unlockScheduler()>
c00192ea:	e8 f6 f8 ff ff       	call   c0018be5 <unlockStuff()>
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	68 13 2b 02 c0       	push   0xc0022b13
c00192f7:	e8 11 5e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	e8 28 f5 ff ff       	call   c001882c <lockScheduler()>
c0019304:	e8 57 f8 ff ff       	call   c0018b60 <schedule()>
c0019309:	e8 20 f5 ff ff       	call   c001882e <unlockScheduler()>
c001930e:	eb ef                	jmp    c00192ff <terminateTask(int)+0xbd>
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	68 f5 2a 02 c0       	push   0xc0022af5
c0019318:	e8 f0 5d ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	eb c3                	jmp    c00192e5 <terminateTask(int)+0xa3>

c0019322 <Thr::terminateFromIRQ(int)>:
c0019322:	83 ec 18             	sub    esp,0x18
c0019325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019329:	e8 14 ff ff ff       	call   c0019242 <terminateTask(int)>

c001932e <Semaphore::release()>:
c001932e:	83 ec 0c             	sub    esp,0xc
c0019331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019335:	e8 19 f5 ff ff       	call   c0018853 <lockStuff()>
c001933a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001933d:	85 d2                	test   edx,edx
c001933f:	74 1a                	je     c001935b <Semaphore::release()+0x2d>
c0019341:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001934a:	52                   	push   edx
c001934b:	e8 ec fa ff ff       	call   c0018e3c <unblockTask(ThreadControlBlock*)>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	83 c4 0c             	add    esp,0xc
c0019356:	e9 8a f8 ff ff       	jmp    c0018be5 <unlockStuff()>
c001935b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001935e:	83 c4 0c             	add    esp,0xc
c0019361:	e9 7f f8 ff ff       	jmp    c0018be5 <unlockStuff()>

c0019366 <__static_initialization_and_destruction_0(int, int)>:
c0019366:	83 ec 0c             	sub    esp,0xc
c0019369:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001936e:	0f 85 88 00 00 00    	jne    c00193fc <__static_initialization_and_destruction_0(int, int)+0x96>
c0019374:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001937c:	75 7e                	jne    c00193fc <__static_initialization_and_destruction_0(int, int)+0x96>
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	68 a8 57 02 c0       	push   0xc00257a8
c0019386:	e8 ad 67 00 00       	call   c001fb38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	83 ec 04             	sub    esp,0x4
c0019391:	68 7c 37 02 c0       	push   0xc002377c
c0019396:	68 a8 57 02 c0       	push   0xc00257a8
c001939b:	68 f8 fa 01 c0       	push   0xc001faf8
c00193a0:	e8 04 5c ff ff       	call   c000efa9 <__cxa_atexit>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 9c 57 02 c0       	push   0xc002579c
c00193b0:	e8 83 67 00 00       	call   c001fb38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	83 ec 04             	sub    esp,0x4
c00193bb:	68 7c 37 02 c0       	push   0xc002377c
c00193c0:	68 9c 57 02 c0       	push   0xc002579c
c00193c5:	68 f8 fa 01 c0       	push   0xc001faf8
c00193ca:	e8 da 5b ff ff       	call   c000efa9 <__cxa_atexit>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	68 90 57 02 c0       	push   0xc0025790
c00193da:	e8 59 67 00 00       	call   c001fb38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	83 ec 04             	sub    esp,0x4
c00193e5:	68 7c 37 02 c0       	push   0xc002377c
c00193ea:	68 90 57 02 c0       	push   0xc0025790
c00193ef:	68 f8 fa 01 c0       	push   0xc001faf8
c00193f4:	e8 b0 5b ff ff       	call   c000efa9 <__cxa_atexit>
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	90                   	nop
c00193fd:	83 c4 0c             	add    esp,0xc
c0019400:	c3                   	ret    

c0019401 <_GLOBAL__sub_I_kernelProcess>:
c0019401:	83 ec 0c             	sub    esp,0xc
c0019404:	83 ec 08             	sub    esp,0x8
c0019407:	68 ff ff 00 00       	push   0xffff
c001940c:	6a 01                	push   0x1
c001940e:	e8 53 ff ff ff       	call   c0019366 <__static_initialization_and_destruction_0(int, int)>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	83 c4 0c             	add    esp,0xc
c0019419:	c3                   	ret    

c001941a <Vm::vm8086EntryPoint(void*)>:
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	e8 0c f4 ff ff       	call   c001882e <unlockScheduler()>
c0019422:	fb                   	sti    
c0019423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019428:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001942c:	52                   	push   edx
c001942d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019431:	52                   	push   edx
c0019432:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019436:	52                   	push   edx
c0019437:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001943b:	50                   	push   eax
c001943c:	e8 26 6e fe ff       	call   c0000267 <goToVM86>
c0019441:	83 c4 1c             	add    esp,0x1c
c0019444:	c3                   	ret    

c0019445 <Vm::inbv(unsigned short)>:
c0019445:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019449:	ec                   	in     al,dx
c001944a:	c3                   	ret    

c001944b <Vm::outbv(unsigned short, unsigned char)>:
c001944b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001944f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019453:	ee                   	out    dx,al
c0019454:	c3                   	ret    

c0019455 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019455:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001945a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001945f:	c1 e0 04             	shl    eax,0x4
c0019462:	01 d0                	add    eax,edx
c0019464:	c3                   	ret    

c0019465 <Vm::getSegment(unsigned int)>:
c0019465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019469:	c1 e8 10             	shr    eax,0x10
c001946c:	c3                   	ret    

c001946d <Vm::getOffset(unsigned int)>:
c001946d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019471:	c3                   	ret    

c0019472 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019472:	55                   	push   ebp
c0019473:	57                   	push   edi
c0019474:	56                   	push   esi
c0019475:	53                   	push   ebx
c0019476:	83 ec 2c             	sub    esp,0x2c
c0019479:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001947d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019481:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019485:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019489:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001948d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019491:	e8 96 f3 ff ff       	call   c001882c <lockScheduler()>
c0019496:	68 80 00 00 00       	push   0x80
c001949b:	6a 00                	push   0x0
c001949d:	68 1a 94 01 c0       	push   0xc001941a
c00194a2:	55                   	push   ebp
c00194a3:	e8 ae f4 ff ff       	call   c0018956 <Process::createThread(void (*)(void*), void*, int)>
c00194a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194ac:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00194b0:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00194b4:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00194b8:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00194bc:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00194c0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00194c7:	e8 52 5b ff ff       	call   c000f01e <operator new(unsigned long)>
c00194cc:	83 c4 0c             	add    esp,0xc
c00194cf:	89 c3                	mov    ebx,eax
c00194d1:	55                   	push   ebp
c00194d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00194d6:	50                   	push   eax
c00194d7:	e8 60 61 ff ff       	call   c000f63c <File::File(char const*, Process*)>
c00194dc:	83 c4 0c             	add    esp,0xc
c00194df:	8d 44 24 17          	lea    eax,[esp+0x17]
c00194e3:	50                   	push   eax
c00194e4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194e8:	50                   	push   eax
c00194e9:	53                   	push   ebx
c00194ea:	e8 5d 64 ff ff       	call   c000f94c <File::stat(unsigned long long*, bool*)>
c00194ef:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	84 d2                	test   dl,dl
c00194f8:	74 1c                	je     c0019516 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00194fa:	83 ec 0c             	sub    esp,0xc
c00194fd:	68 d7 2d 02 c0       	push   0xc0022dd7
c0019502:	e8 d1 c3 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0019507:	e8 22 f3 ff ff       	call   c001882e <unlockScheduler()>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	31 d2                	xor    edx,edx
c0019511:	e9 81 00 00 00       	jmp    c0019597 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019516:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001951a:	51                   	push   ecx
c001951b:	51                   	push   ecx
c001951c:	6a 01                	push   0x1
c001951e:	53                   	push   ebx
c001951f:	e8 7c 61 ff ff       	call   c000f6a0 <File::open(FileOpenMode)>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	85 c0                	test   eax,eax
c0019529:	74 1b                	je     c0019546 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	68 f0 2d 02 c0       	push   0xc0022df0
c0019533:	e8 a0 c3 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c0019538:	e8 f1 f2 ff ff       	call   c001882e <unlockScheduler()>
c001953d:	83 c4 10             	add    esp,0x10
c0019540:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019544:	eb 51                	jmp    c0019597 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019546:	83 ec 0c             	sub    esp,0xc
c0019549:	0f b7 ff             	movzx  edi,di
c001954c:	6a 07                	push   0x7
c001954e:	0f b7 f6             	movzx  esi,si
c0019551:	68 00 01 00 00       	push   0x100
c0019556:	6a 00                	push   0x0
c0019558:	6a 00                	push   0x0
c001955a:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019560:	e8 95 55 ff ff       	call   c000eafa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019565:	83 c4 18             	add    esp,0x18
c0019568:	57                   	push   edi
c0019569:	56                   	push   esi
c001956a:	e8 e6 fe ff ff       	call   c0019455 <Vm::realToLinear(unsigned short, unsigned short)>
c001956f:	5a                   	pop    edx
c0019570:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019572:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019576:	51                   	push   ecx
c0019577:	50                   	push   eax
c0019578:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001957c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019580:	53                   	push   ebx
c0019581:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019584:	83 c4 14             	add    esp,0x14
c0019587:	53                   	push   ebx
c0019588:	e8 71 61 ff ff       	call   c000f6fe <File::close()>
c001958d:	e8 9c f2 ff ff       	call   c001882e <unlockScheduler()>
c0019592:	83 c4 10             	add    esp,0x10
c0019595:	b2 01                	mov    dl,0x1
c0019597:	83 c4 2c             	add    esp,0x2c
c001959a:	88 d0                	mov    al,dl
c001959c:	5b                   	pop    ebx
c001959d:	5e                   	pop    esi
c001959e:	5f                   	pop    edi
c001959f:	5d                   	pop    ebp
c00195a0:	c3                   	ret    

c00195a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00195a1:	57                   	push   edi
c00195a2:	56                   	push   esi
c00195a3:	53                   	push   ebx
c00195a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195b0:	83 e8 06             	sub    eax,0x6
c00195b3:	0f b7 c0             	movzx  eax,ax
c00195b6:	50                   	push   eax
c00195b7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00195bc:	50                   	push   eax
c00195bd:	e8 93 fe ff ff       	call   c0019455 <Vm::realToLinear(unsigned short, unsigned short)>
c00195c2:	5a                   	pop    edx
c00195c3:	5e                   	pop    esi
c00195c4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00195c7:	8d 56 fa             	lea    edx,[esi-0x6]
c00195ca:	81 e2 ff ff 00 00    	and    edx,0xffff
c00195d0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00195d3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00195d6:	83 c2 02             	add    edx,0x2
c00195d9:	66 89 10             	mov    WORD PTR [eax],dx
c00195dc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00195df:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00195e3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00195e6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00195ea:	89 d6                	mov    esi,edx
c00195ec:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195f2:	66 81 e6 ff fd       	and    si,0xfdff
c00195f7:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00195fb:	74 07                	je     c0019604 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00195fd:	89 d6                	mov    esi,edx
c00195ff:	66 81 ce 00 02       	or     si,0x200
c0019604:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001960d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019611:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019619:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001961c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019624:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019627:	5b                   	pop    ebx
c0019628:	5e                   	pop    esi
c0019629:	5f                   	pop    edi
c001962a:	c3                   	ret    

c001962b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001962b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019630:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019635:	c1 e0 04             	shl    eax,0x4
c0019638:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001963b:	c3                   	ret    

c001963c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001963c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019641:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019646:	c1 e0 04             	shl    eax,0x4
c0019649:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001964d:	c3                   	ret    

c001964e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001964e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019653:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019658:	c1 e0 04             	shl    eax,0x4
c001965b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001965e:	c3                   	ret    

c001965f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001965f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019664:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019669:	c1 e0 04             	shl    eax,0x4
c001966c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019670:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019673:	c3                   	ret    

c0019674 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019674:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019679:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001967e:	c1 e0 04             	shl    eax,0x4
c0019681:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019685:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019689:	c3                   	ret    

c001968a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001968a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001968f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019694:	c1 e0 04             	shl    eax,0x4
c0019697:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001969b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001969e:	c3                   	ret    

c001969f <Vm::faultHandler(regs*)>:
c001969f:	55                   	push   ebp
c00196a0:	57                   	push   edi
c00196a1:	56                   	push   esi
c00196a2:	53                   	push   ebx
c00196a3:	83 ec 1c             	sub    esp,0x1c
c00196a6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196ad:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00196b1:	0f b7 f0             	movzx  esi,ax
c00196b4:	52                   	push   edx
c00196b5:	0f b7 c0             	movzx  eax,ax
c00196b8:	50                   	push   eax
c00196b9:	e8 97 fd ff ff       	call   c0019455 <Vm::realToLinear(unsigned short, unsigned short)>
c00196be:	5a                   	pop    edx
c00196bf:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00196c2:	59                   	pop    ecx
c00196c3:	89 c7                	mov    edi,eax
c00196c5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196d5:	0f b7 c5             	movzx  eax,bp
c00196d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00196e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00196e4:	e8 6c fd ff ff       	call   c0019455 <Vm::realToLinear(unsigned short, unsigned short)>
c00196e9:	5a                   	pop    edx
c00196ea:	59                   	pop    ecx
c00196eb:	b1 06                	mov    cl,0x6
c00196ed:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196f2:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00196f7:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00196fa:	80 fa 9d             	cmp    dl,0x9d
c00196fd:	0f 84 1d 02 00 00    	je     c0019920 <Vm::faultHandler(regs*)+0x281>
c0019703:	0f 87 8e 00 00 00    	ja     c0019797 <Vm::faultHandler(regs*)+0xf8>
c0019709:	80 fa 66             	cmp    dl,0x66
c001970c:	0f 84 89 01 00 00    	je     c001989b <Vm::faultHandler(regs*)+0x1fc>
c0019712:	77 44                	ja     c0019758 <Vm::faultHandler(regs*)+0xb9>
c0019714:	80 fa 36             	cmp    dl,0x36
c0019717:	0f 84 74 01 00 00    	je     c0019891 <Vm::faultHandler(regs*)+0x1f2>
c001971d:	77 1a                	ja     c0019739 <Vm::faultHandler(regs*)+0x9a>
c001971f:	80 fa 26             	cmp    dl,0x26
c0019722:	0f 84 4b 01 00 00    	je     c0019873 <Vm::faultHandler(regs*)+0x1d4>
c0019728:	80 fa 2e             	cmp    dl,0x2e
c001972b:	0f 85 4a 05 00 00    	jne    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c0019731:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019734:	31 c9                	xor    ecx,ecx
c0019736:	47                   	inc    edi
c0019737:	eb be                	jmp    c00196f7 <Vm::faultHandler(regs*)+0x58>
c0019739:	80 fa 64             	cmp    dl,0x64
c001973c:	0f 84 3b 01 00 00    	je     c001987d <Vm::faultHandler(regs*)+0x1de>
c0019742:	0f 87 3f 01 00 00    	ja     c0019887 <Vm::faultHandler(regs*)+0x1e8>
c0019748:	80 fa 3e             	cmp    dl,0x3e
c001974b:	0f 85 2a 05 00 00    	jne    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c0019751:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019754:	b1 01                	mov    cl,0x1
c0019756:	eb de                	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c0019758:	80 fa 6d             	cmp    dl,0x6d
c001975b:	0f 84 bf 02 00 00    	je     c0019a20 <Vm::faultHandler(regs*)+0x381>
c0019761:	77 17                	ja     c001977a <Vm::faultHandler(regs*)+0xdb>
c0019763:	80 fa 67             	cmp    dl,0x67
c0019766:	0f 84 3c 01 00 00    	je     c00198a8 <Vm::faultHandler(regs*)+0x209>
c001976c:	80 fa 6c             	cmp    dl,0x6c
c001976f:	0f 84 5d 02 00 00    	je     c00199d2 <Vm::faultHandler(regs*)+0x333>
c0019775:	e9 01 05 00 00       	jmp    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c001977a:	80 fa 6f             	cmp    dl,0x6f
c001977d:	0f 84 8b 03 00 00    	je     c0019b0e <Vm::faultHandler(regs*)+0x46f>
c0019783:	0f 82 0f 03 00 00    	jb     c0019a98 <Vm::faultHandler(regs*)+0x3f9>
c0019789:	80 fa 9c             	cmp    dl,0x9c
c001978c:	0f 84 23 01 00 00    	je     c00198b5 <Vm::faultHandler(regs*)+0x216>
c0019792:	e9 e4 04 00 00       	jmp    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c0019797:	80 fa ec             	cmp    dl,0xec
c001979a:	0f 84 7f 04 00 00    	je     c0019c1f <Vm::faultHandler(regs*)+0x580>
c00197a0:	77 7b                	ja     c001981d <Vm::faultHandler(regs*)+0x17e>
c00197a2:	80 fa e4             	cmp    dl,0xe4
c00197a5:	0f 84 fe 03 00 00    	je     c0019ba9 <Vm::faultHandler(regs*)+0x50a>
c00197ab:	77 53                	ja     c0019800 <Vm::faultHandler(regs*)+0x161>
c00197ad:	80 fa cd             	cmp    dl,0xcd
c00197b0:	0f 84 cd 01 00 00    	je     c0019983 <Vm::faultHandler(regs*)+0x2e4>
c00197b6:	80 fa cf             	cmp    dl,0xcf
c00197b9:	0f 85 bc 04 00 00    	jne    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c00197bf:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00197c2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00197c5:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00197c9:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00197cc:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00197d0:	81 ca 00 02 02 00    	or     edx,0x20200
c00197d6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00197d9:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00197dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197e3:	66 c1 e8 09          	shr    ax,0x9
c00197e7:	83 e0 01             	and    eax,0x1
c00197ea:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00197ed:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197f0:	83 c0 06             	add    eax,0x6
c00197f3:	25 ff ff 00 00       	and    eax,0xffff
c00197f8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00197fb:	e9 77 04 00 00       	jmp    c0019c77 <Vm::faultHandler(regs*)+0x5d8>
c0019800:	80 fa e6             	cmp    dl,0xe6
c0019803:	0f 84 ea 03 00 00    	je     c0019bf3 <Vm::faultHandler(regs*)+0x554>
c0019809:	0f 82 b6 03 00 00    	jb     c0019bc5 <Vm::faultHandler(regs*)+0x526>
c001980f:	80 fa e7             	cmp    dl,0xe7
c0019812:	0f 84 f2 03 00 00    	je     c0019c0a <Vm::faultHandler(regs*)+0x56b>
c0019818:	e9 5e 04 00 00       	jmp    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c001981d:	80 fa ef             	cmp    dl,0xef
c0019820:	0f 84 3c 04 00 00    	je     c0019c62 <Vm::faultHandler(regs*)+0x5c3>
c0019826:	77 28                	ja     c0019850 <Vm::faultHandler(regs*)+0x1b1>
c0019828:	80 fa ed             	cmp    dl,0xed
c001982b:	0f 84 0a 04 00 00    	je     c0019c3b <Vm::faultHandler(regs*)+0x59c>
c0019831:	80 fa ee             	cmp    dl,0xee
c0019834:	0f 85 41 04 00 00    	jne    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c001983a:	50                   	push   eax
c001983b:	50                   	push   eax
c001983c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019840:	50                   	push   eax
c0019841:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019845:	50                   	push   eax
c0019846:	e8 00 fc ff ff       	call   c001944b <Vm::outbv(unsigned short, unsigned char)>
c001984b:	e9 0a 04 00 00       	jmp    c0019c5a <Vm::faultHandler(regs*)+0x5bb>
c0019850:	80 fa fa             	cmp    dl,0xfa
c0019853:	0f 84 5d 01 00 00    	je     c00199b6 <Vm::faultHandler(regs*)+0x317>
c0019859:	80 fa fb             	cmp    dl,0xfb
c001985c:	0f 84 62 01 00 00    	je     c00199c4 <Vm::faultHandler(regs*)+0x325>
c0019862:	80 fa f3             	cmp    dl,0xf3
c0019865:	0f 85 10 04 00 00    	jne    c0019c7b <Vm::faultHandler(regs*)+0x5dc>
c001986b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001986e:	e9 c3 fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c0019873:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019876:	b1 02                	mov    cl,0x2
c0019878:	e9 b9 fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c001987d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019880:	b1 03                	mov    cl,0x3
c0019882:	e9 af fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c0019887:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001988a:	b1 04                	mov    cl,0x4
c001988c:	e9 a5 fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c0019891:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019894:	b1 05                	mov    cl,0x5
c0019896:	e9 9b fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c001989b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001989e:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00198a3:	e9 8e fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c00198a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198ab:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00198b0:	e9 81 fe ff ff       	jmp    c0019736 <Vm::faultHandler(regs*)+0x97>
c00198b5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00198b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00198bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198c1:	74 30                	je     c00198f3 <Vm::faultHandler(regs*)+0x254>
c00198c3:	83 e9 04             	sub    ecx,0x4
c00198c6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198cc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198d2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198d5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198de:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00198e2:	0f 84 8c 03 00 00    	je     c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c00198e8:	80 ce 02             	or     dh,0x2
c00198eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198ee:	e9 81 03 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c00198f3:	83 e9 02             	sub    ecx,0x2
c00198f6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198fc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198ff:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019903:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019909:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001990d:	74 05                	je     c0019914 <Vm::faultHandler(regs*)+0x275>
c001990f:	80 ce 02             	or     dh,0x2
c0019912:	eb 03                	jmp    c0019917 <Vm::faultHandler(regs*)+0x278>
c0019914:	80 e6 fd             	and    dh,0xfd
c0019917:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001991b:	e9 54 03 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019920:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019925:	74 2a                	je     c0019951 <Vm::faultHandler(regs*)+0x2b2>
c0019927:	8b 10                	mov    edx,DWORD PTR [eax]
c0019929:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001992f:	81 ca 00 02 02 00    	or     edx,0x20200
c0019935:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019938:	8b 00                	mov    eax,DWORD PTR [eax]
c001993a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019940:	c1 e8 09             	shr    eax,0x9
c0019943:	83 e0 01             	and    eax,0x1
c0019946:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019949:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001994c:	83 c0 04             	add    eax,0x4
c001994f:	eb 25                	jmp    c0019976 <Vm::faultHandler(regs*)+0x2d7>
c0019951:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019954:	81 ca 00 02 02 00    	or     edx,0x20200
c001995a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001995d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019960:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019966:	66 c1 e8 09          	shr    ax,0x9
c001996a:	83 e0 01             	and    eax,0x1
c001996d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019970:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019973:	83 c0 02             	add    eax,0x2
c0019976:	25 ff ff 00 00       	and    eax,0xffff
c001997b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001997e:	e9 f1 02 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019983:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019987:	3c ff                	cmp    al,0xff
c0019989:	75 10                	jne    c001999b <Vm::faultHandler(regs*)+0x2fc>
c001998b:	83 ec 0c             	sub    esp,0xc
c001998e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019991:	e8 8c f9 ff ff       	call   c0019322 <Thr::terminateFromIRQ(int)>
c0019996:	e9 c2 02 00 00       	jmp    c0019c5d <Vm::faultHandler(regs*)+0x5be>
c001999b:	83 ec 0c             	sub    esp,0xc
c001999e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199a6:	57                   	push   edi
c00199a7:	50                   	push   eax
c00199a8:	53                   	push   ebx
c00199a9:	e8 f3 fb ff ff       	call   c00195a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00199ae:	83 c4 20             	add    esp,0x20
c00199b1:	e9 c1 02 00 00       	jmp    c0019c77 <Vm::faultHandler(regs*)+0x5d8>
c00199b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199bb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00199bf:	e9 b0 02 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c00199c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199c9:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00199cd:	e9 a2 02 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c00199d2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199d7:	74 0d                	je     c00199e6 <Vm::faultHandler(regs*)+0x347>
c00199d9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199e0:	0f 87 e9 02 00 00    	ja     c0019ccf <Vm::faultHandler(regs*)+0x630>
c00199e6:	83 ec 0c             	sub    esp,0xc
c00199e9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00199ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199f0:	50                   	push   eax
c00199f1:	e8 4f fa ff ff       	call   c0019445 <Vm::inbv(unsigned short)>
c00199f6:	83 c4 0c             	add    esp,0xc
c00199f9:	0f b6 c0             	movzx  eax,al
c00199fc:	0f b7 c9             	movzx  ecx,cx
c00199ff:	50                   	push   eax
c0019a00:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019a04:	50                   	push   eax
c0019a05:	51                   	push   ecx
c0019a06:	e8 54 fc ff ff       	call   c001965f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019a0b:	83 c4 10             	add    esp,0x10
c0019a0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a11:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a15:	74 03                	je     c0019a1a <Vm::faultHandler(regs*)+0x37b>
c0019a17:	48                   	dec    eax
c0019a18:	eb 01                	jmp    c0019a1b <Vm::faultHandler(regs*)+0x37c>
c0019a1a:	40                   	inc    eax
c0019a1b:	0f b7 c0             	movzx  eax,ax
c0019a1e:	eb 70                	jmp    c0019a90 <Vm::faultHandler(regs*)+0x3f1>
c0019a20:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a23:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019a26:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a2b:	74 0c                	je     c0019a39 <Vm::faultHandler(regs*)+0x39a>
c0019a2d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019a33:	0f 87 96 02 00 00    	ja     c0019ccf <Vm::faultHandler(regs*)+0x630>
c0019a39:	0f b7 c9             	movzx  ecx,cx
c0019a3c:	0f b7 f6             	movzx  esi,si
c0019a3f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a42:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a47:	74 20                	je     c0019a69 <Vm::faultHandler(regs*)+0x3ca>
c0019a49:	ed                   	in     eax,dx
c0019a4a:	55                   	push   ebp
c0019a4b:	50                   	push   eax
c0019a4c:	51                   	push   ecx
c0019a4d:	56                   	push   esi
c0019a4e:	e8 37 fc ff ff       	call   c001968a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a5d:	74 05                	je     c0019a64 <Vm::faultHandler(regs*)+0x3c5>
c0019a5f:	83 e8 04             	sub    eax,0x4
c0019a62:	eb 27                	jmp    c0019a8b <Vm::faultHandler(regs*)+0x3ec>
c0019a64:	83 c0 04             	add    eax,0x4
c0019a67:	eb 22                	jmp    c0019a8b <Vm::faultHandler(regs*)+0x3ec>
c0019a69:	66 ed                	in     ax,dx
c0019a6b:	0f b7 c0             	movzx  eax,ax
c0019a6e:	57                   	push   edi
c0019a6f:	50                   	push   eax
c0019a70:	51                   	push   ecx
c0019a71:	56                   	push   esi
c0019a72:	e8 fd fb ff ff       	call   c0019674 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a81:	74 05                	je     c0019a88 <Vm::faultHandler(regs*)+0x3e9>
c0019a83:	83 e8 02             	sub    eax,0x2
c0019a86:	eb 03                	jmp    c0019a8b <Vm::faultHandler(regs*)+0x3ec>
c0019a88:	83 c0 02             	add    eax,0x2
c0019a8b:	25 ff ff 00 00       	and    eax,0xffff
c0019a90:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019a93:	e9 dc 01 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019a98:	49                   	dec    ecx
c0019a99:	80 f9 05             	cmp    cl,0x5
c0019a9c:	77 24                	ja     c0019ac2 <Vm::faultHandler(regs*)+0x423>
c0019a9e:	0f b6 c9             	movzx  ecx,cl
c0019aa1:	ff 24 8d 38 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd1c8]
c0019aa8:	0f b7 f5             	movzx  esi,bp
c0019aab:	eb 15                	jmp    c0019ac2 <Vm::faultHandler(regs*)+0x423>
c0019aad:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ab1:	eb 0f                	jmp    c0019ac2 <Vm::faultHandler(regs*)+0x423>
c0019ab3:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019ab7:	eb 09                	jmp    c0019ac2 <Vm::faultHandler(regs*)+0x423>
c0019ab9:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019abd:	eb 03                	jmp    c0019ac2 <Vm::faultHandler(regs*)+0x423>
c0019abf:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019ac2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ac5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019aca:	74 0b                	je     c0019ad7 <Vm::faultHandler(regs*)+0x438>
c0019acc:	3d ff ff 00 00       	cmp    eax,0xffff
c0019ad1:	0f 87 f8 01 00 00    	ja     c0019ccf <Vm::faultHandler(regs*)+0x630>
c0019ad7:	0f b7 c0             	movzx  eax,ax
c0019ada:	52                   	push   edx
c0019adb:	52                   	push   edx
c0019adc:	50                   	push   eax
c0019add:	56                   	push   esi
c0019ade:	e8 48 fb ff ff       	call   c001962b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019ae3:	59                   	pop    ecx
c0019ae4:	0f b6 c0             	movzx  eax,al
c0019ae7:	5e                   	pop    esi
c0019ae8:	50                   	push   eax
c0019ae9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019aed:	50                   	push   eax
c0019aee:	e8 58 f9 ff ff       	call   c001944b <Vm::outbv(unsigned short, unsigned char)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019af9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019afd:	74 03                	je     c0019b02 <Vm::faultHandler(regs*)+0x463>
c0019aff:	48                   	dec    eax
c0019b00:	eb 01                	jmp    c0019b03 <Vm::faultHandler(regs*)+0x464>
c0019b02:	40                   	inc    eax
c0019b03:	0f b7 c0             	movzx  eax,ax
c0019b06:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b09:	e9 66 01 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019b0e:	49                   	dec    ecx
c0019b0f:	80 f9 05             	cmp    cl,0x5
c0019b12:	77 1f                	ja     c0019b33 <Vm::faultHandler(regs*)+0x494>
c0019b14:	0f b6 c9             	movzx  ecx,cl
c0019b17:	ff 24 8d 50 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd1b0]
c0019b1e:	89 ee                	mov    esi,ebp
c0019b20:	eb 11                	jmp    c0019b33 <Vm::faultHandler(regs*)+0x494>
c0019b22:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019b25:	eb 0c                	jmp    c0019b33 <Vm::faultHandler(regs*)+0x494>
c0019b27:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b2a:	eb 07                	jmp    c0019b33 <Vm::faultHandler(regs*)+0x494>
c0019b2c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019b2f:	eb 02                	jmp    c0019b33 <Vm::faultHandler(regs*)+0x494>
c0019b31:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019b33:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019b36:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b3b:	74 0c                	je     c0019b49 <Vm::faultHandler(regs*)+0x4aa>
c0019b3d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b43:	0f 87 86 01 00 00    	ja     c0019ccf <Vm::faultHandler(regs*)+0x630>
c0019b49:	0f b7 d6             	movzx  edx,si
c0019b4c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019b4f:	0f b7 c1             	movzx  eax,cx
c0019b52:	81 e7 00 04 00 00    	and    edi,0x400
c0019b58:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019b5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b60:	74 1d                	je     c0019b7f <Vm::faultHandler(regs*)+0x4e0>
c0019b62:	55                   	push   ebp
c0019b63:	55                   	push   ebp
c0019b64:	50                   	push   eax
c0019b65:	52                   	push   edx
c0019b66:	e8 e3 fa ff ff       	call   c001964e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019b6b:	83 c4 10             	add    esp,0x10
c0019b6e:	89 f2                	mov    edx,esi
c0019b70:	ef                   	out    dx,eax
c0019b71:	85 ff                	test   edi,edi
c0019b73:	74 05                	je     c0019b7a <Vm::faultHandler(regs*)+0x4db>
c0019b75:	83 e9 04             	sub    ecx,0x4
c0019b78:	eb 21                	jmp    c0019b9b <Vm::faultHandler(regs*)+0x4fc>
c0019b7a:	83 c1 04             	add    ecx,0x4
c0019b7d:	eb 1c                	jmp    c0019b9b <Vm::faultHandler(regs*)+0x4fc>
c0019b7f:	55                   	push   ebp
c0019b80:	55                   	push   ebp
c0019b81:	50                   	push   eax
c0019b82:	52                   	push   edx
c0019b83:	e8 b4 fa ff ff       	call   c001963c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	89 f2                	mov    edx,esi
c0019b8d:	66 ef                	out    dx,ax
c0019b8f:	85 ff                	test   edi,edi
c0019b91:	74 05                	je     c0019b98 <Vm::faultHandler(regs*)+0x4f9>
c0019b93:	83 e9 02             	sub    ecx,0x2
c0019b96:	eb 03                	jmp    c0019b9b <Vm::faultHandler(regs*)+0x4fc>
c0019b98:	83 c1 02             	add    ecx,0x2
c0019b9b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019ba1:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019ba4:	e9 cb 00 00 00       	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019ba9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bb0:	83 ec 0c             	sub    esp,0xc
c0019bb3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bb7:	50                   	push   eax
c0019bb8:	e8 88 f8 ff ff       	call   c0019445 <Vm::inbv(unsigned short)>
c0019bbd:	0f b6 c0             	movzx  eax,al
c0019bc0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019bc3:	eb 3f                	jmp    c0019c04 <Vm::faultHandler(regs*)+0x565>
c0019bc5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bca:	74 07                	je     c0019bd3 <Vm::faultHandler(regs*)+0x534>
c0019bcc:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019bd0:	ed                   	in     eax,dx
c0019bd1:	eb 14                	jmp    c0019be7 <Vm::faultHandler(regs*)+0x548>
c0019bd3:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019bd6:	66 31 c9             	xor    cx,cx
c0019bd9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019bdc:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019be0:	66 ed                	in     ax,dx
c0019be2:	0f b7 c0             	movzx  eax,ax
c0019be5:	09 c8                	or     eax,ecx
c0019be7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019bea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019bee:	e9 84 00 00 00       	jmp    c0019c77 <Vm::faultHandler(regs*)+0x5d8>
c0019bf3:	52                   	push   edx
c0019bf4:	52                   	push   edx
c0019bf5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019bf9:	50                   	push   eax
c0019bfa:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bfe:	50                   	push   eax
c0019bff:	e8 47 f8 ff ff       	call   c001944b <Vm::outbv(unsigned short, unsigned char)>
c0019c04:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c08:	eb 53                	jmp    c0019c5d <Vm::faultHandler(regs*)+0x5be>
c0019c0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c0d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019c11:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c16:	74 03                	je     c0019c1b <Vm::faultHandler(regs*)+0x57c>
c0019c18:	ef                   	out    dx,eax
c0019c19:	eb cf                	jmp    c0019bea <Vm::faultHandler(regs*)+0x54b>
c0019c1b:	66 ef                	out    dx,ax
c0019c1d:	eb cb                	jmp    c0019bea <Vm::faultHandler(regs*)+0x54b>
c0019c1f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c26:	83 ec 0c             	sub    esp,0xc
c0019c29:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c2d:	50                   	push   eax
c0019c2e:	e8 12 f8 ff ff       	call   c0019445 <Vm::inbv(unsigned short)>
c0019c33:	0f b6 c0             	movzx  eax,al
c0019c36:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c39:	eb 1f                	jmp    c0019c5a <Vm::faultHandler(regs*)+0x5bb>
c0019c3b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c3e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c43:	74 03                	je     c0019c48 <Vm::faultHandler(regs*)+0x5a9>
c0019c45:	ed                   	in     eax,dx
c0019c46:	eb 0d                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x5b6>
c0019c48:	66 ed                	in     ax,dx
c0019c4a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019c4d:	0f b7 c0             	movzx  eax,ax
c0019c50:	66 31 d2             	xor    dx,dx
c0019c53:	09 d0                	or     eax,edx
c0019c55:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c58:	eb 1a                	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019c5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c5d:	83 c4 10             	add    esp,0x10
c0019c60:	eb 15                	jmp    c0019c77 <Vm::faultHandler(regs*)+0x5d8>
c0019c62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c65:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c68:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c6d:	74 03                	je     c0019c72 <Vm::faultHandler(regs*)+0x5d3>
c0019c6f:	ef                   	out    dx,eax
c0019c70:	eb 02                	jmp    c0019c74 <Vm::faultHandler(regs*)+0x5d5>
c0019c72:	66 ef                	out    dx,ax
c0019c74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c77:	b0 01                	mov    al,0x1
c0019c79:	eb 56                	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x632>
c0019c7b:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019c7f:	50                   	push   eax
c0019c80:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019c84:	50                   	push   eax
c0019c85:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019c89:	50                   	push   eax
c0019c8a:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019c8e:	50                   	push   eax
c0019c8f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019c93:	50                   	push   eax
c0019c94:	52                   	push   edx
c0019c95:	52                   	push   edx
c0019c96:	68 09 2e 02 c0       	push   0xc0022e09
c0019c9b:	e8 6d 54 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c0019ca0:	83 c4 20             	add    esp,0x20
c0019ca3:	83 ec 0c             	sub    esp,0xc
c0019ca6:	6a 60                	push   0x60
c0019ca8:	e8 98 f7 ff ff       	call   c0019445 <Vm::inbv(unsigned short)>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	3c 1c                	cmp    al,0x1c
c0019cb2:	74 04                	je     c0019cb8 <Vm::faultHandler(regs*)+0x619>
c0019cb4:	3c 5a                	cmp    al,0x5a
c0019cb6:	75 eb                	jne    c0019ca3 <Vm::faultHandler(regs*)+0x604>
c0019cb8:	3c 5a                	cmp    al,0x5a
c0019cba:	74 04                	je     c0019cc0 <Vm::faultHandler(regs*)+0x621>
c0019cbc:	3c 1c                	cmp    al,0x1c
c0019cbe:	75 0f                	jne    c0019ccf <Vm::faultHandler(regs*)+0x630>
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	6a 60                	push   0x60
c0019cc5:	e8 7b f7 ff ff       	call   c0019445 <Vm::inbv(unsigned short)>
c0019cca:	83 c4 10             	add    esp,0x10
c0019ccd:	eb e9                	jmp    c0019cb8 <Vm::faultHandler(regs*)+0x619>
c0019ccf:	31 c0                	xor    eax,eax
c0019cd1:	83 c4 1c             	add    esp,0x1c
c0019cd4:	5b                   	pop    ebx
c0019cd5:	5e                   	pop    esi
c0019cd6:	5f                   	pop    edi
c0019cd7:	5d                   	pop    ebp
c0019cd8:	c3                   	ret    
c0019cd9:	90                   	nop

c0019cda <FAT::getName()>:
c0019cda:	b8 68 2e 02 c0       	mov    eax,0xc0022e68
c0019cdf:	c3                   	ret    

c0019ce0 <FAT::tell(void*, unsigned long long*)>:
c0019ce0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019ce5:	75 06                	jne    c0019ced <FAT::tell(void*, unsigned long long*)+0xd>
c0019ce7:	b8 04 00 00 00       	mov    eax,0x4
c0019cec:	c3                   	ret    
c0019ced:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019cf2:	75 06                	jne    c0019cfa <FAT::tell(void*, unsigned long long*)+0x1a>
c0019cf4:	b8 04 00 00 00       	mov    eax,0x4
c0019cf9:	c3                   	ret    
c0019cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cfe:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019d01:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019d04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d08:	89 01                	mov    DWORD PTR [ecx],eax
c0019d0a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d0d:	b8 00 00 00 00       	mov    eax,0x0
c0019d12:	c3                   	ret    
c0019d13:	90                   	nop

c0019d14 <FAT::stat(void*, unsigned long long*)>:
c0019d14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d19:	75 06                	jne    c0019d21 <FAT::stat(void*, unsigned long long*)+0xd>
c0019d1b:	b8 04 00 00 00       	mov    eax,0x4
c0019d20:	c3                   	ret    
c0019d21:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d26:	75 06                	jne    c0019d2e <FAT::stat(void*, unsigned long long*)+0x1a>
c0019d28:	b8 04 00 00 00       	mov    eax,0x4
c0019d2d:	c3                   	ret    
c0019d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d32:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019d35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d3c:	89 01                	mov    DWORD PTR [ecx],eax
c0019d3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d41:	b8 00 00 00 00       	mov    eax,0x0
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <FAT::~FAT()>:
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c0019d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d54:	89 10                	mov    DWORD PTR [eax],edx
c0019d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d5a:	83 ec 0c             	sub    esp,0xc
c0019d5d:	50                   	push   eax
c0019d5e:	e8 d3 56 ff ff       	call   c000f436 <Filesystem::~Filesystem()>
c0019d63:	83 c4 10             	add    esp,0x10
c0019d66:	90                   	nop
c0019d67:	83 c4 0c             	add    esp,0xc
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <FAT::~FAT()>:
c0019d6c:	83 ec 0c             	sub    esp,0xc
c0019d6f:	83 ec 0c             	sub    esp,0xc
c0019d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d76:	e8 cd ff ff ff       	call   c0019d48 <FAT::~FAT()>
c0019d7b:	83 c4 10             	add    esp,0x10
c0019d7e:	83 ec 08             	sub    esp,0x8
c0019d81:	6a 08                	push   0x8
c0019d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d87:	e8 a1 52 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c0019d8c:	83 c4 10             	add    esp,0x10
c0019d8f:	83 c4 0c             	add    esp,0xc
c0019d92:	c3                   	ret    
c0019d93:	90                   	nop

c0019d94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019d94:	83 ec 1c             	sub    esp,0x1c
c0019d97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019d9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019da3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019da7:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0019dae:	83 f8 ff             	cmp    eax,0xffffffff
c0019db1:	75 34                	jne    c0019de7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019db3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019db7:	88 c2                	mov    dl,al
c0019db9:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0019dbe:	01 d0                	add    eax,edx
c0019dc0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019dc4:	8b 15 e0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257e0
c0019dca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019dce:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c0019dd5:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0019dda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019dde:	89 14 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],edx
c0019de5:	eb 17                	jmp    c0019dfe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019de7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019deb:	88 c2                	mov    dl,al
c0019ded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019df1:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0019df8:	01 d0                	add    eax,edx
c0019dfa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019dfe:	83 ec 04             	sub    esp,0x4
c0019e01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e09:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019e0d:	50                   	push   eax
c0019e0e:	e8 04 cd fe ff       	call   c0006b17 <f_getlabel>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e1a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e1f:	75 07                	jne    c0019e28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019e21:	b8 00 00 00 00       	mov    eax,0x0
c0019e26:	eb 05                	jmp    c0019e2d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019e28:	b8 01 00 00 00       	mov    eax,0x1
c0019e2d:	83 c4 1c             	add    esp,0x1c
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019e32:	57                   	push   edi
c0019e33:	83 ec 58             	sub    esp,0x58
c0019e36:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019e3e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e42:	b9 0f 00 00 00       	mov    ecx,0xf
c0019e47:	b8 00 00 00 00       	mov    eax,0x0
c0019e4c:	fc                   	cld    
c0019e4d:	89 d7                	mov    edi,edx
c0019e4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e51:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e55:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0019e5c:	83 f8 ff             	cmp    eax,0xffffffff
c0019e5f:	75 34                	jne    c0019e95 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019e61:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e65:	88 c2                	mov    dl,al
c0019e67:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0019e6c:	01 d0                	add    eax,edx
c0019e6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e72:	8b 15 e0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257e0
c0019e78:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e7c:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c0019e83:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0019e88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019e8c:	89 14 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],edx
c0019e93:	eb 17                	jmp    c0019eac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019e95:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e99:	88 c2                	mov    dl,al
c0019e9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e9f:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0019ea6:	01 d0                	add    eax,edx
c0019ea8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019eb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eb7:	50                   	push   eax
c0019eb8:	e8 53 69 fe ff       	call   c0000810 <strcat>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec7:	50                   	push   eax
c0019ec8:	e8 38 ce fe ff       	call   c0006d05 <f_setlabel>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019ed4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019ed9:	75 07                	jne    c0019ee2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019edb:	b8 00 00 00 00       	mov    eax,0x0
c0019ee0:	eb 05                	jmp    c0019ee7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019ee2:	b8 01 00 00 00       	mov    eax,0x1
c0019ee7:	83 c4 58             	add    esp,0x58
c0019eea:	5f                   	pop    edi
c0019eeb:	c3                   	ret    

c0019eec <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019eec:	83 ec 2c             	sub    esp,0x2c
c0019eef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019ef7:	83 ec 08             	sub    esp,0x8
c0019efa:	68 8c 2e 02 c0       	push   0xc0022e8c
c0019eff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f03:	e8 a2 68 fe ff       	call   c00007aa <strcmp>
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	85 c0                	test   eax,eax
c0019f0d:	0f 94 c0             	sete   al
c0019f10:	84 c0                	test   al,al
c0019f12:	74 0d                	je     c0019f21 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019f14:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f1c:	e9 a6 00 00 00       	jmp    c0019fc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f21:	83 ec 08             	sub    esp,0x8
c0019f24:	68 7e 2e 02 c0       	push   0xc0022e7e
c0019f29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f2d:	e8 78 68 fe ff       	call   c00007aa <strcmp>
c0019f32:	83 c4 10             	add    esp,0x10
c0019f35:	85 c0                	test   eax,eax
c0019f37:	0f 94 c0             	sete   al
c0019f3a:	84 c0                	test   al,al
c0019f3c:	74 0a                	je     c0019f48 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019f3e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f46:	eb 7f                	jmp    c0019fc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f48:	83 ec 08             	sub    esp,0x8
c0019f4b:	68 84 2e 02 c0       	push   0xc0022e84
c0019f50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f54:	e8 51 68 fe ff       	call   c00007aa <strcmp>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	0f 94 c0             	sete   al
c0019f61:	84 c0                	test   al,al
c0019f63:	74 0a                	je     c0019f6f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019f65:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f6d:	eb 58                	jmp    c0019fc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f6f:	83 ec 08             	sub    esp,0x8
c0019f72:	68 0c 02 02 c0       	push   0xc002020c
c0019f77:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f7b:	e8 2a 68 fe ff       	call   c00007aa <strcmp>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	85 c0                	test   eax,eax
c0019f85:	0f 94 c0             	sete   al
c0019f88:	84 c0                	test   al,al
c0019f8a:	74 0a                	je     c0019f96 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019f8c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019f94:	eb 31                	jmp    c0019fc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f96:	83 ec 08             	sub    esp,0x8
c0019f99:	68 8a 2e 02 c0       	push   0xc0022e8a
c0019f9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fa2:	e8 03 68 fe ff       	call   c00007aa <strcmp>
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	85 c0                	test   eax,eax
c0019fac:	0f 94 c0             	sete   al
c0019faf:	84 c0                	test   al,al
c0019fb1:	74 0a                	je     c0019fbd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019fb3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019fbb:	eb 0a                	jmp    c0019fc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019fbd:	b8 08 00 00 00       	mov    eax,0x8
c0019fc2:	e9 04 01 00 00       	jmp    c001a0cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019fc7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019fce:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019fd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fd7:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0019fde:	83 f8 ff             	cmp    eax,0xffffffff
c0019fe1:	75 34                	jne    c001a017 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019fe3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019fe7:	88 c2                	mov    dl,al
c0019fe9:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0019fee:	01 d0                	add    eax,edx
c0019ff0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019ff4:	8b 15 e0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257e0
c0019ffa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ffe:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c001a005:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c001a00a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a00e:	89 14 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],edx
c001a015:	eb 17                	jmp    c001a02e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a017:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a01b:	88 c2                	mov    dl,al
c001a01d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a021:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c001a028:	01 d0                	add    eax,edx
c001a02a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a02e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a032:	88 04 24             	mov    BYTE PTR [esp],al
c001a035:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a039:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a03d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a045:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a04a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a052:	83 ec 0c             	sub    esp,0xc
c001a055:	68 00 20 00 00       	push   0x2000
c001a05a:	e8 bd 1f ff ff       	call   c000c01c <malloc>
c001a05f:	83 c4 10             	add    esp,0x10
c001a062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a066:	68 00 20 00 00       	push   0x2000
c001a06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a06f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a073:	50                   	push   eax
c001a074:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a078:	50                   	push   eax
c001a079:	e8 d2 d0 fe ff       	call   c0007150 <f_mkfs>
c001a07e:	83 c4 10             	add    esp,0x10
c001a081:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a085:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a08a:	75 07                	jne    c001a093 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a08c:	b8 00 00 00 00       	mov    eax,0x0
c001a091:	eb 38                	jmp    c001a0cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a093:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a098:	75 17                	jne    c001a0b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	68 bc 2e 02 c0       	push   0xc0022ebc
c001a0a2:	e8 66 50 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	b8 09 00 00 00       	mov    eax,0x9
c001a0af:	eb 1a                	jmp    c001a0cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0b5:	83 ec 08             	sub    esp,0x8
c001a0b8:	50                   	push   eax
c001a0b9:	68 90 2e 02 c0       	push   0xc0022e90
c001a0be:	e8 4a 50 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	b8 01 00 00 00       	mov    eax,0x1
c001a0cb:	83 c4 2c             	add    esp,0x2c
c001a0ce:	c3                   	ret    
c001a0cf:	90                   	nop

c001a0d0 <FAT::tryMount(LogicalDisk*, int)>:
c001a0d0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a0d6:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c001a0db:	83 f8 14             	cmp    eax,0x14
c001a0de:	75 17                	jne    c001a0f7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	68 a2 2e 02 c0       	push   0xc0022ea2
c001a0e8:	e8 eb b7 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	b0 00                	mov    al,0x0
c001a0f2:	e9 d7 01 00 00       	jmp    c001a2ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a0f7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a0fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a104:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a10a:	3d 00 02 00 00       	cmp    eax,0x200
c001a10f:	74 07                	je     c001a118 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a111:	b0 00                	mov    al,0x0
c001a113:	e9 b6 01 00 00       	jmp    c001a2ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a118:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a120:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a127:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c001a12e:	83 f8 ff             	cmp    eax,0xffffffff
c001a131:	74 07                	je     c001a13a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a133:	b0 01                	mov    al,0x1
c001a135:	e9 94 01 00 00       	jmp    c001a2ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a13a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a144:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a14c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a153:	88 c2                	mov    dl,al
c001a155:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c001a15a:	01 d0                	add    eax,edx
c001a15c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a163:	8b 15 e0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257e0
c001a169:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a170:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c001a177:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c001a17c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a183:	89 14 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],edx
c001a18a:	83 ec 0c             	sub    esp,0xc
c001a18d:	68 54 02 00 00       	push   0x254
c001a192:	e8 85 1e ff ff       	call   c000c01c <malloc>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a1a1:	83 ec 04             	sub    esp,0x4
c001a1a4:	6a 00                	push   0x0
c001a1a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a1ad:	50                   	push   eax
c001a1ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a1b5:	e8 54 ab fe ff       	call   c0004d0e <f_mount>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a1c4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a1cc:	74 19                	je     c001a1e7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a1d8:	e8 5f 1e ff ff       	call   c000c03c <rfree>
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	b0 00                	mov    al,0x0
c001a1e2:	e9 e7 00 00 00       	jmp    c001a2ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a1e7:	83 ec 04             	sub    esp,0x4
c001a1ea:	68 00 01 00 00       	push   0x100
c001a1ef:	6a 00                	push   0x0
c001a1f1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a1f8:	50                   	push   eax
c001a1f9:	e8 bc 64 fe ff       	call   c00006ba <memset>
c001a1fe:	83 c4 10             	add    esp,0x10
c001a201:	83 ec 08             	sub    esp,0x8
c001a204:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a20b:	50                   	push   eax
c001a20c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a213:	50                   	push   eax
c001a214:	e8 f7 65 fe ff       	call   c0000810 <strcat>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	83 ec 08             	sub    esp,0x8
c001a21f:	68 b0 2e 02 c0       	push   0xc0022eb0
c001a224:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a22b:	50                   	push   eax
c001a22c:	e8 df 65 fe ff       	call   c0000810 <strcat>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	83 ec 04             	sub    esp,0x4
c001a237:	6a 01                	push   0x1
c001a239:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a240:	50                   	push   eax
c001a241:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a245:	50                   	push   eax
c001a246:	e8 25 ab fe ff       	call   c0004d70 <f_open>
c001a24b:	83 c4 10             	add    esp,0x10
c001a24e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a255:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a25c:	85 c0                	test   eax,eax
c001a25e:	74 0a                	je     c001a26a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a260:	78 2d                	js     c001a28f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a262:	83 e8 04             	sub    eax,0x4
c001a265:	83 f8 01             	cmp    eax,0x1
c001a268:	77 25                	ja     c001a28f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a26a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a272:	83 ec 0c             	sub    esp,0xc
c001a275:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a279:	50                   	push   eax
c001a27a:	e8 43 b6 fe ff       	call   c00058c2 <f_close>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	90                   	nop
c001a283:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a28b:	74 3a                	je     c001a2c7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a28d:	eb 2d                	jmp    c001a2bc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a28f:	83 ec 0c             	sub    esp,0xc
c001a292:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a299:	e8 9e 1d ff ff       	call   c000c03c <rfree>
c001a29e:	83 c4 10             	add    esp,0x10
c001a2a1:	83 ec 04             	sub    esp,0x4
c001a2a4:	6a 00                	push   0x0
c001a2a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2ad:	50                   	push   eax
c001a2ae:	6a 00                	push   0x0
c001a2b0:	e8 59 aa fe ff       	call   c0004d0e <f_mount>
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	b0 00                	mov    al,0x0
c001a2ba:	eb 12                	jmp    c001a2ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a2bc:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c001a2c1:	40                   	inc    eax
c001a2c2:	a3 e0 57 02 c0       	mov    ds:0xc00257e0,eax
c001a2c7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a2ce:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a2d4:	c3                   	ret    
c001a2d5:	90                   	nop

c001a2d6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a2d6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a2dc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a2e4:	74 0a                	je     c001a2f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a2e6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a2ee:	75 0a                	jne    c001a2fa <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a2f0:	b8 04 00 00 00       	mov    eax,0x4
c001a2f5:	e9 db 00 00 00       	jmp    c001a3d5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a2fa:	83 ec 08             	sub    esp,0x8
c001a2fd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a304:	50                   	push   eax
c001a305:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a30c:	e8 bb bb fe ff       	call   c0005ecc <f_readdir>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a31b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a321:	83 ec 0c             	sub    esp,0xc
c001a324:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a32b:	83 c0 1a             	add    eax,0x1a
c001a32e:	50                   	push   eax
c001a32f:	e8 a3 63 fe ff       	call   c00006d7 <strlen>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	ba 00 00 00 00       	mov    edx,0x0
c001a33c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a340:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a344:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a34b:	0f b6 c0             	movzx  eax,al
c001a34e:	83 e0 10             	and    eax,0x10
c001a351:	74 07                	je     c001a35a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001a353:	b8 02 00 00 00       	mov    eax,0x2
c001a358:	eb 05                	jmp    c001a35f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001a35a:	b8 01 00 00 00       	mov    eax,0x1
c001a35f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a363:	83 ec 08             	sub    esp,0x8
c001a366:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a36d:	83 c0 1a             	add    eax,0x1a
c001a370:	50                   	push   eax
c001a371:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a375:	83 c0 10             	add    eax,0x10
c001a378:	50                   	push   eax
c001a379:	e8 db 63 fe ff       	call   c0000759 <strcpy>
c001a37e:	83 c4 10             	add    esp,0x10
c001a381:	83 ec 04             	sub    esp,0x4
c001a384:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a38b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a38f:	50                   	push   eax
c001a390:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a397:	e8 e8 62 fe ff       	call   c0000684 <memcpy>
c001a39c:	83 c4 10             	add    esp,0x10
c001a39f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a3a6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a3ac:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a3b3:	84 c0                	test   al,al
c001a3b5:	75 07                	jne    c001a3be <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001a3b7:	b8 07 00 00 00       	mov    eax,0x7
c001a3bc:	eb 17                	jmp    c001a3d5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a3be:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a3c5:	85 c0                	test   eax,eax
c001a3c7:	75 07                	jne    c001a3d0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001a3c9:	b8 00 00 00 00       	mov    eax,0x0
c001a3ce:	eb 05                	jmp    c001a3d5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a3d0:	b8 01 00 00 00       	mov    eax,0x1
c001a3d5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a3db:	c3                   	ret    

c001a3dc <FAT::read(void*, unsigned long, void*, int*)>:
c001a3dc:	83 ec 1c             	sub    esp,0x1c
c001a3df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3e4:	74 07                	je     c001a3ed <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a3e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a3eb:	75 07                	jne    c001a3f4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a3ed:	b8 04 00 00 00       	mov    eax,0x4
c001a3f2:	eb 3d                	jmp    c001a431 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a3f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3f8:	50                   	push   eax
c001a3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a401:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a405:	e8 a2 ad fe ff       	call   c00051ac <f_read>
c001a40a:	83 c4 10             	add    esp,0x10
c001a40d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a411:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a415:	89 c2                	mov    edx,eax
c001a417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a41b:	89 10                	mov    DWORD PTR [eax],edx
c001a41d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a421:	85 c0                	test   eax,eax
c001a423:	75 07                	jne    c001a42c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a425:	b8 00 00 00 00       	mov    eax,0x0
c001a42a:	eb 05                	jmp    c001a431 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a42c:	b8 01 00 00 00       	mov    eax,0x1
c001a431:	83 c4 1c             	add    esp,0x1c
c001a434:	c3                   	ret    
c001a435:	90                   	nop

c001a436 <FAT::write(void*, unsigned long, void*, int*)>:
c001a436:	83 ec 1c             	sub    esp,0x1c
c001a439:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a43e:	74 07                	je     c001a447 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a440:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a445:	75 07                	jne    c001a44e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a447:	b8 04 00 00 00       	mov    eax,0x4
c001a44c:	eb 3d                	jmp    c001a48b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a44e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a452:	50                   	push   eax
c001a453:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a45b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a45f:	e8 c8 af fe ff       	call   c000542c <f_write>
c001a464:	83 c4 10             	add    esp,0x10
c001a467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a46b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a46f:	89 c2                	mov    edx,eax
c001a471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a475:	89 10                	mov    DWORD PTR [eax],edx
c001a477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a47b:	85 c0                	test   eax,eax
c001a47d:	75 07                	jne    c001a486 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a47f:	b8 00 00 00 00       	mov    eax,0x0
c001a484:	eb 05                	jmp    c001a48b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a486:	b8 01 00 00 00       	mov    eax,0x1
c001a48b:	83 c4 1c             	add    esp,0x1c
c001a48e:	c3                   	ret    
c001a48f:	90                   	nop

c001a490 <FAT::close(void*)>:
c001a490:	83 ec 1c             	sub    esp,0x1c
c001a493:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a498:	75 07                	jne    c001a4a1 <FAT::close(void*)+0x11>
c001a49a:	b8 04 00 00 00       	mov    eax,0x4
c001a49f:	eb 36                	jmp    c001a4d7 <FAT::close(void*)+0x47>
c001a4a1:	83 ec 0c             	sub    esp,0xc
c001a4a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4a8:	e8 15 b4 fe ff       	call   c00058c2 <f_close>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b4:	83 ec 0c             	sub    esp,0xc
c001a4b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4bb:	e8 6c 1b ff ff       	call   c000c02c <free>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4c7:	85 c0                	test   eax,eax
c001a4c9:	75 07                	jne    c001a4d2 <FAT::close(void*)+0x42>
c001a4cb:	b8 00 00 00 00       	mov    eax,0x0
c001a4d0:	eb 05                	jmp    c001a4d7 <FAT::close(void*)+0x47>
c001a4d2:	b8 01 00 00 00       	mov    eax,0x1
c001a4d7:	83 c4 1c             	add    esp,0x1c
c001a4da:	c3                   	ret    
c001a4db:	90                   	nop

c001a4dc <FAT::closeDir(void*)>:
c001a4dc:	83 ec 1c             	sub    esp,0x1c
c001a4df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4e4:	75 07                	jne    c001a4ed <FAT::closeDir(void*)+0x11>
c001a4e6:	b8 04 00 00 00       	mov    eax,0x4
c001a4eb:	eb 36                	jmp    c001a523 <FAT::closeDir(void*)+0x47>
c001a4ed:	83 ec 0c             	sub    esp,0xc
c001a4f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4f4:	e8 b1 b9 fe ff       	call   c0005eaa <f_closedir>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a507:	e8 20 1b ff ff       	call   c000c02c <free>
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a513:	85 c0                	test   eax,eax
c001a515:	75 07                	jne    c001a51e <FAT::closeDir(void*)+0x42>
c001a517:	b8 00 00 00 00       	mov    eax,0x0
c001a51c:	eb 05                	jmp    c001a523 <FAT::closeDir(void*)+0x47>
c001a51e:	b8 01 00 00 00       	mov    eax,0x1
c001a523:	83 c4 1c             	add    esp,0x1c
c001a526:	c3                   	ret    
c001a527:	90                   	nop

c001a528 <FAT::seek(void*, unsigned long long)>:
c001a528:	83 ec 2c             	sub    esp,0x2c
c001a52b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a52f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a533:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a53b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a540:	75 07                	jne    c001a549 <FAT::seek(void*, unsigned long long)+0x21>
c001a542:	b8 04 00 00 00       	mov    eax,0x4
c001a547:	eb 2f                	jmp    c001a578 <FAT::seek(void*, unsigned long long)+0x50>
c001a549:	83 ec 04             	sub    esp,0x4
c001a54c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a550:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a554:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a558:	e8 94 b3 fe ff       	call   c00058f1 <f_lseek>
c001a55d:	83 c4 10             	add    esp,0x10
c001a560:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a564:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a568:	85 c0                	test   eax,eax
c001a56a:	75 07                	jne    c001a573 <FAT::seek(void*, unsigned long long)+0x4b>
c001a56c:	b8 00 00 00 00       	mov    eax,0x0
c001a571:	eb 05                	jmp    c001a578 <FAT::seek(void*, unsigned long long)+0x50>
c001a573:	b8 01 00 00 00       	mov    eax,0x1
c001a578:	83 c4 2c             	add    esp,0x2c
c001a57b:	c3                   	ret    

c001a57c <fatWrapperReadDisk>:
c001a57c:	83 ec 1c             	sub    esp,0x1c
c001a57f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a583:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a587:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a58b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a58e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a592:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a596:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a59b:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c001a5a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5a6:	83 ec 0c             	sub    esp,0xc
c001a5a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5ad:	52                   	push   edx
c001a5ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5b6:	50                   	push   eax
c001a5b7:	e8 8e 81 ff ff       	call   c001274a <LogicalDisk::read(unsigned long long, int, void*)>
c001a5bc:	83 c4 20             	add    esp,0x20
c001a5bf:	83 c4 1c             	add    esp,0x1c
c001a5c2:	c3                   	ret    

c001a5c3 <fatWrapperWriteDisk>:
c001a5c3:	83 ec 1c             	sub    esp,0x1c
c001a5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5dd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5e2:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c001a5e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5ed:	83 ec 0c             	sub    esp,0xc
c001a5f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5f4:	52                   	push   edx
c001a5f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5fd:	50                   	push   eax
c001a5fe:	e8 b3 81 ff ff       	call   c00127b6 <LogicalDisk::write(unsigned long long, int, void*)>
c001a603:	83 c4 20             	add    esp,0x20
c001a606:	83 c4 1c             	add    esp,0x1c
c001a609:	c3                   	ret    

c001a60a <fatWrapperIoctl>:
c001a60a:	53                   	push   ebx
c001a60b:	83 ec 28             	sub    esp,0x28
c001a60e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a612:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a616:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a61a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a61e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a623:	75 31                	jne    c001a656 <fatWrapperIoctl+0x4c>
c001a625:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a629:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a62d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a632:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c001a639:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a63f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a645:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a649:	66 89 02             	mov    WORD PTR [edx],ax
c001a64c:	b8 00 00 00 00       	mov    eax,0x0
c001a651:	e9 b2 00 00 00       	jmp    c001a708 <fatWrapperIoctl+0xfe>
c001a656:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a65b:	75 6a                	jne    c001a6c7 <fatWrapperIoctl+0xbd>
c001a65d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a661:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a665:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a66a:	8b 04 85 60 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6a0]
c001a671:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a677:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a67d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a683:	89 c8                	mov    eax,ecx
c001a685:	89 da                	mov    edx,ebx
c001a687:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a68b:	c1 e0 0a             	shl    eax,0xa
c001a68e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a693:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c001a69a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a6a0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a6a6:	89 cb                	mov    ebx,ecx
c001a6a8:	c1 fb 1f             	sar    ebx,0x1f
c001a6ab:	53                   	push   ebx
c001a6ac:	51                   	push   ecx
c001a6ad:	52                   	push   edx
c001a6ae:	50                   	push   eax
c001a6af:	e8 f8 4a 00 00       	call   c001f1ac <__udivdi3>
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a6bb:	89 01                	mov    DWORD PTR [ecx],eax
c001a6bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6c0:	b8 00 00 00 00       	mov    eax,0x0
c001a6c5:	eb 41                	jmp    c001a708 <fatWrapperIoctl+0xfe>
c001a6c7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a6cc:	75 07                	jne    c001a6d5 <fatWrapperIoctl+0xcb>
c001a6ce:	b8 00 00 00 00       	mov    eax,0x0
c001a6d3:	eb 33                	jmp    c001a708 <fatWrapperIoctl+0xfe>
c001a6d5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a6da:	75 19                	jne    c001a6f5 <fatWrapperIoctl+0xeb>
c001a6dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6e8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a6ee:	b8 00 00 00 00       	mov    eax,0x0
c001a6f3:	eb 13                	jmp    c001a708 <fatWrapperIoctl+0xfe>
c001a6f5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a6fa:	75 07                	jne    c001a703 <fatWrapperIoctl+0xf9>
c001a6fc:	b8 00 00 00 00       	mov    eax,0x0
c001a701:	eb 05                	jmp    c001a708 <fatWrapperIoctl+0xfe>
c001a703:	b8 04 00 00 00       	mov    eax,0x4
c001a708:	83 c4 28             	add    esp,0x28
c001a70b:	5b                   	pop    ebx
c001a70c:	c3                   	ret    
c001a70d:	90                   	nop

c001a70e <FAT::FAT()>:
c001a70e:	83 ec 1c             	sub    esp,0x1c
c001a711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a715:	83 ec 0c             	sub    esp,0xc
c001a718:	50                   	push   eax
c001a719:	e8 f4 4c ff ff       	call   c000f412 <Filesystem::Filesystem()>
c001a71e:	83 c4 10             	add    esp,0x10
c001a721:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c001a726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72a:	89 10                	mov    DWORD PTR [eax],edx
c001a72c:	c7 05 e0 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00257e0,0x0
c001a736:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a73e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a743:	7f 15                	jg     c001a75a <FAT::FAT()+0x4c>
c001a745:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a749:	c7 04 85 00 58 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda800],0xffffffff
c001a754:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a758:	eb e4                	jmp    c001a73e <FAT::FAT()+0x30>
c001a75a:	90                   	nop
c001a75b:	83 c4 1c             	add    esp,0x1c
c001a75e:	c3                   	ret    
c001a75f:	90                   	nop

c001a760 <FAT::fixFilepath(char*)>:
c001a760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a764:	8a 00                	mov    al,BYTE PTR [eax]
c001a766:	3c 40                	cmp    al,0x40
c001a768:	7e 2c                	jle    c001a796 <FAT::fixFilepath(char*)+0x36>
c001a76a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a76e:	8a 00                	mov    al,BYTE PTR [eax]
c001a770:	83 e8 41             	sub    eax,0x41
c001a773:	88 c2                	mov    dl,al
c001a775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a779:	88 10                	mov    BYTE PTR [eax],dl
c001a77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77f:	8a 00                	mov    al,BYTE PTR [eax]
c001a781:	0f be c0             	movsx  eax,al
c001a784:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c001a78b:	83 c0 30             	add    eax,0x30
c001a78e:	88 c2                	mov    dl,al
c001a790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a794:	88 10                	mov    BYTE PTR [eax],dl
c001a796:	90                   	nop
c001a797:	c3                   	ret    

c001a798 <FAT::open(char const*, void**, FileOpenMode)>:
c001a798:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a79e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7a6:	74 0a                	je     c001a7b2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a7a8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a7b0:	75 0a                	jne    c001a7bc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a7b2:	b8 04 00 00 00       	mov    eax,0x4
c001a7b7:	e9 fd 00 00 00       	jmp    c001a8b9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a7bc:	83 ec 08             	sub    esp,0x8
c001a7bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7ca:	50                   	push   eax
c001a7cb:	e8 89 5f fe ff       	call   c0000759 <strcpy>
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	83 ec 08             	sub    esp,0x8
c001a7d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7da:	50                   	push   eax
c001a7db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7e2:	e8 79 ff ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001a7e7:	83 c4 10             	add    esp,0x10
c001a7ea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a7f2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7f9:	83 e0 01             	and    eax,0x1
c001a7fc:	74 08                	je     c001a806 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a7fe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a806:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a80d:	83 e0 04             	and    eax,0x4
c001a810:	74 10                	je     c001a822 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a812:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a81a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a822:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a829:	83 e0 02             	and    eax,0x2
c001a82c:	74 08                	je     c001a836 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a82e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a836:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a83d:	83 e0 08             	and    eax,0x8
c001a840:	74 08                	je     c001a84a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a842:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a84a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a851:	83 e0 10             	and    eax,0x10
c001a854:	74 08                	je     c001a85e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a856:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a85e:	83 ec 0c             	sub    esp,0xc
c001a861:	68 50 02 00 00       	push   0x250
c001a866:	e8 b1 17 ff ff       	call   c000c01c <malloc>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	89 c2                	mov    edx,eax
c001a870:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a877:	89 10                	mov    DWORD PTR [eax],edx
c001a879:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a881:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a888:	8b 00                	mov    eax,DWORD PTR [eax]
c001a88a:	83 ec 04             	sub    esp,0x4
c001a88d:	52                   	push   edx
c001a88e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a892:	52                   	push   edx
c001a893:	50                   	push   eax
c001a894:	e8 d7 a4 fe ff       	call   c0004d70 <f_open>
c001a899:	83 c4 10             	add    esp,0x10
c001a89c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a8a3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a8ab:	74 07                	je     c001a8b4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001a8ad:	b8 01 00 00 00       	mov    eax,0x1
c001a8b2:	eb 05                	jmp    c001a8b9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a8b4:	b8 00 00 00 00       	mov    eax,0x0
c001a8b9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a8bf:	c3                   	ret    

c001a8c0 <FAT::openDir(char const*, void**)>:
c001a8c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a8ce:	74 0a                	je     c001a8da <FAT::openDir(char const*, void**)+0x1a>
c001a8d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8d8:	75 07                	jne    c001a8e1 <FAT::openDir(char const*, void**)+0x21>
c001a8da:	b8 04 00 00 00       	mov    eax,0x4
c001a8df:	eb 7d                	jmp    c001a95e <FAT::openDir(char const*, void**)+0x9e>
c001a8e1:	83 ec 08             	sub    esp,0x8
c001a8e4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8ef:	50                   	push   eax
c001a8f0:	e8 64 5e fe ff       	call   c0000759 <strcpy>
c001a8f5:	83 c4 10             	add    esp,0x10
c001a8f8:	83 ec 08             	sub    esp,0x8
c001a8fb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8ff:	50                   	push   eax
c001a900:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a907:	e8 54 fe ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001a90c:	83 c4 10             	add    esp,0x10
c001a90f:	83 ec 0c             	sub    esp,0xc
c001a912:	6a 4c                	push   0x4c
c001a914:	e8 03 17 ff ff       	call   c000c01c <malloc>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	89 c2                	mov    edx,eax
c001a91e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a925:	89 10                	mov    DWORD PTR [eax],edx
c001a927:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a92e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a930:	83 ec 08             	sub    esp,0x8
c001a933:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a937:	52                   	push   edx
c001a938:	50                   	push   eax
c001a939:	e8 6a b4 fe ff       	call   c0005da8 <f_opendir>
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a948:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a950:	74 07                	je     c001a959 <FAT::openDir(char const*, void**)+0x99>
c001a952:	b8 01 00 00 00       	mov    eax,0x1
c001a957:	eb 05                	jmp    c001a95e <FAT::openDir(char const*, void**)+0x9e>
c001a959:	b8 00 00 00 00       	mov    eax,0x0
c001a95e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a964:	c3                   	ret    
c001a965:	90                   	nop

c001a966 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a966:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a96c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a974:	75 0a                	jne    c001a980 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a976:	b8 04 00 00 00       	mov    eax,0x4
c001a97b:	e9 c9 00 00 00       	jmp    c001aa49 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a980:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a988:	75 0a                	jne    c001a994 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a98a:	b8 04 00 00 00       	mov    eax,0x4
c001a98f:	e9 b5 00 00 00       	jmp    c001aa49 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a994:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a99c:	75 0a                	jne    c001a9a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a99e:	b8 04 00 00 00       	mov    eax,0x4
c001a9a3:	e9 a1 00 00 00       	jmp    c001aa49 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9a8:	83 ec 08             	sub    esp,0x8
c001a9ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9b2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a9b9:	50                   	push   eax
c001a9ba:	e8 9a 5d fe ff       	call   c0000759 <strcpy>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	83 ec 08             	sub    esp,0x8
c001a9c5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a9cc:	50                   	push   eax
c001a9cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9d4:	e8 87 fd ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	83 ec 08             	sub    esp,0x8
c001a9df:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a9e3:	50                   	push   eax
c001a9e4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a9eb:	50                   	push   eax
c001a9ec:	e8 76 b5 fe ff       	call   c0005f67 <f_stat>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a9fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa02:	85 c0                	test   eax,eax
c001aa04:	74 07                	je     c001aa0d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001aa06:	83 f8 04             	cmp    eax,0x4
c001aa09:	74 32                	je     c001aa3d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001aa0b:	eb 37                	jmp    c001aa44 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001aa0d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa11:	0f b6 c0             	movzx  eax,al
c001aa14:	83 e0 10             	and    eax,0x10
c001aa17:	0f 95 c2             	setne  dl
c001aa1a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aa21:	88 10                	mov    BYTE PTR [eax],dl
c001aa23:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa2a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aa31:	89 01                	mov    DWORD PTR [ecx],eax
c001aa33:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa36:	b8 00 00 00 00       	mov    eax,0x0
c001aa3b:	eb 0c                	jmp    c001aa49 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa3d:	b8 02 00 00 00       	mov    eax,0x2
c001aa42:	eb 05                	jmp    c001aa49 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa44:	b8 01 00 00 00       	mov    eax,0x1
c001aa49:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa4f:	c3                   	ret    

c001aa50 <FAT::unlink(char const*)>:
c001aa50:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa56:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa5e:	75 07                	jne    c001aa67 <FAT::unlink(char const*)+0x17>
c001aa60:	b8 04 00 00 00       	mov    eax,0x4
c001aa65:	eb 5c                	jmp    c001aac3 <FAT::unlink(char const*)+0x73>
c001aa67:	83 ec 08             	sub    esp,0x8
c001aa6a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa71:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa75:	50                   	push   eax
c001aa76:	e8 de 5c fe ff       	call   c0000759 <strcpy>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	83 ec 08             	sub    esp,0x8
c001aa81:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa85:	50                   	push   eax
c001aa86:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa8d:	e8 ce fc ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001aa92:	83 c4 10             	add    esp,0x10
c001aa95:	83 ec 0c             	sub    esp,0xc
c001aa98:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa9c:	50                   	push   eax
c001aa9d:	e8 17 b8 fe ff       	call   c00062b9 <f_unlink>
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aaac:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aab3:	85 c0                	test   eax,eax
c001aab5:	75 07                	jne    c001aabe <FAT::unlink(char const*)+0x6e>
c001aab7:	b8 00 00 00 00       	mov    eax,0x0
c001aabc:	eb 05                	jmp    c001aac3 <FAT::unlink(char const*)+0x73>
c001aabe:	b8 01 00 00 00       	mov    eax,0x1
c001aac3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aac9:	c3                   	ret    

c001aaca <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001aaca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aad0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001aad7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001aade:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001aae2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aae6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aaee:	75 0a                	jne    c001aafa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001aaf0:	b8 04 00 00 00       	mov    eax,0x4
c001aaf5:	e9 1c 01 00 00       	jmp    c001ac16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001aafa:	83 ec 08             	sub    esp,0x8
c001aafd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab04:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab08:	50                   	push   eax
c001ab09:	e8 4b 5c fe ff       	call   c0000759 <strcpy>
c001ab0e:	83 c4 10             	add    esp,0x10
c001ab11:	83 ec 08             	sub    esp,0x8
c001ab14:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab18:	50                   	push   eax
c001ab19:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab20:	e8 3b fc ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ab25:	83 c4 10             	add    esp,0x10
c001ab28:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ab30:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ab38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab3d:	83 e0 01             	and    eax,0x1
c001ab40:	74 08                	je     c001ab4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ab42:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ab4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab4f:	83 e0 02             	and    eax,0x2
c001ab52:	74 08                	je     c001ab5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ab54:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ab5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab61:	83 e0 04             	and    eax,0x4
c001ab64:	74 08                	je     c001ab6e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ab66:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ab6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab73:	83 e0 08             	and    eax,0x8
c001ab76:	74 08                	je     c001ab80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001ab78:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ab80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab85:	83 e0 01             	and    eax,0x1
c001ab88:	74 08                	je     c001ab92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ab8a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ab92:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab97:	83 e0 02             	and    eax,0x2
c001ab9a:	74 08                	je     c001aba4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ab9c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001aba4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aba9:	83 e0 04             	and    eax,0x4
c001abac:	74 08                	je     c001abb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001abae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001abb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abbb:	83 e0 08             	and    eax,0x8
c001abbe:	74 08                	je     c001abc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001abc0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001abc8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abcf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001abd6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001abde:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001abe6:	83 ec 04             	sub    esp,0x4
c001abe9:	52                   	push   edx
c001abea:	50                   	push   eax
c001abeb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abef:	50                   	push   eax
c001abf0:	e8 66 bd fe ff       	call   c000695b <f_chmod>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001abff:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ac06:	85 c0                	test   eax,eax
c001ac08:	75 07                	jne    c001ac11 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ac0a:	b8 00 00 00 00       	mov    eax,0x0
c001ac0f:	eb 05                	jmp    c001ac16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ac11:	b8 01 00 00 00       	mov    eax,0x1
c001ac16:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac1c:	c3                   	ret    
c001ac1d:	90                   	nop

c001ac1e <FAT::rename(char const*, char const*)>:
c001ac1e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ac24:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ac2c:	74 0a                	je     c001ac38 <FAT::rename(char const*, char const*)+0x1a>
c001ac2e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ac36:	75 0a                	jne    c001ac42 <FAT::rename(char const*, char const*)+0x24>
c001ac38:	b8 04 00 00 00       	mov    eax,0x4
c001ac3d:	e9 98 00 00 00       	jmp    c001acda <FAT::rename(char const*, char const*)+0xbc>
c001ac42:	83 ec 08             	sub    esp,0x8
c001ac45:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac4c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac53:	50                   	push   eax
c001ac54:	e8 00 5b fe ff       	call   c0000759 <strcpy>
c001ac59:	83 c4 10             	add    esp,0x10
c001ac5c:	83 ec 08             	sub    esp,0x8
c001ac5f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ac66:	50                   	push   eax
c001ac67:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac6e:	e8 ed fa ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ac73:	83 c4 10             	add    esp,0x10
c001ac76:	83 ec 08             	sub    esp,0x8
c001ac79:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ac80:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac84:	50                   	push   eax
c001ac85:	e8 cf 5a fe ff       	call   c0000759 <strcpy>
c001ac8a:	83 c4 10             	add    esp,0x10
c001ac8d:	83 ec 08             	sub    esp,0x8
c001ac90:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac94:	50                   	push   eax
c001ac95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac9c:	e8 bf fa ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	83 ec 08             	sub    esp,0x8
c001aca7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acab:	50                   	push   eax
c001acac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001acb3:	50                   	push   eax
c001acb4:	e8 af b9 fe ff       	call   c0006668 <f_rename>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001acc3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001acca:	85 c0                	test   eax,eax
c001accc:	75 07                	jne    c001acd5 <FAT::rename(char const*, char const*)+0xb7>
c001acce:	b8 00 00 00 00       	mov    eax,0x0
c001acd3:	eb 05                	jmp    c001acda <FAT::rename(char const*, char const*)+0xbc>
c001acd5:	b8 01 00 00 00       	mov    eax,0x1
c001acda:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ace0:	c3                   	ret    
c001ace1:	90                   	nop

c001ace2 <FAT::mkdir(char const*)>:
c001ace2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ace8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acf0:	75 07                	jne    c001acf9 <FAT::mkdir(char const*)+0x17>
c001acf2:	b8 04 00 00 00       	mov    eax,0x4
c001acf7:	eb 5c                	jmp    c001ad55 <FAT::mkdir(char const*)+0x73>
c001acf9:	83 ec 08             	sub    esp,0x8
c001acfc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad07:	50                   	push   eax
c001ad08:	e8 4c 5a fe ff       	call   c0000759 <strcpy>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	83 ec 08             	sub    esp,0x8
c001ad13:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad17:	50                   	push   eax
c001ad18:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad1f:	e8 3c fa ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	83 ec 0c             	sub    esp,0xc
c001ad2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad2e:	50                   	push   eax
c001ad2f:	e8 08 b7 fe ff       	call   c000643c <f_mkdir>
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad3e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad45:	85 c0                	test   eax,eax
c001ad47:	75 07                	jne    c001ad50 <FAT::mkdir(char const*)+0x6e>
c001ad49:	b8 00 00 00 00       	mov    eax,0x0
c001ad4e:	eb 05                	jmp    c001ad55 <FAT::mkdir(char const*)+0x73>
c001ad50:	b8 01 00 00 00       	mov    eax,0x1
c001ad55:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad5b:	c3                   	ret    

c001ad5c <FAT::exists(char const*)>:
c001ad5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ad62:	83 ec 08             	sub    esp,0x8
c001ad65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad70:	50                   	push   eax
c001ad71:	e8 e3 59 fe ff       	call   c0000759 <strcpy>
c001ad76:	83 c4 10             	add    esp,0x10
c001ad79:	83 ec 08             	sub    esp,0x8
c001ad7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad80:	50                   	push   eax
c001ad81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad88:	e8 d3 f9 ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	83 ec 08             	sub    esp,0x8
c001ad93:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ad9a:	50                   	push   eax
c001ad9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad9f:	50                   	push   eax
c001ada0:	e8 c2 b1 fe ff       	call   c0005f67 <f_stat>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001adaf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001adb6:	85 c0                	test   eax,eax
c001adb8:	75 04                	jne    c001adbe <FAT::exists(char const*)+0x62>
c001adba:	b0 01                	mov    al,0x1
c001adbc:	eb 02                	jmp    c001adc0 <FAT::exists(char const*)+0x64>
c001adbe:	b0 00                	mov    al,0x0
c001adc0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001adc6:	c3                   	ret    
c001adc7:	90                   	nop

c001adc8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001adc8:	b8 08 00 00 00       	mov    eax,0x8
c001adcd:	c3                   	ret    

c001adce <ISO9660::seek(void*, unsigned long long)>:
c001adce:	53                   	push   ebx
c001adcf:	b8 04 00 00 00       	mov    eax,0x4
c001add4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001add8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001addc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ade0:	85 d2                	test   edx,edx
c001ade2:	74 17                	je     c001adfb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ade4:	89 c8                	mov    eax,ecx
c001ade6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ade9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001adec:	b8 01 00 00 00       	mov    eax,0x1
c001adf1:	73 08                	jae    c001adfb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001adf3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001adf6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001adf9:	31 c0                	xor    eax,eax
c001adfb:	5b                   	pop    ebx
c001adfc:	c3                   	ret    
c001adfd:	90                   	nop

c001adfe <ISO9660::tell(void*, unsigned long long*)>:
c001adfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae06:	85 d2                	test   edx,edx
c001ae08:	74 12                	je     c001ae1c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae0a:	85 c0                	test   eax,eax
c001ae0c:	74 0e                	je     c001ae1c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae0e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae11:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ae14:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae17:	89 10                	mov    DWORD PTR [eax],edx
c001ae19:	31 c0                	xor    eax,eax
c001ae1b:	c3                   	ret    
c001ae1c:	b8 04 00 00 00       	mov    eax,0x4
c001ae21:	c3                   	ret    

c001ae22 <ISO9660::getName()>:
c001ae22:	b8 48 2f 02 c0       	mov    eax,0xc0022f48
c001ae27:	c3                   	ret    

c001ae28 <ISO9660::stat(void*, unsigned long long*)>:
c001ae28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae30:	85 d2                	test   edx,edx
c001ae32:	74 12                	je     c001ae46 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae34:	85 c0                	test   eax,eax
c001ae36:	74 0e                	je     c001ae46 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae38:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ae3b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ae3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae41:	89 10                	mov    DWORD PTR [eax],edx
c001ae43:	31 c0                	xor    eax,eax
c001ae45:	c3                   	ret    
c001ae46:	b8 04 00 00 00       	mov    eax,0x4
c001ae4b:	c3                   	ret    

c001ae4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae4c:	b8 01 00 00 00       	mov    eax,0x1
c001ae51:	c3                   	ret    

c001ae52 <ISO9660::unlink(char const*)>:
c001ae52:	b8 01 00 00 00       	mov    eax,0x1
c001ae57:	c3                   	ret    

c001ae58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ae58:	b8 01 00 00 00       	mov    eax,0x1
c001ae5d:	c3                   	ret    

c001ae5e <ISO9660::rename(char const*, char const*)>:
c001ae5e:	b8 01 00 00 00       	mov    eax,0x1
c001ae63:	c3                   	ret    

c001ae64 <ISO9660::mkdir(char const*)>:
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	c3                   	ret    

c001ae6a <ISO9660::close(void*)>:
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	b8 04 00 00 00       	mov    eax,0x4
c001ae72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae76:	85 d2                	test   edx,edx
c001ae78:	74 0e                	je     c001ae88 <ISO9660::close(void*)+0x1e>
c001ae7a:	83 ec 0c             	sub    esp,0xc
c001ae7d:	52                   	push   edx
c001ae7e:	e8 a9 11 ff ff       	call   c000c02c <free>
c001ae83:	83 c4 10             	add    esp,0x10
c001ae86:	31 c0                	xor    eax,eax
c001ae88:	83 c4 0c             	add    esp,0xc
c001ae8b:	c3                   	ret    

c001ae8c <ISO9660::closeDir(void*)>:
c001ae8c:	83 ec 0c             	sub    esp,0xc
c001ae8f:	b8 04 00 00 00       	mov    eax,0x4
c001ae94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae98:	85 d2                	test   edx,edx
c001ae9a:	74 0e                	je     c001aeaa <ISO9660::closeDir(void*)+0x1e>
c001ae9c:	83 ec 0c             	sub    esp,0xc
c001ae9f:	52                   	push   edx
c001aea0:	e8 87 11 ff ff       	call   c000c02c <free>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	31 c0                	xor    eax,eax
c001aeaa:	83 c4 0c             	add    esp,0xc
c001aead:	c3                   	ret    

c001aeae <ISO9660::~ISO9660()>:
c001aeae:	83 ec 0c             	sub    esp,0xc
c001aeb1:	ba 9c 2f 02 c0       	mov    edx,0xc0022f9c
c001aeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeba:	89 10                	mov    DWORD PTR [eax],edx
c001aebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	50                   	push   eax
c001aec4:	e8 6d 45 ff ff       	call   c000f436 <Filesystem::~Filesystem()>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	90                   	nop
c001aecd:	83 c4 0c             	add    esp,0xc
c001aed0:	c3                   	ret    
c001aed1:	90                   	nop

c001aed2 <ISO9660::~ISO9660()>:
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	83 ec 0c             	sub    esp,0xc
c001aed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aedc:	e8 cd ff ff ff       	call   c001aeae <ISO9660::~ISO9660()>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	83 ec 08             	sub    esp,0x8
c001aee7:	6a 08                	push   0x8
c001aee9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeed:	e8 3b 41 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001aef2:	83 c4 10             	add    esp,0x10
c001aef5:	83 c4 0c             	add    esp,0xc
c001aef8:	c3                   	ret    

c001aef9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001aef9:	55                   	push   ebp
c001aefa:	31 c9                	xor    ecx,ecx
c001aefc:	57                   	push   edi
c001aefd:	56                   	push   esi
c001aefe:	53                   	push   ebx
c001aeff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001af03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af07:	89 eb                	mov    ebx,ebp
c001af09:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001af0d:	39 ce                	cmp    esi,ecx
c001af0f:	7e 17                	jle    c001af28 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001af11:	31 d2                	xor    edx,edx
c001af13:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001af17:	7d 13                	jge    c001af2c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001af19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af1d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001af20:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001af23:	75 0d                	jne    c001af32 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001af25:	42                   	inc    edx
c001af26:	eb eb                	jmp    c001af13 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001af28:	31 c0                	xor    eax,eax
c001af2a:	eb 0a                	jmp    c001af36 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af2c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001af30:	eb 04                	jmp    c001af36 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af32:	41                   	inc    ecx
c001af33:	43                   	inc    ebx
c001af34:	eb d7                	jmp    c001af0d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001af36:	5b                   	pop    ebx
c001af37:	5e                   	pop    esi
c001af38:	5f                   	pop    edi
c001af39:	5d                   	pop    ebp
c001af3a:	c3                   	ret    

c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001af3b:	56                   	push   esi
c001af3c:	53                   	push   ebx
c001af3d:	52                   	push   edx
c001af3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af4a:	39 0d e0 58 02 c0    	cmp    DWORD PTR ds:0xc00258e0,ecx
c001af50:	75 08                	jne    c001af5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001af52:	38 05 88 3d 02 c0    	cmp    BYTE PTR ds:0xc0023d88,al
c001af58:	74 2b                	je     c001af85 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001af5a:	83 ec 0c             	sub    esp,0xc
c001af5d:	a2 88 3d 02 c0       	mov    ds:0xc0023d88,al
c001af62:	68 00 59 02 c0       	push   0xc0025900
c001af67:	0f be c0             	movsx  eax,al
c001af6a:	6a 01                	push   0x1
c001af6c:	89 0d e0 58 02 c0    	mov    DWORD PTR ds:0xc00258e0,ecx
c001af72:	31 db                	xor    ebx,ebx
c001af74:	53                   	push   ebx
c001af75:	51                   	push   ecx
c001af76:	ff 34 85 5c 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb7a4]
c001af7d:	e8 c8 77 ff ff       	call   c001274a <LogicalDisk::read(unsigned long long, int, void*)>
c001af82:	83 c4 20             	add    esp,0x20
c001af85:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001af8d:	c7 44 24 14 00 59 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025900
c001af95:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001af99:	58                   	pop    eax
c001af9a:	5b                   	pop    ebx
c001af9b:	5e                   	pop    esi
c001af9c:	e9 e3 56 fe ff       	jmp    c0000684 <memcpy>
c001afa1:	90                   	nop

c001afa2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001afa2:	81 ec 10 08 00 00    	sub    esp,0x810
c001afa8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001afaf:	83 c0 41             	add    eax,0x41
c001afb2:	0f be c0             	movsx  eax,al
c001afb5:	50                   	push   eax
c001afb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afba:	50                   	push   eax
c001afbb:	6a 10                	push   0x10
c001afbd:	e8 79 ff ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	31 c0                	xor    eax,eax
c001afc7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001afcc:	75 1d                	jne    c001afeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afce:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001afd3:	75 16                	jne    c001afeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afd5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001afda:	75 0f                	jne    c001afeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afdc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001afe1:	75 08                	jne    c001afeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afe3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001afe8:	0f 94 c0             	sete   al
c001afeb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001aff1:	c3                   	ret    

c001aff2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001aff2:	55                   	push   ebp
c001aff3:	57                   	push   edi
c001aff4:	56                   	push   esi
c001aff5:	53                   	push   ebx
c001aff6:	81 ec 34 08 00 00    	sub    esp,0x834
c001affc:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b003:	55                   	push   ebp
c001b004:	68 63 2f 02 c0       	push   0xc0022f63
c001b009:	e8 ff 40 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001b00e:	83 c4 10             	add    esp,0x10
c001b011:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b019:	0f 84 06 02 00 00    	je     c001b225 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b01f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b027:	0f 84 f8 01 00 00    	je     c001b225 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b02d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b034:	b8 01 00 00 00       	mov    eax,0x1
c001b039:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b03d:	0f 85 e7 01 00 00    	jne    c001b22a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b043:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b046:	31 d2                	xor    edx,edx
c001b048:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b04b:	89 e9                	mov    ecx,ebp
c001b04d:	89 d3                	mov    ebx,edx
c001b04f:	01 f1                	add    ecx,esi
c001b051:	11 fb                	adc    ebx,edi
c001b053:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b057:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b05b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b062:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b065:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b068:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b06c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b070:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b074:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b078:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b07c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b080:	72 19                	jb     c001b09b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b082:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b08a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b08e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b091:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b095:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b099:	eb 13                	jmp    c001b0ae <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b09b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b09f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0a3:	29 f0                	sub    eax,esi
c001b0a5:	19 fa                	sbb    edx,edi
c001b0a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0ae:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b0b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b0b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0ba:	53                   	push   ebx
c001b0bb:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b0bf:	c1 e0 0b             	shl    eax,0xb
c001b0c2:	01 c6                	add    esi,eax
c001b0c4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b0cb:	11 d7                	adc    edi,edx
c001b0cd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b0d1:	89 fa                	mov    edx,edi
c001b0d3:	50                   	push   eax
c001b0d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b0d8:	50                   	push   eax
c001b0d9:	89 f0                	mov    eax,esi
c001b0db:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b0df:	50                   	push   eax
c001b0e0:	e8 56 fe ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b0e5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b0ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b0f3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b0f7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	b8 00 08 00 00       	mov    eax,0x800
c001b105:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b109:	29 d0                	sub    eax,edx
c001b10b:	39 c1                	cmp    ecx,eax
c001b10d:	83 db 00             	sbb    ebx,0x0
c001b110:	7d 19                	jge    c001b12b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b112:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b117:	75 16                	jne    c001b12f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b119:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b120:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b126:	e9 f6 00 00 00       	jmp    c001b221 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b12b:	89 c5                	mov    ebp,eax
c001b12d:	eb 03                	jmp    c001b132 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b12f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b132:	51                   	push   ecx
c001b133:	55                   	push   ebp
c001b134:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b138:	50                   	push   eax
c001b139:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b140:	e8 3f 55 fe ff       	call   c0000684 <memcpy>
c001b145:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b149:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b14d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b154:	01 e8                	add    eax,ebp
c001b156:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b15a:	89 e8                	mov    eax,ebp
c001b15c:	99                   	cdq    
c001b15d:	01 ee                	add    esi,ebp
c001b15f:	11 d7                	adc    edi,edx
c001b161:	29 e9                	sub    ecx,ebp
c001b163:	19 d3                	sbb    ebx,edx
c001b165:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b169:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b175:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b178:	b8 00 00 00 00       	mov    eax,0x0
c001b17d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b181:	7d 3f                	jge    c001b1c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b183:	52                   	push   edx
c001b184:	89 fa                	mov    edx,edi
c001b186:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b18d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b191:	50                   	push   eax
c001b192:	89 f0                	mov    eax,esi
c001b194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b198:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b19c:	50                   	push   eax
c001b19d:	e8 99 fd ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b1a2:	81 c6 00 08 00 00    	add    esi,0x800
c001b1a8:	83 d7 00             	adc    edi,0x0
c001b1ab:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b1b3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b1bb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b1c0:	eb ab                	jmp    c001b16d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1c6:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b1c9:	74 34                	je     c001b1ff <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b1cb:	89 fa                	mov    edx,edi
c001b1cd:	50                   	push   eax
c001b1ce:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b1d5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b1d9:	50                   	push   eax
c001b1da:	89 f0                	mov    eax,esi
c001b1dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b1e0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b1e4:	55                   	push   ebp
c001b1e5:	50                   	push   eax
c001b1e6:	e8 50 fd ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b1eb:	83 c4 0c             	add    esp,0xc
c001b1ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b1f2:	55                   	push   ebp
c001b1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1f7:	e8 88 54 fe ff       	call   c0000684 <memcpy>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b206:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b20a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b20e:	89 38                	mov    DWORD PTR [eax],edi
c001b210:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b21b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b21e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b221:	31 c0                	xor    eax,eax
c001b223:	eb 05                	jmp    c001b22a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b225:	b8 04 00 00 00       	mov    eax,0x4
c001b22a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b230:	5b                   	pop    ebx
c001b231:	5e                   	pop    esi
c001b232:	5f                   	pop    edi
c001b233:	5d                   	pop    ebp
c001b234:	c3                   	ret    
c001b235:	90                   	nop

c001b236 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b236:	55                   	push   ebp
c001b237:	57                   	push   edi
c001b238:	56                   	push   esi
c001b239:	53                   	push   ebx
c001b23a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b240:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b247:	85 f6                	test   esi,esi
c001b249:	0f 84 64 02 00 00    	je     c001b4b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b24f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b257:	0f 84 56 02 00 00    	je     c001b4b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b25d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b260:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b263:	75 0a                	jne    c001b26f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b265:	b8 07 00 00 00       	mov    eax,0x7
c001b26a:	e9 49 02 00 00       	jmp    c001b4b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b26f:	50                   	push   eax
c001b270:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b274:	50                   	push   eax
c001b275:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b27c:	53                   	push   ebx
c001b27d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b27f:	c1 e0 0b             	shl    eax,0xb
c001b282:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b285:	c1 e8 0b             	shr    eax,0xb
c001b288:	50                   	push   eax
c001b289:	e8 ad fc ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b28e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b291:	83 c4 10             	add    esp,0x10
c001b294:	89 c1                	mov    ecx,eax
c001b296:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b299:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b29f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b2a2:	84 db                	test   bl,bl
c001b2a4:	0f 85 90 00 00 00    	jne    c001b33a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b2aa:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b2b0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b2b6:	29 c7                	sub    edi,eax
c001b2b8:	89 fb                	mov    ebx,edi
c001b2ba:	c1 fb 1f             	sar    ebx,0x1f
c001b2bd:	01 f8                	add    eax,edi
c001b2bf:	11 da                	adc    edx,ebx
c001b2c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2c9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b2cc:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b2cf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b2d2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b2d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2dc:	89 d8                	mov    eax,ebx
c001b2de:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b2e1:	ba 00 00 00 00       	mov    edx,0x0
c001b2e6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b2ea:	b8 00 00 00 00       	mov    eax,0x0
c001b2ef:	73 0b                	jae    c001b2fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b2f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2f8:	29 f8                	sub    eax,edi
c001b2fa:	19 da                	sbb    edx,ebx
c001b2fc:	89 d3                	mov    ebx,edx
c001b2fe:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b301:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b304:	09 c3                	or     ebx,eax
c001b306:	0f 84 59 ff ff ff    	je     c001b265 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b30c:	55                   	push   ebp
c001b30d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b311:	50                   	push   eax
c001b312:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b319:	53                   	push   ebx
c001b31a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b31c:	c1 e0 0b             	shl    eax,0xb
c001b31f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b323:	c1 e8 0b             	shr    eax,0xb
c001b326:	50                   	push   eax
c001b327:	e8 0f fc ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b32c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	25 ff 07 00 00       	and    eax,0x7ff
c001b337:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b33a:	57                   	push   edi
c001b33b:	6a 28                	push   0x28
c001b33d:	6a 00                	push   0x0
c001b33f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b343:	50                   	push   eax
c001b344:	e8 71 53 fe ff       	call   c00006ba <memset>
c001b349:	31 d2                	xor    edx,edx
c001b34b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b34e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b354:	89 f8                	mov    eax,edi
c001b356:	83 c0 21             	add    eax,0x21
c001b359:	83 d2 00             	adc    edx,0x0
c001b35c:	89 c7                	mov    edi,eax
c001b35e:	89 d5                	mov    ebp,edx
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	31 c9                	xor    ecx,ecx
c001b365:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b36c:	83 f9 28             	cmp    ecx,0x28
c001b36f:	88 04 24             	mov    BYTE PTR [esp],al
c001b372:	0f 94 c2             	sete   dl
c001b375:	88 d0                	mov    al,dl
c001b377:	ba ff 07 00 00       	mov    edx,0x7ff
c001b37c:	39 fa                	cmp    edx,edi
c001b37e:	ba 00 00 00 00       	mov    edx,0x0
c001b383:	19 ea                	sbb    edx,ebp
c001b385:	0f 92 c2             	setb   dl
c001b388:	09 c2                	or     edx,eax
c001b38a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b38e:	0f 94 c0             	sete   al
c001b391:	08 d0                	or     al,dl
c001b393:	75 16                	jne    c001b3ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b395:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b399:	74 10                	je     c001b3ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b39b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b39e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b3a2:	41                   	inc    ecx
c001b3a3:	83 c7 01             	add    edi,0x1
c001b3a6:	83 d5 00             	adc    ebp,0x0
c001b3a9:	eb ba                	jmp    c001b365 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b3ab:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b3b2:	83 ec 0c             	sub    esp,0xc
c001b3b5:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3b9:	57                   	push   edi
c001b3ba:	e8 18 53 fe ff       	call   c00006d7 <strlen>
c001b3bf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b3c7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b3cb:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b3d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b3d5:	5a                   	pop    edx
c001b3d6:	25 ff 07 00 00       	and    eax,0x7ff
c001b3db:	01 c8                	add    eax,ecx
c001b3dd:	59                   	pop    ecx
c001b3de:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001b3e4:	83 e0 02             	and    eax,0x2
c001b3e7:	3c 01                	cmp    al,0x1
c001b3e9:	19 c0                	sbb    eax,eax
c001b3eb:	83 c0 02             	add    eax,0x2
c001b3ee:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b3f2:	57                   	push   edi
c001b3f3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b3f7:	50                   	push   eax
c001b3f8:	e8 5c 53 fe ff       	call   c0000759 <strcpy>
c001b3fd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	84 c0                	test   al,al
c001b406:	75 21                	jne    c001b429 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001b408:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b410:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b418:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b420:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b427:	eb 28                	jmp    c001b451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b429:	fe c8                	dec    al
c001b42b:	75 24                	jne    c001b451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b42d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b435:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b43d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b445:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b44c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b451:	0f b6 fb             	movzx  edi,bl
c001b454:	31 db                	xor    ebx,ebx
c001b456:	50                   	push   eax
c001b457:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b45e:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b462:	50                   	push   eax
c001b463:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b46a:	e8 15 52 fe ff       	call   c0000684 <memcpy>
c001b46f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b476:	89 f9                	mov    ecx,edi
c001b478:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b47e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b481:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b484:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b487:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	39 c7                	cmp    edi,eax
c001b48f:	89 df                	mov    edi,ebx
c001b491:	19 d7                	sbb    edi,edx
c001b493:	72 10                	jb     c001b4a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001b495:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b49c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b4a3:	eb 0a                	jmp    c001b4af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001b4a5:	29 c8                	sub    eax,ecx
c001b4a7:	19 da                	sbb    edx,ebx
c001b4a9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b4ac:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b4af:	31 c0                	xor    eax,eax
c001b4b1:	eb 05                	jmp    c001b4b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b4b3:	b8 04 00 00 00       	mov    eax,0x4
c001b4b8:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b4be:	5b                   	pop    ebx
c001b4bf:	5e                   	pop    esi
c001b4c0:	5f                   	pop    edi
c001b4c1:	5d                   	pop    ebp
c001b4c2:	c3                   	ret    

c001b4c3 <readRoot(unsigned int*, unsigned int*, char)>:
c001b4c3:	81 ec 40 08 00 00    	sub    esp,0x840
c001b4c9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b4d1:	50                   	push   eax
c001b4d2:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b4d6:	50                   	push   eax
c001b4d7:	6a 10                	push   0x10
c001b4d9:	e8 5d fa ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b4de:	83 c4 0c             	add    esp,0xc
c001b4e1:	6a 22                	push   0x22
c001b4e3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b4ea:	50                   	push   eax
c001b4eb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b4ef:	50                   	push   eax
c001b4f0:	e8 8f 51 fe ff       	call   c0000684 <memcpy>
c001b4f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b4fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b500:	89 10                	mov    DWORD PTR [eax],edx
c001b502:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b509:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b50d:	89 10                	mov    DWORD PTR [eax],edx
c001b50f:	b0 01                	mov    al,0x1
c001b511:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b517:	c3                   	ret    

c001b518 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b518:	55                   	push   ebp
c001b519:	57                   	push   edi
c001b51a:	56                   	push   esi
c001b51b:	53                   	push   ebx
c001b51c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b522:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b529:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b530:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b534:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b538:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b53c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b540:	75 03                	jne    c001b545 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b542:	83 c3 02             	add    ebx,0x2
c001b545:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b548:	75 03                	jne    c001b54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b54a:	43                   	inc    ebx
c001b54b:	eb f8                	jmp    c001b545 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b54d:	51                   	push   ecx
c001b54e:	68 00 01 00 00       	push   0x100
c001b553:	6a 00                	push   0x0
c001b555:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b559:	50                   	push   eax
c001b55a:	e8 5b 51 fe ff       	call   c00006ba <memset>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	31 d2                	xor    edx,edx
c001b564:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b567:	84 c0                	test   al,al
c001b569:	74 21                	je     c001b58c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b56b:	3c 2f                	cmp    al,0x2f
c001b56d:	75 0b                	jne    c001b57a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b56f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b573:	bd 01 00 00 00       	mov    ebp,0x1
c001b578:	eb 14                	jmp    c001b58e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b57a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b57d:	80 f9 19             	cmp    cl,0x19
c001b580:	77 03                	ja     c001b585 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b582:	83 e8 20             	sub    eax,0x20
c001b585:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b589:	42                   	inc    edx
c001b58a:	eb d8                	jmp    c001b564 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b58c:	31 ed                	xor    ebp,ebp
c001b58e:	83 ec 0c             	sub    esp,0xc
c001b591:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b598:	e8 7f 0a ff ff       	call   c000c01c <malloc>
c001b59d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b5a4:	89 c6                	mov    esi,eax
c001b5a6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b5ac:	c1 ef 0b             	shr    edi,0xb
c001b5af:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b5b6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b5c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b5c6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b5cd:	74 28                	je     c001b5f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b5cf:	52                   	push   edx
c001b5d0:	57                   	push   edi
c001b5d1:	50                   	push   eax
c001b5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5d6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b5dd:	e8 59 f9 ff ff       	call   c001af3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5e6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b5ed:	05 00 08 00 00       	add    eax,0x800
c001b5f2:	83 c4 10             	add    esp,0x10
c001b5f5:	eb cb                	jmp    c001b5c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b5f7:	83 ec 0c             	sub    esp,0xc
c001b5fa:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b5fe:	57                   	push   edi
c001b5ff:	e8 d3 50 fe ff       	call   c00006d7 <strlen>
c001b604:	50                   	push   eax
c001b605:	57                   	push   edi
c001b606:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b60d:	56                   	push   esi
c001b60e:	e8 e6 f8 ff ff       	call   c001aef9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b613:	83 c4 20             	add    esp,0x20
c001b616:	85 c0                	test   eax,eax
c001b618:	75 13                	jne    c001b62d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b61a:	83 ec 0c             	sub    esp,0xc
c001b61d:	56                   	push   esi
c001b61e:	e8 09 0a ff ff       	call   c000c02c <free>
c001b623:	83 c4 10             	add    esp,0x10
c001b626:	31 c0                	xor    eax,eax
c001b628:	e9 b3 00 00 00       	jmp    c001b6e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b62d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b631:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b635:	c1 e7 08             	shl    edi,0x8
c001b638:	c1 e2 10             	shl    edx,0x10
c001b63b:	09 d7                	or     edi,edx
c001b63d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b641:	09 d7                	or     edi,edx
c001b643:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b647:	c1 e2 18             	shl    edx,0x18
c001b64a:	09 d7                	or     edi,edx
c001b64c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b650:	89 d1                	mov    ecx,edx
c001b652:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b656:	c1 e1 08             	shl    ecx,0x8
c001b659:	c1 e2 10             	shl    edx,0x10
c001b65c:	09 ca                	or     edx,ecx
c001b65e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b662:	09 ca                	or     edx,ecx
c001b664:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b668:	c1 e1 18             	shl    ecx,0x18
c001b66b:	09 ca                	or     edx,ecx
c001b66d:	89 e9                	mov    ecx,ebp
c001b66f:	84 c9                	test   cl,cl
c001b671:	74 3c                	je     c001b6af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b673:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b677:	83 ec 0c             	sub    esp,0xc
c001b67a:	56                   	push   esi
c001b67b:	e8 ac 09 ff ff       	call   c000c02c <free>
c001b680:	83 c4 0c             	add    esp,0xc
c001b683:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b68a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b68f:	50                   	push   eax
c001b690:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b697:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b69e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6a2:	52                   	push   edx
c001b6a3:	57                   	push   edi
c001b6a4:	53                   	push   ebx
c001b6a5:	e8 6e fe ff ff       	call   c001b518 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b6aa:	83 c4 20             	add    esp,0x20
c001b6ad:	eb 31                	jmp    c001b6e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b6af:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b6b2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b6b9:	d0 e8                	shr    al,1
c001b6bb:	89 3b                	mov    DWORD PTR [ebx],edi
c001b6bd:	83 e0 01             	and    eax,0x1
c001b6c0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b6c7:	83 ec 0c             	sub    esp,0xc
c001b6ca:	89 13                	mov    DWORD PTR [ebx],edx
c001b6cc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b6d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b6d5:	56                   	push   esi
c001b6d6:	e8 51 09 ff ff       	call   c000c02c <free>
c001b6db:	83 c4 10             	add    esp,0x10
c001b6de:	b0 01                	mov    al,0x1
c001b6e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b6e6:	5b                   	pop    ebx
c001b6e7:	5e                   	pop    esi
c001b6e8:	5f                   	pop    edi
c001b6e9:	5d                   	pop    ebp
c001b6ea:	c3                   	ret    

c001b6eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b6eb:	55                   	push   ebp
c001b6ec:	57                   	push   edi
c001b6ed:	56                   	push   esi
c001b6ee:	53                   	push   ebx
c001b6ef:	83 ec 20             	sub    esp,0x20
c001b6f2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b6f6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b6fa:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b6fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b706:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b70e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b713:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b719:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b71f:	57                   	push   edi
c001b720:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b724:	50                   	push   eax
c001b725:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b729:	50                   	push   eax
c001b72a:	e8 94 fd ff ff       	call   c001b4c3 <readRoot(unsigned int*, unsigned int*, char)>
c001b72f:	5a                   	pop    edx
c001b730:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b734:	e8 9e 4f fe ff       	call   c00006d7 <strlen>
c001b739:	83 c4 10             	add    esp,0x10
c001b73c:	83 f8 03             	cmp    eax,0x3
c001b73f:	77 17                	ja     c001b758 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b745:	89 03                	mov    DWORD PTR [ebx],eax
c001b747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b74b:	89 06                	mov    DWORD PTR [esi],eax
c001b74d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b754:	b0 01                	mov    al,0x1
c001b756:	eb 19                	jmp    c001b771 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b758:	50                   	push   eax
c001b759:	55                   	push   ebp
c001b75a:	57                   	push   edi
c001b75b:	56                   	push   esi
c001b75c:	53                   	push   ebx
c001b75d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b761:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b765:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b769:	e8 aa fd ff ff       	call   c001b518 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b76e:	83 c4 20             	add    esp,0x20
c001b771:	83 c4 1c             	add    esp,0x1c
c001b774:	5b                   	pop    ebx
c001b775:	5e                   	pop    esi
c001b776:	5f                   	pop    edi
c001b777:	5d                   	pop    ebp
c001b778:	c3                   	ret    
c001b779:	90                   	nop

c001b77a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b77a:	57                   	push   edi
c001b77b:	56                   	push   esi
c001b77c:	53                   	push   ebx
c001b77d:	83 ec 10             	sub    esp,0x10
c001b780:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b784:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b788:	85 ff                	test   edi,edi
c001b78a:	74 7b                	je     c001b807 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b78c:	85 f6                	test   esi,esi
c001b78e:	74 77                	je     c001b807 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	6a 1c                	push   0x1c
c001b795:	e8 82 08 ff ff       	call   c000c01c <malloc>
c001b79a:	89 07                	mov    DWORD PTR [edi],eax
c001b79c:	89 c3                	mov    ebx,eax
c001b79e:	58                   	pop    eax
c001b79f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7a3:	50                   	push   eax
c001b7a4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b7a7:	50                   	push   eax
c001b7a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7ac:	50                   	push   eax
c001b7ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7b1:	50                   	push   eax
c001b7b2:	56                   	push   esi
c001b7b3:	e8 33 ff ff ff       	call   c001b6eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b7b8:	83 c4 20             	add    esp,0x20
c001b7bb:	84 c0                	test   al,al
c001b7bd:	74 07                	je     c001b7c6 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b7bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b7c4:	74 0b                	je     c001b7d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b7c6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b7ca:	b8 01 00 00 00       	mov    eax,0x1
c001b7cf:	eb 3b                	jmp    c001b80c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b7d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7d5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b7d9:	89 03                	mov    DWORD PTR [ebx],eax
c001b7db:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b7e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b7ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b7f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b7f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b7fe:	8a 06                	mov    al,BYTE PTR [esi]
c001b800:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b803:	31 c0                	xor    eax,eax
c001b805:	eb 05                	jmp    c001b80c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b807:	b8 04 00 00 00       	mov    eax,0x4
c001b80c:	83 c4 10             	add    esp,0x10
c001b80f:	5b                   	pop    ebx
c001b810:	5e                   	pop    esi
c001b811:	5f                   	pop    edi
c001b812:	c3                   	ret    
c001b813:	90                   	nop

c001b814 <ISO9660::exists(char const*)>:
c001b814:	83 ec 28             	sub    esp,0x28
c001b817:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b81b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b81f:	52                   	push   edx
c001b820:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b823:	52                   	push   edx
c001b824:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b828:	52                   	push   edx
c001b829:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b82d:	52                   	push   edx
c001b82e:	50                   	push   eax
c001b82f:	e8 b7 fe ff ff       	call   c001b6eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b834:	83 c4 3c             	add    esp,0x3c
c001b837:	c3                   	ret    

c001b838 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b838:	56                   	push   esi
c001b839:	53                   	push   ebx
c001b83a:	83 ec 14             	sub    esp,0x14
c001b83d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b841:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b845:	85 db                	test   ebx,ebx
c001b847:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b84b:	0f 94 c2             	sete   dl
c001b84e:	85 f6                	test   esi,esi
c001b850:	0f 94 c0             	sete   al
c001b853:	08 c2                	or     dl,al
c001b855:	75 68                	jne    c001b8bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b857:	85 c9                	test   ecx,ecx
c001b859:	74 64                	je     c001b8bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b85b:	83 ec 0c             	sub    esp,0xc
c001b85e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b861:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b865:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b86b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b872:	50                   	push   eax
c001b873:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b876:	50                   	push   eax
c001b877:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b87b:	50                   	push   eax
c001b87c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b880:	50                   	push   eax
c001b881:	51                   	push   ecx
c001b882:	e8 64 fe ff ff       	call   c001b6eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b887:	83 c4 20             	add    esp,0x20
c001b88a:	ba 01 00 00 00       	mov    edx,0x1
c001b88f:	84 c0                	test   al,al
c001b891:	74 31                	je     c001b8c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b893:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b897:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b89e:	89 03                	mov    DWORD PTR [ebx],eax
c001b8a0:	ba 00 00 00 00       	mov    edx,0x0
c001b8a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8a9:	85 c0                	test   eax,eax
c001b8ab:	0f 95 06             	setne  BYTE PTR [esi]
c001b8ae:	74 14                	je     c001b8c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8b0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b8b6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8bd:	eb 05                	jmp    c001b8c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8bf:	ba 04 00 00 00       	mov    edx,0x4
c001b8c4:	83 c4 14             	add    esp,0x14
c001b8c7:	89 d0                	mov    eax,edx
c001b8c9:	5b                   	pop    ebx
c001b8ca:	5e                   	pop    esi
c001b8cb:	c3                   	ret    

c001b8cc <ISO9660::openDir(char const*, void**)>:
c001b8cc:	57                   	push   edi
c001b8cd:	56                   	push   esi
c001b8ce:	53                   	push   ebx
c001b8cf:	83 ec 10             	sub    esp,0x10
c001b8d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b8d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b8da:	85 ff                	test   edi,edi
c001b8dc:	0f 84 95 00 00 00    	je     c001b977 <ISO9660::openDir(char const*, void**)+0xab>
c001b8e2:	85 f6                	test   esi,esi
c001b8e4:	0f 84 8d 00 00 00    	je     c001b977 <ISO9660::openDir(char const*, void**)+0xab>
c001b8ea:	83 ec 0c             	sub    esp,0xc
c001b8ed:	6a 1c                	push   0x1c
c001b8ef:	e8 28 07 ff ff       	call   c000c01c <malloc>
c001b8f4:	89 07                	mov    DWORD PTR [edi],eax
c001b8f6:	89 c3                	mov    ebx,eax
c001b8f8:	59                   	pop    ecx
c001b8f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8fd:	50                   	push   eax
c001b8fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b901:	50                   	push   eax
c001b902:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b906:	50                   	push   eax
c001b907:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b90b:	50                   	push   eax
c001b90c:	56                   	push   esi
c001b90d:	e8 d9 fd ff ff       	call   c001b6eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b912:	83 c4 20             	add    esp,0x20
c001b915:	84 c0                	test   al,al
c001b917:	74 07                	je     c001b920 <ISO9660::openDir(char const*, void**)+0x54>
c001b919:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b91e:	75 21                	jne    c001b941 <ISO9660::openDir(char const*, void**)+0x75>
c001b920:	0f b6 c0             	movzx  eax,al
c001b923:	52                   	push   edx
c001b924:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b928:	50                   	push   eax
c001b929:	68 76 2f 02 c0       	push   0xc0022f76
c001b92e:	e8 da 37 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001b933:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	b8 01 00 00 00       	mov    eax,0x1
c001b93f:	eb 3b                	jmp    c001b97c <ISO9660::openDir(char const*, void**)+0xb0>
c001b941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b945:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b949:	89 03                	mov    DWORD PTR [ebx],eax
c001b94b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b956:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b95d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b964:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b967:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b96e:	8a 06                	mov    al,BYTE PTR [esi]
c001b970:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b973:	31 c0                	xor    eax,eax
c001b975:	eb 05                	jmp    c001b97c <ISO9660::openDir(char const*, void**)+0xb0>
c001b977:	b8 04 00 00 00       	mov    eax,0x4
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	5b                   	pop    ebx
c001b980:	5e                   	pop    esi
c001b981:	5f                   	pop    edi
c001b982:	c3                   	ret    
c001b983:	90                   	nop

c001b984 <ISO9660::ISO9660()>:
c001b984:	83 ec 0c             	sub    esp,0xc
c001b987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98b:	83 ec 0c             	sub    esp,0xc
c001b98e:	50                   	push   eax
c001b98f:	e8 7e 3a ff ff       	call   c000f412 <Filesystem::Filesystem()>
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	ba 9c 2f 02 c0       	mov    edx,0xc0022f9c
c001b99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a0:	89 10                	mov    DWORD PTR [eax],edx
c001b9a2:	90                   	nop
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	c3                   	ret    
c001b9a7:	90                   	nop

c001b9a8 <SoundChannel::~SoundChannel()>:
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9b2:	83 ec 0c             	sub    esp,0xc
c001b9b5:	50                   	push   eax
c001b9b6:	e8 71 06 ff ff       	call   c000c02c <free>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	90                   	nop
c001b9bf:	83 c4 0c             	add    esp,0xc
c001b9c2:	c3                   	ret    
c001b9c3:	90                   	nop

c001b9c4 <SoundChannel::setSpeed(float)>:
c001b9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9c8:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b9cc:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b9cf:	c3                   	ret    

c001b9d0 <SoundChannel::getSpeed()>:
c001b9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9d4:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b9d7:	c3                   	ret    

c001b9d8 <SoundChannel::setVolume(int)>:
c001b9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9dc:	83 f8 64             	cmp    eax,0x64
c001b9df:	7e 05                	jle    c001b9e6 <SoundChannel::setVolume(int)+0xe>
c001b9e1:	b8 64 00 00 00       	mov    eax,0x64
c001b9e6:	85 c0                	test   eax,eax
c001b9e8:	79 02                	jns    c001b9ec <SoundChannel::setVolume(int)+0x14>
c001b9ea:	31 c0                	xor    eax,eax
c001b9ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9f0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b9f3:	c3                   	ret    

c001b9f4 <SoundChannel::getVolume()>:
c001b9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b9fb:	c3                   	ret    

c001b9fc <SoundChannel::pause()>:
c001b9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba00:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ba04:	c3                   	ret    
c001ba05:	90                   	nop

c001ba06 <SoundChannel::SoundChannel(int, int, int, int)>:
c001ba06:	83 ec 1c             	sub    esp,0x1c
c001ba09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba0d:	e8 ea ff ff ff       	call   c001b9fc <SoundChannel::pause()>
c001ba12:	83 c4 04             	add    esp,0x4
c001ba15:	6a 50                	push   0x50
c001ba17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba1b:	e8 b8 ff ff ff       	call   c001b9d8 <SoundChannel::setVolume(int)>
c001ba20:	83 c4 08             	add    esp,0x8
c001ba23:	d9 e8                	fld1   
c001ba25:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ba29:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ba2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba30:	e8 8f ff ff ff       	call   c001b9c4 <SoundChannel::setSpeed(float)>
c001ba35:	83 c4 08             	add    esp,0x8
c001ba38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ba40:	89 10                	mov    DWORD PTR [eax],edx
c001ba42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba55:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba58:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ba5d:	75 23                	jne    c001ba82 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ba5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba63:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba6c:	0f af c2             	imul   eax,edx
c001ba6f:	85 c0                	test   eax,eax
c001ba71:	79 03                	jns    c001ba76 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ba73:	83 c0 03             	add    eax,0x3
c001ba76:	c1 f8 02             	sar    eax,0x2
c001ba79:	05 a0 0f 00 00       	add    eax,0xfa0
c001ba7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba8a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ba8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba91:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ba98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba9c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001baa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001baaa:	c1 e0 02             	shl    eax,0x2
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	50                   	push   eax
c001bab1:	e8 66 05 ff ff       	call   c000c01c <malloc>
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	89 c2                	mov    edx,eax
c001babb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bac2:	83 ec 04             	sub    esp,0x4
c001bac5:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bac9:	50                   	push   eax
c001baca:	6a 01                	push   0x1
c001bacc:	6a 04                	push   0x4
c001bace:	e8 2a ce fe ff       	call   c00088fd <src_new>
c001bad3:	83 c4 10             	add    esp,0x10
c001bad6:	89 c2                	mov    edx,eax
c001bad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001badc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001badf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bae3:	85 c0                	test   eax,eax
c001bae5:	74 10                	je     c001baf7 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001bae7:	83 ec 0c             	sub    esp,0xc
c001baea:	68 f8 2f 02 c0       	push   0xc0022ff8
c001baef:	e8 e4 9d ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	90                   	nop
c001baf8:	83 c4 1c             	add    esp,0x1c
c001bafb:	c3                   	ret    

c001bafc <SoundChannel::play()>:
c001bafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb00:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bb04:	c3                   	ret    
c001bb05:	90                   	nop

c001bb06 <SoundChannel::paused()>:
c001bb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb0a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bb0d:	c3                   	ret    

c001bb0e <SoundChannel::getSampleRate()>:
c001bb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb12:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb14:	c3                   	ret    
c001bb15:	90                   	nop

c001bb16 <SoundChannel::getBits()>:
c001bb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb1d:	c3                   	ret    

c001bb1e <SoundChannel::getBufferUsed()>:
c001bb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb22:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bb25:	c3                   	ret    

c001bb26 <SoundChannel::getBufferSize()>:
c001bb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb2d:	c3                   	ret    

c001bb2e <SoundChannel::unbuffer(float*, int, int)>:
c001bb2e:	53                   	push   ebx
c001bb2f:	83 ec 40             	sub    esp,0x40
c001bb32:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bb36:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bb3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bb41:	db 03                	fild   DWORD PTR [ebx]
c001bb43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb47:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bb4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bb4e:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bb51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb55:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bb59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb61:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb69:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb6d:	50                   	push   eax
c001bb6e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bb71:	e8 41 ca fe ff       	call   c00085b7 <src_process>
c001bb76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bb7a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bb7d:	83 c4 0c             	add    esp,0xc
c001bb80:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bb83:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bb86:	29 d0                	sub    eax,edx
c001bb88:	c1 e0 02             	shl    eax,0x2
c001bb8b:	50                   	push   eax
c001bb8c:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bb8f:	50                   	push   eax
c001bb90:	51                   	push   ecx
c001bb91:	e8 b6 4a fe ff       	call   c000064c <memmove>
c001bb96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bb9a:	83 c4 48             	add    esp,0x48
c001bb9d:	5b                   	pop    ebx
c001bb9e:	c3                   	ret    
c001bb9f:	90                   	nop

c001bba0 <SoundChannel::buffer8(unsigned char*, int)>:
c001bba0:	53                   	push   ebx
c001bba1:	31 c0                	xor    eax,eax
c001bba3:	83 ec 08             	sub    esp,0x8
c001bba6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbaa:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bbad:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bbb0:	74 35                	je     c001bbe7 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bbb2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bbb6:	7d 2f                	jge    c001bbe7 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bbb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbbc:	d9 05 14 30 02 c0    	fld    DWORD PTR ds:0xc0023014
c001bbc2:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bbc6:	40                   	inc    eax
c001bbc7:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bbcc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bbcf:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bbd3:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bbd6:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bbd9:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bbdc:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bbdf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bbe2:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bbe5:	eb c9                	jmp    c001bbb0 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bbe7:	83 c4 08             	add    esp,0x8
c001bbea:	5b                   	pop    ebx
c001bbeb:	c3                   	ret    

c001bbec <SoundDevice::SoundDevice(char const*)>:
c001bbec:	83 ec 1c             	sub    esp,0x1c
c001bbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf3:	83 ec 08             	sub    esp,0x8
c001bbf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbfa:	50                   	push   eax
c001bbfb:	e8 08 4b ff ff       	call   c0010708 <Device::Device(char const*)>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	ba 20 30 02 c0       	mov    edx,0xc0023020
c001bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0c:	89 10                	mov    DWORD PTR [eax],edx
c001bc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc12:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc20:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bc2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc32:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc37:	7f 19                	jg     c001bc52 <SoundDevice::SoundDevice(char const*)+0x66>
c001bc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc41:	83 c2 54             	add    edx,0x54
c001bc44:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bc4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc50:	eb e0                	jmp    c001bc32 <SoundDevice::SoundDevice(char const*)+0x46>
c001bc52:	90                   	nop
c001bc53:	83 c4 1c             	add    esp,0x1c
c001bc56:	c3                   	ret    
c001bc57:	90                   	nop

c001bc58 <SoundDevice::~SoundDevice()>:
c001bc58:	53                   	push   ebx
c001bc59:	83 ec 18             	sub    esp,0x18
c001bc5c:	ba 20 30 02 c0       	mov    edx,0xc0023020
c001bc61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc65:	89 10                	mov    DWORD PTR [eax],edx
c001bc67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc6f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc74:	7f 46                	jg     c001bcbc <SoundDevice::~SoundDevice()+0x64>
c001bc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc7e:	83 c2 54             	add    edx,0x54
c001bc81:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bc85:	85 c0                	test   eax,eax
c001bc87:	74 2d                	je     c001bcb6 <SoundDevice::~SoundDevice()+0x5e>
c001bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc91:	83 c2 54             	add    edx,0x54
c001bc94:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bc98:	85 db                	test   ebx,ebx
c001bc9a:	74 1a                	je     c001bcb6 <SoundDevice::~SoundDevice()+0x5e>
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	53                   	push   ebx
c001bca0:	e8 03 fd ff ff       	call   c001b9a8 <SoundChannel::~SoundChannel()>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	83 ec 08             	sub    esp,0x8
c001bcab:	6a 2c                	push   0x2c
c001bcad:	53                   	push   ebx
c001bcae:	e8 7a 33 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bcba:	eb b3                	jmp    c001bc6f <SoundDevice::~SoundDevice()+0x17>
c001bcbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	50                   	push   eax
c001bcc4:	e8 f1 46 ff ff       	call   c00103ba <Device::~Device()>
c001bcc9:	83 c4 10             	add    esp,0x10
c001bccc:	90                   	nop
c001bccd:	83 c4 18             	add    esp,0x18
c001bcd0:	5b                   	pop    ebx
c001bcd1:	c3                   	ret    

c001bcd2 <SoundDevice::~SoundDevice()>:
c001bcd2:	83 ec 0c             	sub    esp,0xc
c001bcd5:	83 ec 0c             	sub    esp,0xc
c001bcd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcdc:	e8 77 ff ff ff       	call   c001bc58 <SoundDevice::~SoundDevice()>
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	83 ec 08             	sub    esp,0x8
c001bce7:	68 e4 01 00 00       	push   0x1e4
c001bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcf0:	e8 38 33 ff ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001bcf5:	83 c4 10             	add    esp,0x10
c001bcf8:	83 c4 0c             	add    esp,0xc
c001bcfb:	c3                   	ret    

c001bcfc <SoundDevice::getFreeChannelNum()>:
c001bcfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd00:	31 c0                	xor    eax,eax
c001bd02:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bd0a:	74 09                	je     c001bd15 <SoundDevice::getFreeChannelNum()+0x19>
c001bd0c:	40                   	inc    eax
c001bd0d:	83 f8 20             	cmp    eax,0x20
c001bd10:	75 f0                	jne    c001bd02 <SoundDevice::getFreeChannelNum()+0x6>
c001bd12:	83 c8 ff             	or     eax,0xffffffff
c001bd15:	c3                   	ret    

c001bd16 <SoundDevice::addChannel(SoundChannel*)>:
c001bd16:	56                   	push   esi
c001bd17:	53                   	push   ebx
c001bd18:	51                   	push   ecx
c001bd19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd21:	53                   	push   ebx
c001bd22:	e8 d5 ff ff ff       	call   c001bcfc <SoundDevice::getFreeChannelNum()>
c001bd27:	5a                   	pop    edx
c001bd28:	83 f8 ff             	cmp    eax,0xffffffff
c001bd2b:	74 51                	je     c001bd7e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd2d:	85 f6                	test   esi,esi
c001bd2f:	74 4d                	je     c001bd7e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd31:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bd38:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bd3f:	75 30                	jne    c001bd71 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bd41:	83 ec 0c             	sub    esp,0xc
c001bd44:	56                   	push   esi
c001bd45:	e8 c4 fd ff ff       	call   c001bb0e <SoundChannel::getSampleRate()>
c001bd4a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bd50:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd53:	e8 be fd ff ff       	call   c001bb16 <SoundChannel::getBits()>
c001bd58:	83 c4 0c             	add    esp,0xc
c001bd5b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bd61:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd63:	50                   	push   eax
c001bd64:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bd6a:	53                   	push   ebx
c001bd6b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bd6e:	83 c4 10             	add    esp,0x10
c001bd71:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bd77:	b8 01 00 00 00       	mov    eax,0x1
c001bd7c:	eb 03                	jmp    c001bd81 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bd7e:	83 c8 ff             	or     eax,0xffffffff
c001bd81:	5a                   	pop    edx
c001bd82:	5b                   	pop    ebx
c001bd83:	5e                   	pop    esi
c001bd84:	c3                   	ret    
c001bd85:	90                   	nop

c001bd86 <SoundDevice::removeChannel(int)>:
c001bd86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8e:	83 fa 1f             	cmp    edx,0x1f
c001bd91:	77 23                	ja     c001bdb6 <SoundDevice::removeChannel(int)+0x30>
c001bd93:	8d 14 90             	lea    edx,[eax+edx*4]
c001bd96:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bd9d:	74 17                	je     c001bdb6 <SoundDevice::removeChannel(int)+0x30>
c001bd9f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bda9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bdaf:	75 05                	jne    c001bdb6 <SoundDevice::removeChannel(int)+0x30>
c001bdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdb3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bdb6:	c3                   	ret    
c001bdb7:	90                   	nop

c001bdb8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bdb8:	56                   	push   esi
c001bdb9:	53                   	push   ebx
c001bdba:	31 db                	xor    ebx,ebx
c001bdbc:	83 ec 14             	sub    esp,0x14
c001bdbf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bdc3:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bdc7:	7d 55                	jge    c001be1e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bdc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdcd:	d9 e8                	fld1   
c001bdcf:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bdd2:	d8 0d 50 30 02 c0    	fmul   DWORD PTR ds:0xc0023050
c001bdd8:	d8 0d 54 30 02 c0    	fmul   DWORD PTR ds:0xc0023054
c001bdde:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bde2:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bde6:	d8 15 58 30 02 c0    	fcom   DWORD PTR ds:0xc0023058
c001bdec:	df e0                	fnstsw ax
c001bdee:	9e                   	sahf   
c001bdef:	72 08                	jb     c001bdf9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bdf1:	dd d8                	fstp   st(0)
c001bdf3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bdf7:	eb 22                	jmp    c001be1b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bdf9:	d9 ee                	fldz   
c001bdfb:	d8 d9                	fcomp  st(1)
c001bdfd:	df e0                	fnstsw ax
c001bdff:	9e                   	sahf   
c001be00:	72 08                	jb     c001be0a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001be02:	dd d8                	fstp   st(0)
c001be04:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001be08:	eb 11                	jmp    c001be1b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001be0a:	83 ec 10             	sub    esp,0x10
c001be0d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001be10:	e8 e7 35 00 00       	call   c001f3fc <lrintf>
c001be15:	83 c4 10             	add    esp,0x10
c001be18:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001be1b:	43                   	inc    ebx
c001be1c:	eb a5                	jmp    c001bdc3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001be1e:	83 c4 14             	add    esp,0x14
c001be21:	5b                   	pop    ebx
c001be22:	5e                   	pop    esi
c001be23:	c3                   	ret    

c001be24 <SoundDevice::getAudio(int, float*, float*)>:
c001be24:	55                   	push   ebp
c001be25:	57                   	push   edi
c001be26:	56                   	push   esi
c001be27:	53                   	push   ebx
c001be28:	31 db                	xor    ebx,ebx
c001be2a:	83 ec 20             	sub    esp,0x20
c001be2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be31:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be35:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001be39:	c1 e0 02             	shl    eax,0x2
c001be3c:	50                   	push   eax
c001be3d:	6a 00                	push   0x0
c001be3f:	55                   	push   ebp
c001be40:	e8 75 48 fe ff       	call   c00006ba <memset>
c001be45:	83 c4 10             	add    esp,0x10
c001be48:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001be4c:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001be53:	85 c0                	test   eax,eax
c001be55:	0f 84 94 00 00 00    	je     c001beef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be5b:	83 ec 0c             	sub    esp,0xc
c001be5e:	50                   	push   eax
c001be5f:	e8 a2 fc ff ff       	call   c001bb06 <SoundChannel::paused()>
c001be64:	83 c4 10             	add    esp,0x10
c001be67:	84 c0                	test   al,al
c001be69:	0f 85 80 00 00 00    	jne    c001beef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be6f:	83 ec 0c             	sub    esp,0xc
c001be72:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be79:	e8 76 fb ff ff       	call   c001b9f4 <SoundChannel::getVolume()>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	85 c0                	test   eax,eax
c001be83:	74 6a                	je     c001beef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be85:	83 ec 0c             	sub    esp,0xc
c001be88:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be8f:	e8 60 fb ff ff       	call   c001b9f4 <SoundChannel::getVolume()>
c001be94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be98:	d9 05 5c 30 02 c0    	fld    DWORD PTR ds:0xc002305c
c001be9e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001bea2:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001bea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001beaa:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001beb0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001beb4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bebb:	e8 6e fc ff ff       	call   c001bb2e <SoundChannel::unbuffer(float*, int, int)>
c001bec0:	83 c4 20             	add    esp,0x20
c001bec3:	31 d2                	xor    edx,edx
c001bec5:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bec9:	39 c2                	cmp    edx,eax
c001becb:	7d 1a                	jge    c001bee7 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001becd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001bed1:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001bed4:	d8 c9                	fmul   st,st(1)
c001bed6:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001bedc:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001bee0:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001bee4:	42                   	inc    edx
c001bee5:	eb e2                	jmp    c001bec9 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001bee7:	dd d8                	fstp   st(0)
c001bee9:	39 c7                	cmp    edi,eax
c001beeb:	7e 02                	jle    c001beef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001beed:	89 c7                	mov    edi,eax
c001beef:	43                   	inc    ebx
c001bef0:	83 fb 20             	cmp    ebx,0x20
c001bef3:	0f 85 53 ff ff ff    	jne    c001be4c <SoundDevice::getAudio(int, float*, float*)+0x28>
c001bef9:	83 c4 1c             	add    esp,0x1c
c001befc:	89 f8                	mov    eax,edi
c001befe:	5b                   	pop    ebx
c001beff:	5e                   	pop    esi
c001bf00:	5f                   	pop    edi
c001bf01:	5d                   	pop    ebp
c001bf02:	c3                   	ret    
c001bf03:	90                   	nop

c001bf04 <PCI::open(int, int, void*)>:
c001bf04:	83 ec 18             	sub    esp,0x18
c001bf07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf0b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf0d:	50                   	push   eax
c001bf0e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bf11:	31 c0                	xor    eax,eax
c001bf13:	83 c4 1c             	add    esp,0x1c
c001bf16:	c3                   	ret    
c001bf17:	90                   	nop

c001bf18 <PCI::close(int, int, void*)>:
c001bf18:	31 c0                	xor    eax,eax
c001bf1a:	c3                   	ret    
c001bf1b:	90                   	nop

c001bf1c <PCI::PCI()>:
c001bf1c:	83 ec 0c             	sub    esp,0xc
c001bf1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf23:	83 ec 08             	sub    esp,0x8
c001bf26:	68 60 30 02 c0       	push   0xc0023060
c001bf2b:	50                   	push   eax
c001bf2c:	e8 63 3e ff ff       	call   c000fd94 <Bus::Bus(char const*)>
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	ba ec 30 02 c0       	mov    edx,0xc00230ec
c001bf39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3d:	89 10                	mov    DWORD PTR [eax],edx
c001bf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf49:	0f b6 d0             	movzx  edx,al
c001bf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf50:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf61:	0f b6 d0             	movzx  edx,al
c001bf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf68:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf77:	8d 50 01             	lea    edx,[eax+0x1]
c001bf7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf7e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bf84:	0f b6 d0             	movzx  edx,al
c001bf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bf8f:	83 c9 c0             	or     ecx,0xffffffc0
c001bf92:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bf96:	90                   	nop
c001bf97:	83 c4 0c             	add    esp,0xc
c001bf9a:	c3                   	ret    
c001bf9b:	90                   	nop

c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bf9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bfa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfa5:	89 ca                	mov    edx,ecx
c001bfa7:	c1 e0 10             	shl    eax,0x10
c001bfaa:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bfb0:	09 d0                	or     eax,edx
c001bfb2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bfb7:	c1 e2 08             	shl    edx,0x8
c001bfba:	09 d0                	or     eax,edx
c001bfbc:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001bfc1:	c1 e2 0b             	shl    edx,0xb
c001bfc4:	09 d0                	or     eax,edx
c001bfc6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bfcb:	0d 00 00 00 80       	or     eax,0x80000000
c001bfd0:	ef                   	out    dx,eax
c001bfd1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bfd6:	ed                   	in     eax,dx
c001bfd7:	83 e1 02             	and    ecx,0x2
c001bfda:	0f b6 c9             	movzx  ecx,cl
c001bfdd:	c1 e1 03             	shl    ecx,0x3
c001bfe0:	d3 e8                	shr    eax,cl
c001bfe2:	c3                   	ret    
c001bfe3:	90                   	nop

c001bfe4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bfe4:	6a 00                	push   0x0
c001bfe6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfeb:	50                   	push   eax
c001bfec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bff1:	50                   	push   eax
c001bff2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bff7:	50                   	push   eax
c001bff8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bffc:	e8 9b ff ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c001:	83 c4 14             	add    esp,0x14
c001c004:	c3                   	ret    
c001c005:	90                   	nop

c001c006 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c006:	6a 0e                	push   0xe
c001c008:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c00d:	50                   	push   eax
c001c00e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c013:	50                   	push   eax
c001c014:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c019:	50                   	push   eax
c001c01a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c01e:	e8 79 ff ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c023:	83 c4 14             	add    esp,0x14
c001c026:	0f b6 c0             	movzx  eax,al
c001c029:	c3                   	ret    

c001c02a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c02a:	55                   	push   ebp
c001c02b:	57                   	push   edi
c001c02c:	56                   	push   esi
c001c02d:	53                   	push   ebx
c001c02e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c033:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c038:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c03d:	6a 0a                	push   0xa
c001c03f:	56                   	push   esi
c001c040:	55                   	push   ebp
c001c041:	57                   	push   edi
c001c042:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c046:	e8 51 ff ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c04b:	6a 0a                	push   0xa
c001c04d:	89 c3                	mov    ebx,eax
c001c04f:	56                   	push   esi
c001c050:	0f b6 db             	movzx  ebx,bl
c001c053:	55                   	push   ebp
c001c054:	57                   	push   edi
c001c055:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c059:	e8 3e ff ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c05e:	83 c4 28             	add    esp,0x28
c001c061:	25 00 ff 00 00       	and    eax,0xff00
c001c066:	09 d8                	or     eax,ebx
c001c068:	5b                   	pop    ebx
c001c069:	5e                   	pop    esi
c001c06a:	5f                   	pop    edi
c001c06b:	5d                   	pop    ebp
c001c06c:	c3                   	ret    
c001c06d:	90                   	nop

c001c06e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c06e:	6a 08                	push   0x8
c001c070:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c075:	50                   	push   eax
c001c076:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c07b:	50                   	push   eax
c001c07c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c081:	50                   	push   eax
c001c082:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c086:	e8 11 ff ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c08b:	83 c4 14             	add    esp,0x14
c001c08e:	0f b6 c4             	movzx  eax,ah
c001c091:	c3                   	ret    

c001c092 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c092:	6a 08                	push   0x8
c001c094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c099:	50                   	push   eax
c001c09a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c09f:	50                   	push   eax
c001c0a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0a5:	50                   	push   eax
c001c0a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0aa:	e8 ed fe ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0af:	83 c4 14             	add    esp,0x14
c001c0b2:	c3                   	ret    
c001c0b3:	90                   	nop

c001c0b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c0b4:	6a 3c                	push   0x3c
c001c0b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0bb:	50                   	push   eax
c001c0bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0c1:	50                   	push   eax
c001c0c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0c7:	50                   	push   eax
c001c0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0cc:	e8 cb fe ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0d1:	83 c4 14             	add    esp,0x14
c001c0d4:	c3                   	ret    
c001c0d5:	90                   	nop

c001c0d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c0d6:	6a 18                	push   0x18
c001c0d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0dd:	50                   	push   eax
c001c0de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0e3:	50                   	push   eax
c001c0e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0e9:	50                   	push   eax
c001c0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0ee:	e8 a9 fe ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0f3:	83 c4 14             	add    esp,0x14
c001c0f6:	0f b6 c4             	movzx  eax,ah
c001c0f9:	c3                   	ret    

c001c0fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0fa:	55                   	push   ebp
c001c0fb:	57                   	push   edi
c001c0fc:	56                   	push   esi
c001c0fd:	53                   	push   ebx
c001c0fe:	50                   	push   eax
c001c0ff:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c103:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c108:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c10d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c112:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c119:	8d 43 12             	lea    eax,[ebx+0x12]
c001c11c:	83 c3 10             	add    ebx,0x10
c001c11f:	0f b6 c0             	movzx  eax,al
c001c122:	0f b6 db             	movzx  ebx,bl
c001c125:	50                   	push   eax
c001c126:	51                   	push   ecx
c001c127:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c12b:	57                   	push   edi
c001c12c:	55                   	push   ebp
c001c12d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c131:	e8 66 fe ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c136:	53                   	push   ebx
c001c137:	89 c6                	mov    esi,eax
c001c139:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c13d:	c1 e6 10             	shl    esi,0x10
c001c140:	51                   	push   ecx
c001c141:	57                   	push   edi
c001c142:	55                   	push   ebp
c001c143:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c147:	e8 50 fe ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c14c:	83 c4 2c             	add    esp,0x2c
c001c14f:	0f b7 c0             	movzx  eax,ax
c001c152:	5b                   	pop    ebx
c001c153:	09 f0                	or     eax,esi
c001c155:	5e                   	pop    esi
c001c156:	5f                   	pop    edi
c001c157:	5d                   	pop    ebp
c001c158:	c3                   	ret    
c001c159:	90                   	nop

c001c15a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c15a:	53                   	push   ebx
c001c15b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c160:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c169:	c1 e1 10             	shl    ecx,0x10
c001c16c:	25 fc 00 00 00       	and    eax,0xfc
c001c171:	09 c1                	or     ecx,eax
c001c173:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c178:	c1 e0 08             	shl    eax,0x8
c001c17b:	09 c1                	or     ecx,eax
c001c17d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c182:	c1 e0 0b             	shl    eax,0xb
c001c185:	09 c1                	or     ecx,eax
c001c187:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c18d:	89 c8                	mov    eax,ecx
c001c18f:	ef                   	out    dx,eax
c001c190:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c195:	ed                   	in     eax,dx
c001c196:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c19b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c1a0:	74 0a                	je     c001c1ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c1a2:	0f b7 d8             	movzx  ebx,ax
c001c1a5:	89 d0                	mov    eax,edx
c001c1a7:	c1 e0 10             	shl    eax,0x10
c001c1aa:	eb 05                	jmp    c001c1b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c1ac:	66 31 c0             	xor    ax,ax
c001c1af:	89 d3                	mov    ebx,edx
c001c1b1:	09 c3                	or     ebx,eax
c001c1b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c1b8:	89 c8                	mov    eax,ecx
c001c1ba:	ef                   	out    dx,eax
c001c1bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1c0:	89 d8                	mov    eax,ebx
c001c1c2:	ef                   	out    dx,eax
c001c1c3:	5b                   	pop    ebx
c001c1c4:	c3                   	ret    
c001c1c5:	90                   	nop

c001c1c6 <PCI::checkBus(unsigned char)>:
c001c1c6:	56                   	push   esi
c001c1c7:	53                   	push   ebx
c001c1c8:	31 db                	xor    ebx,ebx
c001c1ca:	51                   	push   ecx
c001c1cb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c1d0:	52                   	push   edx
c001c1d1:	53                   	push   ebx
c001c1d2:	43                   	inc    ebx
c001c1d3:	56                   	push   esi
c001c1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d8:	e8 29 03 00 00       	call   c001c506 <PCI::checkDevice(unsigned char, unsigned char)>
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	83 fb 20             	cmp    ebx,0x20
c001c1e3:	75 eb                	jne    c001c1d0 <PCI::checkBus(unsigned char)+0xa>
c001c1e5:	58                   	pop    eax
c001c1e6:	5b                   	pop    ebx
c001c1e7:	5e                   	pop    esi
c001c1e8:	c3                   	ret    
c001c1e9:	90                   	nop

c001c1ea <PCI::foundDevice(PCIDeviceInfo)>:
c001c1ea:	55                   	push   ebp
c001c1eb:	57                   	push   edi
c001c1ec:	56                   	push   esi
c001c1ed:	53                   	push   ebx
c001c1ee:	83 ec 1c             	sub    esp,0x1c
c001c1f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1f5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c1fb:	0f 84 51 01 00 00    	je     c001c352 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c201:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c205:	66 81 f9 06 04       	cmp    cx,0x406
c001c20a:	75 2c                	jne    c001c238 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c20c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c211:	50                   	push   eax
c001c212:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c217:	50                   	push   eax
c001c218:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c21d:	50                   	push   eax
c001c21e:	56                   	push   esi
c001c21f:	e8 b2 fe ff ff       	call   c001c0d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c224:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c228:	0f b6 c0             	movzx  eax,al
c001c22b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c22f:	83 c4 2c             	add    esp,0x2c
c001c232:	5b                   	pop    ebx
c001c233:	5e                   	pop    esi
c001c234:	5f                   	pop    edi
c001c235:	5d                   	pop    ebp
c001c236:	eb 8e                	jmp    c001c1c6 <PCI::checkBus(unsigned char)>
c001c238:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c23c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c242:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c246:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c24a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c24e:	88 d3                	mov    bl,dl
c001c250:	85 c0                	test   eax,eax
c001c252:	74 33                	je     c001c287 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c254:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c257:	85 d2                	test   edx,edx
c001c259:	74 28                	je     c001c283 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c25b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c261:	31 ef                	xor    edi,ebp
c001c263:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c269:	75 18                	jne    c001c283 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c26b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c26f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c275:	75 0c                	jne    c001c283 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c277:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c27d:	0f 84 cf 00 00 00    	je     c001c352 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c283:	8b 00                	mov    eax,DWORD PTR [eax]
c001c285:	eb c9                	jmp    c001c250 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c287:	66 81 f9 01 06       	cmp    cx,0x601
c001c28c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c290:	75 18                	jne    c001c2aa <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	68 58 01 00 00       	push   0x158
c001c29a:	e8 7f 2d ff ff       	call   c000f01e <operator new(unsigned long)>
c001c29f:	59                   	pop    ecx
c001c2a0:	89 c5                	mov    ebp,eax
c001c2a2:	5f                   	pop    edi
c001c2a3:	68 68 30 02 c0       	push   0xc0023068
c001c2a8:	eb 7d                	jmp    c001c327 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c2aa:	66 81 f9 01 01       	cmp    cx,0x101
c001c2af:	75 60                	jne    c001c311 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	68 70 02 00 00       	push   0x270
c001c2b9:	e8 60 2d ff ff       	call   c000f01e <operator new(unsigned long)>
c001c2be:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2c1:	89 c5                	mov    ebp,eax
c001c2c3:	e8 02 03 00 00       	call   c001c5ca <IDE::IDE()>
c001c2c8:	58                   	pop    eax
c001c2c9:	5a                   	pop    edx
c001c2ca:	55                   	push   ebp
c001c2cb:	56                   	push   esi
c001c2cc:	e8 47 42 ff ff       	call   c0010518 <Device::addChild(Device*)>
c001c2d1:	83 ec 1c             	sub    esp,0x1c
c001c2d4:	b9 09 00 00 00       	mov    ecx,0x9
c001c2d9:	fc                   	cld    
c001c2da:	89 e7                	mov    edi,esp
c001c2dc:	89 de                	mov    esi,ebx
c001c2de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2e0:	55                   	push   ebp
c001c2e1:	e8 0c 41 ff ff       	call   c00103f2 <Device::preOpenPCI(PCIDeviceInfo)>
c001c2e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2e9:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c2ed:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c2f5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c2fd:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c305:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c308:	83 c4 4c             	add    esp,0x4c
c001c30b:	5b                   	pop    ebx
c001c30c:	5e                   	pop    esi
c001c30d:	5f                   	pop    edi
c001c30e:	5d                   	pop    ebp
c001c30f:	ff e0                	jmp    eax
c001c311:	83 ec 0c             	sub    esp,0xc
c001c314:	68 58 01 00 00       	push   0x158
c001c319:	e8 00 2d ff ff       	call   c000f01e <operator new(unsigned long)>
c001c31e:	59                   	pop    ecx
c001c31f:	89 c5                	mov    ebp,eax
c001c321:	5f                   	pop    edi
c001c322:	68 87 30 02 c0       	push   0xc0023087
c001c327:	55                   	push   ebp
c001c328:	e8 d7 44 ff ff       	call   c0010804 <DriverlessDevice::DriverlessDevice(char const*)>
c001c32d:	58                   	pop    eax
c001c32e:	5a                   	pop    edx
c001c32f:	55                   	push   ebp
c001c330:	56                   	push   esi
c001c331:	e8 e2 41 ff ff       	call   c0010518 <Device::addChild(Device*)>
c001c336:	b9 09 00 00 00       	mov    ecx,0x9
c001c33b:	fc                   	cld    
c001c33c:	89 df                	mov    edi,ebx
c001c33e:	89 de                	mov    esi,ebx
c001c340:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c342:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c346:	83 c4 2c             	add    esp,0x2c
c001c349:	5b                   	pop    ebx
c001c34a:	5e                   	pop    esi
c001c34b:	5f                   	pop    edi
c001c34c:	5d                   	pop    ebp
c001c34d:	e9 a0 40 ff ff       	jmp    c00103f2 <Device::preOpenPCI(PCIDeviceInfo)>
c001c352:	83 c4 1c             	add    esp,0x1c
c001c355:	5b                   	pop    ebx
c001c356:	5e                   	pop    esi
c001c357:	5f                   	pop    edi
c001c358:	5d                   	pop    ebp
c001c359:	c3                   	ret    

c001c35a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c35a:	55                   	push   ebp
c001c35b:	57                   	push   edi
c001c35c:	56                   	push   esi
c001c35d:	53                   	push   ebx
c001c35e:	83 ec 5c             	sub    esp,0x5c
c001c361:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c365:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c369:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c36d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c372:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c376:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c37a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c37f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c383:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c388:	6a 0c                	push   0xc
c001c38a:	55                   	push   ebp
c001c38b:	53                   	push   ebx
c001c38c:	57                   	push   edi
c001c38d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c394:	e8 03 fc ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c399:	55                   	push   ebp
c001c39a:	53                   	push   ebx
c001c39b:	57                   	push   edi
c001c39c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c3a3:	e8 82 fc ff ff       	call   c001c02a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c3a8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c3ad:	83 c4 24             	add    esp,0x24
c001c3b0:	55                   	push   ebp
c001c3b1:	53                   	push   ebx
c001c3b2:	57                   	push   edi
c001c3b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c3b7:	e8 f8 fc ff ff       	call   c001c0b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c3bc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c3c0:	6a 3c                	push   0x3c
c001c3c2:	55                   	push   ebp
c001c3c3:	53                   	push   ebx
c001c3c4:	57                   	push   edi
c001c3c5:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c3cc:	e8 cb fb ff ff       	call   c001bf9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3d1:	0f b6 c4             	movzx  eax,ah
c001c3d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3d8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c3dc:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c3e0:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001c3e5:	83 c4 24             	add    esp,0x24
c001c3e8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c3ee:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c3f5:	74 6c                	je     c001c463 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c3f7:	31 f6                	xor    esi,esi
c001c3f9:	8b 15 68 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024368
c001c3ff:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c405:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c40b:	7e 56                	jle    c001c463 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c40d:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c410:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c417:	39 cb                	cmp    ebx,ecx
c001c419:	75 45                	jne    c001c460 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c41b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c422:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c426:	75 38                	jne    c001c460 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	68 a1 30 02 c0       	push   0xc00230a1
c001c430:	e8 d8 2c ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001c435:	8b 15 68 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024368
c001c43b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c441:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c449:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c44d:	52                   	push   edx
c001c44e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c452:	53                   	push   ebx
c001c453:	68 c6 30 02 c0       	push   0xc00230c6
c001c458:	e8 b0 2c ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001c45d:	83 c4 20             	add    esp,0x20
c001c460:	46                   	inc    esi
c001c461:	eb 96                	jmp    c001c3f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c463:	31 d2                	xor    edx,edx
c001c465:	83 ec 0c             	sub    esp,0xc
c001c468:	55                   	push   ebp
c001c469:	53                   	push   ebx
c001c46a:	57                   	push   edi
c001c46b:	52                   	push   edx
c001c46c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c470:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c477:	e8 7e fc ff ff       	call   c001c0fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c47c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c480:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c484:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c488:	42                   	inc    edx
c001c489:	83 c4 20             	add    esp,0x20
c001c48c:	83 fa 06             	cmp    edx,0x6
c001c48f:	75 d4                	jne    c001c465 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c491:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c495:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c499:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c49d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c4a1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c4a5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c4a9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c4ae:	86 e0                	xchg   al,ah
c001c4b0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c4b5:	55                   	push   ebp
c001c4b6:	53                   	push   ebx
c001c4b7:	57                   	push   edi
c001c4b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c4bc:	e8 ad fb ff ff       	call   c001c06e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c4c1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c4c5:	55                   	push   ebp
c001c4c6:	53                   	push   ebx
c001c4c7:	57                   	push   edi
c001c4c8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c4cf:	e8 10 fb ff ff       	call   c001bfe4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4d4:	83 ec 0c             	sub    esp,0xc
c001c4d7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c4dc:	b9 09 00 00 00       	mov    ecx,0x9
c001c4e1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c4e5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c4e9:	fc                   	cld    
c001c4ea:	89 e7                	mov    edi,esp
c001c4ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4ee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c4f5:	e8 f0 fc ff ff       	call   c001c1ea <PCI::foundDevice(PCIDeviceInfo)>
c001c4fa:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c500:	5b                   	pop    ebx
c001c501:	5e                   	pop    esi
c001c502:	5f                   	pop    edi
c001c503:	5d                   	pop    ebp
c001c504:	c3                   	ret    
c001c505:	90                   	nop

c001c506 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c506:	55                   	push   ebp
c001c507:	57                   	push   edi
c001c508:	56                   	push   esi
c001c509:	53                   	push   ebx
c001c50a:	83 ec 0c             	sub    esp,0xc
c001c50d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c511:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c516:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c51b:	6a 00                	push   0x0
c001c51d:	56                   	push   esi
c001c51e:	57                   	push   edi
c001c51f:	55                   	push   ebp
c001c520:	e8 bf fa ff ff       	call   c001bfe4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c525:	6a 00                	push   0x0
c001c527:	56                   	push   esi
c001c528:	57                   	push   edi
c001c529:	55                   	push   ebp
c001c52a:	e8 2b fe ff ff       	call   c001c35a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c52f:	83 c4 20             	add    esp,0x20
c001c532:	6a 00                	push   0x0
c001c534:	56                   	push   esi
c001c535:	57                   	push   edi
c001c536:	55                   	push   ebp
c001c537:	e8 ca fa ff ff       	call   c001c006 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	84 c0                	test   al,al
c001c541:	79 27                	jns    c001c56a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c543:	bb 01 00 00 00       	mov    ebx,0x1
c001c548:	53                   	push   ebx
c001c549:	56                   	push   esi
c001c54a:	57                   	push   edi
c001c54b:	55                   	push   ebp
c001c54c:	e8 93 fa ff ff       	call   c001bfe4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c551:	83 c4 10             	add    esp,0x10
c001c554:	66 40                	inc    ax
c001c556:	74 0c                	je     c001c564 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c558:	53                   	push   ebx
c001c559:	56                   	push   esi
c001c55a:	57                   	push   edi
c001c55b:	55                   	push   ebp
c001c55c:	e8 f9 fd ff ff       	call   c001c35a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	43                   	inc    ebx
c001c565:	83 fb 08             	cmp    ebx,0x8
c001c568:	75 de                	jne    c001c548 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c56a:	83 c4 0c             	add    esp,0xc
c001c56d:	5b                   	pop    ebx
c001c56e:	5e                   	pop    esi
c001c56f:	5f                   	pop    edi
c001c570:	5d                   	pop    ebp
c001c571:	c3                   	ret    

c001c572 <PCI::detect()>:
c001c572:	56                   	push   esi
c001c573:	53                   	push   ebx
c001c574:	53                   	push   ebx
c001c575:	31 db                	xor    ebx,ebx
c001c577:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c57b:	6a 00                	push   0x0
c001c57d:	6a 00                	push   0x0
c001c57f:	6a 00                	push   0x0
c001c581:	56                   	push   esi
c001c582:	e8 7f fa ff ff       	call   c001c006 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	a8 80                	test   al,0x80
c001c58c:	75 21                	jne    c001c5af <PCI::detect()+0x3d>
c001c58e:	51                   	push   ecx
c001c58f:	51                   	push   ecx
c001c590:	6a 00                	push   0x0
c001c592:	56                   	push   esi
c001c593:	e8 2e fc ff ff       	call   c001c1c6 <PCI::checkBus(unsigned char)>
c001c598:	83 c4 10             	add    esp,0x10
c001c59b:	eb 24                	jmp    c001c5c1 <PCI::detect()+0x4f>
c001c59d:	52                   	push   edx
c001c59e:	52                   	push   edx
c001c59f:	53                   	push   ebx
c001c5a0:	43                   	inc    ebx
c001c5a1:	56                   	push   esi
c001c5a2:	e8 1f fc ff ff       	call   c001c1c6 <PCI::checkBus(unsigned char)>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	83 fb 08             	cmp    ebx,0x8
c001c5ad:	74 12                	je     c001c5c1 <PCI::detect()+0x4f>
c001c5af:	53                   	push   ebx
c001c5b0:	6a 00                	push   0x0
c001c5b2:	6a 00                	push   0x0
c001c5b4:	56                   	push   esi
c001c5b5:	e8 2a fa ff ff       	call   c001bfe4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c5ba:	83 c4 10             	add    esp,0x10
c001c5bd:	66 40                	inc    ax
c001c5bf:	74 dc                	je     c001c59d <PCI::detect()+0x2b>
c001c5c1:	58                   	pop    eax
c001c5c2:	5b                   	pop    ebx
c001c5c3:	5e                   	pop    esi
c001c5c4:	c3                   	ret    
c001c5c5:	90                   	nop

c001c5c6 <IDE::close(int, int, void*)>:
c001c5c6:	83 c8 ff             	or     eax,0xffffffff
c001c5c9:	c3                   	ret    

c001c5ca <IDE::IDE()>:
c001c5ca:	83 ec 0c             	sub    esp,0xc
c001c5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d1:	83 ec 08             	sub    esp,0x8
c001c5d4:	68 10 31 02 c0       	push   0xc0023110
c001c5d9:	50                   	push   eax
c001c5da:	e8 bb 42 ff ff       	call   c001089a <HardDiskController::HardDiskController(char const*)>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	ba 50 33 02 c0       	mov    edx,0xc0023350
c001c5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5eb:	89 10                	mov    DWORD PTR [eax],edx
c001c5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c5f8:	90                   	nop
c001c5f9:	83 c4 0c             	add    esp,0xc
c001c5fc:	c3                   	ret    
c001c5fd:	90                   	nop

c001c5fe <IDE::prepareInterrupt(unsigned char)>:
c001c5fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c603:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c607:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c60f:	c3                   	ret    

c001c610 <selectDrive(unsigned char, unsigned char)>:
c001c610:	c3                   	ret    
c001c611:	90                   	nop

c001c612 <IDE::getBase(unsigned char)>:
c001c612:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c623:	c3                   	ret    

c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c624:	55                   	push   ebp
c001c625:	57                   	push   edi
c001c626:	56                   	push   esi
c001c627:	53                   	push   ebx
c001c628:	83 ec 1c             	sub    esp,0x1c
c001c62b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c62f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c633:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c636:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c63a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c63e:	80 f9 03             	cmp    cl,0x3
c001c641:	77 51                	ja     c001c694 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c647:	0f b6 f2             	movzx  esi,dl
c001c64a:	0f b6 db             	movzx  ebx,bl
c001c64d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c650:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c654:	83 ca 80             	or     edx,0xffffff80
c001c657:	0f b6 d2             	movzx  edx,dl
c001c65a:	52                   	push   edx
c001c65b:	6a 0c                	push   0xc
c001c65d:	56                   	push   esi
c001c65e:	57                   	push   edi
c001c65f:	e8 c0 ff ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c664:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c66d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c671:	ee                   	out    dx,al
c001c672:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c677:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c67b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c67f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c683:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c68b:	83 c4 2c             	add    esp,0x2c
c001c68e:	5b                   	pop    ebx
c001c68f:	5e                   	pop    esi
c001c690:	5f                   	pop    edi
c001c691:	5d                   	pop    ebp
c001c692:	eb 90                	jmp    c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c694:	80 fb 07             	cmp    bl,0x7
c001c697:	77 12                	ja     c001c6ab <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c699:	0f b6 d2             	movzx  edx,dl
c001c69c:	0f b6 db             	movzx  ebx,bl
c001c69f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c6a7:	89 da                	mov    edx,ebx
c001c6a9:	eb 2f                	jmp    c001c6da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c6ab:	80 fb 0d             	cmp    bl,0xd
c001c6ae:	77 13                	ja     c001c6c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c6b0:	0f b6 d2             	movzx  edx,dl
c001c6b3:	0f b6 db             	movzx  ebx,bl
c001c6b6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c6bd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c6c1:	eb 17                	jmp    c001c6da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c6c3:	80 fb 15             	cmp    bl,0x15
c001c6c6:	77 13                	ja     c001c6db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c6c8:	0f b6 d2             	movzx  edx,dl
c001c6cb:	0f b6 db             	movzx  ebx,bl
c001c6ce:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c6d6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c6da:	ee                   	out    dx,al
c001c6db:	83 c4 1c             	add    esp,0x1c
c001c6de:	5b                   	pop    ebx
c001c6df:	5e                   	pop    esi
c001c6e0:	5f                   	pop    edi
c001c6e1:	5d                   	pop    ebp
c001c6e2:	c3                   	ret    
c001c6e3:	90                   	nop

c001c6e4 <IDE::read(unsigned char, unsigned char)>:
c001c6e4:	55                   	push   ebp
c001c6e5:	57                   	push   edi
c001c6e6:	56                   	push   esi
c001c6e7:	53                   	push   ebx
c001c6e8:	83 ec 1c             	sub    esp,0x1c
c001c6eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c6f3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c6f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c6fa:	3c 03                	cmp    al,0x3
c001c6fc:	77 43                	ja     c001c741 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c6fe:	0f b6 f2             	movzx  esi,dl
c001c701:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c704:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c708:	83 c8 80             	or     eax,0xffffff80
c001c70b:	0f b6 c0             	movzx  eax,al
c001c70e:	50                   	push   eax
c001c70f:	6a 0c                	push   0xc
c001c711:	56                   	push   esi
c001c712:	57                   	push   edi
c001c713:	e8 0c ff ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c718:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c71d:	0f b6 c3             	movzx  eax,bl
c001c720:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c724:	ec                   	in     al,dx
c001c725:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c729:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c72e:	52                   	push   edx
c001c72f:	6a 0c                	push   0xc
c001c731:	56                   	push   esi
c001c732:	57                   	push   edi
c001c733:	e8 ec fe ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c738:	83 c4 20             	add    esp,0x20
c001c73b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c73f:	eb 49                	jmp    c001c78a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c741:	80 fb 07             	cmp    bl,0x7
c001c744:	77 12                	ja     c001c758 <IDE::read(unsigned char, unsigned char)+0x74>
c001c746:	0f b6 d2             	movzx  edx,dl
c001c749:	0f b6 c3             	movzx  eax,bl
c001c74c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c754:	89 c2                	mov    edx,eax
c001c756:	eb 31                	jmp    c001c789 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c758:	80 fb 0d             	cmp    bl,0xd
c001c75b:	77 13                	ja     c001c770 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c75d:	0f b6 d2             	movzx  edx,dl
c001c760:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c767:	0f b6 d3             	movzx  edx,bl
c001c76a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c76e:	eb 19                	jmp    c001c789 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c770:	31 c0                	xor    eax,eax
c001c772:	80 fb 15             	cmp    bl,0x15
c001c775:	77 13                	ja     c001c78a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c777:	0f b6 d2             	movzx  edx,dl
c001c77a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c782:	0f b6 d3             	movzx  edx,bl
c001c785:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c789:	ec                   	in     al,dx
c001c78a:	83 c4 1c             	add    esp,0x1c
c001c78d:	5b                   	pop    ebx
c001c78e:	5e                   	pop    esi
c001c78f:	5f                   	pop    edi
c001c790:	5d                   	pop    ebp
c001c791:	c3                   	ret    

c001c792 <IDE::waitInterrupt(unsigned char)>:
c001c792:	55                   	push   ebp
c001c793:	57                   	push   edi
c001c794:	56                   	push   esi
c001c795:	53                   	push   ebx
c001c796:	31 db                	xor    ebx,ebx
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c79f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c7a4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c7ac:	89 e8                	mov    eax,ebp
c001c7ae:	84 c0                	test   al,al
c001c7b0:	75 34                	jne    c001c7e6 <IDE::waitInterrupt(unsigned char)+0x54>
c001c7b2:	52                   	push   edx
c001c7b3:	6a 0c                	push   0xc
c001c7b5:	56                   	push   esi
c001c7b6:	57                   	push   edi
c001c7b7:	e8 28 ff ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	a8 01                	test   al,0x1
c001c7c1:	75 2b                	jne    c001c7ee <IDE::waitInterrupt(unsigned char)+0x5c>
c001c7c3:	f6 c3 04             	test   bl,0x4
c001c7c6:	75 16                	jne    c001c7de <IDE::waitInterrupt(unsigned char)+0x4c>
c001c7c8:	83 fb 32             	cmp    ebx,0x32
c001c7cb:	7e 11                	jle    c001c7de <IDE::waitInterrupt(unsigned char)+0x4c>
c001c7cd:	50                   	push   eax
c001c7ce:	50                   	push   eax
c001c7cf:	6a 00                	push   0x0
c001c7d1:	68 80 96 98 00       	push   0x989680
c001c7d6:	e8 99 c5 ff ff       	call   c0018d74 <nanoSleep(unsigned long long)>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	83 fb 3c             	cmp    ebx,0x3c
c001c7e1:	74 0b                	je     c001c7ee <IDE::waitInterrupt(unsigned char)+0x5c>
c001c7e3:	43                   	inc    ebx
c001c7e4:	eb be                	jmp    c001c7a4 <IDE::waitInterrupt(unsigned char)+0x12>
c001c7e6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c7ee:	83 c4 0c             	add    esp,0xc
c001c7f1:	89 e8                	mov    eax,ebp
c001c7f3:	5b                   	pop    ebx
c001c7f4:	5e                   	pop    esi
c001c7f5:	5f                   	pop    edi
c001c7f6:	5d                   	pop    ebp
c001c7f7:	c3                   	ret    

c001c7f8 <ideChannel0IRQHandler(regs*, void*)>:
c001c7f8:	83 ec 10             	sub    esp,0x10
c001c7fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7ff:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c806:	6a 07                	push   0x7
c001c808:	6a 00                	push   0x0
c001c80a:	50                   	push   eax
c001c80b:	e8 d4 fe ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001c810:	83 c4 1c             	add    esp,0x1c
c001c813:	c3                   	ret    

c001c814 <ideChannel1IRQHandler(regs*, void*)>:
c001c814:	83 ec 10             	sub    esp,0x10
c001c817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c81b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c822:	6a 07                	push   0x7
c001c824:	6a 01                	push   0x1
c001c826:	50                   	push   eax
c001c827:	e8 b8 fe ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001c82c:	83 c4 1c             	add    esp,0x1c
c001c82f:	c3                   	ret    

c001c830 <IDE::enableIRQs(unsigned char, bool)>:
c001c830:	57                   	push   edi
c001c831:	56                   	push   esi
c001c832:	be 04 00 00 00       	mov    esi,0x4
c001c837:	53                   	push   ebx
c001c838:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c83d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c841:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c846:	0f 94 c0             	sete   al
c001c849:	d1 e0                	shl    eax,1
c001c84b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c852:	0f b6 c0             	movzx  eax,al
c001c855:	50                   	push   eax
c001c856:	6a 0c                	push   0xc
c001c858:	57                   	push   edi
c001c859:	53                   	push   ebx
c001c85a:	e8 c5 fd ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	50                   	push   eax
c001c863:	6a 0c                	push   0xc
c001c865:	57                   	push   edi
c001c866:	53                   	push   ebx
c001c867:	e8 78 fe ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	4e                   	dec    esi
c001c870:	75 f0                	jne    c001c862 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c872:	5b                   	pop    ebx
c001c873:	5e                   	pop    esi
c001c874:	5f                   	pop    edi
c001c875:	c3                   	ret    

c001c876 <IDE::open(int, int, void*)>:
c001c876:	55                   	push   ebp
c001c877:	57                   	push   edi
c001c878:	56                   	push   esi
c001c879:	53                   	push   ebx
c001c87a:	83 ec 1c             	sub    esp,0x1c
c001c87d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c881:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c88a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c893:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c89a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c8a1:	0f 85 b0 02 00 00    	jne    c001cb57 <IDE::open(int, int, void*)+0x2e1>
c001c8a7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c8ad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c8b1:	83 e0 7f             	and    eax,0x7f
c001c8b4:	3c 05                	cmp    al,0x5
c001c8b6:	74 04                	je     c001c8bc <IDE::open(int, int, void*)+0x46>
c001c8b8:	3c 0f                	cmp    al,0xf
c001c8ba:	75 32                	jne    c001c8ee <IDE::open(int, int, void*)+0x78>
c001c8bc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c8c2:	83 e0 fc             	and    eax,0xfffffffc
c001c8c5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c8cc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c8d2:	83 e0 fc             	and    eax,0xfffffffc
c001c8d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c8dc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c8e2:	83 e0 fc             	and    eax,0xfffffffc
c001c8e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c8ec:	eb 14                	jmp    c001c902 <IDE::open(int, int, void*)+0x8c>
c001c8ee:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c8f8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c902:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c909:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c910:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c914:	89 c6                	mov    esi,eax
c001c916:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c91b:	c1 e6 10             	shl    esi,0x10
c001c91e:	89 e8                	mov    eax,ebp
c001c920:	89 fa                	mov    edx,edi
c001c922:	c1 e0 0b             	shl    eax,0xb
c001c925:	09 f0                	or     eax,esi
c001c927:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c92e:	c1 e6 08             	shl    esi,0x8
c001c931:	09 c6                	or     esi,eax
c001c933:	89 f0                	mov    eax,esi
c001c935:	0d 08 00 00 80       	or     eax,0x80000008
c001c93a:	ef                   	out    dx,eax
c001c93b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c940:	89 ca                	mov    edx,ecx
c001c942:	ed                   	in     eax,dx
c001c943:	c1 e8 10             	shr    eax,0x10
c001c946:	3d ff ff 00 00       	cmp    eax,0xffff
c001c94b:	0f 84 f5 00 00 00    	je     c001ca46 <IDE::open(int, int, void*)+0x1d0>
c001c951:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c957:	89 fa                	mov    edx,edi
c001c959:	89 f0                	mov    eax,esi
c001c95b:	ef                   	out    dx,eax
c001c95c:	b0 fe                	mov    al,0xfe
c001c95e:	89 ca                	mov    edx,ecx
c001c960:	ee                   	out    dx,al
c001c961:	89 f0                	mov    eax,esi
c001c963:	89 fa                	mov    edx,edi
c001c965:	ef                   	out    dx,eax
c001c966:	89 ca                	mov    edx,ecx
c001c968:	ed                   	in     eax,dx
c001c969:	3c fe                	cmp    al,0xfe
c001c96b:	0f 85 a9 00 00 00    	jne    c001ca1a <IDE::open(int, int, void*)+0x1a4>
c001c971:	8b 15 68 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024368
c001c977:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c97e:	74 33                	je     c001c9b3 <IDE::open(int, int, void*)+0x13d>
c001c980:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c986:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c98a:	40                   	inc    eax
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	0f b6 c0             	movzx  eax,al
c001c991:	50                   	push   eax
c001c992:	55                   	push   ebp
c001c993:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c997:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c99d:	51                   	push   ecx
c001c99e:	e8 79 73 ff ff       	call   c0013d1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c9a3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c9a8:	83 c4 1c             	add    esp,0x1c
c001c9ab:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c9b1:	eb 0a                	jmp    c001c9bd <IDE::open(int, int, void*)+0x147>
c001c9b3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c9bd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9c4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9cb:	c1 e1 10             	shl    ecx,0x10
c001c9ce:	c1 e0 08             	shl    eax,0x8
c001c9d1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c9d6:	09 c1                	or     ecx,eax
c001c9d8:	89 fa                	mov    edx,edi
c001c9da:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9e1:	c1 e0 0b             	shl    eax,0xb
c001c9e4:	09 c1                	or     ecx,eax
c001c9e6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9ec:	89 c8                	mov    eax,ecx
c001c9ee:	ef                   	out    dx,eax
c001c9ef:	be fc 0c 00 00       	mov    esi,0xcfc
c001c9f4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c9fa:	89 f2                	mov    edx,esi
c001c9fc:	ee                   	out    dx,al
c001c9fd:	89 c8                	mov    eax,ecx
c001c9ff:	89 fa                	mov    edx,edi
c001ca01:	ef                   	out    dx,eax
c001ca02:	89 f2                	mov    edx,esi
c001ca04:	ed                   	in     eax,dx
c001ca05:	0f b6 c0             	movzx  eax,al
c001ca08:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ca0e:	74 46                	je     c001ca56 <IDE::open(int, int, void*)+0x1e0>
c001ca10:	83 ec 0c             	sub    esp,0xc
c001ca13:	68 28 31 02 c0       	push   0xc0023128
c001ca18:	eb 34                	jmp    c001ca4e <IDE::open(int, int, void*)+0x1d8>
c001ca1a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca23:	75 17                	jne    c001ca3c <IDE::open(int, int, void*)+0x1c6>
c001ca25:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ca2a:	74 07                	je     c001ca33 <IDE::open(int, int, void*)+0x1bd>
c001ca2c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ca31:	75 09                	jne    c001ca3c <IDE::open(int, int, void*)+0x1c6>
c001ca33:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca3a:	eb 1a                	jmp    c001ca56 <IDE::open(int, int, void*)+0x1e0>
c001ca3c:	83 ec 0c             	sub    esp,0xc
c001ca3f:	68 30 31 02 c0       	push   0xc0023130
c001ca44:	eb 08                	jmp    c001ca4e <IDE::open(int, int, void*)+0x1d8>
c001ca46:	83 ec 0c             	sub    esp,0xc
c001ca49:	68 61 31 02 c0       	push   0xc0023161
c001ca4e:	e8 85 8e ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001ca53:	83 c4 10             	add    esp,0x10
c001ca56:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ca5d:	79 1a                	jns    c001ca79 <IDE::open(int, int, void*)+0x203>
c001ca5f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca65:	83 e0 fc             	and    eax,0xfffffffc
c001ca68:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca6f:	83 c0 08             	add    eax,0x8
c001ca72:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca79:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca7f:	89 c2                	mov    edx,eax
c001ca81:	83 e2 0f             	and    edx,0xf
c001ca84:	66 83 fa 08          	cmp    dx,0x8
c001ca88:	75 0a                	jne    c001ca94 <IDE::open(int, int, void*)+0x21e>
c001ca8a:	83 e8 02             	sub    eax,0x2
c001ca8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca94:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca9a:	89 c2                	mov    edx,eax
c001ca9c:	83 e2 0f             	and    edx,0xf
c001ca9f:	66 83 fa 08          	cmp    dx,0x8
c001caa3:	75 0a                	jne    c001caaf <IDE::open(int, int, void*)+0x239>
c001caa5:	83 e8 02             	sub    eax,0x2
c001caa8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001caaf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cab6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cabd:	89 d0                	mov    eax,edx
c001cabf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cac2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cac6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001caca:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cacd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cad2:	0f b6 c9             	movzx  ecx,cl
c001cad5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cadc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cadf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cae3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cae7:	8d 50 02             	lea    edx,[eax+0x2]
c001caea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001caef:	0f b6 d2             	movzx  edx,dl
c001caf2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001caf8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cafb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001caff:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cb03:	8d 48 03             	lea    ecx,[eax+0x3]
c001cb06:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb0b:	0f b6 c9             	movzx  ecx,cl
c001cb0e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cb14:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb17:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb1b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb1f:	8d 50 04             	lea    edx,[eax+0x4]
c001cb22:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb28:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cb2d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb34:	66 85 f6             	test   si,si
c001cb37:	74 3e                	je     c001cb77 <IDE::open(int, int, void*)+0x301>
c001cb39:	0f b6 d2             	movzx  edx,dl
c001cb3c:	83 c0 05             	add    eax,0x5
c001cb3f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb42:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb46:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cb4a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb50:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb55:	eb 20                	jmp    c001cb77 <IDE::open(int, int, void*)+0x301>
c001cb57:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb61:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cb6b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cb72:	e9 02 ff ff ff       	jmp    c001ca79 <IDE::open(int, int, void*)+0x203>
c001cb77:	52                   	push   edx
c001cb78:	52                   	push   edx
c001cb79:	6a 00                	push   0x0
c001cb7b:	53                   	push   ebx
c001cb7c:	e8 7d fa ff ff       	call   c001c5fe <IDE::prepareInterrupt(unsigned char)>
c001cb81:	59                   	pop    ecx
c001cb82:	5e                   	pop    esi
c001cb83:	6a 01                	push   0x1
c001cb85:	53                   	push   ebx
c001cb86:	e8 73 fa ff ff       	call   c001c5fe <IDE::prepareInterrupt(unsigned char)>
c001cb8b:	83 c4 0c             	add    esp,0xc
c001cb8e:	6a 00                	push   0x0
c001cb90:	6a 00                	push   0x0
c001cb92:	53                   	push   ebx
c001cb93:	e8 98 fc ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001cb98:	83 c4 0c             	add    esp,0xc
c001cb9b:	6a 00                	push   0x0
c001cb9d:	6a 01                	push   0x1
c001cb9f:	53                   	push   ebx
c001cba0:	e8 8b fc ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001cba5:	83 c4 10             	add    esp,0x10
c001cba8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cbaf:	74 40                	je     c001cbf1 <IDE::open(int, int, void*)+0x37b>
c001cbb1:	83 ec 0c             	sub    esp,0xc
c001cbb4:	68 8b 31 02 c0       	push   0xc002318b
c001cbb9:	e8 4f 25 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001cbbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbc1:	6a 01                	push   0x1
c001cbc3:	68 f8 c7 01 c0       	push   0xc001c7f8
c001cbc8:	6a 0e                	push   0xe
c001cbca:	53                   	push   ebx
c001cbcb:	e8 9c 38 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbd0:	83 c4 14             	add    esp,0x14
c001cbd3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cbd9:	53                   	push   ebx
c001cbda:	6a 01                	push   0x1
c001cbdc:	68 14 c8 01 c0       	push   0xc001c814
c001cbe1:	6a 0f                	push   0xf
c001cbe3:	53                   	push   ebx
c001cbe4:	e8 83 38 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbe9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cbef:	eb 4a                	jmp    c001cc3b <IDE::open(int, int, void*)+0x3c5>
c001cbf1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cbfb:	50                   	push   eax
c001cbfc:	6a 0f                	push   0xf
c001cbfe:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc04:	68 a7 31 02 c0       	push   0xc00231a7
c001cc09:	e8 ff 24 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001cc0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc11:	6a 00                	push   0x0
c001cc13:	68 f8 c7 01 c0       	push   0xc001c7f8
c001cc18:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc1e:	53                   	push   ebx
c001cc1f:	e8 48 38 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc24:	83 c4 14             	add    esp,0x14
c001cc27:	53                   	push   ebx
c001cc28:	6a 00                	push   0x0
c001cc2a:	68 14 c8 01 c0       	push   0xc001c814
c001cc2f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc35:	53                   	push   ebx
c001cc36:	e8 31 38 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc3d:	83 c4 20             	add    esp,0x20
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	53                   	push   ebx
c001cc44:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc47:	83 c4 0c             	add    esp,0xc
c001cc4a:	6a 07                	push   0x7
c001cc4c:	6a 00                	push   0x0
c001cc4e:	53                   	push   ebx
c001cc4f:	e8 90 fa ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cc54:	83 c4 0c             	add    esp,0xc
c001cc57:	6a 07                	push   0x7
c001cc59:	6a 01                	push   0x1
c001cc5b:	53                   	push   ebx
c001cc5c:	e8 83 fa ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cc61:	83 c4 0c             	add    esp,0xc
c001cc64:	6a 01                	push   0x1
c001cc66:	6a 00                	push   0x0
c001cc68:	53                   	push   ebx
c001cc69:	e8 c2 fb ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001cc6e:	83 c4 0c             	add    esp,0xc
c001cc71:	6a 01                	push   0x1
c001cc73:	6a 01                	push   0x1
c001cc75:	53                   	push   ebx
c001cc76:	e8 b5 fb ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001cc7b:	83 c4 2c             	add    esp,0x2c
c001cc7e:	31 c0                	xor    eax,eax
c001cc80:	5b                   	pop    ebx
c001cc81:	5e                   	pop    esi
c001cc82:	5f                   	pop    edi
c001cc83:	5d                   	pop    ebp
c001cc84:	c3                   	ret    
c001cc85:	90                   	nop

c001cc86 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc86:	55                   	push   ebp
c001cc87:	57                   	push   edi
c001cc88:	56                   	push   esi
c001cc89:	53                   	push   ebx
c001cc8a:	83 ec 1c             	sub    esp,0x1c
c001cc8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc95:	8d 50 f8             	lea    edx,[eax-0x8]
c001cc98:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc9c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cca0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cca4:	80 fa 03             	cmp    dl,0x3
c001cca7:	77 5d                	ja     c001cd06 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cca9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ccad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccb1:	0f b6 db             	movzx  ebx,bl
c001ccb4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ccb7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ccbb:	83 ca 80             	or     edx,0xffffff80
c001ccbe:	0f b6 d2             	movzx  edx,dl
c001ccc1:	52                   	push   edx
c001ccc2:	6a 0c                	push   0xc
c001ccc4:	53                   	push   ebx
c001ccc5:	56                   	push   esi
c001ccc6:	e8 59 f9 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cccb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ccd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccd8:	0f b6 c0             	movzx  eax,al
c001ccdb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ccdf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cce1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cce6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ccea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ccee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ccf2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccfa:	83 c4 2c             	add    esp,0x2c
c001ccfd:	5b                   	pop    ebx
c001ccfe:	5e                   	pop    esi
c001ccff:	5f                   	pop    edi
c001cd00:	5d                   	pop    ebp
c001cd01:	e9 1e f9 ff ff       	jmp    c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd06:	3c 07                	cmp    al,0x7
c001cd08:	77 10                	ja     c001cd1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cd0a:	0f b6 db             	movzx  ebx,bl
c001cd0d:	0f b6 d0             	movzx  edx,al
c001cd10:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cd18:	eb 2d                	jmp    c001cd47 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd1a:	3c 0d                	cmp    al,0xd
c001cd1c:	77 13                	ja     c001cd31 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cd1e:	0f b6 db             	movzx  ebx,bl
c001cd21:	0f b6 c0             	movzx  eax,al
c001cd24:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cd2b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cd2f:	eb 16                	jmp    c001cd47 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd31:	3c 15                	cmp    al,0x15
c001cd33:	77 14                	ja     c001cd49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cd35:	0f b6 db             	movzx  ebx,bl
c001cd38:	0f b6 c0             	movzx  eax,al
c001cd3b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cd43:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cd47:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd49:	83 c4 1c             	add    esp,0x1c
c001cd4c:	5b                   	pop    ebx
c001cd4d:	5e                   	pop    esi
c001cd4e:	5f                   	pop    edi
c001cd4f:	5d                   	pop    ebp
c001cd50:	c3                   	ret    
c001cd51:	90                   	nop

c001cd52 <IDE::detect()>:
c001cd52:	55                   	push   ebp
c001cd53:	57                   	push   edi
c001cd54:	56                   	push   esi
c001cd55:	53                   	push   ebx
c001cd56:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cd5c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cd63:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd6a:	0f 85 be 02 00 00    	jne    c001d02e <IDE::detect()+0x2dc>
c001cd70:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cd77:	31 f6                	xor    esi,esi
c001cd79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd81:	31 ed                	xor    ebp,ebp
c001cd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd87:	c1 e0 06             	shl    eax,0x6
c001cd8a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cd92:	89 e8                	mov    eax,ebp
c001cd94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cd98:	c1 e0 04             	shl    eax,0x4
c001cd9b:	83 c8 a0             	or     eax,0xffffffa0
c001cd9e:	0f b6 c0             	movzx  eax,al
c001cda1:	50                   	push   eax
c001cda2:	6a 06                	push   0x6
c001cda4:	56                   	push   esi
c001cda5:	53                   	push   ebx
c001cda6:	e8 79 f8 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdab:	83 c4 0c             	add    esp,0xc
c001cdae:	6a 0c                	push   0xc
c001cdb0:	56                   	push   esi
c001cdb1:	53                   	push   ebx
c001cdb2:	e8 2d f9 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cdb7:	83 c4 0c             	add    esp,0xc
c001cdba:	6a 0c                	push   0xc
c001cdbc:	56                   	push   esi
c001cdbd:	53                   	push   ebx
c001cdbe:	e8 21 f9 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cdc3:	83 c4 0c             	add    esp,0xc
c001cdc6:	6a 0c                	push   0xc
c001cdc8:	56                   	push   esi
c001cdc9:	53                   	push   ebx
c001cdca:	e8 15 f9 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cdcf:	83 c4 0c             	add    esp,0xc
c001cdd2:	6a 0c                	push   0xc
c001cdd4:	56                   	push   esi
c001cdd5:	53                   	push   ebx
c001cdd6:	e8 09 f9 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cddb:	68 ec 00 00 00       	push   0xec
c001cde0:	6a 07                	push   0x7
c001cde2:	56                   	push   esi
c001cde3:	53                   	push   ebx
c001cde4:	e8 3b f8 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde9:	83 c4 1c             	add    esp,0x1c
c001cdec:	6a 0c                	push   0xc
c001cdee:	56                   	push   esi
c001cdef:	53                   	push   ebx
c001cdf0:	e8 ef f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cdf5:	83 c4 0c             	add    esp,0xc
c001cdf8:	6a 0c                	push   0xc
c001cdfa:	56                   	push   esi
c001cdfb:	53                   	push   ebx
c001cdfc:	e8 e3 f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001ce01:	83 c4 0c             	add    esp,0xc
c001ce04:	6a 0c                	push   0xc
c001ce06:	56                   	push   esi
c001ce07:	53                   	push   ebx
c001ce08:	e8 d7 f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001ce0d:	83 c4 0c             	add    esp,0xc
c001ce10:	6a 0c                	push   0xc
c001ce12:	56                   	push   esi
c001ce13:	53                   	push   ebx
c001ce14:	e8 cb f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001ce19:	83 c4 0c             	add    esp,0xc
c001ce1c:	6a 0c                	push   0xc
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	e8 bf f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	84 c0                	test   al,al
c001ce2a:	0f 84 8b 01 00 00    	je     c001cfbb <IDE::detect()+0x269>
c001ce30:	31 ff                	xor    edi,edi
c001ce32:	50                   	push   eax
c001ce33:	6a 0c                	push   0xc
c001ce35:	56                   	push   esi
c001ce36:	53                   	push   ebx
c001ce37:	e8 a8 f8 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	a8 01                	test   al,0x1
c001ce41:	0f 85 8e 01 00 00    	jne    c001cfd5 <IDE::detect()+0x283>
c001ce47:	84 c0                	test   al,al
c001ce49:	78 04                	js     c001ce4f <IDE::detect()+0xfd>
c001ce4b:	a8 08                	test   al,0x8
c001ce4d:	75 27                	jne    c001ce76 <IDE::detect()+0x124>
c001ce4f:	47                   	inc    edi
c001ce50:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ce56:	7e da                	jle    c001ce32 <IDE::detect()+0xe0>
c001ce58:	50                   	push   eax
c001ce59:	50                   	push   eax
c001ce5a:	6a 00                	push   0x0
c001ce5c:	68 40 4b 4c 00       	push   0x4c4b40
c001ce61:	e8 0e bf ff ff       	call   c0018d74 <nanoSleep(unsigned long long)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ce6f:	75 c1                	jne    c001ce32 <IDE::detect()+0xe0>
c001ce71:	e9 5f 01 00 00       	jmp    c001cfd5 <IDE::detect()+0x283>
c001ce76:	31 c9                	xor    ecx,ecx
c001ce78:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ce7c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	68 80 00 00 00       	push   0x80
c001ce88:	57                   	push   edi
c001ce89:	6a 00                	push   0x0
c001ce8b:	56                   	push   esi
c001ce8c:	53                   	push   ebx
c001ce8d:	e8 f4 fd ff ff       	call   c001cc86 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ce92:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ce97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce9b:	89 d1                	mov    ecx,edx
c001ce9d:	c1 e0 06             	shl    eax,0x6
c001cea0:	01 d8                	add    eax,ebx
c001cea2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cea9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ceb0:	89 f2                	mov    edx,esi
c001ceb2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ceb8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001cebc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001cec2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cec6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cecd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ced5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001cedc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001cee4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ceea:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cef1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001cef7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cefb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ceff:	83 c4 20             	add    esp,0x20
c001cf02:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001cf05:	83 c0 02             	add    eax,0x2
c001cf08:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001cf0e:	83 c7 02             	add    edi,0x2
c001cf11:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cf14:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001cf1a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001cf1e:	75 e2                	jne    c001cf02 <IDE::detect()+0x1b0>
c001cf20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf24:	c1 e0 06             	shl    eax,0x6
c001cf27:	01 d8                	add    eax,ebx
c001cf29:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cf2f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cf36:	66 c1 ea 09          	shr    dx,0x9
c001cf3a:	83 e2 01             	and    edx,0x1
c001cf3d:	84 c9                	test   cl,cl
c001cf3f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cf45:	75 2f                	jne    c001cf76 <IDE::detect()+0x224>
c001cf47:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001cf4d:	85 c0                	test   eax,eax
c001cf4f:	74 66                	je     c001cfb7 <IDE::detect()+0x265>
c001cf51:	50                   	push   eax
c001cf52:	55                   	push   ebp
c001cf53:	56                   	push   esi
c001cf54:	68 c3 31 02 c0       	push   0xc00231c3
c001cf59:	e8 af 21 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001cf5e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cf65:	e8 b4 20 ff ff       	call   c000f01e <operator new(unsigned long)>
c001cf6a:	89 c7                	mov    edi,eax
c001cf6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf6f:	e8 e8 02 00 00       	call   c001d25c <ATA::ATA()>
c001cf74:	eb 28                	jmp    c001cf9e <IDE::detect()+0x24c>
c001cf76:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cf7c:	55                   	push   ebp
c001cf7d:	56                   	push   esi
c001cf7e:	68 f2 31 02 c0       	push   0xc00231f2
c001cf83:	e8 85 21 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001cf88:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cf8f:	e8 8a 20 ff ff       	call   c000f01e <operator new(unsigned long)>
c001cf94:	89 c7                	mov    edi,eax
c001cf96:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf99:	e8 ee 08 00 00       	call   c001d88c <ATAPI::ATAPI()>
c001cf9e:	5a                   	pop    edx
c001cf9f:	59                   	pop    ecx
c001cfa0:	57                   	push   edi
c001cfa1:	53                   	push   ebx
c001cfa2:	e8 71 35 ff ff       	call   c0010518 <Device::addChild(Device*)>
c001cfa7:	8b 07                	mov    eax,DWORD PTR [edi]
c001cfa9:	53                   	push   ebx
c001cfaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfae:	6a 00                	push   0x0
c001cfb0:	57                   	push   edi
c001cfb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfb4:	83 c4 20             	add    esp,0x20
c001cfb7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cfbb:	4d                   	dec    ebp
c001cfbc:	74 0a                	je     c001cfc8 <IDE::detect()+0x276>
c001cfbe:	bd 01 00 00 00       	mov    ebp,0x1
c001cfc3:	e9 bb fd ff ff       	jmp    c001cd83 <IDE::detect()+0x31>
c001cfc8:	4e                   	dec    esi
c001cfc9:	74 63                	je     c001d02e <IDE::detect()+0x2dc>
c001cfcb:	be 01 00 00 00       	mov    esi,0x1
c001cfd0:	e9 ac fd ff ff       	jmp    c001cd81 <IDE::detect()+0x2f>
c001cfd5:	50                   	push   eax
c001cfd6:	6a 04                	push   0x4
c001cfd8:	56                   	push   esi
c001cfd9:	53                   	push   ebx
c001cfda:	e8 05 f7 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cfdf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cfe3:	83 c4 0c             	add    esp,0xc
c001cfe6:	6a 05                	push   0x5
c001cfe8:	56                   	push   esi
c001cfe9:	53                   	push   ebx
c001cfea:	e8 f5 f6 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001cfef:	83 c4 10             	add    esp,0x10
c001cff2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cff6:	80 fa 14             	cmp    dl,0x14
c001cff9:	75 04                	jne    c001cfff <IDE::detect()+0x2ad>
c001cffb:	3c eb                	cmp    al,0xeb
c001cffd:	eb 07                	jmp    c001d006 <IDE::detect()+0x2b4>
c001cfff:	3c 96                	cmp    al,0x96
c001d001:	75 b8                	jne    c001cfbb <IDE::detect()+0x269>
c001d003:	80 fa 69             	cmp    dl,0x69
c001d006:	75 b3                	jne    c001cfbb <IDE::detect()+0x269>
c001d008:	68 a1 00 00 00       	push   0xa1
c001d00d:	6a 07                	push   0x7
c001d00f:	56                   	push   esi
c001d010:	53                   	push   ebx
c001d011:	e8 0e f6 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d016:	5f                   	pop    edi
c001d017:	58                   	pop    eax
c001d018:	6a 00                	push   0x0
c001d01a:	68 40 42 0f 00       	push   0xf4240
c001d01f:	e8 50 bd ff ff       	call   c0018d74 <nanoSleep(unsigned long long)>
c001d024:	83 c4 10             	add    esp,0x10
c001d027:	b1 01                	mov    cl,0x1
c001d029:	e9 4a fe ff ff       	jmp    c001ce78 <IDE::detect()+0x126>
c001d02e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d034:	5b                   	pop    ebx
c001d035:	5e                   	pop    esi
c001d036:	5f                   	pop    edi
c001d037:	5d                   	pop    ebp
c001d038:	c3                   	ret    
c001d039:	90                   	nop

c001d03a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d03a:	55                   	push   ebp
c001d03b:	57                   	push   edi
c001d03c:	56                   	push   esi
c001d03d:	53                   	push   ebx
c001d03e:	83 ec 1c             	sub    esp,0x1c
c001d041:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d045:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d049:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d04d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d051:	88 c3                	mov    bl,al
c001d053:	84 c0                	test   al,al
c001d055:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d059:	0f 84 67 01 00 00    	je     c001d1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d05f:	83 ec 0c             	sub    esp,0xc
c001d062:	68 23 32 02 c0       	push   0xc0023223
c001d067:	e8 a1 20 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d073:	3c 01                	cmp    al,0x1
c001d075:	75 17                	jne    c001d08e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d077:	83 ec 0c             	sub    esp,0xc
c001d07a:	b3 13                	mov    bl,0x13
c001d07c:	68 2f 32 02 c0       	push   0xc002322f
c001d081:	e8 87 20 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d086:	83 c4 10             	add    esp,0x10
c001d089:	e9 25 01 00 00       	jmp    c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d08e:	3c 02                	cmp    al,0x2
c001d090:	0f 85 ef 00 00 00    	jne    c001d185 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d096:	d1 e6                	shl    esi,1
c001d098:	09 ee                	or     esi,ebp
c001d09a:	52                   	push   edx
c001d09b:	89 f0                	mov    eax,esi
c001d09d:	6a 01                	push   0x1
c001d09f:	0f b6 f0             	movzx  esi,al
c001d0a2:	c1 e6 06             	shl    esi,0x6
c001d0a5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d0ad:	50                   	push   eax
c001d0ae:	57                   	push   edi
c001d0af:	e8 30 f6 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	89 c6                	mov    esi,eax
c001d0b9:	a8 01                	test   al,0x1
c001d0bb:	74 12                	je     c001d0cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	b3 07                	mov    bl,0x7
c001d0c2:	68 44 32 02 c0       	push   0xc0023244
c001d0c7:	e8 41 20 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	f7 c6 02 00 00 00    	test   esi,0x2
c001d0d5:	74 12                	je     c001d0e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d0d7:	83 ec 0c             	sub    esp,0xc
c001d0da:	b3 03                	mov    bl,0x3
c001d0dc:	68 62 32 02 c0       	push   0xc0023262
c001d0e1:	e8 27 20 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	f7 c6 04 00 00 00    	test   esi,0x4
c001d0ef:	74 12                	je     c001d103 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d0f1:	83 ec 0c             	sub    esp,0xc
c001d0f4:	b3 14                	mov    bl,0x14
c001d0f6:	68 82 32 02 c0       	push   0xc0023282
c001d0fb:	e8 0d 20 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d100:	83 c4 10             	add    esp,0x10
c001d103:	f7 c6 08 00 00 00    	test   esi,0x8
c001d109:	74 12                	je     c001d11d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	b3 03                	mov    bl,0x3
c001d110:	68 62 32 02 c0       	push   0xc0023262
c001d115:	e8 f3 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d11a:	83 c4 10             	add    esp,0x10
c001d11d:	f7 c6 10 00 00 00    	test   esi,0x10
c001d123:	74 12                	je     c001d137 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d125:	83 ec 0c             	sub    esp,0xc
c001d128:	b3 15                	mov    bl,0x15
c001d12a:	68 9a 32 02 c0       	push   0xc002329a
c001d12f:	e8 d9 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	f7 c6 20 00 00 00    	test   esi,0x20
c001d13d:	74 12                	je     c001d151 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	b3 03                	mov    bl,0x3
c001d144:	68 62 32 02 c0       	push   0xc0023262
c001d149:	e8 bf 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d14e:	83 c4 10             	add    esp,0x10
c001d151:	f7 c6 40 00 00 00    	test   esi,0x40
c001d157:	74 12                	je     c001d16b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	b3 16                	mov    bl,0x16
c001d15e:	68 b4 32 02 c0       	push   0xc00232b4
c001d163:	e8 a5 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d168:	83 c4 10             	add    esp,0x10
c001d16b:	89 f0                	mov    eax,esi
c001d16d:	84 c0                	test   al,al
c001d16f:	79 42                	jns    c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d171:	83 ec 0c             	sub    esp,0xc
c001d174:	b3 0d                	mov    bl,0xd
c001d176:	68 d5 32 02 c0       	push   0xc00232d5
c001d17b:	e8 8d 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	eb 2e                	jmp    c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d185:	3c 03                	cmp    al,0x3
c001d187:	75 14                	jne    c001d19d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d189:	83 ec 0c             	sub    esp,0xc
c001d18c:	b3 17                	mov    bl,0x17
c001d18e:	68 e9 32 02 c0       	push   0xc00232e9
c001d193:	e8 75 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	eb 16                	jmp    c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d19d:	3c 04                	cmp    al,0x4
c001d19f:	75 12                	jne    c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	b3 08                	mov    bl,0x8
c001d1a6:	68 ff 32 02 c0       	push   0xc00232ff
c001d1ab:	e8 5d 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	50                   	push   eax
c001d1b4:	50                   	push   eax
c001d1b5:	0f b6 c3             	movzx  eax,bl
c001d1b8:	50                   	push   eax
c001d1b9:	68 17 33 02 c0       	push   0xc0023317
c001d1be:	e8 4a 1f ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d1c3:	83 c4 10             	add    esp,0x10
c001d1c6:	83 c4 1c             	add    esp,0x1c
c001d1c9:	88 d8                	mov    al,bl
c001d1cb:	5b                   	pop    ebx
c001d1cc:	5e                   	pop    esi
c001d1cd:	5f                   	pop    edi
c001d1ce:	5d                   	pop    ebp
c001d1cf:	c3                   	ret    

c001d1d0 <IDE::polling(unsigned char, unsigned int)>:
c001d1d0:	57                   	push   edi
c001d1d1:	56                   	push   esi
c001d1d2:	53                   	push   ebx
c001d1d3:	bb 04 00 00 00       	mov    ebx,0x4
c001d1d8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d1dc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d1e1:	52                   	push   edx
c001d1e2:	6a 0c                	push   0xc
c001d1e4:	56                   	push   esi
c001d1e5:	57                   	push   edi
c001d1e6:	e8 f9 f4 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	4b                   	dec    ebx
c001d1ef:	75 f0                	jne    c001d1e1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d1f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d1f6:	50                   	push   eax
c001d1f7:	6a 0c                	push   0xc
c001d1f9:	56                   	push   esi
c001d1fa:	57                   	push   edi
c001d1fb:	e8 e4 f4 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001d200:	83 c4 10             	add    esp,0x10
c001d203:	a8 01                	test   al,0x1
c001d205:	74 12                	je     c001d219 <IDE::polling(unsigned char, unsigned int)+0x49>
c001d207:	83 ec 0c             	sub    esp,0xc
c001d20a:	68 31 33 02 c0       	push   0xc0023331
c001d20f:	e8 f9 1e ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001d214:	83 c4 10             	add    esp,0x10
c001d217:	eb 17                	jmp    c001d230 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d219:	a8 20                	test   al,0x20
c001d21b:	75 0f                	jne    c001d22c <IDE::polling(unsigned char, unsigned int)+0x5c>
c001d21d:	4b                   	dec    ebx
c001d21e:	74 10                	je     c001d230 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d220:	84 c0                	test   al,al
c001d222:	78 d2                	js     c001d1f6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d224:	a8 08                	test   al,0x8
c001d226:	74 ce                	je     c001d1f6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d228:	31 c0                	xor    eax,eax
c001d22a:	eb 06                	jmp    c001d232 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d22c:	b0 01                	mov    al,0x1
c001d22e:	eb 02                	jmp    c001d232 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d230:	b0 02                	mov    al,0x2
c001d232:	5b                   	pop    ebx
c001d233:	5e                   	pop    esi
c001d234:	5f                   	pop    edi
c001d235:	c3                   	ret    

c001d236 <ATA::close(int, int, void*)>:
c001d236:	83 ec 0c             	sub    esp,0xc
c001d239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d243:	85 c0                	test   eax,eax
c001d245:	74 0c                	je     c001d253 <ATA::close(int, int, void*)+0x1d>
c001d247:	83 ec 0c             	sub    esp,0xc
c001d24a:	8b 10                	mov    edx,DWORD PTR [eax]
c001d24c:	50                   	push   eax
c001d24d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d250:	83 c4 10             	add    esp,0x10
c001d253:	31 c0                	xor    eax,eax
c001d255:	83 c4 0c             	add    esp,0xc
c001d258:	c3                   	ret    
c001d259:	90                   	nop

c001d25a <ATA::powerSaving(PowerSavingLevel)>:
c001d25a:	c3                   	ret    
c001d25b:	90                   	nop

c001d25c <ATA::ATA()>:
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d263:	83 ec 04             	sub    esp,0x4
c001d266:	68 00 02 00 00       	push   0x200
c001d26b:	68 74 33 02 c0       	push   0xc0023374
c001d270:	50                   	push   eax
c001d271:	e8 a8 36 ff ff       	call   c001091e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c001d27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d282:	89 10                	mov    DWORD PTR [eax],edx
c001d284:	90                   	nop
c001d285:	83 c4 0c             	add    esp,0xc
c001d288:	c3                   	ret    
c001d289:	90                   	nop

c001d28a <ATA::flush(bool)>:
c001d28a:	53                   	push   ebx
c001d28b:	83 ec 08             	sub    esp,0x8
c001d28e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d293:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d297:	19 c0                	sbb    eax,eax
c001d299:	83 e0 fd             	and    eax,0xfffffffd
c001d29c:	05 ea 00 00 00       	add    eax,0xea
c001d2a1:	50                   	push   eax
c001d2a2:	6a 07                	push   0x7
c001d2a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2ab:	50                   	push   eax
c001d2ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2b2:	e8 6d f3 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2b7:	83 c4 0c             	add    esp,0xc
c001d2ba:	6a 00                	push   0x0
c001d2bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2c3:	50                   	push   eax
c001d2c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2ca:	e8 01 ff ff ff       	call   c001d1d0 <IDE::polling(unsigned char, unsigned int)>
c001d2cf:	83 c4 18             	add    esp,0x18
c001d2d2:	5b                   	pop    ebx
c001d2d3:	c3                   	ret    

c001d2d4 <ATA::readyForCommand()>:
c001d2d4:	56                   	push   esi
c001d2d5:	53                   	push   ebx
c001d2d6:	31 db                	xor    ebx,ebx
c001d2d8:	50                   	push   eax
c001d2d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2dd:	50                   	push   eax
c001d2de:	6a 0c                	push   0xc
c001d2e0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d2e7:	50                   	push   eax
c001d2e8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d2ee:	e8 f1 f3 ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001d2f3:	83 c4 10             	add    esp,0x10
c001d2f6:	a8 88                	test   al,0x88
c001d2f8:	74 23                	je     c001d31d <ATA::readyForCommand()+0x49>
c001d2fa:	43                   	inc    ebx
c001d2fb:	83 fb 63             	cmp    ebx,0x63
c001d2fe:	7e dd                	jle    c001d2dd <ATA::readyForCommand()+0x9>
c001d300:	51                   	push   ecx
c001d301:	51                   	push   ecx
c001d302:	6a 00                	push   0x0
c001d304:	68 40 42 0f 00       	push   0xf4240
c001d309:	e8 66 ba ff ff       	call   c0018d74 <nanoSleep(unsigned long long)>
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d317:	75 c4                	jne    c001d2dd <ATA::readyForCommand()+0x9>
c001d319:	31 c0                	xor    eax,eax
c001d31b:	eb 02                	jmp    c001d31f <ATA::readyForCommand()+0x4b>
c001d31d:	b0 01                	mov    al,0x1
c001d31f:	5a                   	pop    edx
c001d320:	5b                   	pop    ebx
c001d321:	5e                   	pop    esi
c001d322:	c3                   	ret    
c001d323:	90                   	nop

c001d324 <ATA::access(unsigned long long, int, void*, bool)>:
c001d324:	55                   	push   ebp
c001d325:	57                   	push   edi
c001d326:	56                   	push   esi
c001d327:	53                   	push   ebx
c001d328:	83 ec 2c             	sub    esp,0x2c
c001d32b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d32f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d333:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d33b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d33f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d343:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d347:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d34d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d351:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d357:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d35b:	c1 e0 06             	shl    eax,0x6
c001d35e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d366:	74 5d                	je     c001d3c5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d368:	89 fa                	mov    edx,edi
c001d36a:	89 f0                	mov    eax,esi
c001d36c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d370:	c1 ea 1c             	shr    edx,0x1c
c001d373:	89 d1                	mov    ecx,edx
c001d375:	09 c1                	or     ecx,eax
c001d377:	74 25                	je     c001d39e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d379:	31 ed                	xor    ebp,ebp
c001d37b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d382:	89 fa                	mov    edx,edi
c001d384:	89 f0                	mov    eax,esi
c001d386:	0f ad d0             	shrd   eax,edx,cl
c001d389:	d3 ea                	shr    edx,cl
c001d38b:	f6 c1 20             	test   cl,0x20
c001d38e:	74 02                	je     c001d392 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d390:	89 d0                	mov    eax,edx
c001d392:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d396:	45                   	inc    ebp
c001d397:	83 fd 06             	cmp    ebp,0x6
c001d39a:	75 df                	jne    c001d37b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d39c:	eb 76                	jmp    c001d414 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d39e:	89 f0                	mov    eax,esi
c001d3a0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d3a5:	89 fa                	mov    edx,edi
c001d3a7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d3ae:	0f ac d0 10          	shrd   eax,edx,0x10
c001d3b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d3b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d3bb:	c1 ee 18             	shr    esi,0x18
c001d3be:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d3c3:	eb 56                	jmp    c001d41b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d3c5:	6a 00                	push   0x0
c001d3c7:	6a 3f                	push   0x3f
c001d3c9:	57                   	push   edi
c001d3ca:	56                   	push   esi
c001d3cb:	e8 dc 1e 00 00       	call   c001f2ac <__umoddi3>
c001d3d0:	83 c4 10             	add    esp,0x10
c001d3d3:	40                   	inc    eax
c001d3d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d3d8:	6a 00                	push   0x0
c001d3da:	68 f0 03 00 00       	push   0x3f0
c001d3df:	57                   	push   edi
c001d3e0:	56                   	push   esi
c001d3e1:	e8 c6 1d 00 00       	call   c001f1ac <__udivdi3>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d3ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d3f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d3fa:	6a 00                	push   0x0
c001d3fc:	6a 3f                	push   0x3f
c001d3fe:	57                   	push   edi
c001d3ff:	56                   	push   esi
c001d400:	e8 a7 1d 00 00       	call   c001f1ac <__udivdi3>
c001d405:	83 c4 10             	add    esp,0x10
c001d408:	89 c6                	mov    esi,eax
c001d40a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d40f:	83 e6 0f             	and    esi,0xf
c001d412:	eb 07                	jmp    c001d41b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d414:	31 f6                	xor    esi,esi
c001d416:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d41b:	bf 01 00 00 00       	mov    edi,0x1
c001d420:	50                   	push   eax
c001d421:	6a 00                	push   0x0
c001d423:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d42a:	50                   	push   eax
c001d42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d42f:	e8 fc f3 ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001d434:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d437:	e8 98 fe ff ff       	call   c001d2d4 <ATA::readyForCommand()>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	84 c0                	test   al,al
c001d441:	0f 84 50 02 00 00    	je     c001d697 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d447:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d44d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d453:	c1 e0 04             	shl    eax,0x4
c001d456:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d45d:	09 c6                	or     esi,eax
c001d45f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d464:	75 05                	jne    c001d46b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d466:	83 ce a0             	or     esi,0xffffffa0
c001d469:	eb 03                	jmp    c001d46e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001d46b:	83 ce e0             	or     esi,0xffffffe0
c001d46e:	89 f0                	mov    eax,esi
c001d470:	0f b6 f0             	movzx  esi,al
c001d473:	56                   	push   esi
c001d474:	6a 06                	push   0x6
c001d476:	51                   	push   ecx
c001d477:	52                   	push   edx
c001d478:	e8 a7 f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d47d:	83 c4 10             	add    esp,0x10
c001d480:	6a 00                	push   0x0
c001d482:	6a 01                	push   0x1
c001d484:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d48b:	50                   	push   eax
c001d48c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d492:	e8 8d f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d49f:	75 6e                	jne    c001d50f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001d4a1:	6a 00                	push   0x0
c001d4a3:	6a 08                	push   0x8
c001d4a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4ac:	50                   	push   eax
c001d4ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4b3:	e8 6c f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4b8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d4bd:	50                   	push   eax
c001d4be:	6a 09                	push   0x9
c001d4c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4c7:	50                   	push   eax
c001d4c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4ce:	e8 51 f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4d3:	83 c4 20             	add    esp,0x20
c001d4d6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d4db:	50                   	push   eax
c001d4dc:	6a 0a                	push   0xa
c001d4de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4e5:	50                   	push   eax
c001d4e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4ec:	e8 33 f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4f1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d4f6:	50                   	push   eax
c001d4f7:	6a 0b                	push   0xb
c001d4f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d500:	50                   	push   eax
c001d501:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d507:	e8 18 f1 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d50c:	83 c4 20             	add    esp,0x20
c001d50f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d514:	50                   	push   eax
c001d515:	6a 02                	push   0x2
c001d517:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d51e:	50                   	push   eax
c001d51f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d525:	e8 fa f0 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d52a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d52f:	50                   	push   eax
c001d530:	6a 03                	push   0x3
c001d532:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d539:	50                   	push   eax
c001d53a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d540:	e8 df f0 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d545:	83 c4 20             	add    esp,0x20
c001d548:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d54d:	50                   	push   eax
c001d54e:	6a 04                	push   0x4
c001d550:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d557:	50                   	push   eax
c001d558:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d55e:	e8 c1 f0 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d568:	50                   	push   eax
c001d569:	6a 05                	push   0x5
c001d56b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d572:	50                   	push   eax
c001d573:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d579:	e8 a6 f0 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d57e:	83 c4 20             	add    esp,0x20
c001d581:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d586:	0f 94 c0             	sete   al
c001d589:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d58e:	74 09                	je     c001d599 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d590:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001d597:	eb 07                	jmp    c001d5a0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d599:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001d5a0:	0f b6 c0             	movzx  eax,al
c001d5a3:	50                   	push   eax
c001d5a4:	6a 07                	push   0x7
c001d5a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5ad:	50                   	push   eax
c001d5ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5b4:	e8 6b f0 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d5bd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	85 f6                	test   esi,esi
c001d5c6:	0f 84 ac 00 00 00    	je     c001d678 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001d5cc:	50                   	push   eax
c001d5cd:	6a 01                	push   0x1
c001d5cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5d6:	50                   	push   eax
c001d5d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5dd:	e8 ee fb ff ff       	call   c001d1d0 <IDE::polling(unsigned char, unsigned int)>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d5eb:	84 c0                	test   al,al
c001d5ed:	74 20                	je     c001d60f <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001d5ef:	0f b6 f8             	movzx  edi,al
c001d5f2:	0f b6 d2             	movzx  edx,dl
c001d5f5:	57                   	push   edi
c001d5f6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d5fd:	50                   	push   eax
c001d5fe:	52                   	push   edx
c001d5ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d605:	e8 30 fa ff ff       	call   c001d03a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d60a:	e9 85 00 00 00       	jmp    c001d694 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001d60f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d614:	74 41                	je     c001d657 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001d616:	31 c9                	xor    ecx,ecx
c001d618:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d61c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d620:	50                   	push   eax
c001d621:	50                   	push   eax
c001d622:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d629:	50                   	push   eax
c001d62a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d630:	e8 dd ef ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001d635:	89 c2                	mov    edx,eax
c001d637:	89 e8                	mov    eax,ebp
c001d639:	66 ef                	out    dx,ax
c001d63b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d63f:	83 c4 10             	add    esp,0x10
c001d642:	41                   	inc    ecx
c001d643:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d649:	75 cd                	jne    c001d618 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001d64b:	4e                   	dec    esi
c001d64c:	81 c7 00 02 00 00    	add    edi,0x200
c001d652:	e9 6d ff ff ff       	jmp    c001d5c4 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001d657:	0f b6 d2             	movzx  edx,dl
c001d65a:	51                   	push   ecx
c001d65b:	51                   	push   ecx
c001d65c:	52                   	push   edx
c001d65d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d663:	e8 aa ef ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001d668:	b9 00 01 00 00       	mov    ecx,0x100
c001d66d:	89 c2                	mov    edx,eax
c001d66f:	fc                   	cld    
c001d670:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d673:	83 c4 10             	add    esp,0x10
c001d676:	eb d3                	jmp    c001d64b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001d678:	31 ff                	xor    edi,edi
c001d67a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d67f:	74 16                	je     c001d697 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d681:	50                   	push   eax
c001d682:	50                   	push   eax
c001d683:	31 c0                	xor    eax,eax
c001d685:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d68a:	0f 94 c0             	sete   al
c001d68d:	50                   	push   eax
c001d68e:	53                   	push   ebx
c001d68f:	e8 f6 fb ff ff       	call   c001d28a <ATA::flush(bool)>
c001d694:	83 c4 10             	add    esp,0x10
c001d697:	83 c4 2c             	add    esp,0x2c
c001d69a:	89 f8                	mov    eax,edi
c001d69c:	5b                   	pop    ebx
c001d69d:	5e                   	pop    esi
c001d69e:	5f                   	pop    edi
c001d69f:	5d                   	pop    ebp
c001d6a0:	c3                   	ret    
c001d6a1:	90                   	nop

c001d6a2 <ATA::read(unsigned long long, int, void*)>:
c001d6a2:	57                   	push   edi
c001d6a3:	b8 04 00 00 00       	mov    eax,0x4
c001d6a8:	56                   	push   esi
c001d6a9:	53                   	push   ebx
c001d6aa:	83 ec 10             	sub    esp,0x10
c001d6ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d6b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d6b5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d6b8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d6bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6c0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d6c6:	77 3b                	ja     c001d703 <ATA::read(unsigned long long, int, void*)+0x61>
c001d6c8:	b8 06 00 00 00       	mov    eax,0x6
c001d6cd:	85 d2                	test   edx,edx
c001d6cf:	74 32                	je     c001d703 <ATA::read(unsigned long long, int, void*)+0x61>
c001d6d1:	50                   	push   eax
c001d6d2:	50                   	push   eax
c001d6d3:	6a 00                	push   0x0
c001d6d5:	52                   	push   edx
c001d6d6:	53                   	push   ebx
c001d6d7:	57                   	push   edi
c001d6d8:	56                   	push   esi
c001d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6dd:	e8 42 fc ff ff       	call   c001d324 <ATA::access(unsigned long long, int, void*, bool)>
c001d6e2:	83 c4 20             	add    esp,0x20
c001d6e5:	85 c0                	test   eax,eax
c001d6e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6eb:	75 11                	jne    c001d6fe <ATA::read(unsigned long long, int, void*)+0x5c>
c001d6ed:	01 1d 04 61 02 c0    	add    DWORD PTR ds:0xc0026104,ebx
c001d6f3:	e8 00 f9 fe ff       	call   c000cff8 <VgaText::updateDiskUsage()>
c001d6f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6fc:	eb 05                	jmp    c001d703 <ATA::read(unsigned long long, int, void*)+0x61>
c001d6fe:	b8 01 00 00 00       	mov    eax,0x1
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	5b                   	pop    ebx
c001d707:	5e                   	pop    esi
c001d708:	5f                   	pop    edi
c001d709:	c3                   	ret    

c001d70a <ATA::write(unsigned long long, int, void*)>:
c001d70a:	57                   	push   edi
c001d70b:	b8 04 00 00 00       	mov    eax,0x4
c001d710:	56                   	push   esi
c001d711:	53                   	push   ebx
c001d712:	83 ec 10             	sub    esp,0x10
c001d715:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d719:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d71d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d720:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d724:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d728:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d72e:	77 3b                	ja     c001d76b <ATA::write(unsigned long long, int, void*)+0x61>
c001d730:	b8 06 00 00 00       	mov    eax,0x6
c001d735:	85 d2                	test   edx,edx
c001d737:	74 32                	je     c001d76b <ATA::write(unsigned long long, int, void*)+0x61>
c001d739:	50                   	push   eax
c001d73a:	50                   	push   eax
c001d73b:	6a 01                	push   0x1
c001d73d:	52                   	push   edx
c001d73e:	53                   	push   ebx
c001d73f:	57                   	push   edi
c001d740:	56                   	push   esi
c001d741:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d745:	e8 da fb ff ff       	call   c001d324 <ATA::access(unsigned long long, int, void*, bool)>
c001d74a:	83 c4 20             	add    esp,0x20
c001d74d:	85 c0                	test   eax,eax
c001d74f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d753:	75 11                	jne    c001d766 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d755:	01 1d 00 61 02 c0    	add    DWORD PTR ds:0xc0026100,ebx
c001d75b:	e8 98 f8 fe ff       	call   c000cff8 <VgaText::updateDiskUsage()>
c001d760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d764:	eb 05                	jmp    c001d76b <ATA::write(unsigned long long, int, void*)+0x61>
c001d766:	b8 01 00 00 00       	mov    eax,0x1
c001d76b:	83 c4 10             	add    esp,0x10
c001d76e:	5b                   	pop    ebx
c001d76f:	5e                   	pop    esi
c001d770:	5f                   	pop    edi
c001d771:	c3                   	ret    

c001d772 <ATA::detectCHS()>:
c001d772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d776:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d77c:	c1 e0 06             	shl    eax,0x6
c001d77f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d785:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d78f:	c7 44 24 04 83 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023383
c001d797:	e9 3c 81 ff ff       	jmp    c00158d8 <Krnl::panic(char const*)>

c001d79c <ATA::open(int, int, void*)>:
c001d79c:	53                   	push   ebx
c001d79d:	83 ec 08             	sub    esp,0x8
c001d7a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7ac:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d7b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d7b8:	c1 e0 06             	shl    eax,0x6
c001d7bb:	01 d0                	add    eax,edx
c001d7bd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d7c4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d7ca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d7d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d7db:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d7e1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d7e8:	75 0c                	jne    c001d7f6 <ATA::open(int, int, void*)+0x5a>
c001d7ea:	83 ec 0c             	sub    esp,0xc
c001d7ed:	53                   	push   ebx
c001d7ee:	e8 7f ff ff ff       	call   c001d772 <ATA::detectCHS()>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d7fc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d802:	c1 e0 06             	shl    eax,0x6
c001d805:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d80c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d816:	d1 e8                	shr    eax,1
c001d818:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d81e:	6a 04                	push   0x4
c001d820:	6a 0c                	push   0xc
c001d822:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d829:	50                   	push   eax
c001d82a:	52                   	push   edx
c001d82b:	e8 f4 ed ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d830:	90                   	nop
c001d831:	90                   	nop
c001d832:	6a 00                	push   0x0
c001d834:	6a 0c                	push   0xc
c001d836:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d83d:	50                   	push   eax
c001d83e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d844:	e8 db ed ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d849:	83 c4 14             	add    esp,0x14
c001d84c:	53                   	push   ebx
c001d84d:	e8 34 31 ff ff       	call   c0010986 <PhysicalDisk::startCache()>
c001d852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d855:	e8 f4 50 ff ff       	call   c001294e <createPartitionsForDisk(PhysicalDisk*)>
c001d85a:	31 c0                	xor    eax,eax
c001d85c:	83 c4 18             	add    esp,0x18
c001d85f:	5b                   	pop    ebx
c001d860:	c3                   	ret    
c001d861:	90                   	nop

c001d862 <ATAPI::write(unsigned long long, int, void*)>:
c001d862:	b8 03 00 00 00       	mov    eax,0x3
c001d867:	c3                   	ret    

c001d868 <ATAPI::close(int, int, void*)>:
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d86f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d875:	85 c0                	test   eax,eax
c001d877:	74 0c                	je     c001d885 <ATAPI::close(int, int, void*)+0x1d>
c001d879:	83 ec 0c             	sub    esp,0xc
c001d87c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d87e:	50                   	push   eax
c001d87f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d882:	83 c4 10             	add    esp,0x10
c001d885:	31 c0                	xor    eax,eax
c001d887:	83 c4 0c             	add    esp,0xc
c001d88a:	c3                   	ret    
c001d88b:	90                   	nop

c001d88c <ATAPI::ATAPI()>:
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d893:	83 ec 04             	sub    esp,0x4
c001d896:	68 00 08 00 00       	push   0x800
c001d89b:	68 cc 33 02 c0       	push   0xc00233cc
c001d8a0:	50                   	push   eax
c001d8a1:	e8 78 30 ff ff       	call   c001091e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c001d8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b2:	89 10                	mov    DWORD PTR [eax],edx
c001d8b4:	90                   	nop
c001d8b5:	83 c4 0c             	add    esp,0xc
c001d8b8:	c3                   	ret    
c001d8b9:	90                   	nop

c001d8ba <ATAPI::readyForCommand()>:
c001d8ba:	56                   	push   esi
c001d8bb:	53                   	push   ebx
c001d8bc:	31 db                	xor    ebx,ebx
c001d8be:	50                   	push   eax
c001d8bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8c3:	50                   	push   eax
c001d8c4:	6a 0c                	push   0xc
c001d8c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d8cd:	50                   	push   eax
c001d8ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d8d4:	e8 0b ee ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	a8 88                	test   al,0x88
c001d8de:	74 23                	je     c001d903 <ATAPI::readyForCommand()+0x49>
c001d8e0:	43                   	inc    ebx
c001d8e1:	83 fb 63             	cmp    ebx,0x63
c001d8e4:	7e dd                	jle    c001d8c3 <ATAPI::readyForCommand()+0x9>
c001d8e6:	51                   	push   ecx
c001d8e7:	51                   	push   ecx
c001d8e8:	6a 00                	push   0x0
c001d8ea:	68 40 42 0f 00       	push   0xf4240
c001d8ef:	e8 80 b4 ff ff       	call   c0018d74 <nanoSleep(unsigned long long)>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d8fd:	75 c4                	jne    c001d8c3 <ATAPI::readyForCommand()+0x9>
c001d8ff:	31 c0                	xor    eax,eax
c001d901:	eb 02                	jmp    c001d905 <ATAPI::readyForCommand()+0x4b>
c001d903:	b0 01                	mov    al,0x1
c001d905:	5a                   	pop    edx
c001d906:	5b                   	pop    ebx
c001d907:	5e                   	pop    esi
c001d908:	c3                   	ret    
c001d909:	90                   	nop

c001d90a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d90a:	55                   	push   ebp
c001d90b:	57                   	push   edi
c001d90c:	56                   	push   esi
c001d90d:	53                   	push   ebx
c001d90e:	83 ec 20             	sub    esp,0x20
c001d911:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d915:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d919:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d91d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d921:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d925:	6a 01                	push   0x1
c001d927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d92e:	50                   	push   eax
c001d92f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d935:	e8 f6 ee ff ff       	call   c001c830 <IDE::enableIRQs(unsigned char, bool)>
c001d93a:	5e                   	pop    esi
c001d93b:	58                   	pop    eax
c001d93c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d943:	50                   	push   eax
c001d944:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d94a:	e8 af ec ff ff       	call   c001c5fe <IDE::prepareInterrupt(unsigned char)>
c001d94f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d952:	e8 63 ff ff ff       	call   c001d8ba <ATAPI::readyForCommand()>
c001d957:	83 c4 10             	add    esp,0x10
c001d95a:	84 c0                	test   al,al
c001d95c:	75 0a                	jne    c001d968 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d95e:	bb 01 00 00 00       	mov    ebx,0x1
c001d963:	e9 57 02 00 00       	jmp    c001dbbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d968:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d96e:	c1 e0 04             	shl    eax,0x4
c001d971:	0f b6 c0             	movzx  eax,al
c001d974:	50                   	push   eax
c001d975:	6a 06                	push   0x6
c001d977:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d97e:	50                   	push   eax
c001d97f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d985:	e8 9a ec ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d98a:	6a 00                	push   0x0
c001d98c:	6a 01                	push   0x1
c001d98e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d995:	50                   	push   eax
c001d996:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d99c:	e8 83 ec ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a1:	83 c4 20             	add    esp,0x20
c001d9a4:	0f b6 c3             	movzx  eax,bl
c001d9a7:	0f b6 df             	movzx  ebx,bh
c001d9aa:	50                   	push   eax
c001d9ab:	6a 04                	push   0x4
c001d9ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9b4:	50                   	push   eax
c001d9b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9bb:	e8 64 ec ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9c0:	53                   	push   ebx
c001d9c1:	6a 05                	push   0x5
c001d9c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9ca:	50                   	push   eax
c001d9cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9d1:	e8 4e ec ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d6:	83 c4 20             	add    esp,0x20
c001d9d9:	68 a0 00 00 00       	push   0xa0
c001d9de:	6a 07                	push   0x7
c001d9e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9e7:	50                   	push   eax
c001d9e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9ee:	e8 31 ec ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9f3:	83 c4 0c             	add    esp,0xc
c001d9f6:	6a 01                	push   0x1
c001d9f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9ff:	50                   	push   eax
c001da00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da06:	e8 c5 f7 ff ff       	call   c001d1d0 <IDE::polling(unsigned char, unsigned int)>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001da14:	84 c0                	test   al,al
c001da16:	74 23                	je     c001da3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001da18:	0f b6 d8             	movzx  ebx,al
c001da1b:	0f b6 d2             	movzx  edx,dl
c001da1e:	53                   	push   ebx
c001da1f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001da26:	50                   	push   eax
c001da27:	52                   	push   edx
c001da28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da2e:	e8 07 f6 ff ff       	call   c001d03a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da33:	83 c4 10             	add    esp,0x10
c001da36:	e9 84 01 00 00       	jmp    c001dbbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001da3b:	0f b6 d2             	movzx  edx,dl
c001da3e:	53                   	push   ebx
c001da3f:	53                   	push   ebx
c001da40:	52                   	push   edx
c001da41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da47:	e8 c6 eb ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001da4c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001da50:	b9 06 00 00 00       	mov    ecx,0x6
c001da55:	89 c2                	mov    edx,eax
c001da57:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001da5a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001da5e:	83 c4 10             	add    esp,0x10
c001da61:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001da67:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001da6e:	85 db                	test   ebx,ebx
c001da70:	0f 84 ec 00 00 00    	je     c001db62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001da76:	51                   	push   ecx
c001da77:	51                   	push   ecx
c001da78:	52                   	push   edx
c001da79:	50                   	push   eax
c001da7a:	e8 13 ed ff ff       	call   c001c792 <IDE::waitInterrupt(unsigned char)>
c001da7f:	83 c4 10             	add    esp,0x10
c001da82:	84 c0                	test   al,al
c001da84:	0f 84 d4 fe ff ff    	je     c001d95e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001da8a:	56                   	push   esi
c001da8b:	56                   	push   esi
c001da8c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da93:	50                   	push   eax
c001da94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da9a:	e8 5f eb ff ff       	call   c001c5fe <IDE::prepareInterrupt(unsigned char)>
c001da9f:	83 c4 0c             	add    esp,0xc
c001daa2:	6a 04                	push   0x4
c001daa4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daab:	50                   	push   eax
c001daac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dab2:	e8 2d ec ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001dab7:	83 c4 0c             	add    esp,0xc
c001daba:	89 c6                	mov    esi,eax
c001dabc:	6a 05                	push   0x5
c001dabe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dac5:	50                   	push   eax
c001dac6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dacc:	e8 13 ec ff ff       	call   c001c6e4 <IDE::read(unsigned char, unsigned char)>
c001dad1:	89 f1                	mov    ecx,esi
c001dad3:	0f b6 c0             	movzx  eax,al
c001dad6:	0f b6 f1             	movzx  esi,cl
c001dad9:	c1 e0 08             	shl    eax,0x8
c001dadc:	09 c6                	or     esi,eax
c001dade:	d1 fe                	sar    esi,1
c001dae0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dae4:	83 c4 10             	add    esp,0x10
c001dae7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001daec:	74 41                	je     c001db2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001daee:	31 c9                	xor    ecx,ecx
c001daf0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001daf6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dafd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001db01:	75 0a                	jne    c001db0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001db03:	01 c9                	add    ecx,ecx
c001db05:	01 cd                	add    ebp,ecx
c001db07:	4b                   	dec    ebx
c001db08:	e9 54 ff ff ff       	jmp    c001da61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001db0d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001db12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db16:	51                   	push   ecx
c001db17:	51                   	push   ecx
c001db18:	52                   	push   edx
c001db19:	50                   	push   eax
c001db1a:	e8 f3 ea ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001db1f:	89 c2                	mov    edx,eax
c001db21:	89 f0                	mov    eax,esi
c001db23:	66 ef                	out    dx,ax
c001db25:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	41                   	inc    ecx
c001db2d:	eb c1                	jmp    c001daf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001db2f:	31 f6                	xor    esi,esi
c001db31:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001db37:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001db3e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001db42:	75 06                	jne    c001db4a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001db44:	01 f6                	add    esi,esi
c001db46:	01 f5                	add    ebp,esi
c001db48:	eb bd                	jmp    c001db07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001db4a:	51                   	push   ecx
c001db4b:	51                   	push   ecx
c001db4c:	52                   	push   edx
c001db4d:	50                   	push   eax
c001db4e:	e8 bf ea ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001db53:	89 c2                	mov    edx,eax
c001db55:	66 ed                	in     ax,dx
c001db57:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	46                   	inc    esi
c001db60:	eb cf                	jmp    c001db31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001db62:	51                   	push   ecx
c001db63:	51                   	push   ecx
c001db64:	52                   	push   edx
c001db65:	50                   	push   eax
c001db66:	e8 27 ec ff ff       	call   c001c792 <IDE::waitInterrupt(unsigned char)>
c001db6b:	83 c4 10             	add    esp,0x10
c001db6e:	84 c0                	test   al,al
c001db70:	0f 84 e8 fd ff ff    	je     c001d95e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001db76:	bb a0 86 01 00       	mov    ebx,0x186a0
c001db7b:	52                   	push   edx
c001db7c:	52                   	push   edx
c001db7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db84:	50                   	push   eax
c001db85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db8b:	e8 6e ea ff ff       	call   c001c5fe <IDE::prepareInterrupt(unsigned char)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	50                   	push   eax
c001db94:	50                   	push   eax
c001db95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db9c:	50                   	push   eax
c001db9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dba3:	e8 6a ea ff ff       	call   c001c612 <IDE::getBase(unsigned char)>
c001dba8:	8d 50 07             	lea    edx,[eax+0x7]
c001dbab:	ec                   	in     al,dx
c001dbac:	83 c4 10             	add    esp,0x10
c001dbaf:	a8 88                	test   al,0x88
c001dbb1:	74 0a                	je     c001dbbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dbb3:	4b                   	dec    ebx
c001dbb4:	75 dd                	jne    c001db93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dbb6:	bb 02 00 00 00       	mov    ebx,0x2
c001dbbb:	eb 02                	jmp    c001dbbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dbbd:	31 db                	xor    ebx,ebx
c001dbbf:	83 c4 1c             	add    esp,0x1c
c001dbc2:	89 d8                	mov    eax,ebx
c001dbc4:	5b                   	pop    ebx
c001dbc5:	5e                   	pop    esi
c001dbc6:	5f                   	pop    edi
c001dbc7:	5d                   	pop    ebp
c001dbc8:	c3                   	ret    
c001dbc9:	90                   	nop

c001dbca <ATAPI::diskRemoved()>:
c001dbca:	83 ec 18             	sub    esp,0x18
c001dbcd:	68 d7 33 02 c0       	push   0xc00233d7
c001dbd2:	e8 36 15 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001dbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dbe2:	83 c4 1c             	add    esp,0x1c
c001dbe5:	c3                   	ret    

c001dbe6 <ATAPI::eject()>:
c001dbe6:	57                   	push   edi
c001dbe7:	b9 03 00 00 00       	mov    ecx,0x3
c001dbec:	53                   	push   ebx
c001dbed:	83 ec 14             	sub    esp,0x14
c001dbf0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dbf4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbf8:	fc                   	cld    
c001dbf9:	31 c0                	xor    eax,eax
c001dbfb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbfd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dc02:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dc07:	50                   	push   eax
c001dc08:	50                   	push   eax
c001dc09:	6a 00                	push   0x0
c001dc0b:	6a 00                	push   0x0
c001dc0d:	6a 00                	push   0x0
c001dc0f:	6a 02                	push   0x2
c001dc11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc15:	50                   	push   eax
c001dc16:	53                   	push   ebx
c001dc17:	e8 ee fc ff ff       	call   c001d90a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc1c:	83 c4 14             	add    esp,0x14
c001dc1f:	53                   	push   ebx
c001dc20:	e8 a5 ff ff ff       	call   c001dbca <ATAPI::diskRemoved()>
c001dc25:	83 c4 24             	add    esp,0x24
c001dc28:	5b                   	pop    ebx
c001dc29:	5f                   	pop    edi
c001dc2a:	c3                   	ret    
c001dc2b:	90                   	nop

c001dc2c <ATAPI::diskInserted()>:
c001dc2c:	53                   	push   ebx
c001dc2d:	83 ec 14             	sub    esp,0x14
c001dc30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dc34:	68 ed 33 02 c0       	push   0xc00233ed
c001dc39:	e8 cf 14 ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001dc3e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dc45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc48:	e8 39 2d ff ff       	call   c0010986 <PhysicalDisk::startCache()>
c001dc4d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dc51:	83 c4 18             	add    esp,0x18
c001dc54:	5b                   	pop    ebx
c001dc55:	e9 f4 4c ff ff       	jmp    c001294e <createPartitionsForDisk(PhysicalDisk*)>

c001dc5a <ATAPI::detectMedia()>:
c001dc5a:	56                   	push   esi
c001dc5b:	53                   	push   ebx
c001dc5c:	83 ec 28             	sub    esp,0x28
c001dc5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc63:	6a 0c                	push   0xc
c001dc65:	6a 00                	push   0x0
c001dc67:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001dc6b:	56                   	push   esi
c001dc6c:	e8 49 2a fe ff       	call   c00006ba <memset>
c001dc71:	58                   	pop    eax
c001dc72:	5a                   	pop    edx
c001dc73:	6a 00                	push   0x0
c001dc75:	6a 00                	push   0x0
c001dc77:	6a 00                	push   0x0
c001dc79:	6a 00                	push   0x0
c001dc7b:	56                   	push   esi
c001dc7c:	53                   	push   ebx
c001dc7d:	e8 88 fc ff ff       	call   c001d90a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc82:	83 c4 1c             	add    esp,0x1c
c001dc85:	6a 0c                	push   0xc
c001dc87:	6a 00                	push   0x0
c001dc89:	56                   	push   esi
c001dc8a:	e8 2b 2a fe ff       	call   c00006ba <memset>
c001dc8f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001dc94:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001dc99:	59                   	pop    ecx
c001dc9a:	58                   	pop    eax
c001dc9b:	6a 01                	push   0x1
c001dc9d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001dca1:	50                   	push   eax
c001dca2:	6a 00                	push   0x0
c001dca4:	6a 12                	push   0x12
c001dca6:	56                   	push   esi
c001dca7:	53                   	push   ebx
c001dca8:	e8 5d fc ff ff       	call   c001d90a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dcad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001dcb1:	83 c4 20             	add    esp,0x20
c001dcb4:	83 e0 7f             	and    eax,0x7f
c001dcb7:	3c 70                	cmp    al,0x70
c001dcb9:	74 15                	je     c001dcd0 <ATAPI::detectMedia()+0x76>
c001dcbb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dcc2:	75 0c                	jne    c001dcd0 <ATAPI::detectMedia()+0x76>
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	53                   	push   ebx
c001dcc8:	e8 5f ff ff ff       	call   c001dc2c <ATAPI::diskInserted()>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dcd4:	83 e0 0f             	and    eax,0xf
c001dcd7:	3c 02                	cmp    al,0x2
c001dcd9:	75 1b                	jne    c001dcf6 <ATAPI::detectMedia()+0x9c>
c001dcdb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dce0:	75 2d                	jne    c001dd0f <ATAPI::detectMedia()+0xb5>
c001dce2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dce9:	74 24                	je     c001dd0f <ATAPI::detectMedia()+0xb5>
c001dceb:	83 ec 0c             	sub    esp,0xc
c001dcee:	53                   	push   ebx
c001dcef:	e8 d6 fe ff ff       	call   c001dbca <ATAPI::diskRemoved()>
c001dcf4:	eb 16                	jmp    c001dd0c <ATAPI::detectMedia()+0xb2>
c001dcf6:	84 c0                	test   al,al
c001dcf8:	75 15                	jne    c001dd0f <ATAPI::detectMedia()+0xb5>
c001dcfa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd01:	75 0c                	jne    c001dd0f <ATAPI::detectMedia()+0xb5>
c001dd03:	83 ec 0c             	sub    esp,0xc
c001dd06:	53                   	push   ebx
c001dd07:	e8 20 ff ff ff       	call   c001dc2c <ATAPI::diskInserted()>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	83 c4 24             	add    esp,0x24
c001dd12:	5b                   	pop    ebx
c001dd13:	5e                   	pop    esi
c001dd14:	c3                   	ret    
c001dd15:	90                   	nop

c001dd16 <ATAPI::open(int, int, void*)>:
c001dd16:	53                   	push   ebx
c001dd17:	83 ec 08             	sub    esp,0x8
c001dd1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd26:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd2c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dd32:	c1 e0 06             	shl    eax,0x6
c001dd35:	01 d0                	add    eax,edx
c001dd37:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dd3e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dd44:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dd4b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dd55:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dd5b:	6a 04                	push   0x4
c001dd5d:	6a 0c                	push   0xc
c001dd5f:	51                   	push   ecx
c001dd60:	52                   	push   edx
c001dd61:	e8 be e8 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd66:	90                   	nop
c001dd67:	90                   	nop
c001dd68:	6a 00                	push   0x0
c001dd6a:	6a 0c                	push   0xc
c001dd6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd73:	50                   	push   eax
c001dd74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd7a:	e8 a5 e8 ff ff       	call   c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd7f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dd86:	83 c4 14             	add    esp,0x14
c001dd89:	53                   	push   ebx
c001dd8a:	e8 cb fe ff ff       	call   c001dc5a <ATAPI::detectMedia()>
c001dd8f:	31 c0                	xor    eax,eax
c001dd91:	83 c4 18             	add    esp,0x18
c001dd94:	5b                   	pop    ebx
c001dd95:	c3                   	ret    

c001dd96 <ATAPI::read(unsigned long long, int, void*)>:
c001dd96:	55                   	push   ebp
c001dd97:	57                   	push   edi
c001dd98:	56                   	push   esi
c001dd99:	53                   	push   ebx
c001dd9a:	83 ec 1c             	sub    esp,0x1c
c001dd9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dda1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dda5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dda9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ddb0:	74 41                	je     c001ddf3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ddb2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ddb6:	b9 03 00 00 00       	mov    ecx,0x3
c001ddbb:	fc                   	cld    
c001ddbc:	31 c0                	xor    eax,eax
c001ddbe:	86 fb                	xchg   bl,bh
c001ddc0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ddc2:	c1 c3 10             	rol    ebx,0x10
c001ddc5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ddca:	89 e8                	mov    eax,ebp
c001ddcc:	86 fb                	xchg   bl,bh
c001ddce:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ddd2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ddd6:	50                   	push   eax
c001ddd7:	50                   	push   eax
c001ddd8:	55                   	push   ebp
c001ddd9:	c1 e5 0b             	shl    ebp,0xb
c001dddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dde0:	6a 00                	push   0x0
c001dde2:	55                   	push   ebp
c001dde3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dde7:	50                   	push   eax
c001dde8:	56                   	push   esi
c001dde9:	e8 1c fb ff ff       	call   c001d90a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ddee:	83 c4 20             	add    esp,0x20
c001ddf1:	eb 1a                	jmp    c001de0d <ATAPI::read(unsigned long long, int, void*)+0x77>
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	56                   	push   esi
c001ddf7:	e8 5e fe ff ff       	call   c001dc5a <ATAPI::detectMedia()>
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001de06:	75 aa                	jne    c001ddb2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001de08:	b8 02 00 00 00       	mov    eax,0x2
c001de0d:	83 c4 1c             	add    esp,0x1c
c001de10:	5b                   	pop    ebx
c001de11:	5e                   	pop    esi
c001de12:	5f                   	pop    edi
c001de13:	5d                   	pop    ebp
c001de14:	c3                   	ret    
c001de15:	90                   	nop

c001de16 <AVX::open(int, int, void*)>:
c001de16:	83 ec 0c             	sub    esp,0xc
c001de19:	e8 0a 10 00 00       	call   c001ee28 <avxInit>
c001de1e:	b8 00 00 00 00       	mov    eax,0x0
c001de23:	83 c4 0c             	add    esp,0xc
c001de26:	c3                   	ret    
c001de27:	90                   	nop

c001de28 <AVX::close(int, int, void*)>:
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	e8 f9 0f 00 00       	call   c001ee29 <avxClose>
c001de30:	b8 00 00 00 00       	mov    eax,0x0
c001de35:	83 c4 0c             	add    esp,0xc
c001de38:	c3                   	ret    
c001de39:	90                   	nop

c001de3a <AVX::available()>:
c001de3a:	83 ec 0c             	sub    esp,0xc
c001de3d:	e8 de 0f 00 00       	call   c001ee20 <avxDetect>
c001de42:	85 c0                	test   eax,eax
c001de44:	0f 95 c0             	setne  al
c001de47:	83 c4 0c             	add    esp,0xc
c001de4a:	c3                   	ret    
c001de4b:	90                   	nop

c001de4c <AVX::save(void*)>:
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de53:	83 ec 0c             	sub    esp,0xc
c001de56:	50                   	push   eax
c001de57:	e8 ca 0f 00 00       	call   c001ee26 <avxSave>
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	90                   	nop
c001de60:	83 c4 0c             	add    esp,0xc
c001de63:	c3                   	ret    

c001de64 <AVX::load(void*)>:
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de6b:	83 ec 0c             	sub    esp,0xc
c001de6e:	50                   	push   eax
c001de6f:	e8 b3 0f 00 00       	call   c001ee27 <avxLoad>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	90                   	nop
c001de78:	83 c4 0c             	add    esp,0xc
c001de7b:	c3                   	ret    

c001de7c <AVX::AVX()>:
c001de7c:	83 ec 0c             	sub    esp,0xc
c001de7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de83:	83 ec 08             	sub    esp,0x8
c001de86:	68 38 34 02 c0       	push   0xc0023438
c001de8b:	50                   	push   eax
c001de8c:	e8 6b 2b ff ff       	call   c00109fc <FPU::FPU(char const*)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001de99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9d:	89 10                	mov    DWORD PTR [eax],edx
c001de9f:	90                   	nop
c001dea0:	83 c4 0c             	add    esp,0xc
c001dea3:	c3                   	ret    

c001dea4 <MMX::available()>:
c001dea4:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001dea9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001deaf:	83 e0 20             	and    eax,0x20
c001deb2:	84 c0                	test   al,al
c001deb4:	0f 95 c0             	setne  al
c001deb7:	c3                   	ret    

c001deb8 <MMX::open(int, int, void*)>:
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	e8 dc 0f 00 00       	call   c001ee9c <x87Init>
c001dec0:	b8 00 00 00 00       	mov    eax,0x0
c001dec5:	83 c4 0c             	add    esp,0xc
c001dec8:	c3                   	ret    
c001dec9:	90                   	nop

c001deca <MMX::close(int, int, void*)>:
c001deca:	83 ec 0c             	sub    esp,0xc
c001decd:	e8 e4 0f 00 00       	call   c001eeb6 <x87Close>
c001ded2:	b8 00 00 00 00       	mov    eax,0x0
c001ded7:	83 c4 0c             	add    esp,0xc
c001deda:	c3                   	ret    
c001dedb:	90                   	nop

c001dedc <MMX::save(void*)>:
c001dedc:	83 ec 0c             	sub    esp,0xc
c001dedf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dee3:	83 ec 0c             	sub    esp,0xc
c001dee6:	50                   	push   eax
c001dee7:	e8 a5 0f 00 00       	call   c001ee91 <x87Save>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	90                   	nop
c001def0:	83 c4 0c             	add    esp,0xc
c001def3:	c3                   	ret    

c001def4 <MMX::load(void*)>:
c001def4:	83 ec 0c             	sub    esp,0xc
c001def7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001defb:	83 ec 0c             	sub    esp,0xc
c001defe:	50                   	push   eax
c001deff:	e8 93 0f 00 00       	call   c001ee97 <x87Load>
c001df04:	83 c4 10             	add    esp,0x10
c001df07:	90                   	nop
c001df08:	83 c4 0c             	add    esp,0xc
c001df0b:	c3                   	ret    

c001df0c <MMX::MMX()>:
c001df0c:	83 ec 0c             	sub    esp,0xc
c001df0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df13:	83 ec 08             	sub    esp,0x8
c001df16:	68 78 34 02 c0       	push   0xc0023478
c001df1b:	50                   	push   eax
c001df1c:	e8 db 2a ff ff       	call   c00109fc <FPU::FPU(char const*)>
c001df21:	83 c4 10             	add    esp,0x10
c001df24:	ba 88 34 02 c0       	mov    edx,0xc0023488
c001df29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2d:	89 10                	mov    DWORD PTR [eax],edx
c001df2f:	90                   	nop
c001df30:	83 c4 0c             	add    esp,0xc
c001df33:	c3                   	ret    

c001df34 <SSE::open(int, int, void*)>:
c001df34:	83 ec 0c             	sub    esp,0xc
c001df37:	e8 1b 0f 00 00       	call   c001ee57 <sseInit>
c001df3c:	b8 00 00 00 00       	mov    eax,0x0
c001df41:	83 c4 0c             	add    esp,0xc
c001df44:	c3                   	ret    
c001df45:	90                   	nop

c001df46 <SSE::close(int, int, void*)>:
c001df46:	83 ec 0c             	sub    esp,0xc
c001df49:	e8 19 0f 00 00       	call   c001ee67 <sseClose>
c001df4e:	b8 00 00 00 00       	mov    eax,0x0
c001df53:	83 c4 0c             	add    esp,0xc
c001df56:	c3                   	ret    
c001df57:	90                   	nop

c001df58 <SSE::available()>:
c001df58:	83 ec 1c             	sub    esp,0x1c
c001df5b:	e8 d0 0e 00 00       	call   c001ee30 <sseDetect>
c001df60:	85 c0                	test   eax,eax
c001df62:	0f 95 c0             	setne  al
c001df65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df6d:	83 c4 1c             	add    esp,0x1c
c001df70:	c3                   	ret    
c001df71:	90                   	nop

c001df72 <SSE::save(void*)>:
c001df72:	83 ec 0c             	sub    esp,0xc
c001df75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df79:	83 ec 0c             	sub    esp,0xc
c001df7c:	50                   	push   eax
c001df7d:	e8 c9 0e 00 00       	call   c001ee4b <sseSave>
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	90                   	nop
c001df86:	83 c4 0c             	add    esp,0xc
c001df89:	c3                   	ret    

c001df8a <SSE::load(void*)>:
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df91:	83 ec 0c             	sub    esp,0xc
c001df94:	50                   	push   eax
c001df95:	e8 b7 0e 00 00       	call   c001ee51 <sseLoad>
c001df9a:	83 c4 10             	add    esp,0x10
c001df9d:	90                   	nop
c001df9e:	83 c4 0c             	add    esp,0xc
c001dfa1:	c3                   	ret    

c001dfa2 <SSE::SSE()>:
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa9:	83 ec 08             	sub    esp,0x8
c001dfac:	68 b8 34 02 c0       	push   0xc00234b8
c001dfb1:	50                   	push   eax
c001dfb2:	e8 45 2a ff ff       	call   c00109fc <FPU::FPU(char const*)>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	ba c8 34 02 c0       	mov    edx,0xc00234c8
c001dfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc3:	89 10                	mov    DWORD PTR [eax],edx
c001dfc5:	90                   	nop
c001dfc6:	83 c4 0c             	add    esp,0xc
c001dfc9:	c3                   	ret    

c001dfca <x87::open(int, int, void*)>:
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	e8 ca 0e 00 00       	call   c001ee9c <x87Init>
c001dfd2:	b8 00 00 00 00       	mov    eax,0x0
c001dfd7:	83 c4 0c             	add    esp,0xc
c001dfda:	c3                   	ret    
c001dfdb:	90                   	nop

c001dfdc <x87::close(int, int, void*)>:
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	e8 d2 0e 00 00       	call   c001eeb6 <x87Close>
c001dfe4:	b8 00 00 00 00       	mov    eax,0x0
c001dfe9:	83 c4 0c             	add    esp,0xc
c001dfec:	c3                   	ret    
c001dfed:	90                   	nop

c001dfee <x87::available()>:
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	e8 80 0e 00 00       	call   c001ee76 <x87Detect>
c001dff6:	85 c0                	test   eax,eax
c001dff8:	0f 95 c0             	setne  al
c001dffb:	83 c4 0c             	add    esp,0xc
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <x87::save(void*)>:
c001e000:	83 ec 0c             	sub    esp,0xc
c001e003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e007:	83 ec 0c             	sub    esp,0xc
c001e00a:	50                   	push   eax
c001e00b:	e8 81 0e 00 00       	call   c001ee91 <x87Save>
c001e010:	83 c4 10             	add    esp,0x10
c001e013:	90                   	nop
c001e014:	83 c4 0c             	add    esp,0xc
c001e017:	c3                   	ret    

c001e018 <x87::load(void*)>:
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	50                   	push   eax
c001e023:	e8 6f 0e 00 00       	call   c001ee97 <x87Load>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	90                   	nop
c001e02c:	83 c4 0c             	add    esp,0xc
c001e02f:	c3                   	ret    

c001e030 <x87::x87()>:
c001e030:	83 ec 0c             	sub    esp,0xc
c001e033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e037:	83 ec 08             	sub    esp,0x8
c001e03a:	68 f8 34 02 c0       	push   0xc00234f8
c001e03f:	50                   	push   eax
c001e040:	e8 b7 29 ff ff       	call   c00109fc <FPU::FPU(char const*)>
c001e045:	83 c4 10             	add    esp,0x10
c001e048:	ba 08 35 02 c0       	mov    edx,0xc0023508
c001e04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e051:	89 10                	mov    DWORD PTR [eax],edx
c001e053:	90                   	nop
c001e054:	83 c4 0c             	add    esp,0xc
c001e057:	c3                   	ret    

c001e058 <APIC::disable()>:
c001e058:	90                   	nop
c001e059:	c3                   	ret    

c001e05a <APIC::close(int, int, void*)>:
c001e05a:	55                   	push   ebp
c001e05b:	89 e5                	mov    ebp,esp
c001e05d:	83 ec 08             	sub    esp,0x8
c001e060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e063:	8b 00                	mov    eax,DWORD PTR [eax]
c001e065:	83 c0 3c             	add    eax,0x3c
c001e068:	8b 00                	mov    eax,DWORD PTR [eax]
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e070:	ff d0                	call   eax
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	b8 00 00 00 00       	mov    eax,0x0
c001e07a:	c9                   	leave  
c001e07b:	c3                   	ret    

c001e07c <IOAPIC::close(int, int, void*)>:
c001e07c:	b8 00 00 00 00       	mov    eax,0x0
c001e081:	c3                   	ret    

c001e082 <APIC::io_wait()>:
c001e082:	eb 00                	jmp    c001e084 <APIC::io_wait()+0x2>
c001e084:	eb 00                	jmp    c001e086 <APIC::io_wait()+0x4>
c001e086:	90                   	nop
c001e087:	c3                   	ret    

c001e088 <APIC::getBase()>:
c001e088:	55                   	push   ebp
c001e089:	89 e5                	mov    ebp,esp
c001e08b:	83 ec 18             	sub    esp,0x18
c001e08e:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001e093:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e099:	83 e0 08             	and    eax,0x8
c001e09c:	84 c0                	test   al,al
c001e09e:	75 07                	jne    c001e0a7 <APIC::getBase()+0x1f>
c001e0a0:	b8 00 00 00 00       	mov    eax,0x0
c001e0a5:	eb 21                	jmp    c001e0c8 <APIC::getBase()+0x40>
c001e0a7:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001e0ac:	83 ec 08             	sub    esp,0x8
c001e0af:	6a 1b                	push   0x1b
c001e0b1:	50                   	push   eax
c001e0b2:	e8 05 d5 fe ff       	call   c000b5bc <Computer::rdmsr(unsigned int)>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e0bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e0c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e0c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e0c8:	c9                   	leave  
c001e0c9:	c3                   	ret    

c001e0ca <APIC::eoi(unsigned char)>:
c001e0ca:	55                   	push   ebp
c001e0cb:	89 e5                	mov    ebp,esp
c001e0cd:	83 ec 28             	sub    esp,0x28
c001e0d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0dc:	e8 a7 ff ff ff       	call   c001e088 <APIC::getBase()>
c001e0e1:	83 c4 10             	add    esp,0x10
c001e0e4:	05 b0 00 00 00       	add    eax,0xb0
c001e0e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e0ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e0ef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e0f5:	90                   	nop
c001e0f6:	c9                   	leave  
c001e0f7:	c3                   	ret    

c001e0f8 <APIC::open(int, int, void*)>:
c001e0f8:	55                   	push   ebp
c001e0f9:	89 e5                	mov    ebp,esp
c001e0fb:	57                   	push   edi
c001e0fc:	56                   	push   esi
c001e0fd:	53                   	push   ebx
c001e0fe:	83 ec 1c             	sub    esp,0x1c
c001e101:	83 ec 0c             	sub    esp,0xc
c001e104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e107:	e8 7c ff ff ff       	call   c001e088 <APIC::getBase()>
c001e10c:	83 c4 10             	add    esp,0x10
c001e10f:	05 f0 00 00 00       	add    eax,0xf0
c001e114:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e117:	83 ec 0c             	sub    esp,0xc
c001e11a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e11d:	e8 66 ff ff ff       	call   c001e088 <APIC::getBase()>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	89 c2                	mov    edx,eax
c001e127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e12a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e130:	0f b6 f8             	movzx  edi,al
c001e133:	89 d0                	mov    eax,edx
c001e135:	ba 00 00 00 00       	mov    edx,0x0
c001e13a:	89 c1                	mov    ecx,eax
c001e13c:	80 e5 ff             	and    ch,0xff
c001e13f:	89 cb                	mov    ebx,ecx
c001e141:	0f b6 f2             	movzx  esi,dl
c001e144:	89 d8                	mov    eax,ebx
c001e146:	89 f2                	mov    edx,esi
c001e148:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e14b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e14e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e152:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e156:	83 e0 00             	and    eax,0x0
c001e159:	09 d0                	or     eax,edx
c001e15b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e162:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e168:	8d 50 01             	lea    edx,[eax+0x1]
c001e16b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e16e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e174:	0f b6 d0             	movzx  edx,al
c001e177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e17a:	83 c2 08             	add    edx,0x8
c001e17d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e181:	0f b6 c9             	movzx  ecx,cl
c001e184:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e18a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e18e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e191:	8b 00                	mov    eax,DWORD PTR [eax]
c001e193:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e196:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e19d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e1a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e1a3:	89 10                	mov    DWORD PTR [eax],edx
c001e1a5:	b8 00 00 00 00       	mov    eax,0x0
c001e1aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e1ad:	5b                   	pop    ebx
c001e1ae:	5e                   	pop    esi
c001e1af:	5f                   	pop    edi
c001e1b0:	5d                   	pop    ebp
c001e1b1:	c3                   	ret    

c001e1b2 <IOAPIC::IOAPIC()>:
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b9:	83 ec 08             	sub    esp,0x8
c001e1bc:	68 38 35 02 c0       	push   0xc0023538
c001e1c1:	50                   	push   eax
c001e1c2:	e8 41 25 ff ff       	call   c0010708 <Device::Device(char const*)>
c001e1c7:	83 c4 10             	add    esp,0x10
c001e1ca:	ba 60 36 02 c0       	mov    edx,0xc0023660
c001e1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d3:	89 10                	mov    DWORD PTR [eax],edx
c001e1d5:	90                   	nop
c001e1d6:	83 c4 0c             	add    esp,0xc
c001e1d9:	c3                   	ret    

c001e1da <APIC::APIC()>:
c001e1da:	53                   	push   ebx
c001e1db:	83 ec 18             	sub    esp,0x18
c001e1de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1e2:	83 ec 08             	sub    esp,0x8
c001e1e5:	68 40 35 02 c0       	push   0xc0023540
c001e1ea:	50                   	push   eax
c001e1eb:	e8 66 2c ff ff       	call   c0010e56 <InterruptController::InterruptController(char const*)>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001e1f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fc:	89 10                	mov    DWORD PTR [eax],edx
c001e1fe:	a0 60 61 02 c0       	mov    al,ds:0xc0026160
c001e203:	83 f0 01             	xor    eax,0x1
c001e206:	84 c0                	test   al,al
c001e208:	0f 84 96 00 00 00    	je     c001e2a4 <APIC::APIC()+0xca>
c001e20e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e213:	a0 10 4c 02 c0       	mov    al,ds:0xc0024c10
c001e218:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e21c:	73 7f                	jae    c001e29d <APIC::APIC()+0xc3>
c001e21e:	83 ec 0c             	sub    esp,0xc
c001e221:	68 68 01 00 00       	push   0x168
c001e226:	e8 f3 0d ff ff       	call   c000f01e <operator new(unsigned long)>
c001e22b:	83 c4 10             	add    esp,0x10
c001e22e:	89 c3                	mov    ebx,eax
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	53                   	push   ebx
c001e234:	e8 79 ff ff ff       	call   c001e1b2 <IOAPIC::IOAPIC()>
c001e239:	83 c4 10             	add    esp,0x10
c001e23c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e240:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e245:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e249:	89 14 85 40 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ec0],edx
c001e250:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c001e255:	40                   	inc    eax
c001e256:	a3 20 61 02 c0       	mov    ds:0xc0026120,eax
c001e25b:	a1 68 43 02 c0       	mov    eax,ds:0xc0024368
c001e260:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e266:	83 ec 08             	sub    esp,0x8
c001e269:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e26d:	50                   	push   eax
c001e26e:	e8 a5 22 ff ff       	call   c0010518 <Device::addChild(Device*)>
c001e273:	83 c4 10             	add    esp,0x10
c001e276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e27a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e27c:	83 c0 08             	add    eax,0x8
c001e27f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e281:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e286:	6a 00                	push   0x0
c001e288:	6a 00                	push   0x0
c001e28a:	52                   	push   edx
c001e28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e28f:	ff d0                	call   eax
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e298:	e9 76 ff ff ff       	jmp    c001e213 <APIC::APIC()+0x39>
c001e29d:	c6 05 60 61 02 c0 01 	mov    BYTE PTR ds:0xc0026160,0x1
c001e2a4:	90                   	nop
c001e2a5:	83 c4 18             	add    esp,0x18
c001e2a8:	5b                   	pop    ebx
c001e2a9:	c3                   	ret    

c001e2aa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e2aa:	55                   	push   ebp
c001e2ab:	89 e5                	mov    ebp,esp
c001e2ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2b6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e2b9:	72 1d                	jb     c001e2d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e2bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e2c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2c7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e2cd:	01 d0                	add    eax,edx
c001e2cf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e2d2:	73 04                	jae    c001e2d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e2d4:	b0 01                	mov    al,0x1
c001e2d6:	eb 02                	jmp    c001e2da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e2d8:	b0 00                	mov    al,0x0
c001e2da:	5d                   	pop    ebp
c001e2db:	c3                   	ret    

c001e2dc <IOAPIC::read(int)>:
c001e2dc:	55                   	push   ebp
c001e2dd:	89 e5                	mov    ebp,esp
c001e2df:	83 ec 10             	sub    esp,0x10
c001e2e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e2eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e2ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e2f1:	0f b6 d0             	movzx  edx,al
c001e2f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2f7:	89 10                	mov    DWORD PTR [eax],edx
c001e2f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2fc:	83 c0 10             	add    eax,0x10
c001e2ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001e301:	c9                   	leave  
c001e302:	c3                   	ret    
c001e303:	90                   	nop

c001e304 <IOAPIC::open(int, int, void*)>:
c001e304:	55                   	push   ebp
c001e305:	89 e5                	mov    ebp,esp
c001e307:	57                   	push   edi
c001e308:	56                   	push   esi
c001e309:	53                   	push   ebx
c001e30a:	83 ec 0c             	sub    esp,0xc
c001e30d:	83 ec 0c             	sub    esp,0xc
c001e310:	68 6b 35 02 c0       	push   0xc002356b
c001e315:	e8 f3 0d ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001e31a:	83 c4 10             	add    esp,0x10
c001e31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e320:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e323:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e32c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e332:	8b 14 85 40 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb3c0]
c001e339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e33c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e345:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e34b:	8b 14 85 c0 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb340]
c001e352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e355:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e35e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e367:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e36d:	0f b6 f8             	movzx  edi,al
c001e370:	89 d0                	mov    eax,edx
c001e372:	ba 00 00 00 00       	mov    edx,0x0
c001e377:	89 c1                	mov    ecx,eax
c001e379:	80 e5 ff             	and    ch,0xff
c001e37c:	89 cb                	mov    ebx,ecx
c001e37e:	0f b6 f2             	movzx  esi,dl
c001e381:	89 d8                	mov    eax,ebx
c001e383:	89 f2                	mov    edx,esi
c001e385:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e388:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e38b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e38f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e393:	83 e0 00             	and    eax,0x0
c001e396:	09 d0                	or     eax,edx
c001e398:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e39f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3a5:	8d 50 01             	lea    edx,[eax+0x1]
c001e3a8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e3ab:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e3b1:	0f b6 d0             	movzx  edx,al
c001e3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3b7:	83 c2 08             	add    edx,0x8
c001e3ba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e3be:	0f b6 c9             	movzx  ecx,cl
c001e3c1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e3c7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e3cb:	83 ec 08             	sub    esp,0x8
c001e3ce:	6a 01                	push   0x1
c001e3d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d3:	e8 04 ff ff ff       	call   c001e2dc <IOAPIC::read(int)>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	c1 f8 10             	sar    eax,0x10
c001e3de:	0f b6 c0             	movzx  eax,al
c001e3e1:	8d 50 01             	lea    edx,[eax+0x1]
c001e3e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3e7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e3ed:	b8 00 00 00 00       	mov    eax,0x0
c001e3f2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e3f5:	5b                   	pop    ebx
c001e3f6:	5e                   	pop    esi
c001e3f7:	5f                   	pop    edi
c001e3f8:	5d                   	pop    ebp
c001e3f9:	c3                   	ret    

c001e3fa <IOAPIC::write(int, int)>:
c001e3fa:	55                   	push   ebp
c001e3fb:	89 e5                	mov    ebp,esp
c001e3fd:	83 ec 10             	sub    esp,0x10
c001e400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e403:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e409:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e40c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e40f:	0f b6 d0             	movzx  edx,al
c001e412:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e415:	89 10                	mov    DWORD PTR [eax],edx
c001e417:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e41a:	8d 50 10             	lea    edx,[eax+0x10]
c001e41d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e420:	89 02                	mov    DWORD PTR [edx],eax
c001e422:	90                   	nop
c001e423:	c9                   	leave  
c001e424:	c3                   	ret    
c001e425:	90                   	nop

c001e426 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e426:	55                   	push   ebp
c001e427:	89 e5                	mov    ebp,esp
c001e429:	83 ec 20             	sub    esp,0x20
c001e42c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e42f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e432:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e435:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e438:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e43b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e43e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e441:	88 d0                	mov    al,dl
c001e443:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e446:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e44a:	83 c0 08             	add    eax,0x8
c001e44d:	01 c0                	add    eax,eax
c001e44f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e452:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e456:	83 c0 08             	add    eax,0x8
c001e459:	01 c0                	add    eax,eax
c001e45b:	40                   	inc    eax
c001e45c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e45f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e462:	50                   	push   eax
c001e463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e466:	e8 71 fe ff ff       	call   c001e2dc <IOAPIC::read(int)>
c001e46b:	83 c4 08             	add    esp,0x8
c001e46e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e471:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e478:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e47b:	c1 e0 18             	shl    eax,0x18
c001e47e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e481:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e484:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e487:	52                   	push   edx
c001e488:	50                   	push   eax
c001e489:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e48c:	e8 69 ff ff ff       	call   c001e3fa <IOAPIC::write(int, int)>
c001e491:	83 c4 0c             	add    esp,0xc
c001e494:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e497:	50                   	push   eax
c001e498:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e49b:	e8 3c fe ff ff       	call   c001e2dc <IOAPIC::read(int)>
c001e4a0:	83 c4 08             	add    esp,0x8
c001e4a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4a6:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e4ad:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e4b4:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e4bb:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e4c2:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001e4c6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e4c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e4cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4cf:	52                   	push   edx
c001e4d0:	50                   	push   eax
c001e4d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4d4:	e8 21 ff ff ff       	call   c001e3fa <IOAPIC::write(int, int)>
c001e4d9:	83 c4 0c             	add    esp,0xc
c001e4dc:	90                   	nop
c001e4dd:	c9                   	leave  
c001e4de:	c3                   	ret    
c001e4df:	90                   	nop

c001e4e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e4e0:	55                   	push   ebp
c001e4e1:	89 e5                	mov    ebp,esp
c001e4e3:	56                   	push   esi
c001e4e4:	53                   	push   ebx
c001e4e5:	83 ec 20             	sub    esp,0x20
c001e4e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e4eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e4ee:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e4f2:	74 28                	je     c001e51c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e4f4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e4f8:	7f 12                	jg     c001e50c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001e4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4fd:	05 c0 3a 02 c0       	add    eax,0xc0023ac0
c001e502:	8a 00                	mov    al,BYTE PTR [eax]
c001e504:	0f b6 c0             	movzx  eax,al
c001e507:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e50a:	eb 10                	jmp    c001e51c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	68 7c 35 02 c0       	push   0xc002357c
c001e514:	e8 bf 73 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e520:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c001e525:	83 ec 08             	sub    esp,0x8
c001e528:	50                   	push   eax
c001e529:	68 b4 35 02 c0       	push   0xc00235b4
c001e52e:	e8 da 0b ff ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001e533:	83 c4 10             	add    esp,0x10
c001e536:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e53d:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c001e542:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e545:	7d 58                	jge    c001e59f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e547:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e54a:	8b 04 85 40 61 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ec0]
c001e551:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e554:	83 ec 08             	sub    esp,0x8
c001e557:	52                   	push   edx
c001e558:	50                   	push   eax
c001e559:	e8 4c fd ff ff       	call   c001e2aa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e55e:	83 c4 10             	add    esp,0x10
c001e561:	84 c0                	test   al,al
c001e563:	74 35                	je     c001e59a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001e565:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e568:	8b 1c 85 40 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9ec0]
c001e56f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e572:	83 c0 20             	add    eax,0x20
c001e575:	0f b6 f0             	movzx  esi,al
c001e578:	e8 d6 61 ff ff       	call   c0014753 <getCPUNumber()>
c001e57d:	99                   	cdq    
c001e57e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e581:	0f b6 c9             	movzx  ecx,cl
c001e584:	83 ec 0c             	sub    esp,0xc
c001e587:	56                   	push   esi
c001e588:	52                   	push   edx
c001e589:	50                   	push   eax
c001e58a:	51                   	push   ecx
c001e58b:	53                   	push   ebx
c001e58c:	e8 95 fe ff ff       	call   c001e426 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e591:	83 c4 20             	add    esp,0x20
c001e594:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e598:	eb 05                	jmp    c001e59f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e59a:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e59d:	eb 9e                	jmp    c001e53d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001e59f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5a2:	83 f0 01             	xor    eax,0x1
c001e5a5:	84 c0                	test   al,al
c001e5a7:	74 10                	je     c001e5b9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001e5a9:	83 ec 0c             	sub    esp,0xc
c001e5ac:	68 cb 35 02 c0       	push   0xc00235cb
c001e5b1:	e8 22 73 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001e5b6:	83 c4 10             	add    esp,0x10
c001e5b9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e5bd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e5c4:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e5c8:	7f 65                	jg     c001e62f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001e5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5d0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e5d7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5da:	01 ca                	add    edx,ecx
c001e5dc:	83 c2 54             	add    edx,0x54
c001e5df:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e5e3:	85 c0                	test   eax,eax
c001e5e5:	75 43                	jne    c001e62a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001e5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5ed:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e5f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5f7:	01 ca                	add    edx,ecx
c001e5f9:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e5fc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e5ff:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e606:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e609:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e610:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e613:	01 ca                	add    edx,ecx
c001e615:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e61b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e61e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e622:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e625:	83 e8 20             	sub    eax,0x20
c001e628:	eb 1a                	jmp    c001e644 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001e62a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e62d:	eb 95                	jmp    c001e5c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001e62f:	83 ec 0c             	sub    esp,0xc
c001e632:	68 d8 35 02 c0       	push   0xc00235d8
c001e637:	e8 9c 72 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001e63c:	83 c4 10             	add    esp,0x10
c001e63f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e644:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e647:	5b                   	pop    ebx
c001e648:	5e                   	pop    esi
c001e649:	5d                   	pop    ebp
c001e64a:	c3                   	ret    
c001e64b:	90                   	nop

c001e64c <PIC::disable()>:
c001e64c:	55                   	push   ebp
c001e64d:	89 e5                	mov    ebp,esp
c001e64f:	83 ec 10             	sub    esp,0x10
c001e652:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e658:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e65c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e65f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e663:	ee                   	out    dx,al
c001e664:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e66a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e66e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e671:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e675:	ee                   	out    dx,al
c001e676:	90                   	nop
c001e677:	c9                   	leave  
c001e678:	c3                   	ret    
c001e679:	90                   	nop

c001e67a <PIC::close(int, int, void*)>:
c001e67a:	55                   	push   ebp
c001e67b:	89 e5                	mov    ebp,esp
c001e67d:	83 ec 08             	sub    esp,0x8
c001e680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e683:	8b 00                	mov    eax,DWORD PTR [eax]
c001e685:	83 c0 3c             	add    eax,0x3c
c001e688:	8b 00                	mov    eax,DWORD PTR [eax]
c001e68a:	83 ec 0c             	sub    esp,0xc
c001e68d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e690:	ff d0                	call   eax
c001e692:	83 c4 10             	add    esp,0x10
c001e695:	b8 00 00 00 00       	mov    eax,0x0
c001e69a:	c9                   	leave  
c001e69b:	c3                   	ret    

c001e69c <PIC::PIC()>:
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a3:	83 ec 08             	sub    esp,0x8
c001e6a6:	68 84 36 02 c0       	push   0xc0023684
c001e6ab:	50                   	push   eax
c001e6ac:	e8 a5 27 ff ff       	call   c0010e56 <InterruptController::InterruptController(char const*)>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c001e6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6bd:	89 10                	mov    DWORD PTR [eax],edx
c001e6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6c9:	0f b6 d0             	movzx  edx,al
c001e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6e1:	0f b6 d0             	movzx  edx,al
c001e6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6f7:	8d 50 01             	lea    edx,[eax+0x1]
c001e6fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e704:	0f b6 d0             	movzx  edx,al
c001e707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e70f:	83 e1 3f             	and    ecx,0x3f
c001e712:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e71a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e720:	0f b6 d0             	movzx  edx,al
c001e723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e727:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e732:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e738:	0f b6 d0             	movzx  edx,al
c001e73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e748:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e74e:	8d 50 01             	lea    edx,[eax+0x1]
c001e751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e755:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e75b:	0f b6 d0             	movzx  edx,al
c001e75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e762:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e766:	83 e1 3f             	and    ecx,0x3f
c001e769:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e76d:	90                   	nop
c001e76e:	83 c4 0c             	add    esp,0xc
c001e771:	c3                   	ret    

c001e772 <PIC::ioWait()>:
c001e772:	eb 00                	jmp    c001e774 <PIC::ioWait()+0x2>
c001e774:	eb 00                	jmp    c001e776 <PIC::ioWait()+0x4>
c001e776:	90                   	nop
c001e777:	c3                   	ret    

c001e778 <PIC::getIRQReg(int)>:
c001e778:	55                   	push   ebp
c001e779:	89 e5                	mov    ebp,esp
c001e77b:	83 ec 10             	sub    esp,0x10
c001e77e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e781:	0f b6 c0             	movzx  eax,al
c001e784:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e78a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e78d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e790:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e794:	ee                   	out    dx,al
c001e795:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e798:	0f b6 c0             	movzx  eax,al
c001e79b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e7a1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e7a4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e7a7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e7ab:	ee                   	out    dx,al
c001e7ac:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e7b2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e7b6:	89 c2                	mov    edx,eax
c001e7b8:	ec                   	in     al,dx
c001e7b9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e7bc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e7bf:	0f b6 c0             	movzx  eax,al
c001e7c2:	c1 e0 08             	shl    eax,0x8
c001e7c5:	89 c1                	mov    ecx,eax
c001e7c7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e7cd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e7d1:	89 c2                	mov    edx,eax
c001e7d3:	ec                   	in     al,dx
c001e7d4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e7d7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e7da:	0f b6 c0             	movzx  eax,al
c001e7dd:	09 c8                	or     eax,ecx
c001e7df:	c9                   	leave  
c001e7e0:	c3                   	ret    
c001e7e1:	90                   	nop

c001e7e2 <PIC::eoi(unsigned char)>:
c001e7e2:	55                   	push   ebp
c001e7e3:	89 e5                	mov    ebp,esp
c001e7e5:	83 ec 14             	sub    esp,0x14
c001e7e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7eb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e7ee:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e7f2:	75 1e                	jne    c001e812 <PIC::eoi(unsigned char)+0x30>
c001e7f4:	6a 0b                	push   0xb
c001e7f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7f9:	e8 7a ff ff ff       	call   c001e778 <PIC::getIRQReg(int)>
c001e7fe:	83 c4 08             	add    esp,0x8
c001e801:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e805:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001e809:	25 80 00 00 00       	and    eax,0x80
c001e80e:	85 c0                	test   eax,eax
c001e810:	74 5f                	je     c001e871 <PIC::eoi(unsigned char)+0x8f>
c001e812:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e816:	75 2d                	jne    c001e845 <PIC::eoi(unsigned char)+0x63>
c001e818:	6a 0b                	push   0xb
c001e81a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e81d:	e8 56 ff ff ff       	call   c001e778 <PIC::getIRQReg(int)>
c001e822:	83 c4 08             	add    esp,0x8
c001e825:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e829:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e82c:	66 85 c0             	test   ax,ax
c001e82f:	78 14                	js     c001e845 <PIC::eoi(unsigned char)+0x63>
c001e831:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e837:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e83b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e83e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e842:	ee                   	out    dx,al
c001e843:	eb 2d                	jmp    c001e872 <PIC::eoi(unsigned char)+0x90>
c001e845:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e849:	76 12                	jbe    c001e85d <PIC::eoi(unsigned char)+0x7b>
c001e84b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e851:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e855:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e858:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e85c:	ee                   	out    dx,al
c001e85d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e863:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e867:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e86a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e86e:	ee                   	out    dx,al
c001e86f:	eb 01                	jmp    c001e872 <PIC::eoi(unsigned char)+0x90>
c001e871:	90                   	nop
c001e872:	c9                   	leave  
c001e873:	c3                   	ret    

c001e874 <PIC::remap()>:
c001e874:	55                   	push   ebp
c001e875:	89 e5                	mov    ebp,esp
c001e877:	83 ec 48             	sub    esp,0x48
c001e87a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e881:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e888:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e88e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e891:	89 c2                	mov    edx,eax
c001e893:	ec                   	in     al,dx
c001e894:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e897:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e89a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e89d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e8a3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e8a6:	89 c2                	mov    edx,eax
c001e8a8:	ec                   	in     al,dx
c001e8a9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e8ac:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e8af:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e8b2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e8b8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e8bc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e8bf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e8c2:	ee                   	out    dx,al
c001e8c3:	83 ec 0c             	sub    esp,0xc
c001e8c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8c9:	e8 a4 fe ff ff       	call   c001e772 <PIC::ioWait()>
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e8d7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e8db:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e8de:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e8e1:	ee                   	out    dx,al
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8e8:	e8 85 fe ff ff       	call   c001e772 <PIC::ioWait()>
c001e8ed:	83 c4 10             	add    esp,0x10
c001e8f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e8f3:	0f b6 c0             	movzx  eax,al
c001e8f6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e8fc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e8ff:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e902:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e905:	ee                   	out    dx,al
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e90c:	e8 61 fe ff ff       	call   c001e772 <PIC::ioWait()>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e917:	0f b6 c0             	movzx  eax,al
c001e91a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e920:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e923:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e926:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e929:	ee                   	out    dx,al
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e930:	e8 3d fe ff ff       	call   c001e772 <PIC::ioWait()>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e93e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e942:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e945:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e948:	ee                   	out    dx,al
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e94f:	e8 1e fe ff ff       	call   c001e772 <PIC::ioWait()>
c001e954:	83 c4 10             	add    esp,0x10
c001e957:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e95d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e961:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e964:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e967:	ee                   	out    dx,al
c001e968:	83 ec 0c             	sub    esp,0xc
c001e96b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e96e:	e8 ff fd ff ff       	call   c001e772 <PIC::ioWait()>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e97c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e980:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e983:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e986:	ee                   	out    dx,al
c001e987:	83 ec 0c             	sub    esp,0xc
c001e98a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e98d:	e8 e0 fd ff ff       	call   c001e772 <PIC::ioWait()>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e99b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e99f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e9a2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e9a5:	ee                   	out    dx,al
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9ac:	e8 c1 fd ff ff       	call   c001e772 <PIC::ioWait()>
c001e9b1:	83 c4 10             	add    esp,0x10
c001e9b4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001e9b8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e9be:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e9c1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e9c4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e9c7:	ee                   	out    dx,al
c001e9c8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001e9cc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e9d2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e9d5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e9d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9db:	ee                   	out    dx,al
c001e9dc:	90                   	nop
c001e9dd:	c9                   	leave  
c001e9de:	c3                   	ret    
c001e9df:	90                   	nop

c001e9e0 <PIC::open(int, int, void*)>:
c001e9e0:	55                   	push   ebp
c001e9e1:	89 e5                	mov    ebp,esp
c001e9e3:	83 ec 18             	sub    esp,0x18
c001e9e6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e9ec:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e9f0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e9f3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e9f7:	ee                   	out    dx,al
c001e9f8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e9fe:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ea02:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea05:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea09:	ee                   	out    dx,al
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea10:	e8 5f fe ff ff       	call   c001e874 <PIC::remap()>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	b8 00 00 00 00       	mov    eax,0x0
c001ea1d:	c9                   	leave  
c001ea1e:	c3                   	ret    
c001ea1f:	90                   	nop

c001ea20 <APICTimer::close(int, int, void*)>:
c001ea20:	b8 00 00 00 00       	mov    eax,0x0
c001ea25:	c3                   	ret    

c001ea26 <apicTimerHandler(regs*, void*)>:
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2f:	99                   	cdq    
c001ea30:	52                   	push   edx
c001ea31:	50                   	push   eax
c001ea32:	6a 00                	push   0x0
c001ea34:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ea39:	e8 6e 07 00 00       	call   c001f1ac <__udivdi3>
c001ea3e:	83 c4 10             	add    esp,0x10
c001ea41:	83 ec 08             	sub    esp,0x8
c001ea44:	52                   	push   edx
c001ea45:	50                   	push   eax
c001ea46:	e8 24 42 ff ff       	call   c0012c6f <timerHandler(unsigned long long)>
c001ea4b:	83 c4 10             	add    esp,0x10
c001ea4e:	90                   	nop
c001ea4f:	83 c4 0c             	add    esp,0xc
c001ea52:	c3                   	ret    
c001ea53:	90                   	nop

c001ea54 <APICTimer::write(int)>:
c001ea54:	53                   	push   ebx
c001ea55:	83 ec 28             	sub    esp,0x28
c001ea58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ea60:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea66:	e8 eb 5c ff ff       	call   c0014756 <thisCPU()>
c001ea6b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	50                   	push   eax
c001ea75:	e8 0e f6 ff ff       	call   c001e088 <APIC::getBase()>
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea81:	a1 d0 49 02 c0       	mov    eax,ds:0xc00249d0
c001ea86:	8b 15 d4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249d4
c001ea8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ea90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ea94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea98:	05 e0 03 00 00       	add    eax,0x3e0
c001ea9d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eaa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaa7:	05 80 03 00 00       	add    eax,0x380
c001eaac:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001eab2:	fb                   	sti    
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001eac0:	83 d2 00             	adc    edx,0x0
c001eac3:	89 c1                	mov    ecx,eax
c001eac5:	89 d3                	mov    ebx,edx
c001eac7:	a1 d0 49 02 c0       	mov    eax,ds:0xc00249d0
c001eacc:	8b 15 d4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249d4
c001ead2:	39 c8                	cmp    eax,ecx
c001ead4:	89 d0                	mov    eax,edx
c001ead6:	19 d8                	sbb    eax,ebx
c001ead8:	73 02                	jae    c001eadc <APICTimer::write(int)+0x88>
c001eada:	eb d7                	jmp    c001eab3 <APICTimer::write(int)+0x5f>
c001eadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eae0:	05 20 03 00 00       	add    eax,0x320
c001eae5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001eaeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaef:	05 90 03 00 00       	add    eax,0x390
c001eaf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf6:	f7 d0                	not    eax
c001eaf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eafc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb04:	ba 00 00 00 00       	mov    edx,0x0
c001eb09:	f7 f3                	div    ebx
c001eb0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb19:	0d 00 00 02 00       	or     eax,0x20000
c001eb1e:	89 c2                	mov    edx,eax
c001eb20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb24:	05 20 03 00 00       	add    eax,0x320
c001eb29:	89 10                	mov    DWORD PTR [eax],edx
c001eb2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb2f:	05 e0 03 00 00       	add    eax,0x3e0
c001eb34:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eb3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb3e:	05 80 03 00 00       	add    eax,0x380
c001eb43:	89 c2                	mov    edx,eax
c001eb45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb49:	89 02                	mov    DWORD PTR [edx],eax
c001eb4b:	90                   	nop
c001eb4c:	83 c4 28             	add    esp,0x28
c001eb4f:	5b                   	pop    ebx
c001eb50:	c3                   	ret    
c001eb51:	90                   	nop

c001eb52 <APICTimer::open(int, int, void*)>:
c001eb52:	57                   	push   edi
c001eb53:	56                   	push   esi
c001eb54:	53                   	push   ebx
c001eb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb59:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb5b:	83 c0 24             	add    eax,0x24
c001eb5e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb60:	83 ec 08             	sub    esp,0x8
c001eb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb6b:	ff d0                	call   eax
c001eb6d:	83 c4 10             	add    esp,0x10
c001eb70:	e8 e1 5b ff ff       	call   c0014756 <thisCPU()>
c001eb75:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eb7b:	83 ec 0c             	sub    esp,0xc
c001eb7e:	50                   	push   eax
c001eb7f:	e8 04 f5 ff ff       	call   c001e088 <APIC::getBase()>
c001eb84:	83 c4 10             	add    esp,0x10
c001eb87:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb91:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb97:	0f b6 f8             	movzx  edi,al
c001eb9a:	89 d0                	mov    eax,edx
c001eb9c:	ba 00 00 00 00       	mov    edx,0x0
c001eba1:	89 c1                	mov    ecx,eax
c001eba3:	80 e5 ff             	and    ch,0xff
c001eba6:	89 cb                	mov    ebx,ecx
c001eba8:	0f b6 f2             	movzx  esi,dl
c001ebab:	89 d8                	mov    eax,ebx
c001ebad:	89 f2                	mov    edx,esi
c001ebaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebb3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ebb6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebbe:	83 e0 00             	and    eax,0x0
c001ebc1:	09 d0                	or     eax,edx
c001ebc3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebd1:	8d 50 01             	lea    edx,[eax+0x1]
c001ebd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebd8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ebde:	0f b6 d0             	movzx  edx,al
c001ebe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe5:	83 c2 08             	add    edx,0x8
c001ebe8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebec:	0f b6 c9             	movzx  ecx,cl
c001ebef:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ebf5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec01:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec0f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ec15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec19:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ec1f:	83 ec 0c             	sub    esp,0xc
c001ec22:	51                   	push   ecx
c001ec23:	6a 01                	push   0x1
c001ec25:	68 26 ea 01 c0       	push   0xc001ea26
c001ec2a:	52                   	push   edx
c001ec2b:	50                   	push   eax
c001ec2c:	e8 3b 18 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec31:	83 c4 20             	add    esp,0x20
c001ec34:	89 c2                	mov    edx,eax
c001ec36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec40:	b8 00 00 00 00       	mov    eax,0x0
c001ec45:	5b                   	pop    ebx
c001ec46:	5e                   	pop    esi
c001ec47:	5f                   	pop    edi
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <APICTimer::APICTimer()>:
c001ec4a:	83 ec 0c             	sub    esp,0xc
c001ec4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec51:	83 ec 08             	sub    esp,0x8
c001ec54:	68 f0 36 02 c0       	push   0xc00236f0
c001ec59:	50                   	push   eax
c001ec5a:	e8 81 3f ff ff       	call   c0012be0 <Timer::Timer(char const*)>
c001ec5f:	83 c4 10             	add    esp,0x10
c001ec62:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001ec67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6b:	89 10                	mov    DWORD PTR [eax],edx
c001ec6d:	90                   	nop
c001ec6e:	83 c4 0c             	add    esp,0xc
c001ec71:	c3                   	ret    

c001ec72 <PIT::write(int)>:
c001ec72:	83 ec 10             	sub    esp,0x10
c001ec75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec87:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c001ec8c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ec91:	99                   	cdq    
c001ec92:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ec96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec9a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eca1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eca6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ecaa:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ecaf:	ee                   	out    dx,al
c001ecb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecb4:	0f b6 c0             	movzx  eax,al
c001ecb7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ecbe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ecc2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ecc6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eccb:	ee                   	out    dx,al
c001eccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecd0:	c1 f8 08             	sar    eax,0x8
c001ecd3:	0f b6 c0             	movzx  eax,al
c001ecd6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ecdd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ece1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ece5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ecea:	ee                   	out    dx,al
c001eceb:	90                   	nop
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	c3                   	ret    

c001ecf0 <pitHandler(regs*, void*)>:
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001ecf8:	99                   	cdq    
c001ecf9:	52                   	push   edx
c001ecfa:	50                   	push   eax
c001ecfb:	6a 00                	push   0x0
c001ecfd:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed02:	e8 a5 04 00 00       	call   c001f1ac <__udivdi3>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	83 ec 08             	sub    esp,0x8
c001ed0d:	52                   	push   edx
c001ed0e:	50                   	push   eax
c001ed0f:	e8 5b 3f ff ff       	call   c0012c6f <timerHandler(unsigned long long)>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	90                   	nop
c001ed18:	83 c4 0c             	add    esp,0xc
c001ed1b:	c3                   	ret    

c001ed1c <PIT::open(int, int, void*)>:
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed25:	83 c0 24             	add    eax,0x24
c001ed28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed2a:	83 ec 08             	sub    esp,0x8
c001ed2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed35:	ff d0                	call   eax
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	6a 00                	push   0x0
c001ed43:	6a 01                	push   0x1
c001ed45:	68 f0 ec 01 c0       	push   0xc001ecf0
c001ed4a:	6a 00                	push   0x0
c001ed4c:	50                   	push   eax
c001ed4d:	e8 1a 17 ff ff       	call   c001046c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed52:	83 c4 20             	add    esp,0x20
c001ed55:	89 c2                	mov    edx,eax
c001ed57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed61:	b8 00 00 00 00       	mov    eax,0x0
c001ed66:	83 c4 0c             	add    esp,0xc
c001ed69:	c3                   	ret    

c001ed6a <PIT::close(int, int, void*)>:
c001ed6a:	83 ec 0c             	sub    esp,0xc
c001ed6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed71:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ed7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7f:	6a 01                	push   0x1
c001ed81:	68 f0 ec 01 c0       	push   0xc001ecf0
c001ed86:	6a 00                	push   0x0
c001ed88:	50                   	push   eax
c001ed89:	e8 3c 17 ff ff       	call   c00104ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	b8 00 00 00 00       	mov    eax,0x0
c001ed96:	83 c4 0c             	add    esp,0xc
c001ed99:	c3                   	ret    

c001ed9a <PIT::PIT()>:
c001ed9a:	83 ec 0c             	sub    esp,0xc
c001ed9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda1:	83 ec 08             	sub    esp,0x8
c001eda4:	68 2c 37 02 c0       	push   0xc002372c
c001eda9:	50                   	push   eax
c001edaa:	e8 31 3e ff ff       	call   c0012be0 <Timer::Timer(char const*)>
c001edaf:	83 c4 10             	add    esp,0x10
c001edb2:	ba 54 37 02 c0       	mov    edx,0xc0023754
c001edb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbb:	89 10                	mov    DWORD PTR [eax],edx
c001edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edc7:	0f b6 d0             	movzx  edx,al
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001edd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eddf:	0f b6 d0             	movzx  edx,al
c001ede2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edf5:	8d 50 01             	lea    edx,[eax+0x1]
c001edf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edfc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ee02:	0f b6 d0             	movzx  edx,al
c001ee05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee09:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ee0d:	83 e1 3f             	and    ecx,0x3f
c001ee10:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ee14:	90                   	nop
c001ee15:	83 c4 0c             	add    esp,0xc
c001ee18:	c3                   	ret    
c001ee19:	66 90                	xchg   ax,ax
c001ee1b:	66 90                	xchg   ax,ax
c001ee1d:	66 90                	xchg   ax,ax
c001ee1f:	90                   	nop

c001ee20 <avxDetect>:
c001ee20:	b8 00 00 00 00       	mov    eax,0x0
c001ee25:	c3                   	ret    

c001ee26 <avxSave>:
c001ee26:	c3                   	ret    

c001ee27 <avxLoad>:
c001ee27:	c3                   	ret    

c001ee28 <avxInit>:
c001ee28:	c3                   	ret    

c001ee29 <avxClose>:
c001ee29:	c3                   	ret    
c001ee2a:	66 90                	xchg   ax,ax
c001ee2c:	66 90                	xchg   ax,ax
c001ee2e:	66 90                	xchg   ax,ax

c001ee30 <sseDetect>:
c001ee30:	b8 01 00 00 00       	mov    eax,0x1
c001ee35:	0f a2                	cpuid  
c001ee37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee3d:	74 06                	je     c001ee45 <sseDetect.noSSE>
c001ee3f:	b8 01 00 00 00       	mov    eax,0x1
c001ee44:	c3                   	ret    

c001ee45 <sseDetect.noSSE>:
c001ee45:	b8 00 00 00 00       	mov    eax,0x0
c001ee4a:	c3                   	ret    

c001ee4b <sseSave>:
c001ee4b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001ee50:	c3                   	ret    

c001ee51 <sseLoad>:
c001ee51:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001ee56:	c3                   	ret    

c001ee57 <sseInit>:
c001ee57:	e8 40 00 00 00       	call   c001ee9c <x87Init>
c001ee5c:	0f 20 e0             	mov    eax,cr4
c001ee5f:	66 0d 00 06          	or     ax,0x600
c001ee63:	0f 22 e0             	mov    cr4,eax
c001ee66:	c3                   	ret    

c001ee67 <sseClose>:
c001ee67:	c3                   	ret    
c001ee68:	66 90                	xchg   ax,ax
c001ee6a:	66 90                	xchg   ax,ax
c001ee6c:	66 90                	xchg   ax,ax
c001ee6e:	66 90                	xchg   ax,ax

c001ee70 <value_37F>:
c001ee70:	7f 03                	jg     c001ee75 <value_37A+0x1>

c001ee72 <value_37E>:
c001ee72:	7e 03                	jle    c001ee77 <x87Detect+0x1>

c001ee74 <value_37A>:
c001ee74:	7a 03                	jp     c001ee79 <x87Detect+0x3>

c001ee76 <x87Detect>:
c001ee76:	b8 01 00 00 00       	mov    eax,0x1
c001ee7b:	0f a2                	cpuid  
c001ee7d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee83:	74 06                	je     c001ee8b <x87Detect.nox87>
c001ee85:	b8 01 00 00 00       	mov    eax,0x1
c001ee8a:	c3                   	ret    

c001ee8b <x87Detect.nox87>:
c001ee8b:	b8 00 00 00 00       	mov    eax,0x0
c001ee90:	c3                   	ret    

c001ee91 <x87Save>:
c001ee91:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ee96:	c3                   	ret    

c001ee97 <x87Load>:
c001ee97:	dd 64 24 08          	frstor [esp+0x8]
c001ee9b:	c3                   	ret    

c001ee9c <x87Init>:
c001ee9c:	9b db e3             	finit  
c001ee9f:	0f 20 c0             	mov    eax,cr0
c001eea2:	66 25 fb ff          	and    ax,0xfffb
c001eea6:	66 0d 22 00          	or     ax,0x22
c001eeaa:	0f 22 c0             	mov    cr0,eax
c001eead:	0f 06                	clts   
c001eeaf:	d9 2d 74 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee74
c001eeb5:	c3                   	ret    

c001eeb6 <x87Close>:
c001eeb6:	c3                   	ret    
c001eeb7:	90                   	nop

c001eeb8 <__do_global_ctors_aux>:
c001eeb8:	a1 98 ff 01 c0       	mov    eax,ds:0xc001ff98
c001eebd:	83 f8 ff             	cmp    eax,0xffffffff
c001eec0:	74 1a                	je     c001eedc <__do_global_ctors_aux+0x24>
c001eec2:	55                   	push   ebp
c001eec3:	89 e5                	mov    ebp,esp
c001eec5:	53                   	push   ebx
c001eec6:	52                   	push   edx
c001eec7:	bb 98 ff 01 c0       	mov    ebx,0xc001ff98
c001eecc:	ff d0                	call   eax
c001eece:	83 eb 04             	sub    ebx,0x4
c001eed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eed3:	83 f8 ff             	cmp    eax,0xffffffff
c001eed6:	75 f4                	jne    c001eecc <__do_global_ctors_aux+0x14>
c001eed8:	58                   	pop    eax
c001eed9:	5b                   	pop    ebx
c001eeda:	5d                   	pop    ebp
c001eedb:	c3                   	ret    
c001eedc:	c3                   	ret    
c001eedd:	66 90                	xchg   ax,ax
c001eedf:	90                   	nop

c001eee0 <__divdi3>:
c001eee0:	55                   	push   ebp
c001eee1:	57                   	push   edi
c001eee2:	56                   	push   esi
c001eee3:	53                   	push   ebx
c001eee4:	83 ec 1c             	sub    esp,0x1c
c001eee7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eeeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eeef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eef2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eef6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eefa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eefe:	85 db                	test   ebx,ebx
c001ef00:	0f 88 8e 00 00 00    	js     c001ef94 <__divdi3+0xb4>
c001ef06:	89 dd                	mov    ebp,ebx
c001ef08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef10:	89 d3                	mov    ebx,edx
c001ef12:	85 d2                	test   edx,edx
c001ef14:	79 0d                	jns    c001ef23 <__divdi3+0x43>
c001ef16:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef1a:	f7 d8                	neg    eax
c001ef1c:	83 d2 00             	adc    edx,0x0
c001ef1f:	f7 da                	neg    edx
c001ef21:	89 d3                	mov    ebx,edx
c001ef23:	89 c7                	mov    edi,eax
c001ef25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef28:	85 db                	test   ebx,ebx
c001ef2a:	75 48                	jne    c001ef74 <__divdi3+0x94>
c001ef2c:	39 ef                	cmp    edi,ebp
c001ef2e:	76 24                	jbe    c001ef54 <__divdi3+0x74>
c001ef30:	89 ea                	mov    edx,ebp
c001ef32:	f7 f7                	div    edi
c001ef34:	89 c1                	mov    ecx,eax
c001ef36:	31 f6                	xor    esi,esi
c001ef38:	89 c8                	mov    eax,ecx
c001ef3a:	89 f2                	mov    edx,esi
c001ef3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef40:	85 c9                	test   ecx,ecx
c001ef42:	74 07                	je     c001ef4b <__divdi3+0x6b>
c001ef44:	f7 d8                	neg    eax
c001ef46:	83 d2 00             	adc    edx,0x0
c001ef49:	f7 da                	neg    edx
c001ef4b:	83 c4 1c             	add    esp,0x1c
c001ef4e:	5b                   	pop    ebx
c001ef4f:	5e                   	pop    esi
c001ef50:	5f                   	pop    edi
c001ef51:	5d                   	pop    ebp
c001ef52:	c3                   	ret    
c001ef53:	90                   	nop
c001ef54:	85 ff                	test   edi,edi
c001ef56:	75 0b                	jne    c001ef63 <__divdi3+0x83>
c001ef58:	b8 01 00 00 00       	mov    eax,0x1
c001ef5d:	31 d2                	xor    edx,edx
c001ef5f:	f7 f3                	div    ebx
c001ef61:	89 c7                	mov    edi,eax
c001ef63:	31 d2                	xor    edx,edx
c001ef65:	89 e8                	mov    eax,ebp
c001ef67:	f7 f7                	div    edi
c001ef69:	89 c6                	mov    esi,eax
c001ef6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef6e:	f7 f7                	div    edi
c001ef70:	89 c1                	mov    ecx,eax
c001ef72:	eb c4                	jmp    c001ef38 <__divdi3+0x58>
c001ef74:	39 eb                	cmp    ebx,ebp
c001ef76:	77 3c                	ja     c001efb4 <__divdi3+0xd4>
c001ef78:	0f bd f3             	bsr    esi,ebx
c001ef7b:	83 f6 1f             	xor    esi,0x1f
c001ef7e:	75 40                	jne    c001efc0 <__divdi3+0xe0>
c001ef80:	39 eb                	cmp    ebx,ebp
c001ef82:	72 09                	jb     c001ef8d <__divdi3+0xad>
c001ef84:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef87:	0f 87 97 00 00 00    	ja     c001f024 <__divdi3+0x144>
c001ef8d:	b9 01 00 00 00       	mov    ecx,0x1
c001ef92:	eb a4                	jmp    c001ef38 <__divdi3+0x58>
c001ef94:	f7 d9                	neg    ecx
c001ef96:	83 d3 00             	adc    ebx,0x0
c001ef99:	f7 db                	neg    ebx
c001ef9b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef9e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efa2:	89 dd                	mov    ebp,ebx
c001efa4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001efac:	e9 5f ff ff ff       	jmp    c001ef10 <__divdi3+0x30>
c001efb1:	8d 76 00             	lea    esi,[esi+0x0]
c001efb4:	31 f6                	xor    esi,esi
c001efb6:	31 c9                	xor    ecx,ecx
c001efb8:	e9 7b ff ff ff       	jmp    c001ef38 <__divdi3+0x58>
c001efbd:	8d 76 00             	lea    esi,[esi+0x0]
c001efc0:	b8 20 00 00 00       	mov    eax,0x20
c001efc5:	29 f0                	sub    eax,esi
c001efc7:	89 f1                	mov    ecx,esi
c001efc9:	d3 e3                	shl    ebx,cl
c001efcb:	89 fa                	mov    edx,edi
c001efcd:	88 c1                	mov    cl,al
c001efcf:	d3 ea                	shr    edx,cl
c001efd1:	09 da                	or     edx,ebx
c001efd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efd7:	89 f1                	mov    ecx,esi
c001efd9:	d3 e7                	shl    edi,cl
c001efdb:	89 eb                	mov    ebx,ebp
c001efdd:	88 c1                	mov    cl,al
c001efdf:	d3 eb                	shr    ebx,cl
c001efe1:	89 f1                	mov    ecx,esi
c001efe3:	d3 e5                	shl    ebp,cl
c001efe5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efe8:	88 c1                	mov    cl,al
c001efea:	d3 ea                	shr    edx,cl
c001efec:	09 d5                	or     ebp,edx
c001efee:	89 e8                	mov    eax,ebp
c001eff0:	89 da                	mov    edx,ebx
c001eff2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001eff6:	89 d3                	mov    ebx,edx
c001eff8:	89 c5                	mov    ebp,eax
c001effa:	f7 e7                	mul    edi
c001effc:	39 d3                	cmp    ebx,edx
c001effe:	72 18                	jb     c001f018 <__divdi3+0x138>
c001f000:	74 0a                	je     c001f00c <__divdi3+0x12c>
c001f002:	89 e9                	mov    ecx,ebp
c001f004:	31 f6                	xor    esi,esi
c001f006:	e9 2d ff ff ff       	jmp    c001ef38 <__divdi3+0x58>
c001f00b:	90                   	nop
c001f00c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f00f:	89 f1                	mov    ecx,esi
c001f011:	d3 e7                	shl    edi,cl
c001f013:	39 c7                	cmp    edi,eax
c001f015:	73 eb                	jae    c001f002 <__divdi3+0x122>
c001f017:	90                   	nop
c001f018:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f01b:	31 f6                	xor    esi,esi
c001f01d:	e9 16 ff ff ff       	jmp    c001ef38 <__divdi3+0x58>
c001f022:	66 90                	xchg   ax,ax
c001f024:	31 c9                	xor    ecx,ecx
c001f026:	e9 0d ff ff ff       	jmp    c001ef38 <__divdi3+0x58>
c001f02b:	90                   	nop

c001f02c <__moddi3>:
c001f02c:	55                   	push   ebp
c001f02d:	57                   	push   edi
c001f02e:	56                   	push   esi
c001f02f:	53                   	push   ebx
c001f030:	83 ec 2c             	sub    esp,0x2c
c001f033:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f037:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f03b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f03f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f043:	85 db                	test   ebx,ebx
c001f045:	0f 88 85 00 00 00    	js     c001f0d0 <__moddi3+0xa4>
c001f04b:	89 de                	mov    esi,ebx
c001f04d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f055:	89 d7                	mov    edi,edx
c001f057:	85 d2                	test   edx,edx
c001f059:	79 09                	jns    c001f064 <__moddi3+0x38>
c001f05b:	f7 d8                	neg    eax
c001f05d:	83 d2 00             	adc    edx,0x0
c001f060:	f7 da                	neg    edx
c001f062:	89 d7                	mov    edi,edx
c001f064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f068:	89 cd                	mov    ebp,ecx
c001f06a:	85 ff                	test   edi,edi
c001f06c:	75 52                	jne    c001f0c0 <__moddi3+0x94>
c001f06e:	89 c3                	mov    ebx,eax
c001f070:	39 f0                	cmp    eax,esi
c001f072:	76 24                	jbe    c001f098 <__moddi3+0x6c>
c001f074:	89 c8                	mov    eax,ecx
c001f076:	89 f2                	mov    edx,esi
c001f078:	f7 f3                	div    ebx
c001f07a:	89 d6                	mov    esi,edx
c001f07c:	89 f0                	mov    eax,esi
c001f07e:	31 d2                	xor    edx,edx
c001f080:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f084:	85 c9                	test   ecx,ecx
c001f086:	74 07                	je     c001f08f <__moddi3+0x63>
c001f088:	f7 d8                	neg    eax
c001f08a:	83 d2 00             	adc    edx,0x0
c001f08d:	f7 da                	neg    edx
c001f08f:	83 c4 2c             	add    esp,0x2c
c001f092:	5b                   	pop    ebx
c001f093:	5e                   	pop    esi
c001f094:	5f                   	pop    edi
c001f095:	5d                   	pop    ebp
c001f096:	c3                   	ret    
c001f097:	90                   	nop
c001f098:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f09c:	85 db                	test   ebx,ebx
c001f09e:	75 0d                	jne    c001f0ad <__moddi3+0x81>
c001f0a0:	b8 01 00 00 00       	mov    eax,0x1
c001f0a5:	31 d2                	xor    edx,edx
c001f0a7:	f7 f7                	div    edi
c001f0a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0ad:	89 f0                	mov    eax,esi
c001f0af:	31 d2                	xor    edx,edx
c001f0b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0b5:	f7 f7                	div    edi
c001f0b7:	89 e8                	mov    eax,ebp
c001f0b9:	f7 f7                	div    edi
c001f0bb:	89 d6                	mov    esi,edx
c001f0bd:	eb bd                	jmp    c001f07c <__moddi3+0x50>
c001f0bf:	90                   	nop
c001f0c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0c4:	39 f7                	cmp    edi,esi
c001f0c6:	76 20                	jbe    c001f0e8 <__moddi3+0xbc>
c001f0c8:	89 c8                	mov    eax,ecx
c001f0ca:	89 f2                	mov    edx,esi
c001f0cc:	eb b2                	jmp    c001f080 <__moddi3+0x54>
c001f0ce:	66 90                	xchg   ax,ax
c001f0d0:	f7 d9                	neg    ecx
c001f0d2:	83 d3 00             	adc    ebx,0x0
c001f0d5:	f7 db                	neg    ebx
c001f0d7:	89 de                	mov    esi,ebx
c001f0d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0e1:	e9 6f ff ff ff       	jmp    c001f055 <__moddi3+0x29>
c001f0e6:	66 90                	xchg   ax,ax
c001f0e8:	0f bd c7             	bsr    eax,edi
c001f0eb:	83 f0 1f             	xor    eax,0x1f
c001f0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0f2:	75 24                	jne    c001f118 <__moddi3+0xec>
c001f0f4:	39 f7                	cmp    edi,esi
c001f0f6:	72 06                	jb     c001f0fe <__moddi3+0xd2>
c001f0f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0fc:	77 0c                	ja     c001f10a <__moddi3+0xde>
c001f0fe:	89 e9                	mov    ecx,ebp
c001f100:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f104:	19 fe                	sbb    esi,edi
c001f106:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f10a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f10e:	89 f2                	mov    edx,esi
c001f110:	e9 6b ff ff ff       	jmp    c001f080 <__moddi3+0x54>
c001f115:	8d 76 00             	lea    esi,[esi+0x0]
c001f118:	b8 20 00 00 00       	mov    eax,0x20
c001f11d:	89 c2                	mov    edx,eax
c001f11f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f123:	29 da                	sub    edx,ebx
c001f125:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f129:	88 d9                	mov    cl,bl
c001f12b:	d3 e7                	shl    edi,cl
c001f12d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f131:	88 d1                	mov    cl,dl
c001f133:	d3 e8                	shr    eax,cl
c001f135:	09 c7                	or     edi,eax
c001f137:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f13b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f13f:	89 d8                	mov    eax,ebx
c001f141:	88 d9                	mov    cl,bl
c001f143:	d3 e7                	shl    edi,cl
c001f145:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f149:	89 f3                	mov    ebx,esi
c001f14b:	88 d1                	mov    cl,dl
c001f14d:	d3 eb                	shr    ebx,cl
c001f14f:	89 c7                	mov    edi,eax
c001f151:	88 c1                	mov    cl,al
c001f153:	d3 e6                	shl    esi,cl
c001f155:	89 e8                	mov    eax,ebp
c001f157:	88 d1                	mov    cl,dl
c001f159:	d3 e8                	shr    eax,cl
c001f15b:	09 f0                	or     eax,esi
c001f15d:	89 f9                	mov    ecx,edi
c001f15f:	d3 e5                	shl    ebp,cl
c001f161:	89 da                	mov    edx,ebx
c001f163:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f167:	89 d3                	mov    ebx,edx
c001f169:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f16d:	89 c6                	mov    esi,eax
c001f16f:	89 d1                	mov    ecx,edx
c001f171:	39 d3                	cmp    ebx,edx
c001f173:	72 27                	jb     c001f19c <__moddi3+0x170>
c001f175:	74 21                	je     c001f198 <__moddi3+0x16c>
c001f177:	29 f5                	sub    ebp,esi
c001f179:	19 cb                	sbb    ebx,ecx
c001f17b:	89 de                	mov    esi,ebx
c001f17d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f181:	d3 e6                	shl    esi,cl
c001f183:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f187:	89 f9                	mov    ecx,edi
c001f189:	d3 ed                	shr    ebp,cl
c001f18b:	09 ee                	or     esi,ebp
c001f18d:	89 f0                	mov    eax,esi
c001f18f:	d3 eb                	shr    ebx,cl
c001f191:	89 da                	mov    edx,ebx
c001f193:	e9 e8 fe ff ff       	jmp    c001f080 <__moddi3+0x54>
c001f198:	39 c5                	cmp    ebp,eax
c001f19a:	73 db                	jae    c001f177 <__moddi3+0x14b>
c001f19c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f1a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f1a4:	89 d1                	mov    ecx,edx
c001f1a6:	89 c6                	mov    esi,eax
c001f1a8:	eb cd                	jmp    c001f177 <__moddi3+0x14b>
c001f1aa:	66 90                	xchg   ax,ax

c001f1ac <__udivdi3>:
c001f1ac:	55                   	push   ebp
c001f1ad:	57                   	push   edi
c001f1ae:	56                   	push   esi
c001f1af:	53                   	push   ebx
c001f1b0:	83 ec 1c             	sub    esp,0x1c
c001f1b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f1b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f1bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f1bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1c3:	85 d2                	test   edx,edx
c001f1c5:	75 41                	jne    c001f208 <__udivdi3+0x5c>
c001f1c7:	39 f7                	cmp    edi,esi
c001f1c9:	76 15                	jbe    c001f1e0 <__udivdi3+0x34>
c001f1cb:	89 e8                	mov    eax,ebp
c001f1cd:	89 f2                	mov    edx,esi
c001f1cf:	f7 f7                	div    edi
c001f1d1:	31 db                	xor    ebx,ebx
c001f1d3:	89 da                	mov    edx,ebx
c001f1d5:	83 c4 1c             	add    esp,0x1c
c001f1d8:	5b                   	pop    ebx
c001f1d9:	5e                   	pop    esi
c001f1da:	5f                   	pop    edi
c001f1db:	5d                   	pop    ebp
c001f1dc:	c3                   	ret    
c001f1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001f1e0:	89 f9                	mov    ecx,edi
c001f1e2:	85 ff                	test   edi,edi
c001f1e4:	75 0b                	jne    c001f1f1 <__udivdi3+0x45>
c001f1e6:	b8 01 00 00 00       	mov    eax,0x1
c001f1eb:	31 d2                	xor    edx,edx
c001f1ed:	f7 f7                	div    edi
c001f1ef:	89 c1                	mov    ecx,eax
c001f1f1:	31 d2                	xor    edx,edx
c001f1f3:	89 f0                	mov    eax,esi
c001f1f5:	f7 f1                	div    ecx
c001f1f7:	89 c3                	mov    ebx,eax
c001f1f9:	89 e8                	mov    eax,ebp
c001f1fb:	f7 f1                	div    ecx
c001f1fd:	89 da                	mov    edx,ebx
c001f1ff:	83 c4 1c             	add    esp,0x1c
c001f202:	5b                   	pop    ebx
c001f203:	5e                   	pop    esi
c001f204:	5f                   	pop    edi
c001f205:	5d                   	pop    ebp
c001f206:	c3                   	ret    
c001f207:	90                   	nop
c001f208:	39 f2                	cmp    edx,esi
c001f20a:	77 1c                	ja     c001f228 <__udivdi3+0x7c>
c001f20c:	0f bd da             	bsr    ebx,edx
c001f20f:	83 f3 1f             	xor    ebx,0x1f
c001f212:	75 24                	jne    c001f238 <__udivdi3+0x8c>
c001f214:	39 f2                	cmp    edx,esi
c001f216:	72 08                	jb     c001f220 <__udivdi3+0x74>
c001f218:	39 ef                	cmp    edi,ebp
c001f21a:	0f 87 84 00 00 00    	ja     c001f2a4 <__udivdi3+0xf8>
c001f220:	b8 01 00 00 00       	mov    eax,0x1
c001f225:	eb ac                	jmp    c001f1d3 <__udivdi3+0x27>
c001f227:	90                   	nop
c001f228:	31 db                	xor    ebx,ebx
c001f22a:	31 c0                	xor    eax,eax
c001f22c:	89 da                	mov    edx,ebx
c001f22e:	83 c4 1c             	add    esp,0x1c
c001f231:	5b                   	pop    ebx
c001f232:	5e                   	pop    esi
c001f233:	5f                   	pop    edi
c001f234:	5d                   	pop    ebp
c001f235:	c3                   	ret    
c001f236:	66 90                	xchg   ax,ax
c001f238:	b8 20 00 00 00       	mov    eax,0x20
c001f23d:	29 d8                	sub    eax,ebx
c001f23f:	88 d9                	mov    cl,bl
c001f241:	d3 e2                	shl    edx,cl
c001f243:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f247:	89 fa                	mov    edx,edi
c001f249:	88 c1                	mov    cl,al
c001f24b:	d3 ea                	shr    edx,cl
c001f24d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f251:	09 d1                	or     ecx,edx
c001f253:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f257:	88 d9                	mov    cl,bl
c001f259:	d3 e7                	shl    edi,cl
c001f25b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f25f:	89 f7                	mov    edi,esi
c001f261:	88 c1                	mov    cl,al
c001f263:	d3 ef                	shr    edi,cl
c001f265:	88 d9                	mov    cl,bl
c001f267:	d3 e6                	shl    esi,cl
c001f269:	89 ea                	mov    edx,ebp
c001f26b:	88 c1                	mov    cl,al
c001f26d:	d3 ea                	shr    edx,cl
c001f26f:	09 d6                	or     esi,edx
c001f271:	89 f0                	mov    eax,esi
c001f273:	89 fa                	mov    edx,edi
c001f275:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f279:	89 d7                	mov    edi,edx
c001f27b:	89 c6                	mov    esi,eax
c001f27d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f281:	39 d7                	cmp    edi,edx
c001f283:	72 13                	jb     c001f298 <__udivdi3+0xec>
c001f285:	74 09                	je     c001f290 <__udivdi3+0xe4>
c001f287:	89 f0                	mov    eax,esi
c001f289:	31 db                	xor    ebx,ebx
c001f28b:	e9 43 ff ff ff       	jmp    c001f1d3 <__udivdi3+0x27>
c001f290:	88 d9                	mov    cl,bl
c001f292:	d3 e5                	shl    ebp,cl
c001f294:	39 c5                	cmp    ebp,eax
c001f296:	73 ef                	jae    c001f287 <__udivdi3+0xdb>
c001f298:	8d 46 ff             	lea    eax,[esi-0x1]
c001f29b:	31 db                	xor    ebx,ebx
c001f29d:	e9 31 ff ff ff       	jmp    c001f1d3 <__udivdi3+0x27>
c001f2a2:	66 90                	xchg   ax,ax
c001f2a4:	31 c0                	xor    eax,eax
c001f2a6:	e9 28 ff ff ff       	jmp    c001f1d3 <__udivdi3+0x27>
c001f2ab:	90                   	nop

c001f2ac <__umoddi3>:
c001f2ac:	55                   	push   ebp
c001f2ad:	57                   	push   edi
c001f2ae:	56                   	push   esi
c001f2af:	53                   	push   ebx
c001f2b0:	83 ec 1c             	sub    esp,0x1c
c001f2b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2c3:	89 da                	mov    edx,ebx
c001f2c5:	85 c0                	test   eax,eax
c001f2c7:	75 37                	jne    c001f300 <__umoddi3+0x54>
c001f2c9:	39 df                	cmp    edi,ebx
c001f2cb:	76 13                	jbe    c001f2e0 <__umoddi3+0x34>
c001f2cd:	89 f0                	mov    eax,esi
c001f2cf:	f7 f7                	div    edi
c001f2d1:	89 d0                	mov    eax,edx
c001f2d3:	31 d2                	xor    edx,edx
c001f2d5:	83 c4 1c             	add    esp,0x1c
c001f2d8:	5b                   	pop    ebx
c001f2d9:	5e                   	pop    esi
c001f2da:	5f                   	pop    edi
c001f2db:	5d                   	pop    ebp
c001f2dc:	c3                   	ret    
c001f2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001f2e0:	89 fd                	mov    ebp,edi
c001f2e2:	85 ff                	test   edi,edi
c001f2e4:	75 0b                	jne    c001f2f1 <__umoddi3+0x45>
c001f2e6:	b8 01 00 00 00       	mov    eax,0x1
c001f2eb:	31 d2                	xor    edx,edx
c001f2ed:	f7 f7                	div    edi
c001f2ef:	89 c5                	mov    ebp,eax
c001f2f1:	89 d8                	mov    eax,ebx
c001f2f3:	31 d2                	xor    edx,edx
c001f2f5:	f7 f5                	div    ebp
c001f2f7:	89 f0                	mov    eax,esi
c001f2f9:	f7 f5                	div    ebp
c001f2fb:	89 d0                	mov    eax,edx
c001f2fd:	eb d4                	jmp    c001f2d3 <__umoddi3+0x27>
c001f2ff:	90                   	nop
c001f300:	89 f1                	mov    ecx,esi
c001f302:	39 d8                	cmp    eax,ebx
c001f304:	76 0a                	jbe    c001f310 <__umoddi3+0x64>
c001f306:	89 f0                	mov    eax,esi
c001f308:	83 c4 1c             	add    esp,0x1c
c001f30b:	5b                   	pop    ebx
c001f30c:	5e                   	pop    esi
c001f30d:	5f                   	pop    edi
c001f30e:	5d                   	pop    ebp
c001f30f:	c3                   	ret    
c001f310:	0f bd e8             	bsr    ebp,eax
c001f313:	83 f5 1f             	xor    ebp,0x1f
c001f316:	75 1c                	jne    c001f334 <__umoddi3+0x88>
c001f318:	39 d8                	cmp    eax,ebx
c001f31a:	72 04                	jb     c001f320 <__umoddi3+0x74>
c001f31c:	39 f7                	cmp    edi,esi
c001f31e:	77 08                	ja     c001f328 <__umoddi3+0x7c>
c001f320:	89 da                	mov    edx,ebx
c001f322:	29 fe                	sub    esi,edi
c001f324:	19 c2                	sbb    edx,eax
c001f326:	89 f1                	mov    ecx,esi
c001f328:	89 c8                	mov    eax,ecx
c001f32a:	83 c4 1c             	add    esp,0x1c
c001f32d:	5b                   	pop    ebx
c001f32e:	5e                   	pop    esi
c001f32f:	5f                   	pop    edi
c001f330:	5d                   	pop    ebp
c001f331:	c3                   	ret    
c001f332:	66 90                	xchg   ax,ax
c001f334:	ba 20 00 00 00       	mov    edx,0x20
c001f339:	29 ea                	sub    edx,ebp
c001f33b:	89 e9                	mov    ecx,ebp
c001f33d:	d3 e0                	shl    eax,cl
c001f33f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f343:	89 f8                	mov    eax,edi
c001f345:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f349:	88 d1                	mov    cl,dl
c001f34b:	d3 e8                	shr    eax,cl
c001f34d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f351:	09 c1                	or     ecx,eax
c001f353:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f357:	89 e9                	mov    ecx,ebp
c001f359:	d3 e7                	shl    edi,cl
c001f35b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f35f:	89 d8                	mov    eax,ebx
c001f361:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f365:	88 d1                	mov    cl,dl
c001f367:	d3 e8                	shr    eax,cl
c001f369:	89 c7                	mov    edi,eax
c001f36b:	89 e9                	mov    ecx,ebp
c001f36d:	d3 e3                	shl    ebx,cl
c001f36f:	89 f0                	mov    eax,esi
c001f371:	88 d1                	mov    cl,dl
c001f373:	d3 e8                	shr    eax,cl
c001f375:	09 d8                	or     eax,ebx
c001f377:	89 e9                	mov    ecx,ebp
c001f379:	d3 e6                	shl    esi,cl
c001f37b:	89 f3                	mov    ebx,esi
c001f37d:	89 fa                	mov    edx,edi
c001f37f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f383:	89 d1                	mov    ecx,edx
c001f385:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f389:	89 c6                	mov    esi,eax
c001f38b:	89 d7                	mov    edi,edx
c001f38d:	39 d1                	cmp    ecx,edx
c001f38f:	72 27                	jb     c001f3b8 <__umoddi3+0x10c>
c001f391:	74 21                	je     c001f3b4 <__umoddi3+0x108>
c001f393:	89 ca                	mov    edx,ecx
c001f395:	29 f3                	sub    ebx,esi
c001f397:	19 fa                	sbb    edx,edi
c001f399:	89 d0                	mov    eax,edx
c001f39b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f39f:	d3 e0                	shl    eax,cl
c001f3a1:	89 e9                	mov    ecx,ebp
c001f3a3:	d3 eb                	shr    ebx,cl
c001f3a5:	09 d8                	or     eax,ebx
c001f3a7:	d3 ea                	shr    edx,cl
c001f3a9:	83 c4 1c             	add    esp,0x1c
c001f3ac:	5b                   	pop    ebx
c001f3ad:	5e                   	pop    esi
c001f3ae:	5f                   	pop    edi
c001f3af:	5d                   	pop    ebp
c001f3b0:	c3                   	ret    
c001f3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b4:	39 c3                	cmp    ebx,eax
c001f3b6:	73 db                	jae    c001f393 <__umoddi3+0xe7>
c001f3b8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3bc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f3c0:	89 d7                	mov    edi,edx
c001f3c2:	89 c6                	mov    esi,eax
c001f3c4:	eb cd                	jmp    c001f393 <__umoddi3+0xe7>
c001f3c6:	66 90                	xchg   ax,ax
c001f3c8:	66 90                	xchg   ax,ax
c001f3ca:	66 90                	xchg   ax,ax
c001f3cc:	66 90                	xchg   ax,ax
c001f3ce:	66 90                	xchg   ax,ax

c001f3d0 <fabs>:
c001f3d0:	83 ec 0c             	sub    esp,0xc
c001f3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f3de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f3e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f3e7:	dd 04 24             	fld    QWORD PTR [esp]
c001f3ea:	83 c4 0c             	add    esp,0xc
c001f3ed:	c3                   	ret    
c001f3ee:	66 90                	xchg   ax,ax

c001f3f0 <lrint>:
c001f3f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f3f4:	83 ec 04             	sub    esp,0x4
c001f3f7:	db 1c 24             	fistp  DWORD PTR [esp]
c001f3fa:	58                   	pop    eax
c001f3fb:	c3                   	ret    

c001f3fc <lrintf>:
c001f3fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f400:	83 ec 04             	sub    esp,0x4
c001f403:	db 1c 24             	fistp  DWORD PTR [esp]
c001f406:	58                   	pop    eax
c001f407:	c3                   	ret    

Disassembly of section .init:

c001f408 <_init>:
c001f408:	55                   	push   ebp
c001f409:	89 e5                	mov    ebp,esp
c001f40b:	e8 08 0d fe ff       	call   c0000118 <frame_dummy>
c001f410:	e8 a3 fa ff ff       	call   c001eeb8 <__do_global_ctors_aux>
c001f415:	5d                   	pop    ebp
c001f416:	c3                   	ret    

Disassembly of section .fini:

c001f417 <_fini>:
c001f417:	55                   	push   ebp
c001f418:	89 e5                	mov    ebp,esp
c001f41a:	e8 89 0c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f41f:	5d                   	pop    ebp
c001f420:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f422 <Computer::~Computer()>:
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c001f42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42e:	89 10                	mov    DWORD PTR [eax],edx
c001f430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	50                   	push   eax
c001f438:	e8 7d 0f ff ff       	call   c00103ba <Device::~Device()>
c001f43d:	83 c4 10             	add    esp,0x10
c001f440:	90                   	nop
c001f441:	83 c4 0c             	add    esp,0xc
c001f444:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f446 <Computer::~Computer()>:
c001f446:	83 ec 0c             	sub    esp,0xc
c001f449:	83 ec 0c             	sub    esp,0xc
c001f44c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f450:	e8 cd ff ff ff       	call   c001f422 <Computer::~Computer()>
c001f455:	83 c4 10             	add    esp,0x10
c001f458:	83 ec 08             	sub    esp,0x8
c001f45b:	68 ec 01 00 00       	push   0x1ec
c001f460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f464:	e8 c4 fb fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001f469:	83 c4 10             	add    esp,0x10
c001f46c:	83 c4 0c             	add    esp,0xc
c001f46f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f470 <idleCommon()>:
c001f470:	83 ec 0c             	sub    esp,0xc
c001f473:	e8 b4 93 ff ff       	call   c001882c <lockScheduler()>
c001f478:	e8 e3 96 ff ff       	call   c0018b60 <schedule()>
c001f47d:	83 c4 0c             	add    esp,0xc
c001f480:	e9 a9 93 ff ff       	jmp    c001882e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f485 <CPU::readCR3()>:
c001f485:	83 ec 10             	sub    esp,0x10
c001f488:	0f 20 d8             	mov    eax,cr3
c001f48b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f493:	83 c4 10             	add    esp,0x10
c001f496:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f497 <CPU::writeCR3(unsigned long)>:
c001f497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49b:	0f 22 d8             	mov    cr3,eax
c001f49e:	90                   	nop
c001f49f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4a0 <LinkedList<UnixFile>::~LinkedList()>:
c001f4a0:	90                   	nop
c001f4a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4a2 <LinkedList<UnixFile>::LinkedList()>:
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e5:	83 ec 0c             	sub    esp,0xc
c001f4e8:	68 ba 11 02 c0       	push   0xc00211ba
c001f4ed:	e8 1b fc fe ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001f4f2:	83 c4 10             	add    esp,0x10
c001f4f5:	90                   	nop
c001f4f6:	83 c4 0c             	add    esp,0xc
c001f4f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f4fa <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f4fa:	83 ec 0c             	sub    esp,0xc
c001f4fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f502:	75 10                	jne    c001f514 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	68 d4 11 02 c0       	push   0xc00211d4
c001f50c:	e8 c7 63 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f511:	83 c4 10             	add    esp,0x10
c001f514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f518:	8b 00                	mov    eax,DWORD PTR [eax]
c001f51a:	85 c0                	test   eax,eax
c001f51c:	74 34                	je     c001f552 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f525:	85 c0                	test   eax,eax
c001f527:	74 29                	je     c001f552 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f530:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f534:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f53f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f549:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f550:	eb 65                	jmp    c001f5b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f556:	8b 00                	mov    eax,DWORD PTR [eax]
c001f558:	85 c0                	test   eax,eax
c001f55a:	75 4b                	jne    c001f5a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f563:	85 c0                	test   eax,eax
c001f565:	75 40                	jne    c001f5a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f56f:	89 10                	mov    DWORD PTR [eax],edx
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f579:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f583:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f591:	85 c0                	test   eax,eax
c001f593:	74 22                	je     c001f5b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f595:	83 ec 0c             	sub    esp,0xc
c001f598:	68 f6 11 02 c0       	push   0xc00211f6
c001f59d:	e8 36 63 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f5a2:	83 c4 10             	add    esp,0x10
c001f5a5:	eb 10                	jmp    c001f5b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5a7:	83 ec 0c             	sub    esp,0xc
c001f5aa:	68 00 12 02 c0       	push   0xc0021200
c001f5af:	e8 24 63 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f5b4:	83 c4 10             	add    esp,0x10
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5be:	8d 50 01             	lea    edx,[eax+0x1]
c001f5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5c8:	90                   	nop
c001f5c9:	83 c4 0c             	add    esp,0xc
c001f5cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f5ce <LinkedList<UnixFile>::getFirstElement()>:
c001f5ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f5d6 <LinkedList<UnixFile>::removeFirst()>:
c001f5d6:	83 ec 0c             	sub    esp,0xc
c001f5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5df:	85 c0                	test   eax,eax
c001f5e1:	75 12                	jne    c001f5f5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f5e3:	83 ec 0c             	sub    esp,0xc
c001f5e6:	68 0c 12 02 c0       	push   0xc002120c
c001f5eb:	e8 e8 62 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f5f0:	83 c4 10             	add    esp,0x10
c001f5f3:	eb 7e                	jmp    c001f673 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ff:	85 c0                	test   eax,eax
c001f601:	74 10                	je     c001f613 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f603:	83 ec 0c             	sub    esp,0xc
c001f606:	68 57 12 02 c0       	push   0xc0021257
c001f60b:	e8 c8 62 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f610:	83 c4 10             	add    esp,0x10
c001f613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f617:	8b 00                	mov    eax,DWORD PTR [eax]
c001f619:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61c:	85 c0                	test   eax,eax
c001f61e:	75 33                	jne    c001f653 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f624:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f639:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f63c:	83 f8 01             	cmp    eax,0x1
c001f63f:	74 21                	je     c001f662 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f641:	83 ec 0c             	sub    esp,0xc
c001f644:	68 30 12 02 c0       	push   0xc0021230
c001f649:	e8 8a 62 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f64e:	83 c4 10             	add    esp,0x10
c001f651:	eb 0f                	jmp    c001f662 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f657:	8b 00                	mov    eax,DWORD PTR [eax]
c001f659:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f660:	89 10                	mov    DWORD PTR [eax],edx
c001f662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f666:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f669:	8d 50 ff             	lea    edx,[eax-0x1]
c001f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f670:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f673:	83 c4 0c             	add    esp,0xc
c001f676:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f678 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f67c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f67f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f680 <DriverlessDevice::~DriverlessDevice()>:
c001f680:	ba c4 18 02 c0       	mov    edx,0xc00218c4
c001f685:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f689:	89 10                	mov    DWORD PTR [eax],edx
c001f68b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f68f:	50                   	push   eax
c001f690:	e8 25 0d ff ff       	call   c00103ba <Device::~Device()>
c001f695:	83 c4 04             	add    esp,0x4
c001f698:	90                   	nop
c001f699:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f69a <DriverlessDevice::~DriverlessDevice()>:
c001f69a:	83 ec 0c             	sub    esp,0xc
c001f69d:	83 ec 0c             	sub    esp,0xc
c001f6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6a4:	e8 d7 ff ff ff       	call   c001f680 <DriverlessDevice::~DriverlessDevice()>
c001f6a9:	83 c4 10             	add    esp,0x10
c001f6ac:	83 ec 08             	sub    esp,0x8
c001f6af:	68 58 01 00 00       	push   0x158
c001f6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b8:	e8 70 f9 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001f6bd:	83 c4 10             	add    esp,0x10
c001f6c0:	83 c4 0c             	add    esp,0xc
c001f6c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f6c4 <LinkedList<Device>::addElement(Device*)>:
c001f6c4:	83 ec 0c             	sub    esp,0xc
c001f6c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6cc:	75 10                	jne    c001f6de <LinkedList<Device>::addElement(Device*)+0x1a>
c001f6ce:	83 ec 0c             	sub    esp,0xc
c001f6d1:	68 d4 11 02 c0       	push   0xc00211d4
c001f6d6:	e8 fd 61 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f6db:	83 c4 10             	add    esp,0x10
c001f6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6e4:	85 c0                	test   eax,eax
c001f6e6:	74 3a                	je     c001f722 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6ef:	85 c0                	test   eax,eax
c001f6f1:	74 2f                	je     c001f722 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6fe:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f70c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f713:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f716:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f720:	eb 68                	jmp    c001f78a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f726:	8b 00                	mov    eax,DWORD PTR [eax]
c001f728:	85 c0                	test   eax,eax
c001f72a:	75 4e                	jne    c001f77a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f733:	85 c0                	test   eax,eax
c001f735:	75 43                	jne    c001f77a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f73f:	89 10                	mov    DWORD PTR [eax],edx
c001f741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f745:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f749:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f753:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f761:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f764:	85 c0                	test   eax,eax
c001f766:	74 22                	je     c001f78a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f768:	83 ec 0c             	sub    esp,0xc
c001f76b:	68 f6 11 02 c0       	push   0xc00211f6
c001f770:	e8 63 61 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f775:	83 c4 10             	add    esp,0x10
c001f778:	eb 10                	jmp    c001f78a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f77a:	83 ec 0c             	sub    esp,0xc
c001f77d:	68 00 12 02 c0       	push   0xc0021200
c001f782:	e8 51 61 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f787:	83 c4 10             	add    esp,0x10
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f791:	8d 50 01             	lea    edx,[eax+0x1]
c001f794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f798:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f79b:	90                   	nop
c001f79c:	83 c4 0c             	add    esp,0xc
c001f79f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f7a0 <LinkedList<Device>::LinkedList()>:
c001f7a0:	83 ec 0c             	sub    esp,0xc
c001f7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7e3:	83 ec 0c             	sub    esp,0xc
c001f7e6:	68 ba 11 02 c0       	push   0xc00211ba
c001f7eb:	e8 1d f9 fe ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001f7f0:	83 c4 10             	add    esp,0x10
c001f7f3:	90                   	nop
c001f7f4:	83 c4 0c             	add    esp,0xc
c001f7f7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f7f8 <CPU::readCR0()>:
c001f7f8:	83 ec 10             	sub    esp,0x10
c001f7fb:	0f 20 c0             	mov    eax,cr0
c001f7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f806:	83 c4 10             	add    esp,0x10
c001f809:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f80a <CPU::writeCR0(unsigned long)>:
c001f80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80e:	0f 22 c0             	mov    cr0,eax
c001f811:	90                   	nop
c001f812:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f813 <CPU::readDR0()>:
c001f813:	83 ec 10             	sub    esp,0x10
c001f816:	0f 21 c0             	mov    eax,db0
c001f819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f81d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f821:	83 c4 10             	add    esp,0x10
c001f824:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f825 <CPU::readDR1()>:
c001f825:	83 ec 10             	sub    esp,0x10
c001f828:	0f 21 c8             	mov    eax,db1
c001f82b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f82f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f837 <CPU::readDR2()>:
c001f837:	83 ec 10             	sub    esp,0x10
c001f83a:	0f 21 d0             	mov    eax,db2
c001f83d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f845:	83 c4 10             	add    esp,0x10
c001f848:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f849 <CPU::readDR3()>:
c001f849:	83 ec 10             	sub    esp,0x10
c001f84c:	0f 21 d8             	mov    eax,db3
c001f84f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f857:	83 c4 10             	add    esp,0x10
c001f85a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f85b <CPU::readDR6()>:
c001f85b:	83 ec 10             	sub    esp,0x10
c001f85e:	0f 21 f0             	mov    eax,db6
c001f861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f869:	83 c4 10             	add    esp,0x10
c001f86c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f86d <CPU::readDR7()>:
c001f86d:	83 ec 10             	sub    esp,0x10
c001f870:	0f 21 f8             	mov    eax,db7
c001f873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f87b:	83 c4 10             	add    esp,0x10
c001f87e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f880 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f884:	8b 00                	mov    eax,DWORD PTR [eax]
c001f886:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f88e:	85 c0                	test   eax,eax
c001f890:	75 0e                	jne    c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f899:	85 c0                	test   eax,eax
c001f89b:	75 03                	jne    c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f89d:	b0 01                	mov    al,0x1
c001f89f:	c3                   	ret    
c001f8a0:	b0 00                	mov    al,0x0
c001f8a2:	90                   	nop
c001f8a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ad:	85 c0                	test   eax,eax
c001f8af:	75 15                	jne    c001f8c6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f8b1:	83 ec 0c             	sub    esp,0xc
c001f8b4:	68 0c 12 02 c0       	push   0xc002120c
c001f8b9:	e8 1a 60 ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f8be:	83 c4 10             	add    esp,0x10
c001f8c1:	e9 88 00 00 00       	jmp    c001f94e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8d0:	85 c0                	test   eax,eax
c001f8d2:	0f 95 c0             	setne  al
c001f8d5:	84 c0                	test   al,al
c001f8d7:	74 10                	je     c001f8e9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f8d9:	83 ec 0c             	sub    esp,0xc
c001f8dc:	68 57 12 02 c0       	push   0xc0021257
c001f8e1:	e8 f2 5f ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f8e6:	83 c4 10             	add    esp,0x10
c001f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8f2:	85 c0                	test   eax,eax
c001f8f4:	0f 94 c0             	sete   al
c001f8f7:	84 c0                	test   al,al
c001f8f9:	74 33                	je     c001f92e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f909:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f917:	83 f8 01             	cmp    eax,0x1
c001f91a:	74 21                	je     c001f93d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f91c:	83 ec 0c             	sub    esp,0xc
c001f91f:	68 30 12 02 c0       	push   0xc0021230
c001f924:	e8 af 5f ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	eb 0f                	jmp    c001f93d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93b:	89 10                	mov    DWORD PTR [eax],edx
c001f93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f941:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f944:	8d 50 ff             	lea    edx,[eax-0x1]
c001f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f94e:	83 c4 0c             	add    esp,0xc
c001f951:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f952 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f952:	83 ec 0c             	sub    esp,0xc
c001f955:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f95a:	75 10                	jne    c001f96c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	68 d4 11 02 c0       	push   0xc00211d4
c001f964:	e8 6f 5f ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f969:	83 c4 10             	add    esp,0x10
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	85 c0                	test   eax,eax
c001f974:	74 34                	je     c001f9aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	74 29                	je     c001f9aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f98c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f993:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f997:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9a8:	eb 65                	jmp    c001fa0f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b0:	85 c0                	test   eax,eax
c001f9b2:	75 4b                	jne    c001f9ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9bb:	85 c0                	test   eax,eax
c001f9bd:	75 40                	jne    c001f9ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9c7:	89 10                	mov    DWORD PTR [eax],edx
c001f9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9e9:	85 c0                	test   eax,eax
c001f9eb:	74 22                	je     c001fa0f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	68 f6 11 02 c0       	push   0xc00211f6
c001f9f5:	e8 de 5e ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001f9fa:	83 c4 10             	add    esp,0x10
c001f9fd:	eb 10                	jmp    c001fa0f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9ff:	83 ec 0c             	sub    esp,0xc
c001fa02:	68 00 12 02 c0       	push   0xc0021200
c001fa07:	e8 cc 5e ff ff       	call   c00158d8 <Krnl::panic(char const*)>
c001fa0c:	83 c4 10             	add    esp,0x10
c001fa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa16:	8d 50 01             	lea    edx,[eax+0x1]
c001fa19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa20:	90                   	nop
c001fa21:	83 c4 0c             	add    esp,0xc
c001fa24:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa26 <ACPI::~ACPI()>:
c001fa26:	83 ec 0c             	sub    esp,0xc
c001fa29:	ba 7c 20 02 c0       	mov    edx,0xc002207c
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	89 10                	mov    DWORD PTR [eax],edx
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	50                   	push   eax
c001fa3c:	e8 79 09 ff ff       	call   c00103ba <Device::~Device()>
c001fa41:	83 c4 10             	add    esp,0x10
c001fa44:	90                   	nop
c001fa45:	83 c4 0c             	add    esp,0xc
c001fa48:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa4a <ACPI::~ACPI()>:
c001fa4a:	83 ec 0c             	sub    esp,0xc
c001fa4d:	83 ec 0c             	sub    esp,0xc
c001fa50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa54:	e8 cd ff ff ff       	call   c001fa26 <ACPI::~ACPI()>
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	83 ec 08             	sub    esp,0x8
c001fa5f:	68 68 22 00 00       	push   0x2268
c001fa64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa68:	e8 c0 f5 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fa6d:	83 c4 10             	add    esp,0x10
c001fa70:	83 c4 0c             	add    esp,0xc
c001fa73:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa74 <CPU::~CPU()>:
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	89 10                	mov    DWORD PTR [eax],edx
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	83 ec 0c             	sub    esp,0xc
c001fa89:	50                   	push   eax
c001fa8a:	e8 2b 09 ff ff       	call   c00103ba <Device::~Device()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	90                   	nop
c001fa93:	83 c4 0c             	add    esp,0xc
c001fa96:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa98 <CPU::~CPU()>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	83 ec 0c             	sub    esp,0xc
c001fa9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa2:	e8 cd ff ff ff       	call   c001fa74 <CPU::~CPU()>
c001faa7:	83 c4 10             	add    esp,0x10
c001faaa:	83 ec 08             	sub    esp,0x8
c001faad:	68 98 11 00 00       	push   0x1198
c001fab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab6:	e8 72 f5 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fabb:	83 c4 10             	add    esp,0x10
c001fabe:	83 c4 0c             	add    esp,0xc
c001fac1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fac2 <CPU::readCR4()>:
c001fac2:	83 ec 10             	sub    esp,0x10
c001fac5:	0f 20 e0             	mov    eax,cr4
c001fac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001facc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fad0:	83 c4 10             	add    esp,0x10
c001fad3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fad4 <CPU::writeDR7(unsigned long)>:
c001fad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad8:	0f 23 f8             	mov    db7,eax
c001fadb:	90                   	nop
c001fadc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fadd <CPU::writeCR4(unsigned long)>:
c001fadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae1:	0f 22 e0             	mov    cr4,eax
c001fae4:	90                   	nop
c001fae5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fae6 <CPU::readCR2()>:
c001fae6:	83 ec 10             	sub    esp,0x10
c001fae9:	0f 20 d0             	mov    eax,cr2
c001faec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faf4:	83 c4 10             	add    esp,0x10
c001faf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001faf8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001faf8:	90                   	nop
c001faf9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fafa <ThreadControlBlock::ThreadControlBlock()>:
c001fafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb09:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb14:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb32:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fb36:	90                   	nop
c001fb37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb38 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb7b:	83 ec 0c             	sub    esp,0xc
c001fb7e:	68 ba 11 02 c0       	push   0xc00211ba
c001fb83:	e8 85 f5 fe ff       	call   c000f10d <Dbg::kprintf(char const*, ...)>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	90                   	nop
c001fb8c:	83 c4 0c             	add    esp,0xc
c001fb8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb90 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb97:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb98 <PCI::~PCI()>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	ba ec 30 02 c0       	mov    edx,0xc00230ec
c001fba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba4:	89 10                	mov    DWORD PTR [eax],edx
c001fba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaa:	83 ec 0c             	sub    esp,0xc
c001fbad:	50                   	push   eax
c001fbae:	e8 17 02 ff ff       	call   c000fdca <Bus::~Bus()>
c001fbb3:	83 c4 10             	add    esp,0x10
c001fbb6:	90                   	nop
c001fbb7:	83 c4 0c             	add    esp,0xc
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fbbc <PCI::~PCI()>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	83 ec 0c             	sub    esp,0xc
c001fbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc6:	e8 cd ff ff ff       	call   c001fb98 <PCI::~PCI()>
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	83 ec 08             	sub    esp,0x8
c001fbd1:	68 58 01 00 00       	push   0x158
c001fbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbda:	e8 4e f4 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fbdf:	83 c4 10             	add    esp,0x10
c001fbe2:	83 c4 0c             	add    esp,0xc
c001fbe5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fbe6 <IDE::~IDE()>:
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	ba 50 33 02 c0       	mov    edx,0xc0023350
c001fbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf2:	89 10                	mov    DWORD PTR [eax],edx
c001fbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	50                   	push   eax
c001fbfc:	e8 cf 0c ff ff       	call   c00108d0 <HardDiskController::~HardDiskController()>
c001fc01:	83 c4 10             	add    esp,0x10
c001fc04:	90                   	nop
c001fc05:	83 c4 0c             	add    esp,0xc
c001fc08:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc0a <IDE::~IDE()>:
c001fc0a:	83 ec 0c             	sub    esp,0xc
c001fc0d:	83 ec 0c             	sub    esp,0xc
c001fc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc14:	e8 cd ff ff ff       	call   c001fbe6 <IDE::~IDE()>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	83 ec 08             	sub    esp,0x8
c001fc1f:	68 70 02 00 00       	push   0x270
c001fc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc28:	e8 00 f4 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fc2d:	83 c4 10             	add    esp,0x10
c001fc30:	83 c4 0c             	add    esp,0xc
c001fc33:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc34 <ATA::~ATA()>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c001fc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc40:	89 10                	mov    DWORD PTR [eax],edx
c001fc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	50                   	push   eax
c001fc4a:	e8 5f 0d ff ff       	call   c00109ae <PhysicalDisk::~PhysicalDisk()>
c001fc4f:	83 c4 10             	add    esp,0x10
c001fc52:	90                   	nop
c001fc53:	83 c4 0c             	add    esp,0xc
c001fc56:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc58 <ATA::~ATA()>:
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc62:	e8 cd ff ff ff       	call   c001fc34 <ATA::~ATA()>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	83 ec 08             	sub    esp,0x8
c001fc6d:	68 7c 01 00 00       	push   0x17c
c001fc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc76:	e8 b2 f3 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	83 c4 0c             	add    esp,0xc
c001fc81:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc82 <ATAPI::~ATAPI()>:
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c001fc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8e:	89 10                	mov    DWORD PTR [eax],edx
c001fc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	50                   	push   eax
c001fc98:	e8 11 0d ff ff       	call   c00109ae <PhysicalDisk::~PhysicalDisk()>
c001fc9d:	83 c4 10             	add    esp,0x10
c001fca0:	90                   	nop
c001fca1:	83 c4 0c             	add    esp,0xc
c001fca4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fca6 <ATAPI::~ATAPI()>:
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	83 ec 0c             	sub    esp,0xc
c001fcac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb0:	e8 cd ff ff ff       	call   c001fc82 <ATAPI::~ATAPI()>
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	83 ec 08             	sub    esp,0x8
c001fcbb:	68 80 01 00 00       	push   0x180
c001fcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc4:	e8 64 f3 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	83 c4 0c             	add    esp,0xc
c001fccf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fcd0 <AVX::~AVX()>:
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001fcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdc:	89 10                	mov    DWORD PTR [eax],edx
c001fcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	50                   	push   eax
c001fce6:	e8 47 0d ff ff       	call   c0010a32 <FPU::~FPU()>
c001fceb:	83 c4 10             	add    esp,0x10
c001fcee:	90                   	nop
c001fcef:	83 c4 0c             	add    esp,0xc
c001fcf2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fcf4 <AVX::~AVX()>:
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	83 ec 0c             	sub    esp,0xc
c001fcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfe:	e8 cd ff ff ff       	call   c001fcd0 <AVX::~AVX()>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	83 ec 08             	sub    esp,0x8
c001fd09:	68 58 01 00 00       	push   0x158
c001fd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd12:	e8 16 f3 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fd17:	83 c4 10             	add    esp,0x10
c001fd1a:	83 c4 0c             	add    esp,0xc
c001fd1d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fd1e <MMX::~MMX()>:
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	ba 88 34 02 c0       	mov    edx,0xc0023488
c001fd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2a:	89 10                	mov    DWORD PTR [eax],edx
c001fd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	50                   	push   eax
c001fd34:	e8 f9 0c ff ff       	call   c0010a32 <FPU::~FPU()>
c001fd39:	83 c4 10             	add    esp,0x10
c001fd3c:	90                   	nop
c001fd3d:	83 c4 0c             	add    esp,0xc
c001fd40:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fd42 <MMX::~MMX()>:
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	83 ec 0c             	sub    esp,0xc
c001fd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd4c:	e8 cd ff ff ff       	call   c001fd1e <MMX::~MMX()>
c001fd51:	83 c4 10             	add    esp,0x10
c001fd54:	83 ec 08             	sub    esp,0x8
c001fd57:	68 58 01 00 00       	push   0x158
c001fd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd60:	e8 c8 f2 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	83 c4 0c             	add    esp,0xc
c001fd6b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fd6c <SSE::~SSE()>:
c001fd6c:	83 ec 0c             	sub    esp,0xc
c001fd6f:	ba c8 34 02 c0       	mov    edx,0xc00234c8
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	89 10                	mov    DWORD PTR [eax],edx
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	50                   	push   eax
c001fd82:	e8 ab 0c ff ff       	call   c0010a32 <FPU::~FPU()>
c001fd87:	83 c4 10             	add    esp,0x10
c001fd8a:	90                   	nop
c001fd8b:	83 c4 0c             	add    esp,0xc
c001fd8e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fd90 <SSE::~SSE()>:
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	83 ec 0c             	sub    esp,0xc
c001fd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd9a:	e8 cd ff ff ff       	call   c001fd6c <SSE::~SSE()>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	83 ec 08             	sub    esp,0x8
c001fda5:	68 58 01 00 00       	push   0x158
c001fdaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdae:	e8 7a f2 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	83 c4 0c             	add    esp,0xc
c001fdb9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001fdba <x87::~x87()>:
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	ba 08 35 02 c0       	mov    edx,0xc0023508
c001fdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc6:	89 10                	mov    DWORD PTR [eax],edx
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	50                   	push   eax
c001fdd0:	e8 5d 0c ff ff       	call   c0010a32 <FPU::~FPU()>
c001fdd5:	83 c4 10             	add    esp,0x10
c001fdd8:	90                   	nop
c001fdd9:	83 c4 0c             	add    esp,0xc
c001fddc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fdde <x87::~x87()>:
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	83 ec 0c             	sub    esp,0xc
c001fde4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde8:	e8 cd ff ff ff       	call   c001fdba <x87::~x87()>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	83 ec 08             	sub    esp,0x8
c001fdf3:	68 58 01 00 00       	push   0x158
c001fdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfc:	e8 2c f2 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fe01:	83 c4 10             	add    esp,0x10
c001fe04:	83 c4 0c             	add    esp,0xc
c001fe07:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe08 <IOAPIC::~IOAPIC()>:
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	ba 60 36 02 c0       	mov    edx,0xc0023660
c001fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe14:	89 10                	mov    DWORD PTR [eax],edx
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	50                   	push   eax
c001fe1e:	e8 97 05 ff ff       	call   c00103ba <Device::~Device()>
c001fe23:	83 c4 10             	add    esp,0x10
c001fe26:	90                   	nop
c001fe27:	83 c4 0c             	add    esp,0xc
c001fe2a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe2c <IOAPIC::~IOAPIC()>:
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe36:	e8 cd ff ff ff       	call   c001fe08 <IOAPIC::~IOAPIC()>
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	83 ec 08             	sub    esp,0x8
c001fe41:	68 68 01 00 00       	push   0x168
c001fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4a:	e8 de f1 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	83 c4 0c             	add    esp,0xc
c001fe55:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fe56 <APIC::~APIC()>:
c001fe56:	83 ec 0c             	sub    esp,0xc
c001fe59:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001fe5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe62:	89 10                	mov    DWORD PTR [eax],edx
c001fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	50                   	push   eax
c001fe6c:	e8 8b 10 ff ff       	call   c0010efc <InterruptController::~InterruptController()>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	90                   	nop
c001fe75:	83 c4 0c             	add    esp,0xc
c001fe78:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fe7a <APIC::~APIC()>:
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	83 ec 0c             	sub    esp,0xc
c001fe80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe84:	e8 cd ff ff ff       	call   c001fe56 <APIC::~APIC()>
c001fe89:	83 c4 10             	add    esp,0x10
c001fe8c:	83 ec 08             	sub    esp,0x8
c001fe8f:	68 58 21 00 00       	push   0x2158
c001fe94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe98:	e8 90 f1 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001fe9d:	83 c4 10             	add    esp,0x10
c001fea0:	83 c4 0c             	add    esp,0xc
c001fea3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fea4 <PIC::~PIC()>:
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c001feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb0:	89 10                	mov    DWORD PTR [eax],edx
c001feb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	50                   	push   eax
c001feba:	e8 3d 10 ff ff       	call   c0010efc <InterruptController::~InterruptController()>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	90                   	nop
c001fec3:	83 c4 0c             	add    esp,0xc
c001fec6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fec8 <PIC::~PIC()>:
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	83 ec 0c             	sub    esp,0xc
c001fece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed2:	e8 cd ff ff ff       	call   c001fea4 <PIC::~PIC()>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	83 ec 08             	sub    esp,0x8
c001fedd:	68 58 21 00 00       	push   0x2158
c001fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee6:	e8 42 f1 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	83 c4 0c             	add    esp,0xc
c001fef1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fef2 <APICTimer::~APICTimer()>:
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001fefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefe:	89 10                	mov    DWORD PTR [eax],edx
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	50                   	push   eax
c001ff08:	e8 09 2d ff ff       	call   c0012c16 <Timer::~Timer()>
c001ff0d:	83 c4 10             	add    esp,0x10
c001ff10:	90                   	nop
c001ff11:	83 c4 0c             	add    esp,0xc
c001ff14:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff16 <APICTimer::~APICTimer()>:
c001ff16:	83 ec 0c             	sub    esp,0xc
c001ff19:	83 ec 0c             	sub    esp,0xc
c001ff1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff20:	e8 cd ff ff ff       	call   c001fef2 <APICTimer::~APICTimer()>
c001ff25:	83 c4 10             	add    esp,0x10
c001ff28:	83 ec 08             	sub    esp,0x8
c001ff2b:	68 60 01 00 00       	push   0x160
c001ff30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff34:	e8 f4 f0 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001ff39:	83 c4 10             	add    esp,0x10
c001ff3c:	83 c4 0c             	add    esp,0xc
c001ff3f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff40 <PIT::~PIT()>:
c001ff40:	83 ec 0c             	sub    esp,0xc
c001ff43:	ba 54 37 02 c0       	mov    edx,0xc0023754
c001ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4c:	89 10                	mov    DWORD PTR [eax],edx
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	83 ec 0c             	sub    esp,0xc
c001ff55:	50                   	push   eax
c001ff56:	e8 bb 2c ff ff       	call   c0012c16 <Timer::~Timer()>
c001ff5b:	83 c4 10             	add    esp,0x10
c001ff5e:	90                   	nop
c001ff5f:	83 c4 0c             	add    esp,0xc
c001ff62:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff64 <PIT::~PIT()>:
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	83 ec 0c             	sub    esp,0xc
c001ff6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6e:	e8 cd ff ff ff       	call   c001ff40 <PIT::~PIT()>
c001ff73:	83 c4 10             	add    esp,0x10
c001ff76:	83 ec 08             	sub    esp,0x8
c001ff79:	68 5c 01 00 00       	push   0x15c
c001ff7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff82:	e8 a6 f0 fe ff       	call   c000f02d <operator delete(void*, unsigned long)>
c001ff87:	83 c4 10             	add    esp,0x10
c001ff8a:	83 c4 0c             	add    esp,0xc
c001ff8d:	c3                   	ret    
