
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 68 d4 00 00       	call   c000d488 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 e1 01 00       	call   c001e1b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 94 ed 01 c0       	mov    ebx,0xc001ed94
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c ed 01 c0    	cmp    ebx,0xc001ed9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e8 26 02 c0       	mov    eax,0xc00226e8
c0000049:	3d e8 26 02 c0       	cmp    eax,0xc00226e8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e8 26 02 c0       	push   0xc00226e8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e8 26 02 c0       	mov    eax,0xc00226e8
c0000075:	2d e8 26 02 c0       	sub    eax,0xc00226e8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e8 26 02 c0       	push   0xc00226e8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 28 02 c0 00 	cmp    BYTE PTR ds:0xc0022888,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 ed 01 c0       	mov    ebx,0xc001eda4
c00000bb:	81 eb a0 ed 01 c0    	sub    ebx,0xc001eda0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 ed 01 c0       	mov    esi,0xc001eda0
c00000ca:	a1 8c 28 02 c0       	mov    eax,ds:0xc002288c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c 28 02 c0       	mov    ds:0xc002288c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c 28 02 c0       	mov    eax,ds:0xc002288c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e8 26 02 c0       	push   0xc00226e8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 28 02 c0 01 	mov    BYTE PTR ds:0xc0022888,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 28 02 c0       	push   0xc0022890
c000012c:	68 e8 26 02 c0       	push   0xc00226e8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 b3 1d 01 00       	call   c0012012 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 f7 d9 00 00       	call   c000dc60 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 e3 dd 00 00       	call   c000e073 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 89 e5 00 00       	call   c000e822 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 b8 d9 00 00       	call   c000dc60 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 84 34 02 c0 	lgdtd  ds:0xc0023484
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 d5 3c 01 c0       	mov    ecx,0xc0013cd5
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 d5 3c 01 c0       	mov    ecx,0xc0013cd5
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d a8 28 02 c0    	mov    ebx,DWORD PTR ds:0xc00228a8
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 a8 28 02 c0       	mov    ds:0xc00228a8,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 a8 28 02 c0       	mov    eax,ds:0xc00228a8
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 a8 28 02 c0    	mov    DWORD PTR ds:0xc00228a8,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 c0 ed 01 c0 02 	test   BYTE PTR [edx-0x3ffe1240],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 c0 ed 01 c0 01 	test   BYTE PTR [edx-0x3ffe1240],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 c0 ed 01 c0 08 	test   BYTE PTR [edx-0x3ffe1240],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 c0 ed 01 c0 04 	test   BYTE PTR [edi-0x3ffe1240],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 c0 ed 01 c0 01 	test   BYTE PTR [edx-0x3ffe1240],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d c0 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228c0
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d c0 28 02 c0    	mov    DWORD PTR ds:0xc00228c0,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 c4 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd73c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 c4 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd73c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d c0 28 02 c0    	mov    DWORD PTR ds:0xc00228c0,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 ec 28 02 c0    	cmp    DWORD PTR ds:0xc00228ec,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d fc 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228fc
c0000b8d:	c7 42 0c f4 28 02 c0 	mov    DWORD PTR [edx+0xc],0xc00228f4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 fc 28 02 c0    	mov    DWORD PTR ds:0xc00228fc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 ec 28 02 c0    	mov    DWORD PTR ds:0xc00228ec,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 c0 28 02 c0 02 	test   BYTE PTR ds:0xc00228c0,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 78 c3 00 00       	call   c000cfe6 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 ba c2 00 00       	call   c000cfe6 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 a4 c2 00 00       	call   c000cfe6 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 80 c2 00 00       	call   c000cfe6 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d c0 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228c0
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 c4 28 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd73c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 c4 28 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd73c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 f4 28 02 c0 	lea    edx,[eax*8-0x3ffdd70c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 00 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022900
c0000f0f:	81 fb f4 28 02 c0    	cmp    ebx,0xc00228f4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d f4 28 02 c0       	cmp    eax,0xc00228f4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d f0 28 02 c0    	cmp    DWORD PTR ds:0xc00228f0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 fc 28 02 c0       	mov    ds:0xc00228fc,eax
c0000f4b:	a3 00 29 02 c0       	mov    ds:0xc0022900,eax
c0000f50:	a3 f0 28 02 c0       	mov    ds:0xc00228f0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 f4 28 02 c0 	mov    DWORD PTR [eax+0x8],0xc00228f4
c0000f5e:	c7 40 0c f4 28 02 c0 	mov    DWORD PTR [eax+0xc],0xc00228f4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 00 29 02 c0       	mov    ds:0xc0022900,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 f4 28 02 c0 	mov    DWORD PTR [eax+0x8],0xc00228f4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 b8 28 02 c0 	lea    ebp,[edx*4-0x3ffdd748]
c0000faf:	8b 14 95 c0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd740]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 c0 28 02 c0 	lea    ecx,[edx*4-0x3ffdd740]
c0000fca:	8b 14 95 c0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd740]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd f4 2b 02 c0 	or     DWORD PTR [edi*4-0x3ffdd40c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 f4 28 02 c0 	lea    eax,[eax*8-0x3ffdd70c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d fc 28 02 c0    	mov    DWORD PTR ds:0xc00228fc,ecx
c0001084:	89 0d 00 29 02 c0    	mov    DWORD PTR ds:0xc0022900,ecx
c000108a:	c7 41 08 f4 28 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00228f4
c0001091:	c7 41 0c f4 28 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00228f4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd ec 28 02 c0 	lea    edx,[ecx*8-0x3ffdd714]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d f4 2b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd40c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d f4 2b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd40c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 ec 28 02 c0 	lea    edx,[eax*4-0x3ffdd714]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d f4 2b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdd40c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d fc 28 02 c0    	mov    DWORD PTR ds:0xc00228fc,edi
c0001157:	89 3d 00 29 02 c0    	mov    DWORD PTR ds:0xc0022900,edi
c000115d:	c7 47 08 f4 28 02 c0 	mov    DWORD PTR [edi+0x8],0xc00228f4
c0001164:	c7 47 0c f4 28 02 c0 	mov    DWORD PTR [edi+0xc],0xc00228f4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d f0 28 02 c0    	mov    DWORD PTR ds:0xc00228f0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 ec 28 02 c0       	mov    eax,ds:0xc00228ec
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d ec 28 02 c0    	mov    DWORD PTR ds:0xc00228ec,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba c0 28 02 c0       	mov    edx,0xc00228c0
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d c0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228c0,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 14 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022c14
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 14 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022c14,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 14 2c 02 c0    	mov    DWORD PTR ds:0xc0022c14,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 ec 28 02 c0    	cmp    DWORD PTR ds:0xc00228ec,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d ec 28 02 c0    	mov    DWORD PTR ds:0xc00228ec,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d c0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228c0,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 1c 2c 02 c0    	push   DWORD PTR ds:0xc0022c1c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d c0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228c0,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 1c 2c 02 c0       	mov    eax,ds:0xc0022c1c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d ec 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228ec,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 ec 28 02 c0       	mov    eax,ds:0xc00228ec
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 c4 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd73c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 f4 28 02 c0       	mov    eax,0xc00228f4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d ec 2b 02 c0       	cmp    eax,0xc0022bec
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 10 2c 02 c0    	mov    esi,DWORD PTR ds:0xc0022c10
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 24 2c 02 c0    	mov    esi,DWORD PTR ds:0xc0022c24
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 34 2c 02 c0    	mov    esi,DWORD PTR ds:0xc0022c34
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 c4 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe113c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 c0 28 02 c0       	mov    eax,ds:0xc00228c0
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 c0 28 02 c0       	mov    ds:0xc00228c0,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 04 2c 02 c0    	mov    DWORD PTR ds:0xc0022c04,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 08 2c 02 c0    	mov    DWORD PTR ds:0xc0022c08,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 0c 2c 02 c0    	mov    DWORD PTR ds:0xc0022c0c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 14 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022c14,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 15 7a 01 00       	jmp    c001936e <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 46 7a 01 00       	jmp    c00193b5 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 6e 7a 01 00       	jmp    c00193fc <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 eb c2 01 00       	call   c001df5c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 e0 ef 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1020]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 e0 ef 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1020]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba e0 ee 01 c0       	mov    edx,0xc001eee0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 00 f0 01 c0       	mov    edx,0xc001f000
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba d4 17 02 c0       	mov    edx,0xc00217d4
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 0c f0 01 c0       	mov    edx,0xc001f00c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 60 2c 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdd3a0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 40 2c 02 c0    	mov    ax,ds:0xc0022c40
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 40 2c 02 c0    	mov    ds:0xc0022c40,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 e8 b0 01 00       	call   c001df5c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 12 f0 01 c0       	mov    eax,0xc001f012
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 60 ef 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe10a0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 1b f0 01 c0       	mov    eax,0xc001f01b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 e0 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1020]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 b3 9a 01 00       	call   c001df5c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba e0 ee 01 c0       	mov    edx,0xc001eee0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba f0 ee 01 c0       	mov    edx,0xc001eef0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 60 2c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd3a0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 60 2c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd3a0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 7a 84 01 00       	call   c001df5c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 60 84 01 00       	call   c001df5c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 37 ef 01 c0       	mov    eax,0xc001ef37
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 30 ef 01 c0       	mov    eax,0xc001ef30
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 60 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd3a0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 20 ef 01 c0       	mov    esi,0xc001ef20
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 a3 6b 01 00       	call   c001df5c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 00 f0 01 c0       	mov    edx,0xc001f000
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 00 ef 01 c0       	mov    edx,0xc001ef00
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 22 f0 01 c0       	mov    edx,0xc001f022
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 2e f0 01 c0       	mov    edx,0xc001f02e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 42 f0 01 c0       	mov    edx,0xc001f042
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 c9 4f 00 00       	call   c000d199 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 c3 4f 00 00       	call   c000d1a9 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 60 f3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f360
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 60 f3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f360
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 60 f1 01 c0       	mov    eax,0xc001f160
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 a0 f0 01 c0       	mov    eax,0xc001f0a0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 60 f0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0fa0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 20 f9 01 c0    	fld    QWORD PTR ds:0xc001f920
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 28 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f928
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 c4 4c 00 00       	call   c000d1a9 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 ae 4c 00 00       	call   c000d1a9 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 40 f9 01 c0    	fld    DWORD PTR ds:0xc001f940
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 ab 5b 01 00       	call   c001e180 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 30 f9 01 c0    	fld    QWORD PTR ds:0xc001f930
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 52 49 00 00       	call   c000d1c9 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 ed 48 00 00       	call   c000d1a9 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 60 f4 01 c0       	mov    eax,0xc001f460
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 c0 f8 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0740]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 44 f9 01 c0    	fld    DWORD PTR ds:0xc001f944
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 48 f9 01 c0    	fld    DWORD PTR ds:0xc001f948
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 38 f9 01 c0    	fcom   QWORD PTR ds:0xc001f938
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 4c f9 01 c0    	fld    DWORD PTR ds:0xc001f94c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 e9 56 01 00       	call   c001e1a0 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 50 f9 01 c0    	fld    DWORD PTR ds:0xc001f950
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 48 f9 01 c0    	fld    DWORD PTR ds:0xc001f948
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 38 f9 01 c0    	fcom   QWORD PTR ds:0xc001f938
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 4c f9 01 c0    	fld    DWORD PTR ds:0xc001f94c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 5d 56 01 00       	call   c001e1a0 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 20 f9 01 c0    	fld    QWORD PTR ds:0xc001f920
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 28 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f928
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 ea 55 01 00       	call   c001e1a0 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 b6 54 01 00       	call   c001e180 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 98 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f998
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 4f 54 01 00       	call   c001e1a0 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 dc 53 01 00       	call   c001e180 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 98 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f998
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 54 f9 01 c0       	mov    eax,0xc001f954
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 68 f9 01 c0       	mov    eax,0xc001f968
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 c0 42 00 00       	call   c000d1a9 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 c2 42 00 00       	call   c000d1c9 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 20 f9 01 c0    	fld    QWORD PTR ds:0xc001f920
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 28 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f928
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 28 fb 01 c0    	fld    DWORD PTR ds:0xc001fb28
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 a0 f9 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0660]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 bc f9 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0644]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 d8 f9 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0628]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 2c fb 01 c0    	fld    DWORD PTR ds:0xc001fb2c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 4e 47 01 00       	jmp    c001e1a0 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 2b 47 01 00       	call   c001e1a0 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 30 fb 01 c0    	fld    DWORD PTR ds:0xc001fb30
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 d6 44 01 00       	call   c001e1a0 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 a1 44 01 00       	call   c001e1a0 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 98 f9 01 c0    	fadd   QWORD PTR ds:0xc001f998
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 b3 43 01 00       	call   c001e180 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 20 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb20
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 16 43 01 00       	call   c001e1a0 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 30 fb 01 c0    	fld    DWORD PTR ds:0xc001fb30
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 52 42 01 00       	call   c001e1a0 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 1d 42 01 00       	call   c001e1a0 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 98 f9 01 c0    	fadd   QWORD PTR ds:0xc001f998
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 2f 41 01 00       	call   c001e180 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 20 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb20
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 97 40 01 00       	call   c001e1a0 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 30 fb 01 c0    	fld    DWORD PTR ds:0xc001fb30
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 d3 3f 01 00       	call   c001e1a0 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 9e 3f 01 00       	call   c001e1a0 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 98 f9 01 c0    	fadd   QWORD PTR ds:0xc001f998
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 b0 3e 01 00       	call   c001e180 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 20 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb20
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 18 3e 01 00       	call   c001e1a0 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 30 fb 01 c0    	fld    DWORD PTR ds:0xc001fb30
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 54 3d 01 00       	call   c001e1a0 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 1f 3d 01 00       	call   c001e1a0 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 98 f9 01 c0    	fadd   QWORD PTR ds:0xc001f998
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 31 3c 01 00       	call   c001e180 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 20 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb20
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 99 3b 01 00       	call   c001e1a0 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 30 fb 01 c0    	fld    DWORD PTR ds:0xc001fb30
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 d5 3a 01 00       	call   c001e1a0 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 a0 3a 01 00       	call   c001e1a0 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 98 f9 01 c0    	fadd   QWORD PTR ds:0xc001f998
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 b9 39 01 00       	call   c001e180 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 20 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb20
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 1b 39 01 00       	call   c001e1a0 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 00 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0600]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 f4 f9 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe060c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 c3 28 00 00       	call   c000d1a9 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 20 f9 01 c0    	fld    QWORD PTR ds:0xc001f920
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 28 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f928
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 ae 37 01 00       	call   c001e1a0 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 82 36 01 00       	call   c001e180 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 98 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f998
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 27 36 01 00       	call   c001e1a0 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 b4 35 01 00       	call   c001e180 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 98 f9 01 c0    	fcomp  QWORD PTR ds:0xc001f998
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 34 fb 01 c0       	mov    eax,0xc001fb34
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 45 fb 01 c0       	mov    eax,0xc001fb45
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 ae 24 00 00       	call   c000d1a9 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 b0 24 00 00       	call   c000d1c9 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad30:	83 ec 0c             	sub    esp,0xc
c000ad33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 53 88 00 00       	call   c00135ce <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 7c fb 01 c0       	push   0xc001fb7c
c000adb1:	50                   	push   eax
c000adb2:	e8 91 88 00 00       	call   c0013648 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba f8 fb 01 c0       	mov    edx,0xc001fbf8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 34 31 00 00       	call   c000e040 <lockScheduler()>
c000af0c:	e8 63 34 00 00       	call   c000e374 <schedule()>
c000af11:	e8 2c 31 00 00       	call   c000e042 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 2a 72 00 00       	call   c001214e <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 3c 35 02 c0    	push   DWORD PTR ds:0xc002353c
c000af33:	68 85 fb 01 c0       	push   0xc001fb85
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 60 2f 00 00       	call   c000dea0 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 0d c6 00 c0       	push   0xc000c60d
c000af4f:	56                   	push   esi
c000af50:	e8 15 32 00 00       	call   c000e16a <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 b0 eb 00 c0       	push   0xc000ebb0
c000af5e:	ff 35 3c 35 02 c0    	push   DWORD PTR ds:0xc002353c
c000af64:	e8 01 32 00 00       	call   c000e16a <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 f0 34 02 c0       	mov    ds:0xc00234f0,eax
c000af71:	c6 05 cd 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ccd,0x1
c000af78:	e8 2b 74 00 00       	call   c00123a8 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 b9 49 00 00       	call   c000f94d <setupSystemCalls()>
c000af94:	e8 0d 7f 00 00       	call   c0012ea6 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 01 86 00 00       	call   c00135a2 <Device::loadDriversForAll()>
c000afa1:	c7 04 24 92 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb92
c000afa8:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c000afae:	e8 79 13 00 00       	call   c000c32c <loadDLL(char const*)>
c000afb3:	5a                   	pop    edx
c000afb4:	59                   	pop    ecx
c000afb5:	53                   	push   ebx
c000afb6:	50                   	push   eax
c000afb7:	e8 8b 14 00 00       	call   c000c447 <executeDLL(unsigned long, void*)>
c000afbc:	c7 04 24 f4 12 02 c0 	mov    DWORD PTR [esp],0xc00212f4
c000afc3:	e8 d6 1b 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	83 ec 0c             	sub    esp,0xc
c000afce:	6a 02                	push   0x2
c000afd0:	e8 6a 36 00 00       	call   c000e63f <blockTask(TaskState)>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	eb f1                	jmp    c000afcb <Computer::start()+0xcb>

c000afda <firstTask()>:
c000afda:	83 ec 18             	sub    esp,0x18
c000afdd:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c000afe3:	e8 18 ff ff ff       	call   c000af00 <Computer::start()>

c000afe8 <Computer::detectFeatures()>:
c000afe8:	55                   	push   ebp
c000afe9:	57                   	push   edi
c000afea:	56                   	push   esi
c000afeb:	53                   	push   ebx
c000afec:	83 ec 1c             	sub    esp,0x1c
c000afef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000affd:	e8 bd 52 ff ff       	call   c00002bf <detectCPUID>
c000b002:	85 c0                	test   eax,eax
c000b004:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00a:	0f 95 c2             	setne  dl
c000b00d:	83 e0 fd             	and    eax,0xfffffffd
c000b010:	d1 e2                	shl    edx,1
c000b012:	09 d0                	or     eax,edx
c000b014:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01a:	a8 02                	test   al,0x2
c000b01c:	75 46                	jne    c000b064 <Computer::detectFeatures()+0x7c>
c000b01e:	f6 05 95 34 02 c0 04 	test   BYTE PTR ds:0xc0023495,0x4
c000b025:	74 07                	je     c000b02e <Computer::detectFeatures()+0x46>
c000b027:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b02e:	e8 f3 2b 01 00       	call   c001dc26 <x87Detect>
c000b033:	83 e0 01             	and    eax,0x1
c000b036:	c1 e0 04             	shl    eax,0x4
c000b039:	88 c2                	mov    dl,al
c000b03b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b041:	83 e0 ef             	and    eax,0xffffffef
c000b044:	09 d0                	or     eax,edx
c000b046:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04c:	a8 10                	test   al,0x10
c000b04e:	0f 85 10 01 00 00    	jne    c000b164 <Computer::detectFeatures()+0x17c>
c000b054:	84 c0                	test   al,al
c000b056:	0f 88 2b 01 00 00    	js     c000b187 <Computer::detectFeatures()+0x19f>
c000b05c:	83 c4 1c             	add    esp,0x1c
c000b05f:	5b                   	pop    ebx
c000b060:	5e                   	pop    esi
c000b061:	5f                   	pop    edi
c000b062:	5d                   	pop    ebp
c000b063:	c3                   	ret    
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	6a 20                	push   0x20
c000b069:	e8 81 bd 00 00       	call   c0016def <cpuidCheckEDX(unsigned int)>
c000b06e:	83 e0 01             	and    eax,0x1
c000b071:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b078:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b07e:	83 e0 f7             	and    eax,0xfffffff7
c000b081:	09 d0                	or     eax,edx
c000b083:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b089:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b090:	e8 5a bd 00 00       	call   c0016def <cpuidCheckEDX(unsigned int)>
c000b095:	83 e0 01             	and    eax,0x1
c000b098:	88 c2                	mov    dl,al
c000b09a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a0:	83 e0 fe             	and    eax,0xfffffffe
c000b0a3:	09 d0                	or     eax,edx
c000b0a5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ab:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b2:	e8 38 bd 00 00       	call   c0016def <cpuidCheckEDX(unsigned int)>
c000b0b7:	c1 e0 07             	shl    eax,0x7
c000b0ba:	88 c2                	mov    dl,al
c000b0bc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c2:	83 e0 7f             	and    eax,0x7f
c000b0c5:	09 d0                	or     eax,edx
c000b0c7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d4:	e8 16 bd 00 00       	call   c0016def <cpuidCheckEDX(unsigned int)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	83 e0 01             	and    eax,0x1
c000b0df:	c1 e0 05             	shl    eax,0x5
c000b0e2:	88 c2                	mov    dl,al
c000b0e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ea:	83 e0 df             	and    eax,0xffffffdf
c000b0ed:	09 d0                	or     eax,edx
c000b0ef:	f7 05 94 34 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023494,0x401
c000b0f9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ff:	0f 84 a8 00 00 00    	je     c000b1ad <Computer::detectFeatures()+0x1c5>
c000b105:	83 ec 0c             	sub    esp,0xc
c000b108:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b10f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b113:	50                   	push   eax
c000b114:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b118:	55                   	push   ebp
c000b119:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11d:	57                   	push   edi
c000b11e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b122:	56                   	push   esi
c000b123:	68 00 00 00 80       	push   0x80000000
c000b128:	e8 3f bc 00 00       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12d:	83 c4 20             	add    esp,0x20
c000b130:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b137:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13b:	0f 86 dd fe ff ff    	jbe    c000b01e <Computer::detectFeatures()+0x36>
c000b141:	83 ec 0c             	sub    esp,0xc
c000b144:	50                   	push   eax
c000b145:	55                   	push   ebp
c000b146:	57                   	push   edi
c000b147:	56                   	push   esi
c000b148:	68 01 00 00 80       	push   0x80000001
c000b14d:	e8 1a bc 00 00       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b152:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15c:	83 c4 20             	add    esp,0x20
c000b15f:	e9 ba fe ff ff       	jmp    c000b01e <Computer::detectFeatures()+0x36>
c000b164:	e8 77 2a 01 00       	call   c001dbe0 <sseDetect>
c000b169:	88 c2                	mov    dl,al
c000b16b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b171:	c1 e2 07             	shl    edx,0x7
c000b174:	83 e0 7f             	and    eax,0x7f
c000b177:	09 d0                	or     eax,edx
c000b179:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b17f:	84 c0                	test   al,al
c000b181:	0f 89 d5 fe ff ff    	jns    c000b05c <Computer::detectFeatures()+0x74>
c000b187:	e8 44 2a 01 00       	call   c001dbd0 <avxDetect>
c000b18c:	83 e0 01             	and    eax,0x1
c000b18f:	c1 e0 05             	shl    eax,0x5
c000b192:	88 c2                	mov    dl,al
c000b194:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19a:	83 e0 df             	and    eax,0xffffffdf
c000b19d:	09 d0                	or     eax,edx
c000b19f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a5:	83 c4 1c             	add    esp,0x1c
c000b1a8:	5b                   	pop    ebx
c000b1a9:	5e                   	pop    esi
c000b1aa:	5f                   	pop    edi
c000b1ab:	5d                   	pop    ebp
c000b1ac:	c3                   	ret    
c000b1ad:	83 ec 0c             	sub    esp,0xc
c000b1b0:	68 00 02 00 00       	push   0x200
c000b1b5:	e8 35 bc 00 00       	call   c0016def <cpuidCheckEDX(unsigned int)>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	e9 43 ff ff ff       	jmp    c000b105 <Computer::detectFeatures()+0x11d>

c000b1c2 <Computer::displayFeatures()>:
c000b1c2:	c3                   	ret    
c000b1c3:	90                   	nop

c000b1c4 <Computer::rdmsr(unsigned int)>:
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d2:	74 0a                	je     c000b1de <Computer::rdmsr(unsigned int)+0x1a>
c000b1d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1d8:	0f 32                	rdmsr  
c000b1da:	83 c4 0c             	add    esp,0xc
c000b1dd:	c3                   	ret    
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	68 ae fb 01 c0       	push   0xc001fbae
c000b1e6:	e8 d1 1a 00 00       	call   c000ccbc <panic(char const*)>
c000b1eb:	83 c4 10             	add    esp,0x10
c000b1ee:	eb e4                	jmp    c000b1d4 <Computer::rdmsr(unsigned int)+0x10>

c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f0:	57                   	push   edi
c000b1f1:	56                   	push   esi
c000b1f2:	52                   	push   edx
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b1ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b206:	74 0e                	je     c000b216 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b208:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20c:	89 f0                	mov    eax,esi
c000b20e:	89 fa                	mov    edx,edi
c000b210:	0f 30                	wrmsr  
c000b212:	58                   	pop    eax
c000b213:	5e                   	pop    esi
c000b214:	5f                   	pop    edi
c000b215:	c3                   	ret    
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	68 b4 fb 01 c0       	push   0xc001fbb4
c000b21e:	e8 99 1a 00 00       	call   c000ccbc <panic(char const*)>
c000b223:	83 c4 10             	add    esp,0x10
c000b226:	eb e0                	jmp    c000b208 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b228 <Computer::nmiEnabled()>:
c000b228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b232:	c3                   	ret    
c000b233:	90                   	nop

c000b234 <Computer::readCMOS(unsigned char)>:
c000b234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b238:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b23f:	19 c0                	sbb    eax,eax
c000b241:	83 e0 80             	and    eax,0xffffff80
c000b244:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b248:	e6 70                	out    0x70,al
c000b24a:	e4 71                	in     al,0x71
c000b24c:	c3                   	ret    
c000b24d:	90                   	nop

c000b24e <Computer::enableNMI(bool)>:
c000b24e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b256:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b264:	eb ce                	jmp    c000b234 <Computer::readCMOS(unsigned char)>

c000b266 <Computer::open(int, int, void*)>:
c000b266:	56                   	push   esi
c000b267:	53                   	push   ebx
c000b268:	83 ec 10             	sub    esp,0x10
c000b26b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b26f:	f6 05 94 34 02 c0 04 	test   BYTE PTR ds:0xc0023494,0x4
c000b276:	68 68 22 00 00       	push   0x2268
c000b27b:	0f 94 05 00 21 02 c0 	sete   BYTE PTR ds:0xc0022100
c000b282:	e8 c7 6e 00 00       	call   c001214e <operator new(unsigned long)>
c000b287:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28a:	89 c6                	mov    esi,eax
c000b28c:	e8 fb b1 00 00       	call   c001648c <ACPI::ACPI()>
c000b291:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b297:	58                   	pop    eax
c000b298:	5a                   	pop    edx
c000b299:	56                   	push   esi
c000b29a:	53                   	push   ebx
c000b29b:	e8 b8 81 00 00       	call   c0013458 <Device::addChild(Device*)>
c000b2a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a3:	e8 40 fd ff ff       	call   c000afe8 <Computer::detectFeatures()>
c000b2a8:	59                   	pop    ecx
c000b2a9:	5e                   	pop    esi
c000b2aa:	6a 01                	push   0x1
c000b2ac:	53                   	push   ebx
c000b2ad:	e8 9c ff ff ff       	call   c000b24e <Computer::enableNMI(bool)>
c000b2b2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2b9:	e8 90 6e 00 00       	call   c001214e <operator new(unsigned long)>
c000b2be:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c1:	89 c6                	mov    esi,eax
c000b2c3:	e8 f2 bb 00 00       	call   c0016eba <CPU::CPU()>
c000b2c8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2ce:	58                   	pop    eax
c000b2cf:	5a                   	pop    edx
c000b2d0:	56                   	push   esi
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 81 81 00 00       	call   c0013458 <Device::addChild(Device*)>
c000b2d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e3:	6a 00                	push   0x0
c000b2e5:	6a 00                	push   0x0
c000b2e7:	50                   	push   eax
c000b2e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2eb:	83 c4 20             	add    esp,0x20
c000b2ee:	e8 cd 86 00 00       	call   c00139c0 <setupFPU()>
c000b2f3:	83 ec 08             	sub    esp,0x8
c000b2f6:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fc:	50                   	push   eax
c000b2fd:	53                   	push   ebx
c000b2fe:	e8 55 81 00 00       	call   c0013458 <Device::addChild(Device*)>
c000b303:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b309:	8b 10                	mov    edx,DWORD PTR [eax]
c000b30b:	6a 00                	push   0x0
c000b30d:	6a 00                	push   0x0
c000b30f:	6a 00                	push   0x0
c000b311:	50                   	push   eax
c000b312:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b315:	83 c4 14             	add    esp,0x14
c000b318:	68 da af 00 c0       	push   0xc000afda
c000b31d:	e8 48 2f 00 00       	call   c000e26a <setupMultitasking(void (*)())>
c000b322:	83 c4 14             	add    esp,0x14
c000b325:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b32a:	5b                   	pop    ebx
c000b32b:	5e                   	pop    esi
c000b32c:	c3                   	ret    
c000b32d:	90                   	nop

c000b32e <Computer::disableNMI()>:
c000b32e:	6a 00                	push   0x0
c000b330:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b334:	e8 15 ff ff ff       	call   c000b24e <Computer::enableNMI(bool)>
c000b339:	58                   	pop    eax
c000b33a:	5a                   	pop    edx
c000b33b:	c3                   	ret    

c000b33c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b340:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b347:	19 c0                	sbb    eax,eax
c000b349:	83 e0 80             	and    eax,0xffffff80
c000b34c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b350:	e6 70                	out    0x70,al
c000b352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b356:	e6 71                	out    0x71,al
c000b358:	c3                   	ret    
c000b359:	90                   	nop

c000b35a <Computer::handleNMI()>:
c000b35a:	56                   	push   esi
c000b35b:	53                   	push   ebx
c000b35c:	83 ec 10             	sub    esp,0x10
c000b35f:	e4 92                	in     al,0x92
c000b361:	89 c6                	mov    esi,eax
c000b363:	e4 61                	in     al,0x61
c000b365:	68 ba fb 01 c0       	push   0xc001fbba
c000b36a:	88 c3                	mov    bl,al
c000b36c:	e8 2d 18 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	83 e6 10             	and    esi,0x10
c000b377:	75 0d                	jne    c000b386 <Computer::handleNMI()+0x2c>
c000b379:	f6 c3 40             	test   bl,0x40
c000b37c:	75 1d                	jne    c000b39b <Computer::handleNMI()+0x41>
c000b37e:	84 db                	test   bl,bl
c000b380:	78 2d                	js     c000b3af <Computer::handleNMI()+0x55>
c000b382:	58                   	pop    eax
c000b383:	5b                   	pop    ebx
c000b384:	5e                   	pop    esi
c000b385:	c3                   	ret    
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	68 cb fb 01 c0       	push   0xc001fbcb
c000b38e:	e8 29 19 00 00       	call   c000ccbc <panic(char const*)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	f6 c3 40             	test   bl,0x40
c000b399:	74 e3                	je     c000b37e <Computer::handleNMI()+0x24>
c000b39b:	83 ec 0c             	sub    esp,0xc
c000b39e:	68 d8 fb 01 c0       	push   0xc001fbd8
c000b3a3:	e8 14 19 00 00       	call   c000ccbc <panic(char const*)>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	84 db                	test   bl,bl
c000b3ad:	79 d3                	jns    c000b382 <Computer::handleNMI()+0x28>
c000b3af:	c7 44 24 10 e2 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbe2
c000b3b7:	5a                   	pop    edx
c000b3b8:	5b                   	pop    ebx
c000b3b9:	5e                   	pop    esi
c000b3ba:	e9 fd 18 00 00       	jmp    c000ccbc <panic(char const*)>
c000b3bf:	90                   	nop

c000b3c0 <Computer::setDiskActivityLight(int, bool)>:
c000b3c0:	56                   	push   esi
c000b3c1:	53                   	push   ebx
c000b3c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3c6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3cb:	77 1b                	ja     c000b3e8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3cd:	e4 92                	in     al,0x92
c000b3cf:	bb 40 00 00 00       	mov    ebx,0x40
c000b3d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3d8:	89 da                	mov    edx,ebx
c000b3da:	d3 e2                	shl    edx,cl
c000b3dc:	89 f1                	mov    ecx,esi
c000b3de:	f7 d2                	not    edx
c000b3e0:	d3 e3                	shl    ebx,cl
c000b3e2:	21 d0                	and    eax,edx
c000b3e4:	09 d8                	or     eax,ebx
c000b3e6:	e6 92                	out    0x92,al
c000b3e8:	5b                   	pop    ebx
c000b3e9:	5e                   	pop    esi
c000b3ea:	c3                   	ret    

c000b3eb <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b3eb:	55                   	push   ebp
c000b3ec:	89 e5                	mov    ebp,esp
c000b3ee:	57                   	push   edi
c000b3ef:	56                   	push   esi
c000b3f0:	53                   	push   ebx
c000b3f1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b3f7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b3fa:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b3fd:	85 c0                	test   eax,eax
c000b3ff:	0f 95 c1             	setne  cl
c000b402:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b406:	0f 94 c2             	sete   dl
c000b409:	84 d1                	test   cl,dl
c000b40b:	74 26                	je     c000b433 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b40d:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b414:	74 1d                	je     c000b433 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b416:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b419:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b41f:	89 d6                	mov    esi,edx
c000b421:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b427:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b42d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b430:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	05 ff 0f 00 00       	add    eax,0xfff
c000b43b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b43e:	6a 01                	push   0x1
c000b440:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b446:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b44c:	e8 6c 5b 00 00       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	89 c6                	mov    esi,eax
c000b456:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b45c:	0f 86 21 01 00 00    	jbe    c000b583 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b462:	c1 eb 0c             	shr    ebx,0xc
c000b465:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b46f:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b475:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b478:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b47b:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b481:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b484:	29 d8                	sub    eax,ebx
c000b486:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b48c:	0f 83 f4 00 00 00    	jae    c000b586 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b492:	83 ec 0c             	sub    esp,0xc
c000b495:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b49b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b49e:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4a3:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b4a5:	52                   	push   edx
c000b4a6:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b4ac:	52                   	push   edx
c000b4ad:	76 05                	jbe    c000b4b4 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b4af:	b8 00 10 00 00       	mov    eax,0x1000
c000b4b4:	31 d2                	xor    edx,edx
c000b4b6:	52                   	push   edx
c000b4b7:	50                   	push   eax
c000b4b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b4bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b4be:	83 c4 20             	add    esp,0x20
c000b4c1:	85 c0                	test   eax,eax
c000b4c3:	74 1f                	je     c000b4e4 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b4c5:	51                   	push   ecx
c000b4c6:	51                   	push   ecx
c000b4c7:	50                   	push   eax
c000b4c8:	68 1c fc 01 c0       	push   0xc001fc1c
c000b4cd:	e8 cc 16 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000b4d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b4d5:	e8 19 5e 00 00       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	31 c0                	xor    eax,eax
c000b4df:	e9 7c 01 00 00       	jmp    c000b660 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b4e4:	e8 57 2b 00 00       	call   c000e040 <lockScheduler()>
c000b4e9:	e8 55 22 00 00       	call   c000d743 <Phys::allocatePage()>
c000b4ee:	6a 07                	push   0x7
c000b4f0:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b4f6:	56                   	push   esi
c000b4f7:	50                   	push   eax
c000b4f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b4fe:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b501:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b507:	e8 e8 60 00 00       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b50c:	83 c4 0c             	add    esp,0xc
c000b50f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b515:	6a 00                	push   0x0
c000b517:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b51d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b520:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b526:	e8 27 5f 00 00       	call   c0011452 <VAS::mapOtherVASIn(bool, VAS*)>
c000b52b:	58                   	pop    eax
c000b52c:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b532:	5a                   	pop    edx
c000b533:	68 07 04 00 00       	push   0x407
c000b538:	53                   	push   ebx
c000b539:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b53f:	50                   	push   eax
c000b540:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b546:	6a 00                	push   0x0
c000b548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b54d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b550:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b556:	e8 99 67 00 00       	call   c0011cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b55b:	83 c4 1c             	add    esp,0x1c
c000b55e:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b564:	68 00 10 00 00       	push   0x1000
c000b569:	50                   	push   eax
c000b56a:	56                   	push   esi
c000b56b:	e8 62 50 ff ff       	call   c00005d2 <memcpy>
c000b570:	e8 cd 2a 00 00       	call   c000e042 <unlockScheduler()>
c000b575:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	e9 f5 fe ff ff       	jmp    c000b478 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b583:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b586:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b590:	0f 86 bc 00 00 00    	jbe    c000b652 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b596:	e8 a5 2a 00 00       	call   c000e040 <lockScheduler()>
c000b59b:	51                   	push   ecx
c000b59c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b5a2:	6a 00                	push   0x0
c000b5a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b5a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b5ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b5b2:	e8 9b 5e 00 00       	call   c0011452 <VAS::mapOtherVASIn(bool, VAS*)>
c000b5b7:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	c1 e8 0c             	shr    eax,0xc
c000b5c3:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b5cd:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b5d3:	e8 6b 21 00 00       	call   c000d743 <Phys::allocatePage()>
c000b5d8:	6a 07                	push   0x7
c000b5da:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b5e0:	56                   	push   esi
c000b5e1:	50                   	push   eax
c000b5e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b5e8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b5eb:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b5f1:	e8 fe 5f 00 00       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b5f6:	58                   	pop    eax
c000b5f7:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b5fd:	5a                   	pop    edx
c000b5fe:	68 07 04 00 00       	push   0x407
c000b603:	53                   	push   ebx
c000b604:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b60a:	50                   	push   eax
c000b60b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b611:	6a 00                	push   0x0
c000b613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b61b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b621:	e8 ce 66 00 00       	call   c0011cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b626:	83 c4 1c             	add    esp,0x1c
c000b629:	68 00 10 00 00       	push   0x1000
c000b62e:	6a 00                	push   0x0
c000b630:	56                   	push   esi
c000b631:	e8 d2 4f ff ff       	call   c0000608 <memset>
c000b636:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000b645:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000b64b:	77 86                	ja     c000b5d3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000b64d:	e8 f0 29 00 00       	call   c000e042 <unlockScheduler()>
c000b652:	83 ec 0c             	sub    esp,0xc
c000b655:	56                   	push   esi
c000b656:	e8 98 5c 00 00       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c000b65b:	83 c4 10             	add    esp,0x10
c000b65e:	b0 01                	mov    al,0x1
c000b660:	8d 65 f4             	lea    esp,[ebp-0xc]
c000b663:	5b                   	pop    ebx
c000b664:	5e                   	pop    esi
c000b665:	5f                   	pop    edi
c000b666:	5d                   	pop    ebp
c000b667:	c3                   	ret    

c000b668 <loadProgramIntoMemory(Process*, char const*)>:
c000b668:	55                   	push   ebp
c000b669:	57                   	push   edi
c000b66a:	56                   	push   esi
c000b66b:	53                   	push   ebx
c000b66c:	83 ec 48             	sub    esp,0x48
c000b66f:	68 14 01 00 00       	push   0x114
c000b674:	e8 d5 6a 00 00       	call   c001214e <operator new(unsigned long)>
c000b679:	83 c4 0c             	add    esp,0xc
c000b67c:	89 c6                	mov    esi,eax
c000b67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b682:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b686:	50                   	push   eax
c000b687:	e8 f0 6e 00 00       	call   c001257c <File::File(char const*, Process*)>
c000b68c:	58                   	pop    eax
c000b68d:	5a                   	pop    edx
c000b68e:	6a 01                	push   0x1
c000b690:	56                   	push   esi
c000b691:	e8 4a 6f 00 00       	call   c00125e0 <File::open(FileOpenMode)>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	85 c0                	test   eax,eax
c000b69b:	0f 85 47 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6a1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b6a9:	83 ec 0c             	sub    esp,0xc
c000b6ac:	6a 34                	push   0x34
c000b6ae:	e8 e6 1a 00 00       	call   c000d199 <malloc>
c000b6b3:	89 c3                	mov    ebx,eax
c000b6b5:	58                   	pop    eax
c000b6b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6b8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000b6bc:	57                   	push   edi
c000b6bd:	53                   	push   ebx
c000b6be:	6a 00                	push   0x0
c000b6c0:	6a 34                	push   0x34
c000b6c2:	56                   	push   esi
c000b6c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6c6:	83 c4 20             	add    esp,0x20
c000b6c9:	85 c0                	test   eax,eax
c000b6cb:	0f 85 17 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6d1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000b6d7:	0f 85 0b 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000b6e0:	85 c0                	test   eax,eax
c000b6e2:	0f 84 00 01 00 00    	je     c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6e8:	31 d2                	xor    edx,edx
c000b6ea:	55                   	push   ebp
c000b6eb:	52                   	push   edx
c000b6ec:	50                   	push   eax
c000b6ed:	56                   	push   esi
c000b6ee:	e8 ab 6f 00 00       	call   c001269e <File::seek(unsigned long long)>
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	85 c0                	test   eax,eax
c000b6f8:	0f 85 ea 00 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b704:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b708:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b70c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b710:	0f af c2             	imul   eax,edx
c000b713:	50                   	push   eax
c000b714:	e8 80 1a 00 00       	call   c000d199 <malloc>
c000b719:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b71c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b720:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b722:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b726:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b72a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b72e:	0f af c2             	imul   eax,edx
c000b731:	99                   	cdq    
c000b732:	52                   	push   edx
c000b733:	50                   	push   eax
c000b734:	56                   	push   esi
c000b735:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b738:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b73b:	83 c4 20             	add    esp,0x20
c000b73e:	85 c0                	test   eax,eax
c000b740:	0f 84 a2 00 00 00    	je     c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b746:	31 d2                	xor    edx,edx
c000b748:	51                   	push   ecx
c000b749:	52                   	push   edx
c000b74a:	50                   	push   eax
c000b74b:	56                   	push   esi
c000b74c:	e8 4d 6f 00 00       	call   c001269e <File::seek(unsigned long long)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	85 c0                	test   eax,eax
c000b756:	0f 85 8c 00 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b763:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b767:	31 ed                	xor    ebp,ebp
c000b769:	0f af c2             	imul   eax,edx
c000b76c:	50                   	push   eax
c000b76d:	e8 27 1a 00 00       	call   c000d199 <malloc>
c000b772:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b779:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b783:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b787:	0f af c2             	imul   eax,edx
c000b78a:	99                   	cdq    
c000b78b:	52                   	push   edx
c000b78c:	50                   	push   eax
c000b78d:	56                   	push   esi
c000b78e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b791:	83 c4 20             	add    esp,0x20
c000b794:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b79c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000b7a0:	0f 86 80 00 00 00    	jbe    c000b826 <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000b7a6:	0f b7 fd             	movzx  edi,bp
c000b7a9:	c1 e7 05             	shl    edi,0x5
c000b7ac:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000b7b0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000b7b3:	75 6b                	jne    c000b820 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b7b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b7b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7bc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000b7bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b7c3:	52                   	push   edx
c000b7c4:	31 d2                	xor    edx,edx
c000b7c6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000b7c9:	52                   	push   edx
c000b7ca:	50                   	push   eax
c000b7cb:	56                   	push   esi
c000b7cc:	e8 cd 6e 00 00       	call   c001269e <File::seek(unsigned long long)>
c000b7d1:	83 c4 10             	add    esp,0x10
c000b7d4:	85 c0                	test   eax,eax
c000b7d6:	74 17                	je     c000b7ef <loadProgramIntoMemory(Process*, char const*)+0x187>
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	68 47 fc 01 c0       	push   0xc001fc47
c000b7e0:	e8 b9 13 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000b7e5:	83 c4 10             	add    esp,0x10
c000b7e8:	31 c0                	xor    eax,eax
c000b7ea:	e9 87 00 00 00       	jmp    c000b876 <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000b7ef:	83 ec 0c             	sub    esp,0xc
c000b7f2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000b7f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000b7f8:	50                   	push   eax
c000b7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b801:	56                   	push   esi
c000b802:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b806:	e8 e0 fb ff ff       	call   c000b3eb <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000b80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b80f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000b81a:	73 04                	jae    c000b820 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b81c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b820:	45                   	inc    ebp
c000b821:	e9 76 ff ff ff       	jmp    c000b79c <loadProgramIntoMemory(Process*, char const*)+0x134>
c000b826:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000b82a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b82e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b832:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000b841:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b846:	05 00 10 00 00       	add    eax,0x1000
c000b84b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b852:	e8 52 19 00 00       	call   c000d1a9 <free>
c000b857:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b85a:	e8 4a 19 00 00       	call   c000d1a9 <free>
c000b85f:	58                   	pop    eax
c000b860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b864:	e8 40 19 00 00       	call   c000d1a9 <free>
c000b869:	89 34 24             	mov    DWORD PTR [esp],esi
c000b86c:	e8 cd 6d 00 00       	call   c001263e <File::close()>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	b0 01                	mov    al,0x1
c000b876:	83 c4 3c             	add    esp,0x3c
c000b879:	5b                   	pop    ebx
c000b87a:	5e                   	pop    esi
c000b87b:	5f                   	pop    edi
c000b87c:	5d                   	pop    ebp
c000b87d:	c3                   	ret    

c000b87e <runtimeReferenceHelper()>:
c000b87e:	83 ec 18             	sub    esp,0x18
c000b881:	68 4f fc 01 c0       	push   0xc001fc4f
c000b886:	e8 13 13 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000b88b:	fa                   	cli    
c000b88c:	83 c4 10             	add    esp,0x10
c000b88f:	eb fe                	jmp    c000b88f <runtimeReferenceHelper()+0x11>

c000b891 <getAddressOfKernelSymbol(char const*)>:
c000b891:	57                   	push   edi
c000b892:	56                   	push   esi
c000b893:	53                   	push   ebx
c000b894:	31 db                	xor    ebx,ebx
c000b896:	39 1d 80 34 02 c0    	cmp    DWORD PTR ds:0xc0023480,ebx
c000b89c:	7e 3c                	jle    c000b8da <getAddressOfKernelSymbol(char const*)+0x49>
c000b89e:	8b 34 9d 00 34 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdcc00]
c000b8a5:	31 ff                	xor    edi,edi
c000b8a7:	39 3c 9d 00 33 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcd00],edi
c000b8ae:	7e 27                	jle    c000b8d7 <getAddressOfKernelSymbol(char const*)+0x46>
c000b8b0:	50                   	push   eax
c000b8b1:	50                   	push   eax
c000b8b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8b8:	03 04 9d 80 33 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdcc80]
c000b8bf:	50                   	push   eax
c000b8c0:	e8 33 4e ff ff       	call   c00006f8 <strcmp>
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	85 c0                	test   eax,eax
c000b8ca:	75 05                	jne    c000b8d1 <getAddressOfKernelSymbol(char const*)+0x40>
c000b8cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b8cf:	eb 0b                	jmp    c000b8dc <getAddressOfKernelSymbol(char const*)+0x4b>
c000b8d1:	83 c6 10             	add    esi,0x10
c000b8d4:	47                   	inc    edi
c000b8d5:	eb d0                	jmp    c000b8a7 <getAddressOfKernelSymbol(char const*)+0x16>
c000b8d7:	43                   	inc    ebx
c000b8d8:	eb bc                	jmp    c000b896 <getAddressOfKernelSymbol(char const*)+0x5>
c000b8da:	31 c0                	xor    eax,eax
c000b8dc:	5b                   	pop    ebx
c000b8dd:	5e                   	pop    esi
c000b8de:	5f                   	pop    edi
c000b8df:	c3                   	ret    

c000b8e0 <loadKernelSymbolTable(char const*)>:
c000b8e0:	55                   	push   ebp
c000b8e1:	57                   	push   edi
c000b8e2:	56                   	push   esi
c000b8e3:	53                   	push   ebx
c000b8e4:	83 ec 68             	sub    esp,0x68
c000b8e7:	8b 35 3c 35 02 c0    	mov    esi,DWORD PTR ds:0xc002353c
c000b8ed:	68 14 01 00 00       	push   0x114
c000b8f2:	e8 57 68 00 00       	call   c001214e <operator new(unsigned long)>
c000b8f7:	83 c4 0c             	add    esp,0xc
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	56                   	push   esi
c000b8fd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000b901:	50                   	push   eax
c000b902:	e8 75 6c 00 00       	call   c001257c <File::File(char const*, Process*)>
c000b907:	5e                   	pop    esi
c000b908:	5f                   	pop    edi
c000b909:	6a 01                	push   0x1
c000b90b:	53                   	push   ebx
c000b90c:	e8 cf 6c 00 00       	call   c00125e0 <File::open(FileOpenMode)>
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	31 d2                	xor    edx,edx
c000b916:	85 c0                	test   eax,eax
c000b918:	0f 85 79 02 00 00    	jne    c000bb97 <loadKernelSymbolTable(char const*)+0x2b7>
c000b91e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b926:	83 ec 0c             	sub    esp,0xc
c000b929:	6a 34                	push   0x34
c000b92b:	e8 69 18 00 00       	call   c000d199 <malloc>
c000b930:	59                   	pop    ecx
c000b931:	89 c7                	mov    edi,eax
c000b933:	8d 74 24 34          	lea    esi,[esp+0x34]
c000b937:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b939:	56                   	push   esi
c000b93a:	57                   	push   edi
c000b93b:	6a 00                	push   0x0
c000b93d:	6a 34                	push   0x34
c000b93f:	53                   	push   ebx
c000b940:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b943:	83 c4 20             	add    esp,0x20
c000b946:	85 c0                	test   eax,eax
c000b948:	74 17                	je     c000b961 <loadKernelSymbolTable(char const*)+0x81>
c000b94a:	83 ec 0c             	sub    esp,0xc
c000b94d:	68 71 fc 01 c0       	push   0xc001fc71
c000b952:	e8 65 13 00 00       	call   c000ccbc <panic(char const*)>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	31 d2                	xor    edx,edx
c000b95c:	e9 36 02 00 00       	jmp    c000bb97 <loadKernelSymbolTable(char const*)+0x2b7>
c000b961:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000b967:	75 e1                	jne    c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b969:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000b96c:	85 c0                	test   eax,eax
c000b96e:	74 da                	je     c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b970:	52                   	push   edx
c000b971:	31 d2                	xor    edx,edx
c000b973:	52                   	push   edx
c000b974:	50                   	push   eax
c000b975:	53                   	push   ebx
c000b976:	e8 23 6d 00 00       	call   c001269e <File::seek(unsigned long long)>
c000b97b:	83 c4 10             	add    esp,0x10
c000b97e:	85 c0                	test   eax,eax
c000b980:	75 c8                	jne    c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b982:	83 ec 0c             	sub    esp,0xc
c000b985:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b989:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b98d:	31 ed                	xor    ebp,ebp
c000b98f:	0f af c2             	imul   eax,edx
c000b992:	50                   	push   eax
c000b993:	e8 01 18 00 00       	call   c000d199 <malloc>
c000b998:	89 34 24             	mov    DWORD PTR [esp],esi
c000b99b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b99f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b9a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9a5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b9a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b9ad:	0f af c2             	imul   eax,edx
c000b9b0:	99                   	cdq    
c000b9b1:	52                   	push   edx
c000b9b2:	50                   	push   eax
c000b9b3:	53                   	push   ebx
c000b9b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b9b7:	83 c4 20             	add    esp,0x20
c000b9ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b9c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b9ca:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b9d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b9da:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000b9de:	0f 86 aa 00 00 00    	jbe    c000ba8e <loadKernelSymbolTable(char const*)+0x1ae>
c000b9e4:	0f b7 f5             	movzx  esi,bp
c000b9e7:	6b f6 28             	imul   esi,esi,0x28
c000b9ea:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000b9ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000b9f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b9f5:	50                   	push   eax
c000b9f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9fa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000b9fe:	8b 16                	mov    edx,DWORD PTR [esi]
c000ba00:	6b c0 28             	imul   eax,eax,0x28
c000ba03:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000ba07:	89 d0                	mov    eax,edx
c000ba09:	31 d2                	xor    edx,edx
c000ba0b:	52                   	push   edx
c000ba0c:	50                   	push   eax
c000ba0d:	53                   	push   ebx
c000ba0e:	e8 8b 6c 00 00       	call   c001269e <File::seek(unsigned long long)>
c000ba13:	83 c4 0c             	add    esp,0xc
c000ba16:	6a 20                	push   0x20
c000ba18:	6a 00                	push   0x0
c000ba1a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba1e:	52                   	push   edx
c000ba1f:	e8 e4 4b ff ff       	call   c0000608 <memset>
c000ba24:	58                   	pop    eax
c000ba25:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba27:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000ba2b:	51                   	push   ecx
c000ba2c:	8d 54 24 40          	lea    edx,[esp+0x40]
c000ba30:	52                   	push   edx
c000ba31:	6a 00                	push   0x0
c000ba33:	6a 1f                	push   0x1f
c000ba35:	53                   	push   ebx
c000ba36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba39:	83 c4 18             	add    esp,0x18
c000ba3c:	68 88 fc 01 c0       	push   0xc001fc88
c000ba41:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba45:	52                   	push   edx
c000ba46:	e8 ad 4c ff ff       	call   c00006f8 <strcmp>
c000ba4b:	83 c4 10             	add    esp,0x10
c000ba4e:	85 c0                	test   eax,eax
c000ba50:	75 0f                	jne    c000ba61 <loadKernelSymbolTable(char const*)+0x181>
c000ba52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba61:	50                   	push   eax
c000ba62:	50                   	push   eax
c000ba63:	68 90 fc 01 c0       	push   0xc001fc90
c000ba68:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ba6c:	50                   	push   eax
c000ba6d:	e8 86 4c ff ff       	call   c00006f8 <strcmp>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	85 c0                	test   eax,eax
c000ba77:	75 0f                	jne    c000ba88 <loadKernelSymbolTable(char const*)+0x1a8>
c000ba79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba88:	45                   	inc    ebp
c000ba89:	e9 4c ff ff ff       	jmp    c000b9da <loadKernelSymbolTable(char const*)+0xfa>
c000ba8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ba93:	75 10                	jne    c000baa5 <loadKernelSymbolTable(char const*)+0x1c5>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	68 98 fc 01 c0       	push   0xc001fc98
c000ba9d:	e8 1a 12 00 00       	call   c000ccbc <panic(char const*)>
c000baa2:	83 c4 10             	add    esp,0x10
c000baa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000baaa:	75 10                	jne    c000babc <loadKernelSymbolTable(char const*)+0x1dc>
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	68 98 fc 01 c0       	push   0xc001fc98
c000bab4:	e8 03 12 00 00       	call   c000ccbc <panic(char const*)>
c000bab9:	83 c4 10             	add    esp,0x10
c000babc:	31 d2                	xor    edx,edx
c000babe:	50                   	push   eax
c000babf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac3:	52                   	push   edx
c000bac4:	50                   	push   eax
c000bac5:	53                   	push   ebx
c000bac6:	e8 d3 6b 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bacb:	5a                   	pop    edx
c000bacc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bad0:	e8 c4 16 00 00       	call   c000d199 <malloc>
c000bad5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000badd:	89 c1                	mov    ecx,eax
c000badf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bae7:	5e                   	pop    esi
c000bae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baea:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000baee:	55                   	push   ebp
c000baef:	51                   	push   ecx
c000baf0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000baf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bafc:	53                   	push   ebx
c000bafd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb00:	83 c4 14             	add    esp,0x14
c000bb03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bb07:	e8 8d 16 00 00       	call   c000d199 <malloc>
c000bb0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb0f:	89 c6                	mov    esi,eax
c000bb11:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb13:	56                   	push   esi
c000bb14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb1c:	53                   	push   ebx
c000bb1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb24:	8b 15 80 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023480
c000bb2a:	83 c4 1c             	add    esp,0x1c
c000bb2d:	c1 e8 04             	shr    eax,0x4
c000bb30:	89 04 95 00 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcd00],eax
c000bb37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bb3b:	31 d2                	xor    edx,edx
c000bb3d:	52                   	push   edx
c000bb3e:	50                   	push   eax
c000bb3f:	53                   	push   ebx
c000bb40:	e8 59 6b 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bb45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb48:	31 d2                	xor    edx,edx
c000bb4a:	56                   	push   esi
c000bb4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb4f:	52                   	push   edx
c000bb50:	50                   	push   eax
c000bb51:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb53:	53                   	push   ebx
c000bb54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb57:	83 c4 14             	add    esp,0x14
c000bb5a:	53                   	push   ebx
c000bb5b:	e8 de 6a 00 00       	call   c001263e <File::close()>
c000bb60:	5d                   	pop    ebp
c000bb61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb65:	e8 3f 16 00 00       	call   c000d1a9 <free>
c000bb6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb6d:	e8 37 16 00 00       	call   c000d1a9 <free>
c000bb72:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c000bb77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bb7b:	8d 50 01             	lea    edx,[eax+0x1]
c000bb7e:	89 0c 85 00 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc00],ecx
c000bb85:	89 15 80 34 02 c0    	mov    DWORD PTR ds:0xc0023480,edx
c000bb8b:	89 34 85 80 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc80],esi
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	b2 01                	mov    dl,0x1
c000bb97:	83 c4 5c             	add    esp,0x5c
c000bb9a:	88 d0                	mov    al,dl
c000bb9c:	5b                   	pop    ebx
c000bb9d:	5e                   	pop    esi
c000bb9e:	5f                   	pop    edi
c000bb9f:	5d                   	pop    ebp
c000bba0:	c3                   	ret    

c000bba1 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bba1:	55                   	push   ebp
c000bba2:	57                   	push   edi
c000bba3:	56                   	push   esi
c000bba4:	53                   	push   ebx
c000bba5:	81 ec 68 03 00 00    	sub    esp,0x368
c000bbab:	8b 1d 3c 35 02 c0    	mov    ebx,DWORD PTR ds:0xc002353c
c000bbb1:	68 14 01 00 00       	push   0x114
c000bbb6:	e8 93 65 00 00       	call   c001214e <operator new(unsigned long)>
c000bbbb:	83 c4 0c             	add    esp,0xc
c000bbbe:	89 c5                	mov    ebp,eax
c000bbc0:	53                   	push   ebx
c000bbc1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000bbc8:	50                   	push   eax
c000bbc9:	e8 ae 69 00 00       	call   c001257c <File::File(char const*, Process*)>
c000bbce:	58                   	pop    eax
c000bbcf:	5a                   	pop    edx
c000bbd0:	6a 01                	push   0x1
c000bbd2:	55                   	push   ebp
c000bbd3:	e8 08 6a 00 00       	call   c00125e0 <File::open(FileOpenMode)>
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	85 c0                	test   eax,eax
c000bbdd:	0f 85 2e 01 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bbe3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bbeb:	83 ec 0c             	sub    esp,0xc
c000bbee:	6a 34                	push   0x34
c000bbf0:	e8 a4 15 00 00       	call   c000d199 <malloc>
c000bbf5:	89 c7                	mov    edi,eax
c000bbf7:	58                   	pop    eax
c000bbf8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bbfb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bbff:	53                   	push   ebx
c000bc00:	57                   	push   edi
c000bc01:	6a 00                	push   0x0
c000bc03:	6a 34                	push   0x34
c000bc05:	55                   	push   ebp
c000bc06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc09:	83 c4 20             	add    esp,0x20
c000bc0c:	85 c0                	test   eax,eax
c000bc0e:	0f 85 fd 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bc1a:	0f 85 f1 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc20:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bc23:	85 c0                	test   eax,eax
c000bc25:	0f 84 e6 00 00 00    	je     c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc2b:	31 d2                	xor    edx,edx
c000bc2d:	56                   	push   esi
c000bc2e:	52                   	push   edx
c000bc2f:	50                   	push   eax
c000bc30:	55                   	push   ebp
c000bc31:	e8 68 6a 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 85 d0 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc41:	83 ec 0c             	sub    esp,0xc
c000bc44:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000bc47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc4b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc53:	0f af c2             	imul   eax,edx
c000bc56:	50                   	push   eax
c000bc57:	e8 3d 15 00 00       	call   c000d199 <malloc>
c000bc5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc5f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bc63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bc66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc6e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc72:	0f af c2             	imul   eax,edx
c000bc75:	99                   	cdq    
c000bc76:	52                   	push   edx
c000bc77:	50                   	push   eax
c000bc78:	55                   	push   ebp
c000bc79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bc7c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bc7f:	83 c4 20             	add    esp,0x20
c000bc82:	85 c0                	test   eax,eax
c000bc84:	0f 84 87 00 00 00    	je     c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc8a:	31 d2                	xor    edx,edx
c000bc8c:	51                   	push   ecx
c000bc8d:	52                   	push   edx
c000bc8e:	50                   	push   eax
c000bc8f:	55                   	push   ebp
c000bc90:	e8 09 6a 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	85 c0                	test   eax,eax
c000bc9a:	75 75                	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bca3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bca7:	31 f6                	xor    esi,esi
c000bca9:	0f af c2             	imul   eax,edx
c000bcac:	50                   	push   eax
c000bcad:	e8 e7 14 00 00       	call   c000d199 <malloc>
c000bcb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bcb5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bcb9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bcbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bcc0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bcc4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bcc8:	0f af c2             	imul   eax,edx
c000bccb:	99                   	cdq    
c000bccc:	52                   	push   edx
c000bccd:	50                   	push   eax
c000bcce:	55                   	push   ebp
c000bccf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bcd2:	83 c4 20             	add    esp,0x20
c000bcd5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000bcd9:	0f 86 8d 00 00 00    	jbe    c000bd6c <loadDriverIntoMemory(char const*, unsigned long)+0x1cb>
c000bcdf:	0f b7 de             	movzx  ebx,si
c000bce2:	c1 e3 05             	shl    ebx,0x5
c000bce5:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000bce9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000bcec:	75 78                	jne    c000bd66 <loadDriverIntoMemory(char const*, unsigned long)+0x1c5>
c000bcee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bcf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcf5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcfc:	52                   	push   edx
c000bcfd:	31 d2                	xor    edx,edx
c000bcff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bd02:	52                   	push   edx
c000bd03:	50                   	push   eax
c000bd04:	55                   	push   ebp
c000bd05:	e8 94 69 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	85 c0                	test   eax,eax
c000bd0f:	74 07                	je     c000bd18 <loadDriverIntoMemory(char const*, unsigned long)+0x177>
c000bd11:	31 c0                	xor    eax,eax
c000bd13:	e9 86 05 00 00       	jmp    c000c29e <loadDriverIntoMemory(char const*, unsigned long)+0x6fd>
c000bd18:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000bd1f:	31 d2                	xor    edx,edx
c000bd21:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000bd25:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bd28:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd2c:	83 ec 0c             	sub    esp,0xc
c000bd2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bd3a:	50                   	push   eax
c000bd3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd43:	52                   	push   edx
c000bd44:	50                   	push   eax
c000bd45:	55                   	push   ebp
c000bd46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bd49:	83 c4 1c             	add    esp,0x1c
c000bd4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd4f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000bd52:	50                   	push   eax
c000bd53:	6a 00                	push   0x0
c000bd55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd59:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000bd5d:	50                   	push   eax
c000bd5e:	e8 a5 48 ff ff       	call   c0000608 <memset>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	46                   	inc    esi
c000bd67:	e9 69 ff ff ff       	jmp    c000bcd5 <loadDriverIntoMemory(char const*, unsigned long)+0x134>
c000bd6c:	31 db                	xor    ebx,ebx
c000bd6e:	50                   	push   eax
c000bd6f:	68 00 01 00 00       	push   0x100
c000bd74:	6a 00                	push   0x0
c000bd76:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000bd7a:	50                   	push   eax
c000bd7b:	e8 88 48 ff ff       	call   c0000608 <memset>
c000bd80:	83 c4 0c             	add    esp,0xc
c000bd83:	68 00 01 00 00       	push   0x100
c000bd88:	6a 00                	push   0x0
c000bd8a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000bd91:	50                   	push   eax
c000bd92:	e8 71 48 ff ff       	call   c0000608 <memset>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bda2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bdaa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdb2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bdba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bdc2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000bdc6:	0f 86 30 01 00 00    	jbe    c000befc <loadDriverIntoMemory(char const*, unsigned long)+0x35b>
c000bdcc:	0f b7 f3             	movzx  esi,bx
c000bdcf:	6b f6 28             	imul   esi,esi,0x28
c000bdd2:	03 74 24 24          	add    esi,DWORD PTR [esp+0x24]
c000bdd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bdd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bddd:	50                   	push   eax
c000bdde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bde2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000bde6:	8b 06                	mov    eax,DWORD PTR [esi]
c000bde8:	6b d2 28             	imul   edx,edx,0x28
c000bdeb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000bdef:	31 d2                	xor    edx,edx
c000bdf1:	52                   	push   edx
c000bdf2:	50                   	push   eax
c000bdf3:	55                   	push   ebp
c000bdf4:	e8 a5 68 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bdf9:	83 c4 0c             	add    esp,0xc
c000bdfc:	6a 20                	push   0x20
c000bdfe:	6a 00                	push   0x0
c000be00:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be07:	51                   	push   ecx
c000be08:	e8 fb 47 ff ff       	call   c0000608 <memset>
c000be0d:	58                   	pop    eax
c000be0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000be11:	8d 54 24 58          	lea    edx,[esp+0x58]
c000be15:	52                   	push   edx
c000be16:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000be1d:	51                   	push   ecx
c000be1e:	6a 00                	push   0x0
c000be20:	6a 1f                	push   0x1f
c000be22:	55                   	push   ebp
c000be23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be26:	83 c4 1c             	add    esp,0x1c
c000be29:	6a 09                	push   0x9
c000be2b:	68 b2 fc 01 c0       	push   0xc001fcb2
c000be30:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be37:	51                   	push   ecx
c000be38:	e8 32 47 ff ff       	call   c000056f <memcmp>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	85 c0                	test   eax,eax
c000be42:	75 21                	jne    c000be65 <loadDriverIntoMemory(char const*, unsigned long)+0x2c4>
c000be44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be4c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be57:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000be5e:	89 d0                	mov    eax,edx
c000be60:	40                   	inc    eax
c000be61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be65:	50                   	push   eax
c000be66:	6a 09                	push   0x9
c000be68:	68 bc fc 01 c0       	push   0xc001fcbc
c000be6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000be74:	50                   	push   eax
c000be75:	e8 f5 46 ff ff       	call   c000056f <memcmp>
c000be7a:	83 c4 10             	add    esp,0x10
c000be7d:	85 c0                	test   eax,eax
c000be7f:	75 21                	jne    c000bea2 <loadDriverIntoMemory(char const*, unsigned long)+0x301>
c000be81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be94:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000be9b:	89 d0                	mov    eax,edx
c000be9d:	40                   	inc    eax
c000be9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bea2:	50                   	push   eax
c000bea3:	50                   	push   eax
c000bea4:	68 88 fc 01 c0       	push   0xc001fc88
c000bea9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000beb0:	50                   	push   eax
c000beb1:	e8 42 48 ff ff       	call   c00006f8 <strcmp>
c000beb6:	83 c4 10             	add    esp,0x10
c000beb9:	85 c0                	test   eax,eax
c000bebb:	75 0f                	jne    c000becc <loadDriverIntoMemory(char const*, unsigned long)+0x32b>
c000bebd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bec0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bec8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000becc:	50                   	push   eax
c000becd:	50                   	push   eax
c000bece:	68 90 fc 01 c0       	push   0xc001fc90
c000bed3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000beda:	50                   	push   eax
c000bedb:	e8 18 48 ff ff       	call   c00006f8 <strcmp>
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	85 c0                	test   eax,eax
c000bee5:	75 0f                	jne    c000bef6 <loadDriverIntoMemory(char const*, unsigned long)+0x355>
c000bee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000beea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bef2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bef6:	43                   	inc    ebx
c000bef7:	e9 c6 fe ff ff       	jmp    c000bdc2 <loadDriverIntoMemory(char const*, unsigned long)+0x221>
c000befc:	31 d2                	xor    edx,edx
c000befe:	51                   	push   ecx
c000beff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf03:	52                   	push   edx
c000bf04:	50                   	push   eax
c000bf05:	55                   	push   ebp
c000bf06:	e8 93 67 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bf0b:	5b                   	pop    ebx
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	e8 84 12 00 00       	call   c000d199 <malloc>
c000bf15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf18:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf1c:	31 d2                	xor    edx,edx
c000bf1e:	5e                   	pop    esi
c000bf1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bf23:	53                   	push   ebx
c000bf24:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bf28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf2c:	52                   	push   edx
c000bf2d:	50                   	push   eax
c000bf2e:	55                   	push   ebp
c000bf2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf32:	83 c4 14             	add    esp,0x14
c000bf35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf39:	e8 5b 12 00 00       	call   c000d199 <malloc>
c000bf3e:	31 d2                	xor    edx,edx
c000bf40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf44:	83 c4 0c             	add    esp,0xc
c000bf47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4b:	52                   	push   edx
c000bf4c:	50                   	push   eax
c000bf4d:	55                   	push   ebp
c000bf4e:	e8 4b 67 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bf53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf56:	31 d2                	xor    edx,edx
c000bf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf63:	52                   	push   edx
c000bf64:	50                   	push   eax
c000bf65:	55                   	push   ebp
c000bf66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf69:	83 c4 20             	add    esp,0x20
c000bf6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf78:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000bf7c:	0f 84 f2 02 00 00    	je     c000c274 <loadDriverIntoMemory(char const*, unsigned long)+0x6d3>
c000bf82:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c000bf89:	31 d2                	xor    edx,edx
c000bf8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf8f:	c1 e8 03             	shr    eax,0x3
c000bf92:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bf96:	50                   	push   eax
c000bf97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf9b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000bf9f:	52                   	push   edx
c000bfa0:	50                   	push   eax
c000bfa1:	55                   	push   ebp
c000bfa2:	e8 f7 66 00 00       	call   c001269e <File::seek(unsigned long long)>
c000bfa7:	58                   	pop    eax
c000bfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000bfb3:	e8 e1 11 00 00       	call   c000d199 <malloc>
c000bfb8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bfbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bfbf:	5a                   	pop    edx
c000bfc0:	31 d2                	xor    edx,edx
c000bfc2:	8d 44 24 58          	lea    eax,[esp+0x58]
c000bfc6:	50                   	push   eax
c000bfc7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bfcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfcf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000bfd6:	52                   	push   edx
c000bfd7:	50                   	push   eax
c000bfd8:	55                   	push   ebp
c000bfd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bfdc:	83 c4 20             	add    esp,0x20
c000bfdf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bfe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000bfeb:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
c000bfef:	0f 8d 67 02 00 00    	jge    c000c25c <loadDriverIntoMemory(char const*, unsigned long)+0x6bb>
c000bff5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bff9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bffd:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c002:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c005:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c00d:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c011:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c015:	c1 e8 08             	shr    eax,0x8
c000c018:	89 c6                	mov    esi,eax
c000c01a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c01e:	c1 e6 04             	shl    esi,0x4
c000c021:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c025:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c028:	85 db                	test   ebx,ebx
c000c02a:	0f 85 15 01 00 00    	jne    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c030:	83 ec 0c             	sub    esp,0xc
c000c033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c037:	03 06                	add    eax,DWORD PTR [esi]
c000c039:	50                   	push   eax
c000c03a:	e8 52 f8 ff ff       	call   c000b891 <getAddressOfKernelSymbol(char const*)>
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	89 c3                	mov    ebx,eax
c000c044:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c049:	85 c0                	test   eax,eax
c000c04b:	0f 85 f4 00 00 00    	jne    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c051:	50                   	push   eax
c000c052:	50                   	push   eax
c000c053:	68 c6 fc 01 c0       	push   0xc001fcc6
c000c058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c05c:	03 06                	add    eax,DWORD PTR [esi]
c000c05e:	50                   	push   eax
c000c05f:	e8 94 46 ff ff       	call   c00006f8 <strcmp>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	85 c0                	test   eax,eax
c000c069:	75 0a                	jne    c000c075 <loadDriverIntoMemory(char const*, unsigned long)+0x4d4>
c000c06b:	bb 5c df 01 c0       	mov    ebx,0xc001df5c
c000c070:	e9 cb 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c075:	50                   	push   eax
c000c076:	50                   	push   eax
c000c077:	68 d0 fc 01 c0       	push   0xc001fcd0
c000c07c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c080:	03 06                	add    eax,DWORD PTR [esi]
c000c082:	50                   	push   eax
c000c083:	e8 70 46 ff ff       	call   c00006f8 <strcmp>
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	85 c0                	test   eax,eax
c000c08d:	75 0a                	jne    c000c099 <loadDriverIntoMemory(char const*, unsigned long)+0x4f8>
c000c08f:	bb 90 dc 01 c0       	mov    ebx,0xc001dc90
c000c094:	e9 a7 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c099:	50                   	push   eax
c000c09a:	50                   	push   eax
c000c09b:	68 d9 fc 01 c0       	push   0xc001fcd9
c000c0a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0a4:	03 06                	add    eax,DWORD PTR [esi]
c000c0a6:	50                   	push   eax
c000c0a7:	e8 4c 46 ff ff       	call   c00006f8 <strcmp>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	85 c0                	test   eax,eax
c000c0b1:	75 0a                	jne    c000c0bd <loadDriverIntoMemory(char const*, unsigned long)+0x51c>
c000c0b3:	bb 5c e0 01 c0       	mov    ebx,0xc001e05c
c000c0b8:	e9 83 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c0bd:	50                   	push   eax
c000c0be:	50                   	push   eax
c000c0bf:	68 e3 fc 01 c0       	push   0xc001fce3
c000c0c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0c8:	03 06                	add    eax,DWORD PTR [esi]
c000c0ca:	50                   	push   eax
c000c0cb:	e8 28 46 ff ff       	call   c00006f8 <strcmp>
c000c0d0:	83 c4 10             	add    esp,0x10
c000c0d3:	85 c0                	test   eax,eax
c000c0d5:	74 64                	je     c000c13b <loadDriverIntoMemory(char const*, unsigned long)+0x59a>
c000c0d7:	50                   	push   eax
c000c0d8:	50                   	push   eax
c000c0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0dd:	03 06                	add    eax,DWORD PTR [esi]
c000c0df:	50                   	push   eax
c000c0e0:	68 ec fc 01 c0       	push   0xc001fcec
c000c0e5:	e8 b4 0a 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000c0ea:	58                   	pop    eax
c000c0eb:	5a                   	pop    edx
c000c0ec:	68 06 fd 01 c0       	push   0xc001fd06
c000c0f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c0f8:	50                   	push   eax
c000c0f9:	e8 a9 45 ff ff       	call   c00006a7 <strcpy>
c000c0fe:	59                   	pop    ecx
c000c0ff:	58                   	pop    eax
c000c100:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c104:	03 06                	add    eax,DWORD PTR [esi]
c000c106:	50                   	push   eax
c000c107:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c10e:	50                   	push   eax
c000c10f:	e8 4a 46 ff ff       	call   c000075e <strcat>
c000c114:	58                   	pop    eax
c000c115:	5a                   	pop    edx
c000c116:	68 9c fd 01 c0       	push   0xc001fd9c
c000c11b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c122:	50                   	push   eax
c000c123:	e8 36 46 ff ff       	call   c000075e <strcat>
c000c128:	59                   	pop    ecx
c000c129:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c130:	50                   	push   eax
c000c131:	e8 86 0b 00 00       	call   c000ccbc <panic(char const*)>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	eb 0a                	jmp    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c13b:	bb dc dd 01 c0       	mov    ebx,0xc001dddc
c000c140:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c145:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c14a:	75 7a                	jne    c000c1c6 <loadDriverIntoMemory(char const*, unsigned long)+0x625>
c000c14c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c153:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000c157:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c15b:	01 ce                	add    esi,ecx
c000c15d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c165:	8b 06                	mov    eax,DWORD PTR [esi]
c000c167:	0f 94 c2             	sete   dl
c000c16a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c172:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c000c177:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c000c17b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c180:	74 2b                	je     c000c1ad <loadDriverIntoMemory(char const*, unsigned long)+0x60c>
c000c182:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c000c185:	84 d2                	test   dl,dl
c000c187:	75 0a                	jne    c000c193 <loadDriverIntoMemory(char const*, unsigned long)+0x5f2>
c000c189:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c18d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c191:	76 2c                	jbe    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c193:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c197:	83 ec 0c             	sub    esp,0xc
c000c19a:	68 1d fd 01 c0       	push   0xc001fd1d
c000c19f:	e8 18 0b 00 00       	call   c000ccbc <panic(char const*)>
c000c1a4:	83 c4 10             	add    esp,0x10
c000c1a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1ab:	eb 12                	jmp    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1ad:	01 c1                	add    ecx,eax
c000c1af:	84 d2                	test   dl,dl
c000c1b1:	75 0c                	jne    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1b7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c1bb:	77 02                	ja     c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1bd:	01 d9                	add    ecx,ebx
c000c1bf:	89 0e                	mov    DWORD PTR [esi],ecx
c000c1c1:	e9 8d 00 00 00       	jmp    c000c253 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c1c6:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c1cb:	75 65                	jne    c000c232 <loadDriverIntoMemory(char const*, unsigned long)+0x691>
c000c1cd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c1d4:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c1d8:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c1dc:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c1e4:	74 14                	je     c000c1fa <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c1e6:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c1ee:	74 0a                	je     c000c1fa <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c1f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1f4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c1f8:	76 10                	jbe    c000c20a <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	68 39 fd 01 c0       	push   0xc001fd39
c000c202:	e8 b5 0a 00 00       	call   c000ccbc <panic(char const*)>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	8b 16                	mov    edx,DWORD PTR [esi]
c000c20c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c211:	74 13                	je     c000c226 <loadDriverIntoMemory(char const*, unsigned long)+0x685>
c000c213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c217:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c21e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c222:	01 d0                	add    eax,edx
c000c224:	eb 06                	jmp    c000c22c <loadDriverIntoMemory(char const*, unsigned long)+0x68b>
c000c226:	89 d0                	mov    eax,edx
c000c228:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c22c:	01 c3                	add    ebx,eax
c000c22e:	89 1e                	mov    DWORD PTR [esi],ebx
c000c230:	eb 21                	jmp    c000c253 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c232:	51                   	push   ecx
c000c233:	51                   	push   ecx
c000c234:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c239:	50                   	push   eax
c000c23a:	68 55 fd 01 c0       	push   0xc001fd55
c000c23f:	e8 5a 09 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000c244:	c7 04 24 60 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd60
c000c24b:	e8 6c 0a 00 00       	call   c000ccbc <panic(char const*)>
c000c250:	83 c4 10             	add    esp,0x10
c000c253:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c257:	e9 8b fd ff ff       	jmp    c000bfe7 <loadDriverIntoMemory(char const*, unsigned long)+0x446>
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c263:	e8 41 0f 00 00       	call   c000d1a9 <free>
c000c268:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	e9 00 fd ff ff       	jmp    c000bf74 <loadDriverIntoMemory(char const*, unsigned long)+0x3d3>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	55                   	push   ebp
c000c278:	e8 c1 63 00 00       	call   c001263e <File::close()>
c000c27d:	58                   	pop    eax
c000c27e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c282:	e8 22 0f 00 00       	call   c000d1a9 <free>
c000c287:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c28a:	e8 1a 0f 00 00       	call   c000d1a9 <free>
c000c28f:	5a                   	pop    edx
c000c290:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c294:	e8 10 0f 00 00       	call   c000d1a9 <free>
c000c299:	83 c4 10             	add    esp,0x10
c000c29c:	b0 01                	mov    al,0x1
c000c29e:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c2a4:	5b                   	pop    ebx
c000c2a5:	5e                   	pop    esi
c000c2a6:	5f                   	pop    edi
c000c2a7:	5d                   	pop    ebp
c000c2a8:	c3                   	ret    

c000c2a9 <getDriverBaseFromAddress(unsigned long)>:
c000c2a9:	56                   	push   esi
c000c2aa:	31 d2                	xor    edx,edx
c000c2ac:	53                   	push   ebx
c000c2ad:	8b 1d e0 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ce0
c000c2b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2b7:	39 d3                	cmp    ebx,edx
c000c2b9:	7e 1b                	jle    c000c2d6 <getDriverBaseFromAddress(unsigned long)+0x2d>
c000c2bb:	8b 04 95 00 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd100]
c000c2c2:	39 c8                	cmp    eax,ecx
c000c2c4:	77 0d                	ja     c000c2d3 <getDriverBaseFromAddress(unsigned long)+0x2a>
c000c2c6:	8b 34 95 00 2d 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd300]
c000c2cd:	01 c6                	add    esi,eax
c000c2cf:	39 ce                	cmp    esi,ecx
c000c2d1:	77 05                	ja     c000c2d8 <getDriverBaseFromAddress(unsigned long)+0x2f>
c000c2d3:	42                   	inc    edx
c000c2d4:	eb e1                	jmp    c000c2b7 <getDriverBaseFromAddress(unsigned long)+0xe>
c000c2d6:	31 c0                	xor    eax,eax
c000c2d8:	5b                   	pop    ebx
c000c2d9:	5e                   	pop    esi
c000c2da:	c3                   	ret    

c000c2db <getDriverNameFromAddress(unsigned long)>:
c000c2db:	53                   	push   ebx
c000c2dc:	31 c0                	xor    eax,eax
c000c2de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c2e2:	8b 1d e0 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ce0
c000c2e8:	39 c3                	cmp    ebx,eax
c000c2ea:	7e 22                	jle    c000c30e <getDriverNameFromAddress(unsigned long)+0x33>
c000c2ec:	8b 14 85 00 2f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd100]
c000c2f3:	39 ca                	cmp    edx,ecx
c000c2f5:	77 14                	ja     c000c30b <getDriverNameFromAddress(unsigned long)+0x30>
c000c2f7:	03 14 85 00 2d 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd300]
c000c2fe:	39 ca                	cmp    edx,ecx
c000c300:	76 09                	jbe    c000c30b <getDriverNameFromAddress(unsigned long)+0x30>
c000c302:	8b 04 85 00 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf00]
c000c309:	eb 05                	jmp    c000c310 <getDriverNameFromAddress(unsigned long)+0x35>
c000c30b:	40                   	inc    eax
c000c30c:	eb da                	jmp    c000c2e8 <getDriverNameFromAddress(unsigned long)+0xd>
c000c30e:	31 c0                	xor    eax,eax
c000c310:	5b                   	pop    ebx
c000c311:	c3                   	ret    

c000c312 <getDriverOffsetFromAddress(unsigned long)>:
c000c312:	53                   	push   ebx
c000c313:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c317:	53                   	push   ebx
c000c318:	e8 8c ff ff ff       	call   c000c2a9 <getDriverBaseFromAddress(unsigned long)>
c000c31d:	5a                   	pop    edx
c000c31e:	31 d2                	xor    edx,edx
c000c320:	85 c0                	test   eax,eax
c000c322:	74 04                	je     c000c328 <getDriverOffsetFromAddress(unsigned long)+0x16>
c000c324:	89 da                	mov    edx,ebx
c000c326:	29 c2                	sub    edx,eax
c000c328:	89 d0                	mov    eax,edx
c000c32a:	5b                   	pop    ebx
c000c32b:	c3                   	ret    

c000c32c <loadDLL(char const*)>:
c000c32c:	57                   	push   edi
c000c32d:	56                   	push   esi
c000c32e:	53                   	push   ebx
c000c32f:	81 ec 18 01 00 00    	sub    esp,0x118
c000c335:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c33c:	53                   	push   ebx
c000c33d:	68 78 fd 01 c0       	push   0xc001fd78
c000c342:	e8 57 08 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000c347:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c34e:	e8 fb 5d 00 00       	call   c001214e <operator new(unsigned long)>
c000c353:	83 c4 0c             	add    esp,0xc
c000c356:	89 c6                	mov    esi,eax
c000c358:	ff 35 3c 35 02 c0    	push   DWORD PTR ds:0xc002353c
c000c35e:	53                   	push   ebx
c000c35f:	50                   	push   eax
c000c360:	e8 17 62 00 00       	call   c001257c <File::File(char const*, Process*)>
c000c365:	83 c4 0c             	add    esp,0xc
c000c368:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c36c:	50                   	push   eax
c000c36d:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c371:	50                   	push   eax
c000c372:	56                   	push   esi
c000c373:	e8 14 65 00 00       	call   c001288c <File::stat(unsigned long long*, bool*)>
c000c378:	83 c4 10             	add    esp,0x10
c000c37b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c380:	75 0a                	jne    c000c38c <loadDLL(char const*)+0x60>
c000c382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c386:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c38a:	75 32                	jne    c000c3be <loadDLL(char const*)+0x92>
c000c38c:	51                   	push   ecx
c000c38d:	51                   	push   ecx
c000c38e:	68 89 fd 01 c0       	push   0xc001fd89
c000c393:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c397:	57                   	push   edi
c000c398:	e8 0a 43 ff ff       	call   c00006a7 <strcpy>
c000c39d:	58                   	pop    eax
c000c39e:	5a                   	pop    edx
c000c39f:	53                   	push   ebx
c000c3a0:	57                   	push   edi
c000c3a1:	e8 b8 43 ff ff       	call   c000075e <strcat>
c000c3a6:	59                   	pop    ecx
c000c3a7:	58                   	pop    eax
c000c3a8:	68 9c fd 01 c0       	push   0xc001fd9c
c000c3ad:	57                   	push   edi
c000c3ae:	e8 ab 43 ff ff       	call   c000075e <strcat>
c000c3b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c3b6:	e8 01 09 00 00       	call   c000ccbc <panic(char const*)>
c000c3bb:	83 c4 10             	add    esp,0x10
c000c3be:	83 ec 0c             	sub    esp,0xc
c000c3c1:	8b 06                	mov    eax,DWORD PTR [esi]
c000c3c3:	56                   	push   esi
c000c3c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c3c7:	58                   	pop    eax
c000c3c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3cc:	e8 c8 0d 00 00       	call   c000d199 <malloc>
c000c3d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3d4:	89 c6                	mov    esi,eax
c000c3d6:	e8 4a 42 ff ff       	call   c0000625 <strlen>
c000c3db:	8b 3d e0 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022ce0
c000c3e1:	40                   	inc    eax
c000c3e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3e5:	e8 af 0d 00 00       	call   c000d199 <malloc>
c000c3ea:	5a                   	pop    edx
c000c3eb:	89 04 bd 00 31 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcf00],eax
c000c3f2:	59                   	pop    ecx
c000c3f3:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c000c3f8:	53                   	push   ebx
c000c3f9:	ff 34 85 00 31 02 c0 	push   DWORD PTR [eax*4-0x3ffdcf00]
c000c400:	e8 a2 42 ff ff       	call   c00006a7 <strcpy>
c000c405:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c000c40a:	89 34 85 00 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd100],esi
c000c411:	8d 50 01             	lea    edx,[eax+0x1]
c000c414:	89 15 e0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ce0,edx
c000c41a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c41e:	5f                   	pop    edi
c000c41f:	89 14 85 00 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd300],edx
c000c426:	58                   	pop    eax
c000c427:	56                   	push   esi
c000c428:	68 9e fd 01 c0       	push   0xc001fd9e
c000c42d:	e8 6c 07 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000c432:	58                   	pop    eax
c000c433:	5a                   	pop    edx
c000c434:	56                   	push   esi
c000c435:	53                   	push   ebx
c000c436:	e8 66 f7 ff ff       	call   c000bba1 <loadDriverIntoMemory(char const*, unsigned long)>
c000c43b:	81 c4 20 01 00 00    	add    esp,0x120
c000c441:	89 f0                	mov    eax,esi
c000c443:	5b                   	pop    ebx
c000c444:	5e                   	pop    esi
c000c445:	5f                   	pop    edi
c000c446:	c3                   	ret    

c000c447 <executeDLL(unsigned long, void*)>:
c000c447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c44b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c44f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c453:	ff e0                	jmp    eax
c000c455:	90                   	nop

c000c456 <GDTEntry::setBase(unsigned int)>:
c000c456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c45a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c45e:	89 c1                	mov    ecx,eax
c000c460:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c464:	c1 e9 10             	shr    ecx,0x10
c000c467:	c1 e8 18             	shr    eax,0x18
c000c46a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c46d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <GDTEntry::setLimit(unsigned int)>:
c000c472:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c47a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c47d:	66 89 01             	mov    WORD PTR [ecx],ax
c000c480:	83 e2 f0             	and    edx,0xfffffff0
c000c483:	c1 e8 10             	shr    eax,0x10
c000c486:	83 e0 0f             	and    eax,0xf
c000c489:	09 d0                	or     eax,edx
c000c48b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c48e:	c3                   	ret    
c000c48f:	90                   	nop

c000c490 <GDT::GDT()>:
c000c490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c494:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c49a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c49e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c4a4:	90                   	nop
c000c4a5:	c3                   	ret    

c000c4a6 <GDT::addEntry(GDTEntry)>:
c000c4a6:	53                   	push   ebx
c000c4a7:	83 ec 0c             	sub    esp,0xc
c000c4aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c4ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c4b7:	52                   	push   edx
c000c4b8:	50                   	push   eax
c000c4b9:	68 bd fd 01 c0       	push   0xc001fdbd
c000c4be:	e8 db 06 00 00       	call   c000cb9e <kprintf(char const*, ...)>
c000c4c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c4c9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4cd:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c4d1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c4d5:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d8:	c1 e0 03             	shl    eax,0x3
c000c4db:	89 13                	mov    DWORD PTR [ebx],edx
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	5b                   	pop    ebx
c000c4e1:	c3                   	ret    

c000c4e2 <GDT::getNumberOfEntries()>:
c000c4e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4e8:	c3                   	ret    
c000c4e9:	90                   	nop

c000c4ea <GDT::flush()>:
c000c4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ee:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4f0:	83 c0 04             	add    eax,0x4
c000c4f3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c4fa:	a3 86 34 02 c0       	mov    ds:0xc0023486,eax
c000c4ff:	66 89 15 84 34 02 c0 	mov    WORD PTR ds:0xc0023484,dx
c000c506:	e9 28 3e ff ff       	jmp    c0000333 <loadGDT>
c000c50b:	90                   	nop

c000c50c <GDT::setup()>:
c000c50c:	55                   	push   ebp
c000c50d:	57                   	push   edi
c000c50e:	56                   	push   esi
c000c50f:	53                   	push   ebx
c000c510:	83 ec 3c             	sub    esp,0x3c
c000c513:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c517:	6a 00                	push   0x0
c000c519:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c51d:	53                   	push   ebx
c000c51e:	e8 33 ff ff ff       	call   c000c456 <GDTEntry::setBase(unsigned int)>
c000c523:	6a 00                	push   0x0
c000c525:	53                   	push   ebx
c000c526:	e8 47 ff ff ff       	call   c000c472 <GDTEntry::setLimit(unsigned int)>
c000c52b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c533:	6a 00                	push   0x0
c000c535:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c539:	53                   	push   ebx
c000c53a:	e8 17 ff ff ff       	call   c000c456 <GDTEntry::setBase(unsigned int)>
c000c53f:	68 ff ff ff 00       	push   0xffffff
c000c544:	53                   	push   ebx
c000c545:	e8 28 ff ff ff       	call   c000c472 <GDTEntry::setLimit(unsigned int)>
c000c54a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c54e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c553:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c558:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c55c:	83 c4 20             	add    esp,0x20
c000c55f:	6a 00                	push   0x0
c000c561:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c565:	53                   	push   ebx
c000c566:	e8 eb fe ff ff       	call   c000c456 <GDTEntry::setBase(unsigned int)>
c000c56b:	68 ff ff ff 00       	push   0xffffff
c000c570:	53                   	push   ebx
c000c571:	e8 fc fe ff ff       	call   c000c472 <GDTEntry::setLimit(unsigned int)>
c000c576:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c57a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c57e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c582:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c586:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c58a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c58f:	0d 00 92 c0 00       	or     eax,0xc09200
c000c594:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c598:	89 d8                	mov    eax,ebx
c000c59a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c59e:	80 cc 60             	or     ah,0x60
c000c5a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5a5:	83 c4 0c             	add    esp,0xc
c000c5a8:	89 f8                	mov    eax,edi
c000c5aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5ae:	80 cc 60             	or     ah,0x60
c000c5b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5b5:	89 c7                	mov    edi,eax
c000c5b7:	55                   	push   ebp
c000c5b8:	e8 e9 fe ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c000c5bd:	83 c4 0c             	add    esp,0xc
c000c5c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5c8:	55                   	push   ebp
c000c5c9:	e8 d8 fe ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c000c5ce:	83 c4 0c             	add    esp,0xc
c000c5d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c5d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c5d9:	55                   	push   ebp
c000c5da:	e8 c7 fe ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c000c5df:	83 c4 0c             	add    esp,0xc
c000c5e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5ea:	53                   	push   ebx
c000c5eb:	51                   	push   ecx
c000c5ec:	55                   	push   ebp
c000c5ed:	e8 b4 fe ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c000c5f2:	83 c4 0c             	add    esp,0xc
c000c5f5:	57                   	push   edi
c000c5f6:	56                   	push   esi
c000c5f7:	55                   	push   ebp
c000c5f8:	e8 a9 fe ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c000c5fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c600:	e8 e5 fe ff ff       	call   c000c4ea <GDT::flush()>
c000c605:	83 c4 4c             	add    esp,0x4c
c000c608:	5b                   	pop    ebx
c000c609:	5e                   	pop    esi
c000c60a:	5f                   	pop    edi
c000c60b:	5d                   	pop    ebp
c000c60c:	c3                   	ret    

c000c60d <idleFunction(void*)>:
c000c60d:	53                   	push   ebx
c000c60e:	83 ec 08             	sub    esp,0x8
c000c611:	e8 2c 1a 00 00       	call   c000e042 <unlockScheduler()>
c000c616:	e8 8b a8 00 00       	call   c0016ea6 <thisCPU()>
c000c61b:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c622:	74 41                	je     c000c665 <idleFunction(void*)+0x58>
c000c624:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c000c629:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c630:	74 33                	je     c000c665 <idleFunction(void*)+0x58>
c000c632:	31 db                	xor    ebx,ebx
c000c634:	52                   	push   edx
c000c635:	52                   	push   edx
c000c636:	68 e1 00 00 00       	push   0xe1
c000c63b:	50                   	push   eax
c000c63c:	e8 83 eb ff ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c000c641:	53                   	push   ebx
c000c642:	83 e0 02             	and    eax,0x2
c000c645:	50                   	push   eax
c000c646:	68 e1 00 00 00       	push   0xe1
c000c64b:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c000c651:	e8 9a eb ff ff       	call   c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c656:	83 c4 20             	add    esp,0x20
c000c659:	e8 f2 3a ff ff       	call   c0000150 <doTPAUSE>
c000c65e:	e8 bd 1b 01 00       	call   c001e220 <idleCommon()>
c000c663:	eb f4                	jmp    c000c659 <idleFunction(void*)+0x4c>
c000c665:	fb                   	sti    
c000c666:	f4                   	hlt    
c000c667:	e8 b4 1b 01 00       	call   c001e220 <idleCommon()>
c000c66c:	eb f7                	jmp    c000c665 <idleFunction(void*)+0x58>

c000c66e <IDTEntry::IDTEntry(bool)>:
c000c66e:	83 ec 04             	sub    esp,0x4
c000c671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c675:	88 04 24             	mov    BYTE PTR [esp],al
c000c678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c67c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c686:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c68a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c68e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c691:	83 e2 f0             	and    edx,0xfffffff0
c000c694:	83 ca 0e             	or     edx,0xe
c000c697:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c69a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c69e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6a1:	83 e2 ef             	and    edx,0xffffffef
c000c6a4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6a7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c6ab:	74 04                	je     c000c6b1 <IDTEntry::IDTEntry(bool)+0x43>
c000c6ad:	b2 03                	mov    dl,0x3
c000c6af:	eb 02                	jmp    c000c6b3 <IDTEntry::IDTEntry(bool)+0x45>
c000c6b1:	b2 00                	mov    dl,0x0
c000c6b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6b7:	83 e2 03             	and    edx,0x3
c000c6ba:	88 d1                	mov    cl,dl
c000c6bc:	c1 e1 05             	shl    ecx,0x5
c000c6bf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6c2:	83 e2 9f             	and    edx,0xffffff9f
c000c6c5:	09 ca                	or     edx,ecx
c000c6c7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6ce:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6d1:	83 ca 80             	or     edx,0xffffff80
c000c6d4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6d7:	90                   	nop
c000c6d8:	83 c4 04             	add    esp,0x4
c000c6db:	c3                   	ret    

c000c6dc <IDTEntry::setOffset(unsigned int)>:
c000c6dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c6e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6e4:	66 89 02             	mov    WORD PTR [edx],ax
c000c6e7:	c1 e8 10             	shr    eax,0x10
c000c6ea:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c6ee:	c3                   	ret    
c000c6ef:	90                   	nop

c000c6f0 <IDT::IDT()>:
c000c6f0:	90                   	nop
c000c6f1:	c3                   	ret    

c000c6f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6f6:	83 c0 30             	add    eax,0x30
c000c6f9:	c3                   	ret    

c000c6fa <IDT::addEntry(IDTEntry, int)>:
c000c6fa:	53                   	push   ebx
c000c6fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c703:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c707:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c70b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c70e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c712:	5b                   	pop    ebx
c000c713:	c3                   	ret    

c000c714 <IDT::addEntry(int, void (*)(), bool)>:
c000c714:	53                   	push   ebx
c000c715:	83 ec 10             	sub    esp,0x10
c000c718:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c71d:	50                   	push   eax
c000c71e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c722:	53                   	push   ebx
c000c723:	e8 46 ff ff ff       	call   c000c66e <IDTEntry::IDTEntry(bool)>
c000c728:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c72c:	53                   	push   ebx
c000c72d:	e8 aa ff ff ff       	call   c000c6dc <IDTEntry::setOffset(unsigned int)>
c000c732:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c736:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c73a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c73e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c742:	e8 b3 ff ff ff       	call   c000c6fa <IDT::addEntry(IDTEntry, int)>
c000c747:	83 c4 30             	add    esp,0x30
c000c74a:	5b                   	pop    ebx
c000c74b:	c3                   	ret    

c000c74c <IDT::flush()>:
c000c74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c750:	66 c7 05 8c 34 02 c0 ff 07 	mov    WORD PTR ds:0xc002348c,0x7ff
c000c759:	a3 8e 34 02 c0       	mov    ds:0xc002348e,eax
c000c75e:	0f 01 1d 8c 34 02 c0 	lidtd  ds:0xc002348c
c000c765:	c3                   	ret    

c000c766 <IDT::setup()>:
c000c766:	57                   	push   edi
c000c767:	56                   	push   esi
c000c768:	53                   	push   ebx
c000c769:	83 ec 10             	sub    esp,0x10
c000c76c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c770:	6a 00                	push   0x0
c000c772:	68 53 03 00 c0       	push   0xc0000353
c000c777:	6a 00                	push   0x0
c000c779:	53                   	push   ebx
c000c77a:	e8 95 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c77f:	6a 00                	push   0x0
c000c781:	68 63 03 00 c0       	push   0xc0000363
c000c786:	6a 01                	push   0x1
c000c788:	53                   	push   ebx
c000c789:	e8 86 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c78e:	83 c4 20             	add    esp,0x20
c000c791:	6a 00                	push   0x0
c000c793:	68 6d 03 00 c0       	push   0xc000036d
c000c798:	6a 02                	push   0x2
c000c79a:	53                   	push   ebx
c000c79b:	e8 74 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7a0:	6a 00                	push   0x0
c000c7a2:	68 77 03 00 c0       	push   0xc0000377
c000c7a7:	6a 03                	push   0x3
c000c7a9:	53                   	push   ebx
c000c7aa:	e8 65 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7af:	83 c4 20             	add    esp,0x20
c000c7b2:	6a 00                	push   0x0
c000c7b4:	68 81 03 00 c0       	push   0xc0000381
c000c7b9:	6a 04                	push   0x4
c000c7bb:	53                   	push   ebx
c000c7bc:	e8 53 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7c1:	6a 00                	push   0x0
c000c7c3:	68 8b 03 00 c0       	push   0xc000038b
c000c7c8:	6a 05                	push   0x5
c000c7ca:	53                   	push   ebx
c000c7cb:	e8 44 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7d0:	83 c4 20             	add    esp,0x20
c000c7d3:	6a 00                	push   0x0
c000c7d5:	68 95 03 00 c0       	push   0xc0000395
c000c7da:	6a 06                	push   0x6
c000c7dc:	53                   	push   ebx
c000c7dd:	e8 32 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7e2:	6a 00                	push   0x0
c000c7e4:	68 9f 03 00 c0       	push   0xc000039f
c000c7e9:	6a 07                	push   0x7
c000c7eb:	53                   	push   ebx
c000c7ec:	e8 23 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c7f1:	83 c4 20             	add    esp,0x20
c000c7f4:	6a 00                	push   0x0
c000c7f6:	68 a9 03 00 c0       	push   0xc00003a9
c000c7fb:	6a 08                	push   0x8
c000c7fd:	53                   	push   ebx
c000c7fe:	e8 11 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c803:	6a 00                	push   0x0
c000c805:	68 b1 03 00 c0       	push   0xc00003b1
c000c80a:	6a 09                	push   0x9
c000c80c:	53                   	push   ebx
c000c80d:	e8 02 ff ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c812:	83 c4 20             	add    esp,0x20
c000c815:	6a 00                	push   0x0
c000c817:	68 bb 03 00 c0       	push   0xc00003bb
c000c81c:	6a 0a                	push   0xa
c000c81e:	53                   	push   ebx
c000c81f:	e8 f0 fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c824:	6a 00                	push   0x0
c000c826:	68 c3 03 00 c0       	push   0xc00003c3
c000c82b:	6a 0b                	push   0xb
c000c82d:	53                   	push   ebx
c000c82e:	e8 e1 fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c833:	83 c4 20             	add    esp,0x20
c000c836:	6a 00                	push   0x0
c000c838:	68 cb 03 00 c0       	push   0xc00003cb
c000c83d:	6a 0c                	push   0xc
c000c83f:	53                   	push   ebx
c000c840:	e8 cf fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c845:	6a 00                	push   0x0
c000c847:	68 d3 03 00 c0       	push   0xc00003d3
c000c84c:	6a 0d                	push   0xd
c000c84e:	53                   	push   ebx
c000c84f:	e8 c0 fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c854:	83 c4 20             	add    esp,0x20
c000c857:	6a 00                	push   0x0
c000c859:	68 db 03 00 c0       	push   0xc00003db
c000c85e:	6a 0e                	push   0xe
c000c860:	53                   	push   ebx
c000c861:	e8 ae fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c866:	6a 00                	push   0x0
c000c868:	68 e3 03 00 c0       	push   0xc00003e3
c000c86d:	6a 0f                	push   0xf
c000c86f:	53                   	push   ebx
c000c870:	e8 9f fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c875:	83 c4 20             	add    esp,0x20
c000c878:	6a 00                	push   0x0
c000c87a:	68 ed 03 00 c0       	push   0xc00003ed
c000c87f:	6a 10                	push   0x10
c000c881:	53                   	push   ebx
c000c882:	e8 8d fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c887:	6a 00                	push   0x0
c000c889:	68 f7 03 00 c0       	push   0xc00003f7
c000c88e:	6a 11                	push   0x11
c000c890:	53                   	push   ebx
c000c891:	e8 7e fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c896:	83 c4 20             	add    esp,0x20
c000c899:	6a 00                	push   0x0
c000c89b:	68 01 04 00 c0       	push   0xc0000401
c000c8a0:	6a 12                	push   0x12
c000c8a2:	53                   	push   ebx
c000c8a3:	e8 6c fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8a8:	6a 01                	push   0x1
c000c8aa:	68 0b 04 00 c0       	push   0xc000040b
c000c8af:	6a 60                	push   0x60
c000c8b1:	53                   	push   ebx
c000c8b2:	e8 5d fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8b7:	83 c4 20             	add    esp,0x20
c000c8ba:	6a 00                	push   0x0
c000c8bc:	68 15 04 00 c0       	push   0xc0000415
c000c8c1:	6a 20                	push   0x20
c000c8c3:	53                   	push   ebx
c000c8c4:	e8 4b fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8c9:	6a 00                	push   0x0
c000c8cb:	68 1f 04 00 c0       	push   0xc000041f
c000c8d0:	6a 21                	push   0x21
c000c8d2:	53                   	push   ebx
c000c8d3:	e8 3c fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8d8:	83 c4 20             	add    esp,0x20
c000c8db:	6a 00                	push   0x0
c000c8dd:	68 29 04 00 c0       	push   0xc0000429
c000c8e2:	6a 22                	push   0x22
c000c8e4:	53                   	push   ebx
c000c8e5:	e8 2a fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8ea:	6a 00                	push   0x0
c000c8ec:	68 33 04 00 c0       	push   0xc0000433
c000c8f1:	6a 23                	push   0x23
c000c8f3:	53                   	push   ebx
c000c8f4:	e8 1b fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c8f9:	83 c4 20             	add    esp,0x20
c000c8fc:	6a 00                	push   0x0
c000c8fe:	68 3d 04 00 c0       	push   0xc000043d
c000c903:	6a 24                	push   0x24
c000c905:	53                   	push   ebx
c000c906:	e8 09 fe ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c90b:	6a 00                	push   0x0
c000c90d:	68 47 04 00 c0       	push   0xc0000447
c000c912:	6a 25                	push   0x25
c000c914:	53                   	push   ebx
c000c915:	e8 fa fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c91a:	83 c4 20             	add    esp,0x20
c000c91d:	6a 00                	push   0x0
c000c91f:	68 51 04 00 c0       	push   0xc0000451
c000c924:	6a 26                	push   0x26
c000c926:	53                   	push   ebx
c000c927:	e8 e8 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c92c:	6a 00                	push   0x0
c000c92e:	68 5b 04 00 c0       	push   0xc000045b
c000c933:	6a 27                	push   0x27
c000c935:	53                   	push   ebx
c000c936:	e8 d9 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c93b:	83 c4 20             	add    esp,0x20
c000c93e:	6a 00                	push   0x0
c000c940:	68 65 04 00 c0       	push   0xc0000465
c000c945:	6a 28                	push   0x28
c000c947:	53                   	push   ebx
c000c948:	e8 c7 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c94d:	6a 00                	push   0x0
c000c94f:	68 6f 04 00 c0       	push   0xc000046f
c000c954:	6a 29                	push   0x29
c000c956:	53                   	push   ebx
c000c957:	e8 b8 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c95c:	83 c4 20             	add    esp,0x20
c000c95f:	6a 00                	push   0x0
c000c961:	68 79 04 00 c0       	push   0xc0000479
c000c966:	6a 2a                	push   0x2a
c000c968:	53                   	push   ebx
c000c969:	e8 a6 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c96e:	6a 00                	push   0x0
c000c970:	68 83 04 00 c0       	push   0xc0000483
c000c975:	6a 2b                	push   0x2b
c000c977:	53                   	push   ebx
c000c978:	e8 97 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c97d:	83 c4 20             	add    esp,0x20
c000c980:	6a 00                	push   0x0
c000c982:	68 8d 04 00 c0       	push   0xc000048d
c000c987:	6a 2c                	push   0x2c
c000c989:	53                   	push   ebx
c000c98a:	e8 85 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c98f:	6a 00                	push   0x0
c000c991:	68 97 04 00 c0       	push   0xc0000497
c000c996:	6a 2d                	push   0x2d
c000c998:	53                   	push   ebx
c000c999:	e8 76 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c99e:	83 c4 20             	add    esp,0x20
c000c9a1:	6a 00                	push   0x0
c000c9a3:	68 a1 04 00 c0       	push   0xc00004a1
c000c9a8:	6a 2e                	push   0x2e
c000c9aa:	53                   	push   ebx
c000c9ab:	e8 64 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c9b0:	6a 00                	push   0x0
c000c9b2:	68 ab 04 00 c0       	push   0xc00004ab
c000c9b7:	6a 2f                	push   0x2f
c000c9b9:	53                   	push   ebx
c000c9ba:	e8 55 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c9bf:	83 c4 20             	add    esp,0x20
c000c9c2:	6a 00                	push   0x0
c000c9c4:	68 b5 04 00 c0       	push   0xc00004b5
c000c9c9:	6a 30                	push   0x30
c000c9cb:	53                   	push   ebx
c000c9cc:	e8 43 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c9d1:	6a 00                	push   0x0
c000c9d3:	68 bf 04 00 c0       	push   0xc00004bf
c000c9d8:	6a 31                	push   0x31
c000c9da:	53                   	push   ebx
c000c9db:	e8 34 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c9e0:	83 c4 20             	add    esp,0x20
c000c9e3:	6a 00                	push   0x0
c000c9e5:	68 c9 04 00 c0       	push   0xc00004c9
c000c9ea:	6a 32                	push   0x32
c000c9ec:	53                   	push   ebx
c000c9ed:	e8 22 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000c9f2:	6a 00                	push   0x0
c000c9f4:	68 d3 04 00 c0       	push   0xc00004d3
c000c9f9:	6a 33                	push   0x33
c000c9fb:	53                   	push   ebx
c000c9fc:	e8 13 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000ca01:	83 c4 20             	add    esp,0x20
c000ca04:	6a 00                	push   0x0
c000ca06:	68 dd 04 00 c0       	push   0xc00004dd
c000ca0b:	6a 34                	push   0x34
c000ca0d:	53                   	push   ebx
c000ca0e:	e8 01 fd ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000ca13:	6a 00                	push   0x0
c000ca15:	68 e7 04 00 c0       	push   0xc00004e7
c000ca1a:	6a 35                	push   0x35
c000ca1c:	53                   	push   ebx
c000ca1d:	e8 f2 fc ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000ca22:	83 c4 20             	add    esp,0x20
c000ca25:	6a 00                	push   0x0
c000ca27:	68 f1 04 00 c0       	push   0xc00004f1
c000ca2c:	6a 36                	push   0x36
c000ca2e:	53                   	push   ebx
c000ca2f:	e8 e0 fc ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000ca34:	6a 00                	push   0x0
c000ca36:	68 fb 04 00 c0       	push   0xc00004fb
c000ca3b:	6a 37                	push   0x37
c000ca3d:	53                   	push   ebx
c000ca3e:	e8 d1 fc ff ff       	call   c000c714 <IDT::addEntry(int, void (*)(), bool)>
c000ca43:	83 c4 20             	add    esp,0x20
c000ca46:	e8 02 47 00 00       	call   c001114d <Virt::getAKernelVAS()>
c000ca4b:	52                   	push   edx
c000ca4c:	6a 03                	push   0x3
c000ca4e:	6a 02                	push   0x2
c000ca50:	50                   	push   eax
c000ca51:	e8 9e 4c 00 00       	call   c00116f4 <VAS::allocatePages(int, int)>
c000ca56:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ca5d:	89 c6                	mov    esi,eax
c000ca5f:	e8 ea 56 00 00       	call   c001214e <operator new(unsigned long)>
c000ca64:	81 c6 00 20 00 00    	add    esi,0x2000
c000ca6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca6d:	89 c7                	mov    edi,eax
c000ca6f:	e8 30 40 00 00       	call   c0010aa4 <TSS::TSS()>
c000ca74:	83 c4 0c             	add    esp,0xc
c000ca77:	68 a9 03 00 c0       	push   0xc00003a9
c000ca7c:	56                   	push   esi
c000ca7d:	57                   	push   edi
c000ca7e:	e8 61 40 00 00       	call   c0010ae4 <TSS::setup(unsigned long, unsigned long)>
c000ca83:	59                   	pop    ecx
c000ca84:	89 c6                	mov    esi,eax
c000ca86:	5f                   	pop    edi
c000ca87:	6a 00                	push   0x0
c000ca89:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ca8d:	50                   	push   eax
c000ca8e:	e8 db fb ff ff       	call   c000c66e <IDTEntry::IDTEntry(bool)>
c000ca93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ca97:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ca9c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000caa3:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000caa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caad:	80 ce 05             	or     dh,0x5
c000cab0:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cab3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cab7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cabb:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cabe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cac1:	e8 86 fc ff ff       	call   c000c74c <IDT::flush()>
c000cac6:	83 c4 20             	add    esp,0x20
c000cac9:	5b                   	pop    ebx
c000caca:	5e                   	pop    esi
c000cacb:	5f                   	pop    edi
c000cacc:	c3                   	ret    

c000cacd <stringifyxWithBase(unsigned int, char*, int)>:
c000cacd:	57                   	push   edi
c000cace:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cad3:	56                   	push   esi
c000cad4:	be dc fd 01 c0       	mov    esi,0xc001fddc
c000cad9:	53                   	push   ebx
c000cada:	83 ec 40             	sub    esp,0x40
c000cadd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cae1:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cae5:	fc                   	cld    
c000cae6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cae8:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000caec:	83 f9 3e             	cmp    ecx,0x3e
c000caef:	7e 05                	jle    c000caf6 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000caf1:	b9 3e 00 00 00       	mov    ecx,0x3e
c000caf6:	89 df                	mov    edi,ebx
c000caf8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cafc:	eb 02                	jmp    c000cb00 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cafe:	89 c7                	mov    edi,eax
c000cb00:	31 d2                	xor    edx,edx
c000cb02:	46                   	inc    esi
c000cb03:	89 f8                	mov    eax,edi
c000cb05:	f7 f1                	div    ecx
c000cb07:	39 cf                	cmp    edi,ecx
c000cb09:	73 f3                	jae    c000cafe <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000cb0b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cb0e:	eb 02                	jmp    c000cb12 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000cb10:	89 c3                	mov    ebx,eax
c000cb12:	31 d2                	xor    edx,edx
c000cb14:	4e                   	dec    esi
c000cb15:	89 d8                	mov    eax,ebx
c000cb17:	f7 f1                	div    ecx
c000cb19:	39 cb                	cmp    ebx,ecx
c000cb1b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000cb1f:	88 16                	mov    BYTE PTR [esi],dl
c000cb21:	73 ed                	jae    c000cb10 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000cb23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cb27:	83 c4 40             	add    esp,0x40
c000cb2a:	5b                   	pop    ebx
c000cb2b:	5e                   	pop    esi
c000cb2c:	5f                   	pop    edi
c000cb2d:	c3                   	ret    

c000cb2e <logc(char)>:
c000cb2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb32:	ba fd 03 00 00       	mov    edx,0x3fd
c000cb37:	ec                   	in     al,dx
c000cb38:	a8 20                	test   al,0x20
c000cb3a:	74 fb                	je     c000cb37 <logc(char)+0x9>
c000cb3c:	ba f8 03 00 00       	mov    edx,0x3f8
c000cb41:	88 c8                	mov    al,cl
c000cb43:	ee                   	out    dx,al
c000cb44:	c3                   	ret    

c000cb45 <logs(char*)>:
c000cb45:	53                   	push   ebx
c000cb46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cb4a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cb4d:	84 c0                	test   al,al
c000cb4f:	74 0f                	je     c000cb60 <logs(char*)+0x1b>
c000cb51:	50                   	push   eax
c000cb52:	43                   	inc    ebx
c000cb53:	e8 d6 ff ff ff       	call   c000cb2e <logc(char)>
c000cb58:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cb5b:	5a                   	pop    edx
c000cb5c:	84 c0                	test   al,al
c000cb5e:	75 f1                	jne    c000cb51 <logs(char*)+0xc>
c000cb60:	5b                   	pop    ebx
c000cb61:	c3                   	ret    

c000cb62 <logWriteInt(unsigned int)>:
c000cb62:	83 ec 10             	sub    esp,0x10
c000cb65:	6a 0a                	push   0xa
c000cb67:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cb6b:	50                   	push   eax
c000cb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb70:	e8 58 ff ff ff       	call   c000cacd <stringifyxWithBase(unsigned int, char*, int)>
c000cb75:	50                   	push   eax
c000cb76:	e8 ca ff ff ff       	call   c000cb45 <logs(char*)>
c000cb7b:	83 c4 20             	add    esp,0x20
c000cb7e:	c3                   	ret    

c000cb7f <logWriteIntBase(unsigned int, int)>:
c000cb7f:	83 ec 10             	sub    esp,0x10
c000cb82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb86:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cb8a:	50                   	push   eax
c000cb8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8f:	e8 39 ff ff ff       	call   c000cacd <stringifyxWithBase(unsigned int, char*, int)>
c000cb94:	50                   	push   eax
c000cb95:	e8 ab ff ff ff       	call   c000cb45 <logs(char*)>
c000cb9a:	83 c4 20             	add    esp,0x20
c000cb9d:	c3                   	ret    

c000cb9e <kprintf(char const*, ...)>:
c000cb9e:	55                   	push   ebp
c000cb9f:	57                   	push   edi
c000cba0:	56                   	push   esi
c000cba1:	53                   	push   ebx
c000cba2:	83 ec 0c             	sub    esp,0xc
c000cba5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cba9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cbad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbb1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cbb4:	84 c0                	test   al,al
c000cbb6:	74 4a                	je     c000cc02 <kprintf(char const*, ...)+0x64>
c000cbb8:	31 db                	xor    ebx,ebx
c000cbba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cbbd:	3c 25                	cmp    al,0x25
c000cbbf:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cbc2:	0f 85 e4 00 00 00    	jne    c000ccac <kprintf(char const*, ...)+0x10e>
c000cbc8:	83 c3 02             	add    ebx,0x2
c000cbcb:	8a 07                	mov    al,BYTE PTR [edi]
c000cbcd:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cbd0:	83 e8 25             	sub    eax,0x25
c000cbd3:	3c 53                	cmp    al,0x53
c000cbd5:	0f 87 ba 00 00 00    	ja     c000cc95 <kprintf(char const*, ...)+0xf7>
c000cbdb:	0f b6 c0             	movzx  eax,al
c000cbde:	ff 24 85 30 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00d0]
c000cbe5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cbe9:	89 c8                	mov    eax,ecx
c000cbeb:	83 c1 04             	add    ecx,0x4
c000cbee:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cbf2:	ff 30                	push   DWORD PTR [eax]
c000cbf4:	e8 4c ff ff ff       	call   c000cb45 <logs(char*)>
c000cbf9:	58                   	pop    eax
c000cbfa:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cbfe:	84 c0                	test   al,al
c000cc00:	75 b8                	jne    c000cbba <kprintf(char const*, ...)+0x1c>
c000cc02:	83 c4 0c             	add    esp,0xc
c000cc05:	5b                   	pop    ebx
c000cc06:	5e                   	pop    esi
c000cc07:	5f                   	pop    edi
c000cc08:	5d                   	pop    ebp
c000cc09:	c3                   	ret    
c000cc0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc0e:	89 d0                	mov    eax,edx
c000cc10:	83 c2 04             	add    edx,0x4
c000cc13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc17:	ff 30                	push   DWORD PTR [eax]
c000cc19:	e8 44 ff ff ff       	call   c000cb62 <logWriteInt(unsigned int)>
c000cc1e:	58                   	pop    eax
c000cc1f:	eb d9                	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc25:	89 d0                	mov    eax,edx
c000cc27:	83 c2 04             	add    edx,0x4
c000cc2a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cc2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc31:	50                   	push   eax
c000cc32:	e8 f7 fe ff ff       	call   c000cb2e <logc(char)>
c000cc37:	58                   	pop    eax
c000cc38:	eb c0                	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc3e:	89 c8                	mov    eax,ecx
c000cc40:	83 c1 04             	add    ecx,0x4
c000cc43:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cc47:	ff 30                	push   DWORD PTR [eax]
c000cc49:	e8 14 ff ff ff       	call   c000cb62 <logWriteInt(unsigned int)>
c000cc4e:	5f                   	pop    edi
c000cc4f:	eb a9                	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc55:	89 c8                	mov    eax,ecx
c000cc57:	83 c1 04             	add    ecx,0x4
c000cc5a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cc5e:	6a 10                	push   0x10
c000cc60:	ff 30                	push   DWORD PTR [eax]
c000cc62:	e8 18 ff ff ff       	call   c000cb7f <logWriteIntBase(unsigned int, int)>
c000cc67:	59                   	pop    ecx
c000cc68:	5f                   	pop    edi
c000cc69:	eb 8f                	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc6f:	89 d0                	mov    eax,edx
c000cc71:	83 c2 08             	add    edx,0x8
c000cc74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc78:	6a 10                	push   0x10
c000cc7a:	ff 30                	push   DWORD PTR [eax]
c000cc7c:	e8 fe fe ff ff       	call   c000cb7f <logWriteIntBase(unsigned int, int)>
c000cc81:	58                   	pop    eax
c000cc82:	5a                   	pop    edx
c000cc83:	e9 72 ff ff ff       	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc88:	6a 25                	push   0x25
c000cc8a:	e8 9f fe ff ff       	call   c000cb2e <logc(char)>
c000cc8f:	58                   	pop    eax
c000cc90:	e9 65 ff ff ff       	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000cc95:	6a 25                	push   0x25
c000cc97:	e8 92 fe ff ff       	call   c000cb2e <logc(char)>
c000cc9c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cc9f:	50                   	push   eax
c000cca0:	e8 89 fe ff ff       	call   c000cb2e <logc(char)>
c000cca5:	5a                   	pop    edx
c000cca6:	59                   	pop    ecx
c000cca7:	e9 4e ff ff ff       	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>
c000ccac:	50                   	push   eax
c000ccad:	89 eb                	mov    ebx,ebp
c000ccaf:	e8 7a fe ff ff       	call   c000cb2e <logc(char)>
c000ccb4:	89 fd                	mov    ebp,edi
c000ccb6:	58                   	pop    eax
c000ccb7:	e9 3e ff ff ff       	jmp    c000cbfa <kprintf(char const*, ...)+0x5c>

c000ccbc <panic(char const*)>:
c000ccbc:	55                   	push   ebp
c000ccbd:	89 e5                	mov    ebp,esp
c000ccbf:	53                   	push   ebx
c000ccc0:	50                   	push   eax
c000ccc1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000ccc4:	fa                   	cli    
c000ccc5:	c6 05 92 34 02 c0 01 	mov    BYTE PTR ds:0xc0023492,0x1
c000cccc:	53                   	push   ebx
c000cccd:	c6 05 00 21 02 c0 00 	mov    BYTE PTR ds:0xc0022100,0x0
c000ccd4:	68 80 00 02 c0       	push   0xc0020080
c000ccd9:	e8 c0 fe ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000ccde:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cce3:	52                   	push   edx
c000cce4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ccea:	e8 36 36 00 00       	call   c0010325 <setActiveTerminal(VgaText*)>
c000ccef:	83 c4 0c             	add    esp,0xc
c000ccf2:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ccf7:	6a 01                	push   0x1
c000ccf9:	6a 0f                	push   0xf
c000ccfb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd01:	e8 5e 30 00 00       	call   c000fd64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cd06:	59                   	pop    ecx
c000cd07:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd12:	e8 af 38 00 00       	call   c00105c6 <VgaText::clearScreen()>
c000cd17:	58                   	pop    eax
c000cd18:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd1d:	5a                   	pop    edx
c000cd1e:	68 99 00 02 c0       	push   0xc0020099
c000cd23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd29:	e8 16 3a 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd2e:	59                   	pop    ecx
c000cd2f:	58                   	pop    eax
c000cd30:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd35:	68 1c fe 01 c0       	push   0xc001fe1c
c000cd3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd40:	e8 ff 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd45:	58                   	pop    eax
c000cd46:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd4b:	5a                   	pop    edx
c000cd4c:	68 b5 00 02 c0       	push   0xc00200b5
c000cd51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd57:	e8 e8 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd5c:	59                   	pop    ecx
c000cd5d:	58                   	pop    eax
c000cd5e:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd63:	53                   	push   ebx
c000cd64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd6a:	e8 d5 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd6f:	58                   	pop    eax
c000cd70:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd75:	5a                   	pop    edx
c000cd76:	68 d5 00 02 c0       	push   0xc00200d5
c000cd7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd81:	e8 be 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd86:	59                   	pop    ecx
c000cd87:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cd8c:	5b                   	pop    ebx
c000cd8d:	68 58 fe 01 c0       	push   0xc001fe58
c000cd92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd98:	e8 a7 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cd9d:	58                   	pop    eax
c000cd9e:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cda3:	5a                   	pop    edx
c000cda4:	68 b5 00 02 c0       	push   0xc00200b5
c000cda9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdaf:	e8 90 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cdb4:	59                   	pop    ecx
c000cdb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdba:	5b                   	pop    ebx
c000cdbb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000cdbe:	83 c0 0c             	add    eax,0xc
c000cdc1:	50                   	push   eax
c000cdc2:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cdc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdcd:	e8 72 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cdd2:	58                   	pop    eax
c000cdd3:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cdd8:	5a                   	pop    edx
c000cdd9:	68 d4 00 02 c0       	push   0xc00200d4
c000cdde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cde4:	e8 5b 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cde9:	59                   	pop    ecx
c000cdea:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cdef:	5b                   	pop    ebx
c000cdf0:	68 84 fe 01 c0       	push   0xc001fe84
c000cdf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdfb:	e8 44 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000ce00:	58                   	pop    eax
c000ce01:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ce06:	5a                   	pop    edx
c000ce07:	68 c4 fe 01 c0       	push   0xc001fec4
c000ce0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce12:	e8 2d 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000ce17:	59                   	pop    ecx
c000ce18:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ce1d:	5b                   	pop    ebx
c000ce1e:	68 c0 00 02 c0       	push   0xc00200c0
c000ce23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce29:	e8 16 39 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000ce2e:	58                   	pop    eax
c000ce2f:	5a                   	pop    edx
c000ce30:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce33:	68 d8 00 02 c0       	push   0xc00200d8
c000ce38:	e8 61 fd ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000ce3d:	59                   	pop    ecx
c000ce3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce41:	5b                   	pop    ebx
c000ce42:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce45:	68 e1 00 02 c0       	push   0xc00200e1
c000ce4a:	e8 4f fd ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000ce4f:	5a                   	pop    edx
c000ce50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce53:	59                   	pop    ecx
c000ce54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce56:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce59:	68 79 0f 02 c0       	push   0xc0020f79
c000ce5e:	e8 3b fd ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000ce63:	5b                   	pop    ebx
c000ce64:	58                   	pop    eax
c000ce65:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ce6a:	68 08 ff 01 c0       	push   0xc001ff08
c000ce6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce75:	e8 ca 38 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000ce7a:	58                   	pop    eax
c000ce7b:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ce80:	5a                   	pop    edx
c000ce81:	68 ea 00 02 c0       	push   0xc00200ea
c000ce86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce8c:	e8 b3 38 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000ce91:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ce96:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000ce9c:	e8 94 13 01 00       	call   c001e235 <CPU::readCR0()>
c000cea1:	59                   	pop    ecx
c000cea2:	5a                   	pop    edx
c000cea3:	50                   	push   eax
c000cea4:	53                   	push   ebx
c000cea5:	e8 c0 38 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000ceaa:	59                   	pop    ecx
c000ceab:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000ceb0:	5b                   	pop    ebx
c000ceb1:	68 f4 00 02 c0       	push   0xc00200f4
c000ceb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cebc:	e8 83 38 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cec1:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cec6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cecc:	e8 76 13 01 00       	call   c001e247 <CPU::readCR2()>
c000ced1:	5a                   	pop    edx
c000ced2:	59                   	pop    ecx
c000ced3:	50                   	push   eax
c000ced4:	53                   	push   ebx
c000ced5:	e8 90 38 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000ceda:	5b                   	pop    ebx
c000cedb:	58                   	pop    eax
c000cedc:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cee1:	68 fe 00 02 c0       	push   0xc00200fe
c000cee6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ceec:	e8 53 38 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cef1:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cef6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cefc:	e8 58 13 01 00       	call   c001e259 <CPU::readCR3()>
c000cf01:	5a                   	pop    edx
c000cf02:	59                   	pop    ecx
c000cf03:	50                   	push   eax
c000cf04:	53                   	push   ebx
c000cf05:	e8 60 38 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000cf0a:	5b                   	pop    ebx
c000cf0b:	58                   	pop    eax
c000cf0c:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf11:	68 11 01 02 c0       	push   0xc0020111
c000cf16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf1c:	e8 23 38 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cf21:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf26:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cf2c:	e8 3a 13 01 00       	call   c001e26b <CPU::readCR4()>
c000cf31:	5a                   	pop    edx
c000cf32:	59                   	pop    ecx
c000cf33:	50                   	push   eax
c000cf34:	53                   	push   ebx
c000cf35:	e8 30 38 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000cf3a:	5b                   	pop    ebx
c000cf3b:	58                   	pop    eax
c000cf3c:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf41:	68 1b 01 02 c0       	push   0xc002011b
c000cf46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf4c:	e8 f3 37 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cf51:	5a                   	pop    edx
c000cf52:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf57:	59                   	pop    ecx
c000cf58:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cf5e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cf61:	50                   	push   eax
c000cf62:	e8 03 38 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000cf67:	5b                   	pop    ebx
c000cf68:	58                   	pop    eax
c000cf69:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf6e:	68 32 01 02 c0       	push   0xc0020132
c000cf73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf79:	e8 c6 37 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cf7e:	5a                   	pop    edx
c000cf7f:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf84:	59                   	pop    ecx
c000cf85:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cf8b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000cf8e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000cf91:	50                   	push   eax
c000cf92:	e8 d3 37 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000cf97:	5b                   	pop    ebx
c000cf98:	58                   	pop    eax
c000cf99:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cf9e:	68 32 01 02 c0       	push   0xc0020132
c000cfa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfa9:	e8 96 37 00 00       	call   c0010744 <VgaText::puts(char const*)>
c000cfae:	59                   	pop    ecx
c000cfaf:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c000cfb4:	5b                   	pop    ebx
c000cfb5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cfbb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000cfbe:	8b 12                	mov    edx,DWORD PTR [edx]
c000cfc0:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000cfc3:	50                   	push   eax
c000cfc4:	e8 a1 37 00 00       	call   c001076a <VgaText::putx(unsigned int)>
c000cfc9:	83 c4 10             	add    esp,0x10
c000cfcc:	b2 fe                	mov    dl,0xfe
c000cfce:	e4 60                	in     al,0x60
c000cfd0:	3c 1c                	cmp    al,0x1c
c000cfd2:	74 04                	je     c000cfd8 <panic(char const*)+0x31c>
c000cfd4:	3c 5a                	cmp    al,0x5a
c000cfd6:	75 f6                	jne    c000cfce <panic(char const*)+0x312>
c000cfd8:	e4 64                	in     al,0x64
c000cfda:	a8 02                	test   al,0x2
c000cfdc:	75 fa                	jne    c000cfd8 <panic(char const*)+0x31c>
c000cfde:	88 d0                	mov    al,dl
c000cfe0:	e6 64                	out    0x64,al
c000cfe2:	fa                   	cli    
c000cfe3:	f4                   	hlt    
c000cfe4:	eb e8                	jmp    c000cfce <panic(char const*)+0x312>

c000cfe6 <sbrk>:
c000cfe6:	55                   	push   ebp
c000cfe7:	57                   	push   edi
c000cfe8:	56                   	push   esi
c000cfe9:	53                   	push   ebx
c000cfea:	83 ec 1c             	sub    esp,0x1c
c000cfed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cff1:	85 db                	test   ebx,ebx
c000cff3:	74 37                	je     c000d02c <sbrk+0x46>
c000cff5:	78 3f                	js     c000d036 <sbrk+0x50>
c000cff7:	e8 aa 9e 00 00       	call   c0016ea6 <thisCPU()>
c000cffc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d002:	83 e0 01             	and    eax,0x1
c000d005:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d009:	a1 e8 20 02 c0       	mov    eax,ds:0xc00220e8
c000d00e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d012:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d018:	89 d8                	mov    eax,ebx
c000d01a:	78 35                	js     c000d051 <sbrk+0x6b>
c000d01c:	c1 f8 0c             	sar    eax,0xc
c000d01f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d023:	89 c7                	mov    edi,eax
c000d025:	be 00 00 00 00       	mov    esi,0x0
c000d02a:	eb 3c                	jmp    c000d068 <sbrk+0x82>
c000d02c:	a1 e8 20 02 c0       	mov    eax,ds:0xc00220e8
c000d031:	e9 ad 00 00 00       	jmp    c000d0e3 <sbrk+0xfd>
c000d036:	83 ec 08             	sub    esp,0x8
c000d039:	53                   	push   ebx
c000d03a:	68 38 01 02 c0       	push   0xc0020138
c000d03f:	e8 5a fb ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d04c:	e9 92 00 00 00       	jmp    c000d0e3 <sbrk+0xfd>
c000d051:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d057:	eb c3                	jmp    c000d01c <sbrk+0x36>
c000d059:	81 05 e8 20 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00220e8,0x1000
c000d063:	46                   	inc    esi
c000d064:	39 f7                	cmp    edi,esi
c000d066:	74 34                	je     c000d09c <sbrk+0xb6>
c000d068:	e8 e0 40 00 00       	call   c001114d <Virt::getAKernelVAS()>
c000d06d:	89 c3                	mov    ebx,eax
c000d06f:	8b 2d e8 20 02 c0    	mov    ebp,DWORD PTR ds:0xc00220e8
c000d075:	e8 c9 06 00 00       	call   c000d743 <Phys::allocatePage()>
c000d07a:	68 01 04 00 00       	push   0x401
c000d07f:	55                   	push   ebp
c000d080:	50                   	push   eax
c000d081:	53                   	push   ebx
c000d082:	e8 6d 45 00 00       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d08f:	74 c8                	je     c000d059 <sbrk+0x73>
c000d091:	8b 1d e8 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e8
c000d097:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d09a:	eb bd                	jmp    c000d059 <sbrk+0x73>
c000d09c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d0a1:	74 48                	je     c000d0eb <sbrk+0x105>
c000d0a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0a7:	89 d3                	mov    ebx,edx
c000d0a9:	c1 eb 0a             	shr    ebx,0xa
c000d0ac:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d0b2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0bc:	c1 e0 0c             	shl    eax,0xc
c000d0bf:	01 d0                	add    eax,edx
c000d0c1:	c1 e8 0a             	shr    eax,0xa
c000d0c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d0c9:	2d 00 00 40 00       	sub    eax,0x400000
c000d0ce:	39 c3                	cmp    ebx,eax
c000d0d0:	77 0d                	ja     c000d0df <sbrk+0xf9>
c000d0d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d0d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d0db:	39 d8                	cmp    eax,ebx
c000d0dd:	73 f3                	jae    c000d0d2 <sbrk+0xec>
c000d0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0e3:	83 c4 1c             	add    esp,0x1c
c000d0e6:	5b                   	pop    ebx
c000d0e7:	5e                   	pop    esi
c000d0e8:	5f                   	pop    edi
c000d0e9:	5d                   	pop    ebp
c000d0ea:	c3                   	ret    
c000d0eb:	e8 69 11 01 00       	call   c001e259 <CPU::readCR3()>
c000d0f0:	83 ec 0c             	sub    esp,0xc
c000d0f3:	50                   	push   eax
c000d0f4:	e8 84 11 01 00       	call   c001e27d <CPU::writeCR3(unsigned long)>
c000d0f9:	83 c4 10             	add    esp,0x10
c000d0fc:	eb e1                	jmp    c000d0df <sbrk+0xf9>

c000d0fe <mmap>:
c000d0fe:	83 ec 18             	sub    esp,0x18
c000d101:	68 68 01 02 c0       	push   0xc0020168
c000d106:	e8 b1 fb ff ff       	call   c000ccbc <panic(char const*)>
c000d10b:	b8 00 00 00 00       	mov    eax,0x0
c000d110:	83 c4 1c             	add    esp,0x1c
c000d113:	c3                   	ret    

c000d114 <munmap>:
c000d114:	83 ec 18             	sub    esp,0x18
c000d117:	68 6d 01 02 c0       	push   0xc002016d
c000d11c:	e8 9b fb ff ff       	call   c000ccbc <panic(char const*)>
c000d121:	b8 00 00 00 00       	mov    eax,0x0
c000d126:	83 c4 1c             	add    esp,0x1c
c000d129:	c3                   	ret    

c000d12a <liballoc_lock()>:
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	e8 0e 0f 00 00       	call   c000e040 <lockScheduler()>
c000d132:	b8 00 00 00 00       	mov    eax,0x0
c000d137:	83 c4 0c             	add    esp,0xc
c000d13a:	c3                   	ret    

c000d13b <liballoc_unlock()>:
c000d13b:	83 ec 0c             	sub    esp,0xc
c000d13e:	e8 ff 0e 00 00       	call   c000e042 <unlockScheduler()>
c000d143:	b8 00 00 00 00       	mov    eax,0x0
c000d148:	83 c4 0c             	add    esp,0xc
c000d14b:	c3                   	ret    

c000d14c <liballoc_alloc(int)>:
c000d14c:	83 ec 0c             	sub    esp,0xc
c000d14f:	e8 f9 3f 00 00       	call   c001114d <Virt::getAKernelVAS()>
c000d154:	83 ec 04             	sub    esp,0x4
c000d157:	6a 01                	push   0x1
c000d159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d15d:	50                   	push   eax
c000d15e:	e8 91 45 00 00       	call   c00116f4 <VAS::allocatePages(int, int)>
c000d163:	83 c4 1c             	add    esp,0x1c
c000d166:	c3                   	ret    

c000d167 <liballoc_free(void*, int)>:
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	e8 de 3f 00 00       	call   c001114d <Virt::getAKernelVAS()>
c000d16f:	83 ec 08             	sub    esp,0x8
c000d172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d176:	50                   	push   eax
c000d177:	e8 9a 42 00 00       	call   c0011416 <VAS::freeAllocatedPages(unsigned long)>
c000d17c:	b8 00 00 00 00       	mov    eax,0x0
c000d181:	83 c4 1c             	add    esp,0x1c
c000d184:	c3                   	ret    

c000d185 <realloc>:
c000d185:	83 ec 14             	sub    esp,0x14
c000d188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d190:	e8 ec 41 ff ff       	call   c0001381 <dlrealloc>
c000d195:	83 c4 1c             	add    esp,0x1c
c000d198:	c3                   	ret    

c000d199 <malloc>:
c000d199:	83 ec 18             	sub    esp,0x18
c000d19c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a0:	e8 9f 3c ff ff       	call   c0000e44 <dlmalloc>
c000d1a5:	83 c4 1c             	add    esp,0x1c
c000d1a8:	c3                   	ret    

c000d1a9 <free>:
c000d1a9:	83 ec 18             	sub    esp,0x18
c000d1ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b0:	e8 34 39 ff ff       	call   c0000ae9 <dlfree>
c000d1b5:	83 c4 1c             	add    esp,0x1c
c000d1b8:	c3                   	ret    

c000d1b9 <rfree>:
c000d1b9:	83 ec 18             	sub    esp,0x18
c000d1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c0:	e8 e4 ff ff ff       	call   c000d1a9 <free>
c000d1c5:	83 c4 1c             	add    esp,0x1c
c000d1c8:	c3                   	ret    

c000d1c9 <calloc>:
c000d1c9:	56                   	push   esi
c000d1ca:	53                   	push   ebx
c000d1cb:	83 ec 10             	sub    esp,0x10
c000d1ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d1d7:	53                   	push   ebx
c000d1d8:	e8 bc ff ff ff       	call   c000d199 <malloc>
c000d1dd:	89 c6                	mov    esi,eax
c000d1df:	83 c4 0c             	add    esp,0xc
c000d1e2:	53                   	push   ebx
c000d1e3:	6a 00                	push   0x0
c000d1e5:	50                   	push   eax
c000d1e6:	e8 1d 34 ff ff       	call   c0000608 <memset>
c000d1eb:	89 f0                	mov    eax,esi
c000d1ed:	83 c4 14             	add    esp,0x14
c000d1f0:	5b                   	pop    ebx
c000d1f1:	5e                   	pop    esi
c000d1f2:	c3                   	ret    

c000d1f3 <hwTextMode_loadInData(VgaText*)>:
c000d1f3:	57                   	push   edi
c000d1f4:	56                   	push   esi
c000d1f5:	53                   	push   ebx
c000d1f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d1fa:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d200:	85 c0                	test   eax,eax
c000d202:	7e 30                	jle    c000d234 <hwTextMode_loadInData(VgaText*)+0x41>
c000d204:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d207:	31 f6                	xor    esi,esi
c000d209:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d20c:	31 c0                	xor    eax,eax
c000d20e:	c1 e1 05             	shl    ecx,0x5
c000d211:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d217:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d21b:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d21f:	40                   	inc    eax
c000d220:	83 f8 50             	cmp    eax,0x50
c000d223:	75 f2                	jne    c000d217 <hwTextMode_loadInData(VgaText*)+0x24>
c000d225:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d22b:	46                   	inc    esi
c000d22c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d232:	7f d5                	jg     c000d209 <hwTextMode_loadInData(VgaText*)+0x16>
c000d234:	5b                   	pop    ebx
c000d235:	5e                   	pop    esi
c000d236:	5f                   	pop    edi
c000d237:	c3                   	ret    

c000d238 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d238:	56                   	push   esi
c000d239:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d23e:	53                   	push   ebx
c000d23f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d243:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d247:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d24d:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d253:	c1 e0 04             	shl    eax,0x4
c000d256:	83 e6 0f             	and    esi,0xf
c000d259:	0f b6 c0             	movzx  eax,al
c000d25c:	41                   	inc    ecx
c000d25d:	09 f0                	or     eax,esi
c000d25f:	83 c2 02             	add    edx,0x2
c000d262:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d266:	c1 e0 08             	shl    eax,0x8
c000d269:	09 f0                	or     eax,esi
c000d26b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d26f:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d275:	75 d0                	jne    c000d247 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d277:	5b                   	pop    ebx
c000d278:	5e                   	pop    esi
c000d279:	c3                   	ret    

c000d27a <hwTextMode_showCursor(VgaText*, bool)>:
c000d27a:	56                   	push   esi
c000d27b:	53                   	push   ebx
c000d27c:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d281:	74 38                	je     c000d2bb <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d283:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d288:	b0 0a                	mov    al,0xa
c000d28a:	89 da                	mov    edx,ebx
c000d28c:	ee                   	out    dx,al
c000d28d:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d292:	89 ca                	mov    edx,ecx
c000d294:	ec                   	in     al,dx
c000d295:	b2 0f                	mov    dl,0xf
c000d297:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d29b:	83 e0 c0             	and    eax,0xffffffc0
c000d29e:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d2a4:	09 d0                	or     eax,edx
c000d2a6:	89 ca                	mov    edx,ecx
c000d2a8:	ee                   	out    dx,al
c000d2a9:	b0 0b                	mov    al,0xb
c000d2ab:	89 da                	mov    edx,ebx
c000d2ad:	ee                   	out    dx,al
c000d2ae:	89 ca                	mov    edx,ecx
c000d2b0:	ec                   	in     al,dx
c000d2b1:	83 e0 e0             	and    eax,0xffffffe0
c000d2b4:	83 c8 0f             	or     eax,0xf
c000d2b7:	ee                   	out    dx,al
c000d2b8:	5b                   	pop    ebx
c000d2b9:	5e                   	pop    esi
c000d2ba:	c3                   	ret    
c000d2bb:	b0 0a                	mov    al,0xa
c000d2bd:	ba d4 03 00 00       	mov    edx,0x3d4
c000d2c2:	ee                   	out    dx,al
c000d2c3:	b0 20                	mov    al,0x20
c000d2c5:	ba d5 03 00 00       	mov    edx,0x3d5
c000d2ca:	ee                   	out    dx,al
c000d2cb:	5b                   	pop    ebx
c000d2cc:	5e                   	pop    esi
c000d2cd:	c3                   	ret    

c000d2ce <hwTextMode_update(VgaText*)>:
c000d2ce:	c3                   	ret    

c000d2cf <hwTextMode_updateCursor(VgaText*)>:
c000d2cf:	56                   	push   esi
c000d2d0:	b9 19 00 00 00       	mov    ecx,0x19
c000d2d5:	53                   	push   ebx
c000d2d6:	be d4 03 00 00       	mov    esi,0x3d4
c000d2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d2df:	89 f2                	mov    edx,esi
c000d2e1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d2e7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d2ed:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d2f0:	c1 e1 04             	shl    ecx,0x4
c000d2f3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d2f9:	b0 0f                	mov    al,0xf
c000d2fb:	ee                   	out    dx,al
c000d2fc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d301:	88 c8                	mov    al,cl
c000d303:	89 da                	mov    edx,ebx
c000d305:	ee                   	out    dx,al
c000d306:	b0 0e                	mov    al,0xe
c000d308:	89 f2                	mov    edx,esi
c000d30a:	ee                   	out    dx,al
c000d30b:	89 c8                	mov    eax,ecx
c000d30d:	89 da                	mov    edx,ebx
c000d30f:	66 c1 e8 08          	shr    ax,0x8
c000d313:	ee                   	out    dx,al
c000d314:	5b                   	pop    ebx
c000d315:	5e                   	pop    esi
c000d316:	c3                   	ret    

c000d317 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d317:	ba da 03 00 00       	mov    edx,0x3da
c000d31c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d321:	75 18                	jne    c000d33b <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d323:	ec                   	in     al,dx
c000d324:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d329:	b0 30                	mov    al,0x30
c000d32b:	89 ca                	mov    edx,ecx
c000d32d:	ee                   	out    dx,al
c000d32e:	ba c1 03 00 00       	mov    edx,0x3c1
c000d333:	ec                   	in     al,dx
c000d334:	83 c8 08             	or     eax,0x8
c000d337:	89 ca                	mov    edx,ecx
c000d339:	ee                   	out    dx,al
c000d33a:	c3                   	ret    
c000d33b:	ec                   	in     al,dx
c000d33c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d341:	b0 30                	mov    al,0x30
c000d343:	89 ca                	mov    edx,ecx
c000d345:	ee                   	out    dx,al
c000d346:	ba c1 03 00 00       	mov    edx,0x3c1
c000d34b:	ec                   	in     al,dx
c000d34c:	83 e0 f7             	and    eax,0xfffffff7
c000d34f:	89 ca                	mov    edx,ecx
c000d351:	ee                   	out    dx,al
c000d352:	c3                   	ret    

c000d353 <hwTextMode_scrollScreen(VgaText*)>:
c000d353:	55                   	push   ebp
c000d354:	bd 02 00 00 00       	mov    ebp,0x2
c000d359:	57                   	push   edi
c000d35a:	56                   	push   esi
c000d35b:	53                   	push   ebx
c000d35c:	83 ec 1c             	sub    esp,0x1c
c000d35f:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d367:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d36b:	31 c0                	xor    eax,eax
c000d36d:	eb 0b                	jmp    c000d37a <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d36f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d375:	74 57                	je     c000d3ce <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d377:	43                   	inc    ebx
c000d378:	89 f0                	mov    eax,esi
c000d37a:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d380:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d386:	88 13                	mov    BYTE PTR [ebx],dl
c000d388:	8d 70 01             	lea    esi,[eax+0x1]
c000d38b:	83 fd 18             	cmp    ebp,0x18
c000d38e:	75 df                	jne    c000d36f <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d390:	a8 01                	test   al,0x1
c000d392:	75 13                	jne    c000d3a7 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d394:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d397:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d39d:	75 d8                	jne    c000d377 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d39f:	83 c4 1c             	add    esp,0x1c
c000d3a2:	5b                   	pop    ebx
c000d3a3:	5e                   	pop    esi
c000d3a4:	5f                   	pop    edi
c000d3a5:	5d                   	pop    ebp
c000d3a6:	c3                   	ret    
c000d3a7:	83 ec 08             	sub    esp,0x8
c000d3aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d3ae:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d3b5:	50                   	push   eax
c000d3b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d3ba:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d3c1:	50                   	push   eax
c000d3c2:	e8 bd 29 00 00       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	88 07                	mov    BYTE PTR [edi],al
c000d3cc:	eb c9                	jmp    c000d397 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d3ce:	45                   	inc    ebp
c000d3cf:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d3d7:	eb 8e                	jmp    c000d367 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d3d9 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d3d9:	56                   	push   esi
c000d3da:	53                   	push   ebx
c000d3db:	83 ec 0c             	sub    esp,0xc
c000d3de:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d3e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d3e6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d3eb:	50                   	push   eax
c000d3ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d3f1:	50                   	push   eax
c000d3f2:	e8 8d 29 00 00       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000d3f7:	5a                   	pop    edx
c000d3f8:	0f b6 c0             	movzx  eax,al
c000d3fb:	59                   	pop    ecx
c000d3fc:	50                   	push   eax
c000d3fd:	89 f0                	mov    eax,esi
c000d3ff:	0f be f0             	movsx  esi,al
c000d402:	56                   	push   esi
c000d403:	e8 22 2a 00 00       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c000d408:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d40c:	ba 19 00 00 00       	mov    edx,0x19
c000d411:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d417:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d41a:	8d 14 92             	lea    edx,[edx+edx*4]
c000d41d:	c1 e1 04             	shl    ecx,0x4
c000d420:	c1 e2 04             	shl    edx,0x4
c000d423:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d427:	01 ca                	add    edx,ecx
c000d429:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d431:	83 c4 14             	add    esp,0x14
c000d434:	5b                   	pop    ebx
c000d435:	5e                   	pop    esi
c000d436:	c3                   	ret    

c000d437 <setupTextMode()>:
c000d437:	c7 05 78 37 02 c0 17 d3 00 c0 	mov    DWORD PTR ds:0xc0023778,0xc000d317
c000d441:	c7 05 64 37 02 c0 f3 d1 00 c0 	mov    DWORD PTR ds:0xc0023764,0xc000d1f3
c000d44b:	c7 05 60 37 02 c0 38 d2 00 c0 	mov    DWORD PTR ds:0xc0023760,0xc000d238
c000d455:	c7 05 6c 37 02 c0 53 d3 00 c0 	mov    DWORD PTR ds:0xc002376c,0xc000d353
c000d45f:	c7 05 74 37 02 c0 7a d2 00 c0 	mov    DWORD PTR ds:0xc0023774,0xc000d27a
c000d469:	c7 05 68 37 02 c0 ce d2 00 c0 	mov    DWORD PTR ds:0xc0023768,0xc000d2ce
c000d473:	c7 05 70 37 02 c0 cf d2 00 c0 	mov    DWORD PTR ds:0xc0023770,0xc000d2cf
c000d47d:	c7 05 7c 37 02 c0 d9 d3 00 c0 	mov    DWORD PTR ds:0xc002377c,0xc000d3d9
c000d487:	c3                   	ret    

c000d488 <kernel_main>:
c000d488:	57                   	push   edi
c000d489:	bf f9 03 00 00       	mov    edi,0x3f9
c000d48e:	56                   	push   esi
c000d48f:	31 f6                	xor    esi,esi
c000d491:	53                   	push   ebx
c000d492:	83 ec 10             	sub    esp,0x10
c000d495:	e8 44 27 00 00       	call   c000fbde <installVgaTextImplementation()>
c000d49a:	e8 98 ff ff ff       	call   c000d437 <setupTextMode()>
c000d49f:	89 f0                	mov    eax,esi
c000d4a1:	89 fa                	mov    edx,edi
c000d4a3:	ee                   	out    dx,al
c000d4a4:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d4a9:	b0 80                	mov    al,0x80
c000d4ab:	89 da                	mov    edx,ebx
c000d4ad:	ee                   	out    dx,al
c000d4ae:	b1 03                	mov    cl,0x3
c000d4b0:	ba f8 03 00 00       	mov    edx,0x3f8
c000d4b5:	88 c8                	mov    al,cl
c000d4b7:	ee                   	out    dx,al
c000d4b8:	89 f0                	mov    eax,esi
c000d4ba:	89 fa                	mov    edx,edi
c000d4bc:	ee                   	out    dx,al
c000d4bd:	88 c8                	mov    al,cl
c000d4bf:	89 da                	mov    edx,ebx
c000d4c1:	ee                   	out    dx,al
c000d4c2:	b0 c7                	mov    al,0xc7
c000d4c4:	ba fa 03 00 00       	mov    edx,0x3fa
c000d4c9:	ee                   	out    dx,al
c000d4ca:	b0 0b                	mov    al,0xb
c000d4cc:	ba fc 03 00 00       	mov    edx,0x3fc
c000d4d1:	ee                   	out    dx,al
c000d4d2:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d4d7:	83 ec 0c             	sub    esp,0xc
c000d4da:	05 ff 0f 00 00       	add    eax,0xfff
c000d4df:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d4e4:	50                   	push   eax
c000d4e5:	e8 4d 03 00 00       	call   c000d837 <Phys::physicalMemorySetup(unsigned int)>
c000d4ea:	e8 df 3b 00 00       	call   c00110ce <Virt::virtualMemorySetup()>
c000d4ef:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d4f5:	83 c4 10             	add    esp,0x10
c000d4f8:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d4fe:	75 0e                	jne    c000d50e <kernel_main+0x86>
c000d500:	89 d8                	mov    eax,ebx
c000d502:	25 48 03 00 00       	and    eax,0x348
c000d507:	3d 00 03 00 00       	cmp    eax,0x300
c000d50c:	74 10                	je     c000d51e <kernel_main+0x96>
c000d50e:	83 ec 0c             	sub    esp,0xc
c000d511:	68 d7 00 02 c0       	push   0xc00200d7
c000d516:	e8 a1 f7 ff ff       	call   c000ccbc <panic(char const*)>
c000d51b:	83 c4 10             	add    esp,0x10
c000d51e:	83 ec 0c             	sub    esp,0xc
c000d521:	89 1d 94 34 02 c0    	mov    DWORD PTR ds:0xc0023494,ebx
c000d527:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d52b:	53                   	push   ebx
c000d52c:	e8 47 3d 00 00       	call   c0011278 <VAS::VAS()>
c000d531:	89 1d 9c 37 02 c0    	mov    DWORD PTR ds:0xc002379c,ebx
c000d537:	e8 e4 2a ff ff       	call   c0000020 <callGlobalConstructors>
c000d53c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d543:	e8 06 4c 00 00       	call   c001214e <operator new(unsigned long)>
c000d548:	89 04 24             	mov    DWORD PTR [esp],eax
c000d54b:	89 c6                	mov    esi,eax
c000d54d:	e8 50 d8 ff ff       	call   c000ada2 <Computer::Computer()>
c000d552:	6a 00                	push   0x0
c000d554:	89 35 c8 2c 02 c0    	mov    DWORD PTR ds:0xc0022cc8,esi
c000d55a:	6a 00                	push   0x0
c000d55c:	6a 00                	push   0x0
c000d55e:	56                   	push   esi
c000d55f:	e8 02 dd ff ff       	call   c000b266 <Computer::open(int, int, void*)>
c000d564:	83 c4 14             	add    esp,0x14
c000d567:	53                   	push   ebx
c000d568:	e8 1b 3f 00 00       	call   c0011488 <VAS::~VAS()>
c000d56d:	c7 04 24 74 01 02 c0 	mov    DWORD PTR [esp],0xc0020174
c000d574:	e8 43 f7 ff ff       	call   c000ccbc <panic(char const*)>
c000d579:	83 c4 20             	add    esp,0x20
c000d57c:	5b                   	pop    ebx
c000d57d:	5e                   	pop    esi
c000d57e:	5f                   	pop    edi
c000d57f:	c3                   	ret    

c000d580 <Phys::allocateDMA(unsigned long)>:
c000d580:	55                   	push   ebp
c000d581:	31 d2                	xor    edx,edx
c000d583:	57                   	push   edi
c000d584:	31 ed                	xor    ebp,ebp
c000d586:	56                   	push   esi
c000d587:	31 c9                	xor    ecx,ecx
c000d589:	53                   	push   ebx
c000d58a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d58e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d594:	31 c0                	xor    eax,eax
c000d596:	c1 ee 0c             	shr    esi,0xc
c000d599:	eb 17                	jmp    c000d5b2 <Phys::allocateDMA(unsigned long)+0x32>
c000d59b:	85 c9                	test   ecx,ecx
c000d59d:	75 04                	jne    c000d5a3 <Phys::allocateDMA(unsigned long)+0x23>
c000d59f:	89 d5                	mov    ebp,edx
c000d5a1:	89 d0                	mov    eax,edx
c000d5a3:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d5a6:	39 de                	cmp    esi,ebx
c000d5a8:	74 20                	je     c000d5ca <Phys::allocateDMA(unsigned long)+0x4a>
c000d5aa:	42                   	inc    edx
c000d5ab:	89 d9                	mov    ecx,ebx
c000d5ad:	83 fa 2f             	cmp    edx,0x2f
c000d5b0:	7f 11                	jg     c000d5c3 <Phys::allocateDMA(unsigned long)+0x43>
c000d5b2:	80 ba c0 34 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcb40],0x0
c000d5b9:	74 e0                	je     c000d59b <Phys::allocateDMA(unsigned long)+0x1b>
c000d5bb:	31 c9                	xor    ecx,ecx
c000d5bd:	42                   	inc    edx
c000d5be:	83 fa 2f             	cmp    edx,0x2f
c000d5c1:	7e ef                	jle    c000d5b2 <Phys::allocateDMA(unsigned long)+0x32>
c000d5c3:	5b                   	pop    ebx
c000d5c4:	31 c0                	xor    eax,eax
c000d5c6:	5e                   	pop    esi
c000d5c7:	5f                   	pop    edi
c000d5c8:	5d                   	pop    ebp
c000d5c9:	c3                   	ret    
c000d5ca:	8d 14 30             	lea    edx,[eax+esi*1]
c000d5cd:	89 d7                	mov    edi,edx
c000d5cf:	4f                   	dec    edi
c000d5d0:	79 03                	jns    c000d5d5 <Phys::allocateDMA(unsigned long)+0x55>
c000d5d2:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d5d5:	c1 ff 04             	sar    edi,0x4
c000d5d8:	89 c2                	mov    edx,eax
c000d5da:	c1 fa 04             	sar    edx,0x4
c000d5dd:	39 fa                	cmp    edx,edi
c000d5df:	75 2f                	jne    c000d610 <Phys::allocateDMA(unsigned long)+0x90>
c000d5e1:	85 db                	test   ebx,ebx
c000d5e3:	74 1a                	je     c000d5ff <Phys::allocateDMA(unsigned long)+0x7f>
c000d5e5:	be c0 34 02 c0       	mov    esi,0xc00234c0
c000d5ea:	8d 90 c0 34 02 c0    	lea    edx,[eax-0x3ffdcb40]
c000d5f0:	f7 d6                	not    esi
c000d5f2:	29 c6                	sub    esi,eax
c000d5f4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d5f7:	42                   	inc    edx
c000d5f8:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d5fb:	39 d9                	cmp    ecx,ebx
c000d5fd:	7f f5                	jg     c000d5f4 <Phys::allocateDMA(unsigned long)+0x74>
c000d5ff:	85 ff                	test   edi,edi
c000d601:	74 13                	je     c000d616 <Phys::allocateDMA(unsigned long)+0x96>
c000d603:	5b                   	pop    ebx
c000d604:	05 50 20 0c 00       	add    eax,0xc2050
c000d609:	5e                   	pop    esi
c000d60a:	c1 e0 0c             	shl    eax,0xc
c000d60d:	5f                   	pop    edi
c000d60e:	5d                   	pop    ebp
c000d60f:	c3                   	ret    
c000d610:	89 ea                	mov    edx,ebp
c000d612:	31 c9                	xor    ecx,ecx
c000d614:	eb a7                	jmp    c000d5bd <Phys::allocateDMA(unsigned long)+0x3d>
c000d616:	5b                   	pop    ebx
c000d617:	c1 e0 0c             	shl    eax,0xc
c000d61a:	5e                   	pop    esi
c000d61b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d620:	5f                   	pop    edi
c000d621:	5d                   	pop    ebp
c000d622:	c3                   	ret    

c000d623 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d627:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d62b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d631:	c1 e9 0c             	shr    ecx,0xc
c000d634:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d639:	76 25                	jbe    c000d660 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d63b:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d640:	c1 e8 0c             	shr    eax,0xc
c000d643:	8d 50 10             	lea    edx,[eax+0x10]
c000d646:	85 c9                	test   ecx,ecx
c000d648:	74 15                	je     c000d65f <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d64a:	8d 82 c0 34 02 c0    	lea    eax,[edx-0x3ffdcb40]
c000d650:	8d 94 11 c0 34 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcb40]
c000d657:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d65a:	40                   	inc    eax
c000d65b:	39 d0                	cmp    eax,edx
c000d65d:	75 f8                	jne    c000d657 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d65f:	c3                   	ret    
c000d660:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d666:	c1 ea 0c             	shr    edx,0xc
c000d669:	eb db                	jmp    c000d646 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d66b <Phys::setPageState(unsigned long, bool)>:
c000d66b:	56                   	push   esi
c000d66c:	ba 01 00 00 00       	mov    edx,0x1
c000d671:	53                   	push   ebx
c000d672:	8b 35 ec 20 02 c0    	mov    esi,DWORD PTR ds:0xc00220ec
c000d678:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d67c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d680:	89 c8                	mov    eax,ecx
c000d682:	83 e1 07             	and    ecx,0x7
c000d685:	c1 e8 03             	shr    eax,0x3
c000d688:	d3 e3                	shl    ebx,cl
c000d68a:	01 c6                	add    esi,eax
c000d68c:	d3 e2                	shl    edx,cl
c000d68e:	f7 d2                	not    edx
c000d690:	20 16                	and    BYTE PTR [esi],dl
c000d692:	03 05 ec 20 02 c0    	add    eax,DWORD PTR ds:0xc00220ec
c000d698:	08 18                	or     BYTE PTR [eax],bl
c000d69a:	5b                   	pop    ebx
c000d69b:	5e                   	pop    esi
c000d69c:	c3                   	ret    

c000d69d <Phys::getPageState(unsigned long)>:
c000d69d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d6a1:	8b 15 ec 20 02 c0    	mov    edx,DWORD PTR ds:0xc00220ec
c000d6a7:	89 c8                	mov    eax,ecx
c000d6a9:	83 e1 07             	and    ecx,0x7
c000d6ac:	c1 e8 03             	shr    eax,0x3
c000d6af:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d6b3:	d3 f8                	sar    eax,cl
c000d6b5:	83 e0 01             	and    eax,0x1
c000d6b8:	c3                   	ret    

c000d6b9 <Phys::freePage(unsigned long)>:
c000d6b9:	53                   	push   ebx
c000d6ba:	83 ec 08             	sub    esp,0x8
c000d6bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6c1:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d6c7:	76 57                	jbe    c000d720 <Phys::freePage(unsigned long)+0x67>
c000d6c9:	c1 eb 0c             	shr    ebx,0xc
c000d6cc:	53                   	push   ebx
c000d6cd:	e8 cb ff ff ff       	call   c000d69d <Phys::getPageState(unsigned long)>
c000d6d2:	5a                   	pop    edx
c000d6d3:	84 c0                	test   al,al
c000d6d5:	74 5b                	je     c000d732 <Phys::freePage(unsigned long)+0x79>
c000d6d7:	a1 ac 34 02 c0       	mov    eax,ds:0xc00234ac
c000d6dc:	48                   	dec    eax
c000d6dd:	a3 ac 34 02 c0       	mov    ds:0xc00234ac,eax
c000d6e2:	8d 04 80             	lea    eax,[eax+eax*4]
c000d6e5:	8d 04 80             	lea    eax,[eax+eax*4]
c000d6e8:	c1 e0 02             	shl    eax,0x2
c000d6eb:	99                   	cdq    
c000d6ec:	f7 3d b0 34 02 c0    	idiv   DWORD PTR ds:0xc00234b0
c000d6f2:	39 05 a8 34 02 c0    	cmp    DWORD PTR ds:0xc00234a8,eax
c000d6f8:	75 13                	jne    c000d70d <Phys::freePage(unsigned long)+0x54>
c000d6fa:	83 ec 08             	sub    esp,0x8
c000d6fd:	6a 00                	push   0x0
c000d6ff:	53                   	push   ebx
c000d700:	e8 66 ff ff ff       	call   c000d66b <Phys::setPageState(unsigned long, bool)>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	83 c4 08             	add    esp,0x8
c000d70b:	5b                   	pop    ebx
c000d70c:	c3                   	ret    
c000d70d:	83 ec 0c             	sub    esp,0xc
c000d710:	a3 a8 34 02 c0       	mov    ds:0xc00234a8,eax
c000d715:	50                   	push   eax
c000d716:	e8 57 28 00 00       	call   c000ff72 <VgaText::updateRAMUsageDisplay(int)>
c000d71b:	83 c4 10             	add    esp,0x10
c000d71e:	eb da                	jmp    c000d6fa <Phys::freePage(unsigned long)+0x41>
c000d720:	68 00 10 00 00       	push   0x1000
c000d725:	53                   	push   ebx
c000d726:	e8 f8 fe ff ff       	call   c000d623 <Phys::freeDMA(unsigned long, unsigned long)>
c000d72b:	59                   	pop    ecx
c000d72c:	5b                   	pop    ebx
c000d72d:	83 c4 08             	add    esp,0x8
c000d730:	5b                   	pop    ebx
c000d731:	c3                   	ret    
c000d732:	c7 44 24 10 8f 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc002018f
c000d73a:	83 c4 08             	add    esp,0x8
c000d73d:	5b                   	pop    ebx
c000d73e:	e9 79 f5 ff ff       	jmp    c000ccbc <panic(char const*)>

c000d743 <Phys::allocatePage()>:
c000d743:	56                   	push   esi
c000d744:	53                   	push   ebx
c000d745:	51                   	push   ecx
c000d746:	8b 35 a0 34 02 c0    	mov    esi,DWORD PTR ds:0xc00234a0
c000d74c:	89 f3                	mov    ebx,esi
c000d74e:	eb 0a                	jmp    c000d75a <Phys::allocatePage()+0x17>
c000d750:	89 1d a0 34 02 c0    	mov    DWORD PTR ds:0xc00234a0,ebx
c000d756:	39 de                	cmp    esi,ebx
c000d758:	74 24                	je     c000d77e <Phys::allocatePage()+0x3b>
c000d75a:	53                   	push   ebx
c000d75b:	e8 3d ff ff ff       	call   c000d69d <Phys::getPageState(unsigned long)>
c000d760:	5a                   	pop    edx
c000d761:	84 c0                	test   al,al
c000d763:	74 4e                	je     c000d7b3 <Phys::allocatePage()+0x70>
c000d765:	43                   	inc    ebx
c000d766:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d76c:	75 e2                	jne    c000d750 <Phys::allocatePage()+0xd>
c000d76e:	31 db                	xor    ebx,ebx
c000d770:	c7 05 a0 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234a0,0x0
c000d77a:	39 de                	cmp    esi,ebx
c000d77c:	75 dc                	jne    c000d75a <Phys::allocatePage()+0x17>
c000d77e:	83 ec 0c             	sub    esp,0xc
c000d781:	68 00 10 00 00       	push   0x1000
c000d786:	e8 f5 fd ff ff       	call   c000d580 <Phys::allocateDMA(unsigned long)>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	85 c0                	test   eax,eax
c000d790:	75 56                	jne    c000d7e8 <Phys::allocatePage()+0xa5>
c000d792:	83 ec 0c             	sub    esp,0xc
c000d795:	68 a5 01 02 c0       	push   0xc00201a5
c000d79a:	e8 1d f5 ff ff       	call   c000ccbc <panic(char const*)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	8b 1d a0 34 02 c0    	mov    ebx,DWORD PTR ds:0xc00234a0
c000d7a8:	53                   	push   ebx
c000d7a9:	e8 ef fe ff ff       	call   c000d69d <Phys::getPageState(unsigned long)>
c000d7ae:	5a                   	pop    edx
c000d7af:	84 c0                	test   al,al
c000d7b1:	75 b2                	jne    c000d765 <Phys::allocatePage()+0x22>
c000d7b3:	6a 01                	push   0x1
c000d7b5:	53                   	push   ebx
c000d7b6:	e8 b0 fe ff ff       	call   c000d66b <Phys::setPageState(unsigned long, bool)>
c000d7bb:	a1 ac 34 02 c0       	mov    eax,ds:0xc00234ac
c000d7c0:	59                   	pop    ecx
c000d7c1:	40                   	inc    eax
c000d7c2:	5b                   	pop    ebx
c000d7c3:	a3 ac 34 02 c0       	mov    ds:0xc00234ac,eax
c000d7c8:	8d 04 80             	lea    eax,[eax+eax*4]
c000d7cb:	8d 04 80             	lea    eax,[eax+eax*4]
c000d7ce:	c1 e0 02             	shl    eax,0x2
c000d7d1:	99                   	cdq    
c000d7d2:	f7 3d b0 34 02 c0    	idiv   DWORD PTR ds:0xc00234b0
c000d7d8:	39 05 a8 34 02 c0    	cmp    DWORD PTR ds:0xc00234a8,eax
c000d7de:	75 0c                	jne    c000d7ec <Phys::allocatePage()+0xa9>
c000d7e0:	a1 a0 34 02 c0       	mov    eax,ds:0xc00234a0
c000d7e5:	c1 e0 0c             	shl    eax,0xc
c000d7e8:	5a                   	pop    edx
c000d7e9:	5b                   	pop    ebx
c000d7ea:	5e                   	pop    esi
c000d7eb:	c3                   	ret    
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	a3 a8 34 02 c0       	mov    ds:0xc00234a8,eax
c000d7f4:	50                   	push   eax
c000d7f5:	e8 78 27 00 00       	call   c000ff72 <VgaText::updateRAMUsageDisplay(int)>
c000d7fa:	83 c4 10             	add    esp,0x10
c000d7fd:	eb e1                	jmp    c000d7e0 <Phys::allocatePage()+0x9d>

c000d7ff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000d7ff:	56                   	push   esi
c000d800:	53                   	push   ebx
c000d801:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d805:	39 1d a4 34 02 c0    	cmp    DWORD PTR ds:0xc00234a4,ebx
c000d80b:	73 06                	jae    c000d813 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000d80d:	89 1d a4 34 02 c0    	mov    DWORD PTR ds:0xc00234a4,ebx
c000d813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d817:	c1 eb 0c             	shr    ebx,0xc
c000d81a:	c1 e8 0c             	shr    eax,0xc
c000d81d:	39 d8                	cmp    eax,ebx
c000d81f:	73 13                	jae    c000d834 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000d821:	6a 00                	push   0x0
c000d823:	8d 70 01             	lea    esi,[eax+0x1]
c000d826:	50                   	push   eax
c000d827:	e8 3f fe ff ff       	call   c000d66b <Phys::setPageState(unsigned long, bool)>
c000d82c:	5a                   	pop    edx
c000d82d:	89 f0                	mov    eax,esi
c000d82f:	59                   	pop    ecx
c000d830:	39 f3                	cmp    ebx,esi
c000d832:	75 ed                	jne    c000d821 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000d834:	5b                   	pop    ebx
c000d835:	5e                   	pop    esi
c000d836:	c3                   	ret    

c000d837 <Phys::physicalMemorySetup(unsigned int)>:
c000d837:	55                   	push   ebp
c000d838:	57                   	push   edi
c000d839:	56                   	push   esi
c000d83a:	53                   	push   ebx
c000d83b:	31 db                	xor    ebx,ebx
c000d83d:	83 ec 30             	sub    esp,0x30
c000d840:	6a 30                	push   0x30
c000d842:	6a 00                	push   0x0
c000d844:	68 c0 34 02 c0       	push   0xc00234c0
c000d849:	e8 ba 2d ff ff       	call   c0000608 <memset>
c000d84e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d852:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d857:	05 00 10 00 00       	add    eax,0x1000
c000d85c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	83 ec 08             	sub    esp,0x8
c000d866:	6a 01                	push   0x1
c000d868:	53                   	push   ebx
c000d869:	43                   	inc    ebx
c000d86a:	e8 fc fd ff ff       	call   c000d66b <Phys::setPageState(unsigned long, bool)>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d878:	75 e9                	jne    c000d863 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000d87a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000d881:	66 85 c0             	test   ax,ax
c000d884:	0f 84 28 01 00 00    	je     c000d9b2 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000d88a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d88e:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000d894:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000d899:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000d89f:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000d8a5:	89 f1                	mov    ecx,esi
c000d8a7:	89 fb                	mov    ebx,edi
c000d8a9:	01 c1                	add    ecx,eax
c000d8ab:	89 d5                	mov    ebp,edx
c000d8ad:	11 d3                	adc    ebx,edx
c000d8af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d8b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d8b6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d8ba:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000d8c0:	09 dd                	or     ebp,ebx
c000d8c2:	0f 85 fa 00 00 00    	jne    c000d9c2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d8c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8d4:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000d8dc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d8e8:	eb 45                	jmp    c000d92f <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000d8ea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000d8ee:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000d8f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8f7:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000d8fb:	0f 84 c1 00 00 00    	je     c000d9c2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d901:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000d905:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d908:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d90b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000d90e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000d911:	89 c1                	mov    ecx,eax
c000d913:	89 d3                	mov    ebx,edx
c000d915:	01 f1                	add    ecx,esi
c000d917:	11 fb                	adc    ebx,edi
c000d919:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d91c:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d920:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000d923:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d927:	09 d3                	or     ebx,edx
c000d929:	0f 85 93 00 00 00    	jne    c000d9c2 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d92f:	49                   	dec    ecx
c000d930:	75 b8                	jne    c000d8ea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d932:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000d935:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d939:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d93d:	39 e9                	cmp    ecx,ebp
c000d93f:	89 d9                	mov    ecx,ebx
c000d941:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d945:	72 a3                	jb     c000d8ea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d947:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000d94c:	39 f1                	cmp    ecx,esi
c000d94e:	b9 00 00 00 00       	mov    ecx,0x0
c000d953:	19 f9                	sbb    ecx,edi
c000d955:	73 93                	jae    c000d8ea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d957:	39 e8                	cmp    eax,ebp
c000d959:	89 d1                	mov    ecx,edx
c000d95b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d95f:	73 13                	jae    c000d974 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000d961:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d964:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d968:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d96c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d970:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000d974:	83 ec 08             	sub    esp,0x8
c000d977:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000d97b:	50                   	push   eax
c000d97c:	e8 7e fe ff ff       	call   c000d7ff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000d981:	83 c4 0c             	add    esp,0xc
c000d984:	89 fa                	mov    edx,edi
c000d986:	89 f0                	mov    eax,esi
c000d988:	0f ac d0 0c          	shrd   eax,edx,0xc
c000d98c:	03 05 b0 34 02 c0    	add    eax,DWORD PTR ds:0xc00234b0
c000d992:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000d999:	a3 b0 34 02 c0       	mov    ds:0xc00234b0,eax
c000d99e:	52                   	push   edx
c000d99f:	50                   	push   eax
c000d9a0:	68 c1 01 02 c0       	push   0xc00201c1
c000d9a5:	e8 f4 f1 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	e9 38 ff ff ff       	jmp    c000d8ea <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d9b2:	83 ec 0c             	sub    esp,0xc
c000d9b5:	68 b3 01 02 c0       	push   0xc00201b3
c000d9ba:	e8 fd f2 ff ff       	call   c000ccbc <panic(char const*)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	bb 40 01 00 00       	mov    ebx,0x140
c000d9c7:	83 ec 08             	sub    esp,0x8
c000d9ca:	6a 00                	push   0x0
c000d9cc:	53                   	push   ebx
c000d9cd:	43                   	inc    ebx
c000d9ce:	e8 98 fc ff ff       	call   c000d66b <Phys::setPageState(unsigned long, bool)>
c000d9d3:	ff 05 b0 34 02 c0    	inc    DWORD PTR ds:0xc00234b0
c000d9d9:	83 c4 10             	add    esp,0x10
c000d9dc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000d9e2:	75 e3                	jne    c000d9c7 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000d9e4:	83 c4 2c             	add    esp,0x2c
c000d9e7:	5b                   	pop    ebx
c000d9e8:	5e                   	pop    esi
c000d9e9:	5f                   	pop    edi
c000d9ea:	5d                   	pop    ebp
c000d9eb:	c3                   	ret    

c000d9ec <Pipe::isAtty()>:
c000d9ec:	31 c0                	xor    eax,eax
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Pipe::~Pipe()>:
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	ba 20 02 02 c0       	mov    edx,0xc0020220
c000d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fc:	89 10                	mov    DWORD PTR [eax],edx
c000d9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	50                   	push   eax
c000da06:	e8 d3 33 00 00       	call   c0010dde <UnixFile::~UnixFile()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	90                   	nop
c000da0f:	83 c4 0c             	add    esp,0xc
c000da12:	c3                   	ret    
c000da13:	90                   	nop

c000da14 <Pipe::~Pipe()>:
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	83 ec 0c             	sub    esp,0xc
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	e8 cd ff ff ff       	call   c000d9f0 <Pipe::~Pipe()>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	83 ec 08             	sub    esp,0x8
c000da29:	6a 20                	push   0x20
c000da2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2f:	e8 29 47 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c000da34:	83 c4 10             	add    esp,0x10
c000da37:	83 c4 0c             	add    esp,0xc
c000da3a:	c3                   	ret    
c000da3b:	90                   	nop

c000da3c <Pipe::read(unsigned long long, void*, int*)>:
c000da3c:	55                   	push   ebp
c000da3d:	57                   	push   edi
c000da3e:	56                   	push   esi
c000da3f:	53                   	push   ebx
c000da40:	83 ec 1c             	sub    esp,0x1c
c000da43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000da47:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000da4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000da4f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000da52:	89 c8                	mov    eax,ecx
c000da54:	99                   	cdq    
c000da55:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000da59:	74 19                	je     c000da74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000da5b:	39 f9                	cmp    ecx,edi
c000da5d:	89 d1                	mov    ecx,edx
c000da5f:	19 f1                	sbb    ecx,esi
c000da61:	73 11                	jae    c000da74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000da63:	e8 d8 05 00 00       	call   c000e040 <lockScheduler()>
c000da68:	e8 07 09 00 00       	call   c000e374 <schedule()>
c000da6d:	e8 d0 05 00 00       	call   c000e042 <unlockScheduler()>
c000da72:	eb db                	jmp    c000da4f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000da74:	39 f8                	cmp    eax,edi
c000da76:	89 d1                	mov    ecx,edx
c000da78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000da7c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000da80:	19 f1                	sbb    ecx,esi
c000da82:	73 08                	jae    c000da8c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000da84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da8f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000da92:	29 c6                	sub    esi,eax
c000da94:	89 f1                	mov    ecx,esi
c000da96:	c1 f9 1f             	sar    ecx,0x1f
c000da99:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000da9d:	89 ca                	mov    edx,ecx
c000da9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000daa3:	19 d1                	sbb    ecx,edx
c000daa5:	73 04                	jae    c000daab <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000daa7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000daab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000daaf:	89 fd                	mov    ebp,edi
c000dab1:	29 f5                	sub    ebp,esi
c000dab3:	85 f6                	test   esi,esi
c000dab5:	74 12                	je     c000dac9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000dab7:	52                   	push   edx
c000dab8:	56                   	push   esi
c000dab9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000dabc:	50                   	push   eax
c000dabd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000dac1:	e8 0c 2b ff ff       	call   c00005d2 <memcpy>
c000dac6:	83 c4 10             	add    esp,0x10
c000dac9:	85 ed                	test   ebp,ebp
c000dacb:	74 12                	je     c000dadf <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000dacd:	50                   	push   eax
c000dace:	55                   	push   ebp
c000dacf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dad2:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000dad6:	56                   	push   esi
c000dad7:	e8 f6 2a ff ff       	call   c00005d2 <memcpy>
c000dadc:	83 c4 10             	add    esp,0x10
c000dadf:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000dae2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dae5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dae8:	99                   	cdq    
c000dae9:	89 f7                	mov    edi,esi
c000daeb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000daef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000daf3:	c1 ff 1f             	sar    edi,0x1f
c000daf6:	57                   	push   edi
c000daf7:	56                   	push   esi
c000daf8:	52                   	push   edx
c000daf9:	50                   	push   eax
c000dafa:	e8 5d 05 01 00       	call   c001e05c <__umoddi3>
c000daff:	83 c4 10             	add    esp,0x10
c000db02:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000db05:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000db0a:	75 10                	jne    c000db1c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	68 dd 01 02 c0       	push   0xc00201dd
c000db14:	e8 a3 f1 ff ff       	call   c000ccbc <panic(char const*)>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db24:	89 10                	mov    DWORD PTR [eax],edx
c000db26:	83 c4 1c             	add    esp,0x1c
c000db29:	31 c0                	xor    eax,eax
c000db2b:	5b                   	pop    ebx
c000db2c:	5e                   	pop    esi
c000db2d:	5f                   	pop    edi
c000db2e:	5d                   	pop    ebp
c000db2f:	c3                   	ret    

c000db30 <Pipe::write(unsigned long long, void*, int*)>:
c000db30:	55                   	push   ebp
c000db31:	57                   	push   edi
c000db32:	56                   	push   esi
c000db33:	53                   	push   ebx
c000db34:	83 ec 1c             	sub    esp,0x1c
c000db37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db3b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000db3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000db43:	89 04 24             	mov    DWORD PTR [esp],eax
c000db46:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000db49:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000db4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db50:	89 de                	mov    esi,ebx
c000db52:	89 df                	mov    edi,ebx
c000db54:	c1 ff 1f             	sar    edi,0x1f
c000db57:	01 c6                	add    esi,eax
c000db59:	89 c8                	mov    eax,ecx
c000db5b:	11 d7                	adc    edi,edx
c000db5d:	99                   	cdq    
c000db5e:	39 f1                	cmp    ecx,esi
c000db60:	89 d0                	mov    eax,edx
c000db62:	19 f8                	sbb    eax,edi
c000db64:	b8 01 00 00 00       	mov    eax,0x1
c000db69:	0f 82 80 00 00 00    	jb     c000dbef <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000db6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000db72:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db75:	01 d8                	add    eax,ebx
c000db77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000db7b:	99                   	cdq    
c000db7c:	f7 f9                	idiv   ecx
c000db7e:	29 d1                	sub    ecx,edx
c000db80:	89 d7                	mov    edi,edx
c000db82:	89 c8                	mov    eax,ecx
c000db84:	99                   	cdq    
c000db85:	39 ce                	cmp    esi,ecx
c000db87:	19 d3                	sbb    ebx,edx
c000db89:	bb 00 00 00 00       	mov    ebx,0x0
c000db8e:	72 04                	jb     c000db94 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000db90:	89 f3                	mov    ebx,esi
c000db92:	29 cb                	sub    ebx,ecx
c000db94:	89 f1                	mov    ecx,esi
c000db96:	29 d9                	sub    ecx,ebx
c000db98:	74 1a                	je     c000dbb4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000db9a:	52                   	push   edx
c000db9b:	51                   	push   ecx
c000db9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dba0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dba7:	57                   	push   edi
c000dba8:	e8 25 2a ff ff       	call   c00005d2 <memcpy>
c000dbad:	83 c4 10             	add    esp,0x10
c000dbb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbb4:	85 db                	test   ebx,ebx
c000dbb6:	74 12                	je     c000dbca <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000dbb8:	50                   	push   eax
c000dbb9:	53                   	push   ebx
c000dbba:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000dbbe:	51                   	push   ecx
c000dbbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dbc2:	e8 0b 2a ff ff       	call   c00005d2 <memcpy>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000dbcd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dbd2:	75 10                	jne    c000dbe4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000dbd4:	83 ec 0c             	sub    esp,0xc
c000dbd7:	68 f9 01 02 c0       	push   0xc00201f9
c000dbdc:	e8 db f0 ff ff       	call   c000ccbc <panic(char const*)>
c000dbe1:	83 c4 10             	add    esp,0x10
c000dbe4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbe8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000dbeb:	89 38                	mov    DWORD PTR [eax],edi
c000dbed:	31 c0                	xor    eax,eax
c000dbef:	83 c4 1c             	add    esp,0x1c
c000dbf2:	5b                   	pop    ebx
c000dbf3:	5e                   	pop    esi
c000dbf4:	5f                   	pop    edi
c000dbf5:	5d                   	pop    ebp
c000dbf6:	c3                   	ret    
c000dbf7:	90                   	nop

c000dbf8 <Pipe::Pipe(int)>:
c000dbf8:	83 ec 0c             	sub    esp,0xc
c000dbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbff:	83 ec 08             	sub    esp,0x8
c000dc02:	6a 00                	push   0x0
c000dc04:	50                   	push   eax
c000dc05:	e8 70 31 00 00       	call   c0010d7a <UnixFile::UnixFile(int)>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	ba 20 02 02 c0       	mov    edx,0xc0020220
c000dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc16:	89 10                	mov    DWORD PTR [eax],edx
c000dc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000dc39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc3d:	83 ec 0c             	sub    esp,0xc
c000dc40:	50                   	push   eax
c000dc41:	e8 53 f5 ff ff       	call   c000d199 <malloc>
c000dc46:	83 c4 10             	add    esp,0x10
c000dc49:	89 c2                	mov    edx,eax
c000dc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc56:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dc5a:	90                   	nop
c000dc5b:	83 c4 0c             	add    esp,0xc
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <changeTSS>:
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	e8 3e 92 00 00       	call   c0016ea6 <thisCPU()>
c000dc68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dc6e:	83 ec 08             	sub    esp,0x8
c000dc71:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dc74:	05 7c 11 00 00       	add    eax,0x117c
c000dc79:	c1 e1 15             	shl    ecx,0x15
c000dc7c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dc81:	29 ca                	sub    edx,ecx
c000dc83:	52                   	push   edx
c000dc84:	50                   	push   eax
c000dc85:	e8 28 2e 00 00       	call   c0010ab2 <TSS::setESP(unsigned long)>
c000dc8a:	83 c4 1c             	add    esp,0x1c
c000dc8d:	c3                   	ret    

c000dc8e <Process::addArgs(char**)>:
c000dc8e:	57                   	push   edi
c000dc8f:	56                   	push   esi
c000dc90:	53                   	push   ebx
c000dc91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dc99:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dca3:	85 ff                	test   edi,edi
c000dca5:	74 3d                	je     c000dce4 <Process::addArgs(char**)+0x56>
c000dca7:	8b 07                	mov    eax,DWORD PTR [edi]
c000dca9:	85 c0                	test   eax,eax
c000dcab:	74 37                	je     c000dce4 <Process::addArgs(char**)+0x56>
c000dcad:	31 db                	xor    ebx,ebx
c000dcaf:	83 ec 0c             	sub    esp,0xc
c000dcb2:	50                   	push   eax
c000dcb3:	e8 6d 29 ff ff       	call   c0000625 <strlen>
c000dcb8:	40                   	inc    eax
c000dcb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcbc:	e8 d8 f4 ff ff       	call   c000d199 <malloc>
c000dcc1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dcc8:	5a                   	pop    edx
c000dcc9:	59                   	pop    ecx
c000dcca:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dccd:	43                   	inc    ebx
c000dcce:	50                   	push   eax
c000dccf:	e8 d3 29 ff ff       	call   c00006a7 <strcpy>
c000dcd4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dcda:	83 c4 10             	add    esp,0x10
c000dcdd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dce0:	85 c0                	test   eax,eax
c000dce2:	75 cb                	jne    c000dcaf <Process::addArgs(char**)+0x21>
c000dce4:	5b                   	pop    ebx
c000dce5:	5e                   	pop    esi
c000dce6:	5f                   	pop    edi
c000dce7:	c3                   	ret    

c000dce8 <Process::Process(char const*, Process*, char**)>:
c000dce8:	56                   	push   esi
c000dce9:	53                   	push   ebx
c000dcea:	83 ec 14             	sub    esp,0x14
c000dced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf1:	05 0c 02 00 00       	add    eax,0x20c
c000dcf6:	bb 07 00 00 00       	mov    ebx,0x7
c000dcfb:	89 c6                	mov    esi,eax
c000dcfd:	85 db                	test   ebx,ebx
c000dcff:	78 12                	js     c000dd13 <Process::Process(char const*, Process*, char**)+0x2b>
c000dd01:	83 ec 0c             	sub    esp,0xc
c000dd04:	56                   	push   esi
c000dd05:	e8 7e 05 01 00       	call   c001e288 <ThreadControlBlock::ThreadControlBlock()>
c000dd0a:	83 c4 10             	add    esp,0x10
c000dd0d:	83 c6 63             	add    esi,0x63
c000dd10:	4b                   	dec    ebx
c000dd11:	eb ea                	jmp    c000dcfd <Process::Process(char const*, Process*, char**)+0x15>
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dd1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd22:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000dd2b:	a1 f0 20 02 c0       	mov    eax,ds:0xc00220f0
c000dd30:	8d 50 01             	lea    edx,[eax+0x1]
c000dd33:	89 15 f0 20 02 c0    	mov    DWORD PTR ds:0xc00220f0,edx
c000dd39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd3d:	89 02                	mov    DWORD PTR [edx],eax
c000dd3f:	83 ec 0c             	sub    esp,0xc
c000dd42:	6a 10                	push   0x10
c000dd44:	e8 05 44 00 00       	call   c001214e <operator new(unsigned long)>
c000dd49:	83 c4 10             	add    esp,0x10
c000dd4c:	89 c3                	mov    ebx,eax
c000dd4e:	83 ec 08             	sub    esp,0x8
c000dd51:	6a 00                	push   0x0
c000dd53:	53                   	push   ebx
c000dd54:	e8 89 40 00 00       	call   c0011de2 <VAS::VAS(bool)>
c000dd59:	83 c4 10             	add    esp,0x10
c000dd5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd60:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000dd66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000dd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dd7c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000dd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd86:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dd8c:	85 c0                	test   eax,eax
c000dd8e:	74 42                	je     c000ddd2 <Process::Process(char const*, Process*, char**)+0xea>
c000dd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd94:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dd9a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000dda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000ddaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ddb4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ddba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddbe:	05 0c 01 00 00       	add    eax,0x10c
c000ddc3:	83 ec 08             	sub    esp,0x8
c000ddc6:	52                   	push   edx
c000ddc7:	50                   	push   eax
c000ddc8:	e8 da 28 ff ff       	call   c00006a7 <strcpy>
c000ddcd:	83 c4 10             	add    esp,0x10
c000ddd0:	eb 5c                	jmp    c000de2e <Process::Process(char const*, Process*, char**)+0x146>
c000ddd2:	83 ec 0c             	sub    esp,0xc
c000ddd5:	68 60 12 00 00       	push   0x1260
c000ddda:	e8 6f 43 00 00       	call   c001214e <operator new(unsigned long)>
c000dddf:	83 c4 10             	add    esp,0x10
c000dde2:	89 c3                	mov    ebx,eax
c000dde4:	83 ec 08             	sub    esp,0x8
c000dde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddeb:	53                   	push   ebx
c000ddec:	e8 bf 29 00 00       	call   c00107b0 <VgaText::VgaText(char const*)>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000ddfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de02:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000de08:	83 ec 0c             	sub    esp,0xc
c000de0b:	50                   	push   eax
c000de0c:	e8 a0 1d 00 00       	call   c000fbb1 <addToTerminalCycle(VgaText*)>
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de18:	05 0c 01 00 00       	add    eax,0x10c
c000de1d:	83 ec 08             	sub    esp,0x8
c000de20:	68 34 02 02 c0       	push   0xc0020234
c000de25:	50                   	push   eax
c000de26:	e8 7c 28 ff ff       	call   c00006a7 <strcpy>
c000de2b:	83 c4 10             	add    esp,0x10
c000de2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de32:	83 c0 0c             	add    eax,0xc
c000de35:	83 ec 08             	sub    esp,0x8
c000de38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de3c:	50                   	push   eax
c000de3d:	e8 65 28 ff ff       	call   c00006a7 <strcpy>
c000de42:	83 c4 10             	add    esp,0x10
c000de45:	83 ec 08             	sub    esp,0x8
c000de48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de50:	e8 39 fe ff ff       	call   c000dc8e <Process::addArgs(char**)>
c000de55:	83 c4 10             	add    esp,0x10
c000de58:	83 ec 08             	sub    esp,0x8
c000de5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de63:	e8 00 d8 ff ff       	call   c000b668 <loadProgramIntoMemory(Process*, char const*)>
c000de68:	83 c4 10             	add    esp,0x10
c000de6b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de73:	83 f0 01             	xor    eax,0x1
c000de76:	88 c2                	mov    dl,al
c000de78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000de82:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000de87:	83 ec 08             	sub    esp,0x8
c000de8a:	50                   	push   eax
c000de8b:	68 88 02 02 c0       	push   0xc0020288
c000de90:	e8 09 ed ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	90                   	nop
c000de99:	83 c4 14             	add    esp,0x14
c000de9c:	5b                   	pop    ebx
c000de9d:	5e                   	pop    esi
c000de9e:	c3                   	ret    
c000de9f:	90                   	nop

c000dea0 <Process::Process(bool, char const*, Process*, char**)>:
c000dea0:	56                   	push   esi
c000dea1:	53                   	push   ebx
c000dea2:	83 ec 14             	sub    esp,0x14
c000dea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dea9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000dead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb1:	05 0c 02 00 00       	add    eax,0x20c
c000deb6:	bb 07 00 00 00       	mov    ebx,0x7
c000debb:	89 c6                	mov    esi,eax
c000debd:	85 db                	test   ebx,ebx
c000debf:	78 12                	js     c000ded3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000dec1:	83 ec 0c             	sub    esp,0xc
c000dec4:	56                   	push   esi
c000dec5:	e8 be 03 01 00       	call   c001e288 <ThreadControlBlock::ThreadControlBlock()>
c000deca:	83 c4 10             	add    esp,0x10
c000decd:	83 c6 63             	add    esi,0x63
c000ded0:	4b                   	dec    ebx
c000ded1:	eb ea                	jmp    c000debd <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000ded3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000deeb:	a1 f0 20 02 c0       	mov    eax,ds:0xc00220f0
c000def0:	8d 50 01             	lea    edx,[eax+0x1]
c000def3:	89 15 f0 20 02 c0    	mov    DWORD PTR ds:0xc00220f0,edx
c000def9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000defd:	89 02                	mov    DWORD PTR [edx],eax
c000deff:	83 ec 0c             	sub    esp,0xc
c000df02:	6a 10                	push   0x10
c000df04:	e8 45 42 00 00       	call   c001214e <operator new(unsigned long)>
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	89 c3                	mov    ebx,eax
c000df0e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000df13:	83 ec 08             	sub    esp,0x8
c000df16:	50                   	push   eax
c000df17:	53                   	push   ebx
c000df18:	e8 c5 3e 00 00       	call   c0011de2 <VAS::VAS(bool)>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df24:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000df2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000df38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df40:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000df46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000df50:	85 c0                	test   eax,eax
c000df52:	74 42                	je     c000df96 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000df54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df58:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000df5e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df68:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000df6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df72:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000df78:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000df7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df82:	05 0c 01 00 00       	add    eax,0x10c
c000df87:	83 ec 08             	sub    esp,0x8
c000df8a:	52                   	push   edx
c000df8b:	50                   	push   eax
c000df8c:	e8 16 27 ff ff       	call   c00006a7 <strcpy>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	eb 5c                	jmp    c000dff2 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000df96:	83 ec 0c             	sub    esp,0xc
c000df99:	68 60 12 00 00       	push   0x1260
c000df9e:	e8 ab 41 00 00       	call   c001214e <operator new(unsigned long)>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 c3                	mov    ebx,eax
c000dfa8:	83 ec 08             	sub    esp,0x8
c000dfab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dfaf:	53                   	push   ebx
c000dfb0:	e8 fb 27 00 00       	call   c00107b0 <VgaText::VgaText(char const*)>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000dfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfc6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	50                   	push   eax
c000dfd0:	e8 dc 1b 00 00       	call   c000fbb1 <addToTerminalCycle(VgaText*)>
c000dfd5:	83 c4 10             	add    esp,0x10
c000dfd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfdc:	05 0c 01 00 00       	add    eax,0x10c
c000dfe1:	83 ec 08             	sub    esp,0x8
c000dfe4:	68 34 02 02 c0       	push   0xc0020234
c000dfe9:	50                   	push   eax
c000dfea:	e8 b8 26 ff ff       	call   c00006a7 <strcpy>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff6:	83 c0 0c             	add    eax,0xc
c000dff9:	83 ec 08             	sub    esp,0x8
c000dffc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e000:	50                   	push   eax
c000e001:	e8 a1 26 ff ff       	call   c00006a7 <strcpy>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	83 ec 08             	sub    esp,0x8
c000e00c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e014:	e8 75 fc ff ff       	call   c000dc8e <Process::addArgs(char**)>
c000e019:	83 c4 10             	add    esp,0x10
c000e01c:	90                   	nop
c000e01d:	83 c4 14             	add    esp,0x14
c000e020:	5b                   	pop    ebx
c000e021:	5e                   	pop    esi
c000e022:	c3                   	ret    

c000e023 <disableIRQs()>:
c000e023:	fa                   	cli    
c000e024:	ff 05 14 35 02 c0    	inc    DWORD PTR ds:0xc0023514
c000e02a:	c3                   	ret    

c000e02b <getIRQNestingLevel()>:
c000e02b:	a1 14 35 02 c0       	mov    eax,ds:0xc0023514
c000e030:	c3                   	ret    

c000e031 <enableIRQs()>:
c000e031:	a1 14 35 02 c0       	mov    eax,ds:0xc0023514
c000e036:	48                   	dec    eax
c000e037:	a3 14 35 02 c0       	mov    ds:0xc0023514,eax
c000e03c:	75 01                	jne    c000e03f <enableIRQs()+0xe>
c000e03e:	fb                   	sti    
c000e03f:	c3                   	ret    

c000e040 <lockScheduler()>:
c000e040:	eb e1                	jmp    c000e023 <disableIRQs()>

c000e042 <unlockScheduler()>:
c000e042:	eb ed                	jmp    c000e031 <enableIRQs()>

c000e044 <userModeEntryPoint(void*)>:
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	e8 f6 ff ff ff       	call   c000e042 <unlockScheduler()>
c000e04c:	fb                   	sti    
c000e04d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e052:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e055:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e05b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e05f:	83 c4 0c             	add    esp,0xc
c000e062:	e9 7f 21 ff ff       	jmp    c00001e6 <goToUsermode>

c000e067 <lockStuff()>:
c000e067:	e8 b7 ff ff ff       	call   c000e023 <disableIRQs()>
c000e06c:	ff 05 10 35 02 c0    	inc    DWORD PTR ds:0xc0023510
c000e072:	c3                   	ret    

c000e073 <taskStartupFunction>:
c000e073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e078:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e07b:	c3                   	ret    

c000e07c <updateTimeUsed()>:
c000e07c:	57                   	push   edi
c000e07d:	56                   	push   esi
c000e07e:	53                   	push   ebx
c000e07f:	e8 22 8e 00 00       	call   c0016ea6 <thisCPU()>
c000e084:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e08b:	74 49                	je     c000e0d6 <updateTimeUsed()+0x5a>
c000e08d:	0f 31                	rdtsc  
c000e08f:	89 c1                	mov    ecx,eax
c000e091:	a3 50 35 02 c0       	mov    ds:0xc0023550,eax
c000e096:	2b 0d 40 35 02 c0    	sub    ecx,DWORD PTR ds:0xc0023540
c000e09c:	89 d3                	mov    ebx,edx
c000e09e:	89 0d 48 35 02 c0    	mov    DWORD PTR ds:0xc0023548,ecx
c000e0a4:	1b 1d 44 35 02 c0    	sbb    ebx,DWORD PTR ds:0xc0023544
c000e0aa:	a3 40 35 02 c0       	mov    ds:0xc0023540,eax
c000e0af:	89 1d 4c 35 02 c0    	mov    DWORD PTR ds:0xc002354c,ebx
c000e0b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e0ba:	89 15 54 35 02 c0    	mov    DWORD PTR ds:0xc0023554,edx
c000e0c0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e0c3:	89 15 44 35 02 c0    	mov    DWORD PTR ds:0xc0023544,edx
c000e0c9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e0cc:	01 f1                	add    ecx,esi
c000e0ce:	11 fb                	adc    ebx,edi
c000e0d0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e0d3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e0d6:	5b                   	pop    ebx
c000e0d7:	5e                   	pop    esi
c000e0d8:	5f                   	pop    edi
c000e0d9:	c3                   	ret    

c000e0da <switchToThread(ThreadControlBlock*)>:
c000e0da:	53                   	push   ebx
c000e0db:	83 ec 08             	sub    esp,0x8
c000e0de:	a1 10 35 02 c0       	mov    eax,ds:0xc0023510
c000e0e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0e7:	85 c0                	test   eax,eax
c000e0e9:	75 30                	jne    c000e11b <switchToThread(ThreadControlBlock*)+0x41>
c000e0eb:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e0ee:	3c ff                	cmp    al,0xff
c000e0f0:	74 25                	je     c000e117 <switchToThread(ThreadControlBlock*)+0x3d>
c000e0f2:	0f b6 d0             	movzx  edx,al
c000e0f5:	b8 84 03 00 00       	mov    eax,0x384
c000e0fa:	29 d0                	sub    eax,edx
c000e0fc:	c1 e0 10             	shl    eax,0x10
c000e0ff:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e102:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e105:	e8 72 ff ff ff       	call   c000e07c <updateTimeUsed()>
c000e10a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e10e:	83 c4 08             	add    esp,0x8
c000e111:	5b                   	pop    ebx
c000e112:	e9 08 21 ff ff       	jmp    c000021f <switchToThreadASM>
c000e117:	31 c0                	xor    eax,eax
c000e119:	eb e7                	jmp    c000e102 <switchToThread(ThreadControlBlock*)+0x28>
c000e11b:	c7 05 0c 35 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002350c,0x1
c000e125:	83 c4 08             	add    esp,0x8
c000e128:	5b                   	pop    ebx
c000e129:	c3                   	ret    

c000e12a <Semaphore::Semaphore(int)>:
c000e12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e12e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e132:	89 10                	mov    DWORD PTR [eax],edx
c000e134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e138:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e13f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e14e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e155:	90                   	nop
c000e156:	c3                   	ret    
c000e157:	90                   	nop

c000e158 <Mutex::Mutex()>:
c000e158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e15c:	6a 01                	push   0x1
c000e15e:	50                   	push   eax
c000e15f:	e8 c6 ff ff ff       	call   c000e12a <Semaphore::Semaphore(int)>
c000e164:	83 c4 08             	add    esp,0x8
c000e167:	90                   	nop
c000e168:	c3                   	ret    
c000e169:	90                   	nop

c000e16a <Process::createThread(void (*)(void*), void*, int)>:
c000e16a:	55                   	push   ebp
c000e16b:	31 c9                	xor    ecx,ecx
c000e16d:	57                   	push   edi
c000e16e:	56                   	push   esi
c000e16f:	53                   	push   ebx
c000e170:	83 ec 1c             	sub    esp,0x1c
c000e173:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e177:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e17e:	89 f2                	mov    edx,esi
c000e180:	0f b7 c2             	movzx  eax,dx
c000e183:	83 e2 01             	and    edx,0x1
c000e186:	74 14                	je     c000e19c <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e188:	d1 f8                	sar    eax,1
c000e18a:	41                   	inc    ecx
c000e18b:	89 c2                	mov    edx,eax
c000e18d:	83 f9 10             	cmp    ecx,0x10
c000e190:	75 ee                	jne    c000e180 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e192:	83 c4 1c             	add    esp,0x1c
c000e195:	31 c0                	xor    eax,eax
c000e197:	5b                   	pop    ebx
c000e198:	5e                   	pop    esi
c000e199:	5f                   	pop    edi
c000e19a:	5d                   	pop    ebp
c000e19b:	c3                   	ret    
c000e19c:	83 ec 08             	sub    esp,0x8
c000e19f:	b8 01 00 00 00       	mov    eax,0x1
c000e1a4:	d3 e0                	shl    eax,cl
c000e1a6:	09 c6                	or     esi,eax
c000e1a8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e1ae:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e1b5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e1b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e1bb:	01 ce                	add    esi,ecx
c000e1bd:	89 f0                	mov    eax,esi
c000e1bf:	c1 e0 05             	shl    eax,0x5
c000e1c2:	01 c6                	add    esi,eax
c000e1c4:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e1c7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e1cd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e1d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e1d7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e1dd:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e1e3:	89 ca                	mov    edx,ecx
c000e1e5:	f7 da                	neg    edx
c000e1e7:	c1 e2 15             	shl    edx,0x15
c000e1ea:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e1f0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e1f6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e1fa:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e204:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e20a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e20e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e214:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e21e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e228:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e22f:	50                   	push   eax
c000e230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e234:	68 30 35 02 c0       	push   0xc0023530
c000e239:	e8 e0 00 01 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e23e:	83 c4 10             	add    esp,0x10
c000e241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e245:	83 c4 1c             	add    esp,0x1c
c000e248:	5b                   	pop    ebx
c000e249:	5e                   	pop    esi
c000e24a:	5f                   	pop    edi
c000e24b:	5d                   	pop    ebp
c000e24c:	c3                   	ret    
c000e24d:	90                   	nop

c000e24e <Process::createUserThread()>:
c000e24e:	83 ec 0c             	sub    esp,0xc
c000e251:	68 80 00 00 00       	push   0x80
c000e256:	6a 00                	push   0x0
c000e258:	68 44 e0 00 c0       	push   0xc000e044
c000e25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e261:	e8 04 ff ff ff       	call   c000e16a <Process::createThread(void (*)(void*), void*, int)>
c000e266:	83 c4 1c             	add    esp,0x1c
c000e269:	c3                   	ret    

c000e26a <setupMultitasking(void (*)())>:
c000e26a:	56                   	push   esi
c000e26b:	53                   	push   ebx
c000e26c:	53                   	push   ebx
c000e26d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e271:	eb 10                	jmp    c000e283 <setupMultitasking(void (*)())+0x19>
c000e273:	83 ec 0c             	sub    esp,0xc
c000e276:	68 30 35 02 c0       	push   0xc0023530
c000e27b:	e8 8e 01 01 00       	call   c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e280:	83 c4 10             	add    esp,0x10
c000e283:	83 ec 0c             	sub    esp,0xc
c000e286:	68 30 35 02 c0       	push   0xc0023530
c000e28b:	e8 62 01 01 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	84 c0                	test   al,al
c000e295:	74 dc                	je     c000e273 <setupMultitasking(void (*)())+0x9>
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	68 3b 07 00 00       	push   0x73b
c000e29f:	e8 aa 3e 00 00       	call   c001214e <operator new(unsigned long)>
c000e2a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e2ab:	89 c3                	mov    ebx,eax
c000e2ad:	6a 00                	push   0x0
c000e2af:	68 38 02 02 c0       	push   0xc0020238
c000e2b4:	6a 01                	push   0x1
c000e2b6:	50                   	push   eax
c000e2b7:	e8 e4 fb ff ff       	call   c000dea0 <Process::Process(bool, char const*, Process*, char**)>
c000e2bc:	83 c4 18             	add    esp,0x18
c000e2bf:	89 1d 3c 35 02 c0    	mov    DWORD PTR ds:0xc002353c,ebx
c000e2c5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e2cb:	68 b0 02 02 c0       	push   0xc00202b0
c000e2d0:	e8 c9 e8 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e2d5:	58                   	pop    eax
c000e2d6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e2dc:	e8 44 20 00 00       	call   c0010325 <setActiveTerminal(VgaText*)>
c000e2e1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e2e9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e2ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2f2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e2fc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e302:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e308:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e312:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e31c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e326:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e32c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e332:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e33c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e342:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e34c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e352:	5a                   	pop    edx
c000e353:	59                   	pop    ecx
c000e354:	68 34 02 02 c0       	push   0xc0020234
c000e359:	50                   	push   eax
c000e35a:	e8 48 23 ff ff       	call   c00006a7 <strcpy>
c000e35f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e366:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e36a:	83 c4 14             	add    esp,0x14
c000e36d:	5b                   	pop    ebx
c000e36e:	5e                   	pop    esi
c000e36f:	e9 9d 1e ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e374 <schedule()>:
c000e374:	a1 10 35 02 c0       	mov    eax,ds:0xc0023510
c000e379:	85 c0                	test   eax,eax
c000e37b:	74 0b                	je     c000e388 <schedule()+0x14>
c000e37d:	c7 05 0c 35 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002350c,0x1
c000e387:	c3                   	ret    
c000e388:	53                   	push   ebx
c000e389:	83 ec 14             	sub    esp,0x14
c000e38c:	68 30 35 02 c0       	push   0xc0023530
c000e391:	e8 5c 00 01 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e396:	83 c4 10             	add    esp,0x10
c000e399:	84 c0                	test   al,al
c000e39b:	75 38                	jne    c000e3d5 <schedule()+0x61>
c000e39d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e3a5:	4a                   	dec    edx
c000e3a6:	74 32                	je     c000e3da <schedule()+0x66>
c000e3a8:	83 ec 0c             	sub    esp,0xc
c000e3ab:	68 30 35 02 c0       	push   0xc0023530
c000e3b0:	e8 07 01 01 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e3b5:	c7 04 24 30 35 02 c0 	mov    DWORD PTR [esp],0xc0023530
c000e3bc:	89 c3                	mov    ebx,eax
c000e3be:	e8 4b 00 01 00       	call   c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e3c3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e3ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3cd:	e8 08 fd ff ff       	call   c000e0da <switchToThread(ThreadControlBlock*)>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	83 c4 08             	add    esp,0x8
c000e3d8:	5b                   	pop    ebx
c000e3d9:	c3                   	ret    
c000e3da:	83 ec 08             	sub    esp,0x8
c000e3dd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e3e4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e3ea:	68 30 35 02 c0       	push   0xc0023530
c000e3ef:	e8 2a ff 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e3f4:	83 c4 10             	add    esp,0x10
c000e3f7:	eb af                	jmp    c000e3a8 <schedule()+0x34>

c000e3f9 <unlockStuff()>:
c000e3f9:	a1 10 35 02 c0       	mov    eax,ds:0xc0023510
c000e3fe:	48                   	dec    eax
c000e3ff:	a3 10 35 02 c0       	mov    ds:0xc0023510,eax
c000e404:	75 09                	jne    c000e40f <unlockStuff()+0x16>
c000e406:	a1 0c 35 02 c0       	mov    eax,ds:0xc002350c
c000e40b:	85 c0                	test   eax,eax
c000e40d:	75 05                	jne    c000e414 <unlockStuff()+0x1b>
c000e40f:	e9 1d fc ff ff       	jmp    c000e031 <enableIRQs()>
c000e414:	83 ec 0c             	sub    esp,0xc
c000e417:	c7 05 0c 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002350c,0x0
c000e421:	e8 4e ff ff ff       	call   c000e374 <schedule()>
c000e426:	83 c4 0c             	add    esp,0xc
c000e429:	e9 03 fc ff ff       	jmp    c000e031 <enableIRQs()>

c000e42e <forkProcess(regs*)>:
c000e42e:	56                   	push   esi
c000e42f:	53                   	push   ebx
c000e430:	50                   	push   eax
c000e431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e436:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e439:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e441:	0f 85 3e 01 00 00    	jne    c000e585 <forkProcess(regs*)+0x157>
c000e447:	e8 1b fc ff ff       	call   c000e067 <lockStuff()>
c000e44c:	83 ec 0c             	sub    esp,0xc
c000e44f:	68 3b 07 00 00       	push   0x73b
c000e454:	e8 f5 3c 00 00       	call   c001214e <operator new(unsigned long)>
c000e459:	89 c3                	mov    ebx,eax
c000e45b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e460:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e463:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e46a:	50                   	push   eax
c000e46b:	83 c0 0c             	add    eax,0xc
c000e46e:	50                   	push   eax
c000e46f:	6a 00                	push   0x0
c000e471:	53                   	push   ebx
c000e472:	e8 29 fa ff ff       	call   c000dea0 <Process::Process(bool, char const*, Process*, char**)>
c000e477:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e47d:	83 c4 20             	add    esp,0x20
c000e480:	85 f6                	test   esi,esi
c000e482:	74 16                	je     c000e49a <forkProcess(regs*)+0x6c>
c000e484:	83 ec 0c             	sub    esp,0xc
c000e487:	56                   	push   esi
c000e488:	e8 fb 2f 00 00       	call   c0011488 <VAS::~VAS()>
c000e48d:	59                   	pop    ecx
c000e48e:	58                   	pop    eax
c000e48f:	6a 10                	push   0x10
c000e491:	56                   	push   esi
c000e492:	e8 c6 3c 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c000e497:	83 c4 10             	add    esp,0x10
c000e49a:	83 ec 0c             	sub    esp,0xc
c000e49d:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e4a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e4ae:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e4b4:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e4ba:	6a 10                	push   0x10
c000e4bc:	e8 8d 3c 00 00       	call   c001214e <operator new(unsigned long)>
c000e4c1:	59                   	pop    ecx
c000e4c2:	89 c6                	mov    esi,eax
c000e4c4:	58                   	pop    eax
c000e4c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e4cd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e4d3:	56                   	push   esi
c000e4d4:	e8 d1 34 00 00       	call   c00119aa <VAS::VAS(VAS*)>
c000e4d9:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e4df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e4e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e4e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e4ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e4f2:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e4f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e500:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e506:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e50b:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e50e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e518:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e51e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e524:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e52a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e52f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e539:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e53c:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e543:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e54a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e556:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e559:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e55c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e561:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e564:	58                   	pop    eax
c000e565:	5a                   	pop    edx
c000e566:	53                   	push   ebx
c000e567:	68 30 35 02 c0       	push   0xc0023530
c000e56c:	e8 ad fd 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e571:	e8 83 fe ff ff       	call   c000e3f9 <unlockStuff()>
c000e576:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e57b:	83 c4 10             	add    esp,0x10
c000e57e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e581:	5a                   	pop    edx
c000e582:	5b                   	pop    ebx
c000e583:	5e                   	pop    esi
c000e584:	c3                   	ret    
c000e585:	83 ec 0c             	sub    esp,0xc
c000e588:	68 e4 02 02 c0       	push   0xc00202e4
c000e58d:	e8 0c e6 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e592:	83 c4 10             	add    esp,0x10
c000e595:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e59a:	eb e5                	jmp    c000e581 <forkProcess(regs*)+0x153>

c000e59c <Semaphore::tryAcquire()>:
c000e59c:	83 ec 0c             	sub    esp,0xc
c000e59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a3:	e8 bf fa ff ff       	call   c000e067 <lockStuff()>
c000e5a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e5ab:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e5ad:	7c 0b                	jl     c000e5ba <Semaphore::tryAcquire()+0x1e>
c000e5af:	e8 45 fe ff ff       	call   c000e3f9 <unlockStuff()>
c000e5b4:	31 c0                	xor    eax,eax
c000e5b6:	83 c4 0c             	add    esp,0xc
c000e5b9:	c3                   	ret    
c000e5ba:	42                   	inc    edx
c000e5bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e5be:	e8 36 fe ff ff       	call   c000e3f9 <unlockStuff()>
c000e5c3:	b0 01                	mov    al,0x1
c000e5c5:	83 c4 0c             	add    esp,0xc
c000e5c8:	c3                   	ret    
c000e5c9:	90                   	nop

c000e5ca <Semaphore::assertLocked(char const*)>:
c000e5ca:	83 ec 0c             	sub    esp,0xc
c000e5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e5d5:	e8 8d fa ff ff       	call   c000e067 <lockStuff()>
c000e5da:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5dc:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e5df:	7c 08                	jl     c000e5e9 <Semaphore::assertLocked(char const*)+0x1f>
c000e5e1:	83 c4 0c             	add    esp,0xc
c000e5e4:	e9 10 fe ff ff       	jmp    c000e3f9 <unlockStuff()>
c000e5e9:	83 ec 0c             	sub    esp,0xc
c000e5ec:	52                   	push   edx
c000e5ed:	e8 ca e6 ff ff       	call   c000ccbc <panic(char const*)>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	83 c4 0c             	add    esp,0xc
c000e5f8:	e9 fc fd ff ff       	jmp    c000e3f9 <unlockStuff()>

c000e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e5fd:	83 ec 0c             	sub    esp,0xc
c000e600:	e8 26 fa ff ff       	call   c000e02b <getIRQNestingLevel()>
c000e605:	83 ec 08             	sub    esp,0x8
c000e608:	50                   	push   eax
c000e609:	68 10 03 02 c0       	push   0xc0020310
c000e60e:	e8 8b e5 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e61c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e61f:	e8 50 fd ff ff       	call   c000e374 <schedule()>
c000e624:	e8 19 fa ff ff       	call   c000e042 <unlockScheduler()>
c000e629:	e8 fd f9 ff ff       	call   c000e02b <getIRQNestingLevel()>
c000e62e:	5a                   	pop    edx
c000e62f:	59                   	pop    ecx
c000e630:	50                   	push   eax
c000e631:	68 44 03 02 c0       	push   0xc0020344
c000e636:	e8 63 e5 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e63b:	83 c4 1c             	add    esp,0x1c
c000e63e:	c3                   	ret    

c000e63f <blockTask(TaskState)>:
c000e63f:	83 ec 0c             	sub    esp,0xc
c000e642:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e646:	e8 f5 f9 ff ff       	call   c000e040 <lockScheduler()>
c000e64b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e650:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e653:	e8 1c fd ff ff       	call   c000e374 <schedule()>
c000e658:	83 c4 0c             	add    esp,0xc
c000e65b:	e9 e2 f9 ff ff       	jmp    c000e042 <unlockScheduler()>

c000e660 <waitTask(int, int*, int)>:
c000e660:	83 ec 18             	sub    esp,0x18
c000e663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e668:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e66c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e66f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e678:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e67b:	6a 07                	push   0x7
c000e67d:	e8 bd ff ff ff       	call   c000e63f <blockTask(TaskState)>
c000e682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e687:	83 c4 10             	add    esp,0x10
c000e68a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e68d:	85 d2                	test   edx,edx
c000e68f:	74 0a                	je     c000e69b <waitTask(int, int*, int)+0x3b>
c000e691:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e694:	89 02                	mov    DWORD PTR [edx],eax
c000e696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e69b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e69e:	83 c4 0c             	add    esp,0xc
c000e6a1:	c3                   	ret    

c000e6a2 <nanoSleepUntil(unsigned long long)>:
c000e6a2:	83 ec 0c             	sub    esp,0xc
c000e6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e6ad:	3b 05 b0 3c 02 c0    	cmp    eax,DWORD PTR ds:0xc0023cb0
c000e6b3:	89 d1                	mov    ecx,edx
c000e6b5:	1b 0d b4 3c 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023cb4
c000e6bb:	73 04                	jae    c000e6c1 <nanoSleepUntil(unsigned long long)+0x1f>
c000e6bd:	83 c4 0c             	add    esp,0xc
c000e6c0:	c3                   	ret    
c000e6c1:	e8 a1 f9 ff ff       	call   c000e067 <lockStuff()>
c000e6c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e6cc:	83 ec 08             	sub    esp,0x8
c000e6cf:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e6d2:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e6d5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e6db:	68 24 35 02 c0       	push   0xc0023524
c000e6e0:	e8 39 fc 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e6e5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e6ec:	e8 4e ff ff ff       	call   c000e63f <blockTask(TaskState)>
c000e6f1:	83 c4 1c             	add    esp,0x1c
c000e6f4:	e9 00 fd ff ff       	jmp    c000e3f9 <unlockStuff()>

c000e6f9 <nanoSleep(unsigned long long)>:
c000e6f9:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000e6fe:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c000e704:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e708:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e70c:	eb 94                	jmp    c000e6a2 <nanoSleepUntil(unsigned long long)>

c000e70e <sleep(unsigned long long)>:
c000e70e:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e716:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e71b:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e71f:	01 ca                	add    edx,ecx
c000e721:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e725:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e729:	eb ce                	jmp    c000e6f9 <nanoSleep(unsigned long long)>
c000e72b:	90                   	nop

c000e72c <Semaphore::acquire()>:
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e733:	e8 2f f9 ff ff       	call   c000e067 <lockStuff()>
c000e738:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e73b:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e73d:	7d 0c                	jge    c000e74b <Semaphore::acquire()+0x1f>
c000e73f:	42                   	inc    edx
c000e740:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e743:	83 c4 0c             	add    esp,0xc
c000e746:	e9 ae fc ff ff       	jmp    c000e3f9 <unlockStuff()>
c000e74b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e751:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000e758:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e75b:	85 d2                	test   edx,edx
c000e75d:	74 2a                	je     c000e789 <Semaphore::acquire()+0x5d>
c000e75f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e762:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e768:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000e76b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e771:	83 ec 0c             	sub    esp,0xc
c000e774:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e777:	6a 05                	push   0x5
c000e779:	e8 c1 fe ff ff       	call   c000e63f <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	83 c4 0c             	add    esp,0xc
c000e784:	e9 70 fc ff ff       	jmp    c000e3f9 <unlockStuff()>
c000e789:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e78f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e792:	eb d7                	jmp    c000e76b <Semaphore::acquire()+0x3f>

c000e794 <execveProcess(char const*, char* const*, char* const*)>:
c000e794:	56                   	push   esi
c000e795:	53                   	push   ebx
c000e796:	50                   	push   eax
c000e797:	e8 cb f8 ff ff       	call   c000e067 <lockStuff()>
c000e79c:	83 ec 0c             	sub    esp,0xc
c000e79f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7a7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000e7ad:	68 3b 07 00 00       	push   0x73b
c000e7b2:	e8 97 39 00 00       	call   c001214e <operator new(unsigned long)>
c000e7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e7bb:	89 c3                	mov    ebx,eax
c000e7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7c5:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000e7cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e7cf:	53                   	push   ebx
c000e7d0:	e8 13 f5 ff ff       	call   c000dce8 <Process::Process(char const*, Process*, char**)>
c000e7d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7da:	83 c4 20             	add    esp,0x20
c000e7dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7e0:	85 f6                	test   esi,esi
c000e7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7e4:	89 03                	mov    DWORD PTR [ebx],eax
c000e7e6:	74 06                	je     c000e7ee <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000e7e8:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000e7ee:	83 ec 0c             	sub    esp,0xc
c000e7f1:	53                   	push   ebx
c000e7f2:	e8 57 fa ff ff       	call   c000e24e <Process::createUserThread()>
c000e7f7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e7fe:	e8 3c fe ff ff       	call   c000e63f <blockTask(TaskState)>
c000e803:	e8 f1 fb ff ff       	call   c000e3f9 <unlockStuff()>
c000e808:	e8 33 f8 ff ff       	call   c000e040 <lockScheduler()>
c000e80d:	e8 62 fb ff ff       	call   c000e374 <schedule()>
c000e812:	e8 2b f8 ff ff       	call   c000e042 <unlockScheduler()>
c000e817:	83 c4 14             	add    esp,0x14
c000e81a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e81f:	5b                   	pop    ebx
c000e820:	5e                   	pop    esi
c000e821:	c3                   	ret    

c000e822 <taskReturned>:
c000e822:	83 ec 0c             	sub    esp,0xc
c000e825:	e8 18 f8 ff ff       	call   c000e042 <unlockScheduler()>
c000e82a:	83 ec 08             	sub    esp,0x8
c000e82d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e832:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e835:	83 c0 0c             	add    eax,0xc
c000e838:	50                   	push   eax
c000e839:	68 3f 02 02 c0       	push   0xc002023f
c000e83e:	e8 5b e3 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	83 ec 0c             	sub    esp,0xc
c000e849:	6a 02                	push   0x2
c000e84b:	e8 ef fd ff ff       	call   c000e63f <blockTask(TaskState)>
c000e850:	e8 eb f7 ff ff       	call   c000e040 <lockScheduler()>
c000e855:	e8 1a fb ff ff       	call   c000e374 <schedule()>
c000e85a:	e8 e3 f7 ff ff       	call   c000e042 <unlockScheduler()>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	eb e2                	jmp    c000e846 <taskReturned+0x24>

c000e864 <unblockTask(ThreadControlBlock*)>:
c000e864:	53                   	push   ebx
c000e865:	83 ec 08             	sub    esp,0x8
c000e868:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e86c:	e8 cf f7 ff ff       	call   c000e040 <lockScheduler()>
c000e871:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e874:	85 c0                	test   eax,eax
c000e876:	74 5c                	je     c000e8d4 <unblockTask(ThreadControlBlock*)+0x70>
c000e878:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e87b:	48                   	dec    eax
c000e87c:	74 31                	je     c000e8af <unblockTask(ThreadControlBlock*)+0x4b>
c000e87e:	83 ec 0c             	sub    esp,0xc
c000e881:	68 30 35 02 c0       	push   0xc0023530
c000e886:	e8 31 fc 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	85 c0                	test   eax,eax
c000e890:	75 17                	jne    c000e8a9 <unblockTask(ThreadControlBlock*)+0x45>
c000e892:	eb 65                	jmp    c000e8f9 <unblockTask(ThreadControlBlock*)+0x95>
c000e894:	83 ec 08             	sub    esp,0x8
c000e897:	50                   	push   eax
c000e898:	68 30 35 02 c0       	push   0xc0023530
c000e89d:	e8 22 fc 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000e8a2:	83 c4 10             	add    esp,0x10
c000e8a5:	85 c0                	test   eax,eax
c000e8a7:	74 50                	je     c000e8f9 <unblockTask(ThreadControlBlock*)+0x95>
c000e8a9:	39 c3                	cmp    ebx,eax
c000e8ab:	75 e7                	jne    c000e894 <unblockTask(ThreadControlBlock*)+0x30>
c000e8ad:	eb 1c                	jmp    c000e8cb <unblockTask(ThreadControlBlock*)+0x67>
c000e8af:	83 ec 0c             	sub    esp,0xc
c000e8b2:	68 34 04 02 c0       	push   0xc0020434
c000e8b7:	e8 e2 e2 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e8bc:	c7 04 24 c0 03 02 c0 	mov    DWORD PTR [esp],0xc00203c0
c000e8c3:	e8 d6 e2 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e8c8:	83 c4 10             	add    esp,0x10
c000e8cb:	83 c4 08             	add    esp,0x8
c000e8ce:	5b                   	pop    ebx
c000e8cf:	e9 6e f7 ff ff       	jmp    c000e042 <unlockScheduler()>
c000e8d4:	83 ec 0c             	sub    esp,0xc
c000e8d7:	68 78 03 02 c0       	push   0xc0020378
c000e8dc:	e8 bd e2 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e8e1:	c7 04 24 c0 03 02 c0 	mov    DWORD PTR [esp],0xc00203c0
c000e8e8:	e8 b1 e2 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000e8ed:	83 c4 10             	add    esp,0x10
c000e8f0:	83 c4 08             	add    esp,0x8
c000e8f3:	5b                   	pop    ebx
c000e8f4:	e9 49 f7 ff ff       	jmp    c000e042 <unlockScheduler()>
c000e8f9:	83 ec 08             	sub    esp,0x8
c000e8fc:	53                   	push   ebx
c000e8fd:	68 30 35 02 c0       	push   0xc0023530
c000e902:	e8 17 fa 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e907:	83 c4 10             	add    esp,0x10
c000e90a:	83 c4 08             	add    esp,0x8
c000e90d:	5b                   	pop    ebx
c000e90e:	e9 2f f7 ff ff       	jmp    c000e042 <unlockScheduler()>

c000e913 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000e913:	55                   	push   ebp
c000e914:	57                   	push   edi
c000e915:	56                   	push   esi
c000e916:	53                   	push   ebx
c000e917:	83 ec 1c             	sub    esp,0x1c
c000e91a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e91e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e921:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000e927:	85 c9                	test   ecx,ecx
c000e929:	7e 20                	jle    c000e94b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000e92b:	31 f6                	xor    esi,esi
c000e92d:	83 ec 0c             	sub    esp,0xc
c000e930:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000e937:	46                   	inc    esi
c000e938:	e8 6c e8 ff ff       	call   c000d1a9 <free>
c000e93d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e940:	83 c4 10             	add    esp,0x10
c000e943:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000e949:	7f e2                	jg     c000e92d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000e94b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e955:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000e95a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000e95d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000e960:	d3 c0                	rol    eax,cl
c000e962:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000e969:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000e96c:	89 f7                	mov    edi,esi
c000e96e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000e976:	0f 85 4f 01 00 00    	jne    c000eacb <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000e97c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e982:	85 c0                	test   eax,eax
c000e984:	0f 84 aa 00 00 00    	je     c000ea34 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e98a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000e98d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e991:	31 c9                	xor    ecx,ecx
c000e993:	eb 10                	jmp    c000e9a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000e995:	41                   	inc    ecx
c000e996:	83 f9 10             	cmp    ecx,0x10
c000e999:	0f 84 95 00 00 00    	je     c000ea34 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e99f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e9a5:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000e9ac:	d3 fa                	sar    edx,cl
c000e9ae:	83 e2 01             	and    edx,0x1
c000e9b1:	74 e2                	je     c000e995 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e9b3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000e9b6:	01 ca                	add    edx,ecx
c000e9b8:	89 d5                	mov    ebp,edx
c000e9ba:	c1 e5 05             	shl    ebp,0x5
c000e9bd:	01 ea                	add    edx,ebp
c000e9bf:	01 d0                	add    eax,edx
c000e9c1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000e9c7:	83 fd 07             	cmp    ebp,0x7
c000e9ca:	75 c9                	jne    c000e995 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e9cc:	05 40 02 00 00       	add    eax,0x240
c000e9d1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000e9d4:	83 fd ff             	cmp    ebp,0xffffffff
c000e9d7:	0f 8c 01 01 00 00    	jl     c000eade <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000e9dd:	0f 84 b2 01 00 00    	je     c000eb95 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000e9e3:	85 ed                	test   ebp,ebp
c000e9e5:	0f 84 99 01 00 00    	je     c000eb84 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000e9eb:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000e9ed:	75 a6                	jne    c000e995 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e9ef:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e9f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e9f9:	01 d0                	add    eax,edx
c000e9fb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e9ff:	83 ec 0c             	sub    esp,0xc
c000ea02:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ea08:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ea0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ea11:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ea18:	50                   	push   eax
c000ea19:	e8 46 fe ff ff       	call   c000e864 <unblockTask(ThreadControlBlock*)>
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ea24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea28:	89 f7                	mov    edi,esi
c000ea2a:	41                   	inc    ecx
c000ea2b:	83 f9 10             	cmp    ecx,0x10
c000ea2e:	0f 85 6b ff ff ff    	jne    c000e99f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ea34:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ea3a:	85 c0                	test   eax,eax
c000ea3c:	74 5d                	je     c000ea9b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ea3e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ea44:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ea4a:	74 4f                	je     c000ea9b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ea4c:	83 ec 0c             	sub    esp,0xc
c000ea4f:	68 30 35 02 c0       	push   0xc0023530
c000ea54:	e8 63 fa 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ea59:	c7 04 24 30 35 02 c0 	mov    DWORD PTR [esp],0xc0023530
c000ea60:	89 c7                	mov    edi,eax
c000ea62:	e8 8b f9 00 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	84 c0                	test   al,al
c000ea6c:	0f 84 dd 00 00 00    	je     c000eb4f <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ea72:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ea75:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ea7b:	85 d2                	test   edx,edx
c000ea7d:	74 0f                	je     c000ea8e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	8b 02                	mov    eax,DWORD PTR [edx]
c000ea84:	52                   	push   edx
c000ea85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ea88:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ea8b:	83 c4 10             	add    esp,0x10
c000ea8e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ea98:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ea9b:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000eaa1:	85 f6                	test   esi,esi
c000eaa3:	74 16                	je     c000eabb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	56                   	push   esi
c000eaa9:	e8 da 29 00 00       	call   c0011488 <VAS::~VAS()>
c000eaae:	58                   	pop    eax
c000eaaf:	5a                   	pop    edx
c000eab0:	6a 10                	push   0x10
c000eab2:	56                   	push   esi
c000eab3:	e8 a5 36 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	83 ec 0c             	sub    esp,0xc
c000eabe:	68 5b 02 02 c0       	push   0xc002025b
c000eac3:	e8 d6 e0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	83 ec 08             	sub    esp,0x8
c000eace:	6a 63                	push   0x63
c000ead0:	53                   	push   ebx
c000ead1:	e8 87 36 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c000ead6:	83 c4 2c             	add    esp,0x2c
c000ead9:	5b                   	pop    ebx
c000eada:	5e                   	pop    esi
c000eadb:	5f                   	pop    edi
c000eadc:	5d                   	pop    ebp
c000eadd:	c3                   	ret    
c000eade:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eae2:	83 ec 0c             	sub    esp,0xc
c000eae5:	68 78 04 02 c0       	push   0xc0020478
c000eaea:	e8 cd e1 ff ff       	call   c000ccbc <panic(char const*)>
c000eaef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000eaf2:	83 c4 10             	add    esp,0x10
c000eaf5:	89 f7                	mov    edi,esi
c000eaf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eafb:	e9 95 fe ff ff       	jmp    c000e995 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000eb00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000eb06:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000eb0c:	75 1c                	jne    c000eb2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eb0e:	83 ec 0c             	sub    esp,0xc
c000eb11:	68 e0 04 02 c0       	push   0xc00204e0
c000eb16:	e8 83 e0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000eb1b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb22:	e8 18 fb ff ff       	call   c000e63f <blockTask(TaskState)>
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	83 ec 08             	sub    esp,0x8
c000eb2d:	56                   	push   esi
c000eb2e:	68 30 35 02 c0       	push   0xc0023530
c000eb33:	e8 e6 f7 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eb38:	c7 04 24 30 35 02 c0 	mov    DWORD PTR [esp],0xc0023530
c000eb3f:	e8 78 f9 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	39 f8                	cmp    eax,edi
c000eb49:	0f 84 23 ff ff ff    	je     c000ea72 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000eb4f:	83 ec 0c             	sub    esp,0xc
c000eb52:	68 30 35 02 c0       	push   0xc0023530
c000eb57:	e8 60 f9 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb5c:	c7 04 24 30 35 02 c0 	mov    DWORD PTR [esp],0xc0023530
c000eb63:	89 c6                	mov    esi,eax
c000eb65:	e8 a4 f8 00 00       	call   c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	39 f3                	cmp    ebx,esi
c000eb6f:	74 b9                	je     c000eb2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eb71:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000eb74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb77:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000eb7d:	75 ab                	jne    c000eb2a <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eb7f:	e9 7c ff ff ff       	jmp    c000eb00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000eb84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	68 ac 04 02 c0       	push   0xc00204ac
c000eb90:	e9 55 ff ff ff       	jmp    c000eaea <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000eb95:	8b 36                	mov    esi,DWORD PTR [esi]
c000eb97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eb9b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000eb9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eba1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000eba7:	01 d7                	add    edi,edx
c000eba9:	89 f8                	mov    eax,edi
c000ebab:	e9 4b fe ff ff       	jmp    c000e9fb <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000ebb0 <cleanerTaskFunction(void*)>:
c000ebb0:	53                   	push   ebx
c000ebb1:	83 ec 08             	sub    esp,0x8
c000ebb4:	e8 89 f4 ff ff       	call   c000e042 <unlockScheduler()>
c000ebb9:	e8 82 f4 ff ff       	call   c000e040 <lockScheduler()>
c000ebbe:	80 3d f4 34 02 c0 00 	cmp    BYTE PTR ds:0xc00234f4,0x0
c000ebc5:	75 72                	jne    c000ec39 <cleanerTaskFunction(void*)+0x89>
c000ebc7:	83 ec 0c             	sub    esp,0xc
c000ebca:	6a 02                	push   0x2
c000ebcc:	e8 2c fa ff ff       	call   c000e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ebd1:	83 c4 10             	add    esp,0x10
c000ebd4:	c6 05 f4 34 02 c0 00 	mov    BYTE PTR ds:0xc00234f4,0x0
c000ebdb:	e8 87 f4 ff ff       	call   c000e067 <lockStuff()>
c000ebe0:	e8 5b f4 ff ff       	call   c000e040 <lockScheduler()>
c000ebe5:	83 ec 0c             	sub    esp,0xc
c000ebe8:	68 18 35 02 c0       	push   0xc0023518
c000ebed:	e8 00 f8 00 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ebf2:	83 c4 10             	add    esp,0x10
c000ebf5:	84 c0                	test   al,al
c000ebf7:	75 28                	jne    c000ec21 <cleanerTaskFunction(void*)+0x71>
c000ebf9:	83 ec 0c             	sub    esp,0xc
c000ebfc:	68 18 35 02 c0       	push   0xc0023518
c000ec01:	e8 b6 f8 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ec06:	c7 04 24 18 35 02 c0 	mov    DWORD PTR [esp],0xc0023518
c000ec0d:	89 c3                	mov    ebx,eax
c000ec0f:	e8 fa f7 00 00       	call   c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ec14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec17:	e8 f7 fc ff ff       	call   c000e913 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ec1c:	83 c4 10             	add    esp,0x10
c000ec1f:	eb c4                	jmp    c000ebe5 <cleanerTaskFunction(void*)+0x35>
c000ec21:	e8 1c f4 ff ff       	call   c000e042 <unlockScheduler()>
c000ec26:	e8 ce f7 ff ff       	call   c000e3f9 <unlockStuff()>
c000ec2b:	e8 10 f4 ff ff       	call   c000e040 <lockScheduler()>
c000ec30:	80 3d f4 34 02 c0 00 	cmp    BYTE PTR ds:0xc00234f4,0x0
c000ec37:	74 8e                	je     c000ebc7 <cleanerTaskFunction(void*)+0x17>
c000ec39:	e8 04 f4 ff ff       	call   c000e042 <unlockScheduler()>
c000ec3e:	eb 94                	jmp    c000ebd4 <cleanerTaskFunction(void*)+0x24>

c000ec40 <terminateTask(int)>:
c000ec40:	83 ec 0c             	sub    esp,0xc
c000ec43:	e8 1f f4 ff ff       	call   c000e067 <lockStuff()>
c000ec48:	e8 f3 f3 ff ff       	call   c000e040 <lockScheduler()>
c000ec4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ec51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec56:	83 ec 08             	sub    esp,0x8
c000ec59:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ec5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec61:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ec64:	50                   	push   eax
c000ec65:	68 18 35 02 c0       	push   0xc0023518
c000ec6a:	e8 af f6 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec74:	83 c4 10             	add    esp,0x10
c000ec77:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ec7e:	a1 f0 34 02 c0       	mov    eax,ds:0xc00234f0
c000ec83:	85 c0                	test   eax,eax
c000ec85:	74 2e                	je     c000ecb5 <terminateTask(int)+0x75>
c000ec87:	83 ec 0c             	sub    esp,0xc
c000ec8a:	c6 05 f4 34 02 c0 01 	mov    BYTE PTR ds:0xc00234f4,0x1
c000ec91:	50                   	push   eax
c000ec92:	e8 cd fb ff ff       	call   c000e864 <unblockTask(ThreadControlBlock*)>
c000ec97:	83 c4 10             	add    esp,0x10
c000ec9a:	e8 a3 f3 ff ff       	call   c000e042 <unlockScheduler()>
c000ec9f:	e8 55 f7 ff ff       	call   c000e3f9 <unlockStuff()>
c000eca4:	e8 97 f3 ff ff       	call   c000e040 <lockScheduler()>
c000eca9:	e8 c6 f6 ff ff       	call   c000e374 <schedule()>
c000ecae:	e8 8f f3 ff ff       	call   c000e042 <unlockScheduler()>
c000ecb3:	eb ef                	jmp    c000eca4 <terminateTask(int)+0x64>
c000ecb5:	83 ec 0c             	sub    esp,0xc
c000ecb8:	68 69 02 02 c0       	push   0xc0020269
c000ecbd:	e8 dc de ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000ecc2:	83 c4 10             	add    esp,0x10
c000ecc5:	eb d3                	jmp    c000ec9a <terminateTask(int)+0x5a>
c000ecc7:	90                   	nop

c000ecc8 <Semaphore::release()>:
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eccf:	e8 93 f3 ff ff       	call   c000e067 <lockStuff()>
c000ecd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecd7:	85 d2                	test   edx,edx
c000ecd9:	74 1a                	je     c000ecf5 <Semaphore::release()+0x2d>
c000ecdb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000ecde:	83 ec 0c             	sub    esp,0xc
c000ece1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ece4:	52                   	push   edx
c000ece5:	e8 7a fb ff ff       	call   c000e864 <unblockTask(ThreadControlBlock*)>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	83 c4 0c             	add    esp,0xc
c000ecf0:	e9 04 f7 ff ff       	jmp    c000e3f9 <unlockStuff()>
c000ecf5:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000ecf8:	83 c4 0c             	add    esp,0xc
c000ecfb:	e9 f9 f6 ff ff       	jmp    c000e3f9 <unlockStuff()>

c000ed00 <__static_initialization_and_destruction_0(int, int)>:
c000ed00:	83 ec 0c             	sub    esp,0xc
c000ed03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed08:	0f 85 88 00 00 00    	jne    c000ed96 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ed0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000ed16:	75 7e                	jne    c000ed96 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	68 30 35 02 c0       	push   0xc0023530
c000ed20:	e8 a1 f5 00 00       	call   c001e2c6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	83 ec 04             	sub    esp,0x4
c000ed2b:	68 e4 20 02 c0       	push   0xc00220e4
c000ed30:	68 30 35 02 c0       	push   0xc0023530
c000ed35:	68 86 e2 01 c0       	push   0xc001e286
c000ed3a:	e8 9a 33 00 00       	call   c00120d9 <__cxa_atexit>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	68 24 35 02 c0       	push   0xc0023524
c000ed4a:	e8 77 f5 00 00       	call   c001e2c6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	83 ec 04             	sub    esp,0x4
c000ed55:	68 e4 20 02 c0       	push   0xc00220e4
c000ed5a:	68 24 35 02 c0       	push   0xc0023524
c000ed5f:	68 86 e2 01 c0       	push   0xc001e286
c000ed64:	e8 70 33 00 00       	call   c00120d9 <__cxa_atexit>
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	83 ec 0c             	sub    esp,0xc
c000ed6f:	68 18 35 02 c0       	push   0xc0023518
c000ed74:	e8 4d f5 00 00       	call   c001e2c6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ed79:	83 c4 10             	add    esp,0x10
c000ed7c:	83 ec 04             	sub    esp,0x4
c000ed7f:	68 e4 20 02 c0       	push   0xc00220e4
c000ed84:	68 18 35 02 c0       	push   0xc0023518
c000ed89:	68 86 e2 01 c0       	push   0xc001e286
c000ed8e:	e8 46 33 00 00       	call   c00120d9 <__cxa_atexit>
c000ed93:	83 c4 10             	add    esp,0x10
c000ed96:	90                   	nop
c000ed97:	83 c4 0c             	add    esp,0xc
c000ed9a:	c3                   	ret    

c000ed9b <_GLOBAL__sub_I_kernelProcess>:
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	83 ec 08             	sub    esp,0x8
c000eda1:	68 ff ff 00 00       	push   0xffff
c000eda6:	6a 01                	push   0x1
c000eda8:	e8 53 ff ff ff       	call   c000ed00 <__static_initialization_and_destruction_0(int, int)>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	83 c4 0c             	add    esp,0xc
c000edb3:	c3                   	ret    

c000edb4 <sysCallGetPID(regs*)>:
c000edb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000edbc:	8b 00                	mov    eax,DWORD PTR [eax]
c000edbe:	99                   	cdq    
c000edbf:	c3                   	ret    

c000edc0 <sysCallSeekDir(regs*)>:
c000edc0:	31 c0                	xor    eax,eax
c000edc2:	31 d2                	xor    edx,edx
c000edc4:	c3                   	ret    

c000edc5 <sysCallTellDir(regs*)>:
c000edc5:	31 c0                	xor    eax,eax
c000edc7:	31 d2                	xor    edx,edx
c000edc9:	c3                   	ret    

c000edca <sysCallVerify(regs*)>:
c000edca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edce:	31 d2                	xor    edx,edx
c000edd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd3:	c3                   	ret    

c000edd4 <sysCallGetArgc(regs*)>:
c000edd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edd9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eddc:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000ede2:	99                   	cdq    
c000ede3:	c3                   	ret    

c000ede4 <sysFormatDisk(regs*)>:
c000ede4:	56                   	push   esi
c000ede5:	53                   	push   ebx
c000ede6:	53                   	push   ebx
c000ede7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edeb:	8b 1d a0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a0
c000edf1:	eb 25                	jmp    c000ee18 <sysFormatDisk(regs*)+0x34>
c000edf3:	83 ec 0c             	sub    esp,0xc
c000edf6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000edf9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000edfb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000edfe:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000ee01:	50                   	push   eax
c000ee02:	ff 34 85 40 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3c0]
c000ee09:	53                   	push   ebx
c000ee0a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000ee0d:	83 c4 20             	add    esp,0x20
c000ee10:	83 f8 08             	cmp    eax,0x8
c000ee13:	75 12                	jne    c000ee27 <sysFormatDisk(regs*)+0x43>
c000ee15:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ee18:	85 db                	test   ebx,ebx
c000ee1a:	75 d7                	jne    c000edf3 <sysFormatDisk(regs*)+0xf>
c000ee1c:	59                   	pop    ecx
c000ee1d:	b8 03 00 00 00       	mov    eax,0x3
c000ee22:	31 d2                	xor    edx,edx
c000ee24:	5b                   	pop    ebx
c000ee25:	5e                   	pop    esi
c000ee26:	c3                   	ret    
c000ee27:	85 c0                	test   eax,eax
c000ee29:	74 1b                	je     c000ee46 <sysFormatDisk(regs*)+0x62>
c000ee2b:	83 f8 09             	cmp    eax,0x9
c000ee2e:	74 0b                	je     c000ee3b <sysFormatDisk(regs*)+0x57>
c000ee30:	59                   	pop    ecx
c000ee31:	b8 02 00 00 00       	mov    eax,0x2
c000ee36:	31 d2                	xor    edx,edx
c000ee38:	5b                   	pop    ebx
c000ee39:	5e                   	pop    esi
c000ee3a:	c3                   	ret    
c000ee3b:	59                   	pop    ecx
c000ee3c:	b8 01 00 00 00       	mov    eax,0x1
c000ee41:	31 d2                	xor    edx,edx
c000ee43:	5b                   	pop    ebx
c000ee44:	5e                   	pop    esi
c000ee45:	c3                   	ret    
c000ee46:	59                   	pop    ecx
c000ee47:	31 c0                	xor    eax,eax
c000ee49:	31 d2                	xor    edx,edx
c000ee4b:	5b                   	pop    ebx
c000ee4c:	5e                   	pop    esi
c000ee4d:	c3                   	ret    

c000ee4e <sysSetDiskVolumeLabel(regs*)>:
c000ee4e:	56                   	push   esi
c000ee4f:	53                   	push   ebx
c000ee50:	53                   	push   ebx
c000ee51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee55:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000ee58:	83 f8 19             	cmp    eax,0x19
c000ee5b:	77 29                	ja     c000ee86 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ee5d:	8b 0c 85 40 3c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc3c0]
c000ee64:	85 c9                	test   ecx,ecx
c000ee66:	74 1e                	je     c000ee86 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ee68:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000ee6b:	85 d2                	test   edx,edx
c000ee6d:	74 17                	je     c000ee86 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ee6f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000ee75:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ee77:	52                   	push   edx
c000ee78:	50                   	push   eax
c000ee79:	51                   	push   ecx
c000ee7a:	53                   	push   ebx
c000ee7b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	99                   	cdq    
c000ee82:	59                   	pop    ecx
c000ee83:	5b                   	pop    ebx
c000ee84:	5e                   	pop    esi
c000ee85:	c3                   	ret    
c000ee86:	59                   	pop    ecx
c000ee87:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ee8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ee91:	5b                   	pop    ebx
c000ee92:	5e                   	pop    esi
c000ee93:	c3                   	ret    

c000ee94 <sysGetDiskVolumeLabel(regs*)>:
c000ee94:	57                   	push   edi
c000ee95:	56                   	push   esi
c000ee96:	53                   	push   ebx
c000ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee9b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ee9e:	83 fa 19             	cmp    edx,0x19
c000eea1:	77 34                	ja     c000eed7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eea3:	8b 0c 95 40 3c 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc3c0]
c000eeaa:	85 c9                	test   ecx,ecx
c000eeac:	74 29                	je     c000eed7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eeae:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000eeb1:	85 db                	test   ebx,ebx
c000eeb3:	74 22                	je     c000eed7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eeb5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eeb8:	85 c0                	test   eax,eax
c000eeba:	74 1b                	je     c000eed7 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eebc:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000eec2:	83 ec 0c             	sub    esp,0xc
c000eec5:	8b 3e                	mov    edi,DWORD PTR [esi]
c000eec7:	50                   	push   eax
c000eec8:	53                   	push   ebx
c000eec9:	52                   	push   edx
c000eeca:	51                   	push   ecx
c000eecb:	56                   	push   esi
c000eecc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000eecf:	83 c4 20             	add    esp,0x20
c000eed2:	99                   	cdq    
c000eed3:	5b                   	pop    ebx
c000eed4:	5e                   	pop    esi
c000eed5:	5f                   	pop    edi
c000eed6:	c3                   	ret    
c000eed7:	5b                   	pop    ebx
c000eed8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000eedd:	ba ff ff ff ff       	mov    edx,0xffffffff
c000eee2:	5e                   	pop    esi
c000eee3:	5f                   	pop    edi
c000eee4:	c3                   	ret    

c000eee5 <sysShutdown(regs*)>:
c000eee5:	83 ec 0c             	sub    esp,0xc
c000eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eeef:	85 c0                	test   eax,eax
c000eef1:	74 24                	je     c000ef17 <sysShutdown(regs*)+0x32>
c000eef3:	48                   	dec    eax
c000eef4:	74 0e                	je     c000ef04 <sysShutdown(regs*)+0x1f>
c000eef6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eefb:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ef00:	83 c4 0c             	add    esp,0xc
c000ef03:	c3                   	ret    
c000ef04:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c000ef09:	85 c0                	test   eax,eax
c000ef0b:	74 02                	je     c000ef0f <sysShutdown(regs*)+0x2a>
c000ef0d:	ff d0                	call   eax
c000ef0f:	31 c0                	xor    eax,eax
c000ef11:	31 d2                	xor    edx,edx
c000ef13:	83 c4 0c             	add    esp,0xc
c000ef16:	c3                   	ret    
c000ef17:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c000ef1c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef1e:	6a 00                	push   0x0
c000ef20:	6a 00                	push   0x0
c000ef22:	6a 00                	push   0x0
c000ef24:	50                   	push   eax
c000ef25:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ef28:	83 c4 10             	add    esp,0x10
c000ef2b:	eb c9                	jmp    c000eef6 <sysShutdown(regs*)+0x11>

c000ef2d <sysCallGetCwd(regs*)>:
c000ef2d:	83 ec 10             	sub    esp,0x10
c000ef30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef34:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000ef37:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ef3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef3f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ef42:	e8 a6 39 00 00       	call   c00128ed <getcwd(Process*, char*, int)>
c000ef47:	83 c4 1c             	add    esp,0x1c
c000ef4a:	99                   	cdq    
c000ef4b:	c3                   	ret    

c000ef4c <sysCallSetCwd(regs*)>:
c000ef4c:	83 ec 14             	sub    esp,0x14
c000ef4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef53:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ef56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ef5e:	e8 b4 39 00 00       	call   c0012917 <setcwd(Process*, char*)>
c000ef63:	83 c4 1c             	add    esp,0x1c
c000ef66:	99                   	cdq    
c000ef67:	c3                   	ret    

c000ef68 <sysCallRealpath(regs*)>:
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ef72:	85 d2                	test   edx,edx
c000ef74:	74 07                	je     c000ef7d <sysCallRealpath(regs*)+0x15>
c000ef76:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ef79:	85 c0                	test   eax,eax
c000ef7b:	75 0b                	jne    c000ef88 <sysCallRealpath(regs*)+0x20>
c000ef7d:	b8 01 00 00 00       	mov    eax,0x1
c000ef82:	31 d2                	xor    edx,edx
c000ef84:	83 c4 0c             	add    esp,0xc
c000ef87:	c3                   	ret    
c000ef88:	51                   	push   ecx
c000ef89:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ef8f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ef92:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000ef98:	51                   	push   ecx
c000ef99:	52                   	push   edx
c000ef9a:	50                   	push   eax
c000ef9b:	e8 32 34 00 00       	call   c00123d2 <standardiseFiles(char*, char const*, char const*)>
c000efa0:	83 c4 10             	add    esp,0x10
c000efa3:	31 c0                	xor    eax,eax
c000efa5:	31 d2                	xor    edx,edx
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	c3                   	ret    

c000efab <sysCallOpen(regs*)>:
c000efab:	56                   	push   esi
c000efac:	53                   	push   ebx
c000efad:	81 ec 04 01 00 00    	sub    esp,0x104
c000efb3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000efba:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000efbd:	85 d2                	test   edx,edx
c000efbf:	0f 84 c3 00 00 00    	je     c000f088 <sysCallOpen(regs*)+0xdd>
c000efc5:	50                   	push   eax
c000efc6:	68 af 05 02 c0       	push   0xc00205af
c000efcb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000efce:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000efd2:	56                   	push   esi
c000efd3:	e8 fa 33 00 00       	call   c00123d2 <standardiseFiles(char*, char const*, char const*)>
c000efd8:	89 34 24             	mov    DWORD PTR [esp],esi
c000efdb:	e8 45 16 ff ff       	call   c0000625 <strlen>
c000efe0:	83 c4 10             	add    esp,0x10
c000efe3:	48                   	dec    eax
c000efe4:	74 1d                	je     c000f003 <sysCallOpen(regs*)+0x58>
c000efe6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000efe9:	eb 0f                	jmp    c000effa <sysCallOpen(regs*)+0x4f>
c000efeb:	80 fa 3a             	cmp    dl,0x3a
c000efee:	74 0f                	je     c000efff <sysCallOpen(regs*)+0x54>
c000eff0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000eff4:	48                   	dec    eax
c000eff5:	74 0c                	je     c000f003 <sysCallOpen(regs*)+0x58>
c000eff7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000effa:	80 fa 2e             	cmp    dl,0x2e
c000effd:	75 ec                	jne    c000efeb <sysCallOpen(regs*)+0x40>
c000efff:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f003:	83 ec 0c             	sub    esp,0xc
c000f006:	68 14 01 00 00       	push   0x114
c000f00b:	e8 3e 31 00 00       	call   c001214e <operator new(unsigned long)>
c000f010:	83 c4 0c             	add    esp,0xc
c000f013:	89 c6                	mov    esi,eax
c000f015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f01a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f01d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f020:	56                   	push   esi
c000f021:	e8 56 35 00 00       	call   c001257c <File::File(char const*, Process*)>
c000f026:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f029:	83 c4 10             	add    esp,0x10
c000f02c:	0f b6 d0             	movzx  edx,al
c000f02f:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f032:	89 c2                	mov    edx,eax
c000f034:	83 e2 01             	and    edx,0x1
c000f037:	a8 02                	test   al,0x2
c000f039:	74 03                	je     c000f03e <sysCallOpen(regs*)+0x93>
c000f03b:	83 ca 02             	or     edx,0x2
c000f03e:	a8 04                	test   al,0x4
c000f040:	74 03                	je     c000f045 <sysCallOpen(regs*)+0x9a>
c000f042:	83 ca 04             	or     edx,0x4
c000f045:	a8 08                	test   al,0x8
c000f047:	74 03                	je     c000f04c <sysCallOpen(regs*)+0xa1>
c000f049:	83 ca 0a             	or     edx,0xa
c000f04c:	a8 10                	test   al,0x10
c000f04e:	74 03                	je     c000f053 <sysCallOpen(regs*)+0xa8>
c000f050:	83 ca 12             	or     edx,0x12
c000f053:	83 ec 08             	sub    esp,0x8
c000f056:	52                   	push   edx
c000f057:	56                   	push   esi
c000f058:	e8 83 35 00 00       	call   c00125e0 <File::open(FileOpenMode)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	85 c0                	test   eax,eax
c000f062:	75 24                	jne    c000f088 <sysCallOpen(regs*)+0xdd>
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	56                   	push   esi
c000f068:	e8 05 1d 00 00       	call   c0010d72 <UnixFile::getFileDescriptor()>
c000f06d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f070:	83 c4 10             	add    esp,0x10
c000f073:	89 02                	mov    DWORD PTR [edx],eax
c000f075:	c1 f8 1f             	sar    eax,0x1f
c000f078:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f07b:	81 c4 04 01 00 00    	add    esp,0x104
c000f081:	31 c0                	xor    eax,eax
c000f083:	31 d2                	xor    edx,edx
c000f085:	5b                   	pop    ebx
c000f086:	5e                   	pop    esi
c000f087:	c3                   	ret    
c000f088:	81 c4 04 01 00 00    	add    esp,0x104
c000f08e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f093:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f098:	5b                   	pop    ebx
c000f099:	5e                   	pop    esi
c000f09a:	c3                   	ret    

c000f09b <sysCallReadDir(regs*)>:
c000f09b:	53                   	push   ebx
c000f09c:	83 ec 18             	sub    esp,0x18
c000f09f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f0a6:	83 f8 02             	cmp    eax,0x2
c000f0a9:	77 0c                	ja     c000f0b7 <sysCallReadDir(regs*)+0x1c>
c000f0ab:	b8 01 00 00 00       	mov    eax,0x1
c000f0b0:	31 d2                	xor    edx,edx
c000f0b2:	83 c4 18             	add    esp,0x18
c000f0b5:	5b                   	pop    ebx
c000f0b6:	c3                   	ret    
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	50                   	push   eax
c000f0bb:	e8 17 1e 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f0c0:	83 c4 10             	add    esp,0x10
c000f0c3:	85 c0                	test   eax,eax
c000f0c5:	74 37                	je     c000f0fe <sysCallReadDir(regs*)+0x63>
c000f0c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f0cf:	83 ec 0c             	sub    esp,0xc
c000f0d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0d4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f0d8:	51                   	push   ecx
c000f0d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f0dc:	6a 00                	push   0x0
c000f0de:	68 10 01 00 00       	push   0x110
c000f0e3:	50                   	push   eax
c000f0e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f0e7:	83 c4 20             	add    esp,0x20
c000f0ea:	85 c0                	test   eax,eax
c000f0ec:	74 0c                	je     c000f0fa <sysCallReadDir(regs*)+0x5f>
c000f0ee:	83 f8 07             	cmp    eax,0x7
c000f0f1:	74 b8                	je     c000f0ab <sysCallReadDir(regs*)+0x10>
c000f0f3:	b8 02 00 00 00       	mov    eax,0x2
c000f0f8:	eb b6                	jmp    c000f0b0 <sysCallReadDir(regs*)+0x15>
c000f0fa:	31 c0                	xor    eax,eax
c000f0fc:	eb b2                	jmp    c000f0b0 <sysCallReadDir(regs*)+0x15>
c000f0fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f103:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f108:	eb a8                	jmp    c000f0b2 <sysCallReadDir(regs*)+0x17>

c000f10a <sysCallIsATTY(regs*)>:
c000f10a:	83 ec 0c             	sub    esp,0xc
c000f10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f111:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f114:	83 f8 02             	cmp    eax,0x2
c000f117:	77 26                	ja     c000f13f <sysCallIsATTY(regs*)+0x35>
c000f119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f11e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f121:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f127:	85 c0                	test   eax,eax
c000f129:	74 24                	je     c000f14f <sysCallIsATTY(regs*)+0x45>
c000f12b:	83 ec 0c             	sub    esp,0xc
c000f12e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f130:	50                   	push   eax
c000f131:	ff 12                	call   DWORD PTR [edx]
c000f133:	31 d2                	xor    edx,edx
c000f135:	0f b6 c0             	movzx  eax,al
c000f138:	83 c4 10             	add    esp,0x10
c000f13b:	83 c4 0c             	add    esp,0xc
c000f13e:	c3                   	ret    
c000f13f:	83 ec 0c             	sub    esp,0xc
c000f142:	50                   	push   eax
c000f143:	e8 8f 1d 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f148:	83 c4 10             	add    esp,0x10
c000f14b:	85 c0                	test   eax,eax
c000f14d:	75 dc                	jne    c000f12b <sysCallIsATTY(regs*)+0x21>
c000f14f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f154:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f159:	83 c4 0c             	add    esp,0xc
c000f15c:	c3                   	ret    

c000f15d <sysCallSeek(regs*)>:
c000f15d:	53                   	push   ebx
c000f15e:	83 ec 08             	sub    esp,0x8
c000f161:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f165:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f168:	83 f8 02             	cmp    eax,0x2
c000f16b:	76 32                	jbe    c000f19f <sysCallSeek(regs*)+0x42>
c000f16d:	83 ec 0c             	sub    esp,0xc
c000f170:	50                   	push   eax
c000f171:	e8 61 1d 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f176:	83 c4 0c             	add    esp,0xc
c000f179:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f17c:	31 db                	xor    ebx,ebx
c000f17e:	53                   	push   ebx
c000f17f:	51                   	push   ecx
c000f180:	50                   	push   eax
c000f181:	e8 18 35 00 00       	call   c001269e <File::seek(unsigned long long)>
c000f186:	83 c4 10             	add    esp,0x10
c000f189:	85 c0                	test   eax,eax
c000f18b:	0f 95 c0             	setne  al
c000f18e:	31 d2                	xor    edx,edx
c000f190:	0f b6 c0             	movzx  eax,al
c000f193:	f7 d8                	neg    eax
c000f195:	83 d2 00             	adc    edx,0x0
c000f198:	83 c4 08             	add    esp,0x8
c000f19b:	f7 da                	neg    edx
c000f19d:	5b                   	pop    ebx
c000f19e:	c3                   	ret    
c000f19f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1a9:	83 c4 08             	add    esp,0x8
c000f1ac:	5b                   	pop    ebx
c000f1ad:	c3                   	ret    

c000f1ae <sysCallTell(regs*)>:
c000f1ae:	53                   	push   ebx
c000f1af:	83 ec 08             	sub    esp,0x8
c000f1b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f1b9:	83 f8 02             	cmp    eax,0x2
c000f1bc:	76 2d                	jbe    c000f1eb <sysCallTell(regs*)+0x3d>
c000f1be:	83 ec 0c             	sub    esp,0xc
c000f1c1:	50                   	push   eax
c000f1c2:	e8 10 1d 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f1c7:	5a                   	pop    edx
c000f1c8:	59                   	pop    ecx
c000f1c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f1cc:	50                   	push   eax
c000f1cd:	e8 22 35 00 00       	call   c00126f4 <File::tell(unsigned long long*)>
c000f1d2:	83 c4 10             	add    esp,0x10
c000f1d5:	85 c0                	test   eax,eax
c000f1d7:	0f 95 c0             	setne  al
c000f1da:	31 d2                	xor    edx,edx
c000f1dc:	0f b6 c0             	movzx  eax,al
c000f1df:	f7 d8                	neg    eax
c000f1e1:	83 d2 00             	adc    edx,0x0
c000f1e4:	83 c4 08             	add    esp,0x8
c000f1e7:	f7 da                	neg    edx
c000f1e9:	5b                   	pop    ebx
c000f1ea:	c3                   	ret    
c000f1eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1f5:	83 c4 08             	add    esp,0x8
c000f1f8:	5b                   	pop    ebx
c000f1f9:	c3                   	ret    

c000f1fa <sysCallSizeFromFilename(regs*)>:
c000f1fa:	57                   	push   edi
c000f1fb:	56                   	push   esi
c000f1fc:	53                   	push   ebx
c000f1fd:	83 ec 10             	sub    esp,0x10
c000f200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f204:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f207:	83 ff 02             	cmp    edi,0x2
c000f20a:	76 56                	jbe    c000f262 <sysCallSizeFromFilename(regs*)+0x68>
c000f20c:	83 ec 0c             	sub    esp,0xc
c000f20f:	68 14 01 00 00       	push   0x114
c000f214:	e8 35 2f 00 00       	call   c001214e <operator new(unsigned long)>
c000f219:	83 c4 0c             	add    esp,0xc
c000f21c:	89 c3                	mov    ebx,eax
c000f21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f223:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f226:	57                   	push   edi
c000f227:	53                   	push   ebx
c000f228:	e8 4f 33 00 00       	call   c001257c <File::File(char const*, Process*)>
c000f22d:	83 c4 0c             	add    esp,0xc
c000f230:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f234:	50                   	push   eax
c000f235:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f238:	53                   	push   ebx
c000f239:	e8 4e 36 00 00       	call   c001288c <File::stat(unsigned long long*, bool*)>
c000f23e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f241:	89 c6                	mov    esi,eax
c000f243:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f245:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f248:	83 c4 10             	add    esp,0x10
c000f24b:	31 c0                	xor    eax,eax
c000f24d:	85 f6                	test   esi,esi
c000f24f:	0f 95 c0             	setne  al
c000f252:	31 d2                	xor    edx,edx
c000f254:	f7 d8                	neg    eax
c000f256:	83 d2 00             	adc    edx,0x0
c000f259:	83 c4 10             	add    esp,0x10
c000f25c:	f7 da                	neg    edx
c000f25e:	5b                   	pop    ebx
c000f25f:	5e                   	pop    esi
c000f260:	5f                   	pop    edi
c000f261:	c3                   	ret    
c000f262:	83 c4 10             	add    esp,0x10
c000f265:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f26a:	5b                   	pop    ebx
c000f26b:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f270:	5e                   	pop    esi
c000f271:	5f                   	pop    edi
c000f272:	c3                   	ret    

c000f273 <sysCallSize(regs*)>:
c000f273:	53                   	push   ebx
c000f274:	83 ec 18             	sub    esp,0x18
c000f277:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f27b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f27e:	83 f8 02             	cmp    eax,0x2
c000f281:	76 33                	jbe    c000f2b6 <sysCallSize(regs*)+0x43>
c000f283:	83 ec 0c             	sub    esp,0xc
c000f286:	50                   	push   eax
c000f287:	e8 4b 1c 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f28c:	83 c4 0c             	add    esp,0xc
c000f28f:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f293:	52                   	push   edx
c000f294:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f297:	50                   	push   eax
c000f298:	e8 ef 35 00 00       	call   c001288c <File::stat(unsigned long long*, bool*)>
c000f29d:	83 c4 10             	add    esp,0x10
c000f2a0:	85 c0                	test   eax,eax
c000f2a2:	0f 95 c0             	setne  al
c000f2a5:	31 d2                	xor    edx,edx
c000f2a7:	0f b6 c0             	movzx  eax,al
c000f2aa:	f7 d8                	neg    eax
c000f2ac:	83 d2 00             	adc    edx,0x0
c000f2af:	83 c4 18             	add    esp,0x18
c000f2b2:	f7 da                	neg    edx
c000f2b4:	5b                   	pop    ebx
c000f2b5:	c3                   	ret    
c000f2b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2c0:	83 c4 18             	add    esp,0x18
c000f2c3:	5b                   	pop    ebx
c000f2c4:	c3                   	ret    

c000f2c5 <sysCallClose(regs*)>:
c000f2c5:	53                   	push   ebx
c000f2c6:	83 ec 08             	sub    esp,0x8
c000f2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f2d0:	83 f8 02             	cmp    eax,0x2
c000f2d3:	76 2f                	jbe    c000f304 <sysCallClose(regs*)+0x3f>
c000f2d5:	83 ec 0c             	sub    esp,0xc
c000f2d8:	50                   	push   eax
c000f2d9:	e8 f9 1b 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f2de:	89 c3                	mov    ebx,eax
c000f2e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2e3:	e8 56 33 00 00       	call   c001263e <File::close()>
c000f2e8:	83 c4 10             	add    esp,0x10
c000f2eb:	85 db                	test   ebx,ebx
c000f2ed:	74 0c                	je     c000f2fb <sysCallClose(regs*)+0x36>
c000f2ef:	83 ec 0c             	sub    esp,0xc
c000f2f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f2f4:	53                   	push   ebx
c000f2f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	31 c0                	xor    eax,eax
c000f2fd:	31 d2                	xor    edx,edx
c000f2ff:	83 c4 08             	add    esp,0x8
c000f302:	5b                   	pop    ebx
c000f303:	c3                   	ret    
c000f304:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f309:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f30e:	83 c4 08             	add    esp,0x8
c000f311:	5b                   	pop    ebx
c000f312:	c3                   	ret    

c000f313 <sysCallOpenDir(regs*)>:
c000f313:	56                   	push   esi
c000f314:	53                   	push   ebx
c000f315:	53                   	push   ebx
c000f316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f31a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f31d:	85 f6                	test   esi,esi
c000f31f:	74 51                	je     c000f372 <sysCallOpenDir(regs*)+0x5f>
c000f321:	83 ec 0c             	sub    esp,0xc
c000f324:	68 14 01 00 00       	push   0x114
c000f329:	e8 20 2e 00 00       	call   c001214e <operator new(unsigned long)>
c000f32e:	83 c4 0c             	add    esp,0xc
c000f331:	89 c6                	mov    esi,eax
c000f333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f338:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f33b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f33e:	56                   	push   esi
c000f33f:	e8 fa 36 00 00       	call   c0012a3e <Directory::Directory(char const*, Process*)>
c000f344:	89 34 24             	mov    DWORD PTR [esp],esi
c000f347:	e8 56 37 00 00       	call   c0012aa2 <Directory::open()>
c000f34c:	83 c4 10             	add    esp,0x10
c000f34f:	85 c0                	test   eax,eax
c000f351:	75 1f                	jne    c000f372 <sysCallOpenDir(regs*)+0x5f>
c000f353:	83 ec 0c             	sub    esp,0xc
c000f356:	56                   	push   esi
c000f357:	e8 16 1a 00 00       	call   c0010d72 <UnixFile::getFileDescriptor()>
c000f35c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	89 02                	mov    DWORD PTR [edx],eax
c000f364:	c1 f8 1f             	sar    eax,0x1f
c000f367:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f36a:	31 c0                	xor    eax,eax
c000f36c:	59                   	pop    ecx
c000f36d:	31 d2                	xor    edx,edx
c000f36f:	5b                   	pop    ebx
c000f370:	5e                   	pop    esi
c000f371:	c3                   	ret    
c000f372:	59                   	pop    ecx
c000f373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f378:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f37d:	5b                   	pop    ebx
c000f37e:	5e                   	pop    esi
c000f37f:	c3                   	ret    

c000f380 <sysCallMakeDir(regs*)>:
c000f380:	56                   	push   esi
c000f381:	53                   	push   ebx
c000f382:	83 ec 10             	sub    esp,0x10
c000f385:	68 14 01 00 00       	push   0x114
c000f38a:	e8 bf 2d 00 00       	call   c001214e <operator new(unsigned long)>
c000f38f:	83 c4 0c             	add    esp,0xc
c000f392:	89 c3                	mov    ebx,eax
c000f394:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f399:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f39c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f3a3:	53                   	push   ebx
c000f3a4:	e8 95 36 00 00       	call   c0012a3e <Directory::Directory(char const*, Process*)>
c000f3a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ac:	e8 d1 38 00 00       	call   c0012c82 <Directory::create()>
c000f3b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3b4:	89 c6                	mov    esi,eax
c000f3b6:	e8 43 37 00 00       	call   c0012afe <Directory::close()>
c000f3bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f3c3:	31 c0                	xor    eax,eax
c000f3c5:	85 f6                	test   esi,esi
c000f3c7:	0f 95 c0             	setne  al
c000f3ca:	31 d2                	xor    edx,edx
c000f3cc:	f7 d8                	neg    eax
c000f3ce:	83 d2 00             	adc    edx,0x0
c000f3d1:	83 c4 14             	add    esp,0x14
c000f3d4:	f7 da                	neg    edx
c000f3d6:	5b                   	pop    ebx
c000f3d7:	5e                   	pop    esi
c000f3d8:	c3                   	ret    

c000f3d9 <sysCallCloseDir(regs*)>:
c000f3d9:	53                   	push   ebx
c000f3da:	83 ec 08             	sub    esp,0x8
c000f3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f3e4:	83 f8 02             	cmp    eax,0x2
c000f3e7:	76 2f                	jbe    c000f418 <sysCallCloseDir(regs*)+0x3f>
c000f3e9:	83 ec 0c             	sub    esp,0xc
c000f3ec:	50                   	push   eax
c000f3ed:	e8 e5 1a 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f3f2:	89 c3                	mov    ebx,eax
c000f3f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3f7:	e8 02 37 00 00       	call   c0012afe <Directory::close()>
c000f3fc:	83 c4 10             	add    esp,0x10
c000f3ff:	85 db                	test   ebx,ebx
c000f401:	74 0c                	je     c000f40f <sysCallCloseDir(regs*)+0x36>
c000f403:	83 ec 0c             	sub    esp,0xc
c000f406:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f408:	53                   	push   ebx
c000f409:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	31 c0                	xor    eax,eax
c000f411:	31 d2                	xor    edx,edx
c000f413:	83 c4 08             	add    esp,0x8
c000f416:	5b                   	pop    ebx
c000f417:	c3                   	ret    
c000f418:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f41d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f422:	83 c4 08             	add    esp,0x8
c000f425:	5b                   	pop    ebx
c000f426:	c3                   	ret    

c000f427 <sysCallWait(regs*)>:
c000f427:	83 ec 10             	sub    esp,0x10
c000f42a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f42e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f431:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f434:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f437:	e8 24 f2 ff ff       	call   c000e660 <waitTask(int, int*, int)>
c000f43c:	83 c4 1c             	add    esp,0x1c
c000f43f:	99                   	cdq    
c000f440:	c3                   	ret    

c000f441 <sysCallFork(regs*)>:
c000f441:	83 ec 18             	sub    esp,0x18
c000f444:	68 b3 05 02 c0       	push   0xc00205b3
c000f449:	e8 50 d7 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000f44e:	58                   	pop    eax
c000f44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f453:	e8 d6 ef ff ff       	call   c000e42e <forkProcess(regs*)>
c000f458:	83 c4 1c             	add    esp,0x1c
c000f45b:	99                   	cdq    
c000f45c:	c3                   	ret    

c000f45d <sysCallExecve(regs*)>:
c000f45d:	53                   	push   ebx
c000f45e:	81 ec 24 01 00 00    	sub    esp,0x124
c000f464:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f46b:	68 c1 05 02 c0       	push   0xc00205c1
c000f470:	e8 29 d7 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000f475:	83 c4 0c             	add    esp,0xc
c000f478:	68 00 01 00 00       	push   0x100
c000f47d:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f481:	50                   	push   eax
c000f482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f487:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f48a:	e8 5e 34 00 00       	call   c00128ed <getcwd(Process*, char*, int)>
c000f48f:	83 c4 0c             	add    esp,0xc
c000f492:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f495:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f498:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f49b:	e8 f4 f2 ff ff       	call   c000e794 <execveProcess(char const*, char* const*, char* const*)>
c000f4a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4aa:	81 c4 28 01 00 00    	add    esp,0x128
c000f4b0:	5b                   	pop    ebx
c000f4b1:	c3                   	ret    

c000f4b2 <sysCallRmdir(regs*)>:
c000f4b2:	56                   	push   esi
c000f4b3:	53                   	push   ebx
c000f4b4:	83 ec 10             	sub    esp,0x10
c000f4b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f4bb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f4be:	68 14 01 00 00       	push   0x114
c000f4c3:	e8 86 2c 00 00       	call   c001214e <operator new(unsigned long)>
c000f4c8:	83 c4 0c             	add    esp,0xc
c000f4cb:	89 c3                	mov    ebx,eax
c000f4cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f4d5:	56                   	push   esi
c000f4d6:	53                   	push   ebx
c000f4d7:	e8 a0 30 00 00       	call   c001257c <File::File(char const*, Process*)>
c000f4dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4df:	e8 74 32 00 00       	call   c0012758 <File::unlink()>
c000f4e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4e7:	89 c6                	mov    esi,eax
c000f4e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f4eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f4ee:	31 c0                	xor    eax,eax
c000f4f0:	85 f6                	test   esi,esi
c000f4f2:	0f 95 c0             	setne  al
c000f4f5:	31 d2                	xor    edx,edx
c000f4f7:	f7 d8                	neg    eax
c000f4f9:	83 d2 00             	adc    edx,0x0
c000f4fc:	83 c4 14             	add    esp,0x14
c000f4ff:	f7 da                	neg    edx
c000f501:	5b                   	pop    ebx
c000f502:	5e                   	pop    esi
c000f503:	c3                   	ret    

c000f504 <sysCallUnlink(regs*)>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f50d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f510:	68 14 01 00 00       	push   0x114
c000f515:	e8 34 2c 00 00       	call   c001214e <operator new(unsigned long)>
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	89 c3                	mov    ebx,eax
c000f51f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f524:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f527:	56                   	push   esi
c000f528:	53                   	push   ebx
c000f529:	e8 4e 30 00 00       	call   c001257c <File::File(char const*, Process*)>
c000f52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f531:	e8 22 32 00 00       	call   c0012758 <File::unlink()>
c000f536:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f539:	89 c6                	mov    esi,eax
c000f53b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f53d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f540:	31 c0                	xor    eax,eax
c000f542:	85 f6                	test   esi,esi
c000f544:	0f 95 c0             	setne  al
c000f547:	31 d2                	xor    edx,edx
c000f549:	f7 d8                	neg    eax
c000f54b:	83 d2 00             	adc    edx,0x0
c000f54e:	83 c4 14             	add    esp,0x14
c000f551:	f7 da                	neg    edx
c000f553:	5b                   	pop    ebx
c000f554:	5e                   	pop    esi
c000f555:	c3                   	ret    

c000f556 <sysCallGetArgv(regs*)>:
c000f556:	83 ec 0c             	sub    esp,0xc
c000f559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f55d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f560:	85 c0                	test   eax,eax
c000f562:	78 2b                	js     c000f58f <sysCallGetArgv(regs*)+0x39>
c000f564:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f56a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f56d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f573:	7d 1a                	jge    c000f58f <sysCallGetArgv(regs*)+0x39>
c000f575:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f57c:	85 c0                	test   eax,eax
c000f57e:	74 17                	je     c000f597 <sysCallGetArgv(regs*)+0x41>
c000f580:	83 ec 08             	sub    esp,0x8
c000f583:	50                   	push   eax
c000f584:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f587:	e8 1b 11 ff ff       	call   c00006a7 <strcpy>
c000f58c:	83 c4 10             	add    esp,0x10
c000f58f:	31 c0                	xor    eax,eax
c000f591:	31 d2                	xor    edx,edx
c000f593:	83 c4 0c             	add    esp,0xc
c000f596:	c3                   	ret    
c000f597:	b8 01 00 00 00       	mov    eax,0x1
c000f59c:	31 d2                	xor    edx,edx
c000f59e:	83 c4 0c             	add    esp,0xc
c000f5a1:	c3                   	ret    

c000f5a2 <sysCallTTYName(regs*)>:
c000f5a2:	56                   	push   esi
c000f5a3:	53                   	push   ebx
c000f5a4:	53                   	push   ebx
c000f5a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f5a9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f5ac:	85 c0                	test   eax,eax
c000f5ae:	74 58                	je     c000f608 <sysCallTTYName(regs*)+0x66>
c000f5b0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f5b3:	83 f8 02             	cmp    eax,0x2
c000f5b6:	77 3e                	ja     c000f5f6 <sysCallTTYName(regs*)+0x54>
c000f5b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f5c0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f5c6:	85 db                	test   ebx,ebx
c000f5c8:	74 3e                	je     c000f608 <sysCallTTYName(regs*)+0x66>
c000f5ca:	83 ec 0c             	sub    esp,0xc
c000f5cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5cf:	53                   	push   ebx
c000f5d0:	ff 10                	call   DWORD PTR [eax]
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	84 c0                	test   al,al
c000f5d7:	74 3a                	je     c000f613 <sysCallTTYName(regs*)+0x71>
c000f5d9:	83 ec 08             	sub    esp,0x8
c000f5dc:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f5e2:	53                   	push   ebx
c000f5e3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f5e6:	e8 bc 10 ff ff       	call   c00006a7 <strcpy>
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	31 c0                	xor    eax,eax
c000f5f0:	59                   	pop    ecx
c000f5f1:	31 d2                	xor    edx,edx
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    
c000f5f6:	83 ec 0c             	sub    esp,0xc
c000f5f9:	50                   	push   eax
c000f5fa:	e8 d8 18 00 00       	call   c0010ed7 <getFromFileDescriptor(int)>
c000f5ff:	83 c4 10             	add    esp,0x10
c000f602:	89 c3                	mov    ebx,eax
c000f604:	85 db                	test   ebx,ebx
c000f606:	75 c2                	jne    c000f5ca <sysCallTTYName(regs*)+0x28>
c000f608:	59                   	pop    ecx
c000f609:	b8 01 00 00 00       	mov    eax,0x1
c000f60e:	31 d2                	xor    edx,edx
c000f610:	5b                   	pop    ebx
c000f611:	5e                   	pop    esi
c000f612:	c3                   	ret    
c000f613:	59                   	pop    ecx
c000f614:	b8 02 00 00 00       	mov    eax,0x2
c000f619:	31 d2                	xor    edx,edx
c000f61b:	5b                   	pop    ebx
c000f61c:	5e                   	pop    esi
c000f61d:	c3                   	ret    

c000f61e <sysCallGetEnv(regs*)>:
c000f61e:	83 ec 0c             	sub    esp,0xc
c000f621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f625:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f628:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f62b:	85 c9                	test   ecx,ecx
c000f62d:	75 0c                	jne    c000f63b <sysCallGetEnv(regs*)+0x1d>
c000f62f:	85 d2                	test   edx,edx
c000f631:	74 14                	je     c000f647 <sysCallGetEnv(regs*)+0x29>
c000f633:	31 c0                	xor    eax,eax
c000f635:	31 d2                	xor    edx,edx
c000f637:	83 c4 0c             	add    esp,0xc
c000f63a:	c3                   	ret    
c000f63b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f63e:	85 d2                	test   edx,edx
c000f640:	74 1b                	je     c000f65d <sysCallGetEnv(regs*)+0x3f>
c000f642:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f645:	eb ec                	jmp    c000f633 <sysCallGetEnv(regs*)+0x15>
c000f647:	83 ec 0c             	sub    esp,0xc
c000f64a:	68 0c 06 02 c0       	push   0xc002060c
c000f64f:	e8 d1 0f ff ff       	call   c0000625 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	31 d2                	xor    edx,edx
c000f659:	83 c4 0c             	add    esp,0xc
c000f65c:	c3                   	ret    
c000f65d:	83 ec 08             	sub    esp,0x8
c000f660:	68 0c 06 02 c0       	push   0xc002060c
c000f665:	50                   	push   eax
c000f666:	e8 3c 10 ff ff       	call   c00006a7 <strcpy>
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	eb c3                	jmp    c000f633 <sysCallGetEnv(regs*)+0x15>

c000f670 <sysCallUSleep(regs*)>:
c000f670:	83 ec 14             	sub    esp,0x14
c000f673:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f678:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f67c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f683:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f686:	01 ca                	add    edx,ecx
c000f688:	52                   	push   edx
c000f689:	50                   	push   eax
c000f68a:	e8 6a f0 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c000f68f:	31 c0                	xor    eax,eax
c000f691:	31 d2                	xor    edx,edx
c000f693:	83 c4 1c             	add    esp,0x1c
c000f696:	c3                   	ret    

c000f697 <sysCallSpawn(regs*)>:
c000f697:	56                   	push   esi
c000f698:	53                   	push   ebx
c000f699:	53                   	push   ebx
c000f69a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f69e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f6a1:	85 f6                	test   esi,esi
c000f6a3:	75 08                	jne    c000f6ad <sysCallSpawn(regs*)+0x16>
c000f6a5:	59                   	pop    ecx
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	31 d2                	xor    edx,edx
c000f6aa:	5b                   	pop    ebx
c000f6ab:	5e                   	pop    esi
c000f6ac:	c3                   	ret    
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	68 d1 05 02 c0       	push   0xc00205d1
c000f6b5:	e8 e4 d4 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000f6ba:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f6c1:	e8 88 2a 00 00       	call   c001214e <operator new(unsigned long)>
c000f6c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f6c9:	89 c6                	mov    esi,eax
c000f6cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f6d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f6d6:	56                   	push   esi
c000f6d7:	e8 0c e6 ff ff       	call   c000dce8 <Process::Process(char const*, Process*, char**)>
c000f6dc:	83 c4 20             	add    esp,0x20
c000f6df:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f6e6:	75 bd                	jne    c000f6a5 <sysCallSpawn(regs*)+0xe>
c000f6e8:	83 ec 0c             	sub    esp,0xc
c000f6eb:	68 dc 05 02 c0       	push   0xc00205dc
c000f6f0:	e8 a9 d4 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000f6f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000f6f8:	e8 51 eb ff ff       	call   c000e24e <Process::createUserThread()>
c000f6fd:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6ff:	83 c4 10             	add    esp,0x10
c000f702:	99                   	cdq    
c000f703:	59                   	pop    ecx
c000f704:	5b                   	pop    ebx
c000f705:	5e                   	pop    esi
c000f706:	c3                   	ret    

c000f707 <sysAppSettings(regs*)>:
c000f707:	53                   	push   ebx
c000f708:	83 ec 08             	sub    esp,0x8
c000f70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f70f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f712:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f718:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f71d:	66 3d c0 09          	cmp    ax,0x9c0
c000f721:	75 2f                	jne    c000f752 <sysAppSettings(regs*)+0x4b>
c000f723:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f729:	83 e0 1f             	and    eax,0x1f
c000f72c:	3c 01                	cmp    al,0x1
c000f72e:	74 2e                	je     c000f75e <sysAppSettings(regs*)+0x57>
c000f730:	3c 07                	cmp    al,0x7
c000f732:	0f 84 bd 00 00 00    	je     c000f7f5 <sysAppSettings(regs*)+0xee>
c000f738:	84 c0                	test   al,al
c000f73a:	0f 84 dc 00 00 00    	je     c000f81c <sysAppSettings(regs*)+0x115>
c000f740:	3c 08                	cmp    al,0x8
c000f742:	74 6d                	je     c000f7b1 <sysAppSettings(regs*)+0xaa>
c000f744:	0f b6 c0             	movzx  eax,al
c000f747:	83 c4 08             	add    esp,0x8
c000f74a:	05 e8 03 00 00       	add    eax,0x3e8
c000f74f:	5b                   	pop    ebx
c000f750:	99                   	cdq    
c000f751:	c3                   	ret    
c000f752:	b8 01 00 00 00       	mov    eax,0x1
c000f757:	31 d2                	xor    edx,edx
c000f759:	83 c4 08             	add    esp,0x8
c000f75c:	5b                   	pop    ebx
c000f75d:	c3                   	ret    
c000f75e:	51                   	push   ecx
c000f75f:	68 00 01 00 00       	push   0x100
c000f764:	6a 00                	push   0x0
c000f766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f76b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f76e:	83 c0 0c             	add    eax,0xc
c000f771:	50                   	push   eax
c000f772:	e8 91 0e ff ff       	call   c0000608 <memset>
c000f777:	83 c4 0c             	add    esp,0xc
c000f77a:	68 ff 00 00 00       	push   0xff
c000f77f:	53                   	push   ebx
c000f780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f785:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f788:	83 c0 0c             	add    eax,0xc
c000f78b:	50                   	push   eax
c000f78c:	e8 41 0e ff ff       	call   c00005d2 <memcpy>
c000f791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f796:	5b                   	pop    ebx
c000f797:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f79a:	5a                   	pop    edx
c000f79b:	8d 50 0c             	lea    edx,[eax+0xc]
c000f79e:	52                   	push   edx
c000f79f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f7a5:	e8 ee 09 00 00       	call   c0010198 <VgaText::setTitle(char*)>
c000f7aa:	83 c4 10             	add    esp,0x10
c000f7ad:	31 c0                	xor    eax,eax
c000f7af:	eb a6                	jmp    c000f757 <sysAppSettings(regs*)+0x50>
c000f7b1:	83 ec 08             	sub    esp,0x8
c000f7b4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f7ba:	83 e0 0f             	and    eax,0xf
c000f7bd:	50                   	push   eax
c000f7be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f7cc:	e8 b7 09 00 00       	call   c0010188 <VgaText::setTitleColour(VgaColour)>
c000f7d1:	58                   	pop    eax
c000f7d2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f7d8:	5a                   	pop    edx
c000f7d9:	c1 e8 04             	shr    eax,0x4
c000f7dc:	83 e0 0f             	and    eax,0xf
c000f7df:	50                   	push   eax
c000f7e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f7ee:	e8 85 09 00 00       	call   c0010178 <VgaText::setTitleTextColour(VgaColour)>
c000f7f3:	eb b5                	jmp    c000f7aa <sysAppSettings(regs*)+0xa3>
c000f7f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7fd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000f803:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000f809:	c0 e8 06             	shr    al,0x6
c000f80c:	83 e0 01             	and    eax,0x1
c000f80f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000f815:	31 c0                	xor    eax,eax
c000f817:	e9 3b ff ff ff       	jmp    c000f757 <sysAppSettings(regs*)+0x50>
c000f81c:	b8 02 00 00 00       	mov    eax,0x2
c000f821:	e9 31 ff ff ff       	jmp    c000f757 <sysAppSettings(regs*)+0x50>

c000f826 <sysSetFatAttrib(regs*)>:
c000f826:	57                   	push   edi
c000f827:	56                   	push   esi
c000f828:	53                   	push   ebx
c000f829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f82d:	83 ec 0c             	sub    esp,0xc
c000f830:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000f833:	68 14 01 00 00       	push   0x114
c000f838:	e8 11 29 00 00       	call   c001214e <operator new(unsigned long)>
c000f83d:	83 c4 0c             	add    esp,0xc
c000f840:	89 c3                	mov    ebx,eax
c000f842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f847:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f84a:	57                   	push   edi
c000f84b:	53                   	push   ebx
c000f84c:	e8 2b 2d 00 00       	call   c001257c <File::File(char const*, Process*)>
c000f851:	83 c4 0c             	add    esp,0xc
c000f854:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f857:	0f b6 d4             	movzx  edx,ah
c000f85a:	0f b6 c0             	movzx  eax,al
c000f85d:	52                   	push   edx
c000f85e:	50                   	push   eax
c000f85f:	53                   	push   ebx
c000f860:	e8 8d 2f 00 00       	call   c00127f2 <File::chfatattr(unsigned char, unsigned char)>
c000f865:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f868:	89 c6                	mov    esi,eax
c000f86a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f86c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f86f:	83 c4 10             	add    esp,0x10
c000f872:	31 c0                	xor    eax,eax
c000f874:	5b                   	pop    ebx
c000f875:	85 f6                	test   esi,esi
c000f877:	5e                   	pop    esi
c000f878:	0f 95 c0             	setne  al
c000f87b:	5f                   	pop    edi
c000f87c:	31 d2                	xor    edx,edx
c000f87e:	f7 d8                	neg    eax
c000f880:	83 d2 00             	adc    edx,0x0
c000f883:	f7 da                	neg    edx
c000f885:	c3                   	ret    

c000f886 <sysPanic(regs*)>:
c000f886:	83 ec 18             	sub    esp,0x18
c000f889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f88d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f890:	e8 27 d4 ff ff       	call   c000ccbc <panic(char const*)>
c000f895:	c7 04 24 e9 05 02 c0 	mov    DWORD PTR [esp],0xc00205e9
c000f89c:	e8 1b d4 ff ff       	call   c000ccbc <panic(char const*)>
c000f8a1:	b8 01 00 00 00       	mov    eax,0x1
c000f8a6:	31 d2                	xor    edx,edx
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <sysPipe(regs*)>:
c000f8ac:	57                   	push   edi
c000f8ad:	56                   	push   esi
c000f8ae:	53                   	push   ebx
c000f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000f8b9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000f8bc:	6a 20                	push   0x20
c000f8be:	e8 8b 28 00 00       	call   c001214e <operator new(unsigned long)>
c000f8c3:	89 c3                	mov    ebx,eax
c000f8c5:	58                   	pop    eax
c000f8c6:	5a                   	pop    edx
c000f8c7:	68 00 50 00 00       	push   0x5000
c000f8cc:	53                   	push   ebx
c000f8cd:	e8 26 e3 ff ff       	call   c000dbf8 <Pipe::Pipe(int)>
c000f8d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8d5:	e8 98 14 00 00       	call   c0010d72 <UnixFile::getFileDescriptor()>
c000f8da:	89 07                	mov    DWORD PTR [edi],eax
c000f8dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8df:	e8 8e 14 00 00       	call   c0010d72 <UnixFile::getFileDescriptor()>
c000f8e4:	83 c4 10             	add    esp,0x10
c000f8e7:	89 06                	mov    DWORD PTR [esi],eax
c000f8e9:	31 d2                	xor    edx,edx
c000f8eb:	5b                   	pop    ebx
c000f8ec:	31 c0                	xor    eax,eax
c000f8ee:	5e                   	pop    esi
c000f8ef:	5f                   	pop    edi
c000f8f0:	c3                   	ret    

c000f8f1 <sysGetUnixTime(regs*)>:
c000f8f1:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c000f8f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f8fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f900:	e9 3f 36 00 00       	jmp    c0012f44 <Clock::timeInSecondsLocal()>

c000f905 <string_ends_with(char const*, char const*)>:
c000f905:	57                   	push   edi
c000f906:	56                   	push   esi
c000f907:	53                   	push   ebx
c000f908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f90c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f910:	83 ec 0c             	sub    esp,0xc
c000f913:	53                   	push   ebx
c000f914:	e8 0c 0d ff ff       	call   c0000625 <strlen>
c000f919:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f91c:	89 c6                	mov    esi,eax
c000f91e:	e8 02 0d ff ff       	call   c0000625 <strlen>
c000f923:	83 c4 10             	add    esp,0x10
c000f926:	39 c6                	cmp    esi,eax
c000f928:	7d 06                	jge    c000f930 <string_ends_with(char const*, char const*)+0x2b>
c000f92a:	5b                   	pop    ebx
c000f92b:	31 c0                	xor    eax,eax
c000f92d:	5e                   	pop    esi
c000f92e:	5f                   	pop    edi
c000f92f:	c3                   	ret    
c000f930:	83 ec 08             	sub    esp,0x8
c000f933:	29 c6                	sub    esi,eax
c000f935:	57                   	push   edi
c000f936:	01 f3                	add    ebx,esi
c000f938:	53                   	push   ebx
c000f939:	e8 ba 0d ff ff       	call   c00006f8 <strcmp>
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	85 c0                	test   eax,eax
c000f943:	5b                   	pop    ebx
c000f944:	0f 94 c0             	sete   al
c000f947:	5e                   	pop    esi
c000f948:	0f b6 c0             	movzx  eax,al
c000f94b:	5f                   	pop    edi
c000f94c:	c3                   	ret    

c000f94d <setupSystemCalls()>:
c000f94d:	c7 05 60 35 02 c0 ec 81 01 c0 	mov    DWORD PTR ds:0xc0023560,0xc00181ec
c000f957:	c7 05 64 35 02 c0 af 80 01 c0 	mov    DWORD PTR ds:0xc0023564,0xc00180af
c000f961:	c7 05 68 35 02 c0 2f 81 01 c0 	mov    DWORD PTR ds:0xc0023568,0xc001812f
c000f96b:	c7 05 6c 35 02 c0 84 81 01 c0 	mov    DWORD PTR ds:0xc002356c,0xc0018184
c000f975:	c7 05 70 35 02 c0 c7 80 01 c0 	mov    DWORD PTR ds:0xc0023570,0xc00180c7
c000f97f:	c7 05 74 35 02 c0 b4 ed 00 c0 	mov    DWORD PTR ds:0xc0023574,0xc000edb4
c000f989:	c7 05 78 35 02 c0 2d ef 00 c0 	mov    DWORD PTR ds:0xc0023578,0xc000ef2d
c000f993:	c7 05 7c 35 02 c0 4c ef 00 c0 	mov    DWORD PTR ds:0xc002357c,0xc000ef4c
c000f99d:	c7 05 84 35 02 c0 c5 f2 00 c0 	mov    DWORD PTR ds:0xc0023584,0xc000f2c5
c000f9a7:	c7 05 80 35 02 c0 ab ef 00 c0 	mov    DWORD PTR ds:0xc0023580,0xc000efab
c000f9b1:	c7 05 88 35 02 c0 13 f3 00 c0 	mov    DWORD PTR ds:0xc0023588,0xc000f313
c000f9bb:	c7 05 8c 35 02 c0 9b f0 00 c0 	mov    DWORD PTR ds:0xc002358c,0xc000f09b
c000f9c5:	c7 05 90 35 02 c0 c0 ed 00 c0 	mov    DWORD PTR ds:0xc0023590,0xc000edc0
c000f9cf:	c7 05 94 35 02 c0 c5 ed 00 c0 	mov    DWORD PTR ds:0xc0023594,0xc000edc5
c000f9d9:	c7 05 98 35 02 c0 80 f3 00 c0 	mov    DWORD PTR ds:0xc0023598,0xc000f380
c000f9e3:	c7 05 9c 35 02 c0 d9 f3 00 c0 	mov    DWORD PTR ds:0xc002359c,0xc000f3d9
c000f9ed:	c7 05 a0 35 02 c0 5d f1 00 c0 	mov    DWORD PTR ds:0xc00235a0,0xc000f15d
c000f9f7:	c7 05 a4 35 02 c0 ae f1 00 c0 	mov    DWORD PTR ds:0xc00235a4,0xc000f1ae
c000fa01:	c7 05 a8 35 02 c0 73 f2 00 c0 	mov    DWORD PTR ds:0xc00235a8,0xc000f273
c000fa0b:	c7 05 ac 35 02 c0 ca ed 00 c0 	mov    DWORD PTR ds:0xc00235ac,0xc000edca
c000fa15:	c7 05 b0 35 02 c0 27 f4 00 c0 	mov    DWORD PTR ds:0xc00235b0,0xc000f427
c000fa1f:	c7 05 b4 35 02 c0 41 f4 00 c0 	mov    DWORD PTR ds:0xc00235b4,0xc000f441
c000fa29:	c7 05 b8 35 02 c0 5d f4 00 c0 	mov    DWORD PTR ds:0xc00235b8,0xc000f45d
c000fa33:	c7 05 bc 35 02 c0 b2 f4 00 c0 	mov    DWORD PTR ds:0xc00235bc,0xc000f4b2
c000fa3d:	c7 05 c0 35 02 c0 04 f5 00 c0 	mov    DWORD PTR ds:0xc00235c0,0xc000f504
c000fa47:	c7 05 c4 35 02 c0 d4 ed 00 c0 	mov    DWORD PTR ds:0xc00235c4,0xc000edd4
c000fa51:	c7 05 c8 35 02 c0 56 f5 00 c0 	mov    DWORD PTR ds:0xc00235c8,0xc000f556
c000fa5b:	c7 05 cc 35 02 c0 68 ef 00 c0 	mov    DWORD PTR ds:0xc00235cc,0xc000ef68
c000fa65:	c7 05 d0 35 02 c0 a2 f5 00 c0 	mov    DWORD PTR ds:0xc00235d0,0xc000f5a2
c000fa6f:	c7 05 d4 35 02 c0 0a f1 00 c0 	mov    DWORD PTR ds:0xc00235d4,0xc000f10a
c000fa79:	c7 05 d8 35 02 c0 70 f6 00 c0 	mov    DWORD PTR ds:0xc00235d8,0xc000f670
c000fa83:	c7 05 dc 35 02 c0 fa f1 00 c0 	mov    DWORD PTR ds:0xc00235dc,0xc000f1fa
c000fa8d:	c7 05 e0 35 02 c0 97 f6 00 c0 	mov    DWORD PTR ds:0xc00235e0,0xc000f697
c000fa97:	c7 05 e4 35 02 c0 1e f6 00 c0 	mov    DWORD PTR ds:0xc00235e4,0xc000f61e
c000faa1:	c7 05 e8 35 02 c0 07 f7 00 c0 	mov    DWORD PTR ds:0xc00235e8,0xc000f707
c000faab:	c7 05 ec 35 02 c0 e4 ed 00 c0 	mov    DWORD PTR ds:0xc00235ec,0xc000ede4
c000fab5:	c7 05 f0 35 02 c0 4e ee 00 c0 	mov    DWORD PTR ds:0xc00235f0,0xc000ee4e
c000fabf:	c7 05 f4 35 02 c0 94 ee 00 c0 	mov    DWORD PTR ds:0xc00235f4,0xc000ee94
c000fac9:	c7 05 f8 35 02 c0 26 f8 00 c0 	mov    DWORD PTR ds:0xc00235f8,0xc000f826
c000fad3:	c7 05 fc 35 02 c0 86 f8 00 c0 	mov    DWORD PTR ds:0xc00235fc,0xc000f886
c000fadd:	c7 05 00 36 02 c0 e5 ee 00 c0 	mov    DWORD PTR ds:0xc0023600,0xc000eee5
c000fae7:	c7 05 04 36 02 c0 ac f8 00 c0 	mov    DWORD PTR ds:0xc0023604,0xc000f8ac
c000faf1:	c7 05 08 36 02 c0 f1 f8 00 c0 	mov    DWORD PTR ds:0xc0023608,0xc000f8f1
c000fafb:	c3                   	ret    

c000fafc <systemCall(regs*, void*)>:
c000fafc:	53                   	push   ebx
c000fafd:	83 ec 08             	sub    esp,0x8
c000fb00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fb07:	83 f8 7f             	cmp    eax,0x7f
c000fb0a:	77 16                	ja     c000fb22 <systemCall(regs*, void*)+0x26>
c000fb0c:	8b 14 85 60 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcaa0]
c000fb13:	85 d2                	test   edx,edx
c000fb15:	74 0b                	je     c000fb22 <systemCall(regs*, void*)+0x26>
c000fb17:	83 ec 0c             	sub    esp,0xc
c000fb1a:	53                   	push   ebx
c000fb1b:	ff d2                	call   edx
c000fb1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fb20:	eb 0d                	jmp    c000fb2f <systemCall(regs*, void*)+0x33>
c000fb22:	52                   	push   edx
c000fb23:	52                   	push   edx
c000fb24:	50                   	push   eax
c000fb25:	68 f8 05 02 c0       	push   0xc00205f8
c000fb2a:	e8 6f d0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fb37:	31 d2                	xor    edx,edx
c000fb39:	83 c4 08             	add    esp,0x8
c000fb3c:	5b                   	pop    ebx
c000fb3d:	c3                   	ret    

c000fb3e <VgaText::isAtty()>:
c000fb3e:	b0 01                	mov    al,0x1
c000fb40:	c3                   	ret    
c000fb41:	90                   	nop

c000fb42 <VgaText::~VgaText()>:
c000fb42:	83 ec 0c             	sub    esp,0xc
c000fb45:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4e:	89 10                	mov    DWORD PTR [eax],edx
c000fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb54:	83 ec 0c             	sub    esp,0xc
c000fb57:	50                   	push   eax
c000fb58:	e8 81 12 00 00       	call   c0010dde <UnixFile::~UnixFile()>
c000fb5d:	83 c4 10             	add    esp,0x10
c000fb60:	90                   	nop
c000fb61:	83 c4 0c             	add    esp,0xc
c000fb64:	c3                   	ret    
c000fb65:	90                   	nop

c000fb66 <VgaText::~VgaText()>:
c000fb66:	83 ec 0c             	sub    esp,0xc
c000fb69:	83 ec 0c             	sub    esp,0xc
c000fb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb70:	e8 cd ff ff ff       	call   c000fb42 <VgaText::~VgaText()>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	83 ec 08             	sub    esp,0x8
c000fb7b:	68 60 12 00 00       	push   0x1260
c000fb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb84:	e8 d4 25 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c000fb89:	83 c4 10             	add    esp,0x10
c000fb8c:	83 c4 0c             	add    esp,0xc
c000fb8f:	c3                   	ret    

c000fb90 <VgaText::read(unsigned long long, void*, int*)>:
c000fb90:	83 ec 10             	sub    esp,0x10
c000fb93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb9f:	e8 34 4f 00 00       	call   c0014ad8 <readKeyboard(VgaText*, char*, unsigned long)>
c000fba4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fba8:	89 02                	mov    DWORD PTR [edx],eax
c000fbaa:	31 c0                	xor    eax,eax
c000fbac:	83 c4 1c             	add    esp,0x1c
c000fbaf:	c3                   	ret    

c000fbb0 <setTerminalScrollLock(bool)>:
c000fbb0:	c3                   	ret    

c000fbb1 <addToTerminalCycle(VgaText*)>:
c000fbb1:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c000fbb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbbb:	85 d2                	test   edx,edx
c000fbbd:	75 0c                	jne    c000fbcb <addToTerminalCycle(VgaText*)+0x1a>
c000fbbf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fbc5:	a3 80 37 02 c0       	mov    ds:0xc0023780,eax
c000fbca:	c3                   	ret    
c000fbcb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fbd1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fbd7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fbdd:	c3                   	ret    

c000fbde <installVgaTextImplementation()>:
c000fbde:	83 ec 10             	sub    esp,0x10
c000fbe1:	6a 20                	push   0x20
c000fbe3:	6a 00                	push   0x0
c000fbe5:	68 60 37 02 c0       	push   0xc0023760
c000fbea:	e8 19 0a ff ff       	call   c0000608 <memset>
c000fbef:	83 c4 1c             	add    esp,0x1c
c000fbf2:	c3                   	ret    

c000fbf3 <scrollTerminalScrollLock(int)>:
c000fbf3:	c3                   	ret    

c000fbf4 <VgaText::load()>:
c000fbf4:	53                   	push   ebx
c000fbf5:	31 c0                	xor    eax,eax
c000fbf7:	83 ec 58             	sub    esp,0x58
c000fbfa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fbfe:	89 e2                	mov    edx,esp
c000fc00:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fc04:	40                   	inc    eax
c000fc05:	83 f8 50             	cmp    eax,0x50
c000fc08:	75 f6                	jne    c000fc00 <VgaText::load()+0xc>
c000fc0a:	31 c0                	xor    eax,eax
c000fc0c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fc13:	84 c9                	test   cl,cl
c000fc15:	74 06                	je     c000fc1d <VgaText::load()+0x29>
c000fc17:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fc1a:	40                   	inc    eax
c000fc1b:	eb ef                	jmp    c000fc0c <VgaText::load()+0x18>
c000fc1d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fc23:	85 c0                	test   eax,eax
c000fc25:	74 09                	je     c000fc30 <VgaText::load()+0x3c>
c000fc27:	51                   	push   ecx
c000fc28:	51                   	push   ecx
c000fc29:	52                   	push   edx
c000fc2a:	53                   	push   ebx
c000fc2b:	ff d0                	call   eax
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fc36:	85 c0                	test   eax,eax
c000fc38:	74 09                	je     c000fc43 <VgaText::load()+0x4f>
c000fc3a:	83 ec 0c             	sub    esp,0xc
c000fc3d:	53                   	push   ebx
c000fc3e:	ff d0                	call   eax
c000fc40:	83 c4 10             	add    esp,0x10
c000fc43:	83 c4 58             	add    esp,0x58
c000fc46:	5b                   	pop    ebx
c000fc47:	c3                   	ret    

c000fc48 <VgaText::updateCursor()>:
c000fc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc4c:	39 05 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,eax
c000fc52:	75 0c                	jne    c000fc60 <VgaText::updateCursor()+0x18>
c000fc54:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fc5a:	85 c0                	test   eax,eax
c000fc5c:	74 02                	je     c000fc60 <VgaText::updateCursor()+0x18>
c000fc5e:	ff e0                	jmp    eax
c000fc60:	c3                   	ret    
c000fc61:	90                   	nop

c000fc62 <VgaText::showCursor(bool)>:
c000fc62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc6a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <VgaText::disableBlink(bool)>:
c000fc72:	56                   	push   esi
c000fc73:	53                   	push   ebx
c000fc74:	51                   	push   ecx
c000fc75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc7d:	39 1d 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,ebx
c000fc83:	75 18                	jne    c000fc9d <VgaText::disableBlink(bool)+0x2b>
c000fc85:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fc8b:	85 c0                	test   eax,eax
c000fc8d:	74 0e                	je     c000fc9d <VgaText::disableBlink(bool)+0x2b>
c000fc8f:	89 f1                	mov    ecx,esi
c000fc91:	52                   	push   edx
c000fc92:	52                   	push   edx
c000fc93:	0f b6 d1             	movzx  edx,cl
c000fc96:	52                   	push   edx
c000fc97:	53                   	push   ebx
c000fc98:	ff d0                	call   eax
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	89 f0                	mov    eax,esi
c000fc9f:	83 f0 01             	xor    eax,0x1
c000fca2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fca8:	58                   	pop    eax
c000fca9:	5b                   	pop    ebx
c000fcaa:	5e                   	pop    esi
c000fcab:	c3                   	ret    

c000fcac <VgaText::doANSI_SGR(int)>:
c000fcac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcb4:	85 d2                	test   edx,edx
c000fcb6:	75 14                	jne    c000fccc <VgaText::doANSI_SGR(int)+0x20>
c000fcb8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fcbe:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fcc4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fcca:	eb 65                	jmp    c000fd31 <VgaText::doANSI_SGR(int)+0x85>
c000fccc:	83 fa 07             	cmp    edx,0x7
c000fccf:	75 14                	jne    c000fce5 <VgaText::doANSI_SGR(int)+0x39>
c000fcd1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fcd7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fcdd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fce3:	eb 4c                	jmp    c000fd31 <VgaText::doANSI_SGR(int)+0x85>
c000fce5:	83 fa 1b             	cmp    edx,0x1b
c000fce8:	74 ce                	je     c000fcb8 <VgaText::doANSI_SGR(int)+0xc>
c000fcea:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fced:	83 f9 07             	cmp    ecx,0x7
c000fcf0:	77 09                	ja     c000fcfb <VgaText::doANSI_SGR(int)+0x4f>
c000fcf2:	8b 14 8d 20 21 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddee0]
c000fcf9:	eb 20                	jmp    c000fd1b <VgaText::doANSI_SGR(int)+0x6f>
c000fcfb:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fcfe:	83 f9 07             	cmp    ecx,0x7
c000fd01:	77 09                	ja     c000fd0c <VgaText::doANSI_SGR(int)+0x60>
c000fd03:	8b 14 8d 20 21 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddee0]
c000fd0a:	eb 25                	jmp    c000fd31 <VgaText::doANSI_SGR(int)+0x85>
c000fd0c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fd0f:	83 f9 07             	cmp    ecx,0x7
c000fd12:	77 0e                	ja     c000fd22 <VgaText::doANSI_SGR(int)+0x76>
c000fd14:	8b 14 95 d8 1f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde028]
c000fd1b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fd21:	c3                   	ret    
c000fd22:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fd25:	83 f9 07             	cmp    ecx,0x7
c000fd28:	77 0d                	ja     c000fd37 <VgaText::doANSI_SGR(int)+0x8b>
c000fd2a:	8b 14 95 b0 1f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde050]
c000fd31:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fd37:	c3                   	ret    

c000fd38 <VgaText::setDefaultBgColour(VgaColour)>:
c000fd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd40:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fd46:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fd4c:	c3                   	ret    
c000fd4d:	90                   	nop

c000fd4e <VgaText::setDefaultFgColour(VgaColour)>:
c000fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd56:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fd5c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fd62:	c3                   	ret    
c000fd63:	90                   	nop

c000fd64 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fd64:	53                   	push   ebx
c000fd65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fd6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd71:	51                   	push   ecx
c000fd72:	e8 c1 ff ff ff       	call   c000fd38 <VgaText::setDefaultBgColour(VgaColour)>
c000fd77:	58                   	pop    eax
c000fd78:	5a                   	pop    edx
c000fd79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fd81:	5b                   	pop    ebx
c000fd82:	eb ca                	jmp    c000fd4e <VgaText::setDefaultFgColour(VgaColour)>

c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fd84:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fd88:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fd8d:	83 e0 0f             	and    eax,0xf
c000fd90:	c1 e2 04             	shl    edx,0x4
c000fd93:	09 d0                	or     eax,edx
c000fd95:	c3                   	ret    

c000fd96 <VgaText::scrollScreen()>:
c000fd96:	57                   	push   edi
c000fd97:	56                   	push   esi
c000fd98:	be 01 00 00 00       	mov    esi,0x1
c000fd9d:	53                   	push   ebx
c000fd9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fda2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fda8:	31 ff                	xor    edi,edi
c000fdaa:	01 d9                	add    ecx,ebx
c000fdac:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fdaf:	83 fe 17             	cmp    esi,0x17
c000fdb2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fdb8:	75 28                	jne    c000fde2 <VgaText::scrollScreen()+0x4c>
c000fdba:	f7 c7 01 00 00 00    	test   edi,0x1
c000fdc0:	74 1c                	je     c000fdde <VgaText::scrollScreen()+0x48>
c000fdc2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000fdc9:	50                   	push   eax
c000fdca:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000fdd1:	50                   	push   eax
c000fdd2:	e8 ad ff ff ff       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000fdd7:	5a                   	pop    edx
c000fdd8:	5a                   	pop    edx
c000fdd9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000fddc:	eb 04                	jmp    c000fde2 <VgaText::scrollScreen()+0x4c>
c000fdde:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000fde2:	47                   	inc    edi
c000fde3:	41                   	inc    ecx
c000fde4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000fdea:	75 c0                	jne    c000fdac <VgaText::scrollScreen()+0x16>
c000fdec:	46                   	inc    esi
c000fded:	83 fe 18             	cmp    esi,0x18
c000fdf0:	75 b0                	jne    c000fda2 <VgaText::scrollScreen()+0xc>
c000fdf2:	39 1d 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,ebx
c000fdf8:	75 24                	jne    c000fe1e <VgaText::scrollScreen()+0x88>
c000fdfa:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000fe01:	74 08                	je     c000fe0b <VgaText::scrollScreen()+0x75>
c000fe03:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000fe09:	eb 13                	jmp    c000fe1e <VgaText::scrollScreen()+0x88>
c000fe0b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000fe11:	85 c0                	test   eax,eax
c000fe13:	74 09                	je     c000fe1e <VgaText::scrollScreen()+0x88>
c000fe15:	83 ec 0c             	sub    esp,0xc
c000fe18:	53                   	push   ebx
c000fe19:	ff d0                	call   eax
c000fe1b:	83 c4 10             	add    esp,0x10
c000fe1e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000fe22:	5b                   	pop    ebx
c000fe23:	5e                   	pop    esi
c000fe24:	5f                   	pop    edi
c000fe25:	e9 1e fe ff ff       	jmp    c000fc48 <VgaText::updateCursor()>

c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>:
c000fe2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000fe2f:	c1 e0 08             	shl    eax,0x8
c000fe32:	89 c2                	mov    edx,eax
c000fe34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000fe39:	09 d0                	or     eax,edx
c000fe3b:	c3                   	ret    

c000fe3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000fe3c:	53                   	push   ebx
c000fe3d:	83 ec 08             	sub    esp,0x8
c000fe40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fe44:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fe49:	50                   	push   eax
c000fe4a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fe4f:	50                   	push   eax
c000fe50:	e8 2f ff ff ff       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000fe55:	5a                   	pop    edx
c000fe56:	0f b6 c0             	movzx  eax,al
c000fe59:	5b                   	pop    ebx
c000fe5a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000fe5f:	50                   	push   eax
c000fe60:	53                   	push   ebx
c000fe61:	e8 c4 ff ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c000fe66:	5a                   	pop    edx
c000fe67:	5a                   	pop    edx
c000fe68:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000fe6e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000fe72:	0f b7 d2             	movzx  edx,dx
c000fe75:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fe7a:	39 0d 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,ecx
c000fe80:	75 14                	jne    c000fe96 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fe82:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fe88:	85 c0                	test   eax,eax
c000fe8a:	74 0a                	je     c000fe96 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fe8c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe90:	83 c4 08             	add    esp,0x8
c000fe93:	5b                   	pop    ebx
c000fe94:	ff e0                	jmp    eax
c000fe96:	83 c4 08             	add    esp,0x8
c000fe99:	5b                   	pop    ebx
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <VgaText::getCursorX()>:
c000fe9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fea6:	c3                   	ret    
c000fea7:	90                   	nop

c000fea8 <VgaText::getCursorY()>:
c000fea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feac:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000feb2:	c3                   	ret    
c000feb3:	90                   	nop

c000feb4 <VgaText::setCursor(int, int)>:
c000feb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000febc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fec2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fec6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000fecc:	e9 77 fd ff ff       	jmp    c000fc48 <VgaText::updateCursor()>
c000fed1:	90                   	nop

c000fed2 <VgaText::setCursorX(int)>:
c000fed2:	83 ec 10             	sub    esp,0x10
c000fed5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fed9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000fedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee3:	50                   	push   eax
c000fee4:	e8 cb ff ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c000fee9:	83 c4 1c             	add    esp,0x1c
c000feec:	c3                   	ret    
c000feed:	90                   	nop

c000feee <VgaText::setCursorY(int)>:
c000feee:	83 ec 10             	sub    esp,0x10
c000fef1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fef9:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000feff:	50                   	push   eax
c000ff00:	e8 af ff ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c000ff05:	83 c4 1c             	add    esp,0x1c
c000ff08:	c3                   	ret    
c000ff09:	90                   	nop

c000ff0a <VgaText::incrementCursor(bool)>:
c000ff0a:	56                   	push   esi
c000ff0b:	53                   	push   ebx
c000ff0c:	51                   	push   ecx
c000ff0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff15:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ff1b:	40                   	inc    eax
c000ff1c:	83 f8 50             	cmp    eax,0x50
c000ff1f:	74 08                	je     c000ff29 <VgaText::incrementCursor(bool)+0x1f>
c000ff21:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000ff27:	eb 33                	jmp    c000ff5c <VgaText::incrementCursor(bool)+0x52>
c000ff29:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ff2f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ff39:	8d 50 01             	lea    edx,[eax+0x1]
c000ff3c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ff42:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ff48:	75 12                	jne    c000ff5c <VgaText::incrementCursor(bool)+0x52>
c000ff4a:	83 ec 0c             	sub    esp,0xc
c000ff4d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ff53:	53                   	push   ebx
c000ff54:	e8 3d fe ff ff       	call   c000fd96 <VgaText::scrollScreen()>
c000ff59:	83 c4 10             	add    esp,0x10
c000ff5c:	89 f0                	mov    eax,esi
c000ff5e:	84 c0                	test   al,al
c000ff60:	74 0c                	je     c000ff6e <VgaText::incrementCursor(bool)+0x64>
c000ff62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff66:	5a                   	pop    edx
c000ff67:	5b                   	pop    ebx
c000ff68:	5e                   	pop    esi
c000ff69:	e9 da fc ff ff       	jmp    c000fc48 <VgaText::updateCursor()>
c000ff6e:	58                   	pop    eax
c000ff6f:	5b                   	pop    ebx
c000ff70:	5e                   	pop    esi
c000ff71:	c3                   	ret    

c000ff72 <VgaText::updateRAMUsageDisplay(int)>:
c000ff72:	53                   	push   ebx
c000ff73:	bb 0a 00 00 00       	mov    ebx,0xa
c000ff78:	6a 0f                	push   0xf
c000ff7a:	6a 00                	push   0x0
c000ff7c:	e8 03 fe ff ff       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff81:	5a                   	pop    edx
c000ff82:	59                   	pop    ecx
c000ff83:	0f b6 c8             	movzx  ecx,al
c000ff86:	51                   	push   ecx
c000ff87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff8b:	99                   	cdq    
c000ff8c:	f7 fb                	idiv   ebx
c000ff8e:	89 d3                	mov    ebx,edx
c000ff90:	83 c0 30             	add    eax,0x30
c000ff93:	83 c3 30             	add    ebx,0x30
c000ff96:	0f be c0             	movsx  eax,al
c000ff99:	0f b6 db             	movzx  ebx,bl
c000ff9c:	50                   	push   eax
c000ff9d:	e8 88 fe ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c000ffa2:	5a                   	pop    edx
c000ffa3:	5a                   	pop    edx
c000ffa4:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000ffaa:	51                   	push   ecx
c000ffab:	53                   	push   ebx
c000ffac:	e8 79 fe ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c000ffb1:	5b                   	pop    ebx
c000ffb2:	5a                   	pop    edx
c000ffb3:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000ffb9:	51                   	push   ecx
c000ffba:	6a 25                	push   0x25
c000ffbc:	e8 69 fe ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c000ffc1:	59                   	pop    ecx
c000ffc2:	5b                   	pop    ebx
c000ffc3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000ffc9:	5b                   	pop    ebx
c000ffca:	c3                   	ret    
c000ffcb:	90                   	nop

c000ffcc <VgaText::updateDiskUsage()>:
c000ffcc:	55                   	push   ebp
c000ffcd:	bd 10 27 00 00       	mov    ebp,0x2710
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	53                   	push   ebx
c000ffd5:	6a 0f                	push   0xf
c000ffd7:	6a 00                	push   0x0
c000ffd9:	e8 a6 fd ff ff       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffde:	5a                   	pop    edx
c000ffdf:	0f b6 d8             	movzx  ebx,al
c000ffe2:	59                   	pop    ecx
c000ffe3:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c000ffe8:	53                   	push   ebx
c000ffe9:	b9 0a 00 00 00       	mov    ecx,0xa
c000ffee:	99                   	cdq    
c000ffef:	f7 fd                	idiv   ebp
c000fff1:	99                   	cdq    
c000fff2:	f7 f9                	idiv   ecx
c000fff4:	8d 42 30             	lea    eax,[edx+0x30]
c000fff7:	0f b6 c0             	movzx  eax,al
c000fffa:	50                   	push   eax
c000fffb:	e8 2a fe ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c0010000:	5e                   	pop    esi
c0010001:	5f                   	pop    edi
c0010002:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010008:	bf e8 03 00 00       	mov    edi,0x3e8
c001000d:	53                   	push   ebx
c001000e:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c0010013:	99                   	cdq    
c0010014:	f7 ff                	idiv   edi
c0010016:	99                   	cdq    
c0010017:	f7 f9                	idiv   ecx
c0010019:	8d 42 30             	lea    eax,[edx+0x30]
c001001c:	0f b6 c0             	movzx  eax,al
c001001f:	50                   	push   eax
c0010020:	e8 05 fe ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c0010025:	5a                   	pop    edx
c0010026:	5e                   	pop    esi
c0010027:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001002d:	be 64 00 00 00       	mov    esi,0x64
c0010032:	53                   	push   ebx
c0010033:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c0010038:	99                   	cdq    
c0010039:	f7 fe                	idiv   esi
c001003b:	99                   	cdq    
c001003c:	f7 f9                	idiv   ecx
c001003e:	8d 42 30             	lea    eax,[edx+0x30]
c0010041:	0f b6 c0             	movzx  eax,al
c0010044:	50                   	push   eax
c0010045:	e8 e0 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c001004a:	5a                   	pop    edx
c001004b:	5a                   	pop    edx
c001004c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010052:	53                   	push   ebx
c0010053:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c0010058:	99                   	cdq    
c0010059:	f7 f9                	idiv   ecx
c001005b:	99                   	cdq    
c001005c:	f7 f9                	idiv   ecx
c001005e:	8d 42 30             	lea    eax,[edx+0x30]
c0010061:	0f b6 c0             	movzx  eax,al
c0010064:	50                   	push   eax
c0010065:	e8 c0 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c001006a:	5a                   	pop    edx
c001006b:	5a                   	pop    edx
c001006c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010072:	53                   	push   ebx
c0010073:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c0010078:	99                   	cdq    
c0010079:	f7 f9                	idiv   ecx
c001007b:	8d 42 30             	lea    eax,[edx+0x30]
c001007e:	0f b6 c0             	movzx  eax,al
c0010081:	50                   	push   eax
c0010082:	e8 a3 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c0010087:	5a                   	pop    edx
c0010088:	5a                   	pop    edx
c0010089:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001008f:	53                   	push   ebx
c0010090:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c0010095:	99                   	cdq    
c0010096:	f7 fd                	idiv   ebp
c0010098:	99                   	cdq    
c0010099:	f7 f9                	idiv   ecx
c001009b:	8d 42 30             	lea    eax,[edx+0x30]
c001009e:	0f b6 c0             	movzx  eax,al
c00100a1:	50                   	push   eax
c00100a2:	e8 83 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c00100a7:	5d                   	pop    ebp
c00100a8:	5a                   	pop    edx
c00100a9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00100af:	53                   	push   ebx
c00100b0:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c00100b5:	99                   	cdq    
c00100b6:	f7 ff                	idiv   edi
c00100b8:	99                   	cdq    
c00100b9:	f7 f9                	idiv   ecx
c00100bb:	8d 42 30             	lea    eax,[edx+0x30]
c00100be:	0f b6 c0             	movzx  eax,al
c00100c1:	50                   	push   eax
c00100c2:	e8 63 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c00100c7:	5f                   	pop    edi
c00100c8:	5d                   	pop    ebp
c00100c9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00100cf:	53                   	push   ebx
c00100d0:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c00100d5:	99                   	cdq    
c00100d6:	f7 fe                	idiv   esi
c00100d8:	99                   	cdq    
c00100d9:	f7 f9                	idiv   ecx
c00100db:	8d 42 30             	lea    eax,[edx+0x30]
c00100de:	0f b6 c0             	movzx  eax,al
c00100e1:	50                   	push   eax
c00100e2:	e8 43 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c00100e7:	5a                   	pop    edx
c00100e8:	5e                   	pop    esi
c00100e9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00100ef:	53                   	push   ebx
c00100f0:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c00100f5:	99                   	cdq    
c00100f6:	f7 f9                	idiv   ecx
c00100f8:	99                   	cdq    
c00100f9:	f7 f9                	idiv   ecx
c00100fb:	8d 42 30             	lea    eax,[edx+0x30]
c00100fe:	0f b6 c0             	movzx  eax,al
c0010101:	50                   	push   eax
c0010102:	e8 23 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c0010107:	5f                   	pop    edi
c0010108:	5d                   	pop    ebp
c0010109:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001010f:	53                   	push   ebx
c0010110:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c0010115:	99                   	cdq    
c0010116:	f7 f9                	idiv   ecx
c0010118:	83 c2 30             	add    edx,0x30
c001011b:	0f b6 d2             	movzx  edx,dl
c001011e:	52                   	push   edx
c001011f:	e8 06 fd ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c0010124:	5a                   	pop    edx
c0010125:	59                   	pop    ecx
c0010126:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001012c:	5b                   	pop    ebx
c001012d:	5e                   	pop    esi
c001012e:	5f                   	pop    edi
c001012f:	5d                   	pop    ebp
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <VgaText::updateTitle()>:
c0010132:	53                   	push   ebx
c0010133:	31 c0                	xor    eax,eax
c0010135:	83 ec 58             	sub    esp,0x58
c0010138:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001013c:	89 e1                	mov    ecx,esp
c001013e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010142:	40                   	inc    eax
c0010143:	83 f8 50             	cmp    eax,0x50
c0010146:	75 f6                	jne    c001013e <VgaText::updateTitle()+0xc>
c0010148:	31 c0                	xor    eax,eax
c001014a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010151:	84 db                	test   bl,bl
c0010153:	74 06                	je     c001015b <VgaText::updateTitle()+0x29>
c0010155:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010158:	40                   	inc    eax
c0010159:	eb ef                	jmp    c001014a <VgaText::updateTitle()+0x18>
c001015b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010161:	85 c0                	test   eax,eax
c0010163:	74 09                	je     c001016e <VgaText::updateTitle()+0x3c>
c0010165:	53                   	push   ebx
c0010166:	53                   	push   ebx
c0010167:	51                   	push   ecx
c0010168:	52                   	push   edx
c0010169:	ff d0                	call   eax
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	e8 59 fe ff ff       	call   c000ffcc <VgaText::updateDiskUsage()>
c0010173:	83 c4 58             	add    esp,0x58
c0010176:	5b                   	pop    ebx
c0010177:	c3                   	ret    

c0010178 <VgaText::setTitleTextColour(VgaColour)>:
c0010178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010180:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010186:	eb aa                	jmp    c0010132 <VgaText::updateTitle()>

c0010188 <VgaText::setTitleColour(VgaColour)>:
c0010188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010190:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010196:	eb 9a                	jmp    c0010132 <VgaText::updateTitle()>

c0010198 <VgaText::setTitle(char*)>:
c0010198:	53                   	push   ebx
c0010199:	83 ec 10             	sub    esp,0x10
c001019c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00101aa:	50                   	push   eax
c00101ab:	e8 f7 04 ff ff       	call   c00006a7 <strcpy>
c00101b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101b4:	83 c4 18             	add    esp,0x18
c00101b7:	5b                   	pop    ebx
c00101b8:	e9 75 ff ff ff       	jmp    c0010132 <VgaText::updateTitle()>
c00101bd:	90                   	nop

c00101be <VgaText::decrementCursor(bool)>:
c00101be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00101c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101c6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00101cc:	85 c0                	test   eax,eax
c00101ce:	74 07                	je     c00101d7 <VgaText::decrementCursor(bool)+0x19>
c00101d0:	48                   	dec    eax
c00101d1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00101d7:	84 c9                	test   cl,cl
c00101d9:	74 09                	je     c00101e4 <VgaText::decrementCursor(bool)+0x26>
c00101db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101df:	e9 64 fa ff ff       	jmp    c000fc48 <VgaText::updateCursor()>
c00101e4:	c3                   	ret    
c00101e5:	90                   	nop

c00101e6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00101e6:	53                   	push   ebx
c00101e7:	83 ec 08             	sub    esp,0x8
c00101ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00101f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00101fa:	3c 07                	cmp    al,0x7
c00101fc:	75 2a                	jne    c0010228 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00101fe:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0010203:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001020b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010213:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001021b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001021f:	83 c4 08             	add    esp,0x8
c0010222:	5b                   	pop    ebx
c0010223:	e9 10 2c 00 00       	jmp    c0012e38 <Buzzer::beep(int, int, bool)>
c0010228:	3c 0d                	cmp    al,0xd
c001022a:	75 0c                	jne    c0010238 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001022c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010236:	eb 3b                	jmp    c0010273 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010238:	3c 0a                	cmp    al,0xa
c001023a:	75 40                	jne    c001027c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001023c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010242:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001024c:	8d 50 01             	lea    edx,[eax+0x1]
c001024f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010255:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001025b:	75 12                	jne    c001026f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001025d:	83 ec 0c             	sub    esp,0xc
c0010260:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010266:	53                   	push   ebx
c0010267:	e8 2a fb ff ff       	call   c000fd96 <VgaText::scrollScreen()>
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010273:	83 c4 08             	add    esp,0x8
c0010276:	5b                   	pop    ebx
c0010277:	e9 cc f9 ff ff       	jmp    c000fc48 <VgaText::updateCursor()>
c001027c:	3c 08                	cmp    al,0x8
c001027e:	75 31                	jne    c00102b1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010280:	50                   	push   eax
c0010281:	50                   	push   eax
c0010282:	6a 01                	push   0x1
c0010284:	53                   	push   ebx
c0010285:	e8 34 ff ff ff       	call   c00101be <VgaText::decrementCursor(bool)>
c001028a:	5a                   	pop    edx
c001028b:	59                   	pop    ecx
c001028c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010292:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010298:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001029e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00102a4:	6a 20                	push   0x20
c00102a6:	53                   	push   ebx
c00102a7:	e8 90 fb ff ff       	call   c000fe3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00102ac:	83 c4 28             	add    esp,0x28
c00102af:	5b                   	pop    ebx
c00102b0:	c3                   	ret    
c00102b1:	83 ec 08             	sub    esp,0x8
c00102b4:	0f be c0             	movsx  eax,al
c00102b7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00102bd:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00102c3:	51                   	push   ecx
c00102c4:	52                   	push   edx
c00102c5:	50                   	push   eax
c00102c6:	53                   	push   ebx
c00102c7:	e8 70 fb ff ff       	call   c000fe3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00102cc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00102d0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00102d8:	83 c4 28             	add    esp,0x28
c00102db:	5b                   	pop    ebx
c00102dc:	e9 29 fc ff ff       	jmp    c000ff0a <VgaText::incrementCursor(bool)>
c00102e1:	90                   	nop

c00102e2 <VgaText::isShowingCursor()>:
c00102e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop

c00102ee <VgaText::isBlinkDisabled()>:
c00102ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00102f8:	83 f0 01             	xor    eax,0x1
c00102fb:	c3                   	ret    

c00102fc <VgaText::setCursorHeight(int)>:
c00102fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010300:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010304:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001030a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010311:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010315:	e9 48 f9 ff ff       	jmp    c000fc62 <VgaText::showCursor(bool)>

c001031a <VgaText::getCursorHeight()>:
c001031a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010324:	c3                   	ret    

c0010325 <setActiveTerminal(VgaText*)>:
c0010325:	53                   	push   ebx
c0010326:	83 ec 08             	sub    esp,0x8
c0010329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001032d:	85 db                	test   ebx,ebx
c001032f:	75 11                	jne    c0010342 <setActiveTerminal(VgaText*)+0x1d>
c0010331:	c7 44 24 10 58 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020658
c0010339:	83 c4 08             	add    esp,0x8
c001033c:	5b                   	pop    ebx
c001033d:	e9 7a c9 ff ff       	jmp    c000ccbc <panic(char const*)>
c0010342:	50                   	push   eax
c0010343:	50                   	push   eax
c0010344:	53                   	push   ebx
c0010345:	68 66 06 02 c0       	push   0xc0020666
c001034a:	e8 4f c8 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001034f:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	85 c0                	test   eax,eax
c0010359:	74 0c                	je     c0010367 <setActiveTerminal(VgaText*)+0x42>
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	50                   	push   eax
c001035f:	e8 e4 f8 ff ff       	call   c000fc48 <VgaText::updateCursor()>
c0010364:	83 c4 10             	add    esp,0x10
c0010367:	89 1d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebx
c001036d:	51                   	push   ecx
c001036e:	51                   	push   ecx
c001036f:	53                   	push   ebx
c0010370:	68 7e 06 02 c0       	push   0xc002067e
c0010375:	e8 24 c8 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001037a:	83 c4 0c             	add    esp,0xc
c001037d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010383:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010389:	53                   	push   ebx
c001038a:	e8 25 fb ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c001038f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010392:	e8 57 ff ff ff       	call   c00102ee <VgaText::isBlinkDisabled()>
c0010397:	5a                   	pop    edx
c0010398:	0f b6 c0             	movzx  eax,al
c001039b:	59                   	pop    ecx
c001039c:	50                   	push   eax
c001039d:	53                   	push   ebx
c001039e:	e8 cf f8 ff ff       	call   c000fc72 <VgaText::disableBlink(bool)>
c00103a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103a6:	e8 6f ff ff ff       	call   c001031a <VgaText::getCursorHeight()>
c00103ab:	5a                   	pop    edx
c00103ac:	59                   	pop    ecx
c00103ad:	50                   	push   eax
c00103ae:	53                   	push   ebx
c00103af:	e8 48 ff ff ff       	call   c00102fc <VgaText::setCursorHeight(int)>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00103be:	75 0a                	jne    c00103ca <setActiveTerminal(VgaText*)+0xa5>
c00103c0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00103ca:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ce:	83 c4 08             	add    esp,0x8
c00103d1:	5b                   	pop    ebx
c00103d2:	e9 1d f8 ff ff       	jmp    c000fbf4 <VgaText::load()>

c00103d7 <doTerminalCycle()>:
c00103d7:	83 ec 18             	sub    esp,0x18
c00103da:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00103df:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00103e5:	50                   	push   eax
c00103e6:	a3 80 37 02 c0       	mov    ds:0xc0023780,eax
c00103eb:	e8 35 ff ff ff       	call   c0010325 <setActiveTerminal(VgaText*)>
c00103f0:	83 c4 1c             	add    esp,0x1c
c00103f3:	c3                   	ret    

c00103f4 <VgaText::doUpdate()>:
c00103f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00103fe:	85 c0                	test   eax,eax
c0010400:	74 02                	je     c0010404 <VgaText::doUpdate()+0x10>
c0010402:	ff e0                	jmp    eax
c0010404:	c3                   	ret    
c0010405:	90                   	nop

c0010406 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010406:	55                   	push   ebp
c0010407:	57                   	push   edi
c0010408:	56                   	push   esi
c0010409:	53                   	push   ebx
c001040a:	83 ec 1c             	sub    esp,0x1c
c001040d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010411:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010416:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001041d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010420:	50                   	push   eax
c0010421:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010426:	50                   	push   eax
c0010427:	e8 58 f9 ff ff       	call   c000fd84 <VgaText::combineColours(unsigned char, unsigned char)>
c001042c:	59                   	pop    ecx
c001042d:	0f b6 c0             	movzx  eax,al
c0010430:	5b                   	pop    ebx
c0010431:	31 c9                	xor    ecx,ecx
c0010433:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001043b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001043f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010449:	0f b7 db             	movzx  ebx,bx
c001044c:	01 db                	add    ebx,ebx
c001044e:	01 fb                	add    ebx,edi
c0010450:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010453:	84 c0                	test   al,al
c0010455:	0f 84 38 01 00 00    	je     c0010593 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001045b:	3c 0d                	cmp    al,0xd
c001045d:	75 0f                	jne    c001046e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001045f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010469:	e9 1f 01 00 00       	jmp    c001058d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001046e:	3c 0a                	cmp    al,0xa
c0010470:	75 5b                	jne    c00104cd <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010472:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010478:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010482:	8d 48 01             	lea    ecx,[eax+0x1]
c0010485:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001048b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010491:	75 12                	jne    c00104a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010493:	83 ec 0c             	sub    esp,0xc
c0010496:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001049c:	55                   	push   ebp
c001049d:	e8 f4 f8 ff ff       	call   c000fd96 <VgaText::scrollScreen()>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	83 ec 0c             	sub    esp,0xc
c00104a8:	55                   	push   ebp
c00104a9:	e8 9a f7 ff ff       	call   c000fc48 <VgaText::updateCursor()>
c00104ae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00104b6:	83 c4 10             	add    esp,0x10
c00104b9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00104bf:	31 c9                	xor    ecx,ecx
c00104c1:	0f b7 db             	movzx  ebx,bx
c00104c4:	01 db                	add    ebx,ebx
c00104c6:	01 fb                	add    ebx,edi
c00104c8:	e9 c0 00 00 00       	jmp    c001058d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00104cd:	3c 08                	cmp    al,0x8
c00104cf:	75 4e                	jne    c001051f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00104d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00104d5:	53                   	push   ebx
c00104d6:	53                   	push   ebx
c00104d7:	6a 01                	push   0x1
c00104d9:	55                   	push   ebp
c00104da:	e8 df fc ff ff       	call   c00101be <VgaText::decrementCursor(bool)>
c00104df:	58                   	pop    eax
c00104e0:	5a                   	pop    edx
c00104e1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00104e7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00104ed:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00104f3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00104f9:	6a 20                	push   0x20
c00104fb:	55                   	push   ebp
c00104fc:	e8 3b f9 ff ff       	call   c000fe3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010501:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010509:	83 c4 20             	add    esp,0x20
c001050c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010512:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010516:	0f b7 db             	movzx  ebx,bx
c0010519:	01 db                	add    ebx,ebx
c001051b:	01 fb                	add    ebx,edi
c001051d:	eb 6e                	jmp    c001058d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001051f:	51                   	push   ecx
c0010520:	51                   	push   ecx
c0010521:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010525:	50                   	push   eax
c0010526:	e8 ff f8 ff ff       	call   c000fe2a <VgaText::combineCharAndColour(char, unsigned char)>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	66 89 03             	mov    WORD PTR [ebx],ax
c0010531:	39 2d 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,ebp
c0010537:	75 2a                	jne    c0010563 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010539:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001053f:	85 c0                	test   eax,eax
c0010541:	74 20                	je     c0010563 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010543:	52                   	push   edx
c0010544:	52                   	push   edx
c0010545:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001054b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010551:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010555:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010559:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001055c:	51                   	push   ecx
c001055d:	55                   	push   ebp
c001055e:	ff d0                	call   eax
c0010560:	83 c4 20             	add    esp,0x20
c0010563:	83 c3 02             	add    ebx,0x2
c0010566:	50                   	push   eax
c0010567:	50                   	push   eax
c0010568:	6a 00                	push   0x0
c001056a:	55                   	push   ebp
c001056b:	e8 9a f9 ff ff       	call   c000ff0a <VgaText::incrementCursor(bool)>
c0010570:	83 c4 10             	add    esp,0x10
c0010573:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001057a:	75 0f                	jne    c001058b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001057c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010584:	0f b7 db             	movzx  ebx,bx
c0010587:	01 db                	add    ebx,ebx
c0010589:	01 fb                	add    ebx,edi
c001058b:	b1 01                	mov    cl,0x1
c001058d:	46                   	inc    esi
c001058e:	e9 bd fe ff ff       	jmp    c0010450 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010593:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010597:	83 ec 0c             	sub    esp,0xc
c001059a:	55                   	push   ebp
c001059b:	e8 a8 f6 ff ff       	call   c000fc48 <VgaText::updateCursor()>
c00105a0:	83 c4 10             	add    esp,0x10
c00105a3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00105a7:	84 c9                	test   cl,cl
c00105a9:	74 0c                	je     c00105b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00105ab:	83 ec 0c             	sub    esp,0xc
c00105ae:	55                   	push   ebp
c00105af:	e8 40 fe ff ff       	call   c00103f4 <VgaText::doUpdate()>
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00105be:	83 c4 1c             	add    esp,0x1c
c00105c1:	5b                   	pop    ebx
c00105c2:	5e                   	pop    esi
c00105c3:	5f                   	pop    edi
c00105c4:	5d                   	pop    ebp
c00105c5:	c3                   	ret    

c00105c6 <VgaText::clearScreen()>:
c00105c6:	57                   	push   edi
c00105c7:	56                   	push   esi
c00105c8:	31 f6                	xor    esi,esi
c00105ca:	53                   	push   ebx
c00105cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105cf:	52                   	push   edx
c00105d0:	6a 00                	push   0x0
c00105d2:	6a 00                	push   0x0
c00105d4:	53                   	push   ebx
c00105d5:	e8 da f8 ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c00105da:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00105e1:	83 c4 10             	add    esp,0x10
c00105e4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00105ea:	7e 26                	jle    c0010612 <VgaText::clearScreen()+0x4c>
c00105ec:	31 ff                	xor    edi,edi
c00105ee:	50                   	push   eax
c00105ef:	50                   	push   eax
c00105f0:	56                   	push   esi
c00105f1:	57                   	push   edi
c00105f2:	47                   	inc    edi
c00105f3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00105f9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00105ff:	6a 20                	push   0x20
c0010601:	53                   	push   ebx
c0010602:	e8 35 f8 ff ff       	call   c000fe3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010607:	83 c4 20             	add    esp,0x20
c001060a:	83 ff 50             	cmp    edi,0x50
c001060d:	75 df                	jne    c00105ee <VgaText::clearScreen()+0x28>
c001060f:	46                   	inc    esi
c0010610:	eb d2                	jmp    c00105e4 <VgaText::clearScreen()+0x1e>
c0010612:	83 ec 0c             	sub    esp,0xc
c0010615:	53                   	push   ebx
c0010616:	e8 d9 fd ff ff       	call   c00103f4 <VgaText::doUpdate()>
c001061b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010622:	83 c4 10             	add    esp,0x10
c0010625:	5b                   	pop    ebx
c0010626:	5e                   	pop    esi
c0010627:	5f                   	pop    edi
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <VgaText::putchar(char)>:
c001062a:	56                   	push   esi
c001062b:	53                   	push   ebx
c001062c:	83 ec 14             	sub    esp,0x14
c001062f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010633:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010637:	3c 5b                	cmp    al,0x5b
c0010639:	75 21                	jne    c001065c <VgaText::putchar(char)+0x32>
c001063b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010642:	74 28                	je     c001066c <VgaText::putchar(char)+0x42>
c0010644:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001064d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010657:	e9 e2 00 00 00       	jmp    c001073e <VgaText::putchar(char)+0x114>
c001065c:	3c 1b                	cmp    al,0x1b
c001065e:	75 0c                	jne    c001066c <VgaText::putchar(char)+0x42>
c0010660:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010667:	e9 d2 00 00 00       	jmp    c001073e <VgaText::putchar(char)+0x114>
c001066c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010672:	84 c9                	test   cl,cl
c0010674:	0f 84 ab 00 00 00    	je     c0010725 <VgaText::putchar(char)+0xfb>
c001067a:	8d 50 c0             	lea    edx,[eax-0x40]
c001067d:	80 fa 3e             	cmp    dl,0x3e
c0010680:	0f 87 82 00 00 00    	ja     c0010708 <VgaText::putchar(char)+0xde>
c0010686:	3c 6d                	cmp    al,0x6d
c0010688:	75 4d                	jne    c00106d7 <VgaText::putchar(char)+0xad>
c001068a:	31 f6                	xor    esi,esi
c001068c:	31 d2                	xor    edx,edx
c001068e:	31 c0                	xor    eax,eax
c0010690:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010696:	7e 30                	jle    c00106c8 <VgaText::putchar(char)+0x9e>
c0010698:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00106a0:	80 fa 3b             	cmp    dl,0x3b
c00106a3:	75 17                	jne    c00106bc <VgaText::putchar(char)+0x92>
c00106a5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00106a9:	50                   	push   eax
c00106aa:	53                   	push   ebx
c00106ab:	e8 fc f5 ff ff       	call   c000fcac <VgaText::doANSI_SGR(int)>
c00106b0:	59                   	pop    ecx
c00106b1:	31 d2                	xor    edx,edx
c00106b3:	58                   	pop    eax
c00106b4:	31 c0                	xor    eax,eax
c00106b6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00106ba:	eb 09                	jmp    c00106c5 <VgaText::putchar(char)+0x9b>
c00106bc:	6b c0 0a             	imul   eax,eax,0xa
c00106bf:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00106c3:	88 ca                	mov    dl,cl
c00106c5:	46                   	inc    esi
c00106c6:	eb c8                	jmp    c0010690 <VgaText::putchar(char)+0x66>
c00106c8:	84 d2                	test   dl,dl
c00106ca:	74 31                	je     c00106fd <VgaText::putchar(char)+0xd3>
c00106cc:	50                   	push   eax
c00106cd:	53                   	push   ebx
c00106ce:	e8 d9 f5 ff ff       	call   c000fcac <VgaText::doANSI_SGR(int)>
c00106d3:	58                   	pop    eax
c00106d4:	5a                   	pop    edx
c00106d5:	eb 26                	jmp    c00106fd <VgaText::putchar(char)+0xd3>
c00106d7:	3c 4a                	cmp    al,0x4a
c00106d9:	75 22                	jne    c00106fd <VgaText::putchar(char)+0xd3>
c00106db:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00106e2:	75 19                	jne    c00106fd <VgaText::putchar(char)+0xd3>
c00106e4:	83 ec 0c             	sub    esp,0xc
c00106e7:	53                   	push   ebx
c00106e8:	e8 d9 fe ff ff       	call   c00105c6 <VgaText::clearScreen()>
c00106ed:	83 c4 0c             	add    esp,0xc
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	53                   	push   ebx
c00106f5:	e8 ba f7 ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010706:	eb 36                	jmp    c001073e <VgaText::putchar(char)+0x114>
c0010708:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001070e:	83 fa 0e             	cmp    edx,0xe
c0010711:	7f 2b                	jg     c001073e <VgaText::putchar(char)+0x114>
c0010713:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010716:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001071c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010723:	eb 19                	jmp    c001073e <VgaText::putchar(char)+0x114>
c0010725:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001072b:	0f be c0             	movsx  eax,al
c001072e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010734:	50                   	push   eax
c0010735:	53                   	push   ebx
c0010736:	e8 ab fa ff ff       	call   c00101e6 <VgaText::putchar(char, VgaColour, VgaColour)>
c001073b:	83 c4 10             	add    esp,0x10
c001073e:	83 c4 14             	add    esp,0x14
c0010741:	5b                   	pop    ebx
c0010742:	5e                   	pop    esi
c0010743:	c3                   	ret    

c0010744 <VgaText::puts(char const*)>:
c0010744:	53                   	push   ebx
c0010745:	83 ec 08             	sub    esp,0x8
c0010748:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001074c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001074f:	84 c0                	test   al,al
c0010751:	74 12                	je     c0010765 <VgaText::puts(char const*)+0x21>
c0010753:	43                   	inc    ebx
c0010754:	51                   	push   ecx
c0010755:	51                   	push   ecx
c0010756:	50                   	push   eax
c0010757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075b:	e8 ca fe ff ff       	call   c001062a <VgaText::putchar(char)>
c0010760:	83 c4 10             	add    esp,0x10
c0010763:	eb e7                	jmp    c001074c <VgaText::puts(char const*)+0x8>
c0010765:	83 c4 08             	add    esp,0x8
c0010768:	5b                   	pop    ebx
c0010769:	c3                   	ret    

c001076a <VgaText::putx(unsigned int)>:
c001076a:	57                   	push   edi
c001076b:	b9 11 00 00 00       	mov    ecx,0x11
c0010770:	56                   	push   esi
c0010771:	be 9a 06 02 c0       	mov    esi,0xc002069a
c0010776:	53                   	push   ebx
c0010777:	83 ec 20             	sub    esp,0x20
c001077a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001077e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010782:	fc                   	cld    
c0010783:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010785:	be 08 00 00 00       	mov    esi,0x8
c001078a:	50                   	push   eax
c001078b:	50                   	push   eax
c001078c:	89 d8                	mov    eax,ebx
c001078e:	c1 e3 04             	shl    ebx,0x4
c0010791:	c1 e8 1c             	shr    eax,0x1c
c0010794:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010799:	50                   	push   eax
c001079a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001079e:	e8 87 fe ff ff       	call   c001062a <VgaText::putchar(char)>
c00107a3:	83 c4 10             	add    esp,0x10
c00107a6:	4e                   	dec    esi
c00107a7:	75 e1                	jne    c001078a <VgaText::putx(unsigned int)+0x20>
c00107a9:	83 c4 20             	add    esp,0x20
c00107ac:	5b                   	pop    ebx
c00107ad:	5e                   	pop    esi
c00107ae:	5f                   	pop    edi
c00107af:	c3                   	ret    

c00107b0 <VgaText::VgaText(char const*)>:
c00107b0:	57                   	push   edi
c00107b1:	56                   	push   esi
c00107b2:	53                   	push   ebx
c00107b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b7:	83 ec 08             	sub    esp,0x8
c00107ba:	6a 00                	push   0x0
c00107bc:	50                   	push   eax
c00107bd:	e8 b8 05 00 00       	call   c0010d7a <UnixFile::UnixFile(int)>
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	ba 00 07 02 c0       	mov    edx,0xc0020700
c00107ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ce:	89 10                	mov    DWORD PTR [eax],edx
c00107d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00107de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00107ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00107f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010814:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010838:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001083e:	bb 60 37 02 c0       	mov    ebx,0xc0023760
c0010843:	b8 08 00 00 00       	mov    eax,0x8
c0010848:	fc                   	cld    
c0010849:	89 d7                	mov    edi,edx
c001084b:	89 de                	mov    esi,ebx
c001084d:	89 c1                	mov    ecx,eax
c001084f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010855:	05 1e 10 00 00       	add    eax,0x101e
c001085a:	83 ec 08             	sub    esp,0x8
c001085d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010861:	50                   	push   eax
c0010862:	e8 40 fe fe ff       	call   c00006a7 <strcpy>
c0010867:	83 c4 10             	add    esp,0x10
c001086a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087c:	83 c0 0c             	add    eax,0xc
c001087f:	83 ec 04             	sub    esp,0x4
c0010882:	68 00 0f 00 00       	push   0xf00
c0010887:	6a 00                	push   0x0
c0010889:	50                   	push   eax
c001088a:	e8 79 fd fe ff       	call   c0000608 <memset>
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	83 ec 04             	sub    esp,0x4
c0010895:	6a 00                	push   0x0
c0010897:	6a 07                	push   0x7
c0010899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001089d:	e8 c2 f4 ff ff       	call   c000fd64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	83 ec 08             	sub    esp,0x8
c00108a8:	6a 02                	push   0x2
c00108aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ae:	e8 49 fa ff ff       	call   c00102fc <VgaText::setCursorHeight(int)>
c00108b3:	83 c4 10             	add    esp,0x10
c00108b6:	83 ec 04             	sub    esp,0x4
c00108b9:	6a 00                	push   0x0
c00108bb:	6a 00                	push   0x0
c00108bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c1:	e8 ee f5 ff ff       	call   c000feb4 <VgaText::setCursor(int, int)>
c00108c6:	83 c4 10             	add    esp,0x10
c00108c9:	83 ec 08             	sub    esp,0x8
c00108cc:	6a 01                	push   0x1
c00108ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d2:	e8 8b f3 ff ff       	call   c000fc62 <VgaText::showCursor(bool)>
c00108d7:	83 c4 10             	add    esp,0x10
c00108da:	83 ec 08             	sub    esp,0x8
c00108dd:	6a 01                	push   0x1
c00108df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e3:	e8 8a f3 ff ff       	call   c000fc72 <VgaText::disableBlink(bool)>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	83 ec 0c             	sub    esp,0xc
c00108ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f2:	e8 cf fc ff ff       	call   c00105c6 <VgaText::clearScreen()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010909:	05 9e 10 00 00       	add    eax,0x109e
c001090e:	83 ec 04             	sub    esp,0x4
c0010911:	68 96 00 00 00       	push   0x96
c0010916:	6a 00                	push   0x0
c0010918:	50                   	push   eax
c0010919:	e8 ea fc fe ff       	call   c0000608 <memset>
c001091e:	83 c4 10             	add    esp,0x10
c0010921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010925:	05 34 11 00 00       	add    eax,0x1134
c001092a:	83 ec 04             	sub    esp,0x4
c001092d:	68 2c 01 00 00       	push   0x12c
c0010932:	6a 00                	push   0x0
c0010934:	50                   	push   eax
c0010935:	e8 ce fc fe ff       	call   c0000608 <memset>
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	90                   	nop
c001093e:	5b                   	pop    ebx
c001093f:	5e                   	pop    esi
c0010940:	5f                   	pop    edi
c0010941:	c3                   	ret    

c0010942 <VgaText::receiveKey(unsigned char)>:
c0010942:	55                   	push   ebp
c0010943:	57                   	push   edi
c0010944:	56                   	push   esi
c0010945:	53                   	push   ebx
c0010946:	83 ec 1c             	sub    esp,0x1c
c0010949:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001094d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010951:	84 db                	test   bl,bl
c0010953:	0f 84 c9 00 00 00    	je     c0010a22 <VgaText::receiveKey(unsigned char)+0xe0>
c0010959:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001095f:	80 fb 08             	cmp    bl,0x8
c0010962:	75 2c                	jne    c0010990 <VgaText::receiveKey(unsigned char)+0x4e>
c0010964:	83 ec 0c             	sub    esp,0xc
c0010967:	57                   	push   edi
c0010968:	e8 b8 fc fe ff       	call   c0000625 <strlen>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	85 c0                	test   eax,eax
c0010972:	74 41                	je     c00109b5 <VgaText::receiveKey(unsigned char)+0x73>
c0010974:	50                   	push   eax
c0010975:	50                   	push   eax
c0010976:	6a 08                	push   0x8
c0010978:	56                   	push   esi
c0010979:	e8 ac fc ff ff       	call   c001062a <VgaText::putchar(char)>
c001097e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010981:	e8 9f fc fe ff       	call   c0000625 <strlen>
c0010986:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001098e:	eb 22                	jmp    c00109b2 <VgaText::receiveKey(unsigned char)+0x70>
c0010990:	0f be c3             	movsx  eax,bl
c0010993:	52                   	push   edx
c0010994:	52                   	push   edx
c0010995:	50                   	push   eax
c0010996:	56                   	push   esi
c0010997:	e8 8e fc ff ff       	call   c001062a <VgaText::putchar(char)>
c001099c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109a0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109a5:	59                   	pop    ecx
c00109a6:	5d                   	pop    ebp
c00109a7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109ab:	50                   	push   eax
c00109ac:	57                   	push   edi
c00109ad:	e8 ac fd fe ff       	call   c000075e <strcat>
c00109b2:	83 c4 10             	add    esp,0x10
c00109b5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00109bc:	75 05                	jne    c00109c3 <VgaText::receiveKey(unsigned char)+0x81>
c00109be:	80 fb 0a             	cmp    bl,0xa
c00109c1:	75 53                	jne    c0010a16 <VgaText::receiveKey(unsigned char)+0xd4>
c00109c3:	83 ec 0c             	sub    esp,0xc
c00109c6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00109cc:	53                   	push   ebx
c00109cd:	e8 53 fc fe ff       	call   c0000625 <strlen>
c00109d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109d5:	89 c5                	mov    ebp,eax
c00109d7:	e8 49 fc fe ff       	call   c0000625 <strlen>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00109e3:	3d 2c 01 00 00       	cmp    eax,0x12c
c00109e8:	76 10                	jbe    c00109fa <VgaText::receiveKey(unsigned char)+0xb8>
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	68 ab 06 02 c0       	push   0xc00206ab
c00109f2:	e8 c5 c2 ff ff       	call   c000ccbc <panic(char const*)>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	50                   	push   eax
c00109fb:	50                   	push   eax
c00109fc:	57                   	push   edi
c00109fd:	53                   	push   ebx
c00109fe:	e8 5b fd fe ff       	call   c000075e <strcat>
c0010a03:	83 c4 0c             	add    esp,0xc
c0010a06:	68 96 00 00 00       	push   0x96
c0010a0b:	6a 00                	push   0x0
c0010a0d:	57                   	push   edi
c0010a0e:	e8 f5 fb fe ff       	call   c0000608 <memset>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	56                   	push   esi
c0010a1a:	e8 d5 f9 ff ff       	call   c00103f4 <VgaText::doUpdate()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 c4 1c             	add    esp,0x1c
c0010a25:	5b                   	pop    ebx
c0010a26:	5e                   	pop    esi
c0010a27:	5f                   	pop    edi
c0010a28:	5d                   	pop    ebp
c0010a29:	c3                   	ret    

c0010a2a <VgaText::write(unsigned long long, void*, int*)>:
c0010a2a:	55                   	push   ebp
c0010a2b:	57                   	push   edi
c0010a2c:	56                   	push   esi
c0010a2d:	53                   	push   ebx
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a35:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a3d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010a44:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a47:	39 eb                	cmp    ebx,ebp
c0010a49:	74 13                	je     c0010a5e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a4b:	43                   	inc    ebx
c0010a4c:	50                   	push   eax
c0010a4d:	50                   	push   eax
c0010a4e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a52:	50                   	push   eax
c0010a53:	56                   	push   esi
c0010a54:	e8 d1 fb ff ff       	call   c001062a <VgaText::putchar(char)>
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	eb e9                	jmp    c0010a47 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010a68:	56                   	push   esi
c0010a69:	e8 86 f9 ff ff       	call   c00103f4 <VgaText::doUpdate()>
c0010a6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010a72:	89 38                	mov    DWORD PTR [eax],edi
c0010a74:	83 c4 1c             	add    esp,0x1c
c0010a77:	31 c0                	xor    eax,eax
c0010a79:	5b                   	pop    ebx
c0010a7a:	5e                   	pop    esi
c0010a7b:	5f                   	pop    edi
c0010a7c:	5d                   	pop    ebp
c0010a7d:	c3                   	ret    

c0010a7e <newTerminal(char*)>:
c0010a7e:	83 ec 28             	sub    esp,0x28
c0010a81:	68 60 12 00 00       	push   0x1260
c0010a86:	e8 c3 16 00 00       	call   c001214e <operator new(unsigned long)>
c0010a8b:	5a                   	pop    edx
c0010a8c:	59                   	pop    ecx
c0010a8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010a91:	50                   	push   eax
c0010a92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010a96:	e8 15 fd ff ff       	call   c00107b0 <VgaText::VgaText(char const*)>
c0010a9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a9f:	83 c4 2c             	add    esp,0x2c
c0010aa2:	c3                   	ret    
c0010aa3:	90                   	nop

c0010aa4 <TSS::TSS()>:
c0010aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aaf:	90                   	nop
c0010ab0:	c3                   	ret    
c0010ab1:	90                   	nop

c0010ab2 <TSS::setESP(unsigned long)>:
c0010ab2:	55                   	push   ebp
c0010ab3:	89 e5                	mov    ebp,esp
c0010ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010abb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010abe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ac1:	90                   	nop
c0010ac2:	5d                   	pop    ebp
c0010ac3:	c3                   	ret    

c0010ac4 <TSS::flush()>:
c0010ac4:	55                   	push   ebp
c0010ac5:	89 e5                	mov    ebp,esp
c0010ac7:	83 ec 10             	sub    esp,0x10
c0010aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010acf:	83 c8 03             	or     eax,0x3
c0010ad2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010ad6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ada:	66 89 d0             	mov    ax,dx
c0010add:	0f 00 d8             	ltr    ax
c0010ae0:	90                   	nop
c0010ae1:	c9                   	leave  
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <TSS::setup(unsigned long, unsigned long)>:
c0010ae4:	55                   	push   ebp
c0010ae5:	89 e5                	mov    ebp,esp
c0010ae7:	53                   	push   ebx
c0010ae8:	83 ec 14             	sub    esp,0x14
c0010aeb:	83 ec 0c             	sub    esp,0xc
c0010aee:	6a 68                	push   0x68
c0010af0:	e8 a4 c6 ff ff       	call   c000d199 <malloc>
c0010af5:	83 c4 10             	add    esp,0x10
c0010af8:	89 c2                	mov    edx,eax
c0010afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010afd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b06:	83 ec 04             	sub    esp,0x4
c0010b09:	6a 68                	push   0x68
c0010b0b:	6a 00                	push   0x0
c0010b0d:	50                   	push   eax
c0010b0e:	e8 f5 fa fe ff       	call   c0000608 <memset>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b1c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b28:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b40:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b4c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b58:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b64:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b70:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010b73:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b92:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010b95:	e8 bf d6 00 00       	call   c001e259 <CPU::readCR3()>
c0010b9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba3:	83 ec 08             	sub    esp,0x8
c0010ba6:	50                   	push   eax
c0010ba7:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010baa:	50                   	push   eax
c0010bab:	e8 a6 b8 ff ff       	call   c000c456 <GDTEntry::setBase(unsigned int)>
c0010bb0:	83 c4 10             	add    esp,0x10
c0010bb3:	83 ec 08             	sub    esp,0x8
c0010bb6:	6a 68                	push   0x68
c0010bb8:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010bbb:	50                   	push   eax
c0010bbc:	e8 b1 b8 ff ff       	call   c000c472 <GDTEntry::setLimit(unsigned int)>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010bc8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010bcb:	83 e0 0f             	and    eax,0xf
c0010bce:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010bd1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010bd4:	83 c8 40             	or     eax,0x40
c0010bd7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010bda:	e8 c7 62 00 00       	call   c0016ea6 <thisCPU()>
c0010bdf:	05 78 01 00 00       	add    eax,0x178
c0010be4:	83 ec 04             	sub    esp,0x4
c0010be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010bea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010bed:	50                   	push   eax
c0010bee:	e8 b3 b8 ff ff       	call   c000c4a6 <GDT::addEntry(GDTEntry)>
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	89 c2                	mov    edx,eax
c0010bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfb:	89 10                	mov    DWORD PTR [eax],edx
c0010bfd:	e8 a4 62 00 00       	call   c0016ea6 <thisCPU()>
c0010c02:	05 78 01 00 00       	add    eax,0x178
c0010c07:	83 ec 0c             	sub    esp,0xc
c0010c0a:	50                   	push   eax
c0010c0b:	e8 da b8 ff ff       	call   c000c4ea <GDT::flush()>
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c18:	83 ec 08             	sub    esp,0x8
c0010c1b:	50                   	push   eax
c0010c1c:	68 14 07 02 c0       	push   0xc0020714
c0010c21:	e8 78 bf ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0010c26:	83 c4 10             	add    esp,0x10
c0010c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c2e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010c31:	c9                   	leave  
c0010c32:	c3                   	ret    
c0010c33:	90                   	nop

c0010c34 <ReservedFilename::isAtty()>:
c0010c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c3b:	31 c0                	xor    eax,eax
c0010c3d:	83 fa 08             	cmp    edx,0x8
c0010c40:	74 06                	je     c0010c48 <ReservedFilename::isAtty()+0x14>
c0010c42:	83 fa 06             	cmp    edx,0x6
c0010c45:	0f 94 c0             	sete   al
c0010c48:	c3                   	ret    
c0010c49:	90                   	nop

c0010c4a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c4a:	55                   	push   ebp
c0010c4b:	57                   	push   edi
c0010c4c:	56                   	push   esi
c0010c4d:	53                   	push   ebx
c0010c4e:	83 ec 0c             	sub    esp,0xc
c0010c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010c59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010c60:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010c64:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010c68:	83 f8 08             	cmp    eax,0x8
c0010c6b:	75 08                	jne    c0010c75 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010c6d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010c73:	eb 5c                	jmp    c0010cd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010c75:	83 f8 06             	cmp    eax,0x6
c0010c78:	75 3d                	jne    c0010cb7 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	68 32 07 02 c0       	push   0xc0020732
c0010c82:	e8 17 bf ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0010c87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010c8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c97:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010c9b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010c9f:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010ca3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010ca7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010cab:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010cae:	83 c4 1c             	add    esp,0x1c
c0010cb1:	5b                   	pop    ebx
c0010cb2:	5e                   	pop    esi
c0010cb3:	5f                   	pop    edi
c0010cb4:	5d                   	pop    ebp
c0010cb5:	ff e0                	jmp    eax
c0010cb7:	89 c2                	mov    edx,eax
c0010cb9:	83 e2 fd             	and    edx,0xfffffffd
c0010cbc:	83 fa 05             	cmp    edx,0x5
c0010cbf:	74 ac                	je     c0010c6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010cc1:	8d 50 f5             	lea    edx,[eax-0xb]
c0010cc4:	83 fa 08             	cmp    edx,0x8
c0010cc7:	76 a4                	jbe    c0010c6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010cc9:	83 e8 15             	sub    eax,0x15
c0010ccc:	83 f8 08             	cmp    eax,0x8
c0010ccf:	76 9c                	jbe    c0010c6d <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010cd1:	83 c4 0c             	add    esp,0xc
c0010cd4:	31 c0                	xor    eax,eax
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	5d                   	pop    ebp
c0010cda:	c3                   	ret    
c0010cdb:	90                   	nop

c0010cdc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cdc:	55                   	push   ebp
c0010cdd:	57                   	push   edi
c0010cde:	56                   	push   esi
c0010cdf:	53                   	push   ebx
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010cf2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010cf6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cfa:	83 f8 08             	cmp    eax,0x8
c0010cfd:	75 08                	jne    c0010d07 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010cff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010d05:	eb 60                	jmp    c0010d67 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010d07:	83 f8 06             	cmp    eax,0x6
c0010d0a:	75 3d                	jne    c0010d49 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	68 3f 07 02 c0       	push   0xc002073f
c0010d14:	e8 85 be ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0010d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d29:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010d2d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010d31:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010d35:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010d39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d3d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0010d40:	83 c4 1c             	add    esp,0x1c
c0010d43:	5b                   	pop    ebx
c0010d44:	5e                   	pop    esi
c0010d45:	5f                   	pop    edi
c0010d46:	5d                   	pop    ebp
c0010d47:	ff e0                	jmp    eax
c0010d49:	83 f8 05             	cmp    eax,0x5
c0010d4c:	75 04                	jne    c0010d52 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0010d4e:	89 33                	mov    DWORD PTR [ebx],esi
c0010d50:	eb 15                	jmp    c0010d67 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010d52:	83 f8 07             	cmp    eax,0x7
c0010d55:	74 a8                	je     c0010cff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d57:	8d 50 f5             	lea    edx,[eax-0xb]
c0010d5a:	83 fa 08             	cmp    edx,0x8
c0010d5d:	76 a0                	jbe    c0010cff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d5f:	83 e8 15             	sub    eax,0x15
c0010d62:	83 f8 08             	cmp    eax,0x8
c0010d65:	76 98                	jbe    c0010cff <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d67:	83 c4 0c             	add    esp,0xc
c0010d6a:	31 c0                	xor    eax,eax
c0010d6c:	5b                   	pop    ebx
c0010d6d:	5e                   	pop    esi
c0010d6e:	5f                   	pop    edi
c0010d6f:	5d                   	pop    ebp
c0010d70:	c3                   	ret    
c0010d71:	90                   	nop

c0010d72 <UnixFile::getFileDescriptor()>:
c0010d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d79:	c3                   	ret    

c0010d7a <UnixFile::UnixFile(int)>:
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	ba a4 07 02 c0       	mov    edx,0xc00207a4
c0010d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d86:	89 10                	mov    DWORD PTR [eax],edx
c0010d88:	a1 60 21 02 c0       	mov    eax,ds:0xc0022160
c0010d8d:	8d 50 01             	lea    edx,[eax+0x1]
c0010d90:	89 15 60 21 02 c0    	mov    DWORD PTR ds:0xc0022160,edx
c0010d96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010d9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d9d:	83 ec 08             	sub    esp,0x8
c0010da0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010da4:	68 90 37 02 c0       	push   0xc0023790
c0010da9:	e8 2a d8 00 00       	call   c001e5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	90                   	nop
c0010db2:	83 c4 0c             	add    esp,0xc
c0010db5:	c3                   	ret    

c0010db6 <ReservedFilename::ReservedFilename(int)>:
c0010db6:	83 ec 0c             	sub    esp,0xc
c0010db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbd:	83 ec 08             	sub    esp,0x8
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	50                   	push   eax
c0010dc5:	e8 b0 ff ff ff       	call   c0010d7a <UnixFile::UnixFile(int)>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	ba c0 07 02 c0       	mov    edx,0xc00207c0
c0010dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd6:	89 10                	mov    DWORD PTR [eax],edx
c0010dd8:	90                   	nop
c0010dd9:	83 c4 0c             	add    esp,0xc
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <UnixFile::~UnixFile()>:
c0010dde:	83 ec 1c             	sub    esp,0x1c
c0010de1:	ba a4 07 02 c0       	mov    edx,0xc00207a4
c0010de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dea:	89 10                	mov    DWORD PTR [eax],edx
c0010dec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010df4:	83 ec 0c             	sub    esp,0xc
c0010df7:	68 90 37 02 c0       	push   0xc0023790
c0010dfc:	e8 25 d7 00 00       	call   c001e526 <LinkedList<UnixFile>::getFirstElement()>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e08:	83 ec 0c             	sub    esp,0xc
c0010e0b:	68 90 37 02 c0       	push   0xc0023790
c0010e10:	e8 19 d7 00 00       	call   c001e52e <LinkedList<UnixFile>::removeFirst()>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e1c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010e20:	74 3d                	je     c0010e5f <UnixFile::~UnixFile()+0x81>
c0010e22:	83 ec 08             	sub    esp,0x8
c0010e25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e29:	68 90 37 02 c0       	push   0xc0023790
c0010e2e:	e8 a5 d7 00 00       	call   c001e5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e3a:	8d 50 01             	lea    edx,[eax+0x1]
c0010e3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010e41:	3d 88 13 00 00       	cmp    eax,0x1388
c0010e46:	0f 94 c0             	sete   al
c0010e49:	84 c0                	test   al,al
c0010e4b:	74 a7                	je     c0010df4 <UnixFile::~UnixFile()+0x16>
c0010e4d:	83 ec 0c             	sub    esp,0xc
c0010e50:	68 7c 07 02 c0       	push   0xc002077c
c0010e55:	e8 62 be ff ff       	call   c000ccbc <panic(char const*)>
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	eb 95                	jmp    c0010df4 <UnixFile::~UnixFile()+0x16>
c0010e5f:	90                   	nop
c0010e60:	83 c4 1c             	add    esp,0x1c
c0010e63:	c3                   	ret    

c0010e64 <UnixFile::~UnixFile()>:
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	83 ec 0c             	sub    esp,0xc
c0010e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e6e:	e8 6b ff ff ff       	call   c0010dde <UnixFile::~UnixFile()>
c0010e73:	83 c4 10             	add    esp,0x10
c0010e76:	83 ec 08             	sub    esp,0x8
c0010e79:	6a 0c                	push   0xc
c0010e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7f:	e8 d9 12 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	83 c4 0c             	add    esp,0xc
c0010e8a:	c3                   	ret    
c0010e8b:	90                   	nop

c0010e8c <ReservedFilename::~ReservedFilename()>:
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	ba c0 07 02 c0       	mov    edx,0xc00207c0
c0010e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e98:	89 10                	mov    DWORD PTR [eax],edx
c0010e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9e:	83 ec 0c             	sub    esp,0xc
c0010ea1:	50                   	push   eax
c0010ea2:	e8 37 ff ff ff       	call   c0010dde <UnixFile::~UnixFile()>
c0010ea7:	83 c4 10             	add    esp,0x10
c0010eaa:	90                   	nop
c0010eab:	83 c4 0c             	add    esp,0xc
c0010eae:	c3                   	ret    
c0010eaf:	90                   	nop

c0010eb0 <ReservedFilename::~ReservedFilename()>:
c0010eb0:	83 ec 0c             	sub    esp,0xc
c0010eb3:	83 ec 0c             	sub    esp,0xc
c0010eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eba:	e8 cd ff ff ff       	call   c0010e8c <ReservedFilename::~ReservedFilename()>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	83 ec 08             	sub    esp,0x8
c0010ec5:	6a 0c                	push   0xc
c0010ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecb:	e8 8d 12 00 00       	call   c001215d <operator delete(void*, unsigned long)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	83 c4 0c             	add    esp,0xc
c0010ed6:	c3                   	ret    

c0010ed7 <getFromFileDescriptor(int)>:
c0010ed7:	83 ec 18             	sub    esp,0x18
c0010eda:	68 90 37 02 c0       	push   0xc0023790
c0010edf:	e8 42 d6 00 00       	call   c001e526 <LinkedList<UnixFile>::getFirstElement()>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	85 c0                	test   eax,eax
c0010ee9:	74 18                	je     c0010f03 <getFromFileDescriptor(int)+0x2c>
c0010eeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010eef:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0010ef2:	74 0f                	je     c0010f03 <getFromFileDescriptor(int)+0x2c>
c0010ef4:	52                   	push   edx
c0010ef5:	52                   	push   edx
c0010ef6:	50                   	push   eax
c0010ef7:	68 90 37 02 c0       	push   0xc0023790
c0010efc:	e8 cf d6 00 00       	call   c001e5d0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0010f01:	eb e1                	jmp    c0010ee4 <getFromFileDescriptor(int)+0xd>
c0010f03:	83 c4 0c             	add    esp,0xc
c0010f06:	c3                   	ret    

c0010f07 <__static_initialization_and_destruction_0(int, int)>:
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0010f0f:	75 34                	jne    c0010f45 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010f11:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0010f19:	75 2a                	jne    c0010f45 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010f1b:	83 ec 0c             	sub    esp,0xc
c0010f1e:	68 90 37 02 c0       	push   0xc0023790
c0010f23:	e8 a6 d5 00 00       	call   c001e4ce <LinkedList<UnixFile>::LinkedList()>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	83 ec 04             	sub    esp,0x4
c0010f2e:	68 e4 20 02 c0       	push   0xc00220e4
c0010f33:	68 90 37 02 c0       	push   0xc0023790
c0010f38:	68 cc e4 01 c0       	push   0xc001e4cc
c0010f3d:	e8 97 11 00 00       	call   c00120d9 <__cxa_atexit>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	90                   	nop
c0010f46:	83 c4 0c             	add    esp,0xc
c0010f49:	c3                   	ret    

c0010f4a <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	83 ec 08             	sub    esp,0x8
c0010f50:	68 ff ff 00 00       	push   0xffff
c0010f55:	6a 01                	push   0x1
c0010f57:	e8 ab ff ff ff       	call   c0010f07 <__static_initialization_and_destruction_0(int, int)>
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	83 c4 0c             	add    esp,0xc
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0010f64:	53                   	push   ebx
c0010f65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f6d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0010f73:	89 c8                	mov    eax,ecx
c0010f75:	d1 e8                	shr    eax,1
c0010f77:	03 05 68 21 02 c0    	add    eax,DWORD PTR ds:0xc0022168
c0010f7d:	83 e1 01             	and    ecx,0x1
c0010f80:	8a 10                	mov    dl,BYTE PTR [eax]
c0010f82:	75 09                	jne    c0010f8d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0010f84:	83 e2 f0             	and    edx,0xfffffff0
c0010f87:	09 da                	or     edx,ebx
c0010f89:	88 10                	mov    BYTE PTR [eax],dl
c0010f8b:	5b                   	pop    ebx
c0010f8c:	c3                   	ret    
c0010f8d:	c1 e3 04             	shl    ebx,0x4
c0010f90:	83 e2 0f             	and    edx,0xf
c0010f93:	09 da                	or     edx,ebx
c0010f95:	88 10                	mov    BYTE PTR [eax],dl
c0010f97:	5b                   	pop    ebx
c0010f98:	c3                   	ret    

c0010f99 <Virt::getPageState(unsigned long)>:
c0010f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f9d:	8b 0d 68 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022168
c0010fa3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0010fa9:	89 d0                	mov    eax,edx
c0010fab:	d1 e8                	shr    eax,1
c0010fad:	83 e2 01             	and    edx,0x1
c0010fb0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0010fb3:	75 04                	jne    c0010fb9 <Virt::getPageState(unsigned long)+0x20>
c0010fb5:	83 e0 0f             	and    eax,0xf
c0010fb8:	c3                   	ret    
c0010fb9:	c0 e8 04             	shr    al,0x4
c0010fbc:	c3                   	ret    

c0010fbd <Virt::allocateKernelVirtualPages(int)>:
c0010fbd:	55                   	push   ebp
c0010fbe:	31 ed                	xor    ebp,ebp
c0010fc0:	57                   	push   edi
c0010fc1:	56                   	push   esi
c0010fc2:	53                   	push   ebx
c0010fc3:	31 db                	xor    ebx,ebx
c0010fc5:	83 ec 1c             	sub    esp,0x1c
c0010fc8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010fcc:	8b 3d 64 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022164
c0010fd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010fd7:	57                   	push   edi
c0010fd8:	e8 bc ff ff ff       	call   c0010f99 <Virt::getPageState(unsigned long)>
c0010fdd:	5a                   	pop    edx
c0010fde:	84 c0                	test   al,al
c0010fe0:	75 3a                	jne    c001101c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0010fe2:	85 db                	test   ebx,ebx
c0010fe4:	75 02                	jne    c0010fe8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0010fe6:	89 fd                	mov    ebp,edi
c0010fe8:	43                   	inc    ebx
c0010fe9:	39 f3                	cmp    ebx,esi
c0010feb:	74 5a                	je     c0011047 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0010fed:	47                   	inc    edi
c0010fee:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0010ff4:	76 31                	jbe    c0011027 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0010ff6:	c7 05 64 21 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022164,0xc8000
c0011000:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011005:	75 28                	jne    c001102f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011007:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001100c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011011:	57                   	push   edi
c0011012:	e8 82 ff ff ff       	call   c0010f99 <Virt::getPageState(unsigned long)>
c0011017:	5a                   	pop    edx
c0011018:	84 c0                	test   al,al
c001101a:	74 c6                	je     c0010fe2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001101c:	31 db                	xor    ebx,ebx
c001101e:	47                   	inc    edi
c001101f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011025:	77 cf                	ja     c0010ff6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011027:	89 3d 64 21 02 c0    	mov    DWORD PTR ds:0xc0022164,edi
c001102d:	eb a8                	jmp    c0010fd7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	68 d4 07 02 c0       	push   0xc00207d4
c0011037:	e8 80 bc ff ff       	call   c000ccbc <panic(char const*)>
c001103c:	8b 3d 64 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022164
c0011042:	83 c4 10             	add    esp,0x10
c0011045:	eb 90                	jmp    c0010fd7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011047:	89 2d 64 21 02 c0    	mov    DWORD PTR ds:0xc0022164,ebp
c001104d:	4b                   	dec    ebx
c001104e:	74 5f                	je     c00110af <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011050:	85 f6                	test   esi,esi
c0011052:	74 3d                	je     c0011091 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011054:	89 e8                	mov    eax,ebp
c0011056:	31 db                	xor    ebx,ebx
c0011058:	8d 7e ff             	lea    edi,[esi-0x1]
c001105b:	eb 14                	jmp    c0011071 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001105d:	6a 01                	push   0x1
c001105f:	43                   	inc    ebx
c0011060:	50                   	push   eax
c0011061:	e8 fe fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011066:	58                   	pop    eax
c0011067:	39 f3                	cmp    ebx,esi
c0011069:	5a                   	pop    edx
c001106a:	74 25                	je     c0011091 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001106c:	a1 64 21 02 c0       	mov    eax,ds:0xc0022164
c0011071:	8d 50 01             	lea    edx,[eax+0x1]
c0011074:	85 db                	test   ebx,ebx
c0011076:	89 15 64 21 02 c0    	mov    DWORD PTR ds:0xc0022164,edx
c001107c:	74 20                	je     c001109e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001107e:	39 df                	cmp    edi,ebx
c0011080:	75 db                	jne    c001105d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011082:	6a 03                	push   0x3
c0011084:	43                   	inc    ebx
c0011085:	50                   	push   eax
c0011086:	e8 d9 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001108b:	59                   	pop    ecx
c001108c:	39 f3                	cmp    ebx,esi
c001108e:	58                   	pop    eax
c001108f:	75 db                	jne    c001106c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011091:	83 c4 1c             	add    esp,0x1c
c0011094:	89 e8                	mov    eax,ebp
c0011096:	5b                   	pop    ebx
c0011097:	c1 e0 0c             	shl    eax,0xc
c001109a:	5e                   	pop    esi
c001109b:	5f                   	pop    edi
c001109c:	5d                   	pop    ebp
c001109d:	c3                   	ret    
c001109e:	6a 02                	push   0x2
c00110a0:	bb 01 00 00 00       	mov    ebx,0x1
c00110a5:	50                   	push   eax
c00110a6:	e8 b9 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	eb bd                	jmp    c001106c <Virt::allocateKernelVirtualPages(int)+0xaf>
c00110af:	6a 04                	push   0x4
c00110b1:	8d 45 01             	lea    eax,[ebp+0x1]
c00110b4:	55                   	push   ebp
c00110b5:	a3 64 21 02 c0       	mov    ds:0xc0022164,eax
c00110ba:	e8 a5 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110bf:	59                   	pop    ecx
c00110c0:	89 e8                	mov    eax,ebp
c00110c2:	5b                   	pop    ebx
c00110c3:	c1 e0 0c             	shl    eax,0xc
c00110c6:	83 c4 1c             	add    esp,0x1c
c00110c9:	5b                   	pop    ebx
c00110ca:	5e                   	pop    esi
c00110cb:	5f                   	pop    edi
c00110cc:	5d                   	pop    ebp
c00110cd:	c3                   	ret    

c00110ce <Virt::virtualMemorySetup()>:
c00110ce:	53                   	push   ebx
c00110cf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00110d4:	83 ec 08             	sub    esp,0x8
c00110d7:	6a 0f                	push   0xf
c00110d9:	53                   	push   ebx
c00110da:	43                   	inc    ebx
c00110db:	e8 84 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110e0:	59                   	pop    ecx
c00110e1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00110e7:	58                   	pop    eax
c00110e8:	75 ed                	jne    c00110d7 <Virt::virtualMemorySetup()+0x9>
c00110ea:	83 ec 08             	sub    esp,0x8
c00110ed:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00110f2:	68 00 00 00 c8       	push   0xc8000000
c00110f7:	68 7f 09 02 c0       	push   0xc002097f
c00110fc:	e8 9d ba ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011101:	58                   	pop    eax
c0011102:	5a                   	pop    edx
c0011103:	68 00 f0 ff ef       	push   0xeffff000
c0011108:	68 93 09 02 c0       	push   0xc0020993
c001110d:	e8 8c ba ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	83 ec 08             	sub    esp,0x8
c0011118:	6a 00                	push   0x0
c001111a:	53                   	push   ebx
c001111b:	43                   	inc    ebx
c001111c:	e8 43 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011121:	83 c4 10             	add    esp,0x10
c0011124:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001112a:	75 e9                	jne    c0011115 <Virt::virtualMemorySetup()+0x47>
c001112c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011131:	83 ec 08             	sub    esp,0x8
c0011134:	6a 0f                	push   0xf
c0011136:	53                   	push   ebx
c0011137:	43                   	inc    ebx
c0011138:	e8 27 fe ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011146:	75 e9                	jne    c0011131 <Virt::virtualMemorySetup()+0x63>
c0011148:	83 c4 08             	add    esp,0x8
c001114b:	5b                   	pop    ebx
c001114c:	c3                   	ret    

c001114d <Virt::getAKernelVAS()>:
c001114d:	a1 9c 37 02 c0       	mov    eax,ds:0xc002379c
c0011152:	c3                   	ret    

c0011153 <Virt::setupPageSwapping(int)>:
c0011153:	57                   	push   edi
c0011154:	56                   	push   esi
c0011155:	53                   	push   ebx
c0011156:	83 ec 1c             	sub    esp,0x1c
c0011159:	68 14 01 00 00       	push   0x114
c001115e:	e8 eb 0f 00 00       	call   c001214e <operator new(unsigned long)>
c0011163:	83 c4 0c             	add    esp,0xc
c0011166:	89 c6                	mov    esi,eax
c0011168:	ff 35 3c 35 02 c0    	push   DWORD PTR ds:0xc002353c
c001116e:	68 a7 09 02 c0       	push   0xc00209a7
c0011173:	50                   	push   eax
c0011174:	e8 03 14 00 00       	call   c001257c <File::File(char const*, Process*)>
c0011179:	89 34 24             	mov    DWORD PTR [esp],esi
c001117c:	e8 d7 15 00 00       	call   c0012758 <File::unlink()>
c0011181:	58                   	pop    eax
c0011182:	5a                   	pop    edx
c0011183:	6a 12                	push   0x12
c0011185:	56                   	push   esi
c0011186:	e8 55 14 00 00       	call   c00125e0 <File::open(FileOpenMode)>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	85 c0                	test   eax,eax
c0011190:	0f 85 bf 00 00 00    	jne    c0011255 <Virt::setupPageSwapping(int)+0x102>
c0011196:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001119a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111a2:	c1 e3 08             	shl    ebx,0x8
c00111a5:	83 ec 0c             	sub    esp,0xc
c00111a8:	68 00 00 01 00       	push   0x10000
c00111ad:	e8 e7 bf ff ff       	call   c000d199 <malloc>
c00111b2:	83 c4 0c             	add    esp,0xc
c00111b5:	89 c7                	mov    edi,eax
c00111b7:	68 00 00 01 00       	push   0x10000
c00111bc:	6a 00                	push   0x0
c00111be:	50                   	push   eax
c00111bf:	e8 44 f4 fe ff       	call   c0000608 <memset>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	85 db                	test   ebx,ebx
c00111c9:	79 03                	jns    c00111ce <Virt::setupPageSwapping(int)+0x7b>
c00111cb:	83 c3 0f             	add    ebx,0xf
c00111ce:	c1 fb 04             	sar    ebx,0x4
c00111d1:	4b                   	dec    ebx
c00111d2:	83 fb ff             	cmp    ebx,0xffffffff
c00111d5:	74 4b                	je     c0011222 <Virt::setupPageSwapping(int)+0xcf>
c00111d7:	83 ec 0c             	sub    esp,0xc
c00111da:	8b 06                	mov    eax,DWORD PTR [esi]
c00111dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00111e0:	52                   	push   edx
c00111e1:	57                   	push   edi
c00111e2:	6a 00                	push   0x0
c00111e4:	68 00 00 01 00       	push   0x10000
c00111e9:	56                   	push   esi
c00111ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00111ed:	83 c4 20             	add    esp,0x20
c00111f0:	85 c0                	test   eax,eax
c00111f2:	75 4e                	jne    c0011242 <Virt::setupPageSwapping(int)+0xef>
c00111f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111f8:	3d 00 00 01 00       	cmp    eax,0x10000
c00111fd:	74 d2                	je     c00111d1 <Virt::setupPageSwapping(int)+0x7e>
c00111ff:	83 ec 08             	sub    esp,0x8
c0011202:	4b                   	dec    ebx
c0011203:	50                   	push   eax
c0011204:	68 fa 09 02 c0       	push   0xc00209fa
c0011209:	e8 90 b9 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001120e:	c7 04 24 03 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a03
c0011215:	e8 a2 ba ff ff       	call   c000ccbc <panic(char const*)>
c001121a:	83 c4 10             	add    esp,0x10
c001121d:	83 fb ff             	cmp    ebx,0xffffffff
c0011220:	75 b5                	jne    c00111d7 <Virt::setupPageSwapping(int)+0x84>
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	56                   	push   esi
c0011226:	e8 13 14 00 00       	call   c001263e <File::close()>
c001122b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001122e:	e8 86 bf ff ff       	call   c000d1b9 <rfree>
c0011233:	89 34 24             	mov    DWORD PTR [esp],esi
c0011236:	8b 06                	mov    eax,DWORD PTR [esi]
c0011238:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001123b:	83 c4 20             	add    esp,0x20
c001123e:	5b                   	pop    ebx
c001123f:	5e                   	pop    esi
c0011240:	5f                   	pop    edi
c0011241:	c3                   	ret    
c0011242:	83 ec 08             	sub    esp,0x8
c0011245:	50                   	push   eax
c0011246:	68 e2 09 02 c0       	push   0xc00209e2
c001124b:	e8 4e b9 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	eb 9f                	jmp    c00111f4 <Virt::setupPageSwapping(int)+0xa1>
c0011255:	83 ec 08             	sub    esp,0x8
c0011258:	50                   	push   eax
c0011259:	68 be 09 02 c0       	push   0xc00209be
c001125e:	e8 3b b9 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011263:	c7 04 24 c7 09 02 c0 	mov    DWORD PTR [esp],0xc00209c7
c001126a:	e8 4d ba ff ff       	call   c000ccbc <panic(char const*)>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	e9 1f ff ff ff       	jmp    c0011196 <Virt::setupPageSwapping(int)+0x43>
c0011277:	90                   	nop

c0011278 <VAS::VAS()>:
c0011278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001127c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011287:	a3 9c 37 02 c0       	mov    ds:0xc002379c,eax
c001128c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011290:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011298:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001129b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00112a6:	90                   	nop
c00112a7:	c3                   	ret    

c00112a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00112a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112ac:	89 c2                	mov    edx,eax
c00112ae:	c1 e8 0a             	shr    eax,0xa
c00112b1:	c1 ea 16             	shr    edx,0x16
c00112b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00112b9:	19 c9                	sbb    ecx,ecx
c00112bb:	c1 e2 0c             	shl    edx,0xc
c00112be:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00112c4:	25 fc 0f 00 00       	and    eax,0xffc
c00112c9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00112d0:	01 d0                	add    eax,edx
c00112d2:	c3                   	ret    
c00112d3:	90                   	nop

c00112d4 <VAS::getPageTableEntry(unsigned long)>:
c00112d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112d8:	89 ca                	mov    edx,ecx
c00112da:	c1 e9 0a             	shr    ecx,0xa
c00112dd:	c1 ea 16             	shr    edx,0x16
c00112e0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00112e6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00112ec:	c1 e0 0c             	shl    eax,0xc
c00112ef:	8d 04 08             	lea    eax,[eax+ecx*1]
c00112f2:	c3                   	ret    

c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00112f3:	57                   	push   edi
c00112f4:	56                   	push   esi
c00112f5:	be 01 00 00 00       	mov    esi,0x1
c00112fa:	53                   	push   ebx
c00112fb:	83 ec 10             	sub    esp,0x10
c00112fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011302:	c1 eb 0c             	shr    ebx,0xc
c0011305:	eb 3f                	jmp    c0011346 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011307:	e8 41 fe ff ff       	call   c001114d <Virt::getAKernelVAS()>
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	57                   	push   edi
c0011310:	50                   	push   eax
c0011311:	e8 be ff ff ff       	call   c00112d4 <VAS::getPageTableEntry(unsigned long)>
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	8b 00                	mov    eax,DWORD PTR [eax]
c001131b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001131f:	f6 c4 04             	test   ah,0x4
c0011322:	75 5f                	jne    c0011383 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011324:	80 fa 04             	cmp    dl,0x4
c0011327:	74 78                	je     c00113a1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011329:	80 fa 02             	cmp    dl,0x2
c001132c:	0f 84 88 00 00 00    	je     c00113ba <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011332:	80 fa 03             	cmp    dl,0x3
c0011335:	0f 84 ad 00 00 00    	je     c00113e8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001133b:	fe ca                	dec    dl
c001133d:	0f 84 92 00 00 00    	je     c00113d5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011343:	43                   	inc    ebx
c0011344:	31 f6                	xor    esi,esi
c0011346:	53                   	push   ebx
c0011347:	e8 4d fc ff ff       	call   c0010f99 <Virt::getPageState(unsigned long)>
c001134c:	5f                   	pop    edi
c001134d:	89 df                	mov    edi,ebx
c001134f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011353:	c1 e7 0c             	shl    edi,0xc
c0011356:	84 c0                	test   al,al
c0011358:	75 ad                	jne    c0011307 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	68 09 0a 02 c0       	push   0xc0020a09
c0011362:	e8 55 b9 ff ff       	call   c000ccbc <panic(char const*)>
c0011367:	e8 e1 fd ff ff       	call   c001114d <Virt::getAKernelVAS()>
c001136c:	5a                   	pop    edx
c001136d:	59                   	pop    ecx
c001136e:	57                   	push   edi
c001136f:	50                   	push   eax
c0011370:	e8 5f ff ff ff       	call   c00112d4 <VAS::getPageTableEntry(unsigned long)>
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	8b 00                	mov    eax,DWORD PTR [eax]
c001137a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001137e:	f6 c4 04             	test   ah,0x4
c0011381:	74 c0                	je     c0011343 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011383:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011387:	25 00 f0 ff ff       	and    eax,0xfffff000
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	50                   	push   eax
c0011390:	e8 24 c3 ff ff       	call   c000d6b9 <Phys::freePage(unsigned long)>
c0011395:	83 c4 10             	add    esp,0x10
c0011398:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001139c:	80 fa 04             	cmp    dl,0x4
c001139f:	75 88                	jne    c0011329 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00113a1:	89 f0                	mov    eax,esi
c00113a3:	84 c0                	test   al,al
c00113a5:	75 47                	jne    c00113ee <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00113a7:	c7 44 24 20 f4 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc00207f4
c00113af:	83 c4 10             	add    esp,0x10
c00113b2:	5b                   	pop    ebx
c00113b3:	5e                   	pop    esi
c00113b4:	5f                   	pop    edi
c00113b5:	e9 02 b9 ff ff       	jmp    c000ccbc <panic(char const*)>
c00113ba:	89 f0                	mov    eax,esi
c00113bc:	84 c0                	test   al,al
c00113be:	75 15                	jne    c00113d5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	68 25 0a 02 c0       	push   0xc0020a25
c00113c8:	e8 ef b8 ff ff       	call   c000ccbc <panic(char const*)>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	e9 6e ff ff ff       	jmp    c0011343 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	6a 00                	push   0x0
c00113da:	53                   	push   ebx
c00113db:	e8 84 fb ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	e9 5b ff ff ff       	jmp    c0011343 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00113e8:	89 f0                	mov    eax,esi
c00113ea:	84 c0                	test   al,al
c00113ec:	75 15                	jne    c0011403 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00113ee:	83 ec 08             	sub    esp,0x8
c00113f1:	6a 00                	push   0x0
c00113f3:	53                   	push   ebx
c00113f4:	e8 6b fb ff ff       	call   c0010f64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113f9:	83 c4 10             	add    esp,0x10
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	5b                   	pop    ebx
c0011400:	5e                   	pop    esi
c0011401:	5f                   	pop    edi
c0011402:	c3                   	ret    
c0011403:	c7 44 24 20 41 0a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020a41
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	5b                   	pop    ebx
c001140f:	5e                   	pop    esi
c0011410:	5f                   	pop    edi
c0011411:	e9 a6 b8 ff ff       	jmp    c000ccbc <panic(char const*)>

c0011416 <VAS::freeAllocatedPages(unsigned long)>:
c0011416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001141e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011422:	74 09                	je     c001142d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011424:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011428:	e9 c6 fe ff ff       	jmp    c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c001142d:	c7 44 24 04 18 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020818
c0011435:	e9 64 b7 ff ff       	jmp    c000cb9e <kprintf(char const*, ...)>

c001143a <VAS::virtualToPhysical(unsigned long)>:
c001143a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001143e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011442:	e8 8d fe ff ff       	call   c00112d4 <VAS::getPageTableEntry(unsigned long)>
c0011447:	5a                   	pop    edx
c0011448:	8b 00                	mov    eax,DWORD PTR [eax]
c001144a:	59                   	pop    ecx
c001144b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011450:	c3                   	ret    
c0011451:	90                   	nop

c0011452 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001145a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001145e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011465:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011468:	19 c0                	sbb    eax,eax
c001146a:	83 ca 03             	or     edx,0x3
c001146d:	83 e0 fc             	and    eax,0xfffffffc
c0011470:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011477:	e8 dd cd 00 00       	call   c001e259 <CPU::readCR3()>
c001147c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011480:	83 c4 0c             	add    esp,0xc
c0011483:	e9 f5 cd 00 00       	jmp    c001e27d <CPU::writeCR3(unsigned long)>

c0011488 <VAS::~VAS()>:
c0011488:	83 ec 2c             	sub    esp,0x2c
c001148b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011493:	e8 a8 cb ff ff       	call   c000e040 <lockScheduler()>
c0011498:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001149d:	8b 00                	mov    eax,DWORD PTR [eax]
c001149f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114a2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00114a8:	83 ec 04             	sub    esp,0x4
c00114ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114af:	6a 01                	push   0x1
c00114b1:	50                   	push   eax
c00114b2:	e8 9b ff ff ff       	call   c0011452 <VAS::mapOtherVASIn(bool, VAS*)>
c00114b7:	83 c4 10             	add    esp,0x10
c00114ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00114c2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00114ca:	0f 8f d7 00 00 00    	jg     c00115a7 <VAS::~VAS()+0x11f>
c00114d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114db:	c1 e2 02             	shl    edx,0x2
c00114de:	01 d0                	add    eax,edx
c00114e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00114e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ea:	83 e0 01             	and    eax,0x1
c00114ed:	0f 84 ab 00 00 00    	je     c001159e <VAS::~VAS()+0x116>
c00114f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00114fb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011503:	7f 75                	jg     c001157a <VAS::~VAS()+0xf2>
c0011505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011509:	c1 e0 0a             	shl    eax,0xa
c001150c:	89 c2                	mov    edx,eax
c001150e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011512:	01 d0                	add    eax,edx
c0011514:	c1 e0 0c             	shl    eax,0xc
c0011517:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001151b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011520:	8b 00                	mov    eax,DWORD PTR [eax]
c0011522:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011525:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001152b:	83 ec 04             	sub    esp,0x4
c001152e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011532:	6a 01                	push   0x1
c0011534:	50                   	push   eax
c0011535:	e8 6e fd ff ff       	call   c00112a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011541:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011545:	8b 00                	mov    eax,DWORD PTR [eax]
c0011547:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001154b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154f:	25 01 04 00 00       	and    eax,0x401
c0011554:	3d 01 04 00 00       	cmp    eax,0x401
c0011559:	75 19                	jne    c0011574 <VAS::~VAS()+0xec>
c001155b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	50                   	push   eax
c0011568:	e8 4c c1 ff ff       	call   c000d6b9 <Phys::freePage(unsigned long)>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011574:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011578:	eb 81                	jmp    c00114fb <VAS::~VAS()+0x73>
c001157a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157e:	25 00 04 00 00       	and    eax,0x400
c0011583:	74 19                	je     c001159e <VAS::~VAS()+0x116>
c0011585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011589:	25 00 f0 ff ff       	and    eax,0xfffff000
c001158e:	83 ec 0c             	sub    esp,0xc
c0011591:	50                   	push   eax
c0011592:	e8 22 c1 ff ff       	call   c000d6b9 <Phys::freePage(unsigned long)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001159e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00115a2:	e9 1b ff ff ff       	jmp    c00114c2 <VAS::~VAS()+0x3a>
c00115a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	50                   	push   eax
c00115b2:	e8 3c fd ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c00115b7:	83 c4 10             	add    esp,0x10
c00115ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	50                   	push   eax
c00115c5:	e8 ef c0 ff ff       	call   c000d6b9 <Phys::freePage(unsigned long)>
c00115ca:	83 c4 10             	add    esp,0x10
c00115cd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00115d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115d5:	c1 e0 02             	shl    eax,0x2
c00115d8:	83 ec 08             	sub    esp,0x8
c00115db:	50                   	push   eax
c00115dc:	68 3c 08 02 c0       	push   0xc002083c
c00115e1:	e8 b8 b5 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00115e6:	83 c4 10             	add    esp,0x10
c00115e9:	e8 54 ca ff ff       	call   c000e042 <unlockScheduler()>
c00115ee:	90                   	nop
c00115ef:	83 c4 2c             	add    esp,0x2c
c00115f2:	c3                   	ret    
c00115f3:	90                   	nop

c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00115f4:	55                   	push   ebp
c00115f5:	57                   	push   edi
c00115f6:	56                   	push   esi
c00115f7:	53                   	push   ebx
c00115f8:	83 ec 1c             	sub    esp,0x1c
c00115fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00115ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011603:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011609:	77 08                	ja     c0011613 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001160b:	0f 20 d8             	mov    eax,cr3
c001160e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011611:	75 47                	jne    c001165a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011613:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011617:	09 d8                	or     eax,ebx
c0011619:	a9 ff 0f 00 00       	test   eax,0xfff
c001161e:	75 57                	jne    c0011677 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011620:	89 de                	mov    esi,ebx
c0011622:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011625:	c1 ee 16             	shr    esi,0x16
c0011628:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001162f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011633:	74 54                	je     c0011689 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011639:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001163f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011643:	c1 e6 0c             	shl    esi,0xc
c0011646:	c1 eb 0a             	shr    ebx,0xa
c0011649:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001164f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011652:	83 c4 1c             	add    esp,0x1c
c0011655:	5b                   	pop    ebx
c0011656:	5e                   	pop    esi
c0011657:	5f                   	pop    edi
c0011658:	5d                   	pop    ebp
c0011659:	c3                   	ret    
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	68 5c 08 02 c0       	push   0xc002085c
c0011662:	e8 37 b5 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001166e:	09 d8                	or     eax,ebx
c0011670:	a9 ff 0f 00 00       	test   eax,0xfff
c0011675:	74 a9                	je     c0011620 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	68 c4 08 02 c0       	push   0xc00208c4
c001167f:	e8 38 b6 ff ff       	call   c000ccbc <panic(char const*)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	eb 97                	jmp    c0011620 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011689:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001168d:	e8 b1 c0 ff ff       	call   c000d743 <Phys::allocatePage()>
c0011692:	89 c5                	mov    ebp,eax
c0011694:	e8 b4 fa ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0011699:	83 ec 0c             	sub    esp,0xc
c001169c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00116a0:	6a 01                	push   0x1
c00116a2:	e8 16 f9 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c00116a7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00116ae:	6a 01                	push   0x1
c00116b0:	50                   	push   eax
c00116b1:	55                   	push   ebp
c00116b2:	81 cd 07 04 00 00    	or     ebp,0x407
c00116b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116bc:	51                   	push   ecx
c00116bd:	e8 1e 02 00 00       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116c2:	83 c4 1c             	add    esp,0x1c
c00116c5:	68 00 10 00 00       	push   0x1000
c00116ca:	6a 00                	push   0x0
c00116cc:	50                   	push   eax
c00116cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116d1:	e8 32 ef fe ff       	call   c0000608 <memset>
c00116d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00116da:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00116dd:	e8 11 fc ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c00116e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00116e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00116ef:	e9 41 ff ff ff       	jmp    c0011635 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00116f4 <VAS::allocatePages(int, int)>:
c00116f4:	55                   	push   ebp
c00116f5:	57                   	push   edi
c00116f6:	56                   	push   esi
c00116f7:	53                   	push   ebx
c00116f8:	83 ec 1c             	sub    esp,0x1c
c00116fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00116ff:	e8 a2 57 00 00       	call   c0016ea6 <thisCPU()>
c0011704:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001170a:	83 e0 01             	and    eax,0x1
c001170d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011711:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011715:	0f 85 d7 00 00 00    	jne    c00117f2 <VAS::allocatePages(int, int)+0xfe>
c001171b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001171e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011722:	85 c0                	test   eax,eax
c0011724:	0f 84 ac 00 00 00    	je     c00117d6 <VAS::allocatePages(int, int)+0xe2>
c001172a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001172e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011732:	c1 e6 0c             	shl    esi,0xc
c0011735:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011739:	85 c0                	test   eax,eax
c001173b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001173e:	7e 33                	jle    c0011773 <VAS::allocatePages(int, int)+0x7f>
c0011740:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011744:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011748:	81 cd 00 04 00 00    	or     ebp,0x400
c001174e:	e8 f0 bf ff ff       	call   c000d743 <Phys::allocatePage()>
c0011753:	55                   	push   ebp
c0011754:	53                   	push   ebx
c0011755:	50                   	push   eax
c0011756:	57                   	push   edi
c0011757:	e8 98 fe ff ff       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001175c:	83 c4 10             	add    esp,0x10
c001175f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011764:	74 03                	je     c0011769 <VAS::allocatePages(int, int)+0x75>
c0011766:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011769:	81 c3 00 10 00 00    	add    ebx,0x1000
c001176f:	39 de                	cmp    esi,ebx
c0011771:	75 db                	jne    c001174e <VAS::allocatePages(int, int)+0x5a>
c0011773:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011778:	74 3f                	je     c00117b9 <VAS::allocatePages(int, int)+0xc5>
c001177a:	c1 ee 0a             	shr    esi,0xa
c001177d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011781:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011787:	c1 eb 0a             	shr    ebx,0xa
c001178a:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011790:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011796:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001179c:	39 f3                	cmp    ebx,esi
c001179e:	77 0d                	ja     c00117ad <VAS::allocatePages(int, int)+0xb9>
c00117a0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00117a3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00117a9:	39 de                	cmp    esi,ebx
c00117ab:	73 f3                	jae    c00117a0 <VAS::allocatePages(int, int)+0xac>
c00117ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117b1:	83 c4 1c             	add    esp,0x1c
c00117b4:	5b                   	pop    ebx
c00117b5:	5e                   	pop    esi
c00117b6:	5f                   	pop    edi
c00117b7:	5d                   	pop    ebp
c00117b8:	c3                   	ret    
c00117b9:	e8 9b ca 00 00       	call   c001e259 <CPU::readCR3()>
c00117be:	83 ec 0c             	sub    esp,0xc
c00117c1:	50                   	push   eax
c00117c2:	e8 b6 ca 00 00       	call   c001e27d <CPU::writeCR3(unsigned long)>
c00117c7:	83 c4 10             	add    esp,0x10
c00117ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117ce:	83 c4 1c             	add    esp,0x1c
c00117d1:	5b                   	pop    ebx
c00117d2:	5e                   	pop    esi
c00117d3:	5f                   	pop    edi
c00117d4:	5d                   	pop    ebp
c00117d5:	c3                   	ret    
c00117d6:	83 ec 0c             	sub    esp,0xc
c00117d9:	68 e8 08 02 c0       	push   0xc00208e8
c00117de:	e8 d9 b4 ff ff       	call   c000ccbc <panic(char const*)>
c00117e3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00117e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	e9 38 ff ff ff       	jmp    c001172a <VAS::allocatePages(int, int)+0x36>
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117f9:	e8 bf f7 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c00117fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001180a:	0f 87 94 00 00 00    	ja     c00118a4 <VAS::allocatePages(int, int)+0x1b0>
c0011810:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011814:	85 d2                	test   edx,edx
c0011816:	7e 3c                	jle    c0011854 <VAS::allocatePages(int, int)+0x160>
c0011818:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001181c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011820:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011824:	c1 e5 0c             	shl    ebp,0xc
c0011827:	81 ce 00 04 00 00    	or     esi,0x400
c001182d:	01 dd                	add    ebp,ebx
c001182f:	e8 0f bf ff ff       	call   c000d743 <Phys::allocatePage()>
c0011834:	56                   	push   esi
c0011835:	53                   	push   ebx
c0011836:	50                   	push   eax
c0011837:	57                   	push   edi
c0011838:	e8 b7 fd ff ff       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011845:	74 03                	je     c001184a <VAS::allocatePages(int, int)+0x156>
c0011847:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001184a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011850:	39 dd                	cmp    ebp,ebx
c0011852:	75 db                	jne    c001182f <VAS::allocatePages(int, int)+0x13b>
c0011854:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011859:	0f 84 5a ff ff ff    	je     c00117b9 <VAS::allocatePages(int, int)+0xc5>
c001185f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011863:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011867:	89 d3                	mov    ebx,edx
c0011869:	c1 e0 0c             	shl    eax,0xc
c001186c:	c1 eb 0a             	shr    ebx,0xa
c001186f:	01 d0                	add    eax,edx
c0011871:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011877:	c1 e8 0a             	shr    eax,0xa
c001187a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011880:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011885:	2d 00 00 40 00       	sub    eax,0x400000
c001188a:	39 c3                	cmp    ebx,eax
c001188c:	0f 87 1b ff ff ff    	ja     c00117ad <VAS::allocatePages(int, int)+0xb9>
c0011892:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011895:	81 c3 00 10 00 00    	add    ebx,0x1000
c001189b:	39 d8                	cmp    eax,ebx
c001189d:	73 f3                	jae    c0011892 <VAS::allocatePages(int, int)+0x19e>
c001189f:	e9 09 ff ff ff       	jmp    c00117ad <VAS::allocatePages(int, int)+0xb9>
c00118a4:	e8 fd 55 00 00       	call   c0016ea6 <thisCPU()>
c00118a9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00118b0:	0f 84 5a ff ff ff    	je     c0011810 <VAS::allocatePages(int, int)+0x11c>
c00118b6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00118be:	e9 4d ff ff ff       	jmp    c0011810 <VAS::allocatePages(int, int)+0x11c>
c00118c3:	90                   	nop

c00118c4 <VAS::setCPUSpecific(unsigned long)>:
c00118c4:	83 ec 0c             	sub    esp,0xc
c00118c7:	6a 05                	push   0x5
c00118c9:	68 00 00 40 c2       	push   0xc2400000
c00118ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d6:	e8 19 fd ff ff       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00118db:	83 c4 1c             	add    esp,0x1c
c00118de:	c3                   	ret    
c00118df:	90                   	nop

c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00118e0:	55                   	push   ebp
c00118e1:	57                   	push   edi
c00118e2:	56                   	push   esi
c00118e3:	53                   	push   ebx
c00118e4:	83 ec 1c             	sub    esp,0x1c
c00118e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00118eb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00118ef:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00118f3:	e8 ae 55 00 00       	call   c0016ea6 <thisCPU()>
c00118f8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00118fe:	83 e0 01             	and    eax,0x1
c0011901:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011905:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011909:	85 c0                	test   eax,eax
c001190b:	7e 39                	jle    c0011946 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c001190d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011911:	89 f3                	mov    ebx,esi
c0011913:	c1 e0 0c             	shl    eax,0xc
c0011916:	01 f0                	add    eax,esi
c0011918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001191c:	55                   	push   ebp
c001191d:	53                   	push   ebx
c001191e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011922:	29 f0                	sub    eax,esi
c0011924:	01 d8                	add    eax,ebx
c0011926:	50                   	push   eax
c0011927:	57                   	push   edi
c0011928:	e8 c7 fc ff ff       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011935:	74 03                	je     c001193a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011937:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001193a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011940:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011944:	75 d6                	jne    c001191c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011946:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001194b:	74 42                	je     c001198f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c001194d:	89 f3                	mov    ebx,esi
c001194f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011953:	c1 eb 0a             	shr    ebx,0xa
c0011956:	c1 e0 0c             	shl    eax,0xc
c0011959:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001195f:	01 f0                	add    eax,esi
c0011961:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011967:	c1 e8 0a             	shr    eax,0xa
c001196a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001196f:	2d 00 00 40 00       	sub    eax,0x400000
c0011974:	39 c3                	cmp    ebx,eax
c0011976:	77 0d                	ja     c0011985 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011978:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001197b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011981:	39 d8                	cmp    eax,ebx
c0011983:	73 f3                	jae    c0011978 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011985:	83 c4 1c             	add    esp,0x1c
c0011988:	89 f0                	mov    eax,esi
c001198a:	5b                   	pop    ebx
c001198b:	5e                   	pop    esi
c001198c:	5f                   	pop    edi
c001198d:	5d                   	pop    ebp
c001198e:	c3                   	ret    
c001198f:	e8 c5 c8 00 00       	call   c001e259 <CPU::readCR3()>
c0011994:	83 ec 0c             	sub    esp,0xc
c0011997:	50                   	push   eax
c0011998:	e8 e0 c8 00 00       	call   c001e27d <CPU::writeCR3(unsigned long)>
c001199d:	89 f0                	mov    eax,esi
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	83 c4 1c             	add    esp,0x1c
c00119a5:	5b                   	pop    ebx
c00119a6:	5e                   	pop    esi
c00119a7:	5f                   	pop    edi
c00119a8:	5d                   	pop    ebp
c00119a9:	c3                   	ret    

c00119aa <VAS::VAS(VAS*)>:
c00119aa:	53                   	push   ebx
c00119ab:	83 ec 38             	sub    esp,0x38
c00119ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119b9:	e8 a9 c6 ff ff       	call   c000e067 <lockStuff()>
c00119be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00119c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00119d0:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c00119d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119d7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00119da:	e8 64 bd ff ff       	call   c000d743 <Phys::allocatePage()>
c00119df:	89 c2                	mov    edx,eax
c00119e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119e8:	e8 60 f7 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c00119ed:	89 c3                	mov    ebx,eax
c00119ef:	83 ec 0c             	sub    esp,0xc
c00119f2:	6a 01                	push   0x1
c00119f4:	e8 c4 f5 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	89 c2                	mov    edx,eax
c00119fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	6a 03                	push   0x3
c0011a0a:	6a 01                	push   0x1
c0011a0c:	52                   	push   edx
c0011a0d:	50                   	push   eax
c0011a0e:	53                   	push   ebx
c0011a0f:	e8 cc fe ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a14:	83 c4 20             	add    esp,0x20
c0011a17:	89 c2                	mov    edx,eax
c0011a19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011a20:	83 ec 04             	sub    esp,0x4
c0011a23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011a27:	6a 01                	push   0x1
c0011a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a2d:	e8 20 fa ff ff       	call   c0011452 <VAS::mapOtherVASIn(bool, VAS*)>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	83 ec 0c             	sub    esp,0xc
c0011a38:	6a 01                	push   0x1
c0011a3a:	e8 7e f5 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a46:	83 ec 0c             	sub    esp,0xc
c0011a49:	6a 01                	push   0x1
c0011a4b:	e8 6d f5 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a5f:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011a67:	0f 8f 5e 02 00 00    	jg     c0011ccb <VAS::VAS(VAS*)+0x321>
c0011a6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a77:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011a80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a84:	c1 e2 02             	shl    edx,0x2
c0011a87:	01 d0                	add    eax,edx
c0011a89:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a8f:	83 ec 08             	sub    esp,0x8
c0011a92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011a96:	68 5b 0a 02 c0       	push   0xc0020a5b
c0011a9b:	e8 fe b0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011aa7:	25 01 04 00 00       	and    eax,0x401
c0011aac:	3d 01 04 00 00       	cmp    eax,0x401
c0011ab1:	0f 85 e5 01 00 00    	jne    c0011c9c <VAS::VAS(VAS*)+0x2f2>
c0011ab7:	83 ec 0c             	sub    esp,0xc
c0011aba:	68 6c 0a 02 c0       	push   0xc0020a6c
c0011abf:	e8 da b0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011ac4:	83 c4 10             	add    esp,0x10
c0011ac7:	e8 77 bc ff ff       	call   c000d743 <Phys::allocatePage()>
c0011acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ad0:	83 ec 08             	sub    esp,0x8
c0011ad3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ad7:	68 82 0a 02 c0       	push   0xc0020a82
c0011adc:	e8 bd b0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ae8:	25 ff 0f 00 00       	and    eax,0xfff
c0011aed:	89 c1                	mov    ecx,eax
c0011aef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011af3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011af6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011afa:	c1 e2 02             	shl    edx,0x2
c0011afd:	01 c2                	add    edx,eax
c0011aff:	89 c8                	mov    eax,ecx
c0011b01:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011b05:	89 02                	mov    DWORD PTR [edx],eax
c0011b07:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011b0f:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011b17:	0f 8f a5 01 00 00    	jg     c0011cc2 <VAS::VAS(VAS*)+0x318>
c0011b1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b21:	c1 e0 0a             	shl    eax,0xa
c0011b24:	89 c2                	mov    edx,eax
c0011b26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b2a:	01 d0                	add    eax,edx
c0011b2c:	c1 e0 0c             	shl    eax,0xc
c0011b2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b33:	83 ec 08             	sub    esp,0x8
c0011b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b3e:	e8 91 f7 ff ff       	call   c00112d4 <VAS::getPageTableEntry(unsigned long)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011b4c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b56:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b5c:	83 ec 04             	sub    esp,0x4
c0011b5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b63:	6a 01                	push   0x1
c0011b65:	50                   	push   eax
c0011b66:	e8 3d f7 ff ff       	call   c00112a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011b6b:	83 c4 10             	add    esp,0x10
c0011b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b72:	83 ec 04             	sub    esp,0x4
c0011b75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b7d:	68 14 09 02 c0       	push   0xc0020914
c0011b82:	e8 17 b0 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011b87:	83 c4 10             	add    esp,0x10
c0011b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b8e:	25 01 04 00 00       	and    eax,0x401
c0011b93:	3d 01 04 00 00       	cmp    eax,0x401
c0011b98:	0f 85 db 00 00 00    	jne    c0011c79 <VAS::VAS(VAS*)+0x2cf>
c0011b9e:	83 ec 0c             	sub    esp,0xc
c0011ba1:	68 91 0a 02 c0       	push   0xc0020a91
c0011ba6:	e8 f3 af ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	e8 90 bb ff ff       	call   c000d743 <Phys::allocatePage()>
c0011bb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011bb7:	83 ec 08             	sub    esp,0x8
c0011bba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011bbe:	68 a0 0a 02 c0       	push   0xc0020aa0
c0011bc3:	e8 d6 af ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bd4:	83 ec 08             	sub    esp,0x8
c0011bd7:	50                   	push   eax
c0011bd8:	68 b4 0a 02 c0       	push   0xc0020ab4
c0011bdd:	e8 bc af ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	e8 63 f5 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0011bea:	83 ec 0c             	sub    esp,0xc
c0011bed:	6a 03                	push   0x3
c0011bef:	6a 01                	push   0x1
c0011bf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011bf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bf9:	50                   	push   eax
c0011bfa:	e8 e1 fc ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011bff:	83 c4 20             	add    esp,0x20
c0011c02:	e8 46 f5 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0011c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c0b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	6a 03                	push   0x3
c0011c16:	6a 01                	push   0x1
c0011c18:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c1c:	52                   	push   edx
c0011c1d:	50                   	push   eax
c0011c1e:	e8 bd fc ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c23:	83 c4 20             	add    esp,0x20
c0011c26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c2e:	83 ec 04             	sub    esp,0x4
c0011c31:	68 00 10 00 00       	push   0x1000
c0011c36:	52                   	push   edx
c0011c37:	50                   	push   eax
c0011c38:	e8 95 e9 fe ff       	call   c00005d2 <memcpy>
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c44:	25 ff 0f 00 00       	and    eax,0xfff
c0011c49:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011c4d:	89 c2                	mov    edx,eax
c0011c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c53:	89 10                	mov    DWORD PTR [eax],edx
c0011c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c59:	25 ff 0f 00 00       	and    eax,0xfff
c0011c5e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011c62:	83 ec 04             	sub    esp,0x4
c0011c65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c69:	50                   	push   eax
c0011c6a:	68 38 09 02 c0       	push   0xc0020938
c0011c6f:	e8 2a af ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	eb 1a                	jmp    c0011c93 <VAS::VAS(VAS*)+0x2e9>
c0011c79:	83 ec 0c             	sub    esp,0xc
c0011c7c:	68 c8 0a 02 c0       	push   0xc0020ac8
c0011c81:	e8 18 af ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c91:	89 10                	mov    DWORD PTR [eax],edx
c0011c93:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011c97:	e9 73 fe ff ff       	jmp    c0011b0f <VAS::VAS(VAS*)+0x165>
c0011c9c:	83 ec 0c             	sub    esp,0xc
c0011c9f:	68 cc 0a 02 c0       	push   0xc0020acc
c0011ca4:	e8 f5 ae ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0011ca9:	83 c4 10             	add    esp,0x10
c0011cac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cb0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011cb3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011cb7:	c1 e2 02             	shl    edx,0x2
c0011cba:	01 c2                	add    edx,eax
c0011cbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc0:	89 02                	mov    DWORD PTR [edx],eax
c0011cc2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011cc6:	e9 94 fd ff ff       	jmp    c0011a5f <VAS::VAS(VAS*)+0xb5>
c0011ccb:	83 ec 0c             	sub    esp,0xc
c0011cce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011cd2:	e8 1c f6 ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ce1:	e8 0d f6 ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	e8 0b c7 ff ff       	call   c000e3f9 <unlockStuff()>
c0011cee:	90                   	nop
c0011cef:	83 c4 38             	add    esp,0x38
c0011cf2:	5b                   	pop    ebx
c0011cf3:	c3                   	ret    

c0011cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011cf4:	55                   	push   ebp
c0011cf5:	57                   	push   edi
c0011cf6:	56                   	push   esi
c0011cf7:	53                   	push   ebx
c0011cf8:	83 ec 1c             	sub    esp,0x1c
c0011cfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d03:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d0b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d10:	75 4a                	jne    c0011d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d12:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d19:	c1 eb 16             	shr    ebx,0x16
c0011d1c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d23:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d27:	74 4d                	je     c0011d76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d2d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d31:	c1 e8 0a             	shr    eax,0xa
c0011d34:	80 fa 01             	cmp    dl,0x1
c0011d37:	19 d2                	sbb    edx,edx
c0011d39:	c1 e3 0c             	shl    ebx,0xc
c0011d3c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d40:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d46:	25 fc 0f 00 00       	and    eax,0xffc
c0011d4b:	01 d8                	add    eax,ebx
c0011d4d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d54:	83 c4 1c             	add    esp,0x1c
c0011d57:	5b                   	pop    ebx
c0011d58:	5e                   	pop    esi
c0011d59:	5f                   	pop    edi
c0011d5a:	5d                   	pop    ebp
c0011d5b:	c3                   	ret    
c0011d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d60:	83 ec 0c             	sub    esp,0xc
c0011d63:	68 5c 09 02 c0       	push   0xc002095c
c0011d68:	e8 4f af ff ff       	call   c000ccbc <panic(char const*)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d74:	eb 9c                	jmp    c0011d12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d7a:	e8 c4 b9 ff ff       	call   c000d743 <Phys::allocatePage()>
c0011d7f:	89 c5                	mov    ebp,eax
c0011d81:	e8 c7 f3 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d8d:	6a 01                	push   0x1
c0011d8f:	e8 29 f2 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0011d94:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d9b:	6a 01                	push   0x1
c0011d9d:	50                   	push   eax
c0011d9e:	55                   	push   ebp
c0011d9f:	81 cd 07 04 00 00    	or     ebp,0x407
c0011da5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011da9:	51                   	push   ecx
c0011daa:	e8 31 fb ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011daf:	83 c4 1c             	add    esp,0x1c
c0011db2:	68 00 10 00 00       	push   0x1000
c0011db7:	6a 00                	push   0x0
c0011db9:	50                   	push   eax
c0011dba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dbe:	e8 45 e8 fe ff       	call   c0000608 <memset>
c0011dc3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dc7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dca:	e8 24 f5 ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dcf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dd2:	83 c4 10             	add    esp,0x10
c0011dd5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ddc:	e9 48 ff ff ff       	jmp    c0011d29 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011de1:	90                   	nop

c0011de2 <VAS::VAS(bool)>:
c0011de2:	53                   	push   ebx
c0011de3:	83 ec 28             	sub    esp,0x28
c0011de6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011df2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dfd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e01:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e04:	e8 3a b9 ff ff       	call   c000d743 <Phys::allocatePage()>
c0011e09:	89 c2                	mov    edx,eax
c0011e0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e12:	e8 36 f3 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0011e17:	89 c3                	mov    ebx,eax
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	6a 01                	push   0x1
c0011e1e:	e8 9a f1 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	89 c2                	mov    edx,eax
c0011e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e2f:	83 ec 0c             	sub    esp,0xc
c0011e32:	6a 03                	push   0x3
c0011e34:	6a 01                	push   0x1
c0011e36:	52                   	push   edx
c0011e37:	50                   	push   eax
c0011e38:	53                   	push   ebx
c0011e39:	e8 a2 fa ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e3e:	83 c4 20             	add    esp,0x20
c0011e41:	89 c2                	mov    edx,eax
c0011e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e4a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e52:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e5a:	7f 1c                	jg     c0011e78 <VAS::VAS(bool)+0x96>
c0011e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e67:	c1 e2 02             	shl    edx,0x2
c0011e6a:	01 d0                	add    eax,edx
c0011e6c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e72:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e76:	eb da                	jmp    c0011e52 <VAS::VAS(bool)+0x70>
c0011e78:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e80:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e88:	7f 71                	jg     c0011efb <VAS::VAS(bool)+0x119>
c0011e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e8e:	2d 00 02 00 00       	sub    eax,0x200
c0011e93:	c1 e0 0c             	shl    eax,0xc
c0011e96:	83 c8 03             	or     eax,0x3
c0011e99:	89 c3                	mov    ebx,eax
c0011e9b:	e8 06 50 00 00       	call   c0016ea6 <thisCPU()>
c0011ea0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ea6:	83 e0 10             	and    eax,0x10
c0011ea9:	84 c0                	test   al,al
c0011eab:	74 07                	je     c0011eb4 <VAS::VAS(bool)+0xd2>
c0011ead:	b8 00 01 00 00       	mov    eax,0x100
c0011eb2:	eb 05                	jmp    c0011eb9 <VAS::VAS(bool)+0xd7>
c0011eb4:	b8 00 00 00 00       	mov    eax,0x0
c0011eb9:	09 d8                	or     eax,ebx
c0011ebb:	89 c1                	mov    ecx,eax
c0011ebd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ec8:	c1 e2 02             	shl    edx,0x2
c0011ecb:	01 d0                	add    eax,edx
c0011ecd:	89 ca                	mov    edx,ecx
c0011ecf:	89 10                	mov    DWORD PTR [eax],edx
c0011ed1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ed5:	2d 40 03 00 00       	sub    eax,0x340
c0011eda:	83 f8 7f             	cmp    eax,0x7f
c0011edd:	77 16                	ja     c0011ef5 <VAS::VAS(bool)+0x113>
c0011edf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ee6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eea:	c1 e2 02             	shl    edx,0x2
c0011eed:	01 d0                	add    eax,edx
c0011eef:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ef5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ef9:	eb 85                	jmp    c0011e80 <VAS::VAS(bool)+0x9e>
c0011efb:	e8 a6 4f 00 00       	call   c0016ea6 <thisCPU()>
c0011f00:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f06:	83 e0 10             	and    eax,0x10
c0011f09:	84 c0                	test   al,al
c0011f0b:	74 07                	je     c0011f14 <VAS::VAS(bool)+0x132>
c0011f0d:	b8 03 41 00 00       	mov    eax,0x4103
c0011f12:	eb 05                	jmp    c0011f19 <VAS::VAS(bool)+0x137>
c0011f14:	b8 03 40 00 00       	mov    eax,0x4003
c0011f19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f1d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f20:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f26:	89 02                	mov    DWORD PTR [edx],eax
c0011f28:	e8 79 4f 00 00       	call   c0016ea6 <thisCPU()>
c0011f2d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f33:	83 ec 08             	sub    esp,0x8
c0011f36:	50                   	push   eax
c0011f37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f3b:	e8 84 f9 ff ff       	call   c00118c4 <VAS::setCPUSpecific(unsigned long)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f47:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f4a:	e8 57 4f 00 00       	call   c0016ea6 <thisCPU()>
c0011f4f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f55:	83 e0 10             	and    eax,0x10
c0011f58:	84 c0                	test   al,al
c0011f5a:	74 07                	je     c0011f63 <VAS::VAS(bool)+0x181>
c0011f5c:	b8 00 01 00 00       	mov    eax,0x100
c0011f61:	eb 05                	jmp    c0011f68 <VAS::VAS(bool)+0x186>
c0011f63:	b8 00 00 00 00       	mov    eax,0x0
c0011f68:	09 d8                	or     eax,ebx
c0011f6a:	89 c2                	mov    edx,eax
c0011f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f73:	05 fc 0f 00 00       	add    eax,0xffc
c0011f78:	83 ca 03             	or     edx,0x3
c0011f7b:	89 10                	mov    DWORD PTR [eax],edx
c0011f7d:	e8 24 4f 00 00       	call   c0016ea6 <thisCPU()>
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	50                   	push   eax
c0011f86:	e8 af 17 00 00       	call   c001373a <Device::getName()>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	83 ec 08             	sub    esp,0x8
c0011f91:	68 dc 0a 02 c0       	push   0xc0020adc
c0011f96:	50                   	push   eax
c0011f97:	e8 5c e7 fe ff       	call   c00006f8 <strcmp>
c0011f9c:	83 c4 10             	add    esp,0x10
c0011f9f:	85 c0                	test   eax,eax
c0011fa1:	0f 94 c0             	sete   al
c0011fa4:	84 c0                	test   al,al
c0011fa6:	74 64                	je     c001200c <VAS::VAS(bool)+0x22a>
c0011fa8:	e8 76 c0 ff ff       	call   c000e023 <disableIRQs()>
c0011fad:	e8 f4 4e 00 00       	call   c0016ea6 <thisCPU()>
c0011fb2:	05 7c 09 00 00       	add    eax,0x97c
c0011fb7:	83 ec 0c             	sub    esp,0xc
c0011fba:	50                   	push   eax
c0011fbb:	e8 32 a7 ff ff       	call   c000c6f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fc8:	89 c3                	mov    ebx,eax
c0011fca:	e8 d7 4e 00 00       	call   c0016ea6 <thisCPU()>
c0011fcf:	05 7c 09 00 00       	add    eax,0x97c
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	50                   	push   eax
c0011fd8:	e8 15 a7 ff ff       	call   c000c6f2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	83 ec 08             	sub    esp,0x8
c0011fe3:	50                   	push   eax
c0011fe4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fe8:	e8 e7 f2 ff ff       	call   c00112d4 <VAS::getPageTableEntry(unsigned long)>
c0011fed:	83 c4 10             	add    esp,0x10
c0011ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff7:	6a 11                	push   0x11
c0011ff9:	53                   	push   ebx
c0011ffa:	50                   	push   eax
c0011ffb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fff:	e8 f0 f5 ff ff       	call   c00115f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012004:	83 c4 10             	add    esp,0x10
c0012007:	e8 25 c0 ff ff       	call   c000e031 <enableIRQs()>
c001200c:	90                   	nop
c001200d:	83 c4 28             	add    esp,0x28
c0012010:	5b                   	pop    ebx
c0012011:	c3                   	ret    

c0012012 <mapVASFirstTime>:
c0012012:	55                   	push   ebp
c0012013:	57                   	push   edi
c0012014:	56                   	push   esi
c0012015:	53                   	push   ebx
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001201e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012021:	4a                   	dec    edx
c0012022:	0f 84 99 00 00 00    	je     c00120c1 <mapVASFirstTime+0xaf>
c0012028:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001202b:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001202e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012033:	c1 e5 15             	shl    ebp,0x15
c0012036:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001203b:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012041:	29 eb                	sub    ebx,ebp
c0012043:	29 ee                	sub    esi,ebp
c0012045:	e8 f9 b6 ff ff       	call   c000d743 <Phys::allocatePage()>
c001204a:	83 ec 0c             	sub    esp,0xc
c001204d:	68 03 04 00 00       	push   0x403
c0012052:	6a 01                	push   0x1
c0012054:	53                   	push   ebx
c0012055:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001205b:	50                   	push   eax
c001205c:	57                   	push   edi
c001205d:	e8 7e f8 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012062:	83 c4 20             	add    esp,0x20
c0012065:	39 f3                	cmp    ebx,esi
c0012067:	75 dc                	jne    c0012045 <mapVASFirstTime+0x33>
c0012069:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001206e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012073:	29 ee                	sub    esi,ebp
c0012075:	29 e8                	sub    eax,ebp
c0012077:	89 c5                	mov    ebp,eax
c0012079:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001207d:	19 db                	sbb    ebx,ebx
c001207f:	e8 bf b6 ff ff       	call   c000d743 <Phys::allocatePage()>
c0012084:	83 e3 04             	and    ebx,0x4
c0012087:	83 ec 0c             	sub    esp,0xc
c001208a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012090:	53                   	push   ebx
c0012091:	6a 01                	push   0x1
c0012093:	56                   	push   esi
c0012094:	81 ee 00 10 00 00    	sub    esi,0x1000
c001209a:	50                   	push   eax
c001209b:	57                   	push   edi
c001209c:	e8 3f f8 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120a1:	83 c4 20             	add    esp,0x20
c00120a4:	39 f5                	cmp    ebp,esi
c00120a6:	75 d1                	jne    c0012079 <mapVASFirstTime+0x67>
c00120a8:	e8 ac c1 00 00       	call   c001e259 <CPU::readCR3()>
c00120ad:	83 ec 0c             	sub    esp,0xc
c00120b0:	50                   	push   eax
c00120b1:	e8 c7 c1 00 00       	call   c001e27d <CPU::writeCR3(unsigned long)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	83 c4 0c             	add    esp,0xc
c00120bc:	5b                   	pop    ebx
c00120bd:	5e                   	pop    esi
c00120be:	5f                   	pop    edi
c00120bf:	5d                   	pop    ebp
c00120c0:	c3                   	ret    
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	68 ea 0a 02 c0       	push   0xc0020aea
c00120c9:	e8 d0 aa ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	83 c4 0c             	add    esp,0xc
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	5d                   	pop    ebp
c00120d8:	c3                   	ret    

c00120d9 <__cxa_atexit>:
c00120d9:	31 c0                	xor    eax,eax
c00120db:	c3                   	ret    

c00120dc <__cxa_finalize>:
c00120dc:	c3                   	ret    

c00120dd <__stack_chk_fail>:
c00120dd:	55                   	push   ebp
c00120de:	89 e5                	mov    ebp,esp
c00120e0:	83 ec 10             	sub    esp,0x10
c00120e3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120e6:	68 03 0b 02 c0       	push   0xc0020b03
c00120eb:	e8 ae aa ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00120f0:	58                   	pop    eax
c00120f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120f4:	5a                   	pop    edx
c00120f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00120f8:	68 03 0b 02 c0       	push   0xc0020b03
c00120fd:	e8 9c aa ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0012102:	59                   	pop    ecx
c0012103:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012106:	5a                   	pop    edx
c0012107:	8b 00                	mov    eax,DWORD PTR [eax]
c0012109:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210c:	68 03 0b 02 c0       	push   0xc0020b03
c0012111:	e8 88 aa ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0012116:	59                   	pop    ecx
c0012117:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211a:	5a                   	pop    edx
c001211b:	8b 00                	mov    eax,DWORD PTR [eax]
c001211d:	8b 00                	mov    eax,DWORD PTR [eax]
c001211f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012122:	68 03 0b 02 c0       	push   0xc0020b03
c0012127:	e8 72 aa ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001212c:	c7 04 24 0b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b0b
c0012133:	e8 84 ab ff ff       	call   c000ccbc <panic(char const*)>
c0012138:	83 c4 10             	add    esp,0x10
c001213b:	c9                   	leave  
c001213c:	c3                   	ret    

c001213d <__cxa_pure_virtual>:
c001213d:	83 ec 18             	sub    esp,0x18
c0012140:	68 23 0b 02 c0       	push   0xc0020b23
c0012145:	e8 72 ab ff ff       	call   c000ccbc <panic(char const*)>
c001214a:	83 c4 1c             	add    esp,0x1c
c001214d:	c3                   	ret    

c001214e <operator new(unsigned long)>:
c001214e:	e9 46 b0 ff ff       	jmp    c000d199 <malloc>

c0012153 <operator new[](unsigned long)>:
c0012153:	e9 41 b0 ff ff       	jmp    c000d199 <malloc>

c0012158 <operator delete(void*)>:
c0012158:	e9 5c b0 ff ff       	jmp    c000d1b9 <rfree>

c001215d <operator delete(void*, unsigned long)>:
c001215d:	e9 57 b0 ff ff       	jmp    c000d1b9 <rfree>

c0012162 <operator delete[](void*)>:
c0012162:	e9 52 b0 ff ff       	jmp    c000d1b9 <rfree>

c0012167 <operator delete[](void*, unsigned long)>:
c0012167:	e9 4d b0 ff ff       	jmp    c000d1b9 <rfree>

c001216c <File::read(unsigned long long, void*, int*)>:
c001216c:	53                   	push   ebx
c001216d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012175:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001217c:	3c 19                	cmp    al,0x19
c001217e:	77 35                	ja     c00121b5 <File::read(unsigned long long, void*, int*)+0x49>
c0012180:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0012187:	85 c0                	test   eax,eax
c0012189:	74 2a                	je     c00121b5 <File::read(unsigned long long, void*, int*)+0x49>
c001218b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012191:	85 c0                	test   eax,eax
c0012193:	74 20                	je     c00121b5 <File::read(unsigned long long, void*, int*)+0x49>
c0012195:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012199:	74 21                	je     c00121bc <File::read(unsigned long long, void*, int*)+0x50>
c001219b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00121a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00121a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121af:	5b                   	pop    ebx
c00121b0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00121b3:	ff e0                	jmp    eax
c00121b5:	b8 0b 00 00 00       	mov    eax,0xb
c00121ba:	eb 05                	jmp    c00121c1 <File::read(unsigned long long, void*, int*)+0x55>
c00121bc:	b8 05 00 00 00       	mov    eax,0x5
c00121c1:	5b                   	pop    ebx
c00121c2:	c3                   	ret    
c00121c3:	90                   	nop

c00121c4 <File::write(unsigned long long, void*, int*)>:
c00121c4:	53                   	push   ebx
c00121c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00121d4:	3c 19                	cmp    al,0x19
c00121d6:	77 35                	ja     c001220d <File::write(unsigned long long, void*, int*)+0x49>
c00121d8:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c00121df:	85 c0                	test   eax,eax
c00121e1:	74 2a                	je     c001220d <File::write(unsigned long long, void*, int*)+0x49>
c00121e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00121e9:	85 c0                	test   eax,eax
c00121eb:	74 20                	je     c001220d <File::write(unsigned long long, void*, int*)+0x49>
c00121ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00121f1:	74 21                	je     c0012214 <File::write(unsigned long long, void*, int*)+0x50>
c00121f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00121f9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00121ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012207:	5b                   	pop    ebx
c0012208:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001220b:	ff e0                	jmp    eax
c001220d:	b8 0b 00 00 00       	mov    eax,0xb
c0012212:	eb 05                	jmp    c0012219 <File::write(unsigned long long, void*, int*)+0x55>
c0012214:	b8 05 00 00 00       	mov    eax,0x5
c0012219:	5b                   	pop    ebx
c001221a:	c3                   	ret    
c001221b:	90                   	nop

c001221c <Directory::read(unsigned long long, void*, int*)>:
c001221c:	53                   	push   ebx
c001221d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012221:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012225:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001222c:	3c 19                	cmp    al,0x19
c001222e:	77 35                	ja     c0012265 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012230:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0012237:	85 c0                	test   eax,eax
c0012239:	74 2a                	je     c0012265 <Directory::read(unsigned long long, void*, int*)+0x49>
c001223b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012241:	85 c0                	test   eax,eax
c0012243:	74 20                	je     c0012265 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012245:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012249:	74 21                	je     c001226c <Directory::read(unsigned long long, void*, int*)+0x50>
c001224b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001224d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012251:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001225b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001225f:	5b                   	pop    ebx
c0012260:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012263:	ff e0                	jmp    eax
c0012265:	b8 0b 00 00 00       	mov    eax,0xb
c001226a:	eb 05                	jmp    c0012271 <Directory::read(unsigned long long, void*, int*)+0x55>
c001226c:	b8 05 00 00 00       	mov    eax,0x5
c0012271:	5b                   	pop    ebx
c0012272:	c3                   	ret    
c0012273:	90                   	nop

c0012274 <Directory::write(unsigned long long, void*, int*)>:
c0012274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012278:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001227f:	b8 0b 00 00 00       	mov    eax,0xb
c0012284:	80 fa 19             	cmp    dl,0x19
c0012287:	77 18                	ja     c00122a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012289:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012290:	85 d2                	test   edx,edx
c0012292:	74 0d                	je     c00122a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012294:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001229b:	19 c0                	sbb    eax,eax
c001229d:	83 e0 0a             	and    eax,0xa
c00122a0:	40                   	inc    eax
c00122a1:	c3                   	ret    

c00122a2 <File::isAtty()>:
c00122a2:	31 c0                	xor    eax,eax
c00122a4:	c3                   	ret    
c00122a5:	90                   	nop

c00122a6 <Directory::isAtty()>:
c00122a6:	31 c0                	xor    eax,eax
c00122a8:	c3                   	ret    
c00122a9:	90                   	nop

c00122aa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00122aa:	b8 0a 00 00 00       	mov    eax,0xa
c00122af:	c3                   	ret    

c00122b0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00122b0:	b8 0a 00 00 00       	mov    eax,0xa
c00122b5:	c3                   	ret    

c00122b6 <File::~File()>:
c00122b6:	83 ec 0c             	sub    esp,0xc
c00122b9:	ba a4 0b 02 c0       	mov    edx,0xc0020ba4
c00122be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c2:	89 10                	mov    DWORD PTR [eax],edx
c00122c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c8:	83 ec 0c             	sub    esp,0xc
c00122cb:	50                   	push   eax
c00122cc:	e8 0d eb ff ff       	call   c0010dde <UnixFile::~UnixFile()>
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	90                   	nop
c00122d5:	83 c4 0c             	add    esp,0xc
c00122d8:	c3                   	ret    
c00122d9:	90                   	nop

c00122da <File::~File()>:
c00122da:	83 ec 0c             	sub    esp,0xc
c00122dd:	83 ec 0c             	sub    esp,0xc
c00122e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122e4:	e8 cd ff ff ff       	call   c00122b6 <File::~File()>
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	83 ec 08             	sub    esp,0x8
c00122ef:	68 14 01 00 00       	push   0x114
c00122f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122f8:	e8 60 fe ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	83 c4 0c             	add    esp,0xc
c0012303:	c3                   	ret    

c0012304 <Directory::~Directory()>:
c0012304:	83 ec 0c             	sub    esp,0xc
c0012307:	ba c0 0b 02 c0       	mov    edx,0xc0020bc0
c001230c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012310:	89 10                	mov    DWORD PTR [eax],edx
c0012312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	50                   	push   eax
c001231a:	e8 bf ea ff ff       	call   c0010dde <UnixFile::~UnixFile()>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	90                   	nop
c0012323:	83 c4 0c             	add    esp,0xc
c0012326:	c3                   	ret    
c0012327:	90                   	nop

c0012328 <Directory::~Directory()>:
c0012328:	83 ec 0c             	sub    esp,0xc
c001232b:	83 ec 0c             	sub    esp,0xc
c001232e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012332:	e8 cd ff ff ff       	call   c0012304 <Directory::~Directory()>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	83 ec 08             	sub    esp,0x8
c001233d:	68 14 01 00 00       	push   0x114
c0012342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012346:	e8 12 fe ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	83 c4 0c             	add    esp,0xc
c0012351:	c3                   	ret    

c0012352 <Filesystem::Filesystem()>:
c0012352:	ba 40 0b 02 c0       	mov    edx,0xc0020b40
c0012357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001235b:	89 10                	mov    DWORD PTR [eax],edx
c001235d:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c0012363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012367:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001236a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001236e:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0012373:	90                   	nop
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <Filesystem::~Filesystem()>:
c0012376:	ba 40 0b 02 c0       	mov    edx,0xc0020b40
c001237b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001237f:	89 10                	mov    DWORD PTR [eax],edx
c0012381:	90                   	nop
c0012382:	c3                   	ret    
c0012383:	90                   	nop

c0012384 <Filesystem::~Filesystem()>:
c0012384:	83 ec 0c             	sub    esp,0xc
c0012387:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001238b:	e8 e6 ff ff ff       	call   c0012376 <Filesystem::~Filesystem()>
c0012390:	83 c4 04             	add    esp,0x4
c0012393:	83 ec 08             	sub    esp,0x8
c0012396:	6a 08                	push   0x8
c0012398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001239c:	e8 bc fd ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	83 c4 0c             	add    esp,0xc
c00123a7:	c3                   	ret    

c00123a8 <initVFS()>:
c00123a8:	83 ec 18             	sub    esp,0x18
c00123ab:	6a 08                	push   0x8
c00123ad:	e8 9c fd ff ff       	call   c001214e <operator new(unsigned long)>
c00123b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00123b5:	e8 46 71 00 00       	call   c0019500 <FAT::FAT()>
c00123ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00123c1:	e8 88 fd ff ff       	call   c001214e <operator new(unsigned long)>
c00123c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00123c9:	e8 3c 83 00 00       	call   c001a70a <ISO9660::ISO9660()>
c00123ce:	83 c4 1c             	add    esp,0x1c
c00123d1:	c3                   	ret    

c00123d2 <standardiseFiles(char*, char const*, char const*)>:
c00123d2:	55                   	push   ebp
c00123d3:	57                   	push   edi
c00123d4:	56                   	push   esi
c00123d5:	53                   	push   ebx
c00123d6:	81 ec 10 04 00 00    	sub    esp,0x410
c00123dc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00123e3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00123ea:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00123f1:	68 00 04 00 00       	push   0x400
c00123f6:	6a 00                	push   0x0
c00123f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00123fc:	56                   	push   esi
c00123fd:	e8 06 e2 fe ff       	call   c0000608 <memset>
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012409:	75 0b                	jne    c0012416 <standardiseFiles(char*, char const*, char const*)+0x44>
c001240b:	50                   	push   eax
c001240c:	50                   	push   eax
c001240d:	57                   	push   edi
c001240e:	56                   	push   esi
c001240f:	e8 93 e2 fe ff       	call   c00006a7 <strcpy>
c0012414:	eb 41                	jmp    c0012457 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012416:	8a 07                	mov    al,BYTE PTR [edi]
c0012418:	3c 5c                	cmp    al,0x5c
c001241a:	74 04                	je     c0012420 <standardiseFiles(char*, char const*, char const*)+0x4e>
c001241c:	3c 2f                	cmp    al,0x2f
c001241e:	75 18                	jne    c0012438 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012420:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012423:	3c 60                	cmp    al,0x60
c0012425:	7e 03                	jle    c001242a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012427:	83 e8 20             	sub    eax,0x20
c001242a:	88 04 24             	mov    BYTE PTR [esp],al
c001242d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012434:	50                   	push   eax
c0012435:	50                   	push   eax
c0012436:	eb 18                	jmp    c0012450 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012438:	50                   	push   eax
c0012439:	50                   	push   eax
c001243a:	55                   	push   ebp
c001243b:	56                   	push   esi
c001243c:	e8 66 e2 fe ff       	call   c00006a7 <strcpy>
c0012441:	5a                   	pop    edx
c0012442:	59                   	pop    ecx
c0012443:	68 36 02 02 c0       	push   0xc0020236
c0012448:	56                   	push   esi
c0012449:	e8 10 e3 fe ff       	call   c000075e <strcat>
c001244e:	5d                   	pop    ebp
c001244f:	58                   	pop    eax
c0012450:	57                   	push   edi
c0012451:	56                   	push   esi
c0012452:	e8 07 e3 fe ff       	call   c000075e <strcat>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001245d:	3c 60                	cmp    al,0x60
c001245f:	7e 03                	jle    c0012464 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012461:	83 e8 20             	sub    eax,0x20
c0012464:	88 04 24             	mov    BYTE PTR [esp],al
c0012467:	88 03                	mov    BYTE PTR [ebx],al
c0012469:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012470:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012476:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001247a:	bf 03 00 00 00       	mov    edi,0x3
c001247f:	b8 03 00 00 00       	mov    eax,0x3
c0012484:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012487:	84 d2                	test   dl,dl
c0012489:	0f 84 91 00 00 00    	je     c0012520 <standardiseFiles(char*, char const*, char const*)+0x14e>
c001248f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012492:	80 fa 5c             	cmp    dl,0x5c
c0012495:	74 05                	je     c001249c <standardiseFiles(char*, char const*, char const*)+0xca>
c0012497:	80 fa 2f             	cmp    dl,0x2f
c001249a:	75 12                	jne    c00124ae <standardiseFiles(char*, char const*, char const*)+0xdc>
c001249c:	89 c5                	mov    ebp,eax
c001249e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00124a3:	74 09                	je     c00124ae <standardiseFiles(char*, char const*, char const*)+0xdc>
c00124a5:	40                   	inc    eax
c00124a6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00124aa:	89 cf                	mov    edi,ecx
c00124ac:	eb d6                	jmp    c0012484 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00124ae:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00124b3:	75 5b                	jne    c0012510 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00124b5:	80 fa 2e             	cmp    dl,0x2e
c00124b8:	75 56                	jne    c0012510 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00124ba:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00124be:	74 19                	je     c00124d9 <standardiseFiles(char*, char const*, char const*)+0x107>
c00124c0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00124c5:	74 53                	je     c001251a <standardiseFiles(char*, char const*, char const*)+0x148>
c00124c7:	89 f9                	mov    ecx,edi
c00124c9:	41                   	inc    ecx
c00124ca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00124cd:	80 fa 2f             	cmp    dl,0x2f
c00124d0:	74 f7                	je     c00124c9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00124d2:	80 fa 5c             	cmp    dl,0x5c
c00124d5:	74 f2                	je     c00124c9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00124d7:	eb d1                	jmp    c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c00124d9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00124de:	74 3a                	je     c001251a <standardiseFiles(char*, char const*, char const*)+0x148>
c00124e0:	83 f8 03             	cmp    eax,0x3
c00124e3:	74 c5                	je     c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c00124e5:	41                   	inc    ecx
c00124e6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00124e9:	80 fa 2f             	cmp    dl,0x2f
c00124ec:	74 f7                	je     c00124e5 <standardiseFiles(char*, char const*, char const*)+0x113>
c00124ee:	80 fa 5c             	cmp    dl,0x5c
c00124f1:	74 f2                	je     c00124e5 <standardiseFiles(char*, char const*, char const*)+0x113>
c00124f3:	48                   	dec    eax
c00124f4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00124f8:	75 06                	jne    c0012500 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00124fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00124fe:	eb f3                	jmp    c00124f3 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012500:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012504:	74 07                	je     c001250d <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012506:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001250a:	48                   	dec    eax
c001250b:	eb f3                	jmp    c0012500 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001250d:	40                   	inc    eax
c001250e:	eb 9a                	jmp    c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012510:	80 fa 2f             	cmp    dl,0x2f
c0012513:	74 95                	je     c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012515:	80 fa 5c             	cmp    dl,0x5c
c0012518:	74 90                	je     c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c001251a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001251d:	40                   	inc    eax
c001251e:	eb 8a                	jmp    c00124aa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012520:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	53                   	push   ebx
c0012528:	e8 f8 e0 fe ff       	call   c0000625 <strlen>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012535:	75 26                	jne    c001255d <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012537:	83 ec 0c             	sub    esp,0xc
c001253a:	53                   	push   ebx
c001253b:	e8 e5 e0 fe ff       	call   c0000625 <strlen>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012548:	74 26                	je     c0012570 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001254a:	83 ec 0c             	sub    esp,0xc
c001254d:	53                   	push   ebx
c001254e:	e8 d2 e0 fe ff       	call   c0000625 <strlen>
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001255b:	eb c7                	jmp    c0012524 <standardiseFiles(char*, char const*, char const*)+0x152>
c001255d:	83 ec 0c             	sub    esp,0xc
c0012560:	53                   	push   ebx
c0012561:	e8 bf e0 fe ff       	call   c0000625 <strlen>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001256e:	74 c7                	je     c0012537 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012570:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012576:	5b                   	pop    ebx
c0012577:	5e                   	pop    esi
c0012578:	5f                   	pop    edi
c0012579:	5d                   	pop    ebp
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <File::File(char const*, Process*)>:
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012583:	83 ec 08             	sub    esp,0x8
c0012586:	6a 00                	push   0x0
c0012588:	50                   	push   eax
c0012589:	e8 ec e7 ff ff       	call   c0010d7a <UnixFile::UnixFile(int)>
c001258e:	83 c4 10             	add    esp,0x10
c0012591:	ba a4 0b 02 c0       	mov    edx,0xc0020ba4
c0012596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001259a:	89 10                	mov    DWORD PTR [eax],edx
c001259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125a0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00125a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125aa:	83 c0 0d             	add    eax,0xd
c00125ad:	83 ec 04             	sub    esp,0x4
c00125b0:	52                   	push   edx
c00125b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125b5:	50                   	push   eax
c00125b6:	e8 17 fe ff ff       	call   c00123d2 <standardiseFiles(char*, char const*, char const*)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00125c5:	8d 50 bf             	lea    edx,[eax-0x41]
c00125c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00125d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00125da:	90                   	nop
c00125db:	83 c4 0c             	add    esp,0xc
c00125de:	c3                   	ret    
c00125df:	90                   	nop

c00125e0 <File::open(FileOpenMode)>:
c00125e0:	53                   	push   ebx
c00125e1:	b8 0b 00 00 00       	mov    eax,0xb
c00125e6:	83 ec 08             	sub    esp,0x8
c00125e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125ed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00125f4:	80 fa 19             	cmp    dl,0x19
c00125f7:	77 40                	ja     c0012639 <File::open(FileOpenMode)+0x59>
c00125f9:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012600:	85 d2                	test   edx,edx
c0012602:	74 35                	je     c0012639 <File::open(FileOpenMode)+0x59>
c0012604:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001260a:	85 d2                	test   edx,edx
c001260c:	74 2b                	je     c0012639 <File::open(FileOpenMode)+0x59>
c001260e:	b8 06 00 00 00       	mov    eax,0x6
c0012613:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012617:	75 20                	jne    c0012639 <File::open(FileOpenMode)+0x59>
c0012619:	8b 02                	mov    eax,DWORD PTR [edx]
c001261b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012625:	51                   	push   ecx
c0012626:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012629:	51                   	push   ecx
c001262a:	52                   	push   edx
c001262b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001262e:	83 c4 10             	add    esp,0x10
c0012631:	85 c0                	test   eax,eax
c0012633:	75 04                	jne    c0012639 <File::open(FileOpenMode)+0x59>
c0012635:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012639:	83 c4 08             	add    esp,0x8
c001263c:	5b                   	pop    ebx
c001263d:	c3                   	ret    

c001263e <File::close()>:
c001263e:	53                   	push   ebx
c001263f:	b8 0b 00 00 00       	mov    eax,0xb
c0012644:	83 ec 08             	sub    esp,0x8
c0012647:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001264b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012652:	80 fa 19             	cmp    dl,0x19
c0012655:	77 41                	ja     c0012698 <File::close()+0x5a>
c0012657:	8b 1c 95 40 3c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc3c0]
c001265e:	85 db                	test   ebx,ebx
c0012660:	74 36                	je     c0012698 <File::close()+0x5a>
c0012662:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012669:	74 2d                	je     c0012698 <File::close()+0x5a>
c001266b:	b8 05 00 00 00       	mov    eax,0x5
c0012670:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012674:	74 22                	je     c0012698 <File::close()+0x5a>
c0012676:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001267a:	8b 04 95 40 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c0012681:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012687:	53                   	push   ebx
c0012688:	53                   	push   ebx
c0012689:	8b 10                	mov    edx,DWORD PTR [eax]
c001268b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012691:	50                   	push   eax
c0012692:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	83 c4 08             	add    esp,0x8
c001269b:	5b                   	pop    ebx
c001269c:	c3                   	ret    
c001269d:	90                   	nop

c001269e <File::seek(unsigned long long)>:
c001269e:	56                   	push   esi
c001269f:	53                   	push   ebx
c00126a0:	b8 0b 00 00 00       	mov    eax,0xb
c00126a5:	51                   	push   ecx
c00126a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00126ae:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00126b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00126b9:	80 fa 19             	cmp    dl,0x19
c00126bc:	77 31                	ja     c00126ef <File::seek(unsigned long long)+0x51>
c00126be:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c00126c5:	85 d2                	test   edx,edx
c00126c7:	74 26                	je     c00126ef <File::seek(unsigned long long)+0x51>
c00126c9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00126cf:	85 d2                	test   edx,edx
c00126d1:	74 1c                	je     c00126ef <File::seek(unsigned long long)+0x51>
c00126d3:	b8 05 00 00 00       	mov    eax,0x5
c00126d8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00126dc:	74 11                	je     c00126ef <File::seek(unsigned long long)+0x51>
c00126de:	8b 02                	mov    eax,DWORD PTR [edx]
c00126e0:	53                   	push   ebx
c00126e1:	51                   	push   ecx
c00126e2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00126e8:	52                   	push   edx
c00126e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	5a                   	pop    edx
c00126f0:	5b                   	pop    ebx
c00126f1:	5e                   	pop    esi
c00126f2:	c3                   	ret    
c00126f3:	90                   	nop

c00126f4 <File::tell(unsigned long long*)>:
c00126f4:	83 ec 0c             	sub    esp,0xc
c00126f7:	b8 0b 00 00 00       	mov    eax,0xb
c00126fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012700:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012707:	80 fa 19             	cmp    dl,0x19
c001270a:	77 34                	ja     c0012740 <File::tell(unsigned long long*)+0x4c>
c001270c:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012713:	85 d2                	test   edx,edx
c0012715:	74 29                	je     c0012740 <File::tell(unsigned long long*)+0x4c>
c0012717:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001271d:	85 d2                	test   edx,edx
c001271f:	74 1f                	je     c0012740 <File::tell(unsigned long long*)+0x4c>
c0012721:	b8 05 00 00 00       	mov    eax,0x5
c0012726:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001272a:	74 14                	je     c0012740 <File::tell(unsigned long long*)+0x4c>
c001272c:	50                   	push   eax
c001272d:	8b 02                	mov    eax,DWORD PTR [edx]
c001272f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012733:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012739:	52                   	push   edx
c001273a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001273d:	83 c4 10             	add    esp,0x10
c0012740:	83 c4 0c             	add    esp,0xc
c0012743:	c3                   	ret    

c0012744 <File::rewind()>:
c0012744:	83 ec 10             	sub    esp,0x10
c0012747:	6a 00                	push   0x0
c0012749:	6a 00                	push   0x0
c001274b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001274f:	e8 4a ff ff ff       	call   c001269e <File::seek(unsigned long long)>
c0012754:	83 c4 1c             	add    esp,0x1c
c0012757:	c3                   	ret    

c0012758 <File::unlink()>:
c0012758:	83 ec 0c             	sub    esp,0xc
c001275b:	b8 0b 00 00 00       	mov    eax,0xb
c0012760:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012764:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001276b:	80 f9 19             	cmp    cl,0x19
c001276e:	77 2f                	ja     c001279f <File::unlink()+0x47>
c0012770:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012777:	85 c9                	test   ecx,ecx
c0012779:	74 24                	je     c001279f <File::unlink()+0x47>
c001277b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012781:	85 c9                	test   ecx,ecx
c0012783:	74 1a                	je     c001279f <File::unlink()+0x47>
c0012785:	b8 06 00 00 00       	mov    eax,0x6
c001278a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001278e:	75 0f                	jne    c001279f <File::unlink()+0x47>
c0012790:	83 c2 0d             	add    edx,0xd
c0012793:	50                   	push   eax
c0012794:	50                   	push   eax
c0012795:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012797:	52                   	push   edx
c0012798:	51                   	push   ecx
c0012799:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001279c:	83 c4 10             	add    esp,0x10
c001279f:	83 c4 0c             	add    esp,0xc
c00127a2:	c3                   	ret    
c00127a3:	90                   	nop

c00127a4 <File::rename(char const*)>:
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	b8 0b 00 00 00       	mov    eax,0xb
c00127ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00127b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00127b7:	80 f9 19             	cmp    cl,0x19
c00127ba:	77 32                	ja     c00127ee <File::rename(char const*)+0x4a>
c00127bc:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c00127c3:	85 c9                	test   ecx,ecx
c00127c5:	74 27                	je     c00127ee <File::rename(char const*)+0x4a>
c00127c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00127cd:	85 c9                	test   ecx,ecx
c00127cf:	74 1d                	je     c00127ee <File::rename(char const*)+0x4a>
c00127d1:	b8 06 00 00 00       	mov    eax,0x6
c00127d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127da:	75 12                	jne    c00127ee <File::rename(char const*)+0x4a>
c00127dc:	83 c2 0d             	add    edx,0xd
c00127df:	50                   	push   eax
c00127e0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00127e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127e6:	52                   	push   edx
c00127e7:	51                   	push   ecx
c00127e8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	83 c4 0c             	add    esp,0xc
c00127f1:	c3                   	ret    

c00127f2 <File::chfatattr(unsigned char, unsigned char)>:
c00127f2:	57                   	push   edi
c00127f3:	b8 0b 00 00 00       	mov    eax,0xb
c00127f8:	56                   	push   esi
c00127f9:	53                   	push   ebx
c00127fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00127fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012802:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012809:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001280d:	80 f9 19             	cmp    cl,0x19
c0012810:	77 37                	ja     c0012849 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012812:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012819:	85 c9                	test   ecx,ecx
c001281b:	74 2c                	je     c0012849 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001281d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012823:	85 c9                	test   ecx,ecx
c0012825:	74 22                	je     c0012849 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012827:	b8 06 00 00 00       	mov    eax,0x6
c001282c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012830:	75 17                	jne    c0012849 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012832:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012834:	89 f0                	mov    eax,esi
c0012836:	83 c2 0d             	add    edx,0xd
c0012839:	0f b6 f0             	movzx  esi,al
c001283c:	0f b6 db             	movzx  ebx,bl
c001283f:	56                   	push   esi
c0012840:	53                   	push   ebx
c0012841:	52                   	push   edx
c0012842:	51                   	push   ecx
c0012843:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012846:	83 c4 10             	add    esp,0x10
c0012849:	5b                   	pop    ebx
c001284a:	5e                   	pop    esi
c001284b:	5f                   	pop    edi
c001284c:	c3                   	ret    
c001284d:	90                   	nop

c001284e <File::exists()>:
c001284e:	83 ec 0c             	sub    esp,0xc
c0012851:	31 c0                	xor    eax,eax
c0012853:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012857:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001285e:	80 f9 19             	cmp    cl,0x19
c0012861:	77 24                	ja     c0012887 <File::exists()+0x39>
c0012863:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c001286a:	85 c9                	test   ecx,ecx
c001286c:	74 19                	je     c0012887 <File::exists()+0x39>
c001286e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012874:	85 c9                	test   ecx,ecx
c0012876:	74 0f                	je     c0012887 <File::exists()+0x39>
c0012878:	83 c2 0d             	add    edx,0xd
c001287b:	50                   	push   eax
c001287c:	50                   	push   eax
c001287d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001287f:	52                   	push   edx
c0012880:	51                   	push   ecx
c0012881:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	83 c4 0c             	add    esp,0xc
c001288a:	c3                   	ret    
c001288b:	90                   	nop

c001288c <File::stat(unsigned long long*, bool*)>:
c001288c:	56                   	push   esi
c001288d:	53                   	push   ebx
c001288e:	50                   	push   eax
c001288f:	b8 0b 00 00 00       	mov    eax,0xb
c0012894:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012898:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001289c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00128a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128a7:	80 f9 19             	cmp    cl,0x19
c00128aa:	77 3d                	ja     c00128e9 <File::stat(unsigned long long*, bool*)+0x5d>
c00128ac:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c00128b3:	85 c9                	test   ecx,ecx
c00128b5:	74 32                	je     c00128e9 <File::stat(unsigned long long*, bool*)+0x5d>
c00128b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00128bd:	85 c9                	test   ecx,ecx
c00128bf:	74 28                	je     c00128e9 <File::stat(unsigned long long*, bool*)+0x5d>
c00128c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00128c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c7:	74 13                	je     c00128dc <File::stat(unsigned long long*, bool*)+0x50>
c00128c9:	83 ec 04             	sub    esp,0x4
c00128cc:	56                   	push   esi
c00128cd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00128d3:	51                   	push   ecx
c00128d4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00128d7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00128da:	eb 0a                	jmp    c00128e6 <File::stat(unsigned long long*, bool*)+0x5a>
c00128dc:	53                   	push   ebx
c00128dd:	83 c2 0d             	add    edx,0xd
c00128e0:	56                   	push   esi
c00128e1:	52                   	push   edx
c00128e2:	51                   	push   ecx
c00128e3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00128e6:	83 c4 10             	add    esp,0x10
c00128e9:	5a                   	pop    edx
c00128ea:	5b                   	pop    ebx
c00128eb:	5e                   	pop    esi
c00128ec:	c3                   	ret    

c00128ed <getcwd(Process*, char*, int)>:
c00128ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128f1:	31 c0                	xor    eax,eax
c00128f3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00128f6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00128fa:	7d 15                	jge    c0012911 <getcwd(Process*, char*, int)+0x24>
c00128fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012900:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012907:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001290a:	84 c9                	test   cl,cl
c001290c:	74 06                	je     c0012914 <getcwd(Process*, char*, int)+0x27>
c001290e:	40                   	inc    eax
c001290f:	eb e2                	jmp    c00128f3 <getcwd(Process*, char*, int)+0x6>
c0012911:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012914:	31 c0                	xor    eax,eax
c0012916:	c3                   	ret    

c0012917 <setcwd(Process*, char*)>:
c0012917:	55                   	push   ebp
c0012918:	57                   	push   edi
c0012919:	56                   	push   esi
c001291a:	53                   	push   ebx
c001291b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012921:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012928:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001292e:	57                   	push   edi
c001292f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012936:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001293a:	56                   	push   esi
c001293b:	e8 92 fa ff ff       	call   c00123d2 <standardiseFiles(char*, char const*, char const*)>
c0012940:	89 34 24             	mov    DWORD PTR [esp],esi
c0012943:	e8 dd dc fe ff       	call   c0000625 <strlen>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	83 f8 02             	cmp    eax,0x2
c001294e:	77 17                	ja     c0012967 <setcwd(Process*, char*)+0x50>
c0012950:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012955:	83 e8 41             	sub    eax,0x41
c0012958:	83 f8 19             	cmp    eax,0x19
c001295b:	76 24                	jbe    c0012981 <setcwd(Process*, char*)+0x6a>
c001295d:	b8 03 00 00 00       	mov    eax,0x3
c0012962:	e9 cb 00 00 00       	jmp    c0012a32 <setcwd(Process*, char*)+0x11b>
c0012967:	83 ec 0c             	sub    esp,0xc
c001296a:	56                   	push   esi
c001296b:	e8 b5 dc fe ff       	call   c0000625 <strlen>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	83 f8 03             	cmp    eax,0x3
c0012976:	75 33                	jne    c00129ab <setcwd(Process*, char*)+0x94>
c0012978:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001297d:	75 2c                	jne    c00129ab <setcwd(Process*, char*)+0x94>
c001297f:	eb cf                	jmp    c0012950 <setcwd(Process*, char*)+0x39>
c0012981:	8b 14 85 40 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc3c0]
c0012988:	b8 05 00 00 00       	mov    eax,0x5
c001298d:	85 d2                	test   edx,edx
c001298f:	0f 84 9d 00 00 00    	je     c0012a32 <setcwd(Process*, char*)+0x11b>
c0012995:	b8 06 00 00 00       	mov    eax,0x6
c001299a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00129a1:	0f 84 8b 00 00 00    	je     c0012a32 <setcwd(Process*, char*)+0x11b>
c00129a7:	51                   	push   ecx
c00129a8:	51                   	push   ecx
c00129a9:	eb 7b                	jmp    c0012a26 <setcwd(Process*, char*)+0x10f>
c00129ab:	83 ec 0c             	sub    esp,0xc
c00129ae:	68 14 01 00 00       	push   0x114
c00129b3:	e8 96 f7 ff ff       	call   c001214e <operator new(unsigned long)>
c00129b8:	83 c4 0c             	add    esp,0xc
c00129bb:	89 c3                	mov    ebx,eax
c00129bd:	55                   	push   ebp
c00129be:	56                   	push   esi
c00129bf:	50                   	push   eax
c00129c0:	e8 b7 fb ff ff       	call   c001257c <File::File(char const*, Process*)>
c00129c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00129ca:	83 c4 0c             	add    esp,0xc
c00129cd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00129d1:	50                   	push   eax
c00129d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129d6:	50                   	push   eax
c00129d7:	53                   	push   ebx
c00129d8:	e8 af fe ff ff       	call   c001288c <File::stat(unsigned long long*, bool*)>
c00129dd:	83 c4 10             	add    esp,0x10
c00129e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00129e2:	83 f8 02             	cmp    eax,0x2
c00129e5:	75 09                	jne    c00129f0 <setcwd(Process*, char*)+0xd9>
c00129e7:	83 ec 0c             	sub    esp,0xc
c00129ea:	53                   	push   ebx
c00129eb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00129ee:	eb 0d                	jmp    c00129fd <setcwd(Process*, char*)+0xe6>
c00129f0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00129f3:	85 c0                	test   eax,eax
c00129f5:	74 10                	je     c0012a07 <setcwd(Process*, char*)+0xf0>
c00129f7:	83 ec 0c             	sub    esp,0xc
c00129fa:	53                   	push   ebx
c00129fb:	ff d2                	call   edx
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	b8 01 00 00 00       	mov    eax,0x1
c0012a05:	eb 2b                	jmp    c0012a32 <setcwd(Process*, char*)+0x11b>
c0012a07:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012a0c:	75 10                	jne    c0012a1e <setcwd(Process*, char*)+0x107>
c0012a0e:	83 ec 0c             	sub    esp,0xc
c0012a11:	53                   	push   ebx
c0012a12:	ff d2                	call   edx
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	b8 02 00 00 00       	mov    eax,0x2
c0012a1c:	eb 14                	jmp    c0012a32 <setcwd(Process*, char*)+0x11b>
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	53                   	push   ebx
c0012a22:	ff d2                	call   edx
c0012a24:	58                   	pop    eax
c0012a25:	5a                   	pop    edx
c0012a26:	56                   	push   esi
c0012a27:	57                   	push   edi
c0012a28:	e8 7a dc fe ff       	call   c00006a7 <strcpy>
c0012a2d:	83 c4 10             	add    esp,0x10
c0012a30:	31 c0                	xor    eax,eax
c0012a32:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012a38:	5b                   	pop    ebx
c0012a39:	5e                   	pop    esi
c0012a3a:	5f                   	pop    edi
c0012a3b:	5d                   	pop    ebp
c0012a3c:	c3                   	ret    
c0012a3d:	90                   	nop

c0012a3e <Directory::Directory(char const*, Process*)>:
c0012a3e:	83 ec 0c             	sub    esp,0xc
c0012a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a45:	83 ec 08             	sub    esp,0x8
c0012a48:	6a 00                	push   0x0
c0012a4a:	50                   	push   eax
c0012a4b:	e8 2a e3 ff ff       	call   c0010d7a <UnixFile::UnixFile(int)>
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	ba c0 0b 02 c0       	mov    edx,0xc0020bc0
c0012a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a5c:	89 10                	mov    DWORD PTR [eax],edx
c0012a5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a6c:	83 c0 0d             	add    eax,0xd
c0012a6f:	83 ec 04             	sub    esp,0x4
c0012a72:	52                   	push   edx
c0012a73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a77:	50                   	push   eax
c0012a78:	e8 55 f9 ff ff       	call   c00123d2 <standardiseFiles(char*, char const*, char const*)>
c0012a7d:	83 c4 10             	add    esp,0x10
c0012a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a84:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012a87:	8d 50 bf             	lea    edx,[eax-0x41]
c0012a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a98:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012a9c:	90                   	nop
c0012a9d:	83 c4 0c             	add    esp,0xc
c0012aa0:	c3                   	ret    
c0012aa1:	90                   	nop

c0012aa2 <Directory::open()>:
c0012aa2:	53                   	push   ebx
c0012aa3:	b8 0b 00 00 00       	mov    eax,0xb
c0012aa8:	83 ec 08             	sub    esp,0x8
c0012aab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012aaf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ab6:	80 fa 19             	cmp    dl,0x19
c0012ab9:	77 3d                	ja     c0012af8 <Directory::open()+0x56>
c0012abb:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012ac2:	85 d2                	test   edx,edx
c0012ac4:	74 32                	je     c0012af8 <Directory::open()+0x56>
c0012ac6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012acc:	85 d2                	test   edx,edx
c0012ace:	74 28                	je     c0012af8 <Directory::open()+0x56>
c0012ad0:	b8 06 00 00 00       	mov    eax,0x6
c0012ad5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ad9:	75 1d                	jne    c0012af8 <Directory::open()+0x56>
c0012adb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ae1:	50                   	push   eax
c0012ae2:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ae4:	51                   	push   ecx
c0012ae5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ae8:	51                   	push   ecx
c0012ae9:	52                   	push   edx
c0012aea:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	85 c0                	test   eax,eax
c0012af2:	75 04                	jne    c0012af8 <Directory::open()+0x56>
c0012af4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012af8:	83 c4 08             	add    esp,0x8
c0012afb:	5b                   	pop    ebx
c0012afc:	c3                   	ret    
c0012afd:	90                   	nop

c0012afe <Directory::close()>:
c0012afe:	53                   	push   ebx
c0012aff:	b8 0b 00 00 00       	mov    eax,0xb
c0012b04:	83 ec 08             	sub    esp,0x8
c0012b07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b0b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b12:	80 fa 19             	cmp    dl,0x19
c0012b15:	77 41                	ja     c0012b58 <Directory::close()+0x5a>
c0012b17:	8b 1c 95 40 3c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012b1e:	85 db                	test   ebx,ebx
c0012b20:	74 36                	je     c0012b58 <Directory::close()+0x5a>
c0012b22:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b29:	74 2d                	je     c0012b58 <Directory::close()+0x5a>
c0012b2b:	b8 05 00 00 00       	mov    eax,0x5
c0012b30:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b34:	74 22                	je     c0012b58 <Directory::close()+0x5a>
c0012b36:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b3a:	8b 04 95 40 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c0012b41:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b47:	53                   	push   ebx
c0012b48:	53                   	push   ebx
c0012b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b4b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012b51:	50                   	push   eax
c0012b52:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	83 c4 08             	add    esp,0x8
c0012b5b:	5b                   	pop    ebx
c0012b5c:	c3                   	ret    
c0012b5d:	90                   	nop

c0012b5e <Directory::unlink()>:
c0012b5e:	83 ec 0c             	sub    esp,0xc
c0012b61:	b8 0b 00 00 00       	mov    eax,0xb
c0012b66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b71:	80 f9 19             	cmp    cl,0x19
c0012b74:	77 2f                	ja     c0012ba5 <Directory::unlink()+0x47>
c0012b76:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012b7d:	85 c9                	test   ecx,ecx
c0012b7f:	74 24                	je     c0012ba5 <Directory::unlink()+0x47>
c0012b81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b87:	85 c9                	test   ecx,ecx
c0012b89:	74 1a                	je     c0012ba5 <Directory::unlink()+0x47>
c0012b8b:	b8 06 00 00 00       	mov    eax,0x6
c0012b90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b94:	75 0f                	jne    c0012ba5 <Directory::unlink()+0x47>
c0012b96:	83 c2 0d             	add    edx,0xd
c0012b99:	50                   	push   eax
c0012b9a:	50                   	push   eax
c0012b9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b9d:	52                   	push   edx
c0012b9e:	51                   	push   ecx
c0012b9f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ba2:	83 c4 10             	add    esp,0x10
c0012ba5:	83 c4 0c             	add    esp,0xc
c0012ba8:	c3                   	ret    
c0012ba9:	90                   	nop

c0012baa <Directory::rename(char const*)>:
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	b8 0b 00 00 00       	mov    eax,0xb
c0012bb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bbd:	80 f9 19             	cmp    cl,0x19
c0012bc0:	77 32                	ja     c0012bf4 <Directory::rename(char const*)+0x4a>
c0012bc2:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012bc9:	85 c9                	test   ecx,ecx
c0012bcb:	74 27                	je     c0012bf4 <Directory::rename(char const*)+0x4a>
c0012bcd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bd3:	85 c9                	test   ecx,ecx
c0012bd5:	74 1d                	je     c0012bf4 <Directory::rename(char const*)+0x4a>
c0012bd7:	b8 06 00 00 00       	mov    eax,0x6
c0012bdc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012be0:	75 12                	jne    c0012bf4 <Directory::rename(char const*)+0x4a>
c0012be2:	83 c2 0d             	add    edx,0xd
c0012be5:	50                   	push   eax
c0012be6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012be8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bec:	52                   	push   edx
c0012bed:	51                   	push   ecx
c0012bee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	c3                   	ret    

c0012bf8 <Directory::exists()>:
c0012bf8:	83 ec 0c             	sub    esp,0xc
c0012bfb:	31 c0                	xor    eax,eax
c0012bfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c08:	80 f9 19             	cmp    cl,0x19
c0012c0b:	77 24                	ja     c0012c31 <Directory::exists()+0x39>
c0012c0d:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012c14:	85 c9                	test   ecx,ecx
c0012c16:	74 19                	je     c0012c31 <Directory::exists()+0x39>
c0012c18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c1e:	85 c9                	test   ecx,ecx
c0012c20:	74 0f                	je     c0012c31 <Directory::exists()+0x39>
c0012c22:	83 c2 0d             	add    edx,0xd
c0012c25:	50                   	push   eax
c0012c26:	50                   	push   eax
c0012c27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c29:	52                   	push   edx
c0012c2a:	51                   	push   ecx
c0012c2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	83 c4 0c             	add    esp,0xc
c0012c34:	c3                   	ret    
c0012c35:	90                   	nop

c0012c36 <Directory::read(dirent*)>:
c0012c36:	83 ec 1c             	sub    esp,0x1c
c0012c39:	b8 0b 00 00 00       	mov    eax,0xb
c0012c3e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012c42:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c49:	80 fa 19             	cmp    dl,0x19
c0012c4c:	77 30                	ja     c0012c7e <Directory::read(dirent*)+0x48>
c0012c4e:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c0012c55:	85 d2                	test   edx,edx
c0012c57:	74 25                	je     c0012c7e <Directory::read(dirent*)+0x48>
c0012c59:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012c60:	74 1c                	je     c0012c7e <Directory::read(dirent*)+0x48>
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c67:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012c6b:	52                   	push   edx
c0012c6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012c70:	6a 00                	push   0x0
c0012c72:	68 10 01 00 00       	push   0x110
c0012c77:	51                   	push   ecx
c0012c78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c7b:	83 c4 20             	add    esp,0x20
c0012c7e:	83 c4 1c             	add    esp,0x1c
c0012c81:	c3                   	ret    

c0012c82 <Directory::create()>:
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	b8 0b 00 00 00       	mov    eax,0xb
c0012c8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c95:	80 f9 19             	cmp    cl,0x19
c0012c98:	77 2f                	ja     c0012cc9 <Directory::create()+0x47>
c0012c9a:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0012ca1:	85 c9                	test   ecx,ecx
c0012ca3:	74 24                	je     c0012cc9 <Directory::create()+0x47>
c0012ca5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cab:	85 c9                	test   ecx,ecx
c0012cad:	74 1a                	je     c0012cc9 <Directory::create()+0x47>
c0012caf:	b8 06 00 00 00       	mov    eax,0x6
c0012cb4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb8:	75 0f                	jne    c0012cc9 <Directory::create()+0x47>
c0012cba:	83 c2 0d             	add    edx,0xd
c0012cbd:	50                   	push   eax
c0012cbe:	50                   	push   eax
c0012cbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cc1:	52                   	push   edx
c0012cc2:	51                   	push   ecx
c0012cc3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	83 c4 0c             	add    esp,0xc
c0012ccc:	c3                   	ret    
c0012ccd:	90                   	nop

c0012cce <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012cce:	b8 0a 00 00 00       	mov    eax,0xa
c0012cd3:	c3                   	ret    

c0012cd4 <Bus::Bus(char const*)>:
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdb:	83 ec 08             	sub    esp,0x8
c0012cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce2:	50                   	push   eax
c0012ce3:	e8 60 09 00 00       	call   c0013648 <Device::Device(char const*)>
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c0012cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf4:	89 10                	mov    DWORD PTR [eax],edx
c0012cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cfa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012d04:	90                   	nop
c0012d05:	83 c4 0c             	add    esp,0xc
c0012d08:	c3                   	ret    
c0012d09:	90                   	nop

c0012d0a <Bus::~Bus()>:
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c0012d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d16:	89 10                	mov    DWORD PTR [eax],edx
c0012d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1c:	83 ec 0c             	sub    esp,0xc
c0012d1f:	50                   	push   eax
c0012d20:	e8 d5 05 00 00       	call   c00132fa <Device::~Device()>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	90                   	nop
c0012d29:	83 c4 0c             	add    esp,0xc
c0012d2c:	c3                   	ret    
c0012d2d:	90                   	nop

c0012d2e <Bus::~Bus()>:
c0012d2e:	83 ec 0c             	sub    esp,0xc
c0012d31:	83 ec 0c             	sub    esp,0xc
c0012d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d38:	e8 cd ff ff ff       	call   c0012d0a <Bus::~Bus()>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	83 ec 08             	sub    esp,0x8
c0012d43:	68 58 01 00 00       	push   0x158
c0012d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d4c:	e8 0c f4 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	83 c4 0c             	add    esp,0xc
c0012d57:	c3                   	ret    

c0012d58 <Buzzer::Buzzer(char const*)>:
c0012d58:	83 ec 0c             	sub    esp,0xc
c0012d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5f:	83 ec 08             	sub    esp,0x8
c0012d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d66:	50                   	push   eax
c0012d67:	e8 dc 08 00 00       	call   c0013648 <Device::Device(char const*)>
c0012d6c:	83 c4 10             	add    esp,0x10
c0012d6f:	ba 08 0c 02 c0       	mov    edx,0xc0020c08
c0012d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d78:	89 10                	mov    DWORD PTR [eax],edx
c0012d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012d96:	90                   	nop
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <Buzzer::~Buzzer()>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	ba 08 0c 02 c0       	mov    edx,0xc0020c08
c0012da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da8:	89 10                	mov    DWORD PTR [eax],edx
c0012daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	50                   	push   eax
c0012db2:	e8 43 05 00 00       	call   c00132fa <Device::~Device()>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	90                   	nop
c0012dbb:	83 c4 0c             	add    esp,0xc
c0012dbe:	c3                   	ret    
c0012dbf:	90                   	nop

c0012dc0 <Buzzer::~Buzzer()>:
c0012dc0:	83 ec 0c             	sub    esp,0xc
c0012dc3:	83 ec 0c             	sub    esp,0xc
c0012dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dca:	e8 cd ff ff ff       	call   c0012d9c <Buzzer::~Buzzer()>
c0012dcf:	83 c4 10             	add    esp,0x10
c0012dd2:	83 ec 08             	sub    esp,0x8
c0012dd5:	68 5c 01 00 00       	push   0x15c
c0012dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dde:	e8 7a f3 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	83 c4 0c             	add    esp,0xc
c0012de9:	c3                   	ret    

c0012dea <Buzzer::stop()>:
c0012dea:	83 ec 14             	sub    esp,0x14
c0012ded:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012df1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012df3:	6a 00                	push   0x0
c0012df5:	50                   	push   eax
c0012df6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012df9:	83 c4 1c             	add    esp,0x1c
c0012dfc:	c3                   	ret    

c0012dfd <beepThread(void*)>:
c0012dfd:	53                   	push   ebx
c0012dfe:	83 ec 08             	sub    esp,0x8
c0012e01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e05:	e8 38 b2 ff ff       	call   c000e042 <unlockScheduler()>
c0012e0a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0012e0f:	52                   	push   edx
c0012e10:	52                   	push   edx
c0012e11:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0012e17:	52                   	push   edx
c0012e18:	50                   	push   eax
c0012e19:	e8 db b8 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c0012e1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e21:	e8 c4 ff ff ff       	call   c0012dea <Buzzer::stop()>
c0012e26:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0012e2e:	83 c4 18             	add    esp,0x18
c0012e31:	5b                   	pop    ebx
c0012e32:	e9 08 b8 ff ff       	jmp    c000e63f <blockTask(TaskState)>
c0012e37:	90                   	nop

c0012e38 <Buzzer::beep(int, int, bool)>:
c0012e38:	57                   	push   edi
c0012e39:	56                   	push   esi
c0012e3a:	53                   	push   ebx
c0012e3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012e43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e47:	52                   	push   edx
c0012e48:	52                   	push   edx
c0012e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	56                   	push   esi
c0012e50:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	89 f8                	mov    eax,edi
c0012e58:	84 c0                	test   al,al
c0012e5a:	74 1f                	je     c0012e7b <Buzzer::beep(int, int, bool)+0x43>
c0012e5c:	50                   	push   eax
c0012e5d:	50                   	push   eax
c0012e5e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0012e64:	99                   	cdq    
c0012e65:	52                   	push   edx
c0012e66:	50                   	push   eax
c0012e67:	e8 8d b8 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0012e73:	5b                   	pop    ebx
c0012e74:	5e                   	pop    esi
c0012e75:	5f                   	pop    edi
c0012e76:	e9 6f ff ff ff       	jmp    c0012dea <Buzzer::stop()>
c0012e7b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0012e81:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0012e86:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0012e8e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0012e92:	c7 44 24 14 fd 2d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012dfd
c0012e9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e9e:	5b                   	pop    ebx
c0012e9f:	5e                   	pop    esi
c0012ea0:	5f                   	pop    edi
c0012ea1:	e9 c4 b2 ff ff       	jmp    c000e16a <Process::createThread(void (*)(void*), void*, int)>

c0012ea6 <loadClockSettings()>:
c0012ea6:	c7 05 ac 37 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0xa
c0012eb0:	c6 05 a9 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a9,0x0
c0012eb7:	c6 05 a8 37 02 c0 01 	mov    BYTE PTR ds:0xc00237a8,0x1
c0012ebe:	c3                   	ret    
c0012ebf:	90                   	nop

c0012ec0 <Clock::Clock(char const*)>:
c0012ec0:	83 ec 0c             	sub    esp,0xc
c0012ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ec7:	83 ec 08             	sub    esp,0x8
c0012eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ece:	50                   	push   eax
c0012ecf:	e8 74 07 00 00       	call   c0013648 <Device::Device(char const*)>
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	ba 38 0c 02 c0       	mov    edx,0xc0020c38
c0012edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee0:	89 10                	mov    DWORD PTR [eax],edx
c0012ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0012ef0:	90                   	nop
c0012ef1:	83 c4 0c             	add    esp,0xc
c0012ef4:	c3                   	ret    
c0012ef5:	90                   	nop

c0012ef6 <Clock::~Clock()>:
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	ba 38 0c 02 c0       	mov    edx,0xc0020c38
c0012efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f02:	89 10                	mov    DWORD PTR [eax],edx
c0012f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f08:	83 ec 0c             	sub    esp,0xc
c0012f0b:	50                   	push   eax
c0012f0c:	e8 e9 03 00 00       	call   c00132fa <Device::~Device()>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	90                   	nop
c0012f15:	83 c4 0c             	add    esp,0xc
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <Clock::~Clock()>:
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f24:	e8 cd ff ff ff       	call   c0012ef6 <Clock::~Clock()>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	83 ec 08             	sub    esp,0x8
c0012f2f:	68 58 01 00 00       	push   0x158
c0012f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f38:	e8 20 f2 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	83 c4 0c             	add    esp,0xc
c0012f43:	c3                   	ret    

c0012f44 <Clock::timeInSecondsLocal()>:
c0012f44:	53                   	push   ebx
c0012f45:	83 ec 14             	sub    esp,0x14
c0012f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4e:	50                   	push   eax
c0012f4f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012f52:	0f b6 0d a8 37 02 c0 	movzx  ecx,BYTE PTR ds:0xc00237a8
c0012f59:	03 0d ac 37 02 c0    	add    ecx,DWORD PTR ds:0xc00237ac
c0012f5f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0012f65:	89 cb                	mov    ebx,ecx
c0012f67:	c1 fb 1f             	sar    ebx,0x1f
c0012f6a:	01 c8                	add    eax,ecx
c0012f6c:	11 da                	adc    edx,ebx
c0012f6e:	83 c4 10             	add    esp,0x10
c0012f71:	31 c9                	xor    ecx,ecx
c0012f73:	80 3d a9 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a9,0x0
c0012f7a:	74 05                	je     c0012f81 <Clock::timeInSecondsLocal()+0x3d>
c0012f7c:	b9 08 07 00 00       	mov    ecx,0x708
c0012f81:	31 db                	xor    ebx,ebx
c0012f83:	01 c8                	add    eax,ecx
c0012f85:	11 da                	adc    edx,ebx
c0012f87:	83 c4 08             	add    esp,0x8
c0012f8a:	5b                   	pop    ebx
c0012f8b:	c3                   	ret    

c0012f8c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0012f8c:	57                   	push   edi
c0012f8d:	56                   	push   esi
c0012f8e:	53                   	push   ebx
c0012f8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f97:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f99:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f9d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0012fa0:	0f b6 05 a8 37 02 c0 	movzx  eax,BYTE PTR ds:0xc00237a8
c0012fa7:	03 05 ac 37 02 c0    	add    eax,DWORD PTR ds:0xc00237ac
c0012fad:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0012fb3:	99                   	cdq    
c0012fb4:	29 c6                	sub    esi,eax
c0012fb6:	19 d7                	sbb    edi,edx
c0012fb8:	89 f0                	mov    eax,esi
c0012fba:	89 fa                	mov    edx,edi
c0012fbc:	31 f6                	xor    esi,esi
c0012fbe:	80 3d a9 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a9,0x0
c0012fc5:	74 05                	je     c0012fcc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0012fc7:	be 08 07 00 00       	mov    esi,0x708
c0012fcc:	31 ff                	xor    edi,edi
c0012fce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0012fd2:	29 f0                	sub    eax,esi
c0012fd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fd8:	19 fa                	sbb    edx,edi
c0012fda:	89 d8                	mov    eax,ebx
c0012fdc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012fe0:	5b                   	pop    ebx
c0012fe1:	5e                   	pop    esi
c0012fe2:	5f                   	pop    edi
c0012fe3:	ff e0                	jmp    eax

c0012fe5 <datetimeToSeconds(datetime_t)>:
c0012fe5:	55                   	push   ebp
c0012fe6:	57                   	push   edi
c0012fe7:	56                   	push   esi
c0012fe8:	53                   	push   ebx
c0012fe9:	83 ec 14             	sub    esp,0x14
c0012fec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ff0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012ff4:	89 d3                	mov    ebx,edx
c0012ff6:	0f b6 c6             	movzx  eax,dh
c0012ff9:	c1 eb 10             	shr    ebx,0x10
c0012ffc:	48                   	dec    eax
c0012ffd:	66 81 eb 6c 07       	sub    bx,0x76c
c0013002:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013006:	0f b6 f5             	movzx  esi,ch
c0013009:	89 cf                	mov    edi,ecx
c001300b:	6b f6 3c             	imul   esi,esi,0x3c
c001300e:	c1 ef 10             	shr    edi,0x10
c0013011:	0f b6 c9             	movzx  ecx,cl
c0013014:	89 f8                	mov    eax,edi
c0013016:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001301c:	0f b6 f8             	movzx  edi,al
c001301f:	0f b6 d2             	movzx  edx,dl
c0013022:	01 fe                	add    esi,edi
c0013024:	01 f1                	add    ecx,esi
c0013026:	0f b7 f3             	movzx  esi,bx
c0013029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001302d:	c1 f9 1f             	sar    ecx,0x1f
c0013030:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013039:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001303e:	8b 0c 8d 80 0c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf380]
c0013045:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013049:	76 29                	jbe    c0013074 <datetimeToSeconds(datetime_t)+0x8f>
c001304b:	f6 c3 03             	test   bl,0x3
c001304e:	75 24                	jne    c0013074 <datetimeToSeconds(datetime_t)+0x8f>
c0013050:	31 d2                	xor    edx,edx
c0013052:	bf 64 00 00 00       	mov    edi,0x64
c0013057:	89 d8                	mov    eax,ebx
c0013059:	66 f7 f7             	div    di
c001305c:	66 85 d2             	test   dx,dx
c001305f:	75 12                	jne    c0013073 <datetimeToSeconds(datetime_t)+0x8e>
c0013061:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013067:	bf 90 01 00 00       	mov    edi,0x190
c001306c:	99                   	cdq    
c001306d:	f7 ff                	idiv   edi
c001306f:	85 d2                	test   edx,edx
c0013071:	75 01                	jne    c0013074 <datetimeToSeconds(datetime_t)+0x8f>
c0013073:	41                   	inc    ecx
c0013074:	66 83 fb 46          	cmp    bx,0x46
c0013078:	76 45                	jbe    c00130bf <datetimeToSeconds(datetime_t)+0xda>
c001307a:	bb 46 00 00 00       	mov    ebx,0x46
c001307f:	bf 64 00 00 00       	mov    edi,0x64
c0013084:	bd 90 01 00 00       	mov    ebp,0x190
c0013089:	b8 6d 01 00 00       	mov    eax,0x16d
c001308e:	f6 c3 03             	test   bl,0x3
c0013091:	75 23                	jne    c00130b6 <datetimeToSeconds(datetime_t)+0xd1>
c0013093:	89 d8                	mov    eax,ebx
c0013095:	99                   	cdq    
c0013096:	f7 ff                	idiv   edi
c0013098:	b8 6e 01 00 00       	mov    eax,0x16e
c001309d:	85 d2                	test   edx,edx
c001309f:	75 15                	jne    c00130b6 <datetimeToSeconds(datetime_t)+0xd1>
c00130a1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00130a7:	99                   	cdq    
c00130a8:	f7 fd                	idiv   ebp
c00130aa:	83 fa 01             	cmp    edx,0x1
c00130ad:	19 c0                	sbb    eax,eax
c00130af:	f7 d0                	not    eax
c00130b1:	05 6e 01 00 00       	add    eax,0x16e
c00130b6:	01 c1                	add    ecx,eax
c00130b8:	43                   	inc    ebx
c00130b9:	39 f3                	cmp    ebx,esi
c00130bb:	7c cc                	jl     c0013089 <datetimeToSeconds(datetime_t)+0xa4>
c00130bd:	eb 35                	jmp    c00130f4 <datetimeToSeconds(datetime_t)+0x10f>
c00130bf:	74 33                	je     c00130f4 <datetimeToSeconds(datetime_t)+0x10f>
c00130c1:	b8 45 00 00 00       	mov    eax,0x45
c00130c6:	89 c2                	mov    edx,eax
c00130c8:	83 e2 03             	and    edx,0x3
c00130cb:	39 f0                	cmp    eax,esi
c00130cd:	7e 0f                	jle    c00130de <datetimeToSeconds(datetime_t)+0xf9>
c00130cf:	83 fa 01             	cmp    edx,0x1
c00130d2:	19 d2                	sbb    edx,edx
c00130d4:	48                   	dec    eax
c00130d5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00130dc:	eb e8                	jmp    c00130c6 <datetimeToSeconds(datetime_t)+0xe1>
c00130de:	b8 6d 01 00 00       	mov    eax,0x16d
c00130e3:	85 d2                	test   edx,edx
c00130e5:	75 0b                	jne    c00130f2 <datetimeToSeconds(datetime_t)+0x10d>
c00130e7:	66 83 fb 01          	cmp    bx,0x1
c00130eb:	19 c0                	sbb    eax,eax
c00130ed:	05 6e 01 00 00       	add    eax,0x16e
c00130f2:	29 c1                	sub    ecx,eax
c00130f4:	b8 80 51 01 00       	mov    eax,0x15180
c00130f9:	f7 e9                	imul   ecx
c00130fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00130ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013103:	83 c4 14             	add    esp,0x14
c0013106:	5b                   	pop    ebx
c0013107:	5e                   	pop    esi
c0013108:	5f                   	pop    edi
c0013109:	5d                   	pop    ebp
c001310a:	c3                   	ret    
c001310b:	90                   	nop

c001310c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001310c:	57                   	push   edi
c001310d:	56                   	push   esi
c001310e:	53                   	push   ebx
c001310f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013113:	8b 06                	mov    eax,DWORD PTR [esi]
c0013115:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001311c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013120:	e8 c0 fe ff ff       	call   c0012fe5 <datetimeToSeconds(datetime_t)>
c0013125:	59                   	pop    ecx
c0013126:	0f b6 0d a8 37 02 c0 	movzx  ecx,BYTE PTR ds:0xc00237a8
c001312d:	5b                   	pop    ebx
c001312e:	03 0d ac 37 02 c0    	add    ecx,DWORD PTR ds:0xc00237ac
c0013134:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001313a:	89 cb                	mov    ebx,ecx
c001313c:	c1 fb 1f             	sar    ebx,0x1f
c001313f:	29 c8                	sub    eax,ecx
c0013141:	19 da                	sbb    edx,ebx
c0013143:	31 c9                	xor    ecx,ecx
c0013145:	80 3d a9 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a9,0x0
c001314c:	74 05                	je     c0013153 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001314e:	b9 08 07 00 00       	mov    ecx,0x708
c0013153:	31 db                	xor    ebx,ebx
c0013155:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013159:	29 c8                	sub    eax,ecx
c001315b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001315f:	19 da                	sbb    edx,ebx
c0013161:	89 f8                	mov    eax,edi
c0013163:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013167:	5b                   	pop    ebx
c0013168:	5e                   	pop    esi
c0013169:	5f                   	pop    edi
c001316a:	ff e0                	jmp    eax

c001316c <secondsToDatetime(unsigned long long)>:
c001316c:	55                   	push   ebp
c001316d:	57                   	push   edi
c001316e:	56                   	push   esi
c001316f:	53                   	push   ebx
c0013170:	83 ec 1c             	sub    esp,0x1c
c0013173:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013177:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001317b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001317f:	6a 00                	push   0x0
c0013181:	68 80 51 01 00       	push   0x15180
c0013186:	55                   	push   ebp
c0013187:	57                   	push   edi
c0013188:	e8 cf ad 00 00       	call   c001df5c <__udivdi3>
c001318d:	83 c4 10             	add    esp,0x10
c0013190:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013196:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001319a:	6a 00                	push   0x0
c001319c:	68 80 51 01 00       	push   0x15180
c00131a1:	55                   	push   ebp
c00131a2:	57                   	push   edi
c00131a3:	bf 10 0e 00 00       	mov    edi,0xe10
c00131a8:	e8 af ae 00 00       	call   c001e05c <__umoddi3>
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	99                   	cdq    
c00131b1:	f7 ff                	idiv   edi
c00131b3:	bf 3c 00 00 00       	mov    edi,0x3c
c00131b8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00131bb:	89 d0                	mov    eax,edx
c00131bd:	99                   	cdq    
c00131be:	f7 ff                	idiv   edi
c00131c0:	85 db                	test   ebx,ebx
c00131c2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00131c5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00131c8:	79 11                	jns    c00131db <secondsToDatetime(unsigned long long)+0x6f>
c00131ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00131ce:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00131d4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00131d9:	eb 07                	jmp    c00131e2 <secondsToDatetime(unsigned long long)+0x76>
c00131db:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00131e0:	89 d8                	mov    eax,ebx
c00131e2:	bf b4 05 00 00       	mov    edi,0x5b4
c00131e7:	99                   	cdq    
c00131e8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00131ed:	f7 f9                	idiv   ecx
c00131ef:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00131f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131f8:	31 d2                	xor    edx,edx
c00131fa:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013202:	01 c3                	add    ebx,eax
c0013204:	89 d8                	mov    eax,ebx
c0013206:	f7 f1                	div    ecx
c0013208:	31 d2                	xor    edx,edx
c001320a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001320d:	89 d8                	mov    eax,ebx
c001320f:	f7 f7                	div    edi
c0013211:	31 d2                	xor    edx,edx
c0013213:	29 c1                	sub    ecx,eax
c0013215:	89 d8                	mov    eax,ebx
c0013217:	f7 f5                	div    ebp
c0013219:	bd 6d 01 00 00       	mov    ebp,0x16d
c001321e:	29 c1                	sub    ecx,eax
c0013220:	31 d2                	xor    edx,edx
c0013222:	89 c8                	mov    eax,ecx
c0013224:	f7 f5                	div    ebp
c0013226:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001322b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001322f:	31 d2                	xor    edx,edx
c0013231:	89 c8                	mov    eax,ecx
c0013233:	f7 f5                	div    ebp
c0013235:	31 d2                	xor    edx,edx
c0013237:	01 c3                	add    ebx,eax
c0013239:	89 c8                	mov    eax,ecx
c001323b:	f7 f7                	div    edi
c001323d:	bf 99 00 00 00       	mov    edi,0x99
c0013242:	29 c3                	sub    ebx,eax
c0013244:	31 d2                	xor    edx,edx
c0013246:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001324e:	29 c3                	sub    ebx,eax
c0013250:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013253:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013256:	bb 05 00 00 00       	mov    ebx,0x5
c001325b:	83 c1 02             	add    ecx,0x2
c001325e:	89 c8                	mov    eax,ecx
c0013260:	f7 f7                	div    edi
c0013262:	31 d2                	xor    edx,edx
c0013264:	89 c7                	mov    edi,eax
c0013266:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001326c:	83 c0 02             	add    eax,0x2
c001326f:	f7 f3                	div    ebx
c0013271:	89 eb                	mov    ebx,ebp
c0013273:	29 c3                	sub    ebx,eax
c0013275:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001327b:	88 1e                	mov    BYTE PTR [esi],bl
c001327d:	19 c0                	sbb    eax,eax
c001327f:	31 d2                	xor    edx,edx
c0013281:	83 e0 0c             	and    eax,0xc
c0013284:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013288:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013290:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013294:	83 f9 01             	cmp    ecx,0x1
c0013297:	0f 96 c2             	setbe  dl
c001329a:	41                   	inc    ecx
c001329b:	01 d0                	add    eax,edx
c001329d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00132a0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00132a4:	83 c4 1c             	add    esp,0x1c
c00132a7:	89 f0                	mov    eax,esi
c00132a9:	5b                   	pop    ebx
c00132aa:	5e                   	pop    esi
c00132ab:	5f                   	pop    edi
c00132ac:	5d                   	pop    ebp
c00132ad:	c2 04 00             	ret    0x4

c00132b0 <Clock::timeInDatetimeLocal()>:
c00132b0:	53                   	push   ebx
c00132b1:	83 ec 14             	sub    esp,0x14
c00132b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00132b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132bc:	e8 83 fc ff ff       	call   c0012f44 <Clock::timeInSecondsLocal()>
c00132c1:	83 c4 0c             	add    esp,0xc
c00132c4:	52                   	push   edx
c00132c5:	50                   	push   eax
c00132c6:	53                   	push   ebx
c00132c7:	e8 a0 fe ff ff       	call   c001316c <secondsToDatetime(unsigned long long)>
c00132cc:	89 d8                	mov    eax,ebx
c00132ce:	83 c4 14             	add    esp,0x14
c00132d1:	5b                   	pop    ebx
c00132d2:	c2 04 00             	ret    0x4
c00132d5:	90                   	nop

c00132d6 <Device::hibernate()>:
c00132d6:	c3                   	ret    
c00132d7:	90                   	nop

c00132d8 <Device::wake()>:
c00132d8:	c3                   	ret    
c00132d9:	90                   	nop

c00132da <Device::detect()>:
c00132da:	c3                   	ret    
c00132db:	90                   	nop

c00132dc <Device::disableLegacy()>:
c00132dc:	c3                   	ret    
c00132dd:	90                   	nop

c00132de <Device::powerSaving(PowerSavingLevel)>:
c00132de:	c3                   	ret    
c00132df:	90                   	nop

c00132e0 <DriverlessDevice::close(int, int, void*)>:
c00132e0:	31 c0                	xor    eax,eax
c00132e2:	c3                   	ret    
c00132e3:	90                   	nop

c00132e4 <DriverlessDevice::detect()>:
c00132e4:	c3                   	ret    
c00132e5:	90                   	nop

c00132e6 <DriverlessDevice::open(int, int, void*)>:
c00132e6:	83 ec 18             	sub    esp,0x18
c00132e9:	68 b0 0c 02 c0       	push   0xc0020cb0
c00132ee:	e8 c9 99 ff ff       	call   c000ccbc <panic(char const*)>
c00132f3:	83 c8 ff             	or     eax,0xffffffff
c00132f6:	83 c4 1c             	add    esp,0x1c
c00132f9:	c3                   	ret    

c00132fa <Device::~Device()>:
c00132fa:	ba d8 0c 02 c0       	mov    edx,0xc0020cd8
c00132ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013303:	89 10                	mov    DWORD PTR [eax],edx
c0013305:	90                   	nop
c0013306:	c3                   	ret    
c0013307:	90                   	nop

c0013308 <Device::~Device()>:
c0013308:	83 ec 0c             	sub    esp,0xc
c001330b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001330f:	e8 e6 ff ff ff       	call   c00132fa <Device::~Device()>
c0013314:	83 c4 04             	add    esp,0x4
c0013317:	83 ec 08             	sub    esp,0x8
c001331a:	68 58 01 00 00       	push   0x158
c001331f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013323:	e8 35 ee ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0013328:	83 c4 10             	add    esp,0x10
c001332b:	83 c4 0c             	add    esp,0xc
c001332e:	c3                   	ret    
c001332f:	90                   	nop

c0013330 <Device::findAndLoadDriver()>:
c0013330:	c3                   	ret    
c0013331:	90                   	nop

c0013332 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013332:	57                   	push   edi
c0013333:	b9 09 00 00 00       	mov    ecx,0x9
c0013338:	56                   	push   esi
c0013339:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001333d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013341:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001334b:	81 c7 18 01 00 00    	add    edi,0x118
c0013351:	fc                   	cld    
c0013352:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013354:	5e                   	pop    esi
c0013355:	5f                   	pop    edi
c0013356:	c3                   	ret    
c0013357:	90                   	nop

c0013358 <Device::preOpenACPI(void*, char*, char*)>:
c0013358:	56                   	push   esi
c0013359:	53                   	push   ebx
c001335a:	83 ec 08             	sub    esp,0x8
c001335d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013361:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013365:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001336f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013373:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013379:	6a 1e                	push   0x1e
c001337b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013381:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013385:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001338b:	50                   	push   eax
c001338c:	e8 41 d2 fe ff       	call   c00005d2 <memcpy>
c0013391:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013395:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013399:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00133a1:	83 c4 14             	add    esp,0x14
c00133a4:	5b                   	pop    ebx
c00133a5:	5e                   	pop    esi
c00133a6:	e9 27 d2 fe ff       	jmp    c00005d2 <memcpy>
c00133ab:	90                   	nop

c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00133ac:	55                   	push   ebp
c00133ad:	57                   	push   edi
c00133ae:	56                   	push   esi
c00133af:	53                   	push   ebx
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00133bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00133bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00133c3:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00133c8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00133cf:	75 0b                	jne    c00133dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00133d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00133d3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00133d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00133da:	eb 24                	jmp    c0013400 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00133dc:	e8 c5 3a 00 00       	call   c0016ea6 <thisCPU()>
c00133e1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00133e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00133ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00133f1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00133f5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00133f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00133fd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013400:	83 c4 0c             	add    esp,0xc
c0013403:	5b                   	pop    ebx
c0013404:	5e                   	pop    esi
c0013405:	5f                   	pop    edi
c0013406:	5d                   	pop    ebp
c0013407:	ff e0                	jmp    eax
c0013409:	90                   	nop

c001340a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001340a:	57                   	push   edi
c001340b:	56                   	push   esi
c001340c:	53                   	push   ebx
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013415:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013419:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001341e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013425:	75 0b                	jne    c0013432 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013427:	8b 00                	mov    eax,DWORD PTR [eax]
c0013429:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001342d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013430:	eb 20                	jmp    c0013452 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013432:	e8 6f 3a 00 00       	call   c0016ea6 <thisCPU()>
c0013437:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001343d:	8b 10                	mov    edx,DWORD PTR [eax]
c001343f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013443:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013447:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001344b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001344f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013452:	5b                   	pop    ebx
c0013453:	5e                   	pop    esi
c0013454:	5f                   	pop    edi
c0013455:	ff e0                	jmp    eax
c0013457:	90                   	nop

c0013458 <Device::addChild(Device*)>:
c0013458:	53                   	push   ebx
c0013459:	83 ec 08             	sub    esp,0x8
c001345c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013460:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013464:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001346a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013470:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013472:	85 d2                	test   edx,edx
c0013474:	74 04                	je     c001347a <Device::addChild(Device*)+0x22>
c0013476:	89 d3                	mov    ebx,edx
c0013478:	eb f6                	jmp    c0013470 <Device::addChild(Device*)+0x18>
c001347a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001347d:	83 ec 0c             	sub    esp,0xc
c0013480:	6a 08                	push   0x8
c0013482:	e8 c7 ec ff ff       	call   c001214e <operator new(unsigned long)>
c0013487:	89 03                	mov    DWORD PTR [ebx],eax
c0013489:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001348f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013496:	83 c4 18             	add    esp,0x18
c0013499:	5b                   	pop    ebx
c001349a:	c3                   	ret    
c001349b:	90                   	nop

c001349c <Device::removeAllChildren()>:
c001349c:	56                   	push   esi
c001349d:	53                   	push   ebx
c001349e:	52                   	push   edx
c001349f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134a3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00134a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00134ac:	74 17                	je     c00134c5 <Device::removeAllChildren()+0x29>
c00134ae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00134b1:	85 c0                	test   eax,eax
c00134b3:	74 0c                	je     c00134c1 <Device::removeAllChildren()+0x25>
c00134b5:	83 ec 0c             	sub    esp,0xc
c00134b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00134ba:	50                   	push   eax
c00134bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00134c3:	eb e4                	jmp    c00134a9 <Device::removeAllChildren()+0xd>
c00134c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00134cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00134d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00134d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134de:	58                   	pop    eax
c00134df:	5b                   	pop    ebx
c00134e0:	5e                   	pop    esi
c00134e1:	c3                   	ret    

c00134e2 <Device::hibernateAll()>:
c00134e2:	53                   	push   ebx
c00134e3:	83 ec 14             	sub    esp,0x14
c00134e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ec:	53                   	push   ebx
c00134ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00134fc:	74 0f                	je     c001350d <Device::hibernateAll()+0x2b>
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013504:	e8 d9 ff ff ff       	call   c00134e2 <Device::hibernateAll()>
c0013509:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001350b:	eb e9                	jmp    c00134f6 <Device::hibernateAll()+0x14>
c001350d:	83 c4 08             	add    esp,0x8
c0013510:	5b                   	pop    ebx
c0013511:	c3                   	ret    

c0013512 <Device::wakeAll()>:
c0013512:	53                   	push   ebx
c0013513:	83 ec 14             	sub    esp,0x14
c0013516:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001351a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001351c:	53                   	push   ebx
c001351d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013520:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001352c:	74 0f                	je     c001353d <Device::wakeAll()+0x2b>
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013534:	e8 d9 ff ff ff       	call   c0013512 <Device::wakeAll()>
c0013539:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001353b:	eb e9                	jmp    c0013526 <Device::wakeAll()+0x14>
c001353d:	83 c4 08             	add    esp,0x8
c0013540:	5b                   	pop    ebx
c0013541:	c3                   	ret    

c0013542 <Device::detectAll()>:
c0013542:	53                   	push   ebx
c0013543:	83 ec 14             	sub    esp,0x14
c0013546:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001354a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001354c:	53                   	push   ebx
c001354d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013550:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013556:	83 c4 10             	add    esp,0x10
c0013559:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001355c:	74 0f                	je     c001356d <Device::detectAll()+0x2b>
c001355e:	83 ec 0c             	sub    esp,0xc
c0013561:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013564:	e8 d9 ff ff ff       	call   c0013542 <Device::detectAll()>
c0013569:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001356b:	eb e9                	jmp    c0013556 <Device::detectAll()+0x14>
c001356d:	83 c4 08             	add    esp,0x8
c0013570:	5b                   	pop    ebx
c0013571:	c3                   	ret    

c0013572 <Device::disableLegacyAll()>:
c0013572:	53                   	push   ebx
c0013573:	83 ec 14             	sub    esp,0x14
c0013576:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001357a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001357c:	53                   	push   ebx
c001357d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013580:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013586:	83 c4 10             	add    esp,0x10
c0013589:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001358c:	74 0f                	je     c001359d <Device::disableLegacyAll()+0x2b>
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013594:	e8 d9 ff ff ff       	call   c0013572 <Device::disableLegacyAll()>
c0013599:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001359b:	eb e9                	jmp    c0013586 <Device::disableLegacyAll()+0x14>
c001359d:	83 c4 08             	add    esp,0x8
c00135a0:	5b                   	pop    ebx
c00135a1:	c3                   	ret    

c00135a2 <Device::loadDriversForAll()>:
c00135a2:	53                   	push   ebx
c00135a3:	83 ec 08             	sub    esp,0x8
c00135a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135aa:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00135b0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00135b2:	85 db                	test   ebx,ebx
c00135b4:	74 12                	je     c00135c8 <Device::loadDriversForAll()+0x26>
c00135b6:	83 ec 0c             	sub    esp,0xc
c00135b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00135bc:	e8 e1 ff ff ff       	call   c00135a2 <Device::loadDriversForAll()>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	89 d8                	mov    eax,ebx
c00135c6:	eb e8                	jmp    c00135b0 <Device::loadDriversForAll()+0xe>
c00135c8:	83 c4 08             	add    esp,0x8
c00135cb:	5b                   	pop    ebx
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <Device::closeAll()>:
c00135ce:	53                   	push   ebx
c00135cf:	83 ec 08             	sub    esp,0x8
c00135d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135d8:	6a 00                	push   0x0
c00135da:	6a 00                	push   0x0
c00135dc:	6a 00                	push   0x0
c00135de:	53                   	push   ebx
c00135df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00135ee:	74 0f                	je     c00135ff <Device::closeAll()+0x31>
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00135f6:	e8 d3 ff ff ff       	call   c00135ce <Device::closeAll()>
c00135fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00135fd:	eb e9                	jmp    c00135e8 <Device::closeAll()+0x1a>
c00135ff:	83 c4 08             	add    esp,0x8
c0013602:	5b                   	pop    ebx
c0013603:	c3                   	ret    

c0013604 <Device::powerSavingAll(PowerSavingLevel)>:
c0013604:	56                   	push   esi
c0013605:	53                   	push   ebx
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001360d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013611:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013613:	56                   	push   esi
c0013614:	53                   	push   ebx
c0013615:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013618:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013624:	74 0f                	je     c0013635 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013626:	52                   	push   edx
c0013627:	52                   	push   edx
c0013628:	56                   	push   esi
c0013629:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001362c:	e8 d3 ff ff ff       	call   c0013604 <Device::powerSavingAll(PowerSavingLevel)>
c0013631:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013633:	eb e9                	jmp    c001361e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013635:	58                   	pop    eax
c0013636:	5b                   	pop    ebx
c0013637:	5e                   	pop    esi
c0013638:	c3                   	ret    
c0013639:	90                   	nop

c001363a <Device::setName(char const*)>:
c001363a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013642:	e9 60 d0 fe ff       	jmp    c00006a7 <strcpy>
c0013647:	90                   	nop

c0013648 <Device::Device(char const*)>:
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	ba d8 0c 02 c0       	mov    edx,0xc0020cd8
c0013650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013654:	89 10                	mov    DWORD PTR [eax],edx
c0013656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013676:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013684:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001368e:	83 ec 08             	sub    esp,0x8
c0013691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013699:	e8 9c ff ff ff       	call   c001363a <Device::setName(char const*)>
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	83 ec 0c             	sub    esp,0xc
c00136a4:	6a 08                	push   0x8
c00136a6:	e8 a3 ea ff ff       	call   c001214e <operator new(unsigned long)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136bf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00136c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00136cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00136df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ea:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00136f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00136fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013700:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001370a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013734:	90                   	nop
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	c3                   	ret    
c0013739:	90                   	nop

c001373a <Device::getName()>:
c001373a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001373e:	05 d0 00 00 00       	add    eax,0xd0
c0013743:	c3                   	ret    

c0013744 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374b:	83 ec 08             	sub    esp,0x8
c001374e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013752:	50                   	push   eax
c0013753:	e8 f0 fe ff ff       	call   c0013648 <Device::Device(char const*)>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c0013760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013764:	89 10                	mov    DWORD PTR [eax],edx
c0013766:	90                   	nop
c0013767:	83 c4 0c             	add    esp,0xc
c001376a:	c3                   	ret    
c001376b:	90                   	nop

c001376c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001376c:	57                   	push   edi
c001376d:	56                   	push   esi
c001376e:	53                   	push   ebx
c001376f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013773:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013777:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001377b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013781:	75 0c                	jne    c001378f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013783:	52                   	push   edx
c0013784:	52                   	push   edx
c0013785:	53                   	push   ebx
c0013786:	56                   	push   esi
c0013787:	e8 c0 af 00 00       	call   c001e74c <LinkedList<Device>::addElement(Device*)>
c001378c:	83 c4 10             	add    esp,0x10
c001378f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013795:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013798:	74 12                	je     c00137ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001379a:	50                   	push   eax
c001379b:	57                   	push   edi
c001379c:	56                   	push   esi
c001379d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137a0:	e8 c7 ff ff ff       	call   c001376c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00137a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	eb e9                	jmp    c0013795 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00137ac:	5b                   	pop    ebx
c00137ad:	5e                   	pop    esi
c00137ae:	5f                   	pop    edi
c00137af:	c3                   	ret    

c00137b0 <getDevicesOfType(DeviceType)>:
c00137b0:	53                   	push   ebx
c00137b1:	83 ec 14             	sub    esp,0x14
c00137b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137b8:	53                   	push   ebx
c00137b9:	e8 6a b0 00 00       	call   c001e828 <LinkedList<Device>::LinkedList()>
c00137be:	83 c4 0c             	add    esp,0xc
c00137c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137c5:	53                   	push   ebx
c00137c6:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c00137cc:	e8 9b ff ff ff       	call   c001376c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00137d1:	89 d8                	mov    eax,ebx
c00137d3:	83 c4 18             	add    esp,0x18
c00137d6:	5b                   	pop    ebx
c00137d7:	c2 04 00             	ret    0x4

c00137da <HardDiskController::HardDiskController(char const*)>:
c00137da:	83 ec 0c             	sub    esp,0xc
c00137dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e1:	83 ec 08             	sub    esp,0x8
c00137e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137e8:	50                   	push   eax
c00137e9:	e8 5a fe ff ff       	call   c0013648 <Device::Device(char const*)>
c00137ee:	83 c4 10             	add    esp,0x10
c00137f1:	ba 30 0d 02 c0       	mov    edx,0xc0020d30
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	89 10                	mov    DWORD PTR [eax],edx
c00137fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013800:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001380a:	90                   	nop
c001380b:	83 c4 0c             	add    esp,0xc
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <HardDiskController::~HardDiskController()>:
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	ba 30 0d 02 c0       	mov    edx,0xc0020d30
c0013818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381c:	89 10                	mov    DWORD PTR [eax],edx
c001381e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013822:	83 ec 0c             	sub    esp,0xc
c0013825:	50                   	push   eax
c0013826:	e8 cf fa ff ff       	call   c00132fa <Device::~Device()>
c001382b:	83 c4 10             	add    esp,0x10
c001382e:	90                   	nop
c001382f:	83 c4 0c             	add    esp,0xc
c0013832:	c3                   	ret    
c0013833:	90                   	nop

c0013834 <HardDiskController::~HardDiskController()>:
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383e:	e8 cd ff ff ff       	call   c0013810 <HardDiskController::~HardDiskController()>
c0013843:	83 c4 10             	add    esp,0x10
c0013846:	83 ec 08             	sub    esp,0x8
c0013849:	68 58 01 00 00       	push   0x158
c001384e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013852:	e8 06 e9 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0013857:	83 c4 10             	add    esp,0x10
c001385a:	83 c4 0c             	add    esp,0xc
c001385d:	c3                   	ret    

c001385e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013865:	83 ec 08             	sub    esp,0x8
c0013868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001386c:	50                   	push   eax
c001386d:	e8 d6 fd ff ff       	call   c0013648 <Device::Device(char const*)>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	89 10                	mov    DWORD PTR [eax],edx
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001388b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00138ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00138b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00138c0:	90                   	nop
c00138c1:	83 c4 0c             	add    esp,0xc
c00138c4:	c3                   	ret    
c00138c5:	90                   	nop

c00138c6 <PhysicalDisk::startCache()>:
c00138c6:	56                   	push   esi
c00138c7:	53                   	push   ebx
c00138c8:	83 ec 10             	sub    esp,0x10
c00138cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138cf:	6a 30                	push   0x30
c00138d1:	e8 78 e8 ff ff       	call   c001214e <operator new(unsigned long)>
c00138d6:	89 c6                	mov    esi,eax
c00138d8:	58                   	pop    eax
c00138d9:	5a                   	pop    edx
c00138da:	53                   	push   ebx
c00138db:	56                   	push   esi
c00138dc:	e8 b7 1d 00 00       	call   c0015698 <VCache::VCache(PhysicalDisk*)>
c00138e1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00138e7:	83 c4 14             	add    esp,0x14
c00138ea:	5b                   	pop    ebx
c00138eb:	5e                   	pop    esi
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <PhysicalDisk::~PhysicalDisk()>:
c00138ee:	83 ec 0c             	sub    esp,0xc
c00138f1:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	89 10                	mov    DWORD PTR [eax],edx
c00138fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013900:	83 ec 0c             	sub    esp,0xc
c0013903:	50                   	push   eax
c0013904:	e8 f1 f9 ff ff       	call   c00132fa <Device::~Device()>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	90                   	nop
c001390d:	83 c4 0c             	add    esp,0xc
c0013910:	c3                   	ret    
c0013911:	90                   	nop

c0013912 <PhysicalDisk::~PhysicalDisk()>:
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	83 ec 0c             	sub    esp,0xc
c0013918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391c:	e8 cd ff ff ff       	call   c00138ee <PhysicalDisk::~PhysicalDisk()>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	83 ec 08             	sub    esp,0x8
c0013927:	68 6c 01 00 00       	push   0x16c
c001392c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013930:	e8 28 e8 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	83 c4 0c             	add    esp,0xc
c001393b:	c3                   	ret    

c001393c <FPU::FPU(char const*)>:
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013943:	83 ec 08             	sub    esp,0x8
c0013946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394a:	50                   	push   eax
c001394b:	e8 f8 fc ff ff       	call   c0013648 <Device::Device(char const*)>
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c0013958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395c:	89 10                	mov    DWORD PTR [eax],edx
c001395e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013962:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001396c:	90                   	nop
c001396d:	83 c4 0c             	add    esp,0xc
c0013970:	c3                   	ret    
c0013971:	90                   	nop

c0013972 <FPU::~FPU()>:
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c001397a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397e:	89 10                	mov    DWORD PTR [eax],edx
c0013980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013984:	83 ec 0c             	sub    esp,0xc
c0013987:	50                   	push   eax
c0013988:	e8 6d f9 ff ff       	call   c00132fa <Device::~Device()>
c001398d:	83 c4 10             	add    esp,0x10
c0013990:	90                   	nop
c0013991:	83 c4 0c             	add    esp,0xc
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <FPU::~FPU()>:
c0013996:	83 ec 0c             	sub    esp,0xc
c0013999:	83 ec 0c             	sub    esp,0xc
c001399c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139a0:	e8 cd ff ff ff       	call   c0013972 <FPU::~FPU()>
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	83 ec 08             	sub    esp,0x8
c00139ab:	68 58 01 00 00       	push   0x158
c00139b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139b4:	e8 a4 e7 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c00139b9:	83 c4 10             	add    esp,0x10
c00139bc:	83 c4 0c             	add    esp,0xc
c00139bf:	c3                   	ret    

c00139c0 <setupFPU()>:
c00139c0:	53                   	push   ebx
c00139c1:	83 ec 08             	sub    esp,0x8
c00139c4:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00139c9:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00139d0:	74 19                	je     c00139eb <setupFPU()+0x2b>
c00139d2:	83 ec 0c             	sub    esp,0xc
c00139d5:	68 58 01 00 00       	push   0x158
c00139da:	e8 6f e7 ff ff       	call   c001214e <operator new(unsigned long)>
c00139df:	89 c3                	mov    ebx,eax
c00139e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00139e4:	e8 3d 92 00 00       	call   c001cc26 <AVX::AVX()>
c00139e9:	eb 5b                	jmp    c0013a46 <setupFPU()+0x86>
c00139eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139f1:	84 c0                	test   al,al
c00139f3:	79 19                	jns    c0013a0e <setupFPU()+0x4e>
c00139f5:	83 ec 0c             	sub    esp,0xc
c00139f8:	68 58 01 00 00       	push   0x158
c00139fd:	e8 4c e7 ff ff       	call   c001214e <operator new(unsigned long)>
c0013a02:	89 c3                	mov    ebx,eax
c0013a04:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a07:	e8 40 93 00 00       	call   c001cd4c <SSE::SSE()>
c0013a0c:	eb 38                	jmp    c0013a46 <setupFPU()+0x86>
c0013a0e:	a8 20                	test   al,0x20
c0013a10:	74 19                	je     c0013a2b <setupFPU()+0x6b>
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	68 58 01 00 00       	push   0x158
c0013a1a:	e8 2f e7 ff ff       	call   c001214e <operator new(unsigned long)>
c0013a1f:	89 c3                	mov    ebx,eax
c0013a21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a24:	e8 8d 92 00 00       	call   c001ccb6 <MMX::MMX()>
c0013a29:	eb 1b                	jmp    c0013a46 <setupFPU()+0x86>
c0013a2b:	a8 10                	test   al,0x10
c0013a2d:	74 1c                	je     c0013a4b <setupFPU()+0x8b>
c0013a2f:	83 ec 0c             	sub    esp,0xc
c0013a32:	68 58 01 00 00       	push   0x158
c0013a37:	e8 12 e7 ff ff       	call   c001214e <operator new(unsigned long)>
c0013a3c:	89 c3                	mov    ebx,eax
c0013a3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a41:	e8 94 93 00 00       	call   c001cdda <x87::x87()>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	eb 12                	jmp    c0013a5d <setupFPU()+0x9d>
c0013a4b:	83 ec 0c             	sub    esp,0xc
c0013a4e:	31 db                	xor    ebx,ebx
c0013a50:	68 88 0d 02 c0       	push   0xc0020d88
c0013a55:	e8 62 92 ff ff       	call   c000ccbc <panic(char const*)>
c0013a5a:	83 c4 10             	add    esp,0x10
c0013a5d:	89 d8                	mov    eax,ebx
c0013a5f:	83 c4 08             	add    esp,0x8
c0013a62:	5b                   	pop    ebx
c0013a63:	c3                   	ret    

c0013a64 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013a64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a6c:	c1 e0 04             	shl    eax,0x4
c0013a6f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013a73:	8d 50 10             	lea    edx,[eax+0x10]
c0013a76:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013a7c:	74 08                	je     c0013a86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013a7e:	83 c0 04             	add    eax,0x4
c0013a81:	39 d0                	cmp    eax,edx
c0013a83:	75 f1                	jne    c0013a76 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013a85:	c3                   	ret    
c0013a86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013a90:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013a9a:	eb e2                	jmp    c0013a7e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013a9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013a9c:	57                   	push   edi
c0013a9d:	31 c0                	xor    eax,eax
c0013a9f:	56                   	push   esi
c0013aa0:	53                   	push   ebx
c0013aa1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013aa9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013aad:	89 da                	mov    edx,ebx
c0013aaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ab3:	c1 e2 04             	shl    edx,0x4
c0013ab6:	01 ca                	add    edx,ecx
c0013ab8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013ac0:	74 16                	je     c0013ad8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ac2:	40                   	inc    eax
c0013ac3:	83 f8 04             	cmp    eax,0x4
c0013ac6:	75 f0                	jne    c0013ab8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ac8:	c7 44 24 10 c8 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020dc8
c0013ad0:	5b                   	pop    ebx
c0013ad1:	5e                   	pop    esi
c0013ad2:	5f                   	pop    edi
c0013ad3:	e9 e4 91 ff ff       	jmp    c000ccbc <panic(char const*)>
c0013ad8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013adb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013ade:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013ae4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013aea:	5b                   	pop    ebx
c0013aeb:	5e                   	pop    esi
c0013aec:	5f                   	pop    edi
c0013aed:	c3                   	ret    

c0013aee <doubleFault(regs*, void*)>:
c0013aee:	c7 44 24 04 f8 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ef8
c0013af6:	e9 c1 91 ff ff       	jmp    c000ccbc <panic(char const*)>
c0013afb:	90                   	nop

c0013afc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013afc:	56                   	push   esi
c0013afd:	53                   	push   ebx
c0013afe:	50                   	push   eax
c0013aff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013b07:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013b0c:	75 35                	jne    c0013b43 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013b0e:	8d 43 20             	lea    eax,[ebx+0x20]
c0013b11:	31 d2                	xor    edx,edx
c0013b13:	89 c1                	mov    ecx,eax
c0013b15:	c1 e1 04             	shl    ecx,0x4
c0013b18:	01 f1                	add    ecx,esi
c0013b1a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013b22:	74 3e                	je     c0013b62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013b24:	42                   	inc    edx
c0013b25:	83 fa 04             	cmp    edx,0x4
c0013b28:	75 f0                	jne    c0013b1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	68 3c 0e 02 c0       	push   0xc0020e3c
c0013b32:	e8 85 91 ff ff       	call   c000ccbc <panic(char const*)>
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013b3f:	5a                   	pop    edx
c0013b40:	5b                   	pop    ebx
c0013b41:	5e                   	pop    esi
c0013b42:	c3                   	ret    
c0013b43:	83 ec 0c             	sub    esp,0xc
c0013b46:	56                   	push   esi
c0013b47:	e8 ee fb ff ff       	call   c001373a <Device::getName()>
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013b52:	75 ba                	jne    c0013b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013b54:	83 fb 0f             	cmp    ebx,0xf
c0013b57:	7f 29                	jg     c0013b82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013b59:	0f b6 9b 20 24 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddbe0]
c0013b60:	eb ac                	jmp    c0013b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013b62:	8d 04 82             	lea    eax,[edx+eax*4]
c0013b65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b69:	8d 04 86             	lea    eax,[esi+eax*4]
c0013b6c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013b72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b76:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013b7c:	89 d8                	mov    eax,ebx
c0013b7e:	5a                   	pop    edx
c0013b7f:	5b                   	pop    ebx
c0013b80:	5e                   	pop    esi
c0013b81:	c3                   	ret    
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	68 04 0e 02 c0       	push   0xc0020e04
c0013b8a:	e8 2d 91 ff ff       	call   c000ccbc <panic(char const*)>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	e9 77 ff ff ff       	jmp    c0013b0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013b97:	90                   	nop

c0013b98 <InterruptController::clearAllHandlers(int, bool)>:
c0013b98:	56                   	push   esi
c0013b99:	53                   	push   ebx
c0013b9a:	52                   	push   edx
c0013b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ba3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013ba8:	75 61                	jne    c0013c0b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013baa:	8d 46 20             	lea    eax,[esi+0x20]
c0013bad:	c1 e6 04             	shl    esi,0x4
c0013bb0:	c1 e0 04             	shl    eax,0x4
c0013bb3:	01 de                	add    esi,ebx
c0013bb5:	01 d8                	add    eax,ebx
c0013bb7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013bc1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013bcb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013bd5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013bdf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013be9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013bf3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013bfd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013c07:	58                   	pop    eax
c0013c08:	5b                   	pop    ebx
c0013c09:	5e                   	pop    esi
c0013c0a:	c3                   	ret    
c0013c0b:	83 ec 0c             	sub    esp,0xc
c0013c0e:	53                   	push   ebx
c0013c0f:	e8 26 fb ff ff       	call   c001373a <Device::getName()>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013c1a:	75 8e                	jne    c0013baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c1c:	83 fe 0f             	cmp    esi,0xf
c0013c1f:	7f 09                	jg     c0013c2a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013c21:	0f b6 b6 20 24 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffddbe0]
c0013c28:	eb 80                	jmp    c0013baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	68 78 0e 02 c0       	push   0xc0020e78
c0013c32:	e8 85 90 ff ff       	call   c000ccbc <panic(char const*)>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	e9 6b ff ff ff       	jmp    c0013baa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c3f:	90                   	nop

c0013c40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c40:	56                   	push   esi
c0013c41:	53                   	push   ebx
c0013c42:	52                   	push   edx
c0013c43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013c50:	75 3a                	jne    c0013c8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013c52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c56:	8d 50 20             	lea    edx,[eax+0x20]
c0013c59:	c1 e2 04             	shl    edx,0x4
c0013c5c:	8d 04 16             	lea    eax,[esi+edx*1]
c0013c5f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013c63:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013c69:	74 0b                	je     c0013c76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013c6b:	83 c0 04             	add    eax,0x4
c0013c6e:	39 d0                	cmp    eax,edx
c0013c70:	75 f1                	jne    c0013c63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013c72:	58                   	pop    eax
c0013c73:	5b                   	pop    ebx
c0013c74:	5e                   	pop    esi
c0013c75:	c3                   	ret    
c0013c76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013c8a:	eb df                	jmp    c0013c6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	56                   	push   esi
c0013c90:	e8 a5 fa ff ff       	call   c001373a <Device::getName()>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013c9b:	75 b5                	jne    c0013c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013c9d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013ca2:	7f 11                	jg     c0013cb5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ca8:	0f b6 80 20 24 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddbe0]
c0013caf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cb3:	eb 9d                	jmp    c0013c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013cb5:	83 ec 0c             	sub    esp,0xc
c0013cb8:	68 78 0e 02 c0       	push   0xc0020e78
c0013cbd:	e8 fa 8f ff ff       	call   c000ccbc <panic(char const*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	eb 8b                	jmp    c0013c52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013cc7 <nmiHandler(regs*, void*)>:
c0013cc7:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0013ccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd0:	e9 85 76 ff ff       	jmp    c000b35a <Computer::handleNMI()>

c0013cd5 <int_handler>:
c0013cd5:	55                   	push   ebp
c0013cd6:	57                   	push   edi
c0013cd7:	56                   	push   esi
c0013cd8:	53                   	push   ebx
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ce0:	80 3d 92 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023492,0x0
c0013ce7:	74 0b                	je     c0013cf4 <int_handler+0x1f>
c0013ce9:	fa                   	cli    
c0013cea:	f4                   	hlt    
c0013ceb:	80 3d 92 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023492,0x0
c0013cf2:	75 f5                	jne    c0013ce9 <int_handler+0x14>
c0013cf4:	e8 ad 31 00 00       	call   c0016ea6 <thisCPU()>
c0013cf9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013cfc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013d02:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013d05:	83 f8 17             	cmp    eax,0x17
c0013d08:	77 13                	ja     c0013d1d <int_handler+0x48>
c0013d0a:	83 ec 08             	sub    esp,0x8
c0013d0d:	8b 17                	mov    edx,DWORD PTR [edi]
c0013d0f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013d12:	0f b6 c0             	movzx  eax,al
c0013d15:	50                   	push   eax
c0013d16:	57                   	push   edi
c0013d17:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	83 c3 15             	add    ebx,0x15
c0013d20:	c1 e3 04             	shl    ebx,0x4
c0013d23:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013d27:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013d2e:	31 db                	xor    ebx,ebx
c0013d30:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013d34:	85 c0                	test   eax,eax
c0013d36:	74 13                	je     c0013d4b <int_handler+0x76>
c0013d38:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013d3b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013d3f:	74 1c                	je     c0013d5d <int_handler+0x88>
c0013d41:	83 ec 08             	sub    esp,0x8
c0013d44:	52                   	push   edx
c0013d45:	56                   	push   esi
c0013d46:	ff d0                	call   eax
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	43                   	inc    ebx
c0013d4c:	83 fb 04             	cmp    ebx,0x4
c0013d4f:	75 df                	jne    c0013d30 <int_handler+0x5b>
c0013d51:	83 c4 0c             	add    esp,0xc
c0013d54:	31 c0                	xor    eax,eax
c0013d56:	5b                   	pop    ebx
c0013d57:	31 d2                	xor    edx,edx
c0013d59:	5e                   	pop    esi
c0013d5a:	5f                   	pop    edi
c0013d5b:	5d                   	pop    ebp
c0013d5c:	c3                   	ret    
c0013d5d:	83 ec 08             	sub    esp,0x8
c0013d60:	52                   	push   edx
c0013d61:	56                   	push   esi
c0013d62:	ff d0                	call   eax
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	83 c4 0c             	add    esp,0xc
c0013d6a:	5b                   	pop    ebx
c0013d6b:	5e                   	pop    esi
c0013d6c:	5f                   	pop    edi
c0013d6d:	5d                   	pop    ebp
c0013d6e:	c3                   	ret    
c0013d6f:	90                   	nop

c0013d70 <InterruptController::InterruptController(char const*)>:
c0013d70:	83 ec 1c             	sub    esp,0x1c
c0013d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d77:	83 ec 08             	sub    esp,0x8
c0013d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d7e:	50                   	push   eax
c0013d7f:	e8 c4 f8 ff ff       	call   c0013648 <Device::Device(char const*)>
c0013d84:	83 c4 10             	add    esp,0x10
c0013d87:	ba 70 10 02 c0       	mov    edx,0xc0021070
c0013d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d90:	89 10                	mov    DWORD PTR [eax],edx
c0013d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d96:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013da0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013da8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013db0:	7f 5e                	jg     c0013e10 <InterruptController::InterruptController(char const*)+0xa0>
c0013db2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013dba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013dbf:	7f 49                	jg     c0013e0a <InterruptController::InterruptController(char const*)+0x9a>
c0013dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dc9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013dd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013dd4:	01 ca                	add    edx,ecx
c0013dd6:	83 c2 54             	add    edx,0x54
c0013dd9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013de9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013df0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013df4:	01 ca                	add    edx,ecx
c0013df6:	81 c2 54 04 00 00    	add    edx,0x454
c0013dfc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013e04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013e08:	eb b0                	jmp    c0013dba <InterruptController::InterruptController(char const*)+0x4a>
c0013e0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013e0e:	eb 98                	jmp    c0013da8 <InterruptController::InterruptController(char const*)+0x38>
c0013e10:	90                   	nop
c0013e11:	83 c4 1c             	add    esp,0x1c
c0013e14:	c3                   	ret    
c0013e15:	90                   	nop

c0013e16 <InterruptController::~InterruptController()>:
c0013e16:	83 ec 0c             	sub    esp,0xc
c0013e19:	ba 70 10 02 c0       	mov    edx,0xc0021070
c0013e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e22:	89 10                	mov    DWORD PTR [eax],edx
c0013e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e28:	83 ec 0c             	sub    esp,0xc
c0013e2b:	50                   	push   eax
c0013e2c:	e8 c9 f4 ff ff       	call   c00132fa <Device::~Device()>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	90                   	nop
c0013e35:	83 c4 0c             	add    esp,0xc
c0013e38:	c3                   	ret    
c0013e39:	90                   	nop

c0013e3a <InterruptController::~InterruptController()>:
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e44:	e8 cd ff ff ff       	call   c0013e16 <InterruptController::~InterruptController()>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	83 ec 08             	sub    esp,0x8
c0013e4f:	68 58 21 00 00       	push   0x2158
c0013e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e58:	e8 00 e3 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0013e5d:	83 c4 10             	add    esp,0x10
c0013e60:	83 c4 0c             	add    esp,0xc
c0013e63:	c3                   	ret    

c0013e64 <displayDebugInfo(regs*)>:
c0013e64:	55                   	push   ebp
c0013e65:	57                   	push   edi
c0013e66:	56                   	push   esi
c0013e67:	53                   	push   ebx
c0013e68:	83 ec 24             	sub    esp,0x24
c0013e6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013e6f:	0f 20 c2             	mov    edx,cr0
c0013e72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013e76:	0f 20 d7             	mov    edi,cr2
c0013e79:	0f 20 de             	mov    esi,cr3
c0013e7c:	0f 20 e5             	mov    ebp,cr4
c0013e7f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013e82:	68 05 0f 02 c0       	push   0xc0020f05
c0013e87:	e8 12 8d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013e8c:	58                   	pop    eax
c0013e8d:	5a                   	pop    edx
c0013e8e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e91:	68 10 0f 02 c0       	push   0xc0020f10
c0013e96:	e8 03 8d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013e9b:	59                   	pop    ecx
c0013e9c:	58                   	pop    eax
c0013e9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ea0:	68 1b 0f 02 c0       	push   0xc0020f1b
c0013ea5:	e8 f4 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013eaa:	58                   	pop    eax
c0013eab:	5a                   	pop    edx
c0013eac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013eaf:	68 26 0f 02 c0       	push   0xc0020f26
c0013eb4:	e8 e5 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013eb9:	59                   	pop    ecx
c0013eba:	58                   	pop    eax
c0013ebb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013ebe:	68 31 0f 02 c0       	push   0xc0020f31
c0013ec3:	e8 d6 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013ec8:	58                   	pop    eax
c0013ec9:	5a                   	pop    edx
c0013eca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0013ecd:	68 3c 0f 02 c0       	push   0xc0020f3c
c0013ed2:	e8 c7 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013ed7:	59                   	pop    ecx
c0013ed8:	58                   	pop    eax
c0013ed9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013edc:	68 56 0f 02 c0       	push   0xc0020f56
c0013ee1:	e8 b8 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013ee6:	58                   	pop    eax
c0013ee7:	5a                   	pop    edx
c0013ee8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013eeb:	68 47 0f 02 c0       	push   0xc0020f47
c0013ef0:	e8 a9 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013ef5:	59                   	pop    ecx
c0013ef6:	58                   	pop    eax
c0013ef7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013efa:	68 52 0f 02 c0       	push   0xc0020f52
c0013eff:	e8 9a 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013f04:	58                   	pop    eax
c0013f05:	5a                   	pop    edx
c0013f06:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013f09:	68 61 0f 02 c0       	push   0xc0020f61
c0013f0e:	e8 8b 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013f13:	59                   	pop    ecx
c0013f14:	58                   	pop    eax
c0013f15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013f18:	68 6c 0f 02 c0       	push   0xc0020f6c
c0013f1d:	e8 7c 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013f22:	58                   	pop    eax
c0013f23:	5a                   	pop    edx
c0013f24:	57                   	push   edi
c0013f25:	68 77 0f 02 c0       	push   0xc0020f77
c0013f2a:	e8 6f 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013f2f:	59                   	pop    ecx
c0013f30:	58                   	pop    eax
c0013f31:	56                   	push   esi
c0013f32:	68 82 0f 02 c0       	push   0xc0020f82
c0013f37:	e8 62 8c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0013f3c:	58                   	pop    eax
c0013f3d:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f48:	e8 d8 c3 ff ff       	call   c0010325 <setActiveTerminal(VgaText*)>
c0013f4d:	58                   	pop    eax
c0013f4e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0013f51:	5a                   	pop    edx
c0013f52:	c1 e0 05             	shl    eax,0x5
c0013f55:	05 80 21 02 c0       	add    eax,0xc0022180
c0013f5a:	50                   	push   eax
c0013f5b:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f66:	e8 d9 c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0013f6b:	59                   	pop    ecx
c0013f6c:	58                   	pop    eax
c0013f6d:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013f72:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f7d:	e8 c2 c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0013f82:	58                   	pop    eax
c0013f83:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013f88:	5a                   	pop    edx
c0013f89:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013f8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f92:	e8 d3 c7 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c0013f97:	59                   	pop    ecx
c0013f98:	58                   	pop    eax
c0013f99:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013f9e:	68 95 0f 02 c0       	push   0xc0020f95
c0013fa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fa9:	e8 96 c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0013fae:	58                   	pop    eax
c0013faf:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013fb4:	5a                   	pop    edx
c0013fb5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013fb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fbe:	e8 a7 c7 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c0013fc3:	59                   	pop    ecx
c0013fc4:	58                   	pop    eax
c0013fc5:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013fca:	68 9d 0f 02 c0       	push   0xc0020f9d
c0013fcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fd5:	e8 6a c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0013fda:	58                   	pop    eax
c0013fdb:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013fe0:	5a                   	pop    edx
c0013fe1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fea:	e8 7b c7 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c0013fef:	59                   	pop    ecx
c0013ff0:	58                   	pop    eax
c0013ff1:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0013ff6:	68 a5 0f 02 c0       	push   0xc0020fa5
c0013ffb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014001:	e8 3e c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014006:	58                   	pop    eax
c0014007:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001400c:	5a                   	pop    edx
c001400d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014016:	e8 4f c7 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001401b:	59                   	pop    ecx
c001401c:	58                   	pop    eax
c001401d:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014022:	68 ad 0f 02 c0       	push   0xc0020fad
c0014027:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001402d:	e8 12 c7 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014032:	58                   	pop    eax
c0014033:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014038:	5a                   	pop    edx
c0014039:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001403c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014042:	e8 23 c7 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c0014047:	59                   	pop    ecx
c0014048:	58                   	pop    eax
c0014049:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001404e:	68 b5 0f 02 c0       	push   0xc0020fb5
c0014053:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014059:	e8 e6 c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c001405e:	58                   	pop    eax
c001405f:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014064:	5a                   	pop    edx
c0014065:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001406e:	e8 f7 c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c0014073:	59                   	pop    ecx
c0014074:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014079:	5b                   	pop    ebx
c001407a:	68 bd 0f 02 c0       	push   0xc0020fbd
c001407f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014085:	e8 ba c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c001408a:	58                   	pop    eax
c001408b:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014090:	5a                   	pop    edx
c0014091:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014095:	52                   	push   edx
c0014096:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001409c:	e8 c9 c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c00140a1:	59                   	pop    ecx
c00140a2:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00140a7:	5b                   	pop    ebx
c00140a8:	68 c6 0f 02 c0       	push   0xc0020fc6
c00140ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140b3:	e8 8c c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c00140b8:	58                   	pop    eax
c00140b9:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00140be:	5a                   	pop    edx
c00140bf:	57                   	push   edi
c00140c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140c6:	e8 9f c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c00140cb:	59                   	pop    ecx
c00140cc:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00140d1:	5b                   	pop    ebx
c00140d2:	68 ce 0f 02 c0       	push   0xc0020fce
c00140d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140dd:	e8 62 c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c00140e2:	5f                   	pop    edi
c00140e3:	58                   	pop    eax
c00140e4:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00140e9:	56                   	push   esi
c00140ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140f0:	e8 75 c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c00140f5:	58                   	pop    eax
c00140f6:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00140fb:	5a                   	pop    edx
c00140fc:	68 d6 0f 02 c0       	push   0xc0020fd6
c0014101:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014107:	e8 38 c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c001410c:	59                   	pop    ecx
c001410d:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014112:	5b                   	pop    ebx
c0014113:	55                   	push   ebp
c0014114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001411a:	e8 4b c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001411f:	5e                   	pop    esi
c0014120:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014125:	5f                   	pop    edi
c0014126:	68 de 0f 02 c0       	push   0xc0020fde
c001412b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014131:	e8 0e c6 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014136:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001413b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014141:	e8 3a a7 00 00       	call   c001e880 <CPU::readDR0()>
c0014146:	5d                   	pop    ebp
c0014147:	5a                   	pop    edx
c0014148:	50                   	push   eax
c0014149:	53                   	push   ebx
c001414a:	e8 1b c6 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001414f:	59                   	pop    ecx
c0014150:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014155:	5b                   	pop    ebx
c0014156:	68 e7 0f 02 c0       	push   0xc0020fe7
c001415b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014161:	e8 de c5 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014166:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001416b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014171:	e8 1c a7 00 00       	call   c001e892 <CPU::readDR1()>
c0014176:	5e                   	pop    esi
c0014177:	5f                   	pop    edi
c0014178:	50                   	push   eax
c0014179:	53                   	push   ebx
c001417a:	e8 eb c5 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001417f:	5d                   	pop    ebp
c0014180:	58                   	pop    eax
c0014181:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014186:	68 ef 0f 02 c0       	push   0xc0020fef
c001418b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014191:	e8 ae c5 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014196:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001419b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00141a1:	e8 fe a6 00 00       	call   c001e8a4 <CPU::readDR2()>
c00141a6:	5a                   	pop    edx
c00141a7:	59                   	pop    ecx
c00141a8:	50                   	push   eax
c00141a9:	53                   	push   ebx
c00141aa:	e8 bb c5 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c00141af:	5b                   	pop    ebx
c00141b0:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00141b5:	5e                   	pop    esi
c00141b6:	68 f7 0f 02 c0       	push   0xc0020ff7
c00141bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c1:	e8 7e c5 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c00141c6:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00141cb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00141d1:	e8 e0 a6 00 00       	call   c001e8b6 <CPU::readDR3()>
c00141d6:	5f                   	pop    edi
c00141d7:	5d                   	pop    ebp
c00141d8:	50                   	push   eax
c00141d9:	53                   	push   ebx
c00141da:	e8 8b c5 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c00141df:	58                   	pop    eax
c00141e0:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00141e5:	5a                   	pop    edx
c00141e6:	68 ff 0f 02 c0       	push   0xc0020fff
c00141eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f1:	e8 4e c5 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c00141f6:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00141fb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014201:	e8 c2 a6 00 00       	call   c001e8c8 <CPU::readDR6()>
c0014206:	59                   	pop    ecx
c0014207:	5e                   	pop    esi
c0014208:	50                   	push   eax
c0014209:	53                   	push   ebx
c001420a:	e8 5b c5 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001420f:	5f                   	pop    edi
c0014210:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c0014215:	5d                   	pop    ebp
c0014216:	68 07 10 02 c0       	push   0xc0021007
c001421b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014221:	e8 1e c5 ff ff       	call   c0010744 <VgaText::puts(char const*)>
c0014226:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c001422b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014231:	e8 a4 a6 00 00       	call   c001e8da <CPU::readDR7()>
c0014236:	5a                   	pop    edx
c0014237:	59                   	pop    ecx
c0014238:	50                   	push   eax
c0014239:	53                   	push   ebx
c001423a:	e8 2b c5 ff ff       	call   c001076a <VgaText::putx(unsigned int)>
c001423f:	fa                   	cli    
c0014240:	f4                   	hlt    
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	eb fe                	jmp    c0014244 <displayDebugInfo(regs*)+0x3e0>

c0014246 <gpFault(regs*, void*)>:
c0014246:	53                   	push   ebx
c0014247:	83 ec 14             	sub    esp,0x14
c001424a:	c7 05 c8 37 02 c0 8b 84 01 c0 	mov    DWORD PTR ds:0xc00237c8,0xc001848b
c0014254:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014258:	53                   	push   ebx
c0014259:	e8 2d 42 00 00       	call   c001848b <vm8086FaultHandler(regs*)>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	84 c0                	test   al,al
c0014263:	74 05                	je     c001426a <gpFault(regs*, void*)+0x24>
c0014265:	83 c4 08             	add    esp,0x8
c0014268:	5b                   	pop    ebx
c0014269:	c3                   	ret    
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	68 0f 10 02 c0       	push   0xc002100f
c0014272:	e8 27 89 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0014277:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001427a:	e8 e5 fb ff ff       	call   c0013e64 <displayDebugInfo(regs*)>

c001427f <pgFault(regs*, void*)>:
c001427f:	83 ec 18             	sub    esp,0x18
c0014282:	68 2a 10 02 c0       	push   0xc002102a
c0014287:	e8 12 89 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001428c:	58                   	pop    eax
c001428d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014291:	e8 ce fb ff ff       	call   c0013e64 <displayDebugInfo(regs*)>

c0014296 <otherISRHandler(regs*, void*)>:
c0014296:	53                   	push   ebx
c0014297:	83 ec 0c             	sub    esp,0xc
c001429a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001429e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00142a1:	50                   	push   eax
c00142a2:	50                   	push   eax
c00142a3:	68 37 10 02 c0       	push   0xc0021037
c00142a8:	e8 f1 88 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00142ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142b0:	e8 af fb ff ff       	call   c0013e64 <displayDebugInfo(regs*)>

c00142b5 <opcodeFault(regs*, void*)>:
c00142b5:	53                   	push   ebx
c00142b6:	83 ec 08             	sub    esp,0x8
c00142b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142bd:	e8 e4 2b 00 00       	call   c0016ea6 <thisCPU()>
c00142c2:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00142c9:	74 16                	je     c00142e1 <opcodeFault(regs*, void*)+0x2c>
c00142cb:	83 ec 0c             	sub    esp,0xc
c00142ce:	68 b4 0e 02 c0       	push   0xc0020eb4
c00142d3:	e8 c6 88 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00142d8:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c00142dc:	83 c4 18             	add    esp,0x18
c00142df:	5b                   	pop    ebx
c00142e0:	c3                   	ret    
c00142e1:	83 ec 0c             	sub    esp,0xc
c00142e4:	68 54 10 02 c0       	push   0xc0021054
c00142e9:	e8 b0 88 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00142ee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142f1:	c1 e0 04             	shl    eax,0x4
c00142f4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00142f7:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00142fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00142fe:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0014302:	52                   	push   edx
c0014303:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014307:	52                   	push   edx
c0014308:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001430b:	50                   	push   eax
c001430c:	68 d8 0e 02 c0       	push   0xc0020ed8
c0014311:	e8 88 88 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0014316:	83 c4 14             	add    esp,0x14
c0014319:	53                   	push   ebx
c001431a:	e8 45 fb ff ff       	call   c0013e64 <displayDebugInfo(regs*)>

c001431f <displayProgramFault(char const*)>:
c001431f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014324:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014327:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001432d:	85 c0                	test   eax,eax
c001432f:	74 15                	je     c0014346 <displayProgramFault(char const*)+0x27>
c0014331:	83 ec 0c             	sub    esp,0xc
c0014334:	6a 04                	push   0x4
c0014336:	6a 0f                	push   0xf
c0014338:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001433c:	50                   	push   eax
c001433d:	e8 c4 c0 ff ff       	call   c0010406 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014342:	83 c4 1c             	add    esp,0x1c
c0014345:	c3                   	ret    
c0014346:	c3                   	ret    
c0014347:	90                   	nop

c0014348 <InterruptController::convertLegacyIRQNumber(int)>:
c0014348:	53                   	push   ebx
c0014349:	83 ec 14             	sub    esp,0x14
c001434c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014354:	e8 e1 f3 ff ff       	call   c001373a <Device::getName()>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001435f:	74 07                	je     c0014368 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014361:	89 d8                	mov    eax,ebx
c0014363:	83 c4 08             	add    esp,0x8
c0014366:	5b                   	pop    ebx
c0014367:	c3                   	ret    
c0014368:	83 fb 0f             	cmp    ebx,0xf
c001436b:	7f 0e                	jg     c001437b <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001436d:	0f b6 9b 20 24 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddbe0]
c0014374:	83 c4 08             	add    esp,0x8
c0014377:	89 d8                	mov    eax,ebx
c0014379:	5b                   	pop    ebx
c001437a:	c3                   	ret    
c001437b:	83 ec 0c             	sub    esp,0xc
c001437e:	68 04 0e 02 c0       	push   0xc0020e04
c0014383:	e8 34 89 ff ff       	call   c000ccbc <panic(char const*)>
c0014388:	89 d8                	mov    eax,ebx
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	83 c4 08             	add    esp,0x8
c0014390:	5b                   	pop    ebx
c0014391:	c3                   	ret    

c0014392 <setupInterruptController()>:
c0014392:	56                   	push   esi
c0014393:	53                   	push   ebx
c0014394:	51                   	push   ecx
c0014395:	e8 09 2b 00 00       	call   c0016ea3 <getCPUNumber()>
c001439a:	85 c0                	test   eax,eax
c001439c:	0f 85 10 02 00 00    	jne    c00145b2 <setupInterruptController()+0x220>
c00143a2:	83 ec 0c             	sub    esp,0xc
c00143a5:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00143aa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00143b0:	68 58 21 00 00       	push   0x2158
c00143b5:	83 e0 01             	and    eax,0x1
c00143b8:	89 c6                	mov    esi,eax
c00143ba:	e8 8f dd ff ff       	call   c001214e <operator new(unsigned long)>
c00143bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00143c2:	89 c3                	mov    ebx,eax
c00143c4:	e8 7d 90 00 00       	call   c001d446 <PIC::PIC()>
c00143c9:	6a 00                	push   0x0
c00143cb:	6a 00                	push   0x0
c00143cd:	6a 00                	push   0x0
c00143cf:	53                   	push   ebx
c00143d0:	e8 b5 93 00 00       	call   c001d78a <PIC::open(int, int, void*)>
c00143d5:	83 c4 20             	add    esp,0x20
c00143d8:	89 f0                	mov    eax,esi
c00143da:	84 c0                	test   al,al
c00143dc:	0f 85 92 01 00 00    	jne    c0014574 <setupInterruptController()+0x1e2>
c00143e2:	83 ec 08             	sub    esp,0x8
c00143e5:	53                   	push   ebx
c00143e6:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c00143ec:	e8 67 f0 ff ff       	call   c0013458 <Device::addChild(Device*)>
c00143f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f3:	6a 00                	push   0x0
c00143f5:	68 96 42 01 c0       	push   0xc0014296
c00143fa:	6a 00                	push   0x0
c00143fc:	53                   	push   ebx
c00143fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014400:	83 c4 20             	add    esp,0x20
c0014403:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014405:	6a 00                	push   0x0
c0014407:	68 96 42 01 c0       	push   0xc0014296
c001440c:	6a 01                	push   0x1
c001440e:	53                   	push   ebx
c001440f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014414:	6a 00                	push   0x0
c0014416:	68 c7 3c 01 c0       	push   0xc0013cc7
c001441b:	6a 02                	push   0x2
c001441d:	53                   	push   ebx
c001441e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014421:	83 c4 20             	add    esp,0x20
c0014424:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014426:	6a 00                	push   0x0
c0014428:	68 96 42 01 c0       	push   0xc0014296
c001442d:	6a 03                	push   0x3
c001442f:	53                   	push   ebx
c0014430:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014433:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014435:	6a 00                	push   0x0
c0014437:	68 96 42 01 c0       	push   0xc0014296
c001443c:	6a 04                	push   0x4
c001443e:	53                   	push   ebx
c001443f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014442:	83 c4 20             	add    esp,0x20
c0014445:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014447:	6a 00                	push   0x0
c0014449:	68 96 42 01 c0       	push   0xc0014296
c001444e:	6a 05                	push   0x5
c0014450:	53                   	push   ebx
c0014451:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014454:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014456:	6a 00                	push   0x0
c0014458:	68 b5 42 01 c0       	push   0xc00142b5
c001445d:	6a 06                	push   0x6
c001445f:	53                   	push   ebx
c0014460:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014463:	83 c4 20             	add    esp,0x20
c0014466:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014468:	6a 00                	push   0x0
c001446a:	68 96 42 01 c0       	push   0xc0014296
c001446f:	6a 07                	push   0x7
c0014471:	53                   	push   ebx
c0014472:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014475:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014477:	6a 00                	push   0x0
c0014479:	68 ee 3a 01 c0       	push   0xc0013aee
c001447e:	6a 08                	push   0x8
c0014480:	53                   	push   ebx
c0014481:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014484:	83 c4 20             	add    esp,0x20
c0014487:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014489:	6a 00                	push   0x0
c001448b:	68 96 42 01 c0       	push   0xc0014296
c0014490:	6a 09                	push   0x9
c0014492:	53                   	push   ebx
c0014493:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014496:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014498:	6a 00                	push   0x0
c001449a:	68 96 42 01 c0       	push   0xc0014296
c001449f:	6a 0a                	push   0xa
c00144a1:	53                   	push   ebx
c00144a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144a5:	83 c4 20             	add    esp,0x20
c00144a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144aa:	6a 00                	push   0x0
c00144ac:	68 96 42 01 c0       	push   0xc0014296
c00144b1:	6a 0b                	push   0xb
c00144b3:	53                   	push   ebx
c00144b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b9:	6a 00                	push   0x0
c00144bb:	68 96 42 01 c0       	push   0xc0014296
c00144c0:	6a 0c                	push   0xc
c00144c2:	53                   	push   ebx
c00144c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144c6:	83 c4 20             	add    esp,0x20
c00144c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144cb:	6a 00                	push   0x0
c00144cd:	68 46 42 01 c0       	push   0xc0014246
c00144d2:	6a 0d                	push   0xd
c00144d4:	53                   	push   ebx
c00144d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144da:	6a 00                	push   0x0
c00144dc:	68 7f 42 01 c0       	push   0xc001427f
c00144e1:	6a 0e                	push   0xe
c00144e3:	53                   	push   ebx
c00144e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144e7:	83 c4 20             	add    esp,0x20
c00144ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ec:	6a 00                	push   0x0
c00144ee:	68 96 42 01 c0       	push   0xc0014296
c00144f3:	6a 0f                	push   0xf
c00144f5:	53                   	push   ebx
c00144f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fb:	6a 00                	push   0x0
c00144fd:	68 96 42 01 c0       	push   0xc0014296
c0014502:	6a 10                	push   0x10
c0014504:	53                   	push   ebx
c0014505:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014508:	83 c4 20             	add    esp,0x20
c001450b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450d:	6a 00                	push   0x0
c001450f:	68 96 42 01 c0       	push   0xc0014296
c0014514:	6a 11                	push   0x11
c0014516:	53                   	push   ebx
c0014517:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001451a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001451c:	6a 00                	push   0x0
c001451e:	68 96 42 01 c0       	push   0xc0014296
c0014523:	6a 12                	push   0x12
c0014525:	53                   	push   ebx
c0014526:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014529:	83 c4 20             	add    esp,0x20
c001452c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001452e:	6a 00                	push   0x0
c0014530:	68 96 42 01 c0       	push   0xc0014296
c0014535:	6a 13                	push   0x13
c0014537:	53                   	push   ebx
c0014538:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001453b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453d:	6a 00                	push   0x0
c001453f:	68 96 42 01 c0       	push   0xc0014296
c0014544:	6a 14                	push   0x14
c0014546:	53                   	push   ebx
c0014547:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001454a:	83 c4 20             	add    esp,0x20
c001454d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001454f:	6a 00                	push   0x0
c0014551:	68 96 42 01 c0       	push   0xc0014296
c0014556:	6a 1e                	push   0x1e
c0014558:	53                   	push   ebx
c0014559:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001455c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001455e:	6a 00                	push   0x0
c0014560:	68 fc fa 00 c0       	push   0xc000fafc
c0014565:	6a 60                	push   0x60
c0014567:	53                   	push   ebx
c0014568:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001456b:	83 c4 20             	add    esp,0x20
c001456e:	89 d8                	mov    eax,ebx
c0014570:	5a                   	pop    edx
c0014571:	5b                   	pop    ebx
c0014572:	5e                   	pop    esi
c0014573:	c3                   	ret    
c0014574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014576:	6a 00                	push   0x0
c0014578:	6a 00                	push   0x0
c001457a:	6a 00                	push   0x0
c001457c:	53                   	push   ebx
c001457d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014580:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014585:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0014588:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001458f:	e8 ba db ff ff       	call   c001214e <operator new(unsigned long)>
c0014594:	89 04 24             	mov    DWORD PTR [esp],eax
c0014597:	89 c3                	mov    ebx,eax
c0014599:	e8 e6 89 00 00       	call   c001cf84 <APIC::APIC()>
c001459e:	6a 00                	push   0x0
c00145a0:	6a 00                	push   0x0
c00145a2:	6a 00                	push   0x0
c00145a4:	53                   	push   ebx
c00145a5:	e8 f8 88 00 00       	call   c001cea2 <APIC::open(int, int, void*)>
c00145aa:	83 c4 20             	add    esp,0x20
c00145ad:	e9 30 fe ff ff       	jmp    c00143e2 <setupInterruptController()+0x50>
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	68 58 21 00 00       	push   0x2158
c00145ba:	e8 8f db ff ff       	call   c001214e <operator new(unsigned long)>
c00145bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00145c2:	89 c3                	mov    ebx,eax
c00145c4:	e8 bb 89 00 00       	call   c001cf84 <APIC::APIC()>
c00145c9:	6a 00                	push   0x0
c00145cb:	6a 00                	push   0x0
c00145cd:	6a 00                	push   0x0
c00145cf:	53                   	push   ebx
c00145d0:	e8 cd 88 00 00       	call   c001cea2 <APIC::open(int, int, void*)>
c00145d5:	83 c4 18             	add    esp,0x18
c00145d8:	53                   	push   ebx
c00145d9:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c00145df:	e8 74 ee ff ff       	call   c0013458 <Device::addChild(Device*)>
c00145e4:	83 c4 10             	add    esp,0x10
c00145e7:	89 d8                	mov    eax,ebx
c00145e9:	5a                   	pop    edx
c00145ea:	5b                   	pop    ebx
c00145eb:	5e                   	pop    esi
c00145ec:	c3                   	ret    
c00145ed:	90                   	nop

c00145ee <startGUI(void*)>:
c00145ee:	55                   	push   ebp
c00145ef:	89 e5                	mov    ebp,esp
c00145f1:	53                   	push   ebx
c00145f2:	83 ec 04             	sub    esp,0x4
c00145f5:	e8 48 9a ff ff       	call   c000e042 <unlockScheduler()>
c00145fa:	e8 2c 9a ff ff       	call   c000e02b <getIRQNestingLevel()>
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	50                   	push   eax
c0014603:	68 b0 10 02 c0       	push   0xc00210b0
c0014608:	e8 91 85 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c0014616:	83 ec 0c             	sub    esp,0xc
c0014619:	68 ca 10 02 c0       	push   0xc00210ca
c001461e:	e8 09 7d ff ff       	call   c000c32c <loadDLL(char const*)>
c0014623:	83 c4 10             	add    esp,0x10
c0014626:	83 ec 08             	sub    esp,0x8
c0014629:	53                   	push   ebx
c001462a:	50                   	push   eax
c001462b:	e8 17 7e ff ff       	call   c000c447 <executeDLL(unsigned long, void*)>
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c0014639:	83 ec 0c             	sub    esp,0xc
c001463c:	68 e4 10 02 c0       	push   0xc00210e4
c0014641:	e8 e6 7c ff ff       	call   c000c32c <loadDLL(char const*)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	83 ec 08             	sub    esp,0x8
c001464c:	53                   	push   ebx
c001464d:	50                   	push   eax
c001464e:	e8 f4 7d ff ff       	call   c000c447 <executeDLL(unsigned long, void*)>
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	90                   	nop
c0014657:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001465a:	c9                   	leave  
c001465b:	c3                   	ret    

c001465c <sendKeyToTerminal(unsigned char)>:
c001465c:	55                   	push   ebp
c001465d:	89 e5                	mov    ebp,esp
c001465f:	83 ec 28             	sub    esp,0x28
c0014662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014665:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014668:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c001466d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014671:	83 ec 08             	sub    esp,0x8
c0014674:	52                   	push   edx
c0014675:	50                   	push   eax
c0014676:	e8 c7 c2 ff ff       	call   c0010942 <VgaText::receiveKey(unsigned char)>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014682:	75 41                	jne    c00146c5 <sendKeyToTerminal(unsigned char)+0x69>
c0014684:	e8 de 99 ff ff       	call   c000e067 <lockStuff()>
c0014689:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c001468e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014691:	c7 05 e0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e0,0x0
c001469b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001469f:	74 1f                	je     c00146c0 <sendKeyToTerminal(unsigned char)+0x64>
c00146a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00146a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00146aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00146ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00146b6:	e8 a9 a1 ff ff       	call   c000e864 <unblockTask(ThreadControlBlock*)>
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	eb db                	jmp    c001469b <sendKeyToTerminal(unsigned char)+0x3f>
c00146c0:	e8 34 9d ff ff       	call   c000e3f9 <unlockStuff()>
c00146c5:	90                   	nop
c00146c6:	c9                   	leave  
c00146c7:	c3                   	ret    

c00146c8 <sendKeyboardToken(KeyboardToken)>:
c00146c8:	55                   	push   ebp
c00146c9:	89 e5                	mov    ebp,esp
c00146cb:	83 ec 18             	sub    esp,0x18
c00146ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00146d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d4:	0f b7 c0             	movzx  eax,ax
c00146d7:	83 f2 01             	xor    edx,0x1
c00146da:	88 90 00 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc800],dl
c00146e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146e3:	66 3d 03 02          	cmp    ax,0x203
c00146e7:	75 07                	jne    c00146f0 <sendKeyboardToken(KeyboardToken)+0x28>
c00146e9:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c00146ee:	84 c0                	test   al,al
c00146f0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00146f4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00146f7:	a0 08 3c 02 c0       	mov    al,ds:0xc0023c08
c00146fc:	38 c2                	cmp    dl,al
c00146fe:	74 1c                	je     c001471c <sendKeyboardToken(KeyboardToken)+0x54>
c0014700:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014703:	a2 08 3c 02 c0       	mov    ds:0xc0023c08,al
c0014708:	a0 08 3c 02 c0       	mov    al,ds:0xc0023c08
c001470d:	0f b6 c0             	movzx  eax,al
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	50                   	push   eax
c0014714:	e8 97 b4 ff ff       	call   c000fbb0 <setTerminalScrollLock(bool)>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001471f:	84 c0                	test   al,al
c0014721:	0f 84 ae 00 00 00    	je     c00147d5 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001472a:	66 3d 10 03          	cmp    ax,0x310
c001472e:	75 06                	jne    c0014736 <sendKeyboardToken(KeyboardToken)+0x6e>
c0014730:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014739:	66 3d 11 03          	cmp    ax,0x311
c001473d:	75 06                	jne    c0014745 <sendKeyboardToken(KeyboardToken)+0x7d>
c001473f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014748:	66 3d 12 03          	cmp    ax,0x312
c001474c:	75 06                	jne    c0014754 <sendKeyboardToken(KeyboardToken)+0x8c>
c001474e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014757:	66 3d 13 03          	cmp    ax,0x313
c001475b:	75 06                	jne    c0014763 <sendKeyboardToken(KeyboardToken)+0x9b>
c001475d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014766:	66 3d 14 03          	cmp    ax,0x314
c001476a:	75 06                	jne    c0014772 <sendKeyboardToken(KeyboardToken)+0xaa>
c001476c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014775:	66 3d 15 03          	cmp    ax,0x315
c0014779:	75 06                	jne    c0014781 <sendKeyboardToken(KeyboardToken)+0xb9>
c001477b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014784:	66 3d 16 03          	cmp    ax,0x316
c0014788:	75 06                	jne    c0014790 <sendKeyboardToken(KeyboardToken)+0xc8>
c001478a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014793:	66 3d 17 03          	cmp    ax,0x317
c0014797:	75 06                	jne    c001479f <sendKeyboardToken(KeyboardToken)+0xd7>
c0014799:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001479f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a2:	66 3d 18 03          	cmp    ax,0x318
c00147a6:	75 06                	jne    c00147ae <sendKeyboardToken(KeyboardToken)+0xe6>
c00147a8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00147ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b1:	66 3d 19 03          	cmp    ax,0x319
c00147b5:	75 06                	jne    c00147bd <sendKeyboardToken(KeyboardToken)+0xf5>
c00147b7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00147bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c0:	66 3d 1a 03          	cmp    ax,0x31a
c00147c4:	0f 85 c9 00 00 00    	jne    c0014893 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00147ca:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00147d0:	e9 be 00 00 00       	jmp    c0014893 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00147d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d8:	66 3d 10 03          	cmp    ax,0x310
c00147dc:	75 0a                	jne    c00147e8 <sendKeyboardToken(KeyboardToken)+0x120>
c00147de:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00147e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00147e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147eb:	66 3d 11 03          	cmp    ax,0x311
c00147ef:	75 0a                	jne    c00147fb <sendKeyboardToken(KeyboardToken)+0x133>
c00147f1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00147f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00147fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147fe:	66 3d 12 03          	cmp    ax,0x312
c0014802:	75 0a                	jne    c001480e <sendKeyboardToken(KeyboardToken)+0x146>
c0014804:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001480a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014811:	66 3d 13 03          	cmp    ax,0x313
c0014815:	75 0a                	jne    c0014821 <sendKeyboardToken(KeyboardToken)+0x159>
c0014817:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001481d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014824:	66 3d 14 03          	cmp    ax,0x314
c0014828:	75 0a                	jne    c0014834 <sendKeyboardToken(KeyboardToken)+0x16c>
c001482a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014830:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014837:	66 3d 15 03          	cmp    ax,0x315
c001483b:	75 0a                	jne    c0014847 <sendKeyboardToken(KeyboardToken)+0x17f>
c001483d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014843:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001484a:	66 3d 16 03          	cmp    ax,0x316
c001484e:	75 0a                	jne    c001485a <sendKeyboardToken(KeyboardToken)+0x192>
c0014850:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014856:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001485a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485d:	66 3d 17 03          	cmp    ax,0x317
c0014861:	75 0a                	jne    c001486d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014863:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014869:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001486d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014870:	66 3d 18 03          	cmp    ax,0x318
c0014874:	75 0a                	jne    c0014880 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014876:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001487c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014883:	66 3d 19 03          	cmp    ax,0x319
c0014887:	75 0a                	jne    c0014893 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014889:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001488f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014896:	66 3d 00 02          	cmp    ax,0x200
c001489a:	75 2a                	jne    c00148c6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001489c:	a0 00 3c 02 c0       	mov    al,ds:0xc0023c00
c00148a1:	83 f0 01             	xor    eax,0x1
c00148a4:	84 c0                	test   al,al
c00148a6:	74 1e                	je     c00148c6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00148a8:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00148ad:	6a 01                	push   0x1
c00148af:	6a 00                	push   0x0
c00148b1:	68 ee 45 01 c0       	push   0xc00145ee
c00148b6:	50                   	push   eax
c00148b7:	e8 ae 98 ff ff       	call   c000e16a <Process::createThread(void (*)(void*), void*, int)>
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	c6 05 00 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023c00,0x1
c00148c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c9:	66 3d 1d 03          	cmp    ax,0x31d
c00148cd:	75 06                	jne    c00148d5 <sendKeyboardToken(KeyboardToken)+0x20d>
c00148cf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00148d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d8:	66 3d 1c 03          	cmp    ax,0x31c
c00148dc:	75 06                	jne    c00148e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00148de:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00148e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e7:	66 3d 1b 03          	cmp    ax,0x31b
c00148eb:	75 06                	jne    c00148f3 <sendKeyboardToken(KeyboardToken)+0x22b>
c00148ed:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00148f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148f6:	66 3d 1e 03          	cmp    ax,0x31e
c00148fa:	75 06                	jne    c0014902 <sendKeyboardToken(KeyboardToken)+0x23a>
c00148fc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014905:	66 3d 1f 03          	cmp    ax,0x31f
c0014909:	75 06                	jne    c0014911 <sendKeyboardToken(KeyboardToken)+0x249>
c001490b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014914:	66 3d 1a 03          	cmp    ax,0x31a
c0014918:	75 06                	jne    c0014920 <sendKeyboardToken(KeyboardToken)+0x258>
c001491a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014920:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014924:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014927:	83 f0 01             	xor    eax,0x1
c001492a:	84 c0                	test   al,al
c001492c:	74 77                	je     c00149a5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001492e:	a0 01 39 02 c0       	mov    al,ds:0xc0023901
c0014933:	84 c0                	test   al,al
c0014935:	74 41                	je     c0014978 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014937:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001493b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001493f:	74 2b                	je     c001496c <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014941:	8b 15 04 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c04
c0014947:	89 d0                	mov    eax,edx
c0014949:	c1 e0 02             	shl    eax,0x2
c001494c:	01 d0                	add    eax,edx
c001494e:	01 c0                	add    eax,eax
c0014950:	a3 04 3c 02 c0       	mov    ds:0xc0023c04,eax
c0014955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014958:	0f b7 c0             	movzx  eax,ax
c001495b:	8d 50 d0             	lea    edx,[eax-0x30]
c001495e:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c0014963:	01 d0                	add    eax,edx
c0014965:	a3 04 3c 02 c0       	mov    ds:0xc0023c04,eax
c001496a:	eb 6d                	jmp    c00149d9 <sendKeyboardToken(KeyboardToken)+0x311>
c001496c:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c0014976:	eb 61                	jmp    c00149d9 <sendKeyboardToken(KeyboardToken)+0x311>
c0014978:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c001497d:	85 c0                	test   eax,eax
c001497f:	74 18                	je     c0014999 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014981:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c0014986:	0f b6 c0             	movzx  eax,al
c0014989:	83 ec 0c             	sub    esp,0xc
c001498c:	50                   	push   eax
c001498d:	e8 ca fc ff ff       	call   c001465c <sendKeyToTerminal(unsigned char)>
c0014992:	83 c4 10             	add    esp,0x10
c0014995:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014999:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c00149a3:	eb 34                	jmp    c00149d9 <sendKeyboardToken(KeyboardToken)+0x311>
c00149a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a8:	66 3d 01 01          	cmp    ax,0x101
c00149ac:	75 2b                	jne    c00149d9 <sendKeyboardToken(KeyboardToken)+0x311>
c00149ae:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c00149b3:	85 c0                	test   eax,eax
c00149b5:	74 18                	je     c00149cf <sendKeyboardToken(KeyboardToken)+0x307>
c00149b7:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c00149bc:	0f b6 c0             	movzx  eax,al
c00149bf:	83 ec 0c             	sub    esp,0xc
c00149c2:	50                   	push   eax
c00149c3:	e8 94 fc ff ff       	call   c001465c <sendKeyToTerminal(unsigned char)>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00149cf:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c00149d9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00149dc:	83 f0 01             	xor    eax,0x1
c00149df:	84 c0                	test   al,al
c00149e1:	74 4c                	je     c0014a2f <sendKeyboardToken(KeyboardToken)+0x367>
c00149e3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00149e6:	83 f0 01             	xor    eax,0x1
c00149e9:	84 c0                	test   al,al
c00149eb:	74 42                	je     c0014a2f <sendKeyboardToken(KeyboardToken)+0x367>
c00149ed:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c00149f2:	83 f0 01             	xor    eax,0x1
c00149f5:	84 c0                	test   al,al
c00149f7:	74 36                	je     c0014a2f <sendKeyboardToken(KeyboardToken)+0x367>
c00149f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fc:	66 83 f8 1f          	cmp    ax,0x1f
c0014a00:	76 09                	jbe    c0014a0b <sendKeyboardToken(KeyboardToken)+0x343>
c0014a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a05:	66 83 f8 7e          	cmp    ax,0x7e
c0014a09:	76 12                	jbe    c0014a1d <sendKeyboardToken(KeyboardToken)+0x355>
c0014a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0e:	66 83 f8 0a          	cmp    ax,0xa
c0014a12:	74 09                	je     c0014a1d <sendKeyboardToken(KeyboardToken)+0x355>
c0014a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a17:	66 83 f8 08          	cmp    ax,0x8
c0014a1b:	75 12                	jne    c0014a2f <sendKeyboardToken(KeyboardToken)+0x367>
c0014a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a20:	0f b6 c0             	movzx  eax,al
c0014a23:	83 ec 0c             	sub    esp,0xc
c0014a26:	50                   	push   eax
c0014a27:	e8 30 fc ff ff       	call   c001465c <sendKeyToTerminal(unsigned char)>
c0014a2c:	83 c4 10             	add    esp,0x10
c0014a2f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014a32:	83 f0 01             	xor    eax,0x1
c0014a35:	84 c0                	test   al,al
c0014a37:	74 4f                	je     c0014a88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a39:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014a3c:	83 f0 01             	xor    eax,0x1
c0014a3f:	84 c0                	test   al,al
c0014a41:	74 45                	je     c0014a88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a43:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c0014a48:	84 c0                	test   al,al
c0014a4a:	74 3c                	je     c0014a88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4f:	66 83 f8 3f          	cmp    ax,0x3f
c0014a53:	76 33                	jbe    c0014a88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a58:	66 83 f8 7f          	cmp    ax,0x7f
c0014a5c:	77 2a                	ja     c0014a88 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a61:	88 c2                	mov    dl,al
c0014a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a66:	66 83 f8 5f          	cmp    ax,0x5f
c0014a6a:	76 04                	jbe    c0014a70 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014a6c:	b0 20                	mov    al,0x20
c0014a6e:	eb 02                	jmp    c0014a72 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014a70:	b0 00                	mov    al,0x0
c0014a72:	29 c2                	sub    edx,eax
c0014a74:	88 d0                	mov    al,dl
c0014a76:	83 e8 40             	sub    eax,0x40
c0014a79:	0f b6 c0             	movzx  eax,al
c0014a7c:	83 ec 0c             	sub    esp,0xc
c0014a7f:	50                   	push   eax
c0014a80:	e8 d7 fb ff ff       	call   c001465c <sendKeyToTerminal(unsigned char)>
c0014a85:	83 c4 10             	add    esp,0x10
c0014a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8b:	66 3d 00 03          	cmp    ax,0x300
c0014a8f:	75 0f                	jne    c0014aa0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014a91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014a94:	83 f0 01             	xor    eax,0x1
c0014a97:	84 c0                	test   al,al
c0014a99:	74 05                	je     c0014aa0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014a9b:	e8 37 b9 ff ff       	call   c00103d7 <doTerminalCycle()>
c0014aa0:	90                   	nop
c0014aa1:	c9                   	leave  
c0014aa2:	c3                   	ret    

c0014aa3 <clearInternalKeybuffer(VgaText*)>:
c0014aa3:	55                   	push   ebp
c0014aa4:	89 e5                	mov    ebp,esp
c0014aa6:	83 ec 08             	sub    esp,0x8
c0014aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aac:	05 34 11 00 00       	add    eax,0x1134
c0014ab1:	83 ec 0c             	sub    esp,0xc
c0014ab4:	50                   	push   eax
c0014ab5:	e8 6b bb fe ff       	call   c0000625 <strlen>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014ac0:	81 c2 34 11 00 00    	add    edx,0x1134
c0014ac6:	83 ec 04             	sub    esp,0x4
c0014ac9:	50                   	push   eax
c0014aca:	6a 00                	push   0x0
c0014acc:	52                   	push   edx
c0014acd:	e8 36 bb fe ff       	call   c0000608 <memset>
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	90                   	nop
c0014ad6:	c9                   	leave  
c0014ad7:	c3                   	ret    

c0014ad8 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014ad8:	55                   	push   ebp
c0014ad9:	89 e5                	mov    ebp,esp
c0014adb:	83 ec 18             	sub    esp,0x18
c0014ade:	fb                   	sti    
c0014adf:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014ae6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014aea:	74 77                	je     c0014b63 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aef:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014af5:	84 c0                	test   al,al
c0014af7:	75 02                	jne    c0014afb <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014af9:	eb f1                	jmp    c0014aec <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014afe:	8d 50 01             	lea    edx,[eax+0x1]
c0014b01:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014b04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b07:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014b0d:	88 10                	mov    BYTE PTR [eax],dl
c0014b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b12:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014b18:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1e:	05 34 11 00 00       	add    eax,0x1134
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	50                   	push   eax
c0014b27:	e8 f9 ba fe ff       	call   c0000625 <strlen>
c0014b2c:	83 c4 10             	add    esp,0x10
c0014b2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b32:	81 c2 34 11 00 00    	add    edx,0x1134
c0014b38:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014b3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b3e:	81 c2 34 11 00 00    	add    edx,0x1134
c0014b44:	83 ec 04             	sub    esp,0x4
c0014b47:	50                   	push   eax
c0014b48:	51                   	push   ecx
c0014b49:	52                   	push   edx
c0014b4a:	e8 4b ba fe ff       	call   c000059a <memmove>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014b55:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b58:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014b5c:	75 88                	jne    c0014ae6 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014b5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b61:	eb 03                	jmp    c0014b66 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b66:	c9                   	leave  
c0014b67:	c3                   	ret    

c0014b68 <Keyboard::Keyboard(char const*)>:
c0014b68:	83 ec 0c             	sub    esp,0xc
c0014b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b6f:	83 ec 08             	sub    esp,0x8
c0014b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b76:	50                   	push   eax
c0014b77:	e8 cc ea ff ff       	call   c0013648 <Device::Device(char const*)>
c0014b7c:	83 c4 10             	add    esp,0x10
c0014b7f:	ba 08 11 02 c0       	mov    edx,0xc0021108
c0014b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b88:	89 10                	mov    DWORD PTR [eax],edx
c0014b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b8e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014b98:	c6 05 e4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e4,0x1
c0014b9f:	90                   	nop
c0014ba0:	83 c4 0c             	add    esp,0xc
c0014ba3:	c3                   	ret    

c0014ba4 <Keyboard::~Keyboard()>:
c0014ba4:	83 ec 0c             	sub    esp,0xc
c0014ba7:	ba 08 11 02 c0       	mov    edx,0xc0021108
c0014bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb0:	89 10                	mov    DWORD PTR [eax],edx
c0014bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb6:	83 ec 0c             	sub    esp,0xc
c0014bb9:	50                   	push   eax
c0014bba:	e8 3b e7 ff ff       	call   c00132fa <Device::~Device()>
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	90                   	nop
c0014bc3:	83 c4 0c             	add    esp,0xc
c0014bc6:	c3                   	ret    
c0014bc7:	90                   	nop

c0014bc8 <Keyboard::~Keyboard()>:
c0014bc8:	83 ec 0c             	sub    esp,0xc
c0014bcb:	83 ec 0c             	sub    esp,0xc
c0014bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bd2:	e8 cd ff ff ff       	call   c0014ba4 <Keyboard::~Keyboard()>
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	83 ec 08             	sub    esp,0x8
c0014bdd:	68 5c 01 00 00       	push   0x15c
c0014be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be6:	e8 72 d5 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0014beb:	83 c4 10             	add    esp,0x10
c0014bee:	83 c4 0c             	add    esp,0xc
c0014bf1:	c3                   	ret    

c0014bf2 <LogicalDisk::close(int, int, void*)>:
c0014bf2:	83 c8 ff             	or     eax,0xffffffff
c0014bf5:	c3                   	ret    

c0014bf6 <LogicalDisk::~LogicalDisk()>:
c0014bf6:	83 ec 0c             	sub    esp,0xc
c0014bf9:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c0014bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c02:	89 10                	mov    DWORD PTR [eax],edx
c0014c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c08:	83 ec 0c             	sub    esp,0xc
c0014c0b:	50                   	push   eax
c0014c0c:	e8 e9 e6 ff ff       	call   c00132fa <Device::~Device()>
c0014c11:	83 c4 10             	add    esp,0x10
c0014c14:	90                   	nop
c0014c15:	83 c4 0c             	add    esp,0xc
c0014c18:	c3                   	ret    
c0014c19:	90                   	nop

c0014c1a <LogicalDisk::~LogicalDisk()>:
c0014c1a:	83 ec 0c             	sub    esp,0xc
c0014c1d:	83 ec 0c             	sub    esp,0xc
c0014c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c24:	e8 cd ff ff ff       	call   c0014bf6 <LogicalDisk::~LogicalDisk()>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	83 ec 08             	sub    esp,0x8
c0014c2f:	68 74 01 00 00       	push   0x174
c0014c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c38:	e8 20 d5 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0014c3d:	83 c4 10             	add    esp,0x10
c0014c40:	83 c4 0c             	add    esp,0xc
c0014c43:	c3                   	ret    

c0014c44 <LogicalDisk::open(int, int, void*)>:
c0014c44:	83 ec 18             	sub    esp,0x18
c0014c47:	68 34 11 02 c0       	push   0xc0021134
c0014c4c:	e8 6b 80 ff ff       	call   c000ccbc <panic(char const*)>
c0014c51:	83 c8 ff             	or     eax,0xffffffff
c0014c54:	83 c4 1c             	add    esp,0x1c
c0014c57:	c3                   	ret    

c0014c58 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014c58:	53                   	push   ebx
c0014c59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c65:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014c6b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014c71:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014c77:	77 10                	ja     c0014c89 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014c79:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014c7f:	89 d3                	mov    ebx,edx
c0014c81:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014c87:	72 05                	jb     c0014c8e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014c89:	83 c8 ff             	or     eax,0xffffffff
c0014c8c:	89 c2                	mov    edx,eax
c0014c8e:	5b                   	pop    ebx
c0014c8f:	c3                   	ret    

c0014c90 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014c90:	56                   	push   esi
c0014c91:	83 c8 ff             	or     eax,0xffffffff
c0014c94:	53                   	push   ebx
c0014c95:	89 c2                	mov    edx,eax
c0014c97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c9b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014c9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014ca3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014ca9:	77 27                	ja     c0014cd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014cab:	89 d8                	mov    eax,ebx
c0014cad:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014cb3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014cb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014cbe:	89 c2                	mov    edx,eax
c0014cc0:	73 10                	jae    c0014cd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014cc2:	89 c8                	mov    eax,ecx
c0014cc4:	89 da                	mov    edx,ebx
c0014cc6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014ccc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014cd2:	5b                   	pop    ebx
c0014cd3:	5e                   	pop    esi
c0014cd4:	c3                   	ret    
c0014cd5:	90                   	nop

c0014cd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014cd6:	83 ec 1c             	sub    esp,0x1c
c0014cd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ce9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ced:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014cf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfc:	83 ec 08             	sub    esp,0x8
c0014cff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d03:	50                   	push   eax
c0014d04:	e8 3f e9 ff ff       	call   c0013648 <Device::Device(char const*)>
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c0014d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d15:	89 10                	mov    DWORD PTR [eax],edx
c0014d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d1b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d26:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d31:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014d3b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d47:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0014d4d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0014d53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d57:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d5e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0014d64:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0014d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014d72:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0014d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d7c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014d86:	90                   	nop
c0014d87:	83 c4 1c             	add    esp,0x1c
c0014d8a:	c3                   	ret    
c0014d8b:	90                   	nop

c0014d8c <LogicalDisk::assignDriveLetter()>:
c0014d8c:	55                   	push   ebp
c0014d8d:	57                   	push   edi
c0014d8e:	56                   	push   esi
c0014d8f:	53                   	push   ebx
c0014d90:	83 ec 14             	sub    esp,0x14
c0014d93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d97:	8b 3d 20 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c20
c0014d9d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0014da3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0014da7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0014dad:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c0014db3:	3c 01                	cmp    al,0x1
c0014db5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0014db9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0014dbd:	19 c0                	sbb    eax,eax
c0014dbf:	83 e0 02             	and    eax,0x2
c0014dc2:	83 c0 41             	add    eax,0x41
c0014dc5:	0f be e8             	movsx  ebp,al
c0014dc8:	3c 43                	cmp    al,0x43
c0014dca:	75 10                	jne    c0014ddc <LogicalDisk::assignDriveLetter()+0x50>
c0014dcc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0014dd3:	75 5d                	jne    c0014e32 <LogicalDisk::assignDriveLetter()+0xa6>
c0014dd5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014dda:	75 56                	jne    c0014e32 <LogicalDisk::assignDriveLetter()+0xa6>
c0014ddc:	8d 75 bf             	lea    esi,[ebp-0x41]
c0014ddf:	ba 01 00 00 00       	mov    edx,0x1
c0014de4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0014de8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0014dec:	d3 e2                	shl    edx,cl
c0014dee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014df2:	89 d7                	mov    edi,edx
c0014df4:	89 d6                	mov    esi,edx
c0014df6:	c1 ff 1f             	sar    edi,0x1f
c0014df9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0014dfd:	21 f9                	and    ecx,edi
c0014dff:	09 d1                	or     ecx,edx
c0014e01:	75 2f                	jne    c0014e32 <LogicalDisk::assignDriveLetter()+0xa6>
c0014e03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0014e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e0b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0014e11:	09 f2                	or     edx,esi
c0014e13:	89 15 20 3c 02 c0    	mov    DWORD PTR ds:0xc0023c20,edx
c0014e19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e1d:	09 fa                	or     edx,edi
c0014e1f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0014e23:	89 15 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edx
c0014e29:	89 1c bd 40 3c 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc3c0],ebx
c0014e30:	eb 08                	jmp    c0014e3a <LogicalDisk::assignDriveLetter()+0xae>
c0014e32:	45                   	inc    ebp
c0014e33:	40                   	inc    eax
c0014e34:	3c 5b                	cmp    al,0x5b
c0014e36:	75 90                	jne    c0014dc8 <LogicalDisk::assignDriveLetter()+0x3c>
c0014e38:	31 c0                	xor    eax,eax
c0014e3a:	83 c4 14             	add    esp,0x14
c0014e3d:	5b                   	pop    ebx
c0014e3e:	5e                   	pop    esi
c0014e3f:	5f                   	pop    edi
c0014e40:	5d                   	pop    ebp
c0014e41:	c3                   	ret    

c0014e42 <LogicalDisk::mount()>:
c0014e42:	56                   	push   esi
c0014e43:	53                   	push   ebx
c0014e44:	51                   	push   ecx
c0014e45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e49:	8b 1d a0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a0
c0014e4f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0014e59:	85 db                	test   ebx,ebx
c0014e5b:	74 50                	je     c0014ead <LogicalDisk::mount()+0x6b>
c0014e5d:	e8 c9 91 ff ff       	call   c000e02b <getIRQNestingLevel()>
c0014e62:	52                   	push   edx
c0014e63:	52                   	push   edx
c0014e64:	50                   	push   eax
c0014e65:	68 58 11 02 c0       	push   0xc0021158
c0014e6a:	e8 2f 7d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0014e6f:	83 c4 0c             	add    esp,0xc
c0014e72:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0014e79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014e7b:	83 e8 41             	sub    eax,0x41
c0014e7e:	50                   	push   eax
c0014e7f:	56                   	push   esi
c0014e80:	53                   	push   ebx
c0014e81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	84 c0                	test   al,al
c0014e89:	74 08                	je     c0014e93 <LogicalDisk::mount()+0x51>
c0014e8b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0014e91:	eb 1c                	jmp    c0014eaf <LogicalDisk::mount()+0x6d>
c0014e93:	e8 93 91 ff ff       	call   c000e02b <getIRQNestingLevel()>
c0014e98:	51                   	push   ecx
c0014e99:	51                   	push   ecx
c0014e9a:	50                   	push   eax
c0014e9b:	68 73 11 02 c0       	push   0xc0021173
c0014ea0:	e8 f9 7c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0014ea5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	eb ac                	jmp    c0014e59 <LogicalDisk::mount()+0x17>
c0014ead:	31 c0                	xor    eax,eax
c0014eaf:	5a                   	pop    edx
c0014eb0:	5b                   	pop    ebx
c0014eb1:	5e                   	pop    esi
c0014eb2:	c3                   	ret    
c0014eb3:	90                   	nop

c0014eb4 <LogicalDisk::unmount()>:
c0014eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014ec2:	c3                   	ret    
c0014ec3:	90                   	nop

c0014ec4 <LogicalDisk::unassignDriveLetter()>:
c0014ec4:	57                   	push   edi
c0014ec5:	56                   	push   esi
c0014ec6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014eca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0014ed1:	84 c9                	test   cl,cl
c0014ed3:	75 0f                	jne    c0014ee4 <LogicalDisk::unassignDriveLetter()+0x20>
c0014ed5:	c7 44 24 0c 8e 11 02 c0 	mov    DWORD PTR [esp+0xc],0xc002118e
c0014edd:	5e                   	pop    esi
c0014ede:	5f                   	pop    edi
c0014edf:	e9 d8 7d ff ff       	jmp    c000ccbc <panic(char const*)>
c0014ee4:	83 e9 41             	sub    ecx,0x41
c0014ee7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0014eee:	b8 01 00 00 00       	mov    eax,0x1
c0014ef3:	c7 04 8d 40 3c 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc3c0],0x0
c0014efe:	d3 e0                	shl    eax,cl
c0014f00:	89 c7                	mov    edi,eax
c0014f02:	f7 d0                	not    eax
c0014f04:	c1 ff 1f             	sar    edi,0x1f
c0014f07:	21 05 20 3c 02 c0    	and    DWORD PTR ds:0xc0023c20,eax
c0014f0d:	89 fe                	mov    esi,edi
c0014f0f:	f7 d6                	not    esi
c0014f11:	21 35 24 3c 02 c0    	and    DWORD PTR ds:0xc0023c24,esi
c0014f17:	5e                   	pop    esi
c0014f18:	5f                   	pop    edi
c0014f19:	c3                   	ret    

c0014f1a <LogicalDisk::read(unsigned long long, int, void*)>:
c0014f1a:	57                   	push   edi
c0014f1b:	56                   	push   esi
c0014f1c:	53                   	push   ebx
c0014f1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014f21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014f29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f2d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014f33:	77 41                	ja     c0014f76 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0014f35:	99                   	cdq    
c0014f36:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014f3c:	01 c8                	add    eax,ecx
c0014f3e:	11 da                	adc    edx,ebx
c0014f40:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014f46:	19 d7                	sbb    edi,edx
c0014f48:	72 33                	jb     c0014f7d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0014f4a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014f50:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014f56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014f5a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014f5e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0014f64:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014f6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f6e:	5b                   	pop    ebx
c0014f6f:	5e                   	pop    esi
c0014f70:	5f                   	pop    edi
c0014f71:	e9 9a 09 00 00       	jmp    c0015910 <VCache::read(unsigned long long, int, void*)>
c0014f76:	b8 05 00 00 00       	mov    eax,0x5
c0014f7b:	eb 05                	jmp    c0014f82 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0014f7d:	b8 07 00 00 00       	mov    eax,0x7
c0014f82:	5b                   	pop    ebx
c0014f83:	5e                   	pop    esi
c0014f84:	5f                   	pop    edi
c0014f85:	c3                   	ret    

c0014f86 <LogicalDisk::write(unsigned long long, int, void*)>:
c0014f86:	57                   	push   edi
c0014f87:	56                   	push   esi
c0014f88:	53                   	push   ebx
c0014f89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014f8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014f95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014f9f:	77 41                	ja     c0014fe2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0014fa1:	99                   	cdq    
c0014fa2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014fa8:	01 c8                	add    eax,ecx
c0014faa:	11 da                	adc    edx,ebx
c0014fac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014fb2:	19 d7                	sbb    edi,edx
c0014fb4:	72 33                	jb     c0014fe9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0014fb6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014fbc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014fc2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014fc6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014fca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0014fd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014fd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fda:	5b                   	pop    ebx
c0014fdb:	5e                   	pop    esi
c0014fdc:	5f                   	pop    edi
c0014fdd:	e9 4a 08 00 00       	jmp    c001582c <VCache::write(unsigned long long, int, void*)>
c0014fe2:	b8 05 00 00 00       	mov    eax,0x5
c0014fe7:	eb 05                	jmp    c0014fee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0014fe9:	b8 07 00 00 00       	mov    eax,0x7
c0014fee:	5b                   	pop    ebx
c0014fef:	5e                   	pop    esi
c0014ff0:	5f                   	pop    edi
c0014ff1:	c3                   	ret    

c0014ff2 <Mouse::Mouse(char const*)>:
c0014ff2:	83 ec 0c             	sub    esp,0xc
c0014ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ff9:	83 ec 08             	sub    esp,0x8
c0014ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015000:	50                   	push   eax
c0015001:	e8 42 e6 ff ff       	call   c0013648 <Device::Device(char const*)>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	ba e4 11 02 c0       	mov    edx,0xc00211e4
c001500e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015012:	89 10                	mov    DWORD PTR [eax],edx
c0015014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015018:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015022:	90                   	nop
c0015023:	83 c4 0c             	add    esp,0xc
c0015026:	c3                   	ret    
c0015027:	90                   	nop

c0015028 <Mouse::~Mouse()>:
c0015028:	83 ec 0c             	sub    esp,0xc
c001502b:	ba e4 11 02 c0       	mov    edx,0xc00211e4
c0015030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015034:	89 10                	mov    DWORD PTR [eax],edx
c0015036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001503a:	83 ec 0c             	sub    esp,0xc
c001503d:	50                   	push   eax
c001503e:	e8 b7 e2 ff ff       	call   c00132fa <Device::~Device()>
c0015043:	83 c4 10             	add    esp,0x10
c0015046:	90                   	nop
c0015047:	83 c4 0c             	add    esp,0xc
c001504a:	c3                   	ret    
c001504b:	90                   	nop

c001504c <Mouse::~Mouse()>:
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	83 ec 0c             	sub    esp,0xc
c0015052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015056:	e8 cd ff ff ff       	call   c0015028 <Mouse::~Mouse()>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	83 ec 08             	sub    esp,0x8
c0015061:	68 58 01 00 00       	push   0x158
c0015066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001506a:	e8 ee d0 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001506f:	83 c4 10             	add    esp,0x10
c0015072:	83 c4 0c             	add    esp,0xc
c0015075:	c3                   	ret    

c0015076 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015076:	55                   	push   ebp
c0015077:	57                   	push   edi
c0015078:	56                   	push   esi
c0015079:	53                   	push   ebx
c001507a:	81 ec 28 01 00 00    	sub    esp,0x128
c0015080:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015087:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001508e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015095:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001509c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00150a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00150ab:	e8 8a e6 ff ff       	call   c001373a <Device::getName()>
c00150b0:	5a                   	pop    edx
c00150b1:	59                   	pop    ecx
c00150b2:	50                   	push   eax
c00150b3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00150b7:	55                   	push   ebp
c00150b8:	e8 ea b5 fe ff       	call   c00006a7 <strcpy>
c00150bd:	5b                   	pop    ebx
c00150be:	58                   	pop    eax
c00150bf:	68 08 12 02 c0       	push   0xc0021208
c00150c4:	55                   	push   ebp
c00150c5:	e8 94 b6 fe ff       	call   c000075e <strcat>
c00150ca:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00150d1:	e8 78 d0 ff ff       	call   c001214e <operator new(unsigned long)>
c00150d6:	83 c4 0c             	add    esp,0xc
c00150d9:	89 c3                	mov    ebx,eax
c00150db:	57                   	push   edi
c00150dc:	56                   	push   esi
c00150dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150e5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00150ec:	55                   	push   ebp
c00150ed:	50                   	push   eax
c00150ee:	e8 e3 fb ff ff       	call   c0014cd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00150f3:	83 c4 14             	add    esp,0x14
c00150f6:	53                   	push   ebx
c00150f7:	e8 90 fc ff ff       	call   c0014d8c <LogicalDisk::assignDriveLetter()>
c00150fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ff:	e8 3e fd ff ff       	call   c0014e42 <LogicalDisk::mount()>
c0015104:	58                   	pop    eax
c0015105:	5a                   	pop    edx
c0015106:	53                   	push   ebx
c0015107:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001510e:	e8 45 e3 ff ff       	call   c0013458 <Device::addChild(Device*)>
c0015113:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015119:	5b                   	pop    ebx
c001511a:	5e                   	pop    esi
c001511b:	5f                   	pop    edi
c001511c:	5d                   	pop    ebp
c001511d:	c3                   	ret    

c001511e <createPartitionsForDisk(PhysicalDisk*)>:
c001511e:	55                   	push   ebp
c001511f:	57                   	push   edi
c0015120:	56                   	push   esi
c0015121:	53                   	push   ebx
c0015122:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015128:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001512f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015135:	3d 00 02 00 00       	cmp    eax,0x200
c001513a:	74 27                	je     c0015163 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001513c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015142:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015148:	83 ec 10             	sub    esp,0x10
c001514b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001514f:	99                   	cdq    
c0015150:	c1 e6 0a             	shl    esi,0xa
c0015153:	52                   	push   edx
c0015154:	89 fd                	mov    ebp,edi
c0015156:	50                   	push   eax
c0015157:	55                   	push   ebp
c0015158:	56                   	push   esi
c0015159:	e8 fe 8d 00 00       	call   c001df5c <__udivdi3>
c001515e:	e9 b1 00 00 00       	jmp    c0015214 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015163:	83 ec 0c             	sub    esp,0xc
c0015166:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015168:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001516c:	56                   	push   esi
c001516d:	6a 01                	push   0x1
c001516f:	6a 00                	push   0x0
c0015171:	6a 00                	push   0x0
c0015173:	53                   	push   ebx
c0015174:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015177:	83 c4 20             	add    esp,0x20
c001517a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015182:	75 0a                	jne    c001518e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015184:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001518c:	74 2c                	je     c00151ba <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001518e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015194:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001519a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00151a0:	83 ec 10             	sub    esp,0x10
c00151a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00151a7:	89 f7                	mov    edi,esi
c00151a9:	c1 e0 0a             	shl    eax,0xa
c00151ac:	c1 ff 1f             	sar    edi,0x1f
c00151af:	57                   	push   edi
c00151b0:	56                   	push   esi
c00151b1:	52                   	push   edx
c00151b2:	50                   	push   eax
c00151b3:	e8 a4 8d 00 00       	call   c001df5c <__udivdi3>
c00151b8:	eb 5a                	jmp    c0015214 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00151ba:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00151c1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00151c8:	83 e1 7f             	and    ecx,0x7f
c00151cb:	83 e0 7f             	and    eax,0x7f
c00151ce:	01 c1                	add    ecx,eax
c00151d0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00151d7:	83 e0 7f             	and    eax,0x7f
c00151da:	01 c1                	add    ecx,eax
c00151dc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00151e3:	83 e0 7f             	and    eax,0x7f
c00151e6:	00 c1                	add    cl,al
c00151e8:	74 41                	je     c001522b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00151ea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00151f0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00151f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00151fc:	83 ec 10             	sub    esp,0x10
c00151ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015203:	89 f7                	mov    edi,esi
c0015205:	c1 e0 0a             	shl    eax,0xa
c0015208:	c1 ff 1f             	sar    edi,0x1f
c001520b:	57                   	push   edi
c001520c:	56                   	push   esi
c001520d:	52                   	push   edx
c001520e:	50                   	push   eax
c001520f:	e8 48 8d 00 00       	call   c001df5c <__udivdi3>
c0015214:	83 c4 14             	add    esp,0x14
c0015217:	52                   	push   edx
c0015218:	50                   	push   eax
c0015219:	6a 00                	push   0x0
c001521b:	6a 00                	push   0x0
c001521d:	53                   	push   ebx
c001521e:	e8 53 fe ff ff       	call   c0015076 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015223:	83 c4 20             	add    esp,0x20
c0015226:	e9 79 01 00 00       	jmp    c00153a4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001522b:	89 f0                	mov    eax,esi
c001522d:	31 f6                	xor    esi,esi
c001522f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015236:	75 02                	jne    c001523a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015238:	89 f1                	mov    ecx,esi
c001523a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015241:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015248:	c1 e2 08             	shl    edx,0x8
c001524b:	c1 e7 10             	shl    edi,0x10
c001524e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015256:	09 fa                	or     edx,edi
c0015258:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015260:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015267:	83 c0 10             	add    eax,0x10
c001526a:	09 fa                	or     edx,edi
c001526c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015273:	c1 e7 18             	shl    edi,0x18
c0015276:	09 fa                	or     edx,edi
c0015278:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001527f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015283:	c1 e7 10             	shl    edi,0x10
c0015286:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001528d:	c1 e2 08             	shl    edx,0x8
c0015290:	09 fa                	or     edx,edi
c0015292:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015299:	09 fa                	or     edx,edi
c001529b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00152a2:	c1 e7 18             	shl    edi,0x18
c00152a5:	09 fa                	or     edx,edi
c00152a7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00152ab:	46                   	inc    esi
c00152ac:	83 fe 04             	cmp    esi,0x4
c00152af:	0f 85 7a ff ff ff    	jne    c001522f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00152b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152b9:	83 f0 01             	xor    eax,0x1
c00152bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00152c0:	75 57                	jne    c0015319 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00152c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152c6:	83 f0 01             	xor    eax,0x1
c00152c9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00152cd:	75 4a                	jne    c0015319 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00152cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00152d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00152db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00152e3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00152e9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00152ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00152f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00152f9:	89 f7                	mov    edi,esi
c00152fb:	c1 e0 0a             	shl    eax,0xa
c00152fe:	c1 ff 1f             	sar    edi,0x1f
c0015301:	57                   	push   edi
c0015302:	56                   	push   esi
c0015303:	52                   	push   edx
c0015304:	50                   	push   eax
c0015305:	e8 52 8c 00 00       	call   c001df5c <__udivdi3>
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015311:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015315:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015319:	84 c9                	test   cl,cl
c001531b:	74 53                	je     c0015370 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001531d:	0f b6 c9             	movzx  ecx,cl
c0015320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015328:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001532c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015334:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015338:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001533c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001534c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015350:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015354:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015358:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001535c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015360:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015364:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015368:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001536c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015370:	31 ed                	xor    ebp,ebp
c0015372:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015376:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001537a:	89 f8                	mov    eax,edi
c001537c:	09 f0                	or     eax,esi
c001537e:	74 1e                	je     c001539e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015380:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015384:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015388:	89 d1                	mov    ecx,edx
c001538a:	09 c1                	or     ecx,eax
c001538c:	74 10                	je     c001539e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	57                   	push   edi
c0015392:	56                   	push   esi
c0015393:	52                   	push   edx
c0015394:	50                   	push   eax
c0015395:	53                   	push   ebx
c0015396:	e8 db fc ff ff       	call   c0015076 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001539b:	83 c4 20             	add    esp,0x20
c001539e:	45                   	inc    ebp
c001539f:	83 fd 04             	cmp    ebp,0x4
c00153a2:	75 ce                	jne    c0015372 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00153a4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00153aa:	5b                   	pop    ebx
c00153ab:	5e                   	pop    esi
c00153ac:	5f                   	pop    edi
c00153ad:	5d                   	pop    ebp
c00153ae:	c3                   	ret    
c00153af:	90                   	nop

c00153b0 <Timer::Timer(char const*)>:
c00153b0:	83 ec 0c             	sub    esp,0xc
c00153b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153b7:	83 ec 08             	sub    esp,0x8
c00153ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153be:	50                   	push   eax
c00153bf:	e8 84 e2 ff ff       	call   c0013648 <Device::Device(char const*)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	ba 1c 12 02 c0       	mov    edx,0xc002121c
c00153cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153d0:	89 10                	mov    DWORD PTR [eax],edx
c00153d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00153e0:	90                   	nop
c00153e1:	83 c4 0c             	add    esp,0xc
c00153e4:	c3                   	ret    
c00153e5:	90                   	nop

c00153e6 <Timer::~Timer()>:
c00153e6:	83 ec 0c             	sub    esp,0xc
c00153e9:	ba 1c 12 02 c0       	mov    edx,0xc002121c
c00153ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f2:	89 10                	mov    DWORD PTR [eax],edx
c00153f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	50                   	push   eax
c00153fc:	e8 f9 de ff ff       	call   c00132fa <Device::~Device()>
c0015401:	83 c4 10             	add    esp,0x10
c0015404:	90                   	nop
c0015405:	83 c4 0c             	add    esp,0xc
c0015408:	c3                   	ret    
c0015409:	90                   	nop

c001540a <Timer::~Timer()>:
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	83 ec 0c             	sub    esp,0xc
c0015410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015414:	e8 cd ff ff ff       	call   c00153e6 <Timer::~Timer()>
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	83 ec 08             	sub    esp,0x8
c001541f:	68 5c 01 00 00       	push   0x15c
c0015424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015428:	e8 30 cd ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	83 c4 0c             	add    esp,0xc
c0015433:	c3                   	ret    

c0015434 <Timer::read()>:
c0015434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015438:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001543e:	c3                   	ret    

c001543f <timerHandler(unsigned long long)>:
c001543f:	55                   	push   ebp
c0015440:	57                   	push   edi
c0015441:	56                   	push   esi
c0015442:	53                   	push   ebx
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001544a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001544e:	01 35 b0 3c 02 c0    	add    DWORD PTR ds:0xc0023cb0,esi
c0015454:	11 3d b4 3c 02 c0    	adc    DWORD PTR ds:0xc0023cb4,edi
c001545a:	80 3d cd 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022ccd,0x0
c0015461:	0f 84 07 01 00 00    	je     c001556e <timerHandler(unsigned long long)+0x12f>
c0015467:	e8 fb 8b ff ff       	call   c000e067 <lockStuff()>
c001546c:	83 ec 0c             	sub    esp,0xc
c001546f:	68 24 35 02 c0       	push   0xc0023524
c0015474:	e8 43 90 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015479:	c7 04 24 24 35 02 c0 	mov    DWORD PTR [esp],0xc0023524
c0015480:	89 c3                	mov    ebx,eax
c0015482:	e8 6b 8f 00 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	84 c0                	test   al,al
c001548c:	74 60                	je     c00154ee <timerHandler(unsigned long long)+0xaf>
c001548e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015494:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015497:	85 c0                	test   eax,eax
c0015499:	0f 85 91 00 00 00    	jne    c0015530 <timerHandler(unsigned long long)+0xf1>
c001549f:	e9 be 00 00 00       	jmp    c0015562 <timerHandler(unsigned long long)+0x123>
c00154a4:	83 ec 0c             	sub    esp,0xc
c00154a7:	55                   	push   ebp
c00154a8:	e8 b7 93 ff ff       	call   c000e864 <unblockTask(ThreadControlBlock*)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	39 eb                	cmp    ebx,ebp
c00154b2:	75 12                	jne    c00154c6 <timerHandler(unsigned long long)+0x87>
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	68 24 35 02 c0       	push   0xc0023524
c00154bc:	e8 fb 8f 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154c1:	89 c3                	mov    ebx,eax
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	68 24 35 02 c0       	push   0xc0023524
c00154ce:	e8 1f 8f 00 00       	call   c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	84 c0                	test   al,al
c00154d8:	75 b4                	jne    c001548e <timerHandler(unsigned long long)+0x4f>
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	68 24 35 02 c0       	push   0xc0023524
c00154e2:	e8 d5 8f 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e7:	83 c4 10             	add    esp,0x10
c00154ea:	39 d8                	cmp    eax,ebx
c00154ec:	74 a0                	je     c001548e <timerHandler(unsigned long long)+0x4f>
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	68 24 35 02 c0       	push   0xc0023524
c00154f6:	e8 c1 8f 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154fb:	c7 04 24 24 35 02 c0 	mov    DWORD PTR [esp],0xc0023524
c0015502:	89 c5                	mov    ebp,eax
c0015504:	e8 05 8f 00 00       	call   c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015509:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015512:	39 15 b0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023cb0,edx
c0015518:	a1 b4 3c 02 c0       	mov    eax,ds:0xc0023cb4
c001551d:	19 c8                	sbb    eax,ecx
c001551f:	73 83                	jae    c00154a4 <timerHandler(unsigned long long)+0x65>
c0015521:	50                   	push   eax
c0015522:	50                   	push   eax
c0015523:	55                   	push   ebp
c0015524:	68 24 35 02 c0       	push   0xc0023524
c0015529:	e8 f0 8d 00 00       	call   c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001552e:	eb 93                	jmp    c00154c3 <timerHandler(unsigned long long)+0x84>
c0015530:	80 3d cc 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022ccc,0x0
c0015537:	74 29                	je     c0015562 <timerHandler(unsigned long long)+0x123>
c0015539:	39 c6                	cmp    esi,eax
c001553b:	bb 00 00 00 00       	mov    ebx,0x0
c0015540:	19 df                	sbb    edi,ebx
c0015542:	72 19                	jb     c001555d <timerHandler(unsigned long long)+0x11e>
c0015544:	e8 f7 8a ff ff       	call   c000e040 <lockScheduler()>
c0015549:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001554e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015551:	e8 1e 8e ff ff       	call   c000e374 <schedule()>
c0015556:	e8 e7 8a ff ff       	call   c000e042 <unlockScheduler()>
c001555b:	eb 05                	jmp    c0015562 <timerHandler(unsigned long long)+0x123>
c001555d:	29 f0                	sub    eax,esi
c001555f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015562:	83 c4 0c             	add    esp,0xc
c0015565:	5b                   	pop    ebx
c0015566:	5e                   	pop    esi
c0015567:	5f                   	pop    edi
c0015568:	5d                   	pop    ebp
c0015569:	e9 8b 8e ff ff       	jmp    c000e3f9 <unlockStuff()>
c001556e:	83 c4 0c             	add    esp,0xc
c0015571:	5b                   	pop    ebx
c0015572:	5e                   	pop    esi
c0015573:	5f                   	pop    edi
c0015574:	5d                   	pop    ebp
c0015575:	c3                   	ret    

c0015576 <setupTimer(int)>:
c0015576:	57                   	push   edi
c0015577:	56                   	push   esi
c0015578:	53                   	push   ebx
c0015579:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001557d:	e8 21 19 00 00       	call   c0016ea3 <getCPUNumber()>
c0015582:	85 c0                	test   eax,eax
c0015584:	74 32                	je     c00155b8 <setupTimer(int)+0x42>
c0015586:	83 ec 0c             	sub    esp,0xc
c0015589:	68 60 01 00 00       	push   0x160
c001558e:	e8 bb cb ff ff       	call   c001214e <operator new(unsigned long)>
c0015593:	89 04 24             	mov    DWORD PTR [esp],eax
c0015596:	89 c3                	mov    ebx,eax
c0015598:	e8 57 84 00 00       	call   c001d9f4 <APICTimer::APICTimer()>
c001559d:	6a 00                	push   0x0
c001559f:	6a 00                	push   0x0
c00155a1:	56                   	push   esi
c00155a2:	53                   	push   ebx
c00155a3:	e8 54 83 00 00       	call   c001d8fc <APICTimer::open(int, int, void*)>
c00155a8:	83 c4 20             	add    esp,0x20
c00155ab:	e8 f6 18 00 00       	call   c0016ea6 <thisCPU()>
c00155b0:	56                   	push   esi
c00155b1:	56                   	push   esi
c00155b2:	53                   	push   ebx
c00155b3:	e9 96 00 00 00       	jmp    c001564e <setupTimer(int)+0xd8>
c00155b8:	e8 e9 18 00 00       	call   c0016ea6 <thisCPU()>
c00155bd:	83 ec 0c             	sub    esp,0xc
c00155c0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00155c6:	e8 6f e1 ff ff       	call   c001373a <Device::getName()>
c00155cb:	83 c4 10             	add    esp,0x10
c00155ce:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00155d1:	0f 85 87 00 00 00    	jne    c001565e <setupTimer(int)+0xe8>
c00155d7:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00155dc:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00155e3:	74 79                	je     c001565e <setupTimer(int)+0xe8>
c00155e5:	83 ec 0c             	sub    esp,0xc
c00155e8:	68 5c 01 00 00       	push   0x15c
c00155ed:	e8 5c cb ff ff       	call   c001214e <operator new(unsigned long)>
c00155f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00155f5:	89 c3                	mov    ebx,eax
c00155f7:	e8 48 85 00 00       	call   c001db44 <PIT::PIT()>
c00155fc:	59                   	pop    ecx
c00155fd:	5f                   	pop    edi
c00155fe:	53                   	push   ebx
c00155ff:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c0015605:	e8 4e de ff ff       	call   c0013458 <Device::addChild(Device*)>
c001560a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001560c:	6a 00                	push   0x0
c001560e:	6a 00                	push   0x0
c0015610:	56                   	push   esi
c0015611:	53                   	push   ebx
c0015612:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015615:	83 c4 14             	add    esp,0x14
c0015618:	68 60 01 00 00       	push   0x160
c001561d:	e8 2c cb ff ff       	call   c001214e <operator new(unsigned long)>
c0015622:	89 04 24             	mov    DWORD PTR [esp],eax
c0015625:	89 c7                	mov    edi,eax
c0015627:	e8 c8 83 00 00       	call   c001d9f4 <APICTimer::APICTimer()>
c001562c:	6a 00                	push   0x0
c001562e:	6a 00                	push   0x0
c0015630:	56                   	push   esi
c0015631:	57                   	push   edi
c0015632:	e8 c5 82 00 00       	call   c001d8fc <APICTimer::open(int, int, void*)>
c0015637:	83 c4 20             	add    esp,0x20
c001563a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001563c:	6a 00                	push   0x0
c001563e:	6a 00                	push   0x0
c0015640:	6a 00                	push   0x0
c0015642:	53                   	push   ebx
c0015643:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015646:	e8 5b 18 00 00       	call   c0016ea6 <thisCPU()>
c001564b:	5a                   	pop    edx
c001564c:	59                   	pop    ecx
c001564d:	57                   	push   edi
c001564e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015654:	e8 ff dd ff ff       	call   c0013458 <Device::addChild(Device*)>
c0015659:	83 c4 10             	add    esp,0x10
c001565c:	eb 33                	jmp    c0015691 <setupTimer(int)+0x11b>
c001565e:	83 ec 0c             	sub    esp,0xc
c0015661:	68 5c 01 00 00       	push   0x15c
c0015666:	e8 e3 ca ff ff       	call   c001214e <operator new(unsigned long)>
c001566b:	89 04 24             	mov    DWORD PTR [esp],eax
c001566e:	89 c3                	mov    ebx,eax
c0015670:	e8 cf 84 00 00       	call   c001db44 <PIT::PIT()>
c0015675:	58                   	pop    eax
c0015676:	5a                   	pop    edx
c0015677:	53                   	push   ebx
c0015678:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c001567e:	e8 d5 dd ff ff       	call   c0013458 <Device::addChild(Device*)>
c0015683:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015685:	6a 00                	push   0x0
c0015687:	6a 00                	push   0x0
c0015689:	56                   	push   esi
c001568a:	53                   	push   ebx
c001568b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001568e:	83 c4 20             	add    esp,0x20
c0015691:	89 d8                	mov    eax,ebx
c0015693:	5b                   	pop    ebx
c0015694:	5e                   	pop    esi
c0015695:	5f                   	pop    edi
c0015696:	c3                   	ret    
c0015697:	90                   	nop

c0015698 <VCache::VCache(PhysicalDisk*)>:
c0015698:	53                   	push   ebx
c0015699:	83 ec 08             	sub    esp,0x8
c001569c:	ba 4c 12 02 c0       	mov    edx,0xc002124c
c00156a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a5:	89 10                	mov    DWORD PTR [eax],edx
c00156a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00156b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00156bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00156c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00156cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00156da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00156e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00156ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00156f4:	83 ec 0c             	sub    esp,0xc
c00156f7:	6a 10                	push   0x10
c00156f9:	e8 50 ca ff ff       	call   c001214e <operator new(unsigned long)>
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	89 c3                	mov    ebx,eax
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	53                   	push   ebx
c0015707:	e8 4c 8a ff ff       	call   c000e158 <Mutex::Mutex()>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015713:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001571e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015725:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001572c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015730:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001573a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001573d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015741:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015747:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001574d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015751:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015754:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001575b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001575f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015763:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015769:	c1 e0 06             	shl    eax,0x6
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	50                   	push   eax
c0015770:	e8 24 7a ff ff       	call   c000d199 <malloc>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	89 c2                	mov    edx,eax
c001577a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015781:	90                   	nop
c0015782:	83 c4 08             	add    esp,0x8
c0015785:	5b                   	pop    ebx
c0015786:	c3                   	ret    
c0015787:	90                   	nop

c0015788 <VCache::writeWriteBuffer()>:
c0015788:	53                   	push   ebx
c0015789:	83 ec 14             	sub    esp,0x14
c001578c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015790:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015793:	8b 10                	mov    edx,DWORD PTR [eax]
c0015795:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015798:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001579b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001579e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00157a1:	50                   	push   eax
c00157a2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00157a5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00157ac:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00157b3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00157b7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00157be:	83 c4 28             	add    esp,0x28
c00157c1:	5b                   	pop    ebx
c00157c2:	c3                   	ret    
c00157c3:	90                   	nop

c00157c4 <VCache::~VCache()>:
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	ba 4c 12 02 c0       	mov    edx,0xc002124c
c00157cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157d0:	89 10                	mov    DWORD PTR [eax],edx
c00157d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157d6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00157d9:	84 c0                	test   al,al
c00157db:	74 0f                	je     c00157ec <VCache::~VCache()+0x28>
c00157dd:	83 ec 0c             	sub    esp,0xc
c00157e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157e4:	e8 9f ff ff ff       	call   c0015788 <VCache::writeWriteBuffer()>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157f3:	83 ec 0c             	sub    esp,0xc
c00157f6:	50                   	push   eax
c00157f7:	e8 ad 79 ff ff       	call   c000d1a9 <free>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	90                   	nop
c0015800:	83 c4 0c             	add    esp,0xc
c0015803:	c3                   	ret    

c0015804 <VCache::~VCache()>:
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	83 ec 0c             	sub    esp,0xc
c001580a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001580e:	e8 b1 ff ff ff       	call   c00157c4 <VCache::~VCache()>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	83 ec 08             	sub    esp,0x8
c0015819:	6a 30                	push   0x30
c001581b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001581f:	e8 39 c9 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0015824:	83 c4 10             	add    esp,0x10
c0015827:	83 c4 0c             	add    esp,0xc
c001582a:	c3                   	ret    
c001582b:	90                   	nop

c001582c <VCache::write(unsigned long long, int, void*)>:
c001582c:	55                   	push   ebp
c001582d:	57                   	push   edi
c001582e:	56                   	push   esi
c001582f:	53                   	push   ebx
c0015830:	83 ec 28             	sub    esp,0x28
c0015833:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015837:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001583b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001583f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015843:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015846:	e8 e1 8e ff ff       	call   c000e72c <Semaphore::acquire()>
c001584b:	83 c4 10             	add    esp,0x10
c001584e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015852:	74 66                	je     c00158ba <VCache::write(unsigned long long, int, void*)+0x8e>
c0015854:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015857:	99                   	cdq    
c0015858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001585c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001585f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015862:	89 c1                	mov    ecx,eax
c0015864:	89 d0                	mov    eax,edx
c0015866:	31 f1                	xor    ecx,esi
c0015868:	31 f8                	xor    eax,edi
c001586a:	89 ca                	mov    edx,ecx
c001586c:	09 c2                	or     edx,eax
c001586e:	75 3e                	jne    c00158ae <VCache::write(unsigned long long, int, void*)+0x82>
c0015870:	83 fd 01             	cmp    ebp,0x1
c0015873:	75 39                	jne    c00158ae <VCache::write(unsigned long long, int, void*)+0x82>
c0015875:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015878:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001587e:	51                   	push   ecx
c001587f:	50                   	push   eax
c0015880:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015884:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015888:	0f af c8             	imul   ecx,eax
c001588b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001588e:	51                   	push   ecx
c001588f:	e8 3e ad fe ff       	call   c00005d2 <memcpy>
c0015894:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015897:	83 c4 10             	add    esp,0x10
c001589a:	40                   	inc    eax
c001589b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001589e:	83 f8 40             	cmp    eax,0x40
c00158a1:	75 57                	jne    c00158fa <VCache::write(unsigned long long, int, void*)+0xce>
c00158a3:	83 ec 0c             	sub    esp,0xc
c00158a6:	53                   	push   ebx
c00158a7:	e8 dc fe ff ff       	call   c0015788 <VCache::writeWriteBuffer()>
c00158ac:	eb 34                	jmp    c00158e2 <VCache::write(unsigned long long, int, void*)+0xb6>
c00158ae:	83 ec 0c             	sub    esp,0xc
c00158b1:	53                   	push   ebx
c00158b2:	e8 d1 fe ff ff       	call   c0015788 <VCache::writeWriteBuffer()>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00158bd:	83 fd 3f             	cmp    ebp,0x3f
c00158c0:	7f 25                	jg     c00158e7 <VCache::write(unsigned long long, int, void*)+0xbb>
c00158c2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00158c5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00158c8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00158cb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00158cf:	52                   	push   edx
c00158d0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00158d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00158da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00158dd:	e8 f0 ac fe ff       	call   c00005d2 <memcpy>
c00158e2:	83 c4 10             	add    esp,0x10
c00158e5:	eb 13                	jmp    c00158fa <VCache::write(unsigned long long, int, void*)+0xce>
c00158e7:	83 ec 0c             	sub    esp,0xc
c00158ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00158ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158f0:	55                   	push   ebp
c00158f1:	57                   	push   edi
c00158f2:	56                   	push   esi
c00158f3:	50                   	push   eax
c00158f4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00158f7:	83 c4 20             	add    esp,0x20
c00158fa:	83 ec 0c             	sub    esp,0xc
c00158fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015900:	e8 c3 93 ff ff       	call   c000ecc8 <Semaphore::release()>
c0015905:	83 c4 2c             	add    esp,0x2c
c0015908:	31 c0                	xor    eax,eax
c001590a:	5b                   	pop    ebx
c001590b:	5e                   	pop    esi
c001590c:	5f                   	pop    edi
c001590d:	5d                   	pop    ebp
c001590e:	c3                   	ret    
c001590f:	90                   	nop

c0015910 <VCache::read(unsigned long long, int, void*)>:
c0015910:	57                   	push   edi
c0015911:	56                   	push   esi
c0015912:	53                   	push   ebx
c0015913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015917:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001591b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001591f:	83 ec 0c             	sub    esp,0xc
c0015922:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015925:	e8 02 8e ff ff       	call   c000e72c <Semaphore::acquire()>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015931:	74 0c                	je     c001593f <VCache::read(unsigned long long, int, void*)+0x2f>
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	53                   	push   ebx
c0015937:	e8 4c fe ff ff       	call   c0015788 <VCache::writeWriteBuffer()>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015942:	83 ec 0c             	sub    esp,0xc
c0015945:	8b 10                	mov    edx,DWORD PTR [eax]
c0015947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001594b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001594f:	57                   	push   edi
c0015950:	56                   	push   esi
c0015951:	50                   	push   eax
c0015952:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015955:	83 c4 14             	add    esp,0x14
c0015958:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001595b:	e8 68 93 ff ff       	call   c000ecc8 <Semaphore::release()>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	31 c0                	xor    eax,eax
c0015965:	5b                   	pop    ebx
c0015966:	5e                   	pop    esi
c0015967:	5f                   	pop    edi
c0015968:	c3                   	ret    
c0015969:	90                   	nop

c001596a <Video::putrect(int, int, int, int, unsigned int)>:
c001596a:	55                   	push   ebp
c001596b:	57                   	push   edi
c001596c:	56                   	push   esi
c001596d:	53                   	push   ebx
c001596e:	83 ec 1c             	sub    esp,0x1c
c0015971:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015975:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015979:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001597d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015981:	01 e8                	add    eax,ebp
c0015983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015987:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001598b:	01 df                	add    edi,ebx
c001598d:	39 fb                	cmp    ebx,edi
c001598f:	7d 1b                	jge    c00159ac <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015991:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015995:	7d 12                	jge    c00159a9 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015997:	8b 16                	mov    edx,DWORD PTR [esi]
c0015999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001599d:	53                   	push   ebx
c001599e:	55                   	push   ebp
c001599f:	45                   	inc    ebp
c00159a0:	56                   	push   esi
c00159a1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	eb e8                	jmp    c0015991 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00159a9:	43                   	inc    ebx
c00159aa:	eb e1                	jmp    c001598d <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00159ac:	83 c4 1c             	add    esp,0x1c
c00159af:	5b                   	pop    ebx
c00159b0:	5e                   	pop    esi
c00159b1:	5f                   	pop    edi
c00159b2:	5d                   	pop    ebp
c00159b3:	c3                   	ret    

c00159b4 <Video::blit(unsigned int*, int, int, int, int)>:
c00159b4:	55                   	push   ebp
c00159b5:	57                   	push   edi
c00159b6:	56                   	push   esi
c00159b7:	53                   	push   ebx
c00159b8:	83 ec 1c             	sub    esp,0x1c
c00159bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00159bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159c3:	85 c0                	test   eax,eax
c00159c5:	79 02                	jns    c00159c9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00159c7:	31 c0                	xor    eax,eax
c00159c9:	c1 e0 02             	shl    eax,0x2
c00159cc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00159d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00159d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00159d8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00159dc:	39 d8                	cmp    eax,ebx
c00159de:	7e 49                	jle    c0015a29 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00159e0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00159e6:	7c 41                	jl     c0015a29 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00159e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00159ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00159f0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00159f4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00159f8:	39 f9                	cmp    ecx,edi
c00159fa:	7e 22                	jle    c0015a1e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00159fc:	83 c5 04             	add    ebp,0x4
c00159ff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015a05:	7c 14                	jl     c0015a1b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015a07:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015a09:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015a0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a14:	56                   	push   esi
c0015a15:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	47                   	inc    edi
c0015a1c:	eb d2                	jmp    c00159f0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a22:	43                   	inc    ebx
c0015a23:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015a27:	eb ab                	jmp    c00159d4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015a29:	83 c4 1c             	add    esp,0x1c
c0015a2c:	5b                   	pop    ebx
c0015a2d:	5e                   	pop    esi
c0015a2e:	5f                   	pop    edi
c0015a2f:	5d                   	pop    ebp
c0015a30:	c3                   	ret    
c0015a31:	90                   	nop

c0015a32 <Video::clearScreen(unsigned int)>:
c0015a32:	57                   	push   edi
c0015a33:	56                   	push   esi
c0015a34:	53                   	push   ebx
c0015a35:	31 db                	xor    ebx,ebx
c0015a37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a3b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015a41:	7e 1f                	jle    c0015a62 <Video::clearScreen(unsigned int)+0x30>
c0015a43:	31 ff                	xor    edi,edi
c0015a45:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015a4b:	7e 12                	jle    c0015a5f <Video::clearScreen(unsigned int)+0x2d>
c0015a4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a53:	53                   	push   ebx
c0015a54:	57                   	push   edi
c0015a55:	47                   	inc    edi
c0015a56:	56                   	push   esi
c0015a57:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015a5a:	83 c4 10             	add    esp,0x10
c0015a5d:	eb e6                	jmp    c0015a45 <Video::clearScreen(unsigned int)+0x13>
c0015a5f:	43                   	inc    ebx
c0015a60:	eb d9                	jmp    c0015a3b <Video::clearScreen(unsigned int)+0x9>
c0015a62:	5b                   	pop    ebx
c0015a63:	5e                   	pop    esi
c0015a64:	5f                   	pop    edi
c0015a65:	c3                   	ret    

c0015a66 <Video::putpixel(int, int, unsigned int)>:
c0015a66:	c7 44 24 04 54 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021254
c0015a6e:	e9 2b 71 ff ff       	jmp    c000cb9e <kprintf(char const*, ...)>
c0015a73:	90                   	nop

c0015a74 <Video::Video(char const*)>:
c0015a74:	83 ec 0c             	sub    esp,0xc
c0015a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7b:	83 ec 08             	sub    esp,0x8
c0015a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a82:	50                   	push   eax
c0015a83:	e8 c0 db ff ff       	call   c0013648 <Device::Device(char const*)>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	ba 6c 12 02 c0       	mov    edx,0xc002126c
c0015a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a94:	89 10                	mov    DWORD PTR [eax],edx
c0015a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a9a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015aa4:	90                   	nop
c0015aa5:	83 c4 0c             	add    esp,0xc
c0015aa8:	c3                   	ret    
c0015aa9:	90                   	nop

c0015aaa <Video::~Video()>:
c0015aaa:	83 ec 0c             	sub    esp,0xc
c0015aad:	ba 6c 12 02 c0       	mov    edx,0xc002126c
c0015ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab6:	89 10                	mov    DWORD PTR [eax],edx
c0015ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	50                   	push   eax
c0015ac0:	e8 35 d8 ff ff       	call   c00132fa <Device::~Device()>
c0015ac5:	83 c4 10             	add    esp,0x10
c0015ac8:	90                   	nop
c0015ac9:	83 c4 0c             	add    esp,0xc
c0015acc:	c3                   	ret    
c0015acd:	90                   	nop

c0015ace <Video::~Video()>:
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	83 ec 0c             	sub    esp,0xc
c0015ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ad8:	e8 cd ff ff ff       	call   c0015aaa <Video::~Video()>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	83 ec 08             	sub    esp,0x8
c0015ae3:	68 64 01 00 00       	push   0x164
c0015ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aec:	e8 6c c6 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	83 c4 0c             	add    esp,0xc
c0015af7:	c3                   	ret    

c0015af8 <Video::isMonochrome()>:
c0015af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015afc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015b02:	c3                   	ret    
c0015b03:	90                   	nop

c0015b04 <Video::getWidth()>:
c0015b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015b0e:	c3                   	ret    
c0015b0f:	90                   	nop

c0015b10 <Video::getHeight()>:
c0015b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b14:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015b1a:	c3                   	ret    
c0015b1b:	90                   	nop

c0015b1c <Video::drawCursor(int, int, unsigned char*, int)>:
c0015b1c:	55                   	push   ebp
c0015b1d:	57                   	push   edi
c0015b1e:	56                   	push   esi
c0015b1f:	53                   	push   ebx
c0015b20:	83 ec 2c             	sub    esp,0x2c
c0015b23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015b27:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b2b:	83 f8 01             	cmp    eax,0x1
c0015b2e:	19 c9                	sbb    ecx,ecx
c0015b30:	31 db                	xor    ebx,ebx
c0015b32:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015b36:	89 cd                	mov    ebp,ecx
c0015b38:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015b40:	f7 d5                	not    ebp
c0015b42:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015b48:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b4c:	01 d8                	add    eax,ebx
c0015b4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b52:	56                   	push   esi
c0015b53:	e8 b8 ff ff ff       	call   c0015b10 <Video::getHeight()>
c0015b58:	59                   	pop    ecx
c0015b59:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015b5d:	7e 70                	jle    c0015bcf <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015b5f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b63:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b67:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015b6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b6e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b72:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015b79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b7d:	89 f8                	mov    eax,edi
c0015b7f:	83 c0 20             	add    eax,0x20
c0015b82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b86:	56                   	push   esi
c0015b87:	e8 78 ff ff ff       	call   c0015b04 <Video::getWidth()>
c0015b8c:	5a                   	pop    edx
c0015b8d:	39 c7                	cmp    edi,eax
c0015b8f:	7d 34                	jge    c0015bc5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015b91:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015b96:	74 05                	je     c0015b9d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015b98:	8b 06                	mov    eax,DWORD PTR [esi]
c0015b9a:	55                   	push   ebp
c0015b9b:	eb 0d                	jmp    c0015baa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015b9d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015ba2:	74 12                	je     c0015bb6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015ba4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ba6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015baa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bae:	57                   	push   edi
c0015baf:	56                   	push   esi
c0015bb0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015bb3:	83 c4 10             	add    esp,0x10
c0015bb6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015bba:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015bbe:	47                   	inc    edi
c0015bbf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015bc3:	75 c1                	jne    c0015b86 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015bc5:	43                   	inc    ebx
c0015bc6:	83 fb 20             	cmp    ebx,0x20
c0015bc9:	0f 85 79 ff ff ff    	jne    c0015b48 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015bcf:	83 c4 2c             	add    esp,0x2c
c0015bd2:	5b                   	pop    ebx
c0015bd3:	5e                   	pop    esi
c0015bd4:	5f                   	pop    edi
c0015bd5:	5d                   	pop    ebp
c0015bd6:	c3                   	ret    
c0015bd7:	90                   	nop

c0015bd8 <ACPI::close(int, int, void*)>:
c0015bd8:	83 ec 1c             	sub    esp,0x1c
c0015bdb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015be3:	74 0a                	je     c0015bef <ACPI::close(int, int, void*)+0x17>
c0015be5:	b8 00 00 00 00       	mov    eax,0x0
c0015bea:	e9 9a 00 00 00       	jmp    c0015c89 <ACPI::close(int, int, void*)+0xb1>
c0015bef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015bf4:	75 37                	jne    c0015c2d <ACPI::close(int, int, void*)+0x55>
c0015bf6:	83 ec 0c             	sub    esp,0xc
c0015bf9:	68 a4 12 02 c0       	push   0xc00212a4
c0015bfe:	e8 9b 6f ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0015c0b:	85 c0                	test   eax,eax
c0015c0d:	74 07                	je     c0015c16 <ACPI::close(int, int, void*)+0x3e>
c0015c0f:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0015c14:	ff d0                	call   eax
c0015c16:	83 ec 0c             	sub    esp,0xc
c0015c19:	68 78 13 02 c0       	push   0xc0021378
c0015c1e:	e8 99 70 ff ff       	call   c000ccbc <panic(char const*)>
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c2b:	eb 5c                	jmp    c0015c89 <ACPI::close(int, int, void*)+0xb1>
c0015c2d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015c32:	75 50                	jne    c0015c84 <ACPI::close(int, int, void*)+0xac>
c0015c34:	a1 c4 3c 02 c0       	mov    eax,ds:0xc0023cc4
c0015c39:	85 c0                	test   eax,eax
c0015c3b:	74 07                	je     c0015c44 <ACPI::close(int, int, void*)+0x6c>
c0015c3d:	a1 c4 3c 02 c0       	mov    eax,ds:0xc0023cc4
c0015c42:	ff d0                	call   eax
c0015c44:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015c49:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c4e:	83 e0 02             	and    eax,0x2
c0015c51:	74 1c                	je     c0015c6f <ACPI::close(int, int, void*)+0x97>
c0015c53:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015c5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c5e:	89 c2                	mov    edx,eax
c0015c60:	ec                   	in     al,dx
c0015c61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015c65:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015c69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c6d:	eb da                	jmp    c0015c49 <ACPI::close(int, int, void*)+0x71>
c0015c6f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015c76:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015c7b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015c7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c83:	ee                   	out    dx,al
c0015c84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c89:	83 c4 1c             	add    esp,0x1c
c0015c8c:	c3                   	ret    

c0015c8d <findRSDP()>:
c0015c8d:	83 ec 1c             	sub    esp,0x1c
c0015c90:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0015c95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015c9b:	83 e0 04             	and    eax,0x4
c0015c9e:	84 c0                	test   al,al
c0015ca0:	75 07                	jne    c0015ca9 <findRSDP()+0x1c>
c0015ca2:	b8 00 00 00 00       	mov    eax,0x0
c0015ca7:	eb 6a                	jmp    c0015d13 <findRSDP()+0x86>
c0015ca9:	a1 b0 34 02 c0       	mov    eax,ds:0xc00234b0
c0015cae:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015cb3:	7f 1b                	jg     c0015cd0 <findRSDP()+0x43>
c0015cb5:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0015cba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015cc0:	83 e2 fb             	and    edx,0xfffffffb
c0015cc3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015cc9:	b8 00 00 00 00       	mov    eax,0x0
c0015cce:	eb 43                	jmp    c0015d13 <findRSDP()+0x86>
c0015cd0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015cd8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015ce0:	77 2c                	ja     c0015d0e <findRSDP()+0x81>
c0015ce2:	83 ec 04             	sub    esp,0x4
c0015ce5:	6a 08                	push   0x8
c0015ce7:	68 b1 12 02 c0       	push   0xc00212b1
c0015cec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cf0:	e8 7a a8 fe ff       	call   c000056f <memcmp>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	85 c0                	test   eax,eax
c0015cfa:	0f 94 c0             	sete   al
c0015cfd:	84 c0                	test   al,al
c0015cff:	74 06                	je     c0015d07 <findRSDP()+0x7a>
c0015d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d05:	eb 0c                	jmp    c0015d13 <findRSDP()+0x86>
c0015d07:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015d0c:	eb ca                	jmp    c0015cd8 <findRSDP()+0x4b>
c0015d0e:	b8 00 00 00 00       	mov    eax,0x0
c0015d13:	83 c4 1c             	add    esp,0x1c
c0015d16:	c3                   	ret    

c0015d17 <loadACPITables(unsigned char*)>:
c0015d17:	56                   	push   esi
c0015d18:	53                   	push   ebx
c0015d19:	83 ec 44             	sub    esp,0x44
c0015d1c:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0015d21:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015d27:	83 e0 04             	and    eax,0x4
c0015d2a:	84 c0                	test   al,al
c0015d2c:	0f 84 05 02 00 00    	je     c0015f37 <loadACPITables(unsigned char*)+0x220>
c0015d32:	a0 e0 3e 02 c0       	mov    al,ds:0xc0023ee0
c0015d37:	84 c0                	test   al,al
c0015d39:	74 75                	je     c0015db0 <loadACPITables(unsigned char*)+0x99>
c0015d3b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015d3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015d4a:	83 e8 24             	sub    eax,0x24
c0015d4d:	c1 e8 03             	shr    eax,0x3
c0015d50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d54:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015d5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d60:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015d64:	0f 8d b2 00 00 00    	jge    c0015e1c <loadACPITables(unsigned char*)+0x105>
c0015d6a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015d6e:	83 c0 24             	add    eax,0x24
c0015d71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015d75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d81:	c1 e0 03             	shl    eax,0x3
c0015d84:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0015d88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d91:	89 c1                	mov    ecx,eax
c0015d93:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0015d98:	8d 50 01             	lea    edx,[eax+0x1]
c0015d9b:	89 15 cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,edx
c0015da1:	89 ca                	mov    edx,ecx
c0015da3:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0015daa:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0015dae:	eb ac                	jmp    c0015d5c <loadACPITables(unsigned char*)+0x45>
c0015db0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015db4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015dbf:	83 e8 24             	sub    eax,0x24
c0015dc2:	c1 e8 02             	shr    eax,0x2
c0015dc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015dc9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0015dd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015dd5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0015dd9:	7d 41                	jge    c0015e1c <loadACPITables(unsigned char*)+0x105>
c0015ddb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015ddf:	83 c0 24             	add    eax,0x24
c0015de2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015df2:	c1 e0 02             	shl    eax,0x2
c0015df5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0015df9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015dff:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0015e04:	8d 50 01             	lea    edx,[eax+0x1]
c0015e07:	89 15 cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,edx
c0015e0d:	89 ca                	mov    edx,ecx
c0015e0f:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0015e16:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0015e1a:	eb b5                	jmp    c0015dd1 <loadACPITables(unsigned char*)+0xba>
c0015e1c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0015e24:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0015e29:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0015e2d:	0f 8d 05 01 00 00    	jge    c0015f38 <loadACPITables(unsigned char*)+0x221>
c0015e33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e37:	8b 04 c5 e4 3c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc31c]
c0015e3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e4e:	25 ff 0f 00 00       	and    eax,0xfff
c0015e53:	89 c6                	mov    esi,eax
c0015e55:	e8 f3 b2 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0015e5a:	89 c3                	mov    ebx,eax
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	6a 01                	push   0x1
c0015e61:	e8 57 b1 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	6a 01                	push   0x1
c0015e78:	6a 01                	push   0x1
c0015e7a:	50                   	push   eax
c0015e7b:	52                   	push   edx
c0015e7c:	53                   	push   ebx
c0015e7d:	e8 5e ba ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e82:	83 c4 20             	add    esp,0x20
c0015e85:	09 f0                	or     eax,esi
c0015e87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e8f:	c1 e0 03             	shl    eax,0x3
c0015e92:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c0015e97:	83 ec 04             	sub    esp,0x4
c0015e9a:	6a 04                	push   0x4
c0015e9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ea0:	50                   	push   eax
c0015ea1:	e8 2c a7 fe ff       	call   c00005d2 <memcpy>
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eb8:	05 00 10 00 00       	add    eax,0x1000
c0015ebd:	c1 e8 0c             	shr    eax,0xc
c0015ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ec8:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ecf:	25 ff 0f 00 00       	and    eax,0xfff
c0015ed4:	89 c6                	mov    esi,eax
c0015ed6:	e8 72 b2 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0015edb:	89 c3                	mov    ebx,eax
c0015edd:	83 ec 0c             	sub    esp,0xc
c0015ee0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ee4:	e8 d4 b0 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ef0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015ef6:	83 ec 0c             	sub    esp,0xc
c0015ef9:	6a 01                	push   0x1
c0015efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015eff:	50                   	push   eax
c0015f00:	52                   	push   edx
c0015f01:	53                   	push   ebx
c0015f02:	e8 d9 b9 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f07:	83 c4 20             	add    esp,0x20
c0015f0a:	09 f0                	or     eax,esi
c0015f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f13:	83 ec 0c             	sub    esp,0xc
c0015f16:	50                   	push   eax
c0015f17:	e8 d7 b3 ff ff       	call   c00112f3 <Virt::freeKernelVirtualPages(unsigned long)>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f27:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0015f2e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0015f32:	e9 ed fe ff ff       	jmp    c0015e24 <loadACPITables(unsigned char*)+0x10d>
c0015f37:	90                   	nop
c0015f38:	83 c4 44             	add    esp,0x44
c0015f3b:	5b                   	pop    ebx
c0015f3c:	5e                   	pop    esi
c0015f3d:	c3                   	ret    

c0015f3e <findRSDT(unsigned char*)>:
c0015f3e:	56                   	push   esi
c0015f3f:	53                   	push   ebx
c0015f40:	83 ec 44             	sub    esp,0x44
c0015f43:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0015f48:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f4e:	83 e0 04             	and    eax,0x4
c0015f51:	84 c0                	test   al,al
c0015f53:	75 0a                	jne    c0015f5f <findRSDT(unsigned char*)+0x21>
c0015f55:	b8 00 00 00 00       	mov    eax,0x0
c0015f5a:	e9 f7 00 00 00       	jmp    c0016056 <findRSDT(unsigned char*)+0x118>
c0015f5f:	83 ec 04             	sub    esp,0x4
c0015f62:	6a 24                	push   0x24
c0015f64:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0015f68:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015f6c:	50                   	push   eax
c0015f6d:	e8 60 a6 fe ff       	call   c00005d2 <memcpy>
c0015f72:	83 c4 10             	add    esp,0x10
c0015f75:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015f79:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0015f7d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015f85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f8d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015f91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015f99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f9d:	25 ff 0f 00 00       	and    eax,0xfff
c0015fa2:	89 c6                	mov    esi,eax
c0015fa4:	e8 a4 b1 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0015fa9:	89 c3                	mov    ebx,eax
c0015fab:	83 ec 0c             	sub    esp,0xc
c0015fae:	6a 02                	push   0x2
c0015fb0:	e8 08 b0 ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015fbc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	6a 01                	push   0x1
c0015fc7:	6a 02                	push   0x2
c0015fc9:	50                   	push   eax
c0015fca:	52                   	push   edx
c0015fcb:	53                   	push   ebx
c0015fcc:	e8 0f b9 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015fd1:	83 c4 20             	add    esp,0x20
c0015fd4:	09 f0                	or     eax,esi
c0015fd6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015fda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fde:	25 ff 0f 00 00       	and    eax,0xfff
c0015fe3:	89 c6                	mov    esi,eax
c0015fe5:	e8 63 b1 ff ff       	call   c001114d <Virt::getAKernelVAS()>
c0015fea:	89 c3                	mov    ebx,eax
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	6a 02                	push   0x2
c0015ff1:	e8 c7 af ff ff       	call   c0010fbd <Virt::allocateKernelVirtualPages(int)>
c0015ff6:	83 c4 10             	add    esp,0x10
c0015ff9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ffd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016003:	83 ec 0c             	sub    esp,0xc
c0016006:	6a 01                	push   0x1
c0016008:	6a 02                	push   0x2
c001600a:	50                   	push   eax
c001600b:	52                   	push   edx
c001600c:	53                   	push   ebx
c001600d:	e8 ce b8 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016012:	83 c4 20             	add    esp,0x20
c0016015:	09 f0                	or     eax,esi
c0016017:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001601b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016020:	75 11                	jne    c0016033 <findRSDT(unsigned char*)+0xf5>
c0016022:	c6 05 e0 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee0,0x0
c0016029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001602d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016031:	eb 1f                	jmp    c0016052 <findRSDT(unsigned char*)+0x114>
c0016033:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016038:	75 11                	jne    c001604b <findRSDT(unsigned char*)+0x10d>
c001603a:	c6 05 e0 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee0,0x1
c0016041:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016045:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016049:	eb 07                	jmp    c0016052 <findRSDT(unsigned char*)+0x114>
c001604b:	b8 00 00 00 00       	mov    eax,0x0
c0016050:	eb 04                	jmp    c0016056 <findRSDT(unsigned char*)+0x118>
c0016052:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016056:	83 c4 44             	add    esp,0x44
c0016059:	5b                   	pop    ebx
c001605a:	5e                   	pop    esi
c001605b:	c3                   	ret    

c001605c <findDataTable(unsigned char*, char*)>:
c001605c:	83 ec 1c             	sub    esp,0x1c
c001605f:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016064:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001606a:	83 e0 04             	and    eax,0x4
c001606d:	84 c0                	test   al,al
c001606f:	75 07                	jne    c0016078 <findDataTable(unsigned char*, char*)+0x1c>
c0016071:	b8 00 00 00 00       	mov    eax,0x0
c0016076:	eb 7c                	jmp    c00160f4 <findDataTable(unsigned char*, char*)+0x98>
c0016078:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016080:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0016085:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016089:	7d 3a                	jge    c00160c5 <findDataTable(unsigned char*, char*)+0x69>
c001608b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001608f:	c1 e0 03             	shl    eax,0x3
c0016092:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c0016097:	83 ec 04             	sub    esp,0x4
c001609a:	6a 04                	push   0x4
c001609c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a0:	50                   	push   eax
c00160a1:	e8 c9 a4 fe ff       	call   c000056f <memcmp>
c00160a6:	83 c4 10             	add    esp,0x10
c00160a9:	85 c0                	test   eax,eax
c00160ab:	0f 94 c0             	sete   al
c00160ae:	84 c0                	test   al,al
c00160b0:	74 0d                	je     c00160bf <findDataTable(unsigned char*, char*)+0x63>
c00160b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b6:	8b 04 c5 e4 3c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc31c]
c00160bd:	eb 35                	jmp    c00160f4 <findDataTable(unsigned char*, char*)+0x98>
c00160bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00160c3:	eb bb                	jmp    c0016080 <findDataTable(unsigned char*, char*)+0x24>
c00160c5:	a0 e0 3e 02 c0       	mov    al,ds:0xc0023ee0
c00160ca:	84 c0                	test   al,al
c00160cc:	74 07                	je     c00160d5 <findDataTable(unsigned char*, char*)+0x79>
c00160ce:	b8 58 00 00 00       	mov    eax,0x58
c00160d3:	eb 05                	jmp    c00160da <findDataTable(unsigned char*, char*)+0x7e>
c00160d5:	b8 52 00 00 00       	mov    eax,0x52
c00160da:	83 ec 04             	sub    esp,0x4
c00160dd:	50                   	push   eax
c00160de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160e2:	68 9c 13 02 c0       	push   0xc002139c
c00160e7:	e8 b2 6a ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c00160ec:	83 c4 10             	add    esp,0x10
c00160ef:	b8 00 00 00 00       	mov    eax,0x0
c00160f4:	83 c4 1c             	add    esp,0x1c
c00160f7:	c3                   	ret    

c00160f8 <scanMADT()>:
c00160f8:	83 ec 2c             	sub    esp,0x2c
c00160fb:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016100:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016106:	83 e0 04             	and    eax,0x4
c0016109:	84 c0                	test   al,al
c001610b:	0f 84 73 03 00 00    	je     c0016484 <scanMADT()+0x38c>
c0016111:	e8 77 fb ff ff       	call   c0015c8d <findRSDP()>
c0016116:	a3 ec 3e 02 c0       	mov    ds:0xc0023eec,eax
c001611b:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c0016120:	85 c0                	test   eax,eax
c0016122:	75 19                	jne    c001613d <scanMADT()+0x45>
c0016124:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016129:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001612f:	83 e2 fb             	and    edx,0xfffffffb
c0016132:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016138:	e9 4b 03 00 00       	jmp    c0016488 <scanMADT()+0x390>
c001613d:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c0016142:	83 ec 0c             	sub    esp,0xc
c0016145:	50                   	push   eax
c0016146:	e8 f3 fd ff ff       	call   c0015f3e <findRSDT(unsigned char*)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0016153:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0016158:	85 c0                	test   eax,eax
c001615a:	75 19                	jne    c0016175 <scanMADT()+0x7d>
c001615c:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016161:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016167:	83 e2 fb             	and    edx,0xfffffffb
c001616a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016170:	e9 13 03 00 00       	jmp    c0016488 <scanMADT()+0x390>
c0016175:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001617a:	83 ec 0c             	sub    esp,0xc
c001617d:	50                   	push   eax
c001617e:	e8 94 fb ff ff       	call   c0015d17 <loadACPITables(unsigned char*)>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001618b:	83 ec 08             	sub    esp,0x8
c001618e:	68 ba 12 02 c0       	push   0xc00212ba
c0016193:	50                   	push   eax
c0016194:	e8 c3 fe ff ff       	call   c001605c <findDataTable(unsigned char*, char*)>
c0016199:	83 c4 10             	add    esp,0x10
c001619c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161a0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00161a5:	75 19                	jne    c00161c0 <scanMADT()+0xc8>
c00161a7:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00161ac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00161b2:	83 e2 fe             	and    edx,0xfffffffe
c00161b5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00161bb:	e9 c8 02 00 00       	jmp    c0016488 <scanMADT()+0x390>
c00161c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00161cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00161d3:	0f 87 af 02 00 00    	ja     c0016488 <scanMADT()+0x390>
c00161d9:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00161e1:	0f 87 a1 02 00 00    	ja     c0016488 <scanMADT()+0x390>
c00161e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f3:	8d 50 01             	lea    edx,[eax+0x1]
c00161f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00161fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00161fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016202:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001620a:	8d 50 01             	lea    edx,[eax+0x1]
c001620d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016211:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016215:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016219:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001621d:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016222:	0f 86 5f 02 00 00    	jbe    c0016487 <scanMADT()+0x38f>
c0016228:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001622d:	75 57                	jne    c0016286 <scanMADT()+0x18e>
c001622f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016233:	8d 50 01             	lea    edx,[eax+0x1]
c0016236:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001623a:	8a 15 20 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024020
c0016240:	0f b6 d2             	movzx  edx,dl
c0016243:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016247:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001624b:	88 82 60 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfa0],al
c0016251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016255:	8d 50 01             	lea    edx,[eax+0x1]
c0016258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001625c:	8a 15 20 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024020
c0016262:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016265:	88 0d 20 40 02 c0    	mov    BYTE PTR ds:0xc0024020,cl
c001626b:	0f b6 d2             	movzx  edx,dl
c001626e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016272:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016276:	88 82 40 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfc0],al
c001627c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016281:	e9 ea 01 00 00       	jmp    c0016470 <scanMADT()+0x378>
c0016286:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c001628b:	0f 85 14 01 00 00    	jne    c00163a5 <scanMADT()+0x2ad>
c0016291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016295:	8d 50 01             	lea    edx,[eax+0x1]
c0016298:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001629c:	8a 15 f0 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023ef0
c00162a2:	0f b6 d2             	movzx  edx,dl
c00162a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00162a9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00162ad:	88 82 00 3f 02 c0    	mov    BYTE PTR [edx-0x3ffdc100],al
c00162b3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00162b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00162bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162bf:	01 d0                	add    eax,edx
c00162c1:	83 c0 2c             	add    eax,0x2c
c00162c4:	8a 00                	mov    al,BYTE PTR [eax]
c00162c6:	0f b6 d0             	movzx  edx,al
c00162c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162cd:	8d 48 01             	lea    ecx,[eax+0x1]
c00162d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162d4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00162d8:	0f b6 c0             	movzx  eax,al
c00162db:	c1 e0 08             	shl    eax,0x8
c00162de:	89 d1                	mov    ecx,edx
c00162e0:	09 c1                	or     ecx,eax
c00162e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e6:	8d 50 02             	lea    edx,[eax+0x2]
c00162e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00162f1:	0f b6 c0             	movzx  eax,al
c00162f4:	c1 e0 10             	shl    eax,0x10
c00162f7:	09 c1                	or     ecx,eax
c00162f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162fd:	8d 50 03             	lea    edx,[eax+0x3]
c0016300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016304:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016308:	0f b6 c0             	movzx  eax,al
c001630b:	c1 e0 18             	shl    eax,0x18
c001630e:	09 c1                	or     ecx,eax
c0016310:	89 ca                	mov    edx,ecx
c0016312:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c0016317:	0f b6 c0             	movzx  eax,al
c001631a:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016321:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016326:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001632a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001632e:	01 d0                	add    eax,edx
c0016330:	83 c0 2c             	add    eax,0x2c
c0016333:	8a 00                	mov    al,BYTE PTR [eax]
c0016335:	0f b6 d0             	movzx  edx,al
c0016338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001633c:	8d 48 01             	lea    ecx,[eax+0x1]
c001633f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016343:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016347:	0f b6 c0             	movzx  eax,al
c001634a:	c1 e0 08             	shl    eax,0x8
c001634d:	89 d1                	mov    ecx,edx
c001634f:	09 c1                	or     ecx,eax
c0016351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016355:	8d 50 02             	lea    edx,[eax+0x2]
c0016358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001635c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016360:	0f b6 c0             	movzx  eax,al
c0016363:	c1 e0 10             	shl    eax,0x10
c0016366:	09 c1                	or     ecx,eax
c0016368:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001636c:	8d 50 03             	lea    edx,[eax+0x3]
c001636f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016373:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016377:	0f b6 c0             	movzx  eax,al
c001637a:	c1 e0 18             	shl    eax,0x18
c001637d:	09 c1                	or     ecx,eax
c001637f:	89 ca                	mov    edx,ecx
c0016381:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c0016386:	0f b6 c0             	movzx  eax,al
c0016389:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c0016390:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016395:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c001639a:	40                   	inc    eax
c001639b:	a2 f0 3e 02 c0       	mov    ds:0xc0023ef0,al
c00163a0:	e9 cb 00 00 00       	jmp    c0016470 <scanMADT()+0x378>
c00163a5:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00163aa:	0f 85 a6 00 00 00    	jne    c0016456 <scanMADT()+0x35e>
c00163b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163b4:	8d 50 01             	lea    edx,[eax+0x1]
c00163b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00163bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163bf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00163c3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00163c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163cb:	8d 50 01             	lea    edx,[eax+0x1]
c00163ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00163d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00163da:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00163de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163e6:	01 d0                	add    eax,edx
c00163e8:	83 c0 2c             	add    eax,0x2c
c00163eb:	8a 00                	mov    al,BYTE PTR [eax]
c00163ed:	0f b6 d0             	movzx  edx,al
c00163f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163f4:	8d 48 01             	lea    ecx,[eax+0x1]
c00163f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00163ff:	0f b6 c0             	movzx  eax,al
c0016402:	c1 e0 08             	shl    eax,0x8
c0016405:	89 d1                	mov    ecx,edx
c0016407:	09 c1                	or     ecx,eax
c0016409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001640d:	8d 50 02             	lea    edx,[eax+0x2]
c0016410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016414:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016418:	0f b6 c0             	movzx  eax,al
c001641b:	c1 e0 10             	shl    eax,0x10
c001641e:	09 c1                	or     ecx,eax
c0016420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016424:	8d 50 03             	lea    edx,[eax+0x3]
c0016427:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001642b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001642f:	0f b6 c0             	movzx  eax,al
c0016432:	c1 e0 18             	shl    eax,0x18
c0016435:	09 c8                	or     eax,ecx
c0016437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001643b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016440:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016445:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001644a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644e:	88 90 20 24 02 c0    	mov    BYTE PTR [eax-0x3ffddbe0],dl
c0016454:	eb 1a                	jmp    c0016470 <scanMADT()+0x378>
c0016456:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001645b:	75 07                	jne    c0016464 <scanMADT()+0x36c>
c001645d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016462:	eb 0c                	jmp    c0016470 <scanMADT()+0x378>
c0016464:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016469:	75 05                	jne    c0016470 <scanMADT()+0x378>
c001646b:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016470:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016475:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016479:	01 d0                	add    eax,edx
c001647b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001647f:	e9 44 fd ff ff       	jmp    c00161c8 <scanMADT()+0xd0>
c0016484:	90                   	nop
c0016485:	eb 01                	jmp    c0016488 <scanMADT()+0x390>
c0016487:	90                   	nop
c0016488:	83 c4 2c             	add    esp,0x2c
c001648b:	c3                   	ret    

c001648c <ACPI::ACPI()>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016493:	83 ec 08             	sub    esp,0x8
c0016496:	68 bf 12 02 c0       	push   0xc00212bf
c001649b:	50                   	push   eax
c001649c:	e8 a7 d1 ff ff       	call   c0013648 <Device::Device(char const*)>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	ba 68 14 02 c0       	mov    edx,0xc0021468
c00164a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ad:	89 10                	mov    DWORD PTR [eax],edx
c00164af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00164ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164be:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00164c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164cc:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00164e1:	e8 12 fc ff ff       	call   c00160f8 <scanMADT()>
c00164e6:	90                   	nop
c00164e7:	83 c4 0c             	add    esp,0xc
c00164ea:	c3                   	ret    
c00164eb:	90                   	nop

c00164ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00164ec:	83 ec 2c             	sub    esp,0x2c
c00164ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00164f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00164f7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00164fb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00164ff:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016504:	88 d0                	mov    al,dl
c0016506:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001650a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001650f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016517:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001651b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016521:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016525:	0f 8d 97 00 00 00    	jge    c00165c2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001652b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001652f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016533:	83 c2 2a             	add    edx,0x2a
c0016536:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001653a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001653f:	75 78                	jne    c00165b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016541:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016545:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016549:	83 c2 2a             	add    edx,0x2a
c001654c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016550:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016554:	75 63                	jne    c00165b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016556:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001655b:	74 3a                	je     c0016597 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001655d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016561:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016565:	83 c2 2a             	add    edx,0x2a
c0016568:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001656c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016570:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016573:	39 c2                	cmp    edx,eax
c0016575:	74 10                	je     c0016587 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	68 cc 13 02 c0       	push   0xc00213cc
c001657f:	e8 38 67 ff ff       	call   c000ccbc <panic(char const*)>
c0016584:	83 c4 10             	add    esp,0x10
c0016587:	83 ec 0c             	sub    esp,0xc
c001658a:	68 c4 12 02 c0       	push   0xc00212c4
c001658f:	e8 28 67 ff ff       	call   c000ccbc <panic(char const*)>
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001659b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001659f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165a3:	83 c2 2a             	add    edx,0x2a
c00165a6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00165aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00165ac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00165af:	89 01                	mov    DWORD PTR [ecx],eax
c00165b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165b4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00165b9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00165bd:	e9 55 ff ff ff       	jmp    c0016517 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00165c2:	90                   	nop
c00165c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c7:	83 c4 2c             	add    esp,0x2c
c00165ca:	c2 04 00             	ret    0x4
c00165cd:	90                   	nop

c00165ce <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00165ce:	56                   	push   esi
c00165cf:	53                   	push   ebx
c00165d0:	83 ec 14             	sub    esp,0x14
c00165d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00165db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00165df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00165e4:	88 c8                	mov    al,cl
c00165e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00165ea:	88 d0                	mov    al,dl
c00165ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00165f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f4:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00165fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fe:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016604:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016609:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001660e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016613:	83 ec 04             	sub    esp,0x4
c0016616:	56                   	push   esi
c0016617:	53                   	push   ebx
c0016618:	51                   	push   ecx
c0016619:	52                   	push   edx
c001661a:	50                   	push   eax
c001661b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001661f:	68 fc 13 02 c0       	push   0xc00213fc
c0016624:	e8 75 65 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0016629:	83 c4 20             	add    esp,0x20
c001662c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016630:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001663d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016641:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016649:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001664f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016653:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001665a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001665f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016663:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016669:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001666d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016674:	83 c2 2a             	add    edx,0x2a
c0016677:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001667b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667f:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016689:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001668c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016690:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016698:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001669e:	8d 50 01             	lea    edx,[eax+0x1]
c00166a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a5:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00166ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166af:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00166b5:	3d 00 08 00 00       	cmp    eax,0x800
c00166ba:	75 10                	jne    c00166cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00166bc:	83 ec 0c             	sub    esp,0xc
c00166bf:	68 d3 12 02 c0       	push   0xc00212d3
c00166c4:	e8 f3 65 ff ff       	call   c000ccbc <panic(char const*)>
c00166c9:	83 c4 10             	add    esp,0x10
c00166cc:	90                   	nop
c00166cd:	83 c4 14             	add    esp,0x14
c00166d0:	5b                   	pop    ebx
c00166d1:	5e                   	pop    esi
c00166d2:	c3                   	ret    
c00166d3:	90                   	nop

c00166d4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00166d4:	b8 00 00 00 00       	mov    eax,0x0
c00166d9:	c3                   	ret    

c00166da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00166da:	83 ec 1c             	sub    esp,0x1c
c00166dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166e1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00166e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00166e8:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00166ed:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00166f2:	83 ec 08             	sub    esp,0x8
c00166f5:	52                   	push   edx
c00166f6:	50                   	push   eax
c00166f7:	e8 38 4b ff ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016703:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016708:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001670d:	83 ec 04             	sub    esp,0x4
c0016710:	6a 01                	push   0x1
c0016712:	52                   	push   edx
c0016713:	50                   	push   eax
c0016714:	e8 23 4c ff ff       	call   c000b33c <Computer::writeCMOS(unsigned char, unsigned char)>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	90                   	nop
c001671d:	83 c4 1c             	add    esp,0x1c
c0016720:	c3                   	ret    
c0016721:	90                   	nop

c0016722 <ACPI::open(int, int, void*)>:
c0016722:	53                   	push   ebx
c0016723:	83 ec 18             	sub    esp,0x18
c0016726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001672a:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016735:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001673b:	84 c0                	test   al,al
c001673d:	74 60                	je     c001679f <ACPI::open(int, int, void*)+0x7d>
c001673f:	83 ec 0c             	sub    esp,0xc
c0016742:	68 58 01 00 00       	push   0x158
c0016747:	e8 02 ba ff ff       	call   c001214e <operator new(unsigned long)>
c001674c:	83 c4 10             	add    esp,0x10
c001674f:	89 c3                	mov    ebx,eax
c0016751:	83 ec 0c             	sub    esp,0xc
c0016754:	53                   	push   ebx
c0016755:	e8 48 45 00 00       	call   c001aca2 <PCI::PCI()>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016765:	83 ec 08             	sub    esp,0x8
c0016768:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001676c:	50                   	push   eax
c001676d:	e8 e6 cc ff ff       	call   c0013458 <Device::addChild(Device*)>
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016779:	8b 00                	mov    eax,DWORD PTR [eax]
c001677b:	83 c0 08             	add    eax,0x8
c001677e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016780:	6a 00                	push   0x0
c0016782:	6a 00                	push   0x0
c0016784:	6a 00                	push   0x0
c0016786:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001678a:	ff d0                	call   eax
c001678c:	83 c4 10             	add    esp,0x10
c001678f:	83 ec 0c             	sub    esp,0xc
c0016792:	68 f0 12 02 c0       	push   0xc00212f0
c0016797:	e8 02 64 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	83 ec 0c             	sub    esp,0xc
c00167a2:	68 fb 12 02 c0       	push   0xc00212fb
c00167a7:	e8 34 51 ff ff       	call   c000b8e0 <loadKernelSymbolTable(char const*)>
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c00167b5:	83 ec 0c             	sub    esp,0xc
c00167b8:	68 19 13 02 c0       	push   0xc0021319
c00167bd:	e8 6a 5b ff ff       	call   c000c32c <loadDLL(char const*)>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	83 ec 08             	sub    esp,0x8
c00167c8:	53                   	push   ebx
c00167c9:	50                   	push   eax
c00167ca:	e8 78 5c ff ff       	call   c000c447 <executeDLL(unsigned long, void*)>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	68 36 13 02 c0       	push   0xc0021336
c00167e0:	e8 47 5b ff ff       	call   c000c32c <loadDLL(char const*)>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	53                   	push   ebx
c00167ec:	50                   	push   eax
c00167ed:	e8 55 5c ff ff       	call   c000c447 <executeDLL(unsigned long, void*)>
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00167fa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016800:	83 e0 04             	and    eax,0x4
c0016803:	84 c0                	test   al,al
c0016805:	74 57                	je     c001685e <ACPI::open(int, int, void*)+0x13c>
c0016807:	8b 1d c8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022cc8
c001680d:	83 ec 0c             	sub    esp,0xc
c0016810:	68 53 13 02 c0       	push   0xc0021353
c0016815:	e8 12 5b ff ff       	call   c000c32c <loadDLL(char const*)>
c001681a:	83 c4 10             	add    esp,0x10
c001681d:	83 ec 08             	sub    esp,0x8
c0016820:	53                   	push   ebx
c0016821:	50                   	push   eax
c0016822:	e8 20 5c ff ff       	call   c000c447 <executeDLL(unsigned long, void*)>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001682f:	83 ec 08             	sub    esp,0x8
c0016832:	68 70 13 02 c0       	push   0xc0021370
c0016837:	50                   	push   eax
c0016838:	e8 1f f8 ff ff       	call   c001605c <findDataTable(unsigned char*, char*)>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016844:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016849:	74 13                	je     c001685e <ACPI::open(int, int, void*)+0x13c>
c001684b:	83 ec 08             	sub    esp,0x8
c001684e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016856:	e8 7f fe ff ff       	call   c00166da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	b8 00 00 00 00       	mov    eax,0x0
c0016863:	83 c4 18             	add    esp,0x18
c0016866:	5b                   	pop    ebx
c0016867:	c3                   	ret    

c0016868 <ACPI::sleep()>:
c0016868:	83 ec 0c             	sub    esp,0xc
c001686b:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c0016870:	85 c0                	test   eax,eax
c0016872:	74 07                	je     c001687b <ACPI::sleep()+0x13>
c0016874:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c0016879:	ff d0                	call   eax
c001687b:	90                   	nop
c001687c:	83 c4 0c             	add    esp,0xc
c001687f:	c3                   	ret    

c0016880 <CPU::close(int, int, void*)>:
c0016880:	31 c0                	xor    eax,eax
c0016882:	c3                   	ret    

c0016883 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016883:	55                   	push   ebp
c0016884:	57                   	push   edi
c0016885:	56                   	push   esi
c0016886:	53                   	push   ebx
c0016887:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001688b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001688f:	89 ce                	mov    esi,ecx
c0016891:	89 d5                	mov    ebp,edx
c0016893:	80 f9 04             	cmp    cl,0x4
c0016896:	75 28                	jne    c00168c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016898:	8d 42 f9             	lea    eax,[edx-0x7]
c001689b:	3c 03                	cmp    al,0x3
c001689d:	0f 86 63 01 00 00    	jbe    c0016a06 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00168a3:	80 fa 03             	cmp    dl,0x3
c00168a6:	0f 84 5a 01 00 00    	je     c0016a06 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00168ac:	8d 7a f2             	lea    edi,[edx-0xe]
c00168af:	b8 f0 25 02 c0       	mov    eax,0xc00225f0
c00168b4:	89 fb                	mov    ebx,edi
c00168b6:	80 fb 01             	cmp    bl,0x1
c00168b9:	77 4e                	ja     c0016909 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00168bb:	e9 52 01 00 00       	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168c0:	80 f9 05             	cmp    cl,0x5
c00168c3:	75 4d                	jne    c0016912 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00168c5:	b8 00 26 02 c0       	mov    eax,0xc0022600
c00168ca:	80 fa 03             	cmp    dl,0x3
c00168cd:	0f 86 3f 01 00 00    	jbe    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168d3:	8d 7a fa             	lea    edi,[edx-0x6]
c00168d6:	b8 10 26 02 c0       	mov    eax,0xc0022610
c00168db:	89 fb                	mov    ebx,edi
c00168dd:	80 fb 01             	cmp    bl,0x1
c00168e0:	0f 86 2c 01 00 00    	jbe    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168e6:	b8 20 26 02 c0       	mov    eax,0xc0022620
c00168eb:	80 fa 08             	cmp    dl,0x8
c00168ee:	0f 84 1e 01 00 00    	je     c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168f4:	89 d7                	mov    edi,edx
c00168f6:	b8 30 26 02 c0       	mov    eax,0xc0022630
c00168fb:	83 e7 fb             	and    edi,0xfffffffb
c00168fe:	89 fb                	mov    ebx,edi
c0016900:	80 fb 09             	cmp    bl,0x9
c0016903:	0f 84 09 01 00 00    	je     c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016909:	31 c0                	xor    eax,eax
c001690b:	89 eb                	mov    ebx,ebp
c001690d:	0f b6 fb             	movzx  edi,bl
c0016910:	eb 30                	jmp    c0016942 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016912:	31 c0                	xor    eax,eax
c0016914:	80 f9 06             	cmp    cl,0x6
c0016917:	75 f2                	jne    c001690b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016919:	80 fa 0a             	cmp    dl,0xa
c001691c:	77 ed                	ja     c001690b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001691e:	bf de 05 00 00       	mov    edi,0x5de
c0016923:	0f a3 d7             	bt     edi,edx
c0016926:	73 e3                	jae    c001690b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016928:	b8 40 26 02 c0       	mov    eax,0xc0022640
c001692d:	e9 e0 00 00 00       	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016932:	39 c7                	cmp    edi,eax
c0016934:	0f 84 d3 00 00 00    	je     c0016a0d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001693a:	40                   	inc    eax
c001693b:	3d d0 00 00 00       	cmp    eax,0xd0
c0016940:	74 09                	je     c001694b <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016942:	89 f3                	mov    ebx,esi
c0016944:	80 fb 0f             	cmp    bl,0xf
c0016947:	75 f1                	jne    c001693a <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016949:	eb e7                	jmp    c0016932 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c001694b:	80 f9 10             	cmp    cl,0x10
c001694e:	75 14                	jne    c0016964 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016950:	8d 42 fc             	lea    eax,[edx-0x4]
c0016953:	83 e0 fb             	and    eax,0xfffffffb
c0016956:	3c 02                	cmp    al,0x2
c0016958:	76 34                	jbe    c001698e <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c001695a:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c001695f:	80 fa 02             	cmp    dl,0x2
c0016962:	eb 24                	jmp    c0016988 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016964:	80 f9 11             	cmp    cl,0x11
c0016967:	75 13                	jne    c001697c <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016969:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c001696e:	80 fa 03             	cmp    dl,0x3
c0016971:	0f 85 9b 00 00 00    	jne    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016977:	e9 91 00 00 00       	jmp    c0016a0d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001697c:	80 f9 12             	cmp    cl,0x12
c001697f:	75 14                	jne    c0016995 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016981:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016986:	fe ca                	dec    dl
c0016988:	0f 85 84 00 00 00    	jne    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001698e:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0016993:	eb 7d                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016995:	80 f9 14             	cmp    cl,0x14
c0016998:	75 12                	jne    c00169ac <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001699a:	4a                   	dec    edx
c001699b:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c00169a0:	80 fa 01             	cmp    dl,0x1
c00169a3:	77 6d                	ja     c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169a5:	b8 70 26 02 c0       	mov    eax,0xc0022670
c00169aa:	eb 66                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169ac:	80 f9 15             	cmp    cl,0x15
c00169af:	75 31                	jne    c00169e2 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00169b1:	b8 80 26 02 c0       	mov    eax,0xc0022680
c00169b6:	80 fa 01             	cmp    dl,0x1
c00169b9:	74 57                	je     c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169bb:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c00169c0:	80 fa 13             	cmp    dl,0x13
c00169c3:	76 0c                	jbe    c00169d1 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00169c5:	80 fa 30             	cmp    dl,0x30
c00169c8:	75 48                	jne    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169ca:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c00169cf:	eb 41                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169d1:	b9 04 00 09 00       	mov    ecx,0x90004
c00169d6:	0f a3 d1             	bt     ecx,edx
c00169d9:	73 37                	jae    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169db:	b8 90 26 02 c0       	mov    eax,0xc0022690
c00169e0:	eb 30                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169e2:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c00169e7:	80 f9 16             	cmp    cl,0x16
c00169ea:	75 26                	jne    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169ec:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c00169f1:	84 d2                	test   dl,dl
c00169f3:	74 1d                	je     c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169f5:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c00169fa:	80 fa 30             	cmp    dl,0x30
c00169fd:	75 13                	jne    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169ff:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c0016a04:	eb 0c                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a06:	b8 e0 25 02 c0       	mov    eax,0xc00225e0
c0016a0b:	eb 05                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a0d:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0016a12:	5b                   	pop    ebx
c0016a13:	5e                   	pop    esi
c0016a14:	5f                   	pop    edi
c0016a15:	5d                   	pop    ebp
c0016a16:	c3                   	ret    

c0016a17 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016a17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016a1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016a1f:	80 f9 04             	cmp    cl,0x4
c0016a22:	75 6b                	jne    c0016a8f <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016a24:	b8 40 24 02 c0       	mov    eax,0xc0022440
c0016a29:	80 fa 01             	cmp    dl,0x1
c0016a2c:	0f 86 92 02 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a32:	b8 50 24 02 c0       	mov    eax,0xc0022450
c0016a37:	80 fa 02             	cmp    dl,0x2
c0016a3a:	0f 84 84 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a40:	b8 60 24 02 c0       	mov    eax,0xc0022460
c0016a45:	80 fa 03             	cmp    dl,0x3
c0016a48:	0f 84 76 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a4e:	b8 70 24 02 c0       	mov    eax,0xc0022470
c0016a53:	80 fa 04             	cmp    dl,0x4
c0016a56:	0f 84 68 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a5c:	b8 80 24 02 c0       	mov    eax,0xc0022480
c0016a61:	80 fa 05             	cmp    dl,0x5
c0016a64:	0f 84 5a 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a6a:	b8 60 24 02 c0       	mov    eax,0xc0022460
c0016a6f:	80 fa 07             	cmp    dl,0x7
c0016a72:	0f 84 4c 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a78:	83 ea 08             	sub    edx,0x8
c0016a7b:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016a80:	80 fa 01             	cmp    dl,0x1
c0016a83:	0f 87 3b 02 00 00    	ja     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a89:	b8 90 24 02 c0       	mov    eax,0xc0022490
c0016a8e:	c3                   	ret    
c0016a8f:	80 f9 05             	cmp    cl,0x5
c0016a92:	75 45                	jne    c0016ad9 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016a94:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016a97:	b8 a0 24 02 c0       	mov    eax,0xc00224a0
c0016a9c:	80 f9 02             	cmp    cl,0x2
c0016a9f:	0f 86 1f 02 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016aa5:	80 fa 04             	cmp    dl,0x4
c0016aa8:	0f 84 f3 01 00 00    	je     c0016ca1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016aae:	80 fa 07             	cmp    dl,0x7
c0016ab1:	0f 84 0d 02 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ab7:	b8 b0 24 02 c0       	mov    eax,0xc00224b0
c0016abc:	80 fa 08             	cmp    dl,0x8
c0016abf:	0f 84 ff 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ac5:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016aca:	80 fa 09             	cmp    dl,0x9
c0016acd:	0f 85 f1 01 00 00    	jne    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ad3:	b8 c0 24 02 c0       	mov    eax,0xc00224c0
c0016ad8:	c3                   	ret    
c0016ad9:	80 f9 06             	cmp    cl,0x6
c0016adc:	0f 85 85 01 00 00    	jne    c0016c67 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016ae2:	b8 d0 24 02 c0       	mov    eax,0xc00224d0
c0016ae7:	80 fa 01             	cmp    dl,0x1
c0016aea:	0f 84 d4 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016af0:	8d 42 fb             	lea    eax,[edx-0x5]
c0016af3:	3c 01                	cmp    al,0x1
c0016af5:	0f 86 ac 01 00 00    	jbe    c0016ca7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016afb:	80 fa 03             	cmp    dl,0x3
c0016afe:	0f 84 a3 01 00 00    	je     c0016ca7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016b04:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016b07:	b8 f0 24 02 c0       	mov    eax,0xc00224f0
c0016b0c:	80 f9 01             	cmp    cl,0x1
c0016b0f:	0f 86 af 01 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b15:	80 fa 09             	cmp    dl,0x9
c0016b18:	0f 84 8f 01 00 00    	je     c0016cad <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016b1e:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016b21:	80 f9 01             	cmp    cl,0x1
c0016b24:	0f 86 9a 01 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b2a:	b8 00 25 02 c0       	mov    eax,0xc0022500
c0016b2f:	80 fa 0d             	cmp    dl,0xd
c0016b32:	0f 84 8c 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b38:	b8 10 25 02 c0       	mov    eax,0xc0022510
c0016b3d:	80 fa 0e             	cmp    dl,0xe
c0016b40:	0f 84 7e 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b46:	b8 20 25 02 c0       	mov    eax,0xc0022520
c0016b4b:	80 fa 0f             	cmp    dl,0xf
c0016b4e:	0f 84 70 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b54:	b8 00 25 02 c0       	mov    eax,0xc0022500
c0016b59:	80 fa 15             	cmp    dl,0x15
c0016b5c:	0f 84 62 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b62:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016b65:	b8 20 25 02 c0       	mov    eax,0xc0022520
c0016b6a:	80 f9 01             	cmp    cl,0x1
c0016b6d:	0f 86 51 01 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b73:	80 fa 1a             	cmp    dl,0x1a
c0016b76:	0f 84 37 01 00 00    	je     c0016cb3 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016b7c:	80 fa 1c             	cmp    dl,0x1c
c0016b7f:	0f 84 34 01 00 00    	je     c0016cb9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016b85:	80 fa 1d             	cmp    dl,0x1d
c0016b88:	0f 84 36 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b8e:	b8 50 25 02 c0       	mov    eax,0xc0022550
c0016b93:	80 fa 25             	cmp    dl,0x25
c0016b96:	0f 84 28 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b9c:	8d 4a da             	lea    ecx,[edx-0x26]
c0016b9f:	b8 40 25 02 c0       	mov    eax,0xc0022540
c0016ba4:	80 f9 01             	cmp    cl,0x1
c0016ba7:	0f 86 17 01 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bad:	b8 60 25 02 c0       	mov    eax,0xc0022560
c0016bb2:	80 fa 2a             	cmp    dl,0x2a
c0016bb5:	0f 84 09 01 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bbb:	b8 50 25 02 c0       	mov    eax,0xc0022550
c0016bc0:	80 fa 2c             	cmp    dl,0x2c
c0016bc3:	0f 84 fb 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bc9:	b8 60 25 02 c0       	mov    eax,0xc0022560
c0016bce:	80 fa 2d             	cmp    dl,0x2d
c0016bd1:	0f 84 ed 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bd7:	b8 30 25 02 c0       	mov    eax,0xc0022530
c0016bdc:	80 fa 2e             	cmp    dl,0x2e
c0016bdf:	0f 84 df 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016be5:	b8 50 25 02 c0       	mov    eax,0xc0022550
c0016bea:	80 fa 2f             	cmp    dl,0x2f
c0016bed:	0f 84 d1 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bf3:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016bf6:	b8 40 25 02 c0       	mov    eax,0xc0022540
c0016bfb:	80 f9 01             	cmp    cl,0x1
c0016bfe:	0f 86 c0 00 00 00    	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c04:	b8 70 25 02 c0       	mov    eax,0xc0022570
c0016c09:	80 fa 37             	cmp    dl,0x37
c0016c0c:	0f 84 b2 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c12:	b8 80 25 02 c0       	mov    eax,0xc0022580
c0016c17:	80 fa 3a             	cmp    dl,0x3a
c0016c1a:	0f 84 a4 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c20:	b8 90 25 02 c0       	mov    eax,0xc0022590
c0016c25:	80 fa 3c             	cmp    dl,0x3c
c0016c28:	0f 84 96 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c2e:	b8 a0 25 02 c0       	mov    eax,0xc00225a0
c0016c33:	80 fa 3d             	cmp    dl,0x3d
c0016c36:	0f 84 88 00 00 00    	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c3c:	b8 80 25 02 c0       	mov    eax,0xc0022580
c0016c41:	80 fa 3e             	cmp    dl,0x3e
c0016c44:	74 7e                	je     c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c46:	8d 42 bb             	lea    eax,[edx-0x45]
c0016c49:	3c 01                	cmp    al,0x1
c0016c4b:	76 72                	jbe    c0016cbf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016c4d:	80 fa 3f             	cmp    dl,0x3f
c0016c50:	74 6d                	je     c0016cbf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016c52:	80 fa 4a             	cmp    dl,0x4a
c0016c55:	74 0a                	je     c0016c61 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016c57:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016c5c:	80 fa 4d             	cmp    dl,0x4d
c0016c5f:	75 63                	jne    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c61:	b8 70 25 02 c0       	mov    eax,0xc0022570
c0016c66:	c3                   	ret    
c0016c67:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016c6c:	80 f9 0b             	cmp    cl,0xb
c0016c6f:	75 0a                	jne    c0016c7b <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016c71:	fe ca                	dec    dl
c0016c73:	75 4f                	jne    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c75:	b8 b0 25 02 c0       	mov    eax,0xc00225b0
c0016c7a:	c3                   	ret    
c0016c7b:	80 f9 0f             	cmp    cl,0xf
c0016c7e:	75 44                	jne    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c80:	b8 c0 25 02 c0       	mov    eax,0xc00225c0
c0016c85:	80 fa 02             	cmp    dl,0x2
c0016c88:	76 3a                	jbe    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c8a:	8d 42 fd             	lea    eax,[edx-0x3]
c0016c8d:	3c 01                	cmp    al,0x1
c0016c8f:	76 0a                	jbe    c0016c9b <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016c91:	b8 e1 15 02 c0       	mov    eax,0xc00215e1
c0016c96:	80 fa 06             	cmp    dl,0x6
c0016c99:	75 29                	jne    c0016cc4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c9b:	b8 d0 25 02 c0       	mov    eax,0xc00225d0
c0016ca0:	c3                   	ret    
c0016ca1:	b8 b0 24 02 c0       	mov    eax,0xc00224b0
c0016ca6:	c3                   	ret    
c0016ca7:	b8 e0 24 02 c0       	mov    eax,0xc00224e0
c0016cac:	c3                   	ret    
c0016cad:	b8 00 25 02 c0       	mov    eax,0xc0022500
c0016cb2:	c3                   	ret    
c0016cb3:	b8 30 25 02 c0       	mov    eax,0xc0022530
c0016cb8:	c3                   	ret    
c0016cb9:	b8 40 25 02 c0       	mov    eax,0xc0022540
c0016cbe:	c3                   	ret    
c0016cbf:	b8 90 25 02 c0       	mov    eax,0xc0022590
c0016cc4:	c3                   	ret    

c0016cc5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016cc5:	60                   	pusha  
c0016cc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cd2:	9c                   	pushf  
c0016cd3:	fa                   	cli    
c0016cd4:	0f 09                	wbinvd 
c0016cd6:	0f 30                	wrmsr  
c0016cd8:	9d                   	popf   
c0016cd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016cdd:	89 02                	mov    DWORD PTR [edx],eax
c0016cdf:	61                   	popa   
c0016ce0:	c3                   	ret    

c0016ce1 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016ce1:	60                   	pusha  
c0016ce2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ce6:	9c                   	pushf  
c0016ce7:	fa                   	cli    
c0016ce8:	0f 09                	wbinvd 
c0016cea:	31 c0                	xor    eax,eax
c0016cec:	31 d2                	xor    edx,edx
c0016cee:	0f 32                	rdmsr  
c0016cf0:	9d                   	popf   
c0016cf1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016cf5:	89 02                	mov    DWORD PTR [edx],eax
c0016cf7:	61                   	popa   
c0016cf8:	c3                   	ret    

c0016cf9 <AMD_K6_writeback(int, int, int)>:
c0016cf9:	56                   	push   esi
c0016cfa:	53                   	push   ebx
c0016cfb:	83 ec 10             	sub    esp,0x10
c0016cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d02:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016d07:	75 5d                	jne    c0016d66 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d09:	83 f8 08             	cmp    eax,0x8
c0016d0c:	75 09                	jne    c0016d17 <AMD_K6_writeback(int, int, int)+0x1e>
c0016d0e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016d13:	7e 13                	jle    c0016d28 <AMD_K6_writeback(int, int, int)+0x2f>
c0016d15:	eb 30                	jmp    c0016d47 <AMD_K6_writeback(int, int, int)+0x4e>
c0016d17:	83 f8 06             	cmp    eax,0x6
c0016d1a:	7c 4a                	jl     c0016d66 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d1c:	83 f8 07             	cmp    eax,0x7
c0016d1f:	7e 07                	jle    c0016d28 <AMD_K6_writeback(int, int, int)+0x2f>
c0016d21:	83 f8 09             	cmp    eax,0x9
c0016d24:	74 21                	je     c0016d47 <AMD_K6_writeback(int, int, int)+0x4e>
c0016d26:	eb 3e                	jmp    c0016d66 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d28:	89 e6                	mov    esi,esp
c0016d2a:	8b 1d a4 34 02 c0    	mov    ebx,DWORD PTR ds:0xc00234a4
c0016d30:	56                   	push   esi
c0016d31:	c1 eb 15             	shr    ebx,0x15
c0016d34:	68 82 00 00 c0       	push   0xc0000082
c0016d39:	83 e3 7e             	and    ebx,0x7e
c0016d3c:	e8 a0 ff ff ff       	call   c0016ce1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d41:	56                   	push   esi
c0016d42:	6a 00                	push   0x0
c0016d44:	53                   	push   ebx
c0016d45:	eb 12                	jmp    c0016d59 <AMD_K6_writeback(int, int, int)+0x60>
c0016d47:	89 e3                	mov    ebx,esp
c0016d49:	53                   	push   ebx
c0016d4a:	68 82 00 00 c0       	push   0xc0000082
c0016d4f:	e8 8d ff ff ff       	call   c0016ce1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d54:	53                   	push   ebx
c0016d55:	6a 00                	push   0x0
c0016d57:	6a 00                	push   0x0
c0016d59:	68 82 00 00 c0       	push   0xc0000082
c0016d5e:	e8 62 ff ff ff       	call   c0016cc5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016d63:	83 c4 18             	add    esp,0x18
c0016d66:	83 c4 10             	add    esp,0x10
c0016d69:	5b                   	pop    ebx
c0016d6a:	5e                   	pop    esi
c0016d6b:	c3                   	ret    

c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016d6c:	55                   	push   ebp
c0016d6d:	57                   	push   edi
c0016d6e:	56                   	push   esi
c0016d6f:	53                   	push   ebx
c0016d70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016d78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016d7c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016d80:	39 05 e0 26 02 c0    	cmp    DWORD PTR ds:0xc00226e0,eax
c0016d86:	75 23                	jne    c0016dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016d88:	a1 8c 40 02 c0       	mov    eax,ds:0xc002408c
c0016d8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d91:	89 06                	mov    DWORD PTR [esi],eax
c0016d93:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0016d98:	89 07                	mov    DWORD PTR [edi],eax
c0016d9a:	a1 84 40 02 c0       	mov    eax,ds:0xc0024084
c0016d9f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016da2:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0016da7:	89 02                	mov    DWORD PTR [edx],eax
c0016da9:	eb 3f                	jmp    c0016dea <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0016dab:	31 c9                	xor    ecx,ecx
c0016dad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016db1:	0f a2                	cpuid  
c0016db3:	89 06                	mov    DWORD PTR [esi],eax
c0016db5:	89 1f                	mov    DWORD PTR [edi],ebx
c0016db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dbb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0016dbe:	89 10                	mov    DWORD PTR [eax],edx
c0016dc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dc4:	a3 e0 26 02 c0       	mov    ds:0xc00226e0,eax
c0016dc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dcb:	a3 8c 40 02 c0       	mov    ds:0xc002408c,eax
c0016dd0:	8b 07                	mov    eax,DWORD PTR [edi]
c0016dd2:	a3 88 40 02 c0       	mov    ds:0xc0024088,eax
c0016dd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dda:	a3 84 40 02 c0       	mov    ds:0xc0024084,eax
c0016ddf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016de5:	a3 80 40 02 c0       	mov    ds:0xc0024080,eax
c0016dea:	5b                   	pop    ebx
c0016deb:	5e                   	pop    esi
c0016dec:	5f                   	pop    edi
c0016ded:	5d                   	pop    ebp
c0016dee:	c3                   	ret    

c0016def <cpuidCheckEDX(unsigned int)>:
c0016def:	83 ec 10             	sub    esp,0x10
c0016df2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016df6:	50                   	push   eax
c0016df7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016dfb:	50                   	push   eax
c0016dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e00:	50                   	push   eax
c0016e01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e05:	50                   	push   eax
c0016e06:	6a 01                	push   0x1
c0016e08:	e8 5f ff ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e11:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0016e15:	0f 95 c0             	setne  al
c0016e18:	83 c4 24             	add    esp,0x24
c0016e1b:	c3                   	ret    

c0016e1c <cpuidCheckECX(unsigned int)>:
c0016e1c:	83 ec 10             	sub    esp,0x10
c0016e1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e23:	50                   	push   eax
c0016e24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e28:	50                   	push   eax
c0016e29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e2d:	50                   	push   eax
c0016e2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e32:	50                   	push   eax
c0016e33:	6a 01                	push   0x1
c0016e35:	e8 32 ff ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e3e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016e42:	0f 95 c0             	setne  al
c0016e45:	83 c4 24             	add    esp,0x24
c0016e48:	c3                   	ret    

c0016e49 <cpuidCheckExtendedEBX(unsigned int)>:
c0016e49:	83 ec 10             	sub    esp,0x10
c0016e4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e50:	50                   	push   eax
c0016e51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e55:	50                   	push   eax
c0016e56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e5a:	50                   	push   eax
c0016e5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e5f:	50                   	push   eax
c0016e60:	6a 07                	push   0x7
c0016e62:	e8 05 ff ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e6b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0016e6f:	0f 95 c0             	setne  al
c0016e72:	83 c4 24             	add    esp,0x24
c0016e75:	c3                   	ret    

c0016e76 <cpuidCheckExtendedECX(unsigned int)>:
c0016e76:	83 ec 10             	sub    esp,0x10
c0016e79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e7d:	50                   	push   eax
c0016e7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e82:	50                   	push   eax
c0016e83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e87:	50                   	push   eax
c0016e88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e8c:	50                   	push   eax
c0016e8d:	6a 07                	push   0x7
c0016e8f:	e8 d8 fe ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e98:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016e9c:	0f 95 c0             	setne  al
c0016e9f:	83 c4 24             	add    esp,0x24
c0016ea2:	c3                   	ret    

c0016ea3 <getCPUNumber()>:
c0016ea3:	31 c0                	xor    eax,eax
c0016ea5:	c3                   	ret    

c0016ea6 <thisCPU()>:
c0016ea6:	e8 f8 ff ff ff       	call   c0016ea3 <getCPUNumber()>
c0016eab:	8b 15 c8 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022cc8
c0016eb1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0016eb8:	c3                   	ret    
c0016eb9:	90                   	nop

c0016eba <CPU::CPU()>:
c0016eba:	83 ec 0c             	sub    esp,0xc
c0016ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec1:	83 ec 08             	sub    esp,0x8
c0016ec4:	68 e1 15 02 c0       	push   0xc00215e1
c0016ec9:	50                   	push   eax
c0016eca:	e8 79 c7 ff ff       	call   c0013648 <Device::Device(char const*)>
c0016ecf:	83 c4 10             	add    esp,0x10
c0016ed2:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c0016ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edb:	89 10                	mov    DWORD PTR [eax],edx
c0016edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0016eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eef:	05 78 01 00 00       	add    eax,0x178
c0016ef4:	83 ec 0c             	sub    esp,0xc
c0016ef7:	50                   	push   eax
c0016ef8:	e8 93 55 ff ff       	call   c000c490 <GDT::GDT()>
c0016efd:	83 c4 10             	add    esp,0x10
c0016f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f04:	05 7c 09 00 00       	add    eax,0x97c
c0016f09:	83 ec 0c             	sub    esp,0xc
c0016f0c:	50                   	push   eax
c0016f0d:	e8 de 57 ff ff       	call   c000c6f0 <IDT::IDT()>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f19:	05 7c 11 00 00       	add    eax,0x117c
c0016f1e:	83 ec 0c             	sub    esp,0xc
c0016f21:	50                   	push   eax
c0016f22:	e8 7d 9b ff ff       	call   c0010aa4 <TSS::TSS()>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f2e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0016f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f39:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0016f43:	90                   	nop
c0016f44:	83 c4 0c             	add    esp,0xc
c0016f47:	c3                   	ret    

c0016f48 <CPU::displayFeatures()>:
c0016f48:	c3                   	ret    
c0016f49:	90                   	nop

c0016f4a <CPU::detectFeatures()>:
c0016f4a:	55                   	push   ebp
c0016f4b:	57                   	push   edi
c0016f4c:	56                   	push   esi
c0016f4d:	53                   	push   ebx
c0016f4e:	83 ec 50             	sub    esp,0x50
c0016f51:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0016f55:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0016f5f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0016f66:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0016f6c:	6a 0d                	push   0xd
c0016f6e:	6a 00                	push   0x0
c0016f70:	57                   	push   edi
c0016f71:	e8 92 96 fe ff       	call   c0000608 <memset>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c0016f7e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0016f85:	0f 84 20 09 00 00    	je     c00178ab <CPU::detectFeatures()+0x961>
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	6a 10                	push   0x10
c0016f90:	e8 5a fe ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0016f95:	83 e0 01             	and    eax,0x1
c0016f98:	8d 14 00             	lea    edx,[eax+eax*1]
c0016f9b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fa1:	83 e0 fd             	and    eax,0xfffffffd
c0016fa4:	09 d0                	or     eax,edx
c0016fa6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016fac:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0016fb3:	e8 37 fe ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0016fb8:	83 e0 01             	and    eax,0x1
c0016fbb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016fc2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fc8:	83 e0 fb             	and    eax,0xfffffffb
c0016fcb:	09 d0                	or     eax,edx
c0016fcd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016fd3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016fda:	e8 10 fe ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0016fdf:	83 e0 01             	and    eax,0x1
c0016fe2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0016fe9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fef:	83 e0 f7             	and    eax,0xfffffff7
c0016ff2:	09 d0                	or     eax,edx
c0016ff4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016ffa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017001:	e8 e9 fd ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0017006:	83 e0 01             	and    eax,0x1
c0017009:	c1 e0 04             	shl    eax,0x4
c001700c:	88 c2                	mov    dl,al
c001700e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017014:	83 e0 ef             	and    eax,0xffffffef
c0017017:	09 d0                	or     eax,edx
c0017019:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001701f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017026:	e8 c4 fd ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c001702b:	83 e0 01             	and    eax,0x1
c001702e:	c1 e0 05             	shl    eax,0x5
c0017031:	88 c2                	mov    dl,al
c0017033:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017039:	83 e0 df             	and    eax,0xffffffdf
c001703c:	09 d0                	or     eax,edx
c001703e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017044:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001704b:	e8 9f fd ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0017050:	83 e0 01             	and    eax,0x1
c0017053:	8d 14 00             	lea    edx,[eax+eax*1]
c0017056:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001705c:	83 e0 fd             	and    eax,0xfffffffd
c001705f:	09 d0                	or     eax,edx
c0017061:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017067:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001706e:	e8 7c fd ff ff       	call   c0016def <cpuidCheckEDX(unsigned int)>
c0017073:	83 e0 01             	and    eax,0x1
c0017076:	c1 e0 06             	shl    eax,0x6
c0017079:	88 c2                	mov    dl,al
c001707b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017081:	83 e0 bf             	and    eax,0xffffffbf
c0017084:	09 d0                	or     eax,edx
c0017086:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001708c:	58                   	pop    eax
c001708d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017091:	56                   	push   esi
c0017092:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017096:	55                   	push   ebp
c0017097:	8d 44 24 28          	lea    eax,[esp+0x28]
c001709b:	50                   	push   eax
c001709c:	8d 54 24 28          	lea    edx,[esp+0x28]
c00170a0:	52                   	push   edx
c00170a1:	6a 00                	push   0x0
c00170a3:	e8 c4 fc ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170a8:	83 c4 1c             	add    esp,0x1c
c00170ab:	6a 04                	push   0x4
c00170ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00170b1:	50                   	push   eax
c00170b2:	57                   	push   edi
c00170b3:	e8 1a 95 fe ff       	call   c00005d2 <memcpy>
c00170b8:	83 c4 0c             	add    esp,0xc
c00170bb:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00170c1:	6a 04                	push   0x4
c00170c3:	56                   	push   esi
c00170c4:	50                   	push   eax
c00170c5:	e8 08 95 fe ff       	call   c00005d2 <memcpy>
c00170ca:	83 c4 0c             	add    esp,0xc
c00170cd:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00170d3:	6a 04                	push   0x4
c00170d5:	55                   	push   ebp
c00170d6:	50                   	push   eax
c00170d7:	e8 f6 94 fe ff       	call   c00005d2 <memcpy>
c00170dc:	58                   	pop    eax
c00170dd:	5a                   	pop    edx
c00170de:	68 8c 14 02 c0       	push   0xc002148c
c00170e3:	57                   	push   edi
c00170e4:	e8 0f 96 fe ff       	call   c00006f8 <strcmp>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	85 c0                	test   eax,eax
c00170ee:	75 0f                	jne    c00170ff <CPU::detectFeatures()+0x1b5>
c00170f0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00170fa:	e9 22 02 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00170ff:	50                   	push   eax
c0017100:	50                   	push   eax
c0017101:	68 99 14 02 c0       	push   0xc0021499
c0017106:	57                   	push   edi
c0017107:	e8 ec 95 fe ff       	call   c00006f8 <strcmp>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	85 c0                	test   eax,eax
c0017111:	74 dd                	je     c00170f0 <CPU::detectFeatures()+0x1a6>
c0017113:	51                   	push   ecx
c0017114:	51                   	push   ecx
c0017115:	68 a6 14 02 c0       	push   0xc00214a6
c001711a:	57                   	push   edi
c001711b:	e8 d8 95 fe ff       	call   c00006f8 <strcmp>
c0017120:	83 c4 10             	add    esp,0x10
c0017123:	85 c0                	test   eax,eax
c0017125:	74 2a                	je     c0017151 <CPU::detectFeatures()+0x207>
c0017127:	52                   	push   edx
c0017128:	52                   	push   edx
c0017129:	68 b3 14 02 c0       	push   0xc00214b3
c001712e:	57                   	push   edi
c001712f:	e8 c4 95 fe ff       	call   c00006f8 <strcmp>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	85 c0                	test   eax,eax
c0017139:	74 16                	je     c0017151 <CPU::detectFeatures()+0x207>
c001713b:	50                   	push   eax
c001713c:	50                   	push   eax
c001713d:	68 c0 14 02 c0       	push   0xc00214c0
c0017142:	57                   	push   edi
c0017143:	e8 b0 95 fe ff       	call   c00006f8 <strcmp>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	85 c0                	test   eax,eax
c001714d:	74 48                	je     c0017197 <CPU::detectFeatures()+0x24d>
c001714f:	eb 0f                	jmp    c0017160 <CPU::detectFeatures()+0x216>
c0017151:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001715b:	e9 c1 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c0017160:	50                   	push   eax
c0017161:	50                   	push   eax
c0017162:	68 cd 14 02 c0       	push   0xc00214cd
c0017167:	57                   	push   edi
c0017168:	e8 8b 95 fe ff       	call   c00006f8 <strcmp>
c001716d:	83 c4 10             	add    esp,0x10
c0017170:	85 c0                	test   eax,eax
c0017172:	74 23                	je     c0017197 <CPU::detectFeatures()+0x24d>
c0017174:	50                   	push   eax
c0017175:	50                   	push   eax
c0017176:	68 da 14 02 c0       	push   0xc00214da
c001717b:	57                   	push   edi
c001717c:	e8 77 95 fe ff       	call   c00006f8 <strcmp>
c0017181:	83 c4 10             	add    esp,0x10
c0017184:	85 c0                	test   eax,eax
c0017186:	75 1e                	jne    c00171a6 <CPU::detectFeatures()+0x25c>
c0017188:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017192:	e9 8a 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c0017197:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00171a1:	e9 7b 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00171a6:	50                   	push   eax
c00171a7:	50                   	push   eax
c00171a8:	68 e7 14 02 c0       	push   0xc00214e7
c00171ad:	57                   	push   edi
c00171ae:	e8 45 95 fe ff       	call   c00006f8 <strcmp>
c00171b3:	83 c4 10             	add    esp,0x10
c00171b6:	85 c0                	test   eax,eax
c00171b8:	75 0f                	jne    c00171c9 <CPU::detectFeatures()+0x27f>
c00171ba:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00171c4:	e9 58 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00171c9:	50                   	push   eax
c00171ca:	50                   	push   eax
c00171cb:	68 a6 14 02 c0       	push   0xc00214a6
c00171d0:	57                   	push   edi
c00171d1:	e8 22 95 fe ff       	call   c00006f8 <strcmp>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	85 c0                	test   eax,eax
c00171db:	75 0f                	jne    c00171ec <CPU::detectFeatures()+0x2a2>
c00171dd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00171e7:	e9 35 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00171ec:	50                   	push   eax
c00171ed:	50                   	push   eax
c00171ee:	68 f4 14 02 c0       	push   0xc00214f4
c00171f3:	57                   	push   edi
c00171f4:	e8 ff 94 fe ff       	call   c00006f8 <strcmp>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	85 c0                	test   eax,eax
c00171fe:	75 0f                	jne    c001720f <CPU::detectFeatures()+0x2c5>
c0017200:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001720a:	e9 12 01 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c001720f:	51                   	push   ecx
c0017210:	51                   	push   ecx
c0017211:	68 01 15 02 c0       	push   0xc0021501
c0017216:	57                   	push   edi
c0017217:	e8 dc 94 fe ff       	call   c00006f8 <strcmp>
c001721c:	83 c4 10             	add    esp,0x10
c001721f:	85 c0                	test   eax,eax
c0017221:	75 0f                	jne    c0017232 <CPU::detectFeatures()+0x2e8>
c0017223:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001722d:	e9 ef 00 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c0017232:	52                   	push   edx
c0017233:	52                   	push   edx
c0017234:	68 0e 15 02 c0       	push   0xc002150e
c0017239:	57                   	push   edi
c001723a:	e8 b9 94 fe ff       	call   c00006f8 <strcmp>
c001723f:	83 c4 10             	add    esp,0x10
c0017242:	85 c0                	test   eax,eax
c0017244:	75 0f                	jne    c0017255 <CPU::detectFeatures()+0x30b>
c0017246:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017250:	e9 cc 00 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c0017255:	50                   	push   eax
c0017256:	50                   	push   eax
c0017257:	68 1b 15 02 c0       	push   0xc002151b
c001725c:	57                   	push   edi
c001725d:	e8 96 94 fe ff       	call   c00006f8 <strcmp>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	85 c0                	test   eax,eax
c0017267:	75 0f                	jne    c0017278 <CPU::detectFeatures()+0x32e>
c0017269:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017273:	e9 a9 00 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c0017278:	50                   	push   eax
c0017279:	50                   	push   eax
c001727a:	68 28 15 02 c0       	push   0xc0021528
c001727f:	57                   	push   edi
c0017280:	e8 73 94 fe ff       	call   c00006f8 <strcmp>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	85 c0                	test   eax,eax
c001728a:	75 0f                	jne    c001729b <CPU::detectFeatures()+0x351>
c001728c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017296:	e9 86 00 00 00       	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c001729b:	50                   	push   eax
c001729c:	50                   	push   eax
c001729d:	68 35 15 02 c0       	push   0xc0021535
c00172a2:	57                   	push   edi
c00172a3:	e8 50 94 fe ff       	call   c00006f8 <strcmp>
c00172a8:	83 c4 10             	add    esp,0x10
c00172ab:	85 c0                	test   eax,eax
c00172ad:	75 0c                	jne    c00172bb <CPU::detectFeatures()+0x371>
c00172af:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00172b9:	eb 66                	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00172bb:	50                   	push   eax
c00172bc:	50                   	push   eax
c00172bd:	68 42 15 02 c0       	push   0xc0021542
c00172c2:	57                   	push   edi
c00172c3:	e8 30 94 fe ff       	call   c00006f8 <strcmp>
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	85 c0                	test   eax,eax
c00172cd:	75 0c                	jne    c00172db <CPU::detectFeatures()+0x391>
c00172cf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00172d9:	eb 46                	jmp    c0017321 <CPU::detectFeatures()+0x3d7>
c00172db:	50                   	push   eax
c00172dc:	50                   	push   eax
c00172dd:	68 4f 15 02 c0       	push   0xc002154f
c00172e2:	57                   	push   edi
c00172e3:	e8 10 94 fe ff       	call   c00006f8 <strcmp>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	85 c0                	test   eax,eax
c00172ed:	74 e0                	je     c00172cf <CPU::detectFeatures()+0x385>
c00172ef:	50                   	push   eax
c00172f0:	50                   	push   eax
c00172f1:	68 5c 15 02 c0       	push   0xc002155c
c00172f6:	57                   	push   edi
c00172f7:	e8 fc 93 fe ff       	call   c00006f8 <strcmp>
c00172fc:	83 c4 10             	add    esp,0x10
c00172ff:	85 c0                	test   eax,eax
c0017301:	74 cc                	je     c00172cf <CPU::detectFeatures()+0x385>
c0017303:	51                   	push   ecx
c0017304:	51                   	push   ecx
c0017305:	68 69 15 02 c0       	push   0xc0021569
c001730a:	57                   	push   edi
c001730b:	e8 e8 93 fe ff       	call   c00006f8 <strcmp>
c0017310:	83 c4 10             	add    esp,0x10
c0017313:	85 c0                	test   eax,eax
c0017315:	74 b8                	je     c00172cf <CPU::detectFeatures()+0x385>
c0017317:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017321:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017326:	0f 86 be 00 00 00    	jbe    c00173ea <CPU::detectFeatures()+0x4a0>
c001732c:	83 ec 0c             	sub    esp,0xc
c001732f:	68 80 00 00 00       	push   0x80
c0017334:	e8 10 fb ff ff       	call   c0016e49 <cpuidCheckExtendedEBX(unsigned int)>
c0017339:	83 e0 01             	and    eax,0x1
c001733c:	c1 e0 06             	shl    eax,0x6
c001733f:	88 c2                	mov    dl,al
c0017341:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017347:	83 e0 bf             	and    eax,0xffffffbf
c001734a:	09 d0                	or     eax,edx
c001734c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017352:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017359:	e8 eb fa ff ff       	call   c0016e49 <cpuidCheckExtendedEBX(unsigned int)>
c001735e:	83 e0 01             	and    eax,0x1
c0017361:	c1 e0 04             	shl    eax,0x4
c0017364:	88 c2                	mov    dl,al
c0017366:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001736c:	83 e0 ef             	and    eax,0xffffffef
c001736f:	09 d0                	or     eax,edx
c0017371:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017377:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001737e:	e8 c6 fa ff ff       	call   c0016e49 <cpuidCheckExtendedEBX(unsigned int)>
c0017383:	c1 e0 07             	shl    eax,0x7
c0017386:	88 c2                	mov    dl,al
c0017388:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001738e:	83 e0 7f             	and    eax,0x7f
c0017391:	09 d0                	or     eax,edx
c0017393:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017399:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00173a0:	e8 d1 fa ff ff       	call   c0016e76 <cpuidCheckExtendedECX(unsigned int)>
c00173a5:	83 e0 01             	and    eax,0x1
c00173a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00173af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00173b5:	83 e0 f7             	and    eax,0xfffffff7
c00173b8:	09 d0                	or     eax,edx
c00173ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00173c0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00173c7:	e8 aa fa ff ff       	call   c0016e76 <cpuidCheckExtendedECX(unsigned int)>
c00173cc:	83 c4 10             	add    esp,0x10
c00173cf:	83 e0 01             	and    eax,0x1
c00173d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00173d9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00173df:	83 e0 fb             	and    eax,0xfffffffb
c00173e2:	09 d0                	or     eax,edx
c00173e4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00173ea:	83 ec 0c             	sub    esp,0xc
c00173ed:	56                   	push   esi
c00173ee:	55                   	push   ebp
c00173ef:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00173f3:	57                   	push   edi
c00173f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00173f8:	50                   	push   eax
c00173f9:	6a 01                	push   0x1
c00173fb:	e8 6c f9 ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017400:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017404:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001740a:	88 ca                	mov    dl,cl
c001740c:	83 e0 f0             	and    eax,0xfffffff0
c001740f:	83 e2 0f             	and    edx,0xf
c0017412:	09 d0                	or     eax,edx
c0017414:	88 ca                	mov    dl,cl
c0017416:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001741c:	c0 ea 04             	shr    dl,0x4
c001741f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017423:	0f b6 c2             	movzx  eax,dl
c0017426:	83 c4 20             	add    esp,0x20
c0017429:	c1 e0 06             	shl    eax,0x6
c001742c:	89 c5                	mov    ebp,eax
c001742e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017434:	66 25 3f c0          	and    ax,0xc03f
c0017438:	09 e8                	or     eax,ebp
c001743a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017441:	89 c8                	mov    eax,ecx
c0017443:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017449:	c1 e8 08             	shr    eax,0x8
c001744c:	83 e2 3f             	and    edx,0x3f
c001744f:	83 e0 0f             	and    eax,0xf
c0017452:	89 c5                	mov    ebp,eax
c0017454:	c1 e5 06             	shl    ebp,0x6
c0017457:	09 d5                	or     ebp,edx
c0017459:	89 ea                	mov    edx,ebp
c001745b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017461:	88 c2                	mov    dl,al
c0017463:	c0 ea 02             	shr    dl,0x2
c0017466:	89 d5                	mov    ebp,edx
c0017468:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001746e:	83 e2 c0             	and    edx,0xffffffc0
c0017471:	09 d5                	or     ebp,edx
c0017473:	89 ea                	mov    edx,ebp
c0017475:	89 cd                	mov    ebp,ecx
c0017477:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001747d:	c1 ed 0c             	shr    ebp,0xc
c0017480:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017486:	83 e5 03             	and    ebp,0x3
c0017489:	83 e2 cf             	and    edx,0xffffffcf
c001748c:	c1 e5 04             	shl    ebp,0x4
c001748f:	09 d5                	or     ebp,edx
c0017491:	3c 06                	cmp    al,0x6
c0017493:	89 ea                	mov    edx,ebp
c0017495:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001749b:	74 04                	je     c00174a1 <CPU::detectFeatures()+0x557>
c001749d:	3c 0f                	cmp    al,0xf
c001749f:	75 5c                	jne    c00174fd <CPU::detectFeatures()+0x5b3>
c00174a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00174a5:	89 cd                	mov    ebp,ecx
c00174a7:	c1 ed 10             	shr    ebp,0x10
c00174aa:	c1 e5 04             	shl    ebp,0x4
c00174ad:	09 ea                	or     edx,ebp
c00174af:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00174b5:	0f b6 d2             	movzx  edx,dl
c00174b8:	66 81 e5 3f c0       	and    bp,0xc03f
c00174bd:	c1 e2 06             	shl    edx,0x6
c00174c0:	09 ea                	or     edx,ebp
c00174c2:	3c 0f                	cmp    al,0xf
c00174c4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00174cb:	75 30                	jne    c00174fd <CPU::detectFeatures()+0x5b3>
c00174cd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00174d3:	c1 e9 14             	shr    ecx,0x14
c00174d6:	83 e0 3f             	and    eax,0x3f
c00174d9:	83 c1 0f             	add    ecx,0xf
c00174dc:	88 ca                	mov    dl,cl
c00174de:	c0 e9 02             	shr    cl,0x2
c00174e1:	c1 e2 06             	shl    edx,0x6
c00174e4:	09 d0                	or     eax,edx
c00174e6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00174ec:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00174f2:	83 e0 c0             	and    eax,0xffffffc0
c00174f5:	09 c1                	or     ecx,eax
c00174f7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00174fd:	83 ec 0c             	sub    esp,0xc
c0017500:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017507:	56                   	push   esi
c0017508:	8d 44 24 28          	lea    eax,[esp+0x28]
c001750c:	50                   	push   eax
c001750d:	57                   	push   edi
c001750e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017512:	55                   	push   ebp
c0017513:	68 00 00 00 80       	push   0x80000000
c0017518:	e8 4f f8 ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001751d:	83 c4 20             	add    esp,0x20
c0017520:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017528:	8d 44 24 18          	lea    eax,[esp+0x18]
c001752c:	76 1e                	jbe    c001754c <CPU::detectFeatures()+0x602>
c001752e:	83 ec 0c             	sub    esp,0xc
c0017531:	56                   	push   esi
c0017532:	50                   	push   eax
c0017533:	57                   	push   edi
c0017534:	55                   	push   ebp
c0017535:	68 01 00 00 80       	push   0x80000001
c001753a:	e8 2d f8 ff ff       	call   c0016d6c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001753f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017549:	83 c4 20             	add    esp,0x20
c001754c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017552:	83 f8 01             	cmp    eax,0x1
c0017555:	75 6f                	jne    c00175c6 <CPU::detectFeatures()+0x67c>
c0017557:	51                   	push   ecx
c0017558:	51                   	push   ecx
c0017559:	68 75 15 02 c0       	push   0xc0021575
c001755e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017562:	56                   	push   esi
c0017563:	e8 3f 91 fe ff       	call   c00006a7 <strcpy>
c0017568:	5f                   	pop    edi
c0017569:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001756f:	5d                   	pop    ebp
c0017570:	66 c1 e8 06          	shr    ax,0x6
c0017574:	0f b6 c0             	movzx  eax,al
c0017577:	50                   	push   eax
c0017578:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001757e:	c1 e8 0e             	shr    eax,0xe
c0017581:	0f b6 c0             	movzx  eax,al
c0017584:	50                   	push   eax
c0017585:	e8 8d f4 ff ff       	call   c0016a17 <lookupIntelCPUName(unsigned char, unsigned char)>
c001758a:	5a                   	pop    edx
c001758b:	59                   	pop    ecx
c001758c:	50                   	push   eax
c001758d:	56                   	push   esi
c001758e:	e8 cb 91 fe ff       	call   c000075e <strcat>
c0017593:	5f                   	pop    edi
c0017594:	5d                   	pop    ebp
c0017595:	56                   	push   esi
c0017596:	53                   	push   ebx
c0017597:	e8 9e c0 ff ff       	call   c001363a <Device::setName(char const*)>
c001759c:	58                   	pop    eax
c001759d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00175a3:	5a                   	pop    edx
c00175a4:	68 7c 15 02 c0       	push   0xc002157c
c00175a9:	50                   	push   eax
c00175aa:	e8 49 91 fe ff       	call   c00006f8 <strcmp>
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	85 c0                	test   eax,eax
c00175b4:	0f 85 73 03 00 00    	jne    c001792d <CPU::detectFeatures()+0x9e3>
c00175ba:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00175c1:	e9 67 03 00 00       	jmp    c001792d <CPU::detectFeatures()+0x9e3>
c00175c6:	83 f8 02             	cmp    eax,0x2
c00175c9:	0f 85 b5 00 00 00    	jne    c0017684 <CPU::detectFeatures()+0x73a>
c00175cf:	57                   	push   edi
c00175d0:	57                   	push   edi
c00175d1:	68 8e 15 02 c0       	push   0xc002158e
c00175d6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00175da:	56                   	push   esi
c00175db:	e8 c7 90 fe ff       	call   c00006a7 <strcpy>
c00175e0:	5d                   	pop    ebp
c00175e1:	58                   	pop    eax
c00175e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00175e8:	66 c1 e8 06          	shr    ax,0x6
c00175ec:	0f b6 c0             	movzx  eax,al
c00175ef:	50                   	push   eax
c00175f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00175f6:	c1 e8 0e             	shr    eax,0xe
c00175f9:	0f b6 c0             	movzx  eax,al
c00175fc:	50                   	push   eax
c00175fd:	e8 81 f2 ff ff       	call   c0016883 <lookupAMDCPUName(unsigned char, unsigned char)>
c0017602:	5a                   	pop    edx
c0017603:	59                   	pop    ecx
c0017604:	50                   	push   eax
c0017605:	56                   	push   esi
c0017606:	e8 53 91 fe ff       	call   c000075e <strcat>
c001760b:	5f                   	pop    edi
c001760c:	5d                   	pop    ebp
c001760d:	56                   	push   esi
c001760e:	53                   	push   ebx
c001760f:	e8 26 c0 ff ff       	call   c001363a <Device::setName(char const*)>
c0017614:	58                   	pop    eax
c0017615:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001761b:	5a                   	pop    edx
c001761c:	68 93 15 02 c0       	push   0xc0021593
c0017621:	50                   	push   eax
c0017622:	e8 d1 90 fe ff       	call   c00006f8 <strcmp>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	85 c0                	test   eax,eax
c001762c:	75 20                	jne    c001764e <CPU::detectFeatures()+0x704>
c001762e:	8b 15 c8 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022cc8
c0017634:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001763a:	a8 01                	test   al,0x1
c001763c:	74 10                	je     c001764e <CPU::detectFeatures()+0x704>
c001763e:	83 e0 fe             	and    eax,0xfffffffe
c0017641:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017647:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001764e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017654:	c1 e8 0e             	shr    eax,0xe
c0017657:	3c 05                	cmp    al,0x5
c0017659:	0f 85 ce 02 00 00    	jne    c001792d <CPU::detectFeatures()+0x9e3>
c001765f:	56                   	push   esi
c0017660:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017666:	83 e0 0f             	and    eax,0xf
c0017669:	50                   	push   eax
c001766a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017670:	66 c1 e8 06          	shr    ax,0x6
c0017674:	0f b6 c0             	movzx  eax,al
c0017677:	50                   	push   eax
c0017678:	6a 05                	push   0x5
c001767a:	e8 7a f6 ff ff       	call   c0016cf9 <AMD_K6_writeback(int, int, int)>
c001767f:	e9 1f 02 00 00       	jmp    c00178a3 <CPU::detectFeatures()+0x959>
c0017684:	8d 50 fd             	lea    edx,[eax-0x3]
c0017687:	83 fa 01             	cmp    edx,0x1
c001768a:	76 09                	jbe    c0017695 <CPU::detectFeatures()+0x74b>
c001768c:	83 f8 06             	cmp    eax,0x6
c001768f:	0f 85 91 01 00 00    	jne    c0017826 <CPU::detectFeatures()+0x8dc>
c0017695:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001769b:	c1 ea 0e             	shr    edx,0xe
c001769e:	80 fa 05             	cmp    dl,0x5
c00176a1:	75 7b                	jne    c001771e <CPU::detectFeatures()+0x7d4>
c00176a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00176a9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00176ae:	66 81 fa 00 01       	cmp    dx,0x100
c00176b3:	75 0c                	jne    c00176c1 <CPU::detectFeatures()+0x777>
c00176b5:	51                   	push   ecx
c00176b6:	51                   	push   ecx
c00176b7:	68 9a 15 02 c0       	push   0xc002159a
c00176bc:	e9 dc 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c00176c1:	66 81 fa 00 02       	cmp    dx,0x200
c00176c6:	75 0c                	jne    c00176d4 <CPU::detectFeatures()+0x78a>
c00176c8:	52                   	push   edx
c00176c9:	52                   	push   edx
c00176ca:	68 ad 15 02 c0       	push   0xc00215ad
c00176cf:	e9 c9 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c00176d4:	66 81 fa 40 02       	cmp    dx,0x240
c00176d9:	75 0c                	jne    c00176e7 <CPU::detectFeatures()+0x79d>
c00176db:	50                   	push   eax
c00176dc:	50                   	push   eax
c00176dd:	68 bf 15 02 c0       	push   0xc00215bf
c00176e2:	e9 b6 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c00176e7:	83 f8 06             	cmp    eax,0x6
c00176ea:	75 0c                	jne    c00176f8 <CPU::detectFeatures()+0x7ae>
c00176ec:	50                   	push   eax
c00176ed:	50                   	push   eax
c00176ee:	68 d1 15 02 c0       	push   0xc00215d1
c00176f3:	e9 a5 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c00176f8:	83 f8 04             	cmp    eax,0x4
c00176fb:	75 0c                	jne    c0017709 <CPU::detectFeatures()+0x7bf>
c00176fd:	50                   	push   eax
c00176fe:	50                   	push   eax
c00176ff:	68 dd 15 02 c0       	push   0xc00215dd
c0017704:	e9 94 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017709:	83 f8 03             	cmp    eax,0x3
c001770c:	0f 85 1b 02 00 00    	jne    c001792d <CPU::detectFeatures()+0x9e3>
c0017712:	50                   	push   eax
c0017713:	50                   	push   eax
c0017714:	68 e5 15 02 c0       	push   0xc00215e5
c0017719:	e9 7f 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c001771e:	80 fa 06             	cmp    dl,0x6
c0017721:	0f 85 db 00 00 00    	jne    c0017802 <CPU::detectFeatures()+0x8b8>
c0017727:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001772d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017732:	66 81 fa 80 01       	cmp    dx,0x180
c0017737:	75 0c                	jne    c0017745 <CPU::detectFeatures()+0x7fb>
c0017739:	50                   	push   eax
c001773a:	50                   	push   eax
c001773b:	68 f0 15 02 c0       	push   0xc00215f0
c0017740:	e9 58 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017745:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001774b:	66 f7 c1 80 ff       	test   cx,0xff80
c0017750:	75 0c                	jne    c001775e <CPU::detectFeatures()+0x814>
c0017752:	50                   	push   eax
c0017753:	50                   	push   eax
c0017754:	68 00 16 02 c0       	push   0xc0021600
c0017759:	e9 3f 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c001775e:	66 81 fa 40 02       	cmp    dx,0x240
c0017763:	75 0c                	jne    c0017771 <CPU::detectFeatures()+0x827>
c0017765:	55                   	push   ebp
c0017766:	55                   	push   ebp
c0017767:	68 07 16 02 c0       	push   0xc0021607
c001776c:	e9 2c 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017771:	66 81 fa 80 02       	cmp    dx,0x280
c0017776:	75 0c                	jne    c0017784 <CPU::detectFeatures()+0x83a>
c0017778:	57                   	push   edi
c0017779:	57                   	push   edi
c001777a:	68 10 16 02 c0       	push   0xc0021610
c001777f:	e9 19 01 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017784:	66 81 fa 40 03       	cmp    dx,0x340
c0017789:	74 ed                	je     c0017778 <CPU::detectFeatures()+0x82e>
c001778b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017790:	75 0c                	jne    c001779e <CPU::detectFeatures()+0x854>
c0017792:	56                   	push   esi
c0017793:	56                   	push   esi
c0017794:	68 17 16 02 c0       	push   0xc0021617
c0017799:	e9 ff 00 00 00       	jmp    c001789d <CPU::detectFeatures()+0x953>
c001779e:	83 f8 06             	cmp    eax,0x6
c00177a1:	0f 84 45 ff ff ff    	je     c00176ec <CPU::detectFeatures()+0x7a2>
c00177a7:	83 f8 04             	cmp    eax,0x4
c00177aa:	0f 84 4d ff ff ff    	je     c00176fd <CPU::detectFeatures()+0x7b3>
c00177b0:	83 f8 03             	cmp    eax,0x3
c00177b3:	0f 85 74 01 00 00    	jne    c001792d <CPU::detectFeatures()+0x9e3>
c00177b9:	51                   	push   ecx
c00177ba:	51                   	push   ecx
c00177bb:	68 20 16 02 c0       	push   0xc0021620
c00177c0:	53                   	push   ebx
c00177c1:	e8 74 be ff ff       	call   c001363a <Device::setName(char const*)>
c00177c6:	b1 c1                	mov    cl,0xc1
c00177c8:	88 c8                	mov    al,cl
c00177ca:	e6 22                	out    0x22,al
c00177cc:	e4 23                	in     al,0x23
c00177ce:	88 c2                	mov    dl,al
c00177d0:	88 c8                	mov    al,cl
c00177d2:	e6 22                	out    0x22,al
c00177d4:	88 d0                	mov    al,dl
c00177d6:	83 c8 10             	or     eax,0x10
c00177d9:	e6 23                	out    0x23,al
c00177db:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00177e2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00177e5:	89 d0                	mov    eax,edx
c00177e7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00177ed:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00177f1:	40                   	inc    eax
c00177f2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00177f8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00177fd:	e9 a1 00 00 00       	jmp    c00178a3 <CPU::detectFeatures()+0x959>
c0017802:	83 f8 06             	cmp    eax,0x6
c0017805:	0f 84 e1 fe ff ff    	je     c00176ec <CPU::detectFeatures()+0x7a2>
c001780b:	83 f8 04             	cmp    eax,0x4
c001780e:	0f 84 e9 fe ff ff    	je     c00176fd <CPU::detectFeatures()+0x7b3>
c0017814:	83 f8 03             	cmp    eax,0x3
c0017817:	0f 85 10 01 00 00    	jne    c001792d <CPU::detectFeatures()+0x9e3>
c001781d:	52                   	push   edx
c001781e:	52                   	push   edx
c001781f:	68 2b 16 02 c0       	push   0xc002162b
c0017824:	eb 77                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017826:	83 f8 07             	cmp    eax,0x7
c0017829:	75 09                	jne    c0017834 <CPU::detectFeatures()+0x8ea>
c001782b:	50                   	push   eax
c001782c:	50                   	push   eax
c001782d:	68 35 16 02 c0       	push   0xc0021635
c0017832:	eb 69                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017834:	83 f8 0a             	cmp    eax,0xa
c0017837:	75 09                	jne    c0017842 <CPU::detectFeatures()+0x8f8>
c0017839:	50                   	push   eax
c001783a:	50                   	push   eax
c001783b:	68 40 16 02 c0       	push   0xc0021640
c0017840:	eb 5b                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017842:	83 f8 0b             	cmp    eax,0xb
c0017845:	75 09                	jne    c0017850 <CPU::detectFeatures()+0x906>
c0017847:	50                   	push   eax
c0017848:	50                   	push   eax
c0017849:	68 48 16 02 c0       	push   0xc0021648
c001784e:	eb 4d                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017850:	83 f8 08             	cmp    eax,0x8
c0017853:	75 09                	jne    c001785e <CPU::detectFeatures()+0x914>
c0017855:	50                   	push   eax
c0017856:	50                   	push   eax
c0017857:	68 51 16 02 c0       	push   0xc0021651
c001785c:	eb 3f                	jmp    c001789d <CPU::detectFeatures()+0x953>
c001785e:	83 f8 09             	cmp    eax,0x9
c0017861:	75 09                	jne    c001786c <CPU::detectFeatures()+0x922>
c0017863:	50                   	push   eax
c0017864:	50                   	push   eax
c0017865:	68 59 16 02 c0       	push   0xc0021659
c001786a:	eb 31                	jmp    c001789d <CPU::detectFeatures()+0x953>
c001786c:	83 f8 05             	cmp    eax,0x5
c001786f:	75 09                	jne    c001787a <CPU::detectFeatures()+0x930>
c0017871:	50                   	push   eax
c0017872:	50                   	push   eax
c0017873:	68 61 16 02 c0       	push   0xc0021661
c0017878:	eb 23                	jmp    c001789d <CPU::detectFeatures()+0x953>
c001787a:	83 f8 0c             	cmp    eax,0xc
c001787d:	75 09                	jne    c0017888 <CPU::detectFeatures()+0x93e>
c001787f:	55                   	push   ebp
c0017880:	55                   	push   ebp
c0017881:	68 6f 16 02 c0       	push   0xc002166f
c0017886:	eb 15                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017888:	83 f8 0d             	cmp    eax,0xd
c001788b:	75 09                	jne    c0017896 <CPU::detectFeatures()+0x94c>
c001788d:	57                   	push   edi
c001788e:	57                   	push   edi
c001788f:	68 7a 16 02 c0       	push   0xc002167a
c0017894:	eb 07                	jmp    c001789d <CPU::detectFeatures()+0x953>
c0017896:	56                   	push   esi
c0017897:	56                   	push   esi
c0017898:	68 8e 16 02 c0       	push   0xc002168e
c001789d:	53                   	push   ebx
c001789e:	e8 97 bd ff ff       	call   c001363a <Device::setName(char const*)>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	e9 82 00 00 00       	jmp    c001792d <CPU::detectFeatures()+0x9e3>
c00178ab:	51                   	push   ecx
c00178ac:	51                   	push   ecx
c00178ad:	68 da 14 02 c0       	push   0xc00214da
c00178b2:	57                   	push   edi
c00178b3:	e8 ef 8d fe ff       	call   c00006a7 <strcpy>
c00178b8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00178c2:	e8 b8 88 fe ff       	call   c000017f <is486>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	85 c0                	test   eax,eax
c00178cc:	74 2d                	je     c00178fb <CPU::detectFeatures()+0x9b1>
c00178ce:	52                   	push   edx
c00178cf:	52                   	push   edx
c00178d0:	68 9a 16 02 c0       	push   0xc002169a
c00178d5:	53                   	push   ebx
c00178d6:	e8 5f bd ff ff       	call   c001363a <Device::setName(char const*)>
c00178db:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00178e2:	e8 4e 69 00 00       	call   c001e235 <CPU::readCR0()>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	83 e0 14             	and    eax,0x14
c00178ed:	83 f8 04             	cmp    eax,0x4
c00178f0:	75 1f                	jne    c0017911 <CPU::detectFeatures()+0x9c7>
c00178f2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00178f9:	eb 32                	jmp    c001792d <CPU::detectFeatures()+0x9e3>
c00178fb:	50                   	push   eax
c00178fc:	50                   	push   eax
c00178fd:	68 a5 16 02 c0       	push   0xc00216a5
c0017902:	53                   	push   ebx
c0017903:	e8 32 bd ff ff       	call   c001363a <Device::setName(char const*)>
c0017908:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001790f:	eb d1                	jmp    c00178e2 <CPU::detectFeatures()+0x998>
c0017911:	e8 44 88 fe ff       	call   c000015a <hasLegacyFPU>
c0017916:	83 e0 01             	and    eax,0x1
c0017919:	8d 14 00             	lea    edx,[eax+eax*1]
c001791c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017922:	83 e0 fd             	and    eax,0xfffffffd
c0017925:	09 d0                	or     eax,edx
c0017927:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001792d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017934:	83 c4 4c             	add    esp,0x4c
c0017937:	5b                   	pop    ebx
c0017938:	5e                   	pop    esi
c0017939:	5f                   	pop    edi
c001793a:	5d                   	pop    ebp
c001793b:	c3                   	ret    

c001793c <CPU::setupSMEP()>:
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	e8 27 69 00 00       	call   c001e26b <CPU::readCR4()>
c0017944:	0d 00 00 10 00       	or     eax,0x100000
c0017949:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001794d:	83 c4 0c             	add    esp,0xc
c0017950:	e9 3c 70 00 00       	jmp    c001e991 <CPU::writeCR4(unsigned long)>
c0017955:	90                   	nop

c0017956 <CPU::setupUMIP()>:
c0017956:	83 ec 0c             	sub    esp,0xc
c0017959:	e8 0d 69 00 00       	call   c001e26b <CPU::readCR4()>
c001795e:	80 cc 08             	or     ah,0x8
c0017961:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017965:	83 c4 0c             	add    esp,0xc
c0017968:	e9 24 70 00 00       	jmp    c001e991 <CPU::writeCR4(unsigned long)>
c001796d:	90                   	nop

c001796e <CPU::setupTSC()>:
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	e8 f5 68 00 00       	call   c001e26b <CPU::readCR4()>
c0017976:	83 c8 04             	or     eax,0x4
c0017979:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001797d:	83 c4 0c             	add    esp,0xc
c0017980:	e9 0c 70 00 00       	jmp    c001e991 <CPU::writeCR4(unsigned long)>
c0017985:	90                   	nop

c0017986 <CPU::setupLargePages()>:
c0017986:	83 ec 0c             	sub    esp,0xc
c0017989:	e8 dd 68 00 00       	call   c001e26b <CPU::readCR4()>
c001798e:	83 c8 10             	or     eax,0x10
c0017991:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017995:	83 c4 0c             	add    esp,0xc
c0017998:	e9 f4 6f 00 00       	jmp    c001e991 <CPU::writeCR4(unsigned long)>
c001799d:	90                   	nop

c001799e <CPU::setupPAT()>:
c001799e:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c00179a3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00179aa:	74 2c                	je     c00179d8 <CPU::setupPAT()+0x3a>
c00179ac:	53                   	push   ebx
c00179ad:	83 ec 10             	sub    esp,0x10
c00179b0:	68 77 02 00 00       	push   0x277
c00179b5:	50                   	push   eax
c00179b6:	e8 09 38 ff ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c00179bb:	83 e2 f8             	and    edx,0xfffffff8
c00179be:	83 ca 01             	or     edx,0x1
c00179c1:	52                   	push   edx
c00179c2:	50                   	push   eax
c00179c3:	68 77 02 00 00       	push   0x277
c00179c8:	ff 35 c8 2c 02 c0    	push   DWORD PTR ds:0xc0022cc8
c00179ce:	e8 1d 38 ff ff       	call   c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00179d3:	83 c4 28             	add    esp,0x28
c00179d6:	5b                   	pop    ebx
c00179d7:	c3                   	ret    
c00179d8:	c3                   	ret    
c00179d9:	90                   	nop

c00179da <CPU::setupMTRR()>:
c00179da:	c3                   	ret    
c00179db:	90                   	nop

c00179dc <CPU::setupGlobalPages()>:
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	e8 87 68 00 00       	call   c001e26b <CPU::readCR4()>
c00179e4:	0c 80                	or     al,0x80
c00179e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179ea:	83 c4 0c             	add    esp,0xc
c00179ed:	e9 9f 6f 00 00       	jmp    c001e991 <CPU::writeCR4(unsigned long)>

c00179f2 <CPU::allowUsermodeDataAccess()>:
c00179f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179f6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00179fd:	74 03                	je     c0017a02 <CPU::allowUsermodeDataAccess()+0x10>
c00179ff:	0f 01 cb             	stac   
c0017a02:	c3                   	ret    
c0017a03:	90                   	nop

c0017a04 <CPU::prohibitUsermodeDataAccess()>:
c0017a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a08:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017a0f:	74 03                	je     c0017a14 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017a11:	0f 01 ca             	clac   
c0017a14:	c3                   	ret    
c0017a15:	90                   	nop

c0017a16 <CPU::setupSMAP()>:
c0017a16:	53                   	push   ebx
c0017a17:	83 ec 08             	sub    esp,0x8
c0017a1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017a1e:	e8 48 68 00 00       	call   c001e26b <CPU::readCR4()>
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	0d 00 00 20 00       	or     eax,0x200000
c0017a2b:	50                   	push   eax
c0017a2c:	e8 60 6f 00 00       	call   c001e991 <CPU::writeCR4(unsigned long)>
c0017a31:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017a35:	83 c4 18             	add    esp,0x18
c0017a38:	5b                   	pop    ebx
c0017a39:	eb c9                	jmp    c0017a04 <CPU::prohibitUsermodeDataAccess()>
c0017a3b:	90                   	nop

c0017a3c <CPU::setupFeatures()>:
c0017a3c:	53                   	push   ebx
c0017a3d:	83 ec 08             	sub    esp,0x8
c0017a40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017a44:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a4b:	74 0c                	je     c0017a59 <CPU::setupFeatures()+0x1d>
c0017a4d:	83 ec 0c             	sub    esp,0xc
c0017a50:	53                   	push   ebx
c0017a51:	e8 e6 fe ff ff       	call   c001793c <CPU::setupSMEP()>
c0017a56:	83 c4 10             	add    esp,0x10
c0017a59:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a60:	74 0c                	je     c0017a6e <CPU::setupFeatures()+0x32>
c0017a62:	83 ec 0c             	sub    esp,0xc
c0017a65:	53                   	push   ebx
c0017a66:	e8 ab ff ff ff       	call   c0017a16 <CPU::setupSMAP()>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017a75:	74 0c                	je     c0017a83 <CPU::setupFeatures()+0x47>
c0017a77:	83 ec 0c             	sub    esp,0xc
c0017a7a:	53                   	push   ebx
c0017a7b:	e8 d6 fe ff ff       	call   c0017956 <CPU::setupUMIP()>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017a8a:	74 0c                	je     c0017a98 <CPU::setupFeatures()+0x5c>
c0017a8c:	83 ec 0c             	sub    esp,0xc
c0017a8f:	53                   	push   ebx
c0017a90:	e8 d9 fe ff ff       	call   c001796e <CPU::setupTSC()>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a9f:	74 0c                	je     c0017aad <CPU::setupFeatures()+0x71>
c0017aa1:	83 ec 0c             	sub    esp,0xc
c0017aa4:	53                   	push   ebx
c0017aa5:	e8 dc fe ff ff       	call   c0017986 <CPU::setupLargePages()>
c0017aaa:	83 c4 10             	add    esp,0x10
c0017aad:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017ab4:	74 0c                	je     c0017ac2 <CPU::setupFeatures()+0x86>
c0017ab6:	83 ec 0c             	sub    esp,0xc
c0017ab9:	53                   	push   ebx
c0017aba:	e8 1d ff ff ff       	call   c00179dc <CPU::setupGlobalPages()>
c0017abf:	83 c4 10             	add    esp,0x10
c0017ac2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ac9:	74 0d                	je     c0017ad8 <CPU::setupFeatures()+0x9c>
c0017acb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017acf:	83 c4 08             	add    esp,0x8
c0017ad2:	5b                   	pop    ebx
c0017ad3:	e9 c6 fe ff ff       	jmp    c001799e <CPU::setupPAT()>
c0017ad8:	83 c4 08             	add    esp,0x8
c0017adb:	5b                   	pop    ebx
c0017adc:	c3                   	ret    
c0017add:	90                   	nop

c0017ade <CPU::open(int, int, void*)>:
c0017ade:	57                   	push   edi
c0017adf:	56                   	push   esi
c0017ae0:	53                   	push   ebx
c0017ae1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ae5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017ae9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017aef:	83 ec 0c             	sub    esp,0xc
c0017af2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017af8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017afe:	50                   	push   eax
c0017aff:	e8 08 4a ff ff       	call   c000c50c <GDT::setup()>
c0017b04:	83 c4 0c             	add    esp,0xc
c0017b07:	6a 00                	push   0x0
c0017b09:	68 ef be ad de       	push   0xdeadbeef
c0017b0e:	57                   	push   edi
c0017b0f:	e8 d0 8f ff ff       	call   c0010ae4 <TSS::setup(unsigned long, unsigned long)>
c0017b14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b17:	e8 a8 8f ff ff       	call   c0010ac4 <TSS::flush()>
c0017b1c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017b22:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b25:	e8 3c 4c ff ff       	call   c000c766 <IDT::setup()>
c0017b2a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017b31:	e8 52 6e 00 00       	call   c001e988 <CPU::writeDR7(unsigned long)>
c0017b36:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017b40:	e8 fe 5b ff ff       	call   c000d743 <Phys::allocatePage()>
c0017b45:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017b4b:	89 30                	mov    DWORD PTR [eax],esi
c0017b4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017b53:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017b56:	58                   	pop    eax
c0017b57:	5a                   	pop    edx
c0017b58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017b5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b62:	e8 5d 9d ff ff       	call   c00118c4 <VAS::setCPUSpecific(unsigned long)>
c0017b67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b6a:	e8 db f3 ff ff       	call   c0016f4a <CPU::detectFeatures()>
c0017b6f:	e8 1e c8 ff ff       	call   c0014392 <setupInterruptController()>
c0017b74:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017b7a:	a1 94 34 02 c0       	mov    eax,ds:0xc0023494
c0017b7f:	83 e0 10             	and    eax,0x10
c0017b82:	83 f8 01             	cmp    eax,0x1
c0017b85:	19 c0                	sbb    eax,eax
c0017b87:	83 e0 46             	and    eax,0x46
c0017b8a:	83 c0 1e             	add    eax,0x1e
c0017b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b90:	e8 e1 d9 ff ff       	call   c0015576 <setupTimer(int)>
c0017b95:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b9e:	e8 99 fe ff ff       	call   c0017a3c <CPU::setupFeatures()>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	31 c0                	xor    eax,eax
c0017ba8:	5b                   	pop    ebx
c0017ba9:	5e                   	pop    esi
c0017baa:	5f                   	pop    edi
c0017bab:	c3                   	ret    

c0017bac <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017bac:	55                   	push   ebp
c0017bad:	57                   	push   edi
c0017bae:	56                   	push   esi
c0017baf:	53                   	push   ebx
c0017bb0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017bb6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017bbd:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017bbf:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017bc2:	80 fb 40             	cmp    bl,0x40
c0017bc5:	75 1b                	jne    c0017be2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017bc7:	8a 16                	mov    dl,BYTE PTR [esi]
c0017bc9:	84 d2                	test   dl,dl
c0017bcb:	0f 84 f1 00 00 00    	je     c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017bd1:	8d 46 01             	lea    eax,[esi+0x1]
c0017bd4:	80 fa 3a             	cmp    dl,0x3a
c0017bd7:	74 04                	je     c0017bdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017bd9:	89 c6                	mov    esi,eax
c0017bdb:	eb ea                	jmp    c0017bc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017bdd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017be0:	89 c6                	mov    esi,eax
c0017be2:	50                   	push   eax
c0017be3:	6a 40                	push   0x40
c0017be5:	6a 00                	push   0x0
c0017be7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017beb:	50                   	push   eax
c0017bec:	e8 17 8a fe ff       	call   c0000608 <memset>
c0017bf1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017bf8:	31 c0                	xor    eax,eax
c0017bfa:	83 c4 10             	add    esp,0x10
c0017bfd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017bff:	84 c9                	test   cl,cl
c0017c01:	0f 84 bb 00 00 00    	je     c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c07:	3d c7 00 00 00       	cmp    eax,0xc7
c0017c0c:	0f 8f b0 00 00 00    	jg     c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c12:	80 f9 0a             	cmp    cl,0xa
c0017c15:	0f 85 98 00 00 00    	jne    c0017cb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017c1b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017c20:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017c24:	a8 df                	test   al,0xdf
c0017c26:	0f 94 c1             	sete   cl
c0017c29:	3c 23                	cmp    al,0x23
c0017c2b:	0f 94 c2             	sete   dl
c0017c2e:	08 d1                	or     cl,dl
c0017c30:	75 4a                	jne    c0017c7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c32:	8d 50 f7             	lea    edx,[eax-0x9]
c0017c35:	80 fa 01             	cmp    dl,0x1
c0017c38:	76 42                	jbe    c0017c7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c3a:	3c 5b                	cmp    al,0x5b
c0017c3c:	75 42                	jne    c0017c80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017c3e:	80 fb 40             	cmp    bl,0x40
c0017c41:	75 39                	jne    c0017c7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c43:	83 ec 0c             	sub    esp,0xc
c0017c46:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017c4a:	52                   	push   edx
c0017c4b:	e8 d5 89 fe ff       	call   c0000625 <strlen>
c0017c50:	83 c4 10             	add    esp,0x10
c0017c53:	83 f8 3f             	cmp    eax,0x3f
c0017c56:	77 6a                	ja     c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c58:	50                   	push   eax
c0017c59:	50                   	push   eax
c0017c5a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017c5e:	52                   	push   edx
c0017c5f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c63:	52                   	push   edx
c0017c64:	e8 3e 8a fe ff       	call   c00006a7 <strcpy>
c0017c69:	58                   	pop    eax
c0017c6a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c6e:	52                   	push   edx
c0017c6f:	e8 b1 89 fe ff       	call   c0000625 <strlen>
c0017c74:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	31 d2                	xor    edx,edx
c0017c7e:	eb 3a                	jmp    c0017cba <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017c80:	80 fb 40             	cmp    bl,0x40
c0017c83:	74 06                	je     c0017c8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017c85:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017c89:	eb 20                	jmp    c0017cab <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017c8b:	50                   	push   eax
c0017c8c:	50                   	push   eax
c0017c8d:	55                   	push   ebp
c0017c8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017c92:	50                   	push   eax
c0017c93:	e8 60 8a fe ff       	call   c00006f8 <strcmp>
c0017c98:	83 c4 10             	add    esp,0x10
c0017c9b:	85 c0                	test   eax,eax
c0017c9d:	75 dd                	jne    c0017c7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c9f:	eb e4                	jmp    c0017c85 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ca4:	80 f9 3d             	cmp    cl,0x3d
c0017ca7:	74 1d                	je     c0017cc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017ca9:	89 d0                	mov    eax,edx
c0017cab:	8a 08                	mov    cl,BYTE PTR [eax]
c0017cad:	84 c9                	test   cl,cl
c0017caf:	75 f0                	jne    c0017ca1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017cb1:	eb 0f                	jmp    c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017cb3:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017cba:	47                   	inc    edi
c0017cbb:	89 d0                	mov    eax,edx
c0017cbd:	e9 3b ff ff ff       	jmp    c0017bfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017cc2:	31 c0                	xor    eax,eax
c0017cc4:	eb 33                	jmp    c0017cf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017cc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017ccd:	50                   	push   eax
c0017cce:	50                   	push   eax
c0017ccf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017cd3:	50                   	push   eax
c0017cd4:	56                   	push   esi
c0017cd5:	e8 1e 8a fe ff       	call   c00006f8 <strcmp>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	85 c0                	test   eax,eax
c0017cdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ce3:	75 97                	jne    c0017c7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ce5:	51                   	push   ecx
c0017ce6:	51                   	push   ecx
c0017ce7:	52                   	push   edx
c0017ce8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017cef:	e8 b3 89 fe ff       	call   c00006a7 <strcpy>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	b0 01                	mov    al,0x1
c0017cf9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017cff:	5b                   	pop    ebx
c0017d00:	5e                   	pop    esi
c0017d01:	5f                   	pop    edi
c0017d02:	5d                   	pop    ebp
c0017d03:	c3                   	ret    

c0017d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017d04:	57                   	push   edi
c0017d05:	56                   	push   esi
c0017d06:	53                   	push   ebx
c0017d07:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d0d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017d14:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017d1b:	53                   	push   ebx
c0017d1c:	e8 04 89 fe ff       	call   c0000625 <strlen>
c0017d21:	89 34 24             	mov    DWORD PTR [esp],esi
c0017d24:	89 c7                	mov    edi,eax
c0017d26:	e8 fa 88 fe ff       	call   c0000625 <strlen>
c0017d2b:	83 c4 10             	add    esp,0x10
c0017d2e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017d32:	31 ff                	xor    edi,edi
c0017d34:	3d ff 00 00 00       	cmp    eax,0xff
c0017d39:	0f 87 18 01 00 00    	ja     c0017e57 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017d3f:	51                   	push   ecx
c0017d40:	51                   	push   ecx
c0017d41:	56                   	push   esi
c0017d42:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017d46:	56                   	push   esi
c0017d47:	e8 5b 89 fe ff       	call   c00006a7 <strcpy>
c0017d4c:	58                   	pop    eax
c0017d4d:	5a                   	pop    edx
c0017d4e:	68 36 02 02 c0       	push   0xc0020236
c0017d53:	56                   	push   esi
c0017d54:	e8 05 8a fe ff       	call   c000075e <strcat>
c0017d59:	59                   	pop    ecx
c0017d5a:	58                   	pop    eax
c0017d5b:	53                   	push   ebx
c0017d5c:	56                   	push   esi
c0017d5d:	e8 fc 89 fe ff       	call   c000075e <strcat>
c0017d62:	58                   	pop    eax
c0017d63:	5a                   	pop    edx
c0017d64:	68 dc 16 02 c0       	push   0xc00216dc
c0017d69:	56                   	push   esi
c0017d6a:	e8 ef 89 fe ff       	call   c000075e <strcat>
c0017d6f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d76:	e8 d3 a3 ff ff       	call   c001214e <operator new(unsigned long)>
c0017d7b:	83 c4 0c             	add    esp,0xc
c0017d7e:	89 c3                	mov    ebx,eax
c0017d80:	ff 35 3c 35 02 c0    	push   DWORD PTR ds:0xc002353c
c0017d86:	56                   	push   esi
c0017d87:	50                   	push   eax
c0017d88:	e8 ef a7 ff ff       	call   c001257c <File::File(char const*, Process*)>
c0017d8d:	59                   	pop    ecx
c0017d8e:	5e                   	pop    esi
c0017d8f:	6a 01                	push   0x1
c0017d91:	53                   	push   ebx
c0017d92:	e8 49 a8 ff ff       	call   c00125e0 <File::open(FileOpenMode)>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	85 c0                	test   eax,eax
c0017d9c:	74 08                	je     c0017da6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0017d9e:	83 ec 0c             	sub    esp,0xc
c0017da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017da3:	53                   	push   ebx
c0017da4:	eb 2e                	jmp    c0017dd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0017da6:	52                   	push   edx
c0017da7:	8d 44 24 07          	lea    eax,[esp+0x7]
c0017dab:	50                   	push   eax
c0017dac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017db0:	50                   	push   eax
c0017db1:	53                   	push   ebx
c0017db2:	e8 d5 aa ff ff       	call   c001288c <File::stat(unsigned long long*, bool*)>
c0017db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	89 c1                	mov    ecx,eax
c0017dc0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0017dc4:	75 13                	jne    c0017dd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	53                   	push   ebx
c0017dca:	e8 6f a8 ff ff       	call   c001263e <File::close()>
c0017dcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017dd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017dd7:	eb 7b                	jmp    c0017e54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	50                   	push   eax
c0017ddd:	e8 b7 53 ff ff       	call   c000d199 <malloc>
c0017de2:	89 c6                	mov    esi,eax
c0017de4:	58                   	pop    eax
c0017de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017de7:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017deb:	52                   	push   edx
c0017dec:	56                   	push   esi
c0017ded:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017df1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017df5:	53                   	push   ebx
c0017df6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017df9:	83 c4 20             	add    esp,0x20
c0017dfc:	85 c0                	test   eax,eax
c0017dfe:	75 0a                	jne    c0017e0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0017e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e04:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017e08:	74 18                	je     c0017e22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	31 ff                	xor    edi,edi
c0017e0f:	53                   	push   ebx
c0017e10:	e8 29 a8 ff ff       	call   c001263e <File::close()>
c0017e15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	eb 35                	jmp    c0017e57 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017e22:	83 ec 0c             	sub    esp,0xc
c0017e25:	53                   	push   ebx
c0017e26:	e8 13 a8 ff ff       	call   c001263e <File::close()>
c0017e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e33:	83 c4 0c             	add    esp,0xc
c0017e36:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017e3d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017e44:	56                   	push   esi
c0017e45:	e8 62 fd ff ff       	call   c0017bac <Reg::findLineFromLoadedData(char*, char*, char*)>
c0017e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e4d:	89 c7                	mov    edi,eax
c0017e4f:	e8 55 53 ff ff       	call   c000d1a9 <free>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	81 c4 10 01 00 00    	add    esp,0x110
c0017e5d:	89 f8                	mov    eax,edi
c0017e5f:	5b                   	pop    ebx
c0017e60:	5e                   	pop    esi
c0017e61:	5f                   	pop    edi
c0017e62:	c3                   	ret    

c0017e63 <Reg::getLine(char*, char*, char*)>:
c0017e63:	57                   	push   edi
c0017e64:	56                   	push   esi
c0017e65:	53                   	push   ebx
c0017e66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e6e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017e72:	57                   	push   edi
c0017e73:	56                   	push   esi
c0017e74:	53                   	push   ebx
c0017e75:	68 e1 16 02 c0       	push   0xc00216e1
c0017e7a:	e8 85 fe ff ff       	call   c0017d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	84 c0                	test   al,al
c0017e84:	75 10                	jne    c0017e96 <Reg::getLine(char*, char*, char*)+0x33>
c0017e86:	57                   	push   edi
c0017e87:	56                   	push   esi
c0017e88:	53                   	push   ebx
c0017e89:	68 06 17 02 c0       	push   0xc0021706
c0017e8e:	e8 71 fe ff ff       	call   c0017d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	5b                   	pop    ebx
c0017e97:	5e                   	pop    esi
c0017e98:	5f                   	pop    edi
c0017e99:	c3                   	ret    

c0017e9a <Reg::readInt(char*, char*, int*)>:
c0017e9a:	55                   	push   ebp
c0017e9b:	57                   	push   edi
c0017e9c:	56                   	push   esi
c0017e9d:	53                   	push   ebx
c0017e9e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0017ea4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017ea8:	57                   	push   edi
c0017ea9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017eb0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017eb7:	e8 a7 ff ff ff       	call   c0017e63 <Reg::getLine(char*, char*, char*)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	84 c0                	test   al,al
c0017ec1:	0f 84 b3 00 00 00    	je     c0017f7a <Reg::readInt(char*, char*, int*)+0xe0>
c0017ec7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0017ecb:	80 fa 2b             	cmp    dl,0x2b
c0017ece:	74 0c                	je     c0017edc <Reg::readInt(char*, char*, int*)+0x42>
c0017ed0:	80 fa 2d             	cmp    dl,0x2d
c0017ed3:	75 0e                	jne    c0017ee3 <Reg::readInt(char*, char*, int*)+0x49>
c0017ed5:	ba 01 00 00 00       	mov    edx,0x1
c0017eda:	eb 0b                	jmp    c0017ee7 <Reg::readInt(char*, char*, int*)+0x4d>
c0017edc:	ba 01 00 00 00       	mov    edx,0x1
c0017ee1:	eb 02                	jmp    c0017ee5 <Reg::readInt(char*, char*, int*)+0x4b>
c0017ee3:	31 d2                	xor    edx,edx
c0017ee5:	31 c0                	xor    eax,eax
c0017ee7:	be 0a 00 00 00       	mov    esi,0xa
c0017eec:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0017ef1:	75 20                	jne    c0017f13 <Reg::readInt(char*, char*, int*)+0x79>
c0017ef3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0017ef7:	80 f9 78             	cmp    cl,0x78
c0017efa:	75 0a                	jne    c0017f06 <Reg::readInt(char*, char*, int*)+0x6c>
c0017efc:	83 c2 02             	add    edx,0x2
c0017eff:	be 10 00 00 00       	mov    esi,0x10
c0017f04:	eb 0d                	jmp    c0017f13 <Reg::readInt(char*, char*, int*)+0x79>
c0017f06:	80 f9 62             	cmp    cl,0x62
c0017f09:	75 08                	jne    c0017f13 <Reg::readInt(char*, char*, int*)+0x79>
c0017f0b:	83 c2 02             	add    edx,0x2
c0017f0e:	be 02 00 00 00       	mov    esi,0x2
c0017f13:	01 d7                	add    edi,edx
c0017f15:	31 d2                	xor    edx,edx
c0017f17:	8a 1f                	mov    bl,BYTE PTR [edi]
c0017f19:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0017f1d:	80 fb 0d             	cmp    bl,0xd
c0017f20:	0f 94 c3             	sete   bl
c0017f23:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017f28:	0f 94 c1             	sete   cl
c0017f2b:	08 cb                	or     bl,cl
c0017f2d:	75 3a                	jne    c0017f69 <Reg::readInt(char*, char*, int*)+0xcf>
c0017f2f:	0f af d6             	imul   edx,esi
c0017f32:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0017f37:	83 fe 10             	cmp    esi,0x10
c0017f3a:	75 26                	jne    c0017f62 <Reg::readInt(char*, char*, int*)+0xc8>
c0017f3c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017f40:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0017f43:	89 e9                	mov    ecx,ebp
c0017f45:	80 f9 05             	cmp    cl,0x5
c0017f48:	77 06                	ja     c0017f50 <Reg::readInt(char*, char*, int*)+0xb6>
c0017f4a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0017f4e:	eb 16                	jmp    c0017f66 <Reg::readInt(char*, char*, int*)+0xcc>
c0017f50:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017f54:	83 e9 61             	sub    ecx,0x61
c0017f57:	80 f9 05             	cmp    cl,0x5
c0017f5a:	77 06                	ja     c0017f62 <Reg::readInt(char*, char*, int*)+0xc8>
c0017f5c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0017f60:	eb 04                	jmp    c0017f66 <Reg::readInt(char*, char*, int*)+0xcc>
c0017f62:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0017f66:	47                   	inc    edi
c0017f67:	eb ae                	jmp    c0017f17 <Reg::readInt(char*, char*, int*)+0x7d>
c0017f69:	84 c0                	test   al,al
c0017f6b:	74 02                	je     c0017f6f <Reg::readInt(char*, char*, int*)+0xd5>
c0017f6d:	f7 da                	neg    edx
c0017f6f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0017f76:	89 10                	mov    DWORD PTR [eax],edx
c0017f78:	88 d8                	mov    al,bl
c0017f7a:	81 c4 ec 00 00 00    	add    esp,0xec
c0017f80:	5b                   	pop    ebx
c0017f81:	5e                   	pop    esi
c0017f82:	5f                   	pop    edi
c0017f83:	5d                   	pop    ebp
c0017f84:	c3                   	ret    

c0017f85 <Reg::readString(char*, char*, char*, int)>:
c0017f85:	57                   	push   edi
c0017f86:	56                   	push   esi
c0017f87:	53                   	push   ebx
c0017f88:	81 ec d4 00 00 00    	sub    esp,0xd4
c0017f8e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0017f95:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0017f99:	57                   	push   edi
c0017f9a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017fa1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017fa8:	e8 b6 fe ff ff       	call   c0017e63 <Reg::getLine(char*, char*, char*)>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	89 c6                	mov    esi,eax
c0017fb2:	84 c0                	test   al,al
c0017fb4:	74 44                	je     c0017ffa <Reg::readString(char*, char*, char*, int)+0x75>
c0017fb6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0017fbd:	31 c0                	xor    eax,eax
c0017fbf:	4a                   	dec    edx
c0017fc0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0017fc3:	84 c9                	test   cl,cl
c0017fc5:	74 0f                	je     c0017fd6 <Reg::readString(char*, char*, char*, int)+0x51>
c0017fc7:	39 c2                	cmp    edx,eax
c0017fc9:	7e 0b                	jle    c0017fd6 <Reg::readString(char*, char*, char*, int)+0x51>
c0017fcb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0017fce:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0017fd3:	40                   	inc    eax
c0017fd4:	eb ea                	jmp    c0017fc0 <Reg::readString(char*, char*, char*, int)+0x3b>
c0017fd6:	83 ec 0c             	sub    esp,0xc
c0017fd9:	53                   	push   ebx
c0017fda:	e8 46 86 fe ff       	call   c0000625 <strlen>
c0017fdf:	83 c4 10             	add    esp,0x10
c0017fe2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0017fe7:	75 11                	jne    c0017ffa <Reg::readString(char*, char*, char*, int)+0x75>
c0017fe9:	83 ec 0c             	sub    esp,0xc
c0017fec:	53                   	push   ebx
c0017fed:	e8 33 86 fe ff       	call   c0000625 <strlen>
c0017ff2:	83 c4 10             	add    esp,0x10
c0017ff5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0017ffa:	81 c4 d0 00 00 00    	add    esp,0xd0
c0018000:	89 f0                	mov    eax,esi
c0018002:	5b                   	pop    ebx
c0018003:	5e                   	pop    esi
c0018004:	5f                   	pop    edi
c0018005:	c3                   	ret    

c0018006 <Reg::readBool(char*, char*, bool*)>:
c0018006:	83 ec 20             	sub    esp,0x20
c0018009:	8d 44 24 10          	lea    eax,[esp+0x10]
c001800d:	50                   	push   eax
c001800e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018012:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018016:	e8 7f fe ff ff       	call   c0017e9a <Reg::readInt(char*, char*, int*)>
c001801b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018020:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018024:	0f 95 02             	setne  BYTE PTR [edx]
c0018027:	83 c4 2c             	add    esp,0x2c
c001802a:	c3                   	ret    

c001802b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001802b:	53                   	push   ebx
c001802c:	83 ec 1c             	sub    esp,0x1c
c001802f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0018033:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018037:	50                   	push   eax
c0018038:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001803c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018040:	e8 c1 ff ff ff       	call   c0018006 <Reg::readBool(char*, char*, bool*)>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	84 c0                	test   al,al
c001804a:	74 04                	je     c0018050 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001804c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0018050:	88 d8                	mov    al,bl
c0018052:	83 c4 18             	add    esp,0x18
c0018055:	5b                   	pop    ebx
c0018056:	c3                   	ret    

c0018057 <Reg::readIntWithDefault(char*, char*, int)>:
c0018057:	53                   	push   ebx
c0018058:	83 ec 1c             	sub    esp,0x1c
c001805b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001805f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018063:	50                   	push   eax
c0018064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001806c:	e8 29 fe ff ff       	call   c0017e9a <Reg::readInt(char*, char*, int*)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	84 c0                	test   al,al
c0018076:	74 04                	je     c001807c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0018078:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001807c:	89 d8                	mov    eax,ebx
c001807e:	83 c4 18             	add    esp,0x18
c0018081:	5b                   	pop    ebx
c0018082:	c3                   	ret    

c0018083 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018083:	56                   	push   esi
c0018084:	53                   	push   ebx
c0018085:	51                   	push   ecx
c0018086:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001808a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001808e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018092:	56                   	push   esi
c0018093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001809b:	e8 e5 fe ff ff       	call   c0017f85 <Reg::readString(char*, char*, char*, int)>
c00180a0:	83 c4 10             	add    esp,0x10
c00180a3:	84 c0                	test   al,al
c00180a5:	74 02                	je     c00180a9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00180a7:	89 f3                	mov    ebx,esi
c00180a9:	89 d8                	mov    eax,ebx
c00180ab:	5a                   	pop    edx
c00180ac:	5b                   	pop    ebx
c00180ad:	5e                   	pop    esi
c00180ae:	c3                   	ret    

c00180af <Sys::exit(regs*)>:
c00180af:	83 ec 18             	sub    esp,0x18
c00180b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00180b9:	e8 82 6b ff ff       	call   c000ec40 <terminateTask(int)>
c00180be:	83 c8 ff             	or     eax,0xffffffff
c00180c1:	83 c4 1c             	add    esp,0x1c
c00180c4:	89 c2                	mov    edx,eax
c00180c6:	c3                   	ret    

c00180c7 <Sys::read(regs*)>:
c00180c7:	57                   	push   edi
c00180c8:	56                   	push   esi
c00180c9:	53                   	push   ebx
c00180ca:	83 ec 10             	sub    esp,0x10
c00180cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00180d4:	83 f8 02             	cmp    eax,0x2
c00180d7:	77 10                	ja     c00180e9 <Sys::read(regs*)+0x22>
c00180d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00180e1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00180e7:	eb 0e                	jmp    c00180f7 <Sys::read(regs*)+0x30>
c00180e9:	83 ec 0c             	sub    esp,0xc
c00180ec:	50                   	push   eax
c00180ed:	e8 e5 8d ff ff       	call   c0010ed7 <getFromFileDescriptor(int)>
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	89 c1                	mov    ecx,eax
c00180f7:	83 c8 ff             	or     eax,0xffffffff
c00180fa:	85 c9                	test   ecx,ecx
c00180fc:	89 c2                	mov    edx,eax
c00180fe:	74 28                	je     c0018128 <Sys::read(regs*)+0x61>
c0018100:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018108:	31 ff                	xor    edi,edi
c001810a:	83 ec 0c             	sub    esp,0xc
c001810d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001810f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018113:	52                   	push   edx
c0018114:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018117:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001811a:	57                   	push   edi
c001811b:	56                   	push   esi
c001811c:	51                   	push   ecx
c001811d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018120:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018124:	83 c4 20             	add    esp,0x20
c0018127:	99                   	cdq    
c0018128:	83 c4 10             	add    esp,0x10
c001812b:	5b                   	pop    ebx
c001812c:	5e                   	pop    esi
c001812d:	5f                   	pop    edi
c001812e:	c3                   	ret    

c001812f <Sys::sbrk(regs*)>:
c001812f:	56                   	push   esi
c0018130:	53                   	push   ebx
c0018131:	50                   	push   eax
c0018132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018137:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001813b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001813e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0018141:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018147:	85 db                	test   ebx,ebx
c0018149:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001814c:	74 02                	je     c0018150 <Sys::sbrk(regs*)+0x21>
c001814e:	79 06                	jns    c0018156 <Sys::sbrk(regs*)+0x27>
c0018150:	89 f0                	mov    eax,esi
c0018152:	31 d2                	xor    edx,edx
c0018154:	eb 2a                	jmp    c0018180 <Sys::sbrk(regs*)+0x51>
c0018156:	83 c8 ff             	or     eax,0xffffffff
c0018159:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001815f:	89 c2                	mov    edx,eax
c0018161:	77 1d                	ja     c0018180 <Sys::sbrk(regs*)+0x51>
c0018163:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018169:	50                   	push   eax
c001816a:	c1 ea 0c             	shr    edx,0xc
c001816d:	68 07 04 00 00       	push   0x407
c0018172:	52                   	push   edx
c0018173:	51                   	push   ecx
c0018174:	e8 7b 95 ff ff       	call   c00116f4 <VAS::allocatePages(int, int)>
c0018179:	89 f0                	mov    eax,esi
c001817b:	31 d2                	xor    edx,edx
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	59                   	pop    ecx
c0018181:	5b                   	pop    ebx
c0018182:	5e                   	pop    esi
c0018183:	c3                   	ret    

c0018184 <Sys::write(regs*)>:
c0018184:	57                   	push   edi
c0018185:	56                   	push   esi
c0018186:	53                   	push   ebx
c0018187:	83 ec 10             	sub    esp,0x10
c001818a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001818e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018191:	83 f8 02             	cmp    eax,0x2
c0018194:	77 10                	ja     c00181a6 <Sys::write(regs*)+0x22>
c0018196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001819b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001819e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00181a4:	eb 0e                	jmp    c00181b4 <Sys::write(regs*)+0x30>
c00181a6:	83 ec 0c             	sub    esp,0xc
c00181a9:	50                   	push   eax
c00181aa:	e8 28 8d ff ff       	call   c0010ed7 <getFromFileDescriptor(int)>
c00181af:	83 c4 10             	add    esp,0x10
c00181b2:	89 c1                	mov    ecx,eax
c00181b4:	83 c8 ff             	or     eax,0xffffffff
c00181b7:	85 c9                	test   ecx,ecx
c00181b9:	89 c2                	mov    edx,eax
c00181bb:	74 28                	je     c00181e5 <Sys::write(regs*)+0x61>
c00181bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00181c5:	31 ff                	xor    edi,edi
c00181c7:	83 ec 0c             	sub    esp,0xc
c00181ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00181cc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00181d0:	52                   	push   edx
c00181d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00181d4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00181d7:	57                   	push   edi
c00181d8:	56                   	push   esi
c00181d9:	51                   	push   ecx
c00181da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00181dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e1:	83 c4 20             	add    esp,0x20
c00181e4:	99                   	cdq    
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	5b                   	pop    ebx
c00181e9:	5e                   	pop    esi
c00181ea:	5f                   	pop    edi
c00181eb:	c3                   	ret    

c00181ec <Sys::yield(regs*)>:
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	e8 4c 5e ff ff       	call   c000e040 <lockScheduler()>
c00181f4:	e8 7b 61 ff ff       	call   c000e374 <schedule()>
c00181f9:	e8 44 5e ff ff       	call   c000e042 <unlockScheduler()>
c00181fe:	31 c0                	xor    eax,eax
c0018200:	31 d2                	xor    edx,edx
c0018202:	83 c4 0c             	add    esp,0xc
c0018205:	c3                   	ret    

c0018206 <vm8086EntryPoint(void*)>:
c0018206:	83 ec 0c             	sub    esp,0xc
c0018209:	e8 34 5e ff ff       	call   c000e042 <unlockScheduler()>
c001820e:	fb                   	sti    
c001820f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018214:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018218:	52                   	push   edx
c0018219:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001821d:	52                   	push   edx
c001821e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018222:	52                   	push   edx
c0018223:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018227:	50                   	push   eax
c0018228:	e8 88 7f fe ff       	call   c00001b5 <goToVM86>
c001822d:	83 c4 1c             	add    esp,0x1c
c0018230:	c3                   	ret    

c0018231 <inbv(unsigned short)>:
c0018231:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018235:	ec                   	in     al,dx
c0018236:	c3                   	ret    

c0018237 <outbv(unsigned short, unsigned char)>:
c0018237:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001823b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001823f:	ee                   	out    dx,al
c0018240:	c3                   	ret    

c0018241 <realToLinear(unsigned short, unsigned short)>:
c0018241:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018246:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001824b:	c1 e0 04             	shl    eax,0x4
c001824e:	01 d0                	add    eax,edx
c0018250:	c3                   	ret    

c0018251 <getSegment(unsigned int)>:
c0018251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018255:	c1 e8 10             	shr    eax,0x10
c0018258:	c3                   	ret    

c0018259 <getOffset(unsigned int)>:
c0018259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001825d:	c3                   	ret    

c001825e <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001825e:	55                   	push   ebp
c001825f:	57                   	push   edi
c0018260:	56                   	push   esi
c0018261:	53                   	push   ebx
c0018262:	83 ec 2c             	sub    esp,0x2c
c0018265:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018269:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001826d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018271:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018275:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018279:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001827d:	e8 be 5d ff ff       	call   c000e040 <lockScheduler()>
c0018282:	68 80 00 00 00       	push   0x80
c0018287:	6a 00                	push   0x0
c0018289:	68 06 82 01 c0       	push   0xc0018206
c001828e:	55                   	push   ebp
c001828f:	e8 d6 5e ff ff       	call   c000e16a <Process::createThread(void (*)(void*), void*, int)>
c0018294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018298:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001829c:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00182a0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00182a4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00182a8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00182ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182b3:	e8 96 9e ff ff       	call   c001214e <operator new(unsigned long)>
c00182b8:	83 c4 0c             	add    esp,0xc
c00182bb:	89 c3                	mov    ebx,eax
c00182bd:	55                   	push   ebp
c00182be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00182c2:	50                   	push   eax
c00182c3:	e8 b4 a2 ff ff       	call   c001257c <File::File(char const*, Process*)>
c00182c8:	83 c4 0c             	add    esp,0xc
c00182cb:	8d 44 24 17          	lea    eax,[esp+0x17]
c00182cf:	50                   	push   eax
c00182d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182d4:	50                   	push   eax
c00182d5:	53                   	push   ebx
c00182d6:	e8 b1 a5 ff ff       	call   c001288c <File::stat(unsigned long long*, bool*)>
c00182db:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00182df:	83 c4 10             	add    esp,0x10
c00182e2:	84 d2                	test   dl,dl
c00182e4:	74 1c                	je     c0018302 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00182e6:	83 ec 0c             	sub    esp,0xc
c00182e9:	68 21 17 02 c0       	push   0xc0021721
c00182ee:	e8 c9 49 ff ff       	call   c000ccbc <panic(char const*)>
c00182f3:	e8 4a 5d ff ff       	call   c000e042 <unlockScheduler()>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	31 d2                	xor    edx,edx
c00182fd:	e9 81 00 00 00       	jmp    c0018383 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018302:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018306:	51                   	push   ecx
c0018307:	51                   	push   ecx
c0018308:	6a 01                	push   0x1
c001830a:	53                   	push   ebx
c001830b:	e8 d0 a2 ff ff       	call   c00125e0 <File::open(FileOpenMode)>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	85 c0                	test   eax,eax
c0018315:	74 1b                	je     c0018332 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018317:	83 ec 0c             	sub    esp,0xc
c001831a:	68 3a 17 02 c0       	push   0xc002173a
c001831f:	e8 98 49 ff ff       	call   c000ccbc <panic(char const*)>
c0018324:	e8 19 5d ff ff       	call   c000e042 <unlockScheduler()>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018330:	eb 51                	jmp    c0018383 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018332:	83 ec 0c             	sub    esp,0xc
c0018335:	0f b7 ff             	movzx  edi,di
c0018338:	6a 07                	push   0x7
c001833a:	0f b7 f6             	movzx  esi,si
c001833d:	68 00 01 00 00       	push   0x100
c0018342:	6a 00                	push   0x0
c0018344:	6a 00                	push   0x0
c0018346:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001834c:	e8 8f 95 ff ff       	call   c00118e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018351:	83 c4 18             	add    esp,0x18
c0018354:	57                   	push   edi
c0018355:	56                   	push   esi
c0018356:	e8 e6 fe ff ff       	call   c0018241 <realToLinear(unsigned short, unsigned short)>
c001835b:	5a                   	pop    edx
c001835c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001835e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018362:	51                   	push   ecx
c0018363:	50                   	push   eax
c0018364:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018368:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001836c:	53                   	push   ebx
c001836d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018370:	83 c4 14             	add    esp,0x14
c0018373:	53                   	push   ebx
c0018374:	e8 c5 a2 ff ff       	call   c001263e <File::close()>
c0018379:	e8 c4 5c ff ff       	call   c000e042 <unlockScheduler()>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	b2 01                	mov    dl,0x1
c0018383:	83 c4 2c             	add    esp,0x2c
c0018386:	88 d0                	mov    al,dl
c0018388:	5b                   	pop    ebx
c0018389:	5e                   	pop    esi
c001838a:	5f                   	pop    edi
c001838b:	5d                   	pop    ebp
c001838c:	c3                   	ret    

c001838d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001838d:	57                   	push   edi
c001838e:	56                   	push   esi
c001838f:	53                   	push   ebx
c0018390:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018398:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001839c:	83 e8 06             	sub    eax,0x6
c001839f:	0f b7 c0             	movzx  eax,ax
c00183a2:	50                   	push   eax
c00183a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00183a8:	50                   	push   eax
c00183a9:	e8 93 fe ff ff       	call   c0018241 <realToLinear(unsigned short, unsigned short)>
c00183ae:	5a                   	pop    edx
c00183af:	5e                   	pop    esi
c00183b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00183b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00183b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00183bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00183bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00183c2:	83 c2 02             	add    edx,0x2
c00183c5:	66 89 10             	mov    WORD PTR [eax],dx
c00183c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00183cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00183cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00183d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00183d6:	89 d6                	mov    esi,edx
c00183d8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00183de:	66 81 e6 ff fd       	and    si,0xfdff
c00183e3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00183e7:	74 07                	je     c00183f0 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00183e9:	89 d6                	mov    esi,edx
c00183eb:	66 81 ce 00 02       	or     si,0x200
c00183f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00183f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183f9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00183fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018405:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018408:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018410:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018413:	5b                   	pop    ebx
c0018414:	5e                   	pop    esi
c0018415:	5f                   	pop    edi
c0018416:	c3                   	ret    

c0018417 <readByteFromReal(unsigned short, unsigned short)>:
c0018417:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001841c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018421:	c1 e0 04             	shl    eax,0x4
c0018424:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018427:	c3                   	ret    

c0018428 <readWordFromReal(unsigned short, unsigned short)>:
c0018428:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001842d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018432:	c1 e0 04             	shl    eax,0x4
c0018435:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018439:	c3                   	ret    

c001843a <readDwordFromReal(unsigned short, unsigned short)>:
c001843a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001843f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018444:	c1 e0 04             	shl    eax,0x4
c0018447:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001844a:	c3                   	ret    

c001844b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001844b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018450:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018455:	c1 e0 04             	shl    eax,0x4
c0018458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001845c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001845f:	c3                   	ret    

c0018460 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018460:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018465:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001846a:	c1 e0 04             	shl    eax,0x4
c001846d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018471:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018475:	c3                   	ret    

c0018476 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018476:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001847b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018480:	c1 e0 04             	shl    eax,0x4
c0018483:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018487:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001848a:	c3                   	ret    

c001848b <vm8086FaultHandler(regs*)>:
c001848b:	55                   	push   ebp
c001848c:	57                   	push   edi
c001848d:	56                   	push   esi
c001848e:	53                   	push   ebx
c001848f:	83 ec 1c             	sub    esp,0x1c
c0018492:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018496:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018499:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001849d:	0f b7 f0             	movzx  esi,ax
c00184a0:	52                   	push   edx
c00184a1:	0f b7 c0             	movzx  eax,ax
c00184a4:	50                   	push   eax
c00184a5:	e8 97 fd ff ff       	call   c0018241 <realToLinear(unsigned short, unsigned short)>
c00184aa:	5a                   	pop    edx
c00184ab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00184ae:	59                   	pop    ecx
c00184af:	89 c7                	mov    edi,eax
c00184b1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00184b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00184bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184c1:	0f b7 c5             	movzx  eax,bp
c00184c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00184cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00184d0:	e8 6c fd ff ff       	call   c0018241 <realToLinear(unsigned short, unsigned short)>
c00184d5:	5a                   	pop    edx
c00184d6:	59                   	pop    ecx
c00184d7:	b1 06                	mov    cl,0x6
c00184d9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00184de:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00184e3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00184e6:	80 fa 9d             	cmp    dl,0x9d
c00184e9:	0f 84 1d 02 00 00    	je     c001870c <vm8086FaultHandler(regs*)+0x281>
c00184ef:	0f 87 8e 00 00 00    	ja     c0018583 <vm8086FaultHandler(regs*)+0xf8>
c00184f5:	80 fa 66             	cmp    dl,0x66
c00184f8:	0f 84 89 01 00 00    	je     c0018687 <vm8086FaultHandler(regs*)+0x1fc>
c00184fe:	77 44                	ja     c0018544 <vm8086FaultHandler(regs*)+0xb9>
c0018500:	80 fa 36             	cmp    dl,0x36
c0018503:	0f 84 74 01 00 00    	je     c001867d <vm8086FaultHandler(regs*)+0x1f2>
c0018509:	77 1a                	ja     c0018525 <vm8086FaultHandler(regs*)+0x9a>
c001850b:	80 fa 26             	cmp    dl,0x26
c001850e:	0f 84 4b 01 00 00    	je     c001865f <vm8086FaultHandler(regs*)+0x1d4>
c0018514:	80 fa 2e             	cmp    dl,0x2e
c0018517:	0f 85 4a 05 00 00    	jne    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c001851d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018520:	31 c9                	xor    ecx,ecx
c0018522:	47                   	inc    edi
c0018523:	eb be                	jmp    c00184e3 <vm8086FaultHandler(regs*)+0x58>
c0018525:	80 fa 64             	cmp    dl,0x64
c0018528:	0f 84 3b 01 00 00    	je     c0018669 <vm8086FaultHandler(regs*)+0x1de>
c001852e:	0f 87 3f 01 00 00    	ja     c0018673 <vm8086FaultHandler(regs*)+0x1e8>
c0018534:	80 fa 3e             	cmp    dl,0x3e
c0018537:	0f 85 2a 05 00 00    	jne    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c001853d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018540:	b1 01                	mov    cl,0x1
c0018542:	eb de                	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c0018544:	80 fa 6d             	cmp    dl,0x6d
c0018547:	0f 84 bf 02 00 00    	je     c001880c <vm8086FaultHandler(regs*)+0x381>
c001854d:	77 17                	ja     c0018566 <vm8086FaultHandler(regs*)+0xdb>
c001854f:	80 fa 67             	cmp    dl,0x67
c0018552:	0f 84 3c 01 00 00    	je     c0018694 <vm8086FaultHandler(regs*)+0x209>
c0018558:	80 fa 6c             	cmp    dl,0x6c
c001855b:	0f 84 5d 02 00 00    	je     c00187be <vm8086FaultHandler(regs*)+0x333>
c0018561:	e9 01 05 00 00       	jmp    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c0018566:	80 fa 6f             	cmp    dl,0x6f
c0018569:	0f 84 8b 03 00 00    	je     c00188fa <vm8086FaultHandler(regs*)+0x46f>
c001856f:	0f 82 0f 03 00 00    	jb     c0018884 <vm8086FaultHandler(regs*)+0x3f9>
c0018575:	80 fa 9c             	cmp    dl,0x9c
c0018578:	0f 84 23 01 00 00    	je     c00186a1 <vm8086FaultHandler(regs*)+0x216>
c001857e:	e9 e4 04 00 00       	jmp    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c0018583:	80 fa ec             	cmp    dl,0xec
c0018586:	0f 84 7f 04 00 00    	je     c0018a0b <vm8086FaultHandler(regs*)+0x580>
c001858c:	77 7b                	ja     c0018609 <vm8086FaultHandler(regs*)+0x17e>
c001858e:	80 fa e4             	cmp    dl,0xe4
c0018591:	0f 84 fe 03 00 00    	je     c0018995 <vm8086FaultHandler(regs*)+0x50a>
c0018597:	77 53                	ja     c00185ec <vm8086FaultHandler(regs*)+0x161>
c0018599:	80 fa cd             	cmp    dl,0xcd
c001859c:	0f 84 cd 01 00 00    	je     c001876f <vm8086FaultHandler(regs*)+0x2e4>
c00185a2:	80 fa cf             	cmp    dl,0xcf
c00185a5:	0f 85 bc 04 00 00    	jne    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c00185ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00185ae:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00185b1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00185b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00185b8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00185bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00185c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00185c5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00185c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185cf:	66 c1 e8 09          	shr    ax,0x9
c00185d3:	83 e0 01             	and    eax,0x1
c00185d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00185d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00185dc:	83 c0 06             	add    eax,0x6
c00185df:	25 ff ff 00 00       	and    eax,0xffff
c00185e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00185e7:	e9 77 04 00 00       	jmp    c0018a63 <vm8086FaultHandler(regs*)+0x5d8>
c00185ec:	80 fa e6             	cmp    dl,0xe6
c00185ef:	0f 84 ea 03 00 00    	je     c00189df <vm8086FaultHandler(regs*)+0x554>
c00185f5:	0f 82 b6 03 00 00    	jb     c00189b1 <vm8086FaultHandler(regs*)+0x526>
c00185fb:	80 fa e7             	cmp    dl,0xe7
c00185fe:	0f 84 f2 03 00 00    	je     c00189f6 <vm8086FaultHandler(regs*)+0x56b>
c0018604:	e9 5e 04 00 00       	jmp    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c0018609:	80 fa ef             	cmp    dl,0xef
c001860c:	0f 84 3c 04 00 00    	je     c0018a4e <vm8086FaultHandler(regs*)+0x5c3>
c0018612:	77 28                	ja     c001863c <vm8086FaultHandler(regs*)+0x1b1>
c0018614:	80 fa ed             	cmp    dl,0xed
c0018617:	0f 84 0a 04 00 00    	je     c0018a27 <vm8086FaultHandler(regs*)+0x59c>
c001861d:	80 fa ee             	cmp    dl,0xee
c0018620:	0f 85 41 04 00 00    	jne    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c0018626:	50                   	push   eax
c0018627:	50                   	push   eax
c0018628:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001862c:	50                   	push   eax
c001862d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018631:	50                   	push   eax
c0018632:	e8 00 fc ff ff       	call   c0018237 <outbv(unsigned short, unsigned char)>
c0018637:	e9 0a 04 00 00       	jmp    c0018a46 <vm8086FaultHandler(regs*)+0x5bb>
c001863c:	80 fa fa             	cmp    dl,0xfa
c001863f:	0f 84 5d 01 00 00    	je     c00187a2 <vm8086FaultHandler(regs*)+0x317>
c0018645:	80 fa fb             	cmp    dl,0xfb
c0018648:	0f 84 62 01 00 00    	je     c00187b0 <vm8086FaultHandler(regs*)+0x325>
c001864e:	80 fa f3             	cmp    dl,0xf3
c0018651:	0f 85 10 04 00 00    	jne    c0018a67 <vm8086FaultHandler(regs*)+0x5dc>
c0018657:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001865a:	e9 c3 fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c001865f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018662:	b1 02                	mov    cl,0x2
c0018664:	e9 b9 fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c0018669:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001866c:	b1 03                	mov    cl,0x3
c001866e:	e9 af fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c0018673:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018676:	b1 04                	mov    cl,0x4
c0018678:	e9 a5 fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c001867d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018680:	b1 05                	mov    cl,0x5
c0018682:	e9 9b fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c0018687:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001868a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001868f:	e9 8e fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c0018694:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018697:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001869c:	e9 81 fe ff ff       	jmp    c0018522 <vm8086FaultHandler(regs*)+0x97>
c00186a1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00186a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00186ad:	74 30                	je     c00186df <vm8086FaultHandler(regs*)+0x254>
c00186af:	83 e9 04             	sub    ecx,0x4
c00186b2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00186b8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00186be:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00186c1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186ca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00186ce:	0f 84 8c 03 00 00    	je     c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c00186d4:	80 ce 02             	or     dh,0x2
c00186d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186da:	e9 81 03 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c00186df:	83 e9 02             	sub    ecx,0x2
c00186e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00186e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00186eb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00186ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186f5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00186f9:	74 05                	je     c0018700 <vm8086FaultHandler(regs*)+0x275>
c00186fb:	80 ce 02             	or     dh,0x2
c00186fe:	eb 03                	jmp    c0018703 <vm8086FaultHandler(regs*)+0x278>
c0018700:	80 e6 fd             	and    dh,0xfd
c0018703:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018707:	e9 54 03 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c001870c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018711:	74 2a                	je     c001873d <vm8086FaultHandler(regs*)+0x2b2>
c0018713:	8b 10                	mov    edx,DWORD PTR [eax]
c0018715:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001871b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018721:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018724:	8b 00                	mov    eax,DWORD PTR [eax]
c0018726:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001872c:	c1 e8 09             	shr    eax,0x9
c001872f:	83 e0 01             	and    eax,0x1
c0018732:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018735:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018738:	83 c0 04             	add    eax,0x4
c001873b:	eb 25                	jmp    c0018762 <vm8086FaultHandler(regs*)+0x2d7>
c001873d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018740:	81 ca 00 02 02 00    	or     edx,0x20200
c0018746:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018749:	66 8b 00             	mov    ax,WORD PTR [eax]
c001874c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018752:	66 c1 e8 09          	shr    ax,0x9
c0018756:	83 e0 01             	and    eax,0x1
c0018759:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001875c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001875f:	83 c0 02             	add    eax,0x2
c0018762:	25 ff ff 00 00       	and    eax,0xffff
c0018767:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001876a:	e9 f1 02 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c001876f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018773:	3c ff                	cmp    al,0xff
c0018775:	75 10                	jne    c0018787 <vm8086FaultHandler(regs*)+0x2fc>
c0018777:	83 ec 0c             	sub    esp,0xc
c001877a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001877d:	e8 be 64 ff ff       	call   c000ec40 <terminateTask(int)>
c0018782:	e9 c2 02 00 00       	jmp    c0018a49 <vm8086FaultHandler(regs*)+0x5be>
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001878e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018792:	57                   	push   edi
c0018793:	50                   	push   eax
c0018794:	53                   	push   ebx
c0018795:	e8 f3 fb ff ff       	call   c001838d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001879a:	83 c4 20             	add    esp,0x20
c001879d:	e9 c1 02 00 00       	jmp    c0018a63 <vm8086FaultHandler(regs*)+0x5d8>
c00187a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187a7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00187ab:	e9 b0 02 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c00187b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187b5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00187b9:	e9 a2 02 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c00187be:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00187c3:	74 0d                	je     c00187d2 <vm8086FaultHandler(regs*)+0x347>
c00187c5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00187cc:	0f 87 e9 02 00 00    	ja     c0018abb <vm8086FaultHandler(regs*)+0x630>
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00187d8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187dc:	50                   	push   eax
c00187dd:	e8 4f fa ff ff       	call   c0018231 <inbv(unsigned short)>
c00187e2:	83 c4 0c             	add    esp,0xc
c00187e5:	0f b6 c0             	movzx  eax,al
c00187e8:	0f b7 c9             	movzx  ecx,cx
c00187eb:	50                   	push   eax
c00187ec:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00187f0:	50                   	push   eax
c00187f1:	51                   	push   ecx
c00187f2:	e8 54 fc ff ff       	call   c001844b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00187fd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018801:	74 03                	je     c0018806 <vm8086FaultHandler(regs*)+0x37b>
c0018803:	48                   	dec    eax
c0018804:	eb 01                	jmp    c0018807 <vm8086FaultHandler(regs*)+0x37c>
c0018806:	40                   	inc    eax
c0018807:	0f b7 c0             	movzx  eax,ax
c001880a:	eb 70                	jmp    c001887c <vm8086FaultHandler(regs*)+0x3f1>
c001880c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001880f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018812:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018817:	74 0c                	je     c0018825 <vm8086FaultHandler(regs*)+0x39a>
c0018819:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001881f:	0f 87 96 02 00 00    	ja     c0018abb <vm8086FaultHandler(regs*)+0x630>
c0018825:	0f b7 c9             	movzx  ecx,cx
c0018828:	0f b7 f6             	movzx  esi,si
c001882b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001882e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018833:	74 20                	je     c0018855 <vm8086FaultHandler(regs*)+0x3ca>
c0018835:	ed                   	in     eax,dx
c0018836:	55                   	push   ebp
c0018837:	50                   	push   eax
c0018838:	51                   	push   ecx
c0018839:	56                   	push   esi
c001883a:	e8 37 fc ff ff       	call   c0018476 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018845:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018849:	74 05                	je     c0018850 <vm8086FaultHandler(regs*)+0x3c5>
c001884b:	83 e8 04             	sub    eax,0x4
c001884e:	eb 27                	jmp    c0018877 <vm8086FaultHandler(regs*)+0x3ec>
c0018850:	83 c0 04             	add    eax,0x4
c0018853:	eb 22                	jmp    c0018877 <vm8086FaultHandler(regs*)+0x3ec>
c0018855:	66 ed                	in     ax,dx
c0018857:	0f b7 c0             	movzx  eax,ax
c001885a:	57                   	push   edi
c001885b:	50                   	push   eax
c001885c:	51                   	push   ecx
c001885d:	56                   	push   esi
c001885e:	e8 fd fb ff ff       	call   c0018460 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018869:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001886d:	74 05                	je     c0018874 <vm8086FaultHandler(regs*)+0x3e9>
c001886f:	83 e8 02             	sub    eax,0x2
c0018872:	eb 03                	jmp    c0018877 <vm8086FaultHandler(regs*)+0x3ec>
c0018874:	83 c0 02             	add    eax,0x2
c0018877:	25 ff ff 00 00       	and    eax,0xffff
c001887c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001887f:	e9 dc 01 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c0018884:	49                   	dec    ecx
c0018885:	80 f9 05             	cmp    cl,0x5
c0018888:	77 24                	ja     c00188ae <vm8086FaultHandler(regs*)+0x423>
c001888a:	0f b6 c9             	movzx  ecx,cl
c001888d:	ff 24 8d 80 17 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde880]
c0018894:	0f b7 f5             	movzx  esi,bp
c0018897:	eb 15                	jmp    c00188ae <vm8086FaultHandler(regs*)+0x423>
c0018899:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001889d:	eb 0f                	jmp    c00188ae <vm8086FaultHandler(regs*)+0x423>
c001889f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c00188a3:	eb 09                	jmp    c00188ae <vm8086FaultHandler(regs*)+0x423>
c00188a5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c00188a9:	eb 03                	jmp    c00188ae <vm8086FaultHandler(regs*)+0x423>
c00188ab:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c00188ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188b1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00188b6:	74 0b                	je     c00188c3 <vm8086FaultHandler(regs*)+0x438>
c00188b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00188bd:	0f 87 f8 01 00 00    	ja     c0018abb <vm8086FaultHandler(regs*)+0x630>
c00188c3:	0f b7 c0             	movzx  eax,ax
c00188c6:	52                   	push   edx
c00188c7:	52                   	push   edx
c00188c8:	50                   	push   eax
c00188c9:	56                   	push   esi
c00188ca:	e8 48 fb ff ff       	call   c0018417 <readByteFromReal(unsigned short, unsigned short)>
c00188cf:	59                   	pop    ecx
c00188d0:	0f b6 c0             	movzx  eax,al
c00188d3:	5e                   	pop    esi
c00188d4:	50                   	push   eax
c00188d5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00188d9:	50                   	push   eax
c00188da:	e8 58 f9 ff ff       	call   c0018237 <outbv(unsigned short, unsigned char)>
c00188df:	83 c4 10             	add    esp,0x10
c00188e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00188e9:	74 03                	je     c00188ee <vm8086FaultHandler(regs*)+0x463>
c00188eb:	48                   	dec    eax
c00188ec:	eb 01                	jmp    c00188ef <vm8086FaultHandler(regs*)+0x464>
c00188ee:	40                   	inc    eax
c00188ef:	0f b7 c0             	movzx  eax,ax
c00188f2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00188f5:	e9 66 01 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c00188fa:	49                   	dec    ecx
c00188fb:	80 f9 05             	cmp    cl,0x5
c00188fe:	77 1f                	ja     c001891f <vm8086FaultHandler(regs*)+0x494>
c0018900:	0f b6 c9             	movzx  ecx,cl
c0018903:	ff 24 8d 98 17 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde868]
c001890a:	89 ee                	mov    esi,ebp
c001890c:	eb 11                	jmp    c001891f <vm8086FaultHandler(regs*)+0x494>
c001890e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018911:	eb 0c                	jmp    c001891f <vm8086FaultHandler(regs*)+0x494>
c0018913:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018916:	eb 07                	jmp    c001891f <vm8086FaultHandler(regs*)+0x494>
c0018918:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001891b:	eb 02                	jmp    c001891f <vm8086FaultHandler(regs*)+0x494>
c001891d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001891f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018922:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018927:	74 0c                	je     c0018935 <vm8086FaultHandler(regs*)+0x4aa>
c0018929:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001892f:	0f 87 86 01 00 00    	ja     c0018abb <vm8086FaultHandler(regs*)+0x630>
c0018935:	0f b7 d6             	movzx  edx,si
c0018938:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001893b:	0f b7 c1             	movzx  eax,cx
c001893e:	81 e7 00 04 00 00    	and    edi,0x400
c0018944:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018947:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001894c:	74 1d                	je     c001896b <vm8086FaultHandler(regs*)+0x4e0>
c001894e:	55                   	push   ebp
c001894f:	55                   	push   ebp
c0018950:	50                   	push   eax
c0018951:	52                   	push   edx
c0018952:	e8 e3 fa ff ff       	call   c001843a <readDwordFromReal(unsigned short, unsigned short)>
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	89 f2                	mov    edx,esi
c001895c:	ef                   	out    dx,eax
c001895d:	85 ff                	test   edi,edi
c001895f:	74 05                	je     c0018966 <vm8086FaultHandler(regs*)+0x4db>
c0018961:	83 e9 04             	sub    ecx,0x4
c0018964:	eb 21                	jmp    c0018987 <vm8086FaultHandler(regs*)+0x4fc>
c0018966:	83 c1 04             	add    ecx,0x4
c0018969:	eb 1c                	jmp    c0018987 <vm8086FaultHandler(regs*)+0x4fc>
c001896b:	55                   	push   ebp
c001896c:	55                   	push   ebp
c001896d:	50                   	push   eax
c001896e:	52                   	push   edx
c001896f:	e8 b4 fa ff ff       	call   c0018428 <readWordFromReal(unsigned short, unsigned short)>
c0018974:	83 c4 10             	add    esp,0x10
c0018977:	89 f2                	mov    edx,esi
c0018979:	66 ef                	out    dx,ax
c001897b:	85 ff                	test   edi,edi
c001897d:	74 05                	je     c0018984 <vm8086FaultHandler(regs*)+0x4f9>
c001897f:	83 e9 02             	sub    ecx,0x2
c0018982:	eb 03                	jmp    c0018987 <vm8086FaultHandler(regs*)+0x4fc>
c0018984:	83 c1 02             	add    ecx,0x2
c0018987:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001898d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018990:	e9 cb 00 00 00       	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c0018995:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001899c:	83 ec 0c             	sub    esp,0xc
c001899f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189a3:	50                   	push   eax
c00189a4:	e8 88 f8 ff ff       	call   c0018231 <inbv(unsigned short)>
c00189a9:	0f b6 c0             	movzx  eax,al
c00189ac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00189af:	eb 3f                	jmp    c00189f0 <vm8086FaultHandler(regs*)+0x565>
c00189b1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189b6:	74 07                	je     c00189bf <vm8086FaultHandler(regs*)+0x534>
c00189b8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00189bc:	ed                   	in     eax,dx
c00189bd:	eb 14                	jmp    c00189d3 <vm8086FaultHandler(regs*)+0x548>
c00189bf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00189c2:	66 31 c9             	xor    cx,cx
c00189c5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00189c8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00189cc:	66 ed                	in     ax,dx
c00189ce:	0f b7 c0             	movzx  eax,ax
c00189d1:	09 c8                	or     eax,ecx
c00189d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00189d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00189da:	e9 84 00 00 00       	jmp    c0018a63 <vm8086FaultHandler(regs*)+0x5d8>
c00189df:	52                   	push   edx
c00189e0:	52                   	push   edx
c00189e1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00189e5:	50                   	push   eax
c00189e6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189ea:	50                   	push   eax
c00189eb:	e8 47 f8 ff ff       	call   c0018237 <outbv(unsigned short, unsigned char)>
c00189f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00189f4:	eb 53                	jmp    c0018a49 <vm8086FaultHandler(regs*)+0x5be>
c00189f6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00189f9:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00189fd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a02:	74 03                	je     c0018a07 <vm8086FaultHandler(regs*)+0x57c>
c0018a04:	ef                   	out    dx,eax
c0018a05:	eb cf                	jmp    c00189d6 <vm8086FaultHandler(regs*)+0x54b>
c0018a07:	66 ef                	out    dx,ax
c0018a09:	eb cb                	jmp    c00189d6 <vm8086FaultHandler(regs*)+0x54b>
c0018a0b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018a12:	83 ec 0c             	sub    esp,0xc
c0018a15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a19:	50                   	push   eax
c0018a1a:	e8 12 f8 ff ff       	call   c0018231 <inbv(unsigned short)>
c0018a1f:	0f b6 c0             	movzx  eax,al
c0018a22:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018a25:	eb 1f                	jmp    c0018a46 <vm8086FaultHandler(regs*)+0x5bb>
c0018a27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a2f:	74 03                	je     c0018a34 <vm8086FaultHandler(regs*)+0x5a9>
c0018a31:	ed                   	in     eax,dx
c0018a32:	eb 0d                	jmp    c0018a41 <vm8086FaultHandler(regs*)+0x5b6>
c0018a34:	66 ed                	in     ax,dx
c0018a36:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018a39:	0f b7 c0             	movzx  eax,ax
c0018a3c:	66 31 d2             	xor    dx,dx
c0018a3f:	09 d0                	or     eax,edx
c0018a41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018a44:	eb 1a                	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c0018a46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a49:	83 c4 10             	add    esp,0x10
c0018a4c:	eb 15                	jmp    c0018a63 <vm8086FaultHandler(regs*)+0x5d8>
c0018a4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018a51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a59:	74 03                	je     c0018a5e <vm8086FaultHandler(regs*)+0x5d3>
c0018a5b:	ef                   	out    dx,eax
c0018a5c:	eb 02                	jmp    c0018a60 <vm8086FaultHandler(regs*)+0x5d5>
c0018a5e:	66 ef                	out    dx,ax
c0018a60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a63:	b0 01                	mov    al,0x1
c0018a65:	eb 56                	jmp    c0018abd <vm8086FaultHandler(regs*)+0x632>
c0018a67:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018a6b:	50                   	push   eax
c0018a6c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018a70:	50                   	push   eax
c0018a71:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018a75:	50                   	push   eax
c0018a76:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018a7a:	50                   	push   eax
c0018a7b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a7f:	50                   	push   eax
c0018a80:	52                   	push   edx
c0018a81:	52                   	push   edx
c0018a82:	68 53 17 02 c0       	push   0xc0021753
c0018a87:	e8 12 41 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0018a8c:	83 c4 20             	add    esp,0x20
c0018a8f:	83 ec 0c             	sub    esp,0xc
c0018a92:	6a 60                	push   0x60
c0018a94:	e8 98 f7 ff ff       	call   c0018231 <inbv(unsigned short)>
c0018a99:	83 c4 10             	add    esp,0x10
c0018a9c:	3c 1c                	cmp    al,0x1c
c0018a9e:	74 04                	je     c0018aa4 <vm8086FaultHandler(regs*)+0x619>
c0018aa0:	3c 5a                	cmp    al,0x5a
c0018aa2:	75 eb                	jne    c0018a8f <vm8086FaultHandler(regs*)+0x604>
c0018aa4:	3c 5a                	cmp    al,0x5a
c0018aa6:	74 04                	je     c0018aac <vm8086FaultHandler(regs*)+0x621>
c0018aa8:	3c 1c                	cmp    al,0x1c
c0018aaa:	75 0f                	jne    c0018abb <vm8086FaultHandler(regs*)+0x630>
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	6a 60                	push   0x60
c0018ab1:	e8 7b f7 ff ff       	call   c0018231 <inbv(unsigned short)>
c0018ab6:	83 c4 10             	add    esp,0x10
c0018ab9:	eb e9                	jmp    c0018aa4 <vm8086FaultHandler(regs*)+0x619>
c0018abb:	31 c0                	xor    eax,eax
c0018abd:	83 c4 1c             	add    esp,0x1c
c0018ac0:	5b                   	pop    ebx
c0018ac1:	5e                   	pop    esi
c0018ac2:	5f                   	pop    edi
c0018ac3:	5d                   	pop    ebp
c0018ac4:	c3                   	ret    
c0018ac5:	90                   	nop

c0018ac6 <FAT::getName()>:
c0018ac6:	b8 b0 17 02 c0       	mov    eax,0xc00217b0
c0018acb:	c3                   	ret    

c0018acc <FAT::tell(void*, unsigned long long*)>:
c0018acc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ad1:	75 06                	jne    c0018ad9 <FAT::tell(void*, unsigned long long*)+0xd>
c0018ad3:	b8 04 00 00 00       	mov    eax,0x4
c0018ad8:	c3                   	ret    
c0018ad9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ade:	75 06                	jne    c0018ae6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018ae0:	b8 04 00 00 00       	mov    eax,0x4
c0018ae5:	c3                   	ret    
c0018ae6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018aed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018af0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018af4:	89 01                	mov    DWORD PTR [ecx],eax
c0018af6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018af9:	b8 00 00 00 00       	mov    eax,0x0
c0018afe:	c3                   	ret    
c0018aff:	90                   	nop

c0018b00 <FAT::stat(void*, unsigned long long*)>:
c0018b00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b05:	75 06                	jne    c0018b0d <FAT::stat(void*, unsigned long long*)+0xd>
c0018b07:	b8 04 00 00 00       	mov    eax,0x4
c0018b0c:	c3                   	ret    
c0018b0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b12:	75 06                	jne    c0018b1a <FAT::stat(void*, unsigned long long*)+0x1a>
c0018b14:	b8 04 00 00 00       	mov    eax,0x4
c0018b19:	c3                   	ret    
c0018b1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b28:	89 01                	mov    DWORD PTR [ecx],eax
c0018b2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b2d:	b8 00 00 00 00       	mov    eax,0x0
c0018b32:	c3                   	ret    
c0018b33:	90                   	nop

c0018b34 <FAT::exists(char const*)>:
c0018b34:	b0 00                	mov    al,0x0
c0018b36:	c3                   	ret    
c0018b37:	90                   	nop

c0018b38 <FAT::~FAT()>:
c0018b38:	83 ec 0c             	sub    esp,0xc
c0018b3b:	ba 34 18 02 c0       	mov    edx,0xc0021834
c0018b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b44:	89 10                	mov    DWORD PTR [eax],edx
c0018b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4a:	83 ec 0c             	sub    esp,0xc
c0018b4d:	50                   	push   eax
c0018b4e:	e8 23 98 ff ff       	call   c0012376 <Filesystem::~Filesystem()>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	90                   	nop
c0018b57:	83 c4 0c             	add    esp,0xc
c0018b5a:	c3                   	ret    
c0018b5b:	90                   	nop

c0018b5c <FAT::~FAT()>:
c0018b5c:	83 ec 0c             	sub    esp,0xc
c0018b5f:	83 ec 0c             	sub    esp,0xc
c0018b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b66:	e8 cd ff ff ff       	call   c0018b38 <FAT::~FAT()>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	83 ec 08             	sub    esp,0x8
c0018b71:	6a 08                	push   0x8
c0018b73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b77:	e8 e1 95 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0018b7c:	83 c4 10             	add    esp,0x10
c0018b7f:	83 c4 0c             	add    esp,0xc
c0018b82:	c3                   	ret    
c0018b83:	90                   	nop

c0018b84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b84:	83 ec 1c             	sub    esp,0x1c
c0018b87:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b8e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b97:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018b9e:	83 f8 ff             	cmp    eax,0xffffffff
c0018ba1:	75 34                	jne    c0018bd7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018ba3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ba7:	88 c2                	mov    dl,al
c0018ba9:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018bae:	01 d0                	add    eax,edx
c0018bb0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bb4:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c0018bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bbe:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0018bc5:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018bca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bce:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0018bd5:	eb 17                	jmp    c0018bee <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018bd7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bdb:	88 c2                	mov    dl,al
c0018bdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018be1:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018be8:	01 d0                	add    eax,edx
c0018bea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bee:	83 ec 04             	sub    esp,0x4
c0018bf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bf9:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018bfd:	50                   	push   eax
c0018bfe:	e8 62 de fe ff       	call   c0006a65 <f_getlabel>
c0018c03:	83 c4 10             	add    esp,0x10
c0018c06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c0a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c0f:	75 07                	jne    c0018c18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018c11:	b8 00 00 00 00       	mov    eax,0x0
c0018c16:	eb 05                	jmp    c0018c1d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018c18:	b8 01 00 00 00       	mov    eax,0x1
c0018c1d:	83 c4 1c             	add    esp,0x1c
c0018c20:	c3                   	ret    
c0018c21:	90                   	nop

c0018c22 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c22:	57                   	push   edi
c0018c23:	83 ec 58             	sub    esp,0x58
c0018c26:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c32:	b9 0f 00 00 00       	mov    ecx,0xf
c0018c37:	b8 00 00 00 00       	mov    eax,0x0
c0018c3c:	fc                   	cld    
c0018c3d:	89 d7                	mov    edi,edx
c0018c3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018c41:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c45:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018c4c:	83 f8 ff             	cmp    eax,0xffffffff
c0018c4f:	75 34                	jne    c0018c85 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018c51:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c55:	88 c2                	mov    dl,al
c0018c57:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018c5c:	01 d0                	add    eax,edx
c0018c5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c62:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c0018c68:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c6c:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0018c73:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018c78:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c7c:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0018c83:	eb 17                	jmp    c0018c9c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018c85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c89:	88 c2                	mov    dl,al
c0018c8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c8f:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018c96:	01 d0                	add    eax,edx
c0018c98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c9c:	83 ec 08             	sub    esp,0x8
c0018c9f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018ca3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ca7:	50                   	push   eax
c0018ca8:	e8 b1 7a fe ff       	call   c000075e <strcat>
c0018cad:	83 c4 10             	add    esp,0x10
c0018cb0:	83 ec 0c             	sub    esp,0xc
c0018cb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cb7:	50                   	push   eax
c0018cb8:	e8 96 df fe ff       	call   c0006c53 <f_setlabel>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cc4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cc9:	75 07                	jne    c0018cd2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018ccb:	b8 00 00 00 00       	mov    eax,0x0
c0018cd0:	eb 05                	jmp    c0018cd7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018cd2:	b8 01 00 00 00       	mov    eax,0x1
c0018cd7:	83 c4 58             	add    esp,0x58
c0018cda:	5f                   	pop    edi
c0018cdb:	c3                   	ret    

c0018cdc <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018cdc:	83 ec 2c             	sub    esp,0x2c
c0018cdf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ce7:	83 ec 08             	sub    esp,0x8
c0018cea:	68 d4 17 02 c0       	push   0xc00217d4
c0018cef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cf3:	e8 00 7a fe ff       	call   c00006f8 <strcmp>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	85 c0                	test   eax,eax
c0018cfd:	0f 94 c0             	sete   al
c0018d00:	84 c0                	test   al,al
c0018d02:	74 0d                	je     c0018d11 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018d04:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d0c:	e9 a6 00 00 00       	jmp    c0018db7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d11:	83 ec 08             	sub    esp,0x8
c0018d14:	68 c6 17 02 c0       	push   0xc00217c6
c0018d19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d1d:	e8 d6 79 fe ff       	call   c00006f8 <strcmp>
c0018d22:	83 c4 10             	add    esp,0x10
c0018d25:	85 c0                	test   eax,eax
c0018d27:	0f 94 c0             	sete   al
c0018d2a:	84 c0                	test   al,al
c0018d2c:	74 0a                	je     c0018d38 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018d2e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d36:	eb 7f                	jmp    c0018db7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d38:	83 ec 08             	sub    esp,0x8
c0018d3b:	68 cc 17 02 c0       	push   0xc00217cc
c0018d40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d44:	e8 af 79 fe ff       	call   c00006f8 <strcmp>
c0018d49:	83 c4 10             	add    esp,0x10
c0018d4c:	85 c0                	test   eax,eax
c0018d4e:	0f 94 c0             	sete   al
c0018d51:	84 c0                	test   al,al
c0018d53:	74 0a                	je     c0018d5f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018d55:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d5d:	eb 58                	jmp    c0018db7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d5f:	83 ec 08             	sub    esp,0x8
c0018d62:	68 0c f0 01 c0       	push   0xc001f00c
c0018d67:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d6b:	e8 88 79 fe ff       	call   c00006f8 <strcmp>
c0018d70:	83 c4 10             	add    esp,0x10
c0018d73:	85 c0                	test   eax,eax
c0018d75:	0f 94 c0             	sete   al
c0018d78:	84 c0                	test   al,al
c0018d7a:	74 0a                	je     c0018d86 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018d7c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d84:	eb 31                	jmp    c0018db7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d86:	83 ec 08             	sub    esp,0x8
c0018d89:	68 d2 17 02 c0       	push   0xc00217d2
c0018d8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d92:	e8 61 79 fe ff       	call   c00006f8 <strcmp>
c0018d97:	83 c4 10             	add    esp,0x10
c0018d9a:	85 c0                	test   eax,eax
c0018d9c:	0f 94 c0             	sete   al
c0018d9f:	84 c0                	test   al,al
c0018da1:	74 0a                	je     c0018dad <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018da3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018dab:	eb 0a                	jmp    c0018db7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018dad:	b8 08 00 00 00       	mov    eax,0x8
c0018db2:	e9 04 01 00 00       	jmp    c0018ebb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018db7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018dbe:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018dc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dc7:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018dce:	83 f8 ff             	cmp    eax,0xffffffff
c0018dd1:	75 34                	jne    c0018e07 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018dd3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dd7:	88 c2                	mov    dl,al
c0018dd9:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018dde:	01 d0                	add    eax,edx
c0018de0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018de4:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c0018dea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dee:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0018df5:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018dfa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018dfe:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0018e05:	eb 17                	jmp    c0018e1e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018e07:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e0b:	88 c2                	mov    dl,al
c0018e0d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e11:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018e18:	01 d0                	add    eax,edx
c0018e1a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e22:	88 04 24             	mov    BYTE PTR [esp],al
c0018e25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e2d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e35:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e42:	83 ec 0c             	sub    esp,0xc
c0018e45:	68 00 20 00 00       	push   0x2000
c0018e4a:	e8 4a 43 ff ff       	call   c000d199 <malloc>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e56:	68 00 20 00 00       	push   0x2000
c0018e5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e63:	50                   	push   eax
c0018e64:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e68:	50                   	push   eax
c0018e69:	e8 30 e2 fe ff       	call   c000709e <f_mkfs>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e7a:	75 07                	jne    c0018e83 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018e7c:	b8 00 00 00 00       	mov    eax,0x0
c0018e81:	eb 38                	jmp    c0018ebb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018e83:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e88:	75 17                	jne    c0018ea1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	68 04 18 02 c0       	push   0xc0021804
c0018e92:	e8 07 3d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	b8 09 00 00 00       	mov    eax,0x9
c0018e9f:	eb 1a                	jmp    c0018ebb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018ea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ea5:	83 ec 08             	sub    esp,0x8
c0018ea8:	50                   	push   eax
c0018ea9:	68 d8 17 02 c0       	push   0xc00217d8
c0018eae:	e8 eb 3c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	b8 01 00 00 00       	mov    eax,0x1
c0018ebb:	83 c4 2c             	add    esp,0x2c
c0018ebe:	c3                   	ret    
c0018ebf:	90                   	nop

c0018ec0 <FAT::tryMount(LogicalDisk*, int)>:
c0018ec0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0018ec6:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018ecb:	83 f8 14             	cmp    eax,0x14
c0018ece:	75 17                	jne    c0018ee7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	68 ea 17 02 c0       	push   0xc00217ea
c0018ed8:	e8 df 3d ff ff       	call   c000ccbc <panic(char const*)>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	b0 00                	mov    al,0x0
c0018ee2:	e9 d7 01 00 00       	jmp    c00190be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018ee7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0018eee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018ef4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018efa:	3d 00 02 00 00       	cmp    eax,0x200
c0018eff:	74 07                	je     c0018f08 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0018f01:	b0 00                	mov    al,0x0
c0018f03:	e9 b6 01 00 00       	jmp    c00190be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018f08:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0018f10:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018f17:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0018f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f21:	74 07                	je     c0018f2a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0018f23:	b0 01                	mov    al,0x1
c0018f25:	e9 94 01 00 00       	jmp    c00190be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018f2a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0018f34:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0018f3c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0018f43:	88 c2                	mov    dl,al
c0018f45:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018f4a:	01 d0                	add    eax,edx
c0018f4c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0018f53:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c0018f59:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018f60:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0018f67:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0018f6c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0018f73:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0018f7a:	83 ec 0c             	sub    esp,0xc
c0018f7d:	68 54 02 00 00       	push   0x254
c0018f82:	e8 12 42 ff ff       	call   c000d199 <malloc>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0018f91:	83 ec 04             	sub    esp,0x4
c0018f94:	6a 00                	push   0x0
c0018f96:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018f9d:	50                   	push   eax
c0018f9e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018fa5:	e8 b2 bc fe ff       	call   c0004c5c <f_mount>
c0018faa:	83 c4 10             	add    esp,0x10
c0018fad:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0018fb4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0018fbc:	74 19                	je     c0018fd7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0018fbe:	83 ec 0c             	sub    esp,0xc
c0018fc1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018fc8:	e8 ec 41 ff ff       	call   c000d1b9 <rfree>
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	b0 00                	mov    al,0x0
c0018fd2:	e9 e7 00 00 00       	jmp    c00190be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018fd7:	83 ec 04             	sub    esp,0x4
c0018fda:	68 00 01 00 00       	push   0x100
c0018fdf:	6a 00                	push   0x0
c0018fe1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0018fe8:	50                   	push   eax
c0018fe9:	e8 1a 76 fe ff       	call   c0000608 <memset>
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	83 ec 08             	sub    esp,0x8
c0018ff4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018ffb:	50                   	push   eax
c0018ffc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019003:	50                   	push   eax
c0019004:	e8 55 77 fe ff       	call   c000075e <strcat>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	83 ec 08             	sub    esp,0x8
c001900f:	68 f8 17 02 c0       	push   0xc00217f8
c0019014:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001901b:	50                   	push   eax
c001901c:	e8 3d 77 fe ff       	call   c000075e <strcat>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	83 ec 04             	sub    esp,0x4
c0019027:	6a 01                	push   0x1
c0019029:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019030:	50                   	push   eax
c0019031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019035:	50                   	push   eax
c0019036:	e8 83 bc fe ff       	call   c0004cbe <f_open>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019045:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001904c:	85 c0                	test   eax,eax
c001904e:	74 0a                	je     c001905a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019050:	78 2d                	js     c001907f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019052:	83 e8 04             	sub    eax,0x4
c0019055:	83 f8 01             	cmp    eax,0x1
c0019058:	77 25                	ja     c001907f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001905a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019062:	83 ec 0c             	sub    esp,0xc
c0019065:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019069:	50                   	push   eax
c001906a:	e8 a1 c7 fe ff       	call   c0005810 <f_close>
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	90                   	nop
c0019073:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001907b:	74 3a                	je     c00190b7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001907d:	eb 2d                	jmp    c00190ac <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001907f:	83 ec 0c             	sub    esp,0xc
c0019082:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019089:	e8 2b 41 ff ff       	call   c000d1b9 <rfree>
c001908e:	83 c4 10             	add    esp,0x10
c0019091:	83 ec 04             	sub    esp,0x4
c0019094:	6a 00                	push   0x0
c0019096:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001909d:	50                   	push   eax
c001909e:	6a 00                	push   0x0
c00190a0:	e8 b7 bb fe ff       	call   c0004c5c <f_mount>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	b0 00                	mov    al,0x0
c00190aa:	eb 12                	jmp    c00190be <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00190ac:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c00190b1:	40                   	inc    eax
c00190b2:	a3 a0 40 02 c0       	mov    ds:0xc00240a0,eax
c00190b7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00190be:	81 c4 6c 03 00 00    	add    esp,0x36c
c00190c4:	c3                   	ret    
c00190c5:	90                   	nop

c00190c6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190c6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00190cc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00190d4:	74 0a                	je     c00190e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00190d6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00190de:	75 0a                	jne    c00190ea <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00190e0:	b8 04 00 00 00       	mov    eax,0x4
c00190e5:	e9 dc 00 00 00       	jmp    c00191c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00190ea:	83 ec 08             	sub    esp,0x8
c00190ed:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190f4:	50                   	push   eax
c00190f5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00190fc:	e8 19 cd fe ff       	call   c0005e1a <f_readdir>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001910b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019112:	83 ec 0c             	sub    esp,0xc
c0019115:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001911c:	83 c0 1a             	add    eax,0x1a
c001911f:	50                   	push   eax
c0019120:	e8 00 75 fe ff       	call   c0000625 <strlen>
c0019125:	83 c4 10             	add    esp,0x10
c0019128:	ba 00 00 00 00       	mov    edx,0x0
c001912d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019131:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019135:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001913c:	0f b6 c0             	movzx  eax,al
c001913f:	83 e0 10             	and    eax,0x10
c0019142:	74 07                	je     c001914b <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0019144:	b8 02 00 00 00       	mov    eax,0x2
c0019149:	eb 05                	jmp    c0019150 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c001914b:	b8 01 00 00 00       	mov    eax,0x1
c0019150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019154:	83 ec 08             	sub    esp,0x8
c0019157:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001915e:	83 c0 1a             	add    eax,0x1a
c0019161:	50                   	push   eax
c0019162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019166:	83 c0 10             	add    eax,0x10
c0019169:	50                   	push   eax
c001916a:	e8 38 75 fe ff       	call   c00006a7 <strcpy>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	83 ec 04             	sub    esp,0x4
c0019175:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001917c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019180:	50                   	push   eax
c0019181:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019188:	e8 45 74 fe ff       	call   c00005d2 <memcpy>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019197:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001919d:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00191a4:	84 c0                	test   al,al
c00191a6:	75 07                	jne    c00191af <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00191a8:	b8 07 00 00 00       	mov    eax,0x7
c00191ad:	eb 17                	jmp    c00191c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00191af:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00191b6:	85 c0                	test   eax,eax
c00191b8:	75 07                	jne    c00191c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00191ba:	b8 00 00 00 00       	mov    eax,0x0
c00191bf:	eb 05                	jmp    c00191c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00191c1:	b8 01 00 00 00       	mov    eax,0x1
c00191c6:	81 c4 3c 02 00 00    	add    esp,0x23c
c00191cc:	c3                   	ret    
c00191cd:	90                   	nop

c00191ce <FAT::read(void*, unsigned long, void*, int*)>:
c00191ce:	83 ec 1c             	sub    esp,0x1c
c00191d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00191d6:	74 07                	je     c00191df <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00191d8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00191dd:	75 07                	jne    c00191e6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00191df:	b8 04 00 00 00       	mov    eax,0x4
c00191e4:	eb 3d                	jmp    c0019223 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00191e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191ea:	50                   	push   eax
c00191eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00191f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191f7:	e8 fe be fe ff       	call   c00050fa <f_read>
c00191fc:	83 c4 10             	add    esp,0x10
c00191ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019207:	89 c2                	mov    edx,eax
c0019209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001920d:	89 10                	mov    DWORD PTR [eax],edx
c001920f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019213:	85 c0                	test   eax,eax
c0019215:	75 07                	jne    c001921e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019217:	b8 00 00 00 00       	mov    eax,0x0
c001921c:	eb 05                	jmp    c0019223 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001921e:	b8 01 00 00 00       	mov    eax,0x1
c0019223:	83 c4 1c             	add    esp,0x1c
c0019226:	c3                   	ret    
c0019227:	90                   	nop

c0019228 <FAT::write(void*, unsigned long, void*, int*)>:
c0019228:	83 ec 1c             	sub    esp,0x1c
c001922b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019230:	74 07                	je     c0019239 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019232:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019237:	75 07                	jne    c0019240 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019239:	b8 04 00 00 00       	mov    eax,0x4
c001923e:	eb 3d                	jmp    c001927d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019240:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019244:	50                   	push   eax
c0019245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019249:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001924d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019251:	e8 24 c1 fe ff       	call   c000537a <f_write>
c0019256:	83 c4 10             	add    esp,0x10
c0019259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001925d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019261:	89 c2                	mov    edx,eax
c0019263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019267:	89 10                	mov    DWORD PTR [eax],edx
c0019269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001926d:	85 c0                	test   eax,eax
c001926f:	75 07                	jne    c0019278 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019271:	b8 00 00 00 00       	mov    eax,0x0
c0019276:	eb 05                	jmp    c001927d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019278:	b8 01 00 00 00       	mov    eax,0x1
c001927d:	83 c4 1c             	add    esp,0x1c
c0019280:	c3                   	ret    
c0019281:	90                   	nop

c0019282 <FAT::close(void*)>:
c0019282:	83 ec 1c             	sub    esp,0x1c
c0019285:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001928a:	75 07                	jne    c0019293 <FAT::close(void*)+0x11>
c001928c:	b8 04 00 00 00       	mov    eax,0x4
c0019291:	eb 36                	jmp    c00192c9 <FAT::close(void*)+0x47>
c0019293:	83 ec 0c             	sub    esp,0xc
c0019296:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001929a:	e8 71 c5 fe ff       	call   c0005810 <f_close>
c001929f:	83 c4 10             	add    esp,0x10
c00192a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192a6:	83 ec 0c             	sub    esp,0xc
c00192a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192ad:	e8 f7 3e ff ff       	call   c000d1a9 <free>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192b9:	85 c0                	test   eax,eax
c00192bb:	75 07                	jne    c00192c4 <FAT::close(void*)+0x42>
c00192bd:	b8 00 00 00 00       	mov    eax,0x0
c00192c2:	eb 05                	jmp    c00192c9 <FAT::close(void*)+0x47>
c00192c4:	b8 01 00 00 00       	mov    eax,0x1
c00192c9:	83 c4 1c             	add    esp,0x1c
c00192cc:	c3                   	ret    
c00192cd:	90                   	nop

c00192ce <FAT::closeDir(void*)>:
c00192ce:	83 ec 1c             	sub    esp,0x1c
c00192d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192d6:	75 07                	jne    c00192df <FAT::closeDir(void*)+0x11>
c00192d8:	b8 04 00 00 00       	mov    eax,0x4
c00192dd:	eb 36                	jmp    c0019315 <FAT::closeDir(void*)+0x47>
c00192df:	83 ec 0c             	sub    esp,0xc
c00192e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192e6:	e8 0d cb fe ff       	call   c0005df8 <f_closedir>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192f2:	83 ec 0c             	sub    esp,0xc
c00192f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192f9:	e8 ab 3e ff ff       	call   c000d1a9 <free>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019305:	85 c0                	test   eax,eax
c0019307:	75 07                	jne    c0019310 <FAT::closeDir(void*)+0x42>
c0019309:	b8 00 00 00 00       	mov    eax,0x0
c001930e:	eb 05                	jmp    c0019315 <FAT::closeDir(void*)+0x47>
c0019310:	b8 01 00 00 00       	mov    eax,0x1
c0019315:	83 c4 1c             	add    esp,0x1c
c0019318:	c3                   	ret    
c0019319:	90                   	nop

c001931a <FAT::seek(void*, unsigned long long)>:
c001931a:	83 ec 2c             	sub    esp,0x2c
c001931d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019325:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001932d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019332:	75 07                	jne    c001933b <FAT::seek(void*, unsigned long long)+0x21>
c0019334:	b8 04 00 00 00       	mov    eax,0x4
c0019339:	eb 2f                	jmp    c001936a <FAT::seek(void*, unsigned long long)+0x50>
c001933b:	83 ec 04             	sub    esp,0x4
c001933e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019342:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019346:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001934a:	e8 f0 c4 fe ff       	call   c000583f <f_lseek>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001935a:	85 c0                	test   eax,eax
c001935c:	75 07                	jne    c0019365 <FAT::seek(void*, unsigned long long)+0x4b>
c001935e:	b8 00 00 00 00       	mov    eax,0x0
c0019363:	eb 05                	jmp    c001936a <FAT::seek(void*, unsigned long long)+0x50>
c0019365:	b8 01 00 00 00       	mov    eax,0x1
c001936a:	83 c4 2c             	add    esp,0x2c
c001936d:	c3                   	ret    

c001936e <fatWrapperReadDisk>:
c001936e:	83 ec 1c             	sub    esp,0x1c
c0019371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019375:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019379:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001937d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019388:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001938d:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019394:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001939f:	52                   	push   edx
c00193a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193a8:	50                   	push   eax
c00193a9:	e8 6c bb ff ff       	call   c0014f1a <LogicalDisk::read(unsigned long long, int, void*)>
c00193ae:	83 c4 20             	add    esp,0x20
c00193b1:	83 c4 1c             	add    esp,0x1c
c00193b4:	c3                   	ret    

c00193b5 <fatWrapperWriteDisk>:
c00193b5:	83 ec 1c             	sub    esp,0x1c
c00193b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00193c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00193c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193d4:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c00193db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193df:	83 ec 0c             	sub    esp,0xc
c00193e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193e6:	52                   	push   edx
c00193e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193ef:	50                   	push   eax
c00193f0:	e8 91 bb ff ff       	call   c0014f86 <LogicalDisk::write(unsigned long long, int, void*)>
c00193f5:	83 c4 20             	add    esp,0x20
c00193f8:	83 c4 1c             	add    esp,0x1c
c00193fb:	c3                   	ret    

c00193fc <fatWrapperIoctl>:
c00193fc:	53                   	push   ebx
c00193fd:	83 ec 28             	sub    esp,0x28
c0019400:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019404:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019408:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001940c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019410:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019415:	75 31                	jne    c0019448 <fatWrapperIoctl+0x4c>
c0019417:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001941b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001941f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019424:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c001942b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019431:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019437:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001943b:	66 89 02             	mov    WORD PTR [edx],ax
c001943e:	b8 00 00 00 00       	mov    eax,0x0
c0019443:	e9 b2 00 00 00       	jmp    c00194fa <fatWrapperIoctl+0xfe>
c0019448:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001944d:	75 6a                	jne    c00194b9 <fatWrapperIoctl+0xbd>
c001944f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019457:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001945c:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019463:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019469:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001946f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019475:	89 c8                	mov    eax,ecx
c0019477:	89 da                	mov    edx,ebx
c0019479:	0f a4 c2 0a          	shld   edx,eax,0xa
c001947d:	c1 e0 0a             	shl    eax,0xa
c0019480:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019485:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c001948c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019492:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019498:	89 cb                	mov    ebx,ecx
c001949a:	c1 fb 1f             	sar    ebx,0x1f
c001949d:	53                   	push   ebx
c001949e:	51                   	push   ecx
c001949f:	52                   	push   edx
c00194a0:	50                   	push   eax
c00194a1:	e8 b6 4a 00 00       	call   c001df5c <__udivdi3>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00194ad:	89 01                	mov    DWORD PTR [ecx],eax
c00194af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00194b2:	b8 00 00 00 00       	mov    eax,0x0
c00194b7:	eb 41                	jmp    c00194fa <fatWrapperIoctl+0xfe>
c00194b9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00194be:	75 07                	jne    c00194c7 <fatWrapperIoctl+0xcb>
c00194c0:	b8 00 00 00 00       	mov    eax,0x0
c00194c5:	eb 33                	jmp    c00194fa <fatWrapperIoctl+0xfe>
c00194c7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00194cc:	75 19                	jne    c00194e7 <fatWrapperIoctl+0xeb>
c00194ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194da:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00194e0:	b8 00 00 00 00       	mov    eax,0x0
c00194e5:	eb 13                	jmp    c00194fa <fatWrapperIoctl+0xfe>
c00194e7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00194ec:	75 07                	jne    c00194f5 <fatWrapperIoctl+0xf9>
c00194ee:	b8 00 00 00 00       	mov    eax,0x0
c00194f3:	eb 05                	jmp    c00194fa <fatWrapperIoctl+0xfe>
c00194f5:	b8 04 00 00 00       	mov    eax,0x4
c00194fa:	83 c4 28             	add    esp,0x28
c00194fd:	5b                   	pop    ebx
c00194fe:	c3                   	ret    
c00194ff:	90                   	nop

c0019500 <FAT::FAT()>:
c0019500:	83 ec 1c             	sub    esp,0x1c
c0019503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	50                   	push   eax
c001950b:	e8 42 8e ff ff       	call   c0012352 <Filesystem::Filesystem()>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	ba 34 18 02 c0       	mov    edx,0xc0021834
c0019518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001951c:	89 10                	mov    DWORD PTR [eax],edx
c001951e:	c7 05 a0 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240a0,0x0
c0019528:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019530:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019535:	7f 15                	jg     c001954c <FAT::FAT()+0x4c>
c0019537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001953b:	c7 04 85 c0 40 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbf40],0xffffffff
c0019546:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001954a:	eb e4                	jmp    c0019530 <FAT::FAT()+0x30>
c001954c:	90                   	nop
c001954d:	83 c4 1c             	add    esp,0x1c
c0019550:	c3                   	ret    
c0019551:	90                   	nop

c0019552 <FAT::fixFilepath(char*)>:
c0019552:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019556:	8a 00                	mov    al,BYTE PTR [eax]
c0019558:	3c 40                	cmp    al,0x40
c001955a:	7e 2c                	jle    c0019588 <FAT::fixFilepath(char*)+0x36>
c001955c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019560:	8a 00                	mov    al,BYTE PTR [eax]
c0019562:	83 e8 41             	sub    eax,0x41
c0019565:	88 c2                	mov    dl,al
c0019567:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001956b:	88 10                	mov    BYTE PTR [eax],dl
c001956d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019571:	8a 00                	mov    al,BYTE PTR [eax]
c0019573:	0f be c0             	movsx  eax,al
c0019576:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c001957d:	83 c0 30             	add    eax,0x30
c0019580:	88 c2                	mov    dl,al
c0019582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019586:	88 10                	mov    BYTE PTR [eax],dl
c0019588:	90                   	nop
c0019589:	c3                   	ret    

c001958a <FAT::open(char const*, void**, FileOpenMode)>:
c001958a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019590:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019598:	74 0a                	je     c00195a4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001959a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00195a2:	75 0a                	jne    c00195ae <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00195a4:	b8 04 00 00 00       	mov    eax,0x4
c00195a9:	e9 fd 00 00 00       	jmp    c00196ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00195ae:	83 ec 08             	sub    esp,0x8
c00195b1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195bc:	50                   	push   eax
c00195bd:	e8 e5 70 fe ff       	call   c00006a7 <strcpy>
c00195c2:	83 c4 10             	add    esp,0x10
c00195c5:	83 ec 08             	sub    esp,0x8
c00195c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195cc:	50                   	push   eax
c00195cd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195d4:	e8 79 ff ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00195e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00195eb:	83 e0 01             	and    eax,0x1
c00195ee:	74 08                	je     c00195f8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00195f0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00195f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00195ff:	83 e0 04             	and    eax,0x4
c0019602:	74 10                	je     c0019614 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019604:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001960c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019614:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001961b:	83 e0 02             	and    eax,0x2
c001961e:	74 08                	je     c0019628 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019620:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019628:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001962f:	83 e0 08             	and    eax,0x8
c0019632:	74 08                	je     c001963c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019634:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001963c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019643:	83 e0 10             	and    eax,0x10
c0019646:	74 08                	je     c0019650 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019648:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	68 50 02 00 00       	push   0x250
c0019658:	e8 3c 3b ff ff       	call   c000d199 <malloc>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	89 c2                	mov    edx,eax
c0019662:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019669:	89 10                	mov    DWORD PTR [eax],edx
c001966b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019673:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001967a:	8b 00                	mov    eax,DWORD PTR [eax]
c001967c:	83 ec 04             	sub    esp,0x4
c001967f:	52                   	push   edx
c0019680:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019684:	52                   	push   edx
c0019685:	50                   	push   eax
c0019686:	e8 33 b6 fe ff       	call   c0004cbe <f_open>
c001968b:	83 c4 10             	add    esp,0x10
c001968e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019695:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001969d:	74 07                	je     c00196a6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001969f:	b8 01 00 00 00       	mov    eax,0x1
c00196a4:	eb 05                	jmp    c00196ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00196a6:	b8 00 00 00 00       	mov    eax,0x0
c00196ab:	81 c4 1c 01 00 00    	add    esp,0x11c
c00196b1:	c3                   	ret    

c00196b2 <FAT::openDir(char const*, void**)>:
c00196b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196b8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196c0:	74 0a                	je     c00196cc <FAT::openDir(char const*, void**)+0x1a>
c00196c2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196ca:	75 07                	jne    c00196d3 <FAT::openDir(char const*, void**)+0x21>
c00196cc:	b8 04 00 00 00       	mov    eax,0x4
c00196d1:	eb 7d                	jmp    c0019750 <FAT::openDir(char const*, void**)+0x9e>
c00196d3:	83 ec 08             	sub    esp,0x8
c00196d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196e1:	50                   	push   eax
c00196e2:	e8 c0 6f fe ff       	call   c00006a7 <strcpy>
c00196e7:	83 c4 10             	add    esp,0x10
c00196ea:	83 ec 08             	sub    esp,0x8
c00196ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196f1:	50                   	push   eax
c00196f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196f9:	e8 54 fe ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c00196fe:	83 c4 10             	add    esp,0x10
c0019701:	83 ec 0c             	sub    esp,0xc
c0019704:	6a 4c                	push   0x4c
c0019706:	e8 8e 3a ff ff       	call   c000d199 <malloc>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	89 c2                	mov    edx,eax
c0019710:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019717:	89 10                	mov    DWORD PTR [eax],edx
c0019719:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019720:	8b 00                	mov    eax,DWORD PTR [eax]
c0019722:	83 ec 08             	sub    esp,0x8
c0019725:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019729:	52                   	push   edx
c001972a:	50                   	push   eax
c001972b:	e8 c6 c5 fe ff       	call   c0005cf6 <f_opendir>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001973a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019742:	74 07                	je     c001974b <FAT::openDir(char const*, void**)+0x99>
c0019744:	b8 01 00 00 00       	mov    eax,0x1
c0019749:	eb 05                	jmp    c0019750 <FAT::openDir(char const*, void**)+0x9e>
c001974b:	b8 00 00 00 00       	mov    eax,0x0
c0019750:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019756:	c3                   	ret    
c0019757:	90                   	nop

c0019758 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019758:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001975e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019766:	75 0a                	jne    c0019772 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019768:	b8 04 00 00 00       	mov    eax,0x4
c001976d:	e9 c9 00 00 00       	jmp    c001983b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019772:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001977a:	75 0a                	jne    c0019786 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001977c:	b8 04 00 00 00       	mov    eax,0x4
c0019781:	e9 b5 00 00 00       	jmp    c001983b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019786:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001978e:	75 0a                	jne    c001979a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019790:	b8 04 00 00 00       	mov    eax,0x4
c0019795:	e9 a1 00 00 00       	jmp    c001983b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001979a:	83 ec 08             	sub    esp,0x8
c001979d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00197a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00197ab:	50                   	push   eax
c00197ac:	e8 f6 6e fe ff       	call   c00006a7 <strcpy>
c00197b1:	83 c4 10             	add    esp,0x10
c00197b4:	83 ec 08             	sub    esp,0x8
c00197b7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197be:	50                   	push   eax
c00197bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00197c6:	e8 87 fd ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c00197cb:	83 c4 10             	add    esp,0x10
c00197ce:	83 ec 08             	sub    esp,0x8
c00197d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197d5:	50                   	push   eax
c00197d6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00197dd:	50                   	push   eax
c00197de:	e8 d2 c6 fe ff       	call   c0005eb5 <f_stat>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00197ed:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00197f4:	85 c0                	test   eax,eax
c00197f6:	74 07                	je     c00197ff <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00197f8:	83 f8 04             	cmp    eax,0x4
c00197fb:	74 32                	je     c001982f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00197fd:	eb 37                	jmp    c0019836 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00197ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019803:	0f b6 c0             	movzx  eax,al
c0019806:	83 e0 10             	and    eax,0x10
c0019809:	0f 95 c2             	setne  dl
c001980c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019813:	88 10                	mov    BYTE PTR [eax],dl
c0019815:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019818:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001981c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019823:	89 01                	mov    DWORD PTR [ecx],eax
c0019825:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019828:	b8 00 00 00 00       	mov    eax,0x0
c001982d:	eb 0c                	jmp    c001983b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001982f:	b8 02 00 00 00       	mov    eax,0x2
c0019834:	eb 05                	jmp    c001983b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019836:	b8 01 00 00 00       	mov    eax,0x1
c001983b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019841:	c3                   	ret    

c0019842 <FAT::unlink(char const*)>:
c0019842:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019848:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019850:	75 07                	jne    c0019859 <FAT::unlink(char const*)+0x17>
c0019852:	b8 04 00 00 00       	mov    eax,0x4
c0019857:	eb 5c                	jmp    c00198b5 <FAT::unlink(char const*)+0x73>
c0019859:	83 ec 08             	sub    esp,0x8
c001985c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019863:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019867:	50                   	push   eax
c0019868:	e8 3a 6e fe ff       	call   c00006a7 <strcpy>
c001986d:	83 c4 10             	add    esp,0x10
c0019870:	83 ec 08             	sub    esp,0x8
c0019873:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019877:	50                   	push   eax
c0019878:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001987f:	e8 ce fc ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	83 ec 0c             	sub    esp,0xc
c001988a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001988e:	50                   	push   eax
c001988f:	e8 73 c9 fe ff       	call   c0006207 <f_unlink>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001989e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00198a5:	85 c0                	test   eax,eax
c00198a7:	75 07                	jne    c00198b0 <FAT::unlink(char const*)+0x6e>
c00198a9:	b8 00 00 00 00       	mov    eax,0x0
c00198ae:	eb 05                	jmp    c00198b5 <FAT::unlink(char const*)+0x73>
c00198b0:	b8 01 00 00 00       	mov    eax,0x1
c00198b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198bb:	c3                   	ret    

c00198bc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00198bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00198c2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00198c9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00198d0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00198d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198d8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00198e0:	75 0a                	jne    c00198ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00198e2:	b8 04 00 00 00       	mov    eax,0x4
c00198e7:	e9 1c 01 00 00       	jmp    c0019a08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00198ec:	83 ec 08             	sub    esp,0x8
c00198ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00198f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198fa:	50                   	push   eax
c00198fb:	e8 a7 6d fe ff       	call   c00006a7 <strcpy>
c0019900:	83 c4 10             	add    esp,0x10
c0019903:	83 ec 08             	sub    esp,0x8
c0019906:	8d 44 24 20          	lea    eax,[esp+0x20]
c001990a:	50                   	push   eax
c001990b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019912:	e8 3b fc ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c0019917:	83 c4 10             	add    esp,0x10
c001991a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019922:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001992a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001992f:	83 e0 01             	and    eax,0x1
c0019932:	74 08                	je     c001993c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019934:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001993c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019941:	83 e0 02             	and    eax,0x2
c0019944:	74 08                	je     c001994e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019946:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001994e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019953:	83 e0 04             	and    eax,0x4
c0019956:	74 08                	je     c0019960 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019958:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019965:	83 e0 08             	and    eax,0x8
c0019968:	74 08                	je     c0019972 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001996a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019972:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019977:	83 e0 01             	and    eax,0x1
c001997a:	74 08                	je     c0019984 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001997c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019984:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019989:	83 e0 02             	and    eax,0x2
c001998c:	74 08                	je     c0019996 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001998e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019996:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001999b:	83 e0 04             	and    eax,0x4
c001999e:	74 08                	je     c00199a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00199a0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00199a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199ad:	83 e0 08             	and    eax,0x8
c00199b0:	74 08                	je     c00199ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00199b2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00199ba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00199c1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00199c8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00199d0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00199d8:	83 ec 04             	sub    esp,0x4
c00199db:	52                   	push   edx
c00199dc:	50                   	push   eax
c00199dd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199e1:	50                   	push   eax
c00199e2:	e8 c2 ce fe ff       	call   c00068a9 <f_chmod>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00199f1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00199f8:	85 c0                	test   eax,eax
c00199fa:	75 07                	jne    c0019a03 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00199fc:	b8 00 00 00 00       	mov    eax,0x0
c0019a01:	eb 05                	jmp    c0019a08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019a03:	b8 01 00 00 00       	mov    eax,0x1
c0019a08:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019a0e:	c3                   	ret    
c0019a0f:	90                   	nop

c0019a10 <FAT::rename(char const*, char const*)>:
c0019a10:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019a16:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019a1e:	74 0a                	je     c0019a2a <FAT::rename(char const*, char const*)+0x1a>
c0019a20:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019a28:	75 0a                	jne    c0019a34 <FAT::rename(char const*, char const*)+0x24>
c0019a2a:	b8 04 00 00 00       	mov    eax,0x4
c0019a2f:	e9 98 00 00 00       	jmp    c0019acc <FAT::rename(char const*, char const*)+0xbc>
c0019a34:	83 ec 08             	sub    esp,0x8
c0019a37:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a3e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019a45:	50                   	push   eax
c0019a46:	e8 5c 6c fe ff       	call   c00006a7 <strcpy>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	83 ec 08             	sub    esp,0x8
c0019a51:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019a58:	50                   	push   eax
c0019a59:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a60:	e8 ed fa ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	83 ec 08             	sub    esp,0x8
c0019a6b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019a72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a76:	50                   	push   eax
c0019a77:	e8 2b 6c fe ff       	call   c00006a7 <strcpy>
c0019a7c:	83 c4 10             	add    esp,0x10
c0019a7f:	83 ec 08             	sub    esp,0x8
c0019a82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a86:	50                   	push   eax
c0019a87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a8e:	e8 bf fa ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	83 ec 08             	sub    esp,0x8
c0019a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a9d:	50                   	push   eax
c0019a9e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019aa5:	50                   	push   eax
c0019aa6:	e8 0b cb fe ff       	call   c00065b6 <f_rename>
c0019aab:	83 c4 10             	add    esp,0x10
c0019aae:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ab5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019abc:	85 c0                	test   eax,eax
c0019abe:	75 07                	jne    c0019ac7 <FAT::rename(char const*, char const*)+0xb7>
c0019ac0:	b8 00 00 00 00       	mov    eax,0x0
c0019ac5:	eb 05                	jmp    c0019acc <FAT::rename(char const*, char const*)+0xbc>
c0019ac7:	b8 01 00 00 00       	mov    eax,0x1
c0019acc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ad2:	c3                   	ret    
c0019ad3:	90                   	nop

c0019ad4 <FAT::mkdir(char const*)>:
c0019ad4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ada:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ae2:	75 07                	jne    c0019aeb <FAT::mkdir(char const*)+0x17>
c0019ae4:	b8 04 00 00 00       	mov    eax,0x4
c0019ae9:	eb 5c                	jmp    c0019b47 <FAT::mkdir(char const*)+0x73>
c0019aeb:	83 ec 08             	sub    esp,0x8
c0019aee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019af5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019af9:	50                   	push   eax
c0019afa:	e8 a8 6b fe ff       	call   c00006a7 <strcpy>
c0019aff:	83 c4 10             	add    esp,0x10
c0019b02:	83 ec 08             	sub    esp,0x8
c0019b05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b09:	50                   	push   eax
c0019b0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b11:	e8 3c fa ff ff       	call   c0019552 <FAT::fixFilepath(char*)>
c0019b16:	83 c4 10             	add    esp,0x10
c0019b19:	83 ec 0c             	sub    esp,0xc
c0019b1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b20:	50                   	push   eax
c0019b21:	e8 64 c8 fe ff       	call   c000638a <f_mkdir>
c0019b26:	83 c4 10             	add    esp,0x10
c0019b29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b37:	85 c0                	test   eax,eax
c0019b39:	75 07                	jne    c0019b42 <FAT::mkdir(char const*)+0x6e>
c0019b3b:	b8 00 00 00 00       	mov    eax,0x0
c0019b40:	eb 05                	jmp    c0019b47 <FAT::mkdir(char const*)+0x73>
c0019b42:	b8 01 00 00 00       	mov    eax,0x1
c0019b47:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b4d:	c3                   	ret    

c0019b4e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019b4e:	b8 08 00 00 00       	mov    eax,0x8
c0019b53:	c3                   	ret    

c0019b54 <ISO9660::seek(void*, unsigned long long)>:
c0019b54:	53                   	push   ebx
c0019b55:	b8 04 00 00 00       	mov    eax,0x4
c0019b5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019b66:	85 d2                	test   edx,edx
c0019b68:	74 17                	je     c0019b81 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019b6a:	89 c8                	mov    eax,ecx
c0019b6c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019b6f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019b72:	b8 01 00 00 00       	mov    eax,0x1
c0019b77:	73 08                	jae    c0019b81 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019b79:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019b7c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019b7f:	31 c0                	xor    eax,eax
c0019b81:	5b                   	pop    ebx
c0019b82:	c3                   	ret    
c0019b83:	90                   	nop

c0019b84 <ISO9660::tell(void*, unsigned long long*)>:
c0019b84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b8c:	85 d2                	test   edx,edx
c0019b8e:	74 12                	je     c0019ba2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019b90:	85 c0                	test   eax,eax
c0019b92:	74 0e                	je     c0019ba2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019b94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019b97:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019b9a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019b9d:	89 10                	mov    DWORD PTR [eax],edx
c0019b9f:	31 c0                	xor    eax,eax
c0019ba1:	c3                   	ret    
c0019ba2:	b8 04 00 00 00       	mov    eax,0x4
c0019ba7:	c3                   	ret    

c0019ba8 <ISO9660::getName()>:
c0019ba8:	b8 90 18 02 c0       	mov    eax,0xc0021890
c0019bad:	c3                   	ret    

c0019bae <ISO9660::stat(void*, unsigned long long*)>:
c0019bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bb6:	85 d2                	test   edx,edx
c0019bb8:	74 12                	je     c0019bcc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019bba:	85 c0                	test   eax,eax
c0019bbc:	74 0e                	je     c0019bcc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019bbe:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019bc1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019bc4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019bc7:	89 10                	mov    DWORD PTR [eax],edx
c0019bc9:	31 c0                	xor    eax,eax
c0019bcb:	c3                   	ret    
c0019bcc:	b8 04 00 00 00       	mov    eax,0x4
c0019bd1:	c3                   	ret    

c0019bd2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bd2:	b8 01 00 00 00       	mov    eax,0x1
c0019bd7:	c3                   	ret    

c0019bd8 <ISO9660::unlink(char const*)>:
c0019bd8:	b8 01 00 00 00       	mov    eax,0x1
c0019bdd:	c3                   	ret    

c0019bde <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019bde:	b8 01 00 00 00       	mov    eax,0x1
c0019be3:	c3                   	ret    

c0019be4 <ISO9660::rename(char const*, char const*)>:
c0019be4:	b8 01 00 00 00       	mov    eax,0x1
c0019be9:	c3                   	ret    

c0019bea <ISO9660::mkdir(char const*)>:
c0019bea:	b8 01 00 00 00       	mov    eax,0x1
c0019bef:	c3                   	ret    

c0019bf0 <ISO9660::close(void*)>:
c0019bf0:	83 ec 0c             	sub    esp,0xc
c0019bf3:	b8 04 00 00 00       	mov    eax,0x4
c0019bf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019bfc:	85 d2                	test   edx,edx
c0019bfe:	74 0e                	je     c0019c0e <ISO9660::close(void*)+0x1e>
c0019c00:	83 ec 0c             	sub    esp,0xc
c0019c03:	52                   	push   edx
c0019c04:	e8 a0 35 ff ff       	call   c000d1a9 <free>
c0019c09:	83 c4 10             	add    esp,0x10
c0019c0c:	31 c0                	xor    eax,eax
c0019c0e:	83 c4 0c             	add    esp,0xc
c0019c11:	c3                   	ret    

c0019c12 <ISO9660::closeDir(void*)>:
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	b8 04 00 00 00       	mov    eax,0x4
c0019c1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c1e:	85 d2                	test   edx,edx
c0019c20:	74 0e                	je     c0019c30 <ISO9660::closeDir(void*)+0x1e>
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	52                   	push   edx
c0019c26:	e8 7e 35 ff ff       	call   c000d1a9 <free>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	31 c0                	xor    eax,eax
c0019c30:	83 c4 0c             	add    esp,0xc
c0019c33:	c3                   	ret    

c0019c34 <ISO9660::~ISO9660()>:
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c0019c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c40:	89 10                	mov    DWORD PTR [eax],edx
c0019c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c46:	83 ec 0c             	sub    esp,0xc
c0019c49:	50                   	push   eax
c0019c4a:	e8 27 87 ff ff       	call   c0012376 <Filesystem::~Filesystem()>
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	90                   	nop
c0019c53:	83 c4 0c             	add    esp,0xc
c0019c56:	c3                   	ret    
c0019c57:	90                   	nop

c0019c58 <ISO9660::~ISO9660()>:
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	83 ec 0c             	sub    esp,0xc
c0019c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c62:	e8 cd ff ff ff       	call   c0019c34 <ISO9660::~ISO9660()>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	83 ec 08             	sub    esp,0x8
c0019c6d:	6a 08                	push   0x8
c0019c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c73:	e8 e5 84 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c0019c78:	83 c4 10             	add    esp,0x10
c0019c7b:	83 c4 0c             	add    esp,0xc
c0019c7e:	c3                   	ret    

c0019c7f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019c7f:	55                   	push   ebp
c0019c80:	31 c9                	xor    ecx,ecx
c0019c82:	57                   	push   edi
c0019c83:	56                   	push   esi
c0019c84:	53                   	push   ebx
c0019c85:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019c89:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c8d:	89 eb                	mov    ebx,ebp
c0019c8f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019c93:	39 ce                	cmp    esi,ecx
c0019c95:	7e 17                	jle    c0019cae <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019c97:	31 d2                	xor    edx,edx
c0019c99:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019c9d:	7d 13                	jge    c0019cb2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ca3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019ca6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019ca9:	75 0d                	jne    c0019cb8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019cab:	42                   	inc    edx
c0019cac:	eb eb                	jmp    c0019c99 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019cae:	31 c0                	xor    eax,eax
c0019cb0:	eb 0a                	jmp    c0019cbc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019cb2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019cb6:	eb 04                	jmp    c0019cbc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019cb8:	41                   	inc    ecx
c0019cb9:	43                   	inc    ebx
c0019cba:	eb d7                	jmp    c0019c93 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019cbc:	5b                   	pop    ebx
c0019cbd:	5e                   	pop    esi
c0019cbe:	5f                   	pop    edi
c0019cbf:	5d                   	pop    ebp
c0019cc0:	c3                   	ret    

c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019cc1:	56                   	push   esi
c0019cc2:	53                   	push   ebx
c0019cc3:	52                   	push   edx
c0019cc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019cc8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cd0:	39 0d a0 41 02 c0    	cmp    DWORD PTR ds:0xc00241a0,ecx
c0019cd6:	75 08                	jne    c0019ce0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019cd8:	38 05 e4 26 02 c0    	cmp    BYTE PTR ds:0xc00226e4,al
c0019cde:	74 2b                	je     c0019d0b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	a2 e4 26 02 c0       	mov    ds:0xc00226e4,al
c0019ce8:	68 c0 41 02 c0       	push   0xc00241c0
c0019ced:	0f be c0             	movsx  eax,al
c0019cf0:	6a 01                	push   0x1
c0019cf2:	89 0d a0 41 02 c0    	mov    DWORD PTR ds:0xc00241a0,ecx
c0019cf8:	31 db                	xor    ebx,ebx
c0019cfa:	53                   	push   ebx
c0019cfb:	51                   	push   ecx
c0019cfc:	ff 34 85 3c 3b 02 c0 	push   DWORD PTR [eax*4-0x3ffdc4c4]
c0019d03:	e8 12 b2 ff ff       	call   c0014f1a <LogicalDisk::read(unsigned long long, int, void*)>
c0019d08:	83 c4 20             	add    esp,0x20
c0019d0b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019d13:	c7 44 24 14 c0 41 02 c0 	mov    DWORD PTR [esp+0x14],0xc00241c0
c0019d1b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019d1f:	58                   	pop    eax
c0019d20:	5b                   	pop    ebx
c0019d21:	5e                   	pop    esi
c0019d22:	e9 ab 68 fe ff       	jmp    c00005d2 <memcpy>
c0019d27:	90                   	nop

c0019d28 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019d28:	81 ec 10 08 00 00    	sub    esp,0x810
c0019d2e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019d35:	83 c0 41             	add    eax,0x41
c0019d38:	0f be c0             	movsx  eax,al
c0019d3b:	50                   	push   eax
c0019d3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d40:	50                   	push   eax
c0019d41:	6a 10                	push   0x10
c0019d43:	e8 79 ff ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d48:	83 c4 10             	add    esp,0x10
c0019d4b:	31 c0                	xor    eax,eax
c0019d4d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019d52:	75 1d                	jne    c0019d71 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d54:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019d59:	75 16                	jne    c0019d71 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d5b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019d60:	75 0f                	jne    c0019d71 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d62:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019d67:	75 08                	jne    c0019d71 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d69:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019d6e:	0f 94 c0             	sete   al
c0019d71:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019d77:	c3                   	ret    

c0019d78 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019d78:	55                   	push   ebp
c0019d79:	57                   	push   edi
c0019d7a:	56                   	push   esi
c0019d7b:	53                   	push   ebx
c0019d7c:	81 ec 34 08 00 00    	sub    esp,0x834
c0019d82:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019d89:	55                   	push   ebp
c0019d8a:	68 ab 18 02 c0       	push   0xc00218ab
c0019d8f:	e8 0a 2e ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c0019d94:	83 c4 10             	add    esp,0x10
c0019d97:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019d9f:	0f 84 06 02 00 00    	je     c0019fab <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019da5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019dad:	0f 84 f8 01 00 00    	je     c0019fab <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019db3:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019dba:	b8 01 00 00 00       	mov    eax,0x1
c0019dbf:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019dc3:	0f 85 e7 01 00 00    	jne    c0019fb0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019dc9:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019dcc:	31 d2                	xor    edx,edx
c0019dce:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019dd1:	89 e9                	mov    ecx,ebp
c0019dd3:	89 d3                	mov    ebx,edx
c0019dd5:	01 f1                	add    ecx,esi
c0019dd7:	11 fb                	adc    ebx,edi
c0019dd9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019ddd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019de1:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019de8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019deb:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019dee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019df2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019df6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019dfa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019dfe:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019e02:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019e06:	72 19                	jb     c0019e21 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019e08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e1f:	eb 13                	jmp    c0019e34 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019e21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e29:	29 f0                	sub    eax,esi
c0019e2b:	19 fa                	sbb    edx,edi
c0019e2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019e34:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019e3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e40:	53                   	push   ebx
c0019e41:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019e45:	c1 e0 0b             	shl    eax,0xb
c0019e48:	01 c6                	add    esi,eax
c0019e4a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019e51:	11 d7                	adc    edi,edx
c0019e53:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019e57:	89 fa                	mov    edx,edi
c0019e59:	50                   	push   eax
c0019e5a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019e5e:	50                   	push   eax
c0019e5f:	89 f0                	mov    eax,esi
c0019e61:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019e65:	50                   	push   eax
c0019e66:	e8 56 fe ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019e6b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019e72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e76:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019e7d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019e83:	83 c4 10             	add    esp,0x10
c0019e86:	b8 00 08 00 00       	mov    eax,0x800
c0019e8b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0019e8f:	29 d0                	sub    eax,edx
c0019e91:	39 c1                	cmp    ecx,eax
c0019e93:	83 db 00             	sbb    ebx,0x0
c0019e96:	7d 19                	jge    c0019eb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0019e98:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e9d:	75 16                	jne    c0019eb5 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0019e9f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019ea6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019eac:	e9 f6 00 00 00       	jmp    c0019fa7 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c0019eb1:	89 c5                	mov    ebp,eax
c0019eb3:	eb 03                	jmp    c0019eb8 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c0019eb5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0019eb8:	51                   	push   ecx
c0019eb9:	55                   	push   ebp
c0019eba:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0019ebe:	50                   	push   eax
c0019ebf:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c0019ec6:	e8 07 67 fe ff       	call   c00005d2 <memcpy>
c0019ecb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ecf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ed3:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0019eda:	01 e8                	add    eax,ebp
c0019edc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019ee0:	89 e8                	mov    eax,ebp
c0019ee2:	99                   	cdq    
c0019ee3:	01 ee                	add    esi,ebp
c0019ee5:	11 d7                	adc    edi,edx
c0019ee7:	29 e9                	sub    ecx,ebp
c0019ee9:	19 d3                	sbb    ebx,edx
c0019eeb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019eef:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0019efb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0019efe:	b8 00 00 00 00       	mov    eax,0x0
c0019f03:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0019f07:	7d 3f                	jge    c0019f48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0019f09:	52                   	push   edx
c0019f0a:	89 fa                	mov    edx,edi
c0019f0c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019f13:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019f17:	50                   	push   eax
c0019f18:	89 f0                	mov    eax,esi
c0019f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f1e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019f22:	50                   	push   eax
c0019f23:	e8 99 fd ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f28:	81 c6 00 08 00 00    	add    esi,0x800
c0019f2e:	83 d7 00             	adc    edi,0x0
c0019f31:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0019f39:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0019f41:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0019f46:	eb ab                	jmp    c0019ef3 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0019f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f4c:	0b 04 24             	or     eax,DWORD PTR [esp]
c0019f4f:	74 34                	je     c0019f85 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0019f51:	89 fa                	mov    edx,edi
c0019f53:	50                   	push   eax
c0019f54:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019f5b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019f5f:	50                   	push   eax
c0019f60:	89 f0                	mov    eax,esi
c0019f62:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019f66:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019f6a:	55                   	push   ebp
c0019f6b:	50                   	push   eax
c0019f6c:	e8 50 fd ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f71:	83 c4 0c             	add    esp,0xc
c0019f74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0019f78:	55                   	push   ebp
c0019f79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f7d:	e8 50 66 fe ff       	call   c00005d2 <memcpy>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019f8c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f94:	89 38                	mov    DWORD PTR [eax],edi
c0019f96:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019f9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fa1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0019fa4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0019fa7:	31 c0                	xor    eax,eax
c0019fa9:	eb 05                	jmp    c0019fb0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019fab:	b8 04 00 00 00       	mov    eax,0x4
c0019fb0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0019fb6:	5b                   	pop    ebx
c0019fb7:	5e                   	pop    esi
c0019fb8:	5f                   	pop    edi
c0019fb9:	5d                   	pop    ebp
c0019fba:	c3                   	ret    
c0019fbb:	90                   	nop

c0019fbc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019fbc:	55                   	push   ebp
c0019fbd:	57                   	push   edi
c0019fbe:	56                   	push   esi
c0019fbf:	53                   	push   ebx
c0019fc0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0019fc6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0019fcd:	85 f6                	test   esi,esi
c0019fcf:	0f 84 65 02 00 00    	je     c001a23a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019fd5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0019fdd:	0f 84 57 02 00 00    	je     c001a23a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019fe3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0019fe6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0019fe9:	75 0a                	jne    c0019ff5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0019feb:	b8 07 00 00 00       	mov    eax,0x7
c0019ff0:	e9 4a 02 00 00       	jmp    c001a23f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c0019ff5:	50                   	push   eax
c0019ff6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0019ffa:	50                   	push   eax
c0019ffb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a002:	53                   	push   ebx
c001a003:	8b 06                	mov    eax,DWORD PTR [esi]
c001a005:	c1 e0 0b             	shl    eax,0xb
c001a008:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a00b:	c1 e8 0b             	shr    eax,0xb
c001a00e:	50                   	push   eax
c001a00f:	e8 ad fc ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a014:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a017:	83 c4 10             	add    esp,0x10
c001a01a:	89 c1                	mov    ecx,eax
c001a01c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a01f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a025:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a028:	84 db                	test   bl,bl
c001a02a:	0f 85 90 00 00 00    	jne    c001a0c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a030:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a036:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a03c:	29 c7                	sub    edi,eax
c001a03e:	89 fb                	mov    ebx,edi
c001a040:	c1 fb 1f             	sar    ebx,0x1f
c001a043:	01 f8                	add    eax,edi
c001a045:	11 da                	adc    edx,ebx
c001a047:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a04b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a04f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a052:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a055:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a058:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a05b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a05e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a062:	89 d8                	mov    eax,ebx
c001a064:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a067:	ba 00 00 00 00       	mov    edx,0x0
c001a06c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a070:	b8 00 00 00 00       	mov    eax,0x0
c001a075:	73 0b                	jae    c001a082 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a077:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a07a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a07e:	29 f8                	sub    eax,edi
c001a080:	19 da                	sbb    edx,ebx
c001a082:	89 d3                	mov    ebx,edx
c001a084:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a087:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a08a:	09 c3                	or     ebx,eax
c001a08c:	0f 84 59 ff ff ff    	je     c0019feb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a092:	55                   	push   ebp
c001a093:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a097:	50                   	push   eax
c001a098:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a09f:	53                   	push   ebx
c001a0a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0a2:	c1 e0 0b             	shl    eax,0xb
c001a0a5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a0a9:	c1 e8 0b             	shr    eax,0xb
c001a0ac:	50                   	push   eax
c001a0ad:	e8 0f fc ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0b5:	83 c4 10             	add    esp,0x10
c001a0b8:	25 ff 07 00 00       	and    eax,0x7ff
c001a0bd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a0c0:	57                   	push   edi
c001a0c1:	6a 28                	push   0x28
c001a0c3:	6a 00                	push   0x0
c001a0c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0c9:	50                   	push   eax
c001a0ca:	e8 39 65 fe ff       	call   c0000608 <memset>
c001a0cf:	31 d2                	xor    edx,edx
c001a0d1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0d4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a0da:	89 f8                	mov    eax,edi
c001a0dc:	83 c0 21             	add    eax,0x21
c001a0df:	83 d2 00             	adc    edx,0x0
c001a0e2:	89 c7                	mov    edi,eax
c001a0e4:	89 d5                	mov    ebp,edx
c001a0e6:	83 c4 10             	add    esp,0x10
c001a0e9:	31 c9                	xor    ecx,ecx
c001a0eb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a0f2:	83 f9 28             	cmp    ecx,0x28
c001a0f5:	88 04 24             	mov    BYTE PTR [esp],al
c001a0f8:	0f 94 c2             	sete   dl
c001a0fb:	88 d0                	mov    al,dl
c001a0fd:	ba ff 07 00 00       	mov    edx,0x7ff
c001a102:	39 fa                	cmp    edx,edi
c001a104:	ba 00 00 00 00       	mov    edx,0x0
c001a109:	19 ea                	sbb    edx,ebp
c001a10b:	0f 92 c2             	setb   dl
c001a10e:	09 c2                	or     edx,eax
c001a110:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a114:	0f 94 c0             	sete   al
c001a117:	08 d0                	or     al,dl
c001a119:	75 16                	jne    c001a131 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a11b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a11f:	74 10                	je     c001a131 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a121:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a124:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a128:	41                   	inc    ecx
c001a129:	83 c7 01             	add    edi,0x1
c001a12c:	83 d5 00             	adc    ebp,0x0
c001a12f:	eb ba                	jmp    c001a0eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a131:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a139:	83 ec 0c             	sub    esp,0xc
c001a13c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a140:	57                   	push   edi
c001a141:	e8 df 64 fe ff       	call   c0000625 <strlen>
c001a146:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a14e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a152:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a159:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a15c:	5a                   	pop    edx
c001a15d:	25 ff 07 00 00       	and    eax,0x7ff
c001a162:	01 c8                	add    eax,ecx
c001a164:	59                   	pop    ecx
c001a165:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a16b:	83 e0 02             	and    eax,0x2
c001a16e:	3c 01                	cmp    al,0x1
c001a170:	19 c0                	sbb    eax,eax
c001a172:	83 c0 02             	add    eax,0x2
c001a175:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a179:	57                   	push   edi
c001a17a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a17e:	50                   	push   eax
c001a17f:	e8 23 65 fe ff       	call   c00006a7 <strcpy>
c001a184:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	84 c0                	test   al,al
c001a18d:	75 21                	jne    c001a1b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a18f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a197:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a19f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a1a7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a1ae:	eb 28                	jmp    c001a1d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a1b0:	fe c8                	dec    al
c001a1b2:	75 24                	jne    c001a1d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a1b4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a1bc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a1c4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a1cc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a1d3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a1d8:	0f b6 fb             	movzx  edi,bl
c001a1db:	31 db                	xor    ebx,ebx
c001a1dd:	50                   	push   eax
c001a1de:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a1e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a1e9:	50                   	push   eax
c001a1ea:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a1f1:	e8 dc 63 fe ff       	call   c00005d2 <memcpy>
c001a1f6:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a1fd:	89 f9                	mov    ecx,edi
c001a1ff:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a205:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a208:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a20b:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a20e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	39 c7                	cmp    edi,eax
c001a216:	89 df                	mov    edi,ebx
c001a218:	19 d7                	sbb    edi,edx
c001a21a:	72 10                	jb     c001a22c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a21c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a223:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a22a:	eb 0a                	jmp    c001a236 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a22c:	29 c8                	sub    eax,ecx
c001a22e:	19 da                	sbb    edx,ebx
c001a230:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a233:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a236:	31 c0                	xor    eax,eax
c001a238:	eb 05                	jmp    c001a23f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a23a:	b8 04 00 00 00       	mov    eax,0x4
c001a23f:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a245:	5b                   	pop    ebx
c001a246:	5e                   	pop    esi
c001a247:	5f                   	pop    edi
c001a248:	5d                   	pop    ebp
c001a249:	c3                   	ret    

c001a24a <readRoot(unsigned int*, unsigned int*, char)>:
c001a24a:	81 ec 40 08 00 00    	sub    esp,0x840
c001a250:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a258:	50                   	push   eax
c001a259:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a25d:	50                   	push   eax
c001a25e:	6a 10                	push   0x10
c001a260:	e8 5c fa ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a265:	83 c4 0c             	add    esp,0xc
c001a268:	6a 22                	push   0x22
c001a26a:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a271:	50                   	push   eax
c001a272:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a276:	50                   	push   eax
c001a277:	e8 56 63 fe ff       	call   c00005d2 <memcpy>
c001a27c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a283:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a287:	89 10                	mov    DWORD PTR [eax],edx
c001a289:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a290:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a294:	89 10                	mov    DWORD PTR [eax],edx
c001a296:	b0 01                	mov    al,0x1
c001a298:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a29e:	c3                   	ret    

c001a29f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a29f:	55                   	push   ebp
c001a2a0:	57                   	push   edi
c001a2a1:	56                   	push   esi
c001a2a2:	53                   	push   ebx
c001a2a3:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2a9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a2b0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a2b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2bb:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a2bf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a2c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2c7:	75 03                	jne    c001a2cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a2c9:	83 c3 02             	add    ebx,0x2
c001a2cc:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a2cf:	75 03                	jne    c001a2d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a2d1:	43                   	inc    ebx
c001a2d2:	eb f8                	jmp    c001a2cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a2d4:	51                   	push   ecx
c001a2d5:	68 00 01 00 00       	push   0x100
c001a2da:	6a 00                	push   0x0
c001a2dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a2e0:	50                   	push   eax
c001a2e1:	e8 22 63 fe ff       	call   c0000608 <memset>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	31 d2                	xor    edx,edx
c001a2eb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a2ee:	84 c0                	test   al,al
c001a2f0:	74 21                	je     c001a313 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a2f2:	3c 2f                	cmp    al,0x2f
c001a2f4:	75 0b                	jne    c001a301 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a2f6:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a2fa:	bd 01 00 00 00       	mov    ebp,0x1
c001a2ff:	eb 14                	jmp    c001a315 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a301:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a304:	80 f9 19             	cmp    cl,0x19
c001a307:	77 03                	ja     c001a30c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a309:	83 e8 20             	sub    eax,0x20
c001a30c:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a310:	42                   	inc    edx
c001a311:	eb d8                	jmp    c001a2eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a313:	31 ed                	xor    ebp,ebp
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a31f:	e8 75 2e ff ff       	call   c000d199 <malloc>
c001a324:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a32b:	89 c6                	mov    esi,eax
c001a32d:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a333:	c1 ef 0b             	shr    edi,0xb
c001a336:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a33d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a349:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a34d:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a354:	74 28                	je     c001a37e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a356:	52                   	push   edx
c001a357:	57                   	push   edi
c001a358:	50                   	push   eax
c001a359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a35d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a364:	e8 58 f9 ff ff       	call   c0019cc1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a36d:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a374:	05 00 08 00 00       	add    eax,0x800
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	eb cb                	jmp    c001a349 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a385:	57                   	push   edi
c001a386:	e8 9a 62 fe ff       	call   c0000625 <strlen>
c001a38b:	50                   	push   eax
c001a38c:	57                   	push   edi
c001a38d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a394:	56                   	push   esi
c001a395:	e8 e5 f8 ff ff       	call   c0019c7f <__memmem(unsigned char*, int, unsigned char*, int)>
c001a39a:	83 c4 20             	add    esp,0x20
c001a39d:	85 c0                	test   eax,eax
c001a39f:	75 13                	jne    c001a3b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a3a1:	83 ec 0c             	sub    esp,0xc
c001a3a4:	56                   	push   esi
c001a3a5:	e8 ff 2d ff ff       	call   c000d1a9 <free>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	31 c0                	xor    eax,eax
c001a3af:	e9 b3 00 00 00       	jmp    c001a467 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a3b4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a3b8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a3bc:	c1 e7 08             	shl    edi,0x8
c001a3bf:	c1 e2 10             	shl    edx,0x10
c001a3c2:	09 d7                	or     edi,edx
c001a3c4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a3c8:	09 d7                	or     edi,edx
c001a3ca:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a3ce:	c1 e2 18             	shl    edx,0x18
c001a3d1:	09 d7                	or     edi,edx
c001a3d3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a3d7:	89 d1                	mov    ecx,edx
c001a3d9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a3dd:	c1 e1 08             	shl    ecx,0x8
c001a3e0:	c1 e2 10             	shl    edx,0x10
c001a3e3:	09 ca                	or     edx,ecx
c001a3e5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a3e9:	09 ca                	or     edx,ecx
c001a3eb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a3ef:	c1 e1 18             	shl    ecx,0x18
c001a3f2:	09 ca                	or     edx,ecx
c001a3f4:	89 e9                	mov    ecx,ebp
c001a3f6:	84 c9                	test   cl,cl
c001a3f8:	74 3c                	je     c001a436 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a3fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a3fe:	83 ec 0c             	sub    esp,0xc
c001a401:	56                   	push   esi
c001a402:	e8 a2 2d ff ff       	call   c000d1a9 <free>
c001a407:	83 c4 0c             	add    esp,0xc
c001a40a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a411:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a416:	50                   	push   eax
c001a417:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a41e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a425:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a429:	52                   	push   edx
c001a42a:	57                   	push   edi
c001a42b:	53                   	push   ebx
c001a42c:	e8 6e fe ff ff       	call   c001a29f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a431:	83 c4 20             	add    esp,0x20
c001a434:	eb 31                	jmp    c001a467 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a436:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a439:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a440:	d0 e8                	shr    al,1
c001a442:	89 3b                	mov    DWORD PTR [ebx],edi
c001a444:	83 e0 01             	and    eax,0x1
c001a447:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a44e:	83 ec 0c             	sub    esp,0xc
c001a451:	89 13                	mov    DWORD PTR [ebx],edx
c001a453:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a45a:	89 03                	mov    DWORD PTR [ebx],eax
c001a45c:	56                   	push   esi
c001a45d:	e8 47 2d ff ff       	call   c000d1a9 <free>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	b0 01                	mov    al,0x1
c001a467:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a46d:	5b                   	pop    ebx
c001a46e:	5e                   	pop    esi
c001a46f:	5f                   	pop    edi
c001a470:	5d                   	pop    ebp
c001a471:	c3                   	ret    

c001a472 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a472:	55                   	push   ebp
c001a473:	57                   	push   edi
c001a474:	56                   	push   esi
c001a475:	53                   	push   ebx
c001a476:	83 ec 20             	sub    esp,0x20
c001a479:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a47d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a481:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a485:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a48d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a495:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a49a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a4a0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a4a6:	57                   	push   edi
c001a4a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4ab:	50                   	push   eax
c001a4ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4b0:	50                   	push   eax
c001a4b1:	e8 94 fd ff ff       	call   c001a24a <readRoot(unsigned int*, unsigned int*, char)>
c001a4b6:	5a                   	pop    edx
c001a4b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4bb:	e8 65 61 fe ff       	call   c0000625 <strlen>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	83 f8 03             	cmp    eax,0x3
c001a4c6:	77 17                	ja     c001a4df <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a4c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4cc:	89 03                	mov    DWORD PTR [ebx],eax
c001a4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4d2:	89 06                	mov    DWORD PTR [esi],eax
c001a4d4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a4db:	b0 01                	mov    al,0x1
c001a4dd:	eb 19                	jmp    c001a4f8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a4df:	50                   	push   eax
c001a4e0:	55                   	push   ebp
c001a4e1:	57                   	push   edi
c001a4e2:	56                   	push   esi
c001a4e3:	53                   	push   ebx
c001a4e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4f0:	e8 aa fd ff ff       	call   c001a29f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a4f5:	83 c4 20             	add    esp,0x20
c001a4f8:	83 c4 1c             	add    esp,0x1c
c001a4fb:	5b                   	pop    ebx
c001a4fc:	5e                   	pop    esi
c001a4fd:	5f                   	pop    edi
c001a4fe:	5d                   	pop    ebp
c001a4ff:	c3                   	ret    

c001a500 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a500:	57                   	push   edi
c001a501:	56                   	push   esi
c001a502:	53                   	push   ebx
c001a503:	83 ec 10             	sub    esp,0x10
c001a506:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a50a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a50e:	85 ff                	test   edi,edi
c001a510:	74 7b                	je     c001a58d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a512:	85 f6                	test   esi,esi
c001a514:	74 77                	je     c001a58d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a516:	83 ec 0c             	sub    esp,0xc
c001a519:	6a 1c                	push   0x1c
c001a51b:	e8 79 2c ff ff       	call   c000d199 <malloc>
c001a520:	89 07                	mov    DWORD PTR [edi],eax
c001a522:	89 c3                	mov    ebx,eax
c001a524:	58                   	pop    eax
c001a525:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a529:	50                   	push   eax
c001a52a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a52d:	50                   	push   eax
c001a52e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a532:	50                   	push   eax
c001a533:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a537:	50                   	push   eax
c001a538:	56                   	push   esi
c001a539:	e8 34 ff ff ff       	call   c001a472 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a53e:	83 c4 20             	add    esp,0x20
c001a541:	84 c0                	test   al,al
c001a543:	74 07                	je     c001a54c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a545:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a54a:	74 0b                	je     c001a557 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a54c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a550:	b8 01 00 00 00       	mov    eax,0x1
c001a555:	eb 3b                	jmp    c001a592 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a55f:	89 03                	mov    DWORD PTR [ebx],eax
c001a561:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a56c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a573:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a57a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a57d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a584:	8a 06                	mov    al,BYTE PTR [esi]
c001a586:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a589:	31 c0                	xor    eax,eax
c001a58b:	eb 05                	jmp    c001a592 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a58d:	b8 04 00 00 00       	mov    eax,0x4
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	5b                   	pop    ebx
c001a596:	5e                   	pop    esi
c001a597:	5f                   	pop    edi
c001a598:	c3                   	ret    
c001a599:	90                   	nop

c001a59a <ISO9660::exists(char const*)>:
c001a59a:	83 ec 28             	sub    esp,0x28
c001a59d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5a5:	52                   	push   edx
c001a5a6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a5a9:	52                   	push   edx
c001a5aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a5ae:	52                   	push   edx
c001a5af:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a5b3:	52                   	push   edx
c001a5b4:	50                   	push   eax
c001a5b5:	e8 b8 fe ff ff       	call   c001a472 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a5ba:	83 c4 3c             	add    esp,0x3c
c001a5bd:	c3                   	ret    

c001a5be <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a5be:	56                   	push   esi
c001a5bf:	53                   	push   ebx
c001a5c0:	83 ec 14             	sub    esp,0x14
c001a5c3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a5c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a5cb:	85 db                	test   ebx,ebx
c001a5cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a5d1:	0f 94 c2             	sete   dl
c001a5d4:	85 f6                	test   esi,esi
c001a5d6:	0f 94 c0             	sete   al
c001a5d9:	08 c2                	or     dl,al
c001a5db:	75 68                	jne    c001a645 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a5dd:	85 c9                	test   ecx,ecx
c001a5df:	74 64                	je     c001a645 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a5e1:	83 ec 0c             	sub    esp,0xc
c001a5e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a5f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a5f8:	50                   	push   eax
c001a5f9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a5fc:	50                   	push   eax
c001a5fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a601:	50                   	push   eax
c001a602:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a606:	50                   	push   eax
c001a607:	51                   	push   ecx
c001a608:	e8 65 fe ff ff       	call   c001a472 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a60d:	83 c4 20             	add    esp,0x20
c001a610:	ba 01 00 00 00       	mov    edx,0x1
c001a615:	84 c0                	test   al,al
c001a617:	74 31                	je     c001a64a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a61d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a624:	89 03                	mov    DWORD PTR [ebx],eax
c001a626:	ba 00 00 00 00       	mov    edx,0x0
c001a62b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a62f:	85 c0                	test   eax,eax
c001a631:	0f 95 06             	setne  BYTE PTR [esi]
c001a634:	74 14                	je     c001a64a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a63c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a643:	eb 05                	jmp    c001a64a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a645:	ba 04 00 00 00       	mov    edx,0x4
c001a64a:	83 c4 14             	add    esp,0x14
c001a64d:	89 d0                	mov    eax,edx
c001a64f:	5b                   	pop    ebx
c001a650:	5e                   	pop    esi
c001a651:	c3                   	ret    

c001a652 <ISO9660::openDir(char const*, void**)>:
c001a652:	57                   	push   edi
c001a653:	56                   	push   esi
c001a654:	53                   	push   ebx
c001a655:	83 ec 10             	sub    esp,0x10
c001a658:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a65c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a660:	85 ff                	test   edi,edi
c001a662:	0f 84 95 00 00 00    	je     c001a6fd <ISO9660::openDir(char const*, void**)+0xab>
c001a668:	85 f6                	test   esi,esi
c001a66a:	0f 84 8d 00 00 00    	je     c001a6fd <ISO9660::openDir(char const*, void**)+0xab>
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	6a 1c                	push   0x1c
c001a675:	e8 1f 2b ff ff       	call   c000d199 <malloc>
c001a67a:	89 07                	mov    DWORD PTR [edi],eax
c001a67c:	89 c3                	mov    ebx,eax
c001a67e:	59                   	pop    ecx
c001a67f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a683:	50                   	push   eax
c001a684:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a687:	50                   	push   eax
c001a688:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a68c:	50                   	push   eax
c001a68d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a691:	50                   	push   eax
c001a692:	56                   	push   esi
c001a693:	e8 da fd ff ff       	call   c001a472 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a698:	83 c4 20             	add    esp,0x20
c001a69b:	84 c0                	test   al,al
c001a69d:	74 07                	je     c001a6a6 <ISO9660::openDir(char const*, void**)+0x54>
c001a69f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6a4:	75 21                	jne    c001a6c7 <ISO9660::openDir(char const*, void**)+0x75>
c001a6a6:	0f b6 c0             	movzx  eax,al
c001a6a9:	52                   	push   edx
c001a6aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6ae:	50                   	push   eax
c001a6af:	68 be 18 02 c0       	push   0xc00218be
c001a6b4:	e8 e5 24 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001a6b9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	b8 01 00 00 00       	mov    eax,0x1
c001a6c5:	eb 3b                	jmp    c001a702 <ISO9660::openDir(char const*, void**)+0xb0>
c001a6c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6cb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a6cf:	89 03                	mov    DWORD PTR [ebx],eax
c001a6d1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a6d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a6e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6ea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a6ed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a6f4:	8a 06                	mov    al,BYTE PTR [esi]
c001a6f6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a6f9:	31 c0                	xor    eax,eax
c001a6fb:	eb 05                	jmp    c001a702 <ISO9660::openDir(char const*, void**)+0xb0>
c001a6fd:	b8 04 00 00 00       	mov    eax,0x4
c001a702:	83 c4 10             	add    esp,0x10
c001a705:	5b                   	pop    ebx
c001a706:	5e                   	pop    esi
c001a707:	5f                   	pop    edi
c001a708:	c3                   	ret    
c001a709:	90                   	nop

c001a70a <ISO9660::ISO9660()>:
c001a70a:	83 ec 0c             	sub    esp,0xc
c001a70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a711:	83 ec 0c             	sub    esp,0xc
c001a714:	50                   	push   eax
c001a715:	e8 38 7c ff ff       	call   c0012352 <Filesystem::Filesystem()>
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c001a722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a726:	89 10                	mov    DWORD PTR [eax],edx
c001a728:	90                   	nop
c001a729:	83 c4 0c             	add    esp,0xc
c001a72c:	c3                   	ret    
c001a72d:	90                   	nop

c001a72e <SoundChannel::~SoundChannel()>:
c001a72e:	83 ec 0c             	sub    esp,0xc
c001a731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a735:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a738:	83 ec 0c             	sub    esp,0xc
c001a73b:	50                   	push   eax
c001a73c:	e8 68 2a ff ff       	call   c000d1a9 <free>
c001a741:	83 c4 10             	add    esp,0x10
c001a744:	90                   	nop
c001a745:	83 c4 0c             	add    esp,0xc
c001a748:	c3                   	ret    
c001a749:	90                   	nop

c001a74a <SoundChannel::setSpeed(float)>:
c001a74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a74e:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a752:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a755:	c3                   	ret    

c001a756 <SoundChannel::getSpeed()>:
c001a756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75a:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a75d:	c3                   	ret    

c001a75e <SoundChannel::setVolume(int)>:
c001a75e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a762:	83 f8 64             	cmp    eax,0x64
c001a765:	7e 05                	jle    c001a76c <SoundChannel::setVolume(int)+0xe>
c001a767:	b8 64 00 00 00       	mov    eax,0x64
c001a76c:	85 c0                	test   eax,eax
c001a76e:	79 02                	jns    c001a772 <SoundChannel::setVolume(int)+0x14>
c001a770:	31 c0                	xor    eax,eax
c001a772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a776:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a779:	c3                   	ret    

c001a77a <SoundChannel::getVolume()>:
c001a77a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a781:	c3                   	ret    

c001a782 <SoundChannel::pause()>:
c001a782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a786:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a78a:	c3                   	ret    
c001a78b:	90                   	nop

c001a78c <SoundChannel::SoundChannel(int, int, int, int)>:
c001a78c:	83 ec 1c             	sub    esp,0x1c
c001a78f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a793:	e8 ea ff ff ff       	call   c001a782 <SoundChannel::pause()>
c001a798:	83 c4 04             	add    esp,0x4
c001a79b:	6a 50                	push   0x50
c001a79d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7a1:	e8 b8 ff ff ff       	call   c001a75e <SoundChannel::setVolume(int)>
c001a7a6:	83 c4 08             	add    esp,0x8
c001a7a9:	d9 e8                	fld1   
c001a7ab:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a7af:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a7b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7b6:	e8 8f ff ff ff       	call   c001a74a <SoundChannel::setSpeed(float)>
c001a7bb:	83 c4 08             	add    esp,0x8
c001a7be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a7c6:	89 10                	mov    DWORD PTR [eax],edx
c001a7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a7d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a7db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a7de:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a7e3:	75 23                	jne    c001a808 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a7e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7e9:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a7f2:	0f af c2             	imul   eax,edx
c001a7f5:	85 c0                	test   eax,eax
c001a7f7:	79 03                	jns    c001a7fc <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a7f9:	83 c0 03             	add    eax,0x3
c001a7fc:	c1 f8 02             	sar    eax,0x2
c001a7ff:	05 a0 0f 00 00       	add    eax,0xfa0
c001a804:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a810:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a817:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a822:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a82d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a830:	c1 e0 02             	shl    eax,0x2
c001a833:	83 ec 0c             	sub    esp,0xc
c001a836:	50                   	push   eax
c001a837:	e8 5d 29 ff ff       	call   c000d199 <malloc>
c001a83c:	83 c4 10             	add    esp,0x10
c001a83f:	89 c2                	mov    edx,eax
c001a841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a845:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a848:	83 ec 04             	sub    esp,0x4
c001a84b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a84f:	50                   	push   eax
c001a850:	6a 01                	push   0x1
c001a852:	6a 04                	push   0x4
c001a854:	e8 f2 df fe ff       	call   c000884b <src_new>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	89 c2                	mov    edx,eax
c001a85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a862:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a869:	85 c0                	test   eax,eax
c001a86b:	74 10                	je     c001a87d <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a86d:	83 ec 0c             	sub    esp,0xc
c001a870:	68 40 19 02 c0       	push   0xc0021940
c001a875:	e8 42 24 ff ff       	call   c000ccbc <panic(char const*)>
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	90                   	nop
c001a87e:	83 c4 1c             	add    esp,0x1c
c001a881:	c3                   	ret    

c001a882 <SoundChannel::play()>:
c001a882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a886:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001a88a:	c3                   	ret    
c001a88b:	90                   	nop

c001a88c <SoundChannel::paused()>:
c001a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a890:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001a893:	c3                   	ret    

c001a894 <SoundChannel::getSampleRate()>:
c001a894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a898:	8b 00                	mov    eax,DWORD PTR [eax]
c001a89a:	c3                   	ret    
c001a89b:	90                   	nop

c001a89c <SoundChannel::getBits()>:
c001a89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a8a3:	c3                   	ret    

c001a8a4 <SoundChannel::getBufferUsed()>:
c001a8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a8ab:	c3                   	ret    

c001a8ac <SoundChannel::getBufferSize()>:
c001a8ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8b3:	c3                   	ret    

c001a8b4 <SoundChannel::unbuffer(float*, int, int)>:
c001a8b4:	53                   	push   ebx
c001a8b5:	83 ec 40             	sub    esp,0x40
c001a8b8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001a8bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a8c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a8c7:	db 03                	fild   DWORD PTR [ebx]
c001a8c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8cd:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001a8d1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a8d4:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001a8d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8db:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001a8df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a8e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8f3:	50                   	push   eax
c001a8f4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001a8f7:	e8 09 dc fe ff       	call   c0008505 <src_process>
c001a8fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a900:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001a903:	83 c4 0c             	add    esp,0xc
c001a906:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a909:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001a90c:	29 d0                	sub    eax,edx
c001a90e:	c1 e0 02             	shl    eax,0x2
c001a911:	50                   	push   eax
c001a912:	8d 04 91             	lea    eax,[ecx+edx*4]
c001a915:	50                   	push   eax
c001a916:	51                   	push   ecx
c001a917:	e8 7e 5c fe ff       	call   c000059a <memmove>
c001a91c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a920:	83 c4 48             	add    esp,0x48
c001a923:	5b                   	pop    ebx
c001a924:	c3                   	ret    
c001a925:	90                   	nop

c001a926 <SoundChannel::buffer8(unsigned char*, int)>:
c001a926:	53                   	push   ebx
c001a927:	31 c0                	xor    eax,eax
c001a929:	83 ec 08             	sub    esp,0x8
c001a92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a930:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001a933:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001a936:	74 35                	je     c001a96d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a938:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a93c:	7d 2f                	jge    c001a96d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a93e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a942:	d9 05 5c 19 02 c0    	fld    DWORD PTR ds:0xc002195c
c001a948:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001a94c:	40                   	inc    eax
c001a94d:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001a952:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001a955:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001a959:	8d 59 01             	lea    ebx,[ecx+0x1]
c001a95c:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001a95f:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001a962:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001a965:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a968:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001a96b:	eb c9                	jmp    c001a936 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001a96d:	83 c4 08             	add    esp,0x8
c001a970:	5b                   	pop    ebx
c001a971:	c3                   	ret    

c001a972 <SoundDevice::SoundDevice(char const*)>:
c001a972:	83 ec 1c             	sub    esp,0x1c
c001a975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a979:	83 ec 08             	sub    esp,0x8
c001a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a980:	50                   	push   eax
c001a981:	e8 c2 8c ff ff       	call   c0013648 <Device::Device(char const*)>
c001a986:	83 c4 10             	add    esp,0x10
c001a989:	ba 68 19 02 c0       	mov    edx,0xc0021968
c001a98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a992:	89 10                	mov    DWORD PTR [eax],edx
c001a994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a998:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a9b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9b8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a9bd:	7f 19                	jg     c001a9d8 <SoundDevice::SoundDevice(char const*)+0x66>
c001a9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9c7:	83 c2 54             	add    edx,0x54
c001a9ca:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001a9d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9d6:	eb e0                	jmp    c001a9b8 <SoundDevice::SoundDevice(char const*)+0x46>
c001a9d8:	90                   	nop
c001a9d9:	83 c4 1c             	add    esp,0x1c
c001a9dc:	c3                   	ret    
c001a9dd:	90                   	nop

c001a9de <SoundDevice::~SoundDevice()>:
c001a9de:	53                   	push   ebx
c001a9df:	83 ec 18             	sub    esp,0x18
c001a9e2:	ba 68 19 02 c0       	mov    edx,0xc0021968
c001a9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9eb:	89 10                	mov    DWORD PTR [eax],edx
c001a9ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9f5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a9fa:	7f 46                	jg     c001aa42 <SoundDevice::~SoundDevice()+0x64>
c001a9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa04:	83 c2 54             	add    edx,0x54
c001aa07:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001aa0b:	85 c0                	test   eax,eax
c001aa0d:	74 2d                	je     c001aa3c <SoundDevice::~SoundDevice()+0x5e>
c001aa0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa17:	83 c2 54             	add    edx,0x54
c001aa1a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001aa1e:	85 db                	test   ebx,ebx
c001aa20:	74 1a                	je     c001aa3c <SoundDevice::~SoundDevice()+0x5e>
c001aa22:	83 ec 0c             	sub    esp,0xc
c001aa25:	53                   	push   ebx
c001aa26:	e8 03 fd ff ff       	call   c001a72e <SoundChannel::~SoundChannel()>
c001aa2b:	83 c4 10             	add    esp,0x10
c001aa2e:	83 ec 08             	sub    esp,0x8
c001aa31:	6a 2c                	push   0x2c
c001aa33:	53                   	push   ebx
c001aa34:	e8 24 77 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa40:	eb b3                	jmp    c001a9f5 <SoundDevice::~SoundDevice()+0x17>
c001aa42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa46:	83 ec 0c             	sub    esp,0xc
c001aa49:	50                   	push   eax
c001aa4a:	e8 ab 88 ff ff       	call   c00132fa <Device::~Device()>
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	90                   	nop
c001aa53:	83 c4 18             	add    esp,0x18
c001aa56:	5b                   	pop    ebx
c001aa57:	c3                   	ret    

c001aa58 <SoundDevice::~SoundDevice()>:
c001aa58:	83 ec 0c             	sub    esp,0xc
c001aa5b:	83 ec 0c             	sub    esp,0xc
c001aa5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa62:	e8 77 ff ff ff       	call   c001a9de <SoundDevice::~SoundDevice()>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	83 ec 08             	sub    esp,0x8
c001aa6d:	68 e4 01 00 00       	push   0x1e4
c001aa72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa76:	e8 e2 76 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	83 c4 0c             	add    esp,0xc
c001aa81:	c3                   	ret    

c001aa82 <SoundDevice::getFreeChannelNum()>:
c001aa82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa86:	31 c0                	xor    eax,eax
c001aa88:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001aa90:	74 09                	je     c001aa9b <SoundDevice::getFreeChannelNum()+0x19>
c001aa92:	40                   	inc    eax
c001aa93:	83 f8 20             	cmp    eax,0x20
c001aa96:	75 f0                	jne    c001aa88 <SoundDevice::getFreeChannelNum()+0x6>
c001aa98:	83 c8 ff             	or     eax,0xffffffff
c001aa9b:	c3                   	ret    

c001aa9c <SoundDevice::addChannel(SoundChannel*)>:
c001aa9c:	56                   	push   esi
c001aa9d:	53                   	push   ebx
c001aa9e:	51                   	push   ecx
c001aa9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaa3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aaa7:	53                   	push   ebx
c001aaa8:	e8 d5 ff ff ff       	call   c001aa82 <SoundDevice::getFreeChannelNum()>
c001aaad:	5a                   	pop    edx
c001aaae:	83 f8 ff             	cmp    eax,0xffffffff
c001aab1:	74 51                	je     c001ab04 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aab3:	85 f6                	test   esi,esi
c001aab5:	74 4d                	je     c001ab04 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aab7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001aabe:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001aac5:	75 30                	jne    c001aaf7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001aac7:	83 ec 0c             	sub    esp,0xc
c001aaca:	56                   	push   esi
c001aacb:	e8 c4 fd ff ff       	call   c001a894 <SoundChannel::getSampleRate()>
c001aad0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001aad6:	89 34 24             	mov    DWORD PTR [esp],esi
c001aad9:	e8 be fd ff ff       	call   c001a89c <SoundChannel::getBits()>
c001aade:	83 c4 0c             	add    esp,0xc
c001aae1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001aae7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aae9:	50                   	push   eax
c001aaea:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001aaf0:	53                   	push   ebx
c001aaf1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001aafd:	b8 01 00 00 00       	mov    eax,0x1
c001ab02:	eb 03                	jmp    c001ab07 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ab04:	83 c8 ff             	or     eax,0xffffffff
c001ab07:	5a                   	pop    edx
c001ab08:	5b                   	pop    ebx
c001ab09:	5e                   	pop    esi
c001ab0a:	c3                   	ret    
c001ab0b:	90                   	nop

c001ab0c <SoundDevice::removeChannel(int)>:
c001ab0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab14:	83 fa 1f             	cmp    edx,0x1f
c001ab17:	77 23                	ja     c001ab3c <SoundDevice::removeChannel(int)+0x30>
c001ab19:	8d 14 90             	lea    edx,[eax+edx*4]
c001ab1c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ab23:	74 17                	je     c001ab3c <SoundDevice::removeChannel(int)+0x30>
c001ab25:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ab2f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ab35:	75 05                	jne    c001ab3c <SoundDevice::removeChannel(int)+0x30>
c001ab37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab39:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop

c001ab3e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ab3e:	56                   	push   esi
c001ab3f:	53                   	push   ebx
c001ab40:	31 db                	xor    ebx,ebx
c001ab42:	83 ec 14             	sub    esp,0x14
c001ab45:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ab49:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ab4d:	7d 55                	jge    c001aba4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ab4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab53:	d9 e8                	fld1   
c001ab55:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ab58:	d8 0d 98 19 02 c0    	fmul   DWORD PTR ds:0xc0021998
c001ab5e:	d8 0d 9c 19 02 c0    	fmul   DWORD PTR ds:0xc002199c
c001ab64:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ab68:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ab6c:	d8 15 a0 19 02 c0    	fcom   DWORD PTR ds:0xc00219a0
c001ab72:	df e0                	fnstsw ax
c001ab74:	9e                   	sahf   
c001ab75:	72 08                	jb     c001ab7f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ab77:	dd d8                	fstp   st(0)
c001ab79:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ab7d:	eb 22                	jmp    c001aba1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ab7f:	d9 ee                	fldz   
c001ab81:	d8 d9                	fcomp  st(1)
c001ab83:	df e0                	fnstsw ax
c001ab85:	9e                   	sahf   
c001ab86:	72 08                	jb     c001ab90 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ab88:	dd d8                	fstp   st(0)
c001ab8a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ab8e:	eb 11                	jmp    c001aba1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ab90:	83 ec 10             	sub    esp,0x10
c001ab93:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ab96:	e8 11 36 00 00       	call   c001e1ac <lrintf>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001aba1:	43                   	inc    ebx
c001aba2:	eb a5                	jmp    c001ab49 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001aba4:	83 c4 14             	add    esp,0x14
c001aba7:	5b                   	pop    ebx
c001aba8:	5e                   	pop    esi
c001aba9:	c3                   	ret    

c001abaa <SoundDevice::getAudio(int, float*, float*)>:
c001abaa:	55                   	push   ebp
c001abab:	57                   	push   edi
c001abac:	56                   	push   esi
c001abad:	53                   	push   ebx
c001abae:	31 db                	xor    ebx,ebx
c001abb0:	83 ec 20             	sub    esp,0x20
c001abb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001abbb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001abbf:	c1 e0 02             	shl    eax,0x2
c001abc2:	50                   	push   eax
c001abc3:	6a 00                	push   0x0
c001abc5:	55                   	push   ebp
c001abc6:	e8 3d 5a fe ff       	call   c0000608 <memset>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001abd2:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001abd9:	85 c0                	test   eax,eax
c001abdb:	0f 84 94 00 00 00    	je     c001ac75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001abe1:	83 ec 0c             	sub    esp,0xc
c001abe4:	50                   	push   eax
c001abe5:	e8 a2 fc ff ff       	call   c001a88c <SoundChannel::paused()>
c001abea:	83 c4 10             	add    esp,0x10
c001abed:	84 c0                	test   al,al
c001abef:	0f 85 80 00 00 00    	jne    c001ac75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001abf5:	83 ec 0c             	sub    esp,0xc
c001abf8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001abff:	e8 76 fb ff ff       	call   c001a77a <SoundChannel::getVolume()>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	85 c0                	test   eax,eax
c001ac09:	74 6a                	je     c001ac75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ac0b:	83 ec 0c             	sub    esp,0xc
c001ac0e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ac15:	e8 60 fb ff ff       	call   c001a77a <SoundChannel::getVolume()>
c001ac1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac1e:	d9 05 a4 19 02 c0    	fld    DWORD PTR ds:0xc00219a4
c001ac24:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ac28:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ac2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ac30:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001ac36:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001ac3a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ac41:	e8 6e fc ff ff       	call   c001a8b4 <SoundChannel::unbuffer(float*, int, int)>
c001ac46:	83 c4 20             	add    esp,0x20
c001ac49:	31 d2                	xor    edx,edx
c001ac4b:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ac4f:	39 c2                	cmp    edx,eax
c001ac51:	7d 1a                	jge    c001ac6d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ac53:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ac57:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001ac5a:	d8 c9                	fmul   st,st(1)
c001ac5c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001ac62:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ac66:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ac6a:	42                   	inc    edx
c001ac6b:	eb e2                	jmp    c001ac4f <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ac6d:	dd d8                	fstp   st(0)
c001ac6f:	39 c7                	cmp    edi,eax
c001ac71:	7e 02                	jle    c001ac75 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ac73:	89 c7                	mov    edi,eax
c001ac75:	43                   	inc    ebx
c001ac76:	83 fb 20             	cmp    ebx,0x20
c001ac79:	0f 85 53 ff ff ff    	jne    c001abd2 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001ac7f:	83 c4 1c             	add    esp,0x1c
c001ac82:	89 f8                	mov    eax,edi
c001ac84:	5b                   	pop    ebx
c001ac85:	5e                   	pop    esi
c001ac86:	5f                   	pop    edi
c001ac87:	5d                   	pop    ebp
c001ac88:	c3                   	ret    
c001ac89:	90                   	nop

c001ac8a <PCI::open(int, int, void*)>:
c001ac8a:	83 ec 18             	sub    esp,0x18
c001ac8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac91:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac93:	50                   	push   eax
c001ac94:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ac97:	31 c0                	xor    eax,eax
c001ac99:	83 c4 1c             	add    esp,0x1c
c001ac9c:	c3                   	ret    
c001ac9d:	90                   	nop

c001ac9e <PCI::close(int, int, void*)>:
c001ac9e:	31 c0                	xor    eax,eax
c001aca0:	c3                   	ret    
c001aca1:	90                   	nop

c001aca2 <PCI::PCI()>:
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca9:	83 ec 08             	sub    esp,0x8
c001acac:	68 a8 19 02 c0       	push   0xc00219a8
c001acb1:	50                   	push   eax
c001acb2:	e8 1d 80 ff ff       	call   c0012cd4 <Bus::Bus(char const*)>
c001acb7:	83 c4 10             	add    esp,0x10
c001acba:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c001acbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc3:	89 10                	mov    DWORD PTR [eax],edx
c001acc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001accf:	0f b6 d0             	movzx  edx,al
c001acd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001acdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ace7:	0f b6 d0             	movzx  edx,al
c001acea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acee:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001acf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acfd:	8d 50 01             	lea    edx,[eax+0x1]
c001ad00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad04:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ad0a:	0f b6 d0             	movzx  edx,al
c001ad0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad11:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad15:	83 c9 c0             	or     ecx,0xffffffc0
c001ad18:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad1c:	90                   	nop
c001ad1d:	83 c4 0c             	add    esp,0xc
c001ad20:	c3                   	ret    
c001ad21:	90                   	nop

c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ad2b:	89 ca                	mov    edx,ecx
c001ad2d:	c1 e0 10             	shl    eax,0x10
c001ad30:	81 e2 fc 00 00 00    	and    edx,0xfc
c001ad36:	09 d0                	or     eax,edx
c001ad38:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001ad3d:	c1 e2 08             	shl    edx,0x8
c001ad40:	09 d0                	or     eax,edx
c001ad42:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001ad47:	c1 e2 0b             	shl    edx,0xb
c001ad4a:	09 d0                	or     eax,edx
c001ad4c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad51:	0d 00 00 00 80       	or     eax,0x80000000
c001ad56:	ef                   	out    dx,eax
c001ad57:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad5c:	ed                   	in     eax,dx
c001ad5d:	83 e1 02             	and    ecx,0x2
c001ad60:	0f b6 c9             	movzx  ecx,cl
c001ad63:	c1 e1 03             	shl    ecx,0x3
c001ad66:	d3 e8                	shr    eax,cl
c001ad68:	c3                   	ret    
c001ad69:	90                   	nop

c001ad6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ad6a:	6a 00                	push   0x0
c001ad6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad71:	50                   	push   eax
c001ad72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad77:	50                   	push   eax
c001ad78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad7d:	50                   	push   eax
c001ad7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad82:	e8 9b ff ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad87:	83 c4 14             	add    esp,0x14
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ad8c:	6a 0e                	push   0xe
c001ad8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad93:	50                   	push   eax
c001ad94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad99:	50                   	push   eax
c001ad9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad9f:	50                   	push   eax
c001ada0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ada4:	e8 79 ff ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ada9:	83 c4 14             	add    esp,0x14
c001adac:	0f b6 c0             	movzx  eax,al
c001adaf:	c3                   	ret    

c001adb0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001adb0:	55                   	push   ebp
c001adb1:	57                   	push   edi
c001adb2:	56                   	push   esi
c001adb3:	53                   	push   ebx
c001adb4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001adb9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001adbe:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001adc3:	6a 0a                	push   0xa
c001adc5:	56                   	push   esi
c001adc6:	55                   	push   ebp
c001adc7:	57                   	push   edi
c001adc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001adcc:	e8 51 ff ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001add1:	6a 0a                	push   0xa
c001add3:	89 c3                	mov    ebx,eax
c001add5:	56                   	push   esi
c001add6:	0f b6 db             	movzx  ebx,bl
c001add9:	55                   	push   ebp
c001adda:	57                   	push   edi
c001addb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001addf:	e8 3e ff ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ade4:	83 c4 28             	add    esp,0x28
c001ade7:	25 00 ff 00 00       	and    eax,0xff00
c001adec:	09 d8                	or     eax,ebx
c001adee:	5b                   	pop    ebx
c001adef:	5e                   	pop    esi
c001adf0:	5f                   	pop    edi
c001adf1:	5d                   	pop    ebp
c001adf2:	c3                   	ret    
c001adf3:	90                   	nop

c001adf4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001adf4:	6a 08                	push   0x8
c001adf6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001adfb:	50                   	push   eax
c001adfc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae01:	50                   	push   eax
c001ae02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae07:	50                   	push   eax
c001ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae0c:	e8 11 ff ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae11:	83 c4 14             	add    esp,0x14
c001ae14:	0f b6 c4             	movzx  eax,ah
c001ae17:	c3                   	ret    

c001ae18 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ae18:	6a 08                	push   0x8
c001ae1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae1f:	50                   	push   eax
c001ae20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae25:	50                   	push   eax
c001ae26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae2b:	50                   	push   eax
c001ae2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae30:	e8 ed fe ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae35:	83 c4 14             	add    esp,0x14
c001ae38:	c3                   	ret    
c001ae39:	90                   	nop

c001ae3a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ae3a:	6a 3c                	push   0x3c
c001ae3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae41:	50                   	push   eax
c001ae42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae47:	50                   	push   eax
c001ae48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae4d:	50                   	push   eax
c001ae4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae52:	e8 cb fe ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae57:	83 c4 14             	add    esp,0x14
c001ae5a:	c3                   	ret    
c001ae5b:	90                   	nop

c001ae5c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ae5c:	6a 18                	push   0x18
c001ae5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae63:	50                   	push   eax
c001ae64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae69:	50                   	push   eax
c001ae6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae6f:	50                   	push   eax
c001ae70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae74:	e8 a9 fe ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae79:	83 c4 14             	add    esp,0x14
c001ae7c:	0f b6 c4             	movzx  eax,ah
c001ae7f:	c3                   	ret    

c001ae80 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae80:	55                   	push   ebp
c001ae81:	57                   	push   edi
c001ae82:	56                   	push   esi
c001ae83:	53                   	push   ebx
c001ae84:	50                   	push   eax
c001ae85:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001ae89:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001ae8e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ae93:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001ae98:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ae9f:	8d 43 12             	lea    eax,[ebx+0x12]
c001aea2:	83 c3 10             	add    ebx,0x10
c001aea5:	0f b6 c0             	movzx  eax,al
c001aea8:	0f b6 db             	movzx  ebx,bl
c001aeab:	50                   	push   eax
c001aeac:	51                   	push   ecx
c001aead:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001aeb1:	57                   	push   edi
c001aeb2:	55                   	push   ebp
c001aeb3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aeb7:	e8 66 fe ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aebc:	53                   	push   ebx
c001aebd:	89 c6                	mov    esi,eax
c001aebf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001aec3:	c1 e6 10             	shl    esi,0x10
c001aec6:	51                   	push   ecx
c001aec7:	57                   	push   edi
c001aec8:	55                   	push   ebp
c001aec9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aecd:	e8 50 fe ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aed2:	83 c4 2c             	add    esp,0x2c
c001aed5:	0f b7 c0             	movzx  eax,ax
c001aed8:	5b                   	pop    ebx
c001aed9:	09 f0                	or     eax,esi
c001aedb:	5e                   	pop    esi
c001aedc:	5f                   	pop    edi
c001aedd:	5d                   	pop    ebp
c001aede:	c3                   	ret    
c001aedf:	90                   	nop

c001aee0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001aee0:	53                   	push   ebx
c001aee1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aee6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001aeeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeef:	c1 e1 10             	shl    ecx,0x10
c001aef2:	25 fc 00 00 00       	and    eax,0xfc
c001aef7:	09 c1                	or     ecx,eax
c001aef9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aefe:	c1 e0 08             	shl    eax,0x8
c001af01:	09 c1                	or     ecx,eax
c001af03:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001af08:	c1 e0 0b             	shl    eax,0xb
c001af0b:	09 c1                	or     ecx,eax
c001af0d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001af13:	89 c8                	mov    eax,ecx
c001af15:	ef                   	out    dx,eax
c001af16:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af1b:	ed                   	in     eax,dx
c001af1c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001af21:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001af26:	74 0a                	je     c001af32 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001af28:	0f b7 d8             	movzx  ebx,ax
c001af2b:	89 d0                	mov    eax,edx
c001af2d:	c1 e0 10             	shl    eax,0x10
c001af30:	eb 05                	jmp    c001af37 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001af32:	66 31 c0             	xor    ax,ax
c001af35:	89 d3                	mov    ebx,edx
c001af37:	09 c3                	or     ebx,eax
c001af39:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af3e:	89 c8                	mov    eax,ecx
c001af40:	ef                   	out    dx,eax
c001af41:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af46:	89 d8                	mov    eax,ebx
c001af48:	ef                   	out    dx,eax
c001af49:	5b                   	pop    ebx
c001af4a:	c3                   	ret    
c001af4b:	90                   	nop

c001af4c <PCI::checkBus(unsigned char)>:
c001af4c:	56                   	push   esi
c001af4d:	53                   	push   ebx
c001af4e:	31 db                	xor    ebx,ebx
c001af50:	51                   	push   ecx
c001af51:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001af56:	52                   	push   edx
c001af57:	53                   	push   ebx
c001af58:	43                   	inc    ebx
c001af59:	56                   	push   esi
c001af5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af5e:	e8 4d 03 00 00       	call   c001b2b0 <PCI::checkDevice(unsigned char, unsigned char)>
c001af63:	83 c4 10             	add    esp,0x10
c001af66:	83 fb 20             	cmp    ebx,0x20
c001af69:	75 eb                	jne    c001af56 <PCI::checkBus(unsigned char)+0xa>
c001af6b:	58                   	pop    eax
c001af6c:	5b                   	pop    ebx
c001af6d:	5e                   	pop    esi
c001af6e:	c3                   	ret    
c001af6f:	90                   	nop

c001af70 <PCI::foundDevice(PCIDeviceInfo)>:
c001af70:	55                   	push   ebp
c001af71:	57                   	push   edi
c001af72:	56                   	push   esi
c001af73:	53                   	push   ebx
c001af74:	83 ec 1c             	sub    esp,0x1c
c001af77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af7b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001af81:	0f 84 51 01 00 00    	je     c001b0d8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001af87:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001af8b:	66 81 f9 06 04       	cmp    cx,0x406
c001af90:	75 2c                	jne    c001afbe <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001af92:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001af97:	50                   	push   eax
c001af98:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001af9d:	50                   	push   eax
c001af9e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001afa3:	50                   	push   eax
c001afa4:	56                   	push   esi
c001afa5:	e8 b2 fe ff ff       	call   c001ae5c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001afaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001afae:	0f b6 c0             	movzx  eax,al
c001afb1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001afb5:	83 c4 2c             	add    esp,0x2c
c001afb8:	5b                   	pop    ebx
c001afb9:	5e                   	pop    esi
c001afba:	5f                   	pop    edi
c001afbb:	5d                   	pop    ebp
c001afbc:	eb 8e                	jmp    c001af4c <PCI::checkBus(unsigned char)>
c001afbe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001afc2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001afc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001afcc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001afd0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001afd4:	88 d3                	mov    bl,dl
c001afd6:	85 c0                	test   eax,eax
c001afd8:	74 33                	je     c001b00d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001afda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001afdd:	85 d2                	test   edx,edx
c001afdf:	74 28                	je     c001b009 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001afe1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001afe7:	31 ef                	xor    edi,ebp
c001afe9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001afef:	75 18                	jne    c001b009 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001aff1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001aff5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001affb:	75 0c                	jne    c001b009 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001affd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b003:	0f 84 cf 00 00 00    	je     c001b0d8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b009:	8b 00                	mov    eax,DWORD PTR [eax]
c001b00b:	eb c9                	jmp    c001afd6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b00d:	66 81 f9 01 06       	cmp    cx,0x601
c001b012:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b016:	75 18                	jne    c001b030 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b018:	83 ec 0c             	sub    esp,0xc
c001b01b:	68 58 01 00 00       	push   0x158
c001b020:	e8 29 71 ff ff       	call   c001214e <operator new(unsigned long)>
c001b025:	59                   	pop    ecx
c001b026:	89 c5                	mov    ebp,eax
c001b028:	5f                   	pop    edi
c001b029:	68 b0 19 02 c0       	push   0xc00219b0
c001b02e:	eb 7d                	jmp    c001b0ad <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b030:	66 81 f9 01 01       	cmp    cx,0x101
c001b035:	75 60                	jne    c001b097 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b037:	83 ec 0c             	sub    esp,0xc
c001b03a:	68 70 02 00 00       	push   0x270
c001b03f:	e8 0a 71 ff ff       	call   c001214e <operator new(unsigned long)>
c001b044:	89 04 24             	mov    DWORD PTR [esp],eax
c001b047:	89 c5                	mov    ebp,eax
c001b049:	e8 26 03 00 00       	call   c001b374 <IDE::IDE()>
c001b04e:	58                   	pop    eax
c001b04f:	5a                   	pop    edx
c001b050:	55                   	push   ebp
c001b051:	56                   	push   esi
c001b052:	e8 01 84 ff ff       	call   c0013458 <Device::addChild(Device*)>
c001b057:	83 ec 1c             	sub    esp,0x1c
c001b05a:	b9 09 00 00 00       	mov    ecx,0x9
c001b05f:	fc                   	cld    
c001b060:	89 e7                	mov    edi,esp
c001b062:	89 de                	mov    esi,ebx
c001b064:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b066:	55                   	push   ebp
c001b067:	e8 c6 82 ff ff       	call   c0013332 <Device::preOpenPCI(PCIDeviceInfo)>
c001b06c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b06f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b073:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b07b:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b083:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b08b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b08e:	83 c4 4c             	add    esp,0x4c
c001b091:	5b                   	pop    ebx
c001b092:	5e                   	pop    esi
c001b093:	5f                   	pop    edi
c001b094:	5d                   	pop    ebp
c001b095:	ff e0                	jmp    eax
c001b097:	83 ec 0c             	sub    esp,0xc
c001b09a:	68 58 01 00 00       	push   0x158
c001b09f:	e8 aa 70 ff ff       	call   c001214e <operator new(unsigned long)>
c001b0a4:	59                   	pop    ecx
c001b0a5:	89 c5                	mov    ebp,eax
c001b0a7:	5f                   	pop    edi
c001b0a8:	68 cf 19 02 c0       	push   0xc00219cf
c001b0ad:	55                   	push   ebp
c001b0ae:	e8 91 86 ff ff       	call   c0013744 <DriverlessDevice::DriverlessDevice(char const*)>
c001b0b3:	58                   	pop    eax
c001b0b4:	5a                   	pop    edx
c001b0b5:	55                   	push   ebp
c001b0b6:	56                   	push   esi
c001b0b7:	e8 9c 83 ff ff       	call   c0013458 <Device::addChild(Device*)>
c001b0bc:	b9 09 00 00 00       	mov    ecx,0x9
c001b0c1:	fc                   	cld    
c001b0c2:	89 df                	mov    edi,ebx
c001b0c4:	89 de                	mov    esi,ebx
c001b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b0c8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b0cc:	83 c4 2c             	add    esp,0x2c
c001b0cf:	5b                   	pop    ebx
c001b0d0:	5e                   	pop    esi
c001b0d1:	5f                   	pop    edi
c001b0d2:	5d                   	pop    ebp
c001b0d3:	e9 5a 82 ff ff       	jmp    c0013332 <Device::preOpenPCI(PCIDeviceInfo)>
c001b0d8:	83 c4 1c             	add    esp,0x1c
c001b0db:	5b                   	pop    ebx
c001b0dc:	5e                   	pop    esi
c001b0dd:	5f                   	pop    edi
c001b0de:	5d                   	pop    ebp
c001b0df:	c3                   	ret    

c001b0e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b0e0:	55                   	push   ebp
c001b0e1:	57                   	push   edi
c001b0e2:	56                   	push   esi
c001b0e3:	53                   	push   ebx
c001b0e4:	83 ec 5c             	sub    esp,0x5c
c001b0e7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b0eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b0f3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b0f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0fc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b100:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b109:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b10e:	6a 0c                	push   0xc
c001b110:	55                   	push   ebp
c001b111:	53                   	push   ebx
c001b112:	57                   	push   edi
c001b113:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b11a:	e8 03 fc ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b11f:	83 c4 0c             	add    esp,0xc
c001b122:	6a 00                	push   0x0
c001b124:	68 e9 19 02 c0       	push   0xc00219e9
c001b129:	e8 70 1a ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b12e:	55                   	push   ebp
c001b12f:	53                   	push   ebx
c001b130:	57                   	push   edi
c001b131:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b138:	e8 73 fc ff ff       	call   c001adb0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b13d:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b142:	83 c4 20             	add    esp,0x20
c001b145:	55                   	push   ebp
c001b146:	53                   	push   ebx
c001b147:	57                   	push   edi
c001b148:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b14c:	e8 e9 fc ff ff       	call   c001ae3a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b151:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b158:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b15c:	55                   	push   ebp
c001b15d:	53                   	push   ebx
c001b15e:	57                   	push   edi
c001b15f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b166:	e8 b7 fb ff ff       	call   c001ad22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b16b:	0f b6 c4             	movzx  eax,ah
c001b16e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b172:	83 c4 18             	add    esp,0x18
c001b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b179:	68 fd 19 02 c0       	push   0xc00219fd
c001b17e:	e8 1b 1a ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b183:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b187:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b18b:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b199:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b1a0:	74 6c                	je     c001b20e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b1a2:	31 f6                	xor    esi,esi
c001b1a4:	8b 15 c8 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022cc8
c001b1aa:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b1b0:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b1b6:	7e 56                	jle    c001b20e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b1b8:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b1bb:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b1c2:	39 cb                	cmp    ebx,ecx
c001b1c4:	75 45                	jne    c001b20b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b1c6:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b1cd:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b1d1:	75 38                	jne    c001b20b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b1d3:	83 ec 0c             	sub    esp,0xc
c001b1d6:	68 0c 1a 02 c0       	push   0xc0021a0c
c001b1db:	e8 be 19 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b1e0:	8b 15 c8 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022cc8
c001b1e6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b1ec:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b1f4:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b1f8:	52                   	push   edx
c001b1f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b1fd:	53                   	push   ebx
c001b1fe:	68 31 1a 02 c0       	push   0xc0021a31
c001b203:	e8 96 19 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b208:	83 c4 20             	add    esp,0x20
c001b20b:	46                   	inc    esi
c001b20c:	eb 96                	jmp    c001b1a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b20e:	31 d2                	xor    edx,edx
c001b210:	83 ec 0c             	sub    esp,0xc
c001b213:	55                   	push   ebp
c001b214:	53                   	push   ebx
c001b215:	57                   	push   edi
c001b216:	52                   	push   edx
c001b217:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b21b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b222:	e8 59 fc ff ff       	call   c001ae80 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b227:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b22b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b22f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b233:	42                   	inc    edx
c001b234:	83 c4 20             	add    esp,0x20
c001b237:	83 fa 06             	cmp    edx,0x6
c001b23a:	75 d4                	jne    c001b210 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b23c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b240:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b244:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b248:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b24c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b250:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b254:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b259:	86 e0                	xchg   al,ah
c001b25b:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b260:	55                   	push   ebp
c001b261:	53                   	push   ebx
c001b262:	57                   	push   edi
c001b263:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b267:	e8 88 fb ff ff       	call   c001adf4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b26c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b270:	55                   	push   ebp
c001b271:	53                   	push   ebx
c001b272:	57                   	push   edi
c001b273:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b27a:	e8 eb fa ff ff       	call   c001ad6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b287:	b9 09 00 00 00       	mov    ecx,0x9
c001b28c:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b290:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b294:	fc                   	cld    
c001b295:	89 e7                	mov    edi,esp
c001b297:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b299:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b2a0:	e8 cb fc ff ff       	call   c001af70 <PCI::foundDevice(PCIDeviceInfo)>
c001b2a5:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b2ab:	5b                   	pop    ebx
c001b2ac:	5e                   	pop    esi
c001b2ad:	5f                   	pop    edi
c001b2ae:	5d                   	pop    ebp
c001b2af:	c3                   	ret    

c001b2b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b2b0:	55                   	push   ebp
c001b2b1:	57                   	push   edi
c001b2b2:	56                   	push   esi
c001b2b3:	53                   	push   ebx
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b2bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b2c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b2c5:	6a 00                	push   0x0
c001b2c7:	56                   	push   esi
c001b2c8:	57                   	push   edi
c001b2c9:	55                   	push   ebp
c001b2ca:	e8 9b fa ff ff       	call   c001ad6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b2cf:	6a 00                	push   0x0
c001b2d1:	56                   	push   esi
c001b2d2:	57                   	push   edi
c001b2d3:	55                   	push   ebp
c001b2d4:	e8 07 fe ff ff       	call   c001b0e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b2d9:	83 c4 20             	add    esp,0x20
c001b2dc:	6a 00                	push   0x0
c001b2de:	56                   	push   esi
c001b2df:	57                   	push   edi
c001b2e0:	55                   	push   ebp
c001b2e1:	e8 a6 fa ff ff       	call   c001ad8c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b2e6:	83 c4 10             	add    esp,0x10
c001b2e9:	84 c0                	test   al,al
c001b2eb:	79 27                	jns    c001b314 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b2ed:	bb 01 00 00 00       	mov    ebx,0x1
c001b2f2:	53                   	push   ebx
c001b2f3:	56                   	push   esi
c001b2f4:	57                   	push   edi
c001b2f5:	55                   	push   ebp
c001b2f6:	e8 6f fa ff ff       	call   c001ad6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b2fb:	83 c4 10             	add    esp,0x10
c001b2fe:	66 40                	inc    ax
c001b300:	74 0c                	je     c001b30e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b302:	53                   	push   ebx
c001b303:	56                   	push   esi
c001b304:	57                   	push   edi
c001b305:	55                   	push   ebp
c001b306:	e8 d5 fd ff ff       	call   c001b0e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b30b:	83 c4 10             	add    esp,0x10
c001b30e:	43                   	inc    ebx
c001b30f:	83 fb 08             	cmp    ebx,0x8
c001b312:	75 de                	jne    c001b2f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b314:	83 c4 0c             	add    esp,0xc
c001b317:	5b                   	pop    ebx
c001b318:	5e                   	pop    esi
c001b319:	5f                   	pop    edi
c001b31a:	5d                   	pop    ebp
c001b31b:	c3                   	ret    

c001b31c <PCI::detect()>:
c001b31c:	56                   	push   esi
c001b31d:	53                   	push   ebx
c001b31e:	53                   	push   ebx
c001b31f:	31 db                	xor    ebx,ebx
c001b321:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b325:	6a 00                	push   0x0
c001b327:	6a 00                	push   0x0
c001b329:	6a 00                	push   0x0
c001b32b:	56                   	push   esi
c001b32c:	e8 5b fa ff ff       	call   c001ad8c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	a8 80                	test   al,0x80
c001b336:	75 21                	jne    c001b359 <PCI::detect()+0x3d>
c001b338:	51                   	push   ecx
c001b339:	51                   	push   ecx
c001b33a:	6a 00                	push   0x0
c001b33c:	56                   	push   esi
c001b33d:	e8 0a fc ff ff       	call   c001af4c <PCI::checkBus(unsigned char)>
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	eb 24                	jmp    c001b36b <PCI::detect()+0x4f>
c001b347:	52                   	push   edx
c001b348:	52                   	push   edx
c001b349:	53                   	push   ebx
c001b34a:	43                   	inc    ebx
c001b34b:	56                   	push   esi
c001b34c:	e8 fb fb ff ff       	call   c001af4c <PCI::checkBus(unsigned char)>
c001b351:	83 c4 10             	add    esp,0x10
c001b354:	83 fb 08             	cmp    ebx,0x8
c001b357:	74 12                	je     c001b36b <PCI::detect()+0x4f>
c001b359:	53                   	push   ebx
c001b35a:	6a 00                	push   0x0
c001b35c:	6a 00                	push   0x0
c001b35e:	56                   	push   esi
c001b35f:	e8 06 fa ff ff       	call   c001ad6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	66 40                	inc    ax
c001b369:	74 dc                	je     c001b347 <PCI::detect()+0x2b>
c001b36b:	58                   	pop    eax
c001b36c:	5b                   	pop    ebx
c001b36d:	5e                   	pop    esi
c001b36e:	c3                   	ret    
c001b36f:	90                   	nop

c001b370 <IDE::close(int, int, void*)>:
c001b370:	83 c8 ff             	or     eax,0xffffffff
c001b373:	c3                   	ret    

c001b374 <IDE::IDE()>:
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b37b:	83 ec 08             	sub    esp,0x8
c001b37e:	68 78 1a 02 c0       	push   0xc0021a78
c001b383:	50                   	push   eax
c001b384:	e8 51 84 ff ff       	call   c00137da <HardDiskController::HardDiskController(char const*)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	ba b8 1c 02 c0       	mov    edx,0xc0021cb8
c001b391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b395:	89 10                	mov    DWORD PTR [eax],edx
c001b397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b3a2:	90                   	nop
c001b3a3:	83 c4 0c             	add    esp,0xc
c001b3a6:	c3                   	ret    
c001b3a7:	90                   	nop

c001b3a8 <IDE::prepareInterrupt(unsigned char)>:
c001b3a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b3b9:	c3                   	ret    

c001b3ba <selectDrive(unsigned char, unsigned char)>:
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <IDE::getBase(unsigned char)>:
c001b3bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b3cd:	c3                   	ret    

c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b3ce:	55                   	push   ebp
c001b3cf:	57                   	push   edi
c001b3d0:	56                   	push   esi
c001b3d1:	53                   	push   ebx
c001b3d2:	83 ec 1c             	sub    esp,0x1c
c001b3d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b3d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b3e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b3e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b3e8:	80 f9 03             	cmp    cl,0x3
c001b3eb:	77 51                	ja     c001b43e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b3ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3f1:	0f b6 f2             	movzx  esi,dl
c001b3f4:	0f b6 db             	movzx  ebx,bl
c001b3f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b3fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b3fe:	83 ca 80             	or     edx,0xffffff80
c001b401:	0f b6 d2             	movzx  edx,dl
c001b404:	52                   	push   edx
c001b405:	6a 0c                	push   0xc
c001b407:	56                   	push   esi
c001b408:	57                   	push   edi
c001b409:	e8 c0 ff ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b40e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b413:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b417:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b41b:	ee                   	out    dx,al
c001b41c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b421:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b425:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b429:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b42d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b435:	83 c4 2c             	add    esp,0x2c
c001b438:	5b                   	pop    ebx
c001b439:	5e                   	pop    esi
c001b43a:	5f                   	pop    edi
c001b43b:	5d                   	pop    ebp
c001b43c:	eb 90                	jmp    c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b43e:	80 fb 07             	cmp    bl,0x7
c001b441:	77 12                	ja     c001b455 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b443:	0f b6 d2             	movzx  edx,dl
c001b446:	0f b6 db             	movzx  ebx,bl
c001b449:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b451:	89 da                	mov    edx,ebx
c001b453:	eb 2f                	jmp    c001b484 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b455:	80 fb 0d             	cmp    bl,0xd
c001b458:	77 13                	ja     c001b46d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b45a:	0f b6 d2             	movzx  edx,dl
c001b45d:	0f b6 db             	movzx  ebx,bl
c001b460:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b467:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b46b:	eb 17                	jmp    c001b484 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b46d:	80 fb 15             	cmp    bl,0x15
c001b470:	77 13                	ja     c001b485 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b472:	0f b6 d2             	movzx  edx,dl
c001b475:	0f b6 db             	movzx  ebx,bl
c001b478:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b480:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b484:	ee                   	out    dx,al
c001b485:	83 c4 1c             	add    esp,0x1c
c001b488:	5b                   	pop    ebx
c001b489:	5e                   	pop    esi
c001b48a:	5f                   	pop    edi
c001b48b:	5d                   	pop    ebp
c001b48c:	c3                   	ret    
c001b48d:	90                   	nop

c001b48e <IDE::read(unsigned char, unsigned char)>:
c001b48e:	55                   	push   ebp
c001b48f:	57                   	push   edi
c001b490:	56                   	push   esi
c001b491:	53                   	push   ebx
c001b492:	83 ec 1c             	sub    esp,0x1c
c001b495:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b499:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b49d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b4a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4a4:	3c 03                	cmp    al,0x3
c001b4a6:	77 43                	ja     c001b4eb <IDE::read(unsigned char, unsigned char)+0x5d>
c001b4a8:	0f b6 f2             	movzx  esi,dl
c001b4ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b4ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b4b2:	83 c8 80             	or     eax,0xffffff80
c001b4b5:	0f b6 c0             	movzx  eax,al
c001b4b8:	50                   	push   eax
c001b4b9:	6a 0c                	push   0xc
c001b4bb:	56                   	push   esi
c001b4bc:	57                   	push   edi
c001b4bd:	e8 0c ff ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b4c7:	0f b6 c3             	movzx  eax,bl
c001b4ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b4ce:	ec                   	in     al,dx
c001b4cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b4d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b4d8:	52                   	push   edx
c001b4d9:	6a 0c                	push   0xc
c001b4db:	56                   	push   esi
c001b4dc:	57                   	push   edi
c001b4dd:	e8 ec fe ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4e2:	83 c4 20             	add    esp,0x20
c001b4e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4e9:	eb 49                	jmp    c001b534 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b4eb:	80 fb 07             	cmp    bl,0x7
c001b4ee:	77 12                	ja     c001b502 <IDE::read(unsigned char, unsigned char)+0x74>
c001b4f0:	0f b6 d2             	movzx  edx,dl
c001b4f3:	0f b6 c3             	movzx  eax,bl
c001b4f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b4fe:	89 c2                	mov    edx,eax
c001b500:	eb 31                	jmp    c001b533 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b502:	80 fb 0d             	cmp    bl,0xd
c001b505:	77 13                	ja     c001b51a <IDE::read(unsigned char, unsigned char)+0x8c>
c001b507:	0f b6 d2             	movzx  edx,dl
c001b50a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b511:	0f b6 d3             	movzx  edx,bl
c001b514:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b518:	eb 19                	jmp    c001b533 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b51a:	31 c0                	xor    eax,eax
c001b51c:	80 fb 15             	cmp    bl,0x15
c001b51f:	77 13                	ja     c001b534 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b521:	0f b6 d2             	movzx  edx,dl
c001b524:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b52c:	0f b6 d3             	movzx  edx,bl
c001b52f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b533:	ec                   	in     al,dx
c001b534:	83 c4 1c             	add    esp,0x1c
c001b537:	5b                   	pop    ebx
c001b538:	5e                   	pop    esi
c001b539:	5f                   	pop    edi
c001b53a:	5d                   	pop    ebp
c001b53b:	c3                   	ret    

c001b53c <IDE::waitInterrupt(unsigned char)>:
c001b53c:	55                   	push   ebp
c001b53d:	57                   	push   edi
c001b53e:	56                   	push   esi
c001b53f:	53                   	push   ebx
c001b540:	31 db                	xor    ebx,ebx
c001b542:	83 ec 0c             	sub    esp,0xc
c001b545:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b549:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b54e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b556:	89 e8                	mov    eax,ebp
c001b558:	84 c0                	test   al,al
c001b55a:	75 34                	jne    c001b590 <IDE::waitInterrupt(unsigned char)+0x54>
c001b55c:	52                   	push   edx
c001b55d:	6a 0c                	push   0xc
c001b55f:	56                   	push   esi
c001b560:	57                   	push   edi
c001b561:	e8 28 ff ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001b566:	83 c4 10             	add    esp,0x10
c001b569:	a8 01                	test   al,0x1
c001b56b:	75 2b                	jne    c001b598 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b56d:	f6 c3 04             	test   bl,0x4
c001b570:	75 16                	jne    c001b588 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b572:	83 fb 32             	cmp    ebx,0x32
c001b575:	7e 11                	jle    c001b588 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b577:	50                   	push   eax
c001b578:	50                   	push   eax
c001b579:	6a 00                	push   0x0
c001b57b:	68 80 96 98 00       	push   0x989680
c001b580:	e8 74 31 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c001b585:	83 c4 10             	add    esp,0x10
c001b588:	83 fb 3c             	cmp    ebx,0x3c
c001b58b:	74 0b                	je     c001b598 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b58d:	43                   	inc    ebx
c001b58e:	eb be                	jmp    c001b54e <IDE::waitInterrupt(unsigned char)+0x12>
c001b590:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b598:	83 c4 0c             	add    esp,0xc
c001b59b:	89 e8                	mov    eax,ebp
c001b59d:	5b                   	pop    ebx
c001b59e:	5e                   	pop    esi
c001b59f:	5f                   	pop    edi
c001b5a0:	5d                   	pop    ebp
c001b5a1:	c3                   	ret    

c001b5a2 <ideChannel0IRQHandler(regs*, void*)>:
c001b5a2:	83 ec 10             	sub    esp,0x10
c001b5a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b5b0:	6a 07                	push   0x7
c001b5b2:	6a 00                	push   0x0
c001b5b4:	50                   	push   eax
c001b5b5:	e8 d4 fe ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001b5ba:	83 c4 1c             	add    esp,0x1c
c001b5bd:	c3                   	ret    

c001b5be <ideChannel1IRQHandler(regs*, void*)>:
c001b5be:	83 ec 10             	sub    esp,0x10
c001b5c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b5cc:	6a 07                	push   0x7
c001b5ce:	6a 01                	push   0x1
c001b5d0:	50                   	push   eax
c001b5d1:	e8 b8 fe ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001b5d6:	83 c4 1c             	add    esp,0x1c
c001b5d9:	c3                   	ret    

c001b5da <IDE::enableIRQs(unsigned char, bool)>:
c001b5da:	57                   	push   edi
c001b5db:	56                   	push   esi
c001b5dc:	be 04 00 00 00       	mov    esi,0x4
c001b5e1:	53                   	push   ebx
c001b5e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b5f0:	0f 94 c0             	sete   al
c001b5f3:	d1 e0                	shl    eax,1
c001b5f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b5fc:	0f b6 c0             	movzx  eax,al
c001b5ff:	50                   	push   eax
c001b600:	6a 0c                	push   0xc
c001b602:	57                   	push   edi
c001b603:	53                   	push   ebx
c001b604:	e8 c5 fd ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b609:	83 c4 10             	add    esp,0x10
c001b60c:	50                   	push   eax
c001b60d:	6a 0c                	push   0xc
c001b60f:	57                   	push   edi
c001b610:	53                   	push   ebx
c001b611:	e8 78 fe ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001b616:	83 c4 10             	add    esp,0x10
c001b619:	4e                   	dec    esi
c001b61a:	75 f0                	jne    c001b60c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b61c:	5b                   	pop    ebx
c001b61d:	5e                   	pop    esi
c001b61e:	5f                   	pop    edi
c001b61f:	c3                   	ret    

c001b620 <IDE::open(int, int, void*)>:
c001b620:	55                   	push   ebp
c001b621:	57                   	push   edi
c001b622:	56                   	push   esi
c001b623:	53                   	push   ebx
c001b624:	83 ec 1c             	sub    esp,0x1c
c001b627:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b62b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b634:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b63d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b644:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b64b:	0f 85 b0 02 00 00    	jne    c001b901 <IDE::open(int, int, void*)+0x2e1>
c001b651:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b657:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b65b:	83 e0 7f             	and    eax,0x7f
c001b65e:	3c 05                	cmp    al,0x5
c001b660:	74 04                	je     c001b666 <IDE::open(int, int, void*)+0x46>
c001b662:	3c 0f                	cmp    al,0xf
c001b664:	75 32                	jne    c001b698 <IDE::open(int, int, void*)+0x78>
c001b666:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b66c:	83 e0 fc             	and    eax,0xfffffffc
c001b66f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b676:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b67c:	83 e0 fc             	and    eax,0xfffffffc
c001b67f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b686:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b68c:	83 e0 fc             	and    eax,0xfffffffc
c001b68f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b696:	eb 14                	jmp    c001b6ac <IDE::open(int, int, void*)+0x8c>
c001b698:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b6a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b6ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b6b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b6ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6be:	89 c6                	mov    esi,eax
c001b6c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b6c5:	c1 e6 10             	shl    esi,0x10
c001b6c8:	89 e8                	mov    eax,ebp
c001b6ca:	89 fa                	mov    edx,edi
c001b6cc:	c1 e0 0b             	shl    eax,0xb
c001b6cf:	09 f0                	or     eax,esi
c001b6d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b6d8:	c1 e6 08             	shl    esi,0x8
c001b6db:	09 c6                	or     esi,eax
c001b6dd:	89 f0                	mov    eax,esi
c001b6df:	0d 08 00 00 80       	or     eax,0x80000008
c001b6e4:	ef                   	out    dx,eax
c001b6e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b6ea:	89 ca                	mov    edx,ecx
c001b6ec:	ed                   	in     eax,dx
c001b6ed:	c1 e8 10             	shr    eax,0x10
c001b6f0:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6f5:	0f 84 f5 00 00 00    	je     c001b7f0 <IDE::open(int, int, void*)+0x1d0>
c001b6fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b701:	89 fa                	mov    edx,edi
c001b703:	89 f0                	mov    eax,esi
c001b705:	ef                   	out    dx,eax
c001b706:	b0 fe                	mov    al,0xfe
c001b708:	89 ca                	mov    edx,ecx
c001b70a:	ee                   	out    dx,al
c001b70b:	89 f0                	mov    eax,esi
c001b70d:	89 fa                	mov    edx,edi
c001b70f:	ef                   	out    dx,eax
c001b710:	89 ca                	mov    edx,ecx
c001b712:	ed                   	in     eax,dx
c001b713:	3c fe                	cmp    al,0xfe
c001b715:	0f 85 a9 00 00 00    	jne    c001b7c4 <IDE::open(int, int, void*)+0x1a4>
c001b71b:	8b 15 c8 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022cc8
c001b721:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001b728:	74 33                	je     c001b75d <IDE::open(int, int, void*)+0x13d>
c001b72a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b730:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b734:	40                   	inc    eax
c001b735:	83 ec 0c             	sub    esp,0xc
c001b738:	0f b6 c0             	movzx  eax,al
c001b73b:	50                   	push   eax
c001b73c:	55                   	push   ebp
c001b73d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b741:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001b747:	51                   	push   ecx
c001b748:	e8 9f ad ff ff       	call   c00164ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b74d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b752:	83 c4 1c             	add    esp,0x1c
c001b755:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b75b:	eb 0a                	jmp    c001b767 <IDE::open(int, int, void*)+0x147>
c001b75d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b767:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b76e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b775:	c1 e1 10             	shl    ecx,0x10
c001b778:	c1 e0 08             	shl    eax,0x8
c001b77b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b780:	09 c1                	or     ecx,eax
c001b782:	89 fa                	mov    edx,edi
c001b784:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b78b:	c1 e0 0b             	shl    eax,0xb
c001b78e:	09 c1                	or     ecx,eax
c001b790:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b796:	89 c8                	mov    eax,ecx
c001b798:	ef                   	out    dx,eax
c001b799:	be fc 0c 00 00       	mov    esi,0xcfc
c001b79e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b7a4:	89 f2                	mov    edx,esi
c001b7a6:	ee                   	out    dx,al
c001b7a7:	89 c8                	mov    eax,ecx
c001b7a9:	89 fa                	mov    edx,edi
c001b7ab:	ef                   	out    dx,eax
c001b7ac:	89 f2                	mov    edx,esi
c001b7ae:	ed                   	in     eax,dx
c001b7af:	0f b6 c0             	movzx  eax,al
c001b7b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b7b8:	74 46                	je     c001b800 <IDE::open(int, int, void*)+0x1e0>
c001b7ba:	83 ec 0c             	sub    esp,0xc
c001b7bd:	68 90 1a 02 c0       	push   0xc0021a90
c001b7c2:	eb 34                	jmp    c001b7f8 <IDE::open(int, int, void*)+0x1d8>
c001b7c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b7cd:	75 17                	jne    c001b7e6 <IDE::open(int, int, void*)+0x1c6>
c001b7cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001b7d4:	74 07                	je     c001b7dd <IDE::open(int, int, void*)+0x1bd>
c001b7d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001b7db:	75 09                	jne    c001b7e6 <IDE::open(int, int, void*)+0x1c6>
c001b7dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b7e4:	eb 1a                	jmp    c001b800 <IDE::open(int, int, void*)+0x1e0>
c001b7e6:	83 ec 0c             	sub    esp,0xc
c001b7e9:	68 98 1a 02 c0       	push   0xc0021a98
c001b7ee:	eb 08                	jmp    c001b7f8 <IDE::open(int, int, void*)+0x1d8>
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	68 c9 1a 02 c0       	push   0xc0021ac9
c001b7f8:	e8 bf 14 ff ff       	call   c000ccbc <panic(char const*)>
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001b807:	79 1a                	jns    c001b823 <IDE::open(int, int, void*)+0x203>
c001b809:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b80f:	83 e0 fc             	and    eax,0xfffffffc
c001b812:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b819:	83 c0 08             	add    eax,0x8
c001b81c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b823:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b829:	89 c2                	mov    edx,eax
c001b82b:	83 e2 0f             	and    edx,0xf
c001b82e:	66 83 fa 08          	cmp    dx,0x8
c001b832:	75 0a                	jne    c001b83e <IDE::open(int, int, void*)+0x21e>
c001b834:	83 e8 02             	sub    eax,0x2
c001b837:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b83e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b844:	89 c2                	mov    edx,eax
c001b846:	83 e2 0f             	and    edx,0xf
c001b849:	66 83 fa 08          	cmp    dx,0x8
c001b84d:	75 0a                	jne    c001b859 <IDE::open(int, int, void*)+0x239>
c001b84f:	83 e8 02             	sub    eax,0x2
c001b852:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b859:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b860:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b867:	89 d0                	mov    eax,edx
c001b869:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b86c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b870:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b874:	8d 4a 01             	lea    ecx,[edx+0x1]
c001b877:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b87c:	0f b6 c9             	movzx  ecx,cl
c001b87f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b886:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b889:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b88d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b891:	8d 50 02             	lea    edx,[eax+0x2]
c001b894:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001b899:	0f b6 d2             	movzx  edx,dl
c001b89c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b8a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b8a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b8a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b8ad:	8d 48 03             	lea    ecx,[eax+0x3]
c001b8b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b8b5:	0f b6 c9             	movzx  ecx,cl
c001b8b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b8be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b8c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b8c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b8c9:	8d 50 04             	lea    edx,[eax+0x4]
c001b8cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b8d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001b8d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b8de:	66 85 f6             	test   si,si
c001b8e1:	74 3e                	je     c001b921 <IDE::open(int, int, void*)+0x301>
c001b8e3:	0f b6 d2             	movzx  edx,dl
c001b8e6:	83 c0 05             	add    eax,0x5
c001b8e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b8ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b8f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b8f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b8fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b8ff:	eb 20                	jmp    c001b921 <IDE::open(int, int, void*)+0x301>
c001b901:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b90b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b915:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b91c:	e9 02 ff ff ff       	jmp    c001b823 <IDE::open(int, int, void*)+0x203>
c001b921:	52                   	push   edx
c001b922:	52                   	push   edx
c001b923:	6a 00                	push   0x0
c001b925:	53                   	push   ebx
c001b926:	e8 7d fa ff ff       	call   c001b3a8 <IDE::prepareInterrupt(unsigned char)>
c001b92b:	59                   	pop    ecx
c001b92c:	5e                   	pop    esi
c001b92d:	6a 01                	push   0x1
c001b92f:	53                   	push   ebx
c001b930:	e8 73 fa ff ff       	call   c001b3a8 <IDE::prepareInterrupt(unsigned char)>
c001b935:	83 c4 0c             	add    esp,0xc
c001b938:	6a 00                	push   0x0
c001b93a:	6a 00                	push   0x0
c001b93c:	53                   	push   ebx
c001b93d:	e8 98 fc ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001b942:	83 c4 0c             	add    esp,0xc
c001b945:	6a 00                	push   0x0
c001b947:	6a 01                	push   0x1
c001b949:	53                   	push   ebx
c001b94a:	e8 8b fc ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b959:	74 40                	je     c001b99b <IDE::open(int, int, void*)+0x37b>
c001b95b:	83 ec 0c             	sub    esp,0xc
c001b95e:	68 f3 1a 02 c0       	push   0xc0021af3
c001b963:	e8 36 12 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b96b:	6a 01                	push   0x1
c001b96d:	68 a2 b5 01 c0       	push   0xc001b5a2
c001b972:	6a 0e                	push   0xe
c001b974:	53                   	push   ebx
c001b975:	e8 32 7a ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b97a:	83 c4 14             	add    esp,0x14
c001b97d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b983:	53                   	push   ebx
c001b984:	6a 01                	push   0x1
c001b986:	68 be b5 01 c0       	push   0xc001b5be
c001b98b:	6a 0f                	push   0xf
c001b98d:	53                   	push   ebx
c001b98e:	e8 19 7a ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b993:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b999:	eb 4a                	jmp    c001b9e5 <IDE::open(int, int, void*)+0x3c5>
c001b99b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b9a5:	50                   	push   eax
c001b9a6:	6a 0f                	push   0xf
c001b9a8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b9ae:	68 0f 1b 02 c0       	push   0xc0021b0f
c001b9b3:	e8 e6 11 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001b9b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9bb:	6a 00                	push   0x0
c001b9bd:	68 a2 b5 01 c0       	push   0xc001b5a2
c001b9c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b9c8:	53                   	push   ebx
c001b9c9:	e8 de 79 ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ce:	83 c4 14             	add    esp,0x14
c001b9d1:	53                   	push   ebx
c001b9d2:	6a 00                	push   0x0
c001b9d4:	68 be b5 01 c0       	push   0xc001b5be
c001b9d9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b9df:	53                   	push   ebx
c001b9e0:	e8 c7 79 ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9e7:	83 c4 20             	add    esp,0x20
c001b9ea:	83 ec 0c             	sub    esp,0xc
c001b9ed:	53                   	push   ebx
c001b9ee:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b9f1:	83 c4 0c             	add    esp,0xc
c001b9f4:	6a 07                	push   0x7
c001b9f6:	6a 00                	push   0x0
c001b9f8:	53                   	push   ebx
c001b9f9:	e8 90 fa ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001b9fe:	83 c4 0c             	add    esp,0xc
c001ba01:	6a 07                	push   0x7
c001ba03:	6a 01                	push   0x1
c001ba05:	53                   	push   ebx
c001ba06:	e8 83 fa ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001ba0b:	83 c4 0c             	add    esp,0xc
c001ba0e:	6a 01                	push   0x1
c001ba10:	6a 00                	push   0x0
c001ba12:	53                   	push   ebx
c001ba13:	e8 c2 fb ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001ba18:	83 c4 0c             	add    esp,0xc
c001ba1b:	6a 01                	push   0x1
c001ba1d:	6a 01                	push   0x1
c001ba1f:	53                   	push   ebx
c001ba20:	e8 b5 fb ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001ba25:	83 c4 2c             	add    esp,0x2c
c001ba28:	31 c0                	xor    eax,eax
c001ba2a:	5b                   	pop    ebx
c001ba2b:	5e                   	pop    esi
c001ba2c:	5f                   	pop    edi
c001ba2d:	5d                   	pop    ebp
c001ba2e:	c3                   	ret    
c001ba2f:	90                   	nop

c001ba30 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ba30:	55                   	push   ebp
c001ba31:	57                   	push   edi
c001ba32:	56                   	push   esi
c001ba33:	53                   	push   ebx
c001ba34:	83 ec 1c             	sub    esp,0x1c
c001ba37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba3f:	8d 50 f8             	lea    edx,[eax-0x8]
c001ba42:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ba46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba4a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ba4e:	80 fa 03             	cmp    dl,0x3
c001ba51:	77 5d                	ja     c001bab0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ba53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba5b:	0f b6 db             	movzx  ebx,bl
c001ba5e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ba61:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ba65:	83 ca 80             	or     edx,0xffffff80
c001ba68:	0f b6 d2             	movzx  edx,dl
c001ba6b:	52                   	push   edx
c001ba6c:	6a 0c                	push   0xc
c001ba6e:	53                   	push   ebx
c001ba6f:	56                   	push   esi
c001ba70:	e8 59 f9 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba75:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ba7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba82:	0f b6 c0             	movzx  eax,al
c001ba85:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ba89:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ba8b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba90:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ba94:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ba98:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba9c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001baa4:	83 c4 2c             	add    esp,0x2c
c001baa7:	5b                   	pop    ebx
c001baa8:	5e                   	pop    esi
c001baa9:	5f                   	pop    edi
c001baaa:	5d                   	pop    ebp
c001baab:	e9 1e f9 ff ff       	jmp    c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bab0:	3c 07                	cmp    al,0x7
c001bab2:	77 10                	ja     c001bac4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bab4:	0f b6 db             	movzx  ebx,bl
c001bab7:	0f b6 d0             	movzx  edx,al
c001baba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bac2:	eb 2d                	jmp    c001baf1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bac4:	3c 0d                	cmp    al,0xd
c001bac6:	77 13                	ja     c001badb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bac8:	0f b6 db             	movzx  ebx,bl
c001bacb:	0f b6 c0             	movzx  eax,al
c001bace:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bad5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bad9:	eb 16                	jmp    c001baf1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001badb:	3c 15                	cmp    al,0x15
c001badd:	77 14                	ja     c001baf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001badf:	0f b6 db             	movzx  ebx,bl
c001bae2:	0f b6 c0             	movzx  eax,al
c001bae5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001baed:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001baf1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001baf3:	83 c4 1c             	add    esp,0x1c
c001baf6:	5b                   	pop    ebx
c001baf7:	5e                   	pop    esi
c001baf8:	5f                   	pop    edi
c001baf9:	5d                   	pop    ebp
c001bafa:	c3                   	ret    
c001bafb:	90                   	nop

c001bafc <IDE::detect()>:
c001bafc:	55                   	push   ebp
c001bafd:	57                   	push   edi
c001bafe:	56                   	push   esi
c001baff:	53                   	push   ebx
c001bb00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bb06:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bb0d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bb14:	0f 85 be 02 00 00    	jne    c001bdd8 <IDE::detect()+0x2dc>
c001bb1a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bb21:	31 f6                	xor    esi,esi
c001bb23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bb2b:	31 ed                	xor    ebp,ebp
c001bb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb31:	c1 e0 06             	shl    eax,0x6
c001bb34:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bb3c:	89 e8                	mov    eax,ebp
c001bb3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bb42:	c1 e0 04             	shl    eax,0x4
c001bb45:	83 c8 a0             	or     eax,0xffffffa0
c001bb48:	0f b6 c0             	movzx  eax,al
c001bb4b:	50                   	push   eax
c001bb4c:	6a 06                	push   0x6
c001bb4e:	56                   	push   esi
c001bb4f:	53                   	push   ebx
c001bb50:	e8 79 f8 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb55:	83 c4 0c             	add    esp,0xc
c001bb58:	6a 0c                	push   0xc
c001bb5a:	56                   	push   esi
c001bb5b:	53                   	push   ebx
c001bb5c:	e8 2d f9 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bb61:	83 c4 0c             	add    esp,0xc
c001bb64:	6a 0c                	push   0xc
c001bb66:	56                   	push   esi
c001bb67:	53                   	push   ebx
c001bb68:	e8 21 f9 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bb6d:	83 c4 0c             	add    esp,0xc
c001bb70:	6a 0c                	push   0xc
c001bb72:	56                   	push   esi
c001bb73:	53                   	push   ebx
c001bb74:	e8 15 f9 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bb79:	83 c4 0c             	add    esp,0xc
c001bb7c:	6a 0c                	push   0xc
c001bb7e:	56                   	push   esi
c001bb7f:	53                   	push   ebx
c001bb80:	e8 09 f9 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bb85:	68 ec 00 00 00       	push   0xec
c001bb8a:	6a 07                	push   0x7
c001bb8c:	56                   	push   esi
c001bb8d:	53                   	push   ebx
c001bb8e:	e8 3b f8 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb93:	83 c4 1c             	add    esp,0x1c
c001bb96:	6a 0c                	push   0xc
c001bb98:	56                   	push   esi
c001bb99:	53                   	push   ebx
c001bb9a:	e8 ef f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bb9f:	83 c4 0c             	add    esp,0xc
c001bba2:	6a 0c                	push   0xc
c001bba4:	56                   	push   esi
c001bba5:	53                   	push   ebx
c001bba6:	e8 e3 f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bbab:	83 c4 0c             	add    esp,0xc
c001bbae:	6a 0c                	push   0xc
c001bbb0:	56                   	push   esi
c001bbb1:	53                   	push   ebx
c001bbb2:	e8 d7 f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bbb7:	83 c4 0c             	add    esp,0xc
c001bbba:	6a 0c                	push   0xc
c001bbbc:	56                   	push   esi
c001bbbd:	53                   	push   ebx
c001bbbe:	e8 cb f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bbc3:	83 c4 0c             	add    esp,0xc
c001bbc6:	6a 0c                	push   0xc
c001bbc8:	56                   	push   esi
c001bbc9:	53                   	push   ebx
c001bbca:	e8 bf f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	84 c0                	test   al,al
c001bbd4:	0f 84 8b 01 00 00    	je     c001bd65 <IDE::detect()+0x269>
c001bbda:	31 ff                	xor    edi,edi
c001bbdc:	50                   	push   eax
c001bbdd:	6a 0c                	push   0xc
c001bbdf:	56                   	push   esi
c001bbe0:	53                   	push   ebx
c001bbe1:	e8 a8 f8 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bbe6:	83 c4 10             	add    esp,0x10
c001bbe9:	a8 01                	test   al,0x1
c001bbeb:	0f 85 8e 01 00 00    	jne    c001bd7f <IDE::detect()+0x283>
c001bbf1:	84 c0                	test   al,al
c001bbf3:	78 04                	js     c001bbf9 <IDE::detect()+0xfd>
c001bbf5:	a8 08                	test   al,0x8
c001bbf7:	75 27                	jne    c001bc20 <IDE::detect()+0x124>
c001bbf9:	47                   	inc    edi
c001bbfa:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bc00:	7e da                	jle    c001bbdc <IDE::detect()+0xe0>
c001bc02:	50                   	push   eax
c001bc03:	50                   	push   eax
c001bc04:	6a 00                	push   0x0
c001bc06:	68 40 4b 4c 00       	push   0x4c4b40
c001bc0b:	e8 e9 2a ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bc19:	75 c1                	jne    c001bbdc <IDE::detect()+0xe0>
c001bc1b:	e9 5f 01 00 00       	jmp    c001bd7f <IDE::detect()+0x283>
c001bc20:	31 c9                	xor    ecx,ecx
c001bc22:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bc26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bc2a:	83 ec 0c             	sub    esp,0xc
c001bc2d:	68 80 00 00 00       	push   0x80
c001bc32:	57                   	push   edi
c001bc33:	6a 00                	push   0x0
c001bc35:	56                   	push   esi
c001bc36:	53                   	push   ebx
c001bc37:	e8 f4 fd ff ff       	call   c001ba30 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bc3c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bc41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bc45:	89 d1                	mov    ecx,edx
c001bc47:	c1 e0 06             	shl    eax,0x6
c001bc4a:	01 d8                	add    eax,ebx
c001bc4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bc53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bc5a:	89 f2                	mov    edx,esi
c001bc5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bc62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bc66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bc6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bc70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bc77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bc7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001bc86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001bc8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001bc94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001bc9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001bca1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001bca5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bca9:	83 c4 20             	add    esp,0x20
c001bcac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001bcaf:	83 c0 02             	add    eax,0x2
c001bcb2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001bcb8:	83 c7 02             	add    edi,0x2
c001bcbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001bcbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001bcc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001bcc8:	75 e2                	jne    c001bcac <IDE::detect()+0x1b0>
c001bcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcce:	c1 e0 06             	shl    eax,0x6
c001bcd1:	01 d8                	add    eax,ebx
c001bcd3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001bcd9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001bce0:	66 c1 ea 09          	shr    dx,0x9
c001bce4:	83 e2 01             	and    edx,0x1
c001bce7:	84 c9                	test   cl,cl
c001bce9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001bcef:	75 2f                	jne    c001bd20 <IDE::detect()+0x224>
c001bcf1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001bcf7:	85 c0                	test   eax,eax
c001bcf9:	74 66                	je     c001bd61 <IDE::detect()+0x265>
c001bcfb:	50                   	push   eax
c001bcfc:	55                   	push   ebp
c001bcfd:	56                   	push   esi
c001bcfe:	68 2b 1b 02 c0       	push   0xc0021b2b
c001bd03:	e8 96 0e ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bd08:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bd0f:	e8 3a 64 ff ff       	call   c001214e <operator new(unsigned long)>
c001bd14:	89 c7                	mov    edi,eax
c001bd16:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd19:	e8 e8 02 00 00       	call   c001c006 <ATA::ATA()>
c001bd1e:	eb 28                	jmp    c001bd48 <IDE::detect()+0x24c>
c001bd20:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001bd26:	55                   	push   ebp
c001bd27:	56                   	push   esi
c001bd28:	68 5a 1b 02 c0       	push   0xc0021b5a
c001bd2d:	e8 6c 0e ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bd32:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001bd39:	e8 10 64 ff ff       	call   c001214e <operator new(unsigned long)>
c001bd3e:	89 c7                	mov    edi,eax
c001bd40:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd43:	e8 ee 08 00 00       	call   c001c636 <ATAPI::ATAPI()>
c001bd48:	5a                   	pop    edx
c001bd49:	59                   	pop    ecx
c001bd4a:	57                   	push   edi
c001bd4b:	53                   	push   ebx
c001bd4c:	e8 07 77 ff ff       	call   c0013458 <Device::addChild(Device*)>
c001bd51:	8b 07                	mov    eax,DWORD PTR [edi]
c001bd53:	53                   	push   ebx
c001bd54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd58:	6a 00                	push   0x0
c001bd5a:	57                   	push   edi
c001bd5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd5e:	83 c4 20             	add    esp,0x20
c001bd61:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001bd65:	4d                   	dec    ebp
c001bd66:	74 0a                	je     c001bd72 <IDE::detect()+0x276>
c001bd68:	bd 01 00 00 00       	mov    ebp,0x1
c001bd6d:	e9 bb fd ff ff       	jmp    c001bb2d <IDE::detect()+0x31>
c001bd72:	4e                   	dec    esi
c001bd73:	74 63                	je     c001bdd8 <IDE::detect()+0x2dc>
c001bd75:	be 01 00 00 00       	mov    esi,0x1
c001bd7a:	e9 ac fd ff ff       	jmp    c001bb2b <IDE::detect()+0x2f>
c001bd7f:	50                   	push   eax
c001bd80:	6a 04                	push   0x4
c001bd82:	56                   	push   esi
c001bd83:	53                   	push   ebx
c001bd84:	e8 05 f7 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bd89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bd8d:	83 c4 0c             	add    esp,0xc
c001bd90:	6a 05                	push   0x5
c001bd92:	56                   	push   esi
c001bd93:	53                   	push   ebx
c001bd94:	e8 f5 f6 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bda0:	80 fa 14             	cmp    dl,0x14
c001bda3:	75 04                	jne    c001bda9 <IDE::detect()+0x2ad>
c001bda5:	3c eb                	cmp    al,0xeb
c001bda7:	eb 07                	jmp    c001bdb0 <IDE::detect()+0x2b4>
c001bda9:	3c 96                	cmp    al,0x96
c001bdab:	75 b8                	jne    c001bd65 <IDE::detect()+0x269>
c001bdad:	80 fa 69             	cmp    dl,0x69
c001bdb0:	75 b3                	jne    c001bd65 <IDE::detect()+0x269>
c001bdb2:	68 a1 00 00 00       	push   0xa1
c001bdb7:	6a 07                	push   0x7
c001bdb9:	56                   	push   esi
c001bdba:	53                   	push   ebx
c001bdbb:	e8 0e f6 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc0:	5f                   	pop    edi
c001bdc1:	58                   	pop    eax
c001bdc2:	6a 00                	push   0x0
c001bdc4:	68 40 42 0f 00       	push   0xf4240
c001bdc9:	e8 2b 29 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c001bdce:	83 c4 10             	add    esp,0x10
c001bdd1:	b1 01                	mov    cl,0x1
c001bdd3:	e9 4a fe ff ff       	jmp    c001bc22 <IDE::detect()+0x126>
c001bdd8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bdde:	5b                   	pop    ebx
c001bddf:	5e                   	pop    esi
c001bde0:	5f                   	pop    edi
c001bde1:	5d                   	pop    ebp
c001bde2:	c3                   	ret    
c001bde3:	90                   	nop

c001bde4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bde4:	55                   	push   ebp
c001bde5:	57                   	push   edi
c001bde6:	56                   	push   esi
c001bde7:	53                   	push   ebx
c001bde8:	83 ec 1c             	sub    esp,0x1c
c001bdeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bdf3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bdf7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001bdfb:	88 c3                	mov    bl,al
c001bdfd:	84 c0                	test   al,al
c001bdff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be03:	0f 84 67 01 00 00    	je     c001bf70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001be09:	83 ec 0c             	sub    esp,0xc
c001be0c:	68 8b 1b 02 c0       	push   0xc0021b8b
c001be11:	e8 88 0d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be1d:	3c 01                	cmp    al,0x1
c001be1f:	75 17                	jne    c001be38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001be21:	83 ec 0c             	sub    esp,0xc
c001be24:	b3 13                	mov    bl,0x13
c001be26:	68 97 1b 02 c0       	push   0xc0021b97
c001be2b:	e8 6e 0d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	e9 25 01 00 00       	jmp    c001bf5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001be38:	3c 02                	cmp    al,0x2
c001be3a:	0f 85 ef 00 00 00    	jne    c001bf2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001be40:	d1 e6                	shl    esi,1
c001be42:	09 ee                	or     esi,ebp
c001be44:	52                   	push   edx
c001be45:	89 f0                	mov    eax,esi
c001be47:	6a 01                	push   0x1
c001be49:	0f b6 f0             	movzx  esi,al
c001be4c:	c1 e6 06             	shl    esi,0x6
c001be4f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001be57:	50                   	push   eax
c001be58:	57                   	push   edi
c001be59:	e8 30 f6 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	89 c6                	mov    esi,eax
c001be63:	a8 01                	test   al,0x1
c001be65:	74 12                	je     c001be79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001be67:	83 ec 0c             	sub    esp,0xc
c001be6a:	b3 07                	mov    bl,0x7
c001be6c:	68 ac 1b 02 c0       	push   0xc0021bac
c001be71:	e8 28 0d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001be76:	83 c4 10             	add    esp,0x10
c001be79:	f7 c6 02 00 00 00    	test   esi,0x2
c001be7f:	74 12                	je     c001be93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001be81:	83 ec 0c             	sub    esp,0xc
c001be84:	b3 03                	mov    bl,0x3
c001be86:	68 ca 1b 02 c0       	push   0xc0021bca
c001be8b:	e8 0e 0d ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001be90:	83 c4 10             	add    esp,0x10
c001be93:	f7 c6 04 00 00 00    	test   esi,0x4
c001be99:	74 12                	je     c001bead <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001be9b:	83 ec 0c             	sub    esp,0xc
c001be9e:	b3 14                	mov    bl,0x14
c001bea0:	68 ea 1b 02 c0       	push   0xc0021bea
c001bea5:	e8 f4 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	f7 c6 08 00 00 00    	test   esi,0x8
c001beb3:	74 12                	je     c001bec7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	b3 03                	mov    bl,0x3
c001beba:	68 ca 1b 02 c0       	push   0xc0021bca
c001bebf:	e8 da 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	f7 c6 10 00 00 00    	test   esi,0x10
c001becd:	74 12                	je     c001bee1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001becf:	83 ec 0c             	sub    esp,0xc
c001bed2:	b3 15                	mov    bl,0x15
c001bed4:	68 02 1c 02 c0       	push   0xc0021c02
c001bed9:	e8 c0 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bede:	83 c4 10             	add    esp,0x10
c001bee1:	f7 c6 20 00 00 00    	test   esi,0x20
c001bee7:	74 12                	je     c001befb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001bee9:	83 ec 0c             	sub    esp,0xc
c001beec:	b3 03                	mov    bl,0x3
c001beee:	68 ca 1b 02 c0       	push   0xc0021bca
c001bef3:	e8 a6 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	f7 c6 40 00 00 00    	test   esi,0x40
c001bf01:	74 12                	je     c001bf15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001bf03:	83 ec 0c             	sub    esp,0xc
c001bf06:	b3 16                	mov    bl,0x16
c001bf08:	68 1c 1c 02 c0       	push   0xc0021c1c
c001bf0d:	e8 8c 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	89 f0                	mov    eax,esi
c001bf17:	84 c0                	test   al,al
c001bf19:	79 42                	jns    c001bf5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bf1b:	83 ec 0c             	sub    esp,0xc
c001bf1e:	b3 0d                	mov    bl,0xd
c001bf20:	68 3d 1c 02 c0       	push   0xc0021c3d
c001bf25:	e8 74 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bf2a:	83 c4 10             	add    esp,0x10
c001bf2d:	eb 2e                	jmp    c001bf5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bf2f:	3c 03                	cmp    al,0x3
c001bf31:	75 14                	jne    c001bf47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001bf33:	83 ec 0c             	sub    esp,0xc
c001bf36:	b3 17                	mov    bl,0x17
c001bf38:	68 51 1c 02 c0       	push   0xc0021c51
c001bf3d:	e8 5c 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	eb 16                	jmp    c001bf5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bf47:	3c 04                	cmp    al,0x4
c001bf49:	75 12                	jne    c001bf5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	b3 08                	mov    bl,0x8
c001bf50:	68 67 1c 02 c0       	push   0xc0021c67
c001bf55:	e8 44 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	50                   	push   eax
c001bf5e:	50                   	push   eax
c001bf5f:	0f b6 c3             	movzx  eax,bl
c001bf62:	50                   	push   eax
c001bf63:	68 7f 1c 02 c0       	push   0xc0021c7f
c001bf68:	e8 31 0c ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	83 c4 1c             	add    esp,0x1c
c001bf73:	88 d8                	mov    al,bl
c001bf75:	5b                   	pop    ebx
c001bf76:	5e                   	pop    esi
c001bf77:	5f                   	pop    edi
c001bf78:	5d                   	pop    ebp
c001bf79:	c3                   	ret    

c001bf7a <IDE::polling(unsigned char, unsigned int)>:
c001bf7a:	57                   	push   edi
c001bf7b:	56                   	push   esi
c001bf7c:	53                   	push   ebx
c001bf7d:	bb 04 00 00 00       	mov    ebx,0x4
c001bf82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bf86:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bf8b:	52                   	push   edx
c001bf8c:	6a 0c                	push   0xc
c001bf8e:	56                   	push   esi
c001bf8f:	57                   	push   edi
c001bf90:	e8 f9 f4 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	4b                   	dec    ebx
c001bf99:	75 f0                	jne    c001bf8b <IDE::polling(unsigned char, unsigned int)+0x11>
c001bf9b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bfa0:	50                   	push   eax
c001bfa1:	6a 0c                	push   0xc
c001bfa3:	56                   	push   esi
c001bfa4:	57                   	push   edi
c001bfa5:	e8 e4 f4 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001bfaa:	83 c4 10             	add    esp,0x10
c001bfad:	a8 01                	test   al,0x1
c001bfaf:	74 12                	je     c001bfc3 <IDE::polling(unsigned char, unsigned int)+0x49>
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	68 99 1c 02 c0       	push   0xc0021c99
c001bfb9:	e8 e0 0b ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	eb 17                	jmp    c001bfda <IDE::polling(unsigned char, unsigned int)+0x60>
c001bfc3:	a8 20                	test   al,0x20
c001bfc5:	75 0f                	jne    c001bfd6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001bfc7:	4b                   	dec    ebx
c001bfc8:	74 10                	je     c001bfda <IDE::polling(unsigned char, unsigned int)+0x60>
c001bfca:	84 c0                	test   al,al
c001bfcc:	78 d2                	js     c001bfa0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bfce:	a8 08                	test   al,0x8
c001bfd0:	74 ce                	je     c001bfa0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bfd2:	31 c0                	xor    eax,eax
c001bfd4:	eb 06                	jmp    c001bfdc <IDE::polling(unsigned char, unsigned int)+0x62>
c001bfd6:	b0 01                	mov    al,0x1
c001bfd8:	eb 02                	jmp    c001bfdc <IDE::polling(unsigned char, unsigned int)+0x62>
c001bfda:	b0 02                	mov    al,0x2
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	5f                   	pop    edi
c001bfdf:	c3                   	ret    

c001bfe0 <ATA::close(int, int, void*)>:
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bfed:	85 c0                	test   eax,eax
c001bfef:	74 0c                	je     c001bffd <ATA::close(int, int, void*)+0x1d>
c001bff1:	83 ec 0c             	sub    esp,0xc
c001bff4:	8b 10                	mov    edx,DWORD PTR [eax]
c001bff6:	50                   	push   eax
c001bff7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	31 c0                	xor    eax,eax
c001bfff:	83 c4 0c             	add    esp,0xc
c001c002:	c3                   	ret    
c001c003:	90                   	nop

c001c004 <ATA::powerSaving(PowerSavingLevel)>:
c001c004:	c3                   	ret    
c001c005:	90                   	nop

c001c006 <ATA::ATA()>:
c001c006:	83 ec 0c             	sub    esp,0xc
c001c009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00d:	83 ec 04             	sub    esp,0x4
c001c010:	68 00 02 00 00       	push   0x200
c001c015:	68 dc 1c 02 c0       	push   0xc0021cdc
c001c01a:	50                   	push   eax
c001c01b:	e8 3e 78 ff ff       	call   c001385e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02c:	89 10                	mov    DWORD PTR [eax],edx
c001c02e:	90                   	nop
c001c02f:	83 c4 0c             	add    esp,0xc
c001c032:	c3                   	ret    
c001c033:	90                   	nop

c001c034 <ATA::flush(bool)>:
c001c034:	53                   	push   ebx
c001c035:	83 ec 08             	sub    esp,0x8
c001c038:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c03d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c041:	19 c0                	sbb    eax,eax
c001c043:	83 e0 fd             	and    eax,0xfffffffd
c001c046:	05 ea 00 00 00       	add    eax,0xea
c001c04b:	50                   	push   eax
c001c04c:	6a 07                	push   0x7
c001c04e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c055:	50                   	push   eax
c001c056:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c05c:	e8 6d f3 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c061:	83 c4 0c             	add    esp,0xc
c001c064:	6a 00                	push   0x0
c001c066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c06d:	50                   	push   eax
c001c06e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c074:	e8 01 ff ff ff       	call   c001bf7a <IDE::polling(unsigned char, unsigned int)>
c001c079:	83 c4 18             	add    esp,0x18
c001c07c:	5b                   	pop    ebx
c001c07d:	c3                   	ret    

c001c07e <ATA::readyForCommand()>:
c001c07e:	56                   	push   esi
c001c07f:	53                   	push   ebx
c001c080:	31 db                	xor    ebx,ebx
c001c082:	50                   	push   eax
c001c083:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c087:	50                   	push   eax
c001c088:	6a 0c                	push   0xc
c001c08a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c091:	50                   	push   eax
c001c092:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c098:	e8 f1 f3 ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001c09d:	83 c4 10             	add    esp,0x10
c001c0a0:	a8 88                	test   al,0x88
c001c0a2:	74 23                	je     c001c0c7 <ATA::readyForCommand()+0x49>
c001c0a4:	43                   	inc    ebx
c001c0a5:	83 fb 63             	cmp    ebx,0x63
c001c0a8:	7e dd                	jle    c001c087 <ATA::readyForCommand()+0x9>
c001c0aa:	51                   	push   ecx
c001c0ab:	51                   	push   ecx
c001c0ac:	6a 00                	push   0x0
c001c0ae:	68 40 42 0f 00       	push   0xf4240
c001c0b3:	e8 41 26 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c001c0b8:	83 c4 10             	add    esp,0x10
c001c0bb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c0c1:	75 c4                	jne    c001c087 <ATA::readyForCommand()+0x9>
c001c0c3:	31 c0                	xor    eax,eax
c001c0c5:	eb 02                	jmp    c001c0c9 <ATA::readyForCommand()+0x4b>
c001c0c7:	b0 01                	mov    al,0x1
c001c0c9:	5a                   	pop    edx
c001c0ca:	5b                   	pop    ebx
c001c0cb:	5e                   	pop    esi
c001c0cc:	c3                   	ret    
c001c0cd:	90                   	nop

c001c0ce <ATA::access(unsigned long long, int, void*, bool)>:
c001c0ce:	55                   	push   ebp
c001c0cf:	57                   	push   edi
c001c0d0:	56                   	push   esi
c001c0d1:	53                   	push   ebx
c001c0d2:	83 ec 2c             	sub    esp,0x2c
c001c0d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c0d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c0dd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c0e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c0e9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c0ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c0f1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c0f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0fb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c101:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c105:	c1 e0 06             	shl    eax,0x6
c001c108:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c110:	74 5d                	je     c001c16f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c112:	89 fa                	mov    edx,edi
c001c114:	89 f0                	mov    eax,esi
c001c116:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c11a:	c1 ea 1c             	shr    edx,0x1c
c001c11d:	89 d1                	mov    ecx,edx
c001c11f:	09 c1                	or     ecx,eax
c001c121:	74 25                	je     c001c148 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c123:	31 ed                	xor    ebp,ebp
c001c125:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c12c:	89 fa                	mov    edx,edi
c001c12e:	89 f0                	mov    eax,esi
c001c130:	0f ad d0             	shrd   eax,edx,cl
c001c133:	d3 ea                	shr    edx,cl
c001c135:	f6 c1 20             	test   cl,0x20
c001c138:	74 02                	je     c001c13c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c13a:	89 d0                	mov    eax,edx
c001c13c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c140:	45                   	inc    ebp
c001c141:	83 fd 06             	cmp    ebp,0x6
c001c144:	75 df                	jne    c001c125 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c146:	eb 76                	jmp    c001c1be <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c148:	89 f0                	mov    eax,esi
c001c14a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c14f:	89 fa                	mov    edx,edi
c001c151:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c158:	0f ac d0 10          	shrd   eax,edx,0x10
c001c15c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c161:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c165:	c1 ee 18             	shr    esi,0x18
c001c168:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c16d:	eb 56                	jmp    c001c1c5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c16f:	6a 00                	push   0x0
c001c171:	6a 3f                	push   0x3f
c001c173:	57                   	push   edi
c001c174:	56                   	push   esi
c001c175:	e8 e2 1e 00 00       	call   c001e05c <__umoddi3>
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	40                   	inc    eax
c001c17e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c182:	6a 00                	push   0x0
c001c184:	68 f0 03 00 00       	push   0x3f0
c001c189:	57                   	push   edi
c001c18a:	56                   	push   esi
c001c18b:	e8 cc 1d 00 00       	call   c001df5c <__udivdi3>
c001c190:	83 c4 10             	add    esp,0x10
c001c193:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c198:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c19f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c1a4:	6a 00                	push   0x0
c001c1a6:	6a 3f                	push   0x3f
c001c1a8:	57                   	push   edi
c001c1a9:	56                   	push   esi
c001c1aa:	e8 ad 1d 00 00       	call   c001df5c <__udivdi3>
c001c1af:	83 c4 10             	add    esp,0x10
c001c1b2:	89 c6                	mov    esi,eax
c001c1b4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c1b9:	83 e6 0f             	and    esi,0xf
c001c1bc:	eb 07                	jmp    c001c1c5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c1be:	31 f6                	xor    esi,esi
c001c1c0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c1c5:	bf 01 00 00 00       	mov    edi,0x1
c001c1ca:	50                   	push   eax
c001c1cb:	6a 00                	push   0x0
c001c1cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1d4:	50                   	push   eax
c001c1d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1d9:	e8 fc f3 ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001c1de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1e1:	e8 98 fe ff ff       	call   c001c07e <ATA::readyForCommand()>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	84 c0                	test   al,al
c001c1eb:	0f 84 50 02 00 00    	je     c001c441 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c1f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c1f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c1fd:	c1 e0 04             	shl    eax,0x4
c001c200:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c207:	09 c6                	or     esi,eax
c001c209:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c20e:	75 05                	jne    c001c215 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c210:	83 ce a0             	or     esi,0xffffffa0
c001c213:	eb 03                	jmp    c001c218 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c215:	83 ce e0             	or     esi,0xffffffe0
c001c218:	89 f0                	mov    eax,esi
c001c21a:	0f b6 f0             	movzx  esi,al
c001c21d:	56                   	push   esi
c001c21e:	6a 06                	push   0x6
c001c220:	51                   	push   ecx
c001c221:	52                   	push   edx
c001c222:	e8 a7 f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	6a 00                	push   0x0
c001c22c:	6a 01                	push   0x1
c001c22e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c235:	50                   	push   eax
c001c236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c23c:	e8 8d f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c249:	75 6e                	jne    c001c2b9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c24b:	6a 00                	push   0x0
c001c24d:	6a 08                	push   0x8
c001c24f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c256:	50                   	push   eax
c001c257:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c25d:	e8 6c f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c262:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c267:	50                   	push   eax
c001c268:	6a 09                	push   0x9
c001c26a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c271:	50                   	push   eax
c001c272:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c278:	e8 51 f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c27d:	83 c4 20             	add    esp,0x20
c001c280:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c285:	50                   	push   eax
c001c286:	6a 0a                	push   0xa
c001c288:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c28f:	50                   	push   eax
c001c290:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c296:	e8 33 f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c29b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c2a0:	50                   	push   eax
c001c2a1:	6a 0b                	push   0xb
c001c2a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2aa:	50                   	push   eax
c001c2ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2b1:	e8 18 f1 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2b6:	83 c4 20             	add    esp,0x20
c001c2b9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c2be:	50                   	push   eax
c001c2bf:	6a 02                	push   0x2
c001c2c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2c8:	50                   	push   eax
c001c2c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2cf:	e8 fa f0 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2d4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c2d9:	50                   	push   eax
c001c2da:	6a 03                	push   0x3
c001c2dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2e3:	50                   	push   eax
c001c2e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2ea:	e8 df f0 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2ef:	83 c4 20             	add    esp,0x20
c001c2f2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c2f7:	50                   	push   eax
c001c2f8:	6a 04                	push   0x4
c001c2fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c301:	50                   	push   eax
c001c302:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c308:	e8 c1 f0 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c30d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c312:	50                   	push   eax
c001c313:	6a 05                	push   0x5
c001c315:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c31c:	50                   	push   eax
c001c31d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c323:	e8 a6 f0 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c328:	83 c4 20             	add    esp,0x20
c001c32b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c330:	0f 94 c0             	sete   al
c001c333:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c338:	74 09                	je     c001c343 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c33a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c341:	eb 07                	jmp    c001c34a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c343:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c34a:	0f b6 c0             	movzx  eax,al
c001c34d:	50                   	push   eax
c001c34e:	6a 07                	push   0x7
c001c350:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c357:	50                   	push   eax
c001c358:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c35e:	e8 6b f0 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c363:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c367:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	85 f6                	test   esi,esi
c001c370:	0f 84 ac 00 00 00    	je     c001c422 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c376:	50                   	push   eax
c001c377:	6a 01                	push   0x1
c001c379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c380:	50                   	push   eax
c001c381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c387:	e8 ee fb ff ff       	call   c001bf7a <IDE::polling(unsigned char, unsigned int)>
c001c38c:	83 c4 10             	add    esp,0x10
c001c38f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c395:	84 c0                	test   al,al
c001c397:	74 20                	je     c001c3b9 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c399:	0f b6 f8             	movzx  edi,al
c001c39c:	0f b6 d2             	movzx  edx,dl
c001c39f:	57                   	push   edi
c001c3a0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c3a7:	50                   	push   eax
c001c3a8:	52                   	push   edx
c001c3a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3af:	e8 30 fa ff ff       	call   c001bde4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c3b4:	e9 85 00 00 00       	jmp    c001c43e <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c3b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c3be:	74 41                	je     c001c401 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c3c0:	31 c9                	xor    ecx,ecx
c001c3c2:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c3c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3ca:	50                   	push   eax
c001c3cb:	50                   	push   eax
c001c3cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3d3:	50                   	push   eax
c001c3d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3da:	e8 dd ef ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c3df:	89 c2                	mov    edx,eax
c001c3e1:	89 e8                	mov    eax,ebp
c001c3e3:	66 ef                	out    dx,ax
c001c3e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3e9:	83 c4 10             	add    esp,0x10
c001c3ec:	41                   	inc    ecx
c001c3ed:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c3f3:	75 cd                	jne    c001c3c2 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c3f5:	4e                   	dec    esi
c001c3f6:	81 c7 00 02 00 00    	add    edi,0x200
c001c3fc:	e9 6d ff ff ff       	jmp    c001c36e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c401:	0f b6 d2             	movzx  edx,dl
c001c404:	51                   	push   ecx
c001c405:	51                   	push   ecx
c001c406:	52                   	push   edx
c001c407:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c40d:	e8 aa ef ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c412:	b9 00 01 00 00       	mov    ecx,0x100
c001c417:	89 c2                	mov    edx,eax
c001c419:	fc                   	cld    
c001c41a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	eb d3                	jmp    c001c3f5 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c422:	31 ff                	xor    edi,edi
c001c424:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c429:	74 16                	je     c001c441 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c42b:	50                   	push   eax
c001c42c:	50                   	push   eax
c001c42d:	31 c0                	xor    eax,eax
c001c42f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c434:	0f 94 c0             	sete   al
c001c437:	50                   	push   eax
c001c438:	53                   	push   ebx
c001c439:	e8 f6 fb ff ff       	call   c001c034 <ATA::flush(bool)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	83 c4 2c             	add    esp,0x2c
c001c444:	89 f8                	mov    eax,edi
c001c446:	5b                   	pop    ebx
c001c447:	5e                   	pop    esi
c001c448:	5f                   	pop    edi
c001c449:	5d                   	pop    ebp
c001c44a:	c3                   	ret    
c001c44b:	90                   	nop

c001c44c <ATA::read(unsigned long long, int, void*)>:
c001c44c:	57                   	push   edi
c001c44d:	b8 04 00 00 00       	mov    eax,0x4
c001c452:	56                   	push   esi
c001c453:	53                   	push   ebx
c001c454:	83 ec 10             	sub    esp,0x10
c001c457:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c45b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c45f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c462:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c466:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c46a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c470:	77 3b                	ja     c001c4ad <ATA::read(unsigned long long, int, void*)+0x61>
c001c472:	b8 06 00 00 00       	mov    eax,0x6
c001c477:	85 d2                	test   edx,edx
c001c479:	74 32                	je     c001c4ad <ATA::read(unsigned long long, int, void*)+0x61>
c001c47b:	50                   	push   eax
c001c47c:	50                   	push   eax
c001c47d:	6a 00                	push   0x0
c001c47f:	52                   	push   edx
c001c480:	53                   	push   ebx
c001c481:	57                   	push   edi
c001c482:	56                   	push   esi
c001c483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c487:	e8 42 fc ff ff       	call   c001c0ce <ATA::access(unsigned long long, int, void*, bool)>
c001c48c:	83 c4 20             	add    esp,0x20
c001c48f:	85 c0                	test   eax,eax
c001c491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c495:	75 11                	jne    c001c4a8 <ATA::read(unsigned long long, int, void*)+0x5c>
c001c497:	01 1d c4 49 02 c0    	add    DWORD PTR ds:0xc00249c4,ebx
c001c49d:	e8 2a 3b ff ff       	call   c000ffcc <VgaText::updateDiskUsage()>
c001c4a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4a6:	eb 05                	jmp    c001c4ad <ATA::read(unsigned long long, int, void*)+0x61>
c001c4a8:	b8 01 00 00 00       	mov    eax,0x1
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	5b                   	pop    ebx
c001c4b1:	5e                   	pop    esi
c001c4b2:	5f                   	pop    edi
c001c4b3:	c3                   	ret    

c001c4b4 <ATA::write(unsigned long long, int, void*)>:
c001c4b4:	57                   	push   edi
c001c4b5:	b8 04 00 00 00       	mov    eax,0x4
c001c4ba:	56                   	push   esi
c001c4bb:	53                   	push   ebx
c001c4bc:	83 ec 10             	sub    esp,0x10
c001c4bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c4c3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c4c7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c4ca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c4ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c4d2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c4d8:	77 3b                	ja     c001c515 <ATA::write(unsigned long long, int, void*)+0x61>
c001c4da:	b8 06 00 00 00       	mov    eax,0x6
c001c4df:	85 d2                	test   edx,edx
c001c4e1:	74 32                	je     c001c515 <ATA::write(unsigned long long, int, void*)+0x61>
c001c4e3:	50                   	push   eax
c001c4e4:	50                   	push   eax
c001c4e5:	6a 01                	push   0x1
c001c4e7:	52                   	push   edx
c001c4e8:	53                   	push   ebx
c001c4e9:	57                   	push   edi
c001c4ea:	56                   	push   esi
c001c4eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c4ef:	e8 da fb ff ff       	call   c001c0ce <ATA::access(unsigned long long, int, void*, bool)>
c001c4f4:	83 c4 20             	add    esp,0x20
c001c4f7:	85 c0                	test   eax,eax
c001c4f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4fd:	75 11                	jne    c001c510 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c4ff:	01 1d c0 49 02 c0    	add    DWORD PTR ds:0xc00249c0,ebx
c001c505:	e8 c2 3a ff ff       	call   c000ffcc <VgaText::updateDiskUsage()>
c001c50a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c50e:	eb 05                	jmp    c001c515 <ATA::write(unsigned long long, int, void*)+0x61>
c001c510:	b8 01 00 00 00       	mov    eax,0x1
c001c515:	83 c4 10             	add    esp,0x10
c001c518:	5b                   	pop    ebx
c001c519:	5e                   	pop    esi
c001c51a:	5f                   	pop    edi
c001c51b:	c3                   	ret    

c001c51c <ATA::detectCHS()>:
c001c51c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c520:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c526:	c1 e0 06             	shl    eax,0x6
c001c529:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c52f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c539:	c7 44 24 04 eb 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ceb
c001c541:	e9 76 07 ff ff       	jmp    c000ccbc <panic(char const*)>

c001c546 <ATA::open(int, int, void*)>:
c001c546:	53                   	push   ebx
c001c547:	83 ec 08             	sub    esp,0x8
c001c54a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c54e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c552:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c556:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c55c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c562:	c1 e0 06             	shl    eax,0x6
c001c565:	01 d0                	add    eax,edx
c001c567:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c56e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c574:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c57b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c585:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c58b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c592:	75 0c                	jne    c001c5a0 <ATA::open(int, int, void*)+0x5a>
c001c594:	83 ec 0c             	sub    esp,0xc
c001c597:	53                   	push   ebx
c001c598:	e8 7f ff ff ff       	call   c001c51c <ATA::detectCHS()>
c001c59d:	83 c4 10             	add    esp,0x10
c001c5a0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c5a6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c5ac:	c1 e0 06             	shl    eax,0x6
c001c5af:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c5b6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c5c0:	d1 e8                	shr    eax,1
c001c5c2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c5c8:	6a 04                	push   0x4
c001c5ca:	6a 0c                	push   0xc
c001c5cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5d3:	50                   	push   eax
c001c5d4:	52                   	push   edx
c001c5d5:	e8 f4 ed ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5da:	90                   	nop
c001c5db:	90                   	nop
c001c5dc:	6a 00                	push   0x0
c001c5de:	6a 0c                	push   0xc
c001c5e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5e7:	50                   	push   eax
c001c5e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5ee:	e8 db ed ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5f3:	83 c4 14             	add    esp,0x14
c001c5f6:	53                   	push   ebx
c001c5f7:	e8 ca 72 ff ff       	call   c00138c6 <PhysicalDisk::startCache()>
c001c5fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5ff:	e8 1a 8b ff ff       	call   c001511e <createPartitionsForDisk(PhysicalDisk*)>
c001c604:	31 c0                	xor    eax,eax
c001c606:	83 c4 18             	add    esp,0x18
c001c609:	5b                   	pop    ebx
c001c60a:	c3                   	ret    
c001c60b:	90                   	nop

c001c60c <ATAPI::write(unsigned long long, int, void*)>:
c001c60c:	b8 03 00 00 00       	mov    eax,0x3
c001c611:	c3                   	ret    

c001c612 <ATAPI::close(int, int, void*)>:
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c619:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c61f:	85 c0                	test   eax,eax
c001c621:	74 0c                	je     c001c62f <ATAPI::close(int, int, void*)+0x1d>
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	8b 10                	mov    edx,DWORD PTR [eax]
c001c628:	50                   	push   eax
c001c629:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c62c:	83 c4 10             	add    esp,0x10
c001c62f:	31 c0                	xor    eax,eax
c001c631:	83 c4 0c             	add    esp,0xc
c001c634:	c3                   	ret    
c001c635:	90                   	nop

c001c636 <ATAPI::ATAPI()>:
c001c636:	83 ec 0c             	sub    esp,0xc
c001c639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63d:	83 ec 04             	sub    esp,0x4
c001c640:	68 00 08 00 00       	push   0x800
c001c645:	68 34 1d 02 c0       	push   0xc0021d34
c001c64a:	50                   	push   eax
c001c64b:	e8 0e 72 ff ff       	call   c001385e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c650:	83 c4 10             	add    esp,0x10
c001c653:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	89 10                	mov    DWORD PTR [eax],edx
c001c65e:	90                   	nop
c001c65f:	83 c4 0c             	add    esp,0xc
c001c662:	c3                   	ret    
c001c663:	90                   	nop

c001c664 <ATAPI::readyForCommand()>:
c001c664:	56                   	push   esi
c001c665:	53                   	push   ebx
c001c666:	31 db                	xor    ebx,ebx
c001c668:	50                   	push   eax
c001c669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c66d:	50                   	push   eax
c001c66e:	6a 0c                	push   0xc
c001c670:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c677:	50                   	push   eax
c001c678:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c67e:	e8 0b ee ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001c683:	83 c4 10             	add    esp,0x10
c001c686:	a8 88                	test   al,0x88
c001c688:	74 23                	je     c001c6ad <ATAPI::readyForCommand()+0x49>
c001c68a:	43                   	inc    ebx
c001c68b:	83 fb 63             	cmp    ebx,0x63
c001c68e:	7e dd                	jle    c001c66d <ATAPI::readyForCommand()+0x9>
c001c690:	51                   	push   ecx
c001c691:	51                   	push   ecx
c001c692:	6a 00                	push   0x0
c001c694:	68 40 42 0f 00       	push   0xf4240
c001c699:	e8 5b 20 ff ff       	call   c000e6f9 <nanoSleep(unsigned long long)>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6a7:	75 c4                	jne    c001c66d <ATAPI::readyForCommand()+0x9>
c001c6a9:	31 c0                	xor    eax,eax
c001c6ab:	eb 02                	jmp    c001c6af <ATAPI::readyForCommand()+0x4b>
c001c6ad:	b0 01                	mov    al,0x1
c001c6af:	5a                   	pop    edx
c001c6b0:	5b                   	pop    ebx
c001c6b1:	5e                   	pop    esi
c001c6b2:	c3                   	ret    
c001c6b3:	90                   	nop

c001c6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c6b4:	55                   	push   ebp
c001c6b5:	57                   	push   edi
c001c6b6:	56                   	push   esi
c001c6b7:	53                   	push   ebx
c001c6b8:	83 ec 20             	sub    esp,0x20
c001c6bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c6bf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c6c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c6c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c6cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c6cf:	6a 01                	push   0x1
c001c6d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6d8:	50                   	push   eax
c001c6d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6df:	e8 f6 ee ff ff       	call   c001b5da <IDE::enableIRQs(unsigned char, bool)>
c001c6e4:	5e                   	pop    esi
c001c6e5:	58                   	pop    eax
c001c6e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ed:	50                   	push   eax
c001c6ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6f4:	e8 af ec ff ff       	call   c001b3a8 <IDE::prepareInterrupt(unsigned char)>
c001c6f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6fc:	e8 63 ff ff ff       	call   c001c664 <ATAPI::readyForCommand()>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	84 c0                	test   al,al
c001c706:	75 0a                	jne    c001c712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c708:	bb 01 00 00 00       	mov    ebx,0x1
c001c70d:	e9 57 02 00 00       	jmp    c001c969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c712:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c718:	c1 e0 04             	shl    eax,0x4
c001c71b:	0f b6 c0             	movzx  eax,al
c001c71e:	50                   	push   eax
c001c71f:	6a 06                	push   0x6
c001c721:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c728:	50                   	push   eax
c001c729:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c72f:	e8 9a ec ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c734:	6a 00                	push   0x0
c001c736:	6a 01                	push   0x1
c001c738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c73f:	50                   	push   eax
c001c740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c746:	e8 83 ec ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c74b:	83 c4 20             	add    esp,0x20
c001c74e:	0f b6 c3             	movzx  eax,bl
c001c751:	0f b6 df             	movzx  ebx,bh
c001c754:	50                   	push   eax
c001c755:	6a 04                	push   0x4
c001c757:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c75e:	50                   	push   eax
c001c75f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c765:	e8 64 ec ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c76a:	53                   	push   ebx
c001c76b:	6a 05                	push   0x5
c001c76d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c774:	50                   	push   eax
c001c775:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c77b:	e8 4e ec ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c780:	83 c4 20             	add    esp,0x20
c001c783:	68 a0 00 00 00       	push   0xa0
c001c788:	6a 07                	push   0x7
c001c78a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c791:	50                   	push   eax
c001c792:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c798:	e8 31 ec ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c79d:	83 c4 0c             	add    esp,0xc
c001c7a0:	6a 01                	push   0x1
c001c7a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c7a9:	50                   	push   eax
c001c7aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7b0:	e8 c5 f7 ff ff       	call   c001bf7a <IDE::polling(unsigned char, unsigned int)>
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c7be:	84 c0                	test   al,al
c001c7c0:	74 23                	je     c001c7e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c7c2:	0f b6 d8             	movzx  ebx,al
c001c7c5:	0f b6 d2             	movzx  edx,dl
c001c7c8:	53                   	push   ebx
c001c7c9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c7d0:	50                   	push   eax
c001c7d1:	52                   	push   edx
c001c7d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7d8:	e8 07 f6 ff ff       	call   c001bde4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c7dd:	83 c4 10             	add    esp,0x10
c001c7e0:	e9 84 01 00 00       	jmp    c001c969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c7e5:	0f b6 d2             	movzx  edx,dl
c001c7e8:	53                   	push   ebx
c001c7e9:	53                   	push   ebx
c001c7ea:	52                   	push   edx
c001c7eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7f1:	e8 c6 eb ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c7f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c7fa:	b9 06 00 00 00       	mov    ecx,0x6
c001c7ff:	89 c2                	mov    edx,eax
c001c801:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c804:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c811:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c818:	85 db                	test   ebx,ebx
c001c81a:	0f 84 ec 00 00 00    	je     c001c90c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c820:	51                   	push   ecx
c001c821:	51                   	push   ecx
c001c822:	52                   	push   edx
c001c823:	50                   	push   eax
c001c824:	e8 13 ed ff ff       	call   c001b53c <IDE::waitInterrupt(unsigned char)>
c001c829:	83 c4 10             	add    esp,0x10
c001c82c:	84 c0                	test   al,al
c001c82e:	0f 84 d4 fe ff ff    	je     c001c708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c834:	56                   	push   esi
c001c835:	56                   	push   esi
c001c836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c83d:	50                   	push   eax
c001c83e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c844:	e8 5f eb ff ff       	call   c001b3a8 <IDE::prepareInterrupt(unsigned char)>
c001c849:	83 c4 0c             	add    esp,0xc
c001c84c:	6a 04                	push   0x4
c001c84e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c855:	50                   	push   eax
c001c856:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c85c:	e8 2d ec ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001c861:	83 c4 0c             	add    esp,0xc
c001c864:	89 c6                	mov    esi,eax
c001c866:	6a 05                	push   0x5
c001c868:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c86f:	50                   	push   eax
c001c870:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c876:	e8 13 ec ff ff       	call   c001b48e <IDE::read(unsigned char, unsigned char)>
c001c87b:	89 f1                	mov    ecx,esi
c001c87d:	0f b6 c0             	movzx  eax,al
c001c880:	0f b6 f1             	movzx  esi,cl
c001c883:	c1 e0 08             	shl    eax,0x8
c001c886:	09 c6                	or     esi,eax
c001c888:	d1 fe                	sar    esi,1
c001c88a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c88e:	83 c4 10             	add    esp,0x10
c001c891:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c896:	74 41                	je     c001c8d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001c898:	31 c9                	xor    ecx,ecx
c001c89a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c8a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c8a7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c8ab:	75 0a                	jne    c001c8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001c8ad:	01 c9                	add    ecx,ecx
c001c8af:	01 cd                	add    ebp,ecx
c001c8b1:	4b                   	dec    ebx
c001c8b2:	e9 54 ff ff ff       	jmp    c001c80b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c8b7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c8bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c8c0:	51                   	push   ecx
c001c8c1:	51                   	push   ecx
c001c8c2:	52                   	push   edx
c001c8c3:	50                   	push   eax
c001c8c4:	e8 f3 ea ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c8c9:	89 c2                	mov    edx,eax
c001c8cb:	89 f0                	mov    eax,esi
c001c8cd:	66 ef                	out    dx,ax
c001c8cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	41                   	inc    ecx
c001c8d7:	eb c1                	jmp    c001c89a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001c8d9:	31 f6                	xor    esi,esi
c001c8db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c8e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c8e8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c8ec:	75 06                	jne    c001c8f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001c8ee:	01 f6                	add    esi,esi
c001c8f0:	01 f5                	add    ebp,esi
c001c8f2:	eb bd                	jmp    c001c8b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001c8f4:	51                   	push   ecx
c001c8f5:	51                   	push   ecx
c001c8f6:	52                   	push   edx
c001c8f7:	50                   	push   eax
c001c8f8:	e8 bf ea ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c8fd:	89 c2                	mov    edx,eax
c001c8ff:	66 ed                	in     ax,dx
c001c901:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c906:	83 c4 10             	add    esp,0x10
c001c909:	46                   	inc    esi
c001c90a:	eb cf                	jmp    c001c8db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001c90c:	51                   	push   ecx
c001c90d:	51                   	push   ecx
c001c90e:	52                   	push   edx
c001c90f:	50                   	push   eax
c001c910:	e8 27 ec ff ff       	call   c001b53c <IDE::waitInterrupt(unsigned char)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	84 c0                	test   al,al
c001c91a:	0f 84 e8 fd ff ff    	je     c001c708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c920:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c925:	52                   	push   edx
c001c926:	52                   	push   edx
c001c927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c92e:	50                   	push   eax
c001c92f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c935:	e8 6e ea ff ff       	call   c001b3a8 <IDE::prepareInterrupt(unsigned char)>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	50                   	push   eax
c001c93e:	50                   	push   eax
c001c93f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c946:	50                   	push   eax
c001c947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c94d:	e8 6a ea ff ff       	call   c001b3bc <IDE::getBase(unsigned char)>
c001c952:	8d 50 07             	lea    edx,[eax+0x7]
c001c955:	ec                   	in     al,dx
c001c956:	83 c4 10             	add    esp,0x10
c001c959:	a8 88                	test   al,0x88
c001c95b:	74 0a                	je     c001c967 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c95d:	4b                   	dec    ebx
c001c95e:	75 dd                	jne    c001c93d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c960:	bb 02 00 00 00       	mov    ebx,0x2
c001c965:	eb 02                	jmp    c001c969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c967:	31 db                	xor    ebx,ebx
c001c969:	83 c4 1c             	add    esp,0x1c
c001c96c:	89 d8                	mov    eax,ebx
c001c96e:	5b                   	pop    ebx
c001c96f:	5e                   	pop    esi
c001c970:	5f                   	pop    edi
c001c971:	5d                   	pop    ebp
c001c972:	c3                   	ret    
c001c973:	90                   	nop

c001c974 <ATAPI::diskRemoved()>:
c001c974:	83 ec 18             	sub    esp,0x18
c001c977:	68 3f 1d 02 c0       	push   0xc0021d3f
c001c97c:	e8 1d 02 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001c981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c985:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001c98c:	83 c4 1c             	add    esp,0x1c
c001c98f:	c3                   	ret    

c001c990 <ATAPI::eject()>:
c001c990:	57                   	push   edi
c001c991:	b9 03 00 00 00       	mov    ecx,0x3
c001c996:	53                   	push   ebx
c001c997:	83 ec 14             	sub    esp,0x14
c001c99a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c99e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9a2:	fc                   	cld    
c001c9a3:	31 c0                	xor    eax,eax
c001c9a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c9a7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c9ac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c9b1:	50                   	push   eax
c001c9b2:	50                   	push   eax
c001c9b3:	6a 00                	push   0x0
c001c9b5:	6a 00                	push   0x0
c001c9b7:	6a 00                	push   0x0
c001c9b9:	6a 02                	push   0x2
c001c9bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9bf:	50                   	push   eax
c001c9c0:	53                   	push   ebx
c001c9c1:	e8 ee fc ff ff       	call   c001c6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c9c6:	83 c4 14             	add    esp,0x14
c001c9c9:	53                   	push   ebx
c001c9ca:	e8 a5 ff ff ff       	call   c001c974 <ATAPI::diskRemoved()>
c001c9cf:	83 c4 24             	add    esp,0x24
c001c9d2:	5b                   	pop    ebx
c001c9d3:	5f                   	pop    edi
c001c9d4:	c3                   	ret    
c001c9d5:	90                   	nop

c001c9d6 <ATAPI::diskInserted()>:
c001c9d6:	53                   	push   ebx
c001c9d7:	83 ec 14             	sub    esp,0x14
c001c9da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c9de:	68 55 1d 02 c0       	push   0xc0021d55
c001c9e3:	e8 b6 01 ff ff       	call   c000cb9e <kprintf(char const*, ...)>
c001c9e8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001c9ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9f2:	e8 cf 6e ff ff       	call   c00138c6 <PhysicalDisk::startCache()>
c001c9f7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001c9fb:	83 c4 18             	add    esp,0x18
c001c9fe:	5b                   	pop    ebx
c001c9ff:	e9 1a 87 ff ff       	jmp    c001511e <createPartitionsForDisk(PhysicalDisk*)>

c001ca04 <ATAPI::detectMedia()>:
c001ca04:	56                   	push   esi
c001ca05:	53                   	push   ebx
c001ca06:	83 ec 28             	sub    esp,0x28
c001ca09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca0d:	6a 0c                	push   0xc
c001ca0f:	6a 00                	push   0x0
c001ca11:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ca15:	56                   	push   esi
c001ca16:	e8 ed 3b fe ff       	call   c0000608 <memset>
c001ca1b:	58                   	pop    eax
c001ca1c:	5a                   	pop    edx
c001ca1d:	6a 00                	push   0x0
c001ca1f:	6a 00                	push   0x0
c001ca21:	6a 00                	push   0x0
c001ca23:	6a 00                	push   0x0
c001ca25:	56                   	push   esi
c001ca26:	53                   	push   ebx
c001ca27:	e8 88 fc ff ff       	call   c001c6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca2c:	83 c4 1c             	add    esp,0x1c
c001ca2f:	6a 0c                	push   0xc
c001ca31:	6a 00                	push   0x0
c001ca33:	56                   	push   esi
c001ca34:	e8 cf 3b fe ff       	call   c0000608 <memset>
c001ca39:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ca3e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ca43:	59                   	pop    ecx
c001ca44:	58                   	pop    eax
c001ca45:	6a 01                	push   0x1
c001ca47:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ca4b:	50                   	push   eax
c001ca4c:	6a 00                	push   0x0
c001ca4e:	6a 12                	push   0x12
c001ca50:	56                   	push   esi
c001ca51:	53                   	push   ebx
c001ca52:	e8 5d fc ff ff       	call   c001c6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca57:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ca5b:	83 c4 20             	add    esp,0x20
c001ca5e:	83 e0 7f             	and    eax,0x7f
c001ca61:	3c 70                	cmp    al,0x70
c001ca63:	74 15                	je     c001ca7a <ATAPI::detectMedia()+0x76>
c001ca65:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca6c:	75 0c                	jne    c001ca7a <ATAPI::detectMedia()+0x76>
c001ca6e:	83 ec 0c             	sub    esp,0xc
c001ca71:	53                   	push   ebx
c001ca72:	e8 5f ff ff ff       	call   c001c9d6 <ATAPI::diskInserted()>
c001ca77:	83 c4 10             	add    esp,0x10
c001ca7a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ca7e:	83 e0 0f             	and    eax,0xf
c001ca81:	3c 02                	cmp    al,0x2
c001ca83:	75 1b                	jne    c001caa0 <ATAPI::detectMedia()+0x9c>
c001ca85:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ca8a:	75 2d                	jne    c001cab9 <ATAPI::detectMedia()+0xb5>
c001ca8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca93:	74 24                	je     c001cab9 <ATAPI::detectMedia()+0xb5>
c001ca95:	83 ec 0c             	sub    esp,0xc
c001ca98:	53                   	push   ebx
c001ca99:	e8 d6 fe ff ff       	call   c001c974 <ATAPI::diskRemoved()>
c001ca9e:	eb 16                	jmp    c001cab6 <ATAPI::detectMedia()+0xb2>
c001caa0:	84 c0                	test   al,al
c001caa2:	75 15                	jne    c001cab9 <ATAPI::detectMedia()+0xb5>
c001caa4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001caab:	75 0c                	jne    c001cab9 <ATAPI::detectMedia()+0xb5>
c001caad:	83 ec 0c             	sub    esp,0xc
c001cab0:	53                   	push   ebx
c001cab1:	e8 20 ff ff ff       	call   c001c9d6 <ATAPI::diskInserted()>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	83 c4 24             	add    esp,0x24
c001cabc:	5b                   	pop    ebx
c001cabd:	5e                   	pop    esi
c001cabe:	c3                   	ret    
c001cabf:	90                   	nop

c001cac0 <ATAPI::open(int, int, void*)>:
c001cac0:	53                   	push   ebx
c001cac1:	83 ec 08             	sub    esp,0x8
c001cac4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cac8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cacc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cad0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cad6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cadc:	c1 e0 06             	shl    eax,0x6
c001cadf:	01 d0                	add    eax,edx
c001cae1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cae8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001caee:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001caf5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001caff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cb05:	6a 04                	push   0x4
c001cb07:	6a 0c                	push   0xc
c001cb09:	51                   	push   ecx
c001cb0a:	52                   	push   edx
c001cb0b:	e8 be e8 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb10:	90                   	nop
c001cb11:	90                   	nop
c001cb12:	6a 00                	push   0x0
c001cb14:	6a 0c                	push   0xc
c001cb16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1d:	50                   	push   eax
c001cb1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb24:	e8 a5 e8 ff ff       	call   c001b3ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb29:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cb30:	83 c4 14             	add    esp,0x14
c001cb33:	53                   	push   ebx
c001cb34:	e8 cb fe ff ff       	call   c001ca04 <ATAPI::detectMedia()>
c001cb39:	31 c0                	xor    eax,eax
c001cb3b:	83 c4 18             	add    esp,0x18
c001cb3e:	5b                   	pop    ebx
c001cb3f:	c3                   	ret    

c001cb40 <ATAPI::read(unsigned long long, int, void*)>:
c001cb40:	55                   	push   ebp
c001cb41:	57                   	push   edi
c001cb42:	56                   	push   esi
c001cb43:	53                   	push   ebx
c001cb44:	83 ec 1c             	sub    esp,0x1c
c001cb47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cb53:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cb5a:	74 41                	je     c001cb9d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001cb5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb60:	b9 03 00 00 00       	mov    ecx,0x3
c001cb65:	fc                   	cld    
c001cb66:	31 c0                	xor    eax,eax
c001cb68:	86 fb                	xchg   bl,bh
c001cb6a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb6c:	c1 c3 10             	rol    ebx,0x10
c001cb6f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cb74:	89 e8                	mov    eax,ebp
c001cb76:	86 fb                	xchg   bl,bh
c001cb78:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cb7c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001cb80:	50                   	push   eax
c001cb81:	50                   	push   eax
c001cb82:	55                   	push   ebp
c001cb83:	c1 e5 0b             	shl    ebp,0xb
c001cb86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cb8a:	6a 00                	push   0x0
c001cb8c:	55                   	push   ebp
c001cb8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb91:	50                   	push   eax
c001cb92:	56                   	push   esi
c001cb93:	e8 1c fb ff ff       	call   c001c6b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb98:	83 c4 20             	add    esp,0x20
c001cb9b:	eb 1a                	jmp    c001cbb7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cb9d:	83 ec 0c             	sub    esp,0xc
c001cba0:	56                   	push   esi
c001cba1:	e8 5e fe ff ff       	call   c001ca04 <ATAPI::detectMedia()>
c001cba6:	83 c4 10             	add    esp,0x10
c001cba9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cbb0:	75 aa                	jne    c001cb5c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cbb2:	b8 02 00 00 00       	mov    eax,0x2
c001cbb7:	83 c4 1c             	add    esp,0x1c
c001cbba:	5b                   	pop    ebx
c001cbbb:	5e                   	pop    esi
c001cbbc:	5f                   	pop    edi
c001cbbd:	5d                   	pop    ebp
c001cbbe:	c3                   	ret    
c001cbbf:	90                   	nop

c001cbc0 <AVX::open(int, int, void*)>:
c001cbc0:	83 ec 0c             	sub    esp,0xc
c001cbc3:	e8 10 10 00 00       	call   c001dbd8 <avxInit>
c001cbc8:	b8 00 00 00 00       	mov    eax,0x0
c001cbcd:	83 c4 0c             	add    esp,0xc
c001cbd0:	c3                   	ret    
c001cbd1:	90                   	nop

c001cbd2 <AVX::close(int, int, void*)>:
c001cbd2:	83 ec 0c             	sub    esp,0xc
c001cbd5:	e8 ff 0f 00 00       	call   c001dbd9 <avxClose>
c001cbda:	b8 00 00 00 00       	mov    eax,0x0
c001cbdf:	83 c4 0c             	add    esp,0xc
c001cbe2:	c3                   	ret    
c001cbe3:	90                   	nop

c001cbe4 <AVX::available()>:
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	e8 e4 0f 00 00       	call   c001dbd0 <avxDetect>
c001cbec:	85 c0                	test   eax,eax
c001cbee:	0f 95 c0             	setne  al
c001cbf1:	83 c4 0c             	add    esp,0xc
c001cbf4:	c3                   	ret    
c001cbf5:	90                   	nop

c001cbf6 <AVX::save(void*)>:
c001cbf6:	83 ec 0c             	sub    esp,0xc
c001cbf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbfd:	83 ec 0c             	sub    esp,0xc
c001cc00:	50                   	push   eax
c001cc01:	e8 d0 0f 00 00       	call   c001dbd6 <avxSave>
c001cc06:	83 c4 10             	add    esp,0x10
c001cc09:	90                   	nop
c001cc0a:	83 c4 0c             	add    esp,0xc
c001cc0d:	c3                   	ret    

c001cc0e <AVX::load(void*)>:
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	50                   	push   eax
c001cc19:	e8 b9 0f 00 00       	call   c001dbd7 <avxLoad>
c001cc1e:	83 c4 10             	add    esp,0x10
c001cc21:	90                   	nop
c001cc22:	83 c4 0c             	add    esp,0xc
c001cc25:	c3                   	ret    

c001cc26 <AVX::AVX()>:
c001cc26:	83 ec 0c             	sub    esp,0xc
c001cc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2d:	83 ec 08             	sub    esp,0x8
c001cc30:	68 a0 1d 02 c0       	push   0xc0021da0
c001cc35:	50                   	push   eax
c001cc36:	e8 01 6d ff ff       	call   c001393c <FPU::FPU(char const*)>
c001cc3b:	83 c4 10             	add    esp,0x10
c001cc3e:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c001cc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc47:	89 10                	mov    DWORD PTR [eax],edx
c001cc49:	90                   	nop
c001cc4a:	83 c4 0c             	add    esp,0xc
c001cc4d:	c3                   	ret    

c001cc4e <MMX::available()>:
c001cc4e:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c001cc53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cc59:	83 e0 20             	and    eax,0x20
c001cc5c:	84 c0                	test   al,al
c001cc5e:	0f 95 c0             	setne  al
c001cc61:	c3                   	ret    

c001cc62 <MMX::open(int, int, void*)>:
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	e8 e2 0f 00 00       	call   c001dc4c <x87Init>
c001cc6a:	b8 00 00 00 00       	mov    eax,0x0
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	c3                   	ret    
c001cc73:	90                   	nop

c001cc74 <MMX::close(int, int, void*)>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	e8 ea 0f 00 00       	call   c001dc66 <x87Close>
c001cc7c:	b8 00 00 00 00       	mov    eax,0x0
c001cc81:	83 c4 0c             	add    esp,0xc
c001cc84:	c3                   	ret    
c001cc85:	90                   	nop

c001cc86 <MMX::save(void*)>:
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc8d:	83 ec 0c             	sub    esp,0xc
c001cc90:	50                   	push   eax
c001cc91:	e8 ab 0f 00 00       	call   c001dc41 <x87Save>
c001cc96:	83 c4 10             	add    esp,0x10
c001cc99:	90                   	nop
c001cc9a:	83 c4 0c             	add    esp,0xc
c001cc9d:	c3                   	ret    

c001cc9e <MMX::load(void*)>:
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cca5:	83 ec 0c             	sub    esp,0xc
c001cca8:	50                   	push   eax
c001cca9:	e8 99 0f 00 00       	call   c001dc47 <x87Load>
c001ccae:	83 c4 10             	add    esp,0x10
c001ccb1:	90                   	nop
c001ccb2:	83 c4 0c             	add    esp,0xc
c001ccb5:	c3                   	ret    

c001ccb6 <MMX::MMX()>:
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbd:	83 ec 08             	sub    esp,0x8
c001ccc0:	68 e0 1d 02 c0       	push   0xc0021de0
c001ccc5:	50                   	push   eax
c001ccc6:	e8 71 6c ff ff       	call   c001393c <FPU::FPU(char const*)>
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c001ccd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd7:	89 10                	mov    DWORD PTR [eax],edx
c001ccd9:	90                   	nop
c001ccda:	83 c4 0c             	add    esp,0xc
c001ccdd:	c3                   	ret    

c001ccde <SSE::open(int, int, void*)>:
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	e8 21 0f 00 00       	call   c001dc07 <sseInit>
c001cce6:	b8 00 00 00 00       	mov    eax,0x0
c001cceb:	83 c4 0c             	add    esp,0xc
c001ccee:	c3                   	ret    
c001ccef:	90                   	nop

c001ccf0 <SSE::close(int, int, void*)>:
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	e8 1f 0f 00 00       	call   c001dc17 <sseClose>
c001ccf8:	b8 00 00 00 00       	mov    eax,0x0
c001ccfd:	83 c4 0c             	add    esp,0xc
c001cd00:	c3                   	ret    
c001cd01:	90                   	nop

c001cd02 <SSE::available()>:
c001cd02:	83 ec 1c             	sub    esp,0x1c
c001cd05:	e8 d6 0e 00 00       	call   c001dbe0 <sseDetect>
c001cd0a:	85 c0                	test   eax,eax
c001cd0c:	0f 95 c0             	setne  al
c001cd0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cd17:	83 c4 1c             	add    esp,0x1c
c001cd1a:	c3                   	ret    
c001cd1b:	90                   	nop

c001cd1c <SSE::save(void*)>:
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd23:	83 ec 0c             	sub    esp,0xc
c001cd26:	50                   	push   eax
c001cd27:	e8 cf 0e 00 00       	call   c001dbfb <sseSave>
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	90                   	nop
c001cd30:	83 c4 0c             	add    esp,0xc
c001cd33:	c3                   	ret    

c001cd34 <SSE::load(void*)>:
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	50                   	push   eax
c001cd3f:	e8 bd 0e 00 00       	call   c001dc01 <sseLoad>
c001cd44:	83 c4 10             	add    esp,0x10
c001cd47:	90                   	nop
c001cd48:	83 c4 0c             	add    esp,0xc
c001cd4b:	c3                   	ret    

c001cd4c <SSE::SSE()>:
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd53:	83 ec 08             	sub    esp,0x8
c001cd56:	68 20 1e 02 c0       	push   0xc0021e20
c001cd5b:	50                   	push   eax
c001cd5c:	e8 db 6b ff ff       	call   c001393c <FPU::FPU(char const*)>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c001cd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6d:	89 10                	mov    DWORD PTR [eax],edx
c001cd6f:	90                   	nop
c001cd70:	83 c4 0c             	add    esp,0xc
c001cd73:	c3                   	ret    

c001cd74 <x87::open(int, int, void*)>:
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	e8 d0 0e 00 00       	call   c001dc4c <x87Init>
c001cd7c:	b8 00 00 00 00       	mov    eax,0x0
c001cd81:	83 c4 0c             	add    esp,0xc
c001cd84:	c3                   	ret    
c001cd85:	90                   	nop

c001cd86 <x87::close(int, int, void*)>:
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	e8 d8 0e 00 00       	call   c001dc66 <x87Close>
c001cd8e:	b8 00 00 00 00       	mov    eax,0x0
c001cd93:	83 c4 0c             	add    esp,0xc
c001cd96:	c3                   	ret    
c001cd97:	90                   	nop

c001cd98 <x87::available()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	e8 86 0e 00 00       	call   c001dc26 <x87Detect>
c001cda0:	85 c0                	test   eax,eax
c001cda2:	0f 95 c0             	setne  al
c001cda5:	83 c4 0c             	add    esp,0xc
c001cda8:	c3                   	ret    
c001cda9:	90                   	nop

c001cdaa <x87::save(void*)>:
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdb1:	83 ec 0c             	sub    esp,0xc
c001cdb4:	50                   	push   eax
c001cdb5:	e8 87 0e 00 00       	call   c001dc41 <x87Save>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	90                   	nop
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	c3                   	ret    

c001cdc2 <x87::load(void*)>:
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdc9:	83 ec 0c             	sub    esp,0xc
c001cdcc:	50                   	push   eax
c001cdcd:	e8 75 0e 00 00       	call   c001dc47 <x87Load>
c001cdd2:	83 c4 10             	add    esp,0x10
c001cdd5:	90                   	nop
c001cdd6:	83 c4 0c             	add    esp,0xc
c001cdd9:	c3                   	ret    

c001cdda <x87::x87()>:
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde1:	83 ec 08             	sub    esp,0x8
c001cde4:	68 60 1e 02 c0       	push   0xc0021e60
c001cde9:	50                   	push   eax
c001cdea:	e8 4d 6b ff ff       	call   c001393c <FPU::FPU(char const*)>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	ba 70 1e 02 c0       	mov    edx,0xc0021e70
c001cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfb:	89 10                	mov    DWORD PTR [eax],edx
c001cdfd:	90                   	nop
c001cdfe:	83 c4 0c             	add    esp,0xc
c001ce01:	c3                   	ret    

c001ce02 <APIC::disable()>:
c001ce02:	90                   	nop
c001ce03:	c3                   	ret    

c001ce04 <APIC::close(int, int, void*)>:
c001ce04:	55                   	push   ebp
c001ce05:	89 e5                	mov    ebp,esp
c001ce07:	83 ec 08             	sub    esp,0x8
c001ce0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce0f:	83 c0 3c             	add    eax,0x3c
c001ce12:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ce1a:	ff d0                	call   eax
c001ce1c:	83 c4 10             	add    esp,0x10
c001ce1f:	b8 00 00 00 00       	mov    eax,0x0
c001ce24:	c9                   	leave  
c001ce25:	c3                   	ret    

c001ce26 <IOAPIC::close(int, int, void*)>:
c001ce26:	b8 00 00 00 00       	mov    eax,0x0
c001ce2b:	c3                   	ret    

c001ce2c <APIC::io_wait()>:
c001ce2c:	eb 00                	jmp    c001ce2e <APIC::io_wait()+0x2>
c001ce2e:	eb 00                	jmp    c001ce30 <APIC::io_wait()+0x4>
c001ce30:	90                   	nop
c001ce31:	c3                   	ret    

c001ce32 <APIC::getBase()>:
c001ce32:	55                   	push   ebp
c001ce33:	89 e5                	mov    ebp,esp
c001ce35:	83 ec 18             	sub    esp,0x18
c001ce38:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c001ce3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001ce43:	83 e0 08             	and    eax,0x8
c001ce46:	84 c0                	test   al,al
c001ce48:	75 07                	jne    c001ce51 <APIC::getBase()+0x1f>
c001ce4a:	b8 00 00 00 00       	mov    eax,0x0
c001ce4f:	eb 21                	jmp    c001ce72 <APIC::getBase()+0x40>
c001ce51:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c001ce56:	83 ec 08             	sub    esp,0x8
c001ce59:	6a 1b                	push   0x1b
c001ce5b:	50                   	push   eax
c001ce5c:	e8 63 e3 fe ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c001ce61:	83 c4 10             	add    esp,0x10
c001ce64:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ce67:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ce6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ce72:	c9                   	leave  
c001ce73:	c3                   	ret    

c001ce74 <APIC::eoi(unsigned char)>:
c001ce74:	55                   	push   ebp
c001ce75:	89 e5                	mov    ebp,esp
c001ce77:	83 ec 28             	sub    esp,0x28
c001ce7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ce86:	e8 a7 ff ff ff       	call   c001ce32 <APIC::getBase()>
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	05 b0 00 00 00       	add    eax,0xb0
c001ce93:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ce96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ce99:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ce9f:	90                   	nop
c001cea0:	c9                   	leave  
c001cea1:	c3                   	ret    

c001cea2 <APIC::open(int, int, void*)>:
c001cea2:	55                   	push   ebp
c001cea3:	89 e5                	mov    ebp,esp
c001cea5:	57                   	push   edi
c001cea6:	56                   	push   esi
c001cea7:	53                   	push   ebx
c001cea8:	83 ec 1c             	sub    esp,0x1c
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ceb1:	e8 7c ff ff ff       	call   c001ce32 <APIC::getBase()>
c001ceb6:	83 c4 10             	add    esp,0x10
c001ceb9:	05 f0 00 00 00       	add    eax,0xf0
c001cebe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001cec1:	83 ec 0c             	sub    esp,0xc
c001cec4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cec7:	e8 66 ff ff ff       	call   c001ce32 <APIC::getBase()>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	89 c2                	mov    edx,eax
c001ced1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ced4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ceda:	0f b6 f8             	movzx  edi,al
c001cedd:	89 d0                	mov    eax,edx
c001cedf:	ba 00 00 00 00       	mov    edx,0x0
c001cee4:	89 c1                	mov    ecx,eax
c001cee6:	80 e5 ff             	and    ch,0xff
c001cee9:	89 cb                	mov    ebx,ecx
c001ceeb:	0f b6 f2             	movzx  esi,dl
c001ceee:	89 d8                	mov    eax,ebx
c001cef0:	89 f2                	mov    edx,esi
c001cef2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cef5:	8d 5f 08             	lea    ebx,[edi+0x8]
c001cef8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cefc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cf00:	83 e0 00             	and    eax,0x0
c001cf03:	09 d0                	or     eax,edx
c001cf05:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cf09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf0c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cf12:	8d 50 01             	lea    edx,[eax+0x1]
c001cf15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cf18:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cf1e:	0f b6 d0             	movzx  edx,al
c001cf21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf24:	83 c2 08             	add    edx,0x8
c001cf27:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cf2b:	0f b6 c9             	movzx  ecx,cl
c001cf2e:	81 c9 00 00 01 00    	or     ecx,0x10000
c001cf34:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cf38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001cf3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf3d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001cf40:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001cf47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001cf4a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001cf4d:	89 10                	mov    DWORD PTR [eax],edx
c001cf4f:	b8 00 00 00 00       	mov    eax,0x0
c001cf54:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cf57:	5b                   	pop    ebx
c001cf58:	5e                   	pop    esi
c001cf59:	5f                   	pop    edi
c001cf5a:	5d                   	pop    ebp
c001cf5b:	c3                   	ret    

c001cf5c <IOAPIC::IOAPIC()>:
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf63:	83 ec 08             	sub    esp,0x8
c001cf66:	68 a0 1e 02 c0       	push   0xc0021ea0
c001cf6b:	50                   	push   eax
c001cf6c:	e8 d7 66 ff ff       	call   c0013648 <Device::Device(char const*)>
c001cf71:	83 c4 10             	add    esp,0x10
c001cf74:	ba c8 1f 02 c0       	mov    edx,0xc0021fc8
c001cf79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7d:	89 10                	mov    DWORD PTR [eax],edx
c001cf7f:	90                   	nop
c001cf80:	83 c4 0c             	add    esp,0xc
c001cf83:	c3                   	ret    

c001cf84 <APIC::APIC()>:
c001cf84:	53                   	push   ebx
c001cf85:	83 ec 18             	sub    esp,0x18
c001cf88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf8c:	83 ec 08             	sub    esp,0x8
c001cf8f:	68 a8 1e 02 c0       	push   0xc0021ea8
c001cf94:	50                   	push   eax
c001cf95:	e8 d6 6d ff ff       	call   c0013d70 <InterruptController::InterruptController(char const*)>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c001cfa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa6:	89 10                	mov    DWORD PTR [eax],edx
c001cfa8:	a0 20 4a 02 c0       	mov    al,ds:0xc0024a20
c001cfad:	83 f0 01             	xor    eax,0x1
c001cfb0:	84 c0                	test   al,al
c001cfb2:	0f 84 96 00 00 00    	je     c001d04e <APIC::APIC()+0xca>
c001cfb8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001cfbd:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c001cfc2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001cfc6:	73 7f                	jae    c001d047 <APIC::APIC()+0xc3>
c001cfc8:	83 ec 0c             	sub    esp,0xc
c001cfcb:	68 68 01 00 00       	push   0x168
c001cfd0:	e8 79 51 ff ff       	call   c001214e <operator new(unsigned long)>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	89 c3                	mov    ebx,eax
c001cfda:	83 ec 0c             	sub    esp,0xc
c001cfdd:	53                   	push   ebx
c001cfde:	e8 79 ff ff ff       	call   c001cf5c <IOAPIC::IOAPIC()>
c001cfe3:	83 c4 10             	add    esp,0x10
c001cfe6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001cfea:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cfef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cff3:	89 14 85 00 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb600],edx
c001cffa:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c001cfff:	40                   	inc    eax
c001d000:	a3 e0 49 02 c0       	mov    ds:0xc00249e0,eax
c001d005:	a1 c8 2c 02 c0       	mov    eax,ds:0xc0022cc8
c001d00a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d010:	83 ec 08             	sub    esp,0x8
c001d013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d017:	50                   	push   eax
c001d018:	e8 3b 64 ff ff       	call   c0013458 <Device::addChild(Device*)>
c001d01d:	83 c4 10             	add    esp,0x10
c001d020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d024:	8b 00                	mov    eax,DWORD PTR [eax]
c001d026:	83 c0 08             	add    eax,0x8
c001d029:	8b 00                	mov    eax,DWORD PTR [eax]
c001d02b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d030:	6a 00                	push   0x0
c001d032:	6a 00                	push   0x0
c001d034:	52                   	push   edx
c001d035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d039:	ff d0                	call   eax
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d042:	e9 76 ff ff ff       	jmp    c001cfbd <APIC::APIC()+0x39>
c001d047:	c6 05 20 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a20,0x1
c001d04e:	90                   	nop
c001d04f:	83 c4 18             	add    esp,0x18
c001d052:	5b                   	pop    ebx
c001d053:	c3                   	ret    

c001d054 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d054:	55                   	push   ebp
c001d055:	89 e5                	mov    ebp,esp
c001d057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d05a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d060:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d063:	72 1d                	jb     c001d082 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d068:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d071:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d077:	01 d0                	add    eax,edx
c001d079:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d07c:	73 04                	jae    c001d082 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d07e:	b0 01                	mov    al,0x1
c001d080:	eb 02                	jmp    c001d084 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d082:	b0 00                	mov    al,0x0
c001d084:	5d                   	pop    ebp
c001d085:	c3                   	ret    

c001d086 <IOAPIC::read(int)>:
c001d086:	55                   	push   ebp
c001d087:	89 e5                	mov    ebp,esp
c001d089:	83 ec 10             	sub    esp,0x10
c001d08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d08f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d095:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d098:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d09b:	0f b6 d0             	movzx  edx,al
c001d09e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d0a1:	89 10                	mov    DWORD PTR [eax],edx
c001d0a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d0a6:	83 c0 10             	add    eax,0x10
c001d0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0ab:	c9                   	leave  
c001d0ac:	c3                   	ret    
c001d0ad:	90                   	nop

c001d0ae <IOAPIC::open(int, int, void*)>:
c001d0ae:	55                   	push   ebp
c001d0af:	89 e5                	mov    ebp,esp
c001d0b1:	57                   	push   edi
c001d0b2:	56                   	push   esi
c001d0b3:	53                   	push   ebx
c001d0b4:	83 ec 0c             	sub    esp,0xc
c001d0b7:	83 ec 0c             	sub    esp,0xc
c001d0ba:	68 d3 1e 02 c0       	push   0xc0021ed3
c001d0bf:	e8 da fa fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001d0c4:	83 c4 10             	add    esp,0x10
c001d0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d0cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d0d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0dc:	8b 14 85 20 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc0e0]
c001d0e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0f5:	8b 14 85 a0 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc060]
c001d0fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d108:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d111:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d117:	0f b6 f8             	movzx  edi,al
c001d11a:	89 d0                	mov    eax,edx
c001d11c:	ba 00 00 00 00       	mov    edx,0x0
c001d121:	89 c1                	mov    ecx,eax
c001d123:	80 e5 ff             	and    ch,0xff
c001d126:	89 cb                	mov    ebx,ecx
c001d128:	0f b6 f2             	movzx  esi,dl
c001d12b:	89 d8                	mov    eax,ebx
c001d12d:	89 f2                	mov    edx,esi
c001d12f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d132:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d135:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d139:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d13d:	83 e0 00             	and    eax,0x0
c001d140:	09 d0                	or     eax,edx
c001d142:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d149:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d14f:	8d 50 01             	lea    edx,[eax+0x1]
c001d152:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d155:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d15b:	0f b6 d0             	movzx  edx,al
c001d15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d161:	83 c2 08             	add    edx,0x8
c001d164:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d168:	0f b6 c9             	movzx  ecx,cl
c001d16b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d171:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d175:	83 ec 08             	sub    esp,0x8
c001d178:	6a 01                	push   0x1
c001d17a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d17d:	e8 04 ff ff ff       	call   c001d086 <IOAPIC::read(int)>
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	c1 f8 10             	sar    eax,0x10
c001d188:	0f b6 c0             	movzx  eax,al
c001d18b:	8d 50 01             	lea    edx,[eax+0x1]
c001d18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d191:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d197:	b8 00 00 00 00       	mov    eax,0x0
c001d19c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d19f:	5b                   	pop    ebx
c001d1a0:	5e                   	pop    esi
c001d1a1:	5f                   	pop    edi
c001d1a2:	5d                   	pop    ebp
c001d1a3:	c3                   	ret    

c001d1a4 <IOAPIC::write(int, int)>:
c001d1a4:	55                   	push   ebp
c001d1a5:	89 e5                	mov    ebp,esp
c001d1a7:	83 ec 10             	sub    esp,0x10
c001d1aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d1b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d1b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d1b9:	0f b6 d0             	movzx  edx,al
c001d1bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d1bf:	89 10                	mov    DWORD PTR [eax],edx
c001d1c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d1c4:	8d 50 10             	lea    edx,[eax+0x10]
c001d1c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d1ca:	89 02                	mov    DWORD PTR [edx],eax
c001d1cc:	90                   	nop
c001d1cd:	c9                   	leave  
c001d1ce:	c3                   	ret    
c001d1cf:	90                   	nop

c001d1d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d1d0:	55                   	push   ebp
c001d1d1:	89 e5                	mov    ebp,esp
c001d1d3:	83 ec 20             	sub    esp,0x20
c001d1d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d1d9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d1dc:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d1df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d1e2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d1e5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d1e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d1eb:	88 d0                	mov    al,dl
c001d1ed:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d1f0:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d1f4:	83 c0 08             	add    eax,0x8
c001d1f7:	01 c0                	add    eax,eax
c001d1f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d1fc:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d200:	83 c0 08             	add    eax,0x8
c001d203:	01 c0                	add    eax,eax
c001d205:	40                   	inc    eax
c001d206:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d209:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d20c:	50                   	push   eax
c001d20d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d210:	e8 71 fe ff ff       	call   c001d086 <IOAPIC::read(int)>
c001d215:	83 c4 08             	add    esp,0x8
c001d218:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d21b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d222:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d225:	c1 e0 18             	shl    eax,0x18
c001d228:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d22b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d22e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d231:	52                   	push   edx
c001d232:	50                   	push   eax
c001d233:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d236:	e8 69 ff ff ff       	call   c001d1a4 <IOAPIC::write(int, int)>
c001d23b:	83 c4 0c             	add    esp,0xc
c001d23e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d241:	50                   	push   eax
c001d242:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d245:	e8 3c fe ff ff       	call   c001d086 <IOAPIC::read(int)>
c001d24a:	83 c4 08             	add    esp,0x8
c001d24d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d250:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d257:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d25e:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d265:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d26c:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d270:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d273:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d276:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d279:	52                   	push   edx
c001d27a:	50                   	push   eax
c001d27b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d27e:	e8 21 ff ff ff       	call   c001d1a4 <IOAPIC::write(int, int)>
c001d283:	83 c4 0c             	add    esp,0xc
c001d286:	90                   	nop
c001d287:	c9                   	leave  
c001d288:	c3                   	ret    
c001d289:	90                   	nop

c001d28a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d28a:	55                   	push   ebp
c001d28b:	89 e5                	mov    ebp,esp
c001d28d:	56                   	push   esi
c001d28e:	53                   	push   ebx
c001d28f:	83 ec 20             	sub    esp,0x20
c001d292:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d295:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d298:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d29c:	74 28                	je     c001d2c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d29e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d2a2:	7f 12                	jg     c001d2b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d2a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2a7:	05 20 24 02 c0       	add    eax,0xc0022420
c001d2ac:	8a 00                	mov    al,BYTE PTR [eax]
c001d2ae:	0f b6 c0             	movzx  eax,al
c001d2b1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d2b4:	eb 10                	jmp    c001d2c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d2b6:	83 ec 0c             	sub    esp,0xc
c001d2b9:	68 e4 1e 02 c0       	push   0xc0021ee4
c001d2be:	e8 f9 f9 fe ff       	call   c000ccbc <panic(char const*)>
c001d2c3:	83 c4 10             	add    esp,0x10
c001d2c6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d2ca:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c001d2cf:	83 ec 08             	sub    esp,0x8
c001d2d2:	50                   	push   eax
c001d2d3:	68 1c 1f 02 c0       	push   0xc0021f1c
c001d2d8:	e8 c1 f8 fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d2e7:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c001d2ec:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d2ef:	7d 58                	jge    c001d349 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d2f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d2f4:	8b 04 85 00 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb600]
c001d2fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d2fe:	83 ec 08             	sub    esp,0x8
c001d301:	52                   	push   edx
c001d302:	50                   	push   eax
c001d303:	e8 4c fd ff ff       	call   c001d054 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d308:	83 c4 10             	add    esp,0x10
c001d30b:	84 c0                	test   al,al
c001d30d:	74 35                	je     c001d344 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d30f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d312:	8b 1c 85 00 4a 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb600]
c001d319:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d31c:	83 c0 20             	add    eax,0x20
c001d31f:	0f b6 f0             	movzx  esi,al
c001d322:	e8 7c 9b ff ff       	call   c0016ea3 <getCPUNumber()>
c001d327:	99                   	cdq    
c001d328:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d32b:	0f b6 c9             	movzx  ecx,cl
c001d32e:	83 ec 0c             	sub    esp,0xc
c001d331:	56                   	push   esi
c001d332:	52                   	push   edx
c001d333:	50                   	push   eax
c001d334:	51                   	push   ecx
c001d335:	53                   	push   ebx
c001d336:	e8 95 fe ff ff       	call   c001d1d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d33b:	83 c4 20             	add    esp,0x20
c001d33e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d342:	eb 05                	jmp    c001d349 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d344:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d347:	eb 9e                	jmp    c001d2e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d349:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d34c:	83 f0 01             	xor    eax,0x1
c001d34f:	84 c0                	test   al,al
c001d351:	74 10                	je     c001d363 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d353:	83 ec 0c             	sub    esp,0xc
c001d356:	68 33 1f 02 c0       	push   0xc0021f33
c001d35b:	e8 5c f9 fe ff       	call   c000ccbc <panic(char const*)>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d367:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d36e:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d372:	7f 65                	jg     c001d3d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d377:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d37a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d381:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d384:	01 ca                	add    edx,ecx
c001d386:	83 c2 54             	add    edx,0x54
c001d389:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d38d:	85 c0                	test   eax,eax
c001d38f:	75 43                	jne    c001d3d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d394:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d397:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d39e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d3a1:	01 ca                	add    edx,ecx
c001d3a3:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d3a6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d3a9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d3ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d3b3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d3ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d3bd:	01 ca                	add    edx,ecx
c001d3bf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d3c5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d3c8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d3cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d3cf:	83 e8 20             	sub    eax,0x20
c001d3d2:	eb 1a                	jmp    c001d3ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d3d4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d3d7:	eb 95                	jmp    c001d36e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d3d9:	83 ec 0c             	sub    esp,0xc
c001d3dc:	68 40 1f 02 c0       	push   0xc0021f40
c001d3e1:	e8 d6 f8 fe ff       	call   c000ccbc <panic(char const*)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d3ee:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d3f1:	5b                   	pop    ebx
c001d3f2:	5e                   	pop    esi
c001d3f3:	5d                   	pop    ebp
c001d3f4:	c3                   	ret    
c001d3f5:	90                   	nop

c001d3f6 <PIC::disable()>:
c001d3f6:	55                   	push   ebp
c001d3f7:	89 e5                	mov    ebp,esp
c001d3f9:	83 ec 10             	sub    esp,0x10
c001d3fc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d402:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d406:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d409:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d40d:	ee                   	out    dx,al
c001d40e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d414:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d418:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d41b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d41f:	ee                   	out    dx,al
c001d420:	90                   	nop
c001d421:	c9                   	leave  
c001d422:	c3                   	ret    
c001d423:	90                   	nop

c001d424 <PIC::close(int, int, void*)>:
c001d424:	55                   	push   ebp
c001d425:	89 e5                	mov    ebp,esp
c001d427:	83 ec 08             	sub    esp,0x8
c001d42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d42d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d42f:	83 c0 3c             	add    eax,0x3c
c001d432:	8b 00                	mov    eax,DWORD PTR [eax]
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d43a:	ff d0                	call   eax
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	b8 00 00 00 00       	mov    eax,0x0
c001d444:	c9                   	leave  
c001d445:	c3                   	ret    

c001d446 <PIC::PIC()>:
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d44d:	83 ec 08             	sub    esp,0x8
c001d450:	68 ec 1f 02 c0       	push   0xc0021fec
c001d455:	50                   	push   eax
c001d456:	e8 15 69 ff ff       	call   c0013d70 <InterruptController::InterruptController(char const*)>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	ba 18 20 02 c0       	mov    edx,0xc0022018
c001d463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d467:	89 10                	mov    DWORD PTR [eax],edx
c001d469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d473:	0f b6 d0             	movzx  edx,al
c001d476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d485:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d48b:	0f b6 d0             	movzx  edx,al
c001d48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d492:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d4a1:	8d 50 01             	lea    edx,[eax+0x1]
c001d4a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4a8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d4ae:	0f b6 d0             	movzx  edx,al
c001d4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d4b9:	83 e1 3f             	and    ecx,0x3f
c001d4bc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d4ca:	0f b6 d0             	movzx  edx,al
c001d4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d4e2:	0f b6 d0             	movzx  edx,al
c001d4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d4f8:	8d 50 01             	lea    edx,[eax+0x1]
c001d4fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4ff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d505:	0f b6 d0             	movzx  edx,al
c001d508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d510:	83 e1 3f             	and    ecx,0x3f
c001d513:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d517:	90                   	nop
c001d518:	83 c4 0c             	add    esp,0xc
c001d51b:	c3                   	ret    

c001d51c <PIC::ioWait()>:
c001d51c:	eb 00                	jmp    c001d51e <PIC::ioWait()+0x2>
c001d51e:	eb 00                	jmp    c001d520 <PIC::ioWait()+0x4>
c001d520:	90                   	nop
c001d521:	c3                   	ret    

c001d522 <PIC::getIRQReg(int)>:
c001d522:	55                   	push   ebp
c001d523:	89 e5                	mov    ebp,esp
c001d525:	83 ec 10             	sub    esp,0x10
c001d528:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d52b:	0f b6 c0             	movzx  eax,al
c001d52e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d534:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d537:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d53a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d53e:	ee                   	out    dx,al
c001d53f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d542:	0f b6 c0             	movzx  eax,al
c001d545:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d54b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d54e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d551:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d555:	ee                   	out    dx,al
c001d556:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d55c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d560:	89 c2                	mov    edx,eax
c001d562:	ec                   	in     al,dx
c001d563:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d566:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d569:	0f b6 c0             	movzx  eax,al
c001d56c:	c1 e0 08             	shl    eax,0x8
c001d56f:	89 c1                	mov    ecx,eax
c001d571:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d577:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d57b:	89 c2                	mov    edx,eax
c001d57d:	ec                   	in     al,dx
c001d57e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d581:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d584:	0f b6 c0             	movzx  eax,al
c001d587:	09 c8                	or     eax,ecx
c001d589:	c9                   	leave  
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop

c001d58c <PIC::eoi(unsigned char)>:
c001d58c:	55                   	push   ebp
c001d58d:	89 e5                	mov    ebp,esp
c001d58f:	83 ec 14             	sub    esp,0x14
c001d592:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d595:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d598:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d59c:	75 1e                	jne    c001d5bc <PIC::eoi(unsigned char)+0x30>
c001d59e:	6a 0b                	push   0xb
c001d5a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5a3:	e8 7a ff ff ff       	call   c001d522 <PIC::getIRQReg(int)>
c001d5a8:	83 c4 08             	add    esp,0x8
c001d5ab:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d5af:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d5b3:	25 80 00 00 00       	and    eax,0x80
c001d5b8:	85 c0                	test   eax,eax
c001d5ba:	74 5f                	je     c001d61b <PIC::eoi(unsigned char)+0x8f>
c001d5bc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d5c0:	75 2d                	jne    c001d5ef <PIC::eoi(unsigned char)+0x63>
c001d5c2:	6a 0b                	push   0xb
c001d5c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5c7:	e8 56 ff ff ff       	call   c001d522 <PIC::getIRQReg(int)>
c001d5cc:	83 c4 08             	add    esp,0x8
c001d5cf:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d5d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d5d6:	66 85 c0             	test   ax,ax
c001d5d9:	78 14                	js     c001d5ef <PIC::eoi(unsigned char)+0x63>
c001d5db:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d5e1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d5e5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d5e8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d5ec:	ee                   	out    dx,al
c001d5ed:	eb 2d                	jmp    c001d61c <PIC::eoi(unsigned char)+0x90>
c001d5ef:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d5f3:	76 12                	jbe    c001d607 <PIC::eoi(unsigned char)+0x7b>
c001d5f5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d5fb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d5ff:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d602:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d606:	ee                   	out    dx,al
c001d607:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d60d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d611:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d614:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d618:	ee                   	out    dx,al
c001d619:	eb 01                	jmp    c001d61c <PIC::eoi(unsigned char)+0x90>
c001d61b:	90                   	nop
c001d61c:	c9                   	leave  
c001d61d:	c3                   	ret    

c001d61e <PIC::remap()>:
c001d61e:	55                   	push   ebp
c001d61f:	89 e5                	mov    ebp,esp
c001d621:	83 ec 48             	sub    esp,0x48
c001d624:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d62b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d632:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d638:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d63b:	89 c2                	mov    edx,eax
c001d63d:	ec                   	in     al,dx
c001d63e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d641:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d644:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d647:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d64d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d650:	89 c2                	mov    edx,eax
c001d652:	ec                   	in     al,dx
c001d653:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d656:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d659:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d65c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d662:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d666:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d669:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d66c:	ee                   	out    dx,al
c001d66d:	83 ec 0c             	sub    esp,0xc
c001d670:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d673:	e8 a4 fe ff ff       	call   c001d51c <PIC::ioWait()>
c001d678:	83 c4 10             	add    esp,0x10
c001d67b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d681:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001d685:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001d688:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001d68b:	ee                   	out    dx,al
c001d68c:	83 ec 0c             	sub    esp,0xc
c001d68f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d692:	e8 85 fe ff ff       	call   c001d51c <PIC::ioWait()>
c001d697:	83 c4 10             	add    esp,0x10
c001d69a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d69d:	0f b6 c0             	movzx  eax,al
c001d6a0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001d6a6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001d6a9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001d6ac:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001d6af:	ee                   	out    dx,al
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6b6:	e8 61 fe ff ff       	call   c001d51c <PIC::ioWait()>
c001d6bb:	83 c4 10             	add    esp,0x10
c001d6be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6c1:	0f b6 c0             	movzx  eax,al
c001d6c4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001d6ca:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001d6cd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001d6d0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d6d3:	ee                   	out    dx,al
c001d6d4:	83 ec 0c             	sub    esp,0xc
c001d6d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6da:	e8 3d fe ff ff       	call   c001d51c <PIC::ioWait()>
c001d6df:	83 c4 10             	add    esp,0x10
c001d6e2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001d6e8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001d6ec:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001d6ef:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001d6f2:	ee                   	out    dx,al
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6f9:	e8 1e fe ff ff       	call   c001d51c <PIC::ioWait()>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001d707:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001d70b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001d70e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001d711:	ee                   	out    dx,al
c001d712:	83 ec 0c             	sub    esp,0xc
c001d715:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d718:	e8 ff fd ff ff       	call   c001d51c <PIC::ioWait()>
c001d71d:	83 c4 10             	add    esp,0x10
c001d720:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001d726:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001d72a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001d72d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d730:	ee                   	out    dx,al
c001d731:	83 ec 0c             	sub    esp,0xc
c001d734:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d737:	e8 e0 fd ff ff       	call   c001d51c <PIC::ioWait()>
c001d73c:	83 c4 10             	add    esp,0x10
c001d73f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001d745:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001d749:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001d74c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d74f:	ee                   	out    dx,al
c001d750:	83 ec 0c             	sub    esp,0xc
c001d753:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d756:	e8 c1 fd ff ff       	call   c001d51c <PIC::ioWait()>
c001d75b:	83 c4 10             	add    esp,0x10
c001d75e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001d762:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001d768:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001d76b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001d76e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d771:	ee                   	out    dx,al
c001d772:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001d776:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001d77c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001d77f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001d782:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d785:	ee                   	out    dx,al
c001d786:	90                   	nop
c001d787:	c9                   	leave  
c001d788:	c3                   	ret    
c001d789:	90                   	nop

c001d78a <PIC::open(int, int, void*)>:
c001d78a:	55                   	push   ebp
c001d78b:	89 e5                	mov    ebp,esp
c001d78d:	83 ec 18             	sub    esp,0x18
c001d790:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001d796:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001d79a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d79d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d7a1:	ee                   	out    dx,al
c001d7a2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001d7a8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001d7ac:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d7af:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d7b3:	ee                   	out    dx,al
c001d7b4:	83 ec 0c             	sub    esp,0xc
c001d7b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7ba:	e8 5f fe ff ff       	call   c001d61e <PIC::remap()>
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	b8 00 00 00 00       	mov    eax,0x0
c001d7c7:	c9                   	leave  
c001d7c8:	c3                   	ret    
c001d7c9:	90                   	nop

c001d7ca <APICTimer::close(int, int, void*)>:
c001d7ca:	b8 00 00 00 00       	mov    eax,0x0
c001d7cf:	c3                   	ret    

c001d7d0 <apicTimerHandler(regs*, void*)>:
c001d7d0:	83 ec 0c             	sub    esp,0xc
c001d7d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7d9:	99                   	cdq    
c001d7da:	52                   	push   edx
c001d7db:	50                   	push   eax
c001d7dc:	6a 00                	push   0x0
c001d7de:	68 00 ca 9a 3b       	push   0x3b9aca00
c001d7e3:	e8 74 07 00 00       	call   c001df5c <__udivdi3>
c001d7e8:	83 c4 10             	add    esp,0x10
c001d7eb:	83 ec 08             	sub    esp,0x8
c001d7ee:	52                   	push   edx
c001d7ef:	50                   	push   eax
c001d7f0:	e8 4a 7c ff ff       	call   c001543f <timerHandler(unsigned long long)>
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	90                   	nop
c001d7f9:	83 c4 0c             	add    esp,0xc
c001d7fc:	c3                   	ret    
c001d7fd:	90                   	nop

c001d7fe <APICTimer::write(int)>:
c001d7fe:	53                   	push   ebx
c001d7ff:	83 ec 28             	sub    esp,0x28
c001d802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d806:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d80a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d810:	e8 91 96 ff ff       	call   c0016ea6 <thisCPU()>
c001d815:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001d81b:	83 ec 0c             	sub    esp,0xc
c001d81e:	50                   	push   eax
c001d81f:	e8 0e f6 ff ff       	call   c001ce32 <APIC::getBase()>
c001d824:	83 c4 10             	add    esp,0x10
c001d827:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d82b:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001d830:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c001d836:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d83a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001d83e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d842:	05 e0 03 00 00       	add    eax,0x3e0
c001d847:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001d84d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d851:	05 80 03 00 00       	add    eax,0x380
c001d856:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001d85c:	fb                   	sti    
c001d85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d865:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001d86a:	83 d2 00             	adc    edx,0x0
c001d86d:	89 c1                	mov    ecx,eax
c001d86f:	89 d3                	mov    ebx,edx
c001d871:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001d876:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c001d87c:	39 c8                	cmp    eax,ecx
c001d87e:	89 d0                	mov    eax,edx
c001d880:	19 d8                	sbb    eax,ebx
c001d882:	73 02                	jae    c001d886 <APICTimer::write(int)+0x88>
c001d884:	eb d7                	jmp    c001d85d <APICTimer::write(int)+0x5f>
c001d886:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d88a:	05 20 03 00 00       	add    eax,0x320
c001d88f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001d895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d899:	05 90 03 00 00       	add    eax,0x390
c001d89e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8a0:	f7 d0                	not    eax
c001d8a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8ae:	ba 00 00 00 00       	mov    edx,0x0
c001d8b3:	f7 f3                	div    ebx
c001d8b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8c3:	0d 00 00 02 00       	or     eax,0x20000
c001d8c8:	89 c2                	mov    edx,eax
c001d8ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8ce:	05 20 03 00 00       	add    eax,0x320
c001d8d3:	89 10                	mov    DWORD PTR [eax],edx
c001d8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8d9:	05 e0 03 00 00       	add    eax,0x3e0
c001d8de:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001d8e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8e8:	05 80 03 00 00       	add    eax,0x380
c001d8ed:	89 c2                	mov    edx,eax
c001d8ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8f3:	89 02                	mov    DWORD PTR [edx],eax
c001d8f5:	90                   	nop
c001d8f6:	83 c4 28             	add    esp,0x28
c001d8f9:	5b                   	pop    ebx
c001d8fa:	c3                   	ret    
c001d8fb:	90                   	nop

c001d8fc <APICTimer::open(int, int, void*)>:
c001d8fc:	57                   	push   edi
c001d8fd:	56                   	push   esi
c001d8fe:	53                   	push   ebx
c001d8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d903:	8b 00                	mov    eax,DWORD PTR [eax]
c001d905:	83 c0 24             	add    eax,0x24
c001d908:	8b 00                	mov    eax,DWORD PTR [eax]
c001d90a:	83 ec 08             	sub    esp,0x8
c001d90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d915:	ff d0                	call   eax
c001d917:	83 c4 10             	add    esp,0x10
c001d91a:	e8 87 95 ff ff       	call   c0016ea6 <thisCPU()>
c001d91f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	50                   	push   eax
c001d929:	e8 04 f5 ff ff       	call   c001ce32 <APIC::getBase()>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001d937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d93b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d941:	0f b6 f8             	movzx  edi,al
c001d944:	89 d0                	mov    eax,edx
c001d946:	ba 00 00 00 00       	mov    edx,0x0
c001d94b:	89 c1                	mov    ecx,eax
c001d94d:	80 e5 ff             	and    ch,0xff
c001d950:	89 cb                	mov    ebx,ecx
c001d952:	0f b6 f2             	movzx  esi,dl
c001d955:	89 d8                	mov    eax,ebx
c001d957:	89 f2                	mov    edx,esi
c001d959:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d95d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d960:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d964:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d968:	83 e0 00             	and    eax,0x0
c001d96b:	09 d0                	or     eax,edx
c001d96d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d975:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d97b:	8d 50 01             	lea    edx,[eax+0x1]
c001d97e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d982:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d988:	0f b6 d0             	movzx  edx,al
c001d98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d98f:	83 c2 08             	add    edx,0x8
c001d992:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d996:	0f b6 c9             	movzx  ecx,cl
c001d999:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d99f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9ab:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9b9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d9bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9c3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	51                   	push   ecx
c001d9cd:	6a 01                	push   0x1
c001d9cf:	68 d0 d7 01 c0       	push   0xc001d7d0
c001d9d4:	52                   	push   edx
c001d9d5:	50                   	push   eax
c001d9d6:	e8 d1 59 ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9db:	83 c4 20             	add    esp,0x20
c001d9de:	89 c2                	mov    edx,eax
c001d9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9e4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d9ea:	b8 00 00 00 00       	mov    eax,0x0
c001d9ef:	5b                   	pop    ebx
c001d9f0:	5e                   	pop    esi
c001d9f1:	5f                   	pop    edi
c001d9f2:	c3                   	ret    
c001d9f3:	90                   	nop

c001d9f4 <APICTimer::APICTimer()>:
c001d9f4:	83 ec 0c             	sub    esp,0xc
c001d9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9fb:	83 ec 08             	sub    esp,0x8
c001d9fe:	68 58 20 02 c0       	push   0xc0022058
c001da03:	50                   	push   eax
c001da04:	e8 a7 79 ff ff       	call   c00153b0 <Timer::Timer(char const*)>
c001da09:	83 c4 10             	add    esp,0x10
c001da0c:	ba 6c 20 02 c0       	mov    edx,0xc002206c
c001da11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da15:	89 10                	mov    DWORD PTR [eax],edx
c001da17:	90                   	nop
c001da18:	83 c4 0c             	add    esp,0xc
c001da1b:	c3                   	ret    

c001da1c <PIT::write(int)>:
c001da1c:	83 ec 10             	sub    esp,0x10
c001da1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da31:	a3 24 4a 02 c0       	mov    ds:0xc0024a24,eax
c001da36:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001da3b:	99                   	cdq    
c001da3c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001da40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da44:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001da4b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001da50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001da54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001da59:	ee                   	out    dx,al
c001da5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da5e:	0f b6 c0             	movzx  eax,al
c001da61:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001da68:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001da6c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001da70:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001da75:	ee                   	out    dx,al
c001da76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da7a:	c1 f8 08             	sar    eax,0x8
c001da7d:	0f b6 c0             	movzx  eax,al
c001da80:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001da87:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001da8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001da8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001da94:	ee                   	out    dx,al
c001da95:	90                   	nop
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	c3                   	ret    

c001da9a <pitHandler(regs*, void*)>:
c001da9a:	83 ec 0c             	sub    esp,0xc
c001da9d:	a1 24 4a 02 c0       	mov    eax,ds:0xc0024a24
c001daa2:	99                   	cdq    
c001daa3:	52                   	push   edx
c001daa4:	50                   	push   eax
c001daa5:	6a 00                	push   0x0
c001daa7:	68 00 ca 9a 3b       	push   0x3b9aca00
c001daac:	e8 ab 04 00 00       	call   c001df5c <__udivdi3>
c001dab1:	83 c4 10             	add    esp,0x10
c001dab4:	83 ec 08             	sub    esp,0x8
c001dab7:	52                   	push   edx
c001dab8:	50                   	push   eax
c001dab9:	e8 81 79 ff ff       	call   c001543f <timerHandler(unsigned long long)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	90                   	nop
c001dac2:	83 c4 0c             	add    esp,0xc
c001dac5:	c3                   	ret    

c001dac6 <PIT::open(int, int, void*)>:
c001dac6:	83 ec 0c             	sub    esp,0xc
c001dac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dacd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dacf:	83 c0 24             	add    eax,0x24
c001dad2:	8b 00                	mov    eax,DWORD PTR [eax]
c001dad4:	83 ec 08             	sub    esp,0x8
c001dad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dadf:	ff d0                	call   eax
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae8:	83 ec 0c             	sub    esp,0xc
c001daeb:	6a 00                	push   0x0
c001daed:	6a 01                	push   0x1
c001daef:	68 9a da 01 c0       	push   0xc001da9a
c001daf4:	6a 00                	push   0x0
c001daf6:	50                   	push   eax
c001daf7:	e8 b0 58 ff ff       	call   c00133ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dafc:	83 c4 20             	add    esp,0x20
c001daff:	89 c2                	mov    edx,eax
c001db01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db05:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db0b:	b8 00 00 00 00       	mov    eax,0x0
c001db10:	83 c4 0c             	add    esp,0xc
c001db13:	c3                   	ret    

c001db14 <PIT::close(int, int, void*)>:
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001db25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db29:	6a 01                	push   0x1
c001db2b:	68 9a da 01 c0       	push   0xc001da9a
c001db30:	6a 00                	push   0x0
c001db32:	50                   	push   eax
c001db33:	e8 d2 58 ff ff       	call   c001340a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001db38:	83 c4 10             	add    esp,0x10
c001db3b:	b8 00 00 00 00       	mov    eax,0x0
c001db40:	83 c4 0c             	add    esp,0xc
c001db43:	c3                   	ret    

c001db44 <PIT::PIT()>:
c001db44:	83 ec 0c             	sub    esp,0xc
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	83 ec 08             	sub    esp,0x8
c001db4e:	68 94 20 02 c0       	push   0xc0022094
c001db53:	50                   	push   eax
c001db54:	e8 57 78 ff ff       	call   c00153b0 <Timer::Timer(char const*)>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	ba bc 20 02 c0       	mov    edx,0xc00220bc
c001db61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db65:	89 10                	mov    DWORD PTR [eax],edx
c001db67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db71:	0f b6 d0             	movzx  edx,al
c001db74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db78:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001db7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db89:	0f b6 d0             	movzx  edx,al
c001db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db90:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001db95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db9f:	8d 50 01             	lea    edx,[eax+0x1]
c001dba2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dba6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dbac:	0f b6 d0             	movzx  edx,al
c001dbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dbb7:	83 e1 3f             	and    ecx,0x3f
c001dbba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbbe:	90                   	nop
c001dbbf:	83 c4 0c             	add    esp,0xc
c001dbc2:	c3                   	ret    
c001dbc3:	66 90                	xchg   ax,ax
c001dbc5:	66 90                	xchg   ax,ax
c001dbc7:	66 90                	xchg   ax,ax
c001dbc9:	66 90                	xchg   ax,ax
c001dbcb:	66 90                	xchg   ax,ax
c001dbcd:	66 90                	xchg   ax,ax
c001dbcf:	90                   	nop

c001dbd0 <avxDetect>:
c001dbd0:	b8 00 00 00 00       	mov    eax,0x0
c001dbd5:	c3                   	ret    

c001dbd6 <avxSave>:
c001dbd6:	c3                   	ret    

c001dbd7 <avxLoad>:
c001dbd7:	c3                   	ret    

c001dbd8 <avxInit>:
c001dbd8:	c3                   	ret    

c001dbd9 <avxClose>:
c001dbd9:	c3                   	ret    
c001dbda:	66 90                	xchg   ax,ax
c001dbdc:	66 90                	xchg   ax,ax
c001dbde:	66 90                	xchg   ax,ax

c001dbe0 <sseDetect>:
c001dbe0:	b8 01 00 00 00       	mov    eax,0x1
c001dbe5:	0f a2                	cpuid  
c001dbe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dbed:	74 06                	je     c001dbf5 <sseDetect.noSSE>
c001dbef:	b8 01 00 00 00       	mov    eax,0x1
c001dbf4:	c3                   	ret    

c001dbf5 <sseDetect.noSSE>:
c001dbf5:	b8 00 00 00 00       	mov    eax,0x0
c001dbfa:	c3                   	ret    

c001dbfb <sseSave>:
c001dbfb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dc00:	c3                   	ret    

c001dc01 <sseLoad>:
c001dc01:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dc06:	c3                   	ret    

c001dc07 <sseInit>:
c001dc07:	e8 40 00 00 00       	call   c001dc4c <x87Init>
c001dc0c:	0f 20 e0             	mov    eax,cr4
c001dc0f:	66 0d 00 06          	or     ax,0x600
c001dc13:	0f 22 e0             	mov    cr4,eax
c001dc16:	c3                   	ret    

c001dc17 <sseClose>:
c001dc17:	c3                   	ret    
c001dc18:	66 90                	xchg   ax,ax
c001dc1a:	66 90                	xchg   ax,ax
c001dc1c:	66 90                	xchg   ax,ax
c001dc1e:	66 90                	xchg   ax,ax

c001dc20 <value_37F>:
c001dc20:	7f 03                	jg     c001dc25 <value_37A+0x1>

c001dc22 <value_37E>:
c001dc22:	7e 03                	jle    c001dc27 <x87Detect+0x1>

c001dc24 <value_37A>:
c001dc24:	7a 03                	jp     c001dc29 <x87Detect+0x3>

c001dc26 <x87Detect>:
c001dc26:	b8 01 00 00 00       	mov    eax,0x1
c001dc2b:	0f a2                	cpuid  
c001dc2d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dc33:	74 06                	je     c001dc3b <x87Detect.nox87>
c001dc35:	b8 01 00 00 00       	mov    eax,0x1
c001dc3a:	c3                   	ret    

c001dc3b <x87Detect.nox87>:
c001dc3b:	b8 00 00 00 00       	mov    eax,0x0
c001dc40:	c3                   	ret    

c001dc41 <x87Save>:
c001dc41:	9b dd 74 24 08       	fsave  [esp+0x8]
c001dc46:	c3                   	ret    

c001dc47 <x87Load>:
c001dc47:	dd 64 24 08          	frstor [esp+0x8]
c001dc4b:	c3                   	ret    

c001dc4c <x87Init>:
c001dc4c:	9b db e3             	finit  
c001dc4f:	0f 20 c0             	mov    eax,cr0
c001dc52:	66 25 fb ff          	and    ax,0xfffb
c001dc56:	66 0d 22 00          	or     ax,0x22
c001dc5a:	0f 22 c0             	mov    cr0,eax
c001dc5d:	0f 06                	clts   
c001dc5f:	d9 2d 24 dc 01 c0    	fldcw  WORD PTR ds:0xc001dc24
c001dc65:	c3                   	ret    

c001dc66 <x87Close>:
c001dc66:	c3                   	ret    
c001dc67:	90                   	nop

c001dc68 <__do_global_ctors_aux>:
c001dc68:	a1 98 ed 01 c0       	mov    eax,ds:0xc001ed98
c001dc6d:	83 f8 ff             	cmp    eax,0xffffffff
c001dc70:	74 1a                	je     c001dc8c <__do_global_ctors_aux+0x24>
c001dc72:	55                   	push   ebp
c001dc73:	89 e5                	mov    ebp,esp
c001dc75:	53                   	push   ebx
c001dc76:	52                   	push   edx
c001dc77:	bb 98 ed 01 c0       	mov    ebx,0xc001ed98
c001dc7c:	ff d0                	call   eax
c001dc7e:	83 eb 04             	sub    ebx,0x4
c001dc81:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc83:	83 f8 ff             	cmp    eax,0xffffffff
c001dc86:	75 f4                	jne    c001dc7c <__do_global_ctors_aux+0x14>
c001dc88:	58                   	pop    eax
c001dc89:	5b                   	pop    ebx
c001dc8a:	5d                   	pop    ebp
c001dc8b:	c3                   	ret    
c001dc8c:	c3                   	ret    
c001dc8d:	66 90                	xchg   ax,ax
c001dc8f:	90                   	nop

c001dc90 <__divdi3>:
c001dc90:	55                   	push   ebp
c001dc91:	57                   	push   edi
c001dc92:	56                   	push   esi
c001dc93:	53                   	push   ebx
c001dc94:	83 ec 1c             	sub    esp,0x1c
c001dc97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dc9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dca2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dca6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcaa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcae:	85 db                	test   ebx,ebx
c001dcb0:	0f 88 8e 00 00 00    	js     c001dd44 <__divdi3+0xb4>
c001dcb6:	89 dd                	mov    ebp,ebx
c001dcb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dcc0:	89 d3                	mov    ebx,edx
c001dcc2:	85 d2                	test   edx,edx
c001dcc4:	79 0d                	jns    c001dcd3 <__divdi3+0x43>
c001dcc6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001dcca:	f7 d8                	neg    eax
c001dccc:	83 d2 00             	adc    edx,0x0
c001dccf:	f7 da                	neg    edx
c001dcd1:	89 d3                	mov    ebx,edx
c001dcd3:	89 c7                	mov    edi,eax
c001dcd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dcd8:	85 db                	test   ebx,ebx
c001dcda:	75 48                	jne    c001dd24 <__divdi3+0x94>
c001dcdc:	39 ef                	cmp    edi,ebp
c001dcde:	76 24                	jbe    c001dd04 <__divdi3+0x74>
c001dce0:	89 ea                	mov    edx,ebp
c001dce2:	f7 f7                	div    edi
c001dce4:	89 c1                	mov    ecx,eax
c001dce6:	31 f6                	xor    esi,esi
c001dce8:	89 c8                	mov    eax,ecx
c001dcea:	89 f2                	mov    edx,esi
c001dcec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcf0:	85 c9                	test   ecx,ecx
c001dcf2:	74 07                	je     c001dcfb <__divdi3+0x6b>
c001dcf4:	f7 d8                	neg    eax
c001dcf6:	83 d2 00             	adc    edx,0x0
c001dcf9:	f7 da                	neg    edx
c001dcfb:	83 c4 1c             	add    esp,0x1c
c001dcfe:	5b                   	pop    ebx
c001dcff:	5e                   	pop    esi
c001dd00:	5f                   	pop    edi
c001dd01:	5d                   	pop    ebp
c001dd02:	c3                   	ret    
c001dd03:	90                   	nop
c001dd04:	85 ff                	test   edi,edi
c001dd06:	75 0b                	jne    c001dd13 <__divdi3+0x83>
c001dd08:	b8 01 00 00 00       	mov    eax,0x1
c001dd0d:	31 d2                	xor    edx,edx
c001dd0f:	f7 f3                	div    ebx
c001dd11:	89 c7                	mov    edi,eax
c001dd13:	31 d2                	xor    edx,edx
c001dd15:	89 e8                	mov    eax,ebp
c001dd17:	f7 f7                	div    edi
c001dd19:	89 c6                	mov    esi,eax
c001dd1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dd1e:	f7 f7                	div    edi
c001dd20:	89 c1                	mov    ecx,eax
c001dd22:	eb c4                	jmp    c001dce8 <__divdi3+0x58>
c001dd24:	39 eb                	cmp    ebx,ebp
c001dd26:	77 3c                	ja     c001dd64 <__divdi3+0xd4>
c001dd28:	0f bd f3             	bsr    esi,ebx
c001dd2b:	83 f6 1f             	xor    esi,0x1f
c001dd2e:	75 40                	jne    c001dd70 <__divdi3+0xe0>
c001dd30:	39 eb                	cmp    ebx,ebp
c001dd32:	72 09                	jb     c001dd3d <__divdi3+0xad>
c001dd34:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dd37:	0f 87 97 00 00 00    	ja     c001ddd4 <__divdi3+0x144>
c001dd3d:	b9 01 00 00 00       	mov    ecx,0x1
c001dd42:	eb a4                	jmp    c001dce8 <__divdi3+0x58>
c001dd44:	f7 d9                	neg    ecx
c001dd46:	83 d3 00             	adc    ebx,0x0
c001dd49:	f7 db                	neg    ebx
c001dd4b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dd4e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dd52:	89 dd                	mov    ebp,ebx
c001dd54:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001dd5c:	e9 5f ff ff ff       	jmp    c001dcc0 <__divdi3+0x30>
c001dd61:	8d 76 00             	lea    esi,[esi+0x0]
c001dd64:	31 f6                	xor    esi,esi
c001dd66:	31 c9                	xor    ecx,ecx
c001dd68:	e9 7b ff ff ff       	jmp    c001dce8 <__divdi3+0x58>
c001dd6d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd70:	b8 20 00 00 00       	mov    eax,0x20
c001dd75:	29 f0                	sub    eax,esi
c001dd77:	89 f1                	mov    ecx,esi
c001dd79:	d3 e3                	shl    ebx,cl
c001dd7b:	89 fa                	mov    edx,edi
c001dd7d:	88 c1                	mov    cl,al
c001dd7f:	d3 ea                	shr    edx,cl
c001dd81:	09 da                	or     edx,ebx
c001dd83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dd87:	89 f1                	mov    ecx,esi
c001dd89:	d3 e7                	shl    edi,cl
c001dd8b:	89 eb                	mov    ebx,ebp
c001dd8d:	88 c1                	mov    cl,al
c001dd8f:	d3 eb                	shr    ebx,cl
c001dd91:	89 f1                	mov    ecx,esi
c001dd93:	d3 e5                	shl    ebp,cl
c001dd95:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001dd98:	88 c1                	mov    cl,al
c001dd9a:	d3 ea                	shr    edx,cl
c001dd9c:	09 d5                	or     ebp,edx
c001dd9e:	89 e8                	mov    eax,ebp
c001dda0:	89 da                	mov    edx,ebx
c001dda2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001dda6:	89 d3                	mov    ebx,edx
c001dda8:	89 c5                	mov    ebp,eax
c001ddaa:	f7 e7                	mul    edi
c001ddac:	39 d3                	cmp    ebx,edx
c001ddae:	72 18                	jb     c001ddc8 <__divdi3+0x138>
c001ddb0:	74 0a                	je     c001ddbc <__divdi3+0x12c>
c001ddb2:	89 e9                	mov    ecx,ebp
c001ddb4:	31 f6                	xor    esi,esi
c001ddb6:	e9 2d ff ff ff       	jmp    c001dce8 <__divdi3+0x58>
c001ddbb:	90                   	nop
c001ddbc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ddbf:	89 f1                	mov    ecx,esi
c001ddc1:	d3 e7                	shl    edi,cl
c001ddc3:	39 c7                	cmp    edi,eax
c001ddc5:	73 eb                	jae    c001ddb2 <__divdi3+0x122>
c001ddc7:	90                   	nop
c001ddc8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ddcb:	31 f6                	xor    esi,esi
c001ddcd:	e9 16 ff ff ff       	jmp    c001dce8 <__divdi3+0x58>
c001ddd2:	66 90                	xchg   ax,ax
c001ddd4:	31 c9                	xor    ecx,ecx
c001ddd6:	e9 0d ff ff ff       	jmp    c001dce8 <__divdi3+0x58>
c001dddb:	90                   	nop

c001dddc <__moddi3>:
c001dddc:	55                   	push   ebp
c001dddd:	57                   	push   edi
c001ddde:	56                   	push   esi
c001dddf:	53                   	push   ebx
c001dde0:	83 ec 2c             	sub    esp,0x2c
c001dde3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dde7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ddeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ddef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ddf3:	85 db                	test   ebx,ebx
c001ddf5:	0f 88 85 00 00 00    	js     c001de80 <__moddi3+0xa4>
c001ddfb:	89 de                	mov    esi,ebx
c001ddfd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001de05:	89 d7                	mov    edi,edx
c001de07:	85 d2                	test   edx,edx
c001de09:	79 09                	jns    c001de14 <__moddi3+0x38>
c001de0b:	f7 d8                	neg    eax
c001de0d:	83 d2 00             	adc    edx,0x0
c001de10:	f7 da                	neg    edx
c001de12:	89 d7                	mov    edi,edx
c001de14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de18:	89 cd                	mov    ebp,ecx
c001de1a:	85 ff                	test   edi,edi
c001de1c:	75 52                	jne    c001de70 <__moddi3+0x94>
c001de1e:	89 c3                	mov    ebx,eax
c001de20:	39 f0                	cmp    eax,esi
c001de22:	76 24                	jbe    c001de48 <__moddi3+0x6c>
c001de24:	89 c8                	mov    eax,ecx
c001de26:	89 f2                	mov    edx,esi
c001de28:	f7 f3                	div    ebx
c001de2a:	89 d6                	mov    esi,edx
c001de2c:	89 f0                	mov    eax,esi
c001de2e:	31 d2                	xor    edx,edx
c001de30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de34:	85 c9                	test   ecx,ecx
c001de36:	74 07                	je     c001de3f <__moddi3+0x63>
c001de38:	f7 d8                	neg    eax
c001de3a:	83 d2 00             	adc    edx,0x0
c001de3d:	f7 da                	neg    edx
c001de3f:	83 c4 2c             	add    esp,0x2c
c001de42:	5b                   	pop    ebx
c001de43:	5e                   	pop    esi
c001de44:	5f                   	pop    edi
c001de45:	5d                   	pop    ebp
c001de46:	c3                   	ret    
c001de47:	90                   	nop
c001de48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001de4c:	85 db                	test   ebx,ebx
c001de4e:	75 0d                	jne    c001de5d <__moddi3+0x81>
c001de50:	b8 01 00 00 00       	mov    eax,0x1
c001de55:	31 d2                	xor    edx,edx
c001de57:	f7 f7                	div    edi
c001de59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de5d:	89 f0                	mov    eax,esi
c001de5f:	31 d2                	xor    edx,edx
c001de61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001de65:	f7 f7                	div    edi
c001de67:	89 e8                	mov    eax,ebp
c001de69:	f7 f7                	div    edi
c001de6b:	89 d6                	mov    esi,edx
c001de6d:	eb bd                	jmp    c001de2c <__moddi3+0x50>
c001de6f:	90                   	nop
c001de70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001de74:	39 f7                	cmp    edi,esi
c001de76:	76 20                	jbe    c001de98 <__moddi3+0xbc>
c001de78:	89 c8                	mov    eax,ecx
c001de7a:	89 f2                	mov    edx,esi
c001de7c:	eb b2                	jmp    c001de30 <__moddi3+0x54>
c001de7e:	66 90                	xchg   ax,ax
c001de80:	f7 d9                	neg    ecx
c001de82:	83 d3 00             	adc    ebx,0x0
c001de85:	f7 db                	neg    ebx
c001de87:	89 de                	mov    esi,ebx
c001de89:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001de91:	e9 6f ff ff ff       	jmp    c001de05 <__moddi3+0x29>
c001de96:	66 90                	xchg   ax,ax
c001de98:	0f bd c7             	bsr    eax,edi
c001de9b:	83 f0 1f             	xor    eax,0x1f
c001de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dea2:	75 24                	jne    c001dec8 <__moddi3+0xec>
c001dea4:	39 f7                	cmp    edi,esi
c001dea6:	72 06                	jb     c001deae <__moddi3+0xd2>
c001dea8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001deac:	77 0c                	ja     c001deba <__moddi3+0xde>
c001deae:	89 e9                	mov    ecx,ebp
c001deb0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001deb4:	19 fe                	sbb    esi,edi
c001deb6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001deba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001debe:	89 f2                	mov    edx,esi
c001dec0:	e9 6b ff ff ff       	jmp    c001de30 <__moddi3+0x54>
c001dec5:	8d 76 00             	lea    esi,[esi+0x0]
c001dec8:	b8 20 00 00 00       	mov    eax,0x20
c001decd:	89 c2                	mov    edx,eax
c001decf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ded3:	29 da                	sub    edx,ebx
c001ded5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ded9:	88 d9                	mov    cl,bl
c001dedb:	d3 e7                	shl    edi,cl
c001dedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dee1:	88 d1                	mov    cl,dl
c001dee3:	d3 e8                	shr    eax,cl
c001dee5:	09 c7                	or     edi,eax
c001dee7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001deeb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001deef:	89 d8                	mov    eax,ebx
c001def1:	88 d9                	mov    cl,bl
c001def3:	d3 e7                	shl    edi,cl
c001def5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001def9:	89 f3                	mov    ebx,esi
c001defb:	88 d1                	mov    cl,dl
c001defd:	d3 eb                	shr    ebx,cl
c001deff:	89 c7                	mov    edi,eax
c001df01:	88 c1                	mov    cl,al
c001df03:	d3 e6                	shl    esi,cl
c001df05:	89 e8                	mov    eax,ebp
c001df07:	88 d1                	mov    cl,dl
c001df09:	d3 e8                	shr    eax,cl
c001df0b:	09 f0                	or     eax,esi
c001df0d:	89 f9                	mov    ecx,edi
c001df0f:	d3 e5                	shl    ebp,cl
c001df11:	89 da                	mov    edx,ebx
c001df13:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001df17:	89 d3                	mov    ebx,edx
c001df19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001df1d:	89 c6                	mov    esi,eax
c001df1f:	89 d1                	mov    ecx,edx
c001df21:	39 d3                	cmp    ebx,edx
c001df23:	72 27                	jb     c001df4c <__moddi3+0x170>
c001df25:	74 21                	je     c001df48 <__moddi3+0x16c>
c001df27:	29 f5                	sub    ebp,esi
c001df29:	19 cb                	sbb    ebx,ecx
c001df2b:	89 de                	mov    esi,ebx
c001df2d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001df31:	d3 e6                	shl    esi,cl
c001df33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001df37:	89 f9                	mov    ecx,edi
c001df39:	d3 ed                	shr    ebp,cl
c001df3b:	09 ee                	or     esi,ebp
c001df3d:	89 f0                	mov    eax,esi
c001df3f:	d3 eb                	shr    ebx,cl
c001df41:	89 da                	mov    edx,ebx
c001df43:	e9 e8 fe ff ff       	jmp    c001de30 <__moddi3+0x54>
c001df48:	39 c5                	cmp    ebp,eax
c001df4a:	73 db                	jae    c001df27 <__moddi3+0x14b>
c001df4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001df50:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001df54:	89 d1                	mov    ecx,edx
c001df56:	89 c6                	mov    esi,eax
c001df58:	eb cd                	jmp    c001df27 <__moddi3+0x14b>
c001df5a:	66 90                	xchg   ax,ax

c001df5c <__udivdi3>:
c001df5c:	55                   	push   ebp
c001df5d:	57                   	push   edi
c001df5e:	56                   	push   esi
c001df5f:	53                   	push   ebx
c001df60:	83 ec 1c             	sub    esp,0x1c
c001df63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001df67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001df6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df73:	85 d2                	test   edx,edx
c001df75:	75 41                	jne    c001dfb8 <__udivdi3+0x5c>
c001df77:	39 f7                	cmp    edi,esi
c001df79:	76 15                	jbe    c001df90 <__udivdi3+0x34>
c001df7b:	89 e8                	mov    eax,ebp
c001df7d:	89 f2                	mov    edx,esi
c001df7f:	f7 f7                	div    edi
c001df81:	31 db                	xor    ebx,ebx
c001df83:	89 da                	mov    edx,ebx
c001df85:	83 c4 1c             	add    esp,0x1c
c001df88:	5b                   	pop    ebx
c001df89:	5e                   	pop    esi
c001df8a:	5f                   	pop    edi
c001df8b:	5d                   	pop    ebp
c001df8c:	c3                   	ret    
c001df8d:	8d 76 00             	lea    esi,[esi+0x0]
c001df90:	89 f9                	mov    ecx,edi
c001df92:	85 ff                	test   edi,edi
c001df94:	75 0b                	jne    c001dfa1 <__udivdi3+0x45>
c001df96:	b8 01 00 00 00       	mov    eax,0x1
c001df9b:	31 d2                	xor    edx,edx
c001df9d:	f7 f7                	div    edi
c001df9f:	89 c1                	mov    ecx,eax
c001dfa1:	31 d2                	xor    edx,edx
c001dfa3:	89 f0                	mov    eax,esi
c001dfa5:	f7 f1                	div    ecx
c001dfa7:	89 c3                	mov    ebx,eax
c001dfa9:	89 e8                	mov    eax,ebp
c001dfab:	f7 f1                	div    ecx
c001dfad:	89 da                	mov    edx,ebx
c001dfaf:	83 c4 1c             	add    esp,0x1c
c001dfb2:	5b                   	pop    ebx
c001dfb3:	5e                   	pop    esi
c001dfb4:	5f                   	pop    edi
c001dfb5:	5d                   	pop    ebp
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop
c001dfb8:	39 f2                	cmp    edx,esi
c001dfba:	77 1c                	ja     c001dfd8 <__udivdi3+0x7c>
c001dfbc:	0f bd da             	bsr    ebx,edx
c001dfbf:	83 f3 1f             	xor    ebx,0x1f
c001dfc2:	75 24                	jne    c001dfe8 <__udivdi3+0x8c>
c001dfc4:	39 f2                	cmp    edx,esi
c001dfc6:	72 08                	jb     c001dfd0 <__udivdi3+0x74>
c001dfc8:	39 ef                	cmp    edi,ebp
c001dfca:	0f 87 84 00 00 00    	ja     c001e054 <__udivdi3+0xf8>
c001dfd0:	b8 01 00 00 00       	mov    eax,0x1
c001dfd5:	eb ac                	jmp    c001df83 <__udivdi3+0x27>
c001dfd7:	90                   	nop
c001dfd8:	31 db                	xor    ebx,ebx
c001dfda:	31 c0                	xor    eax,eax
c001dfdc:	89 da                	mov    edx,ebx
c001dfde:	83 c4 1c             	add    esp,0x1c
c001dfe1:	5b                   	pop    ebx
c001dfe2:	5e                   	pop    esi
c001dfe3:	5f                   	pop    edi
c001dfe4:	5d                   	pop    ebp
c001dfe5:	c3                   	ret    
c001dfe6:	66 90                	xchg   ax,ax
c001dfe8:	b8 20 00 00 00       	mov    eax,0x20
c001dfed:	29 d8                	sub    eax,ebx
c001dfef:	88 d9                	mov    cl,bl
c001dff1:	d3 e2                	shl    edx,cl
c001dff3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dff7:	89 fa                	mov    edx,edi
c001dff9:	88 c1                	mov    cl,al
c001dffb:	d3 ea                	shr    edx,cl
c001dffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e001:	09 d1                	or     ecx,edx
c001e003:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e007:	88 d9                	mov    cl,bl
c001e009:	d3 e7                	shl    edi,cl
c001e00b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e00f:	89 f7                	mov    edi,esi
c001e011:	88 c1                	mov    cl,al
c001e013:	d3 ef                	shr    edi,cl
c001e015:	88 d9                	mov    cl,bl
c001e017:	d3 e6                	shl    esi,cl
c001e019:	89 ea                	mov    edx,ebp
c001e01b:	88 c1                	mov    cl,al
c001e01d:	d3 ea                	shr    edx,cl
c001e01f:	09 d6                	or     esi,edx
c001e021:	89 f0                	mov    eax,esi
c001e023:	89 fa                	mov    edx,edi
c001e025:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e029:	89 d7                	mov    edi,edx
c001e02b:	89 c6                	mov    esi,eax
c001e02d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e031:	39 d7                	cmp    edi,edx
c001e033:	72 13                	jb     c001e048 <__udivdi3+0xec>
c001e035:	74 09                	je     c001e040 <__udivdi3+0xe4>
c001e037:	89 f0                	mov    eax,esi
c001e039:	31 db                	xor    ebx,ebx
c001e03b:	e9 43 ff ff ff       	jmp    c001df83 <__udivdi3+0x27>
c001e040:	88 d9                	mov    cl,bl
c001e042:	d3 e5                	shl    ebp,cl
c001e044:	39 c5                	cmp    ebp,eax
c001e046:	73 ef                	jae    c001e037 <__udivdi3+0xdb>
c001e048:	8d 46 ff             	lea    eax,[esi-0x1]
c001e04b:	31 db                	xor    ebx,ebx
c001e04d:	e9 31 ff ff ff       	jmp    c001df83 <__udivdi3+0x27>
c001e052:	66 90                	xchg   ax,ax
c001e054:	31 c0                	xor    eax,eax
c001e056:	e9 28 ff ff ff       	jmp    c001df83 <__udivdi3+0x27>
c001e05b:	90                   	nop

c001e05c <__umoddi3>:
c001e05c:	55                   	push   ebp
c001e05d:	57                   	push   edi
c001e05e:	56                   	push   esi
c001e05f:	53                   	push   ebx
c001e060:	83 ec 1c             	sub    esp,0x1c
c001e063:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e067:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e06b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e06f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e073:	89 da                	mov    edx,ebx
c001e075:	85 c0                	test   eax,eax
c001e077:	75 37                	jne    c001e0b0 <__umoddi3+0x54>
c001e079:	39 df                	cmp    edi,ebx
c001e07b:	76 13                	jbe    c001e090 <__umoddi3+0x34>
c001e07d:	89 f0                	mov    eax,esi
c001e07f:	f7 f7                	div    edi
c001e081:	89 d0                	mov    eax,edx
c001e083:	31 d2                	xor    edx,edx
c001e085:	83 c4 1c             	add    esp,0x1c
c001e088:	5b                   	pop    ebx
c001e089:	5e                   	pop    esi
c001e08a:	5f                   	pop    edi
c001e08b:	5d                   	pop    ebp
c001e08c:	c3                   	ret    
c001e08d:	8d 76 00             	lea    esi,[esi+0x0]
c001e090:	89 fd                	mov    ebp,edi
c001e092:	85 ff                	test   edi,edi
c001e094:	75 0b                	jne    c001e0a1 <__umoddi3+0x45>
c001e096:	b8 01 00 00 00       	mov    eax,0x1
c001e09b:	31 d2                	xor    edx,edx
c001e09d:	f7 f7                	div    edi
c001e09f:	89 c5                	mov    ebp,eax
c001e0a1:	89 d8                	mov    eax,ebx
c001e0a3:	31 d2                	xor    edx,edx
c001e0a5:	f7 f5                	div    ebp
c001e0a7:	89 f0                	mov    eax,esi
c001e0a9:	f7 f5                	div    ebp
c001e0ab:	89 d0                	mov    eax,edx
c001e0ad:	eb d4                	jmp    c001e083 <__umoddi3+0x27>
c001e0af:	90                   	nop
c001e0b0:	89 f1                	mov    ecx,esi
c001e0b2:	39 d8                	cmp    eax,ebx
c001e0b4:	76 0a                	jbe    c001e0c0 <__umoddi3+0x64>
c001e0b6:	89 f0                	mov    eax,esi
c001e0b8:	83 c4 1c             	add    esp,0x1c
c001e0bb:	5b                   	pop    ebx
c001e0bc:	5e                   	pop    esi
c001e0bd:	5f                   	pop    edi
c001e0be:	5d                   	pop    ebp
c001e0bf:	c3                   	ret    
c001e0c0:	0f bd e8             	bsr    ebp,eax
c001e0c3:	83 f5 1f             	xor    ebp,0x1f
c001e0c6:	75 1c                	jne    c001e0e4 <__umoddi3+0x88>
c001e0c8:	39 d8                	cmp    eax,ebx
c001e0ca:	72 04                	jb     c001e0d0 <__umoddi3+0x74>
c001e0cc:	39 f7                	cmp    edi,esi
c001e0ce:	77 08                	ja     c001e0d8 <__umoddi3+0x7c>
c001e0d0:	89 da                	mov    edx,ebx
c001e0d2:	29 fe                	sub    esi,edi
c001e0d4:	19 c2                	sbb    edx,eax
c001e0d6:	89 f1                	mov    ecx,esi
c001e0d8:	89 c8                	mov    eax,ecx
c001e0da:	83 c4 1c             	add    esp,0x1c
c001e0dd:	5b                   	pop    ebx
c001e0de:	5e                   	pop    esi
c001e0df:	5f                   	pop    edi
c001e0e0:	5d                   	pop    ebp
c001e0e1:	c3                   	ret    
c001e0e2:	66 90                	xchg   ax,ax
c001e0e4:	ba 20 00 00 00       	mov    edx,0x20
c001e0e9:	29 ea                	sub    edx,ebp
c001e0eb:	89 e9                	mov    ecx,ebp
c001e0ed:	d3 e0                	shl    eax,cl
c001e0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0f3:	89 f8                	mov    eax,edi
c001e0f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e0f9:	88 d1                	mov    cl,dl
c001e0fb:	d3 e8                	shr    eax,cl
c001e0fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e101:	09 c1                	or     ecx,eax
c001e103:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e107:	89 e9                	mov    ecx,ebp
c001e109:	d3 e7                	shl    edi,cl
c001e10b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e10f:	89 d8                	mov    eax,ebx
c001e111:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e115:	88 d1                	mov    cl,dl
c001e117:	d3 e8                	shr    eax,cl
c001e119:	89 c7                	mov    edi,eax
c001e11b:	89 e9                	mov    ecx,ebp
c001e11d:	d3 e3                	shl    ebx,cl
c001e11f:	89 f0                	mov    eax,esi
c001e121:	88 d1                	mov    cl,dl
c001e123:	d3 e8                	shr    eax,cl
c001e125:	09 d8                	or     eax,ebx
c001e127:	89 e9                	mov    ecx,ebp
c001e129:	d3 e6                	shl    esi,cl
c001e12b:	89 f3                	mov    ebx,esi
c001e12d:	89 fa                	mov    edx,edi
c001e12f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e133:	89 d1                	mov    ecx,edx
c001e135:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e139:	89 c6                	mov    esi,eax
c001e13b:	89 d7                	mov    edi,edx
c001e13d:	39 d1                	cmp    ecx,edx
c001e13f:	72 27                	jb     c001e168 <__umoddi3+0x10c>
c001e141:	74 21                	je     c001e164 <__umoddi3+0x108>
c001e143:	89 ca                	mov    edx,ecx
c001e145:	29 f3                	sub    ebx,esi
c001e147:	19 fa                	sbb    edx,edi
c001e149:	89 d0                	mov    eax,edx
c001e14b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e14f:	d3 e0                	shl    eax,cl
c001e151:	89 e9                	mov    ecx,ebp
c001e153:	d3 eb                	shr    ebx,cl
c001e155:	09 d8                	or     eax,ebx
c001e157:	d3 ea                	shr    edx,cl
c001e159:	83 c4 1c             	add    esp,0x1c
c001e15c:	5b                   	pop    ebx
c001e15d:	5e                   	pop    esi
c001e15e:	5f                   	pop    edi
c001e15f:	5d                   	pop    ebp
c001e160:	c3                   	ret    
c001e161:	8d 76 00             	lea    esi,[esi+0x0]
c001e164:	39 c3                	cmp    ebx,eax
c001e166:	73 db                	jae    c001e143 <__umoddi3+0xe7>
c001e168:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e16c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e170:	89 d7                	mov    edi,edx
c001e172:	89 c6                	mov    esi,eax
c001e174:	eb cd                	jmp    c001e143 <__umoddi3+0xe7>
c001e176:	66 90                	xchg   ax,ax
c001e178:	66 90                	xchg   ax,ax
c001e17a:	66 90                	xchg   ax,ax
c001e17c:	66 90                	xchg   ax,ax
c001e17e:	66 90                	xchg   ax,ax

c001e180 <fabs>:
c001e180:	83 ec 0c             	sub    esp,0xc
c001e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e187:	89 04 24             	mov    DWORD PTR [esp],eax
c001e18a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e18e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e197:	dd 04 24             	fld    QWORD PTR [esp]
c001e19a:	83 c4 0c             	add    esp,0xc
c001e19d:	c3                   	ret    
c001e19e:	66 90                	xchg   ax,ax

c001e1a0 <lrint>:
c001e1a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e1a4:	83 ec 04             	sub    esp,0x4
c001e1a7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e1aa:	58                   	pop    eax
c001e1ab:	c3                   	ret    

c001e1ac <lrintf>:
c001e1ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e1b0:	83 ec 04             	sub    esp,0x4
c001e1b3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e1b6:	58                   	pop    eax
c001e1b7:	c3                   	ret    

Disassembly of section .init:

c001e1b8 <_init>:
c001e1b8:	55                   	push   ebp
c001e1b9:	89 e5                	mov    ebp,esp
c001e1bb:	e8 58 1f fe ff       	call   c0000118 <frame_dummy>
c001e1c0:	e8 a3 fa ff ff       	call   c001dc68 <__do_global_ctors_aux>
c001e1c5:	5d                   	pop    ebp
c001e1c6:	c3                   	ret    

Disassembly of section .fini:

c001e1c7 <_fini>:
c001e1c7:	55                   	push   ebp
c001e1c8:	89 e5                	mov    ebp,esp
c001e1ca:	e8 d9 1e fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e1cf:	5d                   	pop    ebp
c001e1d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e1d2 <Computer::~Computer()>:
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	ba f8 fb 01 c0       	mov    edx,0xc001fbf8
c001e1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1de:	89 10                	mov    DWORD PTR [eax],edx
c001e1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	50                   	push   eax
c001e1e8:	e8 0d 51 ff ff       	call   c00132fa <Device::~Device()>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	90                   	nop
c001e1f1:	83 c4 0c             	add    esp,0xc
c001e1f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e1f6 <Computer::~Computer()>:
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	83 ec 0c             	sub    esp,0xc
c001e1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e200:	e8 cd ff ff ff       	call   c001e1d2 <Computer::~Computer()>
c001e205:	83 c4 10             	add    esp,0x10
c001e208:	83 ec 08             	sub    esp,0x8
c001e20b:	68 ec 01 00 00       	push   0x1ec
c001e210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e214:	e8 44 3f ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	83 c4 0c             	add    esp,0xc
c001e21f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e220 <idleCommon()>:
c001e220:	83 ec 0c             	sub    esp,0xc
c001e223:	e8 18 fe fe ff       	call   c000e040 <lockScheduler()>
c001e228:	e8 47 01 ff ff       	call   c000e374 <schedule()>
c001e22d:	83 c4 0c             	add    esp,0xc
c001e230:	e9 0d fe fe ff       	jmp    c000e042 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e235 <CPU::readCR0()>:
c001e235:	83 ec 10             	sub    esp,0x10
c001e238:	0f 20 c0             	mov    eax,cr0
c001e23b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e23f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e247 <CPU::readCR2()>:
c001e247:	83 ec 10             	sub    esp,0x10
c001e24a:	0f 20 d0             	mov    eax,cr2
c001e24d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e259 <CPU::readCR3()>:
c001e259:	83 ec 10             	sub    esp,0x10
c001e25c:	0f 20 d8             	mov    eax,cr3
c001e25f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e267:	83 c4 10             	add    esp,0x10
c001e26a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e26b <CPU::readCR4()>:
c001e26b:	83 ec 10             	sub    esp,0x10
c001e26e:	0f 20 e0             	mov    eax,cr4
c001e271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e279:	83 c4 10             	add    esp,0x10
c001e27c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e27d <CPU::writeCR3(unsigned long)>:
c001e27d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e281:	0f 22 d8             	mov    cr3,eax
c001e284:	90                   	nop
c001e285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e286 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e286:	90                   	nop
c001e287:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e288 <ThreadControlBlock::ThreadControlBlock()>:
c001e288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e28c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e297:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e29e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2a2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2ad:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2b8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e2c4:	90                   	nop
c001e2c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e2c6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e2c6:	83 ec 0c             	sub    esp,0xc
c001e2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e302:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e309:	83 ec 0c             	sub    esp,0xc
c001e30c:	68 08 05 02 c0       	push   0xc0020508
c001e311:	e8 88 e8 fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001e316:	83 c4 10             	add    esp,0x10
c001e319:	90                   	nop
c001e31a:	83 c4 0c             	add    esp,0xc
c001e31d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e31e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e326:	75 10                	jne    c001e338 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	68 24 05 02 c0       	push   0xc0020524
c001e330:	e8 87 e9 fe ff       	call   c000ccbc <panic(char const*)>
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e33e:	85 c0                	test   eax,eax
c001e340:	74 34                	je     c001e376 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e349:	85 c0                	test   eax,eax
c001e34b:	74 29                	je     c001e376 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e34d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e351:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e358:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e363:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e36d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e374:	eb 65                	jmp    c001e3db <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e37c:	85 c0                	test   eax,eax
c001e37e:	75 4b                	jne    c001e3cb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e387:	85 c0                	test   eax,eax
c001e389:	75 40                	jne    c001e3cb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e393:	89 10                	mov    DWORD PTR [eax],edx
c001e395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e399:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e39d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3a7:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3b5:	85 c0                	test   eax,eax
c001e3b7:	74 22                	je     c001e3db <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	68 46 05 02 c0       	push   0xc0020546
c001e3c1:	e8 f6 e8 fe ff       	call   c000ccbc <panic(char const*)>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	eb 10                	jmp    c001e3db <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e3cb:	83 ec 0c             	sub    esp,0xc
c001e3ce:	68 50 05 02 c0       	push   0xc0020550
c001e3d3:	e8 e4 e8 fe ff       	call   c000ccbc <panic(char const*)>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3e2:	8d 50 01             	lea    edx,[eax+0x1]
c001e3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3ec:	90                   	nop
c001e3ed:	83 c4 0c             	add    esp,0xc
c001e3f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e3f2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e3f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3f8:	85 c0                	test   eax,eax
c001e3fa:	75 0e                	jne    c001e40a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e403:	85 c0                	test   eax,eax
c001e405:	75 03                	jne    c001e40a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e407:	b0 01                	mov    al,0x1
c001e409:	c3                   	ret    
c001e40a:	b0 00                	mov    al,0x0
c001e40c:	90                   	nop
c001e40d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e40e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e40e:	83 ec 0c             	sub    esp,0xc
c001e411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e415:	8b 00                	mov    eax,DWORD PTR [eax]
c001e417:	85 c0                	test   eax,eax
c001e419:	75 15                	jne    c001e430 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	68 5c 05 02 c0       	push   0xc002055c
c001e423:	e8 94 e8 fe ff       	call   c000ccbc <panic(char const*)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	e9 88 00 00 00       	jmp    c001e4b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e437:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e43a:	85 c0                	test   eax,eax
c001e43c:	0f 95 c0             	setne  al
c001e43f:	84 c0                	test   al,al
c001e441:	74 10                	je     c001e453 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e443:	83 ec 0c             	sub    esp,0xc
c001e446:	68 a7 05 02 c0       	push   0xc00205a7
c001e44b:	e8 6c e8 fe ff       	call   c000ccbc <panic(char const*)>
c001e450:	83 c4 10             	add    esp,0x10
c001e453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e457:	8b 00                	mov    eax,DWORD PTR [eax]
c001e459:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e45c:	85 c0                	test   eax,eax
c001e45e:	0f 94 c0             	sete   al
c001e461:	84 c0                	test   al,al
c001e463:	74 33                	je     c001e498 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e469:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e473:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e481:	83 f8 01             	cmp    eax,0x1
c001e484:	74 21                	je     c001e4a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e486:	83 ec 0c             	sub    esp,0xc
c001e489:	68 80 05 02 c0       	push   0xc0020580
c001e48e:	e8 29 e8 fe ff       	call   c000ccbc <panic(char const*)>
c001e493:	83 c4 10             	add    esp,0x10
c001e496:	eb 0f                	jmp    c001e4a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e49e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a5:	89 10                	mov    DWORD PTR [eax],edx
c001e4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4ae:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4b8:	83 c4 0c             	add    esp,0xc
c001e4bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e4c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e4c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e4cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e4cc <LinkedList<UnixFile>::~LinkedList()>:
c001e4cc:	90                   	nop
c001e4cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e4ce <LinkedList<UnixFile>::LinkedList()>:
c001e4ce:	83 ec 0c             	sub    esp,0xc
c001e4d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e511:	83 ec 0c             	sub    esp,0xc
c001e514:	68 08 05 02 c0       	push   0xc0020508
c001e519:	e8 80 e6 fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	90                   	nop
c001e522:	83 c4 0c             	add    esp,0xc
c001e525:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e526 <LinkedList<UnixFile>::getFirstElement()>:
c001e526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e52a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e52c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e52e <LinkedList<UnixFile>::removeFirst()>:
c001e52e:	83 ec 0c             	sub    esp,0xc
c001e531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e535:	8b 00                	mov    eax,DWORD PTR [eax]
c001e537:	85 c0                	test   eax,eax
c001e539:	75 12                	jne    c001e54d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	68 5c 05 02 c0       	push   0xc002055c
c001e543:	e8 74 e7 fe ff       	call   c000ccbc <panic(char const*)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	eb 7e                	jmp    c001e5cb <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e551:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e557:	85 c0                	test   eax,eax
c001e559:	74 10                	je     c001e56b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	68 a7 05 02 c0       	push   0xc00205a7
c001e563:	e8 54 e7 fe ff       	call   c000ccbc <panic(char const*)>
c001e568:	83 c4 10             	add    esp,0x10
c001e56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e56f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e574:	85 c0                	test   eax,eax
c001e576:	75 33                	jne    c001e5ab <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e586:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e591:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e594:	83 f8 01             	cmp    eax,0x1
c001e597:	74 21                	je     c001e5ba <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e599:	83 ec 0c             	sub    esp,0xc
c001e59c:	68 80 05 02 c0       	push   0xc0020580
c001e5a1:	e8 16 e7 fe ff       	call   c000ccbc <panic(char const*)>
c001e5a6:	83 c4 10             	add    esp,0x10
c001e5a9:	eb 0f                	jmp    c001e5ba <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5af:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5b1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b8:	89 10                	mov    DWORD PTR [eax],edx
c001e5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e5c1:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e5cb:	83 c4 0c             	add    esp,0xc
c001e5ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e5d0 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e5d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e5d8:	83 ec 1c             	sub    esp,0x1c
c001e5db:	83 ec 0c             	sub    esp,0xc
c001e5de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e5e2:	e8 3f ff ff ff       	call   c001e526 <LinkedList<UnixFile>::getFirstElement()>
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e5f3:	74 43                	je     c001e638 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001e5f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5f9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001e5fd:	75 20                	jne    c001e61f <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	68 4c 07 02 c0       	push   0xc002074c
c001e607:	e8 92 e5 fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001e60c:	83 c4 10             	add    esp,0x10
c001e60f:	83 ec 0c             	sub    esp,0xc
c001e612:	68 63 07 02 c0       	push   0xc0020763
c001e617:	e8 a0 e6 fe ff       	call   c000ccbc <panic(char const*)>
c001e61c:	83 c4 10             	add    esp,0x10
c001e61f:	83 ec 08             	sub    esp,0x8
c001e622:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e626:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e62a:	e8 a1 ff ff ff       	call   c001e5d0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001e62f:	83 c4 10             	add    esp,0x10
c001e632:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e636:	eb b6                	jmp    c001e5ee <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e638:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e63d:	75 10                	jne    c001e64f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001e63f:	83 ec 0c             	sub    esp,0xc
c001e642:	68 24 05 02 c0       	push   0xc0020524
c001e647:	e8 70 e6 fe ff       	call   c000ccbc <panic(char const*)>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e653:	8b 00                	mov    eax,DWORD PTR [eax]
c001e655:	85 c0                	test   eax,eax
c001e657:	74 34                	je     c001e68d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e65d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e660:	85 c0                	test   eax,eax
c001e662:	74 29                	je     c001e68d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e66b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e66f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e676:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e67a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e684:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e68b:	eb 65                	jmp    c001e6f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e691:	8b 00                	mov    eax,DWORD PTR [eax]
c001e693:	85 c0                	test   eax,eax
c001e695:	75 4b                	jne    c001e6e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e69e:	85 c0                	test   eax,eax
c001e6a0:	75 40                	jne    c001e6e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6aa:	89 10                	mov    DWORD PTR [eax],edx
c001e6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6cc:	85 c0                	test   eax,eax
c001e6ce:	74 22                	je     c001e6f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	68 46 05 02 c0       	push   0xc0020546
c001e6d8:	e8 df e5 fe ff       	call   c000ccbc <panic(char const*)>
c001e6dd:	83 c4 10             	add    esp,0x10
c001e6e0:	eb 10                	jmp    c001e6f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 50 05 02 c0       	push   0xc0020550
c001e6ea:	e8 cd e5 fe ff       	call   c000ccbc <panic(char const*)>
c001e6ef:	83 c4 10             	add    esp,0x10
c001e6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6f9:	8d 50 01             	lea    edx,[eax+0x1]
c001e6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e700:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e703:	90                   	nop
c001e704:	83 c4 1c             	add    esp,0x1c
c001e707:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e708 <DriverlessDevice::~DriverlessDevice()>:
c001e708:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c001e70d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e711:	89 10                	mov    DWORD PTR [eax],edx
c001e713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e717:	50                   	push   eax
c001e718:	e8 dd 4b ff ff       	call   c00132fa <Device::~Device()>
c001e71d:	83 c4 04             	add    esp,0x4
c001e720:	90                   	nop
c001e721:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e722 <DriverlessDevice::~DriverlessDevice()>:
c001e722:	83 ec 0c             	sub    esp,0xc
c001e725:	83 ec 0c             	sub    esp,0xc
c001e728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e72c:	e8 d7 ff ff ff       	call   c001e708 <DriverlessDevice::~DriverlessDevice()>
c001e731:	83 c4 10             	add    esp,0x10
c001e734:	83 ec 08             	sub    esp,0x8
c001e737:	68 58 01 00 00       	push   0x158
c001e73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e740:	e8 18 3a ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001e745:	83 c4 10             	add    esp,0x10
c001e748:	83 c4 0c             	add    esp,0xc
c001e74b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e74c <LinkedList<Device>::addElement(Device*)>:
c001e74c:	83 ec 0c             	sub    esp,0xc
c001e74f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e754:	75 10                	jne    c001e766 <LinkedList<Device>::addElement(Device*)+0x1a>
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 24 05 02 c0       	push   0xc0020524
c001e75e:	e8 59 e5 fe ff       	call   c000ccbc <panic(char const*)>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e76c:	85 c0                	test   eax,eax
c001e76e:	74 3a                	je     c001e7aa <LinkedList<Device>::addElement(Device*)+0x5e>
c001e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e777:	85 c0                	test   eax,eax
c001e779:	74 2f                	je     c001e7aa <LinkedList<Device>::addElement(Device*)+0x5e>
c001e77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e786:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e790:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e794:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e79e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e7a8:	eb 68                	jmp    c001e812 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b0:	85 c0                	test   eax,eax
c001e7b2:	75 4e                	jne    c001e802 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7bb:	85 c0                	test   eax,eax
c001e7bd:	75 43                	jne    c001e802 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7c7:	89 10                	mov    DWORD PTR [eax],edx
c001e7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7db:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7ec:	85 c0                	test   eax,eax
c001e7ee:	74 22                	je     c001e812 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	68 46 05 02 c0       	push   0xc0020546
c001e7f8:	e8 bf e4 fe ff       	call   c000ccbc <panic(char const*)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	eb 10                	jmp    c001e812 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	68 50 05 02 c0       	push   0xc0020550
c001e80a:	e8 ad e4 fe ff       	call   c000ccbc <panic(char const*)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e816:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e819:	8d 50 01             	lea    edx,[eax+0x1]
c001e81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e820:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e823:	90                   	nop
c001e824:	83 c4 0c             	add    esp,0xc
c001e827:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e828 <LinkedList<Device>::LinkedList()>:
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e839:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e844:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e864:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e86b:	83 ec 0c             	sub    esp,0xc
c001e86e:	68 08 05 02 c0       	push   0xc0020508
c001e873:	e8 26 e3 fe ff       	call   c000cb9e <kprintf(char const*, ...)>
c001e878:	83 c4 10             	add    esp,0x10
c001e87b:	90                   	nop
c001e87c:	83 c4 0c             	add    esp,0xc
c001e87f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e880 <CPU::readDR0()>:
c001e880:	83 ec 10             	sub    esp,0x10
c001e883:	0f 21 c0             	mov    eax,db0
c001e886:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e88a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e892 <CPU::readDR1()>:
c001e892:	83 ec 10             	sub    esp,0x10
c001e895:	0f 21 c8             	mov    eax,db1
c001e898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e89c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001e8a4 <CPU::readDR2()>:
c001e8a4:	83 ec 10             	sub    esp,0x10
c001e8a7:	0f 21 d0             	mov    eax,db2
c001e8aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b2:	83 c4 10             	add    esp,0x10
c001e8b5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001e8b6 <CPU::readDR3()>:
c001e8b6:	83 ec 10             	sub    esp,0x10
c001e8b9:	0f 21 d8             	mov    eax,db3
c001e8bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8c4:	83 c4 10             	add    esp,0x10
c001e8c7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001e8c8 <CPU::readDR6()>:
c001e8c8:	83 ec 10             	sub    esp,0x10
c001e8cb:	0f 21 f0             	mov    eax,db6
c001e8ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8d6:	83 c4 10             	add    esp,0x10
c001e8d9:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001e8da <CPU::readDR7()>:
c001e8da:	83 ec 10             	sub    esp,0x10
c001e8dd:	0f 21 f8             	mov    eax,db7
c001e8e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8e8:	83 c4 10             	add    esp,0x10
c001e8eb:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e8ec <ACPI::~ACPI()>:
c001e8ec:	83 ec 0c             	sub    esp,0xc
c001e8ef:	ba 68 14 02 c0       	mov    edx,0xc0021468
c001e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f8:	89 10                	mov    DWORD PTR [eax],edx
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	83 ec 0c             	sub    esp,0xc
c001e901:	50                   	push   eax
c001e902:	e8 f3 49 ff ff       	call   c00132fa <Device::~Device()>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	90                   	nop
c001e90b:	83 c4 0c             	add    esp,0xc
c001e90e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e910 <ACPI::~ACPI()>:
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e91a:	e8 cd ff ff ff       	call   c001e8ec <ACPI::~ACPI()>
c001e91f:	83 c4 10             	add    esp,0x10
c001e922:	83 ec 08             	sub    esp,0x8
c001e925:	68 68 22 00 00       	push   0x2268
c001e92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e92e:	e8 2a 38 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	83 c4 0c             	add    esp,0xc
c001e939:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e93a <CPU::~CPU()>:
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c001e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e946:	89 10                	mov    DWORD PTR [eax],edx
c001e948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	50                   	push   eax
c001e950:	e8 a5 49 ff ff       	call   c00132fa <Device::~Device()>
c001e955:	83 c4 10             	add    esp,0x10
c001e958:	90                   	nop
c001e959:	83 c4 0c             	add    esp,0xc
c001e95c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e95e <CPU::~CPU()>:
c001e95e:	83 ec 0c             	sub    esp,0xc
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e968:	e8 cd ff ff ff       	call   c001e93a <CPU::~CPU()>
c001e96d:	83 c4 10             	add    esp,0x10
c001e970:	83 ec 08             	sub    esp,0x8
c001e973:	68 98 11 00 00       	push   0x1198
c001e978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e97c:	e8 dc 37 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	83 c4 0c             	add    esp,0xc
c001e987:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001e988 <CPU::writeDR7(unsigned long)>:
c001e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e98c:	0f 23 f8             	mov    db7,eax
c001e98f:	90                   	nop
c001e990:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001e991 <CPU::writeCR4(unsigned long)>:
c001e991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e995:	0f 22 e0             	mov    cr4,eax
c001e998:	90                   	nop
c001e999:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e99a <PCI::~PCI()>:
c001e99a:	83 ec 0c             	sub    esp,0xc
c001e99d:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c001e9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a6:	89 10                	mov    DWORD PTR [eax],edx
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	83 ec 0c             	sub    esp,0xc
c001e9af:	50                   	push   eax
c001e9b0:	e8 55 43 ff ff       	call   c0012d0a <Bus::~Bus()>
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	90                   	nop
c001e9b9:	83 c4 0c             	add    esp,0xc
c001e9bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e9be <PCI::~PCI()>:
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9c8:	e8 cd ff ff ff       	call   c001e99a <PCI::~PCI()>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	83 ec 08             	sub    esp,0x8
c001e9d3:	68 58 01 00 00       	push   0x158
c001e9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9dc:	e8 7c 37 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	83 c4 0c             	add    esp,0xc
c001e9e7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e9e8 <IDE::~IDE()>:
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	ba b8 1c 02 c0       	mov    edx,0xc0021cb8
c001e9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f4:	89 10                	mov    DWORD PTR [eax],edx
c001e9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	50                   	push   eax
c001e9fe:	e8 0d 4e ff ff       	call   c0013810 <HardDiskController::~HardDiskController()>
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	90                   	nop
c001ea07:	83 c4 0c             	add    esp,0xc
c001ea0a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ea0c <IDE::~IDE()>:
c001ea0c:	83 ec 0c             	sub    esp,0xc
c001ea0f:	83 ec 0c             	sub    esp,0xc
c001ea12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea16:	e8 cd ff ff ff       	call   c001e9e8 <IDE::~IDE()>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	83 ec 08             	sub    esp,0x8
c001ea21:	68 70 02 00 00       	push   0x270
c001ea26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea2a:	e8 2e 37 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ea2f:	83 c4 10             	add    esp,0x10
c001ea32:	83 c4 0c             	add    esp,0xc
c001ea35:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ea36 <ATA::~ATA()>:
c001ea36:	83 ec 0c             	sub    esp,0xc
c001ea39:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea42:	89 10                	mov    DWORD PTR [eax],edx
c001ea44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	50                   	push   eax
c001ea4c:	e8 9d 4e ff ff       	call   c00138ee <PhysicalDisk::~PhysicalDisk()>
c001ea51:	83 c4 10             	add    esp,0x10
c001ea54:	90                   	nop
c001ea55:	83 c4 0c             	add    esp,0xc
c001ea58:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ea5a <ATA::~ATA()>:
c001ea5a:	83 ec 0c             	sub    esp,0xc
c001ea5d:	83 ec 0c             	sub    esp,0xc
c001ea60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea64:	e8 cd ff ff ff       	call   c001ea36 <ATA::~ATA()>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 ec 08             	sub    esp,0x8
c001ea6f:	68 7c 01 00 00       	push   0x17c
c001ea74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea78:	e8 e0 36 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ea7d:	83 c4 10             	add    esp,0x10
c001ea80:	83 c4 0c             	add    esp,0xc
c001ea83:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ea84 <ATAPI::~ATAPI()>:
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c001ea8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea90:	89 10                	mov    DWORD PTR [eax],edx
c001ea92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	50                   	push   eax
c001ea9a:	e8 4f 4e ff ff       	call   c00138ee <PhysicalDisk::~PhysicalDisk()>
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	90                   	nop
c001eaa3:	83 c4 0c             	add    esp,0xc
c001eaa6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001eaa8 <ATAPI::~ATAPI()>:
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eab2:	e8 cd ff ff ff       	call   c001ea84 <ATAPI::~ATAPI()>
c001eab7:	83 c4 10             	add    esp,0x10
c001eaba:	83 ec 08             	sub    esp,0x8
c001eabd:	68 80 01 00 00       	push   0x180
c001eac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac6:	e8 92 36 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	83 c4 0c             	add    esp,0xc
c001ead1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ead2 <AVX::~AVX()>:
c001ead2:	83 ec 0c             	sub    esp,0xc
c001ead5:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	89 10                	mov    DWORD PTR [eax],edx
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	50                   	push   eax
c001eae8:	e8 85 4e ff ff       	call   c0013972 <FPU::~FPU()>
c001eaed:	83 c4 10             	add    esp,0x10
c001eaf0:	90                   	nop
c001eaf1:	83 c4 0c             	add    esp,0xc
c001eaf4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001eaf6 <AVX::~AVX()>:
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	83 ec 0c             	sub    esp,0xc
c001eafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb00:	e8 cd ff ff ff       	call   c001ead2 <AVX::~AVX()>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	83 ec 08             	sub    esp,0x8
c001eb0b:	68 58 01 00 00       	push   0x158
c001eb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb14:	e8 44 36 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001eb19:	83 c4 10             	add    esp,0x10
c001eb1c:	83 c4 0c             	add    esp,0xc
c001eb1f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001eb20 <MMX::~MMX()>:
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c001eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2c:	89 10                	mov    DWORD PTR [eax],edx
c001eb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb32:	83 ec 0c             	sub    esp,0xc
c001eb35:	50                   	push   eax
c001eb36:	e8 37 4e ff ff       	call   c0013972 <FPU::~FPU()>
c001eb3b:	83 c4 10             	add    esp,0x10
c001eb3e:	90                   	nop
c001eb3f:	83 c4 0c             	add    esp,0xc
c001eb42:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001eb44 <MMX::~MMX()>:
c001eb44:	83 ec 0c             	sub    esp,0xc
c001eb47:	83 ec 0c             	sub    esp,0xc
c001eb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb4e:	e8 cd ff ff ff       	call   c001eb20 <MMX::~MMX()>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	83 ec 08             	sub    esp,0x8
c001eb59:	68 58 01 00 00       	push   0x158
c001eb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb62:	e8 f6 35 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001eb67:	83 c4 10             	add    esp,0x10
c001eb6a:	83 c4 0c             	add    esp,0xc
c001eb6d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001eb6e <SSE::~SSE()>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c001eb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7a:	89 10                	mov    DWORD PTR [eax],edx
c001eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb80:	83 ec 0c             	sub    esp,0xc
c001eb83:	50                   	push   eax
c001eb84:	e8 e9 4d ff ff       	call   c0013972 <FPU::~FPU()>
c001eb89:	83 c4 10             	add    esp,0x10
c001eb8c:	90                   	nop
c001eb8d:	83 c4 0c             	add    esp,0xc
c001eb90:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001eb92 <SSE::~SSE()>:
c001eb92:	83 ec 0c             	sub    esp,0xc
c001eb95:	83 ec 0c             	sub    esp,0xc
c001eb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb9c:	e8 cd ff ff ff       	call   c001eb6e <SSE::~SSE()>
c001eba1:	83 c4 10             	add    esp,0x10
c001eba4:	83 ec 08             	sub    esp,0x8
c001eba7:	68 58 01 00 00       	push   0x158
c001ebac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebb0:	e8 a8 35 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	83 c4 0c             	add    esp,0xc
c001ebbb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ebbc <x87::~x87()>:
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	ba 70 1e 02 c0       	mov    edx,0xc0021e70
c001ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc8:	89 10                	mov    DWORD PTR [eax],edx
c001ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	50                   	push   eax
c001ebd2:	e8 9b 4d ff ff       	call   c0013972 <FPU::~FPU()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	90                   	nop
c001ebdb:	83 c4 0c             	add    esp,0xc
c001ebde:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ebe0 <x87::~x87()>:
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	83 ec 0c             	sub    esp,0xc
c001ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebea:	e8 cd ff ff ff       	call   c001ebbc <x87::~x87()>
c001ebef:	83 c4 10             	add    esp,0x10
c001ebf2:	83 ec 08             	sub    esp,0x8
c001ebf5:	68 58 01 00 00       	push   0x158
c001ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebfe:	e8 5a 35 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ec03:	83 c4 10             	add    esp,0x10
c001ec06:	83 c4 0c             	add    esp,0xc
c001ec09:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ec0a <IOAPIC::~IOAPIC()>:
c001ec0a:	83 ec 0c             	sub    esp,0xc
c001ec0d:	ba c8 1f 02 c0       	mov    edx,0xc0021fc8
c001ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec16:	89 10                	mov    DWORD PTR [eax],edx
c001ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1c:	83 ec 0c             	sub    esp,0xc
c001ec1f:	50                   	push   eax
c001ec20:	e8 d5 46 ff ff       	call   c00132fa <Device::~Device()>
c001ec25:	83 c4 10             	add    esp,0x10
c001ec28:	90                   	nop
c001ec29:	83 c4 0c             	add    esp,0xc
c001ec2c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ec2e <IOAPIC::~IOAPIC()>:
c001ec2e:	83 ec 0c             	sub    esp,0xc
c001ec31:	83 ec 0c             	sub    esp,0xc
c001ec34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec38:	e8 cd ff ff ff       	call   c001ec0a <IOAPIC::~IOAPIC()>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	83 ec 08             	sub    esp,0x8
c001ec43:	68 68 01 00 00       	push   0x168
c001ec48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec4c:	e8 0c 35 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	83 c4 0c             	add    esp,0xc
c001ec57:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001ec58 <APIC::~APIC()>:
c001ec58:	83 ec 0c             	sub    esp,0xc
c001ec5b:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c001ec60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec64:	89 10                	mov    DWORD PTR [eax],edx
c001ec66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6a:	83 ec 0c             	sub    esp,0xc
c001ec6d:	50                   	push   eax
c001ec6e:	e8 a3 51 ff ff       	call   c0013e16 <InterruptController::~InterruptController()>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	90                   	nop
c001ec77:	83 c4 0c             	add    esp,0xc
c001ec7a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001ec7c <APIC::~APIC()>:
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	83 ec 0c             	sub    esp,0xc
c001ec82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec86:	e8 cd ff ff ff       	call   c001ec58 <APIC::~APIC()>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	83 ec 08             	sub    esp,0x8
c001ec91:	68 58 21 00 00       	push   0x2158
c001ec96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec9a:	e8 be 34 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	83 c4 0c             	add    esp,0xc
c001eca5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001eca6 <PIC::~PIC()>:
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	ba 18 20 02 c0       	mov    edx,0xc0022018
c001ecae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb2:	89 10                	mov    DWORD PTR [eax],edx
c001ecb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb8:	83 ec 0c             	sub    esp,0xc
c001ecbb:	50                   	push   eax
c001ecbc:	e8 55 51 ff ff       	call   c0013e16 <InterruptController::~InterruptController()>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	90                   	nop
c001ecc5:	83 c4 0c             	add    esp,0xc
c001ecc8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001ecca <PIC::~PIC()>:
c001ecca:	83 ec 0c             	sub    esp,0xc
c001eccd:	83 ec 0c             	sub    esp,0xc
c001ecd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecd4:	e8 cd ff ff ff       	call   c001eca6 <PIC::~PIC()>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	83 ec 08             	sub    esp,0x8
c001ecdf:	68 58 21 00 00       	push   0x2158
c001ece4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece8:	e8 70 34 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001eced:	83 c4 10             	add    esp,0x10
c001ecf0:	83 c4 0c             	add    esp,0xc
c001ecf3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ecf4 <APICTimer::~APICTimer()>:
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	ba 6c 20 02 c0       	mov    edx,0xc002206c
c001ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed00:	89 10                	mov    DWORD PTR [eax],edx
c001ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed06:	83 ec 0c             	sub    esp,0xc
c001ed09:	50                   	push   eax
c001ed0a:	e8 d7 66 ff ff       	call   c00153e6 <Timer::~Timer()>
c001ed0f:	83 c4 10             	add    esp,0x10
c001ed12:	90                   	nop
c001ed13:	83 c4 0c             	add    esp,0xc
c001ed16:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ed18 <APICTimer::~APICTimer()>:
c001ed18:	83 ec 0c             	sub    esp,0xc
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed22:	e8 cd ff ff ff       	call   c001ecf4 <APICTimer::~APICTimer()>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	83 ec 08             	sub    esp,0x8
c001ed2d:	68 60 01 00 00       	push   0x160
c001ed32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed36:	e8 22 34 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ed3b:	83 c4 10             	add    esp,0x10
c001ed3e:	83 c4 0c             	add    esp,0xc
c001ed41:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ed42 <PIT::~PIT()>:
c001ed42:	83 ec 0c             	sub    esp,0xc
c001ed45:	ba bc 20 02 c0       	mov    edx,0xc00220bc
c001ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4e:	89 10                	mov    DWORD PTR [eax],edx
c001ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	50                   	push   eax
c001ed58:	e8 89 66 ff ff       	call   c00153e6 <Timer::~Timer()>
c001ed5d:	83 c4 10             	add    esp,0x10
c001ed60:	90                   	nop
c001ed61:	83 c4 0c             	add    esp,0xc
c001ed64:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ed66 <PIT::~PIT()>:
c001ed66:	83 ec 0c             	sub    esp,0xc
c001ed69:	83 ec 0c             	sub    esp,0xc
c001ed6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed70:	e8 cd ff ff ff       	call   c001ed42 <PIT::~PIT()>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	83 ec 08             	sub    esp,0x8
c001ed7b:	68 5c 01 00 00       	push   0x15c
c001ed80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed84:	e8 d4 33 ff ff       	call   c001215d <operator delete(void*, unsigned long)>
c001ed89:	83 c4 10             	add    esp,0x10
c001ed8c:	83 c4 0c             	add    esp,0xc
c001ed8f:	c3                   	ret    
